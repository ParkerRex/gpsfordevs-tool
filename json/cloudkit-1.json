[
  {
    "title": "recordID | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncenginefetchedrecorddeletion/4155523-recordid",
    "html": "See Also\nUnderstanding the deletion\nrecordType\nThe record type of the deleted record."
  },
  {
    "title": "recordType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncenginefetchedrecorddeletion/4155524-recordtype",
    "html": "See Also\nUnderstanding the deletion\nrecordID\nThe deleted record’s unique identifier."
  },
  {
    "title": "zoneID | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncenginefetchedzonedeletion/4155530-zoneid",
    "html": "See Also\nUnderstanding the deletion\nreason\nThe reason for the deletion.\nCKSyncEngineZoneDeletionReason\nDescribes the reason for a record zone deletion."
  },
  {
    "title": "reason | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncenginefetchedzonedeletion/4165313-reason",
    "html": "See Also\nUnderstanding the deletion\nzoneID\nThe identifier of the deleted record zone.\nCKSyncEngineZoneDeletionReason\nDescribes the reason for a record zone deletion."
  },
  {
    "title": "error | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncenginedidfetchrecordzonechangesevent/4155488-error",
    "html": "Discussion\n\nA nil value indicates a successful fetch."
  },
  {
    "title": "CKSyncEngineEventTypeWillFetchChanges | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncengineeventtype/cksyncengineeventtypewillfetchchanges",
    "html": "See Also\nEvent types\nCKSyncEngineEventTypeStateUpdate\nAn event indicating an update to the sync engine’s state.\nCKSyncEngineEventTypeAccountChange\nAn event indicating a change to the device’s iCloud account.\nCKSyncEngineEventTypeFetchedDatabaseChanges\nAn event indicating there are fetched database changes to process.\nCKSyncEngineEventTypeFetchedRecordZoneChanges\nAn event indicating there are fetched record zone changes to process.\nCKSyncEngineEventTypeSentDatabaseChanges\nAn event indicating a sent batch of database changes.\nCKSyncEngineEventTypeSentRecordZoneChanges\nAn event indicating a sent batch of record zone changes.\nCKSyncEngineEventTypeWillFetchRecordZoneChanges\nAn event indicating an imminent fetch of changes in a record zone.\nCKSyncEngineEventTypeDidFetchRecordZoneChanges\nAn event that indicates the record zone fetch is done.\nCKSyncEngineEventTypeDidFetchChanges\nAn event that indicates the database fetch is done.\nCKSyncEngineEventTypeWillSendChanges\nAn event indicating an imminent send of local changes.\nCKSyncEngineEventTypeDidSendChanges\nAn event that indicates a finished send operation."
  },
  {
    "title": "CKSyncEngineEventTypeSentDatabaseChanges | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncengineeventtype/cksyncengineeventtypesentdatabasechanges",
    "html": "See Also\nEvent types\nCKSyncEngineEventTypeStateUpdate\nAn event indicating an update to the sync engine’s state.\nCKSyncEngineEventTypeAccountChange\nAn event indicating a change to the device’s iCloud account.\nCKSyncEngineEventTypeFetchedDatabaseChanges\nAn event indicating there are fetched database changes to process.\nCKSyncEngineEventTypeFetchedRecordZoneChanges\nAn event indicating there are fetched record zone changes to process.\nCKSyncEngineEventTypeSentRecordZoneChanges\nAn event indicating a sent batch of record zone changes.\nCKSyncEngineEventTypeWillFetchChanges\nAn event indicating an imminent database fetch.\nCKSyncEngineEventTypeWillFetchRecordZoneChanges\nAn event indicating an imminent fetch of changes in a record zone.\nCKSyncEngineEventTypeDidFetchRecordZoneChanges\nAn event that indicates the record zone fetch is done.\nCKSyncEngineEventTypeDidFetchChanges\nAn event that indicates the database fetch is done.\nCKSyncEngineEventTypeWillSendChanges\nAn event indicating an imminent send of local changes.\nCKSyncEngineEventTypeDidSendChanges\nAn event that indicates a finished send operation."
  },
  {
    "title": "CKSyncEngineEventTypeDidSendChanges | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncengineeventtype/cksyncengineeventtypedidsendchanges",
    "html": "See Also\nEvent types\nCKSyncEngineEventTypeStateUpdate\nAn event indicating an update to the sync engine’s state.\nCKSyncEngineEventTypeAccountChange\nAn event indicating a change to the device’s iCloud account.\nCKSyncEngineEventTypeFetchedDatabaseChanges\nAn event indicating there are fetched database changes to process.\nCKSyncEngineEventTypeFetchedRecordZoneChanges\nAn event indicating there are fetched record zone changes to process.\nCKSyncEngineEventTypeSentDatabaseChanges\nAn event indicating a sent batch of database changes.\nCKSyncEngineEventTypeSentRecordZoneChanges\nAn event indicating a sent batch of record zone changes.\nCKSyncEngineEventTypeWillFetchChanges\nAn event indicating an imminent database fetch.\nCKSyncEngineEventTypeWillFetchRecordZoneChanges\nAn event indicating an imminent fetch of changes in a record zone.\nCKSyncEngineEventTypeDidFetchRecordZoneChanges\nAn event that indicates the record zone fetch is done.\nCKSyncEngineEventTypeDidFetchChanges\nAn event that indicates the database fetch is done.\nCKSyncEngineEventTypeWillSendChanges\nAn event indicating an imminent send of local changes."
  },
  {
    "title": "CKSyncEngineEventTypeFetchedDatabaseChanges | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncengineeventtype/cksyncengineeventtypefetcheddatabasechanges",
    "html": "See Also\nEvent types\nCKSyncEngineEventTypeStateUpdate\nAn event indicating an update to the sync engine’s state.\nCKSyncEngineEventTypeAccountChange\nAn event indicating a change to the device’s iCloud account.\nCKSyncEngineEventTypeFetchedRecordZoneChanges\nAn event indicating there are fetched record zone changes to process.\nCKSyncEngineEventTypeSentDatabaseChanges\nAn event indicating a sent batch of database changes.\nCKSyncEngineEventTypeSentRecordZoneChanges\nAn event indicating a sent batch of record zone changes.\nCKSyncEngineEventTypeWillFetchChanges\nAn event indicating an imminent database fetch.\nCKSyncEngineEventTypeWillFetchRecordZoneChanges\nAn event indicating an imminent fetch of changes in a record zone.\nCKSyncEngineEventTypeDidFetchRecordZoneChanges\nAn event that indicates the record zone fetch is done.\nCKSyncEngineEventTypeDidFetchChanges\nAn event that indicates the database fetch is done.\nCKSyncEngineEventTypeWillSendChanges\nAn event indicating an imminent send of local changes.\nCKSyncEngineEventTypeDidSendChanges\nAn event that indicates a finished send operation."
  },
  {
    "title": "CKSyncEngineEventTypeAccountChange | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncengineeventtype/cksyncengineeventtypeaccountchange",
    "html": "See Also\nEvent types\nCKSyncEngineEventTypeStateUpdate\nAn event indicating an update to the sync engine’s state.\nCKSyncEngineEventTypeFetchedDatabaseChanges\nAn event indicating there are fetched database changes to process.\nCKSyncEngineEventTypeFetchedRecordZoneChanges\nAn event indicating there are fetched record zone changes to process.\nCKSyncEngineEventTypeSentDatabaseChanges\nAn event indicating a sent batch of database changes.\nCKSyncEngineEventTypeSentRecordZoneChanges\nAn event indicating a sent batch of record zone changes.\nCKSyncEngineEventTypeWillFetchChanges\nAn event indicating an imminent database fetch.\nCKSyncEngineEventTypeWillFetchRecordZoneChanges\nAn event indicating an imminent fetch of changes in a record zone.\nCKSyncEngineEventTypeDidFetchRecordZoneChanges\nAn event that indicates the record zone fetch is done.\nCKSyncEngineEventTypeDidFetchChanges\nAn event that indicates the database fetch is done.\nCKSyncEngineEventTypeWillSendChanges\nAn event indicating an imminent send of local changes.\nCKSyncEngineEventTypeDidSendChanges\nAn event that indicates a finished send operation."
  },
  {
    "title": "CKSyncEngineEventTypeWillSendChanges | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncengineeventtype/cksyncengineeventtypewillsendchanges",
    "html": "See Also\nEvent types\nCKSyncEngineEventTypeStateUpdate\nAn event indicating an update to the sync engine’s state.\nCKSyncEngineEventTypeAccountChange\nAn event indicating a change to the device’s iCloud account.\nCKSyncEngineEventTypeFetchedDatabaseChanges\nAn event indicating there are fetched database changes to process.\nCKSyncEngineEventTypeFetchedRecordZoneChanges\nAn event indicating there are fetched record zone changes to process.\nCKSyncEngineEventTypeSentDatabaseChanges\nAn event indicating a sent batch of database changes.\nCKSyncEngineEventTypeSentRecordZoneChanges\nAn event indicating a sent batch of record zone changes.\nCKSyncEngineEventTypeWillFetchChanges\nAn event indicating an imminent database fetch.\nCKSyncEngineEventTypeWillFetchRecordZoneChanges\nAn event indicating an imminent fetch of changes in a record zone.\nCKSyncEngineEventTypeDidFetchRecordZoneChanges\nAn event that indicates the record zone fetch is done.\nCKSyncEngineEventTypeDidFetchChanges\nAn event that indicates the database fetch is done.\nCKSyncEngineEventTypeDidSendChanges\nAn event that indicates a finished send operation."
  },
  {
    "title": "CKSyncEngineEventTypeDidFetchChanges | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncengineeventtype/cksyncengineeventtypedidfetchchanges",
    "html": "See Also\nEvent types\nCKSyncEngineEventTypeStateUpdate\nAn event indicating an update to the sync engine’s state.\nCKSyncEngineEventTypeAccountChange\nAn event indicating a change to the device’s iCloud account.\nCKSyncEngineEventTypeFetchedDatabaseChanges\nAn event indicating there are fetched database changes to process.\nCKSyncEngineEventTypeFetchedRecordZoneChanges\nAn event indicating there are fetched record zone changes to process.\nCKSyncEngineEventTypeSentDatabaseChanges\nAn event indicating a sent batch of database changes.\nCKSyncEngineEventTypeSentRecordZoneChanges\nAn event indicating a sent batch of record zone changes.\nCKSyncEngineEventTypeWillFetchChanges\nAn event indicating an imminent database fetch.\nCKSyncEngineEventTypeWillFetchRecordZoneChanges\nAn event indicating an imminent fetch of changes in a record zone.\nCKSyncEngineEventTypeDidFetchRecordZoneChanges\nAn event that indicates the record zone fetch is done.\nCKSyncEngineEventTypeWillSendChanges\nAn event indicating an imminent send of local changes.\nCKSyncEngineEventTypeDidSendChanges\nAn event that indicates a finished send operation."
  },
  {
    "title": "CKSyncEngineEventTypeWillFetchRecordZoneChanges | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncengineeventtype/cksyncengineeventtypewillfetchrecordzonechanges",
    "html": "See Also\nEvent types\nCKSyncEngineEventTypeStateUpdate\nAn event indicating an update to the sync engine’s state.\nCKSyncEngineEventTypeAccountChange\nAn event indicating a change to the device’s iCloud account.\nCKSyncEngineEventTypeFetchedDatabaseChanges\nAn event indicating there are fetched database changes to process.\nCKSyncEngineEventTypeFetchedRecordZoneChanges\nAn event indicating there are fetched record zone changes to process.\nCKSyncEngineEventTypeSentDatabaseChanges\nAn event indicating a sent batch of database changes.\nCKSyncEngineEventTypeSentRecordZoneChanges\nAn event indicating a sent batch of record zone changes.\nCKSyncEngineEventTypeWillFetchChanges\nAn event indicating an imminent database fetch.\nCKSyncEngineEventTypeDidFetchRecordZoneChanges\nAn event that indicates the record zone fetch is done.\nCKSyncEngineEventTypeDidFetchChanges\nAn event that indicates the database fetch is done.\nCKSyncEngineEventTypeWillSendChanges\nAn event indicating an imminent send of local changes.\nCKSyncEngineEventTypeDidSendChanges\nAn event that indicates a finished send operation."
  },
  {
    "title": "CKSyncEngineEventTypeSentRecordZoneChanges | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncengineeventtype/cksyncengineeventtypesentrecordzonechanges",
    "html": "See Also\nEvent types\nCKSyncEngineEventTypeStateUpdate\nAn event indicating an update to the sync engine’s state.\nCKSyncEngineEventTypeAccountChange\nAn event indicating a change to the device’s iCloud account.\nCKSyncEngineEventTypeFetchedDatabaseChanges\nAn event indicating there are fetched database changes to process.\nCKSyncEngineEventTypeFetchedRecordZoneChanges\nAn event indicating there are fetched record zone changes to process.\nCKSyncEngineEventTypeSentDatabaseChanges\nAn event indicating a sent batch of database changes.\nCKSyncEngineEventTypeWillFetchChanges\nAn event indicating an imminent database fetch.\nCKSyncEngineEventTypeWillFetchRecordZoneChanges\nAn event indicating an imminent fetch of changes in a record zone.\nCKSyncEngineEventTypeDidFetchRecordZoneChanges\nAn event that indicates the record zone fetch is done.\nCKSyncEngineEventTypeDidFetchChanges\nAn event that indicates the database fetch is done.\nCKSyncEngineEventTypeWillSendChanges\nAn event indicating an imminent send of local changes.\nCKSyncEngineEventTypeDidSendChanges\nAn event that indicates a finished send operation."
  },
  {
    "title": "CKSyncEngineEventTypeDidFetchRecordZoneChanges | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncengineeventtype/cksyncengineeventtypedidfetchrecordzonechanges",
    "html": "See Also\nEvent types\nCKSyncEngineEventTypeStateUpdate\nAn event indicating an update to the sync engine’s state.\nCKSyncEngineEventTypeAccountChange\nAn event indicating a change to the device’s iCloud account.\nCKSyncEngineEventTypeFetchedDatabaseChanges\nAn event indicating there are fetched database changes to process.\nCKSyncEngineEventTypeFetchedRecordZoneChanges\nAn event indicating there are fetched record zone changes to process.\nCKSyncEngineEventTypeSentDatabaseChanges\nAn event indicating a sent batch of database changes.\nCKSyncEngineEventTypeSentRecordZoneChanges\nAn event indicating a sent batch of record zone changes.\nCKSyncEngineEventTypeWillFetchChanges\nAn event indicating an imminent database fetch.\nCKSyncEngineEventTypeWillFetchRecordZoneChanges\nAn event indicating an imminent fetch of changes in a record zone.\nCKSyncEngineEventTypeDidFetchChanges\nAn event that indicates the database fetch is done.\nCKSyncEngineEventTypeWillSendChanges\nAn event indicating an imminent send of local changes.\nCKSyncEngineEventTypeDidSendChanges\nAn event that indicates a finished send operation."
  },
  {
    "title": "CKSyncEngineEventTypeFetchedRecordZoneChanges | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncengineeventtype/cksyncengineeventtypefetchedrecordzonechanges",
    "html": "See Also\nEvent types\nCKSyncEngineEventTypeStateUpdate\nAn event indicating an update to the sync engine’s state.\nCKSyncEngineEventTypeAccountChange\nAn event indicating a change to the device’s iCloud account.\nCKSyncEngineEventTypeFetchedDatabaseChanges\nAn event indicating there are fetched database changes to process.\nCKSyncEngineEventTypeSentDatabaseChanges\nAn event indicating a sent batch of database changes.\nCKSyncEngineEventTypeSentRecordZoneChanges\nAn event indicating a sent batch of record zone changes.\nCKSyncEngineEventTypeWillFetchChanges\nAn event indicating an imminent database fetch.\nCKSyncEngineEventTypeWillFetchRecordZoneChanges\nAn event indicating an imminent fetch of changes in a record zone.\nCKSyncEngineEventTypeDidFetchRecordZoneChanges\nAn event that indicates the record zone fetch is done.\nCKSyncEngineEventTypeDidFetchChanges\nAn event that indicates the database fetch is done.\nCKSyncEngineEventTypeWillSendChanges\nAn event indicating an imminent send of local changes.\nCKSyncEngineEventTypeDidSendChanges\nAn event that indicates a finished send operation."
  },
  {
    "title": "==(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncengine/pendingrecordzonechange/4183734",
    "html": "Parameters\na\n\nA value to compare.\n\nb\n\nAnother value to compare.\n\nReturn Value\n\ntrue if the two values are equal; otherwise, false.\n\nSee Also\nIdentifying and comparing changes\nvar hashValue: Int\nThe hash value.\nfunc hash(into: inout Hasher)\nHashes the essential attributes of the change using the provided hasher.\nstatic func != (CKSyncEngine.PendingRecordZoneChange, CKSyncEngine.PendingRecordZoneChange) -> Bool\nReturns a Boolean value that indicates whether two values are unequal."
  },
  {
    "title": "deletions | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncenginefetcheddatabasechangesevent/4155520-deletions",
    "html": "See Also\nAccessing changes\nCKSyncEngineFetchedZoneDeletion\nAn object that describes the deletion of a record zone.\nmodifications\nThe modified record zones."
  },
  {
    "title": "initWithPendingChanges:recordProvider: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncenginerecordzonechangebatch/4183293-initwithpendingchanges",
    "html": "Parameters\npendingChanges\n\nThe record zone changes to process.\n\nrecordProvider\n\nA block that returns the record for the specified record identifier.\n\nReturn Value\n\nThe batch of records to modify, or nil if there are no pending changes.\n\nDiscussion\n\nThis method iterates over pendingChanges and adds the necessary information to the new batch, until there are no more changes or the size of the batch reaches the maximum limit. If the type of change is a record save, the method asks the specified recordProvider block for that record. If the closure returns nil, the method skips that change.\n\nSee Also\nCreating a batch\nCKSyncEnginePendingRecordZoneChange\nDescribes an unsent record modification.\n- initWithRecordsToSave:recordIDsToDelete:atomicByZone:\nCreates a batch of records to modify."
  },
  {
    "title": "CKSyncEngineFetchedRecordDeletion | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncenginefetchedrecorddeletion",
    "html": "Topics\nUnderstanding the deletion\nrecordID\nThe deleted record’s unique identifier.\nrecordType\nThe record type of the deleted record.\nRelationships\nInherits From\nNSObject\nSee Also\nAccessing changes\ndeletions\nThe deleted records.\nmodifications\nThe modified records."
  },
  {
    "title": "CKSyncEngineFetchedZoneDeletion | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncenginefetchedzonedeletion",
    "html": "Topics\nUnderstanding the deletion\nzoneID\nThe identifier of the deleted record zone.\nreason\nThe reason for the deletion.\nCKSyncEngineZoneDeletionReason\nDescribes the reason for a record zone deletion.\nRelationships\nInherits From\nNSObject\nSee Also\nAccessing changes\ndeletions\nThe deleted record zones.\nmodifications\nThe modified record zones."
  },
  {
    "title": "modifications | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncenginefetchedrecordzonechangesevent/4155527-modifications",
    "html": "See Also\nAccessing changes\ndeletions\nThe deleted records.\nCKSyncEngineFetchedRecordDeletion\nAn object that describes the deletion of an individual record."
  },
  {
    "title": "deletions | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncenginefetchedrecordzonechangesevent/4155526-deletions",
    "html": "See Also\nAccessing changes\nCKSyncEngineFetchedRecordDeletion\nAn object that describes the deletion of an individual record.\nmodifications\nThe modified records."
  },
  {
    "title": "modifications | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncenginefetcheddatabasechangesevent/4155521-modifications",
    "html": "See Also\nAccessing changes\ndeletions\nThe deleted record zones.\nCKSyncEngineFetchedZoneDeletion\nAn object that describes the deletion of a record zone."
  },
  {
    "title": "atomicByZone | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncenginerecordzonechangebatch/4183292-atomicbyzone",
    "html": "Discussion\n\nWhen YES, CloudKit processes record changes atomically by record zone, and if any individual change fails, all other changes in that record’s record zone fail and return an error of type CKErrorBatchRequestFailed.\n\nThe default value is NO."
  },
  {
    "title": "recordIDsToDelete | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncenginerecordzonechangebatch/4183295-recordidstodelete",
    "html": "See Also\nManaging the records\nrecordsToSave\nThe records to save."
  },
  {
    "title": "hash(into:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncengine/pendingrecordzonechange/4183737-hash",
    "html": "Parameters\nhasher\n\nThe hasher to use when combining the attributes of the change.\n\nRelationships\nFrom Protocol\nHashable\nSee Also\nIdentifying and comparing changes\nvar hashValue: Int\nThe hash value.\nstatic func == (CKSyncEngine.PendingRecordZoneChange, CKSyncEngine.PendingRecordZoneChange) -> Bool\nReturns a Boolean value that indicates whether two values are equal.\nstatic func != (CKSyncEngine.PendingRecordZoneChange, CKSyncEngine.PendingRecordZoneChange) -> Bool\nReturns a Boolean value that indicates whether two values are unequal."
  },
  {
    "title": "recordsToSave | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncenginerecordzonechangebatch/4183296-recordstosave",
    "html": "See Also\nManaging the records\nrecordIDsToDelete\nThe unique identifiers of the records to delete."
  },
  {
    "title": "!=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncengine/pendingrecordzonechange/4183733",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nReturn Value\n\ntrue if the two values are unequal; otherwise, false.\n\nSee Also\nIdentifying and comparing changes\nvar hashValue: Int\nThe hash value.\nfunc hash(into: inout Hasher)\nHashes the essential attributes of the change using the provided hasher.\nstatic func == (CKSyncEngine.PendingRecordZoneChange, CKSyncEngine.PendingRecordZoneChange) -> Bool\nReturns a Boolean value that indicates whether two values are equal."
  },
  {
    "title": "description | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncengine/pendingrecordzonechange/4183736-description",
    "html": "Relationships\nFrom Protocol\nCustomStringConvertible"
  },
  {
    "title": "initWithRecordsToSave:recordIDsToDelete:atomicByZone: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncenginerecordzonechangebatch/4183294-initwithrecordstosave",
    "html": "Parameters\nrecordsToSave\n\nThe records to save.\n\nrecordIDsToDelete\n\nThe identifiers of the records to delete.\n\natomicByZone\n\nA Boolean value that determines whether CloudKit modifies the specified records atomically by record zone.\n\nReturn Value\n\nAn initialized change batch, or nil if CloudKit can’t create one.\n\nDiscussion\n\nImportant\n\nWhen using this initializer to create batches, consider the number of records you specify and their combined size. If you specify too many records, or their combined size is too large, the send operation may fail with an error of type CKErrorLimitExceeded.\n\nSee Also\nCreating a batch\n- initWithPendingChanges:recordProvider:\nCreates a batch of records to modify using the provided record zone changes.\nCKSyncEnginePendingRecordZoneChange\nDescribes an unsent record modification."
  },
  {
    "title": "deletedZoneIDs | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncenginesentdatabasechangesevent/4155532-deletedzoneids",
    "html": "See Also\nAccessing successful changes\nsavedZones\nThe modified record zones."
  },
  {
    "title": "failedZoneSaves | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncenginesentdatabasechangesevent/4155534-failedzonesaves",
    "html": "See Also\nAccessing failed changes\nfailedZoneDeletes\nThe unique identifiers of the record zones CloudKit is unable to delete, and the reasons why.\nCKSyncEngineFailedZoneSave\nAn object that describes an unsuccessful attempt to modify a single record zone."
  },
  {
    "title": "failedZoneDeletes | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncenginesentdatabasechangesevent/4155533-failedzonedeletes",
    "html": "See Also\nAccessing failed changes\nfailedZoneSaves\nThe record zones that CloudKit is unable to modify.\nCKSyncEngineFailedZoneSave\nAn object that describes an unsuccessful attempt to modify a single record zone."
  },
  {
    "title": "savedZones | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncenginesentdatabasechangesevent/4155535-savedzones",
    "html": "See Also\nAccessing successful changes\ndeletedZoneIDs\nThe unique identifiers of the deleted record zones."
  },
  {
    "title": "CKSyncEngineWillSendChangesEvent | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncenginewillsendchangesevent",
    "html": "Topics\nAccessing the context\ncontext\nThe context of the imminent send request.\nRelationships\nInherits From\nCKSyncEngineEvent\nSee Also\nAccessing send events\nwillSendChangesEvent\nThe event downcast to the subclass that represents an imminent send operation.\nsentDatabaseChangesEvent\nThe event downcast to the subclass that represents a sent batch of database changes.\nCKSyncEngineSentDatabaseChangesEvent\nAn object that provides information about a sent batch of database changes.\nsentRecordZoneChangesEvent\nThe event downcast to the subclass that represents a sent batch of record zone changes.\nCKSyncEngineSentRecordZoneChangesEvent\nAn object that provides information about a sent batch of record zone changes.\ndidSendChangesEvent\nThe event downcast to the subclass that represents a completed send operation.\nCKSyncEngineDidSendChangesEvent\nAn object that provides information about a finished send operation."
  },
  {
    "title": "savedRecords | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncenginesentrecordzonechangesevent/4183290-savedrecords",
    "html": "See Also\nAccessing successful changes\ndeletedRecordIDs\nThe unique identifiers of the deleted records."
  },
  {
    "title": "deletedRecordIDs | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncenginesentrecordzonechangesevent/4183287-deletedrecordids",
    "html": "See Also\nAccessing successful changes\nsavedRecords\nThe modified records."
  },
  {
    "title": "CKSyncEngineFailedZoneSave | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncenginefailedzonesave",
    "html": "Topics\nAccessing the record zone\nrecordZone\nThe record zone that CloudKit is unable to modify.\nAccessing the error\nerror\nA error that describes the reason for the unsuccessful attempt to modify the associated record zone.\nRelationships\nInherits From\nNSObject\nSee Also\nAccessing failed changes\nfailedZoneDeletes\nThe unique identifiers of the record zones CloudKit is unable to delete, and the reasons why.\nfailedZoneSaves\nThe record zones that CloudKit is unable to modify."
  },
  {
    "title": "CKSyncEngineFailedRecordSave | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncenginefailedrecordsave",
    "html": "Topics\nAccessing the record\nrecord\nThe record that CloudKit is unable to modify.\nAccessing the error\nerror\nA error that describes the reason for the unsuccessful attempt to modify the associated record.\nRelationships\nInherits From\nNSObject\nSee Also\nAccessing failed changes\nfailedRecordDeletes\nThe unique identifiers of the records CloudKit is unable to delete, and the reasons why.\nfailedRecordSaves\nThe records that CloudKit is unable to modify."
  },
  {
    "title": "failedRecordDeletes | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncenginesentrecordzonechangesevent/4183288-failedrecorddeletes",
    "html": "See Also\nAccessing failed changes\nfailedRecordSaves\nThe records that CloudKit is unable to modify.\nCKSyncEngineFailedRecordSave\nA type that describes an unsuccessful attempt to modify an individual record."
  },
  {
    "title": "failedRecordSaves | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncenginesentrecordzonechangesevent/4183289-failedrecordsaves",
    "html": "See Also\nAccessing failed changes\nfailedRecordDeletes\nThe unique identifiers of the records CloudKit is unable to delete, and the reasons why.\nCKSyncEngineFailedRecordSave\nA type that describes an unsuccessful attempt to modify an individual record."
  },
  {
    "title": "CKSyncEngineDidSendChangesEvent | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncenginedidsendchangesevent",
    "html": "Topics\nAccessing the context\ncontext\nThe context of the finished send request.\nRelationships\nInherits From\nCKSyncEngineEvent\nSee Also\nAccessing send events\nwillSendChangesEvent\nThe event downcast to the subclass that represents an imminent send operation.\nCKSyncEngineWillSendChangesEvent\nAn object that provides information about an imminent send of local changes.\nsentDatabaseChangesEvent\nThe event downcast to the subclass that represents a sent batch of database changes.\nCKSyncEngineSentDatabaseChangesEvent\nAn object that provides information about a sent batch of database changes.\nsentRecordZoneChangesEvent\nThe event downcast to the subclass that represents a sent batch of record zone changes.\nCKSyncEngineSentRecordZoneChangesEvent\nAn object that provides information about a sent batch of record zone changes.\ndidSendChangesEvent\nThe event downcast to the subclass that represents a completed send operation."
  },
  {
    "title": "stateSerialization | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncenginestateupdateevent/4155542-stateserialization",
    "html": "Discussion\n\nImportant\n\nAlways persist the most recent state to disk alongside your app data. The sync engine requires you to provide it with the most recent serialized state at initialization, and it’s your responsibility to make sure the state is available across app launches.\n\nSee Also\nAccessing the state\nCKSyncEngineStateSerialization\nAn opaque object that contains the serialized representation of a sync engine’s current state."
  },
  {
    "title": "fetchedDatabaseChangesEvent | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncengineevent/4155497-fetcheddatabasechangesevent",
    "html": "See Also\nAccessing fetch events\nwillFetchChangesEvent\nThe event downcast to the subclass that represents an imminent database fetch.\nCKSyncEngineWillFetchChangesEvent\nAn object that represents an imminent database fetch.\nwillFetchRecordZoneChangesEvent\nThe event downcast to the subclass that represents an imminent fetch of record zone changes.\nCKSyncEngineWillFetchRecordZoneChangesEvent\nAn object that provides information about an imminent fetch of changes in a record zone.\nCKSyncEngineFetchedDatabaseChangesEvent\nAn object that provides information about fetched database changes.\nfetchedRecordZoneChangesEvent\nThe event downcast to the subclass that represents a set of fetched record zone changes to process.\nCKSyncEngineFetchedRecordZoneChangesEvent\nAn object that provides information about fetched record zone changes.\ndidFetchRecordZoneChangesEvent\nThe event downcast to the subclass that represents a completed record zone fetch.\nCKSyncEngineDidFetchRecordZoneChangesEvent\nAn object that provides information about a finished record zone fetch.\ndidFetchChangesEvent\nThe event downcast to the subclass that represents a completed database fetch.\nCKSyncEngineDidFetchChangesEvent\nAn object that represents a completed database fetch."
  },
  {
    "title": "CKSyncEngineDidFetchRecordZoneChangesEvent | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncenginedidfetchrecordzonechangesevent",
    "html": "Topics\nIdentifying the record zone\nzoneID\nThe associated record zone’s unique identifier.\nHandling errors\nerror\nAn error that describes the cause of a failed fetch operation.\nRelationships\nInherits From\nCKSyncEngineEvent\nSee Also\nAccessing fetch events\nwillFetchChangesEvent\nThe event downcast to the subclass that represents an imminent database fetch.\nCKSyncEngineWillFetchChangesEvent\nAn object that represents an imminent database fetch.\nwillFetchRecordZoneChangesEvent\nThe event downcast to the subclass that represents an imminent fetch of record zone changes.\nCKSyncEngineWillFetchRecordZoneChangesEvent\nAn object that provides information about an imminent fetch of changes in a record zone.\nfetchedDatabaseChangesEvent\nThe event downcast to the subclass that represents a set of fetched database changes to process.\nCKSyncEngineFetchedDatabaseChangesEvent\nAn object that provides information about fetched database changes.\nfetchedRecordZoneChangesEvent\nThe event downcast to the subclass that represents a set of fetched record zone changes to process.\nCKSyncEngineFetchedRecordZoneChangesEvent\nAn object that provides information about fetched record zone changes.\ndidFetchRecordZoneChangesEvent\nThe event downcast to the subclass that represents a completed record zone fetch.\ndidFetchChangesEvent\nThe event downcast to the subclass that represents a completed database fetch.\nCKSyncEngineDidFetchChangesEvent\nAn object that represents a completed database fetch."
  },
  {
    "title": "hashValue | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncengine/pendingrecordzonechange/4183738-hashvalue",
    "html": "Discussion\n\nThe framework doesn’t provide any guarantees that hash values are the same across multiple executions of your app. Don’t persist hash values to use during a future execution.\n\nRelationships\nFrom Protocol\nHashable\nSee Also\nIdentifying and comparing changes\nfunc hash(into: inout Hasher)\nHashes the essential attributes of the change using the provided hasher.\nstatic func == (CKSyncEngine.PendingRecordZoneChange, CKSyncEngine.PendingRecordZoneChange) -> Bool\nReturns a Boolean value that indicates whether two values are equal.\nstatic func != (CKSyncEngine.PendingRecordZoneChange, CKSyncEngine.PendingRecordZoneChange) -> Bool\nReturns a Boolean value that indicates whether two values are unequal."
  },
  {
    "title": "currentUser | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncengineaccountchangeevent/4155480-currentuser",
    "html": "See Also\nUnderstanding the change\nchangeType\nThe iCloud account’s change type.\nCKSyncEngineAccountChangeType\nDescribes a change to the device’s iCloud account.\npreviousUser\nThe previous iCloud account’s record identifier."
  },
  {
    "title": "changeType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncengineaccountchangeevent/4155479-changetype",
    "html": "See Also\nUnderstanding the change\nCKSyncEngineAccountChangeType\nDescribes a change to the device’s iCloud account.\npreviousUser\nThe previous iCloud account’s record identifier.\ncurrentUser\nThe current iCloud account’s record identifier."
  },
  {
    "title": "CKSyncEngineDidFetchChangesEvent | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncenginedidfetchchangesevent",
    "html": "Topics\nInstance Properties\ncontext\nBeta\nRelationships\nInherits From\nCKSyncEngineEvent\nSee Also\nAccessing fetch events\nwillFetchChangesEvent\nThe event downcast to the subclass that represents an imminent database fetch.\nCKSyncEngineWillFetchChangesEvent\nAn object that represents an imminent database fetch.\nwillFetchRecordZoneChangesEvent\nThe event downcast to the subclass that represents an imminent fetch of record zone changes.\nCKSyncEngineWillFetchRecordZoneChangesEvent\nAn object that provides information about an imminent fetch of changes in a record zone.\nfetchedDatabaseChangesEvent\nThe event downcast to the subclass that represents a set of fetched database changes to process.\nCKSyncEngineFetchedDatabaseChangesEvent\nAn object that provides information about fetched database changes.\nfetchedRecordZoneChangesEvent\nThe event downcast to the subclass that represents a set of fetched record zone changes to process.\nCKSyncEngineFetchedRecordZoneChangesEvent\nAn object that provides information about fetched record zone changes.\ndidFetchRecordZoneChangesEvent\nThe event downcast to the subclass that represents a completed record zone fetch.\nCKSyncEngineDidFetchRecordZoneChangesEvent\nAn object that provides information about a finished record zone fetch.\ndidFetchChangesEvent\nThe event downcast to the subclass that represents a completed database fetch."
  },
  {
    "title": "CKSyncEngineEventTypeStateUpdate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncengineeventtype/cksyncengineeventtypestateupdate",
    "html": "See Also\nEvent types\nCKSyncEngineEventTypeAccountChange\nAn event indicating a change to the device’s iCloud account.\nCKSyncEngineEventTypeFetchedDatabaseChanges\nAn event indicating there are fetched database changes to process.\nCKSyncEngineEventTypeFetchedRecordZoneChanges\nAn event indicating there are fetched record zone changes to process.\nCKSyncEngineEventTypeSentDatabaseChanges\nAn event indicating a sent batch of database changes.\nCKSyncEngineEventTypeSentRecordZoneChanges\nAn event indicating a sent batch of record zone changes.\nCKSyncEngineEventTypeWillFetchChanges\nAn event indicating an imminent database fetch.\nCKSyncEngineEventTypeWillFetchRecordZoneChanges\nAn event indicating an imminent fetch of changes in a record zone.\nCKSyncEngineEventTypeDidFetchRecordZoneChanges\nAn event that indicates the record zone fetch is done.\nCKSyncEngineEventTypeDidFetchChanges\nAn event that indicates the database fetch is done.\nCKSyncEngineEventTypeWillSendChanges\nAn event indicating an imminent send of local changes.\nCKSyncEngineEventTypeDidSendChanges\nAn event that indicates a finished send operation."
  },
  {
    "title": "previousUser | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncengineaccountchangeevent/4155481-previoususer",
    "html": "See Also\nUnderstanding the change\nchangeType\nThe iCloud account’s change type.\nCKSyncEngineAccountChangeType\nDescribes a change to the device’s iCloud account.\ncurrentUser\nThe current iCloud account’s record identifier."
  },
  {
    "title": "options | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncenginesendchangescontext/4155462-options",
    "html": "See Also\nAccessing specific attributes\nreason\nThe reason for the send operation.\nCKSyncEngineSyncReason\nDescribes the reason for a sync operation.\nCKSyncEngineSendChangesOptions\nA set of options to use with a send operation."
  },
  {
    "title": "type | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncenginependingdatabasechange/4183298-type",
    "html": "See Also\nUnderstanding the change\nCKSyncEnginePendingDatabaseChangeType\nDescribes the type of a pending database change.\nzoneID\nThe identifier of the record zone to change."
  },
  {
    "title": "zoneID | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncenginependingdatabasechange/4183299-zoneid",
    "html": "See Also\nUnderstanding the change\ntype\nThe type of database change.\nCKSyncEnginePendingDatabaseChangeType\nDescribes the type of a pending database change."
  },
  {
    "title": "type | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncenginependingrecordzonechange/4183306-type",
    "html": "See Also\nAccessing the modified record\nrecordID\nThe identifier of the modified record.\nCKSyncEnginePendingRecordZoneChangeType\nDescribes a type of modification a record zone change makes."
  },
  {
    "title": "reason | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncenginesendchangescontext/4155463-reason",
    "html": "See Also\nAccessing specific attributes\nCKSyncEngineSyncReason\nDescribes the reason for a sync operation.\noptions\nThe additional options for the send operation.\nCKSyncEngineSendChangesOptions\nA set of options to use with a send operation."
  },
  {
    "title": "sentDatabaseChangesEvent | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncengineevent/4155499-sentdatabasechangesevent",
    "html": "See Also\nAccessing send events\nwillSendChangesEvent\nThe event downcast to the subclass that represents an imminent send operation.\nCKSyncEngineWillSendChangesEvent\nAn object that provides information about an imminent send of local changes.\nCKSyncEngineSentDatabaseChangesEvent\nAn object that provides information about a sent batch of database changes.\nsentRecordZoneChangesEvent\nThe event downcast to the subclass that represents a sent batch of record zone changes.\nCKSyncEngineSentRecordZoneChangesEvent\nAn object that provides information about a sent batch of record zone changes.\ndidSendChangesEvent\nThe event downcast to the subclass that represents a completed send operation.\nCKSyncEngineDidSendChangesEvent\nAn object that provides information about a finished send operation."
  },
  {
    "title": "sentRecordZoneChangesEvent | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncengineevent/4183284-sentrecordzonechangesevent",
    "html": "See Also\nAccessing send events\nwillSendChangesEvent\nThe event downcast to the subclass that represents an imminent send operation.\nCKSyncEngineWillSendChangesEvent\nAn object that provides information about an imminent send of local changes.\nsentDatabaseChangesEvent\nThe event downcast to the subclass that represents a sent batch of database changes.\nCKSyncEngineSentDatabaseChangesEvent\nAn object that provides information about a sent batch of database changes.\nCKSyncEngineSentRecordZoneChangesEvent\nAn object that provides information about a sent batch of record zone changes.\ndidSendChangesEvent\nThe event downcast to the subclass that represents a completed send operation.\nCKSyncEngineDidSendChangesEvent\nAn object that provides information about a finished send operation."
  },
  {
    "title": "didSendChangesEvent | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncengineevent/4155496-didsendchangesevent",
    "html": "See Also\nAccessing send events\nwillSendChangesEvent\nThe event downcast to the subclass that represents an imminent send operation.\nCKSyncEngineWillSendChangesEvent\nAn object that provides information about an imminent send of local changes.\nsentDatabaseChangesEvent\nThe event downcast to the subclass that represents a sent batch of database changes.\nCKSyncEngineSentDatabaseChangesEvent\nAn object that provides information about a sent batch of database changes.\nsentRecordZoneChangesEvent\nThe event downcast to the subclass that represents a sent batch of record zone changes.\nCKSyncEngineSentRecordZoneChangesEvent\nAn object that provides information about a sent batch of record zone changes.\nCKSyncEngineDidSendChangesEvent\nAn object that provides information about a finished send operation."
  },
  {
    "title": "CKSyncEngineRecordZoneChangeBatch | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncenginerecordzonechangebatch",
    "html": "Topics\nCreating a batch\n- initWithPendingChanges:recordProvider:\nCreates a batch of records to modify using the provided record zone changes.\nCKSyncEnginePendingRecordZoneChange\nDescribes an unsent record modification.\n- initWithRecordsToSave:recordIDsToDelete:atomicByZone:\nCreates a batch of records to modify.\nManaging atomicity\natomicByZone\nA Boolean value that determines whether CloudKit modifies records atomically by record zone.\nManaging the records\nrecordIDsToDelete\nThe unique identifiers of the records to delete.\nrecordsToSave\nThe records to save.\nRelationships\nInherits From\nNSObject\nSee Also\nSending changes\n- syncEngine:nextRecordZoneChangeBatchForContext:\nAsks the delegate to provide the next set of record changes to send to the server.\n\nRequired\n\nCKSyncEngineSendChangesContext\nAn object that describes a single attempt to send changes to the iCloud servers."
  },
  {
    "title": "stateUpdateEvent | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncengineevent/4155501-stateupdateevent",
    "html": "See Also\nAccessing state updates\nCKSyncEngineStateUpdateEvent\nAn object that provides information about an update to the sync engine’s state."
  },
  {
    "title": "CKSyncEngineWillFetchChangesEvent | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncenginewillfetchchangesevent",
    "html": "Topics\nInstance Properties\ncontext\nBeta\nRelationships\nInherits From\nCKSyncEngineEvent\nSee Also\nAccessing fetch events\nwillFetchChangesEvent\nThe event downcast to the subclass that represents an imminent database fetch.\nwillFetchRecordZoneChangesEvent\nThe event downcast to the subclass that represents an imminent fetch of record zone changes.\nCKSyncEngineWillFetchRecordZoneChangesEvent\nAn object that provides information about an imminent fetch of changes in a record zone.\nfetchedDatabaseChangesEvent\nThe event downcast to the subclass that represents a set of fetched database changes to process.\nCKSyncEngineFetchedDatabaseChangesEvent\nAn object that provides information about fetched database changes.\nfetchedRecordZoneChangesEvent\nThe event downcast to the subclass that represents a set of fetched record zone changes to process.\nCKSyncEngineFetchedRecordZoneChangesEvent\nAn object that provides information about fetched record zone changes.\ndidFetchRecordZoneChangesEvent\nThe event downcast to the subclass that represents a completed record zone fetch.\nCKSyncEngineDidFetchRecordZoneChangesEvent\nAn object that provides information about a finished record zone fetch.\ndidFetchChangesEvent\nThe event downcast to the subclass that represents a completed database fetch.\nCKSyncEngineDidFetchChangesEvent\nAn object that represents a completed database fetch."
  },
  {
    "title": "willFetchRecordZoneChangesEvent | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncengineevent/4155504-willfetchrecordzonechangesevent",
    "html": "See Also\nAccessing fetch events\nwillFetchChangesEvent\nThe event downcast to the subclass that represents an imminent database fetch.\nCKSyncEngineWillFetchChangesEvent\nAn object that represents an imminent database fetch.\nCKSyncEngineWillFetchRecordZoneChangesEvent\nAn object that provides information about an imminent fetch of changes in a record zone.\nfetchedDatabaseChangesEvent\nThe event downcast to the subclass that represents a set of fetched database changes to process.\nCKSyncEngineFetchedDatabaseChangesEvent\nAn object that provides information about fetched database changes.\nfetchedRecordZoneChangesEvent\nThe event downcast to the subclass that represents a set of fetched record zone changes to process.\nCKSyncEngineFetchedRecordZoneChangesEvent\nAn object that provides information about fetched record zone changes.\ndidFetchRecordZoneChangesEvent\nThe event downcast to the subclass that represents a completed record zone fetch.\nCKSyncEngineDidFetchRecordZoneChangesEvent\nAn object that provides information about a finished record zone fetch.\ndidFetchChangesEvent\nThe event downcast to the subclass that represents a completed database fetch.\nCKSyncEngineDidFetchChangesEvent\nAn object that represents a completed database fetch."
  },
  {
    "title": "CKSyncEngineWillFetchRecordZoneChangesEvent | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncenginewillfetchrecordzonechangesevent",
    "html": "Topics\nIdentifying the record zone\nzoneID\nThe associated record zone’s unique identifier.\nRelationships\nInherits From\nCKSyncEngineEvent\nSee Also\nAccessing fetch events\nwillFetchChangesEvent\nThe event downcast to the subclass that represents an imminent database fetch.\nCKSyncEngineWillFetchChangesEvent\nAn object that represents an imminent database fetch.\nwillFetchRecordZoneChangesEvent\nThe event downcast to the subclass that represents an imminent fetch of record zone changes.\nfetchedDatabaseChangesEvent\nThe event downcast to the subclass that represents a set of fetched database changes to process.\nCKSyncEngineFetchedDatabaseChangesEvent\nAn object that provides information about fetched database changes.\nfetchedRecordZoneChangesEvent\nThe event downcast to the subclass that represents a set of fetched record zone changes to process.\nCKSyncEngineFetchedRecordZoneChangesEvent\nAn object that provides information about fetched record zone changes.\ndidFetchRecordZoneChangesEvent\nThe event downcast to the subclass that represents a completed record zone fetch.\nCKSyncEngineDidFetchRecordZoneChangesEvent\nAn object that provides information about a finished record zone fetch.\ndidFetchChangesEvent\nThe event downcast to the subclass that represents a completed database fetch.\nCKSyncEngineDidFetchChangesEvent\nAn object that represents a completed database fetch."
  },
  {
    "title": "CKSyncEngineFetchedDatabaseChangesEvent | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncenginefetcheddatabasechangesevent",
    "html": "Overview\n\nNote\n\nAlthough CloudKit doesn’t guarantee the order of fetched database changes, the typical order for both deletions and modifications is oldest to newest.\n\nTopics\nAccessing changes\ndeletions\nThe deleted record zones.\nCKSyncEngineFetchedZoneDeletion\nAn object that describes the deletion of a record zone.\nmodifications\nThe modified record zones.\nRelationships\nInherits From\nCKSyncEngineEvent\nSee Also\nAccessing fetch events\nwillFetchChangesEvent\nThe event downcast to the subclass that represents an imminent database fetch.\nCKSyncEngineWillFetchChangesEvent\nAn object that represents an imminent database fetch.\nwillFetchRecordZoneChangesEvent\nThe event downcast to the subclass that represents an imminent fetch of record zone changes.\nCKSyncEngineWillFetchRecordZoneChangesEvent\nAn object that provides information about an imminent fetch of changes in a record zone.\nfetchedDatabaseChangesEvent\nThe event downcast to the subclass that represents a set of fetched database changes to process.\nfetchedRecordZoneChangesEvent\nThe event downcast to the subclass that represents a set of fetched record zone changes to process.\nCKSyncEngineFetchedRecordZoneChangesEvent\nAn object that provides information about fetched record zone changes.\ndidFetchRecordZoneChangesEvent\nThe event downcast to the subclass that represents a completed record zone fetch.\nCKSyncEngineDidFetchRecordZoneChangesEvent\nAn object that provides information about a finished record zone fetch.\ndidFetchChangesEvent\nThe event downcast to the subclass that represents a completed database fetch.\nCKSyncEngineDidFetchChangesEvent\nAn object that represents a completed database fetch."
  },
  {
    "title": "fetchedRecordZoneChangesEvent | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncengineevent/4155498-fetchedrecordzonechangesevent",
    "html": "See Also\nAccessing fetch events\nwillFetchChangesEvent\nThe event downcast to the subclass that represents an imminent database fetch.\nCKSyncEngineWillFetchChangesEvent\nAn object that represents an imminent database fetch.\nwillFetchRecordZoneChangesEvent\nThe event downcast to the subclass that represents an imminent fetch of record zone changes.\nCKSyncEngineWillFetchRecordZoneChangesEvent\nAn object that provides information about an imminent fetch of changes in a record zone.\nfetchedDatabaseChangesEvent\nThe event downcast to the subclass that represents a set of fetched database changes to process.\nCKSyncEngineFetchedDatabaseChangesEvent\nAn object that provides information about fetched database changes.\nCKSyncEngineFetchedRecordZoneChangesEvent\nAn object that provides information about fetched record zone changes.\ndidFetchRecordZoneChangesEvent\nThe event downcast to the subclass that represents a completed record zone fetch.\nCKSyncEngineDidFetchRecordZoneChangesEvent\nAn object that provides information about a finished record zone fetch.\ndidFetchChangesEvent\nThe event downcast to the subclass that represents a completed database fetch.\nCKSyncEngineDidFetchChangesEvent\nAn object that represents a completed database fetch."
  },
  {
    "title": "CKSyncEngineFetchedRecordZoneChangesEvent | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncenginefetchedrecordzonechangesevent",
    "html": "Overview\n\nNote\n\nAlthough CloudKit doesn’t guarantee the order of fetched database changes, the typical order for both deletions and modifications is oldest to newest.\n\nTopics\nAccessing changes\ndeletions\nThe deleted records.\nCKSyncEngineFetchedRecordDeletion\nAn object that describes the deletion of an individual record.\nmodifications\nThe modified records.\nRelationships\nInherits From\nCKSyncEngineEvent\nSee Also\nAccessing fetch events\nwillFetchChangesEvent\nThe event downcast to the subclass that represents an imminent database fetch.\nCKSyncEngineWillFetchChangesEvent\nAn object that represents an imminent database fetch.\nwillFetchRecordZoneChangesEvent\nThe event downcast to the subclass that represents an imminent fetch of record zone changes.\nCKSyncEngineWillFetchRecordZoneChangesEvent\nAn object that provides information about an imminent fetch of changes in a record zone.\nfetchedDatabaseChangesEvent\nThe event downcast to the subclass that represents a set of fetched database changes to process.\nCKSyncEngineFetchedDatabaseChangesEvent\nAn object that provides information about fetched database changes.\nfetchedRecordZoneChangesEvent\nThe event downcast to the subclass that represents a set of fetched record zone changes to process.\ndidFetchRecordZoneChangesEvent\nThe event downcast to the subclass that represents a completed record zone fetch.\nCKSyncEngineDidFetchRecordZoneChangesEvent\nAn object that provides information about a finished record zone fetch.\ndidFetchChangesEvent\nThe event downcast to the subclass that represents a completed database fetch.\nCKSyncEngineDidFetchChangesEvent\nAn object that represents a completed database fetch."
  },
  {
    "title": "didFetchRecordZoneChangesEvent | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncengineevent/4155495-didfetchrecordzonechangesevent",
    "html": "See Also\nAccessing fetch events\nwillFetchChangesEvent\nThe event downcast to the subclass that represents an imminent database fetch.\nCKSyncEngineWillFetchChangesEvent\nAn object that represents an imminent database fetch.\nwillFetchRecordZoneChangesEvent\nThe event downcast to the subclass that represents an imminent fetch of record zone changes.\nCKSyncEngineWillFetchRecordZoneChangesEvent\nAn object that provides information about an imminent fetch of changes in a record zone.\nfetchedDatabaseChangesEvent\nThe event downcast to the subclass that represents a set of fetched database changes to process.\nCKSyncEngineFetchedDatabaseChangesEvent\nAn object that provides information about fetched database changes.\nfetchedRecordZoneChangesEvent\nThe event downcast to the subclass that represents a set of fetched record zone changes to process.\nCKSyncEngineFetchedRecordZoneChangesEvent\nAn object that provides information about fetched record zone changes.\nCKSyncEngineDidFetchRecordZoneChangesEvent\nAn object that provides information about a finished record zone fetch.\ndidFetchChangesEvent\nThe event downcast to the subclass that represents a completed database fetch.\nCKSyncEngineDidFetchChangesEvent\nAn object that represents a completed database fetch."
  },
  {
    "title": "didFetchChangesEvent | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncengineevent/4155494-didfetchchangesevent",
    "html": "See Also\nAccessing fetch events\nwillFetchChangesEvent\nThe event downcast to the subclass that represents an imminent database fetch.\nCKSyncEngineWillFetchChangesEvent\nAn object that represents an imminent database fetch.\nwillFetchRecordZoneChangesEvent\nThe event downcast to the subclass that represents an imminent fetch of record zone changes.\nCKSyncEngineWillFetchRecordZoneChangesEvent\nAn object that provides information about an imminent fetch of changes in a record zone.\nfetchedDatabaseChangesEvent\nThe event downcast to the subclass that represents a set of fetched database changes to process.\nCKSyncEngineFetchedDatabaseChangesEvent\nAn object that provides information about fetched database changes.\nfetchedRecordZoneChangesEvent\nThe event downcast to the subclass that represents a set of fetched record zone changes to process.\nCKSyncEngineFetchedRecordZoneChangesEvent\nAn object that provides information about fetched record zone changes.\ndidFetchRecordZoneChangesEvent\nThe event downcast to the subclass that represents a completed record zone fetch.\nCKSyncEngineDidFetchRecordZoneChangesEvent\nAn object that provides information about a finished record zone fetch.\nCKSyncEngineDidFetchChangesEvent\nAn object that represents a completed database fetch."
  },
  {
    "title": "willSendChangesEvent | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncengineevent/4155505-willsendchangesevent",
    "html": "See Also\nAccessing send events\nCKSyncEngineWillSendChangesEvent\nAn object that provides information about an imminent send of local changes.\nsentDatabaseChangesEvent\nThe event downcast to the subclass that represents a sent batch of database changes.\nCKSyncEngineSentDatabaseChangesEvent\nAn object that provides information about a sent batch of database changes.\nsentRecordZoneChangesEvent\nThe event downcast to the subclass that represents a sent batch of record zone changes.\nCKSyncEngineSentRecordZoneChangesEvent\nAn object that provides information about a sent batch of record zone changes.\ndidSendChangesEvent\nThe event downcast to the subclass that represents a completed send operation.\nCKSyncEngineDidSendChangesEvent\nAn object that provides information about a finished send operation."
  },
  {
    "title": "CKSyncEnginePendingRecordZoneChangeType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncenginependingrecordzonechangetype",
    "html": "Topics\nEnumeration Cases\ncase deleteRecord\ncase saveRecord\nRelationships\nConforms To\nSendable"
  },
  {
    "title": "initWithRecordID:type: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncenginependingrecordzonechange/4183304-initwithrecordid",
    "html": "Parameters\nrecordID\n\nThe identifier of the record to change.\n\ntype\n\nThe type of change to make.\n\nReturn Value\n\nAn initialized record zone change, or nil if CloudKit can’t create one."
  },
  {
    "title": "initWithZoneID: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncenginependingzonedelete/4155572-initwithzoneid",
    "html": "Parameters\nzoneID\n\nThe unique identifier of the record zone to delete.\n\nReturn Value\n\nAn initialized pending zone delete, or nil if CloudKit can’t create it."
  },
  {
    "title": "recordID | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncenginependingrecordzonechange/4183305-recordid",
    "html": "See Also\nAccessing the modified record\ntype\nThe type of change to make.\nCKSyncEnginePendingRecordZoneChangeType\nDescribes a type of modification a record zone change makes."
  },
  {
    "title": "willFetchChangesEvent | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncengineevent/4155503-willfetchchangesevent",
    "html": "See Also\nAccessing fetch events\nCKSyncEngineWillFetchChangesEvent\nAn object that represents an imminent database fetch.\nwillFetchRecordZoneChangesEvent\nThe event downcast to the subclass that represents an imminent fetch of record zone changes.\nCKSyncEngineWillFetchRecordZoneChangesEvent\nAn object that provides information about an imminent fetch of changes in a record zone.\nfetchedDatabaseChangesEvent\nThe event downcast to the subclass that represents a set of fetched database changes to process.\nCKSyncEngineFetchedDatabaseChangesEvent\nAn object that provides information about fetched database changes.\nfetchedRecordZoneChangesEvent\nThe event downcast to the subclass that represents a set of fetched record zone changes to process.\nCKSyncEngineFetchedRecordZoneChangesEvent\nAn object that provides information about fetched record zone changes.\ndidFetchRecordZoneChangesEvent\nThe event downcast to the subclass that represents a completed record zone fetch.\nCKSyncEngineDidFetchRecordZoneChangesEvent\nAn object that provides information about a finished record zone fetch.\ndidFetchChangesEvent\nThe event downcast to the subclass that represents a completed database fetch.\nCKSyncEngineDidFetchChangesEvent\nAn object that represents a completed database fetch."
  },
  {
    "title": "CKSyncEngineAccountChangeEvent | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncengineaccountchangeevent",
    "html": "Topics\nUnderstanding the change\nchangeType\nThe iCloud account’s change type.\nCKSyncEngineAccountChangeType\nDescribes a change to the device’s iCloud account.\npreviousUser\nThe previous iCloud account’s record identifier.\ncurrentUser\nThe current iCloud account’s record identifier.\nRelationships\nInherits From\nCKSyncEngineEvent\nSee Also\nAccessing account changes\naccountChangeEvent\nThe event downcast to the subclass that represents a change to the device’s iCloud account."
  },
  {
    "title": "CKSyncEngineSendChangesContext | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncenginesendchangescontext",
    "html": "Overview\n\nA sync engine has two ways to send changes to iCloud — periodically, in cooperation with the system scheduler, and manually, whenever your app invokes the sendChangesWithCompletionHandler: method. This object provides information about a single attempt to send changes that includes both the reason for the attempt and any additional options in use by the attempt.\n\nTopics\nAccessing specific attributes\nreason\nThe reason for the send operation.\nCKSyncEngineSyncReason\nDescribes the reason for a sync operation.\noptions\nThe additional options for the send operation.\nCKSyncEngineSendChangesOptions\nA set of options to use with a send operation.\nRelationships\nInherits From\nNSObject\nSee Also\nSending changes\n- syncEngine:nextRecordZoneChangeBatchForContext:\nAsks the delegate to provide the next set of record changes to send to the server.\n\nRequired\n\nCKSyncEngineRecordZoneChangeBatch\nAn object that contains the record changes for a single send operation."
  },
  {
    "title": "accountChangeEvent | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncengineevent/4155493-accountchangeevent",
    "html": "See Also\nAccessing account changes\nCKSyncEngineAccountChangeEvent\nAn event that provides information about a change to the device’s iCloud account."
  },
  {
    "title": "type | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncengineevent/4155502-type",
    "html": "See Also\nDetermining the type\nCKSyncEngineEventType\nDescribes an event that occurs during a sync operation."
  },
  {
    "title": "CKSyncEngineEvent | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncengineevent",
    "html": "Overview\n\nAll sync operation events descend from this base class, and as such you don’t create instances of it directly. Instead, the sync engine dispatches them to your app’s delegate, periodically, throughout a sync operation.\n\nUse the type property to determine the event’s proper type, and then use the corresponding convenience property to retrieve a reference to the event that’s downcast to the appropriate subclass. For example, when type is set to CKSyncEngineEventTypeStateUpdate, use the stateUpdateEvent property to get the downcast reference .\n\nImportant\n\nYour app will crash if you access a noncorresponding convenience property.\n\nTopics\nDetermining the type\ntype\nThe type of event.\nCKSyncEngineEventType\nDescribes an event that occurs during a sync operation.\nAccessing account changes\naccountChangeEvent\nThe event downcast to the subclass that represents a change to the device’s iCloud account.\nCKSyncEngineAccountChangeEvent\nAn event that provides information about a change to the device’s iCloud account.\nAccessing fetch events\nwillFetchChangesEvent\nThe event downcast to the subclass that represents an imminent database fetch.\nCKSyncEngineWillFetchChangesEvent\nAn object that represents an imminent database fetch.\nwillFetchRecordZoneChangesEvent\nThe event downcast to the subclass that represents an imminent fetch of record zone changes.\nCKSyncEngineWillFetchRecordZoneChangesEvent\nAn object that provides information about an imminent fetch of changes in a record zone.\nfetchedDatabaseChangesEvent\nThe event downcast to the subclass that represents a set of fetched database changes to process.\nCKSyncEngineFetchedDatabaseChangesEvent\nAn object that provides information about fetched database changes.\nfetchedRecordZoneChangesEvent\nThe event downcast to the subclass that represents a set of fetched record zone changes to process.\nCKSyncEngineFetchedRecordZoneChangesEvent\nAn object that provides information about fetched record zone changes.\ndidFetchRecordZoneChangesEvent\nThe event downcast to the subclass that represents a completed record zone fetch.\nCKSyncEngineDidFetchRecordZoneChangesEvent\nAn object that provides information about a finished record zone fetch.\ndidFetchChangesEvent\nThe event downcast to the subclass that represents a completed database fetch.\nCKSyncEngineDidFetchChangesEvent\nAn object that represents a completed database fetch.\nAccessing send events\nwillSendChangesEvent\nThe event downcast to the subclass that represents an imminent send operation.\nCKSyncEngineWillSendChangesEvent\nAn object that provides information about an imminent send of local changes.\nsentDatabaseChangesEvent\nThe event downcast to the subclass that represents a sent batch of database changes.\nCKSyncEngineSentDatabaseChangesEvent\nAn object that provides information about a sent batch of database changes.\nsentRecordZoneChangesEvent\nThe event downcast to the subclass that represents a sent batch of record zone changes.\nCKSyncEngineSentRecordZoneChangesEvent\nAn object that provides information about a sent batch of record zone changes.\ndidSendChangesEvent\nThe event downcast to the subclass that represents a completed send operation.\nCKSyncEngineDidSendChangesEvent\nAn object that provides information about a finished send operation.\nAccessing state updates\nstateUpdateEvent\nThe event downcast to the subclass that represents an update to the sync engine’s state.\nCKSyncEngineStateUpdateEvent\nAn object that provides information about an update to the sync engine’s state.\nRelationships\nInherits From\nNSObject\nSee Also\nHandling sync events\n- syncEngine:handleEvent:\nTells the delegate to handle the specified sync event.\n\nRequired"
  },
  {
    "title": "syncEngine:handleEvent: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncenginedelegate/4155454-syncengine",
    "html": "Required\n\nParameters\nsyncEngine\n\nInformation about the event. An event may occur for a number of reasons, such as when new data is available or when the device’s iCloud account changes. For more information, see CKSyncEngineEvent.\n\nevent\n\nThe sync engine that generates the event.\n\nDiscussion\n\nImportant\n\nIf event is an instance of CKSyncEngineStateUpdateEvent, you must persist the attached state to disk alongside your app data. The sync engine requires you to provide it with the most recent serialized state at initialization, and it’s your responsibility to make sure this is available across app launches.\n\nThe sync engines provides events serially; your delegate won’t receive the subsequent event until it finishes processing the current one and returns from this method.\n\nSee Also\nHandling sync events\nCKSyncEngineEvent\nAn event that occurs during a sync operation."
  },
  {
    "title": "initWithZone: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncenginependingzonesave/4155574-initwithzone",
    "html": "Parameters\nzone\n\nThe record zone to save.\n\nReturn Value\n\nAn initialized pending zone save, or nil if CloudKit can’t create it."
  },
  {
    "title": "syncEngine:nextRecordZoneChangeBatchForContext: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncenginedelegate/4200031-syncengine",
    "html": "Required\n\nParameters\nsyncEngine\n\nThe sync engine requesting changes.\n\ncontext\n\nThe reason for the sync engine’s request, and any additional options that request is using.\n\nReturn Value\n\nIf there are pending record changes, a batch of those changes for the sync engine to process; otherwise, nil to indicate there are no changes to send.\n\nDiscussion\n\nIn your implementation, ask the sync engine’s state for any pending record zone changes and then return a change batch containing an instance of CKRecord for each record identifier the state provides. For both scheduled and manual send operations, the sync engine calls this method repeatedly until your app has no more changes and returns nil.\n\nSee Also\nSending changes\nCKSyncEngineSendChangesContext\nAn object that describes a single attempt to send changes to the iCloud servers.\nCKSyncEngineRecordZoneChangeBatch\nAn object that contains the record changes for a single send operation."
  },
  {
    "title": "CKSyncEngineSentDatabaseChangesEvent | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncenginesentdatabasechangesevent",
    "html": "Topics\nAccessing successful changes\ndeletedZoneIDs\nThe unique identifiers of the deleted record zones.\nsavedZones\nThe modified record zones.\nAccessing failed changes\nfailedZoneDeletes\nThe unique identifiers of the record zones CloudKit is unable to delete, and the reasons why.\nfailedZoneSaves\nThe record zones that CloudKit is unable to modify.\nCKSyncEngineFailedZoneSave\nAn object that describes an unsuccessful attempt to modify a single record zone.\nRelationships\nInherits From\nCKSyncEngineEvent\nSee Also\nAccessing send events\nwillSendChangesEvent\nThe event downcast to the subclass that represents an imminent send operation.\nCKSyncEngineWillSendChangesEvent\nAn object that provides information about an imminent send of local changes.\nsentDatabaseChangesEvent\nThe event downcast to the subclass that represents a sent batch of database changes.\nsentRecordZoneChangesEvent\nThe event downcast to the subclass that represents a sent batch of record zone changes.\nCKSyncEngineSentRecordZoneChangesEvent\nAn object that provides information about a sent batch of record zone changes.\ndidSendChangesEvent\nThe event downcast to the subclass that represents a completed send operation.\nCKSyncEngineDidSendChangesEvent\nAn object that provides information about a finished send operation."
  },
  {
    "title": "CKSyncEngineSentRecordZoneChangesEvent | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncenginesentrecordzonechangesevent",
    "html": "Topics\nAccessing successful changes\ndeletedRecordIDs\nThe unique identifiers of the deleted records.\nsavedRecords\nThe modified records.\nAccessing failed changes\nfailedRecordDeletes\nThe unique identifiers of the records CloudKit is unable to delete, and the reasons why.\nfailedRecordSaves\nThe records that CloudKit is unable to modify.\nCKSyncEngineFailedRecordSave\nA type that describes an unsuccessful attempt to modify an individual record.\nRelationships\nInherits From\nCKSyncEngineEvent\nSee Also\nAccessing send events\nwillSendChangesEvent\nThe event downcast to the subclass that represents an imminent send operation.\nCKSyncEngineWillSendChangesEvent\nAn object that provides information about an imminent send of local changes.\nsentDatabaseChangesEvent\nThe event downcast to the subclass that represents a sent batch of database changes.\nCKSyncEngineSentDatabaseChangesEvent\nAn object that provides information about a sent batch of database changes.\nsentRecordZoneChangesEvent\nThe event downcast to the subclass that represents a sent batch of record zone changes.\ndidSendChangesEvent\nThe event downcast to the subclass that represents a completed send operation.\nCKSyncEngineDidSendChangesEvent\nAn object that provides information about a finished send operation."
  },
  {
    "title": "CKSyncEnginePendingDatabaseChange | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncenginependingdatabasechange",
    "html": "Topics\nUnderstanding the change\ntype\nThe type of database change.\nCKSyncEnginePendingDatabaseChangeType\nDescribes the type of a pending database change.\nzoneID\nThe identifier of the record zone to change.\nRelationships\nInherits From\nNSObject\nSee Also\nModifying pending changes\n- addPendingDatabaseChanges:\nAdds the specified database changes to the state.\n- removePendingDatabaseChanges:\nRemoves the specified database changes from the state.\nCKSyncEnginePendingZoneDelete\nAn object that describes an unsent record zone deletion.\nCKSyncEnginePendingZoneSave\nAn object that describes an unsent record zone modification.\n- addPendingRecordZoneChanges:\nAdds the specified record zone changes to the state.\n- removePendingRecordZoneChanges:\nRemoves the specified record zone changes from the state.\nCKSyncEnginePendingRecordZoneChange\nDescribes an unsent record modification."
  },
  {
    "title": "CKSyncEngineStateSerialization | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncenginestateserialization",
    "html": "Relationships\nInherits From\nNSObject\nConforms To\nNSSecureCoding\nSee Also\nAccessing the state\nstateSerialization\nThe current state of the sync engine."
  },
  {
    "title": "CKSyncEngineStateUpdateEvent | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncenginestateupdateevent",
    "html": "Topics\nAccessing the state\nstateSerialization\nThe current state of the sync engine.\nCKSyncEngineStateSerialization\nAn opaque object that contains the serialized representation of a sync engine’s current state.\nRelationships\nInherits From\nCKSyncEngineEvent\nSee Also\nAccessing state updates\nstateUpdateEvent\nThe event downcast to the subclass that represents an update to the sync engine’s state."
  },
  {
    "title": "addPendingRecordZoneChanges: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncenginestate/4183311-addpendingrecordzonechanges",
    "html": "Parameters\nchanges\n\nAn array of record zone changes.\n\nDiscussion\n\nUse this method to enable the sync engine to manage your pending record zone changes. For example, when someone makes a change that your app needs to send to the server, use this method to record the change. Then, when creating the change batch for the next send operation, retrieve the pending changes from the pendingRecordZoneChanges property.\n\nIf there are no scheduled sync operations when you invoke this method, the sync engine automatically schedules one to send the changes. After the engine sends those changes, it notifies your app’s sync delegate with an event of type CKSyncEngineSentRecordZoneChangesEvent.\n\nThe sync engine ensures the consistency of any pending changes it’s tracking, deduplicating them as necessary. The engine removes changes from the list as it sends them, but retains any that fail due to a recoverable error, such as a network issue or exceeding the rate limit.\n\nNote\n\nThe order in which you apply record zone changes is important. For example, if you add a save change and then a delete change, the sync engine discards the save and sends only the delete change. The reverse is also true.\n\nSee Also\nModifying pending changes\n- addPendingDatabaseChanges:\nAdds the specified database changes to the state.\n- removePendingDatabaseChanges:\nRemoves the specified database changes from the state.\nCKSyncEnginePendingZoneDelete\nAn object that describes an unsent record zone deletion.\nCKSyncEnginePendingZoneSave\nAn object that describes an unsent record zone modification.\nCKSyncEnginePendingDatabaseChange\nAn object that describes an unsent database modification.\n- removePendingRecordZoneChanges:\nRemoves the specified record zone changes from the state.\nCKSyncEnginePendingRecordZoneChange\nDescribes an unsent record modification."
  },
  {
    "title": "CKSyncEnginePendingZoneDelete | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncenginependingzonedelete",
    "html": "Topics\nCreating a pending zone delete\n- initWithZoneID:\nCreates a pending zone delete for the specified record zone identifier.\nRelationships\nInherits From\nCKSyncEnginePendingDatabaseChange\nSee Also\nModifying pending changes\n- addPendingDatabaseChanges:\nAdds the specified database changes to the state.\n- removePendingDatabaseChanges:\nRemoves the specified database changes from the state.\nCKSyncEnginePendingZoneSave\nAn object that describes an unsent record zone modification.\nCKSyncEnginePendingDatabaseChange\nAn object that describes an unsent database modification.\n- addPendingRecordZoneChanges:\nAdds the specified record zone changes to the state.\n- removePendingRecordZoneChanges:\nRemoves the specified record zone changes from the state.\nCKSyncEnginePendingRecordZoneChange\nDescribes an unsent record modification."
  },
  {
    "title": "operationGroup | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncenginefetchchangesoptions/4155459-operationgroup",
    "html": "Discussion\n\nTip\n\nProviding a specific operation group helps you to identify and analyze the telemetry of fetch operations in CloudKit Console.\n\nThe default value is nil."
  },
  {
    "title": "removePendingRecordZoneChanges: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncenginestate/4183315-removependingrecordzonechanges",
    "html": "Parameters\nchanges\n\nAn array of record zone changes.\n\nSee Also\nModifying pending changes\n- addPendingDatabaseChanges:\nAdds the specified database changes to the state.\n- removePendingDatabaseChanges:\nRemoves the specified database changes from the state.\nCKSyncEnginePendingZoneDelete\nAn object that describes an unsent record zone deletion.\nCKSyncEnginePendingZoneSave\nAn object that describes an unsent record zone modification.\nCKSyncEnginePendingDatabaseChange\nAn object that describes an unsent database modification.\n- addPendingRecordZoneChanges:\nAdds the specified record zone changes to the state.\nCKSyncEnginePendingRecordZoneChange\nDescribes an unsent record modification."
  },
  {
    "title": "CKSyncEnginePendingRecordZoneChange | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncenginependingrecordzonechange",
    "html": "Topics\nCreating a record zone change\n- initWithRecordID:type:\nCreates a record zone change of the specified type for the given record.\nAccessing the modified record\nrecordID\nThe identifier of the modified record.\ntype\nThe type of change to make.\nCKSyncEnginePendingRecordZoneChangeType\nDescribes a type of modification a record zone change makes.\nRelationships\nInherits From\nNSObject\nSee Also\nModifying pending changes\n- addPendingDatabaseChanges:\nAdds the specified database changes to the state.\n- removePendingDatabaseChanges:\nRemoves the specified database changes from the state.\nCKSyncEnginePendingZoneDelete\nAn object that describes an unsent record zone deletion.\nCKSyncEnginePendingZoneSave\nAn object that describes an unsent record zone modification.\nCKSyncEnginePendingDatabaseChange\nAn object that describes an unsent database modification.\n- addPendingRecordZoneChanges:\nAdds the specified record zone changes to the state.\n- removePendingRecordZoneChanges:\nRemoves the specified record zone changes from the state."
  },
  {
    "title": "CKSyncEnginePendingZoneSave | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncenginependingzonesave",
    "html": "Topics\nCreating a pending zone save\n- initWithZone:\nCreates a pending zone save for the specified record zone.\nIdentifying the record zone\nzone\nThe record zone to save.\nRelationships\nInherits From\nCKSyncEnginePendingDatabaseChange\nSee Also\nModifying pending changes\n- addPendingDatabaseChanges:\nAdds the specified database changes to the state.\n- removePendingDatabaseChanges:\nRemoves the specified database changes from the state.\nCKSyncEnginePendingZoneDelete\nAn object that describes an unsent record zone deletion.\nCKSyncEnginePendingDatabaseChange\nAn object that describes an unsent database modification.\n- addPendingRecordZoneChanges:\nAdds the specified record zone changes to the state.\n- removePendingRecordZoneChanges:\nRemoves the specified record zone changes from the state.\nCKSyncEnginePendingRecordZoneChange\nDescribes an unsent record modification."
  },
  {
    "title": "removePendingDatabaseChanges: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncenginestate/4183314-removependingdatabasechanges",
    "html": "Parameters\nchanges\n\nAn array of database changes.\n\nSee Also\nModifying pending changes\n- addPendingDatabaseChanges:\nAdds the specified database changes to the state.\nCKSyncEnginePendingZoneDelete\nAn object that describes an unsent record zone deletion.\nCKSyncEnginePendingZoneSave\nAn object that describes an unsent record zone modification.\nCKSyncEnginePendingDatabaseChange\nAn object that describes an unsent database modification.\n- addPendingRecordZoneChanges:\nAdds the specified record zone changes to the state.\n- removePendingRecordZoneChanges:\nRemoves the specified record zone changes from the state.\nCKSyncEnginePendingRecordZoneChange\nDescribes an unsent record modification."
  },
  {
    "title": "subscriptionID | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncengineconfiguration/4155477-subscriptionid",
    "html": "Discussion\n\nBy default, a sync engine attempts to discover an existing subscription for the synced database. If one isn’t found, the engine creates an internal CKDatabaseSubscription and uses that to receive notifications about remote record changes.\n\nIf you require the sync engine to use a specific database subscription, assign that subscription’s identifier to this property. Doing so enables your app to be backwards compatible if you’re migrating to CKSyncEngine from a custom CloudKit sync implementation.\n\nThe default value is nil.\n\nSee Also\nManaging attributes\nautomaticallySync\nA Boolean value that determines whether the engine syncs automatically.\ndatabase\nThe associated database.\nstateSerialization\nThe sync engine’s serialized state."
  },
  {
    "title": "automaticallySync | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncengineconfiguration/4155472-automaticallysync",
    "html": "Discussion\n\nBy default, the sync engine uses the system scheduler to automatically schedule both send and fetch operations. If an operation fails due to a recoverable error, such as a network failure or when the server is enforcing request limits, the engine reschedules those operations as necessary. Unless you have a specific need, prefer to use the default behavior in your app.\n\nIf you set this property’s value to NO, use fetchChangesWithCompletionHandler: and sendChangesWithCompletionHandler: to invoke immediate sync operations, allowing for more control over when your app syncs its records. For example, you may want to sync at a specific time of day or deterministically simulate certain conditions in your unit tests.\n\nThe default value is YES.\n\nSee Also\nManaging attributes\ndatabase\nThe associated database.\nsubscriptionID\nThe subscription identifier for the associated database.\nstateSerialization\nThe sync engine’s serialized state."
  },
  {
    "title": "database | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncengineconfiguration/4155473-database",
    "html": "Discussion\n\nMultiple sync engines can run in the same process, each targeting a different database. For example, you may use one sync engine for a person’s private database and another for their shared database.\n\nImportant\n\nWhen using CloudKit’s production environment, don’t create multiple sync engines that target the same database. You can, however, do this in the development environment to help testing — for example, to simulate multiple devices syncing back and forth.\n\nSee Also\nManaging attributes\nautomaticallySync\nA Boolean value that determines whether the engine syncs automatically.\nsubscriptionID\nThe subscription identifier for the associated database.\nstateSerialization\nThe sync engine’s serialized state."
  },
  {
    "title": "operationGroup | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncenginesendchangesoptions/4155466-operationgroup",
    "html": "Discussion\n\nTip\n\nProviding a specific operation group helps you to identify and analyze the telemetry of send operations in CloudKit Console.\n\nThe default value is nil."
  },
  {
    "title": "hasPendingUntrackedChanges | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncenginestate/4200032-haspendinguntrackedchanges",
    "html": "Discussion\n\nUse this property to inform the sync engine that there are pending changes other than those available in pendingRecordZoneChanges. After you set this property, the sync engine automatically schedules a send operation and, when that operation executes, asks your delegate to provide those changes by invoking the syncEngine:nextRecordZoneChangeBatchForContext: method.\n\nUsing this property is optional and is necessary only if you track pending changes manually, outside of the sync engine’s state.\n\nSee Also\nAccessing pending changes\npendingDatabaseChanges\nThe database changes that the sync engine has yet to send to the iCloud servers.\npendingRecordZoneChanges\nThe record zone changes that the sync engine has yet to send to the iCloud servers."
  },
  {
    "title": "initWithDatabase:stateSerialization:delegate: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncengineconfiguration/4155475-initwithdatabase",
    "html": "Parameters\ndatabase\n\nThe database to sync — either a person’s private database or their shared database.\n\nstateSerialization\n\nIf this is the first initialization of the associated sync engine, specify nil; otherwise, specify the state from the most recent CKSyncEngineStateUpdateEvent that your delegate handled.\n\ndelegate\n\nThe object that provides the records to sync and handles any related events.\n\nReturn Value\n\nAn initialized configuration instance, or nil if CloudKit can’t create one."
  },
  {
    "title": "addPendingDatabaseChanges: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncenginestate/4183310-addpendingdatabasechanges",
    "html": "Parameters\nchanges\n\nAn array of database changes.\n\nDiscussion\n\nUse this method to enable the sync engine to manage your pending database changes. For example, when someone makes a change that your app needs to send to the server, use this method to record the change. If there are no scheduled sync operations when you invoke this method, the sync engine automatically schedules one to send the changes. After the engine sends those changes, it notifies your app’s sync delegate with an event of type CKSyncEngineSentDatabaseChangesEvent.\n\nThe sync engine ensures the consistency of any pending changes it’s tracking, deduplicating them as necessary. The engine removes changes from the list as it sends them, but retains any that fail due to a recoverable error, such as a network issue or exceeding the rate limit.\n\nNote\n\nThe order in which you apply database changes is important. For example, if you add a save change and then a delete change, the sync engine discards the save and sends only the delete change. The reverse is also true.\n\nSee Also\nModifying pending changes\n- removePendingDatabaseChanges:\nRemoves the specified database changes from the state.\nCKSyncEnginePendingZoneDelete\nAn object that describes an unsent record zone deletion.\nCKSyncEnginePendingZoneSave\nAn object that describes an unsent record zone modification.\nCKSyncEnginePendingDatabaseChange\nAn object that describes an unsent database modification.\n- addPendingRecordZoneChanges:\nAdds the specified record zone changes to the state.\n- removePendingRecordZoneChanges:\nRemoves the specified record zone changes from the state.\nCKSyncEnginePendingRecordZoneChange\nDescribes an unsent record modification."
  },
  {
    "title": "pendingDatabaseChanges | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncenginestate/4183312-pendingdatabasechanges",
    "html": "Discussion\n\nThis array contains any pending database changes to send to the iCloud servers in a subsequent send operation (scheduled or manual). After the sync engine sends those changes, your app’s sync delegate receives an event of type CKSyncEngineSentDatabaseChangesEvent.\n\nUse the addPendingDatabaseChanges: and removePendingDatabaseChanges: methods to modify the array’s contents.\n\nSee Also\nAccessing pending changes\nhasPendingUntrackedChanges\nA Boolean value that indicates whether there are pending changes that the sync engine is unaware of.\npendingRecordZoneChanges\nThe record zone changes that the sync engine has yet to send to the iCloud servers."
  },
  {
    "title": "pendingRecordZoneChanges | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncenginestate/4183313-pendingrecordzonechanges",
    "html": "Discussion\n\nThis array contains any pending record zone changes to send to the iCloud servers in a subsequent send operation (scheduled or manual). After the sync engine sends those changes, your app’s sync delegate receives an event of type CKSyncEngineSentRecordZoneChangesEvent.\n\nUse the addPendingRecordZoneChanges: and removePendingRecordZoneChanges: methods to modify the array’s contents.\n\nSee Also\nAccessing pending changes\nhasPendingUntrackedChanges\nA Boolean value that indicates whether there are pending changes that the sync engine is unaware of.\npendingDatabaseChanges\nThe database changes that the sync engine has yet to send to the iCloud servers."
  },
  {
    "title": "stateSerialization | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncengineconfiguration/4155476-stateserialization",
    "html": "Discussion\n\nThis property returns the value you specify for the initializer’s stateSerialization parameter. If you choose to set this property after initialization, assign the state from the most recent CKSyncEngineStateUpdateEvent handled by your delegate. However, If this is the first initialization of the associated sync engine, specify nil instead.\n\nThe default value is nil.\n\nSee Also\nManaging attributes\nautomaticallySync\nA Boolean value that determines whether the engine syncs automatically.\ndatabase\nThe associated database.\nsubscriptionID\nThe subscription identifier for the associated database."
  },
  {
    "title": "CKRecordSaveAllKeys | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckrecordsavepolicy/ckrecordsaveallkeys",
    "html": "Discussion\n\nImportant\n\nThis policy doesn’t compare record change tags. To ensure that you only save changes to the most recent version of a record, use CKRecordSaveIfServerRecordUnchanged instead.\n\nThis policy causes CloudKit to overwrite any existing values on the server. It’s possible for a server record to contain keys that aren’t present locally. Another client might add keys to the record after you fetch it. Also, if you use the desiredKeys property to request a subset of keys during a fetch operation, saving that same record modifies only those keys that you include in the fetch and any keys you add to the record after that.\n\nSee Also\nSave Policies\nCKRecordSaveIfServerRecordUnchanged\nA policy that instructs CloudKit to only proceed if the record’s change tag matches that of the server’s copy.\nCKRecordSaveChangedKeys\nA policy that instructs CloudKit to save only the fields of a record that contain changes."
  },
  {
    "title": "delegate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncengineconfiguration/4155474-delegate",
    "html": "See Also\nHandling record changes\nCKSyncEngineDelegate\nAn interface for providing record data to a sync engine and customizing that engine’s behavior."
  },
  {
    "title": "sendChangesWithOptions:completionHandler: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncengine/4155451-sendchangeswithoptions",
    "html": "Parameters\noptions\n\nThe options to use when sending changes. For more information, see CKSyncEngineSendChangesOptions.\n\ncompletionHandler\n\nThe block to execute when the send completes.\n\nDiscussion\n\nIf the send fails, the completion handler’s error parameter is an object that describes that failure; otherwise, it’s nil.\n\nUse this method to ensure the sync engine sends all pending local changes to the server before your app continues. This isn’t necessary in normal use, as the engine automatically syncs your app’s records. It is useful, however, in scenarios where you require greater control over sync, such as a “Backup now” button or unit tests.\n\nNote\n\nThe sync engine invokes the completion handler only after your sync delegate finishes processing all related send events.\n\nSee Also\nInvoking manual sync operations\n- fetchChangesWithCompletionHandler:\nFetches pending remote changes from the server.\n- fetchChangesWithOptions:completionHandler:\nFetches pending remote changes from the server using the specified options.\nCKSyncEngineFetchChangesOptions\nA set of options to use with a fetch operation.\n- sendChangesWithCompletionHandler:\nSends pending local changes to the server.\nCKSyncEngineSendChangesOptions\nA set of options to use with a send operation."
  },
  {
    "title": "CKSyncEngineFetchChangesOptions | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncenginefetchchangesoptions",
    "html": "Topics\nManaging attributes\noperationGroup\nThe operation group to use for the underlying CloudKit operations.\nInstance Properties\nprioritizedZoneIDs\nscope\nInstance Methods\n- initWithScope:\nRelationships\nInherits From\nNSObject\nConforms To\nNSCopying\nSee Also\nInvoking manual sync operations\n- fetchChangesWithCompletionHandler:\nFetches pending remote changes from the server.\n- fetchChangesWithOptions:completionHandler:\nFetches pending remote changes from the server using the specified options.\n- sendChangesWithCompletionHandler:\nSends pending local changes to the server.\n- sendChangesWithOptions:completionHandler:\nSends pending local changes to the server using the specified options.\nCKSyncEngineSendChangesOptions\nA set of options to use with a send operation."
  },
  {
    "title": "fetchChangesWithOptions:completionHandler: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncengine/4155447-fetchchangeswithoptions",
    "html": "Parameters\noptions\n\nThe options to use when fetching changes. For more information, see CKSyncEngineFetchChangesOptions.\n\ncompletionHandler\n\nThe block to execute when the fetch completes.\n\nDiscussion\n\nIf the fetch fails, the completion handler’s error parameter is an object that describes that failure; otherwise, it’s nil.\n\nUse this method to ensure the sync engine immediatley fetches all pending remote changes before your app continues. This isn’t necessary in normal use, as the engine automatically syncs your app’s records. It is useful, however, in scenarios where you require more control over sync, such as pull-to-refresh or unit tests.\n\nNote\n\nThe sync engine invokes the completion handler only after your sync delegate finishes processing all related fetch events.\n\nSee Also\nInvoking manual sync operations\n- fetchChangesWithCompletionHandler:\nFetches pending remote changes from the server.\nCKSyncEngineFetchChangesOptions\nA set of options to use with a fetch operation.\n- sendChangesWithCompletionHandler:\nSends pending local changes to the server.\n- sendChangesWithOptions:completionHandler:\nSends pending local changes to the server using the specified options.\nCKSyncEngineSendChangesOptions\nA set of options to use with a send operation."
  },
  {
    "title": "cancelOperationsWithCompletionHandler: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncengine/4155444-canceloperationswithcompletionha",
    "html": "Discussion\n\nThe sync engine processes cancelation requests asynchronously, meaning it’s possible for in-progress operations to complete even after this method returns."
  },
  {
    "title": "CKSyncEngineState | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncenginestate",
    "html": "Overview\n\nTo reliably and consistently sync your app’s data, a sync engine keeps a record of several important pieces of data, such as server changes tokens (for databases and record zones), subscription identifiers, the most recent userRecordID, and so on. This class automatically manages that state on behalf of your app, but there are certain elements you can modify. For example, you control the list of pending changes to send to the iCloud servers and manipulate that list using the addPendingDatabaseChanges: and addPendingRecordZoneChanges: methods. If there aren’t any scheduled sync operations when you invoke these methods, the engine automatically schedules one.\n\nAn engine’s state changes periodically and, when it does, the sync engine dispatches an event of type CKSyncEngineStateUpdateEvent to your delegate. The event contains an instance of CKSyncEngineStateSerialization and, on receipt of such an event, it’s your responsibility to persist the serialized state to disk so that it’s available across app launches. On the next initialization of the sync engine, you provide the most recently persisted state as part of the engine’s configuration. For more information, see initWithDatabase:stateSerialization:delegate:.\n\nTopics\nAccessing pending changes\nhasPendingUntrackedChanges\nA Boolean value that indicates whether there are pending changes that the sync engine is unaware of.\npendingDatabaseChanges\nThe database changes that the sync engine has yet to send to the iCloud servers.\npendingRecordZoneChanges\nThe record zone changes that the sync engine has yet to send to the iCloud servers.\nModifying pending changes\n- addPendingDatabaseChanges:\nAdds the specified database changes to the state.\n- removePendingDatabaseChanges:\nRemoves the specified database changes from the state.\nCKSyncEnginePendingZoneDelete\nAn object that describes an unsent record zone deletion.\nCKSyncEnginePendingZoneSave\nAn object that describes an unsent record zone modification.\nCKSyncEnginePendingDatabaseChange\nAn object that describes an unsent database modification.\n- addPendingRecordZoneChanges:\nAdds the specified record zone changes to the state.\n- removePendingRecordZoneChanges:\nRemoves the specified record zone changes from the state.\nCKSyncEnginePendingRecordZoneChange\nDescribes an unsent record modification.\nInstance Properties\nzoneIDsWithUnfetchedServerChanges\nRelationships\nInherits From\nNSObject\nSee Also\nAccessing the engine’s attributes\ndatabase\nThe associated database.\nstate\nThe sync engine’s state."
  },
  {
    "title": "CKSyncEngineConfiguration | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncengineconfiguration",
    "html": "Topics\nCreating configurations\n- initWithDatabase:stateSerialization:delegate:\nCreates a configuration for the specified database and serialized state.\nHandling record changes\ndelegate\nThe object that provides the records to sync and handles any related events.\nCKSyncEngineDelegate\nAn interface for providing record data to a sync engine and customizing that engine’s behavior.\nManaging attributes\nautomaticallySync\nA Boolean value that determines whether the engine syncs automatically.\ndatabase\nThe associated database.\nsubscriptionID\nThe subscription identifier for the associated database.\nstateSerialization\nThe sync engine’s serialized state.\nRelationships\nInherits From\nNSObject\nSee Also\nCreating a sync engine\n- initWithConfiguration:\nCreates a sync engine with the specified configuration."
  },
  {
    "title": "state | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncengine/4155452-state",
    "html": "See Also\nAccessing the engine’s attributes\ndatabase\nThe associated database.\nCKSyncEngineState\nAn object that manages the sync engine’s state."
  },
  {
    "title": "database | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncengine/4155445-database",
    "html": "See Also\nAccessing the engine’s attributes\nstate\nThe sync engine’s state.\nCKSyncEngineState\nAn object that manages the sync engine’s state."
  },
  {
    "title": "initWithConfiguration: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncengine/4155448-initwithconfiguration",
    "html": "Parameters\nconfiguration\n\nThe attributes of the new sync engine, such as the associated database and the object to use as the engine’s delegate. For more information, see CKSyncEngineConfiguration.\n\nReturn Value\n\nA configured sync engine, or nil if CloudKit can’t create one.\n\nSee Also\nCreating a sync engine\nCKSyncEngineConfiguration\nA type that configures the attributes and behavior of a sync engine."
  },
  {
    "title": "CKRecordSaveChangedKeys | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckrecordsavepolicy/ckrecordsavechangedkeys",
    "html": "Discussion\n\nImportant\n\nThis policy doesn’t compare record change tags. To ensure that you only save changes to the most recent version of a record, use CKRecordSaveIfServerRecordUnchanged instead.\n\nSee Also\nSave Policies\nCKRecordSaveIfServerRecordUnchanged\nA policy that instructs CloudKit to only proceed if the record’s change tag matches that of the server’s copy.\nCKRecordSaveAllKeys\nA policy that instructs CloudKit to save all keys of a record, even those without changes."
  },
  {
    "title": "CKSyncEngineSendChangesOptions | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncenginesendchangesoptions",
    "html": "Topics\nManaging attributes\noperationGroup\nThe operation group to use for the underlying CloudKit operations.\nInstance Properties\nscope\nInstance Methods\n- initWithScope:\nRelationships\nInherits From\nNSObject\nConforms To\nNSCopying\nSee Also\nInvoking manual sync operations\n- fetchChangesWithCompletionHandler:\nFetches pending remote changes from the server.\n- fetchChangesWithOptions:completionHandler:\nFetches pending remote changes from the server using the specified options.\nCKSyncEngineFetchChangesOptions\nA set of options to use with a fetch operation.\n- sendChangesWithCompletionHandler:\nSends pending local changes to the server.\n- sendChangesWithOptions:completionHandler:\nSends pending local changes to the server using the specified options."
  },
  {
    "title": "defaultRecordZone | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckrecordzone/1514919-defaultrecordzone",
    "html": "Discussion\n\nAlways use this method to retrieve the default zone for a database. You can use the returned object to specify the default zone for either the public or private database of a container. You don’t need to save the returned zone object before using it. The owner of the zone is CKOwnerDefaultName, which corresponds to the current user.\n\nThe default zone of a database is a convenient place to store and access records. If you don’t explicitly assign a zone to a record, CloudKit puts the record in the default zone.\n\nThe disadvantage of using the default zone for storing records is that it doesn’t have any special capabilities. You can’t save a group of records to iCloud atomically in the default zone. Similarly, you can’t use a CKFetchRecordChangesOperation object on records in the default zone.\n\nSee Also\nGetting the Default Record Zone\nCKRecordZoneDefaultName\nThe default record zone’s name."
  },
  {
    "title": "CKRecordSaveIfServerRecordUnchanged | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckrecordsavepolicy/ckrecordsaveifserverrecordunchanged",
    "html": "Discussion\n\nThe server maintains a change tag for each record automatically. When you fetch a record, that change tag accompanies the rest of the record’s data. If the change tag in your local record matches the change tag of the record on the server, the save operation proceeds normally. If the server record contains a newer change tag, CloudKit doesn’t save the record and reports a CKErrorServerRecordChanged error.\n\nSee Also\nSave Policies\nCKRecordSaveChangedKeys\nA policy that instructs CloudKit to save only the fields of a record that contain changes.\nCKRecordSaveAllKeys\nA policy that instructs CloudKit to save all keys of a record, even those without changes."
  },
  {
    "title": "CKRecordZoneCapabilityZoneWideSharing | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckrecordzonecapabilities/ckrecordzonecapabilityzonewidesharing",
    "html": "Discussion\n\nCloudKit allows you to share custom record zones that you create in the user’s private database. For more information, see Shared Records.\n\nSee Also\nZone Capabilities\nCKRecordZoneCapabilityAtomic\nA capability that allows atomic changes of multiple records.\nCKRecordZoneCapabilityFetchChanges\nA capability for fetching only the changed records from a zone.\nCKRecordZoneCapabilitySharing\nA capability for sharing a specific hierarchy of records."
  },
  {
    "title": "CKRecordZone.Capabilities | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckrecordzone/capabilities",
    "html": "Topics\nCreating Zone Capabilities\ninit(rawValue: UInt)\nCreates a set of capabilities for a record zone.\nZone Capabilities\nstatic var atomic: CKRecordZone.Capabilities\nA capability that allows atomic changes of multiple records.\nstatic var fetchChanges: CKRecordZone.Capabilities\nA capability for fetching only the changed records from a zone.\nstatic var sharing: CKRecordZone.Capabilities\nA capability for sharing a specific hierarchy of records.\nstatic var zoneWideSharing: CKRecordZone.Capabilities\nA capability for sharing the entire contents of a record zone.\nRelationships\nConforms To\nOptionSet\nSendable\nSee Also\nGetting the Zone Attributes\nvar zoneID: CKRecordZone.ID\nThe unique ID of the zone.\nvar capabilities: CKRecordZone.Capabilities\nThe capabilities that the zone supports."
  },
  {
    "title": "CKRecordZoneCapabilityFetchChanges | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckrecordzonecapabilities/ckrecordzonecapabilityfetchchanges",
    "html": "Discussion\n\nThis capability makes the creation of offline caches more efficient. Instead of fetching the entire record every time, use CKFetchRecordZoneChangesOperation to fetch only the changed values, and use the data it returns to update your cache. This minimizes the amount of data you receive from the server.\n\nSee Also\nZone Capabilities\nCKRecordZoneCapabilityAtomic\nA capability that allows atomic changes of multiple records.\nCKRecordZoneCapabilitySharing\nA capability for sharing a specific hierarchy of records.\nCKRecordZoneCapabilityZoneWideSharing\nA capability for sharing the entire contents of a record zone."
  },
  {
    "title": "initWithZoneName: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckrecordzone/1515102-initwithzonename",
    "html": "Parameters\nzoneName\n\nThe name of the new zone. Zone names inside a user’s private database are unique, consist of up to 255 ASCII characters, and don’t start with an underscore. One way to ensure the uniqueness of zone names is to create a string from a UUID, but you can also use other techniques.\n\nIf this parameter is nil or is an empty string, the method throws an exception.\n\nReturn Value\n\nThe new custom zone, or nil if CloudKit can’t create the zone.\n\nDiscussion\n\nUse this method to create a new record zone. The new zone has the name you provide and the zone’s owner is the current user. After creating the zone, save it to the server using a CKModifyRecordZonesOperation object or the saveRecordZone:completionHandler: method of CKDatabase. You must save the zone to the server before you attempt to save any records to that zone.\n\nDon’t use this method to create a CKRecordZone object that corresponds to a zone that already exists in the database. If the zone exists, fetch it using a CKFetchRecordZonesOperation object or the fetchRecordZoneWithID:completionHandler: method of CKDatabase.\n\nSee Also\nCreating a Record Zone\n- initWithZoneID:\nCreates a record zone object with the specified zone ID.\nCKRecordZoneID\nAn object that uniquely identifies a record zone in a database."
  },
  {
    "title": "initWithZoneID: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckrecordzone/1515207-initwithzoneid",
    "html": "Parameters\nzoneID\n\nThe ID for the new zone. This parameter must not be nil.\n\nReturn Value\n\nThe custom record zone, or nil if CloudKit can’t create the zone.\n\nDiscussion\n\nUse this method when you want to create a new record zone from the information in a zone ID. After creating the zone, save it to the server using a CKModifyRecordZonesOperation object or the saveRecordZone:completionHandler: method of CKDatabase.\n\nDon’t use this method to create a CKRecordZone object that corresponds to a zone that already exists in the database. If the zone exists, fetch it using a CKFetchRecordZonesOperation object or the fetchRecordZoneWithID:completionHandler: method of CKDatabase.\n\nSee Also\nCreating a Record Zone\n- initWithZoneName:\nCreates a record zone object with the specified zone name.\nCKRecordZoneID\nAn object that uniquely identifies a record zone in a database."
  },
  {
    "title": "CKAccountStatusNoAccount | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckaccountstatus/ckaccountstatusnoaccount",
    "html": "See Also\nAccount Statuses\nCKAccountStatusAvailable\nThe user’s iCloud account is available.\nCKAccountStatusCouldNotDetermine\nCloudKit can’t determine the status of the user’s iCloud account.\nCKAccountStatusRestricted\nThe system denies access to the user’s iCloud account.\nCKAccountStatusTemporarilyUnavailable\nThe user’s iCloud account is temporarily unavailable."
  },
  {
    "title": "recordID | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckrecord/reference/1514956-recordid",
    "html": "Discussion\n\nUse the ID in this property to fetch the record on the other end of the link.\n\nSee Also\nGetting the Reference Attributes\nvar action: CKRecord.ReferenceAction\nThe ownership behavior for the records.\nenum CKRecord.ReferenceAction\nConstants that indicate the behavior when deleting a referenced record."
  },
  {
    "title": "action | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckrecord/reference/1514900-action",
    "html": "Discussion\n\nThe value in this property determines which action, if any, to take when deleting the target of the reference object — that is, the object that the recordID property points to. When this property is CKRecord.ReferenceAction.deleteSelf, deleting the target object deletes any records that contain that reference in one of their fields. When this property is CKRecord.ReferenceAction.none, deleting the target object doesn’t delete any additional objects.\n\nSee Also\nGetting the Reference Attributes\nvar recordID: CKRecord.ID\nThe ID of the referenced record.\nenum CKRecord.ReferenceAction\nConstants that indicate the behavior when deleting a referenced record."
  },
  {
    "title": "sendChangesWithCompletionHandler: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncengine/4155450-sendchangeswithcompletionhandler",
    "html": "Parameters\ncompletionHandler\n\nThe block to execute when the send completes.\n\nDiscussion\n\nIf the send fails, the completion handler’s error parameter is an object that describes that failure; otherwise, it’s nil.\n\nUse this method to ensure the sync engine sends all pending local changes to the server before your app continues. This isn’t necessary in normal use, as the engine automatically syncs your app’s records. It is useful, however, in scenarios where you require greater control over sync, such as a “Backup now” button or unit tests.\n\nNote\n\nThe sync engine invokes the completion handler only after your sync delegate finishes processing all related send events.\n\nSee Also\nInvoking manual sync operations\n- fetchChangesWithCompletionHandler:\nFetches pending remote changes from the server.\n- fetchChangesWithOptions:completionHandler:\nFetches pending remote changes from the server using the specified options.\nCKSyncEngineFetchChangesOptions\nA set of options to use with a fetch operation.\n- sendChangesWithOptions:completionHandler:\nSends pending local changes to the server using the specified options.\nCKSyncEngineSendChangesOptions\nA set of options to use with a send operation."
  },
  {
    "title": "fetchChangesWithCompletionHandler: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncengine/4155446-fetchchangeswithcompletionhandle",
    "html": "Parameters\ncompletionHandler\n\nThe block to execute when the fetch completes.\n\nDiscussion\n\nIf the fetch fails, the completion handler’s error parameter is an object that describes that failure; otherwise, it’s nil.\n\nUse this method to ensure the sync engine immediatley fetches all pending remote changes before your app continues. This isn’t necessary in normal use, as the engine automatically syncs your app’s records. It is useful, however, in scenarios where you require more control over sync, such as pull-to-refresh or unit tests.\n\nNote\n\nThe sync engine invokes the completion handler only after your sync delegate finishes processing all related fetch events.\n\nSee Also\nInvoking manual sync operations\n- fetchChangesWithOptions:completionHandler:\nFetches pending remote changes from the server using the specified options.\nCKSyncEngineFetchChangesOptions\nA set of options to use with a fetch operation.\n- sendChangesWithCompletionHandler:\nSends pending local changes to the server.\n- sendChangesWithOptions:completionHandler:\nSends pending local changes to the server using the specified options.\nCKSyncEngineSendChangesOptions\nA set of options to use with a send operation."
  },
  {
    "title": "CKRecordZoneCapabilitySharing | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckrecordzonecapabilities/ckrecordzonecapabilitysharing",
    "html": "Discussion\n\nCloudKit allows you to share record hierarchies from custom record zones that you create in the user’s private database. For more information, see Shared Records.\n\nSee Also\nZone Capabilities\nCKRecordZoneCapabilityAtomic\nA capability that allows atomic changes of multiple records.\nCKRecordZoneCapabilityFetchChanges\nA capability for fetching only the changed records from a zone.\nCKRecordZoneCapabilityZoneWideSharing\nA capability for sharing the entire contents of a record zone."
  },
  {
    "title": "CKRecordZoneDefaultName | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckrecordzonedefaultname",
    "html": "Discussion\n\nUse this value when you need to refer to the default zone by name, such as when creating a zone ID. The default zone has no special capabilities.\n\nSee Also\nGetting the Default Record Zone\n+ defaultRecordZone\nReturns the default record zone."
  },
  {
    "title": "CKAccountStatusCouldNotDetermine | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckaccountstatus/ckaccountstatuscouldnotdetermine",
    "html": "See Also\nAccount Statuses\nCKAccountStatusAvailable\nThe user’s iCloud account is available.\nCKAccountStatusNoAccount\nThe device doesn’t have an iCloud account.\nCKAccountStatusRestricted\nThe system denies access to the user’s iCloud account.\nCKAccountStatusTemporarilyUnavailable\nThe user’s iCloud account is temporarily unavailable."
  },
  {
    "title": "CKAccountStatusRestricted | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckaccountstatus/ckaccountstatusrestricted",
    "html": "Discussion\n\nYour app can’t access the user’s iCloud account due to restrictions that Parental Controls or Mobile Device Management impose.\n\nSee Also\nAccount Statuses\nCKAccountStatusAvailable\nThe user’s iCloud account is available.\nCKAccountStatusCouldNotDetermine\nCloudKit can’t determine the status of the user’s iCloud account.\nCKAccountStatusNoAccount\nThe device doesn’t have an iCloud account.\nCKAccountStatusTemporarilyUnavailable\nThe user’s iCloud account is temporarily unavailable."
  },
  {
    "title": "CKApplicationPermissionStatusGranted | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckapplicationpermissionstatus/ckapplicationpermissionstatusgranted",
    "html": "See Also\nPermission Statuses\nCKApplicationPermissionStatusInitialState\nThe app is yet to request the permission.\nDeprecated\nCKApplicationPermissionStatusCouldNotComplete\nAn error that occurs while processing the permission request.\nDeprecated\nCKApplicationPermissionStatusDenied\nThe user denies the permission.\nDeprecated"
  },
  {
    "title": "CKApplicationPermissionStatusCouldNotComplete | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckapplicationpermissionstatus/ckapplicationpermissionstatuscouldnotcomplete",
    "html": "See Also\nPermission Statuses\nCKApplicationPermissionStatusInitialState\nThe app is yet to request the permission.\nDeprecated\nCKApplicationPermissionStatusDenied\nThe user denies the permission.\nDeprecated\nCKApplicationPermissionStatusGranted\nThe user grants the permission.\nDeprecated"
  },
  {
    "title": "CKApplicationPermissionStatusDenied | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckapplicationpermissionstatus/ckapplicationpermissionstatusdenied",
    "html": "See Also\nPermission Statuses\nCKApplicationPermissionStatusInitialState\nThe app is yet to request the permission.\nDeprecated\nCKApplicationPermissionStatusCouldNotComplete\nAn error that occurs while processing the permission request.\nDeprecated\nCKApplicationPermissionStatusGranted\nThe user grants the permission.\nDeprecated"
  },
  {
    "title": "initWithRecordID:action: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckreference/1515280-initwithrecordid",
    "html": "Parameters\nrecordID\n\nThe ID of the target record. This method throws an exception if you specify nil for this parameter.\n\naction\n\nThe ownership option use between the target record and any records that incorporate this reference object. If you specify the CKReferenceActionDeleteSelf option, the record that the recordID parameter references becomes the owner of (or acts as the parent of) any objects that use this reference object. For a list of possible values, see CKReferenceAction.\n\nReturn Value\n\nAn initialized reference object that points to the specified record, or nil if CloudKit can’t initialize the reference.\n\nDiscussion\n\nUse this method when you have only the ID of the record for the target of a link. You might use this method if you save only the ID of the record to a local data cache.\n\nWhen you create a reference object for use in a search predicate, the predicate ignores the value in the action parameter. Search predicates use only the ID of the record during their comparison.\n\nSee Also\nCreating a Reference\n- initWithRecord:action:\nCreates a reference object that points to the specified record object."
  },
  {
    "title": "initWithRecord:action: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckreference/1515312-initwithrecord",
    "html": "Parameters\nrecord\n\nThe target record of the reference.\n\naction\n\nThe ownership options to use for the records. If you specify the CKReferenceActionDeleteSelf option, the object that the recordID parameter references becomes the owner of (or acts as the parent of) any objects that use this reference object. For a list of possible values, see CKReferenceAction.\n\nReturn Value\n\nAn initialized reference object that points to the specified record, or nil if CloudKit can’t initialize the reference.\n\nDiscussion\n\nUse this method to initialize a reference to a local record object. The local record can be one that you create or one that you fetch from the server.\n\nWhen you create a reference object for use in a search predicate, the predicate ignores the value in the action parameter. Search predicates use only the ID of the record during their comparison.\n\nSee Also\nCreating a Reference\n- initWithRecordID:action:\nCreates a reference object that points to the record with the specified ID."
  },
  {
    "title": "CKReferenceActionDeleteSelf | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckreferenceaction/ckreferenceactiondeleteself",
    "html": "Discussion\n\nCloudKit deletes any records that contain CKReference objects pointing to the current record. The deletion of the additional records can trigger further deletions as the action cascades. The deletions are asynchronous in the default zone and immediate in a custom zone.\n\nSee Also\nDeletion Reference Actions\nCKReferenceActionNone\nA reference action that has no cascading behavior."
  },
  {
    "title": "CKSubscription.NotificationInfo | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksubscription/notificationinfo",
    "html": "Overview\n\nWhen configuring a subscription, use this class to specify the type of push notifications you want to generate when conditions meet the subscription’s trigger. You can provide content that the system displays to the user, describe the sounds to play, and indicate whether the app’s icon has a badge. You can request that the notification include information about the record that triggers it.\n\nWhen your app receives a push notification that a subscription generates, instantiate an instance of CKNotification using the init(fromRemoteNotificationDictionary:) method and pass the notification’s payload. The object that the method returns contains the data you specify when configuring the subscription.\n\nFor more information about push notification alerts and how they display to the user, see Apple Push Notification Service in Local and Remote Notification Programming Guide.\n\nNote\n\nIf you don’t set any of the alertBody, soundName, or shouldBadge properties, CloudKit sends the push notification using a lower priority and doesn’t display any content to the user.\n\nTopics\nCreating Notification Information\ninit(alertBody: String?, alertLocalizationKey: String?, alertLocalizationArgs: [CKRecord.FieldKey], title: String?, titleLocalizationKey: String?, titleLocalizationArgs: [CKRecord.FieldKey], subtitle: String?, subtitleLocalizationKey: String?, subtitleLocalizationArgs: [CKRecord.FieldKey], alertActionLocalizationKey: String?, alertLaunchImage: String?, soundName: String?, desiredKeys: [CKRecord.FieldKey], shouldBadge: Bool, shouldSendContentAvailable: Bool, shouldSendMutableContent: Bool, category: String?, collapseIDKey: String?)\nCreates a notification with the specified values.\nGrouping Notifications\nvar category: String?\nThe name of the action group that corresponds to this notification.\nvar collapseIDKey: String?\nA value that the system uses to coalesce unseen push notifications.\nDisplaying Badges\nvar shouldBadge: Bool\nA Boolean value that determines whether an app’s icon badge increments its value.\nAccessing the Notification Alert\nvar alertBody: String?\nThe text for the notification’s alert.\nvar alertLocalizationKey: String?\nThe key that identifies the localized string for the notification’s alert.\nvar alertLocalizationArgs: [CKRecord.FieldKey]?\nThe fields for building a notification’s alert.\nvar alertActionLocalizationKey: String?\nThe key that identifies the localized string for the notification’s action.\nvar alertLaunchImage: String?\nThe filename of an image to use as a launch image.\nvar soundName: String?\nThe filename of the sound file to play when a notification arrives.\nAccessing the Notification Info\nvar shouldSendContentAvailable: Bool\nA Boolean value that indicates whether the push notification includes the content available flag.\nvar shouldSendMutableContent: Bool\nA Boolean value that indicates whether the push notification sets the mutable content flag.\nAccessing the Record’s Data\nvar desiredKeys: [CKRecord.FieldKey]?\nThe names of fields to include in the push notification’s payload.\nAccessing the Notification Title\nvar title: String?\nThe notification’s title.\nvar titleLocalizationKey: String?\nThe key that identifies the localized string for the notification’s title.\nvar titleLocalizationArgs: [CKRecord.FieldKey]?\nThe fields for building a notification’s title.\nAccessing the Notification Subtitle\nvar subtitle: String?\nThe notification’s subtitle.\nvar subtitleLocalizationKey: String?\nThe key that identifies the localized string for the notification’s subtitle.\nvar subtitleLocalizationArgs: [CKRecord.FieldKey]?\nThe fields for building a notification’s subtitle.\nRelationships\nInherits From\nNSObject\nConforms To\nNSCopying\nNSSecureCoding\nSendable\nSee Also\nSpecifying the Push Notification Data\nvar notificationInfo: CKSubscription.NotificationInfo?\nThe configuration for a subscription’s push notifications."
  },
  {
    "title": "CKRecord_Reference_Action | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckrecord_reference_action",
    "html": "See Also\nDeprecated type aliases\ntypealias CKContainer_Application_PermissionBlock\nDeprecated\ntypealias CKContainer_Application_PermissionStatus\nDeprecated\ntypealias CKContainer_Application_Permissions\nDeprecated\ntypealias CKShare_Participant_AcceptanceStatus\nDeprecated\ntypealias CKShare_Participant_ParticipantType\nDeprecated\ntypealias CKShare_Participant_Permission\nDeprecated\ntypealias CKShare_Participant_Role\nDeprecated"
  },
  {
    "title": "CKSubscription.SubscriptionType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksubscription/subscriptiontype",
    "html": "Topics\nSubscription Types\ncase query\nA constant that indicates the subscription is query-based.\ncase database\nA constant that indicates the subscription is database-based.\ncase recordZone\nA constant that indicates the subscription is zone-based.\nRelationships\nConforms To\nSendable\nSee Also\nAccessing the Subscription Metadata\nvar subscriptionID: CKSubscription.ID\nThe subscription’s unique identifier.\ntypealias CKSubscription.ID\nA type that represents a subscription’s identifier.\nvar subscriptionType: CKSubscription.SubscriptionType\nThe behavior that a subscription provides."
  },
  {
    "title": "subscriptionID | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksubscription/1515199-subscriptionid",
    "html": "Discussion\n\nThis property’s value is the subscription ID that you provide to the initWithRecordType:predicate:subscriptionID:options: or initWithZoneID:subscriptionID:options: methods when you create the subscription. If you use a different method to create the subscription, CloudKit automatically assigns a UUID as the subscription ID.\n\nSee Also\nAccessing the Subscription Metadata\nCKSubscriptionID\nA type that represents a subscription’s identifier.\nsubscriptionType\nThe behavior that a subscription provides.\nCKSubscriptionType\nConstants that identify a subscription’s behavior."
  },
  {
    "title": "CKSyncEngineSyncReason.manual | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncenginesyncreason/manual",
    "html": "Discussion\n\nThe sync engine uses this reason only when your app invokes the fetchChanges(completionHandler:) and sendChanges(completionHandler:) methods and their variants.\n\nSee Also\nSync reasons\ncase scheduled\nA scheduled sync operation."
  },
  {
    "title": "CKSyncEngineAccountChangeType.switchAccounts | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncengineaccountchangetype/switchaccounts",
    "html": "See Also\nAccount change types\ncase signIn\nA change indicating a sign-in to an iCloud account.\ncase signOut\nA change indicating a sign-out of an iCloud account."
  },
  {
    "title": "description | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncengine/event/sentdatabasechanges/failedzonesave/4195626-description",
    "html": "Relationships\nFrom Protocol\nCustomStringConvertible"
  },
  {
    "title": "!=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncengine/event/accountchange/changetype/4155725",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nReturn Value\n\ntrue if the two values are unequal; otherwise, false.\n\nSee Also\nComparing change types\nstatic func == (CKSyncEngine.Event.AccountChange.ChangeType, CKSyncEngine.Event.AccountChange.ChangeType) -> Bool\nReturns a Boolean value that indicates whether two values are equal."
  },
  {
    "title": "CKSyncEngineAccountChangeType.signOut | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncengineaccountchangetype/signout",
    "html": "See Also\nAccount change types\ncase signIn\nA change indicating a sign-in to an iCloud account.\ncase switchAccounts\nA change indicating a switch between two iCloud accounts."
  },
  {
    "title": "CKSyncEngineAccountChangeType.signIn | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncengineaccountchangetype/signin",
    "html": "See Also\nAccount change types\ncase signOut\nA change indicating a sign-out of an iCloud account.\ncase switchAccounts\nA change indicating a switch between two iCloud accounts."
  },
  {
    "title": "==(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncengine/event/accountchange/changetype/4155726",
    "html": "Parameters\na\n\nA value to compare.\n\nb\n\nAnother value to compare.\n\nReturn Value\n\ntrue if the two values are equal; otherwise, false.\n\nSee Also\nComparing change types\nstatic func != (CKSyncEngine.Event.AccountChange.ChangeType, CKSyncEngine.Event.AccountChange.ChangeType) -> Bool\nReturns a Boolean value that indicates whether two values are unequal."
  },
  {
    "title": "CKSyncEngine.Event.AccountChange.ChangeType.switchAccounts(previousUser:currentUser:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncengine/event/accountchange/changetype/switchaccounts_previoususer_currentuser",
    "html": "Discussion\n\nIf the device changes iCloud accounts while your app isn’t running, CKSyncEngine notifies it about that change when the app next launches. Make sure to delete any locally stored data belonging to the previousUser account.\n\nSee Also\nAccount change types\ncase signIn(currentUser: CKRecord.ID)\nA change indicating a sign-in to an iCloud account.\ncase signOut(previousUser: CKRecord.ID)\nA change indicating a sign-out of an iCloud account."
  },
  {
    "title": "CKSyncEngine.Event.AccountChange.ChangeType.signOut(previousUser:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncengine/event/accountchange/changetype/signout_previoususer",
    "html": "Discussion\n\nAfter the device signs out of the iCloud account, delete any locally stored data that belongs to that account.\n\nSee Also\nAccount change types\ncase signIn(currentUser: CKRecord.ID)\nA change indicating a sign-in to an iCloud account.\ncase switchAccounts(previousUser: CKRecord.ID, currentUser: CKRecord.ID)\nA change indicating a switch between two iCloud accounts."
  },
  {
    "title": "CKSyncEngine.Event.AccountChange.ChangeType.signIn(currentUser:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncengine/event/accountchange/changetype/signin_currentuser",
    "html": "Discussion\n\nIf your app has locally stored data when CKSyncEngine notifies it about the device signing in to an iCloud account, perform one of the following actions:\n\nKeep the local data separate from any remote data\n\nMerge the local data with the account’s remote data\n\nDelete the local data\n\nPrompt the account’s owner to make the decision\n\nSee Also\nAccount change types\ncase signOut(previousUser: CKRecord.ID)\nA change indicating a sign-out of an iCloud account.\ncase switchAccounts(previousUser: CKRecord.ID, currentUser: CKRecord.ID)\nA change indicating a switch between two iCloud accounts."
  },
  {
    "title": "description | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncengine/event/sentrecordzonechanges/failedrecordsave/4183714-description",
    "html": "Relationships\nFrom Protocol\nCustomStringConvertible"
  },
  {
    "title": "==(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncengine/pendingdatabasechange/4183725",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nReturn Value\n\ntrue if the two values are equal; otherwise, false.\n\nSee Also\nIdentifying and comparing changes\nvar hashValue: Int\nThe hash value.\nfunc hash(into: inout Hasher)\nHashes the essential attributes of the change using the provided hasher.\nstatic func != (CKSyncEngine.PendingDatabaseChange, CKSyncEngine.PendingDatabaseChange) -> Bool\nReturns a Boolean value that indicates whether two values are unequal."
  },
  {
    "title": "CKRecordZoneCapabilityAtomic | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckrecordzonecapabilities/ckrecordzonecapabilityatomic",
    "html": "Discussion\n\nWhen you use a CKModifyRecordsOperation object to save records, if the server is unable to save the changes for one record, it doesn’t save the changes for any of the records. Combining this capability with the CKRecordSaveIfServerRecordUnchanged policy of the operation object prevents your app from overwriting changes to a group of records if one or more of the records on the server has recent changes.\n\nSee Also\nZone Capabilities\nCKRecordZoneCapabilityFetchChanges\nA capability for fetching only the changed records from a zone.\nCKRecordZoneCapabilitySharing\nA capability for sharing a specific hierarchy of records.\nCKRecordZoneCapabilityZoneWideSharing\nA capability for sharing the entire contents of a record zone."
  },
  {
    "title": "subscript(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckrecordkeyvaluesetting/3003393-subscript",
    "html": "See Also\nCKRecordKeyValueSetting Implementations\nsubscript(CKRecord.FieldKey) -> (CKRecordValueProtocol)?\nAccesses the value for the specified key in the record."
  },
  {
    "title": "CKSyncEngineZoneDeletionReason.encryptedDataReset | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncenginezonedeletionreason/encrypteddatareset",
    "html": "Discussion\n\nImportant\n\nUpon receipt of deletions with this reason, you must delete any locally cached data and not resend it to iCloud.\n\nSee Also\nDeletion reasons\ncase deleted\nYour app deleted the record zone.\ncase purged\nThe owner of the iCloud account purged your app’s data using the Settings app."
  },
  {
    "title": "CKSyncEngineEventType.fetchedRecordZoneChanges | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncengineeventtype/fetchedrecordzonechanges",
    "html": "See Also\nEvent types\ncase stateUpdate\nAn event indicating an update to the sync engine’s state.\ncase accountChange\nAn event indicating a change to the device’s iCloud account.\ncase fetchedDatabaseChanges\nAn event indicating there are fetched database changes to process.\ncase sentDatabaseChanges\nAn event indicating a sent batch of database changes.\ncase sentRecordZoneChanges\nAn event indicating a sent batch of record zone changes.\ncase willFetchChanges\nAn event indicating an imminent database fetch.\ncase willFetchRecordZoneChanges\nAn event indicating an imminent fetch of changes in a record zone.\ncase didFetchRecordZoneChanges\nAn event that indicates the record zone fetch is done.\ncase didFetchChanges\nAn event that indicates the database fetch is done.\ncase willSendChanges\nAn event indicating an imminent send of local changes.\ncase didSendChanges\nAn event that indicates a finished send operation."
  },
  {
    "title": "CKSyncEngineZoneDeletionReason.deleted | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncenginezonedeletionreason/deleted",
    "html": "See Also\nDeletion reasons\ncase encryptedDataReset\nThe owner of the iCloud account reset their encrypted data.\ncase purged\nThe owner of the iCloud account purged your app’s data using the Settings app."
  },
  {
    "title": "CKSyncEngineZoneDeletionReason.purged | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncenginezonedeletionreason/purged",
    "html": "Discussion\n\nImportant\n\nUpon receipt of deletions with this reason, you must delete any locally cached data and not resend it to iCloud.\n\nSee Also\nDeletion reasons\ncase deleted\nYour app deleted the record zone.\ncase encryptedDataReset\nThe owner of the iCloud account reset their encrypted data."
  },
  {
    "title": "atomicByZone | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncengine/recordzonechangebatch/4183742-atomicbyzone",
    "html": "Discussion\n\nWhen true, CloudKit processes record changes atomically by record zone, and if any individual change fails, all other changes in that record’s record zone fail and return an error of type CKError.Code.batchRequestFailed.\n\nThe default value is false."
  },
  {
    "title": "description | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncengine/syncreason/4180500-description",
    "html": "Relationships\nFrom Protocol\nCustomStringConvertible"
  },
  {
    "title": "hash(into:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckdatabase/databasechange/deletion/reason/4165731-hash",
    "html": "Relationships\nFrom Protocol\nHashable"
  },
  {
    "title": "==(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncengine/syncreason/4155817",
    "html": "Parameters\na\n\nA value to compare.\n\nb\n\nAnother value to compare.\n\nReturn Value\n\ntrue if the two values are equal; otherwise, false.\n\nSee Also\nIdentifying and comparing reasons\nvar hashValue: Int\nThe hash value.\nfunc hash(into: inout Hasher)\nHashes the essential attributes of the reason using the provided hasher.\nstatic func != (CKSyncEngine.SyncReason, CKSyncEngine.SyncReason) -> Bool\nReturns a Boolean value that indicates whether two values are unequal."
  },
  {
    "title": "hashValue | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncengine/syncreason/4155819-hashvalue",
    "html": "Discussion\n\nThe framework doesn’t provide any guarantees that hash values are the same across multiple executions of your app. Don’t persist hash values to use during a future execution.\n\nRelationships\nFrom Protocol\nHashable\nSee Also\nIdentifying and comparing reasons\nfunc hash(into: inout Hasher)\nHashes the essential attributes of the reason using the provided hasher.\nstatic func == (CKSyncEngine.SyncReason, CKSyncEngine.SyncReason) -> Bool\nReturns a Boolean value that indicates whether two values are equal.\nstatic func != (CKSyncEngine.SyncReason, CKSyncEngine.SyncReason) -> Bool\nReturns a Boolean value that indicates whether two values are unequal."
  },
  {
    "title": "CKSyncEngine.SyncReason.manual | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncengine/syncreason/manual",
    "html": "Discussion\n\nThe sync engine uses this reason only when your app invokes the fetchChanges(_:) and sendChanges(_:) methods.\n\nSee Also\nSync reasons\ncase scheduled\nA scheduled sync operation."
  },
  {
    "title": "CKSyncEngine.SyncReason.scheduled | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncengine/syncreason/scheduled",
    "html": "See Also\nSync reasons\ncase manual\nA manual sync operation."
  },
  {
    "title": "CKSyncEngineSyncReason.scheduled | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncenginesyncreason/scheduled",
    "html": "See Also\nSync reasons\ncase manual\nA manual sync operation."
  },
  {
    "title": "description | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncengine/fetchchangesoptions/scope/4273586-description",
    "html": "Relationships\nFrom Protocol\nCustomStringConvertible"
  },
  {
    "title": "CKAccountStatusAvailable | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckaccountstatus/ckaccountstatusavailable",
    "html": "See Also\nAccount Statuses\nCKAccountStatusCouldNotDetermine\nCloudKit can’t determine the status of the user’s iCloud account.\nCKAccountStatusNoAccount\nThe device doesn’t have an iCloud account.\nCKAccountStatusRestricted\nThe system denies access to the user’s iCloud account.\nCKAccountStatusTemporarilyUnavailable\nThe user’s iCloud account is temporarily unavailable."
  },
  {
    "title": "CKAccountStatusTemporarilyUnavailable | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckaccountstatus/ckaccountstatustemporarilyunavailable",
    "html": "Discussion\n\nYou receive this account status when the user’s iCloud account is available, but isn’t ready to support CloudKit operations. Don’t delete any cached data and don’t enqueue any CloudKit operations after receipt of this account status. Instead, use the CKAccountChangedNotification notification to listen for when the status changes to CKAccountStatusAvailable.\n\nSee Also\nAccount Statuses\nCKAccountStatusAvailable\nThe user’s iCloud account is available.\nCKAccountStatusCouldNotDetermine\nCloudKit can’t determine the status of the user’s iCloud account.\nCKAccountStatusNoAccount\nThe device doesn’t have an iCloud account.\nCKAccountStatusRestricted\nThe system denies access to the user’s iCloud account."
  },
  {
    "title": "encode(to:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncengine/state/serialization/4155807-encode",
    "html": "Parameters\nencoder\n\nThe encoder to store data in.\n\nRelationships\nFrom Protocol\nEncodable"
  },
  {
    "title": "init(from:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncengine/state/serialization/4155808-init",
    "html": "Parameters\ndecoder\n\nThe decoder to read data from.\n\nRelationships\nFrom Protocol\nDecodable"
  },
  {
    "title": "description | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncengine/pendingdatabasechange/4183727-description",
    "html": "Relationships\nFrom Protocol\nCustomStringConvertible"
  },
  {
    "title": "!=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncengine/pendingdatabasechange/4183724",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nReturn Value\n\ntrue if the two values are unequal; otherwise, false.\n\nSee Also\nIdentifying and comparing changes\nvar hashValue: Int\nThe hash value.\nfunc hash(into: inout Hasher)\nHashes the essential attributes of the change using the provided hasher.\nstatic func == (CKSyncEngine.PendingDatabaseChange, CKSyncEngine.PendingDatabaseChange) -> Bool\nReturns a Boolean value that indicates whether two values are equal."
  },
  {
    "title": "CKSyncEnginePendingDatabaseChangeType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncenginependingdatabasechangetype",
    "html": "Topics\nEnumeration Cases\ncase deleteZone\ncase saveZone\nRelationships\nConforms To\nSendable"
  },
  {
    "title": "hash(into:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncengine/pendingdatabasechange/4183728-hash",
    "html": "Parameters\nhasher\n\nThe hasher to use when combining the attributes of the change.\n\nRelationships\nFrom Protocol\nHashable\nSee Also\nIdentifying and comparing changes\nvar hashValue: Int\nThe hash value.\nstatic func == (CKSyncEngine.PendingDatabaseChange, CKSyncEngine.PendingDatabaseChange) -> Bool\nReturns a Boolean value that indicates whether two values are equal.\nstatic func != (CKSyncEngine.PendingDatabaseChange, CKSyncEngine.PendingDatabaseChange) -> Bool\nReturns a Boolean value that indicates whether two values are unequal."
  },
  {
    "title": "CKSyncEngineEventType.didFetchRecordZoneChanges | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncengineeventtype/didfetchrecordzonechanges",
    "html": "See Also\nEvent types\ncase stateUpdate\nAn event indicating an update to the sync engine’s state.\ncase accountChange\nAn event indicating a change to the device’s iCloud account.\ncase fetchedDatabaseChanges\nAn event indicating there are fetched database changes to process.\ncase fetchedRecordZoneChanges\nAn event indicating there are fetched record zone changes to process.\ncase sentDatabaseChanges\nAn event indicating a sent batch of database changes.\ncase sentRecordZoneChanges\nAn event indicating a sent batch of record zone changes.\ncase willFetchChanges\nAn event indicating an imminent database fetch.\ncase willFetchRecordZoneChanges\nAn event indicating an imminent fetch of changes in a record zone.\ncase didFetchChanges\nAn event that indicates the database fetch is done.\ncase willSendChanges\nAn event indicating an imminent send of local changes.\ncase didSendChanges\nAn event that indicates a finished send operation."
  },
  {
    "title": "CKSyncEngineEventType.didSendChanges | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncengineeventtype/didsendchanges",
    "html": "See Also\nEvent types\ncase stateUpdate\nAn event indicating an update to the sync engine’s state.\ncase accountChange\nAn event indicating a change to the device’s iCloud account.\ncase fetchedDatabaseChanges\nAn event indicating there are fetched database changes to process.\ncase fetchedRecordZoneChanges\nAn event indicating there are fetched record zone changes to process.\ncase sentDatabaseChanges\nAn event indicating a sent batch of database changes.\ncase sentRecordZoneChanges\nAn event indicating a sent batch of record zone changes.\ncase willFetchChanges\nAn event indicating an imminent database fetch.\ncase willFetchRecordZoneChanges\nAn event indicating an imminent fetch of changes in a record zone.\ncase didFetchRecordZoneChanges\nAn event that indicates the record zone fetch is done.\ncase didFetchChanges\nAn event that indicates the database fetch is done.\ncase willSendChanges\nAn event indicating an imminent send of local changes."
  },
  {
    "title": "CKSyncEngineEventType.didFetchChanges | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncengineeventtype/didfetchchanges",
    "html": "See Also\nEvent types\ncase stateUpdate\nAn event indicating an update to the sync engine’s state.\ncase accountChange\nAn event indicating a change to the device’s iCloud account.\ncase fetchedDatabaseChanges\nAn event indicating there are fetched database changes to process.\ncase fetchedRecordZoneChanges\nAn event indicating there are fetched record zone changes to process.\ncase sentDatabaseChanges\nAn event indicating a sent batch of database changes.\ncase sentRecordZoneChanges\nAn event indicating a sent batch of record zone changes.\ncase willFetchChanges\nAn event indicating an imminent database fetch.\ncase willFetchRecordZoneChanges\nAn event indicating an imminent fetch of changes in a record zone.\ncase didFetchRecordZoneChanges\nAn event that indicates the record zone fetch is done.\ncase willSendChanges\nAn event indicating an imminent send of local changes.\ncase didSendChanges\nAn event that indicates a finished send operation."
  },
  {
    "title": "CKShare.Participant | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckshare/participant",
    "html": "Overview\n\nParticipants are a key element of sharing in CloudKit. A participant provides information about an iCloud user and their participation in a share, including their identity, acceptance status, permissions, and role.\n\nThe acceptance status determines the participant’s visibilty of the shared records. Statuses are: pending, accepted, removed, and unknown. If the status is pending, use CKAcceptSharesOperation to accept the share. Upon acceptance, CloudKit makes the shared records available in the participant’s shared database. The records remain accessible for as long as the participant’s status is accepted.\n\nYou don’t create participants. Use the share’s participants property to access its existing participants. Use UICloudSharingController to manage the share’s participants and their permissions. Alternatively, you can generate participants using CKFetchShareParticipantsOperation. Participants must have an active iCloud account.\n\nAnyone with the URL of a public share can become a participant in that share. Participants of a public share assume the publicUser role. For private shares, the owner manages the participants. An owner is any participant with the owner role. A participant of a private share can’t accept the share unless the owner adds them first. Private share participants assume the privateUser role. CloudKit removes any pending participants if the owner changes the share’s publicPermission. CloudKit removes all participants if the new permission is none.\n\nParticipants with write permissions can modify or delete any record that you include in the share. However, only the owner can delete a shared hierarchy’s root record. If a participant attempts to delete the share, CloudKit removes the participant. The share remains active for all other participants.\n\nTopics\nAccessing the Participant’s Status\nvar acceptanceStatus: CKShare.ParticipantAcceptanceStatus\nThe current state of the user’s acceptance of the share.\ntypealias CKShare.Participant.AcceptanceStatus\nA type that represents the acceptance status of the participant.\nDeprecated\nenum CKShare.ParticipantAcceptanceStatus\nConstants that represent the status of a participant.\nAccessing the Participant's Identity\nvar userIdentity: CKUserIdentity\nThe identity of the participant.\nManaging the Participant's Capabilites\nvar permission: CKShare.ParticipantPermission\nThe participant’s permission level for the share.\ntypealias CKShare.Participant.Permission\nA type that represents the permissions for a participant.\nDeprecated\nenum CKShare.ParticipantPermission\nConstants that represent the permissions to grant to a share participant.\nvar role: CKShare.ParticipantRole\nThe participant’s role for the share.\ntypealias CKShare.Participant.Role\nA type that represents the role for a participant.\nDeprecated\nenum CKShare.ParticipantRole\nConstants that represent the role of a share’s participant.\nDeprecated\nDeprecated Symbols\nReview unsupported symbols and their replacements.\nRelationships\nInherits From\nNSObject\nConforms To\nNSCopying\nNSSecureCoding\nSendable\nSee Also\nConfiguring the Share\nvar publicPermission: CKShare.ParticipantPermission\nThe permission for anyone with access to the share’s URL.\nfunc addParticipant(CKShare.Participant)\nAdds a participant to the share.\nfunc removeParticipant(CKShare.Participant)\nRemoves a participant from the share."
  },
  {
    "title": "CKSyncEngineEventType.sentDatabaseChanges | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncengineeventtype/sentdatabasechanges",
    "html": "See Also\nEvent types\ncase stateUpdate\nAn event indicating an update to the sync engine’s state.\ncase accountChange\nAn event indicating a change to the device’s iCloud account.\ncase fetchedDatabaseChanges\nAn event indicating there are fetched database changes to process.\ncase fetchedRecordZoneChanges\nAn event indicating there are fetched record zone changes to process.\ncase sentRecordZoneChanges\nAn event indicating a sent batch of record zone changes.\ncase willFetchChanges\nAn event indicating an imminent database fetch.\ncase willFetchRecordZoneChanges\nAn event indicating an imminent fetch of changes in a record zone.\ncase didFetchRecordZoneChanges\nAn event that indicates the record zone fetch is done.\ncase didFetchChanges\nAn event that indicates the database fetch is done.\ncase willSendChanges\nAn event indicating an imminent send of local changes.\ncase didSendChanges\nAn event that indicates a finished send operation."
  },
  {
    "title": "CKSyncEngineEventType.fetchedDatabaseChanges | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncengineeventtype/fetcheddatabasechanges",
    "html": "See Also\nEvent types\ncase stateUpdate\nAn event indicating an update to the sync engine’s state.\ncase accountChange\nAn event indicating a change to the device’s iCloud account.\ncase fetchedRecordZoneChanges\nAn event indicating there are fetched record zone changes to process.\ncase sentDatabaseChanges\nAn event indicating a sent batch of database changes.\ncase sentRecordZoneChanges\nAn event indicating a sent batch of record zone changes.\ncase willFetchChanges\nAn event indicating an imminent database fetch.\ncase willFetchRecordZoneChanges\nAn event indicating an imminent fetch of changes in a record zone.\ncase didFetchRecordZoneChanges\nAn event that indicates the record zone fetch is done.\ncase didFetchChanges\nAn event that indicates the database fetch is done.\ncase willSendChanges\nAn event indicating an imminent send of local changes.\ncase didSendChanges\nAn event that indicates a finished send operation."
  },
  {
    "title": "CKSyncEngineEventType.accountChange | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncengineeventtype/accountchange",
    "html": "See Also\nEvent types\ncase stateUpdate\nAn event indicating an update to the sync engine’s state.\ncase fetchedDatabaseChanges\nAn event indicating there are fetched database changes to process.\ncase fetchedRecordZoneChanges\nAn event indicating there are fetched record zone changes to process.\ncase sentDatabaseChanges\nAn event indicating a sent batch of database changes.\ncase sentRecordZoneChanges\nAn event indicating a sent batch of record zone changes.\ncase willFetchChanges\nAn event indicating an imminent database fetch.\ncase willFetchRecordZoneChanges\nAn event indicating an imminent fetch of changes in a record zone.\ncase didFetchRecordZoneChanges\nAn event that indicates the record zone fetch is done.\ncase didFetchChanges\nAn event that indicates the database fetch is done.\ncase willSendChanges\nAn event indicating an imminent send of local changes.\ncase didSendChanges\nAn event that indicates a finished send operation."
  },
  {
    "title": "hashValue | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckdatabase/databasechange/deletion/reason/4165732-hashvalue",
    "html": "Relationships\nFrom Protocol\nHashable"
  },
  {
    "title": "CKSyncEngineEventType.stateUpdate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncengineeventtype/stateupdate",
    "html": "See Also\nEvent types\ncase accountChange\nAn event indicating a change to the device’s iCloud account.\ncase fetchedDatabaseChanges\nAn event indicating there are fetched database changes to process.\ncase fetchedRecordZoneChanges\nAn event indicating there are fetched record zone changes to process.\ncase sentDatabaseChanges\nAn event indicating a sent batch of database changes.\ncase sentRecordZoneChanges\nAn event indicating a sent batch of record zone changes.\ncase willFetchChanges\nAn event indicating an imminent database fetch.\ncase willFetchRecordZoneChanges\nAn event indicating an imminent fetch of changes in a record zone.\ncase didFetchRecordZoneChanges\nAn event that indicates the record zone fetch is done.\ncase didFetchChanges\nAn event that indicates the database fetch is done.\ncase willSendChanges\nAn event indicating an imminent send of local changes.\ncase didSendChanges\nAn event that indicates a finished send operation."
  },
  {
    "title": "any | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksharingparticipantaccessoption/3950953-any",
    "html": "See Also\nConfiguring the options\nstatic var anyoneWithLink: CKSharingParticipantAccessOption\nThe permission option the system uses to control whether a user can share publicly.\nstatic var specifiedRecipientsOnly: CKSharingParticipantAccessOption\nThe permission option the system uses to control whether a user can share privately."
  },
  {
    "title": "anyoneWithLink | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksharingparticipantaccessoption/3950954-anyonewithlink",
    "html": "See Also\nConfiguring the options\nstatic var any: CKSharingParticipantAccessOption\nThe permission option the system uses to control whether a user can share publicly or privately.\nstatic var specifiedRecipientsOnly: CKSharingParticipantAccessOption\nThe permission option the system uses to control whether a user can share privately."
  },
  {
    "title": "CKContainer_Application_Permissions | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckcontainer_application_permissions",
    "html": "See Also\nDeprecated type aliases\ntypealias CKContainer_Application_PermissionBlock\nDeprecated\ntypealias CKContainer_Application_PermissionStatus\nDeprecated\ntypealias CKRecord_Reference_Action\nDeprecated\ntypealias CKShare_Participant_AcceptanceStatus\nDeprecated\ntypealias CKShare_Participant_ParticipantType\nDeprecated\ntypealias CKShare_Participant_Permission\nDeprecated\ntypealias CKShare_Participant_Role\nDeprecated"
  },
  {
    "title": "hash(into:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncengine/syncreason/4155818-hash",
    "html": "Parameters\nhasher\n\nThe hasher to use when combining the attributes of the reason.\n\nRelationships\nFrom Protocol\nHashable\nSee Also\nIdentifying and comparing reasons\nvar hashValue: Int\nThe hash value.\nstatic func == (CKSyncEngine.SyncReason, CKSyncEngine.SyncReason) -> Bool\nReturns a Boolean value that indicates whether two values are equal.\nstatic func != (CKSyncEngine.SyncReason, CKSyncEngine.SyncReason) -> Bool\nReturns a Boolean value that indicates whether two values are unequal."
  },
  {
    "title": "CKApplicationPermissionStatusInitialState | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckapplicationpermissionstatus/ckapplicationpermissionstatusinitialstate",
    "html": "See Also\nPermission Statuses\nCKApplicationPermissionStatusCouldNotComplete\nAn error that occurs while processing the permission request.\nDeprecated\nCKApplicationPermissionStatusDenied\nThe user denies the permission.\nDeprecated\nCKApplicationPermissionStatusGranted\nThe user grants the permission.\nDeprecated"
  },
  {
    "title": "!=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncengine/syncreason/4155816",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nReturn Value\n\ntrue if the two values are unequal; otherwise, false.\n\nSee Also\nIdentifying and comparing reasons\nvar hashValue: Int\nThe hash value.\nfunc hash(into: inout Hasher)\nHashes the essential attributes of the reason using the provided hasher.\nstatic func == (CKSyncEngine.SyncReason, CKSyncEngine.SyncReason) -> Bool\nReturns a Boolean value that indicates whether two values are equal."
  },
  {
    "title": "CKReferenceActionNone | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckreferenceaction/ckreferenceactionnone",
    "html": "Discussion\n\nNo action occurs when you delete a record that the current record references. Deleting a parent record doesn’t delete that record’s children. The CKReference object still contains the ID of the deleted record and doesn’t update.\n\nSee Also\nDeletion Reference Actions\nCKReferenceActionDeleteSelf\nA reference action that cascades deletions."
  },
  {
    "title": "discoverUserIdentityWithPhoneNumber:completionHandler: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckcontainer/1640516-discoveruseridentitywithphonenum",
    "html": "Parameters\nphoneNumber\n\nThe user’s phone number.\n\ncompletionHandler\n\nThe handler to execute with the fetch results.\n\nDiscussion\n\nThis block doesn’t return a value and takes the following parameters:\n\nuserInfo\n\nThe user identity for the phone number, or nil if CloudKit can’t find an identity.\n\nerror\n\nAn error if a problem occurs, or nil if CloudKit successfully fetches a user identity.\n\nUse this method to retrieve the identity of a user who the current user knows. The user you’re searching for must meet the following criteria:\n\nThe user must be in the current user’s Contacts.\n\nThe user has run the app.\n\nThe user grants the CKApplicationPermissionUserDiscoverability permission for the container.\n\nThis method searches for the user asynchronously and with a low priority. If you want the task to execute the request with a higher priority, create an instance of CKDiscoverUserIdentitiesOperation and configure it to use the necessary priority.\n\nSee Also\nDiscovering User Records\n- discoverAllIdentitiesWithCompletionHandler:\nFetches all user identities that match entries in the user’s Contacts.\nDeprecated\n- discoverUserIdentityWithEmailAddress:completionHandler:\nFetches the user identity for the specified email address.\nDeprecated\n- discoverUserIdentityWithUserRecordID:completionHandler:\nFetches the user identity for the specified user record ID.\nDeprecated\n- fetchShareParticipantWithEmailAddress:completionHandler:\nFetches the share participant with the specified email address.\n- fetchShareParticipantWithPhoneNumber:completionHandler:\nFetches the share participant with the specified phone number.\n- fetchShareParticipantWithUserRecordID:completionHandler:\nFetches the share participant with the specified user record ID.\n- fetchUserRecordIDWithCompletionHandler:\nFetches the user record ID of the current user.\nCKCurrentUserDefaultName\nA constant that provides the current user’s default name.\nCKOwnerDefaultName\nA constant that provides the default owner’s name.\nDeprecated"
  },
  {
    "title": "initWithSubscriptionIDs: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckfetchsubscriptionsoperation/1515157-initwithsubscriptionids",
    "html": "Parameters\nsubscriptionIDs\n\nAn array of strings where each one is an ID of a subscription that you want to retrieve. This parameter sets the subscriptionIDs property’s value. If you specify nil, you must set the subscriptionIDs property before you execute the operation.\n\nDiscussion\n\nAfter creating the operation, assign a block to the fetchSubscriptionCompletionBlock property to process the results.\n\nSee Also\nCreating a Fetch Subscriptions Operation\n- init\nCreates an empty fetch subscriptions operation."
  },
  {
    "title": "CKSubscriptionID | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksubscriptionid",
    "html": "See Also\nAccessing the Subscription Metadata\nsubscriptionID\nThe subscription’s unique identifier.\nsubscriptionType\nThe behavior that a subscription provides.\nCKSubscriptionType\nConstants that identify a subscription’s behavior."
  },
  {
    "title": "hashValue | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckdatabase/databasechange/modification/4200319-hashvalue",
    "html": "Relationships\nFrom Protocol\nHashable"
  },
  {
    "title": "description | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncengine/event/willsendchanges/4180492-description",
    "html": "Relationships\nFrom Protocol\nCustomStringConvertible"
  },
  {
    "title": "description | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncengine/event/fetchedrecordzonechanges/4180485-description",
    "html": "Relationships\nFrom Protocol\nCustomStringConvertible"
  },
  {
    "title": "CKShare.Metadata | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckshare/metadata",
    "html": "Overview\n\nA share’s metadata is an intermediary object that provides access to the share, its owner, and, for a shared record hierarchy, its root record. Metadata also includes details about the current user’s participation in the share.\n\nYou don’t create metadata. CloudKit provides it to your app when the user taps or clicks a share’s url, such as in an email or a message. The method CloudKit calls varies by platform and app configuration, and includes the following:\n\nFor a scene-based iOS app in a running or suspended state, CloudKit calls the windowScene(_:userDidAcceptCloudKitShareWith:) method on your window scene delegate.\n\nFor a scene-based iOS app that’s not running, the system launches your app in response to the tap or click, and calls the scene(_:willConnectTo:options:) method on your scene delegate. The connectionOptions parameter contains the metadata. Use its cloudKitShareMetadata property to access it.\n\nFor an iOS app that doesn’t use scenes, CloudKit calls your app delegate’s application(_:userDidAcceptCloudKitShareWith:) method.\n\nFor a macOS app, CloudKit calls your app delegate’s application(_:userDidAcceptCloudKitShareWith:) method.\n\nFor a watchOS app, CloudKit calls the userDidAcceptCloudKitShare(with:) method on your watch extension delegate.\n\nRespond by checking the participantStatus of the provided metadata. If the status is pending, use CKAcceptSharesOperation to accept participation in the share. You can also fetch metadata independent of this flow using CKFetchShareMetadataOperation.\n\nFor a shared record hierarchy, the hierarchicalRootRecordID property contains the ID of the share’s root record. When using CKFetchShareMetadataOperation to fetch metadata, you can include the entire root record by setting the operation’s shouldFetchRootRecord property to true. CloudKit then populates the rootRecord property before it returns the metadata. You can further customize this behavior using the operation’s rootRecordDesiredKeys property to specify which fields to return. This functionality isn’t applicable for a shared record zone because, unlike a shared record hierarchy, it doesn’t have a nominated root record.\n\nThe participant properties provide the current user’s acceptance status, permissions, and role. Use these values to determine what functionality to provide to the user. For example, only display editing controls for accepted participants with readWrite permissions.\n\nTopics\nAccessing the Share\nvar share: CKShare\nThe share that owns the metadata.\nvar containerIdentifier: String\nThe ID of the share’s container.\nvar ownerIdentity: CKUserIdentity\nThe identity of the share’s owner.\nAccessing the Root Record\nvar hierarchicalRootRecordID: CKRecord.ID?\nThe record ID of the shared hierarchy’s root record.\nvar rootRecord: CKRecord?\nThe share’s root record.\nvar rootRecordID: CKRecord.ID\nThe record ID of the share’s root record.\nDeprecated\nAccessing the Participant’s Capabilities\nvar participantRole: CKShare.ParticipantRole\nThe share’s participant role for the user who retrieves the metadata.\nvar participantPermission: CKShare.ParticipantPermission\nThe share’s permissions for the user who retrieves the metadata.\nvar participantStatus: CKShare.ParticipantAcceptanceStatus\nThe share’s participation status for the user who retrieves the metadata.\nvar participantType: CKShare.ParticipantType\nThe share’s participation type for the user who retrieves the metadata.\nDeprecated\nRelationships\nInherits From\nNSObject\nConforms To\nNSCopying\nNSSecureCoding\nSendable"
  },
  {
    "title": "CKSyncEngineAccountChangeType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncengineaccountchangetype",
    "html": "Topics\nAccount change types\ncase signIn\nA change indicating a sign-in to an iCloud account.\ncase signOut\nA change indicating a sign-out of an iCloud account.\ncase switchAccounts\nA change indicating a switch between two iCloud accounts.\nRelationships\nConforms To\nSendable\nSee Also\nUnderstanding the change\nlet changeType: CKSyncEngine.Event.AccountChange.ChangeType\nThe iCloud account’s change type.\nenum CKSyncEngine.Event.AccountChange.ChangeType\nDescribes a change to the device’s iCloud account."
  },
  {
    "title": "modifications | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncengine/event/fetchedrecordzonechanges/4155742-modifications",
    "html": "See Also\nAccessing changes\nlet deletions: [CKDatabase.RecordZoneChange.Deletion]\nThe fetched record zone deletions."
  },
  {
    "title": "previousServerChangeToken | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckfetchrecordzonechangesoperation/zoneoptions/1640389-previousserverchangetoken",
    "html": "Discussion\n\nEach fetch request returns a unique token in addition to any changes. CloudKit passes the token to your fetchRecordChangesCompletionBlock handler. During a subsequent fetch request, providing the previous token causes the server to return only the changes since the previous fetch request. Tokens are opaque values that you can write to disk safely and reuse later.\n\nSee Also\nZone Change Options\nvar desiredKeys: [String]?\nThe fields to fetch for the requested records.\nDeprecated\nvar resultsLimit: Int\nThe maximum number of records to fetch from the record zone.\nDeprecated"
  },
  {
    "title": "resultsLimit | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckfetchrecordzonechangesoperation/zoneoptions/1640481-resultslimit",
    "html": "Discussion\n\nUse this property to limit the number of results in situations where you expect a large number of records. The default value is 0, which causes the server to return an appropriate number of records using dynamic conditions.\n\nWhen the number of records that CloudKit returns exceeds this limit, the operation sets its moreComing property to true before it executes the fetchRecordChangesCompletionBlock handler. In the handler, check the property’s value and, if it’s true, create a new CKFetchRecordChangesOperation object to fetch more results.\n\nSee Also\nZone Change Options\nvar desiredKeys: [String]?\nThe fields to fetch for the requested records.\nDeprecated\nvar previousServerChangeToken: CKServerChangeToken?\nThe token that identifies the starting point for retrieving changes.\nDeprecated"
  },
  {
    "title": "description | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncengine/event/didfetchchanges/4180481-description",
    "html": "Relationships\nFrom Protocol\nCustomStringConvertible"
  },
  {
    "title": "changeType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncengine/event/accountchange/4155730-changetype",
    "html": "See Also\nUnderstanding the change\nenum CKSyncEngine.Event.AccountChange.ChangeType\nDescribes a change to the device’s iCloud account.\nenum CKSyncEngineAccountChangeType\nDescribes a change to the device’s iCloud account."
  },
  {
    "title": "CKSyncEngine.Event.AccountChange.ChangeType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncengine/event/accountchange/changetype",
    "html": "Topics\nAccount change types\ncase signIn(currentUser: CKRecord.ID)\nA change indicating a sign-in to an iCloud account.\ncase signOut(previousUser: CKRecord.ID)\nA change indicating a sign-out of an iCloud account.\ncase switchAccounts(previousUser: CKRecord.ID, currentUser: CKRecord.ID)\nA change indicating a switch between two iCloud accounts.\nComparing change types\nstatic func == (CKSyncEngine.Event.AccountChange.ChangeType, CKSyncEngine.Event.AccountChange.ChangeType) -> Bool\nReturns a Boolean value that indicates whether two values are equal.\nstatic func != (CKSyncEngine.Event.AccountChange.ChangeType, CKSyncEngine.Event.AccountChange.ChangeType) -> Bool\nReturns a Boolean value that indicates whether two values are unequal.\nRelationships\nConforms To\nSendable\nSee Also\nUnderstanding the change\nlet changeType: CKSyncEngine.Event.AccountChange.ChangeType\nThe iCloud account’s change type.\nenum CKSyncEngineAccountChangeType\nDescribes a change to the device’s iCloud account."
  },
  {
    "title": "description | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncengine/event/sentdatabasechanges/4180486-description",
    "html": "Relationships\nFrom Protocol\nCustomStringConvertible"
  },
  {
    "title": "description | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncengine/event/accountchange/4180480-description",
    "html": "Relationships\nFrom Protocol\nCustomStringConvertible"
  },
  {
    "title": "CKSyncEngine.Event.SentDatabaseChanges.FailedZoneSave | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncengine/event/sentdatabasechanges/failedzonesave",
    "html": "Topics\nAccessing the record zone\nlet zone: CKRecordZone\nThe record zone that CloudKit is unable to modify.\nAccessing the error\nlet error: CKError\nA error that describes the reason for the unsuccessful attempt to modify the associated record zone.\nDebugging the type\nvar description: String\nA textual description of the type that’s suitable for logging.\nRelationships\nConforms To\nCustomStringConvertible\nSendable\nSee Also\nAccessing failed changes\nlet failedZoneDeletes: [CKRecordZone.ID : CKError]\nThe unique identifiers of the record zones CloudKit is unable to delete, and the reasons why.\nlet failedZoneSaves: [CKSyncEngine.Event.SentDatabaseChanges.FailedZoneSave]\nThe record zones that CloudKit is unable to modify."
  },
  {
    "title": "deletedZoneIDs | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncengine/event/sentdatabasechanges/4155744-deletedzoneids",
    "html": "See Also\nAccessing successful changes\nlet savedZones: [CKRecordZone]\nThe modified record zones."
  },
  {
    "title": "failedRecordDeletes | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncengine/event/sentrecordzonechanges/4183719-failedrecorddeletes",
    "html": "See Also\nAccessing failed changes\nlet failedRecordSaves: [CKSyncEngine.Event.SentRecordZoneChanges.FailedRecordSave]\nThe records that CloudKit is unable to modify.\nstruct CKSyncEngine.Event.SentRecordZoneChanges.FailedRecordSave\nA type that describes an unsuccessful attempt to modify a single record."
  },
  {
    "title": "savedRecords | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncengine/event/sentrecordzonechanges/4183721-savedrecords",
    "html": "See Also\nAccessing successful changes\nlet deletedRecordIDs: [CKRecord.ID]\nThe unique identifiers of the deleted records."
  },
  {
    "title": "CKSyncEngine.Event.SentRecordZoneChanges.FailedRecordSave | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncengine/event/sentrecordzonechanges/failedrecordsave",
    "html": "Topics\nAccessing the record\nlet record: CKRecord\nThe record that CloudKit is unable to modify.\nAccessing the error\nlet error: CKError\nA error that describes the reason for the unsuccessful attempt to modify the associated record.\nDebugging the type\nvar description: String\nA textual description of the type that’s suitable for logging.\nRelationships\nConforms To\nCustomStringConvertible\nSendable\nSee Also\nAccessing failed changes\nlet failedRecordDeletes: [CKRecord.ID : CKError]\nThe unique identifiers of the records CloudKit is unable to delete, and the reasons why.\nlet failedRecordSaves: [CKSyncEngine.Event.SentRecordZoneChanges.FailedRecordSave]\nThe records that CloudKit is unable to modify."
  },
  {
    "title": "description | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncengine/event/sentrecordzonechanges/4183718-description",
    "html": "Relationships\nFrom Protocol\nCustomStringConvertible"
  },
  {
    "title": "description | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncengine/event/didsendchanges/4180483-description",
    "html": "Relationships\nFrom Protocol\nCustomStringConvertible"
  },
  {
    "title": "description | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncengine/sendchangesoptions/scope/4273593-description",
    "html": "Relationships\nFrom Protocol\nCustomStringConvertible"
  },
  {
    "title": "hashValue | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckdatabase/recordzonechange/deletion/4200323-hashvalue",
    "html": "Relationships\nFrom Protocol\nHashable"
  },
  {
    "title": "CKModifyRecordsOperation.RecordSavePolicy | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckmodifyrecordsoperation/recordsavepolicy",
    "html": "Topics\nSave Policies\ncase ifServerRecordUnchanged\nA policy that instructs CloudKit to only proceed if the record’s change tag matches that of the server’s copy.\ncase changedKeys\nA policy that instructs CloudKit to save only the fields of a record that contain changes.\ncase allKeys\nA policy that instructs CloudKit to save all keys of a record, even those without changes.\nRelationships\nConforms To\nSendable\nSee Also\nConfiguring the Modify Record Operation\nvar recordsToSave: [CKRecord]?\nThe records to save to the database.\nvar recordIDsToDelete: [CKRecord.ID]?\nThe IDs of the records to delete permanently from the database.\nvar clientChangeTokenData: Data?\nA token that tracks local changes to records.\nvar isAtomic: Bool\nA Boolean value that indicates whether the entire operation fails when CloudKit can’t update one or more records in a record zone.\nvar savePolicy: CKModifyRecordsOperation.RecordSavePolicy\nThe policy to use when saving changes to records."
  },
  {
    "title": "atomic | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckmodifyrecordsoperation/1447484-atomic",
    "html": "Discussion\n\nModifying records atomically prevents you from updating your data in a way that would leave it in an inconsistent state. You use atomic updates when you want to write multiple records to the same record zone. If there’s a failure to modify any of the records in a zone, CloudKit doesn’t change the other records in that same zone. The record zone must have the CKRecordZoneCapabilityAtomic capability for this behavior to apply. If a record zone doesn’t support the atomic capability, setting this property has no effect.\n\nThe default value of this property is YES, which causes all modifications within a single record zone to occur atomically. If your operation contains records in multiple record zones, a failure in one zone doesn’t prevent modifications to records in a different zone. Changing the value of this property to NO causes CloudKit to modify records individually, regardless of whether the record zone supports atomic modifications.\n\nSee Also\nConfiguring the Modify Record Operation\nrecordsToSave\nThe records to save to the database.\nrecordIDsToDelete\nThe IDs of the records to delete permanently from the database.\nclientChangeTokenData\nA token that tracks local changes to records.\nsavePolicy\nThe policy to use when saving changes to records.\nCKRecordSavePolicy\nConstants that indicate which policy to apply when saving records."
  },
  {
    "title": "CKSyncEngineEventType.sentRecordZoneChanges | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncengineeventtype/sentrecordzonechanges",
    "html": "See Also\nEvent types\ncase stateUpdate\nAn event indicating an update to the sync engine’s state.\ncase accountChange\nAn event indicating a change to the device’s iCloud account.\ncase fetchedDatabaseChanges\nAn event indicating there are fetched database changes to process.\ncase fetchedRecordZoneChanges\nAn event indicating there are fetched record zone changes to process.\ncase sentDatabaseChanges\nAn event indicating a sent batch of database changes.\ncase willFetchChanges\nAn event indicating an imminent database fetch.\ncase willFetchRecordZoneChanges\nAn event indicating an imminent fetch of changes in a record zone.\ncase didFetchRecordZoneChanges\nAn event that indicates the record zone fetch is done.\ncase didFetchChanges\nAn event that indicates the database fetch is done.\ncase willSendChanges\nAn event indicating an imminent send of local changes.\ncase didSendChanges\nAn event that indicates a finished send operation."
  },
  {
    "title": "CKSyncEngineEventType.willSendChanges | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncengineeventtype/willsendchanges",
    "html": "See Also\nEvent types\ncase stateUpdate\nAn event indicating an update to the sync engine’s state.\ncase accountChange\nAn event indicating a change to the device’s iCloud account.\ncase fetchedDatabaseChanges\nAn event indicating there are fetched database changes to process.\ncase fetchedRecordZoneChanges\nAn event indicating there are fetched record zone changes to process.\ncase sentDatabaseChanges\nAn event indicating a sent batch of database changes.\ncase sentRecordZoneChanges\nAn event indicating a sent batch of record zone changes.\ncase willFetchChanges\nAn event indicating an imminent database fetch.\ncase willFetchRecordZoneChanges\nAn event indicating an imminent fetch of changes in a record zone.\ncase didFetchRecordZoneChanges\nAn event that indicates the record zone fetch is done.\ncase didFetchChanges\nAn event that indicates the database fetch is done.\ncase didSendChanges\nAn event that indicates a finished send operation."
  },
  {
    "title": "hashValue | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncengine/pendingdatabasechange/4183729-hashvalue",
    "html": "Discussion\n\nThe framework doesn’t provide any guarantees that hash values are the same across multiple executions of your app. Don’t persist hash values to use during a future execution.\n\nRelationships\nFrom Protocol\nHashable\nSee Also\nIdentifying and comparing changes\nfunc hash(into: inout Hasher)\nHashes the essential attributes of the change using the provided hasher.\nstatic func == (CKSyncEngine.PendingDatabaseChange, CKSyncEngine.PendingDatabaseChange) -> Bool\nReturns a Boolean value that indicates whether two values are equal.\nstatic func != (CKSyncEngine.PendingDatabaseChange, CKSyncEngine.PendingDatabaseChange) -> Bool\nReturns a Boolean value that indicates whether two values are unequal."
  },
  {
    "title": "CKSyncEngineEventType.willFetchChanges | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncengineeventtype/willfetchchanges",
    "html": "See Also\nEvent types\ncase stateUpdate\nAn event indicating an update to the sync engine’s state.\ncase accountChange\nAn event indicating a change to the device’s iCloud account.\ncase fetchedDatabaseChanges\nAn event indicating there are fetched database changes to process.\ncase fetchedRecordZoneChanges\nAn event indicating there are fetched record zone changes to process.\ncase sentDatabaseChanges\nAn event indicating a sent batch of database changes.\ncase sentRecordZoneChanges\nAn event indicating a sent batch of record zone changes.\ncase willFetchRecordZoneChanges\nAn event indicating an imminent fetch of changes in a record zone.\ncase didFetchRecordZoneChanges\nAn event that indicates the record zone fetch is done.\ncase didFetchChanges\nAn event that indicates the database fetch is done.\ncase willSendChanges\nAn event indicating an imminent send of local changes.\ncase didSendChanges\nAn event that indicates a finished send operation."
  },
  {
    "title": "CKSyncEngineEventType.willFetchRecordZoneChanges | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncengineeventtype/willfetchrecordzonechanges",
    "html": "See Also\nEvent types\ncase stateUpdate\nAn event indicating an update to the sync engine’s state.\ncase accountChange\nAn event indicating a change to the device’s iCloud account.\ncase fetchedDatabaseChanges\nAn event indicating there are fetched database changes to process.\ncase fetchedRecordZoneChanges\nAn event indicating there are fetched record zone changes to process.\ncase sentDatabaseChanges\nAn event indicating a sent batch of database changes.\ncase sentRecordZoneChanges\nAn event indicating a sent batch of record zone changes.\ncase willFetchChanges\nAn event indicating an imminent database fetch.\ncase didFetchRecordZoneChanges\nAn event that indicates the record zone fetch is done.\ncase didFetchChanges\nAn event that indicates the database fetch is done.\ncase willSendChanges\nAn event indicating an imminent send of local changes.\ncase didSendChanges\nAn event that indicates a finished send operation."
  },
  {
    "title": "subscript(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckrecordkeyvaluesetting/3003392-subscript",
    "html": "See Also\nCKRecordKeyValueSetting Implementations\nsubscript<T>(CKRecord.FieldKey) -> T?\nAccesses the value for the specified key in the record."
  },
  {
    "title": "CKOperation.Configuration | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckoperation/configuration",
    "html": "Overview\n\nAll of the properties in CKOperationConfiguration have a default value. When determining which properties to apply to a CloudKit operation, consult the operation's configuration property, as well as the defaultConfiguration property of the group that the operation belongs to. These properties combine through the following rules:\n\nGroup default configuration value\n\n\t\n\nOperation configuration value\n\n\t\n\nValue applied to operation\n\n\n\n\ndefault value\n\n\t\n\ndefault value\n\n\t\n\ndefault value\n\n\n\n\ndefault value\n\n\t\n\nexplicit value\n\n\t\n\noperation.configuration explicit value\n\n\n\n\nexplicit value\n\n\t\n\ndefault value\n\n\t\n\ngroup.defaultConfiguration explicit value\n\n\n\n\nexplicit value\n\n\t\n\nexplicit value\n\n\t\n\noperation.configuration explicit value\n\nTopics\nPreparing a Configuration\nvar allowsCellularAccess: Bool\nA Boolean value that indicates whether operations that use this configuration can send data over the cellular network.\nvar container: CKContainer?\nThe configuration’s container.\nvar isLongLived: Bool\nA Boolean value that indicates whether the operations that use this configuration are long-lived.\nvar qualityOfService: QualityOfService\nThe priority that the system uses when it allocates resources to the operations that use this configuration.\nvar timeoutIntervalForRequest: TimeInterval\nThe maximum amount of time that a request can take.\nvar timeoutIntervalForResource: TimeInterval\nThe maximum amount of time that a resource request can take.\nRelationships\nInherits From\nNSObject\nConforms To\nSendable\nSee Also\nManaging the Operation's Configuration\nvar configuration: CKOperation.Configuration!\nThe operation’s configuration.\nvar group: CKOperationGroup?\nThe operation’s group.\nvar longLivedOperationWasPersistedBlock: (() -> Void)?\nThe closure to execute when the server begins to store callbacks for the long-lived operation."
  },
  {
    "title": "operationID | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckoperation/1452362-operationid",
    "html": "Discussion\n\nPass this property’s value to the fetchLongLivedOperationWithID:completionHandler: method to fetch the corresponding long-lived operation. For more information, see Long-Lived Operations.\n\nSee Also\nIdentifying the Operation\nCKOperationID\nA type that represents the ID of an operation."
  },
  {
    "title": "CKRecordZone.ID | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckrecordzone/id",
    "html": "Overview\n\nZones are a mechanism for grouping related records together. You create zone ID objects when you want to fetch an existing zone object or create a new zone with a specific name.\n\nA record zone ID distinguishes one zone from another by a name string and the ID of the user who creates the zone. Both strings must be ASCII strings that don’t exceed 255 characters. When creating your own record zone ID objects, you can use names that have more meaning to your app or to the user, providing each zone name is unique within the specified database. The owner name must be either the current user name or the name of another user. Get the current user name from CKCurrentUserDefaultName or by calling fetchUserRecordID(completionHandler:).\n\nWhen creating new record zones, make the name string in the record zone ID unique in the target database. Public databases don’t support custom zones, and only the user who owns the database can create zones in private databases.\n\nDon’t create subclasses of this class.\n\nInteracting with Record Zone IDs\n\nAfter you create a record zone ID, interactions with it typically include:\n\nCreating a CKRecord.ID object so that you can fetch or create records in that zone.\n\nRetrieving an existing CKRecordZone object from the database.\n\nYou don’t need to create a record zone ID to create a record zone. The CKRecordZone class has initialization methods that create a record zone ID using the name string you provide.\n\nCreating Record Zone IDs for Records\n\nTo create a new record in a custom zone, create a record zone ID that specifies the zone name. Use the record zone ID to create a CKRecord.ID, and then use the record ID to create the record.\n\nFetching a Record Zone Object from the Database\n\nTo fetch a record zone from the database, use a CKFetchRecordZonesOperation object or the fetch(withRecordZoneID:completionHandler:) method of CKDatabase. Both techniques accept a record zone ID that you provide and retrieve the corresponding record zone object asynchronously. If you use the operation object, you can retrieve multiple record zones at the same time.\n\nTopics\nCreating a Record Zone ID\ninit(zoneName: String, ownerName: String)\nCreates a record zone ID with the specified name and owner.\nGetting the Record Zone ID Attributes\nvar zoneName: String\nThe unique name of the record zone.\nvar ownerName: String\nThe ID of the user who owns the record zone.\nAccessing the Default Zone\nstatic let `default`: CKRecordZone.ID\nThe default zone ID.\nstatic let defaultZoneName: String\nThe name of the default zone.\nInitializers\ninit(zoneName: String, ownerName: String?)\nDeprecated\nRelationships\nInherits From\nNSObject\nConforms To\nNSCopying\nNSSecureCoding\nSendable\nSee Also\nCreating a Record Zone\ninit(zoneName: String)\nCreates a record zone object with the specified zone name.\ninit(zoneID: CKRecordZone.ID)\nCreates a record zone object with the specified zone ID."
  },
  {
    "title": "CKContainer_Application_PermissionBlock | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckcontainer_application_permissionblock",
    "html": "See Also\nDeprecated type aliases\ntypealias CKContainer_Application_PermissionStatus\nDeprecated\ntypealias CKContainer_Application_Permissions\nDeprecated\ntypealias CKRecord_Reference_Action\nDeprecated\ntypealias CKShare_Participant_AcceptanceStatus\nDeprecated\ntypealias CKShare_Participant_ParticipantType\nDeprecated\ntypealias CKShare_Participant_Permission\nDeprecated\ntypealias CKShare_Participant_Role\nDeprecated"
  },
  {
    "title": "CKContainer_Application_PermissionStatus | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckcontainer_application_permissionstatus",
    "html": "See Also\nDeprecated type aliases\ntypealias CKContainer_Application_PermissionBlock\nDeprecated\ntypealias CKContainer_Application_Permissions\nDeprecated\ntypealias CKRecord_Reference_Action\nDeprecated\ntypealias CKShare_Participant_AcceptanceStatus\nDeprecated\ntypealias CKShare_Participant_ParticipantType\nDeprecated\ntypealias CKShare_Participant_Permission\nDeprecated\ntypealias CKShare_Participant_Role\nDeprecated"
  },
  {
    "title": "addOperation: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckcontainer/1399215-addoperation",
    "html": "Parameters\noperation\n\nThe operation to add to the queue. Make sure you fully configure the operation and have it ready to execute. Don’t change the operation’s configuration after you queue it.\n\nDiscussion\n\nThis method adds the operation to a queue that the container manages. The queue’s operations execute on background threads concurrently, and with default priorities. When you add an operation to the queue, its container becomes the current container."
  },
  {
    "title": "discoverUserIdentityWithEmailAddress:completionHandler: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckcontainer/1640430-discoveruseridentitywithemailadd",
    "html": "Parameters\nemail\n\nThe user’s email address.\n\ncompletionHandler\n\nThe handler to execute with the fetch results.\n\nDiscussion\n\nThis block doesn’t return a value and takes the following parameters:\n\nuserInfo\n\nThe user identity for the email address, or nil if CloudKit can’t find an identity.\n\nerror\n\nAn error if a problem occurs, or nil if CloudKit successfully fetches a user identity.\n\nUse this method to retrieve the identity of a user who the current user knows. The user you’re searching for must meet the following criteria:\n\nThe user must be in the current user’s Contacts.\n\nThe user has run the app.\n\nThe user grants the CKApplicationPermissionUserDiscoverability permission for the container.\n\nThis method searches for the user asynchronously and with a low priority. If you want the task to execute the request with a higher priority, create an instance of CKDiscoverUserIdentitiesOperation and configure it to use the necessary priority.\n\nSee Also\nDiscovering User Records\n- discoverAllIdentitiesWithCompletionHandler:\nFetches all user identities that match entries in the user’s Contacts.\nDeprecated\n- discoverUserIdentityWithPhoneNumber:completionHandler:\nFetches the user identity for the specified phone number.\nDeprecated\n- discoverUserIdentityWithUserRecordID:completionHandler:\nFetches the user identity for the specified user record ID.\nDeprecated\n- fetchShareParticipantWithEmailAddress:completionHandler:\nFetches the share participant with the specified email address.\n- fetchShareParticipantWithPhoneNumber:completionHandler:\nFetches the share participant with the specified phone number.\n- fetchShareParticipantWithUserRecordID:completionHandler:\nFetches the share participant with the specified user record ID.\n- fetchUserRecordIDWithCompletionHandler:\nFetches the user record ID of the current user.\nCKCurrentUserDefaultName\nA constant that provides the current user’s default name.\nCKOwnerDefaultName\nA constant that provides the default owner’s name.\nDeprecated"
  },
  {
    "title": "discoverAllIdentitiesWithCompletionHandler: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckcontainer/1640421-discoverallidentitieswithcomplet",
    "html": "Parameters\ncompletionHandler\n\nThe handler to execute with the fetch results.\n\nDiscussion\n\nThe block doesn’t return a value and takes the following parameters:\n\nuserIdentities\n\nThe user identities that match entries in the user’s Contacts.\n\nerror\n\nAn error if a problem occurs, or nil if the system successfully completes the request.\n\nThis method searches for the users asynchronously and with a low priority. If you want the task to execute with a higher priority, create an instance of CKDiscoverAllUserIdentitiesOperation and configure it to use the necessary priority.\n\nSee Also\nDiscovering User Records\n- discoverUserIdentityWithEmailAddress:completionHandler:\nFetches the user identity for the specified email address.\nDeprecated\n- discoverUserIdentityWithPhoneNumber:completionHandler:\nFetches the user identity for the specified phone number.\nDeprecated\n- discoverUserIdentityWithUserRecordID:completionHandler:\nFetches the user identity for the specified user record ID.\nDeprecated\n- fetchShareParticipantWithEmailAddress:completionHandler:\nFetches the share participant with the specified email address.\n- fetchShareParticipantWithPhoneNumber:completionHandler:\nFetches the share participant with the specified phone number.\n- fetchShareParticipantWithUserRecordID:completionHandler:\nFetches the share participant with the specified user record ID.\n- fetchUserRecordIDWithCompletionHandler:\nFetches the user record ID of the current user.\nCKCurrentUserDefaultName\nA constant that provides the current user’s default name.\nCKOwnerDefaultName\nA constant that provides the default owner’s name.\nDeprecated"
  },
  {
    "title": "error | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncengine/event/didfetchrecordzonechanges/4155733-error",
    "html": "Discussion\n\nA nil value indicates a successful fetch."
  },
  {
    "title": "CKSyncEngineZoneDeletionReason | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncenginezonedeletionreason",
    "html": "Topics\nDeletion reasons\ncase deleted\nYour app deleted the record zone.\ncase encryptedDataReset\nThe owner of the iCloud account reset their encrypted data.\ncase purged\nThe owner of the iCloud account purged your app’s data using the Settings app.\nRelationships\nConforms To\nSendable\nSee Also\nAccessing changes\nlet deletions: [CKDatabase.DatabaseChange.Deletion]\nThe fetched record deletions.\nlet modifications: [CKDatabase.DatabaseChange.Modification]\nThe fetched record modifications."
  },
  {
    "title": "description | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncengine/event/fetcheddatabasechanges/4180484-description",
    "html": "Relationships\nFrom Protocol\nCustomStringConvertible"
  },
  {
    "title": "description | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncengine/event/didfetchrecordzonechanges/4180482-description",
    "html": "Relationships\nFrom Protocol\nCustomStringConvertible"
  },
  {
    "title": "deletions | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncengine/event/fetcheddatabasechanges/4155738-deletions",
    "html": "See Also\nAccessing changes\nenum CKSyncEngineZoneDeletionReason\nDescribes the reason for a record zone deletion.\nlet modifications: [CKDatabase.DatabaseChange.Modification]\nThe fetched record modifications."
  },
  {
    "title": "modifications | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncengine/event/fetcheddatabasechanges/4155739-modifications",
    "html": "See Also\nAccessing changes\nlet deletions: [CKDatabase.DatabaseChange.Deletion]\nThe fetched record deletions.\nenum CKSyncEngineZoneDeletionReason\nDescribes the reason for a record zone deletion."
  },
  {
    "title": "description | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncengine/event/willfetchchanges/4180490-description",
    "html": "Relationships\nFrom Protocol\nCustomStringConvertible"
  },
  {
    "title": "fetchSubscriptionCompletionBlock | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckfetchsubscriptionsoperation/1515261-fetchsubscriptioncompletionblock",
    "html": "Discussion\n\nThe block returns no value and takes the following parameters:\n\nsubscriptionsBySubscriptionID\n\nA dictionary with keys that are the IDs of the subscriptions you request, and values that are the corresponding subscriptions.\n\noperationError\n\nAn error that contains information about a problem, or nil if the system successfully fetches the subscriptions.\n\nThe operation executes this block only once, and it’s your only opportunity to process the results. The block must be capable of executing on a background queue, so any tasks that require access to the main queue must redirect accordingly.\n\nThe block reports an error of type CKErrorPartialFailure when it retrieves only some of the subscriptions successfully. The userInfo dictionary of the error contains a CKPartialErrorsByItemIDKey key that has a dictionary as its value. The keys of the dictionary are the IDs of the subscriptions that the operation can’t fetch, and the corresponding values are errors that contain information about the failures.\n\nSet this property’s value before you execute the operation or submit it to a queue."
  },
  {
    "title": "failedZoneDeletes | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncengine/event/sentdatabasechanges/4155745-failedzonedeletes",
    "html": "See Also\nAccessing failed changes\nlet failedZoneSaves: [CKSyncEngine.Event.SentDatabaseChanges.FailedZoneSave]\nThe record zones that CloudKit is unable to modify.\nstruct CKSyncEngine.Event.SentDatabaseChanges.FailedZoneSave\nA type that describes an unsuccessful attempt to modify a single record zone."
  },
  {
    "title": "failedZoneSaves | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncengine/event/sentdatabasechanges/4195629-failedzonesaves",
    "html": "See Also\nAccessing failed changes\nlet failedZoneDeletes: [CKRecordZone.ID : CKError]\nThe unique identifiers of the record zones CloudKit is unable to delete, and the reasons why.\nstruct CKSyncEngine.Event.SentDatabaseChanges.FailedZoneSave\nA type that describes an unsuccessful attempt to modify a single record zone."
  },
  {
    "title": "deletions | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncengine/event/fetchedrecordzonechanges/4155741-deletions",
    "html": "See Also\nAccessing changes\nlet modifications: [CKDatabase.RecordZoneChange.Modification]\nThe fetched record zone modifications."
  },
  {
    "title": "savedZones | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncengine/event/sentdatabasechanges/4155747-savedzones",
    "html": "See Also\nAccessing successful changes\nlet deletedZoneIDs: [CKRecordZone.ID]\nThe unique identifiers of the deleted record zones."
  },
  {
    "title": "description | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncengine/event/willfetchrecordzonechanges/4180491-description",
    "html": "Relationships\nFrom Protocol\nCustomStringConvertible"
  },
  {
    "title": "deletedRecordIDs | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncengine/event/sentrecordzonechanges/4183717-deletedrecordids",
    "html": "See Also\nAccessing successful changes\nlet savedRecords: [CKRecord]\nThe modified records."
  },
  {
    "title": "failedRecordSaves | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncengine/event/sentrecordzonechanges/4183720-failedrecordsaves",
    "html": "See Also\nAccessing failed changes\nlet failedRecordDeletes: [CKRecord.ID : CKError]\nThe unique identifiers of the records CloudKit is unable to delete, and the reasons why.\nstruct CKSyncEngine.Event.SentRecordZoneChanges.FailedRecordSave\nA type that describes an unsuccessful attempt to modify a single record."
  },
  {
    "title": "recordID | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckdatabase/recordzonechange/deletion/3856513-recordid",
    "html": "See Also\nIdentifying the Deleted Record\nvar recordType: CKRecord.RecordType\nThe record type of the deleted record."
  },
  {
    "title": "hashValue | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckdatabase/databasechange/deletion/4200315-hashvalue",
    "html": "Relationships\nFrom Protocol\nHashable"
  },
  {
    "title": "firesOnce | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckquerysubscription/options/1640440-firesonce",
    "html": "Discussion\n\nYou combine this option with one or more of the other subscription options. This option applies only to query-based subscriptions. CloudKit deletes the subscription after it sends the push notification. If you want to generate subsequent push notifications using the same criteria, create and save a new subscription.\n\nSee Also\nAccessing Subscription Options\nstatic var firesOnRecordCreation: CKQuerySubscription.Options\nAn option that instructs CloudKit to send a push notification when it creates a record that matches a subscription’s criteria.\nstatic var firesOnRecordDeletion: CKQuerySubscription.Options\nAn option that instructs CloudKit to send a push notification when it deletes a record that matches a subscription’s criteria.\nstatic var firesOnRecordUpdate: CKQuerySubscription.Options\nAn option that instructs CloudKit to send a push notification when it modifies a record that matches a subscription’s criteria."
  },
  {
    "title": "CKDatabase.DatabaseChange.Deletion.Reason | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckdatabase/databasechange/deletion/reason",
    "html": "Topics\nEnumeration Cases\ncase deleted\ncase encryptedDataReset\ncase purged\nInstance Properties\nvar hashValue: Int\nInstance Methods\nfunc hash(into: inout Hasher)\nOperator Functions\nstatic func != (CKDatabase.DatabaseChange.Deletion.Reason, CKDatabase.DatabaseChange.Deletion.Reason) -> Bool\nstatic func == (CKDatabase.DatabaseChange.Deletion.Reason, CKDatabase.DatabaseChange.Deletion.Reason) -> Bool\nRelationships\nConforms To\nSendable"
  },
  {
    "title": "initWithRecordIDs: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckfetchrecordsoperation/1476074-initwithrecordids",
    "html": "Parameters\nrecordIDs\n\nAn array of CKRecordID objects that represents the records you want to retrieve. If you provide an empty array, you must set the recordIDs property before you execute the operation.\n\nDiscussion\n\nA fetch operation retrieves all of a record’s fields, including any assets that those fields reference. If you want to minimize the amount of data that the operation returns, configure the desiredKeys property with only the keys that contain the values that you have an interest in.\n\nAfter initializing the operation, you must associate at least one progress handler with the operation (excluding the completion handler) to process the results.\n\nSee Also\nCreating a Record Fetch Operation\n- init\nCreates an empty fetch operation."
  },
  {
    "title": "any | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksharingparticipantpermissionoption/3950957-any",
    "html": "See Also\nConfiguring the options\nstatic var readOnly: CKSharingParticipantPermissionOption\nThe permission option the system uses to control whether a user can grant read-only access.\nstatic var readWrite: CKSharingParticipantPermissionOption\nThe permission option the system uses to control whether a user can grant write access."
  },
  {
    "title": "readWrite | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksharingparticipantpermissionoption/3950959-readwrite",
    "html": "See Also\nConfiguring the options\nstatic var any: CKSharingParticipantPermissionOption\nThe permission option the system uses to control whether a user can grant read-only or write access.\nstatic var readOnly: CKSharingParticipantPermissionOption\nThe permission option the system uses to control whether a user can grant read-only access."
  },
  {
    "title": "init(rawValue:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksharingparticipantaccessoption/3951993-init",
    "html": "Parameters\nrawValue\n\nAn unsigned integer access value."
  },
  {
    "title": "fetchRecordWithID:completionHandler: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckdatabase/1449126-fetchrecordwithid",
    "html": "Parameters\nrecordID\n\nThe identifier of the record to fetch.\n\ncompletionHandler\n\nThe block to execute with the fetch results.\n\nDiscussion\n\nThe completion handler takes the following parameters:\n\nrecord\n\nThe requested record, or nil if CloudKit can’t provide that record.\n\nerror\n\nAn error if a problem occurs, or nil if the fetch completes successfully.\n\nFor information on a more configurable way to fetch specific records, see CKFetchRecordsOperation."
  },
  {
    "title": "type | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckshare/participant/1640507-type",
    "html": "Discussion\n\nThe property controls the participant type for the share. For a list of possible values, see CKShare.ParticipantType.\n\nSee Also\nDeprecated Properties\ntypealias CKShare.Participant.ParticipantType\nA type that represents the role of the participant.\nDeprecated\nenum CKShare.ParticipantType\nThe role of a participant.\nDeprecated"
  },
  {
    "title": "setParentReferenceFromRecordID: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckrecord/1690508-setparentreferencefromrecordid",
    "html": "Parameters\nparentRecordID\n\nThe CKRecordID object for the record that you want to set as this record’s parent.\n\nDiscussion\n\nThis method creates and sets a CKReference object that points to the record you provide. The resulting CKReference has an action of CKReferenceActionNone.\n\nSee Also\nSharing Records\nparent\nA reference to the record’s parent record.\nshare\nA reference to the share object that determines the share status of the record.\nCKReference\nA relationship between two records in a record zone.\n- setParentReferenceFromRecord:\nCreates and sets a reference object for a parent from its record."
  },
  {
    "title": "CKShare.Participant.ParticipantType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckshare/participant/participanttype",
    "html": "See Also\nDeprecated Properties\nvar type: CKShare.ParticipantType\nThe participant type.\nDeprecated\nenum CKShare.ParticipantType\nThe role of a participant.\nDeprecated"
  },
  {
    "title": "fetchAllRecordZonesWithCompletionHandler: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckdatabase/1449112-fetchallrecordzoneswithcompletio",
    "html": "Parameters\ncompletionHandler\n\nThe block to execute with the fetch results.\n\nDiscussion\n\nThe completion handler takes the following parameters:\n\nzones\n\nAn array of fetched record zones, or nil if there’s an error. When present, the array contains at least one record zone, the default zone.\n\nerror\n\nAn error if a problem occurs, or nil if CloudKit successfully fetches all record zones.\n\nSee Also\nFetching Record Zones\n- fetchRecordZoneWithID:completionHandler:\nFetches a specific record zone."
  },
  {
    "title": "saveRecordZone:completionHandler: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckdatabase/1449108-saverecordzone",
    "html": "Parameters\nzone\n\nThe record zone to save.\n\ncompletionHandler\n\nThe closure to execute after CloudKit saves the record.\n\nDiscussion\n\nThe completion handler takes the following parameters:\n\nzone\n\nThe saved record zone (as it appears on the server), or nil if there’s an error.\n\nerror\n\nAn error if a problem occurs, or nil if CloudKit successfully saves the record zone.\n\nFor information on a more configurable way to save record zones, see CKModifyRecordZonesOperation.\n\nSee Also\nModifying Record Zones\n- deleteRecordZoneWithID:completionHandler:\nDeletes a specific record zone."
  },
  {
    "title": "fetchRecordZoneWithID:completionHandler: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckdatabase/1449104-fetchrecordzonewithid",
    "html": "Parameters\nzoneID\n\nThe identifier of the record zone to fetch.\n\ncompletionHandler\n\nThe block to execute with the fetch results.\n\nDiscussion\n\nThe completion handler takes the following parameters:\n\nzone\n\nThe fetched record zone, or nil if there’s an error.\n\nerror\n\nAn error if a problem occurs, or nil if CloudKit successfully fetches the specified record zone.\n\nFor information on a more configurable way to fetch specific record zones, see CKFetchRecordZonesOperation.\n\nSee Also\nFetching Record Zones\n- fetchAllRecordZonesWithCompletionHandler:\nFetches all record zones from the current database."
  },
  {
    "title": "init(recordsToSave:recordIDsToDelete:atomicByZone:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncengine/recordzonechangebatch/4183745-init",
    "html": "Parameters\nrecordsToSave\n\nThe records to save.\n\nrecordIDsToDelete\n\nThe identifiers of the records to delete.\n\natomicByZone\n\nA Boolean value that determines whether CloudKit modifies the specified records atomically by record zone.\n\nDiscussion\n\nImportant\n\nWhen using this initializer to create batches, consider the number of records you specify and their combined size. If you specify too many records, or their combined size is too large, the send operation may fail with an error of type CKError.Code.limitExceeded.\n\nSee Also\nCreating a batch\ninit?(pendingChanges: [CKSyncEngine.PendingRecordZoneChange], recordProvider: (CKRecord.ID) -> (CKRecord?))\nCreates a batch of records to modify using the provided record zone changes.\nenum CKSyncEngine.PendingRecordZoneChange\nDescribes an unsent record modification."
  },
  {
    "title": "CKSyncEngine.SyncReason | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncengine/syncreason",
    "html": "Topics\nSync reasons\ncase scheduled\nA scheduled sync operation.\ncase manual\nA manual sync operation.\nIdentifying and comparing reasons\nvar hashValue: Int\nThe hash value.\nfunc hash(into: inout Hasher)\nHashes the essential attributes of the reason using the provided hasher.\nstatic func == (CKSyncEngine.SyncReason, CKSyncEngine.SyncReason) -> Bool\nReturns a Boolean value that indicates whether two values are equal.\nstatic func != (CKSyncEngine.SyncReason, CKSyncEngine.SyncReason) -> Bool\nReturns a Boolean value that indicates whether two values are unequal.\nDebugging the reason\nvar description: String\nThe textual description of the reason that’s suitable for logging.\nRelationships\nConforms To\nCustomStringConvertible\nSendable\nSee Also\nAccessing specific attributes\nlet reason: CKSyncEngine.SyncReason\nThe reason for the send operation.\nenum CKSyncEngineSyncReason\nDescribes the reason for a sync operation.\nlet options: CKSyncEngine.SendChangesOptions\nThe additional options for the send operation.\nstruct CKSyncEngine.SendChangesOptions\nA set of options to use with a send operation."
  },
  {
    "title": "init(pendingChanges:recordProvider:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncengine/recordzonechangebatch/4183744-init",
    "html": "Parameters\npendingChanges\n\nThe record zone changes to process.\n\nrecordProvider\n\nA closure that returns the record for the specified record identifier.\n\nReturn Value\n\nThe batch of records to modify, or nil if there are no pending changes.\n\nDiscussion\n\nThis method iterates over pendingChanges and adds the necessary information to the new batch, until there are no more changes or the size of the batch reaches the maximum limit. If the type of change is a record save, the method asks the specified recordProvider closure for that record. If the closure returns nil, the method skips that change.\n\nSee Also\nCreating a batch\nenum CKSyncEngine.PendingRecordZoneChange\nDescribes an unsent record modification.\ninit(recordsToSave: [CKRecord], recordIDsToDelete: [CKRecord.ID], atomicByZone: Bool)\nCreates a batch of records to modify."
  },
  {
    "title": "description | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncengine/recordzonechangebatch/4183743-description",
    "html": "Relationships\nFrom Protocol\nCustomStringConvertible"
  },
  {
    "title": "recordsToSave | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncengine/recordzonechangebatch/4183747-recordstosave",
    "html": "See Also\nManaging the records\nvar recordIDsToDelete: [CKRecord.ID]\nThe record identifiers of the records to delete."
  },
  {
    "title": "description | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncengine/sendchangescontext/4180498-description",
    "html": "Relationships\nFrom Protocol\nCustomStringConvertible"
  },
  {
    "title": "CKSubscription.SubscriptionType.database | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksubscription/subscriptiontype/database",
    "html": "See Also\nSubscription Types\ncase query\nA constant that indicates the subscription is query-based.\ncase recordZone\nA constant that indicates the subscription is zone-based."
  },
  {
    "title": "recordIDsToDelete | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncengine/recordzonechangebatch/4183746-recordidstodelete",
    "html": "See Also\nManaging the records\nvar recordsToSave: [CKRecord]\nThe records to save."
  },
  {
    "title": "CKSyncEngineSyncReason | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncenginesyncreason",
    "html": "Topics\nSync reasons\ncase scheduled\nA scheduled sync operation.\ncase manual\nA manual sync operation.\nRelationships\nConforms To\nSendable\nSee Also\nAccessing specific attributes\nlet reason: CKSyncEngine.SyncReason\nThe reason for the send operation.\nenum CKSyncEngine.SyncReason\nDescribes the reason for a sync operation.\nlet options: CKSyncEngine.SendChangesOptions\nThe additional options for the send operation.\nstruct CKSyncEngine.SendChangesOptions\nA set of options to use with a send operation."
  },
  {
    "title": "reason | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncengine/sendchangescontext/4155800-reason",
    "html": "See Also\nAccessing specific attributes\nenum CKSyncEngine.SyncReason\nDescribes the reason for a sync operation.\nenum CKSyncEngineSyncReason\nDescribes the reason for a sync operation.\nlet options: CKSyncEngine.SendChangesOptions\nThe additional options for the send operation.\nstruct CKSyncEngine.SendChangesOptions\nA set of options to use with a send operation."
  },
  {
    "title": "options | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncengine/sendchangescontext/4155799-options",
    "html": "See Also\nAccessing specific attributes\nlet reason: CKSyncEngine.SyncReason\nThe reason for the send operation.\nenum CKSyncEngine.SyncReason\nDescribes the reason for a sync operation.\nenum CKSyncEngineSyncReason\nDescribes the reason for a sync operation.\nstruct CKSyncEngine.SendChangesOptions\nA set of options to use with a send operation."
  },
  {
    "title": "CKSubscription.SubscriptionType.recordZone | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksubscription/subscriptiontype/recordzone",
    "html": "See Also\nSubscription Types\ncase query\nA constant that indicates the subscription is query-based.\ncase database\nA constant that indicates the subscription is database-based."
  },
  {
    "title": "statusForApplicationPermission:completionHandler: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckcontainer/1399195-statusforapplicationpermission",
    "html": "Parameters\napplicationPermission\n\nThe permission to check. For a list of possible values, see CKApplicationPermissions.\n\ncompletionHandler\n\nThe handler to execute with the outcome.\n\nDiscussion\n\nUse this method to determine the extra capabilities that the user grants to your app. If your app doesn’t have a specific permission, calling this method yields CKApplicationPermissionStatusInitialState. In response, call the requestApplicationPermission:completionHandler: method to prompt the user to provide their permission.\n\nSee Also\nRequesting and Determining App Permissions\n- requestApplicationPermission:completionHandler:\nPrompts the user to authorize the specified permission.\nDeprecated\nCKApplicationPermissions\nConstants that represent the permissions that a user grants.\nCKApplicationPermissionBlock\nA block that processes the outcome of a permissions request.\nDeprecated\nCKApplicationPermissionStatus\nConstants that represent the status of a permission.\nDeprecated"
  },
  {
    "title": "hash(into:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckdatabase/recordzonechange/modification/4200326-hash",
    "html": "Relationships\nFrom Protocol\nHashable"
  },
  {
    "title": "CKErrorBatchRequestFailed | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckerrorcode/ckerrorbatchrequestfailed",
    "html": "Discussion\n\nThis error occurs when an operation attempts to save multiple items in a custom zone, but one of those items encounters an error. Because custom zones are atomic, the entire batch fails. The items that cause the problem have their own errors, and all other items in the batch have a CKErrorBatchRequestFailed error to indicate that the system can’t save them.\n\nThis error indicates that the system can’t process the associated item due to an error in another item in the operation. Check the other per-item errors under CKPartialErrorsByItemIDKey for any that aren't CKErrorBatchRequestFailed errors. Handle those errors, and then retry all items in the operation.\n\nSee Also\nError Codes\nCKErrorAccountTemporarilyUnavailable\nAn error that occurs when the user’s iCloud account is temporarily unavailable.\nCKErrorAlreadyShared\nAn error that occurs when CloudKit attempts to share a record with an existing share.\nCKErrorAssetFileModified\nAn error that occurs when the system modifies an asset while saving it.\nCKErrorAssetFileNotFound\nAn error that occurs when the system can’t find the specified asset.\nCKErrorAssetNotAvailable\nAn error that occurs when the system can’t access the specified asset.\nCKErrorBadContainer\nAn error that occurs when you use an unknown or unauthorized container.\nCKErrorBadDatabase\nAn error that occurs when the operation can’t complete for the specified database.\nCKErrorChangeTokenExpired\nAn error that occurs when the change token expires.\nCKErrorConstraintViolation\nAn error that occurs when the server rejects the request because of a unique constraint violation.\nCKErrorIncompatibleVersion\nAn error that occurs when the current app version is older than the oldest allowed version.\nCKErrorInternalError\nA nonrecoverable error that CloudKit encounters.\nCKErrorInvalidArguments\nAn error that occurs when the request contains invalid information.\nCKErrorLimitExceeded\nAn error that occurs when a request’s size exceeds the limit.\nCKErrorManagedAccountRestricted\nAn error that occurs when CloudKit rejects a request due to a managed-account restriction.\nCKErrorMissingEntitlement\nAn error that occurs when the app is missing a required entitlement.\nCKErrorNetworkFailure\nAn error that occurs when a network is available, but CloudKit is inaccessible.\nCKErrorNetworkUnavailable\nAn error that occurs when the network is unavailable.\nCKErrorNotAuthenticated\nAn error that occurs when the user is unauthenticated.\nCKErrorOperationCancelled\nAn error that occurs when an operation cancels.\nCKErrorPartialFailure\nAn error that occurs when an operation completes with partial failures.\nCKErrorParticipantMayNeedVerification\nAn error that occurs when the user isn’t a participant of the share.\nCKErrorPermissionFailure\nAn error that occurs when the user doesn’t have permission to save or fetch data.\nCKErrorQuotaExceeded\nAn error that occurs when saving a record exceeds the user’s storage quota.\nCKErrorReferenceViolation\nAn error that occurs when CloudKit can’t find the target of a reference.\nCKErrorRequestRateLimited\nAn error that occurs when CloudKit rate-limits requests.\nCKErrorServerRecordChanged\nAn error that occurs when CloudKit rejects a record because the server’s version is different.\nCKErrorServerRejectedRequest\nAn error that occurs when CloudKit rejects the request.\nCKErrorServerResponseLost\nAn error that occurs when CloudKit is unable to maintain the network connection and provide a response.\nCKErrorServiceUnavailable\nAn error that occurs when CloudKit is unavailable.\nCKErrorTooManyParticipants\nAn error that occurs when a share has too many participants.\nCKErrorUnknownItem\nAn error that occurs when the specified record doesn’t exist.\nCKErrorUserDeletedZone\nAn error that occurs when the user deletes a record zone using the Settings app.\nCKErrorZoneBusy\nAn error that occurs when the server is too busy to handle the record zone operation.\nCKErrorZoneNotFound\nAn error that occurs when the specified record zone doesn’t exist.\nCKErrorResultsTruncated\nAn error that occurs when CloudKit truncates a query’s results.\nDeprecated"
  },
  {
    "title": "CKErrorOperationCancelled | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckerrorcode/ckerroroperationcancelled",
    "html": "See Also\nError Codes\nCKErrorAccountTemporarilyUnavailable\nAn error that occurs when the user’s iCloud account is temporarily unavailable.\nCKErrorAlreadyShared\nAn error that occurs when CloudKit attempts to share a record with an existing share.\nCKErrorAssetFileModified\nAn error that occurs when the system modifies an asset while saving it.\nCKErrorAssetFileNotFound\nAn error that occurs when the system can’t find the specified asset.\nCKErrorAssetNotAvailable\nAn error that occurs when the system can’t access the specified asset.\nCKErrorBadContainer\nAn error that occurs when you use an unknown or unauthorized container.\nCKErrorBadDatabase\nAn error that occurs when the operation can’t complete for the specified database.\nCKErrorBatchRequestFailed\nAn error that occurs when the system rejects the entire batch of changes.\nCKErrorChangeTokenExpired\nAn error that occurs when the change token expires.\nCKErrorConstraintViolation\nAn error that occurs when the server rejects the request because of a unique constraint violation.\nCKErrorIncompatibleVersion\nAn error that occurs when the current app version is older than the oldest allowed version.\nCKErrorInternalError\nA nonrecoverable error that CloudKit encounters.\nCKErrorInvalidArguments\nAn error that occurs when the request contains invalid information.\nCKErrorLimitExceeded\nAn error that occurs when a request’s size exceeds the limit.\nCKErrorManagedAccountRestricted\nAn error that occurs when CloudKit rejects a request due to a managed-account restriction.\nCKErrorMissingEntitlement\nAn error that occurs when the app is missing a required entitlement.\nCKErrorNetworkFailure\nAn error that occurs when a network is available, but CloudKit is inaccessible.\nCKErrorNetworkUnavailable\nAn error that occurs when the network is unavailable.\nCKErrorNotAuthenticated\nAn error that occurs when the user is unauthenticated.\nCKErrorPartialFailure\nAn error that occurs when an operation completes with partial failures.\nCKErrorParticipantMayNeedVerification\nAn error that occurs when the user isn’t a participant of the share.\nCKErrorPermissionFailure\nAn error that occurs when the user doesn’t have permission to save or fetch data.\nCKErrorQuotaExceeded\nAn error that occurs when saving a record exceeds the user’s storage quota.\nCKErrorReferenceViolation\nAn error that occurs when CloudKit can’t find the target of a reference.\nCKErrorRequestRateLimited\nAn error that occurs when CloudKit rate-limits requests.\nCKErrorServerRecordChanged\nAn error that occurs when CloudKit rejects a record because the server’s version is different.\nCKErrorServerRejectedRequest\nAn error that occurs when CloudKit rejects the request.\nCKErrorServerResponseLost\nAn error that occurs when CloudKit is unable to maintain the network connection and provide a response.\nCKErrorServiceUnavailable\nAn error that occurs when CloudKit is unavailable.\nCKErrorTooManyParticipants\nAn error that occurs when a share has too many participants.\nCKErrorUnknownItem\nAn error that occurs when the specified record doesn’t exist.\nCKErrorUserDeletedZone\nAn error that occurs when the user deletes a record zone using the Settings app.\nCKErrorZoneBusy\nAn error that occurs when the server is too busy to handle the record zone operation.\nCKErrorZoneNotFound\nAn error that occurs when the specified record zone doesn’t exist.\nCKErrorResultsTruncated\nAn error that occurs when CloudKit truncates a query’s results.\nDeprecated"
  },
  {
    "title": "subscriptionIDs | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckfetchsubscriptionsoperation/1515011-subscriptionids",
    "html": "Discussion\n\nUse this property to view or change the IDs of the subscriptions to fetch. Each element of the array is a string that represents the ID of a subscription. If you intend to modify this property’s value, do so before you execute the operation or submit it to a queue.\n\nIf you use the fetchAllSubscriptionsOperation method to create the operation, CloudKit ignores this property’s value and sets it to nil."
  },
  {
    "title": "recordType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckdatabase/recordzonechange/deletion/3856514-recordtype",
    "html": "See Also\nIdentifying the Deleted Record\nvar recordID: CKRecord.ID\nThe identifier of the deleted record."
  },
  {
    "title": "firesOnRecordDeletion | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckquerysubscription/options/1640425-firesonrecorddeletion",
    "html": "See Also\nAccessing Subscription Options\nstatic var firesOnRecordCreation: CKQuerySubscription.Options\nAn option that instructs CloudKit to send a push notification when it creates a record that matches a subscription’s criteria.\nstatic var firesOnRecordUpdate: CKQuerySubscription.Options\nAn option that instructs CloudKit to send a push notification when it modifies a record that matches a subscription’s criteria.\nstatic var firesOnce: CKQuerySubscription.Options\nAn option that instructs CloudKit to send a push notification only once."
  },
  {
    "title": "CKSubscription.SubscriptionType.query | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksubscription/subscriptiontype/query",
    "html": "See Also\nSubscription Types\ncase database\nA constant that indicates the subscription is database-based.\ncase recordZone\nA constant that indicates the subscription is zone-based."
  },
  {
    "title": "firesOnRecordCreation | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckquerysubscription/options/1640515-firesonrecordcreation",
    "html": "See Also\nAccessing Subscription Options\nstatic var firesOnRecordDeletion: CKQuerySubscription.Options\nAn option that instructs CloudKit to send a push notification when it deletes a record that matches a subscription’s criteria.\nstatic var firesOnRecordUpdate: CKQuerySubscription.Options\nAn option that instructs CloudKit to send a push notification when it modifies a record that matches a subscription’s criteria.\nstatic var firesOnce: CKQuerySubscription.Options\nAn option that instructs CloudKit to send a push notification only once."
  },
  {
    "title": "firesOnRecordUpdate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckquerysubscription/options/1640369-firesonrecordupdate",
    "html": "See Also\nAccessing Subscription Options\nstatic var firesOnRecordCreation: CKQuerySubscription.Options\nAn option that instructs CloudKit to send a push notification when it creates a record that matches a subscription’s criteria.\nstatic var firesOnRecordDeletion: CKQuerySubscription.Options\nAn option that instructs CloudKit to send a push notification when it deletes a record that matches a subscription’s criteria.\nstatic var firesOnce: CKQuerySubscription.Options\nAn option that instructs CloudKit to send a push notification only once."
  },
  {
    "title": "CKErrorZoneNotFound | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckerrorcode/ckerrorzonenotfound",
    "html": "See Also\nError Codes\nCKErrorAccountTemporarilyUnavailable\nAn error that occurs when the user’s iCloud account is temporarily unavailable.\nCKErrorAlreadyShared\nAn error that occurs when CloudKit attempts to share a record with an existing share.\nCKErrorAssetFileModified\nAn error that occurs when the system modifies an asset while saving it.\nCKErrorAssetFileNotFound\nAn error that occurs when the system can’t find the specified asset.\nCKErrorAssetNotAvailable\nAn error that occurs when the system can’t access the specified asset.\nCKErrorBadContainer\nAn error that occurs when you use an unknown or unauthorized container.\nCKErrorBadDatabase\nAn error that occurs when the operation can’t complete for the specified database.\nCKErrorBatchRequestFailed\nAn error that occurs when the system rejects the entire batch of changes.\nCKErrorChangeTokenExpired\nAn error that occurs when the change token expires.\nCKErrorConstraintViolation\nAn error that occurs when the server rejects the request because of a unique constraint violation.\nCKErrorIncompatibleVersion\nAn error that occurs when the current app version is older than the oldest allowed version.\nCKErrorInternalError\nA nonrecoverable error that CloudKit encounters.\nCKErrorInvalidArguments\nAn error that occurs when the request contains invalid information.\nCKErrorLimitExceeded\nAn error that occurs when a request’s size exceeds the limit.\nCKErrorManagedAccountRestricted\nAn error that occurs when CloudKit rejects a request due to a managed-account restriction.\nCKErrorMissingEntitlement\nAn error that occurs when the app is missing a required entitlement.\nCKErrorNetworkFailure\nAn error that occurs when a network is available, but CloudKit is inaccessible.\nCKErrorNetworkUnavailable\nAn error that occurs when the network is unavailable.\nCKErrorNotAuthenticated\nAn error that occurs when the user is unauthenticated.\nCKErrorOperationCancelled\nAn error that occurs when an operation cancels.\nCKErrorPartialFailure\nAn error that occurs when an operation completes with partial failures.\nCKErrorParticipantMayNeedVerification\nAn error that occurs when the user isn’t a participant of the share.\nCKErrorPermissionFailure\nAn error that occurs when the user doesn’t have permission to save or fetch data.\nCKErrorQuotaExceeded\nAn error that occurs when saving a record exceeds the user’s storage quota.\nCKErrorReferenceViolation\nAn error that occurs when CloudKit can’t find the target of a reference.\nCKErrorRequestRateLimited\nAn error that occurs when CloudKit rate-limits requests.\nCKErrorServerRecordChanged\nAn error that occurs when CloudKit rejects a record because the server’s version is different.\nCKErrorServerRejectedRequest\nAn error that occurs when CloudKit rejects the request.\nCKErrorServerResponseLost\nAn error that occurs when CloudKit is unable to maintain the network connection and provide a response.\nCKErrorServiceUnavailable\nAn error that occurs when CloudKit is unavailable.\nCKErrorTooManyParticipants\nAn error that occurs when a share has too many participants.\nCKErrorUnknownItem\nAn error that occurs when the specified record doesn’t exist.\nCKErrorUserDeletedZone\nAn error that occurs when the user deletes a record zone using the Settings app.\nCKErrorZoneBusy\nAn error that occurs when the server is too busy to handle the record zone operation.\nCKErrorResultsTruncated\nAn error that occurs when CloudKit truncates a query’s results.\nDeprecated"
  },
  {
    "title": "CKErrorResultsTruncated | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckerrorcode/ckerrorresultstruncated",
    "html": "See Also\nError Codes\nCKErrorAccountTemporarilyUnavailable\nAn error that occurs when the user’s iCloud account is temporarily unavailable.\nCKErrorAlreadyShared\nAn error that occurs when CloudKit attempts to share a record with an existing share.\nCKErrorAssetFileModified\nAn error that occurs when the system modifies an asset while saving it.\nCKErrorAssetFileNotFound\nAn error that occurs when the system can’t find the specified asset.\nCKErrorAssetNotAvailable\nAn error that occurs when the system can’t access the specified asset.\nCKErrorBadContainer\nAn error that occurs when you use an unknown or unauthorized container.\nCKErrorBadDatabase\nAn error that occurs when the operation can’t complete for the specified database.\nCKErrorBatchRequestFailed\nAn error that occurs when the system rejects the entire batch of changes.\nCKErrorChangeTokenExpired\nAn error that occurs when the change token expires.\nCKErrorConstraintViolation\nAn error that occurs when the server rejects the request because of a unique constraint violation.\nCKErrorIncompatibleVersion\nAn error that occurs when the current app version is older than the oldest allowed version.\nCKErrorInternalError\nA nonrecoverable error that CloudKit encounters.\nCKErrorInvalidArguments\nAn error that occurs when the request contains invalid information.\nCKErrorLimitExceeded\nAn error that occurs when a request’s size exceeds the limit.\nCKErrorManagedAccountRestricted\nAn error that occurs when CloudKit rejects a request due to a managed-account restriction.\nCKErrorMissingEntitlement\nAn error that occurs when the app is missing a required entitlement.\nCKErrorNetworkFailure\nAn error that occurs when a network is available, but CloudKit is inaccessible.\nCKErrorNetworkUnavailable\nAn error that occurs when the network is unavailable.\nCKErrorNotAuthenticated\nAn error that occurs when the user is unauthenticated.\nCKErrorOperationCancelled\nAn error that occurs when an operation cancels.\nCKErrorPartialFailure\nAn error that occurs when an operation completes with partial failures.\nCKErrorParticipantMayNeedVerification\nAn error that occurs when the user isn’t a participant of the share.\nCKErrorPermissionFailure\nAn error that occurs when the user doesn’t have permission to save or fetch data.\nCKErrorQuotaExceeded\nAn error that occurs when saving a record exceeds the user’s storage quota.\nCKErrorReferenceViolation\nAn error that occurs when CloudKit can’t find the target of a reference.\nCKErrorRequestRateLimited\nAn error that occurs when CloudKit rate-limits requests.\nCKErrorServerRecordChanged\nAn error that occurs when CloudKit rejects a record because the server’s version is different.\nCKErrorServerRejectedRequest\nAn error that occurs when CloudKit rejects the request.\nCKErrorServerResponseLost\nAn error that occurs when CloudKit is unable to maintain the network connection and provide a response.\nCKErrorServiceUnavailable\nAn error that occurs when CloudKit is unavailable.\nCKErrorTooManyParticipants\nAn error that occurs when a share has too many participants.\nCKErrorUnknownItem\nAn error that occurs when the specified record doesn’t exist.\nCKErrorUserDeletedZone\nAn error that occurs when the user deletes a record zone using the Settings app.\nCKErrorZoneBusy\nAn error that occurs when the server is too busy to handle the record zone operation.\nCKErrorZoneNotFound\nAn error that occurs when the specified record zone doesn’t exist."
  },
  {
    "title": "CKShare.ParticipantRole.unknown | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckshare/participantrole/unknown",
    "html": "See Also\nRoles\ncase owner\nThe participant is the share’s owner.\ncase privateUser\nThe participant has the private role.\ncase publicUser\nThe participant has the public role."
  },
  {
    "title": "CKShare.ParticipantRole.publicUser | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckshare/participantrole/publicuser",
    "html": "See Also\nRoles\ncase owner\nThe participant is the share’s owner.\ncase privateUser\nThe participant has the private role.\ncase unknown\nThe participant’s role is unknown."
  },
  {
    "title": "zoneID | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckdatabase/databasechange/deletion/3856509-zoneid",
    "html": "See Also\nIdentifying the Deleted Record Zone\nvar purged: Bool\nA Boolean value that indicates whether the user deleted the record zone when managing their iCloud storage.\nDeprecated"
  },
  {
    "title": "purged | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckdatabase/databasechange/deletion/3856508-purged",
    "html": "See Also\nIdentifying the Deleted Record Zone\nvar zoneID: CKRecordZone.ID\nThe identifier of the deleted record zone."
  },
  {
    "title": "CKShare.ParticipantRole.owner | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckshare/participantrole/owner",
    "html": "See Also\nRoles\ncase privateUser\nThe participant has the private role.\ncase publicUser\nThe participant has the public role.\ncase unknown\nThe participant’s role is unknown."
  },
  {
    "title": "hash(into:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckdatabase/databasechange/deletion/4200314-hash",
    "html": "Relationships\nFrom Protocol\nHashable"
  },
  {
    "title": "init(rawValue:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksharingparticipantpermissionoption/3951994-init",
    "html": "Parameters\nrawValue\n\nAn unsigned integer permission value."
  },
  {
    "title": "readOnly | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksharingparticipantpermissionoption/3950958-readonly",
    "html": "See Also\nConfiguring the options\nstatic var any: CKSharingParticipantPermissionOption\nThe permission option the system uses to control whether a user can grant read-only or write access.\nstatic var readWrite: CKSharingParticipantPermissionOption\nThe permission option the system uses to control whether a user can grant write access."
  },
  {
    "title": "specifiedRecipientsOnly | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksharingparticipantaccessoption/3950955-specifiedrecipientsonly",
    "html": "See Also\nConfiguring the options\nstatic var any: CKSharingParticipantAccessOption\nThe permission option the system uses to control whether a user can share publicly or privately.\nstatic var anyoneWithLink: CKSharingParticipantAccessOption\nThe permission option the system uses to control whether a user can share publicly."
  },
  {
    "title": "performQuery:inZoneWithID:completionHandler: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckdatabase/1449127-performquery",
    "html": "Parameters\nquery\n\nThe query that contains the search parameters. For more information, see CKQuery.\n\nzoneID\n\nThe identifier of the record zone to search. If you’re searching a shared database, provide a record zone identifier; otherwise, you can specify nil to search all record zones in the database.\n\ncompletionHandler\n\nThe block to execute with the search results.\n\nDiscussion\n\nThe completion handler takes the following parameters:\n\nresults\n\nThe records that match the specified query, or nil if there’s an error.\n\nerror\n\nAn error if a problem occurs, or nil if CloudKit completes the search successfully.\n\nFor information on a more configurable way to search a database, see CKQueryOperation."
  },
  {
    "title": "deleteRecordWithID:completionHandler: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckdatabase/1449122-deleterecordwithid",
    "html": "Parameters\nrecordID\n\nThe identifier of the record to delete.\n\ncompletionHandler\n\nThe block to execute after CloudKit deletes the record.\n\nDiscussion\n\nThe completion handler takes the following parameters:\n\nrecordID\n\nThe identifier of the deleted record, or nil if there’s an error.\n\nerror\n\nAn error if a problem occurs, or nil if CloudKit successfully deletes the record.\n\nDeleting a record may cause additional deletions if other records in the database reference the deleted record. CloudKit doesn’t provide the identifiers of any additional records it deletes.\n\nFor information on a more configurable way to delete records, see CKModifyRecordsOperation.\n\nSee Also\nModifying Records\n- saveRecord:completionHandler:\nSaves a specific record."
  },
  {
    "title": "setParentReferenceFromRecord: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckrecord/1690507-setparentreferencefromrecord",
    "html": "Parameters\nparentRecord\n\nA record that you want to set as the parent to this record.\n\nDiscussion\n\nThis method creates and sets a CKReference object that points to the record you provide. The resulting CKReference has an action of CKReferenceActionNone.\n\nSee Also\nSharing Records\nparent\nA reference to the record’s parent record.\nshare\nA reference to the share object that determines the share status of the record.\nCKReference\nA relationship between two records in a record zone.\n- setParentReferenceFromRecordID:\nCreates and sets a reference object for a parent from the parent’s record ID."
  },
  {
    "title": "deleteSubscriptionWithID:completionHandler: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckdatabase/1449120-deletesubscriptionwithid",
    "html": "Parameters\nsubscriptionID\n\nThe identifier of the subscription to delete.\n\ncompletionHandler\n\nThe block to execute after CloudKit deletes the subscription.\n\nDiscussion\n\nThe completion handler takes the following parameters:\n\nsubscriptionID\n\nThe identifier of the deleted subscription, or nil if there’s an error.\n\nerror\n\nAn error if a problem occurs, or nil if CloudKit successfully deletes the subscription.\n\nFor information on a more configurable way to delete subscriptions, see CKModifySubscriptionsOperation.\n\nSee Also\nModifying Subscriptions\n- saveSubscription:completionHandler:\nSaves a specific subscription."
  },
  {
    "title": "fetchAllSubscriptionsWithCompletionHandler: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckdatabase/1449110-fetchallsubscriptionswithcomplet",
    "html": "Parameters\ncompletionHandler\n\nThe block to execute with the fetch results.\n\nDiscussion\n\nThe completion handler takes the following parameters:\n\nsubscriptions\n\nThe database’s subscriptions, or nil if CloudKit can’t provide the subscriptions.\n\nerror\n\nAn error if a problem occurs, or nil if the fetch completes successfully.\n\nFor information on a more configurable way to fetch all subscriptions from a specific database, see fetchAllSubscriptionsOperation.\n\nSee Also\nFetching Subscriptions\n- fetchSubscriptionWithID:completionHandler:\nFetches a specific subscription and delivers it to a completion handler."
  },
  {
    "title": "saveSubscription:completionHandler: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckdatabase/1449102-savesubscription",
    "html": "Parameters\nsubscription\n\nThe subscription to save.\n\ncompletionHandler\n\nThe closure to execute after CloudKit saves the subscription.\n\nDiscussion\n\nThe completion handler takes the following parameters:\n\nsubscription\n\nThe saved subscription (as it appears on the server), or nil if there’s an error.\n\nerror\n\nAn error if a problem occurs, or nil if CloudKit successfully saves the subscription.\n\nFor information on a more configurable way to save subscriptions, see CKModifySubscriptionsOperation.\n\nSee Also\nModifying Subscriptions\n- deleteSubscriptionWithID:completionHandler:\nDeletes a specific subscription and delivers the deleted subscription’s identifier to a completion handler."
  },
  {
    "title": "addOperation: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckdatabase/1449116-addoperation",
    "html": "Parameters\noperation\n\nThe operation to execute.\n\nDiscussion\n\nConfigure the operation fully before you call this method. Prior to the operation executing, CloudKit sets its database property to the current database. The operation executes at the priority and quality of service (QoS) that you specify using the queuePriority and qualityOfService properties."
  },
  {
    "title": "CKDatabase.Scope | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckdatabase/scope",
    "html": "Topics\nDatabase Scopes\ncase `public`\nThe public database.\ncase `private`\nThe private database.\ncase shared\nThe shared database.\nRelationships\nConforms To\nSendable\nSee Also\nGetting the Database Type\nvar databaseScope: CKDatabase.Scope\nThe type of database."
  },
  {
    "title": "deleteRecordZoneWithID:completionHandler: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckdatabase/1449118-deleterecordzonewithid",
    "html": "Parameters\nzoneID\n\nThe identifier of the record zone to delete.\n\ncompletionHandler\n\nThe block to execute after CloudKit deletes the record zone.\n\nDiscussion\n\nWarning\n\nDeleting a record zone is a permanent action that deletes every record in that zone. You can’t restore a deleted record zone.\n\nThe completion handler takes the following parameters:\n\nzoneID\n\nThe identifier of the deleted record zone, or nil if there’s an error.\n\nerror\n\nAn error if a problem occurs, or nil if CloudKit successfully deletes the record zone.\n\nFor information on a more configurable way to delete record zones, see CKModifyRecordZonesOperation.\n\nSee Also\nModifying Record Zones\n- saveRecordZone:completionHandler:\nSaves a specific record zone."
  },
  {
    "title": "fetchSubscriptionWithID:completionHandler: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckdatabase/1449106-fetchsubscriptionwithid",
    "html": "Parameters\nsubscriptionID\n\nThe identifier of the subscription to fetch.\n\ncompletionHandler\n\nThe block to execute with the fetch results.\n\nDiscussion\n\nThe completion handler takes the following parameters:\n\nsubscription\n\nThe requested subscription, or nil if CloudKit can’t provide that subscription.\n\nerror\n\nAn error if a problem occurs, or nil if the fetch completes successfully.\n\nFor information on a more configurable way to fetch specific subscriptions, see CKFetchSubscriptionsOperation.\n\nSee Also\nFetching Subscriptions\n- fetchAllSubscriptionsWithCompletionHandler:\nFetches all subscriptions from the current database."
  },
  {
    "title": "CKNotification.NotificationType.query | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cknotification/notificationtype/query",
    "html": "See Also\nNotification Types\ncase database\nA notification that CloudKit generates when the contents of a database change.\ncase recordZone\nA notification that CloudKit generates when the contents of a record zone change.\ncase readNotification\nA notification that your app marks as read."
  },
  {
    "title": "CKNotification.NotificationType.readNotification | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cknotification/notificationtype/readnotification",
    "html": "See Also\nNotification Types\ncase query\nA notification that CloudKit generates from a query subscription’s predicate.\ncase database\nA notification that CloudKit generates when the contents of a database change.\ncase recordZone\nA notification that CloudKit generates when the contents of a record zone change."
  },
  {
    "title": "init(previousServerChangeToken:resultsLimit:desiredKeys:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckfetchrecordzonechangesoperation/zoneconfiguration/3003358-init",
    "html": "Parameters\npreviousServerChangeToken\n\nA CloudKit server change token.\n\nresultsLimit\n\nThe maximum number of updated records that CloudKit retrieves with an update operation. The default is 0.\n\ndesiredKeys\n\nAn array of the desired record keys CloudKit retrieves with updates."
  },
  {
    "title": "CKErrorIncompatibleVersion | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckerrorcode/ckerrorincompatibleversion",
    "html": "See Also\nError Codes\nCKErrorAccountTemporarilyUnavailable\nAn error that occurs when the user’s iCloud account is temporarily unavailable.\nCKErrorAlreadyShared\nAn error that occurs when CloudKit attempts to share a record with an existing share.\nCKErrorAssetFileModified\nAn error that occurs when the system modifies an asset while saving it.\nCKErrorAssetFileNotFound\nAn error that occurs when the system can’t find the specified asset.\nCKErrorAssetNotAvailable\nAn error that occurs when the system can’t access the specified asset.\nCKErrorBadContainer\nAn error that occurs when you use an unknown or unauthorized container.\nCKErrorBadDatabase\nAn error that occurs when the operation can’t complete for the specified database.\nCKErrorBatchRequestFailed\nAn error that occurs when the system rejects the entire batch of changes.\nCKErrorChangeTokenExpired\nAn error that occurs when the change token expires.\nCKErrorConstraintViolation\nAn error that occurs when the server rejects the request because of a unique constraint violation.\nCKErrorInternalError\nA nonrecoverable error that CloudKit encounters.\nCKErrorInvalidArguments\nAn error that occurs when the request contains invalid information.\nCKErrorLimitExceeded\nAn error that occurs when a request’s size exceeds the limit.\nCKErrorManagedAccountRestricted\nAn error that occurs when CloudKit rejects a request due to a managed-account restriction.\nCKErrorMissingEntitlement\nAn error that occurs when the app is missing a required entitlement.\nCKErrorNetworkFailure\nAn error that occurs when a network is available, but CloudKit is inaccessible.\nCKErrorNetworkUnavailable\nAn error that occurs when the network is unavailable.\nCKErrorNotAuthenticated\nAn error that occurs when the user is unauthenticated.\nCKErrorOperationCancelled\nAn error that occurs when an operation cancels.\nCKErrorPartialFailure\nAn error that occurs when an operation completes with partial failures.\nCKErrorParticipantMayNeedVerification\nAn error that occurs when the user isn’t a participant of the share.\nCKErrorPermissionFailure\nAn error that occurs when the user doesn’t have permission to save or fetch data.\nCKErrorQuotaExceeded\nAn error that occurs when saving a record exceeds the user’s storage quota.\nCKErrorReferenceViolation\nAn error that occurs when CloudKit can’t find the target of a reference.\nCKErrorRequestRateLimited\nAn error that occurs when CloudKit rate-limits requests.\nCKErrorServerRecordChanged\nAn error that occurs when CloudKit rejects a record because the server’s version is different.\nCKErrorServerRejectedRequest\nAn error that occurs when CloudKit rejects the request.\nCKErrorServerResponseLost\nAn error that occurs when CloudKit is unable to maintain the network connection and provide a response.\nCKErrorServiceUnavailable\nAn error that occurs when CloudKit is unavailable.\nCKErrorTooManyParticipants\nAn error that occurs when a share has too many participants.\nCKErrorUnknownItem\nAn error that occurs when the specified record doesn’t exist.\nCKErrorUserDeletedZone\nAn error that occurs when the user deletes a record zone using the Settings app.\nCKErrorZoneBusy\nAn error that occurs when the server is too busy to handle the record zone operation.\nCKErrorZoneNotFound\nAn error that occurs when the specified record zone doesn’t exist.\nCKErrorResultsTruncated\nAn error that occurs when CloudKit truncates a query’s results.\nDeprecated"
  },
  {
    "title": "CKErrorConstraintViolation | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckerrorcode/ckerrorconstraintviolation",
    "html": "See Also\nError Codes\nCKErrorAccountTemporarilyUnavailable\nAn error that occurs when the user’s iCloud account is temporarily unavailable.\nCKErrorAlreadyShared\nAn error that occurs when CloudKit attempts to share a record with an existing share.\nCKErrorAssetFileModified\nAn error that occurs when the system modifies an asset while saving it.\nCKErrorAssetFileNotFound\nAn error that occurs when the system can’t find the specified asset.\nCKErrorAssetNotAvailable\nAn error that occurs when the system can’t access the specified asset.\nCKErrorBadContainer\nAn error that occurs when you use an unknown or unauthorized container.\nCKErrorBadDatabase\nAn error that occurs when the operation can’t complete for the specified database.\nCKErrorBatchRequestFailed\nAn error that occurs when the system rejects the entire batch of changes.\nCKErrorChangeTokenExpired\nAn error that occurs when the change token expires.\nCKErrorIncompatibleVersion\nAn error that occurs when the current app version is older than the oldest allowed version.\nCKErrorInternalError\nA nonrecoverable error that CloudKit encounters.\nCKErrorInvalidArguments\nAn error that occurs when the request contains invalid information.\nCKErrorLimitExceeded\nAn error that occurs when a request’s size exceeds the limit.\nCKErrorManagedAccountRestricted\nAn error that occurs when CloudKit rejects a request due to a managed-account restriction.\nCKErrorMissingEntitlement\nAn error that occurs when the app is missing a required entitlement.\nCKErrorNetworkFailure\nAn error that occurs when a network is available, but CloudKit is inaccessible.\nCKErrorNetworkUnavailable\nAn error that occurs when the network is unavailable.\nCKErrorNotAuthenticated\nAn error that occurs when the user is unauthenticated.\nCKErrorOperationCancelled\nAn error that occurs when an operation cancels.\nCKErrorPartialFailure\nAn error that occurs when an operation completes with partial failures.\nCKErrorParticipantMayNeedVerification\nAn error that occurs when the user isn’t a participant of the share.\nCKErrorPermissionFailure\nAn error that occurs when the user doesn’t have permission to save or fetch data.\nCKErrorQuotaExceeded\nAn error that occurs when saving a record exceeds the user’s storage quota.\nCKErrorReferenceViolation\nAn error that occurs when CloudKit can’t find the target of a reference.\nCKErrorRequestRateLimited\nAn error that occurs when CloudKit rate-limits requests.\nCKErrorServerRecordChanged\nAn error that occurs when CloudKit rejects a record because the server’s version is different.\nCKErrorServerRejectedRequest\nAn error that occurs when CloudKit rejects the request.\nCKErrorServerResponseLost\nAn error that occurs when CloudKit is unable to maintain the network connection and provide a response.\nCKErrorServiceUnavailable\nAn error that occurs when CloudKit is unavailable.\nCKErrorTooManyParticipants\nAn error that occurs when a share has too many participants.\nCKErrorUnknownItem\nAn error that occurs when the specified record doesn’t exist.\nCKErrorUserDeletedZone\nAn error that occurs when the user deletes a record zone using the Settings app.\nCKErrorZoneBusy\nAn error that occurs when the server is too busy to handle the record zone operation.\nCKErrorZoneNotFound\nAn error that occurs when the specified record zone doesn’t exist.\nCKErrorResultsTruncated\nAn error that occurs when CloudKit truncates a query’s results.\nDeprecated"
  },
  {
    "title": "initWithRecordZonesToSave:recordZoneIDsToDelete: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckmodifyrecordzonesoperation/1415167-initwithrecordzonestosave",
    "html": "Parameters\nrecordZonesToSave\n\nThe record zones to save. You can specify nil for this parameter.\n\nrecordZoneIDsToDelete\n\nThe IDs of the record zones to delete. You can specify nil for this parameter.\n\nDiscussion\n\nThe record zones you intend to save or delete must all reside in the same database, which you specify when you configure the operation. If you delete a record zone, CloudKit deletes any records it contains.\n\nSee Also\nCreating a Modify Zones Operation\n- init\nCreates an empty modify record zones operation."
  },
  {
    "title": "CKErrorInternalError | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckerrorcode/ckerrorinternalerror",
    "html": "Discussion\n\nIf you receive this error, file a bug report that includes the error log.\n\nSee Also\nError Codes\nCKErrorAccountTemporarilyUnavailable\nAn error that occurs when the user’s iCloud account is temporarily unavailable.\nCKErrorAlreadyShared\nAn error that occurs when CloudKit attempts to share a record with an existing share.\nCKErrorAssetFileModified\nAn error that occurs when the system modifies an asset while saving it.\nCKErrorAssetFileNotFound\nAn error that occurs when the system can’t find the specified asset.\nCKErrorAssetNotAvailable\nAn error that occurs when the system can’t access the specified asset.\nCKErrorBadContainer\nAn error that occurs when you use an unknown or unauthorized container.\nCKErrorBadDatabase\nAn error that occurs when the operation can’t complete for the specified database.\nCKErrorBatchRequestFailed\nAn error that occurs when the system rejects the entire batch of changes.\nCKErrorChangeTokenExpired\nAn error that occurs when the change token expires.\nCKErrorConstraintViolation\nAn error that occurs when the server rejects the request because of a unique constraint violation.\nCKErrorIncompatibleVersion\nAn error that occurs when the current app version is older than the oldest allowed version.\nCKErrorInvalidArguments\nAn error that occurs when the request contains invalid information.\nCKErrorLimitExceeded\nAn error that occurs when a request’s size exceeds the limit.\nCKErrorManagedAccountRestricted\nAn error that occurs when CloudKit rejects a request due to a managed-account restriction.\nCKErrorMissingEntitlement\nAn error that occurs when the app is missing a required entitlement.\nCKErrorNetworkFailure\nAn error that occurs when a network is available, but CloudKit is inaccessible.\nCKErrorNetworkUnavailable\nAn error that occurs when the network is unavailable.\nCKErrorNotAuthenticated\nAn error that occurs when the user is unauthenticated.\nCKErrorOperationCancelled\nAn error that occurs when an operation cancels.\nCKErrorPartialFailure\nAn error that occurs when an operation completes with partial failures.\nCKErrorParticipantMayNeedVerification\nAn error that occurs when the user isn’t a participant of the share.\nCKErrorPermissionFailure\nAn error that occurs when the user doesn’t have permission to save or fetch data.\nCKErrorQuotaExceeded\nAn error that occurs when saving a record exceeds the user’s storage quota.\nCKErrorReferenceViolation\nAn error that occurs when CloudKit can’t find the target of a reference.\nCKErrorRequestRateLimited\nAn error that occurs when CloudKit rate-limits requests.\nCKErrorServerRecordChanged\nAn error that occurs when CloudKit rejects a record because the server’s version is different.\nCKErrorServerRejectedRequest\nAn error that occurs when CloudKit rejects the request.\nCKErrorServerResponseLost\nAn error that occurs when CloudKit is unable to maintain the network connection and provide a response.\nCKErrorServiceUnavailable\nAn error that occurs when CloudKit is unavailable.\nCKErrorTooManyParticipants\nAn error that occurs when a share has too many participants.\nCKErrorUnknownItem\nAn error that occurs when the specified record doesn’t exist.\nCKErrorUserDeletedZone\nAn error that occurs when the user deletes a record zone using the Settings app.\nCKErrorZoneBusy\nAn error that occurs when the server is too busy to handle the record zone operation.\nCKErrorZoneNotFound\nAn error that occurs when the specified record zone doesn’t exist.\nCKErrorResultsTruncated\nAn error that occurs when CloudKit truncates a query’s results.\nDeprecated"
  },
  {
    "title": "CKErrorLimitExceeded | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckerrorcode/ckerrorlimitexceeded",
    "html": "Discussion\n\nThe server can change its limits at any time, but the following are general guidelines:\n\n400 items (records or shares) per operation\n\n2 MB per request (not counting asset sizes)\n\nIf your app receives CKErrorLimitExceeded, it must split the operation in half and try both requests again.\n\nSee Also\nError Codes\nCKErrorAccountTemporarilyUnavailable\nAn error that occurs when the user’s iCloud account is temporarily unavailable.\nCKErrorAlreadyShared\nAn error that occurs when CloudKit attempts to share a record with an existing share.\nCKErrorAssetFileModified\nAn error that occurs when the system modifies an asset while saving it.\nCKErrorAssetFileNotFound\nAn error that occurs when the system can’t find the specified asset.\nCKErrorAssetNotAvailable\nAn error that occurs when the system can’t access the specified asset.\nCKErrorBadContainer\nAn error that occurs when you use an unknown or unauthorized container.\nCKErrorBadDatabase\nAn error that occurs when the operation can’t complete for the specified database.\nCKErrorBatchRequestFailed\nAn error that occurs when the system rejects the entire batch of changes.\nCKErrorChangeTokenExpired\nAn error that occurs when the change token expires.\nCKErrorConstraintViolation\nAn error that occurs when the server rejects the request because of a unique constraint violation.\nCKErrorIncompatibleVersion\nAn error that occurs when the current app version is older than the oldest allowed version.\nCKErrorInternalError\nA nonrecoverable error that CloudKit encounters.\nCKErrorInvalidArguments\nAn error that occurs when the request contains invalid information.\nCKErrorManagedAccountRestricted\nAn error that occurs when CloudKit rejects a request due to a managed-account restriction.\nCKErrorMissingEntitlement\nAn error that occurs when the app is missing a required entitlement.\nCKErrorNetworkFailure\nAn error that occurs when a network is available, but CloudKit is inaccessible.\nCKErrorNetworkUnavailable\nAn error that occurs when the network is unavailable.\nCKErrorNotAuthenticated\nAn error that occurs when the user is unauthenticated.\nCKErrorOperationCancelled\nAn error that occurs when an operation cancels.\nCKErrorPartialFailure\nAn error that occurs when an operation completes with partial failures.\nCKErrorParticipantMayNeedVerification\nAn error that occurs when the user isn’t a participant of the share.\nCKErrorPermissionFailure\nAn error that occurs when the user doesn’t have permission to save or fetch data.\nCKErrorQuotaExceeded\nAn error that occurs when saving a record exceeds the user’s storage quota.\nCKErrorReferenceViolation\nAn error that occurs when CloudKit can’t find the target of a reference.\nCKErrorRequestRateLimited\nAn error that occurs when CloudKit rate-limits requests.\nCKErrorServerRecordChanged\nAn error that occurs when CloudKit rejects a record because the server’s version is different.\nCKErrorServerRejectedRequest\nAn error that occurs when CloudKit rejects the request.\nCKErrorServerResponseLost\nAn error that occurs when CloudKit is unable to maintain the network connection and provide a response.\nCKErrorServiceUnavailable\nAn error that occurs when CloudKit is unavailable.\nCKErrorTooManyParticipants\nAn error that occurs when a share has too many participants.\nCKErrorUnknownItem\nAn error that occurs when the specified record doesn’t exist.\nCKErrorUserDeletedZone\nAn error that occurs when the user deletes a record zone using the Settings app.\nCKErrorZoneBusy\nAn error that occurs when the server is too busy to handle the record zone operation.\nCKErrorZoneNotFound\nAn error that occurs when the specified record zone doesn’t exist.\nCKErrorResultsTruncated\nAn error that occurs when CloudKit truncates a query’s results.\nDeprecated"
  },
  {
    "title": "CKErrorInvalidArguments | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckerrorcode/ckerrorinvalidarguments",
    "html": "Discussion\n\nConsult the error’s userInfo dictionary for more information about the issue.\n\nSee Also\nError Codes\nCKErrorAccountTemporarilyUnavailable\nAn error that occurs when the user’s iCloud account is temporarily unavailable.\nCKErrorAlreadyShared\nAn error that occurs when CloudKit attempts to share a record with an existing share.\nCKErrorAssetFileModified\nAn error that occurs when the system modifies an asset while saving it.\nCKErrorAssetFileNotFound\nAn error that occurs when the system can’t find the specified asset.\nCKErrorAssetNotAvailable\nAn error that occurs when the system can’t access the specified asset.\nCKErrorBadContainer\nAn error that occurs when you use an unknown or unauthorized container.\nCKErrorBadDatabase\nAn error that occurs when the operation can’t complete for the specified database.\nCKErrorBatchRequestFailed\nAn error that occurs when the system rejects the entire batch of changes.\nCKErrorChangeTokenExpired\nAn error that occurs when the change token expires.\nCKErrorConstraintViolation\nAn error that occurs when the server rejects the request because of a unique constraint violation.\nCKErrorIncompatibleVersion\nAn error that occurs when the current app version is older than the oldest allowed version.\nCKErrorInternalError\nA nonrecoverable error that CloudKit encounters.\nCKErrorLimitExceeded\nAn error that occurs when a request’s size exceeds the limit.\nCKErrorManagedAccountRestricted\nAn error that occurs when CloudKit rejects a request due to a managed-account restriction.\nCKErrorMissingEntitlement\nAn error that occurs when the app is missing a required entitlement.\nCKErrorNetworkFailure\nAn error that occurs when a network is available, but CloudKit is inaccessible.\nCKErrorNetworkUnavailable\nAn error that occurs when the network is unavailable.\nCKErrorNotAuthenticated\nAn error that occurs when the user is unauthenticated.\nCKErrorOperationCancelled\nAn error that occurs when an operation cancels.\nCKErrorPartialFailure\nAn error that occurs when an operation completes with partial failures.\nCKErrorParticipantMayNeedVerification\nAn error that occurs when the user isn’t a participant of the share.\nCKErrorPermissionFailure\nAn error that occurs when the user doesn’t have permission to save or fetch data.\nCKErrorQuotaExceeded\nAn error that occurs when saving a record exceeds the user’s storage quota.\nCKErrorReferenceViolation\nAn error that occurs when CloudKit can’t find the target of a reference.\nCKErrorRequestRateLimited\nAn error that occurs when CloudKit rate-limits requests.\nCKErrorServerRecordChanged\nAn error that occurs when CloudKit rejects a record because the server’s version is different.\nCKErrorServerRejectedRequest\nAn error that occurs when CloudKit rejects the request.\nCKErrorServerResponseLost\nAn error that occurs when CloudKit is unable to maintain the network connection and provide a response.\nCKErrorServiceUnavailable\nAn error that occurs when CloudKit is unavailable.\nCKErrorTooManyParticipants\nAn error that occurs when a share has too many participants.\nCKErrorUnknownItem\nAn error that occurs when the specified record doesn’t exist.\nCKErrorUserDeletedZone\nAn error that occurs when the user deletes a record zone using the Settings app.\nCKErrorZoneBusy\nAn error that occurs when the server is too busy to handle the record zone operation.\nCKErrorZoneNotFound\nAn error that occurs when the specified record zone doesn’t exist.\nCKErrorResultsTruncated\nAn error that occurs when CloudKit truncates a query’s results.\nDeprecated"
  },
  {
    "title": "CKErrorNetworkFailure | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckerrorcode/ckerrornetworkfailure",
    "html": "Discussion\n\nYou can retry network failures immediately, but have your app implement a backoff period so that it doesn't attempt the same operation repeatedly.\n\nIf the network is unavailable, have your app monitor for network reachability and wait to reissue the operation when the network is available again. See CFNetworkErrors for more information.\n\nSee Also\nError Codes\nCKErrorAccountTemporarilyUnavailable\nAn error that occurs when the user’s iCloud account is temporarily unavailable.\nCKErrorAlreadyShared\nAn error that occurs when CloudKit attempts to share a record with an existing share.\nCKErrorAssetFileModified\nAn error that occurs when the system modifies an asset while saving it.\nCKErrorAssetFileNotFound\nAn error that occurs when the system can’t find the specified asset.\nCKErrorAssetNotAvailable\nAn error that occurs when the system can’t access the specified asset.\nCKErrorBadContainer\nAn error that occurs when you use an unknown or unauthorized container.\nCKErrorBadDatabase\nAn error that occurs when the operation can’t complete for the specified database.\nCKErrorBatchRequestFailed\nAn error that occurs when the system rejects the entire batch of changes.\nCKErrorChangeTokenExpired\nAn error that occurs when the change token expires.\nCKErrorConstraintViolation\nAn error that occurs when the server rejects the request because of a unique constraint violation.\nCKErrorIncompatibleVersion\nAn error that occurs when the current app version is older than the oldest allowed version.\nCKErrorInternalError\nA nonrecoverable error that CloudKit encounters.\nCKErrorInvalidArguments\nAn error that occurs when the request contains invalid information.\nCKErrorLimitExceeded\nAn error that occurs when a request’s size exceeds the limit.\nCKErrorManagedAccountRestricted\nAn error that occurs when CloudKit rejects a request due to a managed-account restriction.\nCKErrorMissingEntitlement\nAn error that occurs when the app is missing a required entitlement.\nCKErrorNetworkUnavailable\nAn error that occurs when the network is unavailable.\nCKErrorNotAuthenticated\nAn error that occurs when the user is unauthenticated.\nCKErrorOperationCancelled\nAn error that occurs when an operation cancels.\nCKErrorPartialFailure\nAn error that occurs when an operation completes with partial failures.\nCKErrorParticipantMayNeedVerification\nAn error that occurs when the user isn’t a participant of the share.\nCKErrorPermissionFailure\nAn error that occurs when the user doesn’t have permission to save or fetch data.\nCKErrorQuotaExceeded\nAn error that occurs when saving a record exceeds the user’s storage quota.\nCKErrorReferenceViolation\nAn error that occurs when CloudKit can’t find the target of a reference.\nCKErrorRequestRateLimited\nAn error that occurs when CloudKit rate-limits requests.\nCKErrorServerRecordChanged\nAn error that occurs when CloudKit rejects a record because the server’s version is different.\nCKErrorServerRejectedRequest\nAn error that occurs when CloudKit rejects the request.\nCKErrorServerResponseLost\nAn error that occurs when CloudKit is unable to maintain the network connection and provide a response.\nCKErrorServiceUnavailable\nAn error that occurs when CloudKit is unavailable.\nCKErrorTooManyParticipants\nAn error that occurs when a share has too many participants.\nCKErrorUnknownItem\nAn error that occurs when the specified record doesn’t exist.\nCKErrorUserDeletedZone\nAn error that occurs when the user deletes a record zone using the Settings app.\nCKErrorZoneBusy\nAn error that occurs when the server is too busy to handle the record zone operation.\nCKErrorZoneNotFound\nAn error that occurs when the specified record zone doesn’t exist.\nCKErrorResultsTruncated\nAn error that occurs when CloudKit truncates a query’s results.\nDeprecated"
  },
  {
    "title": "CKErrorManagedAccountRestricted | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckerrorcode/ckerrormanagedaccountrestricted",
    "html": "Discussion\n\nThe system restricts CloudKit access for this account. This is a nonrecoverable error.\n\nSee Also\nError Codes\nCKErrorAccountTemporarilyUnavailable\nAn error that occurs when the user’s iCloud account is temporarily unavailable.\nCKErrorAlreadyShared\nAn error that occurs when CloudKit attempts to share a record with an existing share.\nCKErrorAssetFileModified\nAn error that occurs when the system modifies an asset while saving it.\nCKErrorAssetFileNotFound\nAn error that occurs when the system can’t find the specified asset.\nCKErrorAssetNotAvailable\nAn error that occurs when the system can’t access the specified asset.\nCKErrorBadContainer\nAn error that occurs when you use an unknown or unauthorized container.\nCKErrorBadDatabase\nAn error that occurs when the operation can’t complete for the specified database.\nCKErrorBatchRequestFailed\nAn error that occurs when the system rejects the entire batch of changes.\nCKErrorChangeTokenExpired\nAn error that occurs when the change token expires.\nCKErrorConstraintViolation\nAn error that occurs when the server rejects the request because of a unique constraint violation.\nCKErrorIncompatibleVersion\nAn error that occurs when the current app version is older than the oldest allowed version.\nCKErrorInternalError\nA nonrecoverable error that CloudKit encounters.\nCKErrorInvalidArguments\nAn error that occurs when the request contains invalid information.\nCKErrorLimitExceeded\nAn error that occurs when a request’s size exceeds the limit.\nCKErrorMissingEntitlement\nAn error that occurs when the app is missing a required entitlement.\nCKErrorNetworkFailure\nAn error that occurs when a network is available, but CloudKit is inaccessible.\nCKErrorNetworkUnavailable\nAn error that occurs when the network is unavailable.\nCKErrorNotAuthenticated\nAn error that occurs when the user is unauthenticated.\nCKErrorOperationCancelled\nAn error that occurs when an operation cancels.\nCKErrorPartialFailure\nAn error that occurs when an operation completes with partial failures.\nCKErrorParticipantMayNeedVerification\nAn error that occurs when the user isn’t a participant of the share.\nCKErrorPermissionFailure\nAn error that occurs when the user doesn’t have permission to save or fetch data.\nCKErrorQuotaExceeded\nAn error that occurs when saving a record exceeds the user’s storage quota.\nCKErrorReferenceViolation\nAn error that occurs when CloudKit can’t find the target of a reference.\nCKErrorRequestRateLimited\nAn error that occurs when CloudKit rate-limits requests.\nCKErrorServerRecordChanged\nAn error that occurs when CloudKit rejects a record because the server’s version is different.\nCKErrorServerRejectedRequest\nAn error that occurs when CloudKit rejects the request.\nCKErrorServerResponseLost\nAn error that occurs when CloudKit is unable to maintain the network connection and provide a response.\nCKErrorServiceUnavailable\nAn error that occurs when CloudKit is unavailable.\nCKErrorTooManyParticipants\nAn error that occurs when a share has too many participants.\nCKErrorUnknownItem\nAn error that occurs when the specified record doesn’t exist.\nCKErrorUserDeletedZone\nAn error that occurs when the user deletes a record zone using the Settings app.\nCKErrorZoneBusy\nAn error that occurs when the server is too busy to handle the record zone operation.\nCKErrorZoneNotFound\nAn error that occurs when the specified record zone doesn’t exist.\nCKErrorResultsTruncated\nAn error that occurs when CloudKit truncates a query’s results.\nDeprecated"
  },
  {
    "title": "CKErrorMissingEntitlement | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckerrorcode/ckerrormissingentitlement",
    "html": "See Also\nError Codes\nCKErrorAccountTemporarilyUnavailable\nAn error that occurs when the user’s iCloud account is temporarily unavailable.\nCKErrorAlreadyShared\nAn error that occurs when CloudKit attempts to share a record with an existing share.\nCKErrorAssetFileModified\nAn error that occurs when the system modifies an asset while saving it.\nCKErrorAssetFileNotFound\nAn error that occurs when the system can’t find the specified asset.\nCKErrorAssetNotAvailable\nAn error that occurs when the system can’t access the specified asset.\nCKErrorBadContainer\nAn error that occurs when you use an unknown or unauthorized container.\nCKErrorBadDatabase\nAn error that occurs when the operation can’t complete for the specified database.\nCKErrorBatchRequestFailed\nAn error that occurs when the system rejects the entire batch of changes.\nCKErrorChangeTokenExpired\nAn error that occurs when the change token expires.\nCKErrorConstraintViolation\nAn error that occurs when the server rejects the request because of a unique constraint violation.\nCKErrorIncompatibleVersion\nAn error that occurs when the current app version is older than the oldest allowed version.\nCKErrorInternalError\nA nonrecoverable error that CloudKit encounters.\nCKErrorInvalidArguments\nAn error that occurs when the request contains invalid information.\nCKErrorLimitExceeded\nAn error that occurs when a request’s size exceeds the limit.\nCKErrorManagedAccountRestricted\nAn error that occurs when CloudKit rejects a request due to a managed-account restriction.\nCKErrorNetworkFailure\nAn error that occurs when a network is available, but CloudKit is inaccessible.\nCKErrorNetworkUnavailable\nAn error that occurs when the network is unavailable.\nCKErrorNotAuthenticated\nAn error that occurs when the user is unauthenticated.\nCKErrorOperationCancelled\nAn error that occurs when an operation cancels.\nCKErrorPartialFailure\nAn error that occurs when an operation completes with partial failures.\nCKErrorParticipantMayNeedVerification\nAn error that occurs when the user isn’t a participant of the share.\nCKErrorPermissionFailure\nAn error that occurs when the user doesn’t have permission to save or fetch data.\nCKErrorQuotaExceeded\nAn error that occurs when saving a record exceeds the user’s storage quota.\nCKErrorReferenceViolation\nAn error that occurs when CloudKit can’t find the target of a reference.\nCKErrorRequestRateLimited\nAn error that occurs when CloudKit rate-limits requests.\nCKErrorServerRecordChanged\nAn error that occurs when CloudKit rejects a record because the server’s version is different.\nCKErrorServerRejectedRequest\nAn error that occurs when CloudKit rejects the request.\nCKErrorServerResponseLost\nAn error that occurs when CloudKit is unable to maintain the network connection and provide a response.\nCKErrorServiceUnavailable\nAn error that occurs when CloudKit is unavailable.\nCKErrorTooManyParticipants\nAn error that occurs when a share has too many participants.\nCKErrorUnknownItem\nAn error that occurs when the specified record doesn’t exist.\nCKErrorUserDeletedZone\nAn error that occurs when the user deletes a record zone using the Settings app.\nCKErrorZoneBusy\nAn error that occurs when the server is too busy to handle the record zone operation.\nCKErrorZoneNotFound\nAn error that occurs when the specified record zone doesn’t exist.\nCKErrorResultsTruncated\nAn error that occurs when CloudKit truncates a query’s results.\nDeprecated"
  },
  {
    "title": "CKErrorPartialFailure | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckerrorcode/ckerrorpartialfailure",
    "html": "Discussion\n\nExamine the specific item failures, and act on the failed items. Each specific item error is from the CloudKit error domain. You can inspect the userInfo CKPartialErrorsByItemIDKey to see per-item errors.\n\nNote that in a custom zone, the system processes all items in an operation atomically. As a result, you may get a CKErrorBatchRequestFailed error for all other items in an operation that don't cause an error.\n\nSee Also\nError Codes\nCKErrorAccountTemporarilyUnavailable\nAn error that occurs when the user’s iCloud account is temporarily unavailable.\nCKErrorAlreadyShared\nAn error that occurs when CloudKit attempts to share a record with an existing share.\nCKErrorAssetFileModified\nAn error that occurs when the system modifies an asset while saving it.\nCKErrorAssetFileNotFound\nAn error that occurs when the system can’t find the specified asset.\nCKErrorAssetNotAvailable\nAn error that occurs when the system can’t access the specified asset.\nCKErrorBadContainer\nAn error that occurs when you use an unknown or unauthorized container.\nCKErrorBadDatabase\nAn error that occurs when the operation can’t complete for the specified database.\nCKErrorBatchRequestFailed\nAn error that occurs when the system rejects the entire batch of changes.\nCKErrorChangeTokenExpired\nAn error that occurs when the change token expires.\nCKErrorConstraintViolation\nAn error that occurs when the server rejects the request because of a unique constraint violation.\nCKErrorIncompatibleVersion\nAn error that occurs when the current app version is older than the oldest allowed version.\nCKErrorInternalError\nA nonrecoverable error that CloudKit encounters.\nCKErrorInvalidArguments\nAn error that occurs when the request contains invalid information.\nCKErrorLimitExceeded\nAn error that occurs when a request’s size exceeds the limit.\nCKErrorManagedAccountRestricted\nAn error that occurs when CloudKit rejects a request due to a managed-account restriction.\nCKErrorMissingEntitlement\nAn error that occurs when the app is missing a required entitlement.\nCKErrorNetworkFailure\nAn error that occurs when a network is available, but CloudKit is inaccessible.\nCKErrorNetworkUnavailable\nAn error that occurs when the network is unavailable.\nCKErrorNotAuthenticated\nAn error that occurs when the user is unauthenticated.\nCKErrorOperationCancelled\nAn error that occurs when an operation cancels.\nCKErrorParticipantMayNeedVerification\nAn error that occurs when the user isn’t a participant of the share.\nCKErrorPermissionFailure\nAn error that occurs when the user doesn’t have permission to save or fetch data.\nCKErrorQuotaExceeded\nAn error that occurs when saving a record exceeds the user’s storage quota.\nCKErrorReferenceViolation\nAn error that occurs when CloudKit can’t find the target of a reference.\nCKErrorRequestRateLimited\nAn error that occurs when CloudKit rate-limits requests.\nCKErrorServerRecordChanged\nAn error that occurs when CloudKit rejects a record because the server’s version is different.\nCKErrorServerRejectedRequest\nAn error that occurs when CloudKit rejects the request.\nCKErrorServerResponseLost\nAn error that occurs when CloudKit is unable to maintain the network connection and provide a response.\nCKErrorServiceUnavailable\nAn error that occurs when CloudKit is unavailable.\nCKErrorTooManyParticipants\nAn error that occurs when a share has too many participants.\nCKErrorUnknownItem\nAn error that occurs when the specified record doesn’t exist.\nCKErrorUserDeletedZone\nAn error that occurs when the user deletes a record zone using the Settings app.\nCKErrorZoneBusy\nAn error that occurs when the server is too busy to handle the record zone operation.\nCKErrorZoneNotFound\nAn error that occurs when the specified record zone doesn’t exist.\nCKErrorResultsTruncated\nAn error that occurs when CloudKit truncates a query’s results.\nDeprecated"
  },
  {
    "title": "CKErrorNotAuthenticated | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckerrorcode/ckerrornotauthenticated",
    "html": "See Also\nError Codes\nCKErrorAccountTemporarilyUnavailable\nAn error that occurs when the user’s iCloud account is temporarily unavailable.\nCKErrorAlreadyShared\nAn error that occurs when CloudKit attempts to share a record with an existing share.\nCKErrorAssetFileModified\nAn error that occurs when the system modifies an asset while saving it.\nCKErrorAssetFileNotFound\nAn error that occurs when the system can’t find the specified asset.\nCKErrorAssetNotAvailable\nAn error that occurs when the system can’t access the specified asset.\nCKErrorBadContainer\nAn error that occurs when you use an unknown or unauthorized container.\nCKErrorBadDatabase\nAn error that occurs when the operation can’t complete for the specified database.\nCKErrorBatchRequestFailed\nAn error that occurs when the system rejects the entire batch of changes.\nCKErrorChangeTokenExpired\nAn error that occurs when the change token expires.\nCKErrorConstraintViolation\nAn error that occurs when the server rejects the request because of a unique constraint violation.\nCKErrorIncompatibleVersion\nAn error that occurs when the current app version is older than the oldest allowed version.\nCKErrorInternalError\nA nonrecoverable error that CloudKit encounters.\nCKErrorInvalidArguments\nAn error that occurs when the request contains invalid information.\nCKErrorLimitExceeded\nAn error that occurs when a request’s size exceeds the limit.\nCKErrorManagedAccountRestricted\nAn error that occurs when CloudKit rejects a request due to a managed-account restriction.\nCKErrorMissingEntitlement\nAn error that occurs when the app is missing a required entitlement.\nCKErrorNetworkFailure\nAn error that occurs when a network is available, but CloudKit is inaccessible.\nCKErrorNetworkUnavailable\nAn error that occurs when the network is unavailable.\nCKErrorOperationCancelled\nAn error that occurs when an operation cancels.\nCKErrorPartialFailure\nAn error that occurs when an operation completes with partial failures.\nCKErrorParticipantMayNeedVerification\nAn error that occurs when the user isn’t a participant of the share.\nCKErrorPermissionFailure\nAn error that occurs when the user doesn’t have permission to save or fetch data.\nCKErrorQuotaExceeded\nAn error that occurs when saving a record exceeds the user’s storage quota.\nCKErrorReferenceViolation\nAn error that occurs when CloudKit can’t find the target of a reference.\nCKErrorRequestRateLimited\nAn error that occurs when CloudKit rate-limits requests.\nCKErrorServerRecordChanged\nAn error that occurs when CloudKit rejects a record because the server’s version is different.\nCKErrorServerRejectedRequest\nAn error that occurs when CloudKit rejects the request.\nCKErrorServerResponseLost\nAn error that occurs when CloudKit is unable to maintain the network connection and provide a response.\nCKErrorServiceUnavailable\nAn error that occurs when CloudKit is unavailable.\nCKErrorTooManyParticipants\nAn error that occurs when a share has too many participants.\nCKErrorUnknownItem\nAn error that occurs when the specified record doesn’t exist.\nCKErrorUserDeletedZone\nAn error that occurs when the user deletes a record zone using the Settings app.\nCKErrorZoneBusy\nAn error that occurs when the server is too busy to handle the record zone operation.\nCKErrorZoneNotFound\nAn error that occurs when the specified record zone doesn’t exist.\nCKErrorResultsTruncated\nAn error that occurs when CloudKit truncates a query’s results.\nDeprecated"
  },
  {
    "title": "CKErrorNetworkUnavailable | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckerrorcode/ckerrornetworkunavailable",
    "html": "Discussion\n\nYou can retry network failures immediately, but have your app implement a backoff period so that it doesn’t attempt the same operation repeatedly.\n\nIf the network is unavailable, have your app monitor for network reachability and wait to reissue the operation when the network is available again. See CFNetworkErrors for more information.\n\nSee Also\nError Codes\nCKErrorAccountTemporarilyUnavailable\nAn error that occurs when the user’s iCloud account is temporarily unavailable.\nCKErrorAlreadyShared\nAn error that occurs when CloudKit attempts to share a record with an existing share.\nCKErrorAssetFileModified\nAn error that occurs when the system modifies an asset while saving it.\nCKErrorAssetFileNotFound\nAn error that occurs when the system can’t find the specified asset.\nCKErrorAssetNotAvailable\nAn error that occurs when the system can’t access the specified asset.\nCKErrorBadContainer\nAn error that occurs when you use an unknown or unauthorized container.\nCKErrorBadDatabase\nAn error that occurs when the operation can’t complete for the specified database.\nCKErrorBatchRequestFailed\nAn error that occurs when the system rejects the entire batch of changes.\nCKErrorChangeTokenExpired\nAn error that occurs when the change token expires.\nCKErrorConstraintViolation\nAn error that occurs when the server rejects the request because of a unique constraint violation.\nCKErrorIncompatibleVersion\nAn error that occurs when the current app version is older than the oldest allowed version.\nCKErrorInternalError\nA nonrecoverable error that CloudKit encounters.\nCKErrorInvalidArguments\nAn error that occurs when the request contains invalid information.\nCKErrorLimitExceeded\nAn error that occurs when a request’s size exceeds the limit.\nCKErrorManagedAccountRestricted\nAn error that occurs when CloudKit rejects a request due to a managed-account restriction.\nCKErrorMissingEntitlement\nAn error that occurs when the app is missing a required entitlement.\nCKErrorNetworkFailure\nAn error that occurs when a network is available, but CloudKit is inaccessible.\nCKErrorNotAuthenticated\nAn error that occurs when the user is unauthenticated.\nCKErrorOperationCancelled\nAn error that occurs when an operation cancels.\nCKErrorPartialFailure\nAn error that occurs when an operation completes with partial failures.\nCKErrorParticipantMayNeedVerification\nAn error that occurs when the user isn’t a participant of the share.\nCKErrorPermissionFailure\nAn error that occurs when the user doesn’t have permission to save or fetch data.\nCKErrorQuotaExceeded\nAn error that occurs when saving a record exceeds the user’s storage quota.\nCKErrorReferenceViolation\nAn error that occurs when CloudKit can’t find the target of a reference.\nCKErrorRequestRateLimited\nAn error that occurs when CloudKit rate-limits requests.\nCKErrorServerRecordChanged\nAn error that occurs when CloudKit rejects a record because the server’s version is different.\nCKErrorServerRejectedRequest\nAn error that occurs when CloudKit rejects the request.\nCKErrorServerResponseLost\nAn error that occurs when CloudKit is unable to maintain the network connection and provide a response.\nCKErrorServiceUnavailable\nAn error that occurs when CloudKit is unavailable.\nCKErrorTooManyParticipants\nAn error that occurs when a share has too many participants.\nCKErrorUnknownItem\nAn error that occurs when the specified record doesn’t exist.\nCKErrorUserDeletedZone\nAn error that occurs when the user deletes a record zone using the Settings app.\nCKErrorZoneBusy\nAn error that occurs when the server is too busy to handle the record zone operation.\nCKErrorZoneNotFound\nAn error that occurs when the specified record zone doesn’t exist.\nCKErrorResultsTruncated\nAn error that occurs when CloudKit truncates a query’s results.\nDeprecated"
  },
  {
    "title": "CKErrorParticipantMayNeedVerification | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckerrorcode/ckerrorparticipantmayneedverification",
    "html": "Discussion\n\nA fetch share metadata operation fails when the user isn’t a participant of the share. However, there are invited participants on the share with email addresses or phone numbers that don’t have associations with an iCloud account. The user may be able to join a share by associating one of those email addresses or phone numbers with the user's iCloud account.\n\nCall openURL: on the share URL to have the user attempt to verify their information.\n\nSee Also\nError Codes\nCKErrorAccountTemporarilyUnavailable\nAn error that occurs when the user’s iCloud account is temporarily unavailable.\nCKErrorAlreadyShared\nAn error that occurs when CloudKit attempts to share a record with an existing share.\nCKErrorAssetFileModified\nAn error that occurs when the system modifies an asset while saving it.\nCKErrorAssetFileNotFound\nAn error that occurs when the system can’t find the specified asset.\nCKErrorAssetNotAvailable\nAn error that occurs when the system can’t access the specified asset.\nCKErrorBadContainer\nAn error that occurs when you use an unknown or unauthorized container.\nCKErrorBadDatabase\nAn error that occurs when the operation can’t complete for the specified database.\nCKErrorBatchRequestFailed\nAn error that occurs when the system rejects the entire batch of changes.\nCKErrorChangeTokenExpired\nAn error that occurs when the change token expires.\nCKErrorConstraintViolation\nAn error that occurs when the server rejects the request because of a unique constraint violation.\nCKErrorIncompatibleVersion\nAn error that occurs when the current app version is older than the oldest allowed version.\nCKErrorInternalError\nA nonrecoverable error that CloudKit encounters.\nCKErrorInvalidArguments\nAn error that occurs when the request contains invalid information.\nCKErrorLimitExceeded\nAn error that occurs when a request’s size exceeds the limit.\nCKErrorManagedAccountRestricted\nAn error that occurs when CloudKit rejects a request due to a managed-account restriction.\nCKErrorMissingEntitlement\nAn error that occurs when the app is missing a required entitlement.\nCKErrorNetworkFailure\nAn error that occurs when a network is available, but CloudKit is inaccessible.\nCKErrorNetworkUnavailable\nAn error that occurs when the network is unavailable.\nCKErrorNotAuthenticated\nAn error that occurs when the user is unauthenticated.\nCKErrorOperationCancelled\nAn error that occurs when an operation cancels.\nCKErrorPartialFailure\nAn error that occurs when an operation completes with partial failures.\nCKErrorPermissionFailure\nAn error that occurs when the user doesn’t have permission to save or fetch data.\nCKErrorQuotaExceeded\nAn error that occurs when saving a record exceeds the user’s storage quota.\nCKErrorReferenceViolation\nAn error that occurs when CloudKit can’t find the target of a reference.\nCKErrorRequestRateLimited\nAn error that occurs when CloudKit rate-limits requests.\nCKErrorServerRecordChanged\nAn error that occurs when CloudKit rejects a record because the server’s version is different.\nCKErrorServerRejectedRequest\nAn error that occurs when CloudKit rejects the request.\nCKErrorServerResponseLost\nAn error that occurs when CloudKit is unable to maintain the network connection and provide a response.\nCKErrorServiceUnavailable\nAn error that occurs when CloudKit is unavailable.\nCKErrorTooManyParticipants\nAn error that occurs when a share has too many participants.\nCKErrorUnknownItem\nAn error that occurs when the specified record doesn’t exist.\nCKErrorUserDeletedZone\nAn error that occurs when the user deletes a record zone using the Settings app.\nCKErrorZoneBusy\nAn error that occurs when the server is too busy to handle the record zone operation.\nCKErrorZoneNotFound\nAn error that occurs when the specified record zone doesn’t exist.\nCKErrorResultsTruncated\nAn error that occurs when CloudKit truncates a query’s results.\nDeprecated"
  },
  {
    "title": "CKErrorPermissionFailure | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckerrorcode/ckerrorpermissionfailure",
    "html": "Discussion\n\nThis error typically occurs in the public database in one of these circumstances:\n\nYou have roles for record types.\n\nYour app is trying to accept a share that the user doesn’t have an invitation for.\n\nLet users know they can’t perform this operation. This error is nonrecoverable and you can’t retry the operation.\n\nSee Also\nError Codes\nCKErrorAccountTemporarilyUnavailable\nAn error that occurs when the user’s iCloud account is temporarily unavailable.\nCKErrorAlreadyShared\nAn error that occurs when CloudKit attempts to share a record with an existing share.\nCKErrorAssetFileModified\nAn error that occurs when the system modifies an asset while saving it.\nCKErrorAssetFileNotFound\nAn error that occurs when the system can’t find the specified asset.\nCKErrorAssetNotAvailable\nAn error that occurs when the system can’t access the specified asset.\nCKErrorBadContainer\nAn error that occurs when you use an unknown or unauthorized container.\nCKErrorBadDatabase\nAn error that occurs when the operation can’t complete for the specified database.\nCKErrorBatchRequestFailed\nAn error that occurs when the system rejects the entire batch of changes.\nCKErrorChangeTokenExpired\nAn error that occurs when the change token expires.\nCKErrorConstraintViolation\nAn error that occurs when the server rejects the request because of a unique constraint violation.\nCKErrorIncompatibleVersion\nAn error that occurs when the current app version is older than the oldest allowed version.\nCKErrorInternalError\nA nonrecoverable error that CloudKit encounters.\nCKErrorInvalidArguments\nAn error that occurs when the request contains invalid information.\nCKErrorLimitExceeded\nAn error that occurs when a request’s size exceeds the limit.\nCKErrorManagedAccountRestricted\nAn error that occurs when CloudKit rejects a request due to a managed-account restriction.\nCKErrorMissingEntitlement\nAn error that occurs when the app is missing a required entitlement.\nCKErrorNetworkFailure\nAn error that occurs when a network is available, but CloudKit is inaccessible.\nCKErrorNetworkUnavailable\nAn error that occurs when the network is unavailable.\nCKErrorNotAuthenticated\nAn error that occurs when the user is unauthenticated.\nCKErrorOperationCancelled\nAn error that occurs when an operation cancels.\nCKErrorPartialFailure\nAn error that occurs when an operation completes with partial failures.\nCKErrorParticipantMayNeedVerification\nAn error that occurs when the user isn’t a participant of the share.\nCKErrorQuotaExceeded\nAn error that occurs when saving a record exceeds the user’s storage quota.\nCKErrorReferenceViolation\nAn error that occurs when CloudKit can’t find the target of a reference.\nCKErrorRequestRateLimited\nAn error that occurs when CloudKit rate-limits requests.\nCKErrorServerRecordChanged\nAn error that occurs when CloudKit rejects a record because the server’s version is different.\nCKErrorServerRejectedRequest\nAn error that occurs when CloudKit rejects the request.\nCKErrorServerResponseLost\nAn error that occurs when CloudKit is unable to maintain the network connection and provide a response.\nCKErrorServiceUnavailable\nAn error that occurs when CloudKit is unavailable.\nCKErrorTooManyParticipants\nAn error that occurs when a share has too many participants.\nCKErrorUnknownItem\nAn error that occurs when the specified record doesn’t exist.\nCKErrorUserDeletedZone\nAn error that occurs when the user deletes a record zone using the Settings app.\nCKErrorZoneBusy\nAn error that occurs when the server is too busy to handle the record zone operation.\nCKErrorZoneNotFound\nAn error that occurs when the specified record zone doesn’t exist.\nCKErrorResultsTruncated\nAn error that occurs when CloudKit truncates a query’s results.\nDeprecated"
  },
  {
    "title": "CKErrorTooManyParticipants | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckerrorcode/ckerrortoomanyparticipants",
    "html": "Discussion\n\nRemove some participants before you retry the operation. Limits can change at any time, but CloudKit generally enforces a maximum of 100 participants for a share.\n\nSee Also\nError Codes\nCKErrorAccountTemporarilyUnavailable\nAn error that occurs when the user’s iCloud account is temporarily unavailable.\nCKErrorAlreadyShared\nAn error that occurs when CloudKit attempts to share a record with an existing share.\nCKErrorAssetFileModified\nAn error that occurs when the system modifies an asset while saving it.\nCKErrorAssetFileNotFound\nAn error that occurs when the system can’t find the specified asset.\nCKErrorAssetNotAvailable\nAn error that occurs when the system can’t access the specified asset.\nCKErrorBadContainer\nAn error that occurs when you use an unknown or unauthorized container.\nCKErrorBadDatabase\nAn error that occurs when the operation can’t complete for the specified database.\nCKErrorBatchRequestFailed\nAn error that occurs when the system rejects the entire batch of changes.\nCKErrorChangeTokenExpired\nAn error that occurs when the change token expires.\nCKErrorConstraintViolation\nAn error that occurs when the server rejects the request because of a unique constraint violation.\nCKErrorIncompatibleVersion\nAn error that occurs when the current app version is older than the oldest allowed version.\nCKErrorInternalError\nA nonrecoverable error that CloudKit encounters.\nCKErrorInvalidArguments\nAn error that occurs when the request contains invalid information.\nCKErrorLimitExceeded\nAn error that occurs when a request’s size exceeds the limit.\nCKErrorManagedAccountRestricted\nAn error that occurs when CloudKit rejects a request due to a managed-account restriction.\nCKErrorMissingEntitlement\nAn error that occurs when the app is missing a required entitlement.\nCKErrorNetworkFailure\nAn error that occurs when a network is available, but CloudKit is inaccessible.\nCKErrorNetworkUnavailable\nAn error that occurs when the network is unavailable.\nCKErrorNotAuthenticated\nAn error that occurs when the user is unauthenticated.\nCKErrorOperationCancelled\nAn error that occurs when an operation cancels.\nCKErrorPartialFailure\nAn error that occurs when an operation completes with partial failures.\nCKErrorParticipantMayNeedVerification\nAn error that occurs when the user isn’t a participant of the share.\nCKErrorPermissionFailure\nAn error that occurs when the user doesn’t have permission to save or fetch data.\nCKErrorQuotaExceeded\nAn error that occurs when saving a record exceeds the user’s storage quota.\nCKErrorReferenceViolation\nAn error that occurs when CloudKit can’t find the target of a reference.\nCKErrorRequestRateLimited\nAn error that occurs when CloudKit rate-limits requests.\nCKErrorServerRecordChanged\nAn error that occurs when CloudKit rejects a record because the server’s version is different.\nCKErrorServerRejectedRequest\nAn error that occurs when CloudKit rejects the request.\nCKErrorServerResponseLost\nAn error that occurs when CloudKit is unable to maintain the network connection and provide a response.\nCKErrorServiceUnavailable\nAn error that occurs when CloudKit is unavailable.\nCKErrorUnknownItem\nAn error that occurs when the specified record doesn’t exist.\nCKErrorUserDeletedZone\nAn error that occurs when the user deletes a record zone using the Settings app.\nCKErrorZoneBusy\nAn error that occurs when the server is too busy to handle the record zone operation.\nCKErrorZoneNotFound\nAn error that occurs when the specified record zone doesn’t exist.\nCKErrorResultsTruncated\nAn error that occurs when CloudKit truncates a query’s results.\nDeprecated"
  },
  {
    "title": "CKErrorQuotaExceeded | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckerrorcode/ckerrorquotaexceeded",
    "html": "Discussion\n\nIn the public database: Your app's container doesn’t have enough storage. Individual users can't do anything about this, but you can go to the CloudKit Dashboard to view and manage your container's storage.\n\nIn the private database: The user doesn’t have enough iCloud storage. Prompt the user to go to iCloud settings to manage their storage.\n\nIn the shared database: The owner of the shared record zone doesn’t have enough iCloud storage. The user can't do anything about this, but can contact the owner about upgrading their storage or cleaning up their iCloud account.\n\nSee Also\nError Codes\nCKErrorAccountTemporarilyUnavailable\nAn error that occurs when the user’s iCloud account is temporarily unavailable.\nCKErrorAlreadyShared\nAn error that occurs when CloudKit attempts to share a record with an existing share.\nCKErrorAssetFileModified\nAn error that occurs when the system modifies an asset while saving it.\nCKErrorAssetFileNotFound\nAn error that occurs when the system can’t find the specified asset.\nCKErrorAssetNotAvailable\nAn error that occurs when the system can’t access the specified asset.\nCKErrorBadContainer\nAn error that occurs when you use an unknown or unauthorized container.\nCKErrorBadDatabase\nAn error that occurs when the operation can’t complete for the specified database.\nCKErrorBatchRequestFailed\nAn error that occurs when the system rejects the entire batch of changes.\nCKErrorChangeTokenExpired\nAn error that occurs when the change token expires.\nCKErrorConstraintViolation\nAn error that occurs when the server rejects the request because of a unique constraint violation.\nCKErrorIncompatibleVersion\nAn error that occurs when the current app version is older than the oldest allowed version.\nCKErrorInternalError\nA nonrecoverable error that CloudKit encounters.\nCKErrorInvalidArguments\nAn error that occurs when the request contains invalid information.\nCKErrorLimitExceeded\nAn error that occurs when a request’s size exceeds the limit.\nCKErrorManagedAccountRestricted\nAn error that occurs when CloudKit rejects a request due to a managed-account restriction.\nCKErrorMissingEntitlement\nAn error that occurs when the app is missing a required entitlement.\nCKErrorNetworkFailure\nAn error that occurs when a network is available, but CloudKit is inaccessible.\nCKErrorNetworkUnavailable\nAn error that occurs when the network is unavailable.\nCKErrorNotAuthenticated\nAn error that occurs when the user is unauthenticated.\nCKErrorOperationCancelled\nAn error that occurs when an operation cancels.\nCKErrorPartialFailure\nAn error that occurs when an operation completes with partial failures.\nCKErrorParticipantMayNeedVerification\nAn error that occurs when the user isn’t a participant of the share.\nCKErrorPermissionFailure\nAn error that occurs when the user doesn’t have permission to save or fetch data.\nCKErrorReferenceViolation\nAn error that occurs when CloudKit can’t find the target of a reference.\nCKErrorRequestRateLimited\nAn error that occurs when CloudKit rate-limits requests.\nCKErrorServerRecordChanged\nAn error that occurs when CloudKit rejects a record because the server’s version is different.\nCKErrorServerRejectedRequest\nAn error that occurs when CloudKit rejects the request.\nCKErrorServerResponseLost\nAn error that occurs when CloudKit is unable to maintain the network connection and provide a response.\nCKErrorServiceUnavailable\nAn error that occurs when CloudKit is unavailable.\nCKErrorTooManyParticipants\nAn error that occurs when a share has too many participants.\nCKErrorUnknownItem\nAn error that occurs when the specified record doesn’t exist.\nCKErrorUserDeletedZone\nAn error that occurs when the user deletes a record zone using the Settings app.\nCKErrorZoneBusy\nAn error that occurs when the server is too busy to handle the record zone operation.\nCKErrorZoneNotFound\nAn error that occurs when the specified record zone doesn’t exist.\nCKErrorResultsTruncated\nAn error that occurs when CloudKit truncates a query’s results.\nDeprecated"
  },
  {
    "title": "CKErrorReferenceViolation | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckerrorcode/ckerrorreferenceviolation",
    "html": "See Also\nError Codes\nCKErrorAccountTemporarilyUnavailable\nAn error that occurs when the user’s iCloud account is temporarily unavailable.\nCKErrorAlreadyShared\nAn error that occurs when CloudKit attempts to share a record with an existing share.\nCKErrorAssetFileModified\nAn error that occurs when the system modifies an asset while saving it.\nCKErrorAssetFileNotFound\nAn error that occurs when the system can’t find the specified asset.\nCKErrorAssetNotAvailable\nAn error that occurs when the system can’t access the specified asset.\nCKErrorBadContainer\nAn error that occurs when you use an unknown or unauthorized container.\nCKErrorBadDatabase\nAn error that occurs when the operation can’t complete for the specified database.\nCKErrorBatchRequestFailed\nAn error that occurs when the system rejects the entire batch of changes.\nCKErrorChangeTokenExpired\nAn error that occurs when the change token expires.\nCKErrorConstraintViolation\nAn error that occurs when the server rejects the request because of a unique constraint violation.\nCKErrorIncompatibleVersion\nAn error that occurs when the current app version is older than the oldest allowed version.\nCKErrorInternalError\nA nonrecoverable error that CloudKit encounters.\nCKErrorInvalidArguments\nAn error that occurs when the request contains invalid information.\nCKErrorLimitExceeded\nAn error that occurs when a request’s size exceeds the limit.\nCKErrorManagedAccountRestricted\nAn error that occurs when CloudKit rejects a request due to a managed-account restriction.\nCKErrorMissingEntitlement\nAn error that occurs when the app is missing a required entitlement.\nCKErrorNetworkFailure\nAn error that occurs when a network is available, but CloudKit is inaccessible.\nCKErrorNetworkUnavailable\nAn error that occurs when the network is unavailable.\nCKErrorNotAuthenticated\nAn error that occurs when the user is unauthenticated.\nCKErrorOperationCancelled\nAn error that occurs when an operation cancels.\nCKErrorPartialFailure\nAn error that occurs when an operation completes with partial failures.\nCKErrorParticipantMayNeedVerification\nAn error that occurs when the user isn’t a participant of the share.\nCKErrorPermissionFailure\nAn error that occurs when the user doesn’t have permission to save or fetch data.\nCKErrorQuotaExceeded\nAn error that occurs when saving a record exceeds the user’s storage quota.\nCKErrorRequestRateLimited\nAn error that occurs when CloudKit rate-limits requests.\nCKErrorServerRecordChanged\nAn error that occurs when CloudKit rejects a record because the server’s version is different.\nCKErrorServerRejectedRequest\nAn error that occurs when CloudKit rejects the request.\nCKErrorServerResponseLost\nAn error that occurs when CloudKit is unable to maintain the network connection and provide a response.\nCKErrorServiceUnavailable\nAn error that occurs when CloudKit is unavailable.\nCKErrorTooManyParticipants\nAn error that occurs when a share has too many participants.\nCKErrorUnknownItem\nAn error that occurs when the specified record doesn’t exist.\nCKErrorUserDeletedZone\nAn error that occurs when the user deletes a record zone using the Settings app.\nCKErrorZoneBusy\nAn error that occurs when the server is too busy to handle the record zone operation.\nCKErrorZoneNotFound\nAn error that occurs when the specified record zone doesn’t exist.\nCKErrorResultsTruncated\nAn error that occurs when CloudKit truncates a query’s results.\nDeprecated"
  },
  {
    "title": "CKErrorRequestRateLimited | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckerrorcode/ckerrorrequestratelimited",
    "html": "Discussion\n\nCheck for a CKErrorRetryAfterKey key in the userInfo dictionary of any CloudKit error that you receive. It's especially important to check for it if you receive any of these errors. Use the value of the CKErrorRetryAfterKey key as the number of seconds to wait before retrying this operation.\n\nSee Also\nError Codes\nCKErrorAccountTemporarilyUnavailable\nAn error that occurs when the user’s iCloud account is temporarily unavailable.\nCKErrorAlreadyShared\nAn error that occurs when CloudKit attempts to share a record with an existing share.\nCKErrorAssetFileModified\nAn error that occurs when the system modifies an asset while saving it.\nCKErrorAssetFileNotFound\nAn error that occurs when the system can’t find the specified asset.\nCKErrorAssetNotAvailable\nAn error that occurs when the system can’t access the specified asset.\nCKErrorBadContainer\nAn error that occurs when you use an unknown or unauthorized container.\nCKErrorBadDatabase\nAn error that occurs when the operation can’t complete for the specified database.\nCKErrorBatchRequestFailed\nAn error that occurs when the system rejects the entire batch of changes.\nCKErrorChangeTokenExpired\nAn error that occurs when the change token expires.\nCKErrorConstraintViolation\nAn error that occurs when the server rejects the request because of a unique constraint violation.\nCKErrorIncompatibleVersion\nAn error that occurs when the current app version is older than the oldest allowed version.\nCKErrorInternalError\nA nonrecoverable error that CloudKit encounters.\nCKErrorInvalidArguments\nAn error that occurs when the request contains invalid information.\nCKErrorLimitExceeded\nAn error that occurs when a request’s size exceeds the limit.\nCKErrorManagedAccountRestricted\nAn error that occurs when CloudKit rejects a request due to a managed-account restriction.\nCKErrorMissingEntitlement\nAn error that occurs when the app is missing a required entitlement.\nCKErrorNetworkFailure\nAn error that occurs when a network is available, but CloudKit is inaccessible.\nCKErrorNetworkUnavailable\nAn error that occurs when the network is unavailable.\nCKErrorNotAuthenticated\nAn error that occurs when the user is unauthenticated.\nCKErrorOperationCancelled\nAn error that occurs when an operation cancels.\nCKErrorPartialFailure\nAn error that occurs when an operation completes with partial failures.\nCKErrorParticipantMayNeedVerification\nAn error that occurs when the user isn’t a participant of the share.\nCKErrorPermissionFailure\nAn error that occurs when the user doesn’t have permission to save or fetch data.\nCKErrorQuotaExceeded\nAn error that occurs when saving a record exceeds the user’s storage quota.\nCKErrorReferenceViolation\nAn error that occurs when CloudKit can’t find the target of a reference.\nCKErrorServerRecordChanged\nAn error that occurs when CloudKit rejects a record because the server’s version is different.\nCKErrorServerRejectedRequest\nAn error that occurs when CloudKit rejects the request.\nCKErrorServerResponseLost\nAn error that occurs when CloudKit is unable to maintain the network connection and provide a response.\nCKErrorServiceUnavailable\nAn error that occurs when CloudKit is unavailable.\nCKErrorTooManyParticipants\nAn error that occurs when a share has too many participants.\nCKErrorUnknownItem\nAn error that occurs when the specified record doesn’t exist.\nCKErrorUserDeletedZone\nAn error that occurs when the user deletes a record zone using the Settings app.\nCKErrorZoneBusy\nAn error that occurs when the server is too busy to handle the record zone operation.\nCKErrorZoneNotFound\nAn error that occurs when the specified record zone doesn’t exist.\nCKErrorResultsTruncated\nAn error that occurs when CloudKit truncates a query’s results.\nDeprecated"
  },
  {
    "title": "CKErrorServerRejectedRequest | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckerrorcode/ckerrorserverrejectedrequest",
    "html": "Discussion\n\nThis error is nonrecoverable.\n\nSee Also\nError Codes\nCKErrorAccountTemporarilyUnavailable\nAn error that occurs when the user’s iCloud account is temporarily unavailable.\nCKErrorAlreadyShared\nAn error that occurs when CloudKit attempts to share a record with an existing share.\nCKErrorAssetFileModified\nAn error that occurs when the system modifies an asset while saving it.\nCKErrorAssetFileNotFound\nAn error that occurs when the system can’t find the specified asset.\nCKErrorAssetNotAvailable\nAn error that occurs when the system can’t access the specified asset.\nCKErrorBadContainer\nAn error that occurs when you use an unknown or unauthorized container.\nCKErrorBadDatabase\nAn error that occurs when the operation can’t complete for the specified database.\nCKErrorBatchRequestFailed\nAn error that occurs when the system rejects the entire batch of changes.\nCKErrorChangeTokenExpired\nAn error that occurs when the change token expires.\nCKErrorConstraintViolation\nAn error that occurs when the server rejects the request because of a unique constraint violation.\nCKErrorIncompatibleVersion\nAn error that occurs when the current app version is older than the oldest allowed version.\nCKErrorInternalError\nA nonrecoverable error that CloudKit encounters.\nCKErrorInvalidArguments\nAn error that occurs when the request contains invalid information.\nCKErrorLimitExceeded\nAn error that occurs when a request’s size exceeds the limit.\nCKErrorManagedAccountRestricted\nAn error that occurs when CloudKit rejects a request due to a managed-account restriction.\nCKErrorMissingEntitlement\nAn error that occurs when the app is missing a required entitlement.\nCKErrorNetworkFailure\nAn error that occurs when a network is available, but CloudKit is inaccessible.\nCKErrorNetworkUnavailable\nAn error that occurs when the network is unavailable.\nCKErrorNotAuthenticated\nAn error that occurs when the user is unauthenticated.\nCKErrorOperationCancelled\nAn error that occurs when an operation cancels.\nCKErrorPartialFailure\nAn error that occurs when an operation completes with partial failures.\nCKErrorParticipantMayNeedVerification\nAn error that occurs when the user isn’t a participant of the share.\nCKErrorPermissionFailure\nAn error that occurs when the user doesn’t have permission to save or fetch data.\nCKErrorQuotaExceeded\nAn error that occurs when saving a record exceeds the user’s storage quota.\nCKErrorReferenceViolation\nAn error that occurs when CloudKit can’t find the target of a reference.\nCKErrorRequestRateLimited\nAn error that occurs when CloudKit rate-limits requests.\nCKErrorServerRecordChanged\nAn error that occurs when CloudKit rejects a record because the server’s version is different.\nCKErrorServerResponseLost\nAn error that occurs when CloudKit is unable to maintain the network connection and provide a response.\nCKErrorServiceUnavailable\nAn error that occurs when CloudKit is unavailable.\nCKErrorTooManyParticipants\nAn error that occurs when a share has too many participants.\nCKErrorUnknownItem\nAn error that occurs when the specified record doesn’t exist.\nCKErrorUserDeletedZone\nAn error that occurs when the user deletes a record zone using the Settings app.\nCKErrorZoneBusy\nAn error that occurs when the server is too busy to handle the record zone operation.\nCKErrorZoneNotFound\nAn error that occurs when the specified record zone doesn’t exist.\nCKErrorResultsTruncated\nAn error that occurs when CloudKit truncates a query’s results.\nDeprecated"
  },
  {
    "title": "CKErrorServerRecordChanged | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckerrorcode/ckerrorserverrecordchanged",
    "html": "Discussion\n\nThis error indicates that the server's version of the record is newer than the local version the client’s trying to save. Your app needs to handle this error, resolve any conflicts in the record, and attempt another save of the record, if necessary.\n\nCloudKit provides your app with three copies of the record in this error's userInfo dictionary to assist with comparing and merging the changes:\n\nCKRecordChangedErrorClientRecordKey: The local record that the client’s trying to save.\n\nCKRecordChangedErrorServerRecordKey: The record that exists on the server.\n\nCKRecordChangedErrorAncestorRecordKey: The original version of the record.\n\nWhen a conflict occurs, your app needs to merge all changes into the record for the CKRecordChangedErrorServerRecordKey key and attempt a new save using that record. Merging into either of the other two copies of the record results in another conflict error because those records have the old record change tag.\n\nSee Also\nError Codes\nCKErrorAccountTemporarilyUnavailable\nAn error that occurs when the user’s iCloud account is temporarily unavailable.\nCKErrorAlreadyShared\nAn error that occurs when CloudKit attempts to share a record with an existing share.\nCKErrorAssetFileModified\nAn error that occurs when the system modifies an asset while saving it.\nCKErrorAssetFileNotFound\nAn error that occurs when the system can’t find the specified asset.\nCKErrorAssetNotAvailable\nAn error that occurs when the system can’t access the specified asset.\nCKErrorBadContainer\nAn error that occurs when you use an unknown or unauthorized container.\nCKErrorBadDatabase\nAn error that occurs when the operation can’t complete for the specified database.\nCKErrorBatchRequestFailed\nAn error that occurs when the system rejects the entire batch of changes.\nCKErrorChangeTokenExpired\nAn error that occurs when the change token expires.\nCKErrorConstraintViolation\nAn error that occurs when the server rejects the request because of a unique constraint violation.\nCKErrorIncompatibleVersion\nAn error that occurs when the current app version is older than the oldest allowed version.\nCKErrorInternalError\nA nonrecoverable error that CloudKit encounters.\nCKErrorInvalidArguments\nAn error that occurs when the request contains invalid information.\nCKErrorLimitExceeded\nAn error that occurs when a request’s size exceeds the limit.\nCKErrorManagedAccountRestricted\nAn error that occurs when CloudKit rejects a request due to a managed-account restriction.\nCKErrorMissingEntitlement\nAn error that occurs when the app is missing a required entitlement.\nCKErrorNetworkFailure\nAn error that occurs when a network is available, but CloudKit is inaccessible.\nCKErrorNetworkUnavailable\nAn error that occurs when the network is unavailable.\nCKErrorNotAuthenticated\nAn error that occurs when the user is unauthenticated.\nCKErrorOperationCancelled\nAn error that occurs when an operation cancels.\nCKErrorPartialFailure\nAn error that occurs when an operation completes with partial failures.\nCKErrorParticipantMayNeedVerification\nAn error that occurs when the user isn’t a participant of the share.\nCKErrorPermissionFailure\nAn error that occurs when the user doesn’t have permission to save or fetch data.\nCKErrorQuotaExceeded\nAn error that occurs when saving a record exceeds the user’s storage quota.\nCKErrorReferenceViolation\nAn error that occurs when CloudKit can’t find the target of a reference.\nCKErrorRequestRateLimited\nAn error that occurs when CloudKit rate-limits requests.\nCKErrorServerRejectedRequest\nAn error that occurs when CloudKit rejects the request.\nCKErrorServerResponseLost\nAn error that occurs when CloudKit is unable to maintain the network connection and provide a response.\nCKErrorServiceUnavailable\nAn error that occurs when CloudKit is unavailable.\nCKErrorTooManyParticipants\nAn error that occurs when a share has too many participants.\nCKErrorUnknownItem\nAn error that occurs when the specified record doesn’t exist.\nCKErrorUserDeletedZone\nAn error that occurs when the user deletes a record zone using the Settings app.\nCKErrorZoneBusy\nAn error that occurs when the server is too busy to handle the record zone operation.\nCKErrorZoneNotFound\nAn error that occurs when the specified record zone doesn’t exist.\nCKErrorResultsTruncated\nAn error that occurs when CloudKit truncates a query’s results.\nDeprecated"
  },
  {
    "title": "CKErrorServiceUnavailable | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckerrorcode/ckerrorserviceunavailable",
    "html": "See Also\nError Codes\nCKErrorAccountTemporarilyUnavailable\nAn error that occurs when the user’s iCloud account is temporarily unavailable.\nCKErrorAlreadyShared\nAn error that occurs when CloudKit attempts to share a record with an existing share.\nCKErrorAssetFileModified\nAn error that occurs when the system modifies an asset while saving it.\nCKErrorAssetFileNotFound\nAn error that occurs when the system can’t find the specified asset.\nCKErrorAssetNotAvailable\nAn error that occurs when the system can’t access the specified asset.\nCKErrorBadContainer\nAn error that occurs when you use an unknown or unauthorized container.\nCKErrorBadDatabase\nAn error that occurs when the operation can’t complete for the specified database.\nCKErrorBatchRequestFailed\nAn error that occurs when the system rejects the entire batch of changes.\nCKErrorChangeTokenExpired\nAn error that occurs when the change token expires.\nCKErrorConstraintViolation\nAn error that occurs when the server rejects the request because of a unique constraint violation.\nCKErrorIncompatibleVersion\nAn error that occurs when the current app version is older than the oldest allowed version.\nCKErrorInternalError\nA nonrecoverable error that CloudKit encounters.\nCKErrorInvalidArguments\nAn error that occurs when the request contains invalid information.\nCKErrorLimitExceeded\nAn error that occurs when a request’s size exceeds the limit.\nCKErrorManagedAccountRestricted\nAn error that occurs when CloudKit rejects a request due to a managed-account restriction.\nCKErrorMissingEntitlement\nAn error that occurs when the app is missing a required entitlement.\nCKErrorNetworkFailure\nAn error that occurs when a network is available, but CloudKit is inaccessible.\nCKErrorNetworkUnavailable\nAn error that occurs when the network is unavailable.\nCKErrorNotAuthenticated\nAn error that occurs when the user is unauthenticated.\nCKErrorOperationCancelled\nAn error that occurs when an operation cancels.\nCKErrorPartialFailure\nAn error that occurs when an operation completes with partial failures.\nCKErrorParticipantMayNeedVerification\nAn error that occurs when the user isn’t a participant of the share.\nCKErrorPermissionFailure\nAn error that occurs when the user doesn’t have permission to save or fetch data.\nCKErrorQuotaExceeded\nAn error that occurs when saving a record exceeds the user’s storage quota.\nCKErrorReferenceViolation\nAn error that occurs when CloudKit can’t find the target of a reference.\nCKErrorRequestRateLimited\nAn error that occurs when CloudKit rate-limits requests.\nCKErrorServerRecordChanged\nAn error that occurs when CloudKit rejects a record because the server’s version is different.\nCKErrorServerRejectedRequest\nAn error that occurs when CloudKit rejects the request.\nCKErrorServerResponseLost\nAn error that occurs when CloudKit is unable to maintain the network connection and provide a response.\nCKErrorTooManyParticipants\nAn error that occurs when a share has too many participants.\nCKErrorUnknownItem\nAn error that occurs when the specified record doesn’t exist.\nCKErrorUserDeletedZone\nAn error that occurs when the user deletes a record zone using the Settings app.\nCKErrorZoneBusy\nAn error that occurs when the server is too busy to handle the record zone operation.\nCKErrorZoneNotFound\nAn error that occurs when the specified record zone doesn’t exist.\nCKErrorResultsTruncated\nAn error that occurs when CloudKit truncates a query’s results.\nDeprecated"
  },
  {
    "title": "CKErrorServerResponseLost | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckerrorcode/ckerrorserverresponselost",
    "html": "See Also\nError Codes\nCKErrorAccountTemporarilyUnavailable\nAn error that occurs when the user’s iCloud account is temporarily unavailable.\nCKErrorAlreadyShared\nAn error that occurs when CloudKit attempts to share a record with an existing share.\nCKErrorAssetFileModified\nAn error that occurs when the system modifies an asset while saving it.\nCKErrorAssetFileNotFound\nAn error that occurs when the system can’t find the specified asset.\nCKErrorAssetNotAvailable\nAn error that occurs when the system can’t access the specified asset.\nCKErrorBadContainer\nAn error that occurs when you use an unknown or unauthorized container.\nCKErrorBadDatabase\nAn error that occurs when the operation can’t complete for the specified database.\nCKErrorBatchRequestFailed\nAn error that occurs when the system rejects the entire batch of changes.\nCKErrorChangeTokenExpired\nAn error that occurs when the change token expires.\nCKErrorConstraintViolation\nAn error that occurs when the server rejects the request because of a unique constraint violation.\nCKErrorIncompatibleVersion\nAn error that occurs when the current app version is older than the oldest allowed version.\nCKErrorInternalError\nA nonrecoverable error that CloudKit encounters.\nCKErrorInvalidArguments\nAn error that occurs when the request contains invalid information.\nCKErrorLimitExceeded\nAn error that occurs when a request’s size exceeds the limit.\nCKErrorManagedAccountRestricted\nAn error that occurs when CloudKit rejects a request due to a managed-account restriction.\nCKErrorMissingEntitlement\nAn error that occurs when the app is missing a required entitlement.\nCKErrorNetworkFailure\nAn error that occurs when a network is available, but CloudKit is inaccessible.\nCKErrorNetworkUnavailable\nAn error that occurs when the network is unavailable.\nCKErrorNotAuthenticated\nAn error that occurs when the user is unauthenticated.\nCKErrorOperationCancelled\nAn error that occurs when an operation cancels.\nCKErrorPartialFailure\nAn error that occurs when an operation completes with partial failures.\nCKErrorParticipantMayNeedVerification\nAn error that occurs when the user isn’t a participant of the share.\nCKErrorPermissionFailure\nAn error that occurs when the user doesn’t have permission to save or fetch data.\nCKErrorQuotaExceeded\nAn error that occurs when saving a record exceeds the user’s storage quota.\nCKErrorReferenceViolation\nAn error that occurs when CloudKit can’t find the target of a reference.\nCKErrorRequestRateLimited\nAn error that occurs when CloudKit rate-limits requests.\nCKErrorServerRecordChanged\nAn error that occurs when CloudKit rejects a record because the server’s version is different.\nCKErrorServerRejectedRequest\nAn error that occurs when CloudKit rejects the request.\nCKErrorServiceUnavailable\nAn error that occurs when CloudKit is unavailable.\nCKErrorTooManyParticipants\nAn error that occurs when a share has too many participants.\nCKErrorUnknownItem\nAn error that occurs when the specified record doesn’t exist.\nCKErrorUserDeletedZone\nAn error that occurs when the user deletes a record zone using the Settings app.\nCKErrorZoneBusy\nAn error that occurs when the server is too busy to handle the record zone operation.\nCKErrorZoneNotFound\nAn error that occurs when the specified record zone doesn’t exist.\nCKErrorResultsTruncated\nAn error that occurs when CloudKit truncates a query’s results.\nDeprecated"
  },
  {
    "title": "CKErrorZoneBusy | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckerrorcode/ckerrorzonebusy",
    "html": "Discussion\n\nTry the operation again in a few seconds. If you encounter this error again, increase the delay time exponentially for each subsequent retry to minimize server contention for the zone.\n\nCheck for a CKErrorRetryAfterKey key in the userInfo dictionary of any CloudKit error that you receive. Use the value of this key as the number of seconds to wait before retrying the operation.\n\nSee Also\nError Codes\nCKErrorAccountTemporarilyUnavailable\nAn error that occurs when the user’s iCloud account is temporarily unavailable.\nCKErrorAlreadyShared\nAn error that occurs when CloudKit attempts to share a record with an existing share.\nCKErrorAssetFileModified\nAn error that occurs when the system modifies an asset while saving it.\nCKErrorAssetFileNotFound\nAn error that occurs when the system can’t find the specified asset.\nCKErrorAssetNotAvailable\nAn error that occurs when the system can’t access the specified asset.\nCKErrorBadContainer\nAn error that occurs when you use an unknown or unauthorized container.\nCKErrorBadDatabase\nAn error that occurs when the operation can’t complete for the specified database.\nCKErrorBatchRequestFailed\nAn error that occurs when the system rejects the entire batch of changes.\nCKErrorChangeTokenExpired\nAn error that occurs when the change token expires.\nCKErrorConstraintViolation\nAn error that occurs when the server rejects the request because of a unique constraint violation.\nCKErrorIncompatibleVersion\nAn error that occurs when the current app version is older than the oldest allowed version.\nCKErrorInternalError\nA nonrecoverable error that CloudKit encounters.\nCKErrorInvalidArguments\nAn error that occurs when the request contains invalid information.\nCKErrorLimitExceeded\nAn error that occurs when a request’s size exceeds the limit.\nCKErrorManagedAccountRestricted\nAn error that occurs when CloudKit rejects a request due to a managed-account restriction.\nCKErrorMissingEntitlement\nAn error that occurs when the app is missing a required entitlement.\nCKErrorNetworkFailure\nAn error that occurs when a network is available, but CloudKit is inaccessible.\nCKErrorNetworkUnavailable\nAn error that occurs when the network is unavailable.\nCKErrorNotAuthenticated\nAn error that occurs when the user is unauthenticated.\nCKErrorOperationCancelled\nAn error that occurs when an operation cancels.\nCKErrorPartialFailure\nAn error that occurs when an operation completes with partial failures.\nCKErrorParticipantMayNeedVerification\nAn error that occurs when the user isn’t a participant of the share.\nCKErrorPermissionFailure\nAn error that occurs when the user doesn’t have permission to save or fetch data.\nCKErrorQuotaExceeded\nAn error that occurs when saving a record exceeds the user’s storage quota.\nCKErrorReferenceViolation\nAn error that occurs when CloudKit can’t find the target of a reference.\nCKErrorRequestRateLimited\nAn error that occurs when CloudKit rate-limits requests.\nCKErrorServerRecordChanged\nAn error that occurs when CloudKit rejects a record because the server’s version is different.\nCKErrorServerRejectedRequest\nAn error that occurs when CloudKit rejects the request.\nCKErrorServerResponseLost\nAn error that occurs when CloudKit is unable to maintain the network connection and provide a response.\nCKErrorServiceUnavailable\nAn error that occurs when CloudKit is unavailable.\nCKErrorTooManyParticipants\nAn error that occurs when a share has too many participants.\nCKErrorUnknownItem\nAn error that occurs when the specified record doesn’t exist.\nCKErrorUserDeletedZone\nAn error that occurs when the user deletes a record zone using the Settings app.\nCKErrorZoneNotFound\nAn error that occurs when the specified record zone doesn’t exist.\nCKErrorResultsTruncated\nAn error that occurs when CloudKit truncates a query’s results.\nDeprecated"
  },
  {
    "title": "CKErrorUnknownItem | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckerrorcode/ckerrorunknownitem",
    "html": "See Also\nError Codes\nCKErrorAccountTemporarilyUnavailable\nAn error that occurs when the user’s iCloud account is temporarily unavailable.\nCKErrorAlreadyShared\nAn error that occurs when CloudKit attempts to share a record with an existing share.\nCKErrorAssetFileModified\nAn error that occurs when the system modifies an asset while saving it.\nCKErrorAssetFileNotFound\nAn error that occurs when the system can’t find the specified asset.\nCKErrorAssetNotAvailable\nAn error that occurs when the system can’t access the specified asset.\nCKErrorBadContainer\nAn error that occurs when you use an unknown or unauthorized container.\nCKErrorBadDatabase\nAn error that occurs when the operation can’t complete for the specified database.\nCKErrorBatchRequestFailed\nAn error that occurs when the system rejects the entire batch of changes.\nCKErrorChangeTokenExpired\nAn error that occurs when the change token expires.\nCKErrorConstraintViolation\nAn error that occurs when the server rejects the request because of a unique constraint violation.\nCKErrorIncompatibleVersion\nAn error that occurs when the current app version is older than the oldest allowed version.\nCKErrorInternalError\nA nonrecoverable error that CloudKit encounters.\nCKErrorInvalidArguments\nAn error that occurs when the request contains invalid information.\nCKErrorLimitExceeded\nAn error that occurs when a request’s size exceeds the limit.\nCKErrorManagedAccountRestricted\nAn error that occurs when CloudKit rejects a request due to a managed-account restriction.\nCKErrorMissingEntitlement\nAn error that occurs when the app is missing a required entitlement.\nCKErrorNetworkFailure\nAn error that occurs when a network is available, but CloudKit is inaccessible.\nCKErrorNetworkUnavailable\nAn error that occurs when the network is unavailable.\nCKErrorNotAuthenticated\nAn error that occurs when the user is unauthenticated.\nCKErrorOperationCancelled\nAn error that occurs when an operation cancels.\nCKErrorPartialFailure\nAn error that occurs when an operation completes with partial failures.\nCKErrorParticipantMayNeedVerification\nAn error that occurs when the user isn’t a participant of the share.\nCKErrorPermissionFailure\nAn error that occurs when the user doesn’t have permission to save or fetch data.\nCKErrorQuotaExceeded\nAn error that occurs when saving a record exceeds the user’s storage quota.\nCKErrorReferenceViolation\nAn error that occurs when CloudKit can’t find the target of a reference.\nCKErrorRequestRateLimited\nAn error that occurs when CloudKit rate-limits requests.\nCKErrorServerRecordChanged\nAn error that occurs when CloudKit rejects a record because the server’s version is different.\nCKErrorServerRejectedRequest\nAn error that occurs when CloudKit rejects the request.\nCKErrorServerResponseLost\nAn error that occurs when CloudKit is unable to maintain the network connection and provide a response.\nCKErrorServiceUnavailable\nAn error that occurs when CloudKit is unavailable.\nCKErrorTooManyParticipants\nAn error that occurs when a share has too many participants.\nCKErrorUserDeletedZone\nAn error that occurs when the user deletes a record zone using the Settings app.\nCKErrorZoneBusy\nAn error that occurs when the server is too busy to handle the record zone operation.\nCKErrorZoneNotFound\nAn error that occurs when the specified record zone doesn’t exist.\nCKErrorResultsTruncated\nAn error that occurs when CloudKit truncates a query’s results.\nDeprecated"
  },
  {
    "title": "encodeSystemFieldsWithCoder: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckrecord/1462200-encodesystemfieldswithcoder",
    "html": "Parameters\ncoder\n\nAn archiver object.\n\nDiscussion\n\nUse this method to encode the record’s metadata that CloudKit provides. Every record has keys that the system defines that correspond to record metadata, such as the record ID, record type, creation date, and so on. This method encodes those keys in the specified archiver. This method doesn’t include any keys you add to the record. It also doesn’t encode the keys that the changedKeys method returns.\n\nYou might use this method when you want to store only the system metadata because you store the actual record data elsewhere."
  },
  {
    "title": "hash(into:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckdatabase/databasechange/modification/4200318-hash",
    "html": "Relationships\nFrom Protocol\nHashable"
  },
  {
    "title": "hash(into:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckdatabase/recordzonechange/deletion/4200322-hash",
    "html": "Relationships\nFrom Protocol\nHashable"
  },
  {
    "title": "hashValue | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckdatabase/recordzonechange/modification/4200327-hashvalue",
    "html": "Relationships\nFrom Protocol\nHashable"
  },
  {
    "title": "init(rawValue:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckquerysubscription/options/1640404-init",
    "html": "Parameters\nrawValue\n\nAn integer that represents a set of combined options."
  },
  {
    "title": "CKShare.ParticipantRole.privateUser | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckshare/participantrole/privateuser",
    "html": "See Also\nRoles\ncase owner\nThe participant is the share’s owner.\ncase publicUser\nThe participant has the public role.\ncase unknown\nThe participant’s role is unknown."
  },
  {
    "title": "accountStatusWithCompletionHandler: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckcontainer/1399180-accountstatuswithcompletionhandl",
    "html": "Parameters\ncompletionHandler\n\nThe handler to execute when the call completes.\n\nDiscussion\n\nThe block has no return value and takes the following parameters:\n\naccountStatus\n\nThe status of the user’s iCloud account.\n\nerror\n\nAn error that describes the failure, or nil if the system successfully determines the status.\n\nThis method determines the status of the user’s iCloud account asynchronously, passing the results to the block that you provide. Call this method before accessing the private database to determine whether that database is available. While your app is running, use the CKAccountChangedNotification notification to detect account changes, and call this method again to determine the status of the new account.\n\nSee Also\nDetermining the User’s iCloud Access Status\nCKAccountStatus\nConstants that indicate the availability of the user’s iCloud account."
  },
  {
    "title": "CKOperationGroup.TransferSize.hundredsOfGigabytes | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckoperationgroup/transfersize/hundredsofgigabytes",
    "html": "See Also\nTransfer Sizes\ncase kilobytes\nA transfer size that represents 1 or more kilobytes.\ncase megabytes\nA transfer size that represents 1 or more megabytes.\ncase gigabytes\nA transfer size that represents 1 or more gigabytes.\ncase tensOfMegabytes\nA transfer size that represents tens of megabytes.\ncase tensOfGigabytes\nA transfer size that represents tens of gigabytes.\ncase hundredsOfMegabytes\nA transfer size that represents hundreds of megabytes.\ncase unknown\nAn unknown transfer size."
  },
  {
    "title": "CKNotification.NotificationType.database | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cknotification/notificationtype/database",
    "html": "See Also\nNotification Types\ncase query\nA notification that CloudKit generates from a query subscription’s predicate.\ncase recordZone\nA notification that CloudKit generates when the contents of a record zone change.\ncase readNotification\nA notification that your app marks as read."
  },
  {
    "title": "CKNotification.NotificationType.recordZone | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cknotification/notificationtype/recordzone",
    "html": "See Also\nNotification Types\ncase query\nA notification that CloudKit generates from a query subscription’s predicate.\ncase database\nA notification that CloudKit generates when the contents of a database change.\ncase readNotification\nA notification that your app marks as read."
  },
  {
    "title": "previousServerChangeToken | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckfetchrecordzonechangesoperation/zoneconfiguration/2980662-previousserverchangetoken",
    "html": "See Also\nAccessing a Zone Change Configuration\nvar resultsLimit: Int\nThe maximum number of records that CloudKit retrieves when fetching zone changes.\nvar desiredKeys: [CKRecord.FieldKey]?\nAn array of the record keys to retrieve."
  },
  {
    "title": "resultsLimit | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckfetchrecordzonechangesoperation/zoneconfiguration/2980663-resultslimit",
    "html": "See Also\nAccessing a Zone Change Configuration\nvar previousServerChangeToken: CKServerChangeToken?\nThe server change token.\nvar desiredKeys: [CKRecord.FieldKey]?\nAn array of the record keys to retrieve."
  },
  {
    "title": "desiredKeys | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckfetchrecordzonechangesoperation/zoneconfiguration/3003357-desiredkeys",
    "html": "See Also\nAccessing a Zone Change Configuration\nvar previousServerChangeToken: CKServerChangeToken?\nThe server change token.\nvar resultsLimit: Int\nThe maximum number of records that CloudKit retrieves when fetching zone changes."
  },
  {
    "title": "CKShare.ParticipantPermission.readOnly | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckshare/participantpermission/readonly",
    "html": "See Also\nPermissions\ncase none\nThe participant doesn’t have any permissions for the share.\ncase readWrite\nThe participant has read-and-write permissions for the share.\ncase unknown\nThe participant’s permissions are unknown."
  },
  {
    "title": "desiredKeys | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckfetchrecordzonechangesoperation/zoneoptions/1640472-desiredkeys",
    "html": "Discussion\n\nUse this property to limit the amount of data that CloudKit retrieves for each record during the fetch operation. This property contains an array of strings, each of which is the name of a field from the target records. When you retrieve a record, CloudKit only includes fields with names that match one of the keys in this property. The default value is nil, which causes CloudKit to fetch all of the record’s keys.\n\nBecause the records you fetch can be of different types, configure the array to include the merged set of all field names for the requested records and at least one field name from each record type.\n\nIf you intend to specify the desired set of keys, set the value of this property before executing the operation or submitting it to a queue.\n\nSee Also\nZone Change Options\nvar previousServerChangeToken: CKServerChangeToken?\nThe token that identifies the starting point for retrieving changes.\nDeprecated\nvar resultsLimit: Int\nThe maximum number of records to fetch from the record zone.\nDeprecated"
  },
  {
    "title": "CKShare.ParticipantPermission.readWrite | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckshare/participantpermission/readwrite",
    "html": "See Also\nPermissions\ncase none\nThe participant doesn’t have any permissions for the share.\ncase readOnly\nThe participant has read-only permissions for the share.\ncase unknown\nThe participant’s permissions are unknown."
  },
  {
    "title": "parent | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckrecord/systemfieldkey/3003376-parent",
    "html": "See Also\nTypes of Shared Records\nstatic let share: CKRecord.FieldKey\nA value that represents the share property of a record."
  },
  {
    "title": "share | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckrecord/systemfieldkey/3003377-share",
    "html": "See Also\nTypes of Shared Records\nstatic let parent: CKRecord.FieldKey\nA value that represents the parent property of a record."
  },
  {
    "title": "description | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncengine/fetchchangesoptions/4180494-description",
    "html": "Relationships\nFrom Protocol\nCustomStringConvertible"
  },
  {
    "title": "operationGroup | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncengine/fetchchangesoptions/4155774-operationgroup",
    "html": "Discussion\n\nTip\n\nProviding a specific operation group helps you to identify and analyze the telemetry of fetch operations in CloudKit Console.\n\nThe default value is nil."
  },
  {
    "title": "CKSyncEngine.FetchChangesOptions.Scope | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncengine/fetchchangesoptions/scope",
    "html": "Topics\nEnumeration Cases\ncase all\ncase allExcluding([CKRecordZone.ID])\ncase zoneIDs([CKRecordZone.ID])\nInstance Properties\nvar description: String\nInstance Methods\nfunc contains(CKRecordZone.ID) -> Bool\nOperator Functions\nstatic func != (CKSyncEngine.FetchChangesOptions.Scope, CKSyncEngine.FetchChangesOptions.Scope) -> Bool\nstatic func == (CKSyncEngine.FetchChangesOptions.Scope, CKSyncEngine.FetchChangesOptions.Scope) -> Bool\nRelationships\nConforms To\nCustomStringConvertible\nSendable"
  },
  {
    "title": "CKErrorBadContainer | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckerrorcode/ckerrorbadcontainer",
    "html": "See Also\nError Codes\nCKErrorAccountTemporarilyUnavailable\nAn error that occurs when the user’s iCloud account is temporarily unavailable.\nCKErrorAlreadyShared\nAn error that occurs when CloudKit attempts to share a record with an existing share.\nCKErrorAssetFileModified\nAn error that occurs when the system modifies an asset while saving it.\nCKErrorAssetFileNotFound\nAn error that occurs when the system can’t find the specified asset.\nCKErrorAssetNotAvailable\nAn error that occurs when the system can’t access the specified asset.\nCKErrorBadDatabase\nAn error that occurs when the operation can’t complete for the specified database.\nCKErrorBatchRequestFailed\nAn error that occurs when the system rejects the entire batch of changes.\nCKErrorChangeTokenExpired\nAn error that occurs when the change token expires.\nCKErrorConstraintViolation\nAn error that occurs when the server rejects the request because of a unique constraint violation.\nCKErrorIncompatibleVersion\nAn error that occurs when the current app version is older than the oldest allowed version.\nCKErrorInternalError\nA nonrecoverable error that CloudKit encounters.\nCKErrorInvalidArguments\nAn error that occurs when the request contains invalid information.\nCKErrorLimitExceeded\nAn error that occurs when a request’s size exceeds the limit.\nCKErrorManagedAccountRestricted\nAn error that occurs when CloudKit rejects a request due to a managed-account restriction.\nCKErrorMissingEntitlement\nAn error that occurs when the app is missing a required entitlement.\nCKErrorNetworkFailure\nAn error that occurs when a network is available, but CloudKit is inaccessible.\nCKErrorNetworkUnavailable\nAn error that occurs when the network is unavailable.\nCKErrorNotAuthenticated\nAn error that occurs when the user is unauthenticated.\nCKErrorOperationCancelled\nAn error that occurs when an operation cancels.\nCKErrorPartialFailure\nAn error that occurs when an operation completes with partial failures.\nCKErrorParticipantMayNeedVerification\nAn error that occurs when the user isn’t a participant of the share.\nCKErrorPermissionFailure\nAn error that occurs when the user doesn’t have permission to save or fetch data.\nCKErrorQuotaExceeded\nAn error that occurs when saving a record exceeds the user’s storage quota.\nCKErrorReferenceViolation\nAn error that occurs when CloudKit can’t find the target of a reference.\nCKErrorRequestRateLimited\nAn error that occurs when CloudKit rate-limits requests.\nCKErrorServerRecordChanged\nAn error that occurs when CloudKit rejects a record because the server’s version is different.\nCKErrorServerRejectedRequest\nAn error that occurs when CloudKit rejects the request.\nCKErrorServerResponseLost\nAn error that occurs when CloudKit is unable to maintain the network connection and provide a response.\nCKErrorServiceUnavailable\nAn error that occurs when CloudKit is unavailable.\nCKErrorTooManyParticipants\nAn error that occurs when a share has too many participants.\nCKErrorUnknownItem\nAn error that occurs when the specified record doesn’t exist.\nCKErrorUserDeletedZone\nAn error that occurs when the user deletes a record zone using the Settings app.\nCKErrorZoneBusy\nAn error that occurs when the server is too busy to handle the record zone operation.\nCKErrorZoneNotFound\nAn error that occurs when the specified record zone doesn’t exist.\nCKErrorResultsTruncated\nAn error that occurs when CloudKit truncates a query’s results.\nDeprecated"
  },
  {
    "title": "CKErrorBadDatabase | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckerrorcode/ckerrorbaddatabase",
    "html": "Discussion\n\nThe system submitted the operation to the wrong database. Make sure you aren’t submitting a share operation to the public database, or a record zone create operation to the shared database.\n\nSee Also\nError Codes\nCKErrorAccountTemporarilyUnavailable\nAn error that occurs when the user’s iCloud account is temporarily unavailable.\nCKErrorAlreadyShared\nAn error that occurs when CloudKit attempts to share a record with an existing share.\nCKErrorAssetFileModified\nAn error that occurs when the system modifies an asset while saving it.\nCKErrorAssetFileNotFound\nAn error that occurs when the system can’t find the specified asset.\nCKErrorAssetNotAvailable\nAn error that occurs when the system can’t access the specified asset.\nCKErrorBadContainer\nAn error that occurs when you use an unknown or unauthorized container.\nCKErrorBatchRequestFailed\nAn error that occurs when the system rejects the entire batch of changes.\nCKErrorChangeTokenExpired\nAn error that occurs when the change token expires.\nCKErrorConstraintViolation\nAn error that occurs when the server rejects the request because of a unique constraint violation.\nCKErrorIncompatibleVersion\nAn error that occurs when the current app version is older than the oldest allowed version.\nCKErrorInternalError\nA nonrecoverable error that CloudKit encounters.\nCKErrorInvalidArguments\nAn error that occurs when the request contains invalid information.\nCKErrorLimitExceeded\nAn error that occurs when a request’s size exceeds the limit.\nCKErrorManagedAccountRestricted\nAn error that occurs when CloudKit rejects a request due to a managed-account restriction.\nCKErrorMissingEntitlement\nAn error that occurs when the app is missing a required entitlement.\nCKErrorNetworkFailure\nAn error that occurs when a network is available, but CloudKit is inaccessible.\nCKErrorNetworkUnavailable\nAn error that occurs when the network is unavailable.\nCKErrorNotAuthenticated\nAn error that occurs when the user is unauthenticated.\nCKErrorOperationCancelled\nAn error that occurs when an operation cancels.\nCKErrorPartialFailure\nAn error that occurs when an operation completes with partial failures.\nCKErrorParticipantMayNeedVerification\nAn error that occurs when the user isn’t a participant of the share.\nCKErrorPermissionFailure\nAn error that occurs when the user doesn’t have permission to save or fetch data.\nCKErrorQuotaExceeded\nAn error that occurs when saving a record exceeds the user’s storage quota.\nCKErrorReferenceViolation\nAn error that occurs when CloudKit can’t find the target of a reference.\nCKErrorRequestRateLimited\nAn error that occurs when CloudKit rate-limits requests.\nCKErrorServerRecordChanged\nAn error that occurs when CloudKit rejects a record because the server’s version is different.\nCKErrorServerRejectedRequest\nAn error that occurs when CloudKit rejects the request.\nCKErrorServerResponseLost\nAn error that occurs when CloudKit is unable to maintain the network connection and provide a response.\nCKErrorServiceUnavailable\nAn error that occurs when CloudKit is unavailable.\nCKErrorTooManyParticipants\nAn error that occurs when a share has too many participants.\nCKErrorUnknownItem\nAn error that occurs when the specified record doesn’t exist.\nCKErrorUserDeletedZone\nAn error that occurs when the user deletes a record zone using the Settings app.\nCKErrorZoneBusy\nAn error that occurs when the server is too busy to handle the record zone operation.\nCKErrorZoneNotFound\nAn error that occurs when the specified record zone doesn’t exist.\nCKErrorResultsTruncated\nAn error that occurs when CloudKit truncates a query’s results.\nDeprecated"
  },
  {
    "title": "CKErrorAssetNotAvailable | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckerrorcode/ckerrorassetnotavailable",
    "html": "See Also\nError Codes\nCKErrorAccountTemporarilyUnavailable\nAn error that occurs when the user’s iCloud account is temporarily unavailable.\nCKErrorAlreadyShared\nAn error that occurs when CloudKit attempts to share a record with an existing share.\nCKErrorAssetFileModified\nAn error that occurs when the system modifies an asset while saving it.\nCKErrorAssetFileNotFound\nAn error that occurs when the system can’t find the specified asset.\nCKErrorBadContainer\nAn error that occurs when you use an unknown or unauthorized container.\nCKErrorBadDatabase\nAn error that occurs when the operation can’t complete for the specified database.\nCKErrorBatchRequestFailed\nAn error that occurs when the system rejects the entire batch of changes.\nCKErrorChangeTokenExpired\nAn error that occurs when the change token expires.\nCKErrorConstraintViolation\nAn error that occurs when the server rejects the request because of a unique constraint violation.\nCKErrorIncompatibleVersion\nAn error that occurs when the current app version is older than the oldest allowed version.\nCKErrorInternalError\nA nonrecoverable error that CloudKit encounters.\nCKErrorInvalidArguments\nAn error that occurs when the request contains invalid information.\nCKErrorLimitExceeded\nAn error that occurs when a request’s size exceeds the limit.\nCKErrorManagedAccountRestricted\nAn error that occurs when CloudKit rejects a request due to a managed-account restriction.\nCKErrorMissingEntitlement\nAn error that occurs when the app is missing a required entitlement.\nCKErrorNetworkFailure\nAn error that occurs when a network is available, but CloudKit is inaccessible.\nCKErrorNetworkUnavailable\nAn error that occurs when the network is unavailable.\nCKErrorNotAuthenticated\nAn error that occurs when the user is unauthenticated.\nCKErrorOperationCancelled\nAn error that occurs when an operation cancels.\nCKErrorPartialFailure\nAn error that occurs when an operation completes with partial failures.\nCKErrorParticipantMayNeedVerification\nAn error that occurs when the user isn’t a participant of the share.\nCKErrorPermissionFailure\nAn error that occurs when the user doesn’t have permission to save or fetch data.\nCKErrorQuotaExceeded\nAn error that occurs when saving a record exceeds the user’s storage quota.\nCKErrorReferenceViolation\nAn error that occurs when CloudKit can’t find the target of a reference.\nCKErrorRequestRateLimited\nAn error that occurs when CloudKit rate-limits requests.\nCKErrorServerRecordChanged\nAn error that occurs when CloudKit rejects a record because the server’s version is different.\nCKErrorServerRejectedRequest\nAn error that occurs when CloudKit rejects the request.\nCKErrorServerResponseLost\nAn error that occurs when CloudKit is unable to maintain the network connection and provide a response.\nCKErrorServiceUnavailable\nAn error that occurs when CloudKit is unavailable.\nCKErrorTooManyParticipants\nAn error that occurs when a share has too many participants.\nCKErrorUnknownItem\nAn error that occurs when the specified record doesn’t exist.\nCKErrorUserDeletedZone\nAn error that occurs when the user deletes a record zone using the Settings app.\nCKErrorZoneBusy\nAn error that occurs when the server is too busy to handle the record zone operation.\nCKErrorZoneNotFound\nAn error that occurs when the specified record zone doesn’t exist.\nCKErrorResultsTruncated\nAn error that occurs when CloudKit truncates a query’s results.\nDeprecated"
  },
  {
    "title": "CKErrorChangeTokenExpired | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckerrorcode/ckerrorchangetokenexpired",
    "html": "See Also\nError Codes\nCKErrorAccountTemporarilyUnavailable\nAn error that occurs when the user’s iCloud account is temporarily unavailable.\nCKErrorAlreadyShared\nAn error that occurs when CloudKit attempts to share a record with an existing share.\nCKErrorAssetFileModified\nAn error that occurs when the system modifies an asset while saving it.\nCKErrorAssetFileNotFound\nAn error that occurs when the system can’t find the specified asset.\nCKErrorAssetNotAvailable\nAn error that occurs when the system can’t access the specified asset.\nCKErrorBadContainer\nAn error that occurs when you use an unknown or unauthorized container.\nCKErrorBadDatabase\nAn error that occurs when the operation can’t complete for the specified database.\nCKErrorBatchRequestFailed\nAn error that occurs when the system rejects the entire batch of changes.\nCKErrorConstraintViolation\nAn error that occurs when the server rejects the request because of a unique constraint violation.\nCKErrorIncompatibleVersion\nAn error that occurs when the current app version is older than the oldest allowed version.\nCKErrorInternalError\nA nonrecoverable error that CloudKit encounters.\nCKErrorInvalidArguments\nAn error that occurs when the request contains invalid information.\nCKErrorLimitExceeded\nAn error that occurs when a request’s size exceeds the limit.\nCKErrorManagedAccountRestricted\nAn error that occurs when CloudKit rejects a request due to a managed-account restriction.\nCKErrorMissingEntitlement\nAn error that occurs when the app is missing a required entitlement.\nCKErrorNetworkFailure\nAn error that occurs when a network is available, but CloudKit is inaccessible.\nCKErrorNetworkUnavailable\nAn error that occurs when the network is unavailable.\nCKErrorNotAuthenticated\nAn error that occurs when the user is unauthenticated.\nCKErrorOperationCancelled\nAn error that occurs when an operation cancels.\nCKErrorPartialFailure\nAn error that occurs when an operation completes with partial failures.\nCKErrorParticipantMayNeedVerification\nAn error that occurs when the user isn’t a participant of the share.\nCKErrorPermissionFailure\nAn error that occurs when the user doesn’t have permission to save or fetch data.\nCKErrorQuotaExceeded\nAn error that occurs when saving a record exceeds the user’s storage quota.\nCKErrorReferenceViolation\nAn error that occurs when CloudKit can’t find the target of a reference.\nCKErrorRequestRateLimited\nAn error that occurs when CloudKit rate-limits requests.\nCKErrorServerRecordChanged\nAn error that occurs when CloudKit rejects a record because the server’s version is different.\nCKErrorServerRejectedRequest\nAn error that occurs when CloudKit rejects the request.\nCKErrorServerResponseLost\nAn error that occurs when CloudKit is unable to maintain the network connection and provide a response.\nCKErrorServiceUnavailable\nAn error that occurs when CloudKit is unavailable.\nCKErrorTooManyParticipants\nAn error that occurs when a share has too many participants.\nCKErrorUnknownItem\nAn error that occurs when the specified record doesn’t exist.\nCKErrorUserDeletedZone\nAn error that occurs when the user deletes a record zone using the Settings app.\nCKErrorZoneBusy\nAn error that occurs when the server is too busy to handle the record zone operation.\nCKErrorZoneNotFound\nAn error that occurs when the specified record zone doesn’t exist.\nCKErrorResultsTruncated\nAn error that occurs when CloudKit truncates a query’s results.\nDeprecated"
  },
  {
    "title": "CKErrorAccountTemporarilyUnavailable | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckerrorcode/ckerroraccounttemporarilyunavailable",
    "html": "Discussion\n\nYou receive this error when the user’s iCloud account is available, but isn’t ready to support CloudKit operations. Don’t delete any cached data and don’t enqueue any additional CloudKit operations.\n\nChecking the account status after the operation fails, assuming there are no other changes to the account’s status, returns CKAccountStatusTemporarilyUnavailable. Use the CKAccountChangedNotification notification to listen for future account status changes, and retry the operation after the status becomes CKAccountStatusAvailable.\n\nSee Also\nError Codes\nCKErrorAlreadyShared\nAn error that occurs when CloudKit attempts to share a record with an existing share.\nCKErrorAssetFileModified\nAn error that occurs when the system modifies an asset while saving it.\nCKErrorAssetFileNotFound\nAn error that occurs when the system can’t find the specified asset.\nCKErrorAssetNotAvailable\nAn error that occurs when the system can’t access the specified asset.\nCKErrorBadContainer\nAn error that occurs when you use an unknown or unauthorized container.\nCKErrorBadDatabase\nAn error that occurs when the operation can’t complete for the specified database.\nCKErrorBatchRequestFailed\nAn error that occurs when the system rejects the entire batch of changes.\nCKErrorChangeTokenExpired\nAn error that occurs when the change token expires.\nCKErrorConstraintViolation\nAn error that occurs when the server rejects the request because of a unique constraint violation.\nCKErrorIncompatibleVersion\nAn error that occurs when the current app version is older than the oldest allowed version.\nCKErrorInternalError\nA nonrecoverable error that CloudKit encounters.\nCKErrorInvalidArguments\nAn error that occurs when the request contains invalid information.\nCKErrorLimitExceeded\nAn error that occurs when a request’s size exceeds the limit.\nCKErrorManagedAccountRestricted\nAn error that occurs when CloudKit rejects a request due to a managed-account restriction.\nCKErrorMissingEntitlement\nAn error that occurs when the app is missing a required entitlement.\nCKErrorNetworkFailure\nAn error that occurs when a network is available, but CloudKit is inaccessible.\nCKErrorNetworkUnavailable\nAn error that occurs when the network is unavailable.\nCKErrorNotAuthenticated\nAn error that occurs when the user is unauthenticated.\nCKErrorOperationCancelled\nAn error that occurs when an operation cancels.\nCKErrorPartialFailure\nAn error that occurs when an operation completes with partial failures.\nCKErrorParticipantMayNeedVerification\nAn error that occurs when the user isn’t a participant of the share.\nCKErrorPermissionFailure\nAn error that occurs when the user doesn’t have permission to save or fetch data.\nCKErrorQuotaExceeded\nAn error that occurs when saving a record exceeds the user’s storage quota.\nCKErrorReferenceViolation\nAn error that occurs when CloudKit can’t find the target of a reference.\nCKErrorRequestRateLimited\nAn error that occurs when CloudKit rate-limits requests.\nCKErrorServerRecordChanged\nAn error that occurs when CloudKit rejects a record because the server’s version is different.\nCKErrorServerRejectedRequest\nAn error that occurs when CloudKit rejects the request.\nCKErrorServerResponseLost\nAn error that occurs when CloudKit is unable to maintain the network connection and provide a response.\nCKErrorServiceUnavailable\nAn error that occurs when CloudKit is unavailable.\nCKErrorTooManyParticipants\nAn error that occurs when a share has too many participants.\nCKErrorUnknownItem\nAn error that occurs when the specified record doesn’t exist.\nCKErrorUserDeletedZone\nAn error that occurs when the user deletes a record zone using the Settings app.\nCKErrorZoneBusy\nAn error that occurs when the server is too busy to handle the record zone operation.\nCKErrorZoneNotFound\nAn error that occurs when the specified record zone doesn’t exist.\nCKErrorResultsTruncated\nAn error that occurs when CloudKit truncates a query’s results.\nDeprecated"
  },
  {
    "title": "CKSyncEngine.State.Serialization | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncengine/state/serialization",
    "html": "Topics\nCreating a state serialization\ninit(from: Decoder)\nCreates a state serialization from the provided decoder.\nEncoding state\nfunc encode(to: Encoder)\nEncodes the state’s attributes into the provided encoder.\nRelationships\nConforms To\nDecodable\nEncodable\nSendable"
  },
  {
    "title": "CKErrorAlreadyShared | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckerrorcode/ckerroralreadyshared",
    "html": "Discussion\n\nA record can exist in only a single share at a time. This error means that one of the following conditions exists:\n\nThe record already has an existing share.\n\nThe record has a parent, and its parent has a share.\n\nThe record is a parent, and one of its children has a share.\n\nSee Also\nError Codes\nCKErrorAccountTemporarilyUnavailable\nAn error that occurs when the user’s iCloud account is temporarily unavailable.\nCKErrorAssetFileModified\nAn error that occurs when the system modifies an asset while saving it.\nCKErrorAssetFileNotFound\nAn error that occurs when the system can’t find the specified asset.\nCKErrorAssetNotAvailable\nAn error that occurs when the system can’t access the specified asset.\nCKErrorBadContainer\nAn error that occurs when you use an unknown or unauthorized container.\nCKErrorBadDatabase\nAn error that occurs when the operation can’t complete for the specified database.\nCKErrorBatchRequestFailed\nAn error that occurs when the system rejects the entire batch of changes.\nCKErrorChangeTokenExpired\nAn error that occurs when the change token expires.\nCKErrorConstraintViolation\nAn error that occurs when the server rejects the request because of a unique constraint violation.\nCKErrorIncompatibleVersion\nAn error that occurs when the current app version is older than the oldest allowed version.\nCKErrorInternalError\nA nonrecoverable error that CloudKit encounters.\nCKErrorInvalidArguments\nAn error that occurs when the request contains invalid information.\nCKErrorLimitExceeded\nAn error that occurs when a request’s size exceeds the limit.\nCKErrorManagedAccountRestricted\nAn error that occurs when CloudKit rejects a request due to a managed-account restriction.\nCKErrorMissingEntitlement\nAn error that occurs when the app is missing a required entitlement.\nCKErrorNetworkFailure\nAn error that occurs when a network is available, but CloudKit is inaccessible.\nCKErrorNetworkUnavailable\nAn error that occurs when the network is unavailable.\nCKErrorNotAuthenticated\nAn error that occurs when the user is unauthenticated.\nCKErrorOperationCancelled\nAn error that occurs when an operation cancels.\nCKErrorPartialFailure\nAn error that occurs when an operation completes with partial failures.\nCKErrorParticipantMayNeedVerification\nAn error that occurs when the user isn’t a participant of the share.\nCKErrorPermissionFailure\nAn error that occurs when the user doesn’t have permission to save or fetch data.\nCKErrorQuotaExceeded\nAn error that occurs when saving a record exceeds the user’s storage quota.\nCKErrorReferenceViolation\nAn error that occurs when CloudKit can’t find the target of a reference.\nCKErrorRequestRateLimited\nAn error that occurs when CloudKit rate-limits requests.\nCKErrorServerRecordChanged\nAn error that occurs when CloudKit rejects a record because the server’s version is different.\nCKErrorServerRejectedRequest\nAn error that occurs when CloudKit rejects the request.\nCKErrorServerResponseLost\nAn error that occurs when CloudKit is unable to maintain the network connection and provide a response.\nCKErrorServiceUnavailable\nAn error that occurs when CloudKit is unavailable.\nCKErrorTooManyParticipants\nAn error that occurs when a share has too many participants.\nCKErrorUnknownItem\nAn error that occurs when the specified record doesn’t exist.\nCKErrorUserDeletedZone\nAn error that occurs when the user deletes a record zone using the Settings app.\nCKErrorZoneBusy\nAn error that occurs when the server is too busy to handle the record zone operation.\nCKErrorZoneNotFound\nAn error that occurs when the specified record zone doesn’t exist.\nCKErrorResultsTruncated\nAn error that occurs when CloudKit truncates a query’s results.\nDeprecated"
  },
  {
    "title": "CKErrorAssetFileModified | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckerrorcode/ckerrorassetfilemodified",
    "html": "See Also\nError Codes\nCKErrorAccountTemporarilyUnavailable\nAn error that occurs when the user’s iCloud account is temporarily unavailable.\nCKErrorAlreadyShared\nAn error that occurs when CloudKit attempts to share a record with an existing share.\nCKErrorAssetFileNotFound\nAn error that occurs when the system can’t find the specified asset.\nCKErrorAssetNotAvailable\nAn error that occurs when the system can’t access the specified asset.\nCKErrorBadContainer\nAn error that occurs when you use an unknown or unauthorized container.\nCKErrorBadDatabase\nAn error that occurs when the operation can’t complete for the specified database.\nCKErrorBatchRequestFailed\nAn error that occurs when the system rejects the entire batch of changes.\nCKErrorChangeTokenExpired\nAn error that occurs when the change token expires.\nCKErrorConstraintViolation\nAn error that occurs when the server rejects the request because of a unique constraint violation.\nCKErrorIncompatibleVersion\nAn error that occurs when the current app version is older than the oldest allowed version.\nCKErrorInternalError\nA nonrecoverable error that CloudKit encounters.\nCKErrorInvalidArguments\nAn error that occurs when the request contains invalid information.\nCKErrorLimitExceeded\nAn error that occurs when a request’s size exceeds the limit.\nCKErrorManagedAccountRestricted\nAn error that occurs when CloudKit rejects a request due to a managed-account restriction.\nCKErrorMissingEntitlement\nAn error that occurs when the app is missing a required entitlement.\nCKErrorNetworkFailure\nAn error that occurs when a network is available, but CloudKit is inaccessible.\nCKErrorNetworkUnavailable\nAn error that occurs when the network is unavailable.\nCKErrorNotAuthenticated\nAn error that occurs when the user is unauthenticated.\nCKErrorOperationCancelled\nAn error that occurs when an operation cancels.\nCKErrorPartialFailure\nAn error that occurs when an operation completes with partial failures.\nCKErrorParticipantMayNeedVerification\nAn error that occurs when the user isn’t a participant of the share.\nCKErrorPermissionFailure\nAn error that occurs when the user doesn’t have permission to save or fetch data.\nCKErrorQuotaExceeded\nAn error that occurs when saving a record exceeds the user’s storage quota.\nCKErrorReferenceViolation\nAn error that occurs when CloudKit can’t find the target of a reference.\nCKErrorRequestRateLimited\nAn error that occurs when CloudKit rate-limits requests.\nCKErrorServerRecordChanged\nAn error that occurs when CloudKit rejects a record because the server’s version is different.\nCKErrorServerRejectedRequest\nAn error that occurs when CloudKit rejects the request.\nCKErrorServerResponseLost\nAn error that occurs when CloudKit is unable to maintain the network connection and provide a response.\nCKErrorServiceUnavailable\nAn error that occurs when CloudKit is unavailable.\nCKErrorTooManyParticipants\nAn error that occurs when a share has too many participants.\nCKErrorUnknownItem\nAn error that occurs when the specified record doesn’t exist.\nCKErrorUserDeletedZone\nAn error that occurs when the user deletes a record zone using the Settings app.\nCKErrorZoneBusy\nAn error that occurs when the server is too busy to handle the record zone operation.\nCKErrorZoneNotFound\nAn error that occurs when the specified record zone doesn’t exist.\nCKErrorResultsTruncated\nAn error that occurs when CloudKit truncates a query’s results.\nDeprecated"
  },
  {
    "title": "CKErrorAssetFileNotFound | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckerrorcode/ckerrorassetfilenotfound",
    "html": "See Also\nError Codes\nCKErrorAccountTemporarilyUnavailable\nAn error that occurs when the user’s iCloud account is temporarily unavailable.\nCKErrorAlreadyShared\nAn error that occurs when CloudKit attempts to share a record with an existing share.\nCKErrorAssetFileModified\nAn error that occurs when the system modifies an asset while saving it.\nCKErrorAssetNotAvailable\nAn error that occurs when the system can’t access the specified asset.\nCKErrorBadContainer\nAn error that occurs when you use an unknown or unauthorized container.\nCKErrorBadDatabase\nAn error that occurs when the operation can’t complete for the specified database.\nCKErrorBatchRequestFailed\nAn error that occurs when the system rejects the entire batch of changes.\nCKErrorChangeTokenExpired\nAn error that occurs when the change token expires.\nCKErrorConstraintViolation\nAn error that occurs when the server rejects the request because of a unique constraint violation.\nCKErrorIncompatibleVersion\nAn error that occurs when the current app version is older than the oldest allowed version.\nCKErrorInternalError\nA nonrecoverable error that CloudKit encounters.\nCKErrorInvalidArguments\nAn error that occurs when the request contains invalid information.\nCKErrorLimitExceeded\nAn error that occurs when a request’s size exceeds the limit.\nCKErrorManagedAccountRestricted\nAn error that occurs when CloudKit rejects a request due to a managed-account restriction.\nCKErrorMissingEntitlement\nAn error that occurs when the app is missing a required entitlement.\nCKErrorNetworkFailure\nAn error that occurs when a network is available, but CloudKit is inaccessible.\nCKErrorNetworkUnavailable\nAn error that occurs when the network is unavailable.\nCKErrorNotAuthenticated\nAn error that occurs when the user is unauthenticated.\nCKErrorOperationCancelled\nAn error that occurs when an operation cancels.\nCKErrorPartialFailure\nAn error that occurs when an operation completes with partial failures.\nCKErrorParticipantMayNeedVerification\nAn error that occurs when the user isn’t a participant of the share.\nCKErrorPermissionFailure\nAn error that occurs when the user doesn’t have permission to save or fetch data.\nCKErrorQuotaExceeded\nAn error that occurs when saving a record exceeds the user’s storage quota.\nCKErrorReferenceViolation\nAn error that occurs when CloudKit can’t find the target of a reference.\nCKErrorRequestRateLimited\nAn error that occurs when CloudKit rate-limits requests.\nCKErrorServerRecordChanged\nAn error that occurs when CloudKit rejects a record because the server’s version is different.\nCKErrorServerRejectedRequest\nAn error that occurs when CloudKit rejects the request.\nCKErrorServerResponseLost\nAn error that occurs when CloudKit is unable to maintain the network connection and provide a response.\nCKErrorServiceUnavailable\nAn error that occurs when CloudKit is unavailable.\nCKErrorTooManyParticipants\nAn error that occurs when a share has too many participants.\nCKErrorUnknownItem\nAn error that occurs when the specified record doesn’t exist.\nCKErrorUserDeletedZone\nAn error that occurs when the user deletes a record zone using the Settings app.\nCKErrorZoneBusy\nAn error that occurs when the server is too busy to handle the record zone operation.\nCKErrorZoneNotFound\nAn error that occurs when the specified record zone doesn’t exist.\nCKErrorResultsTruncated\nAn error that occurs when CloudKit truncates a query’s results.\nDeprecated"
  },
  {
    "title": "CKSyncEngine.PendingDatabaseChange | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncengine/pendingdatabasechange",
    "html": "Topics\nDatabase change types\nenum CKSyncEnginePendingDatabaseChangeType\nDescribes the type of a pending database change.\nIdentifying and comparing changes\nvar hashValue: Int\nThe hash value.\nfunc hash(into: inout Hasher)\nHashes the essential attributes of the change using the provided hasher.\nstatic func == (CKSyncEngine.PendingDatabaseChange, CKSyncEngine.PendingDatabaseChange) -> Bool\nReturns a Boolean value that indicates whether two values are equal.\nstatic func != (CKSyncEngine.PendingDatabaseChange, CKSyncEngine.PendingDatabaseChange) -> Bool\nReturns a Boolean value that indicates whether two values are unequal.\nDebugging the change\nvar description: String\nA textual description of the change that’s suitable for logging.\nEnumeration Cases\ncase deleteZone(CKRecordZone.ID)\ncase saveZone(CKRecordZone)\nRelationships\nConforms To\nCustomStringConvertible\nHashable\nSendable\nSee Also\nManipulating pending changes\nfunc add(pendingDatabaseChanges: [CKSyncEngine.PendingDatabaseChange])\nAdds the specified database changes to the state.\nfunc remove(pendingDatabaseChanges: [CKSyncEngine.PendingDatabaseChange])\nRemoves the specified database changes from the state.\nfunc add(pendingRecordZoneChanges: [CKSyncEngine.PendingRecordZoneChange])\nAdds the specified record zone changes to the state.\nfunc remove(pendingRecordZoneChanges: [CKSyncEngine.PendingRecordZoneChange])\nRemoves the specified record zone changes from the state.\nenum CKSyncEngine.PendingRecordZoneChange\nDescribes an unsent record modification."
  },
  {
    "title": "remove(pendingRecordZoneChanges:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncengine/state/4183753-remove",
    "html": "Parameters\npendingRecordZoneChanges\n\nAn array of record zone changes.\n\nSee Also\nManipulating pending changes\nfunc add(pendingDatabaseChanges: [CKSyncEngine.PendingDatabaseChange])\nAdds the specified database changes to the state.\nfunc remove(pendingDatabaseChanges: [CKSyncEngine.PendingDatabaseChange])\nRemoves the specified database changes from the state.\nenum CKSyncEngine.PendingDatabaseChange\nDescribes an unsent database modification.\nfunc add(pendingRecordZoneChanges: [CKSyncEngine.PendingRecordZoneChange])\nAdds the specified record zone changes to the state.\nenum CKSyncEngine.PendingRecordZoneChange\nDescribes an unsent record modification."
  },
  {
    "title": "CKErrorUserDeletedZone | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckerrorcode/ckerroruserdeletedzone",
    "html": "See Also\nError Codes\nCKErrorAccountTemporarilyUnavailable\nAn error that occurs when the user’s iCloud account is temporarily unavailable.\nCKErrorAlreadyShared\nAn error that occurs when CloudKit attempts to share a record with an existing share.\nCKErrorAssetFileModified\nAn error that occurs when the system modifies an asset while saving it.\nCKErrorAssetFileNotFound\nAn error that occurs when the system can’t find the specified asset.\nCKErrorAssetNotAvailable\nAn error that occurs when the system can’t access the specified asset.\nCKErrorBadContainer\nAn error that occurs when you use an unknown or unauthorized container.\nCKErrorBadDatabase\nAn error that occurs when the operation can’t complete for the specified database.\nCKErrorBatchRequestFailed\nAn error that occurs when the system rejects the entire batch of changes.\nCKErrorChangeTokenExpired\nAn error that occurs when the change token expires.\nCKErrorConstraintViolation\nAn error that occurs when the server rejects the request because of a unique constraint violation.\nCKErrorIncompatibleVersion\nAn error that occurs when the current app version is older than the oldest allowed version.\nCKErrorInternalError\nA nonrecoverable error that CloudKit encounters.\nCKErrorInvalidArguments\nAn error that occurs when the request contains invalid information.\nCKErrorLimitExceeded\nAn error that occurs when a request’s size exceeds the limit.\nCKErrorManagedAccountRestricted\nAn error that occurs when CloudKit rejects a request due to a managed-account restriction.\nCKErrorMissingEntitlement\nAn error that occurs when the app is missing a required entitlement.\nCKErrorNetworkFailure\nAn error that occurs when a network is available, but CloudKit is inaccessible.\nCKErrorNetworkUnavailable\nAn error that occurs when the network is unavailable.\nCKErrorNotAuthenticated\nAn error that occurs when the user is unauthenticated.\nCKErrorOperationCancelled\nAn error that occurs when an operation cancels.\nCKErrorPartialFailure\nAn error that occurs when an operation completes with partial failures.\nCKErrorParticipantMayNeedVerification\nAn error that occurs when the user isn’t a participant of the share.\nCKErrorPermissionFailure\nAn error that occurs when the user doesn’t have permission to save or fetch data.\nCKErrorQuotaExceeded\nAn error that occurs when saving a record exceeds the user’s storage quota.\nCKErrorReferenceViolation\nAn error that occurs when CloudKit can’t find the target of a reference.\nCKErrorRequestRateLimited\nAn error that occurs when CloudKit rate-limits requests.\nCKErrorServerRecordChanged\nAn error that occurs when CloudKit rejects a record because the server’s version is different.\nCKErrorServerRejectedRequest\nAn error that occurs when CloudKit rejects the request.\nCKErrorServerResponseLost\nAn error that occurs when CloudKit is unable to maintain the network connection and provide a response.\nCKErrorServiceUnavailable\nAn error that occurs when CloudKit is unavailable.\nCKErrorTooManyParticipants\nAn error that occurs when a share has too many participants.\nCKErrorUnknownItem\nAn error that occurs when the specified record doesn’t exist.\nCKErrorZoneBusy\nAn error that occurs when the server is too busy to handle the record zone operation.\nCKErrorZoneNotFound\nAn error that occurs when the specified record zone doesn’t exist.\nCKErrorResultsTruncated\nAn error that occurs when CloudKit truncates a query’s results.\nDeprecated"
  },
  {
    "title": "markNotificationsReadCompletionBlock | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckmarknotificationsreadoperation/1515317-marknotificationsreadcompletionb",
    "html": "Discussion\n\nThe block returns no value and takes the following parameters:\n\nnotificationIDsMarkedRead\n\nAn array of CKNotification.ID objects that corresponds to the notifications that CloudKit successfully marks as read.\n\noperationError\n\nAn error object that contains information about a problem, or nil if CloudKit updates all notifications successfully.\n\nThe operation object executes this block only once, and it’s your only opportunity to process the operation results. If you intend to use this block to process results, set it before executing the operation or submitting the operation object to a queue.\n\nThis block reports an error of type CKError.Code.partialFailure when it’s able to update only some of the notifications successfully. The userInfo dictionary of the error contains a CKPartialErrorsByItemIDKey key with an NSDictionary object as its value. The keys of that dictionary are the IDs of the notifications that CloudKit can’t update, and the corresponding values are error objects that contain information about the errors."
  },
  {
    "title": "description | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncengine/event/stateupdate/4180489-description",
    "html": "Relationships\nFrom Protocol\nCustomStringConvertible"
  },
  {
    "title": "subscript(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckrecordkeyvaluesetting/2976186-subscript",
    "html": "Required Default implementations provided.\n\nParameters\nkey\n\nThe string that identifies a field in the record. A key must consist of one or more alphanumeric characters and must start with a letter. CloudKit permits the use of underscores, but not spaces.\n\nReturn Value\n\nThe object for the specified key, or nil if no such key exists in the record.\n\nDefault Implementations\nCKRecordKeyValueSetting Implementations\nsubscript(CKRecord.FieldKey) -> (CKRecordValueProtocol)?\nAccesses the value for the specified key in the record.\nsubscript<T>(CKRecord.FieldKey) -> T?\nAccesses the value for the specified key in the record.\nSee Also\nAccessing a Record's Fields\nfunc object(forKey: String) -> __CKRecordObjCValue?\nReturns the object that the record stores for the specified key.\n\nRequired\n\nfunc setObject(__CKRecordObjCValue?, forKey: String)\nStores an object in the record using the specified key.\n\nRequired\n\nfunc allKeys() -> [String]\nReturns an array of the record’s keys.\n\nRequired\n\nfunc changedKeys() -> [String]\nReturns an array of keys with recent changes to their values.\n\nRequired"
  },
  {
    "title": "discoverUserIdentityWithUserRecordID:completionHandler: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckcontainer/1640517-discoveruseridentitywithuserreco",
    "html": "Parameters\nuserRecordID\n\nThe user record’s ID.\n\ncompletionHandler\n\nThe handler to execute with the fetch results.\n\nDiscussion\n\nThis block doesn’t return a value and takes the following parameters:\n\nuserInfo\n\nThe user identity for the user record ID, or nil if CloudKit can’t find an identity.\n\nerror\n\nAn error if a problem occurs, or nil if CloudKit successfully fetches a user identity.\n\nUse this method to retrieve the identity of a user who you already have a user record ID for. The user you’re searching for must meet the following criteria:\n\nThe user has run the app.\n\nThe user grants the CKApplicationPermissionUserDiscoverability permission for the container.\n\nThis method searches for the user asynchronously and with a low priority. If you want the task to execute the request with a higher priority, create an instance of CKDiscoverUserIdentitiesOperation and configure it to use the necessary priority.\n\nSee Also\nDiscovering User Records\n- discoverAllIdentitiesWithCompletionHandler:\nFetches all user identities that match entries in the user’s Contacts.\nDeprecated\n- discoverUserIdentityWithEmailAddress:completionHandler:\nFetches the user identity for the specified email address.\nDeprecated\n- discoverUserIdentityWithPhoneNumber:completionHandler:\nFetches the user identity for the specified phone number.\nDeprecated\n- fetchShareParticipantWithEmailAddress:completionHandler:\nFetches the share participant with the specified email address.\n- fetchShareParticipantWithPhoneNumber:completionHandler:\nFetches the share participant with the specified phone number.\n- fetchShareParticipantWithUserRecordID:completionHandler:\nFetches the share participant with the specified user record ID.\n- fetchUserRecordIDWithCompletionHandler:\nFetches the user record ID of the current user.\nCKCurrentUserDefaultName\nA constant that provides the current user’s default name.\nCKOwnerDefaultName\nA constant that provides the default owner’s name.\nDeprecated"
  },
  {
    "title": "fetchShareParticipantWithEmailAddress:completionHandler: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckcontainer/1640489-fetchshareparticipantwithemailad",
    "html": "Parameters\nemailAddress\n\nThe share participant’s email address.\n\ncompletionHandler\n\nThe handler to execute with the fetch results.\n\nDiscussion\n\nThe block doesn’t return a value and takes the following parameters:\n\nshareParticipant\n\nThe share participant, or nil if CloudKit can’t find the participant.\n\nerror\n\nAn error if a problem occurs, or nil if CloudKit successfully retrieves the participant.\n\nThis method searches for the share participant asynchronously and with a low priority. If you want the task to execute with a higher priority, create an instance of CKFetchShareParticipantsOperation and configure it to use the necessary priority.\n\nSee Also\nDiscovering User Records\n- discoverAllIdentitiesWithCompletionHandler:\nFetches all user identities that match entries in the user’s Contacts.\nDeprecated\n- discoverUserIdentityWithEmailAddress:completionHandler:\nFetches the user identity for the specified email address.\nDeprecated\n- discoverUserIdentityWithPhoneNumber:completionHandler:\nFetches the user identity for the specified phone number.\nDeprecated\n- discoverUserIdentityWithUserRecordID:completionHandler:\nFetches the user identity for the specified user record ID.\nDeprecated\n- fetchShareParticipantWithPhoneNumber:completionHandler:\nFetches the share participant with the specified phone number.\n- fetchShareParticipantWithUserRecordID:completionHandler:\nFetches the share participant with the specified user record ID.\n- fetchUserRecordIDWithCompletionHandler:\nFetches the user record ID of the current user.\nCKCurrentUserDefaultName\nA constant that provides the current user’s default name.\nCKOwnerDefaultName\nA constant that provides the default owner’s name.\nDeprecated"
  },
  {
    "title": "timeoutIntervalForResource | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckoperation/1639386-timeoutintervalforresource",
    "html": "Deprecated\n\nUse timeoutIntervalForResource instead.\n\nDiscussion\n\nThis property determines the resource timeout interval for this operation, which controls how long, in seconds, to wait for the entire operation to complete before stopping. The resource timer starts when the operation executes and counts until either the operation completes or this timeout interval occurs, whichever comes first.\n\nThe default value is 604800, the number of seconds in 7 days.\n\nSee Also\nDeprecated Properties\nvar allowsCellularAccess: Bool\nA Boolean value that indicates whether the operation can send data over the cellular network.\nDeprecated\nvar container: CKContainer?\nThe operation’s container.\nDeprecated\nvar isLongLived: Bool\nA Boolean value that indicates whether the operation is long-lived.\nDeprecated\nvar timeoutIntervalForRequest: TimeInterval\nThe timeout interval when waiting for additional data.\nDeprecated"
  },
  {
    "title": "fetchShareParticipantWithPhoneNumber:completionHandler: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckcontainer/1640493-fetchshareparticipantwithphonenu",
    "html": "Parameters\nphoneNumber\n\nThe share participant’s phone number.\n\ncompletionHandler\n\nThe handler to execute with the fetch results.\n\nDiscussion\n\nThe block doesn’t return a value and takes the following parameters:\n\nshareParticipant\n\nThe share participant, or nil if CloudKit can’t find the participant.\n\nerror\n\nAn error if a problem occurs, or nil if CloudKit successfully retrieves the participant.\n\nThis method searches for the share participant asynchronously and with a low priority. If you want the task to execute with a higher priority, create an instance of CKFetchShareParticipantsOperation and configure it to use the necessary priority.\n\nSee Also\nDiscovering User Records\n- discoverAllIdentitiesWithCompletionHandler:\nFetches all user identities that match entries in the user’s Contacts.\nDeprecated\n- discoverUserIdentityWithEmailAddress:completionHandler:\nFetches the user identity for the specified email address.\nDeprecated\n- discoverUserIdentityWithPhoneNumber:completionHandler:\nFetches the user identity for the specified phone number.\nDeprecated\n- discoverUserIdentityWithUserRecordID:completionHandler:\nFetches the user identity for the specified user record ID.\nDeprecated\n- fetchShareParticipantWithEmailAddress:completionHandler:\nFetches the share participant with the specified email address.\n- fetchShareParticipantWithUserRecordID:completionHandler:\nFetches the share participant with the specified user record ID.\n- fetchUserRecordIDWithCompletionHandler:\nFetches the user record ID of the current user.\nCKCurrentUserDefaultName\nA constant that provides the current user’s default name.\nCKOwnerDefaultName\nA constant that provides the default owner’s name.\nDeprecated"
  },
  {
    "title": "CKSyncEngineEventType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncengineeventtype",
    "html": "Topics\nEvent types\ncase stateUpdate\nAn event indicating an update to the sync engine’s state.\ncase accountChange\nAn event indicating a change to the device’s iCloud account.\ncase fetchedDatabaseChanges\nAn event indicating there are fetched database changes to process.\ncase fetchedRecordZoneChanges\nAn event indicating there are fetched record zone changes to process.\ncase sentDatabaseChanges\nAn event indicating a sent batch of database changes.\ncase sentRecordZoneChanges\nAn event indicating a sent batch of record zone changes.\ncase willFetchChanges\nAn event indicating an imminent database fetch.\ncase willFetchRecordZoneChanges\nAn event indicating an imminent fetch of changes in a record zone.\ncase didFetchRecordZoneChanges\nAn event that indicates the record zone fetch is done.\ncase didFetchChanges\nAn event that indicates the database fetch is done.\ncase willSendChanges\nAn event indicating an imminent send of local changes.\ncase didSendChanges\nAn event that indicates a finished send operation.\nRelationships\nConforms To\nSendable\nSee Also\nHandling sync events\nfunc handleEvent(CKSyncEngine.Event, syncEngine: CKSyncEngine)\nTells the delegate to handle the specified sync event.\n\nRequired\n\nenum CKSyncEngine.Event\nDescribes an event that occurs during a sync operation."
  },
  {
    "title": "CKOperationID | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckoperationid",
    "html": "See Also\nIdentifying the Operation\noperationID\nA unique identifier for a long-lived operation."
  },
  {
    "title": "fetchShareParticipantWithUserRecordID:completionHandler: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckcontainer/1640387-fetchshareparticipantwithuserrec",
    "html": "Parameters\nuserRecordID\n\nThe share participant’s user record ID.\n\ncompletionHandler\n\nThe handler to execute with the fetch results.\n\nDiscussion\n\nThe block doesn’t return a value and takes the following parameters:\n\nshareParticipant\n\nThe share participant, or nil if CloudKit can’t find the participant.\n\nerror\n\nAn error if a problem occurs, or nil if CloudKit successfully retrieves the participant.\n\nThis method searches for the share participant asynchronously and with a low priority. If you want the task to execute with a higher priority, create an instance of CKFetchShareParticipantsOperation and configure it to use the necessary priority.\n\nSee Also\nDiscovering User Records\n- discoverAllIdentitiesWithCompletionHandler:\nFetches all user identities that match entries in the user’s Contacts.\nDeprecated\n- discoverUserIdentityWithEmailAddress:completionHandler:\nFetches the user identity for the specified email address.\nDeprecated\n- discoverUserIdentityWithPhoneNumber:completionHandler:\nFetches the user identity for the specified phone number.\nDeprecated\n- discoverUserIdentityWithUserRecordID:completionHandler:\nFetches the user identity for the specified user record ID.\nDeprecated\n- fetchShareParticipantWithEmailAddress:completionHandler:\nFetches the share participant with the specified email address.\n- fetchShareParticipantWithPhoneNumber:completionHandler:\nFetches the share participant with the specified phone number.\n- fetchUserRecordIDWithCompletionHandler:\nFetches the user record ID of the current user.\nCKCurrentUserDefaultName\nA constant that provides the current user’s default name.\nCKOwnerDefaultName\nA constant that provides the default owner’s name.\nDeprecated"
  },
  {
    "title": "fetchUserRecordIDWithCompletionHandler: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckcontainer/1399191-fetchuserrecordidwithcompletionh",
    "html": "Parameters\ncompletionHandler\n\nThe handler to execute with the fetch results.\n\nDiscussion\n\nThe block doesn’t return a value and takes the following parameters:\n\nrecordID\n\nThe user record ID, or nil if the user disables iCloud Drive or the device doesn’t have an iCloud account.\n\nerror\n\nAn error if a problem occurs, or nil if CloudKit successfully retrieves the user record ID.\n\nCloudKit returns a CKErrorNotAuthenticated error when any of the following conditions are met:\n\nThe device has an iCloud account but the user disables iCloud Drive.\n\nThe device has an iCloud account with restricted access.\n\nThe device doesn’t have an iCloud account.\n\nNote\n\nAt startup, fetching the user record ID may take longer while CloudKit makes the initial iCloud account request. After the initial fetch, accessing the ID generally takes less time.\n\nSee Also\nDiscovering User Records\n- discoverAllIdentitiesWithCompletionHandler:\nFetches all user identities that match entries in the user’s Contacts.\nDeprecated\n- discoverUserIdentityWithEmailAddress:completionHandler:\nFetches the user identity for the specified email address.\nDeprecated\n- discoverUserIdentityWithPhoneNumber:completionHandler:\nFetches the user identity for the specified phone number.\nDeprecated\n- discoverUserIdentityWithUserRecordID:completionHandler:\nFetches the user identity for the specified user record ID.\nDeprecated\n- fetchShareParticipantWithEmailAddress:completionHandler:\nFetches the share participant with the specified email address.\n- fetchShareParticipantWithPhoneNumber:completionHandler:\nFetches the share participant with the specified phone number.\n- fetchShareParticipantWithUserRecordID:completionHandler:\nFetches the share participant with the specified user record ID.\nCKCurrentUserDefaultName\nA constant that provides the current user’s default name.\nCKOwnerDefaultName\nA constant that provides the default owner’s name.\nDeprecated"
  },
  {
    "title": "fetchShareMetadataWithURL:completionHandler: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckcontainer/2113666-fetchsharemetadatawithurl",
    "html": "Parameters\nurl\n\nThe share URL that CloudKit uses to locate the metadata.\n\ncompletionHandler\n\nThe handler to execute with the fetch results.\n\nDiscussion\n\nThe block doesn’t return a value and takes the following parameters:\n\nmetadata\n\nThe share metadata, or nil if CloudKit can’t find the metadata.\n\nerror\n\nAn error if a problem occurs, or nil if CloudKit successfully retrieves the metadata.\n\nSee Also\nAccessing Container Metadata\n- acceptShareMetadata:completionHandler:\nAccepts the specified share metadata.\nCKAccountChangedNotification\nA notification that a container posts when the status of an iCloud account changes."
  },
  {
    "title": "remove(pendingDatabaseChanges:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncengine/state/4183752-remove",
    "html": "Parameters\npendingDatabaseChanges\n\nAn array of database changes.\n\nSee Also\nManipulating pending changes\nfunc add(pendingDatabaseChanges: [CKSyncEngine.PendingDatabaseChange])\nAdds the specified database changes to the state.\nenum CKSyncEngine.PendingDatabaseChange\nDescribes an unsent database modification.\nfunc add(pendingRecordZoneChanges: [CKSyncEngine.PendingRecordZoneChange])\nAdds the specified record zone changes to the state.\nfunc remove(pendingRecordZoneChanges: [CKSyncEngine.PendingRecordZoneChange])\nRemoves the specified record zone changes from the state.\nenum CKSyncEngine.PendingRecordZoneChange\nDescribes an unsent record modification."
  },
  {
    "title": "CKSubscription.ID | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksubscription/id",
    "html": "See Also\nAccessing the Subscription Metadata\nvar subscriptionID: CKSubscription.ID\nThe subscription’s unique identifier.\nvar subscriptionType: CKSubscription.SubscriptionType\nThe behavior that a subscription provides.\nenum CKSubscription.SubscriptionType\nConstants that identify a subscription’s behavior."
  },
  {
    "title": "acceptShareMetadata:completionHandler: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckcontainer/2113667-acceptsharemetadata",
    "html": "Parameters\nmetadata\n\nThe metadata of the share to accept.\n\ncompletionHandler\n\nThe handler to execute when the process finishes.\n\nDiscussion\n\nThe block doesn’t return a value and takes the following parameters:\n\nacceptedShare\n\nThe corresponding share, or nil if CloudKit can’t accept the metadata.\n\nerror\n\nAn error if a problem occurs, or nil if CloudKit successfully accepts the metadata.\n\nSee Also\nAccessing Container Metadata\n- fetchShareMetadataWithURL:completionHandler:\nFetches the share metadata for the specified share URL.\nCKAccountChangedNotification\nA notification that a container posts when the status of an iCloud account changes."
  },
  {
    "title": "CKRecord.Reference | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckrecord/reference",
    "html": "Overview\n\nA CKReference object creates a many-to-one relationship between records in your database. Each reference object stores information about the one record that is the target of the reference. You then save the reference object in the fields of one or more records to create a link from those records to the target. Both records must be in the same zone of the same database.\n\nReferences create a stronger relationship between records than just saving the ID of a record as a string. Specifically, you can use references to create an ownership model between two records. When the reference object’s action is CKRecord.ReferenceAction.deleteSelf, the target of the reference—that is, the record in the reference’s recordID property—becomes the owner of the source record. Deleting the target (owner) record deletes all its source records. The deletion of any owned records can trigger further deletions if those records are the owners of other records. If a record contains two or more CKReference objects with an action of CKRecord.ReferenceAction.deleteSelf, CloudKit deletes the record when it deletes any of the objects it references.\n\nNote\n\nIt is permissible to create circular owning references for a set of records.\n\nTo save multiple records that contain references between them, save the target records first or save all the records in one batch operation using CKModifyRecordsOperation.\n\nInteracting with Reference Objects\n\nYou use reference objects to create strong links between two records and to search for related fields. When you create new records, you create reference objects and assign them to fields of your records. The only other time you create reference objects is when you build a search predicate to search for related records.\n\nLinking to Another Record\n\nTo link records together and create a strong relationship between them, create a new CKReference object, initialize it with the owner record, and assign that reference object to a field of the owned record. When you design the relationships among your own records, make the owner the more important of two related records. The owner record rarely depends on any records that point to it. The owner record is also the one that you typically fetch first from the database.\n\nImportant\n\nThere is a hard limit to the number of references with a CKRecord.ReferenceAction.deleteSelf action that any one record can have. This limit is 750 references, and any attempt to exceed it results in an error from the server.\n\nThe figure below shows an example of a relationship between a to-do list record and a set of item records that represent individual items to complete. The to-do list is the primary record, or owner, in the relationship because it represents the entire to-do list, including all items on the list. As a result, each item record has a field that contains a CKReference object that points to the owning to-do list record.\n\nThe following code sample shows how to create the reference object for each item record and configure it to point at the list record:\n\nitemRecord[\"owningList\"] = CKReference(record: listRecord, action: .deleteSelf)\n\n\nAn ownership type of organization is useful even if one object doesn’t explicitly own another. Ownership helps establish the relationships between records and how you search for them in the database. Ownership doesn’t require the deletion of the owned records when you delete their owner record. You can prevent such deletions by specifying the CKRecord.ReferenceAction.none action when you create a CKReference object.\n\nNote\n\nWhen you’re creating a CKReference between two objects and you have both objects in memory, be sure to fetch the object on the receiving end of the relationship. This is due to the creation of the CKReference between the two objects altering the recordChangeTag of the receiving object on the server.\n\nSearching for Related Records\n\nWhen you want to find records for a single owner object, you create a CKReference object and use it to build your search predicate. When you use reference objects in search predicates, the search code looks only at the ID value in the reference object. It matches the ID in records of the specified type with the ID you provide in the CKReference object.\n\nThe code sample below shows how to use a reference object to construct a query for the records in the figure above. The listID variable is a placeholder for the record ID of the list with the items you want to retrieve. The predicate tells the query object to search the owningList field of the target records and compare the reference object there with the one in the recordToMatch variable. Executing the query operation object returns the matching records asynchronously to the completion block you provide.\n\n// Match item records with an owningList field that points to the specified list record.\nlet listID = listRecord.recordID\nlet recordToMatch = CKReference(recordID: listID, action: .deleteSelf)\nlet predicate = NSPredicate(format: \"owningList == %@\", recordToMatch)\n// Create the query object.\nlet query = CKQuery(recordType: \"Item\", predicate: predicate)\nlet queryOp = CKQueryOperation(query: query)\nqueryOp.queryCompletionBlock = { (cursor, error) in\n    // Process the results…\n}\n// Add the CKQueryOperation to a queue to execute it and process the results asynchronously.\n\nTopics\nCreating a Reference\ninit(recordID: CKRecord.ID, action: CKRecord.ReferenceAction)\nCreates a reference object that points to the record with the specified ID.\ninit(record: CKRecord, action: CKRecord.ReferenceAction)\nCreates a reference object that points to the specified record object.\ntypealias CKRecord.Reference.Action\nA type that represents additional actions that occur when deleting references.\nDeprecated\nGetting the Reference Attributes\nvar action: CKRecord.ReferenceAction\nThe ownership behavior for the records.\nvar recordID: CKRecord.ID\nThe ID of the referenced record.\nenum CKRecord.ReferenceAction\nConstants that indicate the behavior when deleting a referenced record.\nRelationships\nInherits From\nNSObject\nConforms To\nCKRecordValueProtocol\nNSCopying\nNSSecureCoding\nSendable\nSee Also\nSharing Records\nvar parent: CKRecord.Reference?\nA reference to the record’s parent record.\nvar share: CKRecord.Reference?\nA reference to the share object that determines the share status of the record.\nfunc setParent(CKRecord?)\nCreates and sets a reference object for a parent from its record.\nfunc setParent(CKRecord.ID?)\nCreates and sets a reference object for a parent from the parent’s record ID.\nenum CKRecord.SystemFieldKey\nPossible values for types of system field keys on records."
  },
  {
    "title": "CKAccountChangedNotification | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckaccountchangednotification",
    "html": "Discussion\n\nCreate an instance of CKContainer to receive this notification. The container posts the notification using an arbitrary queue. Use the accountStatusWithCompletionHandler: method to obtain the account’s status.\n\nSee Also\nAccessing Container Metadata\n- fetchShareMetadataWithURL:completionHandler:\nFetches the share metadata for the specified share URL.\n- acceptShareMetadata:completionHandler:\nAccepts the specified share metadata."
  },
  {
    "title": "CKOperationGroup.TransferSize.tensOfGigabytes | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckoperationgroup/transfersize/tensofgigabytes",
    "html": "See Also\nTransfer Sizes\ncase kilobytes\nA transfer size that represents 1 or more kilobytes.\ncase megabytes\nA transfer size that represents 1 or more megabytes.\ncase gigabytes\nA transfer size that represents 1 or more gigabytes.\ncase tensOfMegabytes\nA transfer size that represents tens of megabytes.\ncase hundredsOfMegabytes\nA transfer size that represents hundreds of megabytes.\ncase hundredsOfGigabytes\nA transfer size that represents hundreds of gigabytes.\ncase unknown\nAn unknown transfer size."
  },
  {
    "title": "containerWithIdentifier: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckcontainer/1399193-containerwithidentifier",
    "html": "Parameters\ncontainerIdentifier\n\nThe bundle identifier of the app with the container that you want to access. The bundle identifier must be in the app’s com.apple.developer.icloud-container-identifiers entitlement. This parameter must not be nil.\n\nDiscussion\n\nThe specified identifier must correspond to one of the ubiquity containers in the iCloud capabilities section of your Xcode project. Including the identifier with your app’s capabilities adds the corresponding entitlements to your app. To access your app’s default container, use the defaultContainer method instead.\n\nSee Also\nCreating Containers\n+ defaultContainer\nReturns the app’s default container."
  },
  {
    "title": "CKOperationGroup.TransferSize.megabytes | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckoperationgroup/transfersize/megabytes",
    "html": "See Also\nTransfer Sizes\ncase kilobytes\nA transfer size that represents 1 or more kilobytes.\ncase gigabytes\nA transfer size that represents 1 or more gigabytes.\ncase tensOfMegabytes\nA transfer size that represents tens of megabytes.\ncase tensOfGigabytes\nA transfer size that represents tens of gigabytes.\ncase hundredsOfMegabytes\nA transfer size that represents hundreds of megabytes.\ncase hundredsOfGigabytes\nA transfer size that represents hundreds of gigabytes.\ncase unknown\nAn unknown transfer size."
  },
  {
    "title": "CKOperationGroup.TransferSize.gigabytes | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckoperationgroup/transfersize/gigabytes",
    "html": "See Also\nTransfer Sizes\ncase kilobytes\nA transfer size that represents 1 or more kilobytes.\ncase megabytes\nA transfer size that represents 1 or more megabytes.\ncase tensOfMegabytes\nA transfer size that represents tens of megabytes.\ncase tensOfGigabytes\nA transfer size that represents tens of gigabytes.\ncase hundredsOfMegabytes\nA transfer size that represents hundreds of megabytes.\ncase hundredsOfGigabytes\nA transfer size that represents hundreds of gigabytes.\ncase unknown\nAn unknown transfer size."
  },
  {
    "title": "CKOperationGroup.TransferSize.tensOfMegabytes | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckoperationgroup/transfersize/tensofmegabytes",
    "html": "See Also\nTransfer Sizes\ncase kilobytes\nA transfer size that represents 1 or more kilobytes.\ncase megabytes\nA transfer size that represents 1 or more megabytes.\ncase gigabytes\nA transfer size that represents 1 or more gigabytes.\ncase tensOfGigabytes\nA transfer size that represents tens of gigabytes.\ncase hundredsOfMegabytes\nA transfer size that represents hundreds of megabytes.\ncase hundredsOfGigabytes\nA transfer size that represents hundreds of gigabytes.\ncase unknown\nAn unknown transfer size."
  },
  {
    "title": "CKOperationGroup.TransferSize.hundredsOfMegabytes | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckoperationgroup/transfersize/hundredsofmegabytes",
    "html": "See Also\nTransfer Sizes\ncase kilobytes\nA transfer size that represents 1 or more kilobytes.\ncase megabytes\nA transfer size that represents 1 or more megabytes.\ncase gigabytes\nA transfer size that represents 1 or more gigabytes.\ncase tensOfMegabytes\nA transfer size that represents tens of megabytes.\ncase tensOfGigabytes\nA transfer size that represents tens of gigabytes.\ncase hundredsOfGigabytes\nA transfer size that represents hundreds of gigabytes.\ncase unknown\nAn unknown transfer size."
  },
  {
    "title": "CKSyncEngine.Event.WillSendChanges | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncengine/event/willsendchanges",
    "html": "Topics\nAccessing the context\nlet context: CKSyncEngine.SendChangesContext\nThe context of the imminent send request.\nDebugging the event\nvar description: String\nA textual description of the event that’s suitable for logging.\nRelationships\nConforms To\nCustomStringConvertible\nSendable\nSee Also\nPending local changes\ncase willSendChanges(CKSyncEngine.Event.WillSendChanges)\nAn event indicating an imminent send of local changes.\ncase sentDatabaseChanges(CKSyncEngine.Event.SentDatabaseChanges)\nAn event indicating a sent batch of database changes.\nstruct CKSyncEngine.Event.SentDatabaseChanges\nA type that provides information about a sent batch of database changes.\ncase sentRecordZoneChanges(CKSyncEngine.Event.SentRecordZoneChanges)\nAn event indicating a sent batch of record zone changes.\nstruct CKSyncEngine.Event.SentRecordZoneChanges\nA type that provides information about a sent batch of record zone changes.\ncase didSendChanges(CKSyncEngine.Event.DidSendChanges)\nAn event that indicates a finished send operation.\nstruct CKSyncEngine.Event.DidSendChanges\nA type that provides information about a finished send operation."
  },
  {
    "title": "CKSyncEngine.Event.willSendChanges(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncengine/event/willsendchanges-qbr",
    "html": "Discussion\n\nA send operation may send all local changes, only changes to a specific set of records, or only those in a specific record zone. Use this case’s associated value to determine the scope for the current operation. For more information, see CKSyncEngine.SendChangesContext.\n\nSee Also\nPending local changes\nstruct CKSyncEngine.Event.WillSendChanges\nA type that provides information about an imminent send of local changes.\ncase sentDatabaseChanges(CKSyncEngine.Event.SentDatabaseChanges)\nAn event indicating a sent batch of database changes.\nstruct CKSyncEngine.Event.SentDatabaseChanges\nA type that provides information about a sent batch of database changes.\ncase sentRecordZoneChanges(CKSyncEngine.Event.SentRecordZoneChanges)\nAn event indicating a sent batch of record zone changes.\nstruct CKSyncEngine.Event.SentRecordZoneChanges\nA type that provides information about a sent batch of record zone changes.\ncase didSendChanges(CKSyncEngine.Event.DidSendChanges)\nAn event that indicates a finished send operation.\nstruct CKSyncEngine.Event.DidSendChanges\nA type that provides information about a finished send operation."
  },
  {
    "title": "CKSyncEngine.Event.FetchedRecordZoneChanges | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncengine/event/fetchedrecordzonechanges",
    "html": "Overview\n\nNote\n\nAlthough CloudKit doesn’t guarantee the order of fetched record zone changes, the typical order for both deletions and modifications is oldest to newest.\n\nTopics\nAccessing changes\nlet deletions: [CKDatabase.RecordZoneChange.Deletion]\nThe fetched record zone deletions.\nlet modifications: [CKDatabase.RecordZoneChange.Modification]\nThe fetched record zone modifications.\nDebugging the event\nvar description: String\nThe textual description of the event that’s suitable for logging.\nRelationships\nConforms To\nCustomStringConvertible\nSendable\nSee Also\nRemote record zone changes\ncase willFetchRecordZoneChanges(CKSyncEngine.Event.WillFetchRecordZoneChanges)\nAn event indicating an imminent fetch of changes in a record zone.\nstruct CKSyncEngine.Event.WillFetchRecordZoneChanges\nA type that provides information about an imminent fetch of changes in a record zone.\ncase fetchedRecordZoneChanges(CKSyncEngine.Event.FetchedRecordZoneChanges)\nAn event indicating there are fetched record zone changes to process.\ncase didFetchRecordZoneChanges(CKSyncEngine.Event.DidFetchRecordZoneChanges)\nAn event that indicates the record zone fetch is done.\nstruct CKSyncEngine.Event.DidFetchRecordZoneChanges\nA type that provides information about a finished record zone fetch."
  },
  {
    "title": "CKSyncEngine.Event.WillFetchRecordZoneChanges | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncengine/event/willfetchrecordzonechanges",
    "html": "Topics\nIdentifying the record zone\nlet zoneID: CKRecordZone.ID\nThe associated record zone’s unique identifier.\nDebugging the event\nvar description: String\nThe textual description of the event that’s suitable for logging.\nRelationships\nConforms To\nCustomStringConvertible\nSendable\nSee Also\nRemote record zone changes\ncase willFetchRecordZoneChanges(CKSyncEngine.Event.WillFetchRecordZoneChanges)\nAn event indicating an imminent fetch of changes in a record zone.\ncase fetchedRecordZoneChanges(CKSyncEngine.Event.FetchedRecordZoneChanges)\nAn event indicating there are fetched record zone changes to process.\nstruct CKSyncEngine.Event.FetchedRecordZoneChanges\nA type that provides information about fetched record zone changes.\ncase didFetchRecordZoneChanges(CKSyncEngine.Event.DidFetchRecordZoneChanges)\nAn event that indicates the record zone fetch is done.\nstruct CKSyncEngine.Event.DidFetchRecordZoneChanges\nA type that provides information about a finished record zone fetch."
  },
  {
    "title": "notificationChangedBlock | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckfetchnotificationchangesoperation/1515253-notificationchangedblock",
    "html": "Discussion\n\nThe block returns no value and takes the following parameter:\n\nnotification\n\nThe CKNotification object that corresponds to a push notification. The object that the system passes to this method is a concrete subclass of CKNotification that contains specific details about the source of the change.\n\nThe operation object executes this block once for each push notification. Each time the block executes, it executes serially with respect to the other progress blocks of the operation.\n\nIf you intend to use this block to process results, set it before executing the operation or submitting the operation object to a queue.\n\nSee Also\nProcessing the Notification Change Results\nvar moreComing: Bool\nA Boolean value that indicates whether more notifications are available.\nDeprecated\nvar fetchNotificationChangesCompletionBlock: ((CKServerChangeToken?, Error?) -> Void)?\nThe block that executes after the system fetches all requested notifications.\nDeprecated"
  },
  {
    "title": "CKOperationGroup.TransferSize.unknown | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckoperationgroup/transfersize/unknown",
    "html": "See Also\nTransfer Sizes\ncase kilobytes\nA transfer size that represents 1 or more kilobytes.\ncase megabytes\nA transfer size that represents 1 or more megabytes.\ncase gigabytes\nA transfer size that represents 1 or more gigabytes.\ncase tensOfMegabytes\nA transfer size that represents tens of megabytes.\ncase tensOfGigabytes\nA transfer size that represents tens of gigabytes.\ncase hundredsOfMegabytes\nA transfer size that represents hundreds of megabytes.\ncase hundredsOfGigabytes\nA transfer size that represents hundreds of gigabytes."
  },
  {
    "title": "init(recordZoneIDs:optionsByRecordZoneID:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckfetchrecordzonechangesoperation/1640509-init",
    "html": "Deprecated\n\nUse init(recordZoneIDs:configurationsByRecordZoneID:) instead.\n\nParameters\nrecordZoneIDs\n\nThe IDs of the record zones that you want to query for changes.\n\noptionsByRecordZoneID\n\nA dictionary that maps record zone IDs to their corresponding options. You can specify nil for this parameter.\n\nDiscussion\n\nCloudKit configures the operation for retrieving all of the record zones that you specify. If you want to reduce the amount of data that CloudKit returns, provide zone options for each record zone.\n\nSee Also\nDeprecated Methods\nclass CKFetchRecordZoneChangesOperation.ZoneOptions\nA configuration object that describes the information to fetch from a record zone.\nDeprecated"
  },
  {
    "title": "CKSyncEngine.Event.willFetchRecordZoneChanges(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncengine/event/willfetchrecordzonechanges-qbq",
    "html": "See Also\nRemote record zone changes\nstruct CKSyncEngine.Event.WillFetchRecordZoneChanges\nA type that provides information about an imminent fetch of changes in a record zone.\ncase fetchedRecordZoneChanges(CKSyncEngine.Event.FetchedRecordZoneChanges)\nAn event indicating there are fetched record zone changes to process.\nstruct CKSyncEngine.Event.FetchedRecordZoneChanges\nA type that provides information about fetched record zone changes.\ncase didFetchRecordZoneChanges(CKSyncEngine.Event.DidFetchRecordZoneChanges)\nAn event that indicates the record zone fetch is done.\nstruct CKSyncEngine.Event.DidFetchRecordZoneChanges\nA type that provides information about a finished record zone fetch."
  },
  {
    "title": "CKSyncEngine.Event.DidFetchChanges | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncengine/event/didfetchchanges",
    "html": "Topics\nDebugging the event\nvar description: String\nThe textual description of the event that’s suitable for logging.\nInstance Properties\nlet context: CKSyncEngine.FetchChangesContext\nBeta\nRelationships\nConforms To\nCustomStringConvertible\nSendable\nSee Also\nRemote database changes\ncase willFetchChanges(CKSyncEngine.Event.WillFetchChanges)\nAn event indicating an imminent database fetch.\nstruct CKSyncEngine.Event.WillFetchChanges\nA type that provides information about an imminent database fetch.\ncase fetchedDatabaseChanges(CKSyncEngine.Event.FetchedDatabaseChanges)\nAn event indicating there are fetched database changes to process.\nstruct CKSyncEngine.Event.FetchedDatabaseChanges\nA type that provides information about fetched database changes.\ncase didFetchChanges(CKSyncEngine.Event.DidFetchChanges)\nAn event that indicates the database fetch is done."
  },
  {
    "title": "database | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncengine/configuration/4155717-database",
    "html": "Discussion\n\nMultiple sync engines can run in the same process, each targeting a different database. For example, you may use one sync engine for a person’s private database and another for their shared database.\n\nImportant\n\nWhen using CloudKit’s production environment, don’t create multiple sync engines that target the same database. You can, however, do this in the development environment to help testing — for example, to simulate multiple devices syncing back and forth.\n\nSee Also\nManaging attributes\nvar automaticallySync: Bool\nA Boolean value that determines whether the engine syncs automatically.\nvar subscriptionID: CKSubscription.ID?\nThe subscription identifier for the associated database.\nvar stateSerialization: CKSyncEngine.State.Serialization?\nThe sync engine’s serialized state."
  },
  {
    "title": "alertLocalizationKey | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksubscription/notificationinfo/1514968-alertlocalizationkey",
    "html": "Discussion\n\nSet this property’s value to have the system display a localized string when it receives the corresponding push notification. The system uses the key to find the matching string in your app’s Localizable.string file. If you specify a value for this property, CloudKit ignores the alertBody property’s value.\n\nFor information about localizing string resources, see Internationalization and Localization Guide.\n\nSee Also\nAccessing the Notification Alert\nvar alertBody: String?\nThe text for the notification’s alert.\nvar alertLocalizationArgs: [CKRecord.FieldKey]?\nThe fields for building a notification’s alert.\nvar alertActionLocalizationKey: String?\nThe key that identifies the localized string for the notification’s action.\nvar alertLaunchImage: String?\nThe filename of an image to use as a launch image.\nvar soundName: String?\nThe filename of the sound file to play when a notification arrives."
  },
  {
    "title": "CKFetchRecordZoneChangesOperation.ZoneOptions | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckfetchrecordzonechangesoperation/zoneoptions",
    "html": "Deprecated\n\nUse CKFetchRecordZoneChangesOperation.ZoneConfiguration instead.\n\nTopics\nZone Change Options\nvar desiredKeys: [String]?\nThe fields to fetch for the requested records.\nvar previousServerChangeToken: CKServerChangeToken?\nThe token that identifies the starting point for retrieving changes.\nvar resultsLimit: Int\nThe maximum number of records to fetch from the record zone.\nRelationships\nInherits From\nNSObject\nConforms To\nNSCopying\nNSSecureCoding\nSee Also\nDeprecated Methods\ninit(recordZoneIDs: [CKRecordZone.ID], optionsByRecordZoneID: [CKRecordZone.ID : CKFetchRecordZoneChangesOperation.ZoneOptions]?)\nCreates an operation for fetching record zone changes.\nDeprecated"
  },
  {
    "title": "alertBody | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksubscription/notificationinfo/1515270-alertbody",
    "html": "Discussion\n\nSet this property’s value to have the system display the specified string when it receives the corresponding push notification. If you localize your app’s content, use the alertLocalizationKey property instead.\n\nSee Also\nAccessing the Notification Alert\nvar alertLocalizationKey: String?\nThe key that identifies the localized string for the notification’s alert.\nvar alertLocalizationArgs: [CKRecord.FieldKey]?\nThe fields for building a notification’s alert.\nvar alertActionLocalizationKey: String?\nThe key that identifies the localized string for the notification’s action.\nvar alertLaunchImage: String?\nThe filename of an image to use as a launch image.\nvar soundName: String?\nThe filename of the sound file to play when a notification arrives."
  },
  {
    "title": "optionsByRecordZoneID | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckfetchrecordzonechangesoperation/1640452-optionsbyrecordzoneid",
    "html": "Deprecated\n\nUse configurationsByRecordZoneID instead.\n\nDiscussion\n\nYou can associate each record zone ID with options that define what CloudKit fetches for that record zone. See CKFetchRecordZoneChangesOperation.ZoneOptions for more information."
  },
  {
    "title": "collapseIDKey | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksubscription/notificationinfo/2887430-collapseidkey",
    "html": "Discussion\n\nWhen CloudKit generates a push notification, it sets the notification’s apns-collapse-id header to this property’s value. The system uses this header to coalesce unseen notifications.\n\nSee Sending notification requests to APNs for more information about sending notifications using the Apple Push Notification service.\n\nSee Also\nGrouping Notifications\nvar category: String?\nThe name of the action group that corresponds to this notification."
  },
  {
    "title": "CKShare.ParticipantPermission.unknown | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckshare/participantpermission/unknown",
    "html": "See Also\nPermissions\ncase none\nThe participant doesn’t have any permissions for the share.\ncase readOnly\nThe participant has read-only permissions for the share.\ncase readWrite\nThe participant has read-and-write permissions for the share."
  },
  {
    "title": "shouldBadge | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksubscription/notificationinfo/1514996-shouldbadge",
    "html": "Discussion\n\nThe default value of this property is false. Set it to true to cause the system to increment the badge value whenever it receives the corresponding push notification."
  },
  {
    "title": "prepareShare(container:allowedSharingOptions:preparationHandler:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksharetransferrepresentation/exportedshare/4043456-prepareshare",
    "html": "Parameters\ncontainer\n\nThe CKContainer for the share.\n\nallowedSharingOptions\n\nThe CKAllowedSharingOptions. The standard option is the default.\n\npreparationHandler\n\nThe handler the system calls in your app to create a new CKShare.\n\nReturn Value\n\nThe CKShareTransferRepresentation.ExportedShare with the new CKShare.\n\nDiscussion\n\nUse this method when you want to share a collection of CKRecord objects, but don’t currently have a CKShare.\n\nWhen the system calls the preparationHandler, create a new CKShare with the appropriate root CKRecord or CKRecordZone.ID.\n\nAfter saving the share and all records to the server, return the resulting CKShare or throw an error if saving fails. When your app invokes the share sheet with a CKShare, the system prompts the user to start sharing.\n\nSee Also\nPreparing an exported share\nstatic func existing(CKShare, container: CKContainer, allowedSharingOptions: CKAllowedSharingOptions) -> CKShareTransferRepresentation<Item>.ExportedShare\nAllows the user to view or make modifications to the share settings."
  },
  {
    "title": "existing(_:container:allowedSharingOptions:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksharetransferrepresentation/exportedshare/4043455-existing",
    "html": "Parameters\nshare\n\nThe existing CKShare object.\n\ncontainer\n\nThe CKContainer for the share.\n\nallowedSharingOptions\n\nThe CKAllowedSharingOptions. The standard option is the default.\n\nReturn Value\n\nThe CKShareTransferRepresentation.ExportedShare with updated share settings.\n\nDiscussion\n\nUse this method when you have a share that’s already saved to the server.\n\nWhen the system invokes the share sheet with a CKShare registered with this method, the system allows the owner to make modifications to the share settings, or allows a participant to view the share settings.\n\nSee Also\nPreparing an exported share\nstatic func prepareShare(container: CKContainer, allowedSharingOptions: CKAllowedSharingOptions, preparationHandler: () -> CKShare) -> CKShareTransferRepresentation<Item>.ExportedShare\nCreates a share when the system calls the specified handler."
  },
  {
    "title": "transferRepresentation | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksharetransferrepresentation/exportedshare/4043457-transferrepresentation",
    "html": "Relationships\nFrom Protocol\nTransferable\nSee Also\nAccessing share attributes\ntypealias CKShareTransferRepresentation.ExportedShare.Representation\nThe type of the representation the system uses to import and export the item."
  },
  {
    "title": "category | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksubscription/notificationinfo/1515082-category",
    "html": "Discussion\n\nCategories allow you to present custom actions to the user on your push notifications. For more information, see UIMutableUserNotificationCategory.\n\nSee Also\nGrouping Notifications\nvar collapseIDKey: String?\nA value that the system uses to coalesce unseen push notifications."
  },
  {
    "title": "CKShareTransferRepresentation.ExportedShare.Representation | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksharetransferrepresentation/exportedshare/representation",
    "html": "Discussion\n\nSwift infers this type from the return value of the transferRepresentation property.\n\nRelationships\nFrom Protocol\nTransferable\nSee Also\nAccessing share attributes\nstatic var transferRepresentation: TransferRepresentation\nThe representation the system uses to import and export the item."
  },
  {
    "title": "CKSyncEngine.Event.AccountChange | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncengine/event/accountchange",
    "html": "Overview\n\nImportant\n\nWhen a sync engine detects a change to the device’s iCloud account, it resets its internal state, including unsaved changes to both records and record zones. Your app needs to handle this scenario gracefully.\n\nTopics\nUnderstanding the change\nlet changeType: CKSyncEngine.Event.AccountChange.ChangeType\nThe iCloud account’s change type.\nenum CKSyncEngine.Event.AccountChange.ChangeType\nDescribes a change to the device’s iCloud account.\nenum CKSyncEngineAccountChangeType\nDescribes a change to the device’s iCloud account.\nDebugging the event\nvar description: String\nA textual description of the event that’s suitable for logging.\nRelationships\nConforms To\nCustomStringConvertible\nSendable\nSee Also\nAccount changes\ncase accountChange(CKSyncEngine.Event.AccountChange)\nAn event indicating a change to the device’s iCloud account."
  },
  {
    "title": "init(notificationIDsToMarkRead:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckmarknotificationsreadoperation/1515228-init",
    "html": "Parameters\nnotificationIDs\n\nAn array of CKNotification.ID objects that represents the notifications you want to mark as read. Use this parameter to initialize the value in the notificationIDs property. If you specify nil, assign an appropriate value to the notificationIDs property before executing the operation.\n\nIf any objects in the array aren’t CKNotification.ID objects, this method raises an exception.\n\nReturn Value\n\nAn initialized operation object.\n\nDiscussion\n\nAssign a completion block to the markNotificationsReadCompletionBlock property to process the results.\n\nSee Also\nCreating a Mark Notifications Read Operation\ninit()\nCreates an empty operation.\nDeprecated"
  },
  {
    "title": "CKShare.ParticipantType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckshare/participanttype",
    "html": "Topics\nConstants\ncase owner\nThe participant is the share’s owner.\ncase privateUser\nThe participant has the private role.\ncase publicUser\nThe participant has the public role.\ncase unknown\nThe participant’s role is unknown.\ncase unknown\nAn unknown role.\ncase owner\nThe type of an owner.\ncase privateUser\nThe type of a private user.\ncase publicUser\nThe type of a public owner.\nRelationships\nConforms To\nSendable\nSee Also\nDeprecated Properties\nvar type: CKShare.ParticipantType\nThe participant type.\nDeprecated\ntypealias CKShare.Participant.ParticipantType\nA type that represents the role of the participant.\nDeprecated"
  },
  {
    "title": "object(forKey:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckrecordkeyvaluesetting/2976185-object",
    "html": "Required\n\nParameters\nkey\n\nThe string that identifies a field in the record. A key must consist of one or more alphanumeric characters and must start with a letter. CloudKit permits the use of underscores, but not spaces.\n\nReturn Value\n\nThe object for the specified key, or nil if no such key exists in the record.\n\nSee Also\nAccessing a Record's Fields\nsubscript(String) -> __CKRecordObjCValue?\nReturns the object that the record stores for the specified key.\n\nRequired Default implementations provided.\n\nfunc setObject(__CKRecordObjCValue?, forKey: String)\nStores an object in the record using the specified key.\n\nRequired\n\nfunc allKeys() -> [String]\nReturns an array of the record’s keys.\n\nRequired\n\nfunc changedKeys() -> [String]\nReturns an array of keys with recent changes to their values.\n\nRequired"
  },
  {
    "title": "userRecord | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckrecord/systemtype/3003380-userrecord",
    "html": "See Also\nTypes of System Records\nstatic let share: CKRecord.RecordType\nA string that represents the record type for CloudKit share records."
  },
  {
    "title": "share | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckrecord/systemtype/3003379-share",
    "html": "See Also\nTypes of System Records\nstatic let userRecord: CKRecord.RecordType\nA string that represents the record type for CloudKit user records."
  },
  {
    "title": "changedKeys() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckrecordkeyvaluesetting/2976184-changedkeys",
    "html": "Required\n\nReturn Value\n\nAn array of keys with changed values since downloading or saving the record. If there aren’t any changed keys, this method returns an empty array.\n\nSee Also\nAccessing a Record's Fields\nfunc object(forKey: String) -> __CKRecordObjCValue?\nReturns the object that the record stores for the specified key.\n\nRequired\n\nsubscript(String) -> __CKRecordObjCValue?\nReturns the object that the record stores for the specified key.\n\nRequired Default implementations provided.\n\nfunc setObject(__CKRecordObjCValue?, forKey: String)\nStores an object in the record using the specified key.\n\nRequired\n\nfunc allKeys() -> [String]\nReturns an array of the record’s keys.\n\nRequired"
  },
  {
    "title": "allKeys() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckrecordkeyvaluesetting/2976183-allkeys",
    "html": "Required\n\nReturn Value\n\nAn array of keys, or an empty array if the record doesn’t contain any keys.\n\nSee Also\nAccessing a Record's Fields\nfunc object(forKey: String) -> __CKRecordObjCValue?\nReturns the object that the record stores for the specified key.\n\nRequired\n\nsubscript(String) -> __CKRecordObjCValue?\nReturns the object that the record stores for the specified key.\n\nRequired Default implementations provided.\n\nfunc setObject(__CKRecordObjCValue?, forKey: String)\nStores an object in the record using the specified key.\n\nRequired\n\nfunc changedKeys() -> [String]\nReturns an array of keys with recent changes to their values.\n\nRequired"
  },
  {
    "title": "CKSyncEngine.Event.SentDatabaseChanges | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncengine/event/sentdatabasechanges",
    "html": "Topics\nAccessing successful changes\nlet deletedZoneIDs: [CKRecordZone.ID]\nThe unique identifiers of the deleted record zones.\nlet savedZones: [CKRecordZone]\nThe modified record zones.\nAccessing failed changes\nlet failedZoneDeletes: [CKRecordZone.ID : CKError]\nThe unique identifiers of the record zones CloudKit is unable to delete, and the reasons why.\nlet failedZoneSaves: [CKSyncEngine.Event.SentDatabaseChanges.FailedZoneSave]\nThe record zones that CloudKit is unable to modify.\nstruct CKSyncEngine.Event.SentDatabaseChanges.FailedZoneSave\nA type that describes an unsuccessful attempt to modify a single record zone.\nDebugging the event\nvar description: String\nA textual description of the event that’s suitable for logging.\nRelationships\nConforms To\nCustomStringConvertible\nSendable\nSee Also\nPending local changes\ncase willSendChanges(CKSyncEngine.Event.WillSendChanges)\nAn event indicating an imminent send of local changes.\nstruct CKSyncEngine.Event.WillSendChanges\nA type that provides information about an imminent send of local changes.\ncase sentDatabaseChanges(CKSyncEngine.Event.SentDatabaseChanges)\nAn event indicating a sent batch of database changes.\ncase sentRecordZoneChanges(CKSyncEngine.Event.SentRecordZoneChanges)\nAn event indicating a sent batch of record zone changes.\nstruct CKSyncEngine.Event.SentRecordZoneChanges\nA type that provides information about a sent batch of record zone changes.\ncase didSendChanges(CKSyncEngine.Event.DidSendChanges)\nAn event that indicates a finished send operation.\nstruct CKSyncEngine.Event.DidSendChanges\nA type that provides information about a finished send operation."
  },
  {
    "title": "CKSyncEngine.Event.SentRecordZoneChanges | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncengine/event/sentrecordzonechanges",
    "html": "Topics\nAccessing successful changes\nlet deletedRecordIDs: [CKRecord.ID]\nThe unique identifiers of the deleted records.\nlet savedRecords: [CKRecord]\nThe modified records.\nAccessing failed changes\nlet failedRecordDeletes: [CKRecord.ID : CKError]\nThe unique identifiers of the records CloudKit is unable to delete, and the reasons why.\nlet failedRecordSaves: [CKSyncEngine.Event.SentRecordZoneChanges.FailedRecordSave]\nThe records that CloudKit is unable to modify.\nstruct CKSyncEngine.Event.SentRecordZoneChanges.FailedRecordSave\nA type that describes an unsuccessful attempt to modify a single record.\nDebugging the event\nvar description: String\nA textual description of the event that’s suitable for logging.\nRelationships\nConforms To\nCustomStringConvertible\nSendable\nSee Also\nPending local changes\ncase willSendChanges(CKSyncEngine.Event.WillSendChanges)\nAn event indicating an imminent send of local changes.\nstruct CKSyncEngine.Event.WillSendChanges\nA type that provides information about an imminent send of local changes.\ncase sentDatabaseChanges(CKSyncEngine.Event.SentDatabaseChanges)\nAn event indicating a sent batch of database changes.\nstruct CKSyncEngine.Event.SentDatabaseChanges\nA type that provides information about a sent batch of database changes.\ncase sentRecordZoneChanges(CKSyncEngine.Event.SentRecordZoneChanges)\nAn event indicating a sent batch of record zone changes.\ncase didSendChanges(CKSyncEngine.Event.DidSendChanges)\nAn event that indicates a finished send operation.\nstruct CKSyncEngine.Event.DidSendChanges\nA type that provides information about a finished send operation."
  },
  {
    "title": "CKSyncEngine.Event.DidSendChanges | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncengine/event/didsendchanges",
    "html": "Topics\nAccessing the context\nlet context: CKSyncEngine.SendChangesContext\nThe context of the finished send request.\nDebugging the event\nvar description: String\nA textual description of the event that’s suitable for logging.\nRelationships\nConforms To\nCustomStringConvertible\nSendable\nSee Also\nPending local changes\ncase willSendChanges(CKSyncEngine.Event.WillSendChanges)\nAn event indicating an imminent send of local changes.\nstruct CKSyncEngine.Event.WillSendChanges\nA type that provides information about an imminent send of local changes.\ncase sentDatabaseChanges(CKSyncEngine.Event.SentDatabaseChanges)\nAn event indicating a sent batch of database changes.\nstruct CKSyncEngine.Event.SentDatabaseChanges\nA type that provides information about a sent batch of database changes.\ncase sentRecordZoneChanges(CKSyncEngine.Event.SentRecordZoneChanges)\nAn event indicating a sent batch of record zone changes.\nstruct CKSyncEngine.Event.SentRecordZoneChanges\nA type that provides information about a sent batch of record zone changes.\ncase didSendChanges(CKSyncEngine.Event.DidSendChanges)\nAn event that indicates a finished send operation."
  },
  {
    "title": "CKSyncEngine.Event.didSendChanges(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncengine/event/didsendchanges-qbj",
    "html": "See Also\nPending local changes\ncase willSendChanges(CKSyncEngine.Event.WillSendChanges)\nAn event indicating an imminent send of local changes.\nstruct CKSyncEngine.Event.WillSendChanges\nA type that provides information about an imminent send of local changes.\ncase sentDatabaseChanges(CKSyncEngine.Event.SentDatabaseChanges)\nAn event indicating a sent batch of database changes.\nstruct CKSyncEngine.Event.SentDatabaseChanges\nA type that provides information about a sent batch of database changes.\ncase sentRecordZoneChanges(CKSyncEngine.Event.SentRecordZoneChanges)\nAn event indicating a sent batch of record zone changes.\nstruct CKSyncEngine.Event.SentRecordZoneChanges\nA type that provides information about a sent batch of record zone changes.\nstruct CKSyncEngine.Event.DidSendChanges\nA type that provides information about a finished send operation."
  },
  {
    "title": "next() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckrecordkeyvalueiterator/3003391-next",
    "html": "Return Value\n\nThe next key-value pair from the record, or nil if there are no more keys.\n\nRelationships\nFrom Protocol\nIteratorProtocol\nSee Also\nIterating Over a Record's Fields\ntypealias CKRecordKeyValueIterator.Element\nA data type that represents a single key-value pair from a record."
  },
  {
    "title": "CKRecordKeyValueIterator.Element | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckrecordkeyvalueiterator/element",
    "html": "Relationships\nFrom Protocol\nIteratorProtocol\nSee Also\nIterating Over a Record's Fields\nfunc next() -> (CKRecord.FieldKey, CKRecordValueProtocol)?\nAdvances the iterator and returns the next key-value pair from the record."
  },
  {
    "title": "CKSyncEngine.Event.stateUpdate(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncengine/event/stateupdate-qbo",
    "html": "See Also\nState updates\nstruct CKSyncEngine.Event.StateUpdate\nA type that provides information about an update to the sync engine’s state."
  },
  {
    "title": "stateSerialization | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncengine/event/stateupdate/4155754-stateserialization",
    "html": "Discussion\n\nImportant\n\nAlways persist the most recent state to disk alongside your app data. The sync engine requires you to provide it with the most recent serialized state at initialization, and it’s your responsibility to make sure the state is available across app launches."
  },
  {
    "title": "description | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncengine/event/4180493-description",
    "html": "Relationships\nFrom Protocol\nCustomStringConvertible"
  },
  {
    "title": "operationGroup | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncengine/sendchangesoptions/4155803-operationgroup",
    "html": "Discussion\n\nTip\n\nProviding a specific operation group helps you to identify and analyze the telemetry of send operations in CloudKit Console.\n\nThe default value is nil.\n\nSee Also\nManaging attributes\nvar description: String\nA textual description of the options that’s suitable for logging."
  },
  {
    "title": "CKSyncEngine.SendChangesOptions.Scope | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncengine/sendchangesoptions/scope",
    "html": "Topics\nEnumeration Cases\ncase all\ncase allExcluding([CKRecordZone.ID])\ncase recordIDs([CKRecord.ID])\ncase zoneIDs([CKRecordZone.ID])\nInstance Properties\nvar description: String\nInstance Methods\nfunc contains(CKRecord.ID) -> Bool\nfunc contains(CKSyncEngine.PendingRecordZoneChange) -> Bool\nOperator Functions\nstatic func != (CKSyncEngine.SendChangesOptions.Scope, CKSyncEngine.SendChangesOptions.Scope) -> Bool\nstatic func == (CKSyncEngine.SendChangesOptions.Scope, CKSyncEngine.SendChangesOptions.Scope) -> Bool\nRelationships\nConforms To\nCustomStringConvertible\nSendable"
  },
  {
    "title": "initWithRecordsToSave:recordIDsToDelete: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckmodifyrecordsoperation/1447464-initwithrecordstosave",
    "html": "Parameters\nrecords\n\nThe records to save. You can specify nil for this parameter.\n\nrecordIDs\n\nThe IDs of the records to delete. You can specify nil for this parameter.\n\nDiscussion\n\nThe records that you intend to save or delete must all reside in the same database, which you specify when you configure the operation. If your app saves a record in a database that doesn’t exist, the server creates the database.\n\nSee Also\nCreating a Modify Record Operation\n- init\nCreates an empty modify records operation."
  },
  {
    "title": "nextFetchChangesOptions(_:syncEngine:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncenginedelegate/4280098-nextfetchchangesoptions",
    "html": "Required Default implementation provided.\n\nDefault Implementations\nCKSyncEngineDelegate Implementations\nfunc nextFetchChangesOptions(CKSyncEngine.FetchChangesContext, syncEngine: CKSyncEngine) -> CKSyncEngine.FetchChangesOptions"
  },
  {
    "title": "CKSyncEngine.RecordZoneChangeBatch | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncengine/recordzonechangebatch",
    "html": "Topics\nCreating a batch\ninit?(pendingChanges: [CKSyncEngine.PendingRecordZoneChange], recordProvider: (CKRecord.ID) -> (CKRecord?))\nCreates a batch of records to modify using the provided record zone changes.\nenum CKSyncEngine.PendingRecordZoneChange\nDescribes an unsent record modification.\ninit(recordsToSave: [CKRecord], recordIDsToDelete: [CKRecord.ID], atomicByZone: Bool)\nCreates a batch of records to modify.\nManaging atomicity\nvar atomicByZone: Bool\nA Boolean value that determines whether CloudKit modifies records atomically by record zone.\nManaging the records\nvar recordIDsToDelete: [CKRecord.ID]\nThe record identifiers of the records to delete.\nvar recordsToSave: [CKRecord]\nThe records to save.\nDebugging the batch\nvar description: String\nThe textual description of the batch that’s suitable for logging.\nRelationships\nConforms To\nCustomStringConvertible\nSendable\nSee Also\nSending changes\nfunc nextRecordZoneChangeBatch(CKSyncEngine.SendChangesContext, syncEngine: CKSyncEngine) -> CKSyncEngine.RecordZoneChangeBatch?\nAsks the delegate to provide the next set of record changes to send to the server.\n\nRequired\n\nstruct CKSyncEngine.SendChangesContext\nA type that describes a single attempt to send changes to the iCloud servers."
  },
  {
    "title": "CKSyncEngine.Event | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncengine/event",
    "html": "Overview\n\nImportant\n\nYou don’t create instances of this type manually. Instead, the sync engine provides them to your app’s delegate during sync operations.\n\nTopics\nAccount changes\ncase accountChange(CKSyncEngine.Event.AccountChange)\nAn event indicating a change to the device’s iCloud account.\nstruct CKSyncEngine.Event.AccountChange\nA type that provides information about a change to the device’s iCloud account.\nRemote database changes\ncase willFetchChanges(CKSyncEngine.Event.WillFetchChanges)\nAn event indicating an imminent database fetch.\nstruct CKSyncEngine.Event.WillFetchChanges\nA type that provides information about an imminent database fetch.\ncase fetchedDatabaseChanges(CKSyncEngine.Event.FetchedDatabaseChanges)\nAn event indicating there are fetched database changes to process.\nstruct CKSyncEngine.Event.FetchedDatabaseChanges\nA type that provides information about fetched database changes.\ncase didFetchChanges(CKSyncEngine.Event.DidFetchChanges)\nAn event that indicates the database fetch is done.\nstruct CKSyncEngine.Event.DidFetchChanges\nA type that provides information about a finished database fetch.\nRemote record zone changes\ncase willFetchRecordZoneChanges(CKSyncEngine.Event.WillFetchRecordZoneChanges)\nAn event indicating an imminent fetch of changes in a record zone.\nstruct CKSyncEngine.Event.WillFetchRecordZoneChanges\nA type that provides information about an imminent fetch of changes in a record zone.\ncase fetchedRecordZoneChanges(CKSyncEngine.Event.FetchedRecordZoneChanges)\nAn event indicating there are fetched record zone changes to process.\nstruct CKSyncEngine.Event.FetchedRecordZoneChanges\nA type that provides information about fetched record zone changes.\ncase didFetchRecordZoneChanges(CKSyncEngine.Event.DidFetchRecordZoneChanges)\nAn event that indicates the record zone fetch is done.\nstruct CKSyncEngine.Event.DidFetchRecordZoneChanges\nA type that provides information about a finished record zone fetch.\nPending local changes\ncase willSendChanges(CKSyncEngine.Event.WillSendChanges)\nAn event indicating an imminent send of local changes.\nstruct CKSyncEngine.Event.WillSendChanges\nA type that provides information about an imminent send of local changes.\ncase sentDatabaseChanges(CKSyncEngine.Event.SentDatabaseChanges)\nAn event indicating a sent batch of database changes.\nstruct CKSyncEngine.Event.SentDatabaseChanges\nA type that provides information about a sent batch of database changes.\ncase sentRecordZoneChanges(CKSyncEngine.Event.SentRecordZoneChanges)\nAn event indicating a sent batch of record zone changes.\nstruct CKSyncEngine.Event.SentRecordZoneChanges\nA type that provides information about a sent batch of record zone changes.\ncase didSendChanges(CKSyncEngine.Event.DidSendChanges)\nAn event that indicates a finished send operation.\nstruct CKSyncEngine.Event.DidSendChanges\nA type that provides information about a finished send operation.\nState updates\ncase stateUpdate(CKSyncEngine.Event.StateUpdate)\nAn event indicating an update to the sync engine’s state.\nstruct CKSyncEngine.Event.StateUpdate\nA type that provides information about an update to the sync engine’s state.\nDebugging the event\nvar description: String\nA textual description of the event that’s suitable for logging.\nRelationships\nConforms To\nCustomStringConvertible\nSendable\nSee Also\nHandling sync events\nfunc handleEvent(CKSyncEngine.Event, syncEngine: CKSyncEngine)\nTells the delegate to handle the specified sync event.\n\nRequired\n\nenum CKSyncEngineEventType\nDescribes an event that occurs during a sync operation."
  },
  {
    "title": "CKSyncEngine.SendChangesContext | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncengine/sendchangescontext",
    "html": "Overview\n\nA sync engine has two ways to send changes to iCloud — periodically, in cooperation with the system scheduler, and manually, whenever your app invokes the sendChanges(_:) method. This type provides information about a single attempt to send changes that includes both the reason for the attempt and any additional options in use by the attempt.\n\nTopics\nAccessing specific attributes\nlet reason: CKSyncEngine.SyncReason\nThe reason for the send operation.\nenum CKSyncEngine.SyncReason\nDescribes the reason for a sync operation.\nenum CKSyncEngineSyncReason\nDescribes the reason for a sync operation.\nlet options: CKSyncEngine.SendChangesOptions\nThe additional options for the send operation.\nstruct CKSyncEngine.SendChangesOptions\nA set of options to use with a send operation.\nDebugging the context\nvar description: String\nThe textual description of the context that’s suitable for logging.\nRelationships\nConforms To\nCustomStringConvertible\nSendable\nSee Also\nSending changes\nfunc nextRecordZoneChangeBatch(CKSyncEngine.SendChangesContext, syncEngine: CKSyncEngine) -> CKSyncEngine.RecordZoneChangeBatch?\nAsks the delegate to provide the next set of record changes to send to the server.\n\nRequired\n\nstruct CKSyncEngine.RecordZoneChangeBatch\nA type that contains the record changes for a single send operation."
  },
  {
    "title": "description | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncengine/configuration/4180479-description",
    "html": "Relationships\nFrom Protocol\nCustomStringConvertible"
  },
  {
    "title": "isLongLived | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckoperation/configuration/2866225-islonglived",
    "html": "See Also\nPreparing a Configuration\nvar allowsCellularAccess: Bool\nA Boolean value that indicates whether operations that use this configuration can send data over the cellular network.\nvar container: CKContainer?\nThe configuration’s container.\nvar qualityOfService: QualityOfService\nThe priority that the system uses when it allocates resources to the operations that use this configuration.\nvar timeoutIntervalForRequest: TimeInterval\nThe maximum amount of time that a request can take.\nvar timeoutIntervalForResource: TimeInterval\nThe maximum amount of time that a resource request can take."
  },
  {
    "title": "stateSerialization | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncengine/configuration/4155720-stateserialization",
    "html": "Discussion\n\nThis property returns the value you specify for the initializer’s stateSerialization parameter. If you choose to set this property after initialization, assign the state from the most recent CKSyncEngine.Event.stateUpdate(_:) event handled by your delegate. However, If this is the first initialization of the associated sync engine, specify nil instead.\n\nThe default value is nil.\n\nSee Also\nManaging attributes\nvar automaticallySync: Bool\nA Boolean value that determines whether the engine syncs automatically.\nvar database: CKDatabase\nThe associated database.\nvar subscriptionID: CKSubscription.ID?\nThe subscription identifier for the associated database."
  },
  {
    "title": "timeoutIntervalForRequest | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckoperation/1639384-timeoutintervalforrequest",
    "html": "Deprecated\n\nUse timeoutIntervalForRequest instead.\n\nDiscussion\n\nThis property determines the request timeout interval for the operation, which controls how long, in seconds, the operation waits for additional data to arrive before stopping. The timer for this value resets whenever new data arrives. When the timer reaches the interval without receiving any new data, it triggers a timeout.\n\nThe default value is 60.\n\nSee Also\nDeprecated Properties\nvar allowsCellularAccess: Bool\nA Boolean value that indicates whether the operation can send data over the cellular network.\nDeprecated\nvar container: CKContainer?\nThe operation’s container.\nDeprecated\nvar isLongLived: Bool\nA Boolean value that indicates whether the operation is long-lived.\nDeprecated\nvar timeoutIntervalForResource: TimeInterval\nThe maximum amount of time that a resource request can use.\nDeprecated"
  },
  {
    "title": "container | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckoperation/1452364-container",
    "html": "Deprecated\n\nUse container instead.\n\nDiscussion\n\nThe container defines where the operation executes. The add(_:) method of the CKContainer and CKDatabase classes implicitly set this property to their container.\n\nIf you execute the operation yourself, either directly or using a custom operation queue, set the value of this property explicitly. If the value is nil when you execute an operation, the operation implicitly executes in your app’s default container.\n\nSee Also\nDeprecated Properties\nvar allowsCellularAccess: Bool\nA Boolean value that indicates whether the operation can send data over the cellular network.\nDeprecated\nvar isLongLived: Bool\nA Boolean value that indicates whether the operation is long-lived.\nDeprecated\nvar timeoutIntervalForRequest: TimeInterval\nThe timeout interval when waiting for additional data.\nDeprecated\nvar timeoutIntervalForResource: TimeInterval\nThe maximum amount of time that a resource request can use.\nDeprecated"
  },
  {
    "title": "subscriptionID | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncengine/configuration/4155721-subscriptionid",
    "html": "Discussion\n\nBy default, a sync engine attempts to discover an existing subscription for the synced database. If one isn’t found, the engine creates an internal CKDatabaseSubscription and uses that to receive notifications about remote record changes.\n\nIf you require the sync engine to use a specific database subscription, assign that subscription’s identifier to this property. Doing so enables your app to be backwards compatible if you’re migrating to CKSyncEngine from a custom CloudKit sync implementation.\n\nThe default value is nil.\n\nSee Also\nManaging attributes\nvar automaticallySync: Bool\nA Boolean value that determines whether the engine syncs automatically.\nvar database: CKDatabase\nThe associated database.\nvar stateSerialization: CKSyncEngine.State.Serialization?\nThe sync engine’s serialized state."
  },
  {
    "title": "allowsCellularAccess | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckoperation/1452372-allowscellularaccess",
    "html": "Deprecated\n\nUse allowsCellularAccess instead.\n\nDiscussion\n\nWhen you send or receive many records, or when you send records with large assets, you might set this property to false to avoid consuming too much of the user’s cellular data bandwidth. The default value is true.\n\nWhen this property is false, the operation fails if Wi-Fi isn’t available.\n\nSee Also\nDeprecated Properties\nvar container: CKContainer?\nThe operation’s container.\nDeprecated\nvar isLongLived: Bool\nA Boolean value that indicates whether the operation is long-lived.\nDeprecated\nvar timeoutIntervalForRequest: TimeInterval\nThe timeout interval when waiting for additional data.\nDeprecated\nvar timeoutIntervalForResource: TimeInterval\nThe maximum amount of time that a resource request can use.\nDeprecated"
  },
  {
    "title": "CKSubscription.SubscriptionType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksubscription/subscriptiontype",
    "html": "Topics\nSubscription Types\ncase query\nA constant that indicates the subscription is query-based.\ncase database\nA constant that indicates the subscription is database-based.\ncase recordZone\nA constant that indicates the subscription is zone-based.\nRelationships\nConforms To\nSendable\nSee Also\nAccessing the Subscription Metadata\nvar subscriptionID: CKSubscription.ID\nThe subscription’s unique identifier.\ntypealias CKSubscription.ID\nA type that represents a subscription’s identifier.\nvar subscriptionType: CKSubscription.SubscriptionType\nThe behavior that a subscription provides."
  },
  {
    "title": "pendingRecordZoneChanges | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncengine/state/4183751-pendingrecordzonechanges",
    "html": "Discussion\n\nThis array contains any pending record zone changes to send to the iCloud servers in a subsequent send operation (scheduled or manual). After the sync engine sends those changes, your app’s sync delegate receives an event of type CKSyncEngine.Event.SentRecordZoneChanges.\n\nUse the add(pendingRecordZoneChanges:) and remove(pendingRecordZoneChanges:) methods to modify the array’s contents.\n\nSee Also\nAccessing pending changes\nvar hasPendingUntrackedChanges: Bool\nA Boolean value that indicates whether there are pending changes that the sync engine is unaware of.\nvar pendingDatabaseChanges: [CKSyncEngine.PendingDatabaseChange]\nThe database changes that the sync engine has yet to send to the iCloud servers."
  },
  {
    "title": "pendingDatabaseChanges | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncengine/state/4183750-pendingdatabasechanges",
    "html": "Discussion\n\nThis array contains any pending database changes to send to the iCloud servers in a subsequent send operation (scheduled or manual). After the sync engine sends those changes, your app’s sync delegate receives an event of type CKSyncEngine.Event.SentDatabaseChanges.\n\nUse the add(pendingDatabaseChanges:) and remove(pendingDatabaseChanges:) methods to modify the array’s contents.\n\nSee Also\nAccessing pending changes\nvar hasPendingUntrackedChanges: Bool\nA Boolean value that indicates whether there are pending changes that the sync engine is unaware of.\nvar pendingRecordZoneChanges: [CKSyncEngine.PendingRecordZoneChange]\nThe record zone changes that the sync engine has yet to send to the iCloud servers."
  },
  {
    "title": "hasPendingUntrackedChanges | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncengine/state/4200328-haspendinguntrackedchanges",
    "html": "Discussion\n\nUse this property to inform the sync engine that there are pending changes other than those available in pendingRecordZoneChanges. After you set this property, the sync engine automatically schedules a send operation and, when that operation executes, asks your delegate to provide those changes by invoking the nextRecordZoneChangeBatch(_:syncEngine:) method.\n\nUsing this property is optional and is necessary only if you track pending changes manually, outside of the sync engine’s state.\n\nSee Also\nAccessing pending changes\nvar pendingDatabaseChanges: [CKSyncEngine.PendingDatabaseChange]\nThe database changes that the sync engine has yet to send to the iCloud servers.\nvar pendingRecordZoneChanges: [CKSyncEngine.PendingRecordZoneChange]\nThe record zone changes that the sync engine has yet to send to the iCloud servers."
  },
  {
    "title": "databaseWithDatabaseScope: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckcontainer/1640475-databasewithdatabasescope",
    "html": "Parameters\ndatabaseScope\n\nThe database’s scope. See CKDatabaseScope for the available options.\n\nSee Also\nGetting the Public and Private Databases\nprivateCloudDatabase\nThe user’s private database.\npublicCloudDatabase\nThe app’s public database.\nsharedCloudDatabase\nThe database that contains shared data."
  },
  {
    "title": "CKOperationGroup.TransferSize.kilobytes | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckoperationgroup/transfersize/kilobytes",
    "html": "See Also\nTransfer Sizes\ncase megabytes\nA transfer size that represents 1 or more megabytes.\ncase gigabytes\nA transfer size that represents 1 or more gigabytes.\ncase tensOfMegabytes\nA transfer size that represents tens of megabytes.\ncase tensOfGigabytes\nA transfer size that represents tens of gigabytes.\ncase hundredsOfMegabytes\nA transfer size that represents hundreds of megabytes.\ncase hundredsOfGigabytes\nA transfer size that represents hundreds of gigabytes.\ncase unknown\nAn unknown transfer size."
  },
  {
    "title": "defaultContainer | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckcontainer/1399189-defaultcontainer",
    "html": "Discussion\n\nUse this method to retrieve your app’s default container. This is the one you typically use to store your app’s data. If you want the container for a different app, create a container using the containerWithIdentifier: method.\n\nDuring development, the container uses the development environment. When you release your app, the container uses the production environment.\n\nSee Also\nCreating Containers\n+ containerWithIdentifier:\nCreates a container for the specified identifier."
  },
  {
    "title": "CKSyncEngine.Event.DidFetchRecordZoneChanges | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncengine/event/didfetchrecordzonechanges",
    "html": "Topics\nIdentifying the record zone\nlet zoneID: CKRecordZone.ID\nThe associated record zone’s unique identifier.\nHandling errors\nlet error: CKError?\nAn error that describes the cause of a failed fetch operation.\nDebugging the event\nvar description: String\nThe textual description of the event that’s suitable for logging.\nRelationships\nConforms To\nCustomStringConvertible\nSendable\nSee Also\nRemote record zone changes\ncase willFetchRecordZoneChanges(CKSyncEngine.Event.WillFetchRecordZoneChanges)\nAn event indicating an imminent fetch of changes in a record zone.\nstruct CKSyncEngine.Event.WillFetchRecordZoneChanges\nA type that provides information about an imminent fetch of changes in a record zone.\ncase fetchedRecordZoneChanges(CKSyncEngine.Event.FetchedRecordZoneChanges)\nAn event indicating there are fetched record zone changes to process.\nstruct CKSyncEngine.Event.FetchedRecordZoneChanges\nA type that provides information about fetched record zone changes.\ncase didFetchRecordZoneChanges(CKSyncEngine.Event.DidFetchRecordZoneChanges)\nAn event that indicates the record zone fetch is done."
  },
  {
    "title": "CKSyncEngine.Event.didFetchRecordZoneChanges(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncengine/event/didfetchrecordzonechanges-qbi",
    "html": "See Also\nRemote record zone changes\ncase willFetchRecordZoneChanges(CKSyncEngine.Event.WillFetchRecordZoneChanges)\nAn event indicating an imminent fetch of changes in a record zone.\nstruct CKSyncEngine.Event.WillFetchRecordZoneChanges\nA type that provides information about an imminent fetch of changes in a record zone.\ncase fetchedRecordZoneChanges(CKSyncEngine.Event.FetchedRecordZoneChanges)\nAn event indicating there are fetched record zone changes to process.\nstruct CKSyncEngine.Event.FetchedRecordZoneChanges\nA type that provides information about fetched record zone changes.\nstruct CKSyncEngine.Event.DidFetchRecordZoneChanges\nA type that provides information about a finished record zone fetch."
  },
  {
    "title": "subscriptionIDs | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckfetchsubscriptionsoperation/3003596-subscriptionids",
    "html": "Discussion\n\nUse this property to view or change the IDs of the subscriptions to fetch. Each element of the array is a string that represents the ID of a subscription. If you intend to modify this property’s value, do so before you execute the operation or submit it to a queue.\n\nIf you use the fetchAllSubscriptionsOperation() method to create the operation, CloudKit ignores this property’s value and sets it to nil."
  },
  {
    "title": "recordZoneID | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckfetchrecordchangesoperation/1515018-recordzoneid",
    "html": "Discussion\n\nTypically, you set the value of this property when you initialize the operation object. If you intend to change the record zone, update the value before executing the operation or submitting it to a queue.\n\nSee Also\nConfiguring the Fetch Record Changes Operation\nvar previousServerChangeToken: CKServerChangeToken?\nThe token that identifies the starting point for retrieving changes.\nDeprecated\nvar desiredKeys: [String]?\nThe fields to fetch for the requested records.\nDeprecated\nvar resultsLimit: Int\nThe maximum number of changed records to report with this operation object.\nDeprecated\nvar moreComing: Bool\nA Boolean value that indicates whether more results are available.\nDeprecated"
  },
  {
    "title": "init() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckfetchrecordchangesoperation/2715828-init",
    "html": "See Also\nCreating the Fetch Record Changes Operation\ninit(recordZoneID: CKRecordZone.ID, previousServerChangeToken: CKServerChangeToken?)\nCreates an operation for fetching changes in the specified record zone.\nDeprecated"
  },
  {
    "title": "previousServerChangeToken | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckfetchrecordchangesoperation/1515209-previousserverchangetoken",
    "html": "Discussion\n\nEach fetch request returns a unique token in addition to any changes. The token passes as a parameter to your fetchRecordChangesCompletionBlock handler. During a subsequent fetch request, providing the previous token causes the server to return only the changes that occur after the previous fetch request. Tokens are opaque data objects that you can write to disk safely and reuse later.\n\nTypically, you set the value of this property when you initialize the operation object. If you intend to change the record zone, update the value of the property before executing the operation or submitting it to a queue.\n\nSee Also\nConfiguring the Fetch Record Changes Operation\nvar recordZoneID: CKRecordZone.ID?\nThe ID of the record zone with the records you want to fetch.\nDeprecated\nvar desiredKeys: [String]?\nThe fields to fetch for the requested records.\nDeprecated\nvar resultsLimit: Int\nThe maximum number of changed records to report with this operation object.\nDeprecated\nvar moreComing: Bool\nA Boolean value that indicates whether more results are available.\nDeprecated"
  },
  {
    "title": "resultsLimit | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckfetchrecordchangesoperation/1514891-resultslimit",
    "html": "Discussion\n\nUse this property to limit the number of results in situations where you expect the number of changed records to be large. The default value is 0, which causes the server to return an appropriate number of results using dynamic conditions.\n\nWhen the number of returned results exceeds the results limit, the operation object sets the moreComing property to true before executing the block in the fetchRecordChangesCompletionBlock property. In your block, check the value of that property, and if it’s true, create a new CKFetchRecordChangesOperation object to fetch more results.\n\nSee Also\nConfiguring the Fetch Record Changes Operation\nvar recordZoneID: CKRecordZone.ID?\nThe ID of the record zone with the records you want to fetch.\nDeprecated\nvar previousServerChangeToken: CKServerChangeToken?\nThe token that identifies the starting point for retrieving changes.\nDeprecated\nvar desiredKeys: [String]?\nThe fields to fetch for the requested records.\nDeprecated\nvar moreComing: Bool\nA Boolean value that indicates whether more results are available.\nDeprecated"
  },
  {
    "title": "moreComing | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckfetchrecordchangesoperation/1515322-morecoming",
    "html": "Discussion\n\nIf the server is unable to deliver all of the changed results with this operation object, it sets this property to true before executing the block in the fetchRecordChangesCompletionBlock property. To fetch the remaining changes, create a new CKFetchRecordChangesOperation object using the change token that the server returns.\n\nSee Also\nConfiguring the Fetch Record Changes Operation\nvar recordZoneID: CKRecordZone.ID?\nThe ID of the record zone with the records you want to fetch.\nDeprecated\nvar previousServerChangeToken: CKServerChangeToken?\nThe token that identifies the starting point for retrieving changes.\nDeprecated\nvar desiredKeys: [String]?\nThe fields to fetch for the requested records.\nDeprecated\nvar resultsLimit: Int\nThe maximum number of changed records to report with this operation object.\nDeprecated"
  },
  {
    "title": "recordChangedBlock | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckfetchrecordchangesoperation/1515155-recordchangedblock",
    "html": "Discussion\n\nThe block returns no value and takes the following parameters:\n\nrecord\n\nThe changed record. If you specify a value for the desiredKeys property, the record only contains the fields in the desiredKeys property.\n\nThe operation object executes this block once for each record in the zone with changes since the previous fetch request. Each time the block executes, it executes serially with respect to the other progress blocks of the operation. If no records change, the block doesn’t execute.\n\nIf you intend to use this block to process results, set it before executing the operation or submitting it to a queue.\n\nSee Also\nProcessing the Fetch Record Changes Results\nvar recordWithIDWasDeletedBlock: ((CKRecord.ID) -> Void)?\nThe block to execute with the ID of a deleted record.\nDeprecated\nvar fetchRecordChangesCompletionBlock: ((CKServerChangeToken?, Data?, Error?) -> Void)?\nThe block to execute when the system finishes processing all changes.\nDeprecated"
  },
  {
    "title": "init() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckfetchsubscriptionsoperation/1515123-init",
    "html": "Discussion\n\nYou must set the subscriptionIDs property before you execute the operation.\n\nSee Also\nCreating a Fetch Subscriptions Operation\ninit(subscriptionIDs: [CKSubscription.ID])\nCreates an operation for fetching the specified subscriptions."
  },
  {
    "title": "automaticallySync | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncengine/configuration/4155716-automaticallysync",
    "html": "Discussion\n\nBy default, the sync engine uses the system scheduler to automatically schedule both send and fetch operations. If an operation fails due to a recoverable error, such as a network failure or when the server is enforcing request limits, the engine reschedules those operations as necessary. Unless you have a specific need, prefer to use the default behavior in your app.\n\nIf you set this property’s value to false, use fetchChanges(_:) and sendChanges(_:) to invoke immediate sync operations, allowing for more control over when your app syncs its records. For example, you may want to sync at a specific time of day or deterministically simulate certain conditions in your unit tests.\n\nThe default value is true.\n\nSee Also\nManaging attributes\nvar database: CKDatabase\nThe associated database.\nvar subscriptionID: CKSubscription.ID?\nThe subscription identifier for the associated database.\nvar stateSerialization: CKSyncEngine.State.Serialization?\nThe sync engine’s serialized state."
  },
  {
    "title": "init(database:stateSerialization:delegate:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncengine/configuration/4155719-init",
    "html": "Parameters\ndatabase\n\nThe database to sync — either a person’s private database or their shared database.\n\nstateSerialization\n\nIf this is the first initialization of the associated sync engine, specify nil; otherwise, specify the state from the most recent CKSyncEngine.Event.stateUpdate(_:) event that your delegate handled.\n\ndelegate\n\nThe object that provides the records to sync and handles any related events."
  },
  {
    "title": "delegate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncengine/configuration/4155718-delegate",
    "html": "See Also\nHandling record changes\nprotocol CKSyncEngineDelegate\nAn interface for providing record data to a sync engine and customizing that engine’s behavior."
  },
  {
    "title": "moreComing | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckfetchnotificationchangesoperation/1515108-morecoming",
    "html": "Discussion\n\nAccess this property only from your fetchNotificationChangesCompletionBlock block. When the value is true, your completion block creates another CKFetchNotificationChangesOperation object and uses it to fetch the next batch of notifications. Use the change token that the system passes to your completion block to configure the new operation object. Specifying the change token prevents the new operation object from returning older notifications.\n\nSee Also\nProcessing the Notification Change Results\nvar notificationChangedBlock: ((CKNotification) -> Void)?\nThe block that processes a single push notification.\nDeprecated\nvar fetchNotificationChangesCompletionBlock: ((CKServerChangeToken?, Error?) -> Void)?\nThe block that executes after the system fetches all requested notifications.\nDeprecated"
  },
  {
    "title": "recordType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckrecord/1462206-recordtype",
    "html": "Discussion\n\nUse this value to differentiate between different record types in your app. The value is primarily for your benefit, so choose record types that represent the data in the corresponding records.\n\nCloudKit provides two system-defined record types:\n\nRecord Type\n\n\t\n\nDescription\n\n\n\n\nCKRecordTypeUserRecord\n\n\t\n\nIdentifies records that represent users.\n\n\n\n\nCKRecordTypeShare\n\n\t\n\nIdentifies records that the user shares.\n\nSee Also\nAccessing the Record’s Metadata\nrecordID\nThe unique ID of the record.\ncreationDate\nThe time when CloudKit first saves the record to the server.\ncreatorUserRecordID\nThe ID of the user who creates the record.\nmodificationDate\nThe most recent time that CloudKit saved the record to the server.\nlastModifiedUserRecordID\nThe ID of the user who most recently modified the record.\nrecordChangeTag\nThe server change token for the record.\nCKRecordID\nAn object that uniquely identifies a record in a database."
  },
  {
    "title": "CKRecordParentKey | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckrecordparentkey",
    "html": "See Also\nAccessing the Record’s Fields\n- objectForKey:\nReturns the object that the record stores for the specified key.\n- objectForKeyedSubscript:\nReturns the object that the record stores for the specified key.\n- setObject:forKey:\nStores an object in the record using the specified key.\n- setObject:forKeyedSubscript:\nStores an object in the record using the specified key.\n- allKeys\nReturns an array of the record’s keys.\n- changedKeys\nReturns an array of keys with recent changes to their values.\nCKRecordKeyValueSetting\nA protocol for managing the key-value pairs of a CloudKit record.\nCKRecordCreationDateKey\nCKRecordCreatorUserRecordIDKey\nCKRecordLastModifiedUserRecordIDKey\nCKRecordModificationDateKey\nCKRecordRecordIDKey\nCKRecordShareKey\nThe key constant that a record uses for its share reference."
  },
  {
    "title": "CKRecordCreatorUserRecordIDKey | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckrecordcreatoruserrecordidkey",
    "html": "See Also\nAccessing the Record’s Fields\n- objectForKey:\nReturns the object that the record stores for the specified key.\n- objectForKeyedSubscript:\nReturns the object that the record stores for the specified key.\n- setObject:forKey:\nStores an object in the record using the specified key.\n- setObject:forKeyedSubscript:\nStores an object in the record using the specified key.\n- allKeys\nReturns an array of the record’s keys.\n- changedKeys\nReturns an array of keys with recent changes to their values.\nCKRecordKeyValueSetting\nA protocol for managing the key-value pairs of a CloudKit record.\nCKRecordCreationDateKey\nCKRecordLastModifiedUserRecordIDKey\nCKRecordModificationDateKey\nCKRecordRecordIDKey\nCKRecordParentKey\nThe key constant that a record uses for its parent reference.\nCKRecordShareKey\nThe key constant that a record uses for its share reference."
  },
  {
    "title": "allKeys | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckrecord/1462220-allkeys",
    "html": "Return Value\n\nAn array of keys, or an empty array if the record doesn’t contain any keys.\n\nDiscussion\n\nThe array contains only those keys with values that aren’t nil.\n\nSee Also\nAccessing the Record’s Fields\n- objectForKey:\nReturns the object that the record stores for the specified key.\n- objectForKeyedSubscript:\nReturns the object that the record stores for the specified key.\n- setObject:forKey:\nStores an object in the record using the specified key.\n- setObject:forKeyedSubscript:\nStores an object in the record using the specified key.\n- changedKeys\nReturns an array of keys with recent changes to their values.\nCKRecordKeyValueSetting\nA protocol for managing the key-value pairs of a CloudKit record.\nCKRecordCreationDateKey\nCKRecordCreatorUserRecordIDKey\nCKRecordLastModifiedUserRecordIDKey\nCKRecordModificationDateKey\nCKRecordRecordIDKey\nCKRecordParentKey\nThe key constant that a record uses for its parent reference.\nCKRecordShareKey\nThe key constant that a record uses for its share reference."
  },
  {
    "title": "setObject:forKeyedSubscript: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckrecord/1462221-setobject",
    "html": "Parameters\nobject\n\nThe object to store using the specified key. It must be one of the data types in Supported Data Types. You receive an error if you use a data type that CloudKit doesn’t support. If you specify nil, CloudKit removes any object that the record associates with the key.\n\nkey\n\nThe key to associate with object. Use this key to retrieve the value later. A key must consist of one or more alphanumeric characters and must start with a letter. CloudKit permits the use of underscores, but not spaces. Avoid using a key that matches the name of any property of CKRecord.\n\nDiscussion\n\nImportant\n\nDon’t call this method directly. The presence of this method is necessary to support subscripting syntax for record objects.\n\nSee Also\nAccessing the Record’s Fields\n- objectForKey:\nReturns the object that the record stores for the specified key.\n- objectForKeyedSubscript:\nReturns the object that the record stores for the specified key.\n- setObject:forKey:\nStores an object in the record using the specified key.\n- allKeys\nReturns an array of the record’s keys.\n- changedKeys\nReturns an array of keys with recent changes to their values.\nCKRecordKeyValueSetting\nA protocol for managing the key-value pairs of a CloudKit record.\nCKRecordCreationDateKey\nCKRecordCreatorUserRecordIDKey\nCKRecordLastModifiedUserRecordIDKey\nCKRecordModificationDateKey\nCKRecordRecordIDKey\nCKRecordParentKey\nThe key constant that a record uses for its parent reference.\nCKRecordShareKey\nThe key constant that a record uses for its share reference."
  },
  {
    "title": "CKRecordTypeUserRecord | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckrecordtypeuserrecord",
    "html": "Discussion\n\nCloudKit automatically creates a user record for each unique user of the app. User records are empty initially. You can add data to the user record using the same rules that apply for all records. Specifically, the type of data for a particular field name must be the same in all user records. However, you can’t create new user records using this record type and you can’t query for records of this type. To locate user records, you must know the ID of the user record or use the methods that CKContainer provides to discover user records.\n\nSee Also\nCreating a Record\n- initWithRecordType:\nCreates a new record of the specified type.\n- initWithRecordType:zoneID:\nCreates a record in the specified zone.\n- initWithRecordType:recordID:\nCreates a record using an ID that you provide.\nCKRecordType\nA data type that CloudKit requires for record types.\nCKRecordTypeShare\nThe system type that identifies a share record.\nCKRecordFieldKey\nA data type that CloudKit requires for record field names."
  },
  {
    "title": "CKRecordTypeShare | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckrecordtypeshare",
    "html": "See Also\nCreating a Record\n- initWithRecordType:\nCreates a new record of the specified type.\n- initWithRecordType:zoneID:\nCreates a record in the specified zone.\n- initWithRecordType:recordID:\nCreates a record using an ID that you provide.\nCKRecordType\nA data type that CloudKit requires for record types.\nCKRecordTypeUserRecord\nThe system type that identifies a user record.\nCKRecordFieldKey\nA data type that CloudKit requires for record field names."
  },
  {
    "title": "CKModifyRecordsOperation.RecordSavePolicy.ifServerRecordUnchanged | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckmodifyrecordsoperation/recordsavepolicy/ifserverrecordunchanged",
    "html": "Discussion\n\nThe server maintains a change tag for each record automatically. When you fetch a record, that change tag accompanies the rest of the record’s data. If the change tag in your local record matches the change tag of the record on the server, the save operation proceeds normally. If the server record contains a newer change tag, CloudKit doesn’t save the record and reports a CKError.Code.serverRecordChanged error.\n\nSee Also\nSave Policies\ncase changedKeys\nA policy that instructs CloudKit to save only the fields of a record that contain changes.\ncase allKeys\nA policy that instructs CloudKit to save all keys of a record, even those without changes."
  },
  {
    "title": "CKRecordType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckrecordtype",
    "html": "See Also\nCreating a Record\n- initWithRecordType:\nCreates a new record of the specified type.\n- initWithRecordType:zoneID:\nCreates a record in the specified zone.\n- initWithRecordType:recordID:\nCreates a record using an ID that you provide.\nCKRecordTypeShare\nThe system type that identifies a share record.\nCKRecordTypeUserRecord\nThe system type that identifies a user record.\nCKRecordFieldKey\nA data type that CloudKit requires for record field names."
  },
  {
    "title": "CKModifyRecordsOperation.RecordSavePolicy.changedKeys | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckmodifyrecordsoperation/recordsavepolicy/changedkeys",
    "html": "Discussion\n\nImportant\n\nThis policy doesn’t compare record change tags. To ensure that you only save changes to the most recent version of a record, use CKModifyRecordsOperation.RecordSavePolicy.ifServerRecordUnchanged instead.\n\nSee Also\nSave Policies\ncase ifServerRecordUnchanged\nA policy that instructs CloudKit to only proceed if the record’s change tag matches that of the server’s copy.\ncase allKeys\nA policy that instructs CloudKit to save all keys of a record, even those without changes."
  },
  {
    "title": "CKModifyRecordsOperation.RecordSavePolicy.allKeys | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckmodifyrecordsoperation/recordsavepolicy/allkeys",
    "html": "Discussion\n\nImportant\n\nThis policy doesn’t compare record change tags. To ensure that you only save changes to the most recent version of a record, use CKModifyRecordsOperation.RecordSavePolicy.ifServerRecordUnchanged instead.\n\nThis policy causes CloudKit to overwrite any existing values on the server. It’s possible for a server record to contain keys that aren’t present locally. Another client might add keys to the record after you fetch it. Also, if you use the desiredKeys property to request a subset of keys during a fetch operation, saving that same record modifies only those keys that you include in the fetch and any keys you add to the record after that.\n\nSee Also\nSave Policies\ncase ifServerRecordUnchanged\nA policy that instructs CloudKit to only proceed if the record’s change tag matches that of the server’s copy.\ncase changedKeys\nA policy that instructs CloudKit to save only the fields of a record that contain changes."
  },
  {
    "title": "init(previousServerChangeToken:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckfetchnotificationchangesoperation/1515141-init",
    "html": "Parameters\npreviousServerChangeToken\n\nThe change token from a previous fetch operation, or nil to fetch all changes. When you specify a change token, the operation object fetches only the changes that occurr after CloudKit generates the change token.\n\nReturn Value\n\nAn initialized operation object.\n\nDiscussion\n\nThe first time you fetch notifications, specify nil for the previousServerChangeToken to get information about all push notifications that CloudKit sends. When that operation finishes executing, it passes a change token to your completion block. Save that change token and use it to initialize new operation objects that fetch only the newly generated notification objects.\n\nIf you mark one or more notifications as read using a CKMarkNotificationsReadOperation object, CloudKit doesn’t return those notifications, even if you specify nil for previousServerChangeToken.\n\nSee Also\nCreating a Notification Change Operation\ninit()\nCreates an operation for fetching notification changes.\nDeprecated"
  },
  {
    "title": "previousServerChangeToken | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckfetchnotificationchangesoperation/1515139-previousserverchangetoken",
    "html": "Discussion\n\nAssign the token you receive from the fetchNotificationChangesCompletionBlock completion block to this property. Doing so yields only the notifications that arrive after your most recent fetch operation. If you specify nil for this parameter, the operation starts fetching notifications at the beginning of the list and returns all but those that CloudKit marks as read.\n\nSee Also\nConfiguring the Notification Change Operation\nvar resultsLimit: Int\nThe maximum number of results to fetch with the operation.\nDeprecated"
  },
  {
    "title": "CKDatabase.Scope.public | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckdatabase/scope/public",
    "html": "See Also\nDatabase Scopes\ncase `private`\nThe private database.\ncase shared\nThe shared database."
  },
  {
    "title": "CKSyncEngine.Event.FetchedDatabaseChanges | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncengine/event/fetcheddatabasechanges",
    "html": "Overview\n\nNote\n\nAlthough CloudKit doesn’t guarantee the order of fetched database changes, the typical order for both deletions and modifications is oldest to newest.\n\nTopics\nAccessing changes\nlet deletions: [CKDatabase.DatabaseChange.Deletion]\nThe fetched record deletions.\nenum CKSyncEngineZoneDeletionReason\nDescribes the reason for a record zone deletion.\nlet modifications: [CKDatabase.DatabaseChange.Modification]\nThe fetched record modifications.\nDebugging the event\nvar description: String\nThe textual description of the event that’s suitable for logging.\nRelationships\nConforms To\nCustomStringConvertible\nSendable\nSee Also\nRemote database changes\ncase willFetchChanges(CKSyncEngine.Event.WillFetchChanges)\nAn event indicating an imminent database fetch.\nstruct CKSyncEngine.Event.WillFetchChanges\nA type that provides information about an imminent database fetch.\ncase fetchedDatabaseChanges(CKSyncEngine.Event.FetchedDatabaseChanges)\nAn event indicating there are fetched database changes to process.\ncase didFetchChanges(CKSyncEngine.Event.DidFetchChanges)\nAn event that indicates the database fetch is done.\nstruct CKSyncEngine.Event.DidFetchChanges\nA type that provides information about a finished database fetch."
  },
  {
    "title": "fetchNotificationChangesCompletionBlock | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckfetchnotificationchangesoperation/1515125-fetchnotificationchangescompleti",
    "html": "Discussion\n\nThe block returns no value and takes the following parameters:\n\nserverChangeToken\n\nAn opaque object that you can use during subsequent fetch operations to retrieve the next batch of notifications.\n\noperationError\n\nAn error object that contains information about a problem, or nil if the system successfully retrieves the results.\n\nThe operation object executes this block only once, and represents your final opportunity to process the operation results. This block executes after all notification changed blocks. The block executes serially with respect to the other blocks of the operation.\n\nIf you intend to use this block to process results, set it before executing the operation or submitting the operation object to a queue.\n\nIn your block, check the value of the moreComing property to determine if there are more results waiting on the server. If the value of that property is true, use the value in the serverChangeToken parameter to configure a new CKFetchNotificationChangesOperation object to fetch the next batch of results.\n\nSee Also\nProcessing the Notification Change Results\nvar moreComing: Bool\nA Boolean value that indicates whether more notifications are available.\nDeprecated\nvar notificationChangedBlock: ((CKNotification) -> Void)?\nThe block that processes a single push notification.\nDeprecated"
  },
  {
    "title": "CKSyncEngine.Event.accountChange(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncengine/event/accountchange-qbg",
    "html": "See Also\nAccount changes\nstruct CKSyncEngine.Event.AccountChange\nA type that provides information about a change to the device’s iCloud account."
  },
  {
    "title": "CKSyncEngine.Event.WillFetchChanges | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncengine/event/willfetchchanges",
    "html": "Topics\nDebugging the event\nvar description: String\nThe textual description of the event that’s suitable for logging.\nInstance Properties\nlet context: CKSyncEngine.FetchChangesContext\nBeta\nRelationships\nConforms To\nCustomStringConvertible\nSendable\nSee Also\nRemote database changes\ncase willFetchChanges(CKSyncEngine.Event.WillFetchChanges)\nAn event indicating an imminent database fetch.\ncase fetchedDatabaseChanges(CKSyncEngine.Event.FetchedDatabaseChanges)\nAn event indicating there are fetched database changes to process.\nstruct CKSyncEngine.Event.FetchedDatabaseChanges\nA type that provides information about fetched database changes.\ncase didFetchChanges(CKSyncEngine.Event.DidFetchChanges)\nAn event that indicates the database fetch is done.\nstruct CKSyncEngine.Event.DidFetchChanges\nA type that provides information about a finished database fetch."
  },
  {
    "title": "notificationIDs | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckmarknotificationsreadoperation/1515056-notificationids",
    "html": "Discussion\n\nUse this property to view or change the IDs of the notifications you want to mark as read. Each item in the array must be a CKNotification.ID object. If you intend to specify a value for this property, do so before executing the operation or submitting the operation object to a queue."
  },
  {
    "title": "init() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckmarknotificationsreadoperation/1640383-init",
    "html": "See Also\nCreating a Mark Notifications Read Operation\ninit(notificationIDsToMarkRead: [CKNotification.ID])\nCreates an operation that marks the specified notifications as read.\nDeprecated"
  },
  {
    "title": "desiredKeys | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckfetchrecordsoperation/1476088-desiredkeys",
    "html": "Discussion\n\nUse this property to limit the amount of data that CloudKit returns for each record during the fetch operation. When CloudKit returns a record, it only includes fields with names that match one of the keys in this property. The property’s default value is nil, which instructs CloudKit to return all of a record’s keys.\n\nIf you’re retrieving records of different types, make sure the array includes the fields you want from all of the various record types that the operation can return.\n\nIf you intend to specify a value other than nil, do so before you execute the operation or add the operation to a queue.\n\nSee Also\nConfiguring a Record Fetch Operation\nrecordIDs\nThe record IDs of the records to fetch."
  },
  {
    "title": "setObject(_:forKey:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckrecordkeyvaluesetting/2976187-setobject",
    "html": "Required\n\nParameters\nobject\n\nThe object to store using the specified key. It must be one of the data types in Supported Data Types. You receive an error if you use a data type that CloudKit doesn’t support. If you specify nil, CloudKit removes any object that the record associates with the key.\n\nkey\n\nThe key to associate with object. Use this key to retrieve the value later. A key must consist of one or more alphanumeric characters and must start with a letter. CloudKit permits the use of underscores, but not spaces. Avoid using a key that matches the name of any property of CKRecord.\n\nSee Also\nAccessing a Record's Fields\nfunc object(forKey: String) -> __CKRecordObjCValue?\nReturns the object that the record stores for the specified key.\n\nRequired\n\nsubscript(String) -> __CKRecordObjCValue?\nReturns the object that the record stores for the specified key.\n\nRequired Default implementations provided.\n\nfunc allKeys() -> [String]\nReturns an array of the record’s keys.\n\nRequired\n\nfunc changedKeys() -> [String]\nReturns an array of keys with recent changes to their values.\n\nRequired"
  },
  {
    "title": "description | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncengine/sendchangesoptions/4180499-description",
    "html": "Relationships\nFrom Protocol\nCustomStringConvertible\nSee Also\nManaging attributes\nvar operationGroup: CKOperationGroup\nThe operation group to use for the underlying CloudKit operations."
  },
  {
    "title": "description | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncengine/fetchchangescontext/4307511-description",
    "html": "Relationships\nFrom Protocol\nCustomStringConvertible"
  },
  {
    "title": "CKDatabase.DatabaseChange.Deletion | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckdatabase/databasechange/deletion",
    "html": "Topics\nIdentifying the Deleted Record Zone\nvar zoneID: CKRecordZone.ID\nThe identifier of the deleted record zone.\nvar purged: Bool\nA Boolean value that indicates whether the user deleted the record zone when managing their iCloud storage.\nDeprecated\nInstance Properties\nvar hashValue: Int\nvar reason: CKDatabase.DatabaseChange.Deletion.Reason\nInstance Methods\nfunc hash(into: inout Hasher)\nOperator Functions\nstatic func != (CKDatabase.DatabaseChange.Deletion, CKDatabase.DatabaseChange.Deletion) -> Bool\nstatic func == (CKDatabase.DatabaseChange.Deletion, CKDatabase.DatabaseChange.Deletion) -> Bool\nEnumerations\nenum CKDatabase.DatabaseChange.Deletion.Reason\nRelationships\nConforms To\nHashable\nSendable"
  },
  {
    "title": "timeoutIntervalForResource | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckoperation/configuration/2866221-timeoutintervalforresource",
    "html": "See Also\nPreparing a Configuration\nvar allowsCellularAccess: Bool\nA Boolean value that indicates whether operations that use this configuration can send data over the cellular network.\nvar container: CKContainer?\nThe configuration’s container.\nvar isLongLived: Bool\nA Boolean value that indicates whether the operations that use this configuration are long-lived.\nvar qualityOfService: QualityOfService\nThe priority that the system uses when it allocates resources to the operations that use this configuration.\nvar timeoutIntervalForRequest: TimeInterval\nThe maximum amount of time that a request can take."
  },
  {
    "title": "CKDatabase.Scope.shared | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckdatabase/scope/shared",
    "html": "See Also\nDatabase Scopes\ncase `public`\nThe public database.\ncase `private`\nThe private database."
  },
  {
    "title": "timeoutIntervalForRequest | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckoperation/configuration/2866210-timeoutintervalforrequest",
    "html": "See Also\nPreparing a Configuration\nvar allowsCellularAccess: Bool\nA Boolean value that indicates whether operations that use this configuration can send data over the cellular network.\nvar container: CKContainer?\nThe configuration’s container.\nvar isLongLived: Bool\nA Boolean value that indicates whether the operations that use this configuration are long-lived.\nvar qualityOfService: QualityOfService\nThe priority that the system uses when it allocates resources to the operations that use this configuration.\nvar timeoutIntervalForResource: TimeInterval\nThe maximum amount of time that a resource request can take."
  },
  {
    "title": "CKDatabase.Scope.private | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckdatabase/scope/private",
    "html": "See Also\nDatabase Scopes\ncase `public`\nThe public database.\ncase shared\nThe shared database."
  },
  {
    "title": "recordName | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckrecord/id/1500973-recordname",
    "html": "Discussion\n\nFor share records that manage a shared record zone, this property’s value is always CKRecordNameZoneWideShare."
  },
  {
    "title": "CKRecordNameZoneWideShare | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckrecordnamezonewideshare",
    "html": "Discussion\n\nWhen you create an instance of CKShare for sharing a record zone, CloudKit automatically assigns this constant as the recordName element of the share record’s recordID. After you save the share record to iCloud, you can fetch it by reconstructing the record ID using this constant, as the following example shows:\n\nfunc fetchShare(forZone zone: CKRecordZone,\n                completion: @escaping (Result<CKShare, Error>) -> Void) {\n    let database = CKContainer.default().privateCloudDatabase\n        \n    // Use the 'CKRecordNameZoneWideShare' constant to create the record ID.\n    let recordID = CKRecord.ID(recordName: CKRecordNameZoneWideShare,\n                               zoneID: zone.zoneID)\n        \n    // Fetch the share record from the specified record zone.\n    database.fetch(withRecordID: recordID) { share, error in\n        if let error = error {\n            // If the fetch fails, inform the caller.\n            completion(.failure(error))\n        } else if let share = share as? CKShare {\n            // Otherwise, pass the fetched share record to the\n            // completion handler.\n            completion(.success(share))\n        } else {\n            fatalError(\"Unable to fetch record with ID: \\(recordID)\")\n        }\n    }\n}\n\n\nSee Also\nCreating a Record ID\ninit(recordName: String)\nCreates a new record ID with the specified name in the default zone.\ninit(recordName: String, zoneID: CKRecordZone.ID)\nCreates a new record ID with the specified name and zone information."
  },
  {
    "title": "allowsCellularAccess | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckoperation/configuration/2866217-allowscellularaccess",
    "html": "See Also\nPreparing a Configuration\nvar container: CKContainer?\nThe configuration’s container.\nvar isLongLived: Bool\nA Boolean value that indicates whether the operations that use this configuration are long-lived.\nvar qualityOfService: QualityOfService\nThe priority that the system uses when it allocates resources to the operations that use this configuration.\nvar timeoutIntervalForRequest: TimeInterval\nThe maximum amount of time that a request can take.\nvar timeoutIntervalForResource: TimeInterval\nThe maximum amount of time that a resource request can take."
  },
  {
    "title": "recordZoneWithIDChangedBlock | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckfetchdatabasechangesoperation/1640391-recordzonewithidchangedblock",
    "html": "Discussion\n\nThe closure returns no value and takes the following parameter:\n\nzoneID\n\nThe ID of the record zone that contains changes.\n\nSee Also\nProcessing the Operation’s Results\nvar recordZoneWithIDWasDeletedBlock: ((CKRecordZone.ID) -> Void)?\nThe closure to execute when a record zone no longer exists.\nvar recordZoneWithIDWasDeletedDueToUserEncryptedDataResetBlock: ((CKRecordZone.ID) -> Void)?\nThe closure to execute when a user-invoked account reset deletes a record zone.\nvar recordZoneWithIDWasPurgedBlock: ((CKRecordZone.ID) -> Void)?\nThe closure to execute when CloudKit purges a record zone.\nvar changeTokenUpdatedBlock: ((CKServerChangeToken) -> Void)?\nThe closure to execute when the change token updates.\nvar fetchDatabaseChangesCompletionBlock: ((CKServerChangeToken?, Bool, Error?) -> Void)?\nThe closure to execute when the operation finishes."
  },
  {
    "title": "subscriptionType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksubscription/1515250-subscriptiontype",
    "html": "See Also\nAccessing the Subscription Metadata\nvar subscriptionID: CKSubscription.ID\nThe subscription’s unique identifier.\ntypealias CKSubscription.ID\nA type that represents a subscription’s identifier.\nenum CKSubscription.SubscriptionType\nConstants that identify a subscription’s behavior."
  },
  {
    "title": "init() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckfetchdatabasechangesoperation/2715838-init",
    "html": "See Also\nCreating an Operation\ninit(previousServerChangeToken: CKServerChangeToken?)\nCreates an operation for fetching database changes."
  },
  {
    "title": "CKSharingParticipantPermissionOption | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksharingparticipantpermissionoption",
    "html": "Topics\nCreating an access option\ninit(rawValue: UInt)\nCreates and initializes a participant permission option object.\nConfiguring the options\nstatic var any: CKSharingParticipantPermissionOption\nThe permission option the system uses to control whether a user can grant read-only or write access.\nstatic var readOnly: CKSharingParticipantPermissionOption\nThe permission option the system uses to control whether a user can grant read-only access.\nstatic var readWrite: CKSharingParticipantPermissionOption\nThe permission option the system uses to control whether a user can grant write access.\nRelationships\nConforms To\nOptionSet\nSendable\nSee Also\nConfiguring the options\nvar allowedParticipantAccessOptions: CKSharingParticipantAccessOption\nThe permission option the system uses to control whether a user can share publicly or privately.\nvar allowedParticipantPermissionOptions: CKSharingParticipantPermissionOption\nThe permission option the system uses to control whether a user can grant read-only or write access.\nstruct CKSharingParticipantAccessOption\nAn object that controls participant access options."
  },
  {
    "title": "CKSharingParticipantAccessOption | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksharingparticipantaccessoption",
    "html": "Topics\nCreating an access option\ninit(rawValue: UInt)\nCreates and initializes a participant access option object.\nConfiguring the options\nstatic var any: CKSharingParticipantAccessOption\nThe permission option the system uses to control whether a user can share publicly or privately.\nstatic var anyoneWithLink: CKSharingParticipantAccessOption\nThe permission option the system uses to control whether a user can share publicly.\nstatic var specifiedRecipientsOnly: CKSharingParticipantAccessOption\nThe permission option the system uses to control whether a user can share privately.\nRelationships\nConforms To\nOptionSet\nSendable\nSee Also\nConfiguring the options\nvar allowedParticipantAccessOptions: CKSharingParticipantAccessOption\nThe permission option the system uses to control whether a user can share publicly or privately.\nvar allowedParticipantPermissionOptions: CKSharingParticipantPermissionOption\nThe permission option the system uses to control whether a user can grant read-only or write access.\nstruct CKSharingParticipantPermissionOption\nAn object that controls participant permission options."
  },
  {
    "title": "allowedParticipantPermissionOptions | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckallowedsharingoptions/3950949-allowedparticipantpermissionopti",
    "html": "See Also\nConfiguring the options\nvar allowedParticipantAccessOptions: CKSharingParticipantAccessOption\nThe permission option the system uses to control whether a user can share publicly or privately.\nstruct CKSharingParticipantAccessOption\nAn object that controls participant access options.\nstruct CKSharingParticipantPermissionOption\nAn object that controls participant permission options."
  },
  {
    "title": "allowedParticipantAccessOptions | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckallowedsharingoptions/3950948-allowedparticipantaccessoptions",
    "html": "See Also\nConfiguring the options\nvar allowedParticipantPermissionOptions: CKSharingParticipantPermissionOption\nThe permission option the system uses to control whether a user can grant read-only or write access.\nstruct CKSharingParticipantAccessOption\nAn object that controls participant access options.\nstruct CKSharingParticipantPermissionOption\nAn object that controls participant permission options."
  },
  {
    "title": "fetchAllSubscriptionsOperation() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckfetchsubscriptionsoperation/1515282-fetchallsubscriptionsoperation",
    "html": "Discussion\n\nAfter creating the operation, set the fetchSubscriptionCompletionBlock property to process the results."
  },
  {
    "title": "init(recordZoneID:previousServerChangeToken:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckfetchrecordchangesoperation/1515224-init",
    "html": "Parameters\nrecordZoneID\n\nThe zone that contains the records you want to fetch. The zone can be a custom zone. The system doesn’t support syncing the default zone.\n\npreviousServerChangeToken\n\nThe change token from a previous fetch operation. This is the token that the system passes to your fetchRecordChangesCompletionBlock handler during a previous fetch operation. Use this token to limit the returned data to only those changes that occur after that fetch request. If you specify nil for this parameter, the operation object fetches all records and their contents.\n\nReturn Value\n\nAn initialized operation object.\n\nDiscussion\n\nWhen initializing the operation object, use the token from a previous fetch request if you have one. You can archive tokens and write them to disk for later use.\n\nThe returned operation object retrieves all changed fields of the record, including any assets in those fields. If you want to minimize the amount of data that returns even further, configure the desiredKeys property with the subset of keys that have values you want to fetch.\n\nAfter initializing the operation, associate at least one progress block with the operation object (excluding the completion block) to process the results.\n\nSee Also\nCreating the Fetch Record Changes Operation\ninit()\nCreates an empty fetch record changes operation.\nDeprecated"
  },
  {
    "title": "desiredKeys | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckfetchrecordchangesoperation/1515230-desiredkeys",
    "html": "Discussion\n\nUse this property to limit the amount of data that the system retrieves for each record during the fetch operation. This property contains an array of strings, each of which contains the name of a field from the target records. When you retrieve a record, the returned records only include fields with names that match one of the keys in this property. The default value is nil, which causes the system to fetch all keys of the record.\n\nBecause the records you fetch can be of different types, configure the array to include the merged set of all field names for the requested records and at least one field name from each record type.\n\nIf you intend to specify the desired set of keys, set the value of this property before executing the operation or submitting it to a queue.\n\nSee Also\nConfiguring the Fetch Record Changes Operation\nvar recordZoneID: CKRecordZone.ID?\nThe ID of the record zone with the records you want to fetch.\nDeprecated\nvar previousServerChangeToken: CKServerChangeToken?\nThe token that identifies the starting point for retrieving changes.\nDeprecated\nvar resultsLimit: Int\nThe maximum number of changed records to report with this operation object.\nDeprecated\nvar moreComing: Bool\nA Boolean value that indicates whether more results are available.\nDeprecated"
  },
  {
    "title": "fetchRecordChangesCompletionBlock | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckfetchrecordchangesoperation/1515267-fetchrecordchangescompletionbloc",
    "html": "Discussion\n\nThe block returns no value and takes the following parameters:\n\nserverChangeToken\n\nThe new change token from the server. You can store this token locally and use it during subsequent fetch operations to limit the results to records that the system changes after executing the operation.\n\nclientChangeToken\n\nThe most recent client change token from the device. If the change token isn’t the most recent change token you provided, the server might not have received the associated changes.\n\noperationError\n\nAn error object that contains information about a problem, or nil if the system successfully retrieves the changes.\n\nWhen implementing this block, check the moreComing property of the operation object to ensure that the server was able to deliver all results. If that property is true, you must create another operation object using the value in the serverChangeToken parameter to fetch any remaining changes.\n\nThe operation object executes this block only once at the conclusion of the operation. It executes after all individual change blocks, but before the operation’s completion block. The block executes serially with respect to the other progress blocks of the operation.\n\nIf you intend to use this block to process results, set it before executing the operation or submitting the operation object to a queue.\n\nSee Also\nProcessing the Fetch Record Changes Results\nvar recordChangedBlock: ((CKRecord) -> Void)?\nThe block to execute with the contents of a changed record.\nDeprecated\nvar recordWithIDWasDeletedBlock: ((CKRecord.ID) -> Void)?\nThe block to execute with the ID of a deleted record.\nDeprecated"
  },
  {
    "title": "CKRecord.ID | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckrecord/id",
    "html": "Overview\n\nA record ID object consists of a name string and a zone ID. The name string is an ASCII string that doesn’t exceed 255 characters in length. For automatically created records, the ID name string derives from a UUID and is, therefore, unique. When creating your own record ID objects, you can use names that have more meaning to your app or to the user, as long as each name is unique within the specified zone. For example, you might use a document name for the name string.\n\nRecord IDs must be unique within the specified database, but you can reuse record IDs in different databases. Each container has a public and a private database, and the private database is different for each unique user. This configuration provides for the reusing of record IDs in each user's private database, but ensures that only one record uses a specific record ID in the public database.\n\nCloudKit generally creates record IDs when it first saves a new record, but you might manually instantiate instances of CKRecordID in specific situations. For example, you must create an instance when saving a record in a zone other than the default zone. You also instantiate instances of CKRecordID when retrieving specific records from a database.\n\nDon’t subclass CKRecordID.\n\nInteracting with Record IDs\n\nAfter you create a CKRecordID object, interactions with that object typically involve creating a new record or retrieving an existing record from a database.\n\nYou might also use record IDs when you can’t use a CKRecord.Reference object to refer to a record. References are only valid within a single zone of a database. To refer to objects outside of the current zone or database, save the strings in the record’s CKRecordID and CKRecordZone.ID objects. When you want to retrieve the record later, use those strings to recreate the record and zone ID objects so that you can fetch the record.\n\nCreating Record IDs for New Records\n\nTo assign a custom record ID to a new record, you must create the CKRecordID object first. You need to know the intended name and zone information for that record, which might also require creating a CKRecordZone.ID object. After creating the record ID object, initialize your new record using its init(__recordType:recordID:) method.\n\nUsing Record IDs to Fetch Records\n\nUse a record ID to fetch the corresponding CKRecord object from a database quickly. You perform the fetch operation using a CKFetchRecordsOperation object or the fetch(withRecordID:completionHandler:) method of the CKDatabase class. In both cases, CloudKit returns the record asynchronously using the handler you provide.\n\nTopics\nCreating a Record ID\ninit(recordName: String)\nCreates a new record ID with the specified name in the default zone.\ninit(recordName: String, zoneID: CKRecordZone.ID)\nCreates a new record ID with the specified name and zone information.\nlet CKRecordNameZoneWideShare: String\nThe name of a share record that manages a shared record zone.\nGetting the Record ID's Name\nvar recordName: String\nThe unique name of the record.\nGetting the Record ID's Zone\nvar zoneID: CKRecordZone.ID\nThe ID of the zone that contains the record.\nRelationships\nInherits From\nNSObject\nConforms To\nNSCopying\nNSSecureCoding\nSendable\nSee Also\nAccessing the Record’s Metadata\nvar recordID: CKRecord.ID\nThe unique ID of the record.\nvar recordType: CKRecord.RecordType\nThe value that your app defines to identify the type of record.\nenum CKRecord.SystemType\nPossible values for record types of system records.\nvar creationDate: Date?\nThe time when CloudKit first saves the record to the server.\nvar creatorUserRecordID: CKRecord.ID?\nThe ID of the user who creates the record.\nvar modificationDate: Date?\nThe most recent time that CloudKit saved the record to the server.\nvar lastModifiedUserRecordID: CKRecord.ID?\nThe ID of the user who most recently modified the record.\nvar recordChangeTag: String?\nThe server change token for the record."
  },
  {
    "title": "recordWithIDWasDeletedBlock | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckfetchrecordchangesoperation/1515054-recordwithidwasdeletedblock",
    "html": "Discussion\n\nThe block returns no value and takes the following parameters:\n\nrecordID\n\nThe ID of the deleted record.\n\nThe operation object executes this block once for each record the server deletes in the record zone after the previous fetch request. Each time the block executes, it executes serially with respect to the other progress blocks of the operation. If there aren’t any deleted records, this block doesn’t execute.\n\nIf you intend to use this block to process results, set it before executing the operation or submitting it to a queue.\n\nSee Also\nProcessing the Fetch Record Changes Results\nvar recordChangedBlock: ((CKRecord) -> Void)?\nThe block to execute with the contents of a changed record.\nDeprecated\nvar fetchRecordChangesCompletionBlock: ((CKServerChangeToken?, Data?, Error?) -> Void)?\nThe block to execute when the system finishes processing all changes.\nDeprecated"
  },
  {
    "title": "saveRecord:completionHandler: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckdatabase/1449114-saverecord",
    "html": "Parameters\nrecord\n\nThe record to save.\n\ncompletionHandler\n\nThe block to execute after CloudKit saves the record.\n\nDiscussion\n\nThe completion handler takes the following parameters:\n\nrecord\n\nThe saved record (as it appears on the server), or nil if there’s an error.\n\nerror\n\nAn error if a problem occurs, or nil if CloudKit successfully saves the record.\n\nThe save succeeds only when the specified record is new, or is a more recent version than the one on the server.\n\nFor information on a more configurable way to save records, see CKModifyRecordsOperation.\n\nSee Also\nModifying Records\n- deleteRecordWithID:completionHandler:\nDeletes a specific record."
  },
  {
    "title": "CKRecordShareKey | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckrecordsharekey",
    "html": "See Also\nAccessing the Record’s Fields\n- objectForKey:\nReturns the object that the record stores for the specified key.\n- objectForKeyedSubscript:\nReturns the object that the record stores for the specified key.\n- setObject:forKey:\nStores an object in the record using the specified key.\n- setObject:forKeyedSubscript:\nStores an object in the record using the specified key.\n- allKeys\nReturns an array of the record’s keys.\n- changedKeys\nReturns an array of keys with recent changes to their values.\nCKRecordKeyValueSetting\nA protocol for managing the key-value pairs of a CloudKit record.\nCKRecordCreationDateKey\nCKRecordCreatorUserRecordIDKey\nCKRecordLastModifiedUserRecordIDKey\nCKRecordModificationDateKey\nCKRecordRecordIDKey\nCKRecordParentKey\nThe key constant that a record uses for its parent reference."
  },
  {
    "title": "CKRecordRecordIDKey | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckrecordrecordidkey",
    "html": "See Also\nAccessing the Record’s Fields\n- objectForKey:\nReturns the object that the record stores for the specified key.\n- objectForKeyedSubscript:\nReturns the object that the record stores for the specified key.\n- setObject:forKey:\nStores an object in the record using the specified key.\n- setObject:forKeyedSubscript:\nStores an object in the record using the specified key.\n- allKeys\nReturns an array of the record’s keys.\n- changedKeys\nReturns an array of keys with recent changes to their values.\nCKRecordKeyValueSetting\nA protocol for managing the key-value pairs of a CloudKit record.\nCKRecordCreationDateKey\nCKRecordCreatorUserRecordIDKey\nCKRecordLastModifiedUserRecordIDKey\nCKRecordModificationDateKey\nCKRecordParentKey\nThe key constant that a record uses for its parent reference.\nCKRecordShareKey\nThe key constant that a record uses for its share reference."
  },
  {
    "title": "CKRecordModificationDateKey | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckrecordmodificationdatekey",
    "html": "See Also\nAccessing the Record’s Fields\n- objectForKey:\nReturns the object that the record stores for the specified key.\n- objectForKeyedSubscript:\nReturns the object that the record stores for the specified key.\n- setObject:forKey:\nStores an object in the record using the specified key.\n- setObject:forKeyedSubscript:\nStores an object in the record using the specified key.\n- allKeys\nReturns an array of the record’s keys.\n- changedKeys\nReturns an array of keys with recent changes to their values.\nCKRecordKeyValueSetting\nA protocol for managing the key-value pairs of a CloudKit record.\nCKRecordCreationDateKey\nCKRecordCreatorUserRecordIDKey\nCKRecordLastModifiedUserRecordIDKey\nCKRecordRecordIDKey\nCKRecordParentKey\nThe key constant that a record uses for its parent reference.\nCKRecordShareKey\nThe key constant that a record uses for its share reference."
  },
  {
    "title": "CKRecordLastModifiedUserRecordIDKey | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckrecordlastmodifieduserrecordidkey",
    "html": "See Also\nAccessing the Record’s Fields\n- objectForKey:\nReturns the object that the record stores for the specified key.\n- objectForKeyedSubscript:\nReturns the object that the record stores for the specified key.\n- setObject:forKey:\nStores an object in the record using the specified key.\n- setObject:forKeyedSubscript:\nStores an object in the record using the specified key.\n- allKeys\nReturns an array of the record’s keys.\n- changedKeys\nReturns an array of keys with recent changes to their values.\nCKRecordKeyValueSetting\nA protocol for managing the key-value pairs of a CloudKit record.\nCKRecordCreationDateKey\nCKRecordCreatorUserRecordIDKey\nCKRecordModificationDateKey\nCKRecordRecordIDKey\nCKRecordParentKey\nThe key constant that a record uses for its parent reference.\nCKRecordShareKey\nThe key constant that a record uses for its share reference."
  },
  {
    "title": "changedKeys | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckrecord/1462197-changedkeys",
    "html": "Return Value\n\nAn array of keys with changed values since downloading or saving the record. If there aren’t any changed keys, this method returns an empty array.\n\nSee Also\nAccessing the Record’s Fields\n- objectForKey:\nReturns the object that the record stores for the specified key.\n- objectForKeyedSubscript:\nReturns the object that the record stores for the specified key.\n- setObject:forKey:\nStores an object in the record using the specified key.\n- setObject:forKeyedSubscript:\nStores an object in the record using the specified key.\n- allKeys\nReturns an array of the record’s keys.\nCKRecordKeyValueSetting\nA protocol for managing the key-value pairs of a CloudKit record.\nCKRecordCreationDateKey\nCKRecordCreatorUserRecordIDKey\nCKRecordLastModifiedUserRecordIDKey\nCKRecordModificationDateKey\nCKRecordRecordIDKey\nCKRecordParentKey\nThe key constant that a record uses for its parent reference.\nCKRecordShareKey\nThe key constant that a record uses for its share reference."
  },
  {
    "title": "badgeValue | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckmodifybadgeoperation/1391674-badgevalue",
    "html": "Discussion\n\nThe initial value of this property is the value you specify using the init(badgeValue:) method. If you intend to change the value, do so before executing the operation or submitting it to a queue."
  },
  {
    "title": "init() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckmodifybadgeoperation/1391678-init",
    "html": "See Also\nCreating the Operation\ninit(badgeValue: Int)\nCreates an operation that sets the value of the app icon’s badge.\nDeprecated"
  },
  {
    "title": "init(badgeValue:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckmodifybadgeoperation/1391676-init",
    "html": "Parameters\nbadgeValue\n\nThe numerical value to display. Specify 0 to remove the badge.\n\nSee Also\nCreating the Operation\ninit()\nCreates an empty modify badge operation.\nDeprecated"
  },
  {
    "title": "CKRecordCreationDateKey | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckrecordcreationdatekey",
    "html": "See Also\nAccessing the Record’s Fields\n- objectForKey:\nReturns the object that the record stores for the specified key.\n- objectForKeyedSubscript:\nReturns the object that the record stores for the specified key.\n- setObject:forKey:\nStores an object in the record using the specified key.\n- setObject:forKeyedSubscript:\nStores an object in the record using the specified key.\n- allKeys\nReturns an array of the record’s keys.\n- changedKeys\nReturns an array of keys with recent changes to their values.\nCKRecordKeyValueSetting\nA protocol for managing the key-value pairs of a CloudKit record.\nCKRecordCreatorUserRecordIDKey\nCKRecordLastModifiedUserRecordIDKey\nCKRecordModificationDateKey\nCKRecordRecordIDKey\nCKRecordParentKey\nThe key constant that a record uses for its parent reference.\nCKRecordShareKey\nThe key constant that a record uses for its share reference."
  },
  {
    "title": "modifyBadgeCompletionBlock | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckmodifybadgeoperation/1391682-modifybadgecompletionblock",
    "html": "Discussion\n\nThe block returns no value and takes the following parameters:\n\noperationError\n\nAn error object that contains information about a problem, or nil if the system successfully applies the badge.\n\nThis block execute only once, and represents your only opportunity to process the results. If you intend to use this block to process results, set it before executing the operation or submitting the operation object to a queue."
  },
  {
    "title": "setObject:forKey: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckrecord/1462231-setobject",
    "html": "Parameters\nobject\n\nThe object to store using the specified key. It must be one of the data types in Supported Data Types. You receive an error if you use a data type that CloudKit doesn’t support. If you specify nil, CloudKit removes any object that the record associates with the key.\n\nkey\n\nThe key to associate with object. Use this key to retrieve the value later. A key must consist of one or more alphanumeric characters and must start with a letter. CloudKit permits the use of underscores, but not spaces. Avoid using a key that matches the name of any property of CKRecord.\n\nDiscussion\n\nIf the specified key already exists in the record, CloudKit deletes its previous value and replaces it with the one in the object parameter. This change affects only the local copy of the record. You must save the record to the server again before the change becomes available to other clients.\n\nIf the type of the object parameter differs from the type of the object that’s on the server, you encounter an error when you attempt to save this record to the server. For example, if the current value is an NSString object, you receive an error if you change the value to an NSNumber object and save the record.\n\nYou access the fields of a CKRecord object the same way you access key-value pairs in a dictionary. The CKRecord class defines the objectForKey: and setObject:forKey: methods for getting and setting values. It also supports dictionary index notation. The following example shows how to use both techniques to set a firstName field and get a lastName field from a record:\n\n// Equivalent ways to set a value.\n[myRecord setObject:[NSDate date] forKey:@\"hiredAt\"];\nmyRecord[@\"hiredAt\"] = [NSDate date];\n\nSee Also\nAccessing the Record’s Fields\n- objectForKey:\nReturns the object that the record stores for the specified key.\n- objectForKeyedSubscript:\nReturns the object that the record stores for the specified key.\n- setObject:forKeyedSubscript:\nStores an object in the record using the specified key.\n- allKeys\nReturns an array of the record’s keys.\n- changedKeys\nReturns an array of keys with recent changes to their values.\nCKRecordKeyValueSetting\nA protocol for managing the key-value pairs of a CloudKit record.\nCKRecordCreationDateKey\nCKRecordCreatorUserRecordIDKey\nCKRecordLastModifiedUserRecordIDKey\nCKRecordModificationDateKey\nCKRecordRecordIDKey\nCKRecordParentKey\nThe key constant that a record uses for its parent reference.\nCKRecordShareKey\nThe key constant that a record uses for its share reference."
  },
  {
    "title": "objectForKey: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckrecord/1462216-objectforkey",
    "html": "Parameters\nkey\n\nThe string that identifies a field in the record. A key must consist of one or more alphanumeric characters and must start with a letter. CloudKit permits the use of underscores, but not spaces.\n\nReturn Value\n\nThe object for the specified key, or nil if no such key exists in the record.\n\nDiscussion\n\nNew records don’t contain any keys or values. Values are always one of the data types in Supported Data Types.\n\nYou access the fields of a CKRecord object the same way you access key-value pairs in a dictionary. The CKRecord class defines the objectForKey: and setObject:forKey: methods for getting and setting values. It also supports dictionary index notation. The following example shows how to use both techniques to set a firstName field and retrieve a lastName field from a record:\n\n// Equivalent ways to get a value.\nid value = [myRecord objectForKey:@\"hiredAt\"];\nvalue = myRecord[@\"hiredAt\"];\n\nSee Also\nAccessing the Record’s Fields\n- objectForKeyedSubscript:\nReturns the object that the record stores for the specified key.\n- setObject:forKey:\nStores an object in the record using the specified key.\n- setObject:forKeyedSubscript:\nStores an object in the record using the specified key.\n- allKeys\nReturns an array of the record’s keys.\n- changedKeys\nReturns an array of keys with recent changes to their values.\nCKRecordKeyValueSetting\nA protocol for managing the key-value pairs of a CloudKit record.\nCKRecordCreationDateKey\nCKRecordCreatorUserRecordIDKey\nCKRecordLastModifiedUserRecordIDKey\nCKRecordModificationDateKey\nCKRecordRecordIDKey\nCKRecordParentKey\nThe key constant that a record uses for its parent reference.\nCKRecordShareKey\nThe key constant that a record uses for its share reference."
  },
  {
    "title": "init() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckfetchnotificationchangesoperation/2715837-init",
    "html": "Discussion\n\nWhen this operation finishes executing, it passes a change token to your completion block. Save that change token and use it to initialize new operation objects with init(previousServerChangeToken:) that fetch only the newly generated notification objects.\n\nIf you mark one or more notifications as read using a CKMarkNotificationsReadOperation object, CloudKit doesn’t return those notifications.\n\nSee Also\nCreating a Notification Change Operation\ninit(previousServerChangeToken: CKServerChangeToken?)\nCreates an operation for fetching notification changes that occur after the specified change token.\nDeprecated"
  },
  {
    "title": "objectForKeyedSubscript: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckrecord/1462210-objectforkeyedsubscript",
    "html": "Parameters\nkey\n\nThe string that identifies a field in the record. A key must consist of one or more alphanumeric characters and must start with a letter. CloudKit permits the use of underscores, but not spaces.\n\nReturn Value\n\nThe object for the specified key, or nil if no such key exists in the record.\n\nDiscussion\n\nImportant\n\nDon’t call this method directly. The presence of this method is necessary to support subscripting syntax for record objects.\n\nSee Also\nAccessing the Record’s Fields\n- objectForKey:\nReturns the object that the record stores for the specified key.\n- setObject:forKey:\nStores an object in the record using the specified key.\n- setObject:forKeyedSubscript:\nStores an object in the record using the specified key.\n- allKeys\nReturns an array of the record’s keys.\n- changedKeys\nReturns an array of keys with recent changes to their values.\nCKRecordKeyValueSetting\nA protocol for managing the key-value pairs of a CloudKit record.\nCKRecordCreationDateKey\nCKRecordCreatorUserRecordIDKey\nCKRecordLastModifiedUserRecordIDKey\nCKRecordModificationDateKey\nCKRecordRecordIDKey\nCKRecordParentKey\nThe key constant that a record uses for its parent reference.\nCKRecordShareKey\nThe key constant that a record uses for its share reference."
  },
  {
    "title": "resultsLimit | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckfetchnotificationchangesoperation/1515275-resultslimit",
    "html": "Discussion\n\nUse this property to limit the number of push notifications that the operation returns. When the operation reaches the limit, it returns a new change token to let you know that more results are available.\n\nSee Also\nConfiguring the Notification Change Operation\nvar previousServerChangeToken: CKServerChangeToken?\nThe change token from a previous fetch operation.\nDeprecated"
  },
  {
    "title": "initWithRecordType:zoneID: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckrecord/1462202-initwithrecordtype",
    "html": "Parameters\nrecordType\n\nA string that represents the type of record that you want to create. You can’t change the record type after initialization. You define the record types that your app supports and use them to distinguish between records with different types of data. This parameter must not be nil or contain an empty string.\n\nA record type must consist of one or more alphanumeric characters and must start with a letter. CloudKit permits the use of underscores, but not spaces.\n\nzoneID\n\nThe ID of the record zone where you want to store the record.\n\nReturn Value\n\nAn initialized record object, or nil if CloudKit can’t create it.\n\nDiscussion\n\nUse this method to initialize a new record object in the specified record zone.\n\nUpon creation, the new record contains no data and exists only in memory on the local device. Save the record using a CKModifyRecordsOperation object or by using the saveRecord:completionHandler: method of CKDatabase to transfer the record’s contents to the server.\n\nSee Also\nCreating a Record\n- initWithRecordType:\nCreates a new record of the specified type.\n- initWithRecordType:recordID:\nCreates a record using an ID that you provide.\nCKRecordType\nA data type that CloudKit requires for record types.\nCKRecordTypeShare\nThe system type that identifies a share record.\nCKRecordTypeUserRecord\nThe system type that identifies a user record.\nCKRecordFieldKey\nA data type that CloudKit requires for record field names."
  },
  {
    "title": "init(recordName:zoneID:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckrecord/id/3003372-init",
    "html": "Parameters\nrecordName\n\nThe name that identifies the record. The string must contain only ASCII characters, must not exceed 255 characters, and must not start with an underscore. If you specify nil or an empty string for this parameter, the method throws an exception.\n\nzoneID\n\nThe ID of the record zone where you want to store the record. This parameter must not be nil.\n\nDiscussion\n\nUse this method when you create or search for records in a zone other than the default zone. The value in the zoneID parameter must represent a zone that already exists in the database. If the record zone doesn’t exist, save the corresponding CKRecordZone object to the database before attempting to save any CKRecord objects in that zone.\n\nSee Also\nCreating a Record ID\ninit(recordName: String)\nCreates a new record ID with the specified name in the default zone.\nlet CKRecordNameZoneWideShare: String\nThe name of a share record that manages a shared record zone."
  },
  {
    "title": "init(recordName:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckrecord/id/1500975-init",
    "html": "Parameters\nrecordName\n\nThe name that identifies the record. The string must contain only ASCII characters, must not exceed 255 characters, and must not start with an underscore. If you specify nil or an empty string for this parameter, the method throws an exception.\n\nReturn Value\n\nAn initialized record ID object, or nil if CloudKit can’t create the object.\n\nDiscussion\n\nUse this method when you’re creating or searching for records in the default zone.\n\nSee Also\nCreating a Record ID\ninit(recordName: String, zoneID: CKRecordZone.ID)\nCreates a new record ID with the specified name and zone information.\nlet CKRecordNameZoneWideShare: String\nThe name of a share record that manages a shared record zone."
  },
  {
    "title": "userIdentityLookupInfos | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckfetchshareparticipantsoperation/1640380-useridentitylookupinfos",
    "html": "Discussion\n\nUse this property to view or change the participants user data. If you intend to specify or change the value of this property, do so before you execute the operation or submit it to a queue.\n\nNote\n\nIf you don’t set userIdentityLookupInfos prior to executing the operation, it returns immediately with no results."
  },
  {
    "title": "initWithRecordType:recordID: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckrecord/1462204-initwithrecordtype",
    "html": "Parameters\nrecordType\n\nA string that represents the type of record that you want to create. You can’t change the record type after initialization. You define the record types that your app supports and use them to distinguish between records with different types of data. This parameter must not be nil or contain an empty string.\n\nA record type must consist of one or more alphanumeric characters and must start with a letter. CloudKit permits the use of underscores, but not spaces.\n\nrecordID\n\nThe ID to assign to the record. When creating the ID, you can specify the zone where you want to store the record. The ID must be unique across all records and can’t be nil.\n\nReturn Value\n\nAn initialized record object, or nil if CloudKit can’t create it.\n\nDiscussion\n\nUse this method to initialize a new record object with the specified ID. The newly created record contains no data.\n\nUpon creation, record objects exist only in memory on the local device. Save the record using a CKModifyRecordsOperation object or by using the saveRecord:completionHandler: method of CKDatabase to transfer the record’s contents to the server.\n\nSee Also\nCreating a Record\n- initWithRecordType:\nCreates a new record of the specified type.\n- initWithRecordType:zoneID:\nCreates a record in the specified zone.\nCKRecordType\nA data type that CloudKit requires for record types.\nCKRecordTypeShare\nThe system type that identifies a share record.\nCKRecordTypeUserRecord\nThe system type that identifies a user record.\nCKRecordFieldKey\nA data type that CloudKit requires for record field names."
  },
  {
    "title": "CKAccountStatus.couldNotDetermine | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckaccountstatus/couldnotdetermine",
    "html": "See Also\nAccount Statuses\ncase available\nThe user’s iCloud account is available.\ncase noAccount\nThe device doesn’t have an iCloud account.\ncase restricted\nThe system denies access to the user’s iCloud account.\ncase temporarilyUnavailable\nThe user’s iCloud account is temporarily unavailable."
  },
  {
    "title": "CKAccountStatus.restricted | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckaccountstatus/restricted",
    "html": "Discussion\n\nYour app can’t access the user’s iCloud account due to restrictions that Parental Controls or Mobile Device Management impose.\n\nSee Also\nAccount Statuses\ncase available\nThe user’s iCloud account is available.\ncase couldNotDetermine\nCloudKit can’t determine the status of the user’s iCloud account.\ncase noAccount\nThe device doesn’t have an iCloud account.\ncase temporarilyUnavailable\nThe user’s iCloud account is temporarily unavailable."
  },
  {
    "title": "Deprecated Symbols | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckshare/participant/deprecated_symbols",
    "html": "Topics\nDeprecated Properties\nvar type: CKShare.ParticipantType\nThe participant type.\nDeprecated\ntypealias CKShare.Participant.ParticipantType\nA type that represents the role of the participant.\nDeprecated\nenum CKShare.ParticipantType\nThe role of a participant.\nDeprecated"
  },
  {
    "title": "CKDatabase.DatabaseChange.Modification | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckdatabase/databasechange/modification",
    "html": "Topics\nIdentifying the Modified Record Zone\nvar zoneID: CKRecordZone.ID\nThe identifier of the modified record zone.\nInstance Properties\nvar hashValue: Int\nInstance Methods\nfunc hash(into: inout Hasher)\nOperator Functions\nstatic func != (CKDatabase.DatabaseChange.Modification, CKDatabase.DatabaseChange.Modification) -> Bool\nstatic func == (CKDatabase.DatabaseChange.Modification, CKDatabase.DatabaseChange.Modification) -> Bool\nRelationships\nConforms To\nHashable\nSendable"
  },
  {
    "title": "systemSharingUIDidStopSharingBlock | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksystemsharinguiobserver/4028476-systemsharinguididstopsharingblo",
    "html": "Discussion\n\nThe system invokes this block on the success or failure of a CKShare delete when the user decides to stop sharing through the system sharing UI.\n\nEach CKSystemSharingUIObserver instance has a private serial queue. The system uses this queue for all callback block invocations.\n\nSee Also\nConfiguring a sharing observer\nvar systemSharingUIDidSaveShareBlock: (CKRecord.ID, Result<CKShare, Error>) -> Void)?\nA callback block the system invokes after the success or failure of a system sharing UI save."
  },
  {
    "title": "init(subscriptionIDs:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckfetchsubscriptionsoperation/3003595-init",
    "html": "Parameters\nsubscriptionIDs\n\nAn array of strings where each one is an ID of a subscription that you want to retrieve. This parameter sets the subscriptionIDs property’s value. If you specify nil, you must set the subscriptionIDs property before you execute the operation.\n\nDiscussion\n\nAfter creating the operation, assign a closure to the fetchSubscriptionCompletionBlock property to process the results.\n\nSee Also\nCreating a Fetch Subscriptions Operation\ninit()\nCreates an empty fetch subscriptions operation."
  },
  {
    "title": "CKDatabase.RecordZoneChange.Modification | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckdatabase/recordzonechange/modification",
    "html": "Topics\nGetting the Modified Record\nvar record: CKRecord\nThe modified record.\nInstance Properties\nvar hashValue: Int\nInstance Methods\nfunc hash(into: inout Hasher)\nOperator Functions\nstatic func != (CKDatabase.RecordZoneChange.Modification, CKDatabase.RecordZoneChange.Modification) -> Bool\nstatic func == (CKDatabase.RecordZoneChange.Modification, CKDatabase.RecordZoneChange.Modification) -> Bool\nRelationships\nConforms To\nHashable\nSendable"
  },
  {
    "title": "systemSharingUIDidSaveShareBlock | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksystemsharinguiobserver/4028475-systemsharinguididsaveshareblock",
    "html": "Discussion\n\nFollowing a successful share save by the system sharing UI in the provided CKContainer, the system invokes this callback with a nonnull CKRecord.ID, a nonnull share, and a nil error.\n\nIf a save failure occurs due to a per-item error like CKError.Code.serverRecordChanged, the system invokes this callback with a nonnull CKRecord.ID, a nil share, and a nonnull error.\n\nEach CKSystemSharingUIObserver instance has a private serial queue. The system uses this queue for all callback block invocations.\n\nSee Also\nConfiguring a sharing observer\nvar systemSharingUIDidStopSharingBlock: (CKRecord.ID, Result<Void, Error>) -> Void)?\nA callback block the system invokes after the success or failure of a system sharing UI delete."
  },
  {
    "title": "fetchDatabaseChangesCompletionBlock | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckfetchdatabasechangesoperation/1640434-fetchdatabasechangescompletionbl",
    "html": "Discussion\n\nThe closure returns no value and takes the following parameters:\n\nThe change token to store and use in subsequent instances of CKFetchDatabaseChangesOperation.\n\nA Boolen value that indicates whether this is the final database change. If fetchAllChanges is false, it’s the app’s responsibility to create additional instances of CKFetchDatabaseChangesOperation to fetch further changes.\n\nAn error object that contains information about a problem, or nil if CloudKit successfully retrieves the database changes.\n\nNote\n\nThe change token and error parameters are mutally exclusive — that is, the closure provides one of them but not both.\n\nYour app is responsible for saving the change token at the end of the operation and providing it to future uses of CKFetchDatabaseChangesOperation. If the server returns a CKError.Code.changeTokenExpired error, the previousServerChangeToken value is stale and your app needs to clear its local cache and refetch the database changes, starting with a nil change token.\n\nSee Also\nProcessing the Operation’s Results\nvar recordZoneWithIDChangedBlock: ((CKRecordZone.ID) -> Void)?\nThe closure to execute with a single record zone change.\nvar recordZoneWithIDWasDeletedBlock: ((CKRecordZone.ID) -> Void)?\nThe closure to execute when a record zone no longer exists.\nvar recordZoneWithIDWasDeletedDueToUserEncryptedDataResetBlock: ((CKRecordZone.ID) -> Void)?\nThe closure to execute when a user-invoked account reset deletes a record zone.\nvar recordZoneWithIDWasPurgedBlock: ((CKRecordZone.ID) -> Void)?\nThe closure to execute when CloudKit purges a record zone.\nvar changeTokenUpdatedBlock: ((CKServerChangeToken) -> Void)?\nThe closure to execute when the change token updates."
  },
  {
    "title": "CKDatabase.RecordZoneChange.Deletion | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckdatabase/recordzonechange/deletion",
    "html": "Topics\nIdentifying the Deleted Record\nvar recordID: CKRecord.ID\nThe identifier of the deleted record.\nvar recordType: CKRecord.RecordType\nThe record type of the deleted record.\nInstance Properties\nvar hashValue: Int\nInstance Methods\nfunc hash(into: inout Hasher)\nOperator Functions\nstatic func != (CKDatabase.RecordZoneChange.Deletion, CKDatabase.RecordZoneChange.Deletion) -> Bool\nstatic func == (CKDatabase.RecordZoneChange.Deletion, CKDatabase.RecordZoneChange.Deletion) -> Bool\nRelationships\nConforms To\nHashable\nSendable"
  },
  {
    "title": "init(container:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksystemsharinguiobserver/3971996-init",
    "html": "Parameters\ncontainer\n\nThe CKContainer for the sharing observer."
  },
  {
    "title": "recordZoneWithIDWasDeletedDueToUserEncryptedDataResetBlock | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckfetchdatabasechangesoperation/3746820-recordzonewithidwasdeletedduetou",
    "html": "Discussion\n\nThe closure returns no value and takes a single parameter: the deleted record zone’s ID.\n\nThe operation executes this closure, instead of recordZoneWithIDWasDeletedBlock, after a user action causes CloudKit to delete the record zone. Reupload any locally cached data to iCloud to minimize data loss.\n\nSee Also\nProcessing the Operation’s Results\nvar recordZoneWithIDChangedBlock: ((CKRecordZone.ID) -> Void)?\nThe closure to execute with a single record zone change.\nvar recordZoneWithIDWasDeletedBlock: ((CKRecordZone.ID) -> Void)?\nThe closure to execute when a record zone no longer exists.\nvar recordZoneWithIDWasPurgedBlock: ((CKRecordZone.ID) -> Void)?\nThe closure to execute when CloudKit purges a record zone.\nvar changeTokenUpdatedBlock: ((CKServerChangeToken) -> Void)?\nThe closure to execute when the change token updates.\nvar fetchDatabaseChangesCompletionBlock: ((CKServerChangeToken?, Bool, Error?) -> Void)?\nThe closure to execute when the operation finishes."
  },
  {
    "title": "recordZoneWithIDWasPurgedBlock | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckfetchdatabasechangesoperation/2866207-recordzonewithidwaspurgedblock",
    "html": "Discussion\n\nThe closure returns no value and takes the following parameter:\n\nzoneID\n\nThe purged record zone’s ID.\n\nSee Also\nProcessing the Operation’s Results\nvar recordZoneWithIDChangedBlock: ((CKRecordZone.ID) -> Void)?\nThe closure to execute with a single record zone change.\nvar recordZoneWithIDWasDeletedBlock: ((CKRecordZone.ID) -> Void)?\nThe closure to execute when a record zone no longer exists.\nvar recordZoneWithIDWasDeletedDueToUserEncryptedDataResetBlock: ((CKRecordZone.ID) -> Void)?\nThe closure to execute when a user-invoked account reset deletes a record zone.\nvar changeTokenUpdatedBlock: ((CKServerChangeToken) -> Void)?\nThe closure to execute when the change token updates.\nvar fetchDatabaseChangesCompletionBlock: ((CKServerChangeToken?, Bool, Error?) -> Void)?\nThe closure to execute when the operation finishes."
  },
  {
    "title": "changeTokenUpdatedBlock | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckfetchdatabasechangesoperation/1640467-changetokenupdatedblock",
    "html": "Discussion\n\nThe closure executes periodically, and provides a new change token so that you don’t need to refetch previously fetched record zone changes in a subsequent operation.\n\nSee Also\nProcessing the Operation’s Results\nvar recordZoneWithIDChangedBlock: ((CKRecordZone.ID) -> Void)?\nThe closure to execute with a single record zone change.\nvar recordZoneWithIDWasDeletedBlock: ((CKRecordZone.ID) -> Void)?\nThe closure to execute when a record zone no longer exists.\nvar recordZoneWithIDWasDeletedDueToUserEncryptedDataResetBlock: ((CKRecordZone.ID) -> Void)?\nThe closure to execute when a user-invoked account reset deletes a record zone.\nvar recordZoneWithIDWasPurgedBlock: ((CKRecordZone.ID) -> Void)?\nThe closure to execute when CloudKit purges a record zone.\nvar fetchDatabaseChangesCompletionBlock: ((CKServerChangeToken?, Bool, Error?) -> Void)?\nThe closure to execute when the operation finishes."
  },
  {
    "title": "CKContainer.ApplicationPermissionStatus.granted | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckcontainer/applicationpermissionstatus/granted",
    "html": "See Also\nPermission Statuses\ncase initialState\nThe app is yet to request the permission.\nDeprecated\ncase couldNotComplete\nAn error that occurs while processing the permission request.\nDeprecated\ncase denied\nThe user denies the permission.\nDeprecated"
  },
  {
    "title": "recordZoneWithIDWasDeletedBlock | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckfetchdatabasechangesoperation/1640428-recordzonewithidwasdeletedblock",
    "html": "Discussion\n\nThe closure returns no value and takes the following parameter:\n\nzoneID\n\nThe deleted record zone’s ID.\n\nSee Also\nProcessing the Operation’s Results\nvar recordZoneWithIDChangedBlock: ((CKRecordZone.ID) -> Void)?\nThe closure to execute with a single record zone change.\nvar recordZoneWithIDWasDeletedDueToUserEncryptedDataResetBlock: ((CKRecordZone.ID) -> Void)?\nThe closure to execute when a user-invoked account reset deletes a record zone.\nvar recordZoneWithIDWasPurgedBlock: ((CKRecordZone.ID) -> Void)?\nThe closure to execute when CloudKit purges a record zone.\nvar changeTokenUpdatedBlock: ((CKServerChangeToken) -> Void)?\nThe closure to execute when the change token updates.\nvar fetchDatabaseChangesCompletionBlock: ((CKServerChangeToken?, Bool, Error?) -> Void)?\nThe closure to execute when the operation finishes."
  },
  {
    "title": "resultsLimit | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckfetchdatabasechangesoperation/1640520-resultslimit",
    "html": "Discussion\n\nUse this property to limit the number of changes this operation returns. When the operation reaches the limit, it updates the change token and returns it to indicate that more results are available.\n\nSee Also\nConfiguring the Operation\nvar fetchAllChanges: Bool\nA Boolean value that indicates whether to send repeated requests to the server.\nvar previousServerChangeToken: CKServerChangeToken?\nThe server change token."
  },
  {
    "title": "previousServerChangeToken | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckfetchdatabasechangesoperation/1640522-previousserverchangetoken",
    "html": "Discussion\n\nAssign the token you receive from the fetchDatabaseChangesCompletionBlock to this property. Doing so yields only the changes that occur after your most recent fetch operation. If you specify nil for this parameter, the operation fetches all changes.\n\nSee Also\nConfiguring the Operation\nvar fetchAllChanges: Bool\nA Boolean value that indicates whether to send repeated requests to the server.\nvar resultsLimit: Int\nThe maximum number of results that the operation fetches."
  },
  {
    "title": "CKUserIdentity.LookupInfo | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckuseridentity/lookupinfo",
    "html": "Overview\n\nUse this object when you want to discover the identities of your app’s users with CKDiscoverUserIdentitiesOperation, or to create a share’s participants with CKFetchShareParticipantsOperation.\n\nYou create individual instances by providing an email address, phone number, or user record ID. Alternatively, create an array of objects all at once by using one of the convenience methods, such as lookupInfos(withEmails:).\n\nTopics\nCreating a Lookup Info\ninit(emailAddress: String)\nCreates a lookup info for the specified email address.\ninit(phoneNumber: String)\nCreates a lookup info for the specified phone number.\ninit(userRecordID: CKRecord.ID)\nCreates a lookup info for the specified user record ID.\nCreating Multiple Lookup Infos\nclass func lookupInfos(withEmails: [String]) -> [CKUserIdentity.LookupInfo]\nReturns an array of lookup infos for the specifed email addresses.\nclass func lookupInfos(withPhoneNumbers: [String]) -> [CKUserIdentity.LookupInfo]\nReturns an array of lookup infos for the specifed phone numbers.\nclass func lookupInfos(with: [CKRecord.ID]) -> [CKUserIdentity.LookupInfo]\nReturns an array of lookup infos for the specifed user record IDs.\nAccessing the Criteria\nvar emailAddress: String?\nThe user’s email address.\nvar phoneNumber: String?\nThe user’s phone number.\nvar userRecordID: CKRecord.ID?\nThe ID of the user record.\nRelationships\nInherits From\nNSObject\nConforms To\nNSCopying\nNSSecureCoding\nSendable\nSee Also\nAccessing iCloud Information\nvar hasiCloudAccount: Bool\nA Boolean value that indicates whether the user has an iCloud account.\nvar lookupInfo: CKUserIdentity.LookupInfo?\nThe lookup info for retrieving the user identity."
  },
  {
    "title": "fetchAllChanges | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckfetchdatabasechangesoperation/1640473-fetchallchanges",
    "html": "Discussion\n\nIf true, the operation sends repeat requests to the server until it fetches all changes. CloudKit executes the handler you set on the changeTokenUpdatedBlock property with a change token after each request.\n\nThe default value is true.\n\nSee Also\nConfiguring the Operation\nvar previousServerChangeToken: CKServerChangeToken?\nThe server change token.\nvar resultsLimit: Int\nThe maximum number of results that the operation fetches."
  },
  {
    "title": "CKSyncEngineFetchChangesContext | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncenginefetchchangescontext",
    "html": "Topics\nInstance Properties\noptions\nreason\nRelationships\nInherits From\nNSObject"
  },
  {
    "title": "CKContainer.ApplicationPermissionStatus.denied | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckcontainer/applicationpermissionstatus/denied",
    "html": "See Also\nPermission Statuses\ncase initialState\nThe app is yet to request the permission.\nDeprecated\ncase couldNotComplete\nAn error that occurs while processing the permission request.\nDeprecated\ncase granted\nThe user grants the permission.\nDeprecated"
  },
  {
    "title": "CKContainer.ApplicationPermissionStatus.couldNotComplete | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckcontainer/applicationpermissionstatus/couldnotcomplete",
    "html": "See Also\nPermission Statuses\ncase initialState\nThe app is yet to request the permission.\nDeprecated\ncase denied\nThe user denies the permission.\nDeprecated\ncase granted\nThe user grants the permission.\nDeprecated"
  },
  {
    "title": "defaultZoneName | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckrecordzone/id/3003397-defaultzonename",
    "html": "See Also\nAccessing the Default Zone\nstatic let `default`: CKRecordZone.ID\nThe default zone ID."
  },
  {
    "title": "CKAccountStatus.available | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckaccountstatus/available",
    "html": "See Also\nAccount Statuses\ncase couldNotDetermine\nCloudKit can’t determine the status of the user’s iCloud account.\ncase noAccount\nThe device doesn’t have an iCloud account.\ncase restricted\nThe system denies access to the user’s iCloud account.\ncase temporarilyUnavailable\nThe user’s iCloud account is temporarily unavailable."
  },
  {
    "title": "init(zoneName:ownerName:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckrecordzone/id/1508089-init",
    "html": "Parameters\nzoneName\n\nThe name that identifies the record zone. Zone names consist of up to 255 ASCII characters, and don’t start with an underscore. To specify the default zone of the current database, use defaultZoneName. This parameter must not be nil or an empty string.\n\nownerName\n\nThe user who creates the record zone. To specify the current user, use CKCurrentUserDefaultName. If you provide nil or an empty string for this parameter, the method throws an exception.\n\nReturn Value\n\nA new record zone ID, or nil if CloudKit can’t create the record zone ID."
  },
  {
    "title": "default | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckrecordzone/id/3003396-default",
    "html": "See Also\nAccessing the Default Zone\nstatic let defaultZoneName: String\nThe name of the default zone."
  },
  {
    "title": "zoneName | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckrecordzone/id/1508094-zonename",
    "html": "See Also\nGetting the Record Zone ID Attributes\nvar ownerName: String\nThe ID of the user who owns the record zone."
  },
  {
    "title": "ownerName | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckrecordzone/id/1508096-ownername",
    "html": "See Also\nGetting the Record Zone ID Attributes\nvar zoneName: String\nThe unique name of the record zone."
  },
  {
    "title": "container | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckoperation/configuration/2866232-container",
    "html": "Discussion\n\nIf you don’t provide a container, CloudKit uses the default container that CKContainer provides.\n\nSee Also\nPreparing a Configuration\nvar allowsCellularAccess: Bool\nA Boolean value that indicates whether operations that use this configuration can send data over the cellular network.\nvar isLongLived: Bool\nA Boolean value that indicates whether the operations that use this configuration are long-lived.\nvar qualityOfService: QualityOfService\nThe priority that the system uses when it allocates resources to the operations that use this configuration.\nvar timeoutIntervalForRequest: TimeInterval\nThe maximum amount of time that a request can take.\nvar timeoutIntervalForResource: TimeInterval\nThe maximum amount of time that a resource request can take."
  },
  {
    "title": "alertActionLocalizationKey | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksubscription/notificationinfo/1514945-alertactionlocalizationkey",
    "html": "Discussion\n\nSet this property’s value to have the system use a localized string for the text of the notification’s button that opens your app. The system uses the key to find the matching string in your app’s Localizable.string file.\n\nIf this property’s value is nil, the system displays a single button to dismiss the alert.\n\nFor information about localizing string resources, see Internationalization and Localization Guide.\n\nSee Also\nAccessing the Notification Alert\nvar alertBody: String?\nThe text for the notification’s alert.\nvar alertLocalizationKey: String?\nThe key that identifies the localized string for the notification’s alert.\nvar alertLocalizationArgs: [CKRecord.FieldKey]?\nThe fields for building a notification’s alert.\nvar alertLaunchImage: String?\nThe filename of an image to use as a launch image.\nvar soundName: String?\nThe filename of the sound file to play when a notification arrives."
  },
  {
    "title": "subtitleLocalizationArgs | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksubscription/notificationinfo/2869869-subtitlelocalizationargs",
    "html": "Discussion\n\nThis property is an array of field names that CloudKit uses to extract the corresponding values from the record that triggers the push notification. The values must be strings, numbers, or dates. Don’t specify keys that use other value types. CloudKit may truncate strings with a length greater than 100 characters when it adds them to a notification’s payload.\n\nIf you use %@ for your substitution variables, CloudKit replaces those variables by traversing the array in order. If you use variables of the form %n$@, where n is an integer, n represents the index (starting at 1) of the item in the array to use. So, the first item in the array replaces the variable %1$@, the second item replaces the variable %2$@, and so on. You can use indexed substitution variables to change the order of items in the resulting string, which might be necessary when you localize your app’s content.\n\nSee Also\nAccessing the Notification Subtitle\nvar subtitle: String?\nThe notification’s subtitle.\nvar subtitleLocalizationKey: String?\nThe key that identifies the localized string for the notification’s subtitle."
  },
  {
    "title": "subtitle | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksubscription/notificationinfo/2869863-subtitle",
    "html": "Discussion\n\nCloudKit uses this value to set the subtitle push notification property. If you set subtitleLocalizationKey, CloudKit ignores this value.\n\nSee Generating a remote notification for more details about push notification properties.\n\nSee Also\nAccessing the Notification Subtitle\nvar subtitleLocalizationKey: String?\nThe key that identifies the localized string for the notification’s subtitle.\nvar subtitleLocalizationArgs: [CKRecord.FieldKey]?\nThe fields for building a notification’s subtitle."
  },
  {
    "title": "subtitleLocalizationKey | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksubscription/notificationinfo/2869864-subtitlelocalizationkey",
    "html": "Discussion\n\nCloudKit uses this value to set the subtitle-loc-key push notification property. Setting this property overrides any value in subtitle.\n\nSee Generating a remote notification for more details about push notification properties.\n\nSee Also\nAccessing the Notification Subtitle\nvar subtitle: String?\nThe notification’s subtitle.\nvar subtitleLocalizationArgs: [CKRecord.FieldKey]?\nThe fields for building a notification’s subtitle."
  },
  {
    "title": "init(alertBody:alertLocalizationKey:alertLocalizationArgs:title:titleLocalizationKey:titleLocalizationArgs:subtitle:subtitleLocalizationKey:subtitleLocalizationArgs:alertActionLocalizationKey:alertLaunchImage:soundName:desiredKeys:shouldBadge:shouldSendContentAvailable:shouldSendMutableContent:category:collapseIDKey:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksubscription/notificationinfo/3003606-init",
    "html": "Parameters\nalertBody\n\nThe text for the notification’s alert.\n\nalertLocalizationKey\n\nThe key that identifies the localized string for the notification’s alert.\n\nalertLocalizationArgs\n\nThe fields for building a notification’s alert.\n\ntitle\n\nThe notification’s title.\n\ntitleLocalizationKey\n\nThe key that identifies the localized string for the notification’s title.\n\ntitleLocalizationArgs\n\nThe fields for building a notification’s title.\n\nsubtitle\n\nThe notification’s subtitle.\n\nsubtitleLocalizationKey\n\nThe key that identifies the localized string for the notification’s subtitle.\n\nsubtitleLocalizationArgs\n\nThe fields for building a notification’s subtitle.\n\nalertActionLocalizationKey\n\nThe key that identifies the localized string for the notification’s action.\n\nalertLaunchImage\n\nThe filename of an image to use as a launch image.\n\nsoundName\n\nThe filename of the sound file to play when a notification arrives.\n\ndesiredKeys\n\nThe names of fields to include in the push notification’s payload.\n\nshouldBadge\n\nA Boolean value that determines whether an app’s icon badge increments its value.\n\nshouldSendContentAvailable\n\nA Boolean value that indicates whether the push notification includes the content available flag.\n\nshouldSendMutableContent\n\nA Boolean value that indicates whether the push notification includes the content available flag.\n\ncategory\n\nThe name of the action group that corresponds to this notification.\n\ncollapseIDKey\n\nThe value that the system uses to coalesce unseen push notifications.\n\nDiscussion\n\nSee the corresponding properties for more details about each parameter."
  },
  {
    "title": "title | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksubscription/notificationinfo/2869870-title",
    "html": "Discussion\n\nCloudKit uses this value to set the title push notification property.\n\nSee Generating a remote notification for more detail about push notification properties.\n\nSee Also\nAccessing the Notification Title\nvar titleLocalizationKey: String?\nThe key that identifies the localized string for the notification’s title.\nvar titleLocalizationArgs: [CKRecord.FieldKey]?\nThe fields for building a notification’s title."
  },
  {
    "title": "titleLocalizationArgs | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksubscription/notificationinfo/2869866-titlelocalizationargs",
    "html": "Discussion\n\nThis property is an array of field names that CloudKit uses to extract the corresponding values from the record that triggers the push notification. The values must be strings, numbers, or dates. Don’t specify keys that use other value types. CloudKit may truncate strings with a length greater than 100 characters when it adds them to a notification’s payload.\n\nIf you use %@ for your substitution variables, CloudKit replaces those variables by traversing the array in order. If you use variables of the form %n$@, where n is an integer, n represents the index (starting at 1) of the item in the array to use. So, the first item in the array replaces the variable %1$@, the second item replaces the variable %2$@, and so on. You can use indexed substitution variables to change the order of items in the resulting string, which might be necessary when you localize your app’s content.\n\nSee Also\nAccessing the Notification Title\nvar title: String?\nThe notification’s title.\nvar titleLocalizationKey: String?\nThe key that identifies the localized string for the notification’s title."
  },
  {
    "title": "soundName | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksubscription/notificationinfo/1514987-soundname",
    "html": "Discussion\n\nIf you specify a value, the system uses it to locate a sound file in the app’s bundle. The sound plays when the system receives a push notification. If the system can’t find the specified file, or if you use the string default, the system plays the default sound.\n\nSee Also\nAccessing the Notification Alert\nvar alertBody: String?\nThe text for the notification’s alert.\nvar alertLocalizationKey: String?\nThe key that identifies the localized string for the notification’s alert.\nvar alertLocalizationArgs: [CKRecord.FieldKey]?\nThe fields for building a notification’s alert.\nvar alertActionLocalizationKey: String?\nThe key that identifies the localized string for the notification’s action.\nvar alertLaunchImage: String?\nThe filename of an image to use as a launch image."
  },
  {
    "title": "titleLocalizationKey | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksubscription/notificationinfo/2869865-titlelocalizationkey",
    "html": "Discussion\n\nCloudKit uses this value to set the title-loc-key push notification property.\n\nSee Generating a remote notification for more details about push notification properties.\n\nSee Also\nAccessing the Notification Title\nvar title: String?\nThe notification’s title.\nvar titleLocalizationArgs: [CKRecord.FieldKey]?\nThe fields for building a notification’s title."
  },
  {
    "title": "alertLaunchImage | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksubscription/notificationinfo/1515075-alertlaunchimage",
    "html": "Discussion\n\nIf you specify a value, the system uses it to locate an image in the app’s bundle, and displays it as a launch image when the user launches the app after receiving a push notification.\n\nSee Also\nAccessing the Notification Alert\nvar alertBody: String?\nThe text for the notification’s alert.\nvar alertLocalizationKey: String?\nThe key that identifies the localized string for the notification’s alert.\nvar alertLocalizationArgs: [CKRecord.FieldKey]?\nThe fields for building a notification’s alert.\nvar alertActionLocalizationKey: String?\nThe key that identifies the localized string for the notification’s action.\nvar soundName: String?\nThe filename of the sound file to play when a notification arrives."
  },
  {
    "title": "shouldSendMutableContent | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksubscription/notificationinfo/2868500-shouldsendmutablecontent",
    "html": "Discussion\n\nWhen this property is true, the server includes the mutable-content flag with a value of 1 in the push notification’s payload. When the value is 1, the system passes the notification to your app extension for modification before delivery.\n\nSee Generating a remote notification for more information about the mutable-content flag, and Modifying content in newly delivered notifications for information about how to modify push notifiction content in your app extension prior to delivery.\n\nThe default value of this property is false.\n\nSee Also\nAccessing the Notification Info\nvar shouldSendContentAvailable: Bool\nA Boolean value that indicates whether the push notification includes the content available flag."
  },
  {
    "title": "alertLocalizationArgs | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksubscription/notificationinfo/3003644-alertlocalizationargs",
    "html": "Discussion\n\nThis property is an array of fields that CloudKit uses to extract the corresponding values from the record that triggers the push notification. The values must be strings, numbers, or dates. Don’t specify keys that use other value types. CloudKit may truncate strings with a length greater than 100 characters when it adds them to a notification’s payload.\n\nIf you use %@ for your substitution variables, CloudKit replaces those variables by traversing the array in order. If you use variables of the form %n$@, where n is an integer, n represents the index (starting at 1) of the item in the array to use. So, the first item in the array replaces the variable %1$@, the second item replaces the variable %2$@, and so on. You can use indexed substitution variables to change the order of items in the resulting string, which might be necessary when you localize your app’s content.\n\nSee Also\nAccessing the Notification Alert\nvar alertBody: String?\nThe text for the notification’s alert.\nvar alertLocalizationKey: String?\nThe key that identifies the localized string for the notification’s alert.\nvar alertActionLocalizationKey: String?\nThe key that identifies the localized string for the notification’s action.\nvar alertLaunchImage: String?\nThe filename of an image to use as a launch image.\nvar soundName: String?\nThe filename of the sound file to play when a notification arrives."
  },
  {
    "title": "subscriptionID | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksubscription/3003607-subscriptionid",
    "html": "Discussion\n\nThis property’s value is the subscription ID that you provide to the init(recordType:predicate:subscriptionID:options:) or init(zoneID:subscriptionID:options:) methods when you create the subscription. If you use a different method to create the subscription, CloudKit automatically assigns a UUID as the subscription ID.\n\nSee Also\nAccessing the Subscription Metadata\ntypealias CKSubscription.ID\nA type that represents a subscription’s identifier.\nvar subscriptionType: CKSubscription.SubscriptionType\nThe behavior that a subscription provides.\nenum CKSubscription.SubscriptionType\nConstants that identify a subscription’s behavior."
  },
  {
    "title": "recordType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckquerysubscription/3003601-recordtype",
    "html": "Discussion\n\nThis property only applies to query-based subscriptions. CloudKit sets its value when you create the subscription. For all other types of subscription, CloudKit ignores this property and sets its value to nil.\n\nSee Also\nAccessing the Subscription Metadata\nvar zoneID: CKRecordZone.ID?\nThe ID of the record zone that the subscription queries."
  },
  {
    "title": "CKQuerySubscription.Options | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckquerysubscription/options",
    "html": "Topics\nCreating Query Subscription Options\ninit(rawValue: UInt)\nCreates a query subscription option using the specified raw value.\nAccessing Subscription Options\nstatic var firesOnRecordCreation: CKQuerySubscription.Options\nAn option that instructs CloudKit to send a push notification when it creates a record that matches a subscription’s criteria.\nstatic var firesOnRecordDeletion: CKQuerySubscription.Options\nAn option that instructs CloudKit to send a push notification when it deletes a record that matches a subscription’s criteria.\nstatic var firesOnRecordUpdate: CKQuerySubscription.Options\nAn option that instructs CloudKit to send a push notification when it modifies a record that matches a subscription’s criteria.\nstatic var firesOnce: CKQuerySubscription.Options\nAn option that instructs CloudKit to send a push notification only once.\nRelationships\nConforms To\nOptionSet\nSendable\nSee Also\nAccessing the Subscription Search Parameters\nvar predicate: NSPredicate\nThe matching criteria to apply to records.\nvar querySubscriptionOptions: CKQuerySubscription.Options\nOptions that define the behavior of the subscription."
  },
  {
    "title": "predicate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckquerysubscription/1640485-predicate",
    "html": "Discussion\n\nA query-based subscription uses its search predicate to identify potential matches for records. It combines the predicate information with the value in the querySubscriptionOptions property to determine when to send a push notification to the app.\n\nThe search predicate defines the records that the subscription object monitors for changes. The system only uses the property’s value when the subscriptionType property is CKSubscription.SubscriptionType.query. Otherwise, the system ignores it.\n\nSee Also\nAccessing the Subscription Search Parameters\nvar querySubscriptionOptions: CKQuerySubscription.Options\nOptions that define the behavior of the subscription.\nstruct CKQuerySubscription.Options\nConfiguration options for a query subscription."
  },
  {
    "title": "zoneID | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckquerysubscription/1640390-zoneid",
    "html": "Discussion\n\nThis property applies to query-based subscriptions and zone-based subscriptions. Specifying a record zone ID limits the scope of the query to only the records in that zone. For zone-based subscriptions, the query includes all records in the specified record zone. For a query-based subscription, the query includes only records of a specific type in the specified record zone.\n\nFor zone-based subscriptions, CloudKit sets this property’s value automatically. For all other subscription types, the default value is nil. If you want to scope your query-based subscription to a specific record zone, you must assign a value explicitly.\n\nSee Also\nAccessing the Subscription Metadata\nvar recordType: CKRecord.RecordType?\nThe type of record that the subscription queries."
  },
  {
    "title": "init(recordType:predicate:subscriptionID:options:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckquerysubscription/3003600-init",
    "html": "Parameters\nrecordType\n\nThe record’s type. You’re responsible for defining your app’s record types.\n\npredicate\n\nThe predicate that identifies the records for inclusion in the subscription. For information about the operators that predicates support, see the discussion in CKQuery.\n\nsubscriptionID\n\nThe subscription’s name. It must be unique in the target database, and must not be an empty string.\n\nquerySubscriptionOptions\n\nA bitmask of configuration options. See CKQuerySubscription.Options for more information.\n\nDiscussion\n\nThe subscription that this method returns is a query-based subscription with a scope that includes all of the user’s record zones. When CloudKit modifies a record that matches the specified type and predicate, it uses querySubscriptionOptions to determine whether to send a push notification.\n\nSee Also\nCreating a Subscription\ninit(coder: NSCoder)\nCreates a query-based subscription from a serialized instance."
  },
  {
    "title": "init(coder:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckquerysubscription/3547081-init",
    "html": "Parameters\naDecoder\n\nThe coder for decoding the serialized query subscription.\n\nSee Also\nCreating a Subscription\ninit(recordType: CKRecord.RecordType, predicate: NSPredicate, subscriptionID: CKSubscription.ID, options: CKQuerySubscription.Options)\nCreates a named query-based subscription that queries records of a specific type."
  },
  {
    "title": "querySubscriptionOptions | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckquerysubscription/1640414-querysubscriptionoptions",
    "html": "Discussion\n\nSet the value of this property at initialization time. When you configure a query-based subscription, use one of the following values:\n\nfiresOnRecordCreation\n\nfiresOnRecordUpdate\n\nfiresOnRecordDeletion\n\nIf you don’t set an option, the system throws an invalidArgumentException.\n\nSee Also\nAccessing the Subscription Search Parameters\nvar predicate: NSPredicate\nThe matching criteria to apply to records.\nstruct CKQuerySubscription.Options\nConfiguration options for a query subscription."
  },
  {
    "title": "fetchSubscriptionCompletionBlock | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckfetchsubscriptionsoperation/3003594-fetchsubscriptioncompletionblock",
    "html": "Discussion\n\nThe closure returns no value and takes the following parameters:\n\nA dictionary with keys that are the IDs of the subscriptions you request, and values that are the corresponding subscriptions.\n\nAn error that contains information about a problem, or nil if the system successfully fetches the subscriptions.\n\nThe operation executes this closure only once, and it’s your only opportunity to process the results. The closure must be capable of executing on a background queue, so any tasks that require access to the main queue must redirect accordingly.\n\nThe closure reports an error of type CKError.Code.partialFailure when it retrieves only some of the subscriptions successfully. The userInfo dictionary of the error contains a CKPartialErrorsByItemIDKey key that has a dictionary as its value. The keys of the dictionary are the IDs of the subscriptions that the operation can’t fetch, and the corresponding values are errors that contain information about the failures.\n\nSet this property’s value before you execute the operation or submit it to a queue."
  },
  {
    "title": "standard | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckallowedsharingoptions/3950951-standard",
    "html": "Discussion\n\nThe standardOptions has allowedParticipantPermissionOptions set to CKSharingParticipantPermissionOptionAny and allowedParticipantAccessOptions set to CKSharingParticipantAccessOptionAny."
  },
  {
    "title": "init(allowedParticipantPermissionOptions:allowedParticipantAccessOptions:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckallowedsharingoptions/3950950-init",
    "html": "Parameters\nallowedParticipantPermissionOptions\n\nThe CKSharingParticipantPermissionOption setting.\n\nallowedParticipantAccessOptions\n\nThe CKSharingParticipantAccessOption setting."
  },
  {
    "title": "CKShare.SystemFieldKey | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckshare/systemfieldkey",
    "html": "Topics\nConstants\nstatic let shareType: CKRecord.FieldKey\nThe system field key for the share’s type.\nstatic let title: CKRecord.FieldKey\nThe system field key for the share’s title.\nstatic let thumbnailImageData: CKRecord.FieldKey\nThe system field key for the share’s thumbnail image data."
  },
  {
    "title": "suggestedFileName(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksharetransferrepresentation/4043461-suggestedfilename",
    "html": "Parameters\nfileName\n\nThe suggested filename, including the filename extension.\n\nReturn Value\n\nThe CKShareTransferRepresentation to write to storage.\n\nSee Also\nConfiguring a transfer representation\nfunc exportingCondition((Item) -> Bool) -> _ConditionalTransferRepresentation<CKShareTransferRepresentation<Item>>\nPrevents the system from exporting an item unless it meets the supplied condition.\nfunc visibility(TransferRepresentationVisibility) -> TransferRepresentation<Self>\nSpecifies the kinds of apps and processes that can see an item in transit."
  },
  {
    "title": "CKAccountStatus.noAccount | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckaccountstatus/noaccount",
    "html": "See Also\nAccount Statuses\ncase available\nThe user’s iCloud account is available.\ncase couldNotDetermine\nCloudKit can’t determine the status of the user’s iCloud account.\ncase restricted\nThe system denies access to the user’s iCloud account.\ncase temporarilyUnavailable\nThe user’s iCloud account is temporarily unavailable."
  },
  {
    "title": "CKAccountStatus.temporarilyUnavailable | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckaccountstatus/temporarilyunavailable",
    "html": "Discussion\n\nYou receive this account status when the user’s iCloud account is available, but isn’t ready to support CloudKit operations. Don’t delete any cached data and don’t enqueue any CloudKit operations after receipt of this account status. Instead, use the CKAccountChanged notification to listen for when the status changes to CKAccountStatus.available.\n\nSee Also\nAccount Statuses\ncase available\nThe user’s iCloud account is available.\ncase couldNotDetermine\nCloudKit can’t determine the status of the user’s iCloud account.\ncase noAccount\nThe device doesn’t have an iCloud account.\ncase restricted\nThe system denies access to the user’s iCloud account."
  },
  {
    "title": "init(rawValue:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckcontainer/applicationpermissions/1514941-init",
    "html": "Parameters\nrawValue\n\nA bitmask of the permissions."
  },
  {
    "title": "userIdentityLookupInfos | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckdiscoveruseridentitiesoperation/1640450-useridentitylookupinfos",
    "html": "Discussion\n\nUse this property to view or change the lookup info that CloudKit uses to discover user identities. If you intend to modify this property’s value, do so before you execute the operation or submit it to a queue."
  },
  {
    "title": "init(userIdentityLookupInfos:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckdiscoveruseridentitiesoperation/1640521-init",
    "html": "Parameters\nuserIdentityLookupInfos\n\nAn array that contains instances of CKUserIdentity.LookupInfo. CloudKit uses this parameter as the default value for the userIdentityLookupInfos property. If you specify nil, you must assign a value to that property before you execute the operation.\n\nDiscussion\n\nAfter you create the operation, assign a handler to discoverUserIdentitiesCompletionBlock so that you can process the search results.\n\nSee Also\nCreating an Operation\ninit()\nCreates an operation for discovering user identities.\nDeprecated"
  },
  {
    "title": "init() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckdiscoveruseridentitiesoperation/1640525-init",
    "html": "Discussion\n\nYou can use the operation only once. Create a new operation for each subsequent search.\n\nSee Also\nCreating an Operation\ninit(userIdentityLookupInfos: [CKUserIdentity.LookupInfo])\nCreates an operation for discovering the user identities of the specified lookup infos.\nDeprecated"
  },
  {
    "title": "permission | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckshare/participant/1640433-permission",
    "html": "Discussion\n\nThis property controls the permissions that the participant has for the share. For a list of possible values, see CKShare.ParticipantPermission.\n\nSee Also\nManaging the Participant's Capabilites\ntypealias CKShare.Participant.Permission\nA type that represents the permissions for a participant.\nDeprecated\nenum CKShare.ParticipantPermission\nConstants that represent the permissions to grant to a share participant.\nvar role: CKShare.ParticipantRole\nThe participant’s role for the share.\ntypealias CKShare.Participant.Role\nA type that represents the role for a participant.\nDeprecated\nenum CKShare.ParticipantRole\nConstants that represent the role of a share’s participant."
  },
  {
    "title": "CKShare.ParticipantRole | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckshare/participantrole",
    "html": "Topics\nRoles\ncase owner\nThe participant is the share’s owner.\ncase privateUser\nThe participant has the private role.\ncase publicUser\nThe participant has the public role.\ncase unknown\nThe participant’s role is unknown.\nRelationships\nConforms To\nSendable\nSee Also\nManaging the Participant's Capabilites\nvar permission: CKShare.ParticipantPermission\nThe participant’s permission level for the share.\ntypealias CKShare.Participant.Permission\nA type that represents the permissions for a participant.\nDeprecated\nenum CKShare.ParticipantPermission\nConstants that represent the permissions to grant to a share participant.\nvar role: CKShare.ParticipantRole\nThe participant’s role for the share.\ntypealias CKShare.Participant.Role\nA type that represents the role for a participant.\nDeprecated"
  },
  {
    "title": "CKShare.Participant.Permission | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckshare/participant/permission",
    "html": "See Also\nManaging the Participant's Capabilites\nvar permission: CKShare.ParticipantPermission\nThe participant’s permission level for the share.\nenum CKShare.ParticipantPermission\nConstants that represent the permissions to grant to a share participant.\nvar role: CKShare.ParticipantRole\nThe participant’s role for the share.\ntypealias CKShare.Participant.Role\nA type that represents the role for a participant.\nDeprecated\nenum CKShare.ParticipantRole\nConstants that represent the role of a share’s participant."
  },
  {
    "title": "role | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckshare/participant/2980667-role",
    "html": "See Also\nManaging the Participant's Capabilites\nvar permission: CKShare.ParticipantPermission\nThe participant’s permission level for the share.\ntypealias CKShare.Participant.Permission\nA type that represents the permissions for a participant.\nDeprecated\nenum CKShare.ParticipantPermission\nConstants that represent the permissions to grant to a share participant.\ntypealias CKShare.Participant.Role\nA type that represents the role for a participant.\nDeprecated\nenum CKShare.ParticipantRole\nConstants that represent the role of a share’s participant."
  },
  {
    "title": "CKShare.ParticipantAcceptanceStatus | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckshare/participantacceptancestatus",
    "html": "Topics\nConstants\ncase unknown\nThe participant’s status is unknown.\ncase pending\nThe participant’s acceptance of the share request is pending.\ncase accepted\nThe participant accepted the share request.\ncase removed\nThe system removed the participant from the share.\nRelationships\nConforms To\nSendable\nSee Also\nAccessing the Participant’s Status\nvar acceptanceStatus: CKShare.ParticipantAcceptanceStatus\nThe current state of the user’s acceptance of the share.\ntypealias CKShare.Participant.AcceptanceStatus\nA type that represents the acceptance status of the participant.\nDeprecated"
  },
  {
    "title": "share | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckshare/metadata/1640412-share",
    "html": "See Also\nAccessing the Share\nvar containerIdentifier: String\nThe ID of the share’s container.\nvar ownerIdentity: CKUserIdentity\nThe identity of the share’s owner."
  },
  {
    "title": "participantPermission | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckshare/metadata/1640483-participantpermission",
    "html": "See Also\nAccessing the Participant’s Capabilities\nvar participantRole: CKShare.ParticipantRole\nThe share’s participant role for the user who retrieves the metadata.\nvar participantStatus: CKShare.ParticipantAcceptanceStatus\nThe share’s participation status for the user who retrieves the metadata.\nvar participantType: CKShare.ParticipantType\nThe share’s participation type for the user who retrieves the metadata.\nDeprecated"
  },
  {
    "title": "hierarchicalRootRecordID | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckshare/metadata/3793709-hierarchicalrootrecordid",
    "html": "Discussion\n\nCloudKit populates this property only for metadata that belongs to a shared record hierarchy. If the metadata is part of a shared record zone, the property is nil. This is because, unlike a shared record hierarchy, a shared record zone doesn’t have a nominated root record.\n\nSee Also\nAccessing the Root Record\nvar rootRecord: CKRecord?\nThe share’s root record.\nvar rootRecordID: CKRecord.ID\nThe record ID of the share’s root record.\nDeprecated"
  },
  {
    "title": "init(shareURLs:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckfetchsharemetadataoperation/1640495-init",
    "html": "Parameters\nshareURLs\n\nThe URLs of the shares. If you specify nil, you must assign a value to the shareURLs property before you execute the operation.\n\nDiscussion\n\nAfter creating the operation, assign a handler to the fetchShareMetadataCompletionBlock property to process the results.\n\nSee Also\nCreating an Operation\ninit()\nCreates an empty fetch share metadata operation."
  },
  {
    "title": "shouldFetchRootRecord | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckfetchsharemetadataoperation/1640519-shouldfetchrootrecord",
    "html": "Discussion\n\nFor a shared record hierarchy, set this property to true to include the root record in the fetched share metadata. CloudKit ignores this property for a shared record zone because, unlike a shared record hierarchy, it doesn’t have a nominated root record.\n\nThe default value is false.\n\nSee Also\nConfiguring the Operation\nvar shareURLs: [URL]?\nThe URLs of the shares to fetch."
  },
  {
    "title": "shareURLs | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckfetchsharemetadataoperation/1640508-shareurls",
    "html": "Discussion\n\nUse this property to view or change the URLs of the shares to fetch. If you intend to specify or change this property’s value, do so before you execute the operation or submit it to a queue.\n\nSee Also\nConfiguring the Operation\nvar shouldFetchRootRecord: Bool\nA Boolean value that indicates whether to retrieve the root record."
  },
  {
    "title": "init() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckfetchsharemetadataoperation/2715836-init",
    "html": "See Also\nCreating an Operation\ninit(shareURLs: [URL])\nCreates an operation for fetching the metadata for the specified shares."
  },
  {
    "title": "containerIdentifier | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckshare/metadata/1640400-containeridentifier",
    "html": "See Also\nAccessing the Share\nvar share: CKShare\nThe share that owns the metadata.\nvar ownerIdentity: CKUserIdentity\nThe identity of the share’s owner."
  },
  {
    "title": "category | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cknotification/1428107-category",
    "html": "Discussion\n\nCategories allow you to present custom actions to the user on your push notifications. For more information, see UIMutableUserNotificationCategory.\n\nSee Also\nAccessing the Notification Info\nvar alertBody: String?\nThe notification’s alert body.\nDeprecated\nvar alertLocalizationKey: String?\nThe key that identifies the localized text for the alert body.\nDeprecated\nvar alertLocalizationArgs: [String]?\nThe fields for building a notification’s alert.\nDeprecated\nvar alertActionLocalizationKey: String?\nThe key that identifies the localized string for the notification’s action.\nDeprecated\nvar alertLaunchImage: String?\nThe filename of an image to use as a launch image.\nDeprecated\nvar soundName: String?\nThe name of the sound file to play when a notification arrives.\nDeprecated\nvar badge: NSNumber?\nThe value that the app icon’s badge displays.\nDeprecated\nvar subscriptionID: CKSubscription.ID?\nThe ID of the subscription that triggers the notification.\nvar subscriptionOwnerUserRecordID: CKRecord.ID?\nThe ID of the user record that creates the subscription that generates the push notification.\nvar title: String?\nThe notification’s title.\nDeprecated\nvar titleLocalizationKey: String?\nThe key that identifies the localized string for the notification’s title.\nDeprecated\nvar titleLocalizationArgs: [String]?\nThe fields for building a notification’s title.\nDeprecated\nvar subtitle: String?\nThe notification’s subtitle.\nDeprecated\nvar subtitleLocalizationKey: String?\nThe key that identifies the localized string for the notification’s subtitle.\nDeprecated\nvar subtitleLocalizationArgs: [String]?\nThe fields for building a notification’s subtitle.\nDeprecated"
  },
  {
    "title": "shareMetadatas | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckacceptsharesoperation/1823508-sharemetadatas",
    "html": "Discussion\n\nUse this property to view or change the metadata of the shares you want to process. If you intend to specify or change the value of this property, do so before you execute the operation or submit it to a queue.\n\nSee Also\nProcessing the Share Accept Results\nvar perShareCompletionBlock: ((CKShare.Metadata, CKShare?, Error?) -> Void)?\nThe block to execute as CloudKit processes individual shares.\nvar acceptSharesCompletionBlock: ((Error?) -> Void)?\nThe closure to execute when the operation finishes."
  },
  {
    "title": "perShareCompletionBlock | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckacceptsharesoperation/1640426-persharecompletionblock",
    "html": "Discussion\n\nThe closure returns no value and takes the following parameters:\n\nThe share metadata to process.\n\nThe share, or nil if CloudKit can’t process the share metadata.\n\nIf CloudKit can’t process the share metadata, this parameter provides information about the failure; otherwise, it’s nil.\n\nThe operation executes this closure once for each element in the shareMetadatas property. Each time the closure executes, it executes serially with respect to the other closures of the operation.\n\nIf you intend to use this closure to process results, set it before you execute the operation or submit the operation to a queue.\n\nSee Also\nProcessing the Share Accept Results\nvar shareMetadatas: [CKShare.Metadata]?\nThe share metadatas to process.\nvar acceptSharesCompletionBlock: ((Error?) -> Void)?\nThe closure to execute when the operation finishes."
  },
  {
    "title": "acceptSharesCompletionBlock | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckacceptsharesoperation/1640442-acceptsharescompletionblock",
    "html": "Discussion\n\nThe closure returns no value and takes the following parameter:\n\nAn error that contains information about a problem, or nil if CloudKit successfully processes the shares.\n\nThe operation executes this closure only once. The closure executes on a background queue, so any tasks that require access to the main queue must dispatch accordingly.\n\nThe closure reports an error of type CKError.Code.partialFailure when it can’t process some of the shares. The userInfo dictionary of the error contains a CKPartialErrorsByItemIDKey key that has a dictionary as its value. The keys of the dictionary are share URLs that CloudKit can’t process, and the corresponding values are errors that contain information about the failures.\n\nSet this property’s value before you execute the operation or submit it to a queue.\n\nSee Also\nProcessing the Share Accept Results\nvar shareMetadatas: [CKShare.Metadata]?\nThe share metadatas to process.\nvar perShareCompletionBlock: ((CKShare.Metadata, CKShare?, Error?) -> Void)?\nThe block to execute as CloudKit processes individual shares."
  },
  {
    "title": "init(shareMetadatas:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckacceptsharesoperation/1823506-init",
    "html": "Parameters\nshareMetadatas\n\nThe share metadatas to accept. If you specify nil, you must assign a value to the shareMetadatas property before you execute the operation.\n\nDiscussion\n\nAfter initializing the operation, assign a handler to the acceptSharesCompletionBlock property to process the results.\n\nSee Also\nCreating a Share Accept Operation\ninit()\nCreates an operation for accepting shares."
  },
  {
    "title": "init() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckqueryoperation/1515115-init",
    "html": "See Also\nCreating a Query Operation\ninit(query: CKQuery)\nCreates an operation that searches for records in the specified record zone.\ninit(cursor: CKQueryOperation.Cursor)\nCreates an operation with additional results from a previous search."
  },
  {
    "title": "CKErrorCode | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckerrorcode",
    "html": "Topics\nError Codes\nCKErrorAccountTemporarilyUnavailable\nAn error that occurs when the user’s iCloud account is temporarily unavailable.\nCKErrorAlreadyShared\nAn error that occurs when CloudKit attempts to share a record with an existing share.\nCKErrorAssetFileModified\nAn error that occurs when the system modifies an asset while saving it.\nCKErrorAssetFileNotFound\nAn error that occurs when the system can’t find the specified asset.\nCKErrorAssetNotAvailable\nAn error that occurs when the system can’t access the specified asset.\nCKErrorBadContainer\nAn error that occurs when you use an unknown or unauthorized container.\nCKErrorBadDatabase\nAn error that occurs when the operation can’t complete for the specified database.\nCKErrorBatchRequestFailed\nAn error that occurs when the system rejects the entire batch of changes.\nCKErrorChangeTokenExpired\nAn error that occurs when the change token expires.\nCKErrorConstraintViolation\nAn error that occurs when the server rejects the request because of a unique constraint violation.\nCKErrorIncompatibleVersion\nAn error that occurs when the current app version is older than the oldest allowed version.\nCKErrorInternalError\nA nonrecoverable error that CloudKit encounters.\nCKErrorInvalidArguments\nAn error that occurs when the request contains invalid information.\nCKErrorLimitExceeded\nAn error that occurs when a request’s size exceeds the limit.\nCKErrorManagedAccountRestricted\nAn error that occurs when CloudKit rejects a request due to a managed-account restriction.\nCKErrorMissingEntitlement\nAn error that occurs when the app is missing a required entitlement.\nCKErrorNetworkFailure\nAn error that occurs when a network is available, but CloudKit is inaccessible.\nCKErrorNetworkUnavailable\nAn error that occurs when the network is unavailable.\nCKErrorNotAuthenticated\nAn error that occurs when the user is unauthenticated.\nCKErrorOperationCancelled\nAn error that occurs when an operation cancels.\nCKErrorPartialFailure\nAn error that occurs when an operation completes with partial failures.\nCKErrorParticipantMayNeedVerification\nAn error that occurs when the user isn’t a participant of the share.\nCKErrorPermissionFailure\nAn error that occurs when the user doesn’t have permission to save or fetch data.\nCKErrorQuotaExceeded\nAn error that occurs when saving a record exceeds the user’s storage quota.\nCKErrorReferenceViolation\nAn error that occurs when CloudKit can’t find the target of a reference.\nCKErrorRequestRateLimited\nAn error that occurs when CloudKit rate-limits requests.\nCKErrorServerRecordChanged\nAn error that occurs when CloudKit rejects a record because the server’s version is different.\nCKErrorServerRejectedRequest\nAn error that occurs when CloudKit rejects the request.\nCKErrorServerResponseLost\nAn error that occurs when CloudKit is unable to maintain the network connection and provide a response.\nCKErrorServiceUnavailable\nAn error that occurs when CloudKit is unavailable.\nCKErrorTooManyParticipants\nAn error that occurs when a share has too many participants.\nCKErrorUnknownItem\nAn error that occurs when the specified record doesn’t exist.\nCKErrorUserDeletedZone\nAn error that occurs when the user deletes a record zone using the Settings app.\nCKErrorZoneBusy\nAn error that occurs when the server is too busy to handle the record zone operation.\nCKErrorZoneNotFound\nAn error that occurs when the specified record zone doesn’t exist.\nCKErrorResultsTruncated\nAn error that occurs when CloudKit truncates a query’s results.\nDeprecated\nSee Also\nErrors\nCKErrorDomain\nThe error domain for CloudKit errors.\nCKErrorRetryAfterKey\nThe key to retrieve the number of seconds to wait before you retry a request.\nCKErrorUserDidResetEncryptedDataKey\nThe key that determines whether CloudKit deletes a record zone because of a user action.\nCKPartialErrorsByItemIDKey\nThe key to retrieve partial errors.\nRecord Changed Error Keys\nConstants that represent conflicting records in a save operation."
  },
  {
    "title": "maximumResults | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckqueryoperation/1515254-maximumresults",
    "html": "Discussion\n\nThe value of this constant doesn’t correspond to the actual number of records. CloudKit dynamically determines the actual number according to various conditions at runtime.\n\nThis constant is the resultsLimit property’s default value.\n\nSee Also\nConfiguring the Query Operation\nvar query: CKQuery?\nThe query for the search.\nvar cursor: CKQueryOperation.Cursor?\nThe cursor for continuing the search.\nclass CKQueryOperation.Cursor\nAn object that marks the stopping point for a query and the starting point for retrieving the remaining results.\nvar zoneID: CKRecordZone.ID?\nThe ID of the record zone that contains the records to search.\nvar resultsLimit: Int\nThe maximum number of records to return at one time.\nvar desiredKeys: [CKRecord.FieldKey]?\nThe fields of the records to fetch."
  },
  {
    "title": "init(previousServerChangeToken:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckfetchdatabasechangesoperation/1640502-init",
    "html": "Parameters\npreviousServerChangeToken\n\nThe change token that CloudKit uses to determine which database changes to return.\n\nDiscussion\n\nAfter creating the operation, assign a handler to the fetchDatabaseChangesCompletionBlock property so that you can process the operation’s results.\n\nIf this is your first fetch, or if you want to refetch all zones, pass nil for the change token. If you provide a change token from a previous CKFetchDatabaseChangesOperation, CloudKit returns only the zones with changes since that token. The per-database CKServerChangeToken isn’t the same as the per-record zone CKServerChangeToken from CKFetchRecordZoneChangesOperation.\n\nSee Also\nCreating an Operation\ninit()\nCreates an empty fetch database changes operation."
  },
  {
    "title": "CKQueryOperation.Cursor | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckqueryoperation/cursor",
    "html": "Overview\n\nYou don’t create instances of this class yourself. When fetching records using a query operation, if the number of results exceeds the limit for the query, CloudKit provides a cursor. Use that cursor to create a new instance of CKQueryOperation and retrieve the next batch of results for the same query.\n\nFor information about how to use a CKQueryOperation.Cursor object, see CKQueryOperation.\n\nRelationships\nInherits From\nNSObject\nConforms To\nNSCopying\nNSSecureCoding\nSendable\nSee Also\nConfiguring the Query Operation\nvar query: CKQuery?\nThe query for the search.\nvar cursor: CKQueryOperation.Cursor?\nThe cursor for continuing the search.\nvar zoneID: CKRecordZone.ID?\nThe ID of the record zone that contains the records to search.\nvar resultsLimit: Int\nThe maximum number of records to return at one time.\nclass let maximumResults: Int\nA constant value that represents the maximum number of results CloudKit retrieves.\nvar desiredKeys: [CKRecord.FieldKey]?\nThe fields of the records to fetch."
  },
  {
    "title": "CKRecordFieldKey | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckrecordfieldkey",
    "html": "See Also\nCreating a Record\n- initWithRecordType:\nCreates a new record of the specified type.\n- initWithRecordType:zoneID:\nCreates a record in the specified zone.\n- initWithRecordType:recordID:\nCreates a record using an ID that you provide.\nCKRecordType\nA data type that CloudKit requires for record types.\nCKRecordTypeShare\nThe system type that identifies a share record.\nCKRecordTypeUserRecord\nThe system type that identifies a user record."
  },
  {
    "title": "CKSyncEngineSendChangesScope | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncenginesendchangesscope",
    "html": "Topics\nInstance Properties\nexcludedZoneIDs\nrecordIDs\nzoneIDs\nInstance Methods\n- containsPendingRecordZoneChange:\n- containsRecordID:\n- initWithExcludedZoneIDs:\n- initWithRecordIDs:\n- initWithZoneIDs:\nRelationships\nInherits From\nNSObject\nConforms To\nNSCopying"
  },
  {
    "title": "CKSyncEngineFetchChangesScope | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncenginefetchchangesscope",
    "html": "Topics\nInstance Properties\nexcludedZoneIDs\nzoneIDs\nInstance Methods\n- containsZoneID:\nBeta\n- initWithExcludedZoneIDs:\n- initWithZoneIDs:\nRelationships\nInherits From\nNSObject\nConforms To\nNSCopying"
  },
  {
    "title": "alertLocalizationArgs | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cknotification/1428105-alertlocalizationargs",
    "html": "Discussion\n\nThis property is an array of field names that CloudKit uses to extract the corresponding values from the record that triggers the push notification. The values are strings, numbers, or dates. CloudKit may truncate strings with a length greater than 100 characters when it adds them to a notification’s payload.\n\nIf you use %@ for your substitution variables, CloudKit replaces those variables by traversing the array in order. If you use variables of the form %n$@, where n is an integer, n represents the index (starting at 1) of the item in the array to use. So, the first item in the array replaces the variable %1$@, the second item replaces the variable %2$@, and so on. You can use indexed substitution variables to change the order of items in the resulting string, which might be necessary when you localize your app’s content.\n\nSee Also\nAccessing the Notification Info\nvar alertBody: String?\nThe notification’s alert body.\nDeprecated\nvar alertLocalizationKey: String?\nThe key that identifies the localized text for the alert body.\nDeprecated\nvar alertActionLocalizationKey: String?\nThe key that identifies the localized string for the notification’s action.\nDeprecated\nvar alertLaunchImage: String?\nThe filename of an image to use as a launch image.\nDeprecated\nvar soundName: String?\nThe name of the sound file to play when a notification arrives.\nDeprecated\nvar badge: NSNumber?\nThe value that the app icon’s badge displays.\nDeprecated\nvar category: String?\nThe name of the action group that corresponds to this notification.\nDeprecated\nvar subscriptionID: CKSubscription.ID?\nThe ID of the subscription that triggers the notification.\nvar subscriptionOwnerUserRecordID: CKRecord.ID?\nThe ID of the user record that creates the subscription that generates the push notification.\nvar title: String?\nThe notification’s title.\nDeprecated\nvar titleLocalizationKey: String?\nThe key that identifies the localized string for the notification’s title.\nDeprecated\nvar titleLocalizationArgs: [String]?\nThe fields for building a notification’s title.\nDeprecated\nvar subtitle: String?\nThe notification’s subtitle.\nDeprecated\nvar subtitleLocalizationKey: String?\nThe key that identifies the localized string for the notification’s subtitle.\nDeprecated\nvar subtitleLocalizationArgs: [String]?\nThe fields for building a notification’s subtitle.\nDeprecated"
  },
  {
    "title": "alertLocalizationKey | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cknotification/1428095-alertlocalizationkey",
    "html": "Discussion\n\nWhen the system delivers a push notification to your app, it gets the text for the alert body by looking up the specified key in your app’s Localizable.strings file. CloudKit ignores the value in alertBody if you set this property.\n\n.\n\nSee Also\nAccessing the Notification Info\nvar alertBody: String?\nThe notification’s alert body.\nDeprecated\nvar alertLocalizationArgs: [String]?\nThe fields for building a notification’s alert.\nDeprecated\nvar alertActionLocalizationKey: String?\nThe key that identifies the localized string for the notification’s action.\nDeprecated\nvar alertLaunchImage: String?\nThe filename of an image to use as a launch image.\nDeprecated\nvar soundName: String?\nThe name of the sound file to play when a notification arrives.\nDeprecated\nvar badge: NSNumber?\nThe value that the app icon’s badge displays.\nDeprecated\nvar category: String?\nThe name of the action group that corresponds to this notification.\nDeprecated\nvar subscriptionID: CKSubscription.ID?\nThe ID of the subscription that triggers the notification.\nvar subscriptionOwnerUserRecordID: CKRecord.ID?\nThe ID of the user record that creates the subscription that generates the push notification.\nvar title: String?\nThe notification’s title.\nDeprecated\nvar titleLocalizationKey: String?\nThe key that identifies the localized string for the notification’s title.\nDeprecated\nvar titleLocalizationArgs: [String]?\nThe fields for building a notification’s title.\nDeprecated\nvar subtitle: String?\nThe notification’s subtitle.\nDeprecated\nvar subtitleLocalizationKey: String?\nThe key that identifies the localized string for the notification’s subtitle.\nDeprecated\nvar subtitleLocalizationArgs: [String]?\nThe fields for building a notification’s subtitle.\nDeprecated"
  },
  {
    "title": "CKNotification.NotificationType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cknotification/notificationtype",
    "html": "Topics\nNotification Types\ncase query\nA notification that CloudKit generates from a query subscription’s predicate.\ncase database\nA notification that CloudKit generates when the contents of a database change.\ncase recordZone\nA notification that CloudKit generates when the contents of a record zone change.\ncase readNotification\nA notification that your app marks as read.\nRelationships\nConforms To\nSendable\nSee Also\nIdentifying the Notification\nvar notificationID: CKNotification.ID?\nThe notification’s ID.\nclass CKNotification.ID\nAn object that uniquely identifies a push notification that a container sends.\nvar notificationType: CKNotification.NotificationType\nThe type of event that generates the notification.\nvar containerIdentifier: String?\nThe ID of the container with the content that triggers the notification."
  },
  {
    "title": "init(subscriptionsToSave:subscriptionIDsToDelete:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckmodifysubscriptionsoperation/3003597-init",
    "html": "Parameters\nsubscriptionsToSave\n\nThe subscriptions to save or update. You can specify nil for this parameter.\n\nsubscriptionIDsToDelete\n\nThe IDs of the subscriptions to delete. You can specify nil for this parameter.\n\nDiscussion\n\nThe subscriptions that you want to save or delete must reside in the same container. CloudKit creates a subscription if you save one that doesn’t already exist. CloudKit returns an error if you try to delete a subscription that doesn’t exist.\n\nSee Also\nCreating a Modify Subscriptions Operation\ninit()\nCreates an empty modify subscriptions operation."
  },
  {
    "title": "recordType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckrecordzonesubscription/3003603-recordtype",
    "html": "Discussion\n\nThis property only applies to query-based subscriptions. CloudKit sets its value when you create the subscription. For all other types of subscription, CloudKit ignores this property and sets its value to nil.\n\nSee Also\nAccessing the Subscription Metadata\nvar zoneID: CKRecordZone.ID\nThe ID of the record zone that the subscription queries."
  },
  {
    "title": "CKFetchRecordZoneChangesOperation.ZoneConfiguration | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckfetchrecordzonechangesoperation/zoneconfiguration",
    "html": "Topics\nCreating a Zone Change Configuration\ninit(previousServerChangeToken: CKServerChangeToken?, resultsLimit: Int?, desiredKeys: [CKRecord.FieldKey]?)\nCreates a zone configuration with the desired keys and a result limit for updates.\nAccessing a Zone Change Configuration\nvar previousServerChangeToken: CKServerChangeToken?\nThe server change token.\nvar resultsLimit: Int\nThe maximum number of records that CloudKit retrieves when fetching zone changes.\nvar desiredKeys: [CKRecord.FieldKey]?\nAn array of the record keys to retrieve.\nRelationships\nInherits From\nNSObject\nConforms To\nNSCopying\nNSSecureCoding\nSendable\nSee Also\nConfiguring the Zone Change Operation\nvar configurationsByRecordZoneID: [CKRecordZone.ID : CKFetchRecordZoneChangesOperation.ZoneConfiguration]?\nA dictionary of configurations for fetching change operations by zone identifier.\nvar fetchAllChanges: Bool\nA Boolean value that indicates whether to send repeated requests to the server.\nvar recordZoneIDs: [CKRecordZone.ID]?\nThe IDs of the record zones that contain the records to fetch."
  },
  {
    "title": "init() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckacceptsharesoperation/1640506-init",
    "html": "Discussion\n\nYou can use this operation only once.\n\nSee Also\nCreating a Share Accept Operation\ninit(shareMetadatas: [CKShare.Metadata])\nCreates an operation for accepting the specified shares."
  },
  {
    "title": "init(userIdentityLookupInfos:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckfetchshareparticipantsoperation/1640471-init",
    "html": "Parameters\nuserIdentityLookupInfos\n\nThe user data for the participants. If you specify nil, you must assign a value to the userIdentityLookupInfos property before you execute this operation.\n\nDiscussion\n\nAfter you create the operation, assign a handler to the fetchShareParticipantsCompletionBlock property to process the results.\n\nSee Also\nCreating an Operation\ninit()\nCreates an empty operation."
  },
  {
    "title": "userIdentity | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckshare/participant/1640488-useridentity",
    "html": "Discussion\n\nThis property contains a reference to the user identity for the share participant."
  },
  {
    "title": "CKShare.ParticipantPermission.none | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckshare/participantpermission/none",
    "html": "See Also\nPermissions\ncase readOnly\nThe participant has read-only permissions for the share.\ncase readWrite\nThe participant has read-and-write permissions for the share.\ncase unknown\nThe participant’s permissions are unknown."
  },
  {
    "title": "shareParticipantFetchedBlock | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckfetchshareparticipantsoperation/1640451-shareparticipantfetchedblock",
    "html": "Discussion\n\nThe closure returns no value and takes the following parameters:\n\nThe participant that the operation generates.\n\nThe operation executes this closure once for each item of user data in the userIdentityLookupInfos property. Each time the closure executes, it executes serially with respect to the other closures of the operation.\n\nIf you intend to use this closure to process results, set it before you execute the operation or submit the operation to a queue.\n\nSee Also\nProcessing the Operation’s Results\nvar fetchShareParticipantsCompletionBlock: ((Error?) -> Void)?\nThe closure to execute when the operation finishes."
  },
  {
    "title": "fetchShareParticipantsCompletionBlock | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckfetchshareparticipantsoperation/1640529-fetchshareparticipantscompletion",
    "html": "Discussion\n\nThe closure returns no value and takes the following parameter:\n\nAn error that contains information about a problem, or nil if CloudKit successfully generates the participants.\n\nThe operation executes this closure only once. The closure executes on a background queue, so any tasks that require access to the main queue must dispatch accordingly.\n\nThe closure reports an error of type CKError.Code.partialFailure when it can’t generate some of the participants. The userInfo dictionary of the error contains a CKPartialErrorsByItemIDKey key that has a dictionary as its value. The keys of the dictionary identify the participants that CloudKit can’t generate, and the corresponding values are errors that contain information about the failures.\n\nSet this property’s value before you execute the operation or submit it to a queue.\n\nSee Also\nProcessing the Operation’s Results\nvar shareParticipantFetchedBlock: ((CKShare.Participant) -> Void)?\nThe closure to execute as the operation generates individual participants.\nDeprecated"
  },
  {
    "title": "CKShare.ParticipantPermission | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckshare/participantpermission",
    "html": "Topics\nPermissions\ncase none\nThe participant doesn’t have any permissions for the share.\ncase readOnly\nThe participant has read-only permissions for the share.\ncase readWrite\nThe participant has read-and-write permissions for the share.\ncase unknown\nThe participant’s permissions are unknown.\nRelationships\nConforms To\nSendable\nSee Also\nManaging the Participant's Capabilites\nvar permission: CKShare.ParticipantPermission\nThe participant’s permission level for the share.\ntypealias CKShare.Participant.Permission\nA type that represents the permissions for a participant.\nDeprecated\nvar role: CKShare.ParticipantRole\nThe participant’s role for the share.\ntypealias CKShare.Participant.Role\nA type that represents the role for a participant.\nDeprecated\nenum CKShare.ParticipantRole\nConstants that represent the role of a share’s participant."
  },
  {
    "title": "participants | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckshare/1640453-participants",
    "html": "Discussion\n\nThe property’s value contains all of the share’s participants that the current user has permissions to see. At a minimum, it includes the share’s owner and the current user.\n\nSee Also\nAccessing the Share’s Attributes\nvar owner: CKShare.Participant\nThe participant that represents the share’s owner.\nvar currentUserParticipant: CKShare.Participant?\nThe participant that represents the current user.\nvar url: URL?\nThe URL for inviting participants to the share."
  },
  {
    "title": "url | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckshare/1640465-url",
    "html": "Discussion\n\nThis property is only available after saving a share record to the server. This URL is stable and persists across shares and reshares of the same root record.\n\nSee Also\nAccessing the Share’s Attributes\nvar owner: CKShare.Participant\nThe participant that represents the share’s owner.\nvar currentUserParticipant: CKShare.Participant?\nThe participant that represents the current user.\nvar participants: [CKShare.Participant]\nAn array that contains the share’s participants."
  },
  {
    "title": "currentUserParticipant | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckshare/1640441-currentuserparticipant",
    "html": "See Also\nAccessing the Share’s Attributes\nvar owner: CKShare.Participant\nThe participant that represents the share’s owner.\nvar participants: [CKShare.Participant]\nAn array that contains the share’s participants.\nvar url: URL?\nThe URL for inviting participants to the share."
  },
  {
    "title": "owner | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckshare/1640503-owner",
    "html": "See Also\nAccessing the Share’s Attributes\nvar currentUserParticipant: CKShare.Participant?\nThe participant that represents the current user.\nvar participants: [CKShare.Participant]\nAn array that contains the share’s participants.\nvar url: URL?\nThe URL for inviting participants to the share."
  },
  {
    "title": "subtitleLocalizationArgs | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cknotification/2868439-subtitlelocalizationargs",
    "html": "Discussion\n\nThis property is an array of field names that CloudKit uses to extract the corresponding values from the record that triggers the push notification. The values are strings, numbers, or dates. CloudKit may truncate strings with a length greater than 100 characters when it adds them to a notification’s payload.\n\nIf you use %@ for your substitution variables, CloudKit replaces those variables by traversing the array in order. If you use variables of the form %n$@, where n is an integer, n represents the index (starting at 1) of the item in the array to use. So, the first item in the array replaces the variable %1$@, the second item replaces the variable %2$@, and so on. You can use indexed substitution variables to change the order of items in the resulting string, which might be necessary when you localize your app’s content.\n\nSee Also\nAccessing the Notification Info\nvar alertBody: String?\nThe notification’s alert body.\nDeprecated\nvar alertLocalizationKey: String?\nThe key that identifies the localized text for the alert body.\nDeprecated\nvar alertLocalizationArgs: [String]?\nThe fields for building a notification’s alert.\nDeprecated\nvar alertActionLocalizationKey: String?\nThe key that identifies the localized string for the notification’s action.\nDeprecated\nvar alertLaunchImage: String?\nThe filename of an image to use as a launch image.\nDeprecated\nvar soundName: String?\nThe name of the sound file to play when a notification arrives.\nDeprecated\nvar badge: NSNumber?\nThe value that the app icon’s badge displays.\nDeprecated\nvar category: String?\nThe name of the action group that corresponds to this notification.\nDeprecated\nvar subscriptionID: CKSubscription.ID?\nThe ID of the subscription that triggers the notification.\nvar subscriptionOwnerUserRecordID: CKRecord.ID?\nThe ID of the user record that creates the subscription that generates the push notification.\nvar title: String?\nThe notification’s title.\nDeprecated\nvar titleLocalizationKey: String?\nThe key that identifies the localized string for the notification’s title.\nDeprecated\nvar titleLocalizationArgs: [String]?\nThe fields for building a notification’s title.\nDeprecated\nvar subtitle: String?\nThe notification’s subtitle.\nDeprecated\nvar subtitleLocalizationKey: String?\nThe key that identifies the localized string for the notification’s subtitle.\nDeprecated"
  },
  {
    "title": "exportingCondition(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksharetransferrepresentation/4043459-exportingcondition",
    "html": "Parameters\ncondition\n\nA closure that determines whether the item is exportable.\n\nReturn Value\n\nA CKShareTransferRepresentation for the item.\n\nSee Also\nConfiguring a transfer representation\nfunc suggestedFileName(String) -> TransferRepresentation<Self>\nProvides a filename to use if the receiver writes the item to storage.\nfunc visibility(TransferRepresentationVisibility) -> TransferRepresentation<Self>\nSpecifies the kinds of apps and processes that can see an item in transit."
  },
  {
    "title": "visibility(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksharetransferrepresentation/4043462-visibility",
    "html": "Parameters\nvisibility\n\nThe TransferRepresentationVisibility level.\n\nReturn Value\n\nThe resulting CKShareTransferRepresentation.\n\nSee Also\nConfiguring a transfer representation\nfunc exportingCondition((Item) -> Bool) -> _ConditionalTransferRepresentation<CKShareTransferRepresentation<Item>>\nPrevents the system from exporting an item unless it meets the supplied condition.\nfunc suggestedFileName(String) -> TransferRepresentation<Self>\nProvides a filename to use if the receiver writes the item to storage."
  },
  {
    "title": "CKShareTransferRepresentation.ExportedShare | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksharetransferrepresentation/exportedshare",
    "html": "Topics\nAccessing share attributes\nstatic var transferRepresentation: TransferRepresentation\nThe representation the system uses to import and export the item.\ntypealias CKShareTransferRepresentation.ExportedShare.Representation\nThe type of the representation the system uses to import and export the item.\nPreparing an exported share\nstatic func existing(CKShare, container: CKContainer, allowedSharingOptions: CKAllowedSharingOptions) -> CKShareTransferRepresentation<Item>.ExportedShare\nAllows the user to view or make modifications to the share settings.\nstatic func prepareShare(container: CKContainer, allowedSharingOptions: CKAllowedSharingOptions, preparationHandler: () -> CKShare) -> CKShareTransferRepresentation<Item>.ExportedShare\nCreates a share when the system calls the specified handler.\nRelationships\nConforms To\nTransferable\nSee Also\nAccessing transfer representation attributes\ntypealias CKShareTransferRepresentation.Body\nThe type of transfer representation for the share item.\nvar body: TransferRepresentation\nThe transfer representation for the share item."
  },
  {
    "title": "body | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksharetransferrepresentation/4043458-body",
    "html": "Relationships\nFrom Protocol\nTransferRepresentation\nSee Also\nAccessing transfer representation attributes\ntypealias CKShareTransferRepresentation.Body\nThe type of transfer representation for the share item.\nstruct CKShareTransferRepresentation.ExportedShare\nAn intermediate structure that returns an existing share or prepares a new one if it doesn’t exist."
  },
  {
    "title": "init(rootRecord:shareID:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckshare/1640381-init",
    "html": "Parameters\nrootRecord\n\nThe record to share.\n\nshareID\n\nThe CKRecord.ID for the share.\n\nDiscussion\n\nWhen saving a newly created CKShare, save the share and its rootRecord in the same CKModifyRecordsOperation batch.\n\nSee Also\nCreating a Share\ninit(coder: NSCoder)\nCreates a share from a serialized instance.\ninit(rootRecord: CKRecord)\nCreates a new share for the specified record.\ninit(recordZoneID: CKRecordZone.ID)\nCreates a new share for the specified record zone."
  },
  {
    "title": "init(rootRecord:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckshare/1640448-init",
    "html": "Parameters\nrootRecord\n\nThe record to share.\n\nDiscussion\n\nWhen saving a newly created CKShare, you must save the share and its rootRecord in the same CKModifyRecordsOperation batch.\n\nSee Also\nCreating a Share\ninit(coder: NSCoder)\nCreates a share from a serialized instance.\ninit(rootRecord: CKRecord, shareID: CKRecord.ID)\nCreates a new share for the specified record and record ID.\ninit(recordZoneID: CKRecordZone.ID)\nCreates a new share for the specified record zone."
  },
  {
    "title": "init(coder:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckshare/1640432-init",
    "html": "Parameters\naDecoder\n\nThe coder to use when deserializing the share.\n\nDiscussion\n\nWhen saving a newly created CKShare, you must save the share and its rootRecord in the same CKModifyRecordsOperation batch.\n\nSee Also\nCreating a Share\ninit(rootRecord: CKRecord)\nCreates a new share for the specified record.\ninit(rootRecord: CKRecord, shareID: CKRecord.ID)\nCreates a new share for the specified record and record ID.\ninit(recordZoneID: CKRecordZone.ID)\nCreates a new share for the specified record zone."
  },
  {
    "title": "subtitle | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cknotification/2868435-subtitle",
    "html": "Discussion\n\nThe system ignores this property if subtitleLocalizationKey has a value.\n\nSee Also\nAccessing the Notification Info\nvar alertBody: String?\nThe notification’s alert body.\nDeprecated\nvar alertLocalizationKey: String?\nThe key that identifies the localized text for the alert body.\nDeprecated\nvar alertLocalizationArgs: [String]?\nThe fields for building a notification’s alert.\nDeprecated\nvar alertActionLocalizationKey: String?\nThe key that identifies the localized string for the notification’s action.\nDeprecated\nvar alertLaunchImage: String?\nThe filename of an image to use as a launch image.\nDeprecated\nvar soundName: String?\nThe name of the sound file to play when a notification arrives.\nDeprecated\nvar badge: NSNumber?\nThe value that the app icon’s badge displays.\nDeprecated\nvar category: String?\nThe name of the action group that corresponds to this notification.\nDeprecated\nvar subscriptionID: CKSubscription.ID?\nThe ID of the subscription that triggers the notification.\nvar subscriptionOwnerUserRecordID: CKRecord.ID?\nThe ID of the user record that creates the subscription that generates the push notification.\nvar title: String?\nThe notification’s title.\nDeprecated\nvar titleLocalizationKey: String?\nThe key that identifies the localized string for the notification’s title.\nDeprecated\nvar titleLocalizationArgs: [String]?\nThe fields for building a notification’s title.\nDeprecated\nvar subtitleLocalizationKey: String?\nThe key that identifies the localized string for the notification’s subtitle.\nDeprecated\nvar subtitleLocalizationArgs: [String]?\nThe fields for building a notification’s subtitle.\nDeprecated"
  },
  {
    "title": "titleLocalizationKey | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cknotification/2868436-titlelocalizationkey",
    "html": "Discussion\n\nThis property takes precedence over title.\n\nSee Also\nAccessing the Notification Info\nvar alertBody: String?\nThe notification’s alert body.\nDeprecated\nvar alertLocalizationKey: String?\nThe key that identifies the localized text for the alert body.\nDeprecated\nvar alertLocalizationArgs: [String]?\nThe fields for building a notification’s alert.\nDeprecated\nvar alertActionLocalizationKey: String?\nThe key that identifies the localized string for the notification’s action.\nDeprecated\nvar alertLaunchImage: String?\nThe filename of an image to use as a launch image.\nDeprecated\nvar soundName: String?\nThe name of the sound file to play when a notification arrives.\nDeprecated\nvar badge: NSNumber?\nThe value that the app icon’s badge displays.\nDeprecated\nvar category: String?\nThe name of the action group that corresponds to this notification.\nDeprecated\nvar subscriptionID: CKSubscription.ID?\nThe ID of the subscription that triggers the notification.\nvar subscriptionOwnerUserRecordID: CKRecord.ID?\nThe ID of the user record that creates the subscription that generates the push notification.\nvar title: String?\nThe notification’s title.\nDeprecated\nvar titleLocalizationArgs: [String]?\nThe fields for building a notification’s title.\nDeprecated\nvar subtitle: String?\nThe notification’s subtitle.\nDeprecated\nvar subtitleLocalizationKey: String?\nThe key that identifies the localized string for the notification’s subtitle.\nDeprecated\nvar subtitleLocalizationArgs: [String]?\nThe fields for building a notification’s subtitle.\nDeprecated"
  },
  {
    "title": "title | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cknotification/2868440-title",
    "html": "Discussion\n\nThe system ignores this property if titleLocalizationKey has a value.\n\nSee Also\nAccessing the Notification Info\nvar alertBody: String?\nThe notification’s alert body.\nDeprecated\nvar alertLocalizationKey: String?\nThe key that identifies the localized text for the alert body.\nDeprecated\nvar alertLocalizationArgs: [String]?\nThe fields for building a notification’s alert.\nDeprecated\nvar alertActionLocalizationKey: String?\nThe key that identifies the localized string for the notification’s action.\nDeprecated\nvar alertLaunchImage: String?\nThe filename of an image to use as a launch image.\nDeprecated\nvar soundName: String?\nThe name of the sound file to play when a notification arrives.\nDeprecated\nvar badge: NSNumber?\nThe value that the app icon’s badge displays.\nDeprecated\nvar category: String?\nThe name of the action group that corresponds to this notification.\nDeprecated\nvar subscriptionID: CKSubscription.ID?\nThe ID of the subscription that triggers the notification.\nvar subscriptionOwnerUserRecordID: CKRecord.ID?\nThe ID of the user record that creates the subscription that generates the push notification.\nvar titleLocalizationKey: String?\nThe key that identifies the localized string for the notification’s title.\nDeprecated\nvar titleLocalizationArgs: [String]?\nThe fields for building a notification’s title.\nDeprecated\nvar subtitle: String?\nThe notification’s subtitle.\nDeprecated\nvar subtitleLocalizationKey: String?\nThe key that identifies the localized string for the notification’s subtitle.\nDeprecated\nvar subtitleLocalizationArgs: [String]?\nThe fields for building a notification’s subtitle.\nDeprecated"
  },
  {
    "title": "titleLocalizationArgs | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cknotification/2868437-titlelocalizationargs",
    "html": "Discussion\n\nThis property is an array of field names that CloudKit uses to extract the corresponding values from the record that triggers the push notification. The values are strings, numbers, or dates. CloudKit may truncate strings with a length greater than 100 characters when it adds them to a notification’s payload.\n\nIf you use %@ for your substitution variables, CloudKit replaces those variables by traversing the array in order. If you use variables of the form %n$@, where n is an integer, n represents the index (starting at 1) of the item in the array to use. So, the first item in the array replaces the variable %1$@, the second item replaces the variable %2$@, and so on. You can use indexed substitution variables to change the order of items in the resulting string, which might be necessary when you localize your app’s content.\n\nSee Also\nAccessing the Notification Info\nvar alertBody: String?\nThe notification’s alert body.\nDeprecated\nvar alertLocalizationKey: String?\nThe key that identifies the localized text for the alert body.\nDeprecated\nvar alertLocalizationArgs: [String]?\nThe fields for building a notification’s alert.\nDeprecated\nvar alertActionLocalizationKey: String?\nThe key that identifies the localized string for the notification’s action.\nDeprecated\nvar alertLaunchImage: String?\nThe filename of an image to use as a launch image.\nDeprecated\nvar soundName: String?\nThe name of the sound file to play when a notification arrives.\nDeprecated\nvar badge: NSNumber?\nThe value that the app icon’s badge displays.\nDeprecated\nvar category: String?\nThe name of the action group that corresponds to this notification.\nDeprecated\nvar subscriptionID: CKSubscription.ID?\nThe ID of the subscription that triggers the notification.\nvar subscriptionOwnerUserRecordID: CKRecord.ID?\nThe ID of the user record that creates the subscription that generates the push notification.\nvar title: String?\nThe notification’s title.\nDeprecated\nvar titleLocalizationKey: String?\nThe key that identifies the localized string for the notification’s title.\nDeprecated\nvar subtitle: String?\nThe notification’s subtitle.\nDeprecated\nvar subtitleLocalizationKey: String?\nThe key that identifies the localized string for the notification’s subtitle.\nDeprecated\nvar subtitleLocalizationArgs: [String]?\nThe fields for building a notification’s subtitle.\nDeprecated"
  },
  {
    "title": "acceptanceStatus | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckshare/participant/1640395-acceptancestatus",
    "html": "Discussion\n\nThis property contains the current state of the participant’s acceptance of the share. For a list of possible values, see CKShare.ParticipantAcceptanceStatus.\n\nSee Also\nAccessing the Participant’s Status\ntypealias CKShare.Participant.AcceptanceStatus\nA type that represents the acceptance status of the participant.\nDeprecated\nenum CKShare.ParticipantAcceptanceStatus\nConstants that represent the status of a participant."
  },
  {
    "title": "userIdentityDiscoveredBlock | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckdiscoveruseridentitiesoperation/1640524-useridentitydiscoveredblock",
    "html": "Discussion\n\nThe closure doesn’t return a value and takes the following parameters:\n\nThe user identity.\n\nThe lookup info that corresponds to the user identity.\n\nThe operation executes this closure one or more times for each user identity it discovers. Each time the closure executes, it executes serially with respect to the other closures of the operation.\n\nIf you intend to use this closure to process results, set it before you execute the operation or add the operation to a queue.\n\nSee Also\nProcessing the Results\nvar discoverUserIdentitiesCompletionBlock: ((Error?) -> Void)?\nThe closure to execute when the operation finishes.\nDeprecated"
  },
  {
    "title": "CKShare.Participant.AcceptanceStatus | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckshare/participant/acceptancestatus",
    "html": "See Also\nAccessing the Participant’s Status\nvar acceptanceStatus: CKShare.ParticipantAcceptanceStatus\nThe current state of the user’s acceptance of the share.\nenum CKShare.ParticipantAcceptanceStatus\nConstants that represent the status of a participant."
  },
  {
    "title": "userIdentityDiscoveredBlock | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckdiscoveralluseridentitiesoperation/1640416-useridentitydiscoveredblock",
    "html": "Discussion\n\nThe closure doesn’t return a value and takes the following parameter:\n\nThe user identity that matches an entry in the device’s Contacts.\n\nThe operation executes this closure one or more times for each user identity it discovers. Each time the closure executes, it executes serially with respect to the other closures of the operation.\n\nIf you intend to use this closure to process results, set it before you execute the operation or add the operation to a queue.\n\nSee Also\nProcessing the Operation Results\nvar discoverAllUserIdentitiesCompletionBlock: ((Error?) -> Void)?\nThe closure to execute when the operation finishes.\nDeprecated"
  },
  {
    "title": "discoverAllUserIdentitiesCompletionBlock | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckdiscoveralluseridentitiesoperation/1640497-discoveralluseridentitiescomplet",
    "html": "Discussion\n\nThe closure doesn’t return a value and takes the following parameter:\n\nAn error if a problem occurs, or nil if CloudKit successfully fetches the user identities.\n\nThis closure executes only once, after all of the individual discovery closures finish. The closure executes serially with respect to the operation’s other closures. If you intend to use this closure to process results, update the property’s value before you execute the operation or submit it to a queue.\n\nSee Also\nProcessing the Operation Results\nvar userIdentityDiscoveredBlock: ((CKUserIdentity) -> Void)?\nThe closure to execute for each user identity.\nDeprecated"
  },
  {
    "title": "discoverUserIdentitiesCompletionBlock | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckdiscoveruseridentitiesoperation/1640500-discoveruseridentitiescompletion",
    "html": "Discussion\n\nThe closure doesn’t return a value and takes the following parameter:\n\nAn error if a problem occurs, or nil if CloudKit successfully fetches the user identities.\n\nThis closure executes only once, after all of the individual discovery closures finish. The closure executes serially with respect to the operation’s other closures. If you intend to use this closure to process results, update the property’s value before you execute the operation or submit it to a queue.\n\nSee Also\nProcessing the Results\nvar userIdentityDiscoveredBlock: ((CKUserIdentity, CKUserIdentity.LookupInfo) -> Void)?\nThe closure to execute for each user identity.\nDeprecated"
  },
  {
    "title": "init() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckdiscoveralluseridentitiesoperation/1640435-init",
    "html": "Discussion\n\nYou can use the operation only once. Create a new operation for each subsequent search."
  },
  {
    "title": "CKShare.Participant.Role | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckshare/participant/role",
    "html": "See Also\nManaging the Participant's Capabilites\nvar permission: CKShare.ParticipantPermission\nThe participant’s permission level for the share.\ntypealias CKShare.Participant.Permission\nA type that represents the permissions for a participant.\nDeprecated\nenum CKShare.ParticipantPermission\nConstants that represent the permissions to grant to a share participant.\nvar role: CKShare.ParticipantRole\nThe participant’s role for the share.\nenum CKShare.ParticipantRole\nConstants that represent the role of a share’s participant."
  },
  {
    "title": "participantType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckshare/metadata/1640518-participanttype",
    "html": "See Also\nAccessing the Participant’s Capabilities\nvar participantRole: CKShare.ParticipantRole\nThe share’s participant role for the user who retrieves the metadata.\nvar participantPermission: CKShare.ParticipantPermission\nThe share’s permissions for the user who retrieves the metadata.\nvar participantStatus: CKShare.ParticipantAcceptanceStatus\nThe share’s participation status for the user who retrieves the metadata."
  },
  {
    "title": "rootRecordDesiredKeys | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckfetchsharemetadataoperation/1640375-rootrecorddesiredkeys",
    "html": "Discussion\n\nFor a shared record hierarchy, and when shouldFetchRootRecord is true, set this property to specify which of the root record’s fields the operation fetches. Use nil to fetch the entire record. CloudKit ignores this property for a shared record zone because, unlike a hierarchy, it doesn’t have a nominated root record.\n\nThe default value is nil."
  },
  {
    "title": "participantStatus | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckshare/metadata/1640420-participantstatus",
    "html": "See Also\nAccessing the Participant’s Capabilities\nvar participantRole: CKShare.ParticipantRole\nThe share’s participant role for the user who retrieves the metadata.\nvar participantPermission: CKShare.ParticipantPermission\nThe share’s permissions for the user who retrieves the metadata.\nvar participantType: CKShare.ParticipantType\nThe share’s participation type for the user who retrieves the metadata.\nDeprecated"
  },
  {
    "title": "rootRecordID | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckshare/metadata/1640410-rootrecordid",
    "html": "Deprecated\n\nUse hierarchicalRootRecordID instead.\n\nDiscussion\n\nCloudKit populates this property only for metadata that belongs to a shared record hierarchy. If the metadata is part of a shared record zone, the property returns nil. This is because, unlike a shared record hierarchy, a shared record zone doesn’t have a nominated root record.\n\nSee Also\nAccessing the Root Record\nvar hierarchicalRootRecordID: CKRecord.ID?\nThe record ID of the shared hierarchy’s root record.\nvar rootRecord: CKRecord?\nThe share’s root record."
  },
  {
    "title": "ownerIdentity | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckshare/metadata/1640498-owneridentity",
    "html": "See Also\nAccessing the Share\nvar share: CKShare\nThe share that owns the metadata.\nvar containerIdentifier: String\nThe ID of the share’s container."
  },
  {
    "title": "perShareMetadataBlock | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckfetchsharemetadataoperation/1640447-persharemetadatablock",
    "html": "Discussion\n\nThe closure returns no value and takes the following parameters:\n\nThe share’s URL.\n\nThe share metadata, or nil if CloudKit can’t fetch the metadata.\n\nIf CloudKit can’t fetch the share metadata, this parameter provides information about the failure; otherwise, it’s nil.\n\nThe operation executes this closure once for each URL in the shareURLs property. Each time the closure executes, it executes serially with respect to the other closures of the operation.\n\nIf you intend to use this closure to process results, set it before you execute the operation or submit the operation to a queue.\n\nSee Also\nProcessing the Operation’s Results\nvar fetchShareMetadataCompletionBlock: ((Error?) -> Void)?\nThe closure to execute when the operation finishes."
  },
  {
    "title": "fetchShareMetadataCompletionBlock | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckfetchsharemetadataoperation/1640457-fetchsharemetadatacompletionbloc",
    "html": "Discussion\n\nThe closure returns no value and takes the following parameter:\n\nAn error that contains information about a problem, or nil if CloudKit successfully fetches the metadatas.\n\nThe operation executes this closure only once. The closure executes on a background queue, so any tasks that require access to the main queue must dispatch accordingly.\n\nThe closure reports an error of type CKError.Code.partialFailure when it can’t fetch some of the metadatas. The userInfo dictionary of the error contains a CKPartialErrorsByItemIDKey key that has a dictionary as its value. The keys of the dictionary identify the metadatas that CloudKit can’t fetch, and the corresponding values are errors that contain information about the failures.\n\nSet this property’s value before you execute the operation or submit it to a queue.\n\nSee Also\nProcessing the Operation’s Results\nvar perShareMetadataBlock: ((URL, CKShare.Metadata?, Error?) -> Void)?\nThe closure to execute as the operation fetches individual shares."
  },
  {
    "title": "rootRecord | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckshare/metadata/1640366-rootrecord",
    "html": "Discussion\n\nThis property contains the root record of the shared record hierarchy if you set the shouldFetchRootRecord property of the operation that fetches the metadata to true. You can specify which fields CloudKit returns by setting the same operation’s rootRecordDesiredKeys property.\n\nThe operation ignores the shouldFetchRootRecord and rootRecordDesiredKeys properties when fetching a shared record zone’s metadata because, unlike a shared record hierarchy, a record zone doesn’t have a nominated root record.\n\nSee Also\nAccessing the Root Record\nvar hierarchicalRootRecordID: CKRecord.ID?\nThe record ID of the shared hierarchy’s root record.\nvar rootRecordID: CKRecord.ID\nThe record ID of the share’s root record.\nDeprecated"
  },
  {
    "title": "participantRole | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckshare/metadata/2980666-participantrole",
    "html": "See Also\nAccessing the Participant’s Capabilities\nvar participantPermission: CKShare.ParticipantPermission\nThe share’s permissions for the user who retrieves the metadata.\nvar participantStatus: CKShare.ParticipantAcceptanceStatus\nThe share’s participation status for the user who retrieves the metadata.\nvar participantType: CKShare.ParticipantType\nThe share’s participation type for the user who retrieves the metadata.\nDeprecated"
  },
  {
    "title": "alertLaunchImage | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cknotification/1428103-alertlaunchimage",
    "html": "Discussion\n\nThe system uses this property’s value to locate an image in the app’s bundle, and displays it as a launch image when the user launches the app after receiving a push notification.\n\nSee Also\nAccessing the Notification Info\nvar alertBody: String?\nThe notification’s alert body.\nDeprecated\nvar alertLocalizationKey: String?\nThe key that identifies the localized text for the alert body.\nDeprecated\nvar alertLocalizationArgs: [String]?\nThe fields for building a notification’s alert.\nDeprecated\nvar alertActionLocalizationKey: String?\nThe key that identifies the localized string for the notification’s action.\nDeprecated\nvar soundName: String?\nThe name of the sound file to play when a notification arrives.\nDeprecated\nvar badge: NSNumber?\nThe value that the app icon’s badge displays.\nDeprecated\nvar category: String?\nThe name of the action group that corresponds to this notification.\nDeprecated\nvar subscriptionID: CKSubscription.ID?\nThe ID of the subscription that triggers the notification.\nvar subscriptionOwnerUserRecordID: CKRecord.ID?\nThe ID of the user record that creates the subscription that generates the push notification.\nvar title: String?\nThe notification’s title.\nDeprecated\nvar titleLocalizationKey: String?\nThe key that identifies the localized string for the notification’s title.\nDeprecated\nvar titleLocalizationArgs: [String]?\nThe fields for building a notification’s title.\nDeprecated\nvar subtitle: String?\nThe notification’s subtitle.\nDeprecated\nvar subtitleLocalizationKey: String?\nThe key that identifies the localized string for the notification’s subtitle.\nDeprecated\nvar subtitleLocalizationArgs: [String]?\nThe fields for building a notification’s subtitle.\nDeprecated"
  },
  {
    "title": "alertActionLocalizationKey | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cknotification/1428109-alertactionlocalizationkey",
    "html": "Discussion\n\nThe system uses this property’s value to find the matching string in your app’s Localizable.strings file. It uses the string as the text of the button that opens your app, which the notification alert displays.\n\nIf this property’s value is nil, the system displays a single button to dismiss the alert.\n\nSee Also\nAccessing the Notification Info\nvar alertBody: String?\nThe notification’s alert body.\nDeprecated\nvar alertLocalizationKey: String?\nThe key that identifies the localized text for the alert body.\nDeprecated\nvar alertLocalizationArgs: [String]?\nThe fields for building a notification’s alert.\nDeprecated\nvar alertLaunchImage: String?\nThe filename of an image to use as a launch image.\nDeprecated\nvar soundName: String?\nThe name of the sound file to play when a notification arrives.\nDeprecated\nvar badge: NSNumber?\nThe value that the app icon’s badge displays.\nDeprecated\nvar category: String?\nThe name of the action group that corresponds to this notification.\nDeprecated\nvar subscriptionID: CKSubscription.ID?\nThe ID of the subscription that triggers the notification.\nvar subscriptionOwnerUserRecordID: CKRecord.ID?\nThe ID of the user record that creates the subscription that generates the push notification.\nvar title: String?\nThe notification’s title.\nDeprecated\nvar titleLocalizationKey: String?\nThe key that identifies the localized string for the notification’s title.\nDeprecated\nvar titleLocalizationArgs: [String]?\nThe fields for building a notification’s title.\nDeprecated\nvar subtitle: String?\nThe notification’s subtitle.\nDeprecated\nvar subtitleLocalizationKey: String?\nThe key that identifies the localized string for the notification’s subtitle.\nDeprecated\nvar subtitleLocalizationArgs: [String]?\nThe fields for building a notification’s subtitle.\nDeprecated"
  },
  {
    "title": "containerIdentifier | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cknotification/1428119-containeridentifier",
    "html": "Discussion\n\nUse this property to determine the location of the changed content.\n\nSee Also\nIdentifying the Notification\nvar notificationID: CKNotification.ID?\nThe notification’s ID.\nclass CKNotification.ID\nAn object that uniquely identifies a push notification that a container sends.\nvar notificationType: CKNotification.NotificationType\nThe type of event that generates the notification.\nenum CKNotification.NotificationType\nConstants that indicate the type of event that generates the push notification."
  },
  {
    "title": "CKNotification.ID | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cknotification/id",
    "html": "Overview\n\nYou don’t create notification IDs directly. The server creates them when it creates instances of CKNotification that correspond to the push notifications that CloudKit sends to your app. You can compare two IDs using the isEqual(_:) method to determine whether two notifications are the same. This class defines no methods or properties.\n\nRelationships\nInherits From\nNSObject\nConforms To\nNSCopying\nNSSecureCoding\nSendable\nSee Also\nIdentifying the Notification\nvar notificationID: CKNotification.ID?\nThe notification’s ID.\nvar notificationType: CKNotification.NotificationType\nThe type of event that generates the notification.\nenum CKNotification.NotificationType\nConstants that indicate the type of event that generates the push notification.\nvar containerIdentifier: String?\nThe ID of the container with the content that triggers the notification."
  },
  {
    "title": "recordFields | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckquerynotification/1428114-recordfields",
    "html": "Discussion\n\nFor updated and created records, this property contains the subscription’s desired keys. When you configure the notification info of a subscription, you specify the names of one or more fields in the desiredKeys property. When a push notification triggers, CloudKit retrieves the values for each of those keys from the record and includes them in the notification’s payload.\n\nFor query notifications that you fetch from a container, all keys and values are present. For query notifications that you create from push notifications, one or more keys and values may be missing. Push notification payloads have a size limit, and CloudKit can exclude record fields when a payload exceeds that limit. For information about the order, see the overview of this class.\n\nSee Also\nGetting the Record Information\nvar recordID: CKRecord.ID?\nThe ID of the record that CloudKit creates, updates, or deletes."
  },
  {
    "title": "queryNotificationReason | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckquerynotification/1428123-querynotificationreason",
    "html": "Discussion\n\nSubscription notifications result from the creation, deletion, or updating of a single record. The record in question must match the subscription’s predicate for an event to trigger.\n\nSee Also\nGetting the Notification Attributes\nenum CKQueryNotification.Reason\nConstants that indicate the event that triggers the notification."
  },
  {
    "title": "subscriptionsToSave | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckmodifysubscriptionsoperation/1515135-subscriptionstosave",
    "html": "Discussion\n\nThis property contains the subscriptions that you want to save. Its initial value is the array that you pass to the init(subscriptionsToSave:subscriptionIDsToDelete:) method. Modify this property as necessary before you execute the operation or submit it to a queue. After CloudKit saves the subscriptions, it begins generating push notifications according to their criteria.\n\nSee Also\nConfiguring the Modify Subscriptions Operation\nvar subscriptionIDsToDelete: [CKSubscription.ID]?\nThe IDs of the subscriptions that you want to delete."
  },
  {
    "title": "init() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckmodifysubscriptionsoperation/2715835-init",
    "html": "See Also\nCreating a Modify Subscriptions Operation\ninit(subscriptionsToSave: [CKSubscription]?, subscriptionIDsToDelete: [CKSubscription.ID]?)\nCreates an operation for saving and deleting the specified subscriptions."
  },
  {
    "title": "zoneID | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckrecordzonesubscription/1640367-zoneid",
    "html": "Discussion\n\nThis property applies to query-based subscriptions and zone-based subscriptions. Specifying a record zone ID limits the scope of the query to only the records in that zone. For zone-based subscriptions, the query includes all records in the specified record zone. For a query-based subscription, the query includes only records of a specific type in the specified record zone.\n\nFor zone-based subscriptions, CloudKit sets this property’s value automatically. For all other subscription types, the default value is nil. If you want to scope your query-based subscription to a specific record zone, you must assign a value explicitly.\n\nSee Also\nAccessing the Subscription Metadata\nvar recordType: CKRecord.RecordType?\nThe type of record that the subscription queries."
  },
  {
    "title": "init(coder:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckrecordzonesubscription/3547082-init",
    "html": "Parameters\naDecoder\n\nThe coder for decoding the serialized record zone subscription.\n\nSee Also\nCreating a Zone-Based Subscription\ninit(zoneID: CKRecordZone.ID)\nCreates a subscription for all records in the specified record zone.\nDeprecated\ninit(zoneID: CKRecordZone.ID, subscriptionID: CKSubscription.ID)\nCreates a named subscription for all records in the specified record zone."
  },
  {
    "title": "init(zoneID:subscriptionID:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckrecordzonesubscription/3003602-init",
    "html": "Parameters\nzoneID\n\nThe ID of the record zone that contains the records you want to monitor.\n\nsubscriptionID\n\nThe subscription’s name. It must be unique in the container and must not be an empty string.\n\nDiscussion\n\nThe subscription that this method returns is a zone-based subscription that generates push notifications when CloudKit changes any of the specificed record zone’s records.\n\nSee Also\nCreating a Zone-Based Subscription\ninit(zoneID: CKRecordZone.ID)\nCreates a subscription for all records in the specified record zone.\nDeprecated\ninit(coder: NSCoder)\nCreates a zone-based subscription from a serialized instance."
  },
  {
    "title": "init(zoneID:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckrecordzonesubscription/1640392-init",
    "html": "Parameters\nzoneID\n\nThe ID of the record zone that contains the records you want to monitor. This parameter must not be nil.\n\nDiscussion\n\nThe subscription that this method returns is a zone-based subscription that generates push notifications when CloudKit changes any of the specificed record zone’s records.\n\nSee Also\nCreating a Zone-Based Subscription\ninit(zoneID: CKRecordZone.ID, subscriptionID: CKSubscription.ID)\nCreates a named subscription for all records in the specified record zone.\ninit(coder: NSCoder)\nCreates a zone-based subscription from a serialized instance."
  },
  {
    "title": "CKSubscription.NotificationInfo | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksubscription/notificationinfo",
    "html": "Overview\n\nWhen configuring a subscription, use this class to specify the type of push notifications you want to generate when conditions meet the subscription’s trigger. You can provide content that the system displays to the user, describe the sounds to play, and indicate whether the app’s icon has a badge. You can request that the notification include information about the record that triggers it.\n\nWhen your app receives a push notification that a subscription generates, instantiate an instance of CKNotification using the init(fromRemoteNotificationDictionary:) method and pass the notification’s payload. The object that the method returns contains the data you specify when configuring the subscription.\n\nFor more information about push notification alerts and how they display to the user, see Apple Push Notification Service in Local and Remote Notification Programming Guide.\n\nNote\n\nIf you don’t set any of the alertBody, soundName, or shouldBadge properties, CloudKit sends the push notification using a lower priority and doesn’t display any content to the user.\n\nTopics\nCreating Notification Information\ninit(alertBody: String?, alertLocalizationKey: String?, alertLocalizationArgs: [CKRecord.FieldKey], title: String?, titleLocalizationKey: String?, titleLocalizationArgs: [CKRecord.FieldKey], subtitle: String?, subtitleLocalizationKey: String?, subtitleLocalizationArgs: [CKRecord.FieldKey], alertActionLocalizationKey: String?, alertLaunchImage: String?, soundName: String?, desiredKeys: [CKRecord.FieldKey], shouldBadge: Bool, shouldSendContentAvailable: Bool, shouldSendMutableContent: Bool, category: String?, collapseIDKey: String?)\nCreates a notification with the specified values.\nGrouping Notifications\nvar category: String?\nThe name of the action group that corresponds to this notification.\nvar collapseIDKey: String?\nA value that the system uses to coalesce unseen push notifications.\nDisplaying Badges\nvar shouldBadge: Bool\nA Boolean value that determines whether an app’s icon badge increments its value.\nAccessing the Notification Alert\nvar alertBody: String?\nThe text for the notification’s alert.\nvar alertLocalizationKey: String?\nThe key that identifies the localized string for the notification’s alert.\nvar alertLocalizationArgs: [CKRecord.FieldKey]?\nThe fields for building a notification’s alert.\nvar alertActionLocalizationKey: String?\nThe key that identifies the localized string for the notification’s action.\nvar alertLaunchImage: String?\nThe filename of an image to use as a launch image.\nvar soundName: String?\nThe filename of the sound file to play when a notification arrives.\nAccessing the Notification Info\nvar shouldSendContentAvailable: Bool\nA Boolean value that indicates whether the push notification includes the content available flag.\nvar shouldSendMutableContent: Bool\nA Boolean value that indicates whether the push notification sets the mutable content flag.\nAccessing the Record’s Data\nvar desiredKeys: [CKRecord.FieldKey]?\nThe names of fields to include in the push notification’s payload.\nAccessing the Notification Title\nvar title: String?\nThe notification’s title.\nvar titleLocalizationKey: String?\nThe key that identifies the localized string for the notification’s title.\nvar titleLocalizationArgs: [CKRecord.FieldKey]?\nThe fields for building a notification’s title.\nAccessing the Notification Subtitle\nvar subtitle: String?\nThe notification’s subtitle.\nvar subtitleLocalizationKey: String?\nThe key that identifies the localized string for the notification’s subtitle.\nvar subtitleLocalizationArgs: [CKRecord.FieldKey]?\nThe fields for building a notification’s subtitle.\nRelationships\nInherits From\nNSObject\nConforms To\nNSCopying\nNSSecureCoding\nSendable\nSee Also\nSpecifying the Push Notification Data\nvar notificationInfo: CKSubscription.NotificationInfo?\nThe configuration for a subscription’s push notifications."
  },
  {
    "title": "notificationType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cknotification/1428078-notificationtype",
    "html": "Discussion\n\nDifferent notification types correspond to different subclasses of CKNotification, so you can use the value in this property to determine how to handle the notification data.\n\nSee Also\nIdentifying the Notification\nvar notificationID: CKNotification.ID?\nThe notification’s ID.\nclass CKNotification.ID\nAn object that uniquely identifies a push notification that a container sends.\nenum CKNotification.NotificationType\nConstants that indicate the type of event that generates the push notification.\nvar containerIdentifier: String?\nThe ID of the container with the content that triggers the notification."
  },
  {
    "title": "isPruned | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cknotification/1428088-ispruned",
    "html": "Discussion\n\nThe server may truncate the payload data of a push notification if the size of that data exceeds the allowed maximum. For notifications you create using a payload dictionary, the value of this property is true if the payload data doesn’t contain all information regarding the change. The value is false if the payload data is complete.\n\nFor notifications you fetch from the database using a CKFetchNotificationChangesOperation operation, this property’s value is always true.\n\nWhen CloudKit must remove payload data, it removes it in a specific order. This class’s properties are among the last that CloudKit removes because they define information about how to deliver the push notification. The following list shows the properties that CloudKit removes, and the order for removing them:\n\ncontainerIdentifier\n\nKeys that subclasses of CKNotification define.\n\nsoundName\n\nalertLaunchImage\n\nalertActionLocalizationKey\n\nalertBody\n\nalertLocalizationArgs\n\nalertLocalizationKey\n\nbadge\n\nnotificationID"
  },
  {
    "title": "shouldSendContentAvailable | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksubscription/notificationinfo/1515110-shouldsendcontentavailable",
    "html": "Discussion\n\nWhen this property is true, the server includes the content-available flag in the push notification’s payload. That flag causes the system to wake or launch an app that isn’t currently running. The app then receives background execution time to download any data for the push notification, such as the set of changed records. If the app is already running in the foreground, the inclusion of this flag has no additional effect and the system delivers the notification to the app delegate for processing as usual.\n\nThe default value of this property is false.\n\nSee Also\nAccessing the Notification Info\nvar shouldSendMutableContent: Bool\nA Boolean value that indicates whether the push notification sets the mutable content flag."
  },
  {
    "title": "notificationInfo | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksubscription/1514948-notificationinfo",
    "html": "Discussion\n\nIf you want the system to display your subscription’s push notifications, assign a value to this property. The server uses the configuration you provide to determine the delivery options for notifications. For example, you can specify the text to display to the user, and the sound to play. You can also specify which fields of the record to include in the notification’s payload.\n\nIf you don’t assign a value to this property, CloudKit still sends push notifications, but the system doesn’t display them to the user. The default value of this property is nil.\n\nSee Also\nSpecifying the Push Notification Data\nclass CKSubscription.NotificationInfo\nAn object that describes the configuration of a subscription’s push notifications."
  },
  {
    "title": "databaseScope | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckrecordzonenotification/1640394-databasescope",
    "html": "Discussion\n\nThis property’s value is one of the constants that CKDatabase.Scope defines."
  },
  {
    "title": "init(subscriptionID:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckdatabasesubscription/3003592-init",
    "html": "Parameters\nsubscriptionID\n\nThe subscription’s name. It must be unique in the container, and must not be an empty string.\n\nSee Also\nCreating a Database Subscription\ninit()\nCreates an empty database subscription.\nDeprecated\ninit(coder: NSCoder)\nCreates a database subscription from a serialized instance."
  },
  {
    "title": "init() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckdatabasesubscription/1640456-init",
    "html": "See Also\nCreating a Database Subscription\ninit(subscriptionID: CKSubscription.ID)\nCreates a named subscription for all records in a database.\ninit(coder: NSCoder)\nCreates a database subscription from a serialized instance."
  },
  {
    "title": "recordZoneFetchCompletionBlock | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckfetchrecordzonechangesoperation/1640411-recordzonefetchcompletionblock",
    "html": "Discussion\n\nThe closure returns no value and takes the following parameters:\n\nThe record zone’s ID.\n\nThe change token to store and use in subsequent instances of CKFetchRecordZoneChangesOperation.\n\nThe more recent client change token from the device. If the change token isn’t the more recent change token you provided, the server might not have received the associated changes.\n\nA Boolean that indicates whether this is the final record zone change. If fetchAllChanges is false, it’s the app’s responsibility to create additional instances of CKFetchRecordZoneChangesOperation to fetch further changes.\n\nAn error object that contains information about a problem, or nil if the operation successfully retrieves the results.\n\nThe app is responsible for saving the change token at the end of the operation and providing it to future uses of CKFetchRecordZoneChangesOperation. Each time the closure executes, it executes serially with respect to the other closures of the operation.\n\nSet this property before you execute the operation or submit it to a queue.\n\nSee Also\nProcessing the Zone Change Operation Results\nvar recordChangedBlock: ((CKRecord) -> Void)?\nThe closure to execute with the contents of a changed record.\nDeprecated\nvar recordWithIDWasDeletedBlock: ((CKRecord.ID, CKRecord.RecordType) -> Void)?\nThe closure to execute when a record no longer exists.\nvar recordZoneChangeTokensUpdatedBlock: ((CKRecordZone.ID, CKServerChangeToken?, Data?) -> Void)?\nThe closure to execute when the change token updates.\nvar fetchRecordZoneChangesCompletionBlock: ((Error?) -> Void)?\nThe closure to execute when the operation finishes."
  },
  {
    "title": "fetchRecordZoneChangesCompletionBlock | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckfetchrecordzonechangesoperation/1640409-fetchrecordzonechangescompletion",
    "html": "Discussion\n\nThe closure has no return value and takes the following parameter:\n\nAn error object that contains information about a problem, or nil if CloudKit successfully retrieves the record zone changes.\n\nSee Also\nProcessing the Zone Change Operation Results\nvar recordChangedBlock: ((CKRecord) -> Void)?\nThe closure to execute with the contents of a changed record.\nDeprecated\nvar recordWithIDWasDeletedBlock: ((CKRecord.ID, CKRecord.RecordType) -> Void)?\nThe closure to execute when a record no longer exists.\nvar recordZoneChangeTokensUpdatedBlock: ((CKRecordZone.ID, CKServerChangeToken?, Data?) -> Void)?\nThe closure to execute when the change token updates.\nvar recordZoneFetchCompletionBlock: ((CKRecordZone.ID, CKServerChangeToken?, Data?, Bool, Error?) -> Void)?\nThe closure to execute when a record zone’s fetch finishes."
  },
  {
    "title": "Deprecated Symbols | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckfetchrecordzonechangesoperation/deprecated_symbols",
    "html": "Topics\nDeprecated Methods\ninit(recordZoneIDs: [CKRecordZone.ID], optionsByRecordZoneID: [CKRecordZone.ID : CKFetchRecordZoneChangesOperation.ZoneOptions]?)\nCreates an operation for fetching record zone changes.\nDeprecated\nclass CKFetchRecordZoneChangesOperation.ZoneOptions\nA configuration object that describes the information to fetch from a record zone.\nDeprecated\nDeprecated Properties\nvar optionsByRecordZoneID: [CKRecordZone.ID : CKFetchRecordZoneChangesOperation.ZoneOptions]?\nConfiguration options for each record zone that the operation retrieves.\nDeprecated"
  },
  {
    "title": "recordZoneChangeTokensUpdatedBlock | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckfetchrecordzonechangesoperation/1640422-recordzonechangetokensupdatedblo",
    "html": "Discussion\n\nThe closure returns no value and takes the following parameters:\n\nThe record zone’s ID.\n\nThe new change token from the server. You can store this token locally and use it during subsequent fetch operations to limit the results to records that change after this operation executes.\n\nThe most recent client change token from the device. If the change token isn’t the most recent change token you provided, the server might not have received the associated changes.\n\nThe operation executes this closure once for each record zone. Each time the closure executes, it executes serially with respect to the other blocks of the operation.\n\nSet this property before you execute the operation or submit it to a queue.\n\nSee Also\nProcessing the Zone Change Operation Results\nvar recordChangedBlock: ((CKRecord) -> Void)?\nThe closure to execute with the contents of a changed record.\nDeprecated\nvar recordWithIDWasDeletedBlock: ((CKRecord.ID, CKRecord.RecordType) -> Void)?\nThe closure to execute when a record no longer exists.\nvar recordZoneFetchCompletionBlock: ((CKRecordZone.ID, CKServerChangeToken?, Data?, Bool, Error?) -> Void)?\nThe closure to execute when a record zone’s fetch finishes.\nvar fetchRecordZoneChangesCompletionBlock: ((Error?) -> Void)?\nThe closure to execute when the operation finishes."
  },
  {
    "title": "recordWithIDWasDeletedBlock | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckfetchrecordzonechangesoperation/3003360-recordwithidwasdeletedblock",
    "html": "Discussion\n\nThe closure returns no value and takes the following parameters:\n\nThe deleted record’s ID.\n\nThe deleted record’s type.\n\nThe operation executes this closure once for each record the server deletes after the previous change token. Each time the closure executes, it executes serially with respect to the other closures of the operation. If there aren’t any record deletions, this closure doesn’t execute.\n\nSet this property before you execute the operation or submit it to a queue.\n\nSee Also\nProcessing the Zone Change Operation Results\nvar recordChangedBlock: ((CKRecord) -> Void)?\nThe closure to execute with the contents of a changed record.\nDeprecated\nvar recordZoneChangeTokensUpdatedBlock: ((CKRecordZone.ID, CKServerChangeToken?, Data?) -> Void)?\nThe closure to execute when the change token updates.\nvar recordZoneFetchCompletionBlock: ((CKRecordZone.ID, CKServerChangeToken?, Data?, Bool, Error?) -> Void)?\nThe closure to execute when a record zone’s fetch finishes.\nvar fetchRecordZoneChangesCompletionBlock: ((Error?) -> Void)?\nThe closure to execute when the operation finishes."
  },
  {
    "title": "recordChangedBlock | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckfetchrecordzonechangesoperation/1640417-recordchangedblock",
    "html": "Discussion\n\nThe closure returns no value and takes the following parameter:\n\nThe changed record. If you specify a value for the desiredKeys property, the record contains only the corresponding fields.\n\nThe operation executes this closure once for each record in the record zone with changes since the previous fetch request. Each time the closure executes, it executes serially with respect to the other closures of the operation. If there aren’t any record changes, this closure doesn’t execute.\n\nSet this property before you execute the operation or submit it to a queue.\n\nSee Also\nProcessing the Zone Change Operation Results\nvar recordWithIDWasDeletedBlock: ((CKRecord.ID, CKRecord.RecordType) -> Void)?\nThe closure to execute when a record no longer exists.\nvar recordZoneChangeTokensUpdatedBlock: ((CKRecordZone.ID, CKServerChangeToken?, Data?) -> Void)?\nThe closure to execute when the change token updates.\nvar recordZoneFetchCompletionBlock: ((CKRecordZone.ID, CKServerChangeToken?, Data?, Bool, Error?) -> Void)?\nThe closure to execute when a record zone’s fetch finishes.\nvar fetchRecordZoneChangesCompletionBlock: ((Error?) -> Void)?\nThe closure to execute when the operation finishes."
  },
  {
    "title": "recordZoneIDs | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckfetchrecordzonechangesoperation/1640463-recordzoneids",
    "html": "Discussion\n\nTypically, you set the value of this property when you create the operation. If you intend to change the record zone IDs, update the value before you execute the operation or submit it to a queue.\n\nSee Also\nConfiguring the Zone Change Operation\nvar configurationsByRecordZoneID: [CKRecordZone.ID : CKFetchRecordZoneChangesOperation.ZoneConfiguration]?\nA dictionary of configurations for fetching change operations by zone identifier.\nclass CKFetchRecordZoneChangesOperation.ZoneConfiguration\nA configuration object that describes the information to fetch from a record zone.\nvar fetchAllChanges: Bool\nA Boolean value that indicates whether to send repeated requests to the server."
  },
  {
    "title": "fetchAllChanges | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckfetchrecordzonechangesoperation/1640386-fetchallchanges",
    "html": "Discussion\n\nIf true, the operation sends repeat requests to the server until it fetches all changes. CloudKit executes the handler you set on the recordZoneFetchCompletionBlock property with a change token after each request.\n\nThe default value is true.\n\nSee Also\nConfiguring the Zone Change Operation\nvar configurationsByRecordZoneID: [CKRecordZone.ID : CKFetchRecordZoneChangesOperation.ZoneConfiguration]?\nA dictionary of configurations for fetching change operations by zone identifier.\nclass CKFetchRecordZoneChangesOperation.ZoneConfiguration\nA configuration object that describes the information to fetch from a record zone.\nvar recordZoneIDs: [CKRecordZone.ID]?\nThe IDs of the record zones that contain the records to fetch."
  },
  {
    "title": "init(recordZoneIDs:configurationsByRecordZoneID:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckfetchrecordzonechangesoperation/3126513-init",
    "html": "Parameters\nrecordZoneIDs\n\nThe IDs of the record zones that you want to query for changes. You can specify nil for this parameter.\n\nconfigurationsByRecordZoneID\n\nA dictionary that maps record zone IDs to their corresponding configurations. You can specify nil for this parameter.\n\nDiscussion\n\nCloudKit configures the operation for retrieving all of the record zones that you specify. If you want to reduce the amount of data that CloudKit returns, provide zone configurations for each record zone.\n\nSee Also\nCreating a Zone Change Operation\ninit()\nCreates an empty fetch record zone changes operation."
  },
  {
    "title": "configurationsByRecordZoneID | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckfetchrecordzonechangesoperation/2980664-configurationsbyrecordzoneid",
    "html": "See Also\nConfiguring the Zone Change Operation\nclass CKFetchRecordZoneChangesOperation.ZoneConfiguration\nA configuration object that describes the information to fetch from a record zone.\nvar fetchAllChanges: Bool\nA Boolean value that indicates whether to send repeated requests to the server.\nvar recordZoneIDs: [CKRecordZone.ID]?\nThe IDs of the record zones that contain the records to fetch."
  },
  {
    "title": "init() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckfetchrecordzonechangesoperation/2715840-init",
    "html": "See Also\nCreating a Zone Change Operation\ninit(recordZoneIDs: [CKRecordZone.ID]?, configurationsByRecordZoneID: [CKRecordZone.ID : CKFetchRecordZoneChangesOperation.ZoneConfiguration]?)\nCreates an operation for fetching record zone changes."
  },
  {
    "title": "queryCompletionBlock | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckqueryoperation/1515067-querycompletionblock",
    "html": "Discussion\n\nThe closure returns no value and takes the following parameters:\n\nA cursor that indicates there are more results to fetch, or nil if there are no additional results. Use the cursor to create a new query operation when you’re ready to retrieve the next batch of results.\n\nAn error that contains information about a problem, or nil if CloudKit retrieves the results successfully.\n\nThis closure executes only once, and represents your final opportunity to process the results. It executes after all of the individual record fetch closures. The closure executes serially with respect to the other closures of the operation.\n\nIf the number of records that the operation intends to return exceeds resultsLimit, the operation provides a cursor that you can use to retrieve the next batch of results. You must create a separate operation using the cursor to fetch the next batch of results.\n\nUpdate the value of this property before you execute the operation or submit it to a queue.\n\nSee Also\nProcessing the Query Results\nvar recordFetchedBlock: ((CKRecord) -> Void)?\nThe closure to execute when a record becomes available.\nDeprecated"
  },
  {
    "title": "recordFetchedBlock | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckqueryoperation/1515283-recordfetchedblock",
    "html": "Discussion\n\nThe closure returns no value and takes the following parameter:\n\nA single record that matches the search criteria.\n\nAfter identifying and sorting the records, the query operation executes this closure once for each of the result’s records. The closure executes serially with respect to all other closures of the operation, so you can expect only one closure at a time to execute for this operation.\n\nSet the property’s value before you execute the operation or submit it to a queue.\n\nWarning\n\nQuery indexes update asynchronously so they aren’t always current. If you query for records that you recently changed and don’t allow enough time for those changes to process, the query’s results may be incorrect. The results may not contain the correct records, and the records may be out of order.\n\nSee Also\nProcessing the Query Results\nvar queryCompletionBlock: ((CKQueryOperation.Cursor?, Error?) -> Void)?\nThe closure to execute after CloudKit retrieves all of the records."
  },
  {
    "title": "init() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckfetchshareparticipantsoperation/1640478-init",
    "html": "Discussion\n\nYou can use this operation only once.\n\nNote\n\nIf you don’t set userIdentityLookupInfos prior to executing the operation, it returns immediately with no results.\n\nSee Also\nCreating an Operation\ninit(userIdentityLookupInfos: [CKUserIdentity.LookupInfo])\nCreates an operation for generating share participants from the specified user data."
  },
  {
    "title": "subtitleLocalizationKey | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cknotification/2868438-subtitlelocalizationkey",
    "html": "Discussion\n\nThis property takes precedence over subtitle.\n\nSee Also\nAccessing the Notification Info\nvar alertBody: String?\nThe notification’s alert body.\nDeprecated\nvar alertLocalizationKey: String?\nThe key that identifies the localized text for the alert body.\nDeprecated\nvar alertLocalizationArgs: [String]?\nThe fields for building a notification’s alert.\nDeprecated\nvar alertActionLocalizationKey: String?\nThe key that identifies the localized string for the notification’s action.\nDeprecated\nvar alertLaunchImage: String?\nThe filename of an image to use as a launch image.\nDeprecated\nvar soundName: String?\nThe name of the sound file to play when a notification arrives.\nDeprecated\nvar badge: NSNumber?\nThe value that the app icon’s badge displays.\nDeprecated\nvar category: String?\nThe name of the action group that corresponds to this notification.\nDeprecated\nvar subscriptionID: CKSubscription.ID?\nThe ID of the subscription that triggers the notification.\nvar subscriptionOwnerUserRecordID: CKRecord.ID?\nThe ID of the user record that creates the subscription that generates the push notification.\nvar title: String?\nThe notification’s title.\nDeprecated\nvar titleLocalizationKey: String?\nThe key that identifies the localized string for the notification’s title.\nDeprecated\nvar titleLocalizationArgs: [String]?\nThe fields for building a notification’s title.\nDeprecated\nvar subtitle: String?\nThe notification’s subtitle.\nDeprecated\nvar subtitleLocalizationArgs: [String]?\nThe fields for building a notification’s subtitle.\nDeprecated"
  },
  {
    "title": "CKShareTransferRepresentation.Body | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksharetransferrepresentation/body",
    "html": "Relationships\nFrom Protocol\nTransferRepresentation\nSee Also\nAccessing transfer representation attributes\nvar body: TransferRepresentation\nThe transfer representation for the share item.\nstruct CKShareTransferRepresentation.ExportedShare\nAn intermediate structure that returns an existing share or prepares a new one if it doesn’t exist."
  },
  {
    "title": "subscriptionOwnerUserRecordID | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cknotification/3577533-subscriptionowneruserrecordid",
    "html": "Discussion\n\nOn a system that supports multiple users, such as tvOS, use this identifier to check whether the pending content is for the current user. If your app always fetches data from CloudKit on launch, you may improve efficiency by disregarding notifications for other users.\n\nFor more information about supporting a multiuser environment, see Personalizing Your App for Each User on Apple TV.\n\nSee Also\nAccessing the Notification Info\nvar alertBody: String?\nThe notification’s alert body.\nDeprecated\nvar alertLocalizationKey: String?\nThe key that identifies the localized text for the alert body.\nDeprecated\nvar alertLocalizationArgs: [String]?\nThe fields for building a notification’s alert.\nDeprecated\nvar alertActionLocalizationKey: String?\nThe key that identifies the localized string for the notification’s action.\nDeprecated\nvar alertLaunchImage: String?\nThe filename of an image to use as a launch image.\nDeprecated\nvar soundName: String?\nThe name of the sound file to play when a notification arrives.\nDeprecated\nvar badge: NSNumber?\nThe value that the app icon’s badge displays.\nDeprecated\nvar category: String?\nThe name of the action group that corresponds to this notification.\nDeprecated\nvar subscriptionID: CKSubscription.ID?\nThe ID of the subscription that triggers the notification.\nvar title: String?\nThe notification’s title.\nDeprecated\nvar titleLocalizationKey: String?\nThe key that identifies the localized string for the notification’s title.\nDeprecated\nvar titleLocalizationArgs: [String]?\nThe fields for building a notification’s title.\nDeprecated\nvar subtitle: String?\nThe notification’s subtitle.\nDeprecated\nvar subtitleLocalizationKey: String?\nThe key that identifies the localized string for the notification’s subtitle.\nDeprecated\nvar subtitleLocalizationArgs: [String]?\nThe fields for building a notification’s subtitle.\nDeprecated"
  },
  {
    "title": "CKError.Code.zoneBusy | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckerror/code/zonebusy",
    "html": "Discussion\n\nTry the operation again in a few seconds. If you encounter this error again, increase the delay time exponentially for each subsequent retry to minimize server contention for the zone.\n\nCheck for a CKErrorRetryAfterKey key in the userInfo dictionary of any CloudKit error that you receive. Use the value of this key as the number of seconds to wait before retrying the operation.\n\nSee Also\nError Codes\ncase accountTemporarilyUnavailable\nAn error that occurs when the user’s iCloud account is temporarily unavailable.\ncase alreadyShared\nAn error that occurs when CloudKit attempts to share a record with an existing share.\ncase assetFileModified\nAn error that occurs when the system modifies an asset while saving it.\ncase assetFileNotFound\nAn error that occurs when the system can’t find the specified asset.\ncase assetNotAvailable\nAn error that occurs when the system can’t access the specified asset.\ncase badContainer\nAn error that occurs when you use an unknown or unauthorized container.\ncase badDatabase\nAn error that occurs when the operation can’t complete for the specified database.\ncase batchRequestFailed\nAn error that occurs when the system rejects the entire batch of changes.\ncase changeTokenExpired\nAn error that occurs when the change token expires.\ncase constraintViolation\nAn error that occurs when the server rejects the request because of a unique constraint violation.\ncase incompatibleVersion\nAn error that occurs when the current app version is older than the oldest allowed version.\ncase internalError\nA nonrecoverable error that CloudKit encounters.\ncase invalidArguments\nAn error that occurs when the request contains invalid information.\ncase limitExceeded\nAn error that occurs when a request’s size exceeds the limit.\ncase managedAccountRestricted\nAn error that occurs when CloudKit rejects a request due to a managed-account restriction.\ncase missingEntitlement\nAn error that occurs when the app is missing a required entitlement.\ncase networkFailure\nAn error that occurs when a network is available, but CloudKit is inaccessible.\ncase networkUnavailable\nAn error that occurs when the network is unavailable.\ncase notAuthenticated\nAn error that occurs when the user is unauthenticated.\ncase operationCancelled\nAn error that occurs when an operation cancels.\ncase partialFailure\nAn error that occurs when an operation completes with partial failures.\ncase participantMayNeedVerification\nAn error that occurs when the user isn’t a participant of the share.\ncase permissionFailure\nAn error that occurs when the user doesn’t have permission to save or fetch data.\ncase quotaExceeded\nAn error that occurs when saving a record exceeds the user’s storage quota.\ncase referenceViolation\nAn error that occurs when CloudKit can’t find the target of a reference.\ncase requestRateLimited\nAn error that occurs when CloudKit rate-limits requests.\ncase serverRecordChanged\nAn error that occurs when CloudKit rejects a record because the server’s version is different.\ncase serverRejectedRequest\nAn error that occurs when CloudKit rejects the request.\ncase serverResponseLost\nAn error that occurs when CloudKit is unable to maintain the network connection and provide a response.\ncase serviceUnavailable\nAn error that occurs when CloudKit is unavailable.\ncase tooManyParticipants\nAn error that occurs when a share has too many participants.\ncase unknownItem\nAn error that occurs when the specified record doesn’t exist.\ncase userDeletedZone\nAn error that occurs when the user deletes a record zone using the Settings app.\ncase zoneNotFound\nAn error that occurs when the specified record zone doesn’t exist.\ncase resultsTruncated\nAn error that occurs when CloudKit truncates a query’s results.\nDeprecated"
  },
  {
    "title": "CKError.Code.unknownItem | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckerror/code/unknownitem",
    "html": "See Also\nError Codes\ncase accountTemporarilyUnavailable\nAn error that occurs when the user’s iCloud account is temporarily unavailable.\ncase alreadyShared\nAn error that occurs when CloudKit attempts to share a record with an existing share.\ncase assetFileModified\nAn error that occurs when the system modifies an asset while saving it.\ncase assetFileNotFound\nAn error that occurs when the system can’t find the specified asset.\ncase assetNotAvailable\nAn error that occurs when the system can’t access the specified asset.\ncase badContainer\nAn error that occurs when you use an unknown or unauthorized container.\ncase badDatabase\nAn error that occurs when the operation can’t complete for the specified database.\ncase batchRequestFailed\nAn error that occurs when the system rejects the entire batch of changes.\ncase changeTokenExpired\nAn error that occurs when the change token expires.\ncase constraintViolation\nAn error that occurs when the server rejects the request because of a unique constraint violation.\ncase incompatibleVersion\nAn error that occurs when the current app version is older than the oldest allowed version.\ncase internalError\nA nonrecoverable error that CloudKit encounters.\ncase invalidArguments\nAn error that occurs when the request contains invalid information.\ncase limitExceeded\nAn error that occurs when a request’s size exceeds the limit.\ncase managedAccountRestricted\nAn error that occurs when CloudKit rejects a request due to a managed-account restriction.\ncase missingEntitlement\nAn error that occurs when the app is missing a required entitlement.\ncase networkFailure\nAn error that occurs when a network is available, but CloudKit is inaccessible.\ncase networkUnavailable\nAn error that occurs when the network is unavailable.\ncase notAuthenticated\nAn error that occurs when the user is unauthenticated.\ncase operationCancelled\nAn error that occurs when an operation cancels.\ncase partialFailure\nAn error that occurs when an operation completes with partial failures.\ncase participantMayNeedVerification\nAn error that occurs when the user isn’t a participant of the share.\ncase permissionFailure\nAn error that occurs when the user doesn’t have permission to save or fetch data.\ncase quotaExceeded\nAn error that occurs when saving a record exceeds the user’s storage quota.\ncase referenceViolation\nAn error that occurs when CloudKit can’t find the target of a reference.\ncase requestRateLimited\nAn error that occurs when CloudKit rate-limits requests.\ncase serverRecordChanged\nAn error that occurs when CloudKit rejects a record because the server’s version is different.\ncase serverRejectedRequest\nAn error that occurs when CloudKit rejects the request.\ncase serverResponseLost\nAn error that occurs when CloudKit is unable to maintain the network connection and provide a response.\ncase serviceUnavailable\nAn error that occurs when CloudKit is unavailable.\ncase tooManyParticipants\nAn error that occurs when a share has too many participants.\ncase userDeletedZone\nAn error that occurs when the user deletes a record zone using the Settings app.\ncase zoneBusy\nAn error that occurs when the server is too busy to handle the record zone operation.\ncase zoneNotFound\nAn error that occurs when the specified record zone doesn’t exist.\ncase resultsTruncated\nAn error that occurs when CloudKit truncates a query’s results.\nDeprecated"
  },
  {
    "title": "init(recordID:action:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckrecord/reference/1515280-init",
    "html": "Parameters\nrecordID\n\nThe ID of the target record. This method throws an exception if you specify nil for this parameter.\n\naction\n\nThe ownership option use between the target record and any records that incorporate this reference object. If you specify the CKRecord.ReferenceAction.deleteSelf option, the record that the recordID parameter references becomes the owner of (or acts as the parent of) any objects that use this reference object. For a list of possible values, see CKRecord.ReferenceAction.\n\nReturn Value\n\nAn initialized reference object that points to the specified record, or nil if CloudKit can’t initialize the reference.\n\nDiscussion\n\nUse this method when you have only the ID of the record for the target of a link. You might use this method if you save only the ID of the record to a local data cache.\n\nWhen you create a reference object for use in a search predicate, the predicate ignores the value in the action parameter. Search predicates use only the ID of the record during their comparison.\n\nSee Also\nCreating a Reference\ninit(record: CKRecord, action: CKRecord.ReferenceAction)\nCreates a reference object that points to the specified record object.\ntypealias CKRecord.Reference.Action\nA type that represents additional actions that occur when deleting references.\nDeprecated"
  },
  {
    "title": "init(exporter:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksharetransferrepresentation/4043460-init",
    "html": "Parameters\nexporter\n\nA closure that provides a CKShareTransferRepresentation.ExportedShare representation of the specified Item.\n\nReturn Value\n\nA CKShareTransferRepresentation.ExportedShare."
  },
  {
    "title": "configuration | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckoperation/2866213-configuration",
    "html": "See Also\nManaging the Operation's Configuration\nclass CKOperation.Configuration\nAn object that describes how a CloudKit operation behaves.\nvar group: CKOperationGroup?\nThe operation’s group.\nvar longLivedOperationWasPersistedBlock: (() -> Void)?\nThe closure to execute when the server begins to store callbacks for the long-lived operation."
  },
  {
    "title": "CKSyncEngine.Event.willFetchChanges(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncengine/event/willfetchchanges-qbp",
    "html": "See Also\nRemote database changes\nstruct CKSyncEngine.Event.WillFetchChanges\nA type that provides information about an imminent database fetch.\ncase fetchedDatabaseChanges(CKSyncEngine.Event.FetchedDatabaseChanges)\nAn event indicating there are fetched database changes to process.\nstruct CKSyncEngine.Event.FetchedDatabaseChanges\nA type that provides information about fetched database changes.\ncase didFetchChanges(CKSyncEngine.Event.DidFetchChanges)\nAn event that indicates the database fetch is done.\nstruct CKSyncEngine.Event.DidFetchChanges\nA type that provides information about a finished database fetch."
  },
  {
    "title": "CKSyncEngine.Event.didFetchChanges(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncengine/event/didfetchchanges-qbh",
    "html": "See Also\nRemote database changes\ncase willFetchChanges(CKSyncEngine.Event.WillFetchChanges)\nAn event indicating an imminent database fetch.\nstruct CKSyncEngine.Event.WillFetchChanges\nA type that provides information about an imminent database fetch.\ncase fetchedDatabaseChanges(CKSyncEngine.Event.FetchedDatabaseChanges)\nAn event indicating there are fetched database changes to process.\nstruct CKSyncEngine.Event.FetchedDatabaseChanges\nA type that provides information about fetched database changes.\nstruct CKSyncEngine.Event.DidFetchChanges\nA type that provides information about a finished database fetch."
  },
  {
    "title": "cursor | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckqueryoperation/1514975-cursor",
    "html": "Discussion\n\nThe initial value of this property is the cursor that you provide to the init(cursor:) method. When you use a cursor, the operation ignores the contents of the query property. This property’s value is an opaque value that CloudKit provides. For more information, see the queryCompletionBlock property.\n\nIf you intend to specify or change the value in this property, do so before you execute the operation or submit it to a queue.\n\nSee Also\nConfiguring the Query Operation\nvar query: CKQuery?\nThe query for the search.\nclass CKQueryOperation.Cursor\nAn object that marks the stopping point for a query and the starting point for retrieving the remaining results.\nvar zoneID: CKRecordZone.ID?\nThe ID of the record zone that contains the records to search.\nvar resultsLimit: Int\nThe maximum number of records to return at one time.\nclass let maximumResults: Int\nA constant value that represents the maximum number of results CloudKit retrieves.\nvar desiredKeys: [CKRecord.FieldKey]?\nThe fields of the records to fetch."
  },
  {
    "title": "zoneID | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckqueryoperation/1515269-zoneid",
    "html": "Discussion\n\nThe value of this property limits the scope of the search to only the records in the specified record zone. If you don’t specify a record zone, the search includes all record zones.\n\nWhen you create an operation using the init(cursor:) method, this property’s value is nil and CloudKit ignores any changes that you make to it. When the operation executes, the cursor provides the record zone information from the original search that provides the cursor.\n\nSee Also\nConfiguring the Query Operation\nvar query: CKQuery?\nThe query for the search.\nvar cursor: CKQueryOperation.Cursor?\nThe cursor for continuing the search.\nclass CKQueryOperation.Cursor\nAn object that marks the stopping point for a query and the starting point for retrieving the remaining results.\nvar resultsLimit: Int\nThe maximum number of records to return at one time.\nclass let maximumResults: Int\nA constant value that represents the maximum number of results CloudKit retrieves.\nvar desiredKeys: [CKRecord.FieldKey]?\nThe fields of the records to fetch."
  },
  {
    "title": "CKError.Code.incompatibleVersion | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckerror/code/incompatibleversion",
    "html": "See Also\nError Codes\ncase accountTemporarilyUnavailable\nAn error that occurs when the user’s iCloud account is temporarily unavailable.\ncase alreadyShared\nAn error that occurs when CloudKit attempts to share a record with an existing share.\ncase assetFileModified\nAn error that occurs when the system modifies an asset while saving it.\ncase assetFileNotFound\nAn error that occurs when the system can’t find the specified asset.\ncase assetNotAvailable\nAn error that occurs when the system can’t access the specified asset.\ncase badContainer\nAn error that occurs when you use an unknown or unauthorized container.\ncase badDatabase\nAn error that occurs when the operation can’t complete for the specified database.\ncase batchRequestFailed\nAn error that occurs when the system rejects the entire batch of changes.\ncase changeTokenExpired\nAn error that occurs when the change token expires.\ncase constraintViolation\nAn error that occurs when the server rejects the request because of a unique constraint violation.\ncase internalError\nA nonrecoverable error that CloudKit encounters.\ncase invalidArguments\nAn error that occurs when the request contains invalid information.\ncase limitExceeded\nAn error that occurs when a request’s size exceeds the limit.\ncase managedAccountRestricted\nAn error that occurs when CloudKit rejects a request due to a managed-account restriction.\ncase missingEntitlement\nAn error that occurs when the app is missing a required entitlement.\ncase networkFailure\nAn error that occurs when a network is available, but CloudKit is inaccessible.\ncase networkUnavailable\nAn error that occurs when the network is unavailable.\ncase notAuthenticated\nAn error that occurs when the user is unauthenticated.\ncase operationCancelled\nAn error that occurs when an operation cancels.\ncase partialFailure\nAn error that occurs when an operation completes with partial failures.\ncase participantMayNeedVerification\nAn error that occurs when the user isn’t a participant of the share.\ncase permissionFailure\nAn error that occurs when the user doesn’t have permission to save or fetch data.\ncase quotaExceeded\nAn error that occurs when saving a record exceeds the user’s storage quota.\ncase referenceViolation\nAn error that occurs when CloudKit can’t find the target of a reference.\ncase requestRateLimited\nAn error that occurs when CloudKit rate-limits requests.\ncase serverRecordChanged\nAn error that occurs when CloudKit rejects a record because the server’s version is different.\ncase serverRejectedRequest\nAn error that occurs when CloudKit rejects the request.\ncase serverResponseLost\nAn error that occurs when CloudKit is unable to maintain the network connection and provide a response.\ncase serviceUnavailable\nAn error that occurs when CloudKit is unavailable.\ncase tooManyParticipants\nAn error that occurs when a share has too many participants.\ncase unknownItem\nAn error that occurs when the specified record doesn’t exist.\ncase userDeletedZone\nAn error that occurs when the user deletes a record zone using the Settings app.\ncase zoneBusy\nAn error that occurs when the server is too busy to handle the record zone operation.\ncase zoneNotFound\nAn error that occurs when the specified record zone doesn’t exist.\ncase resultsTruncated\nAn error that occurs when CloudKit truncates a query’s results.\nDeprecated"
  },
  {
    "title": "soundName | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cknotification/1428077-soundname",
    "html": "Discussion\n\nThe system uses this property’s value to locate a sound file in the app’s bundle. The sound plays when the system receives a push notification. If the system can’t find the specified file, or if the property’s value is the string default, the system plays the default sound.\n\nSee Also\nAccessing the Notification Info\nvar alertBody: String?\nThe notification’s alert body.\nDeprecated\nvar alertLocalizationKey: String?\nThe key that identifies the localized text for the alert body.\nDeprecated\nvar alertLocalizationArgs: [String]?\nThe fields for building a notification’s alert.\nDeprecated\nvar alertActionLocalizationKey: String?\nThe key that identifies the localized string for the notification’s action.\nDeprecated\nvar alertLaunchImage: String?\nThe filename of an image to use as a launch image.\nDeprecated\nvar badge: NSNumber?\nThe value that the app icon’s badge displays.\nDeprecated\nvar category: String?\nThe name of the action group that corresponds to this notification.\nDeprecated\nvar subscriptionID: CKSubscription.ID?\nThe ID of the subscription that triggers the notification.\nvar subscriptionOwnerUserRecordID: CKRecord.ID?\nThe ID of the user record that creates the subscription that generates the push notification.\nvar title: String?\nThe notification’s title.\nDeprecated\nvar titleLocalizationKey: String?\nThe key that identifies the localized string for the notification’s title.\nDeprecated\nvar titleLocalizationArgs: [String]?\nThe fields for building a notification’s title.\nDeprecated\nvar subtitle: String?\nThe notification’s subtitle.\nDeprecated\nvar subtitleLocalizationKey: String?\nThe key that identifies the localized string for the notification’s subtitle.\nDeprecated\nvar subtitleLocalizationArgs: [String]?\nThe fields for building a notification’s subtitle.\nDeprecated"
  },
  {
    "title": "CKError.Code.networkFailure | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckerror/code/networkfailure",
    "html": "Discussion\n\nYou can retry network failures immediately, but have your app implement a backoff period so that it doesn't attempt the same operation repeatedly.\n\nIf the network is unavailable, have your app monitor for network reachability and wait to reissue the operation when the network is available again. See CFNetworkErrors for more information.\n\nSee Also\nError Codes\ncase accountTemporarilyUnavailable\nAn error that occurs when the user’s iCloud account is temporarily unavailable.\ncase alreadyShared\nAn error that occurs when CloudKit attempts to share a record with an existing share.\ncase assetFileModified\nAn error that occurs when the system modifies an asset while saving it.\ncase assetFileNotFound\nAn error that occurs when the system can’t find the specified asset.\ncase assetNotAvailable\nAn error that occurs when the system can’t access the specified asset.\ncase badContainer\nAn error that occurs when you use an unknown or unauthorized container.\ncase badDatabase\nAn error that occurs when the operation can’t complete for the specified database.\ncase batchRequestFailed\nAn error that occurs when the system rejects the entire batch of changes.\ncase changeTokenExpired\nAn error that occurs when the change token expires.\ncase constraintViolation\nAn error that occurs when the server rejects the request because of a unique constraint violation.\ncase incompatibleVersion\nAn error that occurs when the current app version is older than the oldest allowed version.\ncase internalError\nA nonrecoverable error that CloudKit encounters.\ncase invalidArguments\nAn error that occurs when the request contains invalid information.\ncase limitExceeded\nAn error that occurs when a request’s size exceeds the limit.\ncase managedAccountRestricted\nAn error that occurs when CloudKit rejects a request due to a managed-account restriction.\ncase missingEntitlement\nAn error that occurs when the app is missing a required entitlement.\ncase networkUnavailable\nAn error that occurs when the network is unavailable.\ncase notAuthenticated\nAn error that occurs when the user is unauthenticated.\ncase operationCancelled\nAn error that occurs when an operation cancels.\ncase partialFailure\nAn error that occurs when an operation completes with partial failures.\ncase participantMayNeedVerification\nAn error that occurs when the user isn’t a participant of the share.\ncase permissionFailure\nAn error that occurs when the user doesn’t have permission to save or fetch data.\ncase quotaExceeded\nAn error that occurs when saving a record exceeds the user’s storage quota.\ncase referenceViolation\nAn error that occurs when CloudKit can’t find the target of a reference.\ncase requestRateLimited\nAn error that occurs when CloudKit rate-limits requests.\ncase serverRecordChanged\nAn error that occurs when CloudKit rejects a record because the server’s version is different.\ncase serverRejectedRequest\nAn error that occurs when CloudKit rejects the request.\ncase serverResponseLost\nAn error that occurs when CloudKit is unable to maintain the network connection and provide a response.\ncase serviceUnavailable\nAn error that occurs when CloudKit is unavailable.\ncase tooManyParticipants\nAn error that occurs when a share has too many participants.\ncase unknownItem\nAn error that occurs when the specified record doesn’t exist.\ncase userDeletedZone\nAn error that occurs when the user deletes a record zone using the Settings app.\ncase zoneBusy\nAn error that occurs when the server is too busy to handle the record zone operation.\ncase zoneNotFound\nAn error that occurs when the specified record zone doesn’t exist.\ncase resultsTruncated\nAn error that occurs when CloudKit truncates a query’s results.\nDeprecated"
  },
  {
    "title": "CKError.Code.managedAccountRestricted | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckerror/code/managedaccountrestricted",
    "html": "Discussion\n\nThe system restricts CloudKit access for this account. This is a nonrecoverable error.\n\nSee Also\nError Codes\ncase accountTemporarilyUnavailable\nAn error that occurs when the user’s iCloud account is temporarily unavailable.\ncase alreadyShared\nAn error that occurs when CloudKit attempts to share a record with an existing share.\ncase assetFileModified\nAn error that occurs when the system modifies an asset while saving it.\ncase assetFileNotFound\nAn error that occurs when the system can’t find the specified asset.\ncase assetNotAvailable\nAn error that occurs when the system can’t access the specified asset.\ncase badContainer\nAn error that occurs when you use an unknown or unauthorized container.\ncase badDatabase\nAn error that occurs when the operation can’t complete for the specified database.\ncase batchRequestFailed\nAn error that occurs when the system rejects the entire batch of changes.\ncase changeTokenExpired\nAn error that occurs when the change token expires.\ncase constraintViolation\nAn error that occurs when the server rejects the request because of a unique constraint violation.\ncase incompatibleVersion\nAn error that occurs when the current app version is older than the oldest allowed version.\ncase internalError\nA nonrecoverable error that CloudKit encounters.\ncase invalidArguments\nAn error that occurs when the request contains invalid information.\ncase limitExceeded\nAn error that occurs when a request’s size exceeds the limit.\ncase missingEntitlement\nAn error that occurs when the app is missing a required entitlement.\ncase networkFailure\nAn error that occurs when a network is available, but CloudKit is inaccessible.\ncase networkUnavailable\nAn error that occurs when the network is unavailable.\ncase notAuthenticated\nAn error that occurs when the user is unauthenticated.\ncase operationCancelled\nAn error that occurs when an operation cancels.\ncase partialFailure\nAn error that occurs when an operation completes with partial failures.\ncase participantMayNeedVerification\nAn error that occurs when the user isn’t a participant of the share.\ncase permissionFailure\nAn error that occurs when the user doesn’t have permission to save or fetch data.\ncase quotaExceeded\nAn error that occurs when saving a record exceeds the user’s storage quota.\ncase referenceViolation\nAn error that occurs when CloudKit can’t find the target of a reference.\ncase requestRateLimited\nAn error that occurs when CloudKit rate-limits requests.\ncase serverRecordChanged\nAn error that occurs when CloudKit rejects a record because the server’s version is different.\ncase serverRejectedRequest\nAn error that occurs when CloudKit rejects the request.\ncase serverResponseLost\nAn error that occurs when CloudKit is unable to maintain the network connection and provide a response.\ncase serviceUnavailable\nAn error that occurs when CloudKit is unavailable.\ncase tooManyParticipants\nAn error that occurs when a share has too many participants.\ncase unknownItem\nAn error that occurs when the specified record doesn’t exist.\ncase userDeletedZone\nAn error that occurs when the user deletes a record zone using the Settings app.\ncase zoneBusy\nAn error that occurs when the server is too busy to handle the record zone operation.\ncase zoneNotFound\nAn error that occurs when the specified record zone doesn’t exist.\ncase resultsTruncated\nAn error that occurs when CloudKit truncates a query’s results.\nDeprecated"
  },
  {
    "title": "CKError.Code.constraintViolation | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckerror/code/constraintviolation",
    "html": "See Also\nError Codes\ncase accountTemporarilyUnavailable\nAn error that occurs when the user’s iCloud account is temporarily unavailable.\ncase alreadyShared\nAn error that occurs when CloudKit attempts to share a record with an existing share.\ncase assetFileModified\nAn error that occurs when the system modifies an asset while saving it.\ncase assetFileNotFound\nAn error that occurs when the system can’t find the specified asset.\ncase assetNotAvailable\nAn error that occurs when the system can’t access the specified asset.\ncase badContainer\nAn error that occurs when you use an unknown or unauthorized container.\ncase badDatabase\nAn error that occurs when the operation can’t complete for the specified database.\ncase batchRequestFailed\nAn error that occurs when the system rejects the entire batch of changes.\ncase changeTokenExpired\nAn error that occurs when the change token expires.\ncase incompatibleVersion\nAn error that occurs when the current app version is older than the oldest allowed version.\ncase internalError\nA nonrecoverable error that CloudKit encounters.\ncase invalidArguments\nAn error that occurs when the request contains invalid information.\ncase limitExceeded\nAn error that occurs when a request’s size exceeds the limit.\ncase managedAccountRestricted\nAn error that occurs when CloudKit rejects a request due to a managed-account restriction.\ncase missingEntitlement\nAn error that occurs when the app is missing a required entitlement.\ncase networkFailure\nAn error that occurs when a network is available, but CloudKit is inaccessible.\ncase networkUnavailable\nAn error that occurs when the network is unavailable.\ncase notAuthenticated\nAn error that occurs when the user is unauthenticated.\ncase operationCancelled\nAn error that occurs when an operation cancels.\ncase partialFailure\nAn error that occurs when an operation completes with partial failures.\ncase participantMayNeedVerification\nAn error that occurs when the user isn’t a participant of the share.\ncase permissionFailure\nAn error that occurs when the user doesn’t have permission to save or fetch data.\ncase quotaExceeded\nAn error that occurs when saving a record exceeds the user’s storage quota.\ncase referenceViolation\nAn error that occurs when CloudKit can’t find the target of a reference.\ncase requestRateLimited\nAn error that occurs when CloudKit rate-limits requests.\ncase serverRecordChanged\nAn error that occurs when CloudKit rejects a record because the server’s version is different.\ncase serverRejectedRequest\nAn error that occurs when CloudKit rejects the request.\ncase serverResponseLost\nAn error that occurs when CloudKit is unable to maintain the network connection and provide a response.\ncase serviceUnavailable\nAn error that occurs when CloudKit is unavailable.\ncase tooManyParticipants\nAn error that occurs when a share has too many participants.\ncase unknownItem\nAn error that occurs when the specified record doesn’t exist.\ncase userDeletedZone\nAn error that occurs when the user deletes a record zone using the Settings app.\ncase zoneBusy\nAn error that occurs when the server is too busy to handle the record zone operation.\ncase zoneNotFound\nAn error that occurs when the specified record zone doesn’t exist.\ncase resultsTruncated\nAn error that occurs when CloudKit truncates a query’s results.\nDeprecated"
  },
  {
    "title": "recordZonesToSave | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckmodifyrecordzonesoperation/1415171-recordzonestosave",
    "html": "Discussion\n\nThe initial value of the property is the array that you provide to the init(recordZonesToSave:recordZoneIDsToDelete:) method. You can modify this array as necessary before you execute the operation. The record zones must all target the same database. You can specify nil, or an empty array, for this property.\n\nIf you intend to change the value of this property, do so before you execute the operation or submit the operation to a queue.\n\nSee Also\nConfiguring the Modify Zones Operation\nvar recordZoneIDsToDelete: [CKRecordZone.ID]?\nThe IDs of the record zones to delete permanently from the database."
  },
  {
    "title": "CKError.Code.changeTokenExpired | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckerror/code/changetokenexpired",
    "html": "See Also\nError Codes\ncase accountTemporarilyUnavailable\nAn error that occurs when the user’s iCloud account is temporarily unavailable.\ncase alreadyShared\nAn error that occurs when CloudKit attempts to share a record with an existing share.\ncase assetFileModified\nAn error that occurs when the system modifies an asset while saving it.\ncase assetFileNotFound\nAn error that occurs when the system can’t find the specified asset.\ncase assetNotAvailable\nAn error that occurs when the system can’t access the specified asset.\ncase badContainer\nAn error that occurs when you use an unknown or unauthorized container.\ncase badDatabase\nAn error that occurs when the operation can’t complete for the specified database.\ncase batchRequestFailed\nAn error that occurs when the system rejects the entire batch of changes.\ncase constraintViolation\nAn error that occurs when the server rejects the request because of a unique constraint violation.\ncase incompatibleVersion\nAn error that occurs when the current app version is older than the oldest allowed version.\ncase internalError\nA nonrecoverable error that CloudKit encounters.\ncase invalidArguments\nAn error that occurs when the request contains invalid information.\ncase limitExceeded\nAn error that occurs when a request’s size exceeds the limit.\ncase managedAccountRestricted\nAn error that occurs when CloudKit rejects a request due to a managed-account restriction.\ncase missingEntitlement\nAn error that occurs when the app is missing a required entitlement.\ncase networkFailure\nAn error that occurs when a network is available, but CloudKit is inaccessible.\ncase networkUnavailable\nAn error that occurs when the network is unavailable.\ncase notAuthenticated\nAn error that occurs when the user is unauthenticated.\ncase operationCancelled\nAn error that occurs when an operation cancels.\ncase partialFailure\nAn error that occurs when an operation completes with partial failures.\ncase participantMayNeedVerification\nAn error that occurs when the user isn’t a participant of the share.\ncase permissionFailure\nAn error that occurs when the user doesn’t have permission to save or fetch data.\ncase quotaExceeded\nAn error that occurs when saving a record exceeds the user’s storage quota.\ncase referenceViolation\nAn error that occurs when CloudKit can’t find the target of a reference.\ncase requestRateLimited\nAn error that occurs when CloudKit rate-limits requests.\ncase serverRecordChanged\nAn error that occurs when CloudKit rejects a record because the server’s version is different.\ncase serverRejectedRequest\nAn error that occurs when CloudKit rejects the request.\ncase serverResponseLost\nAn error that occurs when CloudKit is unable to maintain the network connection and provide a response.\ncase serviceUnavailable\nAn error that occurs when CloudKit is unavailable.\ncase tooManyParticipants\nAn error that occurs when a share has too many participants.\ncase unknownItem\nAn error that occurs when the specified record doesn’t exist.\ncase userDeletedZone\nAn error that occurs when the user deletes a record zone using the Settings app.\ncase zoneBusy\nAn error that occurs when the server is too busy to handle the record zone operation.\ncase zoneNotFound\nAn error that occurs when the specified record zone doesn’t exist.\ncase resultsTruncated\nAn error that occurs when CloudKit truncates a query’s results.\nDeprecated"
  },
  {
    "title": "init() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckmodifyrecordzonesoperation/1415169-init",
    "html": "Discussion\n\nYou must set at least one of the recordZonesToSave or recordZoneIDsToDelete properties before you execute the operation.\n\nSee Also\nCreating a Modify Zones Operation\ninit(recordZonesToSave: [CKRecordZone]?, recordZoneIDsToDelete: [CKRecordZone.ID]?)\nCreates an operation for modifying the specified record zones."
  },
  {
    "title": "CKError.Code.batchRequestFailed | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckerror/code/batchrequestfailed",
    "html": "Discussion\n\nThis error occurs when an operation attempts to save multiple items in a custom zone, but one of those items encounters an error. Because custom zones are atomic, the entire batch fails. The items that cause the problem have their own errors, and all other items in the batch have a CKError.Code.batchRequestFailed error to indicate that the system can’t save them.\n\nThis error indicates that the system can’t process the associated item due to an error in another item in the operation. Check the other per-item errors under CKPartialErrorsByItemIDKey for any that aren't CKError.Code.batchRequestFailed errors. Handle those errors, and then retry all items in the operation.\n\nSee Also\nError Codes\ncase accountTemporarilyUnavailable\nAn error that occurs when the user’s iCloud account is temporarily unavailable.\ncase alreadyShared\nAn error that occurs when CloudKit attempts to share a record with an existing share.\ncase assetFileModified\nAn error that occurs when the system modifies an asset while saving it.\ncase assetFileNotFound\nAn error that occurs when the system can’t find the specified asset.\ncase assetNotAvailable\nAn error that occurs when the system can’t access the specified asset.\ncase badContainer\nAn error that occurs when you use an unknown or unauthorized container.\ncase badDatabase\nAn error that occurs when the operation can’t complete for the specified database.\ncase changeTokenExpired\nAn error that occurs when the change token expires.\ncase constraintViolation\nAn error that occurs when the server rejects the request because of a unique constraint violation.\ncase incompatibleVersion\nAn error that occurs when the current app version is older than the oldest allowed version.\ncase internalError\nA nonrecoverable error that CloudKit encounters.\ncase invalidArguments\nAn error that occurs when the request contains invalid information.\ncase limitExceeded\nAn error that occurs when a request’s size exceeds the limit.\ncase managedAccountRestricted\nAn error that occurs when CloudKit rejects a request due to a managed-account restriction.\ncase missingEntitlement\nAn error that occurs when the app is missing a required entitlement.\ncase networkFailure\nAn error that occurs when a network is available, but CloudKit is inaccessible.\ncase networkUnavailable\nAn error that occurs when the network is unavailable.\ncase notAuthenticated\nAn error that occurs when the user is unauthenticated.\ncase operationCancelled\nAn error that occurs when an operation cancels.\ncase partialFailure\nAn error that occurs when an operation completes with partial failures.\ncase participantMayNeedVerification\nAn error that occurs when the user isn’t a participant of the share.\ncase permissionFailure\nAn error that occurs when the user doesn’t have permission to save or fetch data.\ncase quotaExceeded\nAn error that occurs when saving a record exceeds the user’s storage quota.\ncase referenceViolation\nAn error that occurs when CloudKit can’t find the target of a reference.\ncase requestRateLimited\nAn error that occurs when CloudKit rate-limits requests.\ncase serverRecordChanged\nAn error that occurs when CloudKit rejects a record because the server’s version is different.\ncase serverRejectedRequest\nAn error that occurs when CloudKit rejects the request.\ncase serverResponseLost\nAn error that occurs when CloudKit is unable to maintain the network connection and provide a response.\ncase serviceUnavailable\nAn error that occurs when CloudKit is unavailable.\ncase tooManyParticipants\nAn error that occurs when a share has too many participants.\ncase unknownItem\nAn error that occurs when the specified record doesn’t exist.\ncase userDeletedZone\nAn error that occurs when the user deletes a record zone using the Settings app.\ncase zoneBusy\nAn error that occurs when the server is too busy to handle the record zone operation.\ncase zoneNotFound\nAn error that occurs when the specified record zone doesn’t exist.\ncase resultsTruncated\nAn error that occurs when CloudKit truncates a query’s results.\nDeprecated"
  },
  {
    "title": "init(recordZonesToSave:recordZoneIDsToDelete:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckmodifyrecordzonesoperation/3003363-init",
    "html": "Parameters\nrecordZonesToSave\n\nThe record zones to save. You can specify nil for this parameter.\n\nrecordZoneIDsToDelete\n\nThe IDs of the record zones to delete. You can specify nil for this parameter.\n\nDiscussion\n\nThe record zones you intend to save or delete must all reside in the same database, which you specify when you configure the operation. If you delete a record zone, CloudKit deletes any records it contains.\n\nSee Also\nCreating a Modify Zones Operation\ninit()\nCreates an empty modify record zones operation."
  },
  {
    "title": "sharing | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckrecordzone/capabilities/1640382-sharing",
    "html": "Discussion\n\nCloudKit allows you to share record hierarchies from custom record zones that you create in the user’s private database. For more information, see Shared Records.\n\nSee Also\nZone Capabilities\nstatic var atomic: CKRecordZone.Capabilities\nA capability that allows atomic changes of multiple records.\nstatic var fetchChanges: CKRecordZone.Capabilities\nA capability for fetching only the changed records from a zone.\nstatic var zoneWideSharing: CKRecordZone.Capabilities\nA capability for sharing the entire contents of a record zone."
  },
  {
    "title": "CKError.Code.alreadyShared | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckerror/code/alreadyshared",
    "html": "Discussion\n\nA record can exist in only a single share at a time. This error means that one of the following conditions exists:\n\nThe record already has an existing share.\n\nThe record has a parent, and its parent has a share.\n\nThe record is a parent, and one of its children has a share.\n\nSee Also\nError Codes\ncase accountTemporarilyUnavailable\nAn error that occurs when the user’s iCloud account is temporarily unavailable.\ncase assetFileModified\nAn error that occurs when the system modifies an asset while saving it.\ncase assetFileNotFound\nAn error that occurs when the system can’t find the specified asset.\ncase assetNotAvailable\nAn error that occurs when the system can’t access the specified asset.\ncase badContainer\nAn error that occurs when you use an unknown or unauthorized container.\ncase badDatabase\nAn error that occurs when the operation can’t complete for the specified database.\ncase batchRequestFailed\nAn error that occurs when the system rejects the entire batch of changes.\ncase changeTokenExpired\nAn error that occurs when the change token expires.\ncase constraintViolation\nAn error that occurs when the server rejects the request because of a unique constraint violation.\ncase incompatibleVersion\nAn error that occurs when the current app version is older than the oldest allowed version.\ncase internalError\nA nonrecoverable error that CloudKit encounters.\ncase invalidArguments\nAn error that occurs when the request contains invalid information.\ncase limitExceeded\nAn error that occurs when a request’s size exceeds the limit.\ncase managedAccountRestricted\nAn error that occurs when CloudKit rejects a request due to a managed-account restriction.\ncase missingEntitlement\nAn error that occurs when the app is missing a required entitlement.\ncase networkFailure\nAn error that occurs when a network is available, but CloudKit is inaccessible.\ncase networkUnavailable\nAn error that occurs when the network is unavailable.\ncase notAuthenticated\nAn error that occurs when the user is unauthenticated.\ncase operationCancelled\nAn error that occurs when an operation cancels.\ncase partialFailure\nAn error that occurs when an operation completes with partial failures.\ncase participantMayNeedVerification\nAn error that occurs when the user isn’t a participant of the share.\ncase permissionFailure\nAn error that occurs when the user doesn’t have permission to save or fetch data.\ncase quotaExceeded\nAn error that occurs when saving a record exceeds the user’s storage quota.\ncase referenceViolation\nAn error that occurs when CloudKit can’t find the target of a reference.\ncase requestRateLimited\nAn error that occurs when CloudKit rate-limits requests.\ncase serverRecordChanged\nAn error that occurs when CloudKit rejects a record because the server’s version is different.\ncase serverRejectedRequest\nAn error that occurs when CloudKit rejects the request.\ncase serverResponseLost\nAn error that occurs when CloudKit is unable to maintain the network connection and provide a response.\ncase serviceUnavailable\nAn error that occurs when CloudKit is unavailable.\ncase tooManyParticipants\nAn error that occurs when a share has too many participants.\ncase unknownItem\nAn error that occurs when the specified record doesn’t exist.\ncase userDeletedZone\nAn error that occurs when the user deletes a record zone using the Settings app.\ncase zoneBusy\nAn error that occurs when the server is too busy to handle the record zone operation.\ncase zoneNotFound\nAn error that occurs when the specified record zone doesn’t exist.\ncase resultsTruncated\nAn error that occurs when CloudKit truncates a query’s results.\nDeprecated"
  },
  {
    "title": "CKError.Code.badContainer | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckerror/code/badcontainer",
    "html": "See Also\nError Codes\ncase accountTemporarilyUnavailable\nAn error that occurs when the user’s iCloud account is temporarily unavailable.\ncase alreadyShared\nAn error that occurs when CloudKit attempts to share a record with an existing share.\ncase assetFileModified\nAn error that occurs when the system modifies an asset while saving it.\ncase assetFileNotFound\nAn error that occurs when the system can’t find the specified asset.\ncase assetNotAvailable\nAn error that occurs when the system can’t access the specified asset.\ncase badDatabase\nAn error that occurs when the operation can’t complete for the specified database.\ncase batchRequestFailed\nAn error that occurs when the system rejects the entire batch of changes.\ncase changeTokenExpired\nAn error that occurs when the change token expires.\ncase constraintViolation\nAn error that occurs when the server rejects the request because of a unique constraint violation.\ncase incompatibleVersion\nAn error that occurs when the current app version is older than the oldest allowed version.\ncase internalError\nA nonrecoverable error that CloudKit encounters.\ncase invalidArguments\nAn error that occurs when the request contains invalid information.\ncase limitExceeded\nAn error that occurs when a request’s size exceeds the limit.\ncase managedAccountRestricted\nAn error that occurs when CloudKit rejects a request due to a managed-account restriction.\ncase missingEntitlement\nAn error that occurs when the app is missing a required entitlement.\ncase networkFailure\nAn error that occurs when a network is available, but CloudKit is inaccessible.\ncase networkUnavailable\nAn error that occurs when the network is unavailable.\ncase notAuthenticated\nAn error that occurs when the user is unauthenticated.\ncase operationCancelled\nAn error that occurs when an operation cancels.\ncase partialFailure\nAn error that occurs when an operation completes with partial failures.\ncase participantMayNeedVerification\nAn error that occurs when the user isn’t a participant of the share.\ncase permissionFailure\nAn error that occurs when the user doesn’t have permission to save or fetch data.\ncase quotaExceeded\nAn error that occurs when saving a record exceeds the user’s storage quota.\ncase referenceViolation\nAn error that occurs when CloudKit can’t find the target of a reference.\ncase requestRateLimited\nAn error that occurs when CloudKit rate-limits requests.\ncase serverRecordChanged\nAn error that occurs when CloudKit rejects a record because the server’s version is different.\ncase serverRejectedRequest\nAn error that occurs when CloudKit rejects the request.\ncase serverResponseLost\nAn error that occurs when CloudKit is unable to maintain the network connection and provide a response.\ncase serviceUnavailable\nAn error that occurs when CloudKit is unavailable.\ncase tooManyParticipants\nAn error that occurs when a share has too many participants.\ncase unknownItem\nAn error that occurs when the specified record doesn’t exist.\ncase userDeletedZone\nAn error that occurs when the user deletes a record zone using the Settings app.\ncase zoneBusy\nAn error that occurs when the server is too busy to handle the record zone operation.\ncase zoneNotFound\nAn error that occurs when the specified record zone doesn’t exist.\ncase resultsTruncated\nAn error that occurs when CloudKit truncates a query’s results.\nDeprecated"
  },
  {
    "title": "CKError.Code.accountTemporarilyUnavailable | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckerror/code/accounttemporarilyunavailable",
    "html": "Discussion\n\nYou receive this error when the user’s iCloud account is available, but isn’t ready to support CloudKit operations. Don’t delete any cached data and don’t enqueue any additional CloudKit operations.\n\nChecking the account status after the operation fails, assuming there are no other changes to the account’s status, returns CKAccountStatus.temporarilyUnavailable. Use the CKAccountChanged notification to listen for future account status changes, and retry the operation after the status becomes CKAccountStatus.available.\n\nSee Also\nError Codes\ncase alreadyShared\nAn error that occurs when CloudKit attempts to share a record with an existing share.\ncase assetFileModified\nAn error that occurs when the system modifies an asset while saving it.\ncase assetFileNotFound\nAn error that occurs when the system can’t find the specified asset.\ncase assetNotAvailable\nAn error that occurs when the system can’t access the specified asset.\ncase badContainer\nAn error that occurs when you use an unknown or unauthorized container.\ncase badDatabase\nAn error that occurs when the operation can’t complete for the specified database.\ncase batchRequestFailed\nAn error that occurs when the system rejects the entire batch of changes.\ncase changeTokenExpired\nAn error that occurs when the change token expires.\ncase constraintViolation\nAn error that occurs when the server rejects the request because of a unique constraint violation.\ncase incompatibleVersion\nAn error that occurs when the current app version is older than the oldest allowed version.\ncase internalError\nA nonrecoverable error that CloudKit encounters.\ncase invalidArguments\nAn error that occurs when the request contains invalid information.\ncase limitExceeded\nAn error that occurs when a request’s size exceeds the limit.\ncase managedAccountRestricted\nAn error that occurs when CloudKit rejects a request due to a managed-account restriction.\ncase missingEntitlement\nAn error that occurs when the app is missing a required entitlement.\ncase networkFailure\nAn error that occurs when a network is available, but CloudKit is inaccessible.\ncase networkUnavailable\nAn error that occurs when the network is unavailable.\ncase notAuthenticated\nAn error that occurs when the user is unauthenticated.\ncase operationCancelled\nAn error that occurs when an operation cancels.\ncase partialFailure\nAn error that occurs when an operation completes with partial failures.\ncase participantMayNeedVerification\nAn error that occurs when the user isn’t a participant of the share.\ncase permissionFailure\nAn error that occurs when the user doesn’t have permission to save or fetch data.\ncase quotaExceeded\nAn error that occurs when saving a record exceeds the user’s storage quota.\ncase referenceViolation\nAn error that occurs when CloudKit can’t find the target of a reference.\ncase requestRateLimited\nAn error that occurs when CloudKit rate-limits requests.\ncase serverRecordChanged\nAn error that occurs when CloudKit rejects a record because the server’s version is different.\ncase serverRejectedRequest\nAn error that occurs when CloudKit rejects the request.\ncase serverResponseLost\nAn error that occurs when CloudKit is unable to maintain the network connection and provide a response.\ncase serviceUnavailable\nAn error that occurs when CloudKit is unavailable.\ncase tooManyParticipants\nAn error that occurs when a share has too many participants.\ncase unknownItem\nAn error that occurs when the specified record doesn’t exist.\ncase userDeletedZone\nAn error that occurs when the user deletes a record zone using the Settings app.\ncase zoneBusy\nAn error that occurs when the server is too busy to handle the record zone operation.\ncase zoneNotFound\nAn error that occurs when the specified record zone doesn’t exist.\ncase resultsTruncated\nAn error that occurs when CloudKit truncates a query’s results.\nDeprecated"
  },
  {
    "title": "CKError.Code.assetNotAvailable | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckerror/code/assetnotavailable",
    "html": "See Also\nError Codes\ncase accountTemporarilyUnavailable\nAn error that occurs when the user’s iCloud account is temporarily unavailable.\ncase alreadyShared\nAn error that occurs when CloudKit attempts to share a record with an existing share.\ncase assetFileModified\nAn error that occurs when the system modifies an asset while saving it.\ncase assetFileNotFound\nAn error that occurs when the system can’t find the specified asset.\ncase badContainer\nAn error that occurs when you use an unknown or unauthorized container.\ncase badDatabase\nAn error that occurs when the operation can’t complete for the specified database.\ncase batchRequestFailed\nAn error that occurs when the system rejects the entire batch of changes.\ncase changeTokenExpired\nAn error that occurs when the change token expires.\ncase constraintViolation\nAn error that occurs when the server rejects the request because of a unique constraint violation.\ncase incompatibleVersion\nAn error that occurs when the current app version is older than the oldest allowed version.\ncase internalError\nA nonrecoverable error that CloudKit encounters.\ncase invalidArguments\nAn error that occurs when the request contains invalid information.\ncase limitExceeded\nAn error that occurs when a request’s size exceeds the limit.\ncase managedAccountRestricted\nAn error that occurs when CloudKit rejects a request due to a managed-account restriction.\ncase missingEntitlement\nAn error that occurs when the app is missing a required entitlement.\ncase networkFailure\nAn error that occurs when a network is available, but CloudKit is inaccessible.\ncase networkUnavailable\nAn error that occurs when the network is unavailable.\ncase notAuthenticated\nAn error that occurs when the user is unauthenticated.\ncase operationCancelled\nAn error that occurs when an operation cancels.\ncase partialFailure\nAn error that occurs when an operation completes with partial failures.\ncase participantMayNeedVerification\nAn error that occurs when the user isn’t a participant of the share.\ncase permissionFailure\nAn error that occurs when the user doesn’t have permission to save or fetch data.\ncase quotaExceeded\nAn error that occurs when saving a record exceeds the user’s storage quota.\ncase referenceViolation\nAn error that occurs when CloudKit can’t find the target of a reference.\ncase requestRateLimited\nAn error that occurs when CloudKit rate-limits requests.\ncase serverRecordChanged\nAn error that occurs when CloudKit rejects a record because the server’s version is different.\ncase serverRejectedRequest\nAn error that occurs when CloudKit rejects the request.\ncase serverResponseLost\nAn error that occurs when CloudKit is unable to maintain the network connection and provide a response.\ncase serviceUnavailable\nAn error that occurs when CloudKit is unavailable.\ncase tooManyParticipants\nAn error that occurs when a share has too many participants.\ncase unknownItem\nAn error that occurs when the specified record doesn’t exist.\ncase userDeletedZone\nAn error that occurs when the user deletes a record zone using the Settings app.\ncase zoneBusy\nAn error that occurs when the server is too busy to handle the record zone operation.\ncase zoneNotFound\nAn error that occurs when the specified record zone doesn’t exist.\ncase resultsTruncated\nAn error that occurs when CloudKit truncates a query’s results.\nDeprecated"
  },
  {
    "title": "CKError.Code.badDatabase | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckerror/code/baddatabase",
    "html": "Discussion\n\nThe system submitted the operation to the wrong database. Make sure you aren’t submitting a share operation to the public database, or a record zone create operation to the shared database.\n\nSee Also\nError Codes\ncase accountTemporarilyUnavailable\nAn error that occurs when the user’s iCloud account is temporarily unavailable.\ncase alreadyShared\nAn error that occurs when CloudKit attempts to share a record with an existing share.\ncase assetFileModified\nAn error that occurs when the system modifies an asset while saving it.\ncase assetFileNotFound\nAn error that occurs when the system can’t find the specified asset.\ncase assetNotAvailable\nAn error that occurs when the system can’t access the specified asset.\ncase badContainer\nAn error that occurs when you use an unknown or unauthorized container.\ncase batchRequestFailed\nAn error that occurs when the system rejects the entire batch of changes.\ncase changeTokenExpired\nAn error that occurs when the change token expires.\ncase constraintViolation\nAn error that occurs when the server rejects the request because of a unique constraint violation.\ncase incompatibleVersion\nAn error that occurs when the current app version is older than the oldest allowed version.\ncase internalError\nA nonrecoverable error that CloudKit encounters.\ncase invalidArguments\nAn error that occurs when the request contains invalid information.\ncase limitExceeded\nAn error that occurs when a request’s size exceeds the limit.\ncase managedAccountRestricted\nAn error that occurs when CloudKit rejects a request due to a managed-account restriction.\ncase missingEntitlement\nAn error that occurs when the app is missing a required entitlement.\ncase networkFailure\nAn error that occurs when a network is available, but CloudKit is inaccessible.\ncase networkUnavailable\nAn error that occurs when the network is unavailable.\ncase notAuthenticated\nAn error that occurs when the user is unauthenticated.\ncase operationCancelled\nAn error that occurs when an operation cancels.\ncase partialFailure\nAn error that occurs when an operation completes with partial failures.\ncase participantMayNeedVerification\nAn error that occurs when the user isn’t a participant of the share.\ncase permissionFailure\nAn error that occurs when the user doesn’t have permission to save or fetch data.\ncase quotaExceeded\nAn error that occurs when saving a record exceeds the user’s storage quota.\ncase referenceViolation\nAn error that occurs when CloudKit can’t find the target of a reference.\ncase requestRateLimited\nAn error that occurs when CloudKit rate-limits requests.\ncase serverRecordChanged\nAn error that occurs when CloudKit rejects a record because the server’s version is different.\ncase serverRejectedRequest\nAn error that occurs when CloudKit rejects the request.\ncase serverResponseLost\nAn error that occurs when CloudKit is unable to maintain the network connection and provide a response.\ncase serviceUnavailable\nAn error that occurs when CloudKit is unavailable.\ncase tooManyParticipants\nAn error that occurs when a share has too many participants.\ncase unknownItem\nAn error that occurs when the specified record doesn’t exist.\ncase userDeletedZone\nAn error that occurs when the user deletes a record zone using the Settings app.\ncase zoneBusy\nAn error that occurs when the server is too busy to handle the record zone operation.\ncase zoneNotFound\nAn error that occurs when the specified record zone doesn’t exist.\ncase resultsTruncated\nAn error that occurs when CloudKit truncates a query’s results.\nDeprecated"
  },
  {
    "title": "CKError.Code.assetFileNotFound | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckerror/code/assetfilenotfound",
    "html": "See Also\nError Codes\ncase accountTemporarilyUnavailable\nAn error that occurs when the user’s iCloud account is temporarily unavailable.\ncase alreadyShared\nAn error that occurs when CloudKit attempts to share a record with an existing share.\ncase assetFileModified\nAn error that occurs when the system modifies an asset while saving it.\ncase assetNotAvailable\nAn error that occurs when the system can’t access the specified asset.\ncase badContainer\nAn error that occurs when you use an unknown or unauthorized container.\ncase badDatabase\nAn error that occurs when the operation can’t complete for the specified database.\ncase batchRequestFailed\nAn error that occurs when the system rejects the entire batch of changes.\ncase changeTokenExpired\nAn error that occurs when the change token expires.\ncase constraintViolation\nAn error that occurs when the server rejects the request because of a unique constraint violation.\ncase incompatibleVersion\nAn error that occurs when the current app version is older than the oldest allowed version.\ncase internalError\nA nonrecoverable error that CloudKit encounters.\ncase invalidArguments\nAn error that occurs when the request contains invalid information.\ncase limitExceeded\nAn error that occurs when a request’s size exceeds the limit.\ncase managedAccountRestricted\nAn error that occurs when CloudKit rejects a request due to a managed-account restriction.\ncase missingEntitlement\nAn error that occurs when the app is missing a required entitlement.\ncase networkFailure\nAn error that occurs when a network is available, but CloudKit is inaccessible.\ncase networkUnavailable\nAn error that occurs when the network is unavailable.\ncase notAuthenticated\nAn error that occurs when the user is unauthenticated.\ncase operationCancelled\nAn error that occurs when an operation cancels.\ncase partialFailure\nAn error that occurs when an operation completes with partial failures.\ncase participantMayNeedVerification\nAn error that occurs when the user isn’t a participant of the share.\ncase permissionFailure\nAn error that occurs when the user doesn’t have permission to save or fetch data.\ncase quotaExceeded\nAn error that occurs when saving a record exceeds the user’s storage quota.\ncase referenceViolation\nAn error that occurs when CloudKit can’t find the target of a reference.\ncase requestRateLimited\nAn error that occurs when CloudKit rate-limits requests.\ncase serverRecordChanged\nAn error that occurs when CloudKit rejects a record because the server’s version is different.\ncase serverRejectedRequest\nAn error that occurs when CloudKit rejects the request.\ncase serverResponseLost\nAn error that occurs when CloudKit is unable to maintain the network connection and provide a response.\ncase serviceUnavailable\nAn error that occurs when CloudKit is unavailable.\ncase tooManyParticipants\nAn error that occurs when a share has too many participants.\ncase unknownItem\nAn error that occurs when the specified record doesn’t exist.\ncase userDeletedZone\nAn error that occurs when the user deletes a record zone using the Settings app.\ncase zoneBusy\nAn error that occurs when the server is too busy to handle the record zone operation.\ncase zoneNotFound\nAn error that occurs when the specified record zone doesn’t exist.\ncase resultsTruncated\nAn error that occurs when CloudKit truncates a query’s results.\nDeprecated"
  },
  {
    "title": "subscriptionID | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cknotification/3003365-subscriptionid",
    "html": "See Also\nAccessing the Notification Info\nvar alertBody: String?\nThe notification’s alert body.\nDeprecated\nvar alertLocalizationKey: String?\nThe key that identifies the localized text for the alert body.\nDeprecated\nvar alertLocalizationArgs: [String]?\nThe fields for building a notification’s alert.\nDeprecated\nvar alertActionLocalizationKey: String?\nThe key that identifies the localized string for the notification’s action.\nDeprecated\nvar alertLaunchImage: String?\nThe filename of an image to use as a launch image.\nDeprecated\nvar soundName: String?\nThe name of the sound file to play when a notification arrives.\nDeprecated\nvar badge: NSNumber?\nThe value that the app icon’s badge displays.\nDeprecated\nvar category: String?\nThe name of the action group that corresponds to this notification.\nDeprecated\nvar subscriptionOwnerUserRecordID: CKRecord.ID?\nThe ID of the user record that creates the subscription that generates the push notification.\nvar title: String?\nThe notification’s title.\nDeprecated\nvar titleLocalizationKey: String?\nThe key that identifies the localized string for the notification’s title.\nDeprecated\nvar titleLocalizationArgs: [String]?\nThe fields for building a notification’s title.\nDeprecated\nvar subtitle: String?\nThe notification’s subtitle.\nDeprecated\nvar subtitleLocalizationKey: String?\nThe key that identifies the localized string for the notification’s subtitle.\nDeprecated\nvar subtitleLocalizationArgs: [String]?\nThe fields for building a notification’s subtitle.\nDeprecated"
  },
  {
    "title": "badge | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cknotification/1428082-badge",
    "html": "See Also\nAccessing the Notification Info\nvar alertBody: String?\nThe notification’s alert body.\nDeprecated\nvar alertLocalizationKey: String?\nThe key that identifies the localized text for the alert body.\nDeprecated\nvar alertLocalizationArgs: [String]?\nThe fields for building a notification’s alert.\nDeprecated\nvar alertActionLocalizationKey: String?\nThe key that identifies the localized string for the notification’s action.\nDeprecated\nvar alertLaunchImage: String?\nThe filename of an image to use as a launch image.\nDeprecated\nvar soundName: String?\nThe name of the sound file to play when a notification arrives.\nDeprecated\nvar category: String?\nThe name of the action group that corresponds to this notification.\nDeprecated\nvar subscriptionID: CKSubscription.ID?\nThe ID of the subscription that triggers the notification.\nvar subscriptionOwnerUserRecordID: CKRecord.ID?\nThe ID of the user record that creates the subscription that generates the push notification.\nvar title: String?\nThe notification’s title.\nDeprecated\nvar titleLocalizationKey: String?\nThe key that identifies the localized string for the notification’s title.\nDeprecated\nvar titleLocalizationArgs: [String]?\nThe fields for building a notification’s title.\nDeprecated\nvar subtitle: String?\nThe notification’s subtitle.\nDeprecated\nvar subtitleLocalizationKey: String?\nThe key that identifies the localized string for the notification’s subtitle.\nDeprecated\nvar subtitleLocalizationArgs: [String]?\nThe fields for building a notification’s subtitle.\nDeprecated"
  },
  {
    "title": "encodeSystemFields(with:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckrecord/1462200-encodesystemfields",
    "html": "Parameters\ncoder\n\nAn archiver object.\n\nDiscussion\n\nUse this method to encode the record’s metadata that CloudKit provides. Every record has keys that the system defines that correspond to record metadata, such as the record ID, record type, creation date, and so on. This method encodes those keys in the specified archiver. This method doesn’t include any keys you add to the record. It also doesn’t encode the keys that the changedKeys() method returns.\n\nYou might use this method when you want to store only the system metadata because you store the actual record data elsewhere."
  },
  {
    "title": "subscriptionIDsToDelete | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckmodifysubscriptionsoperation/3003599-subscriptionidstodelete",
    "html": "Discussion\n\nThis property contains the IDs of the subscriptions that you want to delete. Its initial value is the array that you pass to the init(subscriptionsToSave:subscriptionIDsToDelete:) method. Modify this property as necessary before you execute the operation or submit it to a queue.\n\nSee Also\nConfiguring the Modify Subscriptions Operation\nvar subscriptionsToSave: [CKSubscription]?\nThe subscriptions to save to the database."
  },
  {
    "title": "CKRecord.RecordType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckrecord/recordtype",
    "html": "See Also\nCreating a Record\ninit(recordType: CKRecord.RecordType, recordID: CKRecord.ID)\nCreates a record using an ID that you provide.\ntypealias CKRecord.FieldKey\nThe data type that CloudKit requires for record field names.\ninit(recordType: CKRecord.RecordType, zoneID: CKRecordZone.ID)\nCreates a record in the specified zone.\nDeprecated"
  },
  {
    "title": "alertBody | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cknotification/1428084-alertbody",
    "html": "Discussion\n\nThis property contains the nonlocalized text that the notification’s alert displays.\n\nSee Also\nAccessing the Notification Info\nvar alertLocalizationKey: String?\nThe key that identifies the localized text for the alert body.\nDeprecated\nvar alertLocalizationArgs: [String]?\nThe fields for building a notification’s alert.\nDeprecated\nvar alertActionLocalizationKey: String?\nThe key that identifies the localized string for the notification’s action.\nDeprecated\nvar alertLaunchImage: String?\nThe filename of an image to use as a launch image.\nDeprecated\nvar soundName: String?\nThe name of the sound file to play when a notification arrives.\nDeprecated\nvar badge: NSNumber?\nThe value that the app icon’s badge displays.\nDeprecated\nvar category: String?\nThe name of the action group that corresponds to this notification.\nDeprecated\nvar subscriptionID: CKSubscription.ID?\nThe ID of the subscription that triggers the notification.\nvar subscriptionOwnerUserRecordID: CKRecord.ID?\nThe ID of the user record that creates the subscription that generates the push notification.\nvar title: String?\nThe notification’s title.\nDeprecated\nvar titleLocalizationKey: String?\nThe key that identifies the localized string for the notification’s title.\nDeprecated\nvar titleLocalizationArgs: [String]?\nThe fields for building a notification’s title.\nDeprecated\nvar subtitle: String?\nThe notification’s subtitle.\nDeprecated\nvar subtitleLocalizationKey: String?\nThe key that identifies the localized string for the notification’s subtitle.\nDeprecated\nvar subtitleLocalizationArgs: [String]?\nThe fields for building a notification’s subtitle.\nDeprecated"
  },
  {
    "title": "notificationID | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cknotification/1428080-notificationid",
    "html": "Discussion\n\nUse this property to differentiate notifications.\n\nSee Also\nIdentifying the Notification\nclass CKNotification.ID\nAn object that uniquely identifies a push notification that a container sends.\nvar notificationType: CKNotification.NotificationType\nThe type of event that generates the notification.\nenum CKNotification.NotificationType\nConstants that indicate the type of event that generates the push notification.\nvar containerIdentifier: String?\nThe ID of the container with the content that triggers the notification."
  },
  {
    "title": "init(fromRemoteNotificationDictionary:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cknotification/1428130-init",
    "html": "Parameters\nnotificationDictionary\n\nThe push notification’s payload data. Use the dictionary that the system provides to your app delegate’s application(_:didReceiveRemoteNotification:fetchCompletionHandler:) method. This parameter must not be nil."
  },
  {
    "title": "modifySubscriptionsCompletionBlock | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckmodifysubscriptionsoperation/3003598-modifysubscriptionscompletionblo",
    "html": "Discussion\n\nThe closure returns no value and takes the following parameters:\n\nThe subscriptions to save.\n\nThe IDs of the subscriptions to delete.\n\nAn error that contains information about a problem, or nil if CloudKit successfully modifies the subscriptions.\n\nThe operation executes this closure only once, and it’s your only opportunity to process the results. The closure executes on a background queue, so any tasks that require access to the main queue must dispatch accordingly.\n\nThe closure reports an error of type CKError.Code.partialFailure when it can’t modify some of the subscriptions. The userInfo dictionary of the error contains a CKPartialErrorsByItemIDKey key that has a dictionary as its value. The keys of the dictionary are the IDs of the subscriptions that CloudKit can’t modify, and the corresponding values are errors that contain information about the failures.\n\nSet this property’s value before you execute the operation or submit it to a queue."
  },
  {
    "title": "recordID | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckquerynotification/1428134-recordid",
    "html": "Discussion\n\nUse this value to fetch the record.\n\nSee Also\nGetting the Record Information\nvar recordFields: [String : Any]?\nA dictionary of fields that have changes."
  },
  {
    "title": "databaseScope | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckquerynotification/1640449-databasescope",
    "html": "Discussion\n\nThis property’s value is one of the constants that CKDatabase.Scope defines."
  },
  {
    "title": "databaseScope | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckdatabasenotification/1640510-databasescope",
    "html": "Discussion\n\nThis property’s value is one of the constants that CKDatabase.Scope defines."
  },
  {
    "title": "CKQueryNotification.Reason | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckquerynotification/reason",
    "html": "Topics\nConstants\ncase recordCreated\nA notification that indicates the creation of a record matching the subscription’s predicate.\ncase recordUpdated\nA notification that indicates the update of a record matching the subscription’s predicate.\ncase recordDeleted\nA notification that indicates the deletion of a record matching the subscription’s predicate.\nRelationships\nConforms To\nSendable\nSee Also\nGetting the Notification Attributes\nvar queryNotificationReason: CKQueryNotification.Reason\nThe event that triggers the push notification."
  },
  {
    "title": "init(coder:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckdatabasesubscription/3547080-init",
    "html": "Parameters\naDecoder\n\nThe object that decodes the serialized database subscription.\n\nSee Also\nCreating a Database Subscription\ninit()\nCreates an empty database subscription.\nDeprecated\ninit(subscriptionID: CKSubscription.ID)\nCreates a named subscription for all records in a database."
  },
  {
    "title": "CKSyncEngine.FetchChangesOptions | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncengine/fetchchangesoptions",
    "html": "Topics\nManaging attributes\nvar operationGroup: CKOperationGroup\nThe operation group to use for the underlying CloudKit operations.\nDebugging the options\nvar description: String\nA textual description of the options that’s suitable for logging.\nInitializers\ninit(scope: CKSyncEngine.FetchChangesOptions.Scope, operationGroup: CKOperationGroup?)\nInstance Properties\nvar prioritizedZoneIDs: [CKRecordZone.ID]\nvar scope: CKSyncEngine.FetchChangesOptions.Scope\nEnumerations\nenum CKSyncEngine.FetchChangesOptions.Scope\nRelationships\nConforms To\nCustomStringConvertible\nSendable\nSee Also\nInvoking manual sync operations\nfunc fetchChanges(CKSyncEngine.FetchChangesOptions)\nFetches pending remote changes from the server.\nfunc sendChanges(CKSyncEngine.SendChangesOptions)\nSends pending local changes to the server.\nstruct CKSyncEngine.SendChangesOptions\nA set of options to use with a send operation."
  },
  {
    "title": "CKError.Code.operationCancelled | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckerror/code/operationcancelled",
    "html": "See Also\nError Codes\ncase accountTemporarilyUnavailable\nAn error that occurs when the user’s iCloud account is temporarily unavailable.\ncase alreadyShared\nAn error that occurs when CloudKit attempts to share a record with an existing share.\ncase assetFileModified\nAn error that occurs when the system modifies an asset while saving it.\ncase assetFileNotFound\nAn error that occurs when the system can’t find the specified asset.\ncase assetNotAvailable\nAn error that occurs when the system can’t access the specified asset.\ncase badContainer\nAn error that occurs when you use an unknown or unauthorized container.\ncase badDatabase\nAn error that occurs when the operation can’t complete for the specified database.\ncase batchRequestFailed\nAn error that occurs when the system rejects the entire batch of changes.\ncase changeTokenExpired\nAn error that occurs when the change token expires.\ncase constraintViolation\nAn error that occurs when the server rejects the request because of a unique constraint violation.\ncase incompatibleVersion\nAn error that occurs when the current app version is older than the oldest allowed version.\ncase internalError\nA nonrecoverable error that CloudKit encounters.\ncase invalidArguments\nAn error that occurs when the request contains invalid information.\ncase limitExceeded\nAn error that occurs when a request’s size exceeds the limit.\ncase managedAccountRestricted\nAn error that occurs when CloudKit rejects a request due to a managed-account restriction.\ncase missingEntitlement\nAn error that occurs when the app is missing a required entitlement.\ncase networkFailure\nAn error that occurs when a network is available, but CloudKit is inaccessible.\ncase networkUnavailable\nAn error that occurs when the network is unavailable.\ncase notAuthenticated\nAn error that occurs when the user is unauthenticated.\ncase partialFailure\nAn error that occurs when an operation completes with partial failures.\ncase participantMayNeedVerification\nAn error that occurs when the user isn’t a participant of the share.\ncase permissionFailure\nAn error that occurs when the user doesn’t have permission to save or fetch data.\ncase quotaExceeded\nAn error that occurs when saving a record exceeds the user’s storage quota.\ncase referenceViolation\nAn error that occurs when CloudKit can’t find the target of a reference.\ncase requestRateLimited\nAn error that occurs when CloudKit rate-limits requests.\ncase serverRecordChanged\nAn error that occurs when CloudKit rejects a record because the server’s version is different.\ncase serverRejectedRequest\nAn error that occurs when CloudKit rejects the request.\ncase serverResponseLost\nAn error that occurs when CloudKit is unable to maintain the network connection and provide a response.\ncase serviceUnavailable\nAn error that occurs when CloudKit is unavailable.\ncase tooManyParticipants\nAn error that occurs when a share has too many participants.\ncase unknownItem\nAn error that occurs when the specified record doesn’t exist.\ncase userDeletedZone\nAn error that occurs when the user deletes a record zone using the Settings app.\ncase zoneBusy\nAn error that occurs when the server is too busy to handle the record zone operation.\ncase zoneNotFound\nAn error that occurs when the specified record zone doesn’t exist.\ncase resultsTruncated\nAn error that occurs when CloudKit truncates a query’s results.\nDeprecated"
  },
  {
    "title": "CKError.Code.partialFailure | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckerror/code/partialfailure",
    "html": "Discussion\n\nExamine the specific item failures, and act on the failed items. Each specific item error is from the CloudKit error domain. You can inspect the userInfo CKPartialErrorsByItemIDKey to see per-item errors.\n\nNote that in a custom zone, the system processes all items in an operation atomically. As a result, you may get a CKError.Code.batchRequestFailed error for all other items in an operation that don't cause an error.\n\nSee Also\nError Codes\ncase accountTemporarilyUnavailable\nAn error that occurs when the user’s iCloud account is temporarily unavailable.\ncase alreadyShared\nAn error that occurs when CloudKit attempts to share a record with an existing share.\ncase assetFileModified\nAn error that occurs when the system modifies an asset while saving it.\ncase assetFileNotFound\nAn error that occurs when the system can’t find the specified asset.\ncase assetNotAvailable\nAn error that occurs when the system can’t access the specified asset.\ncase badContainer\nAn error that occurs when you use an unknown or unauthorized container.\ncase badDatabase\nAn error that occurs when the operation can’t complete for the specified database.\ncase batchRequestFailed\nAn error that occurs when the system rejects the entire batch of changes.\ncase changeTokenExpired\nAn error that occurs when the change token expires.\ncase constraintViolation\nAn error that occurs when the server rejects the request because of a unique constraint violation.\ncase incompatibleVersion\nAn error that occurs when the current app version is older than the oldest allowed version.\ncase internalError\nA nonrecoverable error that CloudKit encounters.\ncase invalidArguments\nAn error that occurs when the request contains invalid information.\ncase limitExceeded\nAn error that occurs when a request’s size exceeds the limit.\ncase managedAccountRestricted\nAn error that occurs when CloudKit rejects a request due to a managed-account restriction.\ncase missingEntitlement\nAn error that occurs when the app is missing a required entitlement.\ncase networkFailure\nAn error that occurs when a network is available, but CloudKit is inaccessible.\ncase networkUnavailable\nAn error that occurs when the network is unavailable.\ncase notAuthenticated\nAn error that occurs when the user is unauthenticated.\ncase operationCancelled\nAn error that occurs when an operation cancels.\ncase participantMayNeedVerification\nAn error that occurs when the user isn’t a participant of the share.\ncase permissionFailure\nAn error that occurs when the user doesn’t have permission to save or fetch data.\ncase quotaExceeded\nAn error that occurs when saving a record exceeds the user’s storage quota.\ncase referenceViolation\nAn error that occurs when CloudKit can’t find the target of a reference.\ncase requestRateLimited\nAn error that occurs when CloudKit rate-limits requests.\ncase serverRecordChanged\nAn error that occurs when CloudKit rejects a record because the server’s version is different.\ncase serverRejectedRequest\nAn error that occurs when CloudKit rejects the request.\ncase serverResponseLost\nAn error that occurs when CloudKit is unable to maintain the network connection and provide a response.\ncase serviceUnavailable\nAn error that occurs when CloudKit is unavailable.\ncase tooManyParticipants\nAn error that occurs when a share has too many participants.\ncase unknownItem\nAn error that occurs when the specified record doesn’t exist.\ncase userDeletedZone\nAn error that occurs when the user deletes a record zone using the Settings app.\ncase zoneBusy\nAn error that occurs when the server is too busy to handle the record zone operation.\ncase zoneNotFound\nAn error that occurs when the specified record zone doesn’t exist.\ncase resultsTruncated\nAn error that occurs when CloudKit truncates a query’s results.\nDeprecated"
  },
  {
    "title": "CKError.Code.participantMayNeedVerification | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckerror/code/participantmayneedverification",
    "html": "Discussion\n\nA fetch share metadata operation fails when the user isn’t a participant of the share. However, there are invited participants on the share with email addresses or phone numbers that don’t have associations with an iCloud account. The user may be able to join a share by associating one of those email addresses or phone numbers with the user's iCloud account.\n\nCall openURL(_:) on the share URL to have the user attempt to verify their information.\n\nSee Also\nError Codes\ncase accountTemporarilyUnavailable\nAn error that occurs when the user’s iCloud account is temporarily unavailable.\ncase alreadyShared\nAn error that occurs when CloudKit attempts to share a record with an existing share.\ncase assetFileModified\nAn error that occurs when the system modifies an asset while saving it.\ncase assetFileNotFound\nAn error that occurs when the system can’t find the specified asset.\ncase assetNotAvailable\nAn error that occurs when the system can’t access the specified asset.\ncase badContainer\nAn error that occurs when you use an unknown or unauthorized container.\ncase badDatabase\nAn error that occurs when the operation can’t complete for the specified database.\ncase batchRequestFailed\nAn error that occurs when the system rejects the entire batch of changes.\ncase changeTokenExpired\nAn error that occurs when the change token expires.\ncase constraintViolation\nAn error that occurs when the server rejects the request because of a unique constraint violation.\ncase incompatibleVersion\nAn error that occurs when the current app version is older than the oldest allowed version.\ncase internalError\nA nonrecoverable error that CloudKit encounters.\ncase invalidArguments\nAn error that occurs when the request contains invalid information.\ncase limitExceeded\nAn error that occurs when a request’s size exceeds the limit.\ncase managedAccountRestricted\nAn error that occurs when CloudKit rejects a request due to a managed-account restriction.\ncase missingEntitlement\nAn error that occurs when the app is missing a required entitlement.\ncase networkFailure\nAn error that occurs when a network is available, but CloudKit is inaccessible.\ncase networkUnavailable\nAn error that occurs when the network is unavailable.\ncase notAuthenticated\nAn error that occurs when the user is unauthenticated.\ncase operationCancelled\nAn error that occurs when an operation cancels.\ncase partialFailure\nAn error that occurs when an operation completes with partial failures.\ncase permissionFailure\nAn error that occurs when the user doesn’t have permission to save or fetch data.\ncase quotaExceeded\nAn error that occurs when saving a record exceeds the user’s storage quota.\ncase referenceViolation\nAn error that occurs when CloudKit can’t find the target of a reference.\ncase requestRateLimited\nAn error that occurs when CloudKit rate-limits requests.\ncase serverRecordChanged\nAn error that occurs when CloudKit rejects a record because the server’s version is different.\ncase serverRejectedRequest\nAn error that occurs when CloudKit rejects the request.\ncase serverResponseLost\nAn error that occurs when CloudKit is unable to maintain the network connection and provide a response.\ncase serviceUnavailable\nAn error that occurs when CloudKit is unavailable.\ncase tooManyParticipants\nAn error that occurs when a share has too many participants.\ncase unknownItem\nAn error that occurs when the specified record doesn’t exist.\ncase userDeletedZone\nAn error that occurs when the user deletes a record zone using the Settings app.\ncase zoneBusy\nAn error that occurs when the server is too busy to handle the record zone operation.\ncase zoneNotFound\nAn error that occurs when the specified record zone doesn’t exist.\ncase resultsTruncated\nAn error that occurs when CloudKit truncates a query’s results.\nDeprecated"
  },
  {
    "title": "CKRecord.ReferenceAction | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckrecord/referenceaction",
    "html": "Topics\nDeletion Reference Actions\ncase none\nA reference action that has no cascading behavior.\ncase deleteSelf\nA reference action that cascades deletions.\nRelationships\nConforms To\nSendable\nSee Also\nGetting the Reference Attributes\nvar action: CKRecord.ReferenceAction\nThe ownership behavior for the records.\nvar recordID: CKRecord.ID\nThe ID of the referenced record."
  },
  {
    "title": "CKError.Code.quotaExceeded | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckerror/code/quotaexceeded",
    "html": "Discussion\n\nIn the public database: Your app's container doesn’t have enough storage. Individual users can't do anything about this, but you can go to the CloudKit Dashboard to view and manage your container's storage.\n\nIn the private database: The user doesn’t have enough iCloud storage. Prompt the user to go to iCloud settings to manage their storage.\n\nIn the shared database: The owner of the shared record zone doesn’t have enough iCloud storage. The user can't do anything about this, but can contact the owner about upgrading their storage or cleaning up their iCloud account.\n\nSee Also\nError Codes\ncase accountTemporarilyUnavailable\nAn error that occurs when the user’s iCloud account is temporarily unavailable.\ncase alreadyShared\nAn error that occurs when CloudKit attempts to share a record with an existing share.\ncase assetFileModified\nAn error that occurs when the system modifies an asset while saving it.\ncase assetFileNotFound\nAn error that occurs when the system can’t find the specified asset.\ncase assetNotAvailable\nAn error that occurs when the system can’t access the specified asset.\ncase badContainer\nAn error that occurs when you use an unknown or unauthorized container.\ncase badDatabase\nAn error that occurs when the operation can’t complete for the specified database.\ncase batchRequestFailed\nAn error that occurs when the system rejects the entire batch of changes.\ncase changeTokenExpired\nAn error that occurs when the change token expires.\ncase constraintViolation\nAn error that occurs when the server rejects the request because of a unique constraint violation.\ncase incompatibleVersion\nAn error that occurs when the current app version is older than the oldest allowed version.\ncase internalError\nA nonrecoverable error that CloudKit encounters.\ncase invalidArguments\nAn error that occurs when the request contains invalid information.\ncase limitExceeded\nAn error that occurs when a request’s size exceeds the limit.\ncase managedAccountRestricted\nAn error that occurs when CloudKit rejects a request due to a managed-account restriction.\ncase missingEntitlement\nAn error that occurs when the app is missing a required entitlement.\ncase networkFailure\nAn error that occurs when a network is available, but CloudKit is inaccessible.\ncase networkUnavailable\nAn error that occurs when the network is unavailable.\ncase notAuthenticated\nAn error that occurs when the user is unauthenticated.\ncase operationCancelled\nAn error that occurs when an operation cancels.\ncase partialFailure\nAn error that occurs when an operation completes with partial failures.\ncase participantMayNeedVerification\nAn error that occurs when the user isn’t a participant of the share.\ncase permissionFailure\nAn error that occurs when the user doesn’t have permission to save or fetch data.\ncase referenceViolation\nAn error that occurs when CloudKit can’t find the target of a reference.\ncase requestRateLimited\nAn error that occurs when CloudKit rate-limits requests.\ncase serverRecordChanged\nAn error that occurs when CloudKit rejects a record because the server’s version is different.\ncase serverRejectedRequest\nAn error that occurs when CloudKit rejects the request.\ncase serverResponseLost\nAn error that occurs when CloudKit is unable to maintain the network connection and provide a response.\ncase serviceUnavailable\nAn error that occurs when CloudKit is unavailable.\ncase tooManyParticipants\nAn error that occurs when a share has too many participants.\ncase unknownItem\nAn error that occurs when the specified record doesn’t exist.\ncase userDeletedZone\nAn error that occurs when the user deletes a record zone using the Settings app.\ncase zoneBusy\nAn error that occurs when the server is too busy to handle the record zone operation.\ncase zoneNotFound\nAn error that occurs when the specified record zone doesn’t exist.\ncase resultsTruncated\nAn error that occurs when CloudKit truncates a query’s results.\nDeprecated"
  },
  {
    "title": "CKError.Code.permissionFailure | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckerror/code/permissionfailure",
    "html": "Discussion\n\nThis error typically occurs in the public database in one of these circumstances:\n\nYou have roles for record types.\n\nYour app is trying to accept a share that the user doesn’t have an invitation for.\n\nLet users know they can’t perform this operation. This error is nonrecoverable and you can’t retry the operation.\n\nSee Also\nError Codes\ncase accountTemporarilyUnavailable\nAn error that occurs when the user’s iCloud account is temporarily unavailable.\ncase alreadyShared\nAn error that occurs when CloudKit attempts to share a record with an existing share.\ncase assetFileModified\nAn error that occurs when the system modifies an asset while saving it.\ncase assetFileNotFound\nAn error that occurs when the system can’t find the specified asset.\ncase assetNotAvailable\nAn error that occurs when the system can’t access the specified asset.\ncase badContainer\nAn error that occurs when you use an unknown or unauthorized container.\ncase badDatabase\nAn error that occurs when the operation can’t complete for the specified database.\ncase batchRequestFailed\nAn error that occurs when the system rejects the entire batch of changes.\ncase changeTokenExpired\nAn error that occurs when the change token expires.\ncase constraintViolation\nAn error that occurs when the server rejects the request because of a unique constraint violation.\ncase incompatibleVersion\nAn error that occurs when the current app version is older than the oldest allowed version.\ncase internalError\nA nonrecoverable error that CloudKit encounters.\ncase invalidArguments\nAn error that occurs when the request contains invalid information.\ncase limitExceeded\nAn error that occurs when a request’s size exceeds the limit.\ncase managedAccountRestricted\nAn error that occurs when CloudKit rejects a request due to a managed-account restriction.\ncase missingEntitlement\nAn error that occurs when the app is missing a required entitlement.\ncase networkFailure\nAn error that occurs when a network is available, but CloudKit is inaccessible.\ncase networkUnavailable\nAn error that occurs when the network is unavailable.\ncase notAuthenticated\nAn error that occurs when the user is unauthenticated.\ncase operationCancelled\nAn error that occurs when an operation cancels.\ncase partialFailure\nAn error that occurs when an operation completes with partial failures.\ncase participantMayNeedVerification\nAn error that occurs when the user isn’t a participant of the share.\ncase quotaExceeded\nAn error that occurs when saving a record exceeds the user’s storage quota.\ncase referenceViolation\nAn error that occurs when CloudKit can’t find the target of a reference.\ncase requestRateLimited\nAn error that occurs when CloudKit rate-limits requests.\ncase serverRecordChanged\nAn error that occurs when CloudKit rejects a record because the server’s version is different.\ncase serverRejectedRequest\nAn error that occurs when CloudKit rejects the request.\ncase serverResponseLost\nAn error that occurs when CloudKit is unable to maintain the network connection and provide a response.\ncase serviceUnavailable\nAn error that occurs when CloudKit is unavailable.\ncase tooManyParticipants\nAn error that occurs when a share has too many participants.\ncase unknownItem\nAn error that occurs when the specified record doesn’t exist.\ncase userDeletedZone\nAn error that occurs when the user deletes a record zone using the Settings app.\ncase zoneBusy\nAn error that occurs when the server is too busy to handle the record zone operation.\ncase zoneNotFound\nAn error that occurs when the specified record zone doesn’t exist.\ncase resultsTruncated\nAn error that occurs when CloudKit truncates a query’s results.\nDeprecated"
  },
  {
    "title": "CKError.Code.referenceViolation | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckerror/code/referenceviolation",
    "html": "See Also\nError Codes\ncase accountTemporarilyUnavailable\nAn error that occurs when the user’s iCloud account is temporarily unavailable.\ncase alreadyShared\nAn error that occurs when CloudKit attempts to share a record with an existing share.\ncase assetFileModified\nAn error that occurs when the system modifies an asset while saving it.\ncase assetFileNotFound\nAn error that occurs when the system can’t find the specified asset.\ncase assetNotAvailable\nAn error that occurs when the system can’t access the specified asset.\ncase badContainer\nAn error that occurs when you use an unknown or unauthorized container.\ncase badDatabase\nAn error that occurs when the operation can’t complete for the specified database.\ncase batchRequestFailed\nAn error that occurs when the system rejects the entire batch of changes.\ncase changeTokenExpired\nAn error that occurs when the change token expires.\ncase constraintViolation\nAn error that occurs when the server rejects the request because of a unique constraint violation.\ncase incompatibleVersion\nAn error that occurs when the current app version is older than the oldest allowed version.\ncase internalError\nA nonrecoverable error that CloudKit encounters.\ncase invalidArguments\nAn error that occurs when the request contains invalid information.\ncase limitExceeded\nAn error that occurs when a request’s size exceeds the limit.\ncase managedAccountRestricted\nAn error that occurs when CloudKit rejects a request due to a managed-account restriction.\ncase missingEntitlement\nAn error that occurs when the app is missing a required entitlement.\ncase networkFailure\nAn error that occurs when a network is available, but CloudKit is inaccessible.\ncase networkUnavailable\nAn error that occurs when the network is unavailable.\ncase notAuthenticated\nAn error that occurs when the user is unauthenticated.\ncase operationCancelled\nAn error that occurs when an operation cancels.\ncase partialFailure\nAn error that occurs when an operation completes with partial failures.\ncase participantMayNeedVerification\nAn error that occurs when the user isn’t a participant of the share.\ncase permissionFailure\nAn error that occurs when the user doesn’t have permission to save or fetch data.\ncase quotaExceeded\nAn error that occurs when saving a record exceeds the user’s storage quota.\ncase requestRateLimited\nAn error that occurs when CloudKit rate-limits requests.\ncase serverRecordChanged\nAn error that occurs when CloudKit rejects a record because the server’s version is different.\ncase serverRejectedRequest\nAn error that occurs when CloudKit rejects the request.\ncase serverResponseLost\nAn error that occurs when CloudKit is unable to maintain the network connection and provide a response.\ncase serviceUnavailable\nAn error that occurs when CloudKit is unavailable.\ncase tooManyParticipants\nAn error that occurs when a share has too many participants.\ncase unknownItem\nAn error that occurs when the specified record doesn’t exist.\ncase userDeletedZone\nAn error that occurs when the user deletes a record zone using the Settings app.\ncase zoneBusy\nAn error that occurs when the server is too busy to handle the record zone operation.\ncase zoneNotFound\nAn error that occurs when the specified record zone doesn’t exist.\ncase resultsTruncated\nAn error that occurs when CloudKit truncates a query’s results.\nDeprecated"
  },
  {
    "title": "CKRecord.SystemFieldKey | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckrecord/systemfieldkey",
    "html": "Overview\n\nUse the values share and parent when creating an NSPredicate for a CKQuery to reference a record’s share or parent property, respectively.\n\nTopics\nTypes of Shared Records\nstatic let parent: CKRecord.FieldKey\nA value that represents the parent property of a record.\nstatic let share: CKRecord.FieldKey\nA value that represents the share property of a record.\nType Properties\nstatic var creationDate: CKRecord.FieldKey\nstatic var creatorUserRecordID: CKRecord.FieldKey\nstatic var lastModifiedUserRecordID: CKRecord.FieldKey\nstatic var modificationDate: CKRecord.FieldKey\nstatic var recordID: CKRecord.FieldKey\nSee Also\nSharing Records\nvar parent: CKRecord.Reference?\nA reference to the record’s parent record.\nvar share: CKRecord.Reference?\nA reference to the share object that determines the share status of the record.\nclass CKRecord.Reference\nA relationship between two records in a record zone.\nfunc setParent(CKRecord?)\nCreates and sets a reference object for a parent from its record.\nfunc setParent(CKRecord.ID?)\nCreates and sets a reference object for a parent from the parent’s record ID."
  },
  {
    "title": "CKError.Code.tooManyParticipants | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckerror/code/toomanyparticipants",
    "html": "Discussion\n\nRemove some participants before you retry the operation. Limits can change at any time, but CloudKit generally enforces a maximum of 100 participants for a share.\n\nSee Also\nError Codes\ncase accountTemporarilyUnavailable\nAn error that occurs when the user’s iCloud account is temporarily unavailable.\ncase alreadyShared\nAn error that occurs when CloudKit attempts to share a record with an existing share.\ncase assetFileModified\nAn error that occurs when the system modifies an asset while saving it.\ncase assetFileNotFound\nAn error that occurs when the system can’t find the specified asset.\ncase assetNotAvailable\nAn error that occurs when the system can’t access the specified asset.\ncase badContainer\nAn error that occurs when you use an unknown or unauthorized container.\ncase badDatabase\nAn error that occurs when the operation can’t complete for the specified database.\ncase batchRequestFailed\nAn error that occurs when the system rejects the entire batch of changes.\ncase changeTokenExpired\nAn error that occurs when the change token expires.\ncase constraintViolation\nAn error that occurs when the server rejects the request because of a unique constraint violation.\ncase incompatibleVersion\nAn error that occurs when the current app version is older than the oldest allowed version.\ncase internalError\nA nonrecoverable error that CloudKit encounters.\ncase invalidArguments\nAn error that occurs when the request contains invalid information.\ncase limitExceeded\nAn error that occurs when a request’s size exceeds the limit.\ncase managedAccountRestricted\nAn error that occurs when CloudKit rejects a request due to a managed-account restriction.\ncase missingEntitlement\nAn error that occurs when the app is missing a required entitlement.\ncase networkFailure\nAn error that occurs when a network is available, but CloudKit is inaccessible.\ncase networkUnavailable\nAn error that occurs when the network is unavailable.\ncase notAuthenticated\nAn error that occurs when the user is unauthenticated.\ncase operationCancelled\nAn error that occurs when an operation cancels.\ncase partialFailure\nAn error that occurs when an operation completes with partial failures.\ncase participantMayNeedVerification\nAn error that occurs when the user isn’t a participant of the share.\ncase permissionFailure\nAn error that occurs when the user doesn’t have permission to save or fetch data.\ncase quotaExceeded\nAn error that occurs when saving a record exceeds the user’s storage quota.\ncase referenceViolation\nAn error that occurs when CloudKit can’t find the target of a reference.\ncase requestRateLimited\nAn error that occurs when CloudKit rate-limits requests.\ncase serverRecordChanged\nAn error that occurs when CloudKit rejects a record because the server’s version is different.\ncase serverRejectedRequest\nAn error that occurs when CloudKit rejects the request.\ncase serverResponseLost\nAn error that occurs when CloudKit is unable to maintain the network connection and provide a response.\ncase serviceUnavailable\nAn error that occurs when CloudKit is unavailable.\ncase unknownItem\nAn error that occurs when the specified record doesn’t exist.\ncase userDeletedZone\nAn error that occurs when the user deletes a record zone using the Settings app.\ncase zoneBusy\nAn error that occurs when the server is too busy to handle the record zone operation.\ncase zoneNotFound\nAn error that occurs when the specified record zone doesn’t exist.\ncase resultsTruncated\nAn error that occurs when CloudKit truncates a query’s results.\nDeprecated"
  },
  {
    "title": "CKError.Code.serverResponseLost | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckerror/code/serverresponselost",
    "html": "See Also\nError Codes\ncase accountTemporarilyUnavailable\nAn error that occurs when the user’s iCloud account is temporarily unavailable.\ncase alreadyShared\nAn error that occurs when CloudKit attempts to share a record with an existing share.\ncase assetFileModified\nAn error that occurs when the system modifies an asset while saving it.\ncase assetFileNotFound\nAn error that occurs when the system can’t find the specified asset.\ncase assetNotAvailable\nAn error that occurs when the system can’t access the specified asset.\ncase badContainer\nAn error that occurs when you use an unknown or unauthorized container.\ncase badDatabase\nAn error that occurs when the operation can’t complete for the specified database.\ncase batchRequestFailed\nAn error that occurs when the system rejects the entire batch of changes.\ncase changeTokenExpired\nAn error that occurs when the change token expires.\ncase constraintViolation\nAn error that occurs when the server rejects the request because of a unique constraint violation.\ncase incompatibleVersion\nAn error that occurs when the current app version is older than the oldest allowed version.\ncase internalError\nA nonrecoverable error that CloudKit encounters.\ncase invalidArguments\nAn error that occurs when the request contains invalid information.\ncase limitExceeded\nAn error that occurs when a request’s size exceeds the limit.\ncase managedAccountRestricted\nAn error that occurs when CloudKit rejects a request due to a managed-account restriction.\ncase missingEntitlement\nAn error that occurs when the app is missing a required entitlement.\ncase networkFailure\nAn error that occurs when a network is available, but CloudKit is inaccessible.\ncase networkUnavailable\nAn error that occurs when the network is unavailable.\ncase notAuthenticated\nAn error that occurs when the user is unauthenticated.\ncase operationCancelled\nAn error that occurs when an operation cancels.\ncase partialFailure\nAn error that occurs when an operation completes with partial failures.\ncase participantMayNeedVerification\nAn error that occurs when the user isn’t a participant of the share.\ncase permissionFailure\nAn error that occurs when the user doesn’t have permission to save or fetch data.\ncase quotaExceeded\nAn error that occurs when saving a record exceeds the user’s storage quota.\ncase referenceViolation\nAn error that occurs when CloudKit can’t find the target of a reference.\ncase requestRateLimited\nAn error that occurs when CloudKit rate-limits requests.\ncase serverRecordChanged\nAn error that occurs when CloudKit rejects a record because the server’s version is different.\ncase serverRejectedRequest\nAn error that occurs when CloudKit rejects the request.\ncase serviceUnavailable\nAn error that occurs when CloudKit is unavailable.\ncase tooManyParticipants\nAn error that occurs when a share has too many participants.\ncase unknownItem\nAn error that occurs when the specified record doesn’t exist.\ncase userDeletedZone\nAn error that occurs when the user deletes a record zone using the Settings app.\ncase zoneBusy\nAn error that occurs when the server is too busy to handle the record zone operation.\ncase zoneNotFound\nAn error that occurs when the specified record zone doesn’t exist.\ncase resultsTruncated\nAn error that occurs when CloudKit truncates a query’s results.\nDeprecated"
  },
  {
    "title": "CKError.Code.resultsTruncated | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckerror/code/resultstruncated",
    "html": "See Also\nError Codes\ncase accountTemporarilyUnavailable\nAn error that occurs when the user’s iCloud account is temporarily unavailable.\ncase alreadyShared\nAn error that occurs when CloudKit attempts to share a record with an existing share.\ncase assetFileModified\nAn error that occurs when the system modifies an asset while saving it.\ncase assetFileNotFound\nAn error that occurs when the system can’t find the specified asset.\ncase assetNotAvailable\nAn error that occurs when the system can’t access the specified asset.\ncase badContainer\nAn error that occurs when you use an unknown or unauthorized container.\ncase badDatabase\nAn error that occurs when the operation can’t complete for the specified database.\ncase batchRequestFailed\nAn error that occurs when the system rejects the entire batch of changes.\ncase changeTokenExpired\nAn error that occurs when the change token expires.\ncase constraintViolation\nAn error that occurs when the server rejects the request because of a unique constraint violation.\ncase incompatibleVersion\nAn error that occurs when the current app version is older than the oldest allowed version.\ncase internalError\nA nonrecoverable error that CloudKit encounters.\ncase invalidArguments\nAn error that occurs when the request contains invalid information.\ncase limitExceeded\nAn error that occurs when a request’s size exceeds the limit.\ncase managedAccountRestricted\nAn error that occurs when CloudKit rejects a request due to a managed-account restriction.\ncase missingEntitlement\nAn error that occurs when the app is missing a required entitlement.\ncase networkFailure\nAn error that occurs when a network is available, but CloudKit is inaccessible.\ncase networkUnavailable\nAn error that occurs when the network is unavailable.\ncase notAuthenticated\nAn error that occurs when the user is unauthenticated.\ncase operationCancelled\nAn error that occurs when an operation cancels.\ncase partialFailure\nAn error that occurs when an operation completes with partial failures.\ncase participantMayNeedVerification\nAn error that occurs when the user isn’t a participant of the share.\ncase permissionFailure\nAn error that occurs when the user doesn’t have permission to save or fetch data.\ncase quotaExceeded\nAn error that occurs when saving a record exceeds the user’s storage quota.\ncase referenceViolation\nAn error that occurs when CloudKit can’t find the target of a reference.\ncase requestRateLimited\nAn error that occurs when CloudKit rate-limits requests.\ncase serverRecordChanged\nAn error that occurs when CloudKit rejects a record because the server’s version is different.\ncase serverRejectedRequest\nAn error that occurs when CloudKit rejects the request.\ncase serverResponseLost\nAn error that occurs when CloudKit is unable to maintain the network connection and provide a response.\ncase serviceUnavailable\nAn error that occurs when CloudKit is unavailable.\ncase tooManyParticipants\nAn error that occurs when a share has too many participants.\ncase unknownItem\nAn error that occurs when the specified record doesn’t exist.\ncase userDeletedZone\nAn error that occurs when the user deletes a record zone using the Settings app.\ncase zoneBusy\nAn error that occurs when the server is too busy to handle the record zone operation.\ncase zoneNotFound\nAn error that occurs when the specified record zone doesn’t exist."
  },
  {
    "title": "Deprecated Symbols | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckoperation/deprecated_symbols",
    "html": "Topics\nDeprecated Properties\nvar allowsCellularAccess: Bool\nA Boolean value that indicates whether the operation can send data over the cellular network.\nDeprecated\nvar container: CKContainer?\nThe operation’s container.\nDeprecated\nvar isLongLived: Bool\nA Boolean value that indicates whether the operation is long-lived.\nDeprecated\nvar timeoutIntervalForRequest: TimeInterval\nThe timeout interval when waiting for additional data.\nDeprecated\nvar timeoutIntervalForResource: TimeInterval\nThe maximum amount of time that a resource request can use.\nDeprecated"
  },
  {
    "title": "longLivedOperationWasPersistedBlock | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckoperation/1452366-longlivedoperationwaspersistedbl",
    "html": "Discussion\n\nIf your app exits before CloudKit calls this property’s value, the system doesn’t include the operation’s ID in the results of calls to the fetchAllLongLivedOperationIDs(completionHandler:) method.\n\nFor more information, see Long-Lived Operations.\n\nSee Also\nManaging the Operation's Configuration\nvar configuration: CKOperation.Configuration!\nThe operation’s configuration.\nclass CKOperation.Configuration\nAn object that describes how a CloudKit operation behaves.\nvar group: CKOperationGroup?\nThe operation’s group."
  },
  {
    "title": "init(recordZoneIDs:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckfetchrecordzonesoperation/1515299-init",
    "html": "Parameters\nzoneIDs\n\nAn array ofCKRecordZone.ID objects that represents the zones you want to retrieve. If you provide an empty array, you must set the recordZoneIDs property before you execute the operation.\n\nDiscussion\n\nAfter creating the operation, assign a value to the fetchRecordZonesCompletionBlock property so you can process the results.\n\nSee Also\nInitializing the Zone Fetch Operation\ninit()\nCreates an empty fetch zones operation."
  },
  {
    "title": "CKOperation.ID | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckoperation/id",
    "html": "See Also\nIdentifying the Operation\nvar operationID: CKOperation.ID\nA unique identifier for a long-lived operation."
  },
  {
    "title": "operationID | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckoperation/3003367-operationid",
    "html": "Discussion\n\nPass this property’s value to the fetchLongLivedOperation(withID:completionHandler:) method to fetch the corresponding long-lived operation. For more information, see Long-Lived Operations.\n\nSee Also\nIdentifying the Operation\ntypealias CKOperation.ID\nA type that represents the ID of an operation."
  },
  {
    "title": "init() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckoperation/1452370-init",
    "html": "Discussion\n\nImportant\n\nDon’t use this method directly. Instead, create database operations using the initializers of the concrete subclasses."
  },
  {
    "title": "CKContainer.Application.PermissionBlock | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckcontainer/application/permissionblock",
    "html": "See Also\nContainer Application Types\ntypealias CKContainer.Application.Permissions\nA type that represents the permissions that a user grants.\nDeprecated\ntypealias CKContainer.Application.PermissionStatus\nA type that represents the status of a permission.\nDeprecated"
  },
  {
    "title": "operationGroupID | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckoperationgroup/2866238-operationgroupid",
    "html": "Discussion\n\nThe framework generates this value and it’s unique to this operation group. The system sends this identifier to CloudKit, which can use it to identify server-side logs for CKOperationGroup.\n\nSee Also\nConfiguring an Operation Group\nvar defaultConfiguration: CKOperation.Configuration!\nThe default configuration for operations in the group.\nvar expectedReceiveSize: CKOperationGroup.TransferSize\nThe estimated size of traffic to download from CloudKit.\nvar expectedSendSize: CKOperationGroup.TransferSize\nThe estimated size of traffic to upload to CloudKit.\nvar name: String?\nThe operation group’s name.\nvar quantity: Int\nThe number of operations in the operation group.\nenum CKOperationGroup.TransferSize\nConstants that represent possible data transfer sizes."
  },
  {
    "title": "CKSyncEngine.Event.sentRecordZoneChanges(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncengine/event/sentrecordzonechanges-lla",
    "html": "See Also\nPending local changes\ncase willSendChanges(CKSyncEngine.Event.WillSendChanges)\nAn event indicating an imminent send of local changes.\nstruct CKSyncEngine.Event.WillSendChanges\nA type that provides information about an imminent send of local changes.\ncase sentDatabaseChanges(CKSyncEngine.Event.SentDatabaseChanges)\nAn event indicating a sent batch of database changes.\nstruct CKSyncEngine.Event.SentDatabaseChanges\nA type that provides information about a sent batch of database changes.\nstruct CKSyncEngine.Event.SentRecordZoneChanges\nA type that provides information about a sent batch of record zone changes.\ncase didSendChanges(CKSyncEngine.Event.DidSendChanges)\nAn event that indicates a finished send operation.\nstruct CKSyncEngine.Event.DidSendChanges\nA type that provides information about a finished send operation."
  },
  {
    "title": "name | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckoperationgroup/2866233-name",
    "html": "Discussion\n\nThe system sends the name of the operation group to CloudKit to provide aggregate reporting for CKOperationGroup. The name must not include any personal data.\n\nSee Also\nConfiguring an Operation Group\nvar defaultConfiguration: CKOperation.Configuration!\nThe default configuration for operations in the group.\nvar expectedReceiveSize: CKOperationGroup.TransferSize\nThe estimated size of traffic to download from CloudKit.\nvar expectedSendSize: CKOperationGroup.TransferSize\nThe estimated size of traffic to upload to CloudKit.\nvar operationGroupID: String\nThe operation group’s unique identifier.\nvar quantity: Int\nThe number of operations in the operation group.\nenum CKOperationGroup.TransferSize\nConstants that represent possible data transfer sizes."
  },
  {
    "title": "expectedSendSize | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckoperationgroup/2866235-expectedsendsize",
    "html": "Discussion\n\nThis property informs the system about the amount of data your app can transfer. An order-of-magnitude estimate is better than no estimate, and accuracy helps performance. The system checks this value when it schedules discretionary network requests.\n\nSee Also\nConfiguring an Operation Group\nvar defaultConfiguration: CKOperation.Configuration!\nThe default configuration for operations in the group.\nvar expectedReceiveSize: CKOperationGroup.TransferSize\nThe estimated size of traffic to download from CloudKit.\nvar name: String?\nThe operation group’s name.\nvar operationGroupID: String\nThe operation group’s unique identifier.\nvar quantity: Int\nThe number of operations in the operation group.\nenum CKOperationGroup.TransferSize\nConstants that represent possible data transfer sizes."
  },
  {
    "title": "defaultConfiguration | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckoperationgroup/2866240-defaultconfiguration",
    "html": "Discussion\n\nIf an operation in the group has its own configuration, that configuration’s values override the default configuration’s values. For more information, see CKOperation.Configuration.\n\nSee Also\nConfiguring an Operation Group\nvar expectedReceiveSize: CKOperationGroup.TransferSize\nThe estimated size of traffic to download from CloudKit.\nvar expectedSendSize: CKOperationGroup.TransferSize\nThe estimated size of traffic to upload to CloudKit.\nvar name: String?\nThe operation group’s name.\nvar operationGroupID: String\nThe operation group’s unique identifier.\nvar quantity: Int\nThe number of operations in the operation group.\nenum CKOperationGroup.TransferSize\nConstants that represent possible data transfer sizes."
  },
  {
    "title": "expectedReceiveSize | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckoperationgroup/2866229-expectedreceivesize",
    "html": "Discussion\n\nThis property informs the system about the amount of data your app can transfer. An order-of-magnitude estimate is better than no estimate, and accuracy helps performance. The system checks this value when it schedules discretionary network requests.\n\nSee Also\nConfiguring an Operation Group\nvar defaultConfiguration: CKOperation.Configuration!\nThe default configuration for operations in the group.\nvar expectedSendSize: CKOperationGroup.TransferSize\nThe estimated size of traffic to upload to CloudKit.\nvar name: String?\nThe operation group’s name.\nvar operationGroupID: String\nThe operation group’s unique identifier.\nvar quantity: Int\nThe number of operations in the operation group.\nenum CKOperationGroup.TransferSize\nConstants that represent possible data transfer sizes."
  },
  {
    "title": "add(pendingRecordZoneChanges:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncengine/state/4183749-add",
    "html": "Parameters\npendingRecordZoneChanges\n\nAn array of record zone changes.\n\nDiscussion\n\nUse this method to enable the sync engine to manage your pending record zone changes. For example, when someone makes a change that your app needs to send to the server, use this method to record the change. Then, when creating the change batch for the next send operation, retrieve the pending changes from the pendingRecordZoneChanges property.\n\nIf there are no scheduled sync operations when you invoke this method, the sync engine automatically schedules one to send the changes. After the engine sends those changes, it notifies your app’s sync delegate with an event of type CKSyncEngine.Event.SentRecordZoneChanges.\n\nThe sync engine ensures the consistency of any pending changes it’s tracking, deduplicating them as necessary. The engine removes changes from the list as it sends them, but retains any that fail due to a recoverable error, such as a network issue or exceeding the rate limit.\n\nNote\n\nThe order in which you apply record zone changes is important. For example, if you add a save change and then a delete change, the sync engine discards the save and sends only the delete change. The reverse is also true.\n\nSee Also\nManipulating pending changes\nfunc add(pendingDatabaseChanges: [CKSyncEngine.PendingDatabaseChange])\nAdds the specified database changes to the state.\nfunc remove(pendingDatabaseChanges: [CKSyncEngine.PendingDatabaseChange])\nRemoves the specified database changes from the state.\nenum CKSyncEngine.PendingDatabaseChange\nDescribes an unsent database modification.\nfunc remove(pendingRecordZoneChanges: [CKSyncEngine.PendingRecordZoneChange])\nRemoves the specified record zone changes from the state.\nenum CKSyncEngine.PendingRecordZoneChange\nDescribes an unsent record modification."
  },
  {
    "title": "nextRecordZoneChangeBatch(_:syncEngine:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncenginedelegate/4200329-nextrecordzonechangebatch",
    "html": "Required\n\nParameters\ncontext\n\nThe reason for the sync engine’s request, and any additional options that request is using.\n\nsyncEngine\n\nThe sync engine asking about pending changes.\n\nReturn Value\n\nIf there are pending record changes, a batch of those changes for the sync engine to process; otherwise, nil to indicate there are no changes to send.\n\nDiscussion\n\nIn your implementation, ask the sync engine’s state for any pending record zone changes and then return a change batch containing a CKRecord instance for each record identifier the state provides, as the following example shows:\n\nfunc nextRecordZoneChangeBatch(\n    _ context: CKSyncEngine.SendChangesContext, \n    syncEngine: CKSyncEngine\n) async -> CKSyncEngine.RecordZoneChangeBatch? {\n    \n    // Get the pending record changes and filter by the context's scope.\n    let pendingChanges = syncEngine.state.pendingRecordZoneChanges\n        .filter { context.options.zoneIDs.contains($0) }\n\n\n    // Return a change batch that contains the corresponding materialized records.\n    return await CKSyncEngine.RecordZoneChangeBatch(\n        pendingChanges: pendingChanges) { self.recordFor(id: $0) }\n}\n\n\nFor both scheduled and manual send operations, the sync engine calls this method repeatedly until your app has no more changes and returns nil.\n\nSee Also\nSending changes\nstruct CKSyncEngine.SendChangesContext\nA type that describes a single attempt to send changes to the iCloud servers.\nstruct CKSyncEngine.RecordZoneChangeBatch\nA type that contains the record changes for a single send operation."
  },
  {
    "title": "init(coder:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckoperationgroup/2866202-init",
    "html": "Parameters\naDecoder\n\nThe coder to use when deserializing the group.\n\nSee Also\nCreating an Operation Group\ninit()\nCreates an operation group."
  },
  {
    "title": "add(pendingDatabaseChanges:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncengine/state/4183748-add",
    "html": "Parameters\npendingDatabaseChanges\n\nAn array of database changes.\n\nDiscussion\n\nUse this method to enable the sync engine to manage your pending database changes. For example, when someone makes a change that your app needs to send to the server, use this method to record the change. If there are no scheduled sync operations when you invoke this method, the sync engine automatically schedules one to send the changes. After the engine sends those changes, it notifies your app’s sync delegate with an event of type CKSyncEngine.Event.SentDatabaseChanges.\n\nThe sync engine ensures the consistency of any pending changes it’s tracking, deduplicating them as necessary. The engine removes changes from the list as it sends them, but retains any that fail due to a recoverable error, such as a network issue or exceeding the rate limit.\n\nNote\n\nThe order in which you apply database changes is important. For example, if you add a save change and then a delete change, the sync engine discards the save and sends only the delete change. The reverse is also true.\n\nSee Also\nManipulating pending changes\nfunc remove(pendingDatabaseChanges: [CKSyncEngine.PendingDatabaseChange])\nRemoves the specified database changes from the state.\nenum CKSyncEngine.PendingDatabaseChange\nDescribes an unsent database modification.\nfunc add(pendingRecordZoneChanges: [CKSyncEngine.PendingRecordZoneChange])\nAdds the specified record zone changes to the state.\nfunc remove(pendingRecordZoneChanges: [CKSyncEngine.PendingRecordZoneChange])\nRemoves the specified record zone changes from the state.\nenum CKSyncEngine.PendingRecordZoneChange\nDescribes an unsent record modification."
  },
  {
    "title": "CKSyncEngine.Event.sentDatabaseChanges(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncengine/event/sentdatabasechanges-qbm",
    "html": "See Also\nPending local changes\ncase willSendChanges(CKSyncEngine.Event.WillSendChanges)\nAn event indicating an imminent send of local changes.\nstruct CKSyncEngine.Event.WillSendChanges\nA type that provides information about an imminent send of local changes.\nstruct CKSyncEngine.Event.SentDatabaseChanges\nA type that provides information about a sent batch of database changes.\ncase sentRecordZoneChanges(CKSyncEngine.Event.SentRecordZoneChanges)\nAn event indicating a sent batch of record zone changes.\nstruct CKSyncEngine.Event.SentRecordZoneChanges\nA type that provides information about a sent batch of record zone changes.\ncase didSendChanges(CKSyncEngine.Event.DidSendChanges)\nAn event that indicates a finished send operation.\nstruct CKSyncEngine.Event.DidSendChanges\nA type that provides information about a finished send operation."
  },
  {
    "title": "desiredKeys | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckqueryoperation/3003370-desiredkeys",
    "html": "Discussion\n\nUse this property to limit the amount of data that CloudKit returns for each record. When CloudKit returns a record, it only includes fields with names that match one of the keys in this property. The property’s default value is nil, which instructs CloudKit to return all of a record’s keys.\n\nIf you intend to specify a value other than nil, do so before you execute the operation or add the operation to a queue.\n\nSee Also\nConfiguring the Query Operation\nvar query: CKQuery?\nThe query for the search.\nvar cursor: CKQueryOperation.Cursor?\nThe cursor for continuing the search.\nclass CKQueryOperation.Cursor\nAn object that marks the stopping point for a query and the starting point for retrieving the remaining results.\nvar zoneID: CKRecordZone.ID?\nThe ID of the record zone that contains the records to search.\nvar resultsLimit: Int\nThe maximum number of records to return at one time.\nclass let maximumResults: Int\nA constant value that represents the maximum number of results CloudKit retrieves."
  },
  {
    "title": "maximumResults | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckqueryoperation/1515254-maximumresults",
    "html": "Discussion\n\nThe value of this constant doesn’t correspond to the actual number of records. CloudKit dynamically determines the actual number according to various conditions at runtime.\n\nThis constant is the resultsLimit property’s default value.\n\nSee Also\nConfiguring the Query Operation\nvar query: CKQuery?\nThe query for the search.\nvar cursor: CKQueryOperation.Cursor?\nThe cursor for continuing the search.\nclass CKQueryOperation.Cursor\nAn object that marks the stopping point for a query and the starting point for retrieving the remaining results.\nvar zoneID: CKRecordZone.ID?\nThe ID of the record zone that contains the records to search.\nvar resultsLimit: Int\nThe maximum number of records to return at one time.\nvar desiredKeys: [CKRecord.FieldKey]?\nThe fields of the records to fetch."
  },
  {
    "title": "resultsLimit | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckqueryoperation/1515078-resultslimit",
    "html": "Discussion\n\nFor most queries, leave the value of this property as the default value, which is the maximumResults constant. When using that value, CloudKit returns as many records as possible while minimizing delays in receiving those records. If you want to process a fixed number of results, change the value of this property accordingly.\n\nSee Also\nConfiguring the Query Operation\nvar query: CKQuery?\nThe query for the search.\nvar cursor: CKQueryOperation.Cursor?\nThe cursor for continuing the search.\nclass CKQueryOperation.Cursor\nAn object that marks the stopping point for a query and the starting point for retrieving the remaining results.\nvar zoneID: CKRecordZone.ID?\nThe ID of the record zone that contains the records to search.\nclass let maximumResults: Int\nA constant value that represents the maximum number of results CloudKit retrieves.\nvar desiredKeys: [CKRecord.FieldKey]?\nThe fields of the records to fetch."
  },
  {
    "title": "CKQueryOperation.Cursor | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckqueryoperation/cursor",
    "html": "Overview\n\nYou don’t create instances of this class yourself. When fetching records using a query operation, if the number of results exceeds the limit for the query, CloudKit provides a cursor. Use that cursor to create a new instance of CKQueryOperation and retrieve the next batch of results for the same query.\n\nFor information about how to use a CKQueryOperation.Cursor object, see CKQueryOperation.\n\nRelationships\nInherits From\nNSObject\nConforms To\nNSCopying\nNSSecureCoding\nSendable\nSee Also\nConfiguring the Query Operation\nvar query: CKQuery?\nThe query for the search.\nvar cursor: CKQueryOperation.Cursor?\nThe cursor for continuing the search.\nvar zoneID: CKRecordZone.ID?\nThe ID of the record zone that contains the records to search.\nvar resultsLimit: Int\nThe maximum number of records to return at one time.\nclass let maximumResults: Int\nA constant value that represents the maximum number of results CloudKit retrieves.\nvar desiredKeys: [CKRecord.FieldKey]?\nThe fields of the records to fetch."
  },
  {
    "title": "CKError.Code.notAuthenticated | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckerror/code/notauthenticated",
    "html": "See Also\nError Codes\ncase accountTemporarilyUnavailable\nAn error that occurs when the user’s iCloud account is temporarily unavailable.\ncase alreadyShared\nAn error that occurs when CloudKit attempts to share a record with an existing share.\ncase assetFileModified\nAn error that occurs when the system modifies an asset while saving it.\ncase assetFileNotFound\nAn error that occurs when the system can’t find the specified asset.\ncase assetNotAvailable\nAn error that occurs when the system can’t access the specified asset.\ncase badContainer\nAn error that occurs when you use an unknown or unauthorized container.\ncase badDatabase\nAn error that occurs when the operation can’t complete for the specified database.\ncase batchRequestFailed\nAn error that occurs when the system rejects the entire batch of changes.\ncase changeTokenExpired\nAn error that occurs when the change token expires.\ncase constraintViolation\nAn error that occurs when the server rejects the request because of a unique constraint violation.\ncase incompatibleVersion\nAn error that occurs when the current app version is older than the oldest allowed version.\ncase internalError\nA nonrecoverable error that CloudKit encounters.\ncase invalidArguments\nAn error that occurs when the request contains invalid information.\ncase limitExceeded\nAn error that occurs when a request’s size exceeds the limit.\ncase managedAccountRestricted\nAn error that occurs when CloudKit rejects a request due to a managed-account restriction.\ncase missingEntitlement\nAn error that occurs when the app is missing a required entitlement.\ncase networkFailure\nAn error that occurs when a network is available, but CloudKit is inaccessible.\ncase networkUnavailable\nAn error that occurs when the network is unavailable.\ncase operationCancelled\nAn error that occurs when an operation cancels.\ncase partialFailure\nAn error that occurs when an operation completes with partial failures.\ncase participantMayNeedVerification\nAn error that occurs when the user isn’t a participant of the share.\ncase permissionFailure\nAn error that occurs when the user doesn’t have permission to save or fetch data.\ncase quotaExceeded\nAn error that occurs when saving a record exceeds the user’s storage quota.\ncase referenceViolation\nAn error that occurs when CloudKit can’t find the target of a reference.\ncase requestRateLimited\nAn error that occurs when CloudKit rate-limits requests.\ncase serverRecordChanged\nAn error that occurs when CloudKit rejects a record because the server’s version is different.\ncase serverRejectedRequest\nAn error that occurs when CloudKit rejects the request.\ncase serverResponseLost\nAn error that occurs when CloudKit is unable to maintain the network connection and provide a response.\ncase serviceUnavailable\nAn error that occurs when CloudKit is unavailable.\ncase tooManyParticipants\nAn error that occurs when a share has too many participants.\ncase unknownItem\nAn error that occurs when the specified record doesn’t exist.\ncase userDeletedZone\nAn error that occurs when the user deletes a record zone using the Settings app.\ncase zoneBusy\nAn error that occurs when the server is too busy to handle the record zone operation.\ncase zoneNotFound\nAn error that occurs when the specified record zone doesn’t exist.\ncase resultsTruncated\nAn error that occurs when CloudKit truncates a query’s results.\nDeprecated"
  },
  {
    "title": "CKError.Code.networkUnavailable | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckerror/code/networkunavailable",
    "html": "Discussion\n\nYou can retry network failures immediately, but have your app implement a backoff period so that it doesn’t attempt the same operation repeatedly.\n\nIf the network is unavailable, have your app monitor for network reachability and wait to reissue the operation when the network is available again. See CFNetworkErrors for more information.\n\nSee Also\nError Codes\ncase accountTemporarilyUnavailable\nAn error that occurs when the user’s iCloud account is temporarily unavailable.\ncase alreadyShared\nAn error that occurs when CloudKit attempts to share a record with an existing share.\ncase assetFileModified\nAn error that occurs when the system modifies an asset while saving it.\ncase assetFileNotFound\nAn error that occurs when the system can’t find the specified asset.\ncase assetNotAvailable\nAn error that occurs when the system can’t access the specified asset.\ncase badContainer\nAn error that occurs when you use an unknown or unauthorized container.\ncase badDatabase\nAn error that occurs when the operation can’t complete for the specified database.\ncase batchRequestFailed\nAn error that occurs when the system rejects the entire batch of changes.\ncase changeTokenExpired\nAn error that occurs when the change token expires.\ncase constraintViolation\nAn error that occurs when the server rejects the request because of a unique constraint violation.\ncase incompatibleVersion\nAn error that occurs when the current app version is older than the oldest allowed version.\ncase internalError\nA nonrecoverable error that CloudKit encounters.\ncase invalidArguments\nAn error that occurs when the request contains invalid information.\ncase limitExceeded\nAn error that occurs when a request’s size exceeds the limit.\ncase managedAccountRestricted\nAn error that occurs when CloudKit rejects a request due to a managed-account restriction.\ncase missingEntitlement\nAn error that occurs when the app is missing a required entitlement.\ncase networkFailure\nAn error that occurs when a network is available, but CloudKit is inaccessible.\ncase notAuthenticated\nAn error that occurs when the user is unauthenticated.\ncase operationCancelled\nAn error that occurs when an operation cancels.\ncase partialFailure\nAn error that occurs when an operation completes with partial failures.\ncase participantMayNeedVerification\nAn error that occurs when the user isn’t a participant of the share.\ncase permissionFailure\nAn error that occurs when the user doesn’t have permission to save or fetch data.\ncase quotaExceeded\nAn error that occurs when saving a record exceeds the user’s storage quota.\ncase referenceViolation\nAn error that occurs when CloudKit can’t find the target of a reference.\ncase requestRateLimited\nAn error that occurs when CloudKit rate-limits requests.\ncase serverRecordChanged\nAn error that occurs when CloudKit rejects a record because the server’s version is different.\ncase serverRejectedRequest\nAn error that occurs when CloudKit rejects the request.\ncase serverResponseLost\nAn error that occurs when CloudKit is unable to maintain the network connection and provide a response.\ncase serviceUnavailable\nAn error that occurs when CloudKit is unavailable.\ncase tooManyParticipants\nAn error that occurs when a share has too many participants.\ncase unknownItem\nAn error that occurs when the specified record doesn’t exist.\ncase userDeletedZone\nAn error that occurs when the user deletes a record zone using the Settings app.\ncase zoneBusy\nAn error that occurs when the server is too busy to handle the record zone operation.\ncase zoneNotFound\nAn error that occurs when the specified record zone doesn’t exist.\ncase resultsTruncated\nAn error that occurs when CloudKit truncates a query’s results.\nDeprecated"
  },
  {
    "title": "CKError.Code.missingEntitlement | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckerror/code/missingentitlement",
    "html": "See Also\nError Codes\ncase accountTemporarilyUnavailable\nAn error that occurs when the user’s iCloud account is temporarily unavailable.\ncase alreadyShared\nAn error that occurs when CloudKit attempts to share a record with an existing share.\ncase assetFileModified\nAn error that occurs when the system modifies an asset while saving it.\ncase assetFileNotFound\nAn error that occurs when the system can’t find the specified asset.\ncase assetNotAvailable\nAn error that occurs when the system can’t access the specified asset.\ncase badContainer\nAn error that occurs when you use an unknown or unauthorized container.\ncase badDatabase\nAn error that occurs when the operation can’t complete for the specified database.\ncase batchRequestFailed\nAn error that occurs when the system rejects the entire batch of changes.\ncase changeTokenExpired\nAn error that occurs when the change token expires.\ncase constraintViolation\nAn error that occurs when the server rejects the request because of a unique constraint violation.\ncase incompatibleVersion\nAn error that occurs when the current app version is older than the oldest allowed version.\ncase internalError\nA nonrecoverable error that CloudKit encounters.\ncase invalidArguments\nAn error that occurs when the request contains invalid information.\ncase limitExceeded\nAn error that occurs when a request’s size exceeds the limit.\ncase managedAccountRestricted\nAn error that occurs when CloudKit rejects a request due to a managed-account restriction.\ncase networkFailure\nAn error that occurs when a network is available, but CloudKit is inaccessible.\ncase networkUnavailable\nAn error that occurs when the network is unavailable.\ncase notAuthenticated\nAn error that occurs when the user is unauthenticated.\ncase operationCancelled\nAn error that occurs when an operation cancels.\ncase partialFailure\nAn error that occurs when an operation completes with partial failures.\ncase participantMayNeedVerification\nAn error that occurs when the user isn’t a participant of the share.\ncase permissionFailure\nAn error that occurs when the user doesn’t have permission to save or fetch data.\ncase quotaExceeded\nAn error that occurs when saving a record exceeds the user’s storage quota.\ncase referenceViolation\nAn error that occurs when CloudKit can’t find the target of a reference.\ncase requestRateLimited\nAn error that occurs when CloudKit rate-limits requests.\ncase serverRecordChanged\nAn error that occurs when CloudKit rejects a record because the server’s version is different.\ncase serverRejectedRequest\nAn error that occurs when CloudKit rejects the request.\ncase serverResponseLost\nAn error that occurs when CloudKit is unable to maintain the network connection and provide a response.\ncase serviceUnavailable\nAn error that occurs when CloudKit is unavailable.\ncase tooManyParticipants\nAn error that occurs when a share has too many participants.\ncase unknownItem\nAn error that occurs when the specified record doesn’t exist.\ncase userDeletedZone\nAn error that occurs when the user deletes a record zone using the Settings app.\ncase zoneBusy\nAn error that occurs when the server is too busy to handle the record zone operation.\ncase zoneNotFound\nAn error that occurs when the specified record zone doesn’t exist.\ncase resultsTruncated\nAn error that occurs when CloudKit truncates a query’s results.\nDeprecated"
  },
  {
    "title": "CKError.Code.internalError | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckerror/code/internalerror",
    "html": "Discussion\n\nIf you receive this error, file a bug report that includes the error log.\n\nSee Also\nError Codes\ncase accountTemporarilyUnavailable\nAn error that occurs when the user’s iCloud account is temporarily unavailable.\ncase alreadyShared\nAn error that occurs when CloudKit attempts to share a record with an existing share.\ncase assetFileModified\nAn error that occurs when the system modifies an asset while saving it.\ncase assetFileNotFound\nAn error that occurs when the system can’t find the specified asset.\ncase assetNotAvailable\nAn error that occurs when the system can’t access the specified asset.\ncase badContainer\nAn error that occurs when you use an unknown or unauthorized container.\ncase badDatabase\nAn error that occurs when the operation can’t complete for the specified database.\ncase batchRequestFailed\nAn error that occurs when the system rejects the entire batch of changes.\ncase changeTokenExpired\nAn error that occurs when the change token expires.\ncase constraintViolation\nAn error that occurs when the server rejects the request because of a unique constraint violation.\ncase incompatibleVersion\nAn error that occurs when the current app version is older than the oldest allowed version.\ncase invalidArguments\nAn error that occurs when the request contains invalid information.\ncase limitExceeded\nAn error that occurs when a request’s size exceeds the limit.\ncase managedAccountRestricted\nAn error that occurs when CloudKit rejects a request due to a managed-account restriction.\ncase missingEntitlement\nAn error that occurs when the app is missing a required entitlement.\ncase networkFailure\nAn error that occurs when a network is available, but CloudKit is inaccessible.\ncase networkUnavailable\nAn error that occurs when the network is unavailable.\ncase notAuthenticated\nAn error that occurs when the user is unauthenticated.\ncase operationCancelled\nAn error that occurs when an operation cancels.\ncase partialFailure\nAn error that occurs when an operation completes with partial failures.\ncase participantMayNeedVerification\nAn error that occurs when the user isn’t a participant of the share.\ncase permissionFailure\nAn error that occurs when the user doesn’t have permission to save or fetch data.\ncase quotaExceeded\nAn error that occurs when saving a record exceeds the user’s storage quota.\ncase referenceViolation\nAn error that occurs when CloudKit can’t find the target of a reference.\ncase requestRateLimited\nAn error that occurs when CloudKit rate-limits requests.\ncase serverRecordChanged\nAn error that occurs when CloudKit rejects a record because the server’s version is different.\ncase serverRejectedRequest\nAn error that occurs when CloudKit rejects the request.\ncase serverResponseLost\nAn error that occurs when CloudKit is unable to maintain the network connection and provide a response.\ncase serviceUnavailable\nAn error that occurs when CloudKit is unavailable.\ncase tooManyParticipants\nAn error that occurs when a share has too many participants.\ncase unknownItem\nAn error that occurs when the specified record doesn’t exist.\ncase userDeletedZone\nAn error that occurs when the user deletes a record zone using the Settings app.\ncase zoneBusy\nAn error that occurs when the server is too busy to handle the record zone operation.\ncase zoneNotFound\nAn error that occurs when the specified record zone doesn’t exist.\ncase resultsTruncated\nAn error that occurs when CloudKit truncates a query’s results.\nDeprecated"
  },
  {
    "title": "query | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckqueryoperation/1515127-query",
    "html": "Discussion\n\nThe initial value of this property is the query that you provide to the init(query:) method. When the value in the cursor property is nil, the operation uses this property’s value to execute a new search and return its results to your completion handler. If cursor isn’t nil, the operation uses the cursor instead.\n\nIf you intend to specify or change the value of this property, do so before you execute the operation or submit it to a queue.\n\nSee Also\nConfiguring the Query Operation\nvar cursor: CKQueryOperation.Cursor?\nThe cursor for continuing the search.\nclass CKQueryOperation.Cursor\nAn object that marks the stopping point for a query and the starting point for retrieving the remaining results.\nvar zoneID: CKRecordZone.ID?\nThe ID of the record zone that contains the records to search.\nvar resultsLimit: Int\nThe maximum number of records to return at one time.\nclass let maximumResults: Int\nA constant value that represents the maximum number of results CloudKit retrieves.\nvar desiredKeys: [CKRecord.FieldKey]?\nThe fields of the records to fetch."
  },
  {
    "title": "CKError.Code.assetFileModified | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckerror/code/assetfilemodified",
    "html": "See Also\nError Codes\ncase accountTemporarilyUnavailable\nAn error that occurs when the user’s iCloud account is temporarily unavailable.\ncase alreadyShared\nAn error that occurs when CloudKit attempts to share a record with an existing share.\ncase assetFileNotFound\nAn error that occurs when the system can’t find the specified asset.\ncase assetNotAvailable\nAn error that occurs when the system can’t access the specified asset.\ncase badContainer\nAn error that occurs when you use an unknown or unauthorized container.\ncase badDatabase\nAn error that occurs when the operation can’t complete for the specified database.\ncase batchRequestFailed\nAn error that occurs when the system rejects the entire batch of changes.\ncase changeTokenExpired\nAn error that occurs when the change token expires.\ncase constraintViolation\nAn error that occurs when the server rejects the request because of a unique constraint violation.\ncase incompatibleVersion\nAn error that occurs when the current app version is older than the oldest allowed version.\ncase internalError\nA nonrecoverable error that CloudKit encounters.\ncase invalidArguments\nAn error that occurs when the request contains invalid information.\ncase limitExceeded\nAn error that occurs when a request’s size exceeds the limit.\ncase managedAccountRestricted\nAn error that occurs when CloudKit rejects a request due to a managed-account restriction.\ncase missingEntitlement\nAn error that occurs when the app is missing a required entitlement.\ncase networkFailure\nAn error that occurs when a network is available, but CloudKit is inaccessible.\ncase networkUnavailable\nAn error that occurs when the network is unavailable.\ncase notAuthenticated\nAn error that occurs when the user is unauthenticated.\ncase operationCancelled\nAn error that occurs when an operation cancels.\ncase partialFailure\nAn error that occurs when an operation completes with partial failures.\ncase participantMayNeedVerification\nAn error that occurs when the user isn’t a participant of the share.\ncase permissionFailure\nAn error that occurs when the user doesn’t have permission to save or fetch data.\ncase quotaExceeded\nAn error that occurs when saving a record exceeds the user’s storage quota.\ncase referenceViolation\nAn error that occurs when CloudKit can’t find the target of a reference.\ncase requestRateLimited\nAn error that occurs when CloudKit rate-limits requests.\ncase serverRecordChanged\nAn error that occurs when CloudKit rejects a record because the server’s version is different.\ncase serverRejectedRequest\nAn error that occurs when CloudKit rejects the request.\ncase serverResponseLost\nAn error that occurs when CloudKit is unable to maintain the network connection and provide a response.\ncase serviceUnavailable\nAn error that occurs when CloudKit is unavailable.\ncase tooManyParticipants\nAn error that occurs when a share has too many participants.\ncase unknownItem\nAn error that occurs when the specified record doesn’t exist.\ncase userDeletedZone\nAn error that occurs when the user deletes a record zone using the Settings app.\ncase zoneBusy\nAn error that occurs when the server is too busy to handle the record zone operation.\ncase zoneNotFound\nAn error that occurs when the specified record zone doesn’t exist.\ncase resultsTruncated\nAn error that occurs when CloudKit truncates a query’s results.\nDeprecated"
  },
  {
    "title": "init(cursor:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckqueryoperation/1515033-init",
    "html": "Parameters\ncursor\n\nThe cursor that identifies the previous search. CloudKit passes this value to the completion handler of the previous search. For more information, see the queryCompletionBlock property.\n\nDiscussion\n\nUse this method to create an operation that retrieves the next batch of results from a previous search. When executing searches for a cursor, don’t cache cursors for a long time before using them. A cursor isn’t a snapshot of the previous search results; it stores a relative offset into the results list. An operation that you create from a cursor performs a new search, sorts the new set of results, and uses the previous offset value to determine where the next batch of results starts.\n\nSee Also\nCreating a Query Operation\ninit(query: CKQuery)\nCreates an operation that searches for records in the specified record zone.\ninit()\nCreates an empty query operation."
  },
  {
    "title": "init(query:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckqueryoperation/1514958-init",
    "html": "Parameters\nquery\n\nThe query for the search.\n\nDiscussion\n\nYou can use the operation that this method returns only once to perform a search, but you can reuse the query that you provide. During execution, the operation performs a new search and returns the first batch of results. If there are more results available, you must create a separate query object using the provided cursor object.\n\nSee Also\nCreating a Query Operation\ninit(cursor: CKQueryOperation.Cursor)\nCreates an operation with additional results from a previous search.\ninit()\nCreates an empty query operation."
  },
  {
    "title": "modifyRecordZonesCompletionBlock | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckmodifyrecordzonesoperation/1415164-modifyrecordzonescompletionblock",
    "html": "Discussion\n\nThis property is a closure that returns no value and has the following parameters:\n\nThe record zones that CloudKit saves.\n\nThe IDs of the record zones that CloudKit deletes.\n\nIf CloudKit can’t modify any of the record zones, this parameter provides information about the failure; otherwise, it’s nil.\n\nThe closure executes once, and represents your only opportunity to process the results.\n\nThe closure reports an error of type CKError.Code.partialFailure when it modifies only some of the record zones successfully. The userInfo dictionary of the error contains a CKPartialErrorsByItemIDKey key that has a dictionary as its value. The keys of the dictionary are the IDs of the record zones that the operation can’t modify, and the corresponding values are errors that contain information about the failures.\n\nIf you intend to use this closure to process the results, set it before you execute the operation or submit the operation to a queue."
  },
  {
    "title": "recordZoneIDsToDelete | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckmodifyrecordzonesoperation/1415173-recordzoneidstodelete",
    "html": "Discussion\n\nThe initial value of the property is the array of zone IDs that you provide to the init(recordZonesToSave:recordZoneIDsToDelete:) method. You can modify this array as necessary before you execute the operation. The record zones must all target the same database. You can specify nil, or an empty array, for this property.\n\nIf you intend to change the value of this property, do so before you execute the operation or submit the operation to a queue.\n\nSee Also\nConfiguring the Modify Zones Operation\nvar recordZonesToSave: [CKRecordZone]?\nThe record zones to save to the database."
  },
  {
    "title": "atomic | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckrecordzone/capabilities/1514889-atomic",
    "html": "Discussion\n\nWhen you use a CKModifyRecordsOperation object to save records, if the server is unable to save the changes for one record, it doesn’t save the changes for any of the records. Combining this capability with the CKModifyRecordsOperation.RecordSavePolicy.ifServerRecordUnchanged policy of the operation object prevents your app from overwriting changes to a group of records if one or more of the records on the server has recent changes.\n\nSee Also\nZone Capabilities\nstatic var fetchChanges: CKRecordZone.Capabilities\nA capability for fetching only the changed records from a zone.\nstatic var sharing: CKRecordZone.Capabilities\nA capability for sharing a specific hierarchy of records.\nstatic var zoneWideSharing: CKRecordZone.Capabilities\nA capability for sharing the entire contents of a record zone."
  },
  {
    "title": "fetchChanges | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckrecordzone/capabilities/1515273-fetchchanges",
    "html": "Discussion\n\nThis capability makes the creation of offline caches more efficient. Instead of fetching the entire record every time, use CKFetchRecordZoneChangesOperation to fetch only the changed values, and use the data it returns to update your cache. This minimizes the amount of data you receive from the server.\n\nSee Also\nZone Capabilities\nstatic var atomic: CKRecordZone.Capabilities\nA capability that allows atomic changes of multiple records.\nstatic var sharing: CKRecordZone.Capabilities\nA capability for sharing a specific hierarchy of records.\nstatic var zoneWideSharing: CKRecordZone.Capabilities\nA capability for sharing the entire contents of a record zone."
  },
  {
    "title": "init(rawValue:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckrecordzone/capabilities/1514985-init",
    "html": "Parameters\nrawValue\n\nAn integer that represents the combined set of capabilities to create.\n\nDiscussion\n\nCapabilities on record zones that you create locally aren’t valid until you save the record zone. Capabilities on record zones that you fetch from the server are always valid."
  },
  {
    "title": "perRecordProgressBlock | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckmodifyrecordsoperation/1447477-perrecordprogressblock",
    "html": "Discussion\n\nThis property is a closure that returns no value and has the following parameters:\n\nThe record that CloudKit saves.\n\nThe amount of data, as a percentage, that CloudKit saves for the record. The range is 0.0 to 1.0, where 0.0 indicates that CloudKit hasn’t saved any data, and 1.0 means that CloudKit has saved the entire record.\n\nThe modify records operation executes this closure one or more times for each record in the recordsToSave property. Each time the closure executes, it executes serially with respect to the other progress closures of the operation. You can use this closure to track the ongoing progress of the operation.\n\nIf you intend to use this closure to process results, set it before you execute the operation or add the operation to a queue.\n\nSee Also\nProcessing the Modify Record Results\nvar perRecordCompletionBlock: ((CKRecord, Error?) -> Void)?\nThe closure to execute when CloudKit saves a record.\nDeprecated\nvar modifyRecordsCompletionBlock: (([CKRecord]?, [CKRecord.ID]?, Error?) -> Void)?\nThe closure to execute after CloudKit modifies all of the records."
  },
  {
    "title": "init(record:action:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckrecord/reference/1515312-init",
    "html": "Parameters\nrecord\n\nThe target record of the reference.\n\naction\n\nThe ownership options to use for the records. If you specify the CKRecord.ReferenceAction.deleteSelf option, the object that the recordID parameter references becomes the owner of (or acts as the parent of) any objects that use this reference object. For a list of possible values, see CKRecord.ReferenceAction.\n\nReturn Value\n\nAn initialized reference object that points to the specified record, or nil if CloudKit can’t initialize the reference.\n\nDiscussion\n\nUse this method to initialize a reference to a local record object. The local record can be one that you create or one that you fetch from the server.\n\nWhen you create a reference object for use in a search predicate, the predicate ignores the value in the action parameter. Search predicates use only the ID of the record during their comparison.\n\nSee Also\nCreating a Reference\ninit(recordID: CKRecord.ID, action: CKRecord.ReferenceAction)\nCreates a reference object that points to the record with the specified ID.\ntypealias CKRecord.Reference.Action\nA type that represents additional actions that occur when deleting references.\nDeprecated"
  },
  {
    "title": "savePolicy | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckmodifyrecordsoperation/1447488-savepolicy",
    "html": "Discussion\n\nThe server uses this property to determine how to proceed when saving record changes. The exact behavior depends on the policy you choose:\n\nUse CKModifyRecordsOperation.RecordSavePolicy.ifServerRecordUnchanged to only save a record when the change tag of the local copy matches that of the server’s copy. If the server record’s change tag is more recent, CloudKit discards the save and returns a CKError.Code.serverRecordChanged error.\n\nUse CKModifyRecordsOperation.RecordSavePolicy.changedKeys to save only the fields of the record that contain changes. The server doesn’t compare record change tags when using this policy.\n\nUse CKModifyRecordsOperation.RecordSavePolicy.allKeys to save every field of the record, even those without changes. The server doesn’t compare record change tags when using this policy.\n\nIf you change the property’s value, do so before you execute the operation or submit the operation to a queue. The default value is CKModifyRecordsOperation.RecordSavePolicy.ifServerRecordUnchanged.\n\nSee Also\nConfiguring the Modify Record Operation\nvar recordsToSave: [CKRecord]?\nThe records to save to the database.\nvar recordIDsToDelete: [CKRecord.ID]?\nThe IDs of the records to delete permanently from the database.\nvar clientChangeTokenData: Data?\nA token that tracks local changes to records.\nvar isAtomic: Bool\nA Boolean value that indicates whether the entire operation fails when CloudKit can’t update one or more records in a record zone.\nenum CKModifyRecordsOperation.RecordSavePolicy\nConstants that indicate which policy to apply when saving records."
  },
  {
    "title": "recordIDsToDelete | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckmodifyrecordsoperation/1447479-recordidstodelete",
    "html": "Discussion\n\nAn array of CKRecord.ID objects that identifies the records to delete. The initial value of the property is the array of record IDs that you provide to the init(recordsToSave:recordIDsToDelete:) method.\n\nWhen deleting records, the operation reports progress only on the records with the IDs that you specify in this property. Deleting records can trigger the deletion of related records if there is an owner-owned relationship between the records involving a CKRecord.Reference object. When additional deletions occur, CloudKit doesn’t pass them to the progress handler of the operation. For that reason, it’s important to understand the implications of the ownership model you use when you relate records to each other through a CKRecord.Reference object. For more information about owner-owned relationships, see CKRecord.Reference.\n\nIf you intend to change the value of this property, do so before you execute the operation or submit the operation to a queue.\n\nSee Also\nConfiguring the Modify Record Operation\nvar recordsToSave: [CKRecord]?\nThe records to save to the database.\nvar clientChangeTokenData: Data?\nA token that tracks local changes to records.\nvar isAtomic: Bool\nA Boolean value that indicates whether the entire operation fails when CloudKit can’t update one or more records in a record zone.\nvar savePolicy: CKModifyRecordsOperation.RecordSavePolicy\nThe policy to use when saving changes to records.\nenum CKModifyRecordsOperation.RecordSavePolicy\nConstants that indicate which policy to apply when saving records."
  },
  {
    "title": "CKRecord.ReferenceAction.deleteSelf | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckrecord/referenceaction/deleteself",
    "html": "Discussion\n\nCloudKit deletes any records that contain CKReference objects pointing to the current record. The deletion of the additional records can trigger further deletions as the action cascades. The deletions are asynchronous in the default zone and immediate in a custom zone.\n\nSee Also\nDeletion Reference Actions\ncase none\nA reference action that has no cascading behavior."
  },
  {
    "title": "clientChangeTokenData | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckmodifyrecordsoperation/1447472-clientchangetokendata",
    "html": "Discussion\n\nThe default value is nil.\n\nWhen you modify records from a fetch operation, specify a token using this property to indicate which version of the record you most recently modified. Compare the token you supply to the token in the next record fetch to confirm the server successfully receives the device’s most recent modify request.\n\nIf you intend to change the value of this property, do so before you execute the operation or submit the operation to a queue.\n\nSee Also\nConfiguring the Modify Record Operation\nvar recordsToSave: [CKRecord]?\nThe records to save to the database.\nvar recordIDsToDelete: [CKRecord.ID]?\nThe IDs of the records to delete permanently from the database.\nvar isAtomic: Bool\nA Boolean value that indicates whether the entire operation fails when CloudKit can’t update one or more records in a record zone.\nvar savePolicy: CKModifyRecordsOperation.RecordSavePolicy\nThe policy to use when saving changes to records.\nenum CKModifyRecordsOperation.RecordSavePolicy\nConstants that indicate which policy to apply when saving records."
  },
  {
    "title": "CKRecord.Reference.Action | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckrecord/reference/action",
    "html": "See Also\nCreating a Reference\ninit(recordID: CKRecord.ID, action: CKRecord.ReferenceAction)\nCreates a reference object that points to the record with the specified ID.\ninit(record: CKRecord, action: CKRecord.ReferenceAction)\nCreates a reference object that points to the specified record object."
  },
  {
    "title": "CKRecord.ReferenceAction.none | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckrecord/referenceaction/none",
    "html": "Discussion\n\nNo action occurs when you delete a record that the current record references. Deleting a parent record doesn’t delete that record’s children. The CKReference object still contains the ID of the deleted record and doesn’t update.\n\nSee Also\nDeletion Reference Actions\ncase deleteSelf\nA reference action that cascades deletions."
  },
  {
    "title": "fetchRecordZonesCompletionBlock | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckfetchrecordzonesoperation/1515145-fetchrecordzonescompletionblock",
    "html": "Discussion\n\nThis property is a closure that returns no value and has the following parameters:\n\nA dictionary that maps the zone IDs you request to the results. The keys in the dictionary are CKRecordZone.ID objects, and the values are the corresponding CKRecordZone objects that CloudKit returns.\n\nIf CloudKit can’t retrieve any of the record zones, an error that provides information about the failure; otherwise, nil.\n\nThe operation executes the closure only once, and it’s your only chance to process the results. The closure must be capable of executing on a background thread, so any tasks that require access to the main thread must redirect accordingly.\n\nThe closure reports an error of type CKError.Code.partialFailure when it retrieves only some of the record zones successfully. The userInfo dictionary of the error contains a CKPartialErrorsByItemIDKey key that has a dictionary as its value. The keys of the dictionary are the IDs of the record zones that the operation can’t retrieve, and the corresponding values are errors that contain information about the failures.\n\nIf you intend to use this closure to process results, set it before you execute the operation or submit the operation to a queue."
  },
  {
    "title": "sendChanges(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncengine/4155831-sendchanges",
    "html": "Parameters\noptions\n\nThe options to use when sending changes. For more information, see CKSyncEngine.SendChangesOptions.\n\nDiscussion\n\nUse this method to ensure the sync engine sends all pending local changes to the server before your app continues. This isn’t necessary in normal use, as the engine automatically syncs your app’s records. It is useful, however, in scenarios where you require greater control over sync, such as a “Backup now” button or unit tests.\n\nNote\n\nsendChanges(_:) returns only after your sync delegate finishes processing all related send events.\n\nSee Also\nInvoking manual sync operations\nfunc fetchChanges(CKSyncEngine.FetchChangesOptions)\nFetches pending remote changes from the server.\nstruct CKSyncEngine.FetchChangesOptions\nA set of options to use with a fetch operation.\nstruct CKSyncEngine.SendChangesOptions\nA set of options to use with a send operation."
  },
  {
    "title": "recordID | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckrecord/reference/1514956-recordid",
    "html": "Discussion\n\nUse the ID in this property to fetch the record on the other end of the link.\n\nSee Also\nGetting the Reference Attributes\nvar action: CKRecord.ReferenceAction\nThe ownership behavior for the records.\nenum CKRecord.ReferenceAction\nConstants that indicate the behavior when deleting a referenced record."
  },
  {
    "title": "fetchChanges(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncengine/4155828-fetchchanges",
    "html": "Parameters\noptions\n\nThe options to use when fetching changes. For more information, see CKSyncEngine.FetchChangesOptions.\n\nDiscussion\n\nUse this method to ensure the sync engine immediatley fetches all pending remote changes before your app continues. This isn’t necessary in normal use, as the engine automatically syncs your app’s records. It is useful, however, in scenarios where you require more control over sync, such as pull-to-refresh or unit tests.\n\nNote\n\nfetchChanges(_:) returns only after your sync delegate finishes processing all related fetch events.\n\nSee Also\nInvoking manual sync operations\nstruct CKSyncEngine.FetchChangesOptions\nA set of options to use with a fetch operation.\nfunc sendChanges(CKSyncEngine.SendChangesOptions)\nSends pending local changes to the server.\nstruct CKSyncEngine.SendChangesOptions\nA set of options to use with a send operation."
  },
  {
    "title": "CKSyncEngine.State | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncengine/state",
    "html": "Overview\n\nTo reliably and consistently sync your app’s data, a sync engine keeps a record of several important pieces of data, such as server changes tokens (for databases and record zones), subscription identifiers, the most recent userRecordID, and so on. This class automatically manages that state on behalf of your app, but there are certain elements you can modify. For example, you control the list of pending changes to send to the iCloud servers and manipulate that list using the add(pendingDatabaseChanges:) and add(pendingRecordZoneChanges:) methods. If there aren’t any scheduled sync operations when you invoke these methods, the engine automatically schedules one.\n\nAn engine’s state changes periodically and, when it does, the sync engine dispatches a CKSyncEngine.Event.stateUpdate(_:) event to your delegate. The event contains an instance of CKSyncEngine.State.Serialization and, on receipt of such an event, it’s your responsibility to persist the serialized state to disk so that it’s available across app launches. On the next initialization of the sync engine, you provide the most recently persisted state as part of the engine’s configuration. For more information, see init(database:stateSerialization:delegate:).\n\nTopics\nAccessing pending changes\nvar hasPendingUntrackedChanges: Bool\nA Boolean value that indicates whether there are pending changes that the sync engine is unaware of.\nvar pendingDatabaseChanges: [CKSyncEngine.PendingDatabaseChange]\nThe database changes that the sync engine has yet to send to the iCloud servers.\nvar pendingRecordZoneChanges: [CKSyncEngine.PendingRecordZoneChange]\nThe record zone changes that the sync engine has yet to send to the iCloud servers.\nManipulating pending changes\nfunc add(pendingDatabaseChanges: [CKSyncEngine.PendingDatabaseChange])\nAdds the specified database changes to the state.\nfunc remove(pendingDatabaseChanges: [CKSyncEngine.PendingDatabaseChange])\nRemoves the specified database changes from the state.\nenum CKSyncEngine.PendingDatabaseChange\nDescribes an unsent database modification.\nfunc add(pendingRecordZoneChanges: [CKSyncEngine.PendingRecordZoneChange])\nAdds the specified record zone changes to the state.\nfunc remove(pendingRecordZoneChanges: [CKSyncEngine.PendingRecordZoneChange])\nRemoves the specified record zone changes from the state.\nenum CKSyncEngine.PendingRecordZoneChange\nDescribes an unsent record modification.\nSerializing state\nstruct CKSyncEngine.State.Serialization\nA type that contains the serialized representation of a sync engine’s state.\nInstance Properties\nvar zoneIDsWithUnfetchedServerChanges: [CKRecordZone.ID]\nRelationships\nConforms To\nSendable\nSee Also\nAccessing the engine’s attributes\nlet database: CKDatabase\nThe associated database.\nlet state: CKSyncEngine.State\nThe sync engine’s state."
  },
  {
    "title": "CKSyncEngineDelegate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncenginedelegate",
    "html": "Overview\n\nImportant\n\nCKSyncEngine delivers events serially, which means the delegate doesn’t receive the next event until it finishes handling the current one. To maintain this ordering, don’t call sync engine methods from your delegate that may cause the engine to generate additional events. For example, don’t invoke fetchChanges(_:) or sendChanges(_:) from within handleEvent(_:syncEngine:).\n\nTopics\nHandling sync events\nfunc handleEvent(CKSyncEngine.Event, syncEngine: CKSyncEngine)\nTells the delegate to handle the specified sync event.\n\nRequired\n\nenum CKSyncEngine.Event\nDescribes an event that occurs during a sync operation.\nenum CKSyncEngineEventType\nDescribes an event that occurs during a sync operation.\nSending changes\nfunc nextRecordZoneChangeBatch(CKSyncEngine.SendChangesContext, syncEngine: CKSyncEngine) -> CKSyncEngine.RecordZoneChangeBatch?\nAsks the delegate to provide the next set of record changes to send to the server.\n\nRequired\n\nstruct CKSyncEngine.SendChangesContext\nA type that describes a single attempt to send changes to the iCloud servers.\nstruct CKSyncEngine.RecordZoneChangeBatch\nA type that contains the record changes for a single send operation.\nInstance Methods\nfunc nextFetchChangesOptions(CKSyncEngine.FetchChangesContext, syncEngine: CKSyncEngine) -> CKSyncEngine.FetchChangesOptions\n\nRequired Default implementation provided.\n\nRelationships\nInherits From\nSendable"
  },
  {
    "title": "init(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncengine/4155829-init",
    "html": "Parameters\nconfiguration\n\nThe attributes of the new sync engine, such as the associated database and the object to use as the engine’s delegate. For more information, see CKSyncEngine.Configuration.\n\nSee Also\nCreating a sync engine\nstruct CKSyncEngine.Configuration\nA type that configures the attributes and behavior of a sync engine."
  },
  {
    "title": "init(coder:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckquery/1413111-init",
    "html": "Parameters\naDecoder\n\nThe coder to use when deserializing the group.\n\nSee Also\nCreating a Query\ninit(recordType: CKRecord.RecordType, predicate: NSPredicate)\nCreates a query with the specified record type and predicate."
  },
  {
    "title": "recordType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckquery/3003369-recordtype",
    "html": "Discussion\n\nA query’s results include only records of the specified type. The record type is an app-specific string that you use to distinguish among the records of your app. The records of a particular type all represent different instances of the same information. For example, an employee record type might store the employee’s name, phone number, and a reference to the employee’s manager.\n\nSee Also\nAccessing the Query Parameters\nvar predicate: NSPredicate\nThe predicate to use for matching records.\nvar sortDescriptors: [NSSortDescriptor]?\nThe sort descriptors for organizing the query’s results."
  },
  {
    "title": "changeTokenExpired | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckerror/2325216-changetokenexpired",
    "html": "See Also\nGetting Error Codes\nstatic var accountTemporarilyUnavailable: CKError.Code\nAn error that occurs when the user’s iCloud account is temporarily unavailable.\nstatic var alreadyShared: CKError.Code\nAn error that occurs when CloudKit attempts to share a record with an existing share.\nstatic var assetFileModified: CKError.Code\nAn error that occurs when the system modifies an asset while saving it.\nstatic var assetFileNotFound: CKError.Code\nAn error that occurs when the system can’t find the specified asset.\nstatic var assetNotAvailable: CKError.Code\nAn error that occurs when the system can’t access the specified asset.\nstatic var badContainer: CKError.Code\nAn error that occurs when you use an unknown or unauthorized container.\nstatic var badDatabase: CKError.Code\nAn error that occurs when the operation can’t complete for the specified database.\nstatic var batchRequestFailed: CKError.Code\nAn error that occurs when the system rejects the entire batch of changes.\nstatic var constraintViolation: CKError.Code\nAn error that occurs when the server rejects the request because of a unique constraint violation.\nstatic var incompatibleVersion: CKError.Code\nAn error that occurs when the current app version is older than the oldest allowed version.\nstatic var internalError: CKError.Code\nA nonrecoverable error that CloudKit encounters.\nstatic var invalidArguments: CKError.Code\nAn error that occurs when the request contains invalid information.\nstatic var limitExceeded: CKError.Code\nAn error that occurs when a request’s size exceeds the limit.\nstatic var managedAccountRestricted: CKError.Code\nAn error that occurs when CloudKit rejects a request due to a managed-account restriction.\nstatic var missingEntitlement: CKError.Code\nAn error that occurs when the app is missing a required entitlement.\nstatic var networkFailure: CKError.Code\nAn error that occurs when a network is available, but CloudKit is inaccessible.\nstatic var networkUnavailable: CKError.Code\nAn error that occurs when the network is unavailable.\nstatic var notAuthenticated: CKError.Code\nAn error that occurs when the user is unauthenticated.\nstatic var operationCancelled: CKError.Code\nAn error that occurs when an operation cancels.\nstatic var partialFailure: CKError.Code\nAn error that occurs when an operation completes with partial failures.\nstatic var participantMayNeedVerification: CKError.Code\nAn error that occurs when the user isn’t a participant of the share.\nstatic var permissionFailure: CKError.Code\nAn error that occurs when the user doesn’t have permission to save or fetch data.\nstatic var quotaExceeded: CKError.Code\nAn error that occurs when saving a record exceeds the user’s storage quota.\nstatic var referenceViolation: CKError.Code\nAn error that occurs when CloudKit can’t find the target of a reference.\nstatic var requestRateLimited: CKError.Code\nAn error that occurs when CloudKit rate-limits requests.\nstatic var serverRecordChanged: CKError.Code\nAn error that occurs when CloudKit rejects a record because the server’s version is different.\nstatic var serverRejectedRequest: CKError.Code\nAn error that occurs when CloudKit rejects the request.\nstatic var serverResponseLost: CKError.Code\nAn error that occurs when CloudKit is unable to maintain the network connection and provide a response.\nstatic var serviceUnavailable: CKError.Code\nAn error that occurs when CloudKit is unavailable.\nstatic var tooManyParticipants: CKError.Code\nAn error that occurs when a share has too many participants.\nstatic var unknownItem: CKError.Code\nAn error that occurs when the specified record doesn’t exist.\nstatic var userDeletedZone: CKError.Code\nAn error that occurs when the user deletes a record zone using the Settings app.\nstatic var zoneBusy: CKError.Code\nAn error that occurs when the server is too busy to handle the record zone operation.\nstatic var zoneNotFound: CKError.Code\nAn error that occurs when the specified record zone doesn’t exist.\nstatic var resultsTruncated: CKError.Code\nAn error that occurs when CloudKit truncates a query’s results.\nDeprecated\nenum CKError.Code\nThe error codes that CloudKit returns."
  },
  {
    "title": "init(recordType:predicate:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckquery/3003368-init",
    "html": "Parameters\nrecordType\n\nThe type of record to search. Specify the name of one of your app’s supported record types. The method throws an exception if this parameter is an empty string.\n\npredicate\n\nThe search predicate to apply to the prospective records. Only records that match the predicate criteria appear in the search results. For guidelines on how to construct predicates for your queries, see Predicate Rules for Query Objects.\n\nDiscussion\n\nYou can’t change the record type and predicate of a query after you create it. If you want to search for a different set of records using a different set of search criteria, create a new query. You can add sort descriptors to the query and change them later as necessary.\n\nYou can’t query for user records, and executing a query where the record type is CKRecord_SystemType_userRecord results in an error. You must fetch user records directly using their IDs.\n\nSee Also\nCreating a Query\ninit(coder: NSCoder)\nCreates an operation group from a serialized instance."
  },
  {
    "title": "init(key:relativeLocation:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cklocationsortdescriptor/1515071-init",
    "html": "Parameters\nkey\n\nThe name of the key with a CLLocation object as its value. The key must belong to the records you’re sorting. The sort descriptor uses this key to retrieve the corresponding value from the record.\n\nrelativeLocation\n\nThe reference location when sorting. CloudKit sorts records according to their distance from this location.\n\nDiscussion\n\nDuring sorting, the sort descriptor computes the distance between the value in the relativeLocation parameter and the location value in the specified key of each record. It then sorts the records in ascending order using the distance between the two points. You can’t change the sort order.\n\nSee Also\nCreating a Location Sort Descriptor\ninit(coder: NSCoder)\nCreates a location sort descriptor from a serialized instance."
  },
  {
    "title": "init(coder:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cklocationsortdescriptor/1515257-init",
    "html": "Parameters\naDecoder\n\nThe coder to use when deserializing the location sort descriptor.\n\nSee Also\nCreating a Location Sort Descriptor\ninit(key: String, relativeLocation: CLLocation)\nCreates a location sort descriptor using the specified key and relative location."
  },
  {
    "title": "database | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckdatabaseoperation/1515274-database",
    "html": "Discussion\n\nFor operations that you execute in a custom queue, use this property to specify the target database. Setting the database also sets the corresponding container, which it inherits from CKOperation. If this property’s value is nil, the operation targets the user’s private database.\n\nThe default value is nil."
  },
  {
    "title": "setParent(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckrecord/1690508-setparent",
    "html": "Parameters\nparentRecordID\n\nThe CKRecord.ID object for the record that you want to set as this record’s parent.\n\nDiscussion\n\nThis method creates and sets a CKRecord.Reference object that points to the record you provide. The resulting CKReference has an action of CKRecord.ReferenceAction.none.\n\nSee Also\nSharing Records\nvar parent: CKRecord.Reference?\nA reference to the record’s parent record.\nvar share: CKRecord.Reference?\nA reference to the share object that determines the share status of the record.\nclass CKRecord.Reference\nA relationship between two records in a record zone.\nfunc setParent(CKRecord?)\nCreates and sets a reference object for a parent from its record.\nenum CKRecord.SystemFieldKey\nPossible values for types of system field keys on records."
  },
  {
    "title": "share | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckrecord/1640378-share",
    "html": "Discussion\n\nCloudKit clears this property’s value when it deletes the corresponding CKShare object on the server. Send this record in the same batch operation as the share object you’re deleting, and this property updates accordingly.\n\nCloudKit only supports sharing in zones with the CKRecordZoneCapabilitySharing capability. The default zone doesn’t support sharing.\n\nIf any records have a parent reference to this record, CloudKit implicitly shares them along with this record.\n\nNote\n\nRecords in a hierarchy must only exist within one share. If a child record in a hierarchy already has a share reference, you get a CKErrorAlreadyShared error if you try to share any of that record’s parents.\n\nSee Also\nSharing Records\nvar parent: CKRecord.Reference?\nA reference to the record’s parent record.\nclass CKRecord.Reference\nA relationship between two records in a record zone.\nfunc setParent(CKRecord?)\nCreates and sets a reference object for a parent from its record.\nfunc setParent(CKRecord.ID?)\nCreates and sets a reference object for a parent from the parent’s record ID.\nenum CKRecord.SystemFieldKey\nPossible values for types of system field keys on records."
  },
  {
    "title": "setParent(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckrecord/1690507-setparent",
    "html": "Parameters\nparentRecord\n\nA record that you want to set as the parent to this record.\n\nDiscussion\n\nThis method creates and sets a CKRecord.Reference object that points to the record you provide. The resulting CKReference has an action of CKRecord.ReferenceAction.none.\n\nSee Also\nSharing Records\nvar parent: CKRecord.Reference?\nA reference to the record’s parent record.\nvar share: CKRecord.Reference?\nA reference to the share object that determines the share status of the record.\nclass CKRecord.Reference\nA relationship between two records in a record zone.\nfunc setParent(CKRecord.ID?)\nCreates and sets a reference object for a parent from the parent’s record ID.\nenum CKRecord.SystemFieldKey\nPossible values for types of system field keys on records."
  },
  {
    "title": "allTokens() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckrecord/1462199-alltokens",
    "html": "Return Value\n\nAn array of strings that contains data from the record’s string-based fields.\n\nDiscussion\n\nWhen performing your own full-text searches, you can use this method to get a list of strings for your search. The method acts only on keys with string values. It breaks each value string apart at whitespace boundaries, creates new strings for each word, adds the new strings to an array, and returns the array. This tokenized version of the record’s string values makes it easier to do string-based comparisons of individual words."
  },
  {
    "title": "lastModifiedUserRecordID | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckrecord/1462212-lastmodifieduserrecordid",
    "html": "Discussion\n\nUse this property’s value to retrieve the user record of the user who most recently modified this record. Every user of the app has a unique user record that is empty by default. Apps can add data to the user record on behalf of the user, but don’t store sensitive data in it.\n\nSee Also\nAccessing the Record’s Metadata\nvar recordID: CKRecord.ID\nThe unique ID of the record.\nvar recordType: CKRecord.RecordType\nThe value that your app defines to identify the type of record.\nenum CKRecord.SystemType\nPossible values for record types of system records.\nvar creationDate: Date?\nThe time when CloudKit first saves the record to the server.\nvar creatorUserRecordID: CKRecord.ID?\nThe ID of the user who creates the record.\nvar modificationDate: Date?\nThe most recent time that CloudKit saved the record to the server.\nvar recordChangeTag: String?\nThe server change token for the record.\nclass CKRecord.ID\nAn object that uniquely identifies a record in a database."
  },
  {
    "title": "fetchRecordsCompletionBlock | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckfetchrecordsoperation/1476078-fetchrecordscompletionblock",
    "html": "Discussion\n\nThis property is a closure that returns no value and has the following parameters:\n\nA dictionary that contains the records that CloudKit retrieves. Each key in the dictionary is a CKRecord.ID object that corresponds to a record you request. The value of each key is the actual CKRecord object that CloudKit returns.\n\nIf CloudKit can’t retrieve any of the records, an error that provides information about the failure; otherwise, nil.\n\nThe fetch operation executes this closure only once, and it’s your final opportunity to process the results. The closure executes after all of the individual progress closures, but before the operation’s completion closure. The closure executes serially with respect to the other progress closures of the operation.\n\nThe closure reports an error of type CKError.Code.partialFailure when it retrieves only some of the records successfully. The userInfo dictionary of the error contains a CKPartialErrorsByItemIDKey key that has a dictionary as its value. The keys of the dictionary are the IDs of the records that the operation can’t retrieve, and the corresponding values are errors that contain information about the failures.\n\nIf you intend to use this closure to process results, set it before you execute the operation or submit the operation to a queue.\n\nSee Also\nProcessing Record Fetch Results\nvar perRecordProgressBlock: ((CKRecord.ID, Double) -> Void)?\nThe closure to execute with progress information for individual records.\nvar perRecordCompletionBlock: ((CKRecord?, CKRecord.ID?, Error?) -> Void)?\nThe closure to execute when a record becomes available."
  },
  {
    "title": "isLongLived | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckoperation/1452374-islonglived",
    "html": "Deprecated\n\nUse isLongLived instead.\n\nDiscussion\n\nSet this property to true to make the operation long-lived. The default value is false. If you change this property’s value after you execute the operation, the change has no effect.\n\nFor more information, see Long-Lived Operations.\n\nSee Also\nDeprecated Properties\nvar allowsCellularAccess: Bool\nA Boolean value that indicates whether the operation can send data over the cellular network.\nDeprecated\nvar container: CKContainer?\nThe operation’s container.\nDeprecated\nvar timeoutIntervalForRequest: TimeInterval\nThe timeout interval when waiting for additional data.\nDeprecated\nvar timeoutIntervalForResource: TimeInterval\nThe maximum amount of time that a resource request can use.\nDeprecated"
  },
  {
    "title": "fetchAllLongLivedOperationIDsWithCompletionHandler: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckcontainer/1399160-fetchalllonglivedoperationidswit",
    "html": "Parameters\ncompletionHandler\n\nThe block doesn’t return a value and takes the following parameters:\n\noutstandingOperationsByIDs\n\nThe IDs of all of the long-lived operations that are running.\n\nerror\n\nAn error if a problem occurs, or nil if CloudKit successfully retrieves the IDs.\n\nDiscussion\n\nA long-lived operation is one that continues to run after the user closes the app. When a long-lived operation completes, or your app or the system cancels it, it’s no longer active and CloudKit doesn’t include its ID in outstandingOperationsByIDs. An operation is complete when the system calls its completion handler.\n\nUse the fetchLongLivedOperationWithID:completionHandler: method to fetch the operation for a specific ID.\n\nSee Also\nFetching Long-Lived Operations\n- fetchLongLivedOperationWithID:completionHandler:\nFetches the long-lived operation for the specified operation ID."
  },
  {
    "title": "fetchLongLivedOperationWithID:completionHandler: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckcontainer/1399164-fetchlonglivedoperationwithid",
    "html": "Parameters\noperationID\n\nThe operation’s ID.\n\ncompletionHandler\n\nThe block doesn’t return a value and takes the following parameters:\n\noutstandingOperation\n\nThe long-lived operation. If the operation completes, or your app or the system cancels it, this parameter is nil.\n\nerror\n\nAn error if a problem occurs, or nil if CloudKit successfully retrieves the operation.\n\nDiscussion\n\nA long-lived operation is one that continues to run after the user closes your app. When a long-lived operation completes, the system calls its completion block to notify you.\n\nSee Also\nFetching Long-Lived Operations\n- fetchAllLongLivedOperationIDsWithCompletionHandler:\nFetches the IDs of any long-lived operations that are running."
  },
  {
    "title": "CKContainer.Application.Permissions | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckcontainer/application/permissions",
    "html": "See Also\nContainer Application Types\ntypealias CKContainer.Application.PermissionBlock\nA type that represents a handler that processes the outcome of a permission’s request.\nDeprecated\ntypealias CKContainer.Application.PermissionStatus\nA type that represents the status of a permission.\nDeprecated"
  },
  {
    "title": "CKContainer.Application.PermissionStatus | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckcontainer/application/permissionstatus",
    "html": "See Also\nContainer Application Types\ntypealias CKContainer.Application.Permissions\nA type that represents the permissions that a user grants.\nDeprecated\ntypealias CKContainer.Application.PermissionBlock\nA type that represents a handler that processes the outcome of a permission’s request.\nDeprecated"
  },
  {
    "title": "CKContainer.ApplicationPermissionStatus.initialState | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckcontainer/applicationpermissionstatus/initialstate",
    "html": "See Also\nPermission Statuses\ncase couldNotComplete\nAn error that occurs while processing the permission request.\nDeprecated\ncase denied\nThe user denies the permission.\nDeprecated\ncase granted\nThe user grants the permission.\nDeprecated"
  },
  {
    "title": "CKOperationGroup.TransferSize | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckoperationgroup/transfersize",
    "html": "Topics\nTransfer Sizes\ncase kilobytes\nA transfer size that represents 1 or more kilobytes.\ncase megabytes\nA transfer size that represents 1 or more megabytes.\ncase gigabytes\nA transfer size that represents 1 or more gigabytes.\ncase tensOfMegabytes\nA transfer size that represents tens of megabytes.\ncase tensOfGigabytes\nA transfer size that represents tens of gigabytes.\ncase hundredsOfMegabytes\nA transfer size that represents hundreds of megabytes.\ncase hundredsOfGigabytes\nA transfer size that represents hundreds of gigabytes.\ncase unknown\nAn unknown transfer size.\nRelationships\nConforms To\nSendable\nSee Also\nConfiguring an Operation Group\nvar defaultConfiguration: CKOperation.Configuration!\nThe default configuration for operations in the group.\nvar expectedReceiveSize: CKOperationGroup.TransferSize\nThe estimated size of traffic to download from CloudKit.\nvar expectedSendSize: CKOperationGroup.TransferSize\nThe estimated size of traffic to upload to CloudKit.\nvar name: String?\nThe operation group’s name.\nvar operationGroupID: String\nThe operation group’s unique identifier.\nvar quantity: Int\nThe number of operations in the operation group."
  },
  {
    "title": "group | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckoperation/2866228-group",
    "html": "See Also\nManaging the Operation's Configuration\nvar configuration: CKOperation.Configuration!\nThe operation’s configuration.\nclass CKOperation.Configuration\nAn object that describes how a CloudKit operation behaves.\nvar longLivedOperationWasPersistedBlock: (() -> Void)?\nThe closure to execute when the server begins to store callbacks for the long-lived operation."
  },
  {
    "title": "quantity | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckoperationgroup/2866220-quantity",
    "html": "Discussion\n\nThis property shows the number of operations that you expect to be in this operation group. It’s the developer’s responsibility to set this value.\n\nSee Also\nConfiguring an Operation Group\nvar defaultConfiguration: CKOperation.Configuration!\nThe default configuration for operations in the group.\nvar expectedReceiveSize: CKOperationGroup.TransferSize\nThe estimated size of traffic to download from CloudKit.\nvar expectedSendSize: CKOperationGroup.TransferSize\nThe estimated size of traffic to upload to CloudKit.\nvar name: String?\nThe operation group’s name.\nvar operationGroupID: String\nThe operation group’s unique identifier.\nenum CKOperationGroup.TransferSize\nConstants that represent possible data transfer sizes."
  },
  {
    "title": "CKSyncEngine.Event.fetchedRecordZoneChanges(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncengine/event/fetchedrecordzonechanges-qbl",
    "html": "See Also\nRemote record zone changes\ncase willFetchRecordZoneChanges(CKSyncEngine.Event.WillFetchRecordZoneChanges)\nAn event indicating an imminent fetch of changes in a record zone.\nstruct CKSyncEngine.Event.WillFetchRecordZoneChanges\nA type that provides information about an imminent fetch of changes in a record zone.\nstruct CKSyncEngine.Event.FetchedRecordZoneChanges\nA type that provides information about fetched record zone changes.\ncase didFetchRecordZoneChanges(CKSyncEngine.Event.DidFetchRecordZoneChanges)\nAn event that indicates the record zone fetch is done.\nstruct CKSyncEngine.Event.DidFetchRecordZoneChanges\nA type that provides information about a finished record zone fetch."
  },
  {
    "title": "init() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckoperationgroup/2866236-init",
    "html": "See Also\nCreating an Operation Group\ninit(coder: NSCoder)\nCreates an operation group from a serialized instance."
  },
  {
    "title": "CKSyncEngine.Event.fetchedDatabaseChanges(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncengine/event/fetcheddatabasechanges-qbk",
    "html": "See Also\nRemote database changes\ncase willFetchChanges(CKSyncEngine.Event.WillFetchChanges)\nAn event indicating an imminent database fetch.\nstruct CKSyncEngine.Event.WillFetchChanges\nA type that provides information about an imminent database fetch.\nstruct CKSyncEngine.Event.FetchedDatabaseChanges\nA type that provides information about fetched database changes.\ncase didFetchChanges(CKSyncEngine.Event.DidFetchChanges)\nAn event that indicates the database fetch is done.\nstruct CKSyncEngine.Event.DidFetchChanges\nA type that provides information about a finished database fetch."
  },
  {
    "title": "CKMarkNotificationsReadOperation | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckmarknotificationsreadoperation",
    "html": "Overview\n\nIf your app uses push notifications to track changes to records, you can use this operation object to note which push notifications don’t need reprocessing.\n\nIf you assign a completion block to the completionBlock property of the operation object, the system calls the completion block after the operation executes and returns its results to you. You can use a completion block to perform housekeeping tasks for the operation, but don’t use it to process the results of the operation. Any completion block you specify should handle the failure of the operation to complete its task, whether due to an error or an explicit cancellation.\n\nTopics\nCreating a Mark Notifications Read Operation\ninit(notificationIDsToMarkRead: [CKNotification.ID])\nCreates an operation that marks the specified notifications as read.\ninit()\nCreates an empty operation.\nConfiguring the Mark Notifications Read Operation\nvar notificationIDs: [CKNotification.ID]?\nThe array of notifications to mark as read.\nProcessing the Mark Notifications Read Results\nvar markNotificationsReadCompletionBlock: (([CKNotification.ID]?, Error?) -> Void)?\nThe block to execute when the operation finishes.\nRelationships\nInherits From\nCKOperation\nSee Also\nDeprecated classes\nclass CKDiscoverAllUserIdentitiesOperation\nAn operation that uses the device’s contacts to search for discoverable iCloud users.\nDeprecated\nclass CKDiscoverUserIdentitiesOperation\nAn operation that uses the provided criteria to search for discoverable iCloud users.\nDeprecated\nclass CKFetchRecordChangesOperation\nAn operation that reports on the changed and deleted records in the specified record zone.\nDeprecated\nclass CKFetchNotificationChangesOperation\nAn operation that retrieves unread notifications from a CloudKit container.\nDeprecated\nclass CKModifyBadgeOperation\nAn operation that sets the value of the app icon’s badge.\nDeprecated"
  },
  {
    "title": "CKContainer_Application_PermissionStatus | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckcontainer_application_permissionstatus",
    "html": "See Also\nDeprecated type aliases\ntypealias CKContainer_Application_PermissionBlock\nDeprecated\ntypealias CKContainer_Application_Permissions\nDeprecated\ntypealias CKRecord_Reference_Action\nDeprecated\ntypealias CKShare_Participant_AcceptanceStatus\nDeprecated\ntypealias CKShare_Participant_ParticipantType\nDeprecated\ntypealias CKShare_Participant_Permission\nDeprecated\ntypealias CKShare_Participant_Role\nDeprecated"
  },
  {
    "title": "localizedDescription | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckerror/2883252-localizeddescription",
    "html": "See Also\nGetting Error Information\nstatic var errorDomain: String\nThe error’s domain.\nvar errorCode: Int\nThe error’s code.\nvar errorUserInfo: [String : Any]\nThe dictionary that provides additional context about the error."
  },
  {
    "title": "==(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckerror/3726321",
    "html": "Parameters\nlhs\n\nAn error to compare.\n\nrhs\n\nAnother error to compare.\n\nSee Also\nComparing Errors\nstatic func != (CKError, CKError) -> Bool\nReturns a Boolean value that indicates whether two errors are unequal."
  },
  {
    "title": "CKContainer_Application_Permissions | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckcontainer_application_permissions",
    "html": "See Also\nDeprecated type aliases\ntypealias CKContainer_Application_PermissionBlock\nDeprecated\ntypealias CKContainer_Application_PermissionStatus\nDeprecated\ntypealias CKRecord_Reference_Action\nDeprecated\ntypealias CKShare_Participant_AcceptanceStatus\nDeprecated\ntypealias CKShare_Participant_ParticipantType\nDeprecated\ntypealias CKShare_Participant_Permission\nDeprecated\ntypealias CKShare_Participant_Role\nDeprecated"
  },
  {
    "title": "errorUserInfo | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckerror/2883254-erroruserinfo",
    "html": "See Also\nGetting Error Information\nstatic var errorDomain: String\nThe error’s domain.\nvar errorCode: Int\nThe error’s code.\nvar localizedDescription: String\nThe localized description of the error."
  },
  {
    "title": "CKShare_Participant_ParticipantType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckshare_participant_participanttype",
    "html": "See Also\nDeprecated type aliases\ntypealias CKContainer_Application_PermissionBlock\nDeprecated\ntypealias CKContainer_Application_PermissionStatus\nDeprecated\ntypealias CKContainer_Application_Permissions\nDeprecated\ntypealias CKRecord_Reference_Action\nDeprecated\ntypealias CKShare_Participant_AcceptanceStatus\nDeprecated\ntypealias CKShare_Participant_Permission\nDeprecated\ntypealias CKShare_Participant_Role\nDeprecated"
  },
  {
    "title": "creationDate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckrecord/1462223-creationdate",
    "html": "Discussion\n\nThe creation date reflects the time when CloudKit creates a record on the server with the current record’s ID. For new instances of this class, the value of this property is initially nil. When you save the record to the server, the value updates with the creation date for the record.\n\nSee Also\nAccessing the Record’s Metadata\nvar recordID: CKRecord.ID\nThe unique ID of the record.\nvar recordType: CKRecord.RecordType\nThe value that your app defines to identify the type of record.\nenum CKRecord.SystemType\nPossible values for record types of system records.\nvar creatorUserRecordID: CKRecord.ID?\nThe ID of the user who creates the record.\nvar modificationDate: Date?\nThe most recent time that CloudKit saved the record to the server.\nvar lastModifiedUserRecordID: CKRecord.ID?\nThe ID of the user who most recently modified the record.\nvar recordChangeTag: String?\nThe server change token for the record.\nclass CKRecord.ID\nAn object that uniquely identifies a record in a database."
  },
  {
    "title": "CKRecord.SystemType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckrecord/systemtype",
    "html": "Topics\nTypes of System Records\nstatic let share: CKRecord.RecordType\nA string that represents the record type for CloudKit share records.\nstatic let userRecord: CKRecord.RecordType\nA string that represents the record type for CloudKit user records.\nSee Also\nAccessing the Record’s Metadata\nvar recordID: CKRecord.ID\nThe unique ID of the record.\nvar recordType: CKRecord.RecordType\nThe value that your app defines to identify the type of record.\nvar creationDate: Date?\nThe time when CloudKit first saves the record to the server.\nvar creatorUserRecordID: CKRecord.ID?\nThe ID of the user who creates the record.\nvar modificationDate: Date?\nThe most recent time that CloudKit saved the record to the server.\nvar lastModifiedUserRecordID: CKRecord.ID?\nThe ID of the user who most recently modified the record.\nvar recordChangeTag: String?\nThe server change token for the record.\nclass CKRecord.ID\nAn object that uniquely identifies a record in a database."
  },
  {
    "title": "recordType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckrecord/3003387-recordtype",
    "html": "Discussion\n\nUse this value to differentiate between different record types in your app. The value is primarily for your benefit, so choose record types that represent the data in the corresponding records.\n\nCloudKit provides two system-defined record types:\n\nRecord Type\n\n\t\n\nDescription\n\n\n\n\nCKRecord_SystemType_userRecord\n\n\t\n\nIdentifies records that represent users.\n\n\n\n\nCKRecord_SystemType_share\n\n\t\n\nIdentifies records that the user shares.\n\nSee Also\nAccessing the Record’s Metadata\nvar recordID: CKRecord.ID\nThe unique ID of the record.\nenum CKRecord.SystemType\nPossible values for record types of system records.\nvar creationDate: Date?\nThe time when CloudKit first saves the record to the server.\nvar creatorUserRecordID: CKRecord.ID?\nThe ID of the user who creates the record.\nvar modificationDate: Date?\nThe most recent time that CloudKit saved the record to the server.\nvar lastModifiedUserRecordID: CKRecord.ID?\nThe ID of the user who most recently modified the record.\nvar recordChangeTag: String?\nThe server change token for the record.\nclass CKRecord.ID\nAn object that uniquely identifies a record in a database."
  },
  {
    "title": "recordID | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckrecord/1462229-recordid",
    "html": "Discussion\n\nThe system sets the ID of a new record at initialization time. If you use the init(recordType:recordID:) method to initialize the record, the ID derives from the CKRecord.ID object you provide. In all other cases, the record generates a UUID and bases its ID on that value. The ID of a record never changes during its lifetime.\n\nWhen you save a new record object to the server, the server validates the uniqueness of the record, but returns an error only if the save policy calls for it. Specifically, it returns an error when the save policy is CKModifyRecordsOperation.RecordSavePolicy.ifServerRecordUnchanged, which is the default. For all other save policies, the server overwrites the contents of the existing record.\n\nSee Also\nAccessing the Record’s Metadata\nvar recordType: CKRecord.RecordType\nThe value that your app defines to identify the type of record.\nenum CKRecord.SystemType\nPossible values for record types of system records.\nvar creationDate: Date?\nThe time when CloudKit first saves the record to the server.\nvar creatorUserRecordID: CKRecord.ID?\nThe ID of the user who creates the record.\nvar modificationDate: Date?\nThe most recent time that CloudKit saved the record to the server.\nvar lastModifiedUserRecordID: CKRecord.ID?\nThe ID of the user who most recently modified the record.\nvar recordChangeTag: String?\nThe server change token for the record.\nclass CKRecord.ID\nAn object that uniquely identifies a record in a database."
  },
  {
    "title": "CKRecord.Element | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckrecord/element",
    "html": "Relationships\nFrom Protocol\nSequence\nSee Also\nAccessing the Record’s Fields\nfunc object(forKey: CKRecord.FieldKey) -> (__CKRecordObjCValue)?\nReturns the object that the record stores for the specified key.\nsubscript(String) -> __CKRecordObjCValue?\nReturns the object that the record stores for the specified key.\nsubscript(CKRecord.FieldKey) -> (__CKRecordObjCValue)?\nReturns the object that the record stores for the specified key.\nfunc setObject((__CKRecordObjCValue)?, forKey: CKRecord.FieldKey)\nStores an object in the record using the specified key.\nfunc allKeys() -> [CKRecord.FieldKey]\nReturns an array of the record’s keys.\nfunc changedKeys() -> [CKRecord.FieldKey]\nReturns an array of keys with recent changes to their values.\nfunc makeIterator() -> CKRecordKeyValueIterator\nReturns an iterator of the record’s key-value pairs.\nstruct CKRecordKeyValueIterator\nAn iterator of the record’s key-value pairs.\nprotocol CKRecordValueProtocol\nA description of a CloudKit record value.\nprotocol CKRecordKeyValueSetting\nA protocol for managing the key-value pairs of a CloudKit record.\ntypealias CKRecordValue\nA data type for objects that CloudKit stores on the server.\ntypealias CKRecord.Iterator\nA data type that CloudKit uses to iterate over a record’s key-value pairs."
  },
  {
    "title": "CKRecord.Iterator | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckrecord/iterator",
    "html": "See Also\nAccessing the Record’s Fields\nfunc object(forKey: CKRecord.FieldKey) -> (__CKRecordObjCValue)?\nReturns the object that the record stores for the specified key.\nsubscript(String) -> __CKRecordObjCValue?\nReturns the object that the record stores for the specified key.\nsubscript(CKRecord.FieldKey) -> (__CKRecordObjCValue)?\nReturns the object that the record stores for the specified key.\nfunc setObject((__CKRecordObjCValue)?, forKey: CKRecord.FieldKey)\nStores an object in the record using the specified key.\nfunc allKeys() -> [CKRecord.FieldKey]\nReturns an array of the record’s keys.\nfunc changedKeys() -> [CKRecord.FieldKey]\nReturns an array of keys with recent changes to their values.\nfunc makeIterator() -> CKRecordKeyValueIterator\nReturns an iterator of the record’s key-value pairs.\nstruct CKRecordKeyValueIterator\nAn iterator of the record’s key-value pairs.\nprotocol CKRecordValueProtocol\nA description of a CloudKit record value.\nprotocol CKRecordKeyValueSetting\nA protocol for managing the key-value pairs of a CloudKit record.\ntypealias CKRecordValue\nA data type for objects that CloudKit stores on the server.\ntypealias CKRecord.Element\nA type that represents a single key-value pair from a record."
  },
  {
    "title": "CKRecordValue | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckrecordvalue",
    "html": "See Also\nAccessing the Record’s Fields\nfunc object(forKey: CKRecord.FieldKey) -> (__CKRecordObjCValue)?\nReturns the object that the record stores for the specified key.\nsubscript(String) -> __CKRecordObjCValue?\nReturns the object that the record stores for the specified key.\nsubscript(CKRecord.FieldKey) -> (__CKRecordObjCValue)?\nReturns the object that the record stores for the specified key.\nfunc setObject((__CKRecordObjCValue)?, forKey: CKRecord.FieldKey)\nStores an object in the record using the specified key.\nfunc allKeys() -> [CKRecord.FieldKey]\nReturns an array of the record’s keys.\nfunc changedKeys() -> [CKRecord.FieldKey]\nReturns an array of keys with recent changes to their values.\nfunc makeIterator() -> CKRecordKeyValueIterator\nReturns an iterator of the record’s key-value pairs.\nstruct CKRecordKeyValueIterator\nAn iterator of the record’s key-value pairs.\nprotocol CKRecordValueProtocol\nA description of a CloudKit record value.\nprotocol CKRecordKeyValueSetting\nA protocol for managing the key-value pairs of a CloudKit record.\ntypealias CKRecord.Iterator\nA data type that CloudKit uses to iterate over a record’s key-value pairs.\ntypealias CKRecord.Element\nA type that represents a single key-value pair from a record."
  },
  {
    "title": "changedKeys() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckrecord/3003382-changedkeys",
    "html": "Return Value\n\nAn array of keys with changed values since downloading or saving the record. If there aren’t any changed keys, this method returns an empty array.\n\nSee Also\nAccessing the Record’s Fields\nfunc object(forKey: CKRecord.FieldKey) -> (__CKRecordObjCValue)?\nReturns the object that the record stores for the specified key.\nsubscript(String) -> __CKRecordObjCValue?\nReturns the object that the record stores for the specified key.\nsubscript(CKRecord.FieldKey) -> (__CKRecordObjCValue)?\nReturns the object that the record stores for the specified key.\nfunc setObject((__CKRecordObjCValue)?, forKey: CKRecord.FieldKey)\nStores an object in the record using the specified key.\nfunc allKeys() -> [CKRecord.FieldKey]\nReturns an array of the record’s keys.\nfunc makeIterator() -> CKRecordKeyValueIterator\nReturns an iterator of the record’s key-value pairs.\nstruct CKRecordKeyValueIterator\nAn iterator of the record’s key-value pairs.\nprotocol CKRecordValueProtocol\nA description of a CloudKit record value.\nprotocol CKRecordKeyValueSetting\nA protocol for managing the key-value pairs of a CloudKit record.\ntypealias CKRecordValue\nA data type for objects that CloudKit stores on the server.\ntypealias CKRecord.Iterator\nA data type that CloudKit uses to iterate over a record’s key-value pairs.\ntypealias CKRecord.Element\nA type that represents a single key-value pair from a record."
  },
  {
    "title": "CKRecordKeyValueIterator | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckrecordkeyvalueiterator",
    "html": "Topics\nIterating Over a Record's Fields\ntypealias CKRecordKeyValueIterator.Element\nA data type that represents a single key-value pair from a record.\nfunc next() -> (CKRecord.FieldKey, CKRecordValueProtocol)?\nAdvances the iterator and returns the next key-value pair from the record.\nRelationships\nConforms To\nIteratorProtocol\nSee Also\nAccessing the Record’s Fields\nfunc object(forKey: CKRecord.FieldKey) -> (__CKRecordObjCValue)?\nReturns the object that the record stores for the specified key.\nsubscript(String) -> __CKRecordObjCValue?\nReturns the object that the record stores for the specified key.\nsubscript(CKRecord.FieldKey) -> (__CKRecordObjCValue)?\nReturns the object that the record stores for the specified key.\nfunc setObject((__CKRecordObjCValue)?, forKey: CKRecord.FieldKey)\nStores an object in the record using the specified key.\nfunc allKeys() -> [CKRecord.FieldKey]\nReturns an array of the record’s keys.\nfunc changedKeys() -> [CKRecord.FieldKey]\nReturns an array of keys with recent changes to their values.\nfunc makeIterator() -> CKRecordKeyValueIterator\nReturns an iterator of the record’s key-value pairs.\nprotocol CKRecordValueProtocol\nA description of a CloudKit record value.\nprotocol CKRecordKeyValueSetting\nA protocol for managing the key-value pairs of a CloudKit record.\ntypealias CKRecordValue\nA data type for objects that CloudKit stores on the server.\ntypealias CKRecord.Iterator\nA data type that CloudKit uses to iterate over a record’s key-value pairs.\ntypealias CKRecord.Element\nA type that represents a single key-value pair from a record."
  },
  {
    "title": "CKRecordKeyValueSetting | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckrecordkeyvaluesetting",
    "html": "Topics\nAccessing a Record's Fields\nfunc object(forKey: String) -> __CKRecordObjCValue?\nReturns the object that the record stores for the specified key.\n\nRequired\n\nsubscript(String) -> __CKRecordObjCValue?\nReturns the object that the record stores for the specified key.\n\nRequired Default implementations provided.\n\nfunc setObject(__CKRecordObjCValue?, forKey: String)\nStores an object in the record using the specified key.\n\nRequired\n\nfunc allKeys() -> [String]\nReturns an array of the record’s keys.\n\nRequired\n\nfunc changedKeys() -> [String]\nReturns an array of keys with recent changes to their values.\n\nRequired\n\nRelationships\nInherits From\nNSObjectProtocol\nConforming Types\nCKRecord\nSee Also\nAccessing the Record’s Fields\nfunc object(forKey: CKRecord.FieldKey) -> (__CKRecordObjCValue)?\nReturns the object that the record stores for the specified key.\nsubscript(String) -> __CKRecordObjCValue?\nReturns the object that the record stores for the specified key.\nsubscript(CKRecord.FieldKey) -> (__CKRecordObjCValue)?\nReturns the object that the record stores for the specified key.\nfunc setObject((__CKRecordObjCValue)?, forKey: CKRecord.FieldKey)\nStores an object in the record using the specified key.\nfunc allKeys() -> [CKRecord.FieldKey]\nReturns an array of the record’s keys.\nfunc changedKeys() -> [CKRecord.FieldKey]\nReturns an array of keys with recent changes to their values.\nfunc makeIterator() -> CKRecordKeyValueIterator\nReturns an iterator of the record’s key-value pairs.\nstruct CKRecordKeyValueIterator\nAn iterator of the record’s key-value pairs.\nprotocol CKRecordValueProtocol\nA description of a CloudKit record value.\ntypealias CKRecordValue\nA data type for objects that CloudKit stores on the server.\ntypealias CKRecord.Iterator\nA data type that CloudKit uses to iterate over a record’s key-value pairs.\ntypealias CKRecord.Element\nA type that represents a single key-value pair from a record."
  },
  {
    "title": "allKeys() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckrecord/3003381-allkeys",
    "html": "Return Value\n\nAn array of keys, or an empty array if the record doesn’t contain any keys.\n\nDiscussion\n\nThe array contains only those keys with values that aren’t nil.\n\nSee Also\nAccessing the Record’s Fields\nfunc object(forKey: CKRecord.FieldKey) -> (__CKRecordObjCValue)?\nReturns the object that the record stores for the specified key.\nsubscript(String) -> __CKRecordObjCValue?\nReturns the object that the record stores for the specified key.\nsubscript(CKRecord.FieldKey) -> (__CKRecordObjCValue)?\nReturns the object that the record stores for the specified key.\nfunc setObject((__CKRecordObjCValue)?, forKey: CKRecord.FieldKey)\nStores an object in the record using the specified key.\nfunc changedKeys() -> [CKRecord.FieldKey]\nReturns an array of keys with recent changes to their values.\nfunc makeIterator() -> CKRecordKeyValueIterator\nReturns an iterator of the record’s key-value pairs.\nstruct CKRecordKeyValueIterator\nAn iterator of the record’s key-value pairs.\nprotocol CKRecordValueProtocol\nA description of a CloudKit record value.\nprotocol CKRecordKeyValueSetting\nA protocol for managing the key-value pairs of a CloudKit record.\ntypealias CKRecordValue\nA data type for objects that CloudKit stores on the server.\ntypealias CKRecord.Iterator\nA data type that CloudKit uses to iterate over a record’s key-value pairs.\ntypealias CKRecord.Element\nA type that represents a single key-value pair from a record."
  },
  {
    "title": "makeIterator() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckrecord/3003385-makeiterator",
    "html": "Relationships\nFrom Protocol\nSequence\nSee Also\nAccessing the Record’s Fields\nfunc object(forKey: CKRecord.FieldKey) -> (__CKRecordObjCValue)?\nReturns the object that the record stores for the specified key.\nsubscript(String) -> __CKRecordObjCValue?\nReturns the object that the record stores for the specified key.\nsubscript(CKRecord.FieldKey) -> (__CKRecordObjCValue)?\nReturns the object that the record stores for the specified key.\nfunc setObject((__CKRecordObjCValue)?, forKey: CKRecord.FieldKey)\nStores an object in the record using the specified key.\nfunc allKeys() -> [CKRecord.FieldKey]\nReturns an array of the record’s keys.\nfunc changedKeys() -> [CKRecord.FieldKey]\nReturns an array of keys with recent changes to their values.\nstruct CKRecordKeyValueIterator\nAn iterator of the record’s key-value pairs.\nprotocol CKRecordValueProtocol\nA description of a CloudKit record value.\nprotocol CKRecordKeyValueSetting\nA protocol for managing the key-value pairs of a CloudKit record.\ntypealias CKRecordValue\nA data type for objects that CloudKit stores on the server.\ntypealias CKRecord.Iterator\nA data type that CloudKit uses to iterate over a record’s key-value pairs.\ntypealias CKRecord.Element\nA type that represents a single key-value pair from a record."
  },
  {
    "title": "setObject(_:forKey:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckrecord/3003388-setobject",
    "html": "Parameters\nobject\n\nThe object to store using the specified key. It must be one of the data types in Supported Data Types. You receive an error if you use a data type that CloudKit doesn’t support. If you specify nil, CloudKit removes any object that the record associates with the key.\n\nkey\n\nThe key to associate with object. Use this key to retrieve the value later. A key must consist of one or more alphanumeric characters and must start with a letter. CloudKit permits the use of underscores, but not spaces. Avoid using a key that matches the name of any property of CKRecord.\n\nDiscussion\n\nIf the specified key already exists in the record, CloudKit deletes its previous value and replaces it with the one in the object parameter. This change affects only the local copy of the record. You must save the record to the server again before the change becomes available to other clients.\n\nIf the type of the object parameter differs from the type of the object that’s on the server, you encounter an error when you attempt to save this record to the server. For example, if the current value is an NSString object, you receive an error if you change the value to an NSNumber object and save the record.\n\nYou access the fields of a CKRecord object the same way you access key-value pairs in a dictionary. The CKRecord class defines the object(forKey:) and setObject(_:forKey:) methods for getting and setting values. It also supports dictionary index notation. The following example shows how to use both techniques to set a firstName field and get a lastName field from a record:\n\n// Equivalent ways to set a value.\nlet record = CKRecord(recordType: \"Employee\")\nrecord.setObject(NSDate(), forKey: \"hiredAt\")\nrecord[\"hiredAt\"] = NSDate()\n\n\nSee Also\nAccessing the Record’s Fields\nfunc object(forKey: CKRecord.FieldKey) -> (__CKRecordObjCValue)?\nReturns the object that the record stores for the specified key.\nsubscript(String) -> __CKRecordObjCValue?\nReturns the object that the record stores for the specified key.\nsubscript(CKRecord.FieldKey) -> (__CKRecordObjCValue)?\nReturns the object that the record stores for the specified key.\nfunc allKeys() -> [CKRecord.FieldKey]\nReturns an array of the record’s keys.\nfunc changedKeys() -> [CKRecord.FieldKey]\nReturns an array of keys with recent changes to their values.\nfunc makeIterator() -> CKRecordKeyValueIterator\nReturns an iterator of the record’s key-value pairs.\nstruct CKRecordKeyValueIterator\nAn iterator of the record’s key-value pairs.\nprotocol CKRecordValueProtocol\nA description of a CloudKit record value.\nprotocol CKRecordKeyValueSetting\nA protocol for managing the key-value pairs of a CloudKit record.\ntypealias CKRecordValue\nA data type for objects that CloudKit stores on the server.\ntypealias CKRecord.Iterator\nA data type that CloudKit uses to iterate over a record’s key-value pairs.\ntypealias CKRecord.Element\nA type that represents a single key-value pair from a record."
  },
  {
    "title": "object(forKey:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckrecord/3003386-object",
    "html": "Parameters\nkey\n\nThe string that identifies a field in the record. A key must consist of one or more alphanumeric characters and must start with a letter. CloudKit permits the use of underscores, but not spaces.\n\nReturn Value\n\nThe object for the specified key, or nil if no such key exists in the record.\n\nDiscussion\n\nNew records don’t contain any keys or values. Values are always one of the data types in Supported Data Types.\n\nYou access the fields of a CKRecord object the same way you access key-value pairs in a dictionary. The CKRecord class defines the object(forKey:) and setObject(_:forKey:) methods for getting and setting values. It also supports dictionary index notation. The following example shows how to use both techniques to set a firstName field and retrieve a lastName field from a record:\n\n// Equivalent ways to get a value.\nvar hiredAt = record.object(forKey: \"hiredAt\")\nhiredAt = record[\"hiredAt\"]\n\n\nSee Also\nAccessing the Record’s Fields\nsubscript(String) -> __CKRecordObjCValue?\nReturns the object that the record stores for the specified key.\nsubscript(CKRecord.FieldKey) -> (__CKRecordObjCValue)?\nReturns the object that the record stores for the specified key.\nfunc setObject((__CKRecordObjCValue)?, forKey: CKRecord.FieldKey)\nStores an object in the record using the specified key.\nfunc allKeys() -> [CKRecord.FieldKey]\nReturns an array of the record’s keys.\nfunc changedKeys() -> [CKRecord.FieldKey]\nReturns an array of keys with recent changes to their values.\nfunc makeIterator() -> CKRecordKeyValueIterator\nReturns an iterator of the record’s key-value pairs.\nstruct CKRecordKeyValueIterator\nAn iterator of the record’s key-value pairs.\nprotocol CKRecordValueProtocol\nA description of a CloudKit record value.\nprotocol CKRecordKeyValueSetting\nA protocol for managing the key-value pairs of a CloudKit record.\ntypealias CKRecordValue\nA data type for objects that CloudKit stores on the server.\ntypealias CKRecord.Iterator\nA data type that CloudKit uses to iterate over a record’s key-value pairs.\ntypealias CKRecord.Element\nA type that represents a single key-value pair from a record."
  },
  {
    "title": "subscript(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckrecord/1462210-subscript",
    "html": "Parameters\nkey\n\nThe string that identifies a field in the record. A key must consist of one or more alphanumeric characters and must start with a letter. CloudKit permits the use of underscores, but not spaces.\n\nReturn Value\n\nThe object for the specified key, or nil if no such key exists in the record.\n\nDiscussion\n\nImportant\n\nDon’t call this method directly. The presence of this method is necessary to support subscripting syntax for record objects.\n\nSee Also\nAccessing the Record’s Fields\nfunc object(forKey: CKRecord.FieldKey) -> (__CKRecordObjCValue)?\nReturns the object that the record stores for the specified key.\nsubscript(CKRecord.FieldKey) -> (__CKRecordObjCValue)?\nReturns the object that the record stores for the specified key.\nfunc setObject((__CKRecordObjCValue)?, forKey: CKRecord.FieldKey)\nStores an object in the record using the specified key.\nfunc allKeys() -> [CKRecord.FieldKey]\nReturns an array of the record’s keys.\nfunc changedKeys() -> [CKRecord.FieldKey]\nReturns an array of keys with recent changes to their values.\nfunc makeIterator() -> CKRecordKeyValueIterator\nReturns an iterator of the record’s key-value pairs.\nstruct CKRecordKeyValueIterator\nAn iterator of the record’s key-value pairs.\nprotocol CKRecordValueProtocol\nA description of a CloudKit record value.\nprotocol CKRecordKeyValueSetting\nA protocol for managing the key-value pairs of a CloudKit record.\ntypealias CKRecordValue\nA data type for objects that CloudKit stores on the server.\ntypealias CKRecord.Iterator\nA data type that CloudKit uses to iterate over a record’s key-value pairs.\ntypealias CKRecord.Element\nA type that represents a single key-value pair from a record."
  },
  {
    "title": "init(recordType:zoneID:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckrecord/3003384-init",
    "html": "Deprecated\n\nUse init(recordType:recordID:) instead.\n\nParameters\nrecordType\n\nA string that represents the type of record that you want to create. You can’t change the record type after initialization. You define the record types that your app supports and use them to distinguish between records with different types of data. This parameter must not be nil or contain an empty string.\n\nA record type must consist of one or more alphanumeric characters and must start with a letter. CloudKit permits the use of underscores, but not spaces.\n\nzoneID\n\nThe ID of the record zone where you want to store the record.\n\nDiscussion\n\nUse this method to initialize a new record object with the specified ID. The newly created record contains no data.\n\nUpon creation, record objects exist only in memory on the local device. Save the record using a CKModifyRecordsOperation object or by using the save(_:completionHandler:) method to transfer the record’s contents to the server.\n\nSee Also\nCreating a Record\ninit(recordType: CKRecord.RecordType, recordID: CKRecord.ID)\nCreates a record using an ID that you provide.\ntypealias CKRecord.RecordType\nThe data type that CloudKit requires for record types.\ntypealias CKRecord.FieldKey\nThe data type that CloudKit requires for record field names."
  },
  {
    "title": "init(recordType:recordID:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckrecord/3003383-init",
    "html": "Parameters\nrecordType\n\nA string that represents the type of record that you want to create. You can’t change the record type after initialization. You define the record types that your app supports and use them to distinguish between records with different types of data. This parameter must not be nil or contain an empty string.\n\nA record type must consist of one or more alphanumeric characters and must start with a letter. CloudKit permits the use of underscores, but not spaces.\n\nrecordID\n\nThe ID to assign to the record. When creating the ID, you can specify the zone where you want to store the record. The ID must be unique across all records and can’t be nil.\n\nDiscussion\n\nUse this method to initialize a new record object with the specified ID. The newly created record contains no data.\n\nUpon creation, record objects exist only in memory on the local device. Save the record using a CKModifyRecordsOperation object or by using the save(_:completionHandler:) method to transfer the record’s contents to the server.\n\nSee Also\nCreating a Record\ntypealias CKRecord.RecordType\nThe data type that CloudKit requires for record types.\ntypealias CKRecord.FieldKey\nThe data type that CloudKit requires for record field names.\ninit(recordType: CKRecord.RecordType, zoneID: CKRecordZone.ID)\nCreates a record in the specified zone.\nDeprecated"
  },
  {
    "title": "CKRecord.FieldKey | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckrecord/fieldkey",
    "html": "See Also\nCreating a Record\ninit(recordType: CKRecord.RecordType, recordID: CKRecord.ID)\nCreates a record using an ID that you provide.\ntypealias CKRecord.RecordType\nThe data type that CloudKit requires for record types.\ninit(recordType: CKRecord.RecordType, zoneID: CKRecordZone.ID)\nCreates a record in the specified zone.\nDeprecated"
  },
  {
    "title": "isAtomic | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckmodifyrecordsoperation/1447484-isatomic",
    "html": "Discussion\n\nModifying records atomically prevents you from updating your data in a way that would leave it in an inconsistent state. You use atomic updates when you want to write multiple records to the same record zone. If there’s a failure to modify any of the records in a zone, CloudKit doesn’t change the other records in that same zone. The record zone must have the atomic capability for this behavior to apply. If a record zone doesn’t support the atomic capability, setting this property has no effect.\n\nThe default value of this property is true, which causes all modifications within a single record zone to occur atomically. If your operation contains records in multiple record zones, a failure in one zone doesn’t prevent modifications to records in a different zone. Changing the value of this property to false causes CloudKit to modify records individually, regardless of whether the record zone supports atomic modifications.\n\nSee Also\nConfiguring the Modify Record Operation\nvar recordsToSave: [CKRecord]?\nThe records to save to the database.\nvar recordIDsToDelete: [CKRecord.ID]?\nThe IDs of the records to delete permanently from the database.\nvar clientChangeTokenData: Data?\nA token that tracks local changes to records.\nvar savePolicy: CKModifyRecordsOperation.RecordSavePolicy\nThe policy to use when saving changes to records.\nenum CKModifyRecordsOperation.RecordSavePolicy\nConstants that indicate which policy to apply when saving records."
  },
  {
    "title": "recordsToSave | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckmodifyrecordsoperation/1447482-recordstosave",
    "html": "Discussion\n\nThe initial value of the property is the array that you provide to the init(recordsToSave:recordIDsToDelete:) method. You can modify this array as necessary before you execute the operation. The records must all target the same database, but can belong to different record zones.\n\nIf you intend to change the value of this property, do so before you execute the operation or submit the operation to a queue.\n\nSee Also\nConfiguring the Modify Record Operation\nvar recordIDsToDelete: [CKRecord.ID]?\nThe IDs of the records to delete permanently from the database.\nvar clientChangeTokenData: Data?\nA token that tracks local changes to records.\nvar isAtomic: Bool\nA Boolean value that indicates whether the entire operation fails when CloudKit can’t update one or more records in a record zone.\nvar savePolicy: CKModifyRecordsOperation.RecordSavePolicy\nThe policy to use when saving changes to records.\nenum CKModifyRecordsOperation.RecordSavePolicy\nConstants that indicate which policy to apply when saving records."
  },
  {
    "title": "init() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckmodifyrecordsoperation/1447466-init",
    "html": "Discussion\n\nYou must set at least one of the recordsToSave or recordIDsToDelete properties before you execute the operation.\n\nSee Also\nCreating a Modify Record Operation\ninit(recordsToSave: [CKRecord]?, recordIDsToDelete: [CKRecord.ID]?)\nCreates an operation for modifying the specified records."
  },
  {
    "title": "CKSyncEngine.Event.StateUpdate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncengine/event/stateupdate",
    "html": "Topics\nAccessing the state\nlet stateSerialization: CKSyncEngine.State.Serialization\nThe current state of the sync engine.\nDebugging the event\nvar description: String\nA textual description of the event that’s suitable for logging.\nRelationships\nConforms To\nCustomStringConvertible\nSendable\nSee Also\nState updates\ncase stateUpdate(CKSyncEngine.Event.StateUpdate)\nAn event indicating an update to the sync engine’s state."
  },
  {
    "title": "CKSyncEngine.SendChangesOptions | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncengine/sendchangesoptions",
    "html": "Topics\nManaging attributes\nvar description: String\nA textual description of the options that’s suitable for logging.\nvar operationGroup: CKOperationGroup\nThe operation group to use for the underlying CloudKit operations.\nDebugging options\nvar description: String\nA textual description of the options that’s suitable for logging.\nInitializers\ninit(scope: CKSyncEngine.SendChangesOptions.Scope, operationGroup: CKOperationGroup?)\nInstance Properties\nvar scope: CKSyncEngine.SendChangesOptions.Scope\nEnumerations\nenum CKSyncEngine.SendChangesOptions.Scope\nRelationships\nConforms To\nCustomStringConvertible\nSendable\nSee Also\nInvoking manual sync operations\nfunc fetchChanges(CKSyncEngine.FetchChangesOptions)\nFetches pending remote changes from the server.\nstruct CKSyncEngine.FetchChangesOptions\nA set of options to use with a fetch operation.\nfunc sendChanges(CKSyncEngine.SendChangesOptions)\nSends pending local changes to the server."
  },
  {
    "title": "handleEvent(_:syncEngine:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncenginedelegate/4155834-handleevent",
    "html": "Required\n\nParameters\nevent\n\nInformation about the event. An event may occur for a number of reasons, such as when new data is available or when the device’s iCloud account changes. For more information, see CKSyncEngine.Event.\n\nsyncEngine\n\nThe sync engine that generates the event.\n\nDiscussion\n\nImportant\n\nOn receipt of a CKSyncEngine.Event.stateUpdate(_:) event, you must persist the attached state to disk alongside your app data. The sync engine requires you to provide it with the most recent serialized state at initialization, and it’s your responsibility to make sure this is available across app launches.\n\nThe sync engines provides events serially; your delegate won’t receive the subsequent event until it finishes processing the current one and returns from this method.\n\nSee Also\nHandling sync events\nenum CKSyncEngine.Event\nDescribes an event that occurs during a sync operation.\nenum CKSyncEngineEventType\nDescribes an event that occurs during a sync operation."
  },
  {
    "title": "recordZoneIDs | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckfetchrecordzonesoperation/1515084-recordzoneids",
    "html": "Discussion\n\nUse this property to view or change the IDs of the record zones you want to retrieve. If you intend to change the value of this property, do so before you execute the operation or submit the operation to a queue.\n\nIf you use the operation that fetchAllRecordZonesOperation() returns, CloudKit ignores the contents of this property and sets its value to nil."
  },
  {
    "title": "init() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckfetchrecordzonesoperation/1515256-init",
    "html": "Discussion\n\nYou must set the recordZoneIDs property before you execute the operation.\n\nAfter creating the operation, assign a value to the fetchRecordZonesCompletionBlock property so you can process the results.\n\nSee Also\nInitializing the Zone Fetch Operation\ninit(recordZoneIDs: [CKRecordZone.ID])\nCreates an operation for fetching the specified record zones."
  },
  {
    "title": "CKSyncEngine.FetchChangesContext | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncengine/fetchchangescontext",
    "html": "Topics\nInstance Properties\nvar description: String\nBeta\nlet options: CKSyncEngine.FetchChangesOptions\nlet reason: CKSyncEngine.SyncReason\nRelationships\nConforms To\nCustomStringConvertible\nSendable"
  },
  {
    "title": "description | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncengine/4165739-description",
    "html": "Relationships\nFrom Protocol\nCustomStringConvertible"
  },
  {
    "title": "fetchAllRecordZonesOperation() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckfetchrecordzonesoperation/1514890-fetchallrecordzonesoperation",
    "html": "Discussion\n\nAssign a value to the fetchRecordZonesCompletionBlock property of the operation that this method returns so that you can process the results."
  },
  {
    "title": "cancelOperations() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncengine/4155826-canceloperations",
    "html": "Discussion\n\nThe sync engine processes cancelation requests asynchronously, meaning it’s possible for in-progress operations to complete even after this method returns."
  },
  {
    "title": "CKSyncEngine.Configuration | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncengine/configuration",
    "html": "Topics\nCreating configurations\ninit(database: CKDatabase, stateSerialization: CKSyncEngine.State.Serialization?, delegate: CKSyncEngineDelegate)\nCreates a configuration for the specified database and serialized state.\nHandling record changes\nvar delegate: CKSyncEngineDelegate\nThe object that provides the records to sync and handles any related events.\nprotocol CKSyncEngineDelegate\nAn interface for providing record data to a sync engine and customizing that engine’s behavior.\nManaging attributes\nvar automaticallySync: Bool\nA Boolean value that determines whether the engine syncs automatically.\nvar database: CKDatabase\nThe associated database.\nvar subscriptionID: CKSubscription.ID?\nThe subscription identifier for the associated database.\nvar stateSerialization: CKSyncEngine.State.Serialization?\nThe sync engine’s serialized state.\nDebugging the configuration\nvar description: String\nA textual description of the configuration that’s suitable for logging.\nRelationships\nConforms To\nCustomStringConvertible\nSendable\nSee Also\nCreating a sync engine\ninit(CKSyncEngine.Configuration)\nCreates a sync engine with the specified configuration."
  },
  {
    "title": "state | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncengine/4155832-state",
    "html": "See Also\nAccessing the engine’s attributes\nlet database: CKDatabase\nThe associated database.\nclass CKSyncEngine.State\nAn object that manages the sync engine’s state."
  },
  {
    "title": "database | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncengine/4155827-database",
    "html": "See Also\nAccessing the engine’s attributes\nlet state: CKSyncEngine.State\nThe sync engine’s state.\nclass CKSyncEngine.State\nAn object that manages the sync engine’s state."
  },
  {
    "title": "predicate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckquery/1413112-predicate",
    "html": "Discussion\n\nA predicate contains one or more expressions that evaluate to true or false. Expressions are often value-based comparisons, but predicates support other types of operators, including string comparisons and aggregate operations. For guidelines on how to construct predicates for your queries, see Predicate Rules for Query Objects.\n\nSee Also\nAccessing the Query Parameters\nvar recordType: CKRecord.RecordType\nThe record type to search.\nvar sortDescriptors: [NSSortDescriptor]?\nThe sort descriptors for organizing the query’s results."
  },
  {
    "title": "sortDescriptors | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckquery/1413121-sortdescriptors",
    "html": "Discussion\n\nYou can add sort descriptors to a query and change them later as necessary. Each sort descriptor contains a field name of the intended record type and information about whether to sort values in that field in ascending or descending order. The default value of this property is nil, which means that records return in an indeterminate order.\n\nThe order of the items in the array defines the order that CloudKit applies the sort descriptors to the results. In other words, CloudKit applies the first sort descriptor in the array, then the second sort descriptor, if necessary, then the third, and so on.\n\nSee Also\nAccessing the Query Parameters\nvar recordType: CKRecord.RecordType\nThe record type to search.\nvar predicate: NSPredicate\nThe predicate to use for matching records."
  },
  {
    "title": "assetNotAvailable | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckerror/2946936-assetnotavailable",
    "html": "See Also\nGetting Error Codes\nstatic var accountTemporarilyUnavailable: CKError.Code\nAn error that occurs when the user’s iCloud account is temporarily unavailable.\nstatic var alreadyShared: CKError.Code\nAn error that occurs when CloudKit attempts to share a record with an existing share.\nstatic var assetFileModified: CKError.Code\nAn error that occurs when the system modifies an asset while saving it.\nstatic var assetFileNotFound: CKError.Code\nAn error that occurs when the system can’t find the specified asset.\nstatic var badContainer: CKError.Code\nAn error that occurs when you use an unknown or unauthorized container.\nstatic var badDatabase: CKError.Code\nAn error that occurs when the operation can’t complete for the specified database.\nstatic var batchRequestFailed: CKError.Code\nAn error that occurs when the system rejects the entire batch of changes.\nstatic var changeTokenExpired: CKError.Code\nAn error that occurs when the change token expires.\nstatic var constraintViolation: CKError.Code\nAn error that occurs when the server rejects the request because of a unique constraint violation.\nstatic var incompatibleVersion: CKError.Code\nAn error that occurs when the current app version is older than the oldest allowed version.\nstatic var internalError: CKError.Code\nA nonrecoverable error that CloudKit encounters.\nstatic var invalidArguments: CKError.Code\nAn error that occurs when the request contains invalid information.\nstatic var limitExceeded: CKError.Code\nAn error that occurs when a request’s size exceeds the limit.\nstatic var managedAccountRestricted: CKError.Code\nAn error that occurs when CloudKit rejects a request due to a managed-account restriction.\nstatic var missingEntitlement: CKError.Code\nAn error that occurs when the app is missing a required entitlement.\nstatic var networkFailure: CKError.Code\nAn error that occurs when a network is available, but CloudKit is inaccessible.\nstatic var networkUnavailable: CKError.Code\nAn error that occurs when the network is unavailable.\nstatic var notAuthenticated: CKError.Code\nAn error that occurs when the user is unauthenticated.\nstatic var operationCancelled: CKError.Code\nAn error that occurs when an operation cancels.\nstatic var partialFailure: CKError.Code\nAn error that occurs when an operation completes with partial failures.\nstatic var participantMayNeedVerification: CKError.Code\nAn error that occurs when the user isn’t a participant of the share.\nstatic var permissionFailure: CKError.Code\nAn error that occurs when the user doesn’t have permission to save or fetch data.\nstatic var quotaExceeded: CKError.Code\nAn error that occurs when saving a record exceeds the user’s storage quota.\nstatic var referenceViolation: CKError.Code\nAn error that occurs when CloudKit can’t find the target of a reference.\nstatic var requestRateLimited: CKError.Code\nAn error that occurs when CloudKit rate-limits requests.\nstatic var serverRecordChanged: CKError.Code\nAn error that occurs when CloudKit rejects a record because the server’s version is different.\nstatic var serverRejectedRequest: CKError.Code\nAn error that occurs when CloudKit rejects the request.\nstatic var serverResponseLost: CKError.Code\nAn error that occurs when CloudKit is unable to maintain the network connection and provide a response.\nstatic var serviceUnavailable: CKError.Code\nAn error that occurs when CloudKit is unavailable.\nstatic var tooManyParticipants: CKError.Code\nAn error that occurs when a share has too many participants.\nstatic var unknownItem: CKError.Code\nAn error that occurs when the specified record doesn’t exist.\nstatic var userDeletedZone: CKError.Code\nAn error that occurs when the user deletes a record zone using the Settings app.\nstatic var zoneBusy: CKError.Code\nAn error that occurs when the server is too busy to handle the record zone operation.\nstatic var zoneNotFound: CKError.Code\nAn error that occurs when the specified record zone doesn’t exist.\nstatic var resultsTruncated: CKError.Code\nAn error that occurs when CloudKit truncates a query’s results.\nDeprecated\nenum CKError.Code\nThe error codes that CloudKit returns."
  },
  {
    "title": "badDatabase | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckerror/2325199-baddatabase",
    "html": "Discussion\n\nThe system submitted the operation to the wrong database. Make sure you aren’t submitting a share operation to the public database, or a record zone create operation to the shared database.\n\nSee Also\nGetting Error Codes\nstatic var accountTemporarilyUnavailable: CKError.Code\nAn error that occurs when the user’s iCloud account is temporarily unavailable.\nstatic var alreadyShared: CKError.Code\nAn error that occurs when CloudKit attempts to share a record with an existing share.\nstatic var assetFileModified: CKError.Code\nAn error that occurs when the system modifies an asset while saving it.\nstatic var assetFileNotFound: CKError.Code\nAn error that occurs when the system can’t find the specified asset.\nstatic var assetNotAvailable: CKError.Code\nAn error that occurs when the system can’t access the specified asset.\nstatic var badContainer: CKError.Code\nAn error that occurs when you use an unknown or unauthorized container.\nstatic var batchRequestFailed: CKError.Code\nAn error that occurs when the system rejects the entire batch of changes.\nstatic var changeTokenExpired: CKError.Code\nAn error that occurs when the change token expires.\nstatic var constraintViolation: CKError.Code\nAn error that occurs when the server rejects the request because of a unique constraint violation.\nstatic var incompatibleVersion: CKError.Code\nAn error that occurs when the current app version is older than the oldest allowed version.\nstatic var internalError: CKError.Code\nA nonrecoverable error that CloudKit encounters.\nstatic var invalidArguments: CKError.Code\nAn error that occurs when the request contains invalid information.\nstatic var limitExceeded: CKError.Code\nAn error that occurs when a request’s size exceeds the limit.\nstatic var managedAccountRestricted: CKError.Code\nAn error that occurs when CloudKit rejects a request due to a managed-account restriction.\nstatic var missingEntitlement: CKError.Code\nAn error that occurs when the app is missing a required entitlement.\nstatic var networkFailure: CKError.Code\nAn error that occurs when a network is available, but CloudKit is inaccessible.\nstatic var networkUnavailable: CKError.Code\nAn error that occurs when the network is unavailable.\nstatic var notAuthenticated: CKError.Code\nAn error that occurs when the user is unauthenticated.\nstatic var operationCancelled: CKError.Code\nAn error that occurs when an operation cancels.\nstatic var partialFailure: CKError.Code\nAn error that occurs when an operation completes with partial failures.\nstatic var participantMayNeedVerification: CKError.Code\nAn error that occurs when the user isn’t a participant of the share.\nstatic var permissionFailure: CKError.Code\nAn error that occurs when the user doesn’t have permission to save or fetch data.\nstatic var quotaExceeded: CKError.Code\nAn error that occurs when saving a record exceeds the user’s storage quota.\nstatic var referenceViolation: CKError.Code\nAn error that occurs when CloudKit can’t find the target of a reference.\nstatic var requestRateLimited: CKError.Code\nAn error that occurs when CloudKit rate-limits requests.\nstatic var serverRecordChanged: CKError.Code\nAn error that occurs when CloudKit rejects a record because the server’s version is different.\nstatic var serverRejectedRequest: CKError.Code\nAn error that occurs when CloudKit rejects the request.\nstatic var serverResponseLost: CKError.Code\nAn error that occurs when CloudKit is unable to maintain the network connection and provide a response.\nstatic var serviceUnavailable: CKError.Code\nAn error that occurs when CloudKit is unavailable.\nstatic var tooManyParticipants: CKError.Code\nAn error that occurs when a share has too many participants.\nstatic var unknownItem: CKError.Code\nAn error that occurs when the specified record doesn’t exist.\nstatic var userDeletedZone: CKError.Code\nAn error that occurs when the user deletes a record zone using the Settings app.\nstatic var zoneBusy: CKError.Code\nAn error that occurs when the server is too busy to handle the record zone operation.\nstatic var zoneNotFound: CKError.Code\nAn error that occurs when the specified record zone doesn’t exist.\nstatic var resultsTruncated: CKError.Code\nAn error that occurs when CloudKit truncates a query’s results.\nDeprecated\nenum CKError.Code\nThe error codes that CloudKit returns."
  },
  {
    "title": "creatorUserRecordID | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckrecord/1462208-creatoruserrecordid",
    "html": "Discussion\n\nUse this property’s value to retrieve the user record for the user who creates this record. Every user of the app has a unique user record that is empty by default. Apps can add data to the user record on behalf of the user, but don’t store sensitive data in it.\n\nSee Also\nAccessing the Record’s Metadata\nvar recordID: CKRecord.ID\nThe unique ID of the record.\nvar recordType: CKRecord.RecordType\nThe value that your app defines to identify the type of record.\nenum CKRecord.SystemType\nPossible values for record types of system records.\nvar creationDate: Date?\nThe time when CloudKit first saves the record to the server.\nvar modificationDate: Date?\nThe most recent time that CloudKit saved the record to the server.\nvar lastModifiedUserRecordID: CKRecord.ID?\nThe ID of the user who most recently modified the record.\nvar recordChangeTag: String?\nThe server change token for the record.\nclass CKRecord.ID\nAn object that uniquely identifies a record in a database."
  },
  {
    "title": "modificationDate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckrecord/1462227-modificationdate",
    "html": "Discussion\n\nThe modification date reflects the most recent time that CloudKit saved a record with the current record’s ID to the server. For new instances of this class, the value of this property is initially nil. When you save the record to the server, the value updates with the modification date for the record.\n\nSee Also\nAccessing the Record’s Metadata\nvar recordID: CKRecord.ID\nThe unique ID of the record.\nvar recordType: CKRecord.RecordType\nThe value that your app defines to identify the type of record.\nenum CKRecord.SystemType\nPossible values for record types of system records.\nvar creationDate: Date?\nThe time when CloudKit first saves the record to the server.\nvar creatorUserRecordID: CKRecord.ID?\nThe ID of the user who creates the record.\nvar lastModifiedUserRecordID: CKRecord.ID?\nThe ID of the user who most recently modified the record.\nvar recordChangeTag: String?\nThe server change token for the record.\nclass CKRecord.ID\nAn object that uniquely identifies a record in a database."
  },
  {
    "title": "recordChangeTag | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckrecord/1462195-recordchangetag",
    "html": "Discussion\n\nWhen you fetch a record from the server, you get the current version of that record as it exists on the server. However, at any time after you fetch a record, other users might save a newer version of it to the server. Every time CloudKit saves a record, the server updates the record’s change token to a new value. When you save your copy of the record, the server compares your record’s token with the token on the server. If the two tokens match, the server interprets that you modified the latest version of the record and that it can apply your changes immediately. If the two tokens don’t match, the server checks your app’s save policy to determine how to proceed.\n\nIn your own code, you can use change tokens to distinguish between two different versions of the same record.\n\nNote\n\nIn some situations, setting a record as the parent of another record can cause the recordChangeTag to update on the parent record. This usually occurs when you save the child record.\n\nSee Also\nAccessing the Record’s Metadata\nvar recordID: CKRecord.ID\nThe unique ID of the record.\nvar recordType: CKRecord.RecordType\nThe value that your app defines to identify the type of record.\nenum CKRecord.SystemType\nPossible values for record types of system records.\nvar creationDate: Date?\nThe time when CloudKit first saves the record to the server.\nvar creatorUserRecordID: CKRecord.ID?\nThe ID of the user who creates the record.\nvar modificationDate: Date?\nThe most recent time that CloudKit saved the record to the server.\nvar lastModifiedUserRecordID: CKRecord.ID?\nThe ID of the user who most recently modified the record.\nclass CKRecord.ID\nAn object that uniquely identifies a record in a database."
  },
  {
    "title": "serverRejectedRequest | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckerror/2325219-serverrejectedrequest",
    "html": "Discussion\n\nThis error is nonrecoverable.\n\nSee Also\nGetting Error Codes\nstatic var accountTemporarilyUnavailable: CKError.Code\nAn error that occurs when the user’s iCloud account is temporarily unavailable.\nstatic var alreadyShared: CKError.Code\nAn error that occurs when CloudKit attempts to share a record with an existing share.\nstatic var assetFileModified: CKError.Code\nAn error that occurs when the system modifies an asset while saving it.\nstatic var assetFileNotFound: CKError.Code\nAn error that occurs when the system can’t find the specified asset.\nstatic var assetNotAvailable: CKError.Code\nAn error that occurs when the system can’t access the specified asset.\nstatic var badContainer: CKError.Code\nAn error that occurs when you use an unknown or unauthorized container.\nstatic var badDatabase: CKError.Code\nAn error that occurs when the operation can’t complete for the specified database.\nstatic var batchRequestFailed: CKError.Code\nAn error that occurs when the system rejects the entire batch of changes.\nstatic var changeTokenExpired: CKError.Code\nAn error that occurs when the change token expires.\nstatic var constraintViolation: CKError.Code\nAn error that occurs when the server rejects the request because of a unique constraint violation.\nstatic var incompatibleVersion: CKError.Code\nAn error that occurs when the current app version is older than the oldest allowed version.\nstatic var internalError: CKError.Code\nA nonrecoverable error that CloudKit encounters.\nstatic var invalidArguments: CKError.Code\nAn error that occurs when the request contains invalid information.\nstatic var limitExceeded: CKError.Code\nAn error that occurs when a request’s size exceeds the limit.\nstatic var managedAccountRestricted: CKError.Code\nAn error that occurs when CloudKit rejects a request due to a managed-account restriction.\nstatic var missingEntitlement: CKError.Code\nAn error that occurs when the app is missing a required entitlement.\nstatic var networkFailure: CKError.Code\nAn error that occurs when a network is available, but CloudKit is inaccessible.\nstatic var networkUnavailable: CKError.Code\nAn error that occurs when the network is unavailable.\nstatic var notAuthenticated: CKError.Code\nAn error that occurs when the user is unauthenticated.\nstatic var operationCancelled: CKError.Code\nAn error that occurs when an operation cancels.\nstatic var partialFailure: CKError.Code\nAn error that occurs when an operation completes with partial failures.\nstatic var participantMayNeedVerification: CKError.Code\nAn error that occurs when the user isn’t a participant of the share.\nstatic var permissionFailure: CKError.Code\nAn error that occurs when the user doesn’t have permission to save or fetch data.\nstatic var quotaExceeded: CKError.Code\nAn error that occurs when saving a record exceeds the user’s storage quota.\nstatic var referenceViolation: CKError.Code\nAn error that occurs when CloudKit can’t find the target of a reference.\nstatic var requestRateLimited: CKError.Code\nAn error that occurs when CloudKit rate-limits requests.\nstatic var serverRecordChanged: CKError.Code\nAn error that occurs when CloudKit rejects a record because the server’s version is different.\nstatic var serverResponseLost: CKError.Code\nAn error that occurs when CloudKit is unable to maintain the network connection and provide a response.\nstatic var serviceUnavailable: CKError.Code\nAn error that occurs when CloudKit is unavailable.\nstatic var tooManyParticipants: CKError.Code\nAn error that occurs when a share has too many participants.\nstatic var unknownItem: CKError.Code\nAn error that occurs when the specified record doesn’t exist.\nstatic var userDeletedZone: CKError.Code\nAn error that occurs when the user deletes a record zone using the Settings app.\nstatic var zoneBusy: CKError.Code\nAn error that occurs when the server is too busy to handle the record zone operation.\nstatic var zoneNotFound: CKError.Code\nAn error that occurs when the specified record zone doesn’t exist.\nstatic var resultsTruncated: CKError.Code\nAn error that occurs when CloudKit truncates a query’s results.\nDeprecated\nenum CKError.Code\nThe error codes that CloudKit returns."
  },
  {
    "title": "perRecordCompletionBlock | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckfetchrecordsoperation/1476082-perrecordcompletionblock",
    "html": "Discussion\n\nThis property is a closure that returns no value and has the following parameters:\n\nThe record, or nil if CloudKit can’t retrieve the record.\n\nThe ID of the record.\n\nIf CloudKit can’t retrieve the record, an error that provides information about the failure; otherwise, nil.\n\nThe fetch operation executes this closure once for each record ID in the recordIDs property. Each time the closure executes, it executes serially with respect to the other progress closures of the operation.\n\nIf you intend to use this closure to process results, set it before you execute the operation or submit the operation to a queue.\n\nSee Also\nProcessing Record Fetch Results\nvar perRecordProgressBlock: ((CKRecord.ID, Double) -> Void)?\nThe closure to execute with progress information for individual records.\nvar fetchRecordsCompletionBlock: (([CKRecord.ID : CKRecord]?, Error?) -> Void)?\nThe closure to execute after CloudKit retrieves all of the records."
  },
  {
    "title": "CKFetchRecordChangesOperation | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckfetchrecordchangesoperation",
    "html": "Deprecated\n\nUse CKFetchRecordZoneChangesOperation instead.\n\nOverview\n\nUse this type of operation object to optimize fetch operations for locally managed sets of records. Specifically, use it when you maintain a local cache of your record data and need to synchronize that cache periodically with the server.\n\nTo get the most benefit out of a CKFetchRecordChangesOperation object, you must maintain a local cache of the records from the specified zone. Each time you fetch changes from that zone, the server provides a token that identifies your request. With each subsequent fetch request, you initialize the operation object with the token from the previous request, and the server returns only the records with changes since that request.\n\nThe blocks you assign to process the fetched records execute serially on an internal queue that the operation manages. Your blocks must be capable of executing on a background thread, so any tasks that require access to the main thread must redirect accordingly.\n\nIf you assign a completion block to the completionBlock property of the operation object, the system calls the completion block after the operation executes and returns its results to you. You can use a completion block to perform housekeeping tasks for the operation, but don’t use it to process the results of the operation. Any completion block you specify should handle the failure of the operation to complete its task, whether due to an error or an explicit cancellation.\n\nTopics\nCreating the Fetch Record Changes Operation\ninit(recordZoneID: CKRecordZone.ID, previousServerChangeToken: CKServerChangeToken?)\nCreates an operation for fetching changes in the specified record zone.\ninit()\nCreates an empty fetch record changes operation.\nConfiguring the Fetch Record Changes Operation\nvar recordZoneID: CKRecordZone.ID?\nThe ID of the record zone with the records you want to fetch.\nvar previousServerChangeToken: CKServerChangeToken?\nThe token that identifies the starting point for retrieving changes.\nvar desiredKeys: [String]?\nThe fields to fetch for the requested records.\nvar resultsLimit: Int\nThe maximum number of changed records to report with this operation object.\nvar moreComing: Bool\nA Boolean value that indicates whether more results are available.\nProcessing the Fetch Record Changes Results\nvar recordChangedBlock: ((CKRecord) -> Void)?\nThe block to execute with the contents of a changed record.\nvar recordWithIDWasDeletedBlock: ((CKRecord.ID) -> Void)?\nThe block to execute with the ID of a deleted record.\nvar fetchRecordChangesCompletionBlock: ((CKServerChangeToken?, Data?, Error?) -> Void)?\nThe block to execute when the system finishes processing all changes.\nRelationships\nInherits From\nCKDatabaseOperation\nSee Also\nDeprecated classes\nclass CKDiscoverAllUserIdentitiesOperation\nAn operation that uses the device’s contacts to search for discoverable iCloud users.\nDeprecated\nclass CKDiscoverUserIdentitiesOperation\nAn operation that uses the provided criteria to search for discoverable iCloud users.\nDeprecated\nclass CKFetchNotificationChangesOperation\nAn operation that retrieves unread notifications from a CloudKit container.\nDeprecated\nclass CKMarkNotificationsReadOperation\nAn operation that marks push notifications as read by your app.\nDeprecated\nclass CKModifyBadgeOperation\nAn operation that sets the value of the app icon’s badge.\nDeprecated"
  },
  {
    "title": "perRecordProgressBlock | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckfetchrecordsoperation/1476080-perrecordprogressblock",
    "html": "Discussion\n\nThis property is a closure that returns no value and has the following parameters:\n\nThe ID of the record to retrieve.\n\nThe amount of data, as a percentage, that CloudKit downloads for the record. The range is 0.0 to 1.0, where 0.0 indicates that CloudKit hasn’t downloaded anything, and 1.0 means the download is complete.\n\nThe fetch operation executes this closure one or more times for each record ID in the recordIDs property. Each time the closure executes, it executes serially with respect to the other progress closures of the operation. You can use this closure to track the ongoing progress of the download operation.\n\nIf you intend to use this closure to process results, set it before you execute the operation or add the operation to a queue.\n\nSee Also\nProcessing Record Fetch Results\nvar perRecordCompletionBlock: ((CKRecord?, CKRecord.ID?, Error?) -> Void)?\nThe closure to execute when a record becomes available.\nvar fetchRecordsCompletionBlock: (([CKRecord.ID : CKRecord]?, Error?) -> Void)?\nThe closure to execute after CloudKit retrieves all of the records."
  },
  {
    "title": "CKModifyBadgeOperation | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckmodifybadgeoperation",
    "html": "Overview\n\nIf you assign a completion block to the completionBlock property of the operation object, the system calls the completion block after the operation executes and returns its results to you. You can use a completion block to perform housekeeping tasks that relate to the operation, but don’t use it to process the results of the operation. Any completion block you specify should handle any failures, whether due to an error or an explicit cancellation.\n\nThis operation can update the badge for the current device or for all of the user’s devices.\n\nTopics\nCreating the Operation\ninit()\nCreates an empty modify badge operation.\ninit(badgeValue: Int)\nCreates an operation that sets the value of the app icon’s badge.\nConfiguring the Operation\nvar badgeValue: Int\nThe value that the app icon’s badge displays.\nProcessing the Results\nvar modifyBadgeCompletionBlock: ((Error?) -> Void)?\nThe block to execute with the results of the operation.\nRelationships\nInherits From\nCKOperation\nSee Also\nDeprecated classes\nclass CKDiscoverAllUserIdentitiesOperation\nAn operation that uses the device’s contacts to search for discoverable iCloud users.\nDeprecated\nclass CKDiscoverUserIdentitiesOperation\nAn operation that uses the provided criteria to search for discoverable iCloud users.\nDeprecated\nclass CKFetchRecordChangesOperation\nAn operation that reports on the changed and deleted records in the specified record zone.\nDeprecated\nclass CKFetchNotificationChangesOperation\nAn operation that retrieves unread notifications from a CloudKit container.\nDeprecated\nclass CKMarkNotificationsReadOperation\nAn operation that marks push notifications as read by your app.\nDeprecated"
  },
  {
    "title": "initWithRecordType: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckrecord/1462225-initwithrecordtype",
    "html": "Parameters\nrecordType\n\nA string that represents the type of record that you want to create. You can’t change the record type after initialization. You define the record types that your app supports and use them to distinguish between records with different types of data. This parameter must not be nil or contain an empty string.\n\nA record type must consist of one or more alphanumeric characters and must start with a letter. CloudKit permits the use of underscores, but not spaces.\n\nReturn Value\n\nAn initialized record object, or nil if CloudKit can’t create it.\n\nDiscussion\n\nUse this method to initialize a new record object in the default zone of the database. The newly created record contains no data in any of its fields and receives a unique ID.\n\n// Create a new record of type \"employee\".\nCKRecord* myRecord = [[CKRecord alloc] initWithRecordType:@\"employee\"];\n\n\nNew records exist only in memory until you explicitly save them to iCloud. In addition, new records are sparse by default and have no values for the fields you define. Until you set the value of a key explicitly, getting the value of a key in a new record returns nil. Even though a record has an associated type, CloudKit ignores the type information until you save the record.\n\nSave the record using a CKModifyRecordsOperation object or by using the saveRecord:completionHandler: method of CKDatabase to transfer the record’s contents to the server.\n\nSee Also\nCreating a Record\n- initWithRecordType:zoneID:\nCreates a record in the specified zone.\n- initWithRecordType:recordID:\nCreates a record using an ID that you provide.\nCKRecordType\nA data type that CloudKit requires for record types.\nCKRecordTypeShare\nThe system type that identifies a share record.\nCKRecordTypeUserRecord\nThe system type that identifies a user record.\nCKRecordFieldKey\nA data type that CloudKit requires for record field names."
  },
  {
    "title": "init(recordZoneID:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckshare/3746825-init",
    "html": "Parameters\nrecordZoneID\n\nThe ID of the record zone to share.\n\nDiscussion\n\nA shared record zone must have the zoneWideSharing capability. Custom record zones that you create in the user’s private database have this capability by default. A record zone, and the records it contains, can take part in only a single share.\n\nAfter accepting a share invite, CloudKit adds the records of the shared record zone to a new zone in the participant’s shared database. Use CKFetchDatabaseChangesOperation to fetch the ID of the new record zone. Then configure CKFetchRecordZoneChangesOperation with that record zone ID and execute the operation to fetch the records.\n\nIf you use CKFetchShareMetadataOperation to fetch the metadata for a shared record zone, the operation ignores the shouldFetchRootRecord and rootRecordDesiredKeys properties because, unlike a shared record hierarchy, a record zone doesn’t have a nominated root record.\n\nSee Also\nCreating a Share\ninit(coder: NSCoder)\nCreates a share from a serialized instance.\ninit(rootRecord: CKRecord)\nCreates a new share for the specified record.\ninit(rootRecord: CKRecord, shareID: CKRecord.ID)\nCreates a new share for the specified record and record ID."
  },
  {
    "title": "zoneWideSharing | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckrecordzone/capabilities/3746823-zonewidesharing",
    "html": "Discussion\n\nCloudKit allows you to share custom record zones that you create in the user’s private database. For more information, see Shared Records.\n\nSee Also\nZone Capabilities\nstatic var atomic: CKRecordZone.Capabilities\nA capability that allows atomic changes of multiple records.\nstatic var fetchChanges: CKRecordZone.Capabilities\nA capability for fetching only the changed records from a zone.\nstatic var sharing: CKRecordZone.Capabilities\nA capability for sharing a specific hierarchy of records."
  },
  {
    "title": "desiredKeys | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckfetchrecordsoperation/3003361-desiredkeys",
    "html": "Discussion\n\nUse this property to limit the amount of data that CloudKit returns for each record during the fetch operation. When CloudKit returns a record, it only includes fields with names that match one of the keys in this property. The property’s default value is nil, which instructs CloudKit to return all of a record’s keys.\n\nIf you’re retrieving records of different types, make sure the array includes the fields you want from all of the various record types that the operation can return.\n\nIf you intend to specify a value other than nil, do so before you execute the operation or add the operation to a queue.\n\nSee Also\nConfiguring a Record Fetch Operation\nvar recordIDs: [CKRecord.ID]?\nThe record IDs of the records to fetch."
  },
  {
    "title": "CKContainer_Application_PermissionBlock | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckcontainer_application_permissionblock",
    "html": "See Also\nDeprecated type aliases\ntypealias CKContainer_Application_PermissionStatus\nDeprecated\ntypealias CKContainer_Application_Permissions\nDeprecated\ntypealias CKRecord_Reference_Action\nDeprecated\ntypealias CKShare_Participant_AcceptanceStatus\nDeprecated\ntypealias CKShare_Participant_ParticipantType\nDeprecated\ntypealias CKShare_Participant_Permission\nDeprecated\ntypealias CKShare_Participant_Role\nDeprecated"
  },
  {
    "title": "CKShare_Participant_AcceptanceStatus | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckshare_participant_acceptancestatus",
    "html": "See Also\nDeprecated type aliases\ntypealias CKContainer_Application_PermissionBlock\nDeprecated\ntypealias CKContainer_Application_PermissionStatus\nDeprecated\ntypealias CKContainer_Application_Permissions\nDeprecated\ntypealias CKRecord_Reference_Action\nDeprecated\ntypealias CKShare_Participant_ParticipantType\nDeprecated\ntypealias CKShare_Participant_Permission\nDeprecated\ntypealias CKShare_Participant_Role\nDeprecated"
  },
  {
    "title": "CKRecord_Reference_Action | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckrecord_reference_action",
    "html": "See Also\nDeprecated type aliases\ntypealias CKContainer_Application_PermissionBlock\nDeprecated\ntypealias CKContainer_Application_PermissionStatus\nDeprecated\ntypealias CKContainer_Application_Permissions\nDeprecated\ntypealias CKShare_Participant_AcceptanceStatus\nDeprecated\ntypealias CKShare_Participant_ParticipantType\nDeprecated\ntypealias CKShare_Participant_Permission\nDeprecated\ntypealias CKShare_Participant_Role\nDeprecated"
  },
  {
    "title": "CKShare_Participant_Permission | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckshare_participant_permission",
    "html": "See Also\nDeprecated type aliases\ntypealias CKContainer_Application_PermissionBlock\nDeprecated\ntypealias CKContainer_Application_PermissionStatus\nDeprecated\ntypealias CKContainer_Application_Permissions\nDeprecated\ntypealias CKRecord_Reference_Action\nDeprecated\ntypealias CKShare_Participant_AcceptanceStatus\nDeprecated\ntypealias CKShare_Participant_ParticipantType\nDeprecated\ntypealias CKShare_Participant_Role\nDeprecated"
  },
  {
    "title": "CKShare_Participant_Role | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckshare_participant_role",
    "html": "See Also\nDeprecated type aliases\ntypealias CKContainer_Application_PermissionBlock\nDeprecated\ntypealias CKContainer_Application_PermissionStatus\nDeprecated\ntypealias CKContainer_Application_Permissions\nDeprecated\ntypealias CKRecord_Reference_Action\nDeprecated\ntypealias CKShare_Participant_AcceptanceStatus\nDeprecated\ntypealias CKShare_Participant_ParticipantType\nDeprecated\ntypealias CKShare_Participant_Permission\nDeprecated"
  },
  {
    "title": "errorCode | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckerror/2883253-errorcode",
    "html": "See Also\nGetting Error Information\nstatic var errorDomain: String\nThe error’s domain.\nvar errorUserInfo: [String : Any]\nThe dictionary that provides additional context about the error.\nvar localizedDescription: String\nThe localized description of the error."
  },
  {
    "title": "!=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckerror/2946935",
    "html": "Parameters\nlhs\n\nAn error to compare.\n\nrhs\n\nAnother error to compare.\n\nSee Also\nComparing Errors\nstatic func == (CKError, CKError) -> Bool\nReturns a Boolean value that indicates whether two errors are equal."
  },
  {
    "title": "errorDomain | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckerror/2883255-errordomain",
    "html": "Discussion\n\nThis property returns the same value as CKErrorDomain.\n\nSee Also\nGetting Error Information\nvar errorCode: Int\nThe error’s code.\nvar errorUserInfo: [String : Any]\nThe dictionary that provides additional context about the error.\nvar localizedDescription: String\nThe localized description of the error."
  },
  {
    "title": "resultsTruncated | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckerror/2325224-resultstruncated",
    "html": "See Also\nGetting Error Codes\nstatic var accountTemporarilyUnavailable: CKError.Code\nAn error that occurs when the user’s iCloud account is temporarily unavailable.\nstatic var alreadyShared: CKError.Code\nAn error that occurs when CloudKit attempts to share a record with an existing share.\nstatic var assetFileModified: CKError.Code\nAn error that occurs when the system modifies an asset while saving it.\nstatic var assetFileNotFound: CKError.Code\nAn error that occurs when the system can’t find the specified asset.\nstatic var assetNotAvailable: CKError.Code\nAn error that occurs when the system can’t access the specified asset.\nstatic var badContainer: CKError.Code\nAn error that occurs when you use an unknown or unauthorized container.\nstatic var badDatabase: CKError.Code\nAn error that occurs when the operation can’t complete for the specified database.\nstatic var batchRequestFailed: CKError.Code\nAn error that occurs when the system rejects the entire batch of changes.\nstatic var changeTokenExpired: CKError.Code\nAn error that occurs when the change token expires.\nstatic var constraintViolation: CKError.Code\nAn error that occurs when the server rejects the request because of a unique constraint violation.\nstatic var incompatibleVersion: CKError.Code\nAn error that occurs when the current app version is older than the oldest allowed version.\nstatic var internalError: CKError.Code\nA nonrecoverable error that CloudKit encounters.\nstatic var invalidArguments: CKError.Code\nAn error that occurs when the request contains invalid information.\nstatic var limitExceeded: CKError.Code\nAn error that occurs when a request’s size exceeds the limit.\nstatic var managedAccountRestricted: CKError.Code\nAn error that occurs when CloudKit rejects a request due to a managed-account restriction.\nstatic var missingEntitlement: CKError.Code\nAn error that occurs when the app is missing a required entitlement.\nstatic var networkFailure: CKError.Code\nAn error that occurs when a network is available, but CloudKit is inaccessible.\nstatic var networkUnavailable: CKError.Code\nAn error that occurs when the network is unavailable.\nstatic var notAuthenticated: CKError.Code\nAn error that occurs when the user is unauthenticated.\nstatic var operationCancelled: CKError.Code\nAn error that occurs when an operation cancels.\nstatic var partialFailure: CKError.Code\nAn error that occurs when an operation completes with partial failures.\nstatic var participantMayNeedVerification: CKError.Code\nAn error that occurs when the user isn’t a participant of the share.\nstatic var permissionFailure: CKError.Code\nAn error that occurs when the user doesn’t have permission to save or fetch data.\nstatic var quotaExceeded: CKError.Code\nAn error that occurs when saving a record exceeds the user’s storage quota.\nstatic var referenceViolation: CKError.Code\nAn error that occurs when CloudKit can’t find the target of a reference.\nstatic var requestRateLimited: CKError.Code\nAn error that occurs when CloudKit rate-limits requests.\nstatic var serverRecordChanged: CKError.Code\nAn error that occurs when CloudKit rejects a record because the server’s version is different.\nstatic var serverRejectedRequest: CKError.Code\nAn error that occurs when CloudKit rejects the request.\nstatic var serverResponseLost: CKError.Code\nAn error that occurs when CloudKit is unable to maintain the network connection and provide a response.\nstatic var serviceUnavailable: CKError.Code\nAn error that occurs when CloudKit is unavailable.\nstatic var tooManyParticipants: CKError.Code\nAn error that occurs when a share has too many participants.\nstatic var unknownItem: CKError.Code\nAn error that occurs when the specified record doesn’t exist.\nstatic var userDeletedZone: CKError.Code\nAn error that occurs when the user deletes a record zone using the Settings app.\nstatic var zoneBusy: CKError.Code\nAn error that occurs when the server is too busy to handle the record zone operation.\nstatic var zoneNotFound: CKError.Code\nAn error that occurs when the specified record zone doesn’t exist.\nenum CKError.Code\nThe error codes that CloudKit returns."
  },
  {
    "title": "zoneNotFound | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckerror/2325222-zonenotfound",
    "html": "See Also\nGetting Error Codes\nstatic var accountTemporarilyUnavailable: CKError.Code\nAn error that occurs when the user’s iCloud account is temporarily unavailable.\nstatic var alreadyShared: CKError.Code\nAn error that occurs when CloudKit attempts to share a record with an existing share.\nstatic var assetFileModified: CKError.Code\nAn error that occurs when the system modifies an asset while saving it.\nstatic var assetFileNotFound: CKError.Code\nAn error that occurs when the system can’t find the specified asset.\nstatic var assetNotAvailable: CKError.Code\nAn error that occurs when the system can’t access the specified asset.\nstatic var badContainer: CKError.Code\nAn error that occurs when you use an unknown or unauthorized container.\nstatic var badDatabase: CKError.Code\nAn error that occurs when the operation can’t complete for the specified database.\nstatic var batchRequestFailed: CKError.Code\nAn error that occurs when the system rejects the entire batch of changes.\nstatic var changeTokenExpired: CKError.Code\nAn error that occurs when the change token expires.\nstatic var constraintViolation: CKError.Code\nAn error that occurs when the server rejects the request because of a unique constraint violation.\nstatic var incompatibleVersion: CKError.Code\nAn error that occurs when the current app version is older than the oldest allowed version.\nstatic var internalError: CKError.Code\nA nonrecoverable error that CloudKit encounters.\nstatic var invalidArguments: CKError.Code\nAn error that occurs when the request contains invalid information.\nstatic var limitExceeded: CKError.Code\nAn error that occurs when a request’s size exceeds the limit.\nstatic var managedAccountRestricted: CKError.Code\nAn error that occurs when CloudKit rejects a request due to a managed-account restriction.\nstatic var missingEntitlement: CKError.Code\nAn error that occurs when the app is missing a required entitlement.\nstatic var networkFailure: CKError.Code\nAn error that occurs when a network is available, but CloudKit is inaccessible.\nstatic var networkUnavailable: CKError.Code\nAn error that occurs when the network is unavailable.\nstatic var notAuthenticated: CKError.Code\nAn error that occurs when the user is unauthenticated.\nstatic var operationCancelled: CKError.Code\nAn error that occurs when an operation cancels.\nstatic var partialFailure: CKError.Code\nAn error that occurs when an operation completes with partial failures.\nstatic var participantMayNeedVerification: CKError.Code\nAn error that occurs when the user isn’t a participant of the share.\nstatic var permissionFailure: CKError.Code\nAn error that occurs when the user doesn’t have permission to save or fetch data.\nstatic var quotaExceeded: CKError.Code\nAn error that occurs when saving a record exceeds the user’s storage quota.\nstatic var referenceViolation: CKError.Code\nAn error that occurs when CloudKit can’t find the target of a reference.\nstatic var requestRateLimited: CKError.Code\nAn error that occurs when CloudKit rate-limits requests.\nstatic var serverRecordChanged: CKError.Code\nAn error that occurs when CloudKit rejects a record because the server’s version is different.\nstatic var serverRejectedRequest: CKError.Code\nAn error that occurs when CloudKit rejects the request.\nstatic var serverResponseLost: CKError.Code\nAn error that occurs when CloudKit is unable to maintain the network connection and provide a response.\nstatic var serviceUnavailable: CKError.Code\nAn error that occurs when CloudKit is unavailable.\nstatic var tooManyParticipants: CKError.Code\nAn error that occurs when a share has too many participants.\nstatic var unknownItem: CKError.Code\nAn error that occurs when the specified record doesn’t exist.\nstatic var userDeletedZone: CKError.Code\nAn error that occurs when the user deletes a record zone using the Settings app.\nstatic var zoneBusy: CKError.Code\nAn error that occurs when the server is too busy to handle the record zone operation.\nstatic var resultsTruncated: CKError.Code\nAn error that occurs when CloudKit truncates a query’s results.\nDeprecated\nenum CKError.Code\nThe error codes that CloudKit returns."
  },
  {
    "title": "modifyRecords(saving:deleting:savePolicy:atomically:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckdatabase/3794323-modifyrecords",
    "html": "Parameters\nrecordsToSave\n\nThe records to save.\n\nrecordIDsToDelete\n\nThe identifiers of the records to permanently delete.\n\nsavePolicy\n\nThe policy to use when modifying existing records. For possible values, see CKModifyRecordsOperation.RecordSavePolicy.\n\natomically\n\nIf true, the entire operation fails if CloudKit can’t modify one or more of the specified records; otherwise, CloudKit reports individual failures in the returned tuple. Atomic changes are only applicable in record zones that have the atomic capability.\n\nReturn Value\n\nA tuple with the following named elements:\n\nsaveResults\n\nA dictionary of saved records. The dictionary uses the identifiers of the records you specify in recordsToSave as its keys. The value of each key is a Result that contains either the corresponding modified record (as it appears on the server), or an error that describes why CloudKit can’t modify that record.\n\ndeleteResults\n\nA dictionary of deleted records. The dictionary uses the identifiers you specify in recordIDsToDelete as its keys. The value of each key is a Result that contains either Void to indicate a successful deletion, or an error that describes why CloudKit can’t delete that record.\n\nDiscussion\n\nDeleting records may cause additional deletions if other records in the database reference the deleted records. CloudKit doesn’t provide the identifiers of any additional records it deletes. This method throws an error if the request fails, such as when the network is unavailable or the device doesn’t have an active iCloud account, or when atomically is true and one or more of the specified changes fail; otherwise, the returned tuple includes any individual record errors.\n\nFor information on a more configurable way to modify records, see CKModifyRecordsOperation.\n\nSee Also\nModifying Records\nfunc modifyRecords(saving: [CKRecord], deleting: [CKRecord.ID], savePolicy: CKModifyRecordsOperation.RecordSavePolicy, atomically: Bool, completionHandler: (Result<(saveResults: [CKRecord.ID : Result<CKRecord, Error>], deleteResults: [CKRecord.ID : Result<Void, Error>]), Error>) -> Void)\nModifies the specified records and delivers the results to a completion hander.\nenum CKModifyRecordsOperation.RecordSavePolicy\nConstants that indicate which policy to apply when saving records.\nfunc save(CKRecord, completionHandler: (CKRecord?, Error?) -> Void)\nSaves a specific record.\nfunc delete(withRecordID: CKRecord.ID, completionHandler: (CKRecord.ID?, Error?) -> Void)\nDeletes a specific record."
  },
  {
    "title": "action | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckrecord/reference/1514900-action",
    "html": "Discussion\n\nThe value in this property determines which action, if any, to take when deleting the target of the reference object — that is, the object that the recordID property points to. When this property is CKRecord.ReferenceAction.deleteSelf, deleting the target object deletes any records that contain that reference in one of their fields. When this property is CKRecord.ReferenceAction.none, deleting the target object doesn’t delete any additional objects.\n\nSee Also\nGetting the Reference Attributes\nvar recordID: CKRecord.ID\nThe ID of the referenced record.\nenum CKRecord.ReferenceAction\nConstants that indicate the behavior when deleting a referenced record."
  },
  {
    "title": "CKError.Code.limitExceeded | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckerror/code/limitexceeded",
    "html": "Discussion\n\nThe server can change its limits at any time, but the following are general guidelines:\n\n400 items (records or shares) per operation\n\n2 MB per request (not counting asset sizes)\n\nIf your app receives CKError.Code.limitExceeded, it must split the operation in half and try both requests again.\n\nSee Also\nError Codes\ncase accountTemporarilyUnavailable\nAn error that occurs when the user’s iCloud account is temporarily unavailable.\ncase alreadyShared\nAn error that occurs when CloudKit attempts to share a record with an existing share.\ncase assetFileModified\nAn error that occurs when the system modifies an asset while saving it.\ncase assetFileNotFound\nAn error that occurs when the system can’t find the specified asset.\ncase assetNotAvailable\nAn error that occurs when the system can’t access the specified asset.\ncase badContainer\nAn error that occurs when you use an unknown or unauthorized container.\ncase badDatabase\nAn error that occurs when the operation can’t complete for the specified database.\ncase batchRequestFailed\nAn error that occurs when the system rejects the entire batch of changes.\ncase changeTokenExpired\nAn error that occurs when the change token expires.\ncase constraintViolation\nAn error that occurs when the server rejects the request because of a unique constraint violation.\ncase incompatibleVersion\nAn error that occurs when the current app version is older than the oldest allowed version.\ncase internalError\nA nonrecoverable error that CloudKit encounters.\ncase invalidArguments\nAn error that occurs when the request contains invalid information.\ncase managedAccountRestricted\nAn error that occurs when CloudKit rejects a request due to a managed-account restriction.\ncase missingEntitlement\nAn error that occurs when the app is missing a required entitlement.\ncase networkFailure\nAn error that occurs when a network is available, but CloudKit is inaccessible.\ncase networkUnavailable\nAn error that occurs when the network is unavailable.\ncase notAuthenticated\nAn error that occurs when the user is unauthenticated.\ncase operationCancelled\nAn error that occurs when an operation cancels.\ncase partialFailure\nAn error that occurs when an operation completes with partial failures.\ncase participantMayNeedVerification\nAn error that occurs when the user isn’t a participant of the share.\ncase permissionFailure\nAn error that occurs when the user doesn’t have permission to save or fetch data.\ncase quotaExceeded\nAn error that occurs when saving a record exceeds the user’s storage quota.\ncase referenceViolation\nAn error that occurs when CloudKit can’t find the target of a reference.\ncase requestRateLimited\nAn error that occurs when CloudKit rate-limits requests.\ncase serverRecordChanged\nAn error that occurs when CloudKit rejects a record because the server’s version is different.\ncase serverRejectedRequest\nAn error that occurs when CloudKit rejects the request.\ncase serverResponseLost\nAn error that occurs when CloudKit is unable to maintain the network connection and provide a response.\ncase serviceUnavailable\nAn error that occurs when CloudKit is unavailable.\ncase tooManyParticipants\nAn error that occurs when a share has too many participants.\ncase unknownItem\nAn error that occurs when the specified record doesn’t exist.\ncase userDeletedZone\nAn error that occurs when the user deletes a record zone using the Settings app.\ncase zoneBusy\nAn error that occurs when the server is too busy to handle the record zone operation.\ncase zoneNotFound\nAn error that occurs when the specified record zone doesn’t exist.\ncase resultsTruncated\nAn error that occurs when CloudKit truncates a query’s results.\nDeprecated"
  },
  {
    "title": "modifyRecordsCompletionBlock | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckmodifyrecordsoperation/1447486-modifyrecordscompletionblock",
    "html": "Discussion\n\nThis property is a closure that returns no value and has the following parameters:\n\nThe records that CloudKit saves.\n\nThe IDs of the records that CloudKit deletes.\n\nIf CloudKit can’t modify any of the records, this parameter provides information about the failure; otherwise, it’s nil.\n\nThe closure executes only once, and represents your final opportunity to process the operation’s results. It executes after all record progress closures and record completion closures finish. The closure executes serially with respect to the other closures of the operation.\n\nAlthough this closure executes after the modification of records completes, it executes prior to the indexing of queries for those modified records. Therefore, if a query executes in this completion closure, the results of that query might not include the changes from this operation. Conversely, records that CloudKit fetches in the completion closure are up to date with the changes from the associated operation.\n\nThe closure reports an error of type CKError.Code.partialFailure when it modifies only some of the records successfully. The userInfo dictionary of the error contains a CKPartialErrorsByItemIDKey key that has a dictionary as its value. The keys of the dictionary are the IDs of the records that the operation can’t modify, and the corresponding values are errors that contain information about the failures.\n\nIf you intend to use this closure to process results, set it before you execute the operation or submit the operation to a queue.\n\nSee Also\nProcessing the Modify Record Results\nvar perRecordProgressBlock: ((CKRecord, Double) -> Void)?\nThe closure to execute with progress information for individual records.\nvar perRecordCompletionBlock: ((CKRecord, Error?) -> Void)?\nThe closure to execute when CloudKit saves a record.\nDeprecated"
  },
  {
    "title": "subscript(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckrecord/3003389-subscript",
    "html": "Parameters\nkey\n\nThe string that identifies a field in the record. A key must consist of one or more alphanumeric characters and must start with a letter. CloudKit permits the use of underscores, but not spaces.\n\nReturn Value\n\nThe object for the specified key, or nil if no such key exists in the record.\n\nSee Also\nAccessing the Record’s Fields\nfunc object(forKey: CKRecord.FieldKey) -> (__CKRecordObjCValue)?\nReturns the object that the record stores for the specified key.\nsubscript(String) -> __CKRecordObjCValue?\nReturns the object that the record stores for the specified key.\nfunc setObject((__CKRecordObjCValue)?, forKey: CKRecord.FieldKey)\nStores an object in the record using the specified key.\nfunc allKeys() -> [CKRecord.FieldKey]\nReturns an array of the record’s keys.\nfunc changedKeys() -> [CKRecord.FieldKey]\nReturns an array of keys with recent changes to their values.\nfunc makeIterator() -> CKRecordKeyValueIterator\nReturns an iterator of the record’s key-value pairs.\nstruct CKRecordKeyValueIterator\nAn iterator of the record’s key-value pairs.\nprotocol CKRecordValueProtocol\nA description of a CloudKit record value.\nprotocol CKRecordKeyValueSetting\nA protocol for managing the key-value pairs of a CloudKit record.\ntypealias CKRecordValue\nA data type for objects that CloudKit stores on the server.\ntypealias CKRecord.Iterator\nA data type that CloudKit uses to iterate over a record’s key-value pairs.\ntypealias CKRecord.Element\nA type that represents a single key-value pair from a record."
  },
  {
    "title": "perRecordCompletionBlock | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckmodifyrecordsoperation/1447470-perrecordcompletionblock",
    "html": "Discussion\n\nThis property is a closure that returns no value and has the following parameters:\n\nThe record that CloudKit saves.\n\nIf CloudKit can’t save the record, an error that provides information about the failure; otherwise, nil.\n\nThe closure executes once for each record in the recordsToSave property. Each time the closure executes, it executes serially with respect to the other record completion blocks of the operation.\n\nIf you intend to use this closure to process results, set it before you execute the operation or submit the operation to a queue.\n\nSee Also\nProcessing the Modify Record Results\nvar perRecordProgressBlock: ((CKRecord, Double) -> Void)?\nThe closure to execute with progress information for individual records.\nvar modifyRecordsCompletionBlock: (([CKRecord]?, [CKRecord.ID]?, Error?) -> Void)?\nThe closure to execute after CloudKit modifies all of the records."
  },
  {
    "title": "init(recordsToSave:recordIDsToDelete:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckmodifyrecordsoperation/3003364-init",
    "html": "Parameters\nrecordsToSave\n\nThe records to save. You can specify nil for this parameter.\n\nrecordIDsToDelete\n\nThe IDs of the records to delete. You can specify nil for this parameter.\n\nDiscussion\n\nThe records that you intend to save or delete must all reside in the same database, which you specify when you configure the operation. If your app saves a record in a database that doesn’t exist, the server creates the database.\n\nSee Also\nCreating a Modify Record Operation\ninit()\nCreates an empty modify records operation."
  },
  {
    "title": "save(_:completionHandler:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckdatabase/1449102-save",
    "html": "Parameters\nsubscription\n\nThe subscription to save.\n\ncompletionHandler\n\nThe closure to execute after CloudKit saves the subscription.\n\nDiscussion\n\nConcurrency Note\n\nYou can call this method from synchronous code using a completion handler, as shown on this page, or you can call it as an asynchronous method that has the following declaration:\n\nfunc save(_ subscription: CKSubscription) async throws -> CKSubscription\n\n\nFor information about concurrency and asynchronous code in Swift, see Calling Objective-C APIs Asynchronously.\n\nThe completion handler takes the following parameters:\n\nThe saved subscription (as it appears on the server), or nil if there’s an error.\n\nAn error if a problem occurs, or nil if CloudKit successfully saves the subscription.\n\nFor information on a more convenient way to save subscriptions, see modifySubscriptions(saving:deleting:).\n\nSee Also\nModifying Subscriptions\nfunc modifySubscriptions(saving: [CKSubscription], deleting: [CKSubscription.ID]) -> (saveResults: [CKSubscription.ID : Result<CKSubscription, Error>], deleteResults: [CKSubscription.ID : Result<Void, Error>])\nModifies the specified subscriptions and returns the results to an awaiting caller.\nfunc modifySubscriptions(saving: [CKSubscription], deleting: [CKSubscription.ID], completionHandler: (Result<(saveResults: [CKSubscription.ID : Result<CKSubscription, Error>], deleteResults: [CKSubscription.ID : Result<Void, Error>]), Error>) -> Void)\nModifies the specified subscriptions and delivers the results to a completion handler.\nfunc deleteSubscription(withID: CKSubscription.ID) -> CKSubscription.ID\nDeletes a specific subscription and returns the deleted subscription’s identifier to an awaiting caller.\nfunc delete(withSubscriptionID: CKSubscription.ID, completionHandler: (String?, (Error)?) -> Void)\nDeletes a specific subscription and delivers the deleted subscription’s identifier to a completion handler."
  },
  {
    "title": "fetch(withRecordZoneID:completionHandler:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckdatabase/1449104-fetch",
    "html": "Parameters\nzoneID\n\nThe identifier of the record zone to fetch.\n\ncompletionHandler\n\nThe closure to execute with the fetch results.\n\nDiscussion\n\nConcurrency Note\n\nYou can call this method from synchronous code using a completion handler, as shown on this page, or you can call it as an asynchronous method that has the following declaration:\n\nfunc recordZone(for zoneID: CKRecordZone.ID) async throws -> CKRecordZone\n\n\nFor information about concurrency and asynchronous code in Swift, see Calling Objective-C APIs Asynchronously.\n\nThe completion handler takes the following parameters:\n\nThe fetched record zone, or nil if there’s an error.\n\nAn error if a problem occurs, or nil if CloudKit successfully fetches the specified record zone.\n\nFor information on a more convenient way to fetch specific record zones, see recordZones(for:).\n\nSee Also\nFetching Record Zones\nfunc recordZones(for: [CKRecordZone.ID]) -> [CKRecordZone.ID : Result<CKRecordZone, Error>]\nFetches the specified record zones and returns them to an awaiting caller.\nfunc fetch(withRecordZoneIDs: [CKRecordZone.ID], completionHandler: (Result<[CKRecordZone.ID : Result<CKRecordZone, Error>], Error>) -> Void)\nFetches the specified record zones and delivers them to a completion handler.\nfunc fetchAllRecordZones(completionHandler: ([CKRecordZone]?, Error?) -> Void)\nFetches all record zones from the current database."
  },
  {
    "title": "fetch(withSubscriptionID:completionHandler:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckdatabase/3003591-fetch",
    "html": "Parameters\nsubscriptionID\n\nThe identifier of the subscription to fetch.\n\ncompletionHandler\n\nThe closure to execute with the fetch results.\n\nDiscussion\n\nThe completion handler takes the following parameters:\n\nThe requested subscription, or nil if CloudKit can’t provide that subscription.\n\nAn error if a problem occurs, or nil if the fetch completes successfully.\n\nFor information on a more convenient way to fetch specific subscriptions, see subscriptions(for:).\n\nSee Also\nFetching Subscriptions\nfunc subscriptions(for: [CKSubscription.ID]) -> [CKSubscription.ID : Result<CKSubscription, Error>]\nFetches the specified subscriptions and returns them to an awaiting caller.\nfunc fetch(withSubscriptionIDs: [CKSubscription.ID], completionHandler: (Result<[CKSubscription.ID : Result<CKSubscription, Error>], Error>) -> Void)\nFetches the specified subscriptions and delivers them to a completion handler.\nfunc subscription(for: CKSubscription.ID) -> CKSubscription\nFetches a specific subscription and returns it to an awaiting caller.\nfunc fetchAllSubscriptions(completionHandler: ([CKSubscription]?, Error?) -> Void)\nFetches all subscriptions from the current database."
  },
  {
    "title": "subscriptions(for:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckdatabase/3794334-subscriptions",
    "html": "Parameters\nids\n\nThe identifiers of the subscriptions to fetch.\n\nReturn Value\n\nA dictionary that contains the fetched subscriptions. The dictionary uses the identifiers you specify in ids as its keys. The value of each key is a Result that contains either the corresponding fetched subscription, or an error that describes why CloudKit can’t provide that subscription.\n\nDiscussion\n\nThis method throws an error if the request fails, such as when the network is unavailable or the device doesn’t have an active iCloud account; otherwise, the returned dictionary includes any individual subscription errors.\n\nFor information on a more configurable way to fetch specific subscriptions, see CKFetchSubscriptionsOperation.\n\nSee Also\nFetching Subscriptions\nfunc fetch(withSubscriptionIDs: [CKSubscription.ID], completionHandler: (Result<[CKSubscription.ID : Result<CKSubscription, Error>], Error>) -> Void)\nFetches the specified subscriptions and delivers them to a completion handler.\nfunc subscription(for: CKSubscription.ID) -> CKSubscription\nFetches a specific subscription and returns it to an awaiting caller.\nfunc fetch(withSubscriptionID: CKSubscription.ID, completionHandler: (CKSubscription?, (Error)?) -> Void)\nFetches a specific subscription and delivers it to a completion handler.\nfunc fetchAllSubscriptions(completionHandler: ([CKSubscription]?, Error?) -> Void)\nFetches all subscriptions from the current database."
  },
  {
    "title": "CKModifyRecordsOperation.RecordSavePolicy | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckmodifyrecordsoperation/recordsavepolicy",
    "html": "Topics\nSave Policies\ncase ifServerRecordUnchanged\nA policy that instructs CloudKit to only proceed if the record’s change tag matches that of the server’s copy.\ncase changedKeys\nA policy that instructs CloudKit to save only the fields of a record that contain changes.\ncase allKeys\nA policy that instructs CloudKit to save all keys of a record, even those without changes.\nRelationships\nConforms To\nSendable\nSee Also\nConfiguring the Modify Record Operation\nvar recordsToSave: [CKRecord]?\nThe records to save to the database.\nvar recordIDsToDelete: [CKRecord.ID]?\nThe IDs of the records to delete permanently from the database.\nvar clientChangeTokenData: Data?\nA token that tracks local changes to records.\nvar isAtomic: Bool\nA Boolean value that indicates whether the entire operation fails when CloudKit can’t update one or more records in a record zone.\nvar savePolicy: CKModifyRecordsOperation.RecordSavePolicy\nThe policy to use when saving changes to records."
  },
  {
    "title": "CKError.Code | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckerror/code",
    "html": "Topics\nError Codes\ncase accountTemporarilyUnavailable\nAn error that occurs when the user’s iCloud account is temporarily unavailable.\ncase alreadyShared\nAn error that occurs when CloudKit attempts to share a record with an existing share.\ncase assetFileModified\nAn error that occurs when the system modifies an asset while saving it.\ncase assetFileNotFound\nAn error that occurs when the system can’t find the specified asset.\ncase assetNotAvailable\nAn error that occurs when the system can’t access the specified asset.\ncase badContainer\nAn error that occurs when you use an unknown or unauthorized container.\ncase badDatabase\nAn error that occurs when the operation can’t complete for the specified database.\ncase batchRequestFailed\nAn error that occurs when the system rejects the entire batch of changes.\ncase changeTokenExpired\nAn error that occurs when the change token expires.\ncase constraintViolation\nAn error that occurs when the server rejects the request because of a unique constraint violation.\ncase incompatibleVersion\nAn error that occurs when the current app version is older than the oldest allowed version.\ncase internalError\nA nonrecoverable error that CloudKit encounters.\ncase invalidArguments\nAn error that occurs when the request contains invalid information.\ncase limitExceeded\nAn error that occurs when a request’s size exceeds the limit.\ncase managedAccountRestricted\nAn error that occurs when CloudKit rejects a request due to a managed-account restriction.\ncase missingEntitlement\nAn error that occurs when the app is missing a required entitlement.\ncase networkFailure\nAn error that occurs when a network is available, but CloudKit is inaccessible.\ncase networkUnavailable\nAn error that occurs when the network is unavailable.\ncase notAuthenticated\nAn error that occurs when the user is unauthenticated.\ncase operationCancelled\nAn error that occurs when an operation cancels.\ncase partialFailure\nAn error that occurs when an operation completes with partial failures.\ncase participantMayNeedVerification\nAn error that occurs when the user isn’t a participant of the share.\ncase permissionFailure\nAn error that occurs when the user doesn’t have permission to save or fetch data.\ncase quotaExceeded\nAn error that occurs when saving a record exceeds the user’s storage quota.\ncase referenceViolation\nAn error that occurs when CloudKit can’t find the target of a reference.\ncase requestRateLimited\nAn error that occurs when CloudKit rate-limits requests.\ncase serverRecordChanged\nAn error that occurs when CloudKit rejects a record because the server’s version is different.\ncase serverRejectedRequest\nAn error that occurs when CloudKit rejects the request.\ncase serverResponseLost\nAn error that occurs when CloudKit is unable to maintain the network connection and provide a response.\ncase serviceUnavailable\nAn error that occurs when CloudKit is unavailable.\ncase tooManyParticipants\nAn error that occurs when a share has too many participants.\ncase unknownItem\nAn error that occurs when the specified record doesn’t exist.\ncase userDeletedZone\nAn error that occurs when the user deletes a record zone using the Settings app.\ncase zoneBusy\nAn error that occurs when the server is too busy to handle the record zone operation.\ncase zoneNotFound\nAn error that occurs when the specified record zone doesn’t exist.\ncase resultsTruncated\nAn error that occurs when CloudKit truncates a query’s results.\nDeprecated\nRelationships\nConforms To\nSendable\nSee Also\nGetting Error Codes\nstatic var accountTemporarilyUnavailable: CKError.Code\nAn error that occurs when the user’s iCloud account is temporarily unavailable.\nstatic var alreadyShared: CKError.Code\nAn error that occurs when CloudKit attempts to share a record with an existing share.\nstatic var assetFileModified: CKError.Code\nAn error that occurs when the system modifies an asset while saving it.\nstatic var assetFileNotFound: CKError.Code\nAn error that occurs when the system can’t find the specified asset.\nstatic var assetNotAvailable: CKError.Code\nAn error that occurs when the system can’t access the specified asset.\nstatic var badContainer: CKError.Code\nAn error that occurs when you use an unknown or unauthorized container.\nstatic var badDatabase: CKError.Code\nAn error that occurs when the operation can’t complete for the specified database.\nstatic var batchRequestFailed: CKError.Code\nAn error that occurs when the system rejects the entire batch of changes.\nstatic var changeTokenExpired: CKError.Code\nAn error that occurs when the change token expires.\nstatic var constraintViolation: CKError.Code\nAn error that occurs when the server rejects the request because of a unique constraint violation.\nstatic var incompatibleVersion: CKError.Code\nAn error that occurs when the current app version is older than the oldest allowed version.\nstatic var internalError: CKError.Code\nA nonrecoverable error that CloudKit encounters.\nstatic var invalidArguments: CKError.Code\nAn error that occurs when the request contains invalid information.\nstatic var limitExceeded: CKError.Code\nAn error that occurs when a request’s size exceeds the limit.\nstatic var managedAccountRestricted: CKError.Code\nAn error that occurs when CloudKit rejects a request due to a managed-account restriction.\nstatic var missingEntitlement: CKError.Code\nAn error that occurs when the app is missing a required entitlement.\nstatic var networkFailure: CKError.Code\nAn error that occurs when a network is available, but CloudKit is inaccessible.\nstatic var networkUnavailable: CKError.Code\nAn error that occurs when the network is unavailable.\nstatic var notAuthenticated: CKError.Code\nAn error that occurs when the user is unauthenticated.\nstatic var operationCancelled: CKError.Code\nAn error that occurs when an operation cancels.\nstatic var partialFailure: CKError.Code\nAn error that occurs when an operation completes with partial failures.\nstatic var participantMayNeedVerification: CKError.Code\nAn error that occurs when the user isn’t a participant of the share.\nstatic var permissionFailure: CKError.Code\nAn error that occurs when the user doesn’t have permission to save or fetch data.\nstatic var quotaExceeded: CKError.Code\nAn error that occurs when saving a record exceeds the user’s storage quota.\nstatic var referenceViolation: CKError.Code\nAn error that occurs when CloudKit can’t find the target of a reference.\nstatic var requestRateLimited: CKError.Code\nAn error that occurs when CloudKit rate-limits requests.\nstatic var serverRecordChanged: CKError.Code\nAn error that occurs when CloudKit rejects a record because the server’s version is different.\nstatic var serverRejectedRequest: CKError.Code\nAn error that occurs when CloudKit rejects the request.\nstatic var serverResponseLost: CKError.Code\nAn error that occurs when CloudKit is unable to maintain the network connection and provide a response.\nstatic var serviceUnavailable: CKError.Code\nAn error that occurs when CloudKit is unavailable.\nstatic var tooManyParticipants: CKError.Code\nAn error that occurs when a share has too many participants.\nstatic var unknownItem: CKError.Code\nAn error that occurs when the specified record doesn’t exist.\nstatic var userDeletedZone: CKError.Code\nAn error that occurs when the user deletes a record zone using the Settings app.\nstatic var zoneBusy: CKError.Code\nAn error that occurs when the server is too busy to handle the record zone operation.\nstatic var zoneNotFound: CKError.Code\nAn error that occurs when the specified record zone doesn’t exist.\nstatic var resultsTruncated: CKError.Code\nAn error that occurs when CloudKit truncates a query’s results.\nDeprecated"
  },
  {
    "title": "accountTemporarilyUnavailable | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckerror/3747482-accounttemporarilyunavailable",
    "html": "Discussion\n\nYou receive this error when the user’s iCloud account is available, but isn’t ready to support CloudKit operations. Don’t delete any cached data and don’t enqueue any additional CloudKit operations.\n\nChecking the account status after the operation fails, assuming there are no other changes to the account’s status, returns CKAccountStatus.temporarilyUnavailable. Use the CKAccountChanged notification to listen for future account status changes, and retry the operation after the status becomes CKAccountStatus.available.\n\nSee Also\nGetting Error Codes\nstatic var alreadyShared: CKError.Code\nAn error that occurs when CloudKit attempts to share a record with an existing share.\nstatic var assetFileModified: CKError.Code\nAn error that occurs when the system modifies an asset while saving it.\nstatic var assetFileNotFound: CKError.Code\nAn error that occurs when the system can’t find the specified asset.\nstatic var assetNotAvailable: CKError.Code\nAn error that occurs when the system can’t access the specified asset.\nstatic var badContainer: CKError.Code\nAn error that occurs when you use an unknown or unauthorized container.\nstatic var badDatabase: CKError.Code\nAn error that occurs when the operation can’t complete for the specified database.\nstatic var batchRequestFailed: CKError.Code\nAn error that occurs when the system rejects the entire batch of changes.\nstatic var changeTokenExpired: CKError.Code\nAn error that occurs when the change token expires.\nstatic var constraintViolation: CKError.Code\nAn error that occurs when the server rejects the request because of a unique constraint violation.\nstatic var incompatibleVersion: CKError.Code\nAn error that occurs when the current app version is older than the oldest allowed version.\nstatic var internalError: CKError.Code\nA nonrecoverable error that CloudKit encounters.\nstatic var invalidArguments: CKError.Code\nAn error that occurs when the request contains invalid information.\nstatic var limitExceeded: CKError.Code\nAn error that occurs when a request’s size exceeds the limit.\nstatic var managedAccountRestricted: CKError.Code\nAn error that occurs when CloudKit rejects a request due to a managed-account restriction.\nstatic var missingEntitlement: CKError.Code\nAn error that occurs when the app is missing a required entitlement.\nstatic var networkFailure: CKError.Code\nAn error that occurs when a network is available, but CloudKit is inaccessible.\nstatic var networkUnavailable: CKError.Code\nAn error that occurs when the network is unavailable.\nstatic var notAuthenticated: CKError.Code\nAn error that occurs when the user is unauthenticated.\nstatic var operationCancelled: CKError.Code\nAn error that occurs when an operation cancels.\nstatic var partialFailure: CKError.Code\nAn error that occurs when an operation completes with partial failures.\nstatic var participantMayNeedVerification: CKError.Code\nAn error that occurs when the user isn’t a participant of the share.\nstatic var permissionFailure: CKError.Code\nAn error that occurs when the user doesn’t have permission to save or fetch data.\nstatic var quotaExceeded: CKError.Code\nAn error that occurs when saving a record exceeds the user’s storage quota.\nstatic var referenceViolation: CKError.Code\nAn error that occurs when CloudKit can’t find the target of a reference.\nstatic var requestRateLimited: CKError.Code\nAn error that occurs when CloudKit rate-limits requests.\nstatic var serverRecordChanged: CKError.Code\nAn error that occurs when CloudKit rejects a record because the server’s version is different.\nstatic var serverRejectedRequest: CKError.Code\nAn error that occurs when CloudKit rejects the request.\nstatic var serverResponseLost: CKError.Code\nAn error that occurs when CloudKit is unable to maintain the network connection and provide a response.\nstatic var serviceUnavailable: CKError.Code\nAn error that occurs when CloudKit is unavailable.\nstatic var tooManyParticipants: CKError.Code\nAn error that occurs when a share has too many participants.\nstatic var unknownItem: CKError.Code\nAn error that occurs when the specified record doesn’t exist.\nstatic var userDeletedZone: CKError.Code\nAn error that occurs when the user deletes a record zone using the Settings app.\nstatic var zoneBusy: CKError.Code\nAn error that occurs when the server is too busy to handle the record zone operation.\nstatic var zoneNotFound: CKError.Code\nAn error that occurs when the specified record zone doesn’t exist.\nstatic var resultsTruncated: CKError.Code\nAn error that occurs when CloudKit truncates a query’s results.\nDeprecated\nenum CKError.Code\nThe error codes that CloudKit returns."
  },
  {
    "title": "serverRecord | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckerror/2299836-serverrecord",
    "html": "Discussion\n\nThis property’s value is available only when the error’s code is serverRecordChanged, which indicates the server’s record is newer than the version you try to save. Use this property’s value, along with those of ancestorRecord and clientRecord, to resolve the conflict.\n\nThe error’s userInfo dictionary contains the same value as this property. You can access it using the CKRecordChangedErrorServerRecordKey key.\n\nSee Also\nGetting Conflicted Records\nvar ancestorRecord: CKRecord?\nThe original version of the record.\nvar clientRecord: CKRecord?\nThe local version of the record that includes any changes."
  },
  {
    "title": "ancestorRecord | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckerror/2299832-ancestorrecord",
    "html": "Discussion\n\nThis property’s value is available only when the error’s code is serverRecordChanged, which indicates the server’s record is newer than the version you try to save. Use this property’s value, along with those of clientRecord and serverRecord, to resolve the conflict.\n\nThe error’s userInfo dictionary contains the same value as this property. You can access it using the CKRecordChangedErrorAncestorRecordKey key.\n\nSee Also\nGetting Conflicted Records\nvar clientRecord: CKRecord?\nThe local version of the record that includes any changes.\nvar serverRecord: CKRecord?\nThe server’s version of the record."
  },
  {
    "title": "alreadyShared | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckerror/2325196-alreadyshared",
    "html": "Discussion\n\nA record can exist in only a single share at a time. This error means that one of the following conditions exists:\n\nThe record already has an existing share.\n\nThe record has a parent, and its parent has a share.\n\nThe record is a parent, and one of its children has a share.\n\nSee Also\nGetting Error Codes\nstatic var accountTemporarilyUnavailable: CKError.Code\nAn error that occurs when the user’s iCloud account is temporarily unavailable.\nstatic var assetFileModified: CKError.Code\nAn error that occurs when the system modifies an asset while saving it.\nstatic var assetFileNotFound: CKError.Code\nAn error that occurs when the system can’t find the specified asset.\nstatic var assetNotAvailable: CKError.Code\nAn error that occurs when the system can’t access the specified asset.\nstatic var badContainer: CKError.Code\nAn error that occurs when you use an unknown or unauthorized container.\nstatic var badDatabase: CKError.Code\nAn error that occurs when the operation can’t complete for the specified database.\nstatic var batchRequestFailed: CKError.Code\nAn error that occurs when the system rejects the entire batch of changes.\nstatic var changeTokenExpired: CKError.Code\nAn error that occurs when the change token expires.\nstatic var constraintViolation: CKError.Code\nAn error that occurs when the server rejects the request because of a unique constraint violation.\nstatic var incompatibleVersion: CKError.Code\nAn error that occurs when the current app version is older than the oldest allowed version.\nstatic var internalError: CKError.Code\nA nonrecoverable error that CloudKit encounters.\nstatic var invalidArguments: CKError.Code\nAn error that occurs when the request contains invalid information.\nstatic var limitExceeded: CKError.Code\nAn error that occurs when a request’s size exceeds the limit.\nstatic var managedAccountRestricted: CKError.Code\nAn error that occurs when CloudKit rejects a request due to a managed-account restriction.\nstatic var missingEntitlement: CKError.Code\nAn error that occurs when the app is missing a required entitlement.\nstatic var networkFailure: CKError.Code\nAn error that occurs when a network is available, but CloudKit is inaccessible.\nstatic var networkUnavailable: CKError.Code\nAn error that occurs when the network is unavailable.\nstatic var notAuthenticated: CKError.Code\nAn error that occurs when the user is unauthenticated.\nstatic var operationCancelled: CKError.Code\nAn error that occurs when an operation cancels.\nstatic var partialFailure: CKError.Code\nAn error that occurs when an operation completes with partial failures.\nstatic var participantMayNeedVerification: CKError.Code\nAn error that occurs when the user isn’t a participant of the share.\nstatic var permissionFailure: CKError.Code\nAn error that occurs when the user doesn’t have permission to save or fetch data.\nstatic var quotaExceeded: CKError.Code\nAn error that occurs when saving a record exceeds the user’s storage quota.\nstatic var referenceViolation: CKError.Code\nAn error that occurs when CloudKit can’t find the target of a reference.\nstatic var requestRateLimited: CKError.Code\nAn error that occurs when CloudKit rate-limits requests.\nstatic var serverRecordChanged: CKError.Code\nAn error that occurs when CloudKit rejects a record because the server’s version is different.\nstatic var serverRejectedRequest: CKError.Code\nAn error that occurs when CloudKit rejects the request.\nstatic var serverResponseLost: CKError.Code\nAn error that occurs when CloudKit is unable to maintain the network connection and provide a response.\nstatic var serviceUnavailable: CKError.Code\nAn error that occurs when CloudKit is unavailable.\nstatic var tooManyParticipants: CKError.Code\nAn error that occurs when a share has too many participants.\nstatic var unknownItem: CKError.Code\nAn error that occurs when the specified record doesn’t exist.\nstatic var userDeletedZone: CKError.Code\nAn error that occurs when the user deletes a record zone using the Settings app.\nstatic var zoneBusy: CKError.Code\nAn error that occurs when the server is too busy to handle the record zone operation.\nstatic var zoneNotFound: CKError.Code\nAn error that occurs when the specified record zone doesn’t exist.\nstatic var resultsTruncated: CKError.Code\nAn error that occurs when CloudKit truncates a query’s results.\nDeprecated\nenum CKError.Code\nThe error codes that CloudKit returns."
  },
  {
    "title": "partialErrorsByItemID | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckerror/2603999-partialerrorsbyitemid",
    "html": "Discussion\n\nThis property’s value is a dictionary that maps an item ID to an error. The type of each ID depends on where the error occurs. For example, if you receive a partial error when modifying a record, the ID is an instance of CKRecord.ID that corresponds to the record that CloudKit can’t modify.\n\nThe error’s userInfo dictionary contains the same value as this property. You can access it using the CKPartialErrorsByItemIDKey key."
  },
  {
    "title": "retryAfterSeconds | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckerror/2299866-retryafterseconds",
    "html": "Discussion\n\nThis property’s value is available only when the error’s code is serviceUnavailable or requestRateLimited.\n\nThe error’s userInfo dictionary contains the same value as this property. You can access it using the CKErrorRetryAfterKey key."
  },
  {
    "title": "clientRecord | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckerror/2299848-clientrecord",
    "html": "Discussion\n\nThis property’s value is available only when the error’s code is serverRecordChanged, which indicates the server’s record is newer than the version you try to save. Use this property’s value, along with those of ancestorRecord and serverRecord, to resolve the conflict.\n\nThe error’s userInfo dictionary contains the same value as this property. you can access it using the CKRecordChangedErrorClientRecordKey key.\n\nSee Also\nGetting Conflicted Records\nvar ancestorRecord: CKRecord?\nThe original version of the record.\nvar serverRecord: CKRecord?\nThe server’s version of the record."
  },
  {
    "title": "assetFileModified | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckerror/2325217-assetfilemodified",
    "html": "See Also\nGetting Error Codes\nstatic var accountTemporarilyUnavailable: CKError.Code\nAn error that occurs when the user’s iCloud account is temporarily unavailable.\nstatic var alreadyShared: CKError.Code\nAn error that occurs when CloudKit attempts to share a record with an existing share.\nstatic var assetFileNotFound: CKError.Code\nAn error that occurs when the system can’t find the specified asset.\nstatic var assetNotAvailable: CKError.Code\nAn error that occurs when the system can’t access the specified asset.\nstatic var badContainer: CKError.Code\nAn error that occurs when you use an unknown or unauthorized container.\nstatic var badDatabase: CKError.Code\nAn error that occurs when the operation can’t complete for the specified database.\nstatic var batchRequestFailed: CKError.Code\nAn error that occurs when the system rejects the entire batch of changes.\nstatic var changeTokenExpired: CKError.Code\nAn error that occurs when the change token expires.\nstatic var constraintViolation: CKError.Code\nAn error that occurs when the server rejects the request because of a unique constraint violation.\nstatic var incompatibleVersion: CKError.Code\nAn error that occurs when the current app version is older than the oldest allowed version.\nstatic var internalError: CKError.Code\nA nonrecoverable error that CloudKit encounters.\nstatic var invalidArguments: CKError.Code\nAn error that occurs when the request contains invalid information.\nstatic var limitExceeded: CKError.Code\nAn error that occurs when a request’s size exceeds the limit.\nstatic var managedAccountRestricted: CKError.Code\nAn error that occurs when CloudKit rejects a request due to a managed-account restriction.\nstatic var missingEntitlement: CKError.Code\nAn error that occurs when the app is missing a required entitlement.\nstatic var networkFailure: CKError.Code\nAn error that occurs when a network is available, but CloudKit is inaccessible.\nstatic var networkUnavailable: CKError.Code\nAn error that occurs when the network is unavailable.\nstatic var notAuthenticated: CKError.Code\nAn error that occurs when the user is unauthenticated.\nstatic var operationCancelled: CKError.Code\nAn error that occurs when an operation cancels.\nstatic var partialFailure: CKError.Code\nAn error that occurs when an operation completes with partial failures.\nstatic var participantMayNeedVerification: CKError.Code\nAn error that occurs when the user isn’t a participant of the share.\nstatic var permissionFailure: CKError.Code\nAn error that occurs when the user doesn’t have permission to save or fetch data.\nstatic var quotaExceeded: CKError.Code\nAn error that occurs when saving a record exceeds the user’s storage quota.\nstatic var referenceViolation: CKError.Code\nAn error that occurs when CloudKit can’t find the target of a reference.\nstatic var requestRateLimited: CKError.Code\nAn error that occurs when CloudKit rate-limits requests.\nstatic var serverRecordChanged: CKError.Code\nAn error that occurs when CloudKit rejects a record because the server’s version is different.\nstatic var serverRejectedRequest: CKError.Code\nAn error that occurs when CloudKit rejects the request.\nstatic var serverResponseLost: CKError.Code\nAn error that occurs when CloudKit is unable to maintain the network connection and provide a response.\nstatic var serviceUnavailable: CKError.Code\nAn error that occurs when CloudKit is unavailable.\nstatic var tooManyParticipants: CKError.Code\nAn error that occurs when a share has too many participants.\nstatic var unknownItem: CKError.Code\nAn error that occurs when the specified record doesn’t exist.\nstatic var userDeletedZone: CKError.Code\nAn error that occurs when the user deletes a record zone using the Settings app.\nstatic var zoneBusy: CKError.Code\nAn error that occurs when the server is too busy to handle the record zone operation.\nstatic var zoneNotFound: CKError.Code\nAn error that occurs when the specified record zone doesn’t exist.\nstatic var resultsTruncated: CKError.Code\nAn error that occurs when CloudKit truncates a query’s results.\nDeprecated\nenum CKError.Code\nThe error codes that CloudKit returns."
  },
  {
    "title": "assetFileNotFound | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckerror/2325214-assetfilenotfound",
    "html": "See Also\nGetting Error Codes\nstatic var accountTemporarilyUnavailable: CKError.Code\nAn error that occurs when the user’s iCloud account is temporarily unavailable.\nstatic var alreadyShared: CKError.Code\nAn error that occurs when CloudKit attempts to share a record with an existing share.\nstatic var assetFileModified: CKError.Code\nAn error that occurs when the system modifies an asset while saving it.\nstatic var assetNotAvailable: CKError.Code\nAn error that occurs when the system can’t access the specified asset.\nstatic var badContainer: CKError.Code\nAn error that occurs when you use an unknown or unauthorized container.\nstatic var badDatabase: CKError.Code\nAn error that occurs when the operation can’t complete for the specified database.\nstatic var batchRequestFailed: CKError.Code\nAn error that occurs when the system rejects the entire batch of changes.\nstatic var changeTokenExpired: CKError.Code\nAn error that occurs when the change token expires.\nstatic var constraintViolation: CKError.Code\nAn error that occurs when the server rejects the request because of a unique constraint violation.\nstatic var incompatibleVersion: CKError.Code\nAn error that occurs when the current app version is older than the oldest allowed version.\nstatic var internalError: CKError.Code\nA nonrecoverable error that CloudKit encounters.\nstatic var invalidArguments: CKError.Code\nAn error that occurs when the request contains invalid information.\nstatic var limitExceeded: CKError.Code\nAn error that occurs when a request’s size exceeds the limit.\nstatic var managedAccountRestricted: CKError.Code\nAn error that occurs when CloudKit rejects a request due to a managed-account restriction.\nstatic var missingEntitlement: CKError.Code\nAn error that occurs when the app is missing a required entitlement.\nstatic var networkFailure: CKError.Code\nAn error that occurs when a network is available, but CloudKit is inaccessible.\nstatic var networkUnavailable: CKError.Code\nAn error that occurs when the network is unavailable.\nstatic var notAuthenticated: CKError.Code\nAn error that occurs when the user is unauthenticated.\nstatic var operationCancelled: CKError.Code\nAn error that occurs when an operation cancels.\nstatic var partialFailure: CKError.Code\nAn error that occurs when an operation completes with partial failures.\nstatic var participantMayNeedVerification: CKError.Code\nAn error that occurs when the user isn’t a participant of the share.\nstatic var permissionFailure: CKError.Code\nAn error that occurs when the user doesn’t have permission to save or fetch data.\nstatic var quotaExceeded: CKError.Code\nAn error that occurs when saving a record exceeds the user’s storage quota.\nstatic var referenceViolation: CKError.Code\nAn error that occurs when CloudKit can’t find the target of a reference.\nstatic var requestRateLimited: CKError.Code\nAn error that occurs when CloudKit rate-limits requests.\nstatic var serverRecordChanged: CKError.Code\nAn error that occurs when CloudKit rejects a record because the server’s version is different.\nstatic var serverRejectedRequest: CKError.Code\nAn error that occurs when CloudKit rejects the request.\nstatic var serverResponseLost: CKError.Code\nAn error that occurs when CloudKit is unable to maintain the network connection and provide a response.\nstatic var serviceUnavailable: CKError.Code\nAn error that occurs when CloudKit is unavailable.\nstatic var tooManyParticipants: CKError.Code\nAn error that occurs when a share has too many participants.\nstatic var unknownItem: CKError.Code\nAn error that occurs when the specified record doesn’t exist.\nstatic var userDeletedZone: CKError.Code\nAn error that occurs when the user deletes a record zone using the Settings app.\nstatic var zoneBusy: CKError.Code\nAn error that occurs when the server is too busy to handle the record zone operation.\nstatic var zoneNotFound: CKError.Code\nAn error that occurs when the specified record zone doesn’t exist.\nstatic var resultsTruncated: CKError.Code\nAn error that occurs when CloudKit truncates a query’s results.\nDeprecated\nenum CKError.Code\nThe error codes that CloudKit returns."
  },
  {
    "title": "badContainer | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckerror/2325218-badcontainer",
    "html": "See Also\nGetting Error Codes\nstatic var accountTemporarilyUnavailable: CKError.Code\nAn error that occurs when the user’s iCloud account is temporarily unavailable.\nstatic var alreadyShared: CKError.Code\nAn error that occurs when CloudKit attempts to share a record with an existing share.\nstatic var assetFileModified: CKError.Code\nAn error that occurs when the system modifies an asset while saving it.\nstatic var assetFileNotFound: CKError.Code\nAn error that occurs when the system can’t find the specified asset.\nstatic var assetNotAvailable: CKError.Code\nAn error that occurs when the system can’t access the specified asset.\nstatic var badDatabase: CKError.Code\nAn error that occurs when the operation can’t complete for the specified database.\nstatic var batchRequestFailed: CKError.Code\nAn error that occurs when the system rejects the entire batch of changes.\nstatic var changeTokenExpired: CKError.Code\nAn error that occurs when the change token expires.\nstatic var constraintViolation: CKError.Code\nAn error that occurs when the server rejects the request because of a unique constraint violation.\nstatic var incompatibleVersion: CKError.Code\nAn error that occurs when the current app version is older than the oldest allowed version.\nstatic var internalError: CKError.Code\nA nonrecoverable error that CloudKit encounters.\nstatic var invalidArguments: CKError.Code\nAn error that occurs when the request contains invalid information.\nstatic var limitExceeded: CKError.Code\nAn error that occurs when a request’s size exceeds the limit.\nstatic var managedAccountRestricted: CKError.Code\nAn error that occurs when CloudKit rejects a request due to a managed-account restriction.\nstatic var missingEntitlement: CKError.Code\nAn error that occurs when the app is missing a required entitlement.\nstatic var networkFailure: CKError.Code\nAn error that occurs when a network is available, but CloudKit is inaccessible.\nstatic var networkUnavailable: CKError.Code\nAn error that occurs when the network is unavailable.\nstatic var notAuthenticated: CKError.Code\nAn error that occurs when the user is unauthenticated.\nstatic var operationCancelled: CKError.Code\nAn error that occurs when an operation cancels.\nstatic var partialFailure: CKError.Code\nAn error that occurs when an operation completes with partial failures.\nstatic var participantMayNeedVerification: CKError.Code\nAn error that occurs when the user isn’t a participant of the share.\nstatic var permissionFailure: CKError.Code\nAn error that occurs when the user doesn’t have permission to save or fetch data.\nstatic var quotaExceeded: CKError.Code\nAn error that occurs when saving a record exceeds the user’s storage quota.\nstatic var referenceViolation: CKError.Code\nAn error that occurs when CloudKit can’t find the target of a reference.\nstatic var requestRateLimited: CKError.Code\nAn error that occurs when CloudKit rate-limits requests.\nstatic var serverRecordChanged: CKError.Code\nAn error that occurs when CloudKit rejects a record because the server’s version is different.\nstatic var serverRejectedRequest: CKError.Code\nAn error that occurs when CloudKit rejects the request.\nstatic var serverResponseLost: CKError.Code\nAn error that occurs when CloudKit is unable to maintain the network connection and provide a response.\nstatic var serviceUnavailable: CKError.Code\nAn error that occurs when CloudKit is unavailable.\nstatic var tooManyParticipants: CKError.Code\nAn error that occurs when a share has too many participants.\nstatic var unknownItem: CKError.Code\nAn error that occurs when the specified record doesn’t exist.\nstatic var userDeletedZone: CKError.Code\nAn error that occurs when the user deletes a record zone using the Settings app.\nstatic var zoneBusy: CKError.Code\nAn error that occurs when the server is too busy to handle the record zone operation.\nstatic var zoneNotFound: CKError.Code\nAn error that occurs when the specified record zone doesn’t exist.\nstatic var resultsTruncated: CKError.Code\nAn error that occurs when CloudKit truncates a query’s results.\nDeprecated\nenum CKError.Code\nThe error codes that CloudKit returns."
  },
  {
    "title": "batchRequestFailed | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckerror/2325195-batchrequestfailed",
    "html": "Discussion\n\nThis error occurs when an operation attempts to save multiple items in a custom zone, but one of those items encounters an error. Because custom zones are atomic, the entire batch fails. The items that cause the problem have their own errors, and all other items in the batch have a CKError.Code.batchRequestFailed error to indicate that the system can’t save them.\n\nThis error indicates that the system can’t process the associated item due to an error in another item in the operation. Check the other per-item errors under CKPartialErrorsByItemIDKey for any that aren't CKError.Code.batchRequestFailed errors. Handle those errors, and then retry all items in the operation.\n\nSee Also\nGetting Error Codes\nstatic var accountTemporarilyUnavailable: CKError.Code\nAn error that occurs when the user’s iCloud account is temporarily unavailable.\nstatic var alreadyShared: CKError.Code\nAn error that occurs when CloudKit attempts to share a record with an existing share.\nstatic var assetFileModified: CKError.Code\nAn error that occurs when the system modifies an asset while saving it.\nstatic var assetFileNotFound: CKError.Code\nAn error that occurs when the system can’t find the specified asset.\nstatic var assetNotAvailable: CKError.Code\nAn error that occurs when the system can’t access the specified asset.\nstatic var badContainer: CKError.Code\nAn error that occurs when you use an unknown or unauthorized container.\nstatic var badDatabase: CKError.Code\nAn error that occurs when the operation can’t complete for the specified database.\nstatic var changeTokenExpired: CKError.Code\nAn error that occurs when the change token expires.\nstatic var constraintViolation: CKError.Code\nAn error that occurs when the server rejects the request because of a unique constraint violation.\nstatic var incompatibleVersion: CKError.Code\nAn error that occurs when the current app version is older than the oldest allowed version.\nstatic var internalError: CKError.Code\nA nonrecoverable error that CloudKit encounters.\nstatic var invalidArguments: CKError.Code\nAn error that occurs when the request contains invalid information.\nstatic var limitExceeded: CKError.Code\nAn error that occurs when a request’s size exceeds the limit.\nstatic var managedAccountRestricted: CKError.Code\nAn error that occurs when CloudKit rejects a request due to a managed-account restriction.\nstatic var missingEntitlement: CKError.Code\nAn error that occurs when the app is missing a required entitlement.\nstatic var networkFailure: CKError.Code\nAn error that occurs when a network is available, but CloudKit is inaccessible.\nstatic var networkUnavailable: CKError.Code\nAn error that occurs when the network is unavailable.\nstatic var notAuthenticated: CKError.Code\nAn error that occurs when the user is unauthenticated.\nstatic var operationCancelled: CKError.Code\nAn error that occurs when an operation cancels.\nstatic var partialFailure: CKError.Code\nAn error that occurs when an operation completes with partial failures.\nstatic var participantMayNeedVerification: CKError.Code\nAn error that occurs when the user isn’t a participant of the share.\nstatic var permissionFailure: CKError.Code\nAn error that occurs when the user doesn’t have permission to save or fetch data.\nstatic var quotaExceeded: CKError.Code\nAn error that occurs when saving a record exceeds the user’s storage quota.\nstatic var referenceViolation: CKError.Code\nAn error that occurs when CloudKit can’t find the target of a reference.\nstatic var requestRateLimited: CKError.Code\nAn error that occurs when CloudKit rate-limits requests.\nstatic var serverRecordChanged: CKError.Code\nAn error that occurs when CloudKit rejects a record because the server’s version is different.\nstatic var serverRejectedRequest: CKError.Code\nAn error that occurs when CloudKit rejects the request.\nstatic var serverResponseLost: CKError.Code\nAn error that occurs when CloudKit is unable to maintain the network connection and provide a response.\nstatic var serviceUnavailable: CKError.Code\nAn error that occurs when CloudKit is unavailable.\nstatic var tooManyParticipants: CKError.Code\nAn error that occurs when a share has too many participants.\nstatic var unknownItem: CKError.Code\nAn error that occurs when the specified record doesn’t exist.\nstatic var userDeletedZone: CKError.Code\nAn error that occurs when the user deletes a record zone using the Settings app.\nstatic var zoneBusy: CKError.Code\nAn error that occurs when the server is too busy to handle the record zone operation.\nstatic var zoneNotFound: CKError.Code\nAn error that occurs when the specified record zone doesn’t exist.\nstatic var resultsTruncated: CKError.Code\nAn error that occurs when CloudKit truncates a query’s results.\nDeprecated\nenum CKError.Code\nThe error codes that CloudKit returns."
  },
  {
    "title": "incompatibleVersion | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckerror/2325215-incompatibleversion",
    "html": "See Also\nGetting Error Codes\nstatic var accountTemporarilyUnavailable: CKError.Code\nAn error that occurs when the user’s iCloud account is temporarily unavailable.\nstatic var alreadyShared: CKError.Code\nAn error that occurs when CloudKit attempts to share a record with an existing share.\nstatic var assetFileModified: CKError.Code\nAn error that occurs when the system modifies an asset while saving it.\nstatic var assetFileNotFound: CKError.Code\nAn error that occurs when the system can’t find the specified asset.\nstatic var assetNotAvailable: CKError.Code\nAn error that occurs when the system can’t access the specified asset.\nstatic var badContainer: CKError.Code\nAn error that occurs when you use an unknown or unauthorized container.\nstatic var badDatabase: CKError.Code\nAn error that occurs when the operation can’t complete for the specified database.\nstatic var batchRequestFailed: CKError.Code\nAn error that occurs when the system rejects the entire batch of changes.\nstatic var changeTokenExpired: CKError.Code\nAn error that occurs when the change token expires.\nstatic var constraintViolation: CKError.Code\nAn error that occurs when the server rejects the request because of a unique constraint violation.\nstatic var internalError: CKError.Code\nA nonrecoverable error that CloudKit encounters.\nstatic var invalidArguments: CKError.Code\nAn error that occurs when the request contains invalid information.\nstatic var limitExceeded: CKError.Code\nAn error that occurs when a request’s size exceeds the limit.\nstatic var managedAccountRestricted: CKError.Code\nAn error that occurs when CloudKit rejects a request due to a managed-account restriction.\nstatic var missingEntitlement: CKError.Code\nAn error that occurs when the app is missing a required entitlement.\nstatic var networkFailure: CKError.Code\nAn error that occurs when a network is available, but CloudKit is inaccessible.\nstatic var networkUnavailable: CKError.Code\nAn error that occurs when the network is unavailable.\nstatic var notAuthenticated: CKError.Code\nAn error that occurs when the user is unauthenticated.\nstatic var operationCancelled: CKError.Code\nAn error that occurs when an operation cancels.\nstatic var partialFailure: CKError.Code\nAn error that occurs when an operation completes with partial failures.\nstatic var participantMayNeedVerification: CKError.Code\nAn error that occurs when the user isn’t a participant of the share.\nstatic var permissionFailure: CKError.Code\nAn error that occurs when the user doesn’t have permission to save or fetch data.\nstatic var quotaExceeded: CKError.Code\nAn error that occurs when saving a record exceeds the user’s storage quota.\nstatic var referenceViolation: CKError.Code\nAn error that occurs when CloudKit can’t find the target of a reference.\nstatic var requestRateLimited: CKError.Code\nAn error that occurs when CloudKit rate-limits requests.\nstatic var serverRecordChanged: CKError.Code\nAn error that occurs when CloudKit rejects a record because the server’s version is different.\nstatic var serverRejectedRequest: CKError.Code\nAn error that occurs when CloudKit rejects the request.\nstatic var serverResponseLost: CKError.Code\nAn error that occurs when CloudKit is unable to maintain the network connection and provide a response.\nstatic var serviceUnavailable: CKError.Code\nAn error that occurs when CloudKit is unavailable.\nstatic var tooManyParticipants: CKError.Code\nAn error that occurs when a share has too many participants.\nstatic var unknownItem: CKError.Code\nAn error that occurs when the specified record doesn’t exist.\nstatic var userDeletedZone: CKError.Code\nAn error that occurs when the user deletes a record zone using the Settings app.\nstatic var zoneBusy: CKError.Code\nAn error that occurs when the server is too busy to handle the record zone operation.\nstatic var zoneNotFound: CKError.Code\nAn error that occurs when the specified record zone doesn’t exist.\nstatic var resultsTruncated: CKError.Code\nAn error that occurs when CloudKit truncates a query’s results.\nDeprecated\nenum CKError.Code\nThe error codes that CloudKit returns."
  },
  {
    "title": "constraintViolation | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckerror/2325200-constraintviolation",
    "html": "See Also\nGetting Error Codes\nstatic var accountTemporarilyUnavailable: CKError.Code\nAn error that occurs when the user’s iCloud account is temporarily unavailable.\nstatic var alreadyShared: CKError.Code\nAn error that occurs when CloudKit attempts to share a record with an existing share.\nstatic var assetFileModified: CKError.Code\nAn error that occurs when the system modifies an asset while saving it.\nstatic var assetFileNotFound: CKError.Code\nAn error that occurs when the system can’t find the specified asset.\nstatic var assetNotAvailable: CKError.Code\nAn error that occurs when the system can’t access the specified asset.\nstatic var badContainer: CKError.Code\nAn error that occurs when you use an unknown or unauthorized container.\nstatic var badDatabase: CKError.Code\nAn error that occurs when the operation can’t complete for the specified database.\nstatic var batchRequestFailed: CKError.Code\nAn error that occurs when the system rejects the entire batch of changes.\nstatic var changeTokenExpired: CKError.Code\nAn error that occurs when the change token expires.\nstatic var incompatibleVersion: CKError.Code\nAn error that occurs when the current app version is older than the oldest allowed version.\nstatic var internalError: CKError.Code\nA nonrecoverable error that CloudKit encounters.\nstatic var invalidArguments: CKError.Code\nAn error that occurs when the request contains invalid information.\nstatic var limitExceeded: CKError.Code\nAn error that occurs when a request’s size exceeds the limit.\nstatic var managedAccountRestricted: CKError.Code\nAn error that occurs when CloudKit rejects a request due to a managed-account restriction.\nstatic var missingEntitlement: CKError.Code\nAn error that occurs when the app is missing a required entitlement.\nstatic var networkFailure: CKError.Code\nAn error that occurs when a network is available, but CloudKit is inaccessible.\nstatic var networkUnavailable: CKError.Code\nAn error that occurs when the network is unavailable.\nstatic var notAuthenticated: CKError.Code\nAn error that occurs when the user is unauthenticated.\nstatic var operationCancelled: CKError.Code\nAn error that occurs when an operation cancels.\nstatic var partialFailure: CKError.Code\nAn error that occurs when an operation completes with partial failures.\nstatic var participantMayNeedVerification: CKError.Code\nAn error that occurs when the user isn’t a participant of the share.\nstatic var permissionFailure: CKError.Code\nAn error that occurs when the user doesn’t have permission to save or fetch data.\nstatic var quotaExceeded: CKError.Code\nAn error that occurs when saving a record exceeds the user’s storage quota.\nstatic var referenceViolation: CKError.Code\nAn error that occurs when CloudKit can’t find the target of a reference.\nstatic var requestRateLimited: CKError.Code\nAn error that occurs when CloudKit rate-limits requests.\nstatic var serverRecordChanged: CKError.Code\nAn error that occurs when CloudKit rejects a record because the server’s version is different.\nstatic var serverRejectedRequest: CKError.Code\nAn error that occurs when CloudKit rejects the request.\nstatic var serverResponseLost: CKError.Code\nAn error that occurs when CloudKit is unable to maintain the network connection and provide a response.\nstatic var serviceUnavailable: CKError.Code\nAn error that occurs when CloudKit is unavailable.\nstatic var tooManyParticipants: CKError.Code\nAn error that occurs when a share has too many participants.\nstatic var unknownItem: CKError.Code\nAn error that occurs when the specified record doesn’t exist.\nstatic var userDeletedZone: CKError.Code\nAn error that occurs when the user deletes a record zone using the Settings app.\nstatic var zoneBusy: CKError.Code\nAn error that occurs when the server is too busy to handle the record zone operation.\nstatic var zoneNotFound: CKError.Code\nAn error that occurs when the specified record zone doesn’t exist.\nstatic var resultsTruncated: CKError.Code\nAn error that occurs when CloudKit truncates a query’s results.\nDeprecated\nenum CKError.Code\nThe error codes that CloudKit returns."
  },
  {
    "title": "operationCancelled | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckerror/2325213-operationcancelled",
    "html": "See Also\nGetting Error Codes\nstatic var accountTemporarilyUnavailable: CKError.Code\nAn error that occurs when the user’s iCloud account is temporarily unavailable.\nstatic var alreadyShared: CKError.Code\nAn error that occurs when CloudKit attempts to share a record with an existing share.\nstatic var assetFileModified: CKError.Code\nAn error that occurs when the system modifies an asset while saving it.\nstatic var assetFileNotFound: CKError.Code\nAn error that occurs when the system can’t find the specified asset.\nstatic var assetNotAvailable: CKError.Code\nAn error that occurs when the system can’t access the specified asset.\nstatic var badContainer: CKError.Code\nAn error that occurs when you use an unknown or unauthorized container.\nstatic var badDatabase: CKError.Code\nAn error that occurs when the operation can’t complete for the specified database.\nstatic var batchRequestFailed: CKError.Code\nAn error that occurs when the system rejects the entire batch of changes.\nstatic var changeTokenExpired: CKError.Code\nAn error that occurs when the change token expires.\nstatic var constraintViolation: CKError.Code\nAn error that occurs when the server rejects the request because of a unique constraint violation.\nstatic var incompatibleVersion: CKError.Code\nAn error that occurs when the current app version is older than the oldest allowed version.\nstatic var internalError: CKError.Code\nA nonrecoverable error that CloudKit encounters.\nstatic var invalidArguments: CKError.Code\nAn error that occurs when the request contains invalid information.\nstatic var limitExceeded: CKError.Code\nAn error that occurs when a request’s size exceeds the limit.\nstatic var managedAccountRestricted: CKError.Code\nAn error that occurs when CloudKit rejects a request due to a managed-account restriction.\nstatic var missingEntitlement: CKError.Code\nAn error that occurs when the app is missing a required entitlement.\nstatic var networkFailure: CKError.Code\nAn error that occurs when a network is available, but CloudKit is inaccessible.\nstatic var networkUnavailable: CKError.Code\nAn error that occurs when the network is unavailable.\nstatic var notAuthenticated: CKError.Code\nAn error that occurs when the user is unauthenticated.\nstatic var partialFailure: CKError.Code\nAn error that occurs when an operation completes with partial failures.\nstatic var participantMayNeedVerification: CKError.Code\nAn error that occurs when the user isn’t a participant of the share.\nstatic var permissionFailure: CKError.Code\nAn error that occurs when the user doesn’t have permission to save or fetch data.\nstatic var quotaExceeded: CKError.Code\nAn error that occurs when saving a record exceeds the user’s storage quota.\nstatic var referenceViolation: CKError.Code\nAn error that occurs when CloudKit can’t find the target of a reference.\nstatic var requestRateLimited: CKError.Code\nAn error that occurs when CloudKit rate-limits requests.\nstatic var serverRecordChanged: CKError.Code\nAn error that occurs when CloudKit rejects a record because the server’s version is different.\nstatic var serverRejectedRequest: CKError.Code\nAn error that occurs when CloudKit rejects the request.\nstatic var serverResponseLost: CKError.Code\nAn error that occurs when CloudKit is unable to maintain the network connection and provide a response.\nstatic var serviceUnavailable: CKError.Code\nAn error that occurs when CloudKit is unavailable.\nstatic var tooManyParticipants: CKError.Code\nAn error that occurs when a share has too many participants.\nstatic var unknownItem: CKError.Code\nAn error that occurs when the specified record doesn’t exist.\nstatic var userDeletedZone: CKError.Code\nAn error that occurs when the user deletes a record zone using the Settings app.\nstatic var zoneBusy: CKError.Code\nAn error that occurs when the server is too busy to handle the record zone operation.\nstatic var zoneNotFound: CKError.Code\nAn error that occurs when the specified record zone doesn’t exist.\nstatic var resultsTruncated: CKError.Code\nAn error that occurs when CloudKit truncates a query’s results.\nDeprecated\nenum CKError.Code\nThe error codes that CloudKit returns."
  },
  {
    "title": "internalError | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckerror/2325203-internalerror",
    "html": "Discussion\n\nIf you receive this error, file a bug report that includes the error log.\n\nSee Also\nGetting Error Codes\nstatic var accountTemporarilyUnavailable: CKError.Code\nAn error that occurs when the user’s iCloud account is temporarily unavailable.\nstatic var alreadyShared: CKError.Code\nAn error that occurs when CloudKit attempts to share a record with an existing share.\nstatic var assetFileModified: CKError.Code\nAn error that occurs when the system modifies an asset while saving it.\nstatic var assetFileNotFound: CKError.Code\nAn error that occurs when the system can’t find the specified asset.\nstatic var assetNotAvailable: CKError.Code\nAn error that occurs when the system can’t access the specified asset.\nstatic var badContainer: CKError.Code\nAn error that occurs when you use an unknown or unauthorized container.\nstatic var badDatabase: CKError.Code\nAn error that occurs when the operation can’t complete for the specified database.\nstatic var batchRequestFailed: CKError.Code\nAn error that occurs when the system rejects the entire batch of changes.\nstatic var changeTokenExpired: CKError.Code\nAn error that occurs when the change token expires.\nstatic var constraintViolation: CKError.Code\nAn error that occurs when the server rejects the request because of a unique constraint violation.\nstatic var incompatibleVersion: CKError.Code\nAn error that occurs when the current app version is older than the oldest allowed version.\nstatic var invalidArguments: CKError.Code\nAn error that occurs when the request contains invalid information.\nstatic var limitExceeded: CKError.Code\nAn error that occurs when a request’s size exceeds the limit.\nstatic var managedAccountRestricted: CKError.Code\nAn error that occurs when CloudKit rejects a request due to a managed-account restriction.\nstatic var missingEntitlement: CKError.Code\nAn error that occurs when the app is missing a required entitlement.\nstatic var networkFailure: CKError.Code\nAn error that occurs when a network is available, but CloudKit is inaccessible.\nstatic var networkUnavailable: CKError.Code\nAn error that occurs when the network is unavailable.\nstatic var notAuthenticated: CKError.Code\nAn error that occurs when the user is unauthenticated.\nstatic var operationCancelled: CKError.Code\nAn error that occurs when an operation cancels.\nstatic var partialFailure: CKError.Code\nAn error that occurs when an operation completes with partial failures.\nstatic var participantMayNeedVerification: CKError.Code\nAn error that occurs when the user isn’t a participant of the share.\nstatic var permissionFailure: CKError.Code\nAn error that occurs when the user doesn’t have permission to save or fetch data.\nstatic var quotaExceeded: CKError.Code\nAn error that occurs when saving a record exceeds the user’s storage quota.\nstatic var referenceViolation: CKError.Code\nAn error that occurs when CloudKit can’t find the target of a reference.\nstatic var requestRateLimited: CKError.Code\nAn error that occurs when CloudKit rate-limits requests.\nstatic var serverRecordChanged: CKError.Code\nAn error that occurs when CloudKit rejects a record because the server’s version is different.\nstatic var serverRejectedRequest: CKError.Code\nAn error that occurs when CloudKit rejects the request.\nstatic var serverResponseLost: CKError.Code\nAn error that occurs when CloudKit is unable to maintain the network connection and provide a response.\nstatic var serviceUnavailable: CKError.Code\nAn error that occurs when CloudKit is unavailable.\nstatic var tooManyParticipants: CKError.Code\nAn error that occurs when a share has too many participants.\nstatic var unknownItem: CKError.Code\nAn error that occurs when the specified record doesn’t exist.\nstatic var userDeletedZone: CKError.Code\nAn error that occurs when the user deletes a record zone using the Settings app.\nstatic var zoneBusy: CKError.Code\nAn error that occurs when the server is too busy to handle the record zone operation.\nstatic var zoneNotFound: CKError.Code\nAn error that occurs when the specified record zone doesn’t exist.\nstatic var resultsTruncated: CKError.Code\nAn error that occurs when CloudKit truncates a query’s results.\nDeprecated\nenum CKError.Code\nThe error codes that CloudKit returns."
  },
  {
    "title": "limitExceeded | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckerror/2325211-limitexceeded",
    "html": "Discussion\n\nThe server can change its limits at any time, but the following are general guidelines:\n\n400 items (records or shares) per operation\n\n2 MB per request (not counting asset sizes)\n\nIf your app receives CKError.Code.limitExceeded, it must split the operation in half and try both requests again.\n\nSee Also\nGetting Error Codes\nstatic var accountTemporarilyUnavailable: CKError.Code\nAn error that occurs when the user’s iCloud account is temporarily unavailable.\nstatic var alreadyShared: CKError.Code\nAn error that occurs when CloudKit attempts to share a record with an existing share.\nstatic var assetFileModified: CKError.Code\nAn error that occurs when the system modifies an asset while saving it.\nstatic var assetFileNotFound: CKError.Code\nAn error that occurs when the system can’t find the specified asset.\nstatic var assetNotAvailable: CKError.Code\nAn error that occurs when the system can’t access the specified asset.\nstatic var badContainer: CKError.Code\nAn error that occurs when you use an unknown or unauthorized container.\nstatic var badDatabase: CKError.Code\nAn error that occurs when the operation can’t complete for the specified database.\nstatic var batchRequestFailed: CKError.Code\nAn error that occurs when the system rejects the entire batch of changes.\nstatic var changeTokenExpired: CKError.Code\nAn error that occurs when the change token expires.\nstatic var constraintViolation: CKError.Code\nAn error that occurs when the server rejects the request because of a unique constraint violation.\nstatic var incompatibleVersion: CKError.Code\nAn error that occurs when the current app version is older than the oldest allowed version.\nstatic var internalError: CKError.Code\nA nonrecoverable error that CloudKit encounters.\nstatic var invalidArguments: CKError.Code\nAn error that occurs when the request contains invalid information.\nstatic var managedAccountRestricted: CKError.Code\nAn error that occurs when CloudKit rejects a request due to a managed-account restriction.\nstatic var missingEntitlement: CKError.Code\nAn error that occurs when the app is missing a required entitlement.\nstatic var networkFailure: CKError.Code\nAn error that occurs when a network is available, but CloudKit is inaccessible.\nstatic var networkUnavailable: CKError.Code\nAn error that occurs when the network is unavailable.\nstatic var notAuthenticated: CKError.Code\nAn error that occurs when the user is unauthenticated.\nstatic var operationCancelled: CKError.Code\nAn error that occurs when an operation cancels.\nstatic var partialFailure: CKError.Code\nAn error that occurs when an operation completes with partial failures.\nstatic var participantMayNeedVerification: CKError.Code\nAn error that occurs when the user isn’t a participant of the share.\nstatic var permissionFailure: CKError.Code\nAn error that occurs when the user doesn’t have permission to save or fetch data.\nstatic var quotaExceeded: CKError.Code\nAn error that occurs when saving a record exceeds the user’s storage quota.\nstatic var referenceViolation: CKError.Code\nAn error that occurs when CloudKit can’t find the target of a reference.\nstatic var requestRateLimited: CKError.Code\nAn error that occurs when CloudKit rate-limits requests.\nstatic var serverRecordChanged: CKError.Code\nAn error that occurs when CloudKit rejects a record because the server’s version is different.\nstatic var serverRejectedRequest: CKError.Code\nAn error that occurs when CloudKit rejects the request.\nstatic var serverResponseLost: CKError.Code\nAn error that occurs when CloudKit is unable to maintain the network connection and provide a response.\nstatic var serviceUnavailable: CKError.Code\nAn error that occurs when CloudKit is unavailable.\nstatic var tooManyParticipants: CKError.Code\nAn error that occurs when a share has too many participants.\nstatic var unknownItem: CKError.Code\nAn error that occurs when the specified record doesn’t exist.\nstatic var userDeletedZone: CKError.Code\nAn error that occurs when the user deletes a record zone using the Settings app.\nstatic var zoneBusy: CKError.Code\nAn error that occurs when the server is too busy to handle the record zone operation.\nstatic var zoneNotFound: CKError.Code\nAn error that occurs when the specified record zone doesn’t exist.\nstatic var resultsTruncated: CKError.Code\nAn error that occurs when CloudKit truncates a query’s results.\nDeprecated\nenum CKError.Code\nThe error codes that CloudKit returns."
  },
  {
    "title": "invalidArguments | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckerror/2325210-invalidarguments",
    "html": "Discussion\n\nConsult the error’s userInfo dictionary for more information about the issue.\n\nSee Also\nGetting Error Codes\nstatic var accountTemporarilyUnavailable: CKError.Code\nAn error that occurs when the user’s iCloud account is temporarily unavailable.\nstatic var alreadyShared: CKError.Code\nAn error that occurs when CloudKit attempts to share a record with an existing share.\nstatic var assetFileModified: CKError.Code\nAn error that occurs when the system modifies an asset while saving it.\nstatic var assetFileNotFound: CKError.Code\nAn error that occurs when the system can’t find the specified asset.\nstatic var assetNotAvailable: CKError.Code\nAn error that occurs when the system can’t access the specified asset.\nstatic var badContainer: CKError.Code\nAn error that occurs when you use an unknown or unauthorized container.\nstatic var badDatabase: CKError.Code\nAn error that occurs when the operation can’t complete for the specified database.\nstatic var batchRequestFailed: CKError.Code\nAn error that occurs when the system rejects the entire batch of changes.\nstatic var changeTokenExpired: CKError.Code\nAn error that occurs when the change token expires.\nstatic var constraintViolation: CKError.Code\nAn error that occurs when the server rejects the request because of a unique constraint violation.\nstatic var incompatibleVersion: CKError.Code\nAn error that occurs when the current app version is older than the oldest allowed version.\nstatic var internalError: CKError.Code\nA nonrecoverable error that CloudKit encounters.\nstatic var limitExceeded: CKError.Code\nAn error that occurs when a request’s size exceeds the limit.\nstatic var managedAccountRestricted: CKError.Code\nAn error that occurs when CloudKit rejects a request due to a managed-account restriction.\nstatic var missingEntitlement: CKError.Code\nAn error that occurs when the app is missing a required entitlement.\nstatic var networkFailure: CKError.Code\nAn error that occurs when a network is available, but CloudKit is inaccessible.\nstatic var networkUnavailable: CKError.Code\nAn error that occurs when the network is unavailable.\nstatic var notAuthenticated: CKError.Code\nAn error that occurs when the user is unauthenticated.\nstatic var operationCancelled: CKError.Code\nAn error that occurs when an operation cancels.\nstatic var partialFailure: CKError.Code\nAn error that occurs when an operation completes with partial failures.\nstatic var participantMayNeedVerification: CKError.Code\nAn error that occurs when the user isn’t a participant of the share.\nstatic var permissionFailure: CKError.Code\nAn error that occurs when the user doesn’t have permission to save or fetch data.\nstatic var quotaExceeded: CKError.Code\nAn error that occurs when saving a record exceeds the user’s storage quota.\nstatic var referenceViolation: CKError.Code\nAn error that occurs when CloudKit can’t find the target of a reference.\nstatic var requestRateLimited: CKError.Code\nAn error that occurs when CloudKit rate-limits requests.\nstatic var serverRecordChanged: CKError.Code\nAn error that occurs when CloudKit rejects a record because the server’s version is different.\nstatic var serverRejectedRequest: CKError.Code\nAn error that occurs when CloudKit rejects the request.\nstatic var serverResponseLost: CKError.Code\nAn error that occurs when CloudKit is unable to maintain the network connection and provide a response.\nstatic var serviceUnavailable: CKError.Code\nAn error that occurs when CloudKit is unavailable.\nstatic var tooManyParticipants: CKError.Code\nAn error that occurs when a share has too many participants.\nstatic var unknownItem: CKError.Code\nAn error that occurs when the specified record doesn’t exist.\nstatic var userDeletedZone: CKError.Code\nAn error that occurs when the user deletes a record zone using the Settings app.\nstatic var zoneBusy: CKError.Code\nAn error that occurs when the server is too busy to handle the record zone operation.\nstatic var zoneNotFound: CKError.Code\nAn error that occurs when the specified record zone doesn’t exist.\nstatic var resultsTruncated: CKError.Code\nAn error that occurs when CloudKit truncates a query’s results.\nDeprecated\nenum CKError.Code\nThe error codes that CloudKit returns."
  },
  {
    "title": "managedAccountRestricted | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckerror/2325198-managedaccountrestricted",
    "html": "Discussion\n\nThe system restricts CloudKit access for this account. This is a nonrecoverable error.\n\nSee Also\nGetting Error Codes\nstatic var accountTemporarilyUnavailable: CKError.Code\nAn error that occurs when the user’s iCloud account is temporarily unavailable.\nstatic var alreadyShared: CKError.Code\nAn error that occurs when CloudKit attempts to share a record with an existing share.\nstatic var assetFileModified: CKError.Code\nAn error that occurs when the system modifies an asset while saving it.\nstatic var assetFileNotFound: CKError.Code\nAn error that occurs when the system can’t find the specified asset.\nstatic var assetNotAvailable: CKError.Code\nAn error that occurs when the system can’t access the specified asset.\nstatic var badContainer: CKError.Code\nAn error that occurs when you use an unknown or unauthorized container.\nstatic var badDatabase: CKError.Code\nAn error that occurs when the operation can’t complete for the specified database.\nstatic var batchRequestFailed: CKError.Code\nAn error that occurs when the system rejects the entire batch of changes.\nstatic var changeTokenExpired: CKError.Code\nAn error that occurs when the change token expires.\nstatic var constraintViolation: CKError.Code\nAn error that occurs when the server rejects the request because of a unique constraint violation.\nstatic var incompatibleVersion: CKError.Code\nAn error that occurs when the current app version is older than the oldest allowed version.\nstatic var internalError: CKError.Code\nA nonrecoverable error that CloudKit encounters.\nstatic var invalidArguments: CKError.Code\nAn error that occurs when the request contains invalid information.\nstatic var limitExceeded: CKError.Code\nAn error that occurs when a request’s size exceeds the limit.\nstatic var missingEntitlement: CKError.Code\nAn error that occurs when the app is missing a required entitlement.\nstatic var networkFailure: CKError.Code\nAn error that occurs when a network is available, but CloudKit is inaccessible.\nstatic var networkUnavailable: CKError.Code\nAn error that occurs when the network is unavailable.\nstatic var notAuthenticated: CKError.Code\nAn error that occurs when the user is unauthenticated.\nstatic var operationCancelled: CKError.Code\nAn error that occurs when an operation cancels.\nstatic var partialFailure: CKError.Code\nAn error that occurs when an operation completes with partial failures.\nstatic var participantMayNeedVerification: CKError.Code\nAn error that occurs when the user isn’t a participant of the share.\nstatic var permissionFailure: CKError.Code\nAn error that occurs when the user doesn’t have permission to save or fetch data.\nstatic var quotaExceeded: CKError.Code\nAn error that occurs when saving a record exceeds the user’s storage quota.\nstatic var referenceViolation: CKError.Code\nAn error that occurs when CloudKit can’t find the target of a reference.\nstatic var requestRateLimited: CKError.Code\nAn error that occurs when CloudKit rate-limits requests.\nstatic var serverRecordChanged: CKError.Code\nAn error that occurs when CloudKit rejects a record because the server’s version is different.\nstatic var serverRejectedRequest: CKError.Code\nAn error that occurs when CloudKit rejects the request.\nstatic var serverResponseLost: CKError.Code\nAn error that occurs when CloudKit is unable to maintain the network connection and provide a response.\nstatic var serviceUnavailable: CKError.Code\nAn error that occurs when CloudKit is unavailable.\nstatic var tooManyParticipants: CKError.Code\nAn error that occurs when a share has too many participants.\nstatic var unknownItem: CKError.Code\nAn error that occurs when the specified record doesn’t exist.\nstatic var userDeletedZone: CKError.Code\nAn error that occurs when the user deletes a record zone using the Settings app.\nstatic var zoneBusy: CKError.Code\nAn error that occurs when the server is too busy to handle the record zone operation.\nstatic var zoneNotFound: CKError.Code\nAn error that occurs when the specified record zone doesn’t exist.\nstatic var resultsTruncated: CKError.Code\nAn error that occurs when CloudKit truncates a query’s results.\nDeprecated\nenum CKError.Code\nThe error codes that CloudKit returns."
  },
  {
    "title": "missingEntitlement | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckerror/2325206-missingentitlement",
    "html": "See Also\nGetting Error Codes\nstatic var accountTemporarilyUnavailable: CKError.Code\nAn error that occurs when the user’s iCloud account is temporarily unavailable.\nstatic var alreadyShared: CKError.Code\nAn error that occurs when CloudKit attempts to share a record with an existing share.\nstatic var assetFileModified: CKError.Code\nAn error that occurs when the system modifies an asset while saving it.\nstatic var assetFileNotFound: CKError.Code\nAn error that occurs when the system can’t find the specified asset.\nstatic var assetNotAvailable: CKError.Code\nAn error that occurs when the system can’t access the specified asset.\nstatic var badContainer: CKError.Code\nAn error that occurs when you use an unknown or unauthorized container.\nstatic var badDatabase: CKError.Code\nAn error that occurs when the operation can’t complete for the specified database.\nstatic var batchRequestFailed: CKError.Code\nAn error that occurs when the system rejects the entire batch of changes.\nstatic var changeTokenExpired: CKError.Code\nAn error that occurs when the change token expires.\nstatic var constraintViolation: CKError.Code\nAn error that occurs when the server rejects the request because of a unique constraint violation.\nstatic var incompatibleVersion: CKError.Code\nAn error that occurs when the current app version is older than the oldest allowed version.\nstatic var internalError: CKError.Code\nA nonrecoverable error that CloudKit encounters.\nstatic var invalidArguments: CKError.Code\nAn error that occurs when the request contains invalid information.\nstatic var limitExceeded: CKError.Code\nAn error that occurs when a request’s size exceeds the limit.\nstatic var managedAccountRestricted: CKError.Code\nAn error that occurs when CloudKit rejects a request due to a managed-account restriction.\nstatic var networkFailure: CKError.Code\nAn error that occurs when a network is available, but CloudKit is inaccessible.\nstatic var networkUnavailable: CKError.Code\nAn error that occurs when the network is unavailable.\nstatic var notAuthenticated: CKError.Code\nAn error that occurs when the user is unauthenticated.\nstatic var operationCancelled: CKError.Code\nAn error that occurs when an operation cancels.\nstatic var partialFailure: CKError.Code\nAn error that occurs when an operation completes with partial failures.\nstatic var participantMayNeedVerification: CKError.Code\nAn error that occurs when the user isn’t a participant of the share.\nstatic var permissionFailure: CKError.Code\nAn error that occurs when the user doesn’t have permission to save or fetch data.\nstatic var quotaExceeded: CKError.Code\nAn error that occurs when saving a record exceeds the user’s storage quota.\nstatic var referenceViolation: CKError.Code\nAn error that occurs when CloudKit can’t find the target of a reference.\nstatic var requestRateLimited: CKError.Code\nAn error that occurs when CloudKit rate-limits requests.\nstatic var serverRecordChanged: CKError.Code\nAn error that occurs when CloudKit rejects a record because the server’s version is different.\nstatic var serverRejectedRequest: CKError.Code\nAn error that occurs when CloudKit rejects the request.\nstatic var serverResponseLost: CKError.Code\nAn error that occurs when CloudKit is unable to maintain the network connection and provide a response.\nstatic var serviceUnavailable: CKError.Code\nAn error that occurs when CloudKit is unavailable.\nstatic var tooManyParticipants: CKError.Code\nAn error that occurs when a share has too many participants.\nstatic var unknownItem: CKError.Code\nAn error that occurs when the specified record doesn’t exist.\nstatic var userDeletedZone: CKError.Code\nAn error that occurs when the user deletes a record zone using the Settings app.\nstatic var zoneBusy: CKError.Code\nAn error that occurs when the server is too busy to handle the record zone operation.\nstatic var zoneNotFound: CKError.Code\nAn error that occurs when the specified record zone doesn’t exist.\nstatic var resultsTruncated: CKError.Code\nAn error that occurs when CloudKit truncates a query’s results.\nDeprecated\nenum CKError.Code\nThe error codes that CloudKit returns."
  },
  {
    "title": "networkFailure | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckerror/2325207-networkfailure",
    "html": "Discussion\n\nYou can retry network failures immediately, but have your app implement a backoff period so that it doesn't attempt the same operation repeatedly.\n\nIf the network is unavailable, have your app monitor for network reachability and wait to reissue the operation when the network is available again. See CFNetworkErrors for more information.\n\nSee Also\nGetting Error Codes\nstatic var accountTemporarilyUnavailable: CKError.Code\nAn error that occurs when the user’s iCloud account is temporarily unavailable.\nstatic var alreadyShared: CKError.Code\nAn error that occurs when CloudKit attempts to share a record with an existing share.\nstatic var assetFileModified: CKError.Code\nAn error that occurs when the system modifies an asset while saving it.\nstatic var assetFileNotFound: CKError.Code\nAn error that occurs when the system can’t find the specified asset.\nstatic var assetNotAvailable: CKError.Code\nAn error that occurs when the system can’t access the specified asset.\nstatic var badContainer: CKError.Code\nAn error that occurs when you use an unknown or unauthorized container.\nstatic var badDatabase: CKError.Code\nAn error that occurs when the operation can’t complete for the specified database.\nstatic var batchRequestFailed: CKError.Code\nAn error that occurs when the system rejects the entire batch of changes.\nstatic var changeTokenExpired: CKError.Code\nAn error that occurs when the change token expires.\nstatic var constraintViolation: CKError.Code\nAn error that occurs when the server rejects the request because of a unique constraint violation.\nstatic var incompatibleVersion: CKError.Code\nAn error that occurs when the current app version is older than the oldest allowed version.\nstatic var internalError: CKError.Code\nA nonrecoverable error that CloudKit encounters.\nstatic var invalidArguments: CKError.Code\nAn error that occurs when the request contains invalid information.\nstatic var limitExceeded: CKError.Code\nAn error that occurs when a request’s size exceeds the limit.\nstatic var managedAccountRestricted: CKError.Code\nAn error that occurs when CloudKit rejects a request due to a managed-account restriction.\nstatic var missingEntitlement: CKError.Code\nAn error that occurs when the app is missing a required entitlement.\nstatic var networkUnavailable: CKError.Code\nAn error that occurs when the network is unavailable.\nstatic var notAuthenticated: CKError.Code\nAn error that occurs when the user is unauthenticated.\nstatic var operationCancelled: CKError.Code\nAn error that occurs when an operation cancels.\nstatic var partialFailure: CKError.Code\nAn error that occurs when an operation completes with partial failures.\nstatic var participantMayNeedVerification: CKError.Code\nAn error that occurs when the user isn’t a participant of the share.\nstatic var permissionFailure: CKError.Code\nAn error that occurs when the user doesn’t have permission to save or fetch data.\nstatic var quotaExceeded: CKError.Code\nAn error that occurs when saving a record exceeds the user’s storage quota.\nstatic var referenceViolation: CKError.Code\nAn error that occurs when CloudKit can’t find the target of a reference.\nstatic var requestRateLimited: CKError.Code\nAn error that occurs when CloudKit rate-limits requests.\nstatic var serverRecordChanged: CKError.Code\nAn error that occurs when CloudKit rejects a record because the server’s version is different.\nstatic var serverRejectedRequest: CKError.Code\nAn error that occurs when CloudKit rejects the request.\nstatic var serverResponseLost: CKError.Code\nAn error that occurs when CloudKit is unable to maintain the network connection and provide a response.\nstatic var serviceUnavailable: CKError.Code\nAn error that occurs when CloudKit is unavailable.\nstatic var tooManyParticipants: CKError.Code\nAn error that occurs when a share has too many participants.\nstatic var unknownItem: CKError.Code\nAn error that occurs when the specified record doesn’t exist.\nstatic var userDeletedZone: CKError.Code\nAn error that occurs when the user deletes a record zone using the Settings app.\nstatic var zoneBusy: CKError.Code\nAn error that occurs when the server is too busy to handle the record zone operation.\nstatic var zoneNotFound: CKError.Code\nAn error that occurs when the specified record zone doesn’t exist.\nstatic var resultsTruncated: CKError.Code\nAn error that occurs when CloudKit truncates a query’s results.\nDeprecated\nenum CKError.Code\nThe error codes that CloudKit returns."
  },
  {
    "title": "participantMayNeedVerification | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckerror/2325205-participantmayneedverification",
    "html": "Discussion\n\nA fetch share metadata operation fails when the user isn’t a participant of the share. However, there are invited participants on the share with email addresses or phone numbers that don’t have associations with an iCloud account. The user may be able to join a share by associating one of those email addresses or phone numbers with the user's iCloud account.\n\nCall openURL(_:) on the share URL to have the user attempt to verify their information.\n\nSee Also\nGetting Error Codes\nstatic var accountTemporarilyUnavailable: CKError.Code\nAn error that occurs when the user’s iCloud account is temporarily unavailable.\nstatic var alreadyShared: CKError.Code\nAn error that occurs when CloudKit attempts to share a record with an existing share.\nstatic var assetFileModified: CKError.Code\nAn error that occurs when the system modifies an asset while saving it.\nstatic var assetFileNotFound: CKError.Code\nAn error that occurs when the system can’t find the specified asset.\nstatic var assetNotAvailable: CKError.Code\nAn error that occurs when the system can’t access the specified asset.\nstatic var badContainer: CKError.Code\nAn error that occurs when you use an unknown or unauthorized container.\nstatic var badDatabase: CKError.Code\nAn error that occurs when the operation can’t complete for the specified database.\nstatic var batchRequestFailed: CKError.Code\nAn error that occurs when the system rejects the entire batch of changes.\nstatic var changeTokenExpired: CKError.Code\nAn error that occurs when the change token expires.\nstatic var constraintViolation: CKError.Code\nAn error that occurs when the server rejects the request because of a unique constraint violation.\nstatic var incompatibleVersion: CKError.Code\nAn error that occurs when the current app version is older than the oldest allowed version.\nstatic var internalError: CKError.Code\nA nonrecoverable error that CloudKit encounters.\nstatic var invalidArguments: CKError.Code\nAn error that occurs when the request contains invalid information.\nstatic var limitExceeded: CKError.Code\nAn error that occurs when a request’s size exceeds the limit.\nstatic var managedAccountRestricted: CKError.Code\nAn error that occurs when CloudKit rejects a request due to a managed-account restriction.\nstatic var missingEntitlement: CKError.Code\nAn error that occurs when the app is missing a required entitlement.\nstatic var networkFailure: CKError.Code\nAn error that occurs when a network is available, but CloudKit is inaccessible.\nstatic var networkUnavailable: CKError.Code\nAn error that occurs when the network is unavailable.\nstatic var notAuthenticated: CKError.Code\nAn error that occurs when the user is unauthenticated.\nstatic var operationCancelled: CKError.Code\nAn error that occurs when an operation cancels.\nstatic var partialFailure: CKError.Code\nAn error that occurs when an operation completes with partial failures.\nstatic var permissionFailure: CKError.Code\nAn error that occurs when the user doesn’t have permission to save or fetch data.\nstatic var quotaExceeded: CKError.Code\nAn error that occurs when saving a record exceeds the user’s storage quota.\nstatic var referenceViolation: CKError.Code\nAn error that occurs when CloudKit can’t find the target of a reference.\nstatic var requestRateLimited: CKError.Code\nAn error that occurs when CloudKit rate-limits requests.\nstatic var serverRecordChanged: CKError.Code\nAn error that occurs when CloudKit rejects a record because the server’s version is different.\nstatic var serverRejectedRequest: CKError.Code\nAn error that occurs when CloudKit rejects the request.\nstatic var serverResponseLost: CKError.Code\nAn error that occurs when CloudKit is unable to maintain the network connection and provide a response.\nstatic var serviceUnavailable: CKError.Code\nAn error that occurs when CloudKit is unavailable.\nstatic var tooManyParticipants: CKError.Code\nAn error that occurs when a share has too many participants.\nstatic var unknownItem: CKError.Code\nAn error that occurs when the specified record doesn’t exist.\nstatic var userDeletedZone: CKError.Code\nAn error that occurs when the user deletes a record zone using the Settings app.\nstatic var zoneBusy: CKError.Code\nAn error that occurs when the server is too busy to handle the record zone operation.\nstatic var zoneNotFound: CKError.Code\nAn error that occurs when the specified record zone doesn’t exist.\nstatic var resultsTruncated: CKError.Code\nAn error that occurs when CloudKit truncates a query’s results.\nDeprecated\nenum CKError.Code\nThe error codes that CloudKit returns."
  },
  {
    "title": "permissionFailure | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckerror/2325225-permissionfailure",
    "html": "Discussion\n\nThis error typically occurs in the public database in one of these circumstances:\n\nYou have roles for record types.\n\nYour app is trying to accept a share that the user doesn’t have an invitation for.\n\nLet users know they can’t perform this operation. This error is nonrecoverable and you can’t retry the operation.\n\nSee Also\nGetting Error Codes\nstatic var accountTemporarilyUnavailable: CKError.Code\nAn error that occurs when the user’s iCloud account is temporarily unavailable.\nstatic var alreadyShared: CKError.Code\nAn error that occurs when CloudKit attempts to share a record with an existing share.\nstatic var assetFileModified: CKError.Code\nAn error that occurs when the system modifies an asset while saving it.\nstatic var assetFileNotFound: CKError.Code\nAn error that occurs when the system can’t find the specified asset.\nstatic var assetNotAvailable: CKError.Code\nAn error that occurs when the system can’t access the specified asset.\nstatic var badContainer: CKError.Code\nAn error that occurs when you use an unknown or unauthorized container.\nstatic var badDatabase: CKError.Code\nAn error that occurs when the operation can’t complete for the specified database.\nstatic var batchRequestFailed: CKError.Code\nAn error that occurs when the system rejects the entire batch of changes.\nstatic var changeTokenExpired: CKError.Code\nAn error that occurs when the change token expires.\nstatic var constraintViolation: CKError.Code\nAn error that occurs when the server rejects the request because of a unique constraint violation.\nstatic var incompatibleVersion: CKError.Code\nAn error that occurs when the current app version is older than the oldest allowed version.\nstatic var internalError: CKError.Code\nA nonrecoverable error that CloudKit encounters.\nstatic var invalidArguments: CKError.Code\nAn error that occurs when the request contains invalid information.\nstatic var limitExceeded: CKError.Code\nAn error that occurs when a request’s size exceeds the limit.\nstatic var managedAccountRestricted: CKError.Code\nAn error that occurs when CloudKit rejects a request due to a managed-account restriction.\nstatic var missingEntitlement: CKError.Code\nAn error that occurs when the app is missing a required entitlement.\nstatic var networkFailure: CKError.Code\nAn error that occurs when a network is available, but CloudKit is inaccessible.\nstatic var networkUnavailable: CKError.Code\nAn error that occurs when the network is unavailable.\nstatic var notAuthenticated: CKError.Code\nAn error that occurs when the user is unauthenticated.\nstatic var operationCancelled: CKError.Code\nAn error that occurs when an operation cancels.\nstatic var partialFailure: CKError.Code\nAn error that occurs when an operation completes with partial failures.\nstatic var participantMayNeedVerification: CKError.Code\nAn error that occurs when the user isn’t a participant of the share.\nstatic var quotaExceeded: CKError.Code\nAn error that occurs when saving a record exceeds the user’s storage quota.\nstatic var referenceViolation: CKError.Code\nAn error that occurs when CloudKit can’t find the target of a reference.\nstatic var requestRateLimited: CKError.Code\nAn error that occurs when CloudKit rate-limits requests.\nstatic var serverRecordChanged: CKError.Code\nAn error that occurs when CloudKit rejects a record because the server’s version is different.\nstatic var serverRejectedRequest: CKError.Code\nAn error that occurs when CloudKit rejects the request.\nstatic var serverResponseLost: CKError.Code\nAn error that occurs when CloudKit is unable to maintain the network connection and provide a response.\nstatic var serviceUnavailable: CKError.Code\nAn error that occurs when CloudKit is unavailable.\nstatic var tooManyParticipants: CKError.Code\nAn error that occurs when a share has too many participants.\nstatic var unknownItem: CKError.Code\nAn error that occurs when the specified record doesn’t exist.\nstatic var userDeletedZone: CKError.Code\nAn error that occurs when the user deletes a record zone using the Settings app.\nstatic var zoneBusy: CKError.Code\nAn error that occurs when the server is too busy to handle the record zone operation.\nstatic var zoneNotFound: CKError.Code\nAn error that occurs when the specified record zone doesn’t exist.\nstatic var resultsTruncated: CKError.Code\nAn error that occurs when CloudKit truncates a query’s results.\nDeprecated\nenum CKError.Code\nThe error codes that CloudKit returns."
  },
  {
    "title": "quotaExceeded | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckerror/2325197-quotaexceeded",
    "html": "Discussion\n\nIn the public database: Your app's container doesn’t have enough storage. Individual users can't do anything about this, but you can go to the CloudKit Dashboard to view and manage your container's storage.\n\nIn the private database: The user doesn’t have enough iCloud storage. Prompt the user to go to iCloud settings to manage their storage.\n\nIn the shared database: The owner of the shared record zone doesn’t have enough iCloud storage. The user can't do anything about this, but can contact the owner about upgrading their storage or cleaning up their iCloud account.\n\nSee Also\nGetting Error Codes\nstatic var accountTemporarilyUnavailable: CKError.Code\nAn error that occurs when the user’s iCloud account is temporarily unavailable.\nstatic var alreadyShared: CKError.Code\nAn error that occurs when CloudKit attempts to share a record with an existing share.\nstatic var assetFileModified: CKError.Code\nAn error that occurs when the system modifies an asset while saving it.\nstatic var assetFileNotFound: CKError.Code\nAn error that occurs when the system can’t find the specified asset.\nstatic var assetNotAvailable: CKError.Code\nAn error that occurs when the system can’t access the specified asset.\nstatic var badContainer: CKError.Code\nAn error that occurs when you use an unknown or unauthorized container.\nstatic var badDatabase: CKError.Code\nAn error that occurs when the operation can’t complete for the specified database.\nstatic var batchRequestFailed: CKError.Code\nAn error that occurs when the system rejects the entire batch of changes.\nstatic var changeTokenExpired: CKError.Code\nAn error that occurs when the change token expires.\nstatic var constraintViolation: CKError.Code\nAn error that occurs when the server rejects the request because of a unique constraint violation.\nstatic var incompatibleVersion: CKError.Code\nAn error that occurs when the current app version is older than the oldest allowed version.\nstatic var internalError: CKError.Code\nA nonrecoverable error that CloudKit encounters.\nstatic var invalidArguments: CKError.Code\nAn error that occurs when the request contains invalid information.\nstatic var limitExceeded: CKError.Code\nAn error that occurs when a request’s size exceeds the limit.\nstatic var managedAccountRestricted: CKError.Code\nAn error that occurs when CloudKit rejects a request due to a managed-account restriction.\nstatic var missingEntitlement: CKError.Code\nAn error that occurs when the app is missing a required entitlement.\nstatic var networkFailure: CKError.Code\nAn error that occurs when a network is available, but CloudKit is inaccessible.\nstatic var networkUnavailable: CKError.Code\nAn error that occurs when the network is unavailable.\nstatic var notAuthenticated: CKError.Code\nAn error that occurs when the user is unauthenticated.\nstatic var operationCancelled: CKError.Code\nAn error that occurs when an operation cancels.\nstatic var partialFailure: CKError.Code\nAn error that occurs when an operation completes with partial failures.\nstatic var participantMayNeedVerification: CKError.Code\nAn error that occurs when the user isn’t a participant of the share.\nstatic var permissionFailure: CKError.Code\nAn error that occurs when the user doesn’t have permission to save or fetch data.\nstatic var referenceViolation: CKError.Code\nAn error that occurs when CloudKit can’t find the target of a reference.\nstatic var requestRateLimited: CKError.Code\nAn error that occurs when CloudKit rate-limits requests.\nstatic var serverRecordChanged: CKError.Code\nAn error that occurs when CloudKit rejects a record because the server’s version is different.\nstatic var serverRejectedRequest: CKError.Code\nAn error that occurs when CloudKit rejects the request.\nstatic var serverResponseLost: CKError.Code\nAn error that occurs when CloudKit is unable to maintain the network connection and provide a response.\nstatic var serviceUnavailable: CKError.Code\nAn error that occurs when CloudKit is unavailable.\nstatic var tooManyParticipants: CKError.Code\nAn error that occurs when a share has too many participants.\nstatic var unknownItem: CKError.Code\nAn error that occurs when the specified record doesn’t exist.\nstatic var userDeletedZone: CKError.Code\nAn error that occurs when the user deletes a record zone using the Settings app.\nstatic var zoneBusy: CKError.Code\nAn error that occurs when the server is too busy to handle the record zone operation.\nstatic var zoneNotFound: CKError.Code\nAn error that occurs when the specified record zone doesn’t exist.\nstatic var resultsTruncated: CKError.Code\nAn error that occurs when CloudKit truncates a query’s results.\nDeprecated\nenum CKError.Code\nThe error codes that CloudKit returns."
  },
  {
    "title": "referenceViolation | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckerror/2325204-referenceviolation",
    "html": "See Also\nGetting Error Codes\nstatic var accountTemporarilyUnavailable: CKError.Code\nAn error that occurs when the user’s iCloud account is temporarily unavailable.\nstatic var alreadyShared: CKError.Code\nAn error that occurs when CloudKit attempts to share a record with an existing share.\nstatic var assetFileModified: CKError.Code\nAn error that occurs when the system modifies an asset while saving it.\nstatic var assetFileNotFound: CKError.Code\nAn error that occurs when the system can’t find the specified asset.\nstatic var assetNotAvailable: CKError.Code\nAn error that occurs when the system can’t access the specified asset.\nstatic var badContainer: CKError.Code\nAn error that occurs when you use an unknown or unauthorized container.\nstatic var badDatabase: CKError.Code\nAn error that occurs when the operation can’t complete for the specified database.\nstatic var batchRequestFailed: CKError.Code\nAn error that occurs when the system rejects the entire batch of changes.\nstatic var changeTokenExpired: CKError.Code\nAn error that occurs when the change token expires.\nstatic var constraintViolation: CKError.Code\nAn error that occurs when the server rejects the request because of a unique constraint violation.\nstatic var incompatibleVersion: CKError.Code\nAn error that occurs when the current app version is older than the oldest allowed version.\nstatic var internalError: CKError.Code\nA nonrecoverable error that CloudKit encounters.\nstatic var invalidArguments: CKError.Code\nAn error that occurs when the request contains invalid information.\nstatic var limitExceeded: CKError.Code\nAn error that occurs when a request’s size exceeds the limit.\nstatic var managedAccountRestricted: CKError.Code\nAn error that occurs when CloudKit rejects a request due to a managed-account restriction.\nstatic var missingEntitlement: CKError.Code\nAn error that occurs when the app is missing a required entitlement.\nstatic var networkFailure: CKError.Code\nAn error that occurs when a network is available, but CloudKit is inaccessible.\nstatic var networkUnavailable: CKError.Code\nAn error that occurs when the network is unavailable.\nstatic var notAuthenticated: CKError.Code\nAn error that occurs when the user is unauthenticated.\nstatic var operationCancelled: CKError.Code\nAn error that occurs when an operation cancels.\nstatic var partialFailure: CKError.Code\nAn error that occurs when an operation completes with partial failures.\nstatic var participantMayNeedVerification: CKError.Code\nAn error that occurs when the user isn’t a participant of the share.\nstatic var permissionFailure: CKError.Code\nAn error that occurs when the user doesn’t have permission to save or fetch data.\nstatic var quotaExceeded: CKError.Code\nAn error that occurs when saving a record exceeds the user’s storage quota.\nstatic var requestRateLimited: CKError.Code\nAn error that occurs when CloudKit rate-limits requests.\nstatic var serverRecordChanged: CKError.Code\nAn error that occurs when CloudKit rejects a record because the server’s version is different.\nstatic var serverRejectedRequest: CKError.Code\nAn error that occurs when CloudKit rejects the request.\nstatic var serverResponseLost: CKError.Code\nAn error that occurs when CloudKit is unable to maintain the network connection and provide a response.\nstatic var serviceUnavailable: CKError.Code\nAn error that occurs when CloudKit is unavailable.\nstatic var tooManyParticipants: CKError.Code\nAn error that occurs when a share has too many participants.\nstatic var unknownItem: CKError.Code\nAn error that occurs when the specified record doesn’t exist.\nstatic var userDeletedZone: CKError.Code\nAn error that occurs when the user deletes a record zone using the Settings app.\nstatic var zoneBusy: CKError.Code\nAn error that occurs when the server is too busy to handle the record zone operation.\nstatic var zoneNotFound: CKError.Code\nAn error that occurs when the specified record zone doesn’t exist.\nstatic var resultsTruncated: CKError.Code\nAn error that occurs when CloudKit truncates a query’s results.\nDeprecated\nenum CKError.Code\nThe error codes that CloudKit returns."
  },
  {
    "title": "requestRateLimited | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckerror/2325202-requestratelimited",
    "html": "Discussion\n\nCheck for a CKErrorRetryAfterKey key in the userInfo dictionary of any CloudKit error that you receive. It's especially important to check for it if you receive any of these errors. Use the value of the CKErrorRetryAfterKey key as the number of seconds to wait before retrying this operation.\n\nSee Also\nGetting Error Codes\nstatic var accountTemporarilyUnavailable: CKError.Code\nAn error that occurs when the user’s iCloud account is temporarily unavailable.\nstatic var alreadyShared: CKError.Code\nAn error that occurs when CloudKit attempts to share a record with an existing share.\nstatic var assetFileModified: CKError.Code\nAn error that occurs when the system modifies an asset while saving it.\nstatic var assetFileNotFound: CKError.Code\nAn error that occurs when the system can’t find the specified asset.\nstatic var assetNotAvailable: CKError.Code\nAn error that occurs when the system can’t access the specified asset.\nstatic var badContainer: CKError.Code\nAn error that occurs when you use an unknown or unauthorized container.\nstatic var badDatabase: CKError.Code\nAn error that occurs when the operation can’t complete for the specified database.\nstatic var batchRequestFailed: CKError.Code\nAn error that occurs when the system rejects the entire batch of changes.\nstatic var changeTokenExpired: CKError.Code\nAn error that occurs when the change token expires.\nstatic var constraintViolation: CKError.Code\nAn error that occurs when the server rejects the request because of a unique constraint violation.\nstatic var incompatibleVersion: CKError.Code\nAn error that occurs when the current app version is older than the oldest allowed version.\nstatic var internalError: CKError.Code\nA nonrecoverable error that CloudKit encounters.\nstatic var invalidArguments: CKError.Code\nAn error that occurs when the request contains invalid information.\nstatic var limitExceeded: CKError.Code\nAn error that occurs when a request’s size exceeds the limit.\nstatic var managedAccountRestricted: CKError.Code\nAn error that occurs when CloudKit rejects a request due to a managed-account restriction.\nstatic var missingEntitlement: CKError.Code\nAn error that occurs when the app is missing a required entitlement.\nstatic var networkFailure: CKError.Code\nAn error that occurs when a network is available, but CloudKit is inaccessible.\nstatic var networkUnavailable: CKError.Code\nAn error that occurs when the network is unavailable.\nstatic var notAuthenticated: CKError.Code\nAn error that occurs when the user is unauthenticated.\nstatic var operationCancelled: CKError.Code\nAn error that occurs when an operation cancels.\nstatic var partialFailure: CKError.Code\nAn error that occurs when an operation completes with partial failures.\nstatic var participantMayNeedVerification: CKError.Code\nAn error that occurs when the user isn’t a participant of the share.\nstatic var permissionFailure: CKError.Code\nAn error that occurs when the user doesn’t have permission to save or fetch data.\nstatic var quotaExceeded: CKError.Code\nAn error that occurs when saving a record exceeds the user’s storage quota.\nstatic var referenceViolation: CKError.Code\nAn error that occurs when CloudKit can’t find the target of a reference.\nstatic var serverRecordChanged: CKError.Code\nAn error that occurs when CloudKit rejects a record because the server’s version is different.\nstatic var serverRejectedRequest: CKError.Code\nAn error that occurs when CloudKit rejects the request.\nstatic var serverResponseLost: CKError.Code\nAn error that occurs when CloudKit is unable to maintain the network connection and provide a response.\nstatic var serviceUnavailable: CKError.Code\nAn error that occurs when CloudKit is unavailable.\nstatic var tooManyParticipants: CKError.Code\nAn error that occurs when a share has too many participants.\nstatic var unknownItem: CKError.Code\nAn error that occurs when the specified record doesn’t exist.\nstatic var userDeletedZone: CKError.Code\nAn error that occurs when the user deletes a record zone using the Settings app.\nstatic var zoneBusy: CKError.Code\nAn error that occurs when the server is too busy to handle the record zone operation.\nstatic var zoneNotFound: CKError.Code\nAn error that occurs when the specified record zone doesn’t exist.\nstatic var resultsTruncated: CKError.Code\nAn error that occurs when CloudKit truncates a query’s results.\nDeprecated\nenum CKError.Code\nThe error codes that CloudKit returns."
  },
  {
    "title": "CKError.Code.invalidArguments | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckerror/code/invalidarguments",
    "html": "Discussion\n\nConsult the error’s userInfo dictionary for more information about the issue.\n\nSee Also\nError Codes\ncase accountTemporarilyUnavailable\nAn error that occurs when the user’s iCloud account is temporarily unavailable.\ncase alreadyShared\nAn error that occurs when CloudKit attempts to share a record with an existing share.\ncase assetFileModified\nAn error that occurs when the system modifies an asset while saving it.\ncase assetFileNotFound\nAn error that occurs when the system can’t find the specified asset.\ncase assetNotAvailable\nAn error that occurs when the system can’t access the specified asset.\ncase badContainer\nAn error that occurs when you use an unknown or unauthorized container.\ncase badDatabase\nAn error that occurs when the operation can’t complete for the specified database.\ncase batchRequestFailed\nAn error that occurs when the system rejects the entire batch of changes.\ncase changeTokenExpired\nAn error that occurs when the change token expires.\ncase constraintViolation\nAn error that occurs when the server rejects the request because of a unique constraint violation.\ncase incompatibleVersion\nAn error that occurs when the current app version is older than the oldest allowed version.\ncase internalError\nA nonrecoverable error that CloudKit encounters.\ncase limitExceeded\nAn error that occurs when a request’s size exceeds the limit.\ncase managedAccountRestricted\nAn error that occurs when CloudKit rejects a request due to a managed-account restriction.\ncase missingEntitlement\nAn error that occurs when the app is missing a required entitlement.\ncase networkFailure\nAn error that occurs when a network is available, but CloudKit is inaccessible.\ncase networkUnavailable\nAn error that occurs when the network is unavailable.\ncase notAuthenticated\nAn error that occurs when the user is unauthenticated.\ncase operationCancelled\nAn error that occurs when an operation cancels.\ncase partialFailure\nAn error that occurs when an operation completes with partial failures.\ncase participantMayNeedVerification\nAn error that occurs when the user isn’t a participant of the share.\ncase permissionFailure\nAn error that occurs when the user doesn’t have permission to save or fetch data.\ncase quotaExceeded\nAn error that occurs when saving a record exceeds the user’s storage quota.\ncase referenceViolation\nAn error that occurs when CloudKit can’t find the target of a reference.\ncase requestRateLimited\nAn error that occurs when CloudKit rate-limits requests.\ncase serverRecordChanged\nAn error that occurs when CloudKit rejects a record because the server’s version is different.\ncase serverRejectedRequest\nAn error that occurs when CloudKit rejects the request.\ncase serverResponseLost\nAn error that occurs when CloudKit is unable to maintain the network connection and provide a response.\ncase serviceUnavailable\nAn error that occurs when CloudKit is unavailable.\ncase tooManyParticipants\nAn error that occurs when a share has too many participants.\ncase unknownItem\nAn error that occurs when the specified record doesn’t exist.\ncase userDeletedZone\nAn error that occurs when the user deletes a record zone using the Settings app.\ncase zoneBusy\nAn error that occurs when the server is too busy to handle the record zone operation.\ncase zoneNotFound\nAn error that occurs when the specified record zone doesn’t exist.\ncase resultsTruncated\nAn error that occurs when CloudKit truncates a query’s results.\nDeprecated"
  },
  {
    "title": "CKError.Code.serverRejectedRequest | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckerror/code/serverrejectedrequest",
    "html": "Discussion\n\nThis error is nonrecoverable.\n\nSee Also\nError Codes\ncase accountTemporarilyUnavailable\nAn error that occurs when the user’s iCloud account is temporarily unavailable.\ncase alreadyShared\nAn error that occurs when CloudKit attempts to share a record with an existing share.\ncase assetFileModified\nAn error that occurs when the system modifies an asset while saving it.\ncase assetFileNotFound\nAn error that occurs when the system can’t find the specified asset.\ncase assetNotAvailable\nAn error that occurs when the system can’t access the specified asset.\ncase badContainer\nAn error that occurs when you use an unknown or unauthorized container.\ncase badDatabase\nAn error that occurs when the operation can’t complete for the specified database.\ncase batchRequestFailed\nAn error that occurs when the system rejects the entire batch of changes.\ncase changeTokenExpired\nAn error that occurs when the change token expires.\ncase constraintViolation\nAn error that occurs when the server rejects the request because of a unique constraint violation.\ncase incompatibleVersion\nAn error that occurs when the current app version is older than the oldest allowed version.\ncase internalError\nA nonrecoverable error that CloudKit encounters.\ncase invalidArguments\nAn error that occurs when the request contains invalid information.\ncase limitExceeded\nAn error that occurs when a request’s size exceeds the limit.\ncase managedAccountRestricted\nAn error that occurs when CloudKit rejects a request due to a managed-account restriction.\ncase missingEntitlement\nAn error that occurs when the app is missing a required entitlement.\ncase networkFailure\nAn error that occurs when a network is available, but CloudKit is inaccessible.\ncase networkUnavailable\nAn error that occurs when the network is unavailable.\ncase notAuthenticated\nAn error that occurs when the user is unauthenticated.\ncase operationCancelled\nAn error that occurs when an operation cancels.\ncase partialFailure\nAn error that occurs when an operation completes with partial failures.\ncase participantMayNeedVerification\nAn error that occurs when the user isn’t a participant of the share.\ncase permissionFailure\nAn error that occurs when the user doesn’t have permission to save or fetch data.\ncase quotaExceeded\nAn error that occurs when saving a record exceeds the user’s storage quota.\ncase referenceViolation\nAn error that occurs when CloudKit can’t find the target of a reference.\ncase requestRateLimited\nAn error that occurs when CloudKit rate-limits requests.\ncase serverRecordChanged\nAn error that occurs when CloudKit rejects a record because the server’s version is different.\ncase serverResponseLost\nAn error that occurs when CloudKit is unable to maintain the network connection and provide a response.\ncase serviceUnavailable\nAn error that occurs when CloudKit is unavailable.\ncase tooManyParticipants\nAn error that occurs when a share has too many participants.\ncase unknownItem\nAn error that occurs when the specified record doesn’t exist.\ncase userDeletedZone\nAn error that occurs when the user deletes a record zone using the Settings app.\ncase zoneBusy\nAn error that occurs when the server is too busy to handle the record zone operation.\ncase zoneNotFound\nAn error that occurs when the specified record zone doesn’t exist.\ncase resultsTruncated\nAn error that occurs when CloudKit truncates a query’s results.\nDeprecated"
  },
  {
    "title": "CKFetchNotificationChangesOperation | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckfetchnotificationchangesoperation",
    "html": "Overview\n\nA CKFetchNotificationChangesOperation object retrieves unread CKNotification objects from a container. Notification objects contain the data for push notifications that CloudKit sends to an app. Fetch notification objects to identify changes that your app might have missed or to retrieve the complete push notification payload, which CloudKit might truncate when delivering it to the device.\n\nAfter fetching the current notifications, you can mark some or all of them as read using a CKMarkNotificationsReadOperation object. Marking a notification as read prevents subsequent fetch operations from returning it.\n\nThe blocks you assign to process the fetched notifications execute serially on an internal queue that the operation object manages. Your blocks must be capable of executing on a background thread, so any tasks that require access to the main thread must redirect accordingly.\n\nIf you assign a completion block to the completionBlock property of the operation object, CloudKit calls the completion block after the operation executes and returns its results to you. You can use a completion block to perform housekeeping tasks for the operation, but do not use it to process the results of the operation. Any completion block you specify should handle the failure of the operation to complete its task, whether due to an error or an explicit cancellation.\n\nTopics\nCreating a Notification Change Operation\ninit(previousServerChangeToken: CKServerChangeToken?)\nCreates an operation for fetching notification changes that occur after the specified change token.\ninit()\nCreates an operation for fetching notification changes.\nConfiguring the Notification Change Operation\nvar previousServerChangeToken: CKServerChangeToken?\nThe change token from a previous fetch operation.\nvar resultsLimit: Int\nThe maximum number of results to fetch with the operation.\nProcessing the Notification Change Results\nvar moreComing: Bool\nA Boolean value that indicates whether more notifications are available.\nvar notificationChangedBlock: ((CKNotification) -> Void)?\nThe block that processes a single push notification.\nvar fetchNotificationChangesCompletionBlock: ((CKServerChangeToken?, Error?) -> Void)?\nThe block that executes after the system fetches all requested notifications.\nRelationships\nInherits From\nCKOperation\nSee Also\nDeprecated classes\nclass CKDiscoverAllUserIdentitiesOperation\nAn operation that uses the device’s contacts to search for discoverable iCloud users.\nDeprecated\nclass CKDiscoverUserIdentitiesOperation\nAn operation that uses the provided criteria to search for discoverable iCloud users.\nDeprecated\nclass CKFetchRecordChangesOperation\nAn operation that reports on the changed and deleted records in the specified record zone.\nDeprecated\nclass CKMarkNotificationsReadOperation\nAn operation that marks push notifications as read by your app.\nDeprecated\nclass CKModifyBadgeOperation\nAn operation that sets the value of the app icon’s badge.\nDeprecated"
  },
  {
    "title": "init() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckfetchrecordsoperation/1476072-init",
    "html": "Discussion\n\nYou must set the recordIDs property before you execute the operation.\n\nA fetch operation retrieves all of a record’s fields, including any assets that those fields reference. If you want to minimize the amount of data that the operation returns, configure the desiredKeys property with only the keys that contain the values that you have an interest in.\n\nAfter initializing the operation, you must associate at least one progress handler with the operation (excluding the completion handler) to process the results.\n\nSee Also\nCreating a Record Fetch Operation\ninit(recordIDs: [CKRecord.ID])\nCreates a fetch operation for retrieving the records with the specified IDs."
  },
  {
    "title": "recordIDs | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckfetchrecordsoperation/1476076-recordids",
    "html": "Discussion\n\nUse this property to view or change the IDs of the records you want to retrieve. If you use the operation that fetchCurrentUserRecordOperation() returns, CloudKit ignores the contents of this property and sets its value to nil.\n\nIf you intend to specify a value other than nil, do so before you execute the operation or add the operation to a queue. The records you fetch don’t need to be in the same record zone. The record ID for each record provides the zone information that CloudKit needs to fetch the corresponding record.\n\nSee Also\nConfiguring a Record Fetch Operation\nvar desiredKeys: [CKRecord.FieldKey]?\nThe fields of the records to fetch."
  },
  {
    "title": "init(recordIDs:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckfetchrecordsoperation/1476074-init",
    "html": "Parameters\nrecordIDs\n\nAn array of CKRecord.ID objects that represents the records you want to retrieve. If you provide an empty array, you must set the recordIDs property before you execute the operation.\n\nDiscussion\n\nA fetch operation retrieves all of a record’s fields, including any assets that those fields reference. If you want to minimize the amount of data that the operation returns, configure the desiredKeys property with only the keys that contain the values that you have an interest in.\n\nAfter initializing the operation, you must associate at least one progress handler with the operation (excluding the completion handler) to process the results.\n\nSee Also\nCreating a Record Fetch Operation\ninit()\nCreates an empty fetch operation."
  },
  {
    "title": "fetchCurrentUserRecordOperation() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckfetchrecordsoperation/1476070-fetchcurrentuserrecordoperation",
    "html": "Discussion\n\nThe returned operation object searches for the single record that corresponds to the current user record. You must associate at least one progress handler with the operation object (excluding the completion handler) to process the results."
  },
  {
    "title": "CKOperation.Configuration | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckoperation/configuration",
    "html": "Overview\n\nAll of the properties in CKOperationConfiguration have a default value. When determining which properties to apply to a CloudKit operation, consult the operation's configuration property, as well as the defaultConfiguration property of the group that the operation belongs to. These properties combine through the following rules:\n\nGroup default configuration value\n\n\t\n\nOperation configuration value\n\n\t\n\nValue applied to operation\n\n\n\n\ndefault value\n\n\t\n\ndefault value\n\n\t\n\ndefault value\n\n\n\n\ndefault value\n\n\t\n\nexplicit value\n\n\t\n\noperation.configuration explicit value\n\n\n\n\nexplicit value\n\n\t\n\ndefault value\n\n\t\n\ngroup.defaultConfiguration explicit value\n\n\n\n\nexplicit value\n\n\t\n\nexplicit value\n\n\t\n\noperation.configuration explicit value\n\nTopics\nPreparing a Configuration\nvar allowsCellularAccess: Bool\nA Boolean value that indicates whether operations that use this configuration can send data over the cellular network.\nvar container: CKContainer?\nThe configuration’s container.\nvar isLongLived: Bool\nA Boolean value that indicates whether the operations that use this configuration are long-lived.\nvar qualityOfService: QualityOfService\nThe priority that the system uses when it allocates resources to the operations that use this configuration.\nvar timeoutIntervalForRequest: TimeInterval\nThe maximum amount of time that a request can take.\nvar timeoutIntervalForResource: TimeInterval\nThe maximum amount of time that a resource request can take.\nRelationships\nInherits From\nNSObject\nConforms To\nSendable\nSee Also\nManaging the Operation's Configuration\nvar configuration: CKOperation.Configuration!\nThe operation’s configuration.\nvar group: CKOperationGroup?\nThe operation’s group.\nvar longLivedOperationWasPersistedBlock: (() -> Void)?\nThe closure to execute when the server begins to store callbacks for the long-lived operation."
  },
  {
    "title": "serverResponseLost | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckerror/2881879-serverresponselost",
    "html": "See Also\nGetting Error Codes\nstatic var accountTemporarilyUnavailable: CKError.Code\nAn error that occurs when the user’s iCloud account is temporarily unavailable.\nstatic var alreadyShared: CKError.Code\nAn error that occurs when CloudKit attempts to share a record with an existing share.\nstatic var assetFileModified: CKError.Code\nAn error that occurs when the system modifies an asset while saving it.\nstatic var assetFileNotFound: CKError.Code\nAn error that occurs when the system can’t find the specified asset.\nstatic var assetNotAvailable: CKError.Code\nAn error that occurs when the system can’t access the specified asset.\nstatic var badContainer: CKError.Code\nAn error that occurs when you use an unknown or unauthorized container.\nstatic var badDatabase: CKError.Code\nAn error that occurs when the operation can’t complete for the specified database.\nstatic var batchRequestFailed: CKError.Code\nAn error that occurs when the system rejects the entire batch of changes.\nstatic var changeTokenExpired: CKError.Code\nAn error that occurs when the change token expires.\nstatic var constraintViolation: CKError.Code\nAn error that occurs when the server rejects the request because of a unique constraint violation.\nstatic var incompatibleVersion: CKError.Code\nAn error that occurs when the current app version is older than the oldest allowed version.\nstatic var internalError: CKError.Code\nA nonrecoverable error that CloudKit encounters.\nstatic var invalidArguments: CKError.Code\nAn error that occurs when the request contains invalid information.\nstatic var limitExceeded: CKError.Code\nAn error that occurs when a request’s size exceeds the limit.\nstatic var managedAccountRestricted: CKError.Code\nAn error that occurs when CloudKit rejects a request due to a managed-account restriction.\nstatic var missingEntitlement: CKError.Code\nAn error that occurs when the app is missing a required entitlement.\nstatic var networkFailure: CKError.Code\nAn error that occurs when a network is available, but CloudKit is inaccessible.\nstatic var networkUnavailable: CKError.Code\nAn error that occurs when the network is unavailable.\nstatic var notAuthenticated: CKError.Code\nAn error that occurs when the user is unauthenticated.\nstatic var operationCancelled: CKError.Code\nAn error that occurs when an operation cancels.\nstatic var partialFailure: CKError.Code\nAn error that occurs when an operation completes with partial failures.\nstatic var participantMayNeedVerification: CKError.Code\nAn error that occurs when the user isn’t a participant of the share.\nstatic var permissionFailure: CKError.Code\nAn error that occurs when the user doesn’t have permission to save or fetch data.\nstatic var quotaExceeded: CKError.Code\nAn error that occurs when saving a record exceeds the user’s storage quota.\nstatic var referenceViolation: CKError.Code\nAn error that occurs when CloudKit can’t find the target of a reference.\nstatic var requestRateLimited: CKError.Code\nAn error that occurs when CloudKit rate-limits requests.\nstatic var serverRecordChanged: CKError.Code\nAn error that occurs when CloudKit rejects a record because the server’s version is different.\nstatic var serverRejectedRequest: CKError.Code\nAn error that occurs when CloudKit rejects the request.\nstatic var serviceUnavailable: CKError.Code\nAn error that occurs when CloudKit is unavailable.\nstatic var tooManyParticipants: CKError.Code\nAn error that occurs when a share has too many participants.\nstatic var unknownItem: CKError.Code\nAn error that occurs when the specified record doesn’t exist.\nstatic var userDeletedZone: CKError.Code\nAn error that occurs when the user deletes a record zone using the Settings app.\nstatic var zoneBusy: CKError.Code\nAn error that occurs when the server is too busy to handle the record zone operation.\nstatic var zoneNotFound: CKError.Code\nAn error that occurs when the specified record zone doesn’t exist.\nstatic var resultsTruncated: CKError.Code\nAn error that occurs when CloudKit truncates a query’s results.\nDeprecated\nenum CKError.Code\nThe error codes that CloudKit returns."
  },
  {
    "title": "serviceUnavailable | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckerror/2325227-serviceunavailable",
    "html": "See Also\nGetting Error Codes\nstatic var accountTemporarilyUnavailable: CKError.Code\nAn error that occurs when the user’s iCloud account is temporarily unavailable.\nstatic var alreadyShared: CKError.Code\nAn error that occurs when CloudKit attempts to share a record with an existing share.\nstatic var assetFileModified: CKError.Code\nAn error that occurs when the system modifies an asset while saving it.\nstatic var assetFileNotFound: CKError.Code\nAn error that occurs when the system can’t find the specified asset.\nstatic var assetNotAvailable: CKError.Code\nAn error that occurs when the system can’t access the specified asset.\nstatic var badContainer: CKError.Code\nAn error that occurs when you use an unknown or unauthorized container.\nstatic var badDatabase: CKError.Code\nAn error that occurs when the operation can’t complete for the specified database.\nstatic var batchRequestFailed: CKError.Code\nAn error that occurs when the system rejects the entire batch of changes.\nstatic var changeTokenExpired: CKError.Code\nAn error that occurs when the change token expires.\nstatic var constraintViolation: CKError.Code\nAn error that occurs when the server rejects the request because of a unique constraint violation.\nstatic var incompatibleVersion: CKError.Code\nAn error that occurs when the current app version is older than the oldest allowed version.\nstatic var internalError: CKError.Code\nA nonrecoverable error that CloudKit encounters.\nstatic var invalidArguments: CKError.Code\nAn error that occurs when the request contains invalid information.\nstatic var limitExceeded: CKError.Code\nAn error that occurs when a request’s size exceeds the limit.\nstatic var managedAccountRestricted: CKError.Code\nAn error that occurs when CloudKit rejects a request due to a managed-account restriction.\nstatic var missingEntitlement: CKError.Code\nAn error that occurs when the app is missing a required entitlement.\nstatic var networkFailure: CKError.Code\nAn error that occurs when a network is available, but CloudKit is inaccessible.\nstatic var networkUnavailable: CKError.Code\nAn error that occurs when the network is unavailable.\nstatic var notAuthenticated: CKError.Code\nAn error that occurs when the user is unauthenticated.\nstatic var operationCancelled: CKError.Code\nAn error that occurs when an operation cancels.\nstatic var partialFailure: CKError.Code\nAn error that occurs when an operation completes with partial failures.\nstatic var participantMayNeedVerification: CKError.Code\nAn error that occurs when the user isn’t a participant of the share.\nstatic var permissionFailure: CKError.Code\nAn error that occurs when the user doesn’t have permission to save or fetch data.\nstatic var quotaExceeded: CKError.Code\nAn error that occurs when saving a record exceeds the user’s storage quota.\nstatic var referenceViolation: CKError.Code\nAn error that occurs when CloudKit can’t find the target of a reference.\nstatic var requestRateLimited: CKError.Code\nAn error that occurs when CloudKit rate-limits requests.\nstatic var serverRecordChanged: CKError.Code\nAn error that occurs when CloudKit rejects a record because the server’s version is different.\nstatic var serverRejectedRequest: CKError.Code\nAn error that occurs when CloudKit rejects the request.\nstatic var serverResponseLost: CKError.Code\nAn error that occurs when CloudKit is unable to maintain the network connection and provide a response.\nstatic var tooManyParticipants: CKError.Code\nAn error that occurs when a share has too many participants.\nstatic var unknownItem: CKError.Code\nAn error that occurs when the specified record doesn’t exist.\nstatic var userDeletedZone: CKError.Code\nAn error that occurs when the user deletes a record zone using the Settings app.\nstatic var zoneBusy: CKError.Code\nAn error that occurs when the server is too busy to handle the record zone operation.\nstatic var zoneNotFound: CKError.Code\nAn error that occurs when the specified record zone doesn’t exist.\nstatic var resultsTruncated: CKError.Code\nAn error that occurs when CloudKit truncates a query’s results.\nDeprecated\nenum CKError.Code\nThe error codes that CloudKit returns."
  },
  {
    "title": "tooManyParticipants | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckerror/2325201-toomanyparticipants",
    "html": "Discussion\n\nRemove some participants before you retry the operation. Limits can change at any time, but CloudKit generally enforces a maximum of 100 participants for a share.\n\nSee Also\nGetting Error Codes\nstatic var accountTemporarilyUnavailable: CKError.Code\nAn error that occurs when the user’s iCloud account is temporarily unavailable.\nstatic var alreadyShared: CKError.Code\nAn error that occurs when CloudKit attempts to share a record with an existing share.\nstatic var assetFileModified: CKError.Code\nAn error that occurs when the system modifies an asset while saving it.\nstatic var assetFileNotFound: CKError.Code\nAn error that occurs when the system can’t find the specified asset.\nstatic var assetNotAvailable: CKError.Code\nAn error that occurs when the system can’t access the specified asset.\nstatic var badContainer: CKError.Code\nAn error that occurs when you use an unknown or unauthorized container.\nstatic var badDatabase: CKError.Code\nAn error that occurs when the operation can’t complete for the specified database.\nstatic var batchRequestFailed: CKError.Code\nAn error that occurs when the system rejects the entire batch of changes.\nstatic var changeTokenExpired: CKError.Code\nAn error that occurs when the change token expires.\nstatic var constraintViolation: CKError.Code\nAn error that occurs when the server rejects the request because of a unique constraint violation.\nstatic var incompatibleVersion: CKError.Code\nAn error that occurs when the current app version is older than the oldest allowed version.\nstatic var internalError: CKError.Code\nA nonrecoverable error that CloudKit encounters.\nstatic var invalidArguments: CKError.Code\nAn error that occurs when the request contains invalid information.\nstatic var limitExceeded: CKError.Code\nAn error that occurs when a request’s size exceeds the limit.\nstatic var managedAccountRestricted: CKError.Code\nAn error that occurs when CloudKit rejects a request due to a managed-account restriction.\nstatic var missingEntitlement: CKError.Code\nAn error that occurs when the app is missing a required entitlement.\nstatic var networkFailure: CKError.Code\nAn error that occurs when a network is available, but CloudKit is inaccessible.\nstatic var networkUnavailable: CKError.Code\nAn error that occurs when the network is unavailable.\nstatic var notAuthenticated: CKError.Code\nAn error that occurs when the user is unauthenticated.\nstatic var operationCancelled: CKError.Code\nAn error that occurs when an operation cancels.\nstatic var partialFailure: CKError.Code\nAn error that occurs when an operation completes with partial failures.\nstatic var participantMayNeedVerification: CKError.Code\nAn error that occurs when the user isn’t a participant of the share.\nstatic var permissionFailure: CKError.Code\nAn error that occurs when the user doesn’t have permission to save or fetch data.\nstatic var quotaExceeded: CKError.Code\nAn error that occurs when saving a record exceeds the user’s storage quota.\nstatic var referenceViolation: CKError.Code\nAn error that occurs when CloudKit can’t find the target of a reference.\nstatic var requestRateLimited: CKError.Code\nAn error that occurs when CloudKit rate-limits requests.\nstatic var serverRecordChanged: CKError.Code\nAn error that occurs when CloudKit rejects a record because the server’s version is different.\nstatic var serverRejectedRequest: CKError.Code\nAn error that occurs when CloudKit rejects the request.\nstatic var serverResponseLost: CKError.Code\nAn error that occurs when CloudKit is unable to maintain the network connection and provide a response.\nstatic var serviceUnavailable: CKError.Code\nAn error that occurs when CloudKit is unavailable.\nstatic var unknownItem: CKError.Code\nAn error that occurs when the specified record doesn’t exist.\nstatic var userDeletedZone: CKError.Code\nAn error that occurs when the user deletes a record zone using the Settings app.\nstatic var zoneBusy: CKError.Code\nAn error that occurs when the server is too busy to handle the record zone operation.\nstatic var zoneNotFound: CKError.Code\nAn error that occurs when the specified record zone doesn’t exist.\nstatic var resultsTruncated: CKError.Code\nAn error that occurs when CloudKit truncates a query’s results.\nDeprecated\nenum CKError.Code\nThe error codes that CloudKit returns."
  },
  {
    "title": "unknownItem | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckerror/2325223-unknownitem",
    "html": "See Also\nGetting Error Codes\nstatic var accountTemporarilyUnavailable: CKError.Code\nAn error that occurs when the user’s iCloud account is temporarily unavailable.\nstatic var alreadyShared: CKError.Code\nAn error that occurs when CloudKit attempts to share a record with an existing share.\nstatic var assetFileModified: CKError.Code\nAn error that occurs when the system modifies an asset while saving it.\nstatic var assetFileNotFound: CKError.Code\nAn error that occurs when the system can’t find the specified asset.\nstatic var assetNotAvailable: CKError.Code\nAn error that occurs when the system can’t access the specified asset.\nstatic var badContainer: CKError.Code\nAn error that occurs when you use an unknown or unauthorized container.\nstatic var badDatabase: CKError.Code\nAn error that occurs when the operation can’t complete for the specified database.\nstatic var batchRequestFailed: CKError.Code\nAn error that occurs when the system rejects the entire batch of changes.\nstatic var changeTokenExpired: CKError.Code\nAn error that occurs when the change token expires.\nstatic var constraintViolation: CKError.Code\nAn error that occurs when the server rejects the request because of a unique constraint violation.\nstatic var incompatibleVersion: CKError.Code\nAn error that occurs when the current app version is older than the oldest allowed version.\nstatic var internalError: CKError.Code\nA nonrecoverable error that CloudKit encounters.\nstatic var invalidArguments: CKError.Code\nAn error that occurs when the request contains invalid information.\nstatic var limitExceeded: CKError.Code\nAn error that occurs when a request’s size exceeds the limit.\nstatic var managedAccountRestricted: CKError.Code\nAn error that occurs when CloudKit rejects a request due to a managed-account restriction.\nstatic var missingEntitlement: CKError.Code\nAn error that occurs when the app is missing a required entitlement.\nstatic var networkFailure: CKError.Code\nAn error that occurs when a network is available, but CloudKit is inaccessible.\nstatic var networkUnavailable: CKError.Code\nAn error that occurs when the network is unavailable.\nstatic var notAuthenticated: CKError.Code\nAn error that occurs when the user is unauthenticated.\nstatic var operationCancelled: CKError.Code\nAn error that occurs when an operation cancels.\nstatic var partialFailure: CKError.Code\nAn error that occurs when an operation completes with partial failures.\nstatic var participantMayNeedVerification: CKError.Code\nAn error that occurs when the user isn’t a participant of the share.\nstatic var permissionFailure: CKError.Code\nAn error that occurs when the user doesn’t have permission to save or fetch data.\nstatic var quotaExceeded: CKError.Code\nAn error that occurs when saving a record exceeds the user’s storage quota.\nstatic var referenceViolation: CKError.Code\nAn error that occurs when CloudKit can’t find the target of a reference.\nstatic var requestRateLimited: CKError.Code\nAn error that occurs when CloudKit rate-limits requests.\nstatic var serverRecordChanged: CKError.Code\nAn error that occurs when CloudKit rejects a record because the server’s version is different.\nstatic var serverRejectedRequest: CKError.Code\nAn error that occurs when CloudKit rejects the request.\nstatic var serverResponseLost: CKError.Code\nAn error that occurs when CloudKit is unable to maintain the network connection and provide a response.\nstatic var serviceUnavailable: CKError.Code\nAn error that occurs when CloudKit is unavailable.\nstatic var tooManyParticipants: CKError.Code\nAn error that occurs when a share has too many participants.\nstatic var userDeletedZone: CKError.Code\nAn error that occurs when the user deletes a record zone using the Settings app.\nstatic var zoneBusy: CKError.Code\nAn error that occurs when the server is too busy to handle the record zone operation.\nstatic var zoneNotFound: CKError.Code\nAn error that occurs when the specified record zone doesn’t exist.\nstatic var resultsTruncated: CKError.Code\nAn error that occurs when CloudKit truncates a query’s results.\nDeprecated\nenum CKError.Code\nThe error codes that CloudKit returns."
  },
  {
    "title": "userDeletedZone | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckerror/2325212-userdeletedzone",
    "html": "See Also\nGetting Error Codes\nstatic var accountTemporarilyUnavailable: CKError.Code\nAn error that occurs when the user’s iCloud account is temporarily unavailable.\nstatic var alreadyShared: CKError.Code\nAn error that occurs when CloudKit attempts to share a record with an existing share.\nstatic var assetFileModified: CKError.Code\nAn error that occurs when the system modifies an asset while saving it.\nstatic var assetFileNotFound: CKError.Code\nAn error that occurs when the system can’t find the specified asset.\nstatic var assetNotAvailable: CKError.Code\nAn error that occurs when the system can’t access the specified asset.\nstatic var badContainer: CKError.Code\nAn error that occurs when you use an unknown or unauthorized container.\nstatic var badDatabase: CKError.Code\nAn error that occurs when the operation can’t complete for the specified database.\nstatic var batchRequestFailed: CKError.Code\nAn error that occurs when the system rejects the entire batch of changes.\nstatic var changeTokenExpired: CKError.Code\nAn error that occurs when the change token expires.\nstatic var constraintViolation: CKError.Code\nAn error that occurs when the server rejects the request because of a unique constraint violation.\nstatic var incompatibleVersion: CKError.Code\nAn error that occurs when the current app version is older than the oldest allowed version.\nstatic var internalError: CKError.Code\nA nonrecoverable error that CloudKit encounters.\nstatic var invalidArguments: CKError.Code\nAn error that occurs when the request contains invalid information.\nstatic var limitExceeded: CKError.Code\nAn error that occurs when a request’s size exceeds the limit.\nstatic var managedAccountRestricted: CKError.Code\nAn error that occurs when CloudKit rejects a request due to a managed-account restriction.\nstatic var missingEntitlement: CKError.Code\nAn error that occurs when the app is missing a required entitlement.\nstatic var networkFailure: CKError.Code\nAn error that occurs when a network is available, but CloudKit is inaccessible.\nstatic var networkUnavailable: CKError.Code\nAn error that occurs when the network is unavailable.\nstatic var notAuthenticated: CKError.Code\nAn error that occurs when the user is unauthenticated.\nstatic var operationCancelled: CKError.Code\nAn error that occurs when an operation cancels.\nstatic var partialFailure: CKError.Code\nAn error that occurs when an operation completes with partial failures.\nstatic var participantMayNeedVerification: CKError.Code\nAn error that occurs when the user isn’t a participant of the share.\nstatic var permissionFailure: CKError.Code\nAn error that occurs when the user doesn’t have permission to save or fetch data.\nstatic var quotaExceeded: CKError.Code\nAn error that occurs when saving a record exceeds the user’s storage quota.\nstatic var referenceViolation: CKError.Code\nAn error that occurs when CloudKit can’t find the target of a reference.\nstatic var requestRateLimited: CKError.Code\nAn error that occurs when CloudKit rate-limits requests.\nstatic var serverRecordChanged: CKError.Code\nAn error that occurs when CloudKit rejects a record because the server’s version is different.\nstatic var serverRejectedRequest: CKError.Code\nAn error that occurs when CloudKit rejects the request.\nstatic var serverResponseLost: CKError.Code\nAn error that occurs when CloudKit is unable to maintain the network connection and provide a response.\nstatic var serviceUnavailable: CKError.Code\nAn error that occurs when CloudKit is unavailable.\nstatic var tooManyParticipants: CKError.Code\nAn error that occurs when a share has too many participants.\nstatic var unknownItem: CKError.Code\nAn error that occurs when the specified record doesn’t exist.\nstatic var zoneBusy: CKError.Code\nAn error that occurs when the server is too busy to handle the record zone operation.\nstatic var zoneNotFound: CKError.Code\nAn error that occurs when the specified record zone doesn’t exist.\nstatic var resultsTruncated: CKError.Code\nAn error that occurs when CloudKit truncates a query’s results.\nDeprecated\nenum CKError.Code\nThe error codes that CloudKit returns."
  },
  {
    "title": "CKRecordChangedErrorAncestorRecordKey | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckrecordchangederrorancestorrecordkey",
    "html": "See Also\nRecord Changed Error Keys\nlet CKRecordChangedErrorClientRecordKey: String\nThe key to retrieve the local version of the record.\nlet CKRecordChangedErrorServerRecordKey: String\nThe key to retrieve the server’s version of the record."
  },
  {
    "title": "CKError.Code.serverRecordChanged | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckerror/code/serverrecordchanged",
    "html": "Discussion\n\nThis error indicates that the server's version of the record is newer than the local version the client’s trying to save. Your app needs to handle this error, resolve any conflicts in the record, and attempt another save of the record, if necessary.\n\nCloudKit provides your app with three copies of the record in this error's userInfo dictionary to assist with comparing and merging the changes:\n\nCKRecordChangedErrorClientRecordKey: The local record that the client’s trying to save.\n\nCKRecordChangedErrorServerRecordKey: The record that exists on the server.\n\nCKRecordChangedErrorAncestorRecordKey: The original version of the record.\n\nWhen a conflict occurs, your app needs to merge all changes into the record for the CKRecordChangedErrorServerRecordKey key and attempt a new save using that record. Merging into either of the other two copies of the record results in another conflict error because those records have the old record change tag.\n\nSee Also\nError Codes\ncase accountTemporarilyUnavailable\nAn error that occurs when the user’s iCloud account is temporarily unavailable.\ncase alreadyShared\nAn error that occurs when CloudKit attempts to share a record with an existing share.\ncase assetFileModified\nAn error that occurs when the system modifies an asset while saving it.\ncase assetFileNotFound\nAn error that occurs when the system can’t find the specified asset.\ncase assetNotAvailable\nAn error that occurs when the system can’t access the specified asset.\ncase badContainer\nAn error that occurs when you use an unknown or unauthorized container.\ncase badDatabase\nAn error that occurs when the operation can’t complete for the specified database.\ncase batchRequestFailed\nAn error that occurs when the system rejects the entire batch of changes.\ncase changeTokenExpired\nAn error that occurs when the change token expires.\ncase constraintViolation\nAn error that occurs when the server rejects the request because of a unique constraint violation.\ncase incompatibleVersion\nAn error that occurs when the current app version is older than the oldest allowed version.\ncase internalError\nA nonrecoverable error that CloudKit encounters.\ncase invalidArguments\nAn error that occurs when the request contains invalid information.\ncase limitExceeded\nAn error that occurs when a request’s size exceeds the limit.\ncase managedAccountRestricted\nAn error that occurs when CloudKit rejects a request due to a managed-account restriction.\ncase missingEntitlement\nAn error that occurs when the app is missing a required entitlement.\ncase networkFailure\nAn error that occurs when a network is available, but CloudKit is inaccessible.\ncase networkUnavailable\nAn error that occurs when the network is unavailable.\ncase notAuthenticated\nAn error that occurs when the user is unauthenticated.\ncase operationCancelled\nAn error that occurs when an operation cancels.\ncase partialFailure\nAn error that occurs when an operation completes with partial failures.\ncase participantMayNeedVerification\nAn error that occurs when the user isn’t a participant of the share.\ncase permissionFailure\nAn error that occurs when the user doesn’t have permission to save or fetch data.\ncase quotaExceeded\nAn error that occurs when saving a record exceeds the user’s storage quota.\ncase referenceViolation\nAn error that occurs when CloudKit can’t find the target of a reference.\ncase requestRateLimited\nAn error that occurs when CloudKit rate-limits requests.\ncase serverRejectedRequest\nAn error that occurs when CloudKit rejects the request.\ncase serverResponseLost\nAn error that occurs when CloudKit is unable to maintain the network connection and provide a response.\ncase serviceUnavailable\nAn error that occurs when CloudKit is unavailable.\ncase tooManyParticipants\nAn error that occurs when a share has too many participants.\ncase unknownItem\nAn error that occurs when the specified record doesn’t exist.\ncase userDeletedZone\nAn error that occurs when the user deletes a record zone using the Settings app.\ncase zoneBusy\nAn error that occurs when the server is too busy to handle the record zone operation.\ncase zoneNotFound\nAn error that occurs when the specified record zone doesn’t exist.\ncase resultsTruncated\nAn error that occurs when CloudKit truncates a query’s results.\nDeprecated"
  },
  {
    "title": "zoneBusy | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckerror/2325220-zonebusy",
    "html": "Discussion\n\nTry the operation again in a few seconds. If you encounter this error again, increase the delay time exponentially for each subsequent retry to minimize server contention for the zone.\n\nCheck for a CKErrorRetryAfterKey key in the userInfo dictionary of any CloudKit error that you receive. Use the value of this key as the number of seconds to wait before retrying the operation.\n\nSee Also\nGetting Error Codes\nstatic var accountTemporarilyUnavailable: CKError.Code\nAn error that occurs when the user’s iCloud account is temporarily unavailable.\nstatic var alreadyShared: CKError.Code\nAn error that occurs when CloudKit attempts to share a record with an existing share.\nstatic var assetFileModified: CKError.Code\nAn error that occurs when the system modifies an asset while saving it.\nstatic var assetFileNotFound: CKError.Code\nAn error that occurs when the system can’t find the specified asset.\nstatic var assetNotAvailable: CKError.Code\nAn error that occurs when the system can’t access the specified asset.\nstatic var badContainer: CKError.Code\nAn error that occurs when you use an unknown or unauthorized container.\nstatic var badDatabase: CKError.Code\nAn error that occurs when the operation can’t complete for the specified database.\nstatic var batchRequestFailed: CKError.Code\nAn error that occurs when the system rejects the entire batch of changes.\nstatic var changeTokenExpired: CKError.Code\nAn error that occurs when the change token expires.\nstatic var constraintViolation: CKError.Code\nAn error that occurs when the server rejects the request because of a unique constraint violation.\nstatic var incompatibleVersion: CKError.Code\nAn error that occurs when the current app version is older than the oldest allowed version.\nstatic var internalError: CKError.Code\nA nonrecoverable error that CloudKit encounters.\nstatic var invalidArguments: CKError.Code\nAn error that occurs when the request contains invalid information.\nstatic var limitExceeded: CKError.Code\nAn error that occurs when a request’s size exceeds the limit.\nstatic var managedAccountRestricted: CKError.Code\nAn error that occurs when CloudKit rejects a request due to a managed-account restriction.\nstatic var missingEntitlement: CKError.Code\nAn error that occurs when the app is missing a required entitlement.\nstatic var networkFailure: CKError.Code\nAn error that occurs when a network is available, but CloudKit is inaccessible.\nstatic var networkUnavailable: CKError.Code\nAn error that occurs when the network is unavailable.\nstatic var notAuthenticated: CKError.Code\nAn error that occurs when the user is unauthenticated.\nstatic var operationCancelled: CKError.Code\nAn error that occurs when an operation cancels.\nstatic var partialFailure: CKError.Code\nAn error that occurs when an operation completes with partial failures.\nstatic var participantMayNeedVerification: CKError.Code\nAn error that occurs when the user isn’t a participant of the share.\nstatic var permissionFailure: CKError.Code\nAn error that occurs when the user doesn’t have permission to save or fetch data.\nstatic var quotaExceeded: CKError.Code\nAn error that occurs when saving a record exceeds the user’s storage quota.\nstatic var referenceViolation: CKError.Code\nAn error that occurs when CloudKit can’t find the target of a reference.\nstatic var requestRateLimited: CKError.Code\nAn error that occurs when CloudKit rate-limits requests.\nstatic var serverRecordChanged: CKError.Code\nAn error that occurs when CloudKit rejects a record because the server’s version is different.\nstatic var serverRejectedRequest: CKError.Code\nAn error that occurs when CloudKit rejects the request.\nstatic var serverResponseLost: CKError.Code\nAn error that occurs when CloudKit is unable to maintain the network connection and provide a response.\nstatic var serviceUnavailable: CKError.Code\nAn error that occurs when CloudKit is unavailable.\nstatic var tooManyParticipants: CKError.Code\nAn error that occurs when a share has too many participants.\nstatic var unknownItem: CKError.Code\nAn error that occurs when the specified record doesn’t exist.\nstatic var userDeletedZone: CKError.Code\nAn error that occurs when the user deletes a record zone using the Settings app.\nstatic var zoneNotFound: CKError.Code\nAn error that occurs when the specified record zone doesn’t exist.\nstatic var resultsTruncated: CKError.Code\nAn error that occurs when CloudKit truncates a query’s results.\nDeprecated\nenum CKError.Code\nThe error codes that CloudKit returns."
  },
  {
    "title": "CKRecordChangedErrorServerRecordKey | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckrecordchangederrorserverrecordkey",
    "html": "See Also\nRecord Changed Error Keys\nlet CKRecordChangedErrorAncestorRecordKey: String\nThe key to retrieve the original version of the record.\nlet CKRecordChangedErrorClientRecordKey: String\nThe key to retrieve the local version of the record."
  },
  {
    "title": "CKRecord.ID | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckrecord/id",
    "html": "Overview\n\nA record ID object consists of a name string and a zone ID. The name string is an ASCII string that doesn’t exceed 255 characters in length. For automatically created records, the ID name string derives from a UUID and is, therefore, unique. When creating your own record ID objects, you can use names that have more meaning to your app or to the user, as long as each name is unique within the specified zone. For example, you might use a document name for the name string.\n\nRecord IDs must be unique within the specified database, but you can reuse record IDs in different databases. Each container has a public and a private database, and the private database is different for each unique user. This configuration provides for the reusing of record IDs in each user's private database, but ensures that only one record uses a specific record ID in the public database.\n\nCloudKit generally creates record IDs when it first saves a new record, but you might manually instantiate instances of CKRecordID in specific situations. For example, you must create an instance when saving a record in a zone other than the default zone. You also instantiate instances of CKRecordID when retrieving specific records from a database.\n\nDon’t subclass CKRecordID.\n\nInteracting with Record IDs\n\nAfter you create a CKRecordID object, interactions with that object typically involve creating a new record or retrieving an existing record from a database.\n\nYou might also use record IDs when you can’t use a CKRecord.Reference object to refer to a record. References are only valid within a single zone of a database. To refer to objects outside of the current zone or database, save the strings in the record’s CKRecordID and CKRecordZone.ID objects. When you want to retrieve the record later, use those strings to recreate the record and zone ID objects so that you can fetch the record.\n\nCreating Record IDs for New Records\n\nTo assign a custom record ID to a new record, you must create the CKRecordID object first. You need to know the intended name and zone information for that record, which might also require creating a CKRecordZone.ID object. After creating the record ID object, initialize your new record using its init(__recordType:recordID:) method.\n\nUsing Record IDs to Fetch Records\n\nUse a record ID to fetch the corresponding CKRecord object from a database quickly. You perform the fetch operation using a CKFetchRecordsOperation object or the fetch(withRecordID:completionHandler:) method of the CKDatabase class. In both cases, CloudKit returns the record asynchronously using the handler you provide.\n\nTopics\nCreating a Record ID\ninit(recordName: String)\nCreates a new record ID with the specified name in the default zone.\ninit(recordName: String, zoneID: CKRecordZone.ID)\nCreates a new record ID with the specified name and zone information.\nlet CKRecordNameZoneWideShare: String\nThe name of a share record that manages a shared record zone.\nGetting the Record ID's Name\nvar recordName: String\nThe unique name of the record.\nGetting the Record ID's Zone\nvar zoneID: CKRecordZone.ID\nThe ID of the zone that contains the record.\nRelationships\nInherits From\nNSObject\nConforms To\nNSCopying\nNSSecureCoding\nSendable\nSee Also\nAccessing the Record’s Metadata\nvar recordID: CKRecord.ID\nThe unique ID of the record.\nvar recordType: CKRecord.RecordType\nThe value that your app defines to identify the type of record.\nenum CKRecord.SystemType\nPossible values for record types of system records.\nvar creationDate: Date?\nThe time when CloudKit first saves the record to the server.\nvar creatorUserRecordID: CKRecord.ID?\nThe ID of the user who creates the record.\nvar modificationDate: Date?\nThe most recent time that CloudKit saved the record to the server.\nvar lastModifiedUserRecordID: CKRecord.ID?\nThe ID of the user who most recently modified the record.\nvar recordChangeTag: String?\nThe server change token for the record."
  },
  {
    "title": "CKRecordChangedErrorClientRecordKey | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckrecordchangederrorclientrecordkey",
    "html": "See Also\nRecord Changed Error Keys\nlet CKRecordChangedErrorAncestorRecordKey: String\nThe key to retrieve the original version of the record.\nlet CKRecordChangedErrorServerRecordKey: String\nThe key to retrieve the server’s version of the record."
  },
  {
    "title": "CKError.Code.zoneNotFound | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckerror/code/zonenotfound",
    "html": "See Also\nError Codes\ncase accountTemporarilyUnavailable\nAn error that occurs when the user’s iCloud account is temporarily unavailable.\ncase alreadyShared\nAn error that occurs when CloudKit attempts to share a record with an existing share.\ncase assetFileModified\nAn error that occurs when the system modifies an asset while saving it.\ncase assetFileNotFound\nAn error that occurs when the system can’t find the specified asset.\ncase assetNotAvailable\nAn error that occurs when the system can’t access the specified asset.\ncase badContainer\nAn error that occurs when you use an unknown or unauthorized container.\ncase badDatabase\nAn error that occurs when the operation can’t complete for the specified database.\ncase batchRequestFailed\nAn error that occurs when the system rejects the entire batch of changes.\ncase changeTokenExpired\nAn error that occurs when the change token expires.\ncase constraintViolation\nAn error that occurs when the server rejects the request because of a unique constraint violation.\ncase incompatibleVersion\nAn error that occurs when the current app version is older than the oldest allowed version.\ncase internalError\nA nonrecoverable error that CloudKit encounters.\ncase invalidArguments\nAn error that occurs when the request contains invalid information.\ncase limitExceeded\nAn error that occurs when a request’s size exceeds the limit.\ncase managedAccountRestricted\nAn error that occurs when CloudKit rejects a request due to a managed-account restriction.\ncase missingEntitlement\nAn error that occurs when the app is missing a required entitlement.\ncase networkFailure\nAn error that occurs when a network is available, but CloudKit is inaccessible.\ncase networkUnavailable\nAn error that occurs when the network is unavailable.\ncase notAuthenticated\nAn error that occurs when the user is unauthenticated.\ncase operationCancelled\nAn error that occurs when an operation cancels.\ncase partialFailure\nAn error that occurs when an operation completes with partial failures.\ncase participantMayNeedVerification\nAn error that occurs when the user isn’t a participant of the share.\ncase permissionFailure\nAn error that occurs when the user doesn’t have permission to save or fetch data.\ncase quotaExceeded\nAn error that occurs when saving a record exceeds the user’s storage quota.\ncase referenceViolation\nAn error that occurs when CloudKit can’t find the target of a reference.\ncase requestRateLimited\nAn error that occurs when CloudKit rate-limits requests.\ncase serverRecordChanged\nAn error that occurs when CloudKit rejects a record because the server’s version is different.\ncase serverRejectedRequest\nAn error that occurs when CloudKit rejects the request.\ncase serverResponseLost\nAn error that occurs when CloudKit is unable to maintain the network connection and provide a response.\ncase serviceUnavailable\nAn error that occurs when CloudKit is unavailable.\ncase tooManyParticipants\nAn error that occurs when a share has too many participants.\ncase unknownItem\nAn error that occurs when the specified record doesn’t exist.\ncase userDeletedZone\nAn error that occurs when the user deletes a record zone using the Settings app.\ncase zoneBusy\nAn error that occurs when the server is too busy to handle the record zone operation.\ncase resultsTruncated\nAn error that occurs when CloudKit truncates a query’s results.\nDeprecated"
  },
  {
    "title": "CKDatabase.Scope | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckdatabase/scope",
    "html": "Topics\nDatabase Scopes\ncase `public`\nThe public database.\ncase `private`\nThe private database.\ncase shared\nThe shared database.\nRelationships\nConforms To\nSendable\nSee Also\nGetting the Database Type\nvar databaseScope: CKDatabase.Scope\nThe type of database."
  },
  {
    "title": "databaseChanges(since:resultsLimit:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckdatabase/3856517-databasechanges",
    "html": "Parameters\nchangeToken\n\nThe change token from the previous execution of this method. If this is your app’s first fetch, or you want to refetch every change in the database’s history, specify nil.\n\nresultsLimit\n\nThe maximum number of changes to return. The server may use a limit lower than this value.\n\nReturn Value\n\nA tuple with the following named elements:\n\nmodifications\n\nAn array of database modifications that occur after the time that changeToken denotes. Each modification contains details about a modified record zone.\n\ndeletions\n\nAn array of database deletions that occur after the time that changeToken denotes. Each deletion contains details about a deleted or purged record zone.\n\nchangeToken\n\nThe change token that corresponds to the fetch results’ most recent change.\n\nmoreComing\n\nA Boolean value that indicates whether the server has additional changes for you to fetch.\n\nDiscussion\n\nThis method fetches record zone changes in a database, which includes new record zones, changed zones — including deleted or purged zones — and zones that contain record changes. It throws an error if the request fails, such as when the network is unavailable or the device doesn’t have an active iCloud account.\n\nAlong with the fetched changes, CloudKit supplies a change token, which is an opaque token that denotes a specific point in the database’s history. Store this token and provide it the next time you execute this method. Change tokens conform to NSSecureCoding and are safe to cache on-disk. Don’t infer any behavior or order from a token’s contents.\n\nFor information on a more configurable way to fetch database changes, see CKFetchDatabaseChangesOperation.\n\nSee Also\nFetching Changes\nfunc fetchDatabaseChanges(since: CKServerChangeToken?, resultsLimit: Int?, completionHandler: (Result<(modifications: [CKDatabase.DatabaseChange.Modification], deletions: [CKDatabase.DatabaseChange.Deletion], changeToken: CKServerChangeToken, moreComing: Bool), Error>) -> Void)\nFetches all modified record zones and delivers them to a completion handler.\nenum CKDatabase.DatabaseChange\nObjects that indicate the type of database change.\nfunc recordZoneChanges(inZoneWith: CKRecordZone.ID, since: CKServerChangeToken?, desiredKeys: [CKRecord.FieldKey]?, resultsLimit: Int?) -> (modificationResultsByID: [CKRecord.ID : Result<CKDatabase.RecordZoneChange.Modification, Error>], deletions: [CKDatabase.RecordZoneChange.Deletion], changeToken: CKServerChangeToken, moreComing: Bool)\nFetches all modified records from a specific record zone and returns them to an awaiting caller.\nfunc fetchRecordZoneChanges(inZoneWith: CKRecordZone.ID, since: CKServerChangeToken?, desiredKeys: [CKRecord.FieldKey]?, resultsLimit: Int?, completionHandler: (Result<(modificationResultsByID: [CKRecord.ID : Result<CKDatabase.RecordZoneChange.Modification, Error>], deletions: [CKDatabase.RecordZoneChange.Deletion], changeToken: CKServerChangeToken, moreComing: Bool), Error>) -> Void)\nFetches all modified records from a specific record zone and delivers them to a completion handler.\nenum CKDatabase.RecordZoneChange\nObjects that indicate the type of record zone change."
  },
  {
    "title": "databaseScope | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckdatabase/1640398-databasescope",
    "html": "Discussion\n\nFor possible values, see CKDatabase.Scope.\n\nSee Also\nGetting the Database Type\nenum CKDatabase.Scope\nConstants that represent the scope of a database."
  },
  {
    "title": "init(apiToken:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckfetchwebauthtokenoperation/1515266-init",
    "html": "Parameters\nAPIToken\n\nThe API token that allows access to an app’s container.\n\nSee Also\nCreating a Fetch Token Operation\ninit()\nCreates an empty fetch operation."
  },
  {
    "title": "delete(withSubscriptionID:completionHandler:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckdatabase/3003590-delete",
    "html": "Parameters\nsubscriptionID\n\nThe identifier of the subscription to delete.\n\ncompletionHandler\n\nThe closure to execute after CloudKit deletes the subscription.\n\nDiscussion\n\nThe completion handler takes the following parameters:\n\nThe identifier of the deleted subscription, or nil if there’s an error.\n\nAn error if a problem occurs, or nil if CloudKit successfully deletes the subscription.\n\nFor information on a more convenient way to delete subscriptions, see modifySubscriptions(saving:deleting:).\n\nSee Also\nModifying Subscriptions\nfunc modifySubscriptions(saving: [CKSubscription], deleting: [CKSubscription.ID]) -> (saveResults: [CKSubscription.ID : Result<CKSubscription, Error>], deleteResults: [CKSubscription.ID : Result<Void, Error>])\nModifies the specified subscriptions and returns the results to an awaiting caller.\nfunc modifySubscriptions(saving: [CKSubscription], deleting: [CKSubscription.ID], completionHandler: (Result<(saveResults: [CKSubscription.ID : Result<CKSubscription, Error>], deleteResults: [CKSubscription.ID : Result<Void, Error>]), Error>) -> Void)\nModifies the specified subscriptions and delivers the results to a completion handler.\nfunc save(CKSubscription, completionHandler: (CKSubscription?, Error?) -> Void)\nSaves a specific subscription.\nfunc deleteSubscription(withID: CKSubscription.ID) -> CKSubscription.ID\nDeletes a specific subscription and returns the deleted subscription’s identifier to an awaiting caller."
  },
  {
    "title": "init() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckfetchwebauthtokenoperation/2715839-init",
    "html": "Discussion\n\nYou must set apiToken before you execute the operation or add it to a queue.\n\nSee Also\nCreating a Fetch Token Operation\ninit(apiToken: String)\nCreates a fetch operation for the specified API token."
  },
  {
    "title": "fetchWebAuthTokenCompletionBlock | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckfetchwebauthtokenoperation/1514980-fetchwebauthtokencompletionblock",
    "html": "Discussion\n\nThe closure returns no value and takes the following parameters:\n\nIf the operation is successful, the web authentication token; otherwise, nil.\n\nAn error that contains information about a problem, or nil if the system successfully fetches the token.\n\nThe operation executes this closure only once. Your closure must be capable of executing on a background thread, so any tasks that require access to the main thread must dispatch accordingly.\n\nSee Also\nManaging the Operation’s Configuration\nvar apiToken: String?\nThe API token that allows access to an app’s container."
  },
  {
    "title": "apiToken | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckfetchwebauthtokenoperation/1515095-apitoken",
    "html": "See Also\nManaging the Operation’s Configuration\nvar fetchWebAuthTokenCompletionBlock: ((String?, Error?) -> Void)?\nThe block to execute when the operation finishes."
  },
  {
    "title": "deleteSubscription(withID:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckdatabase/3794313-deletesubscription",
    "html": "Parameters\nsubscriptionID\n\nThe identifier of the subscription to delete.\n\nReturn Value\n\nThe identifier of the deleted subscription.\n\nDiscussion\n\nThis method throws an error if the request fails, such as when the network is unavailable or the device doesn’t have an active iCloud account.\n\nFor information on a more convenient way to delete subscriptions, see modifySubscriptions(saving:deleting:).\n\nSee Also\nModifying Subscriptions\nfunc modifySubscriptions(saving: [CKSubscription], deleting: [CKSubscription.ID]) -> (saveResults: [CKSubscription.ID : Result<CKSubscription, Error>], deleteResults: [CKSubscription.ID : Result<Void, Error>])\nModifies the specified subscriptions and returns the results to an awaiting caller.\nfunc modifySubscriptions(saving: [CKSubscription], deleting: [CKSubscription.ID], completionHandler: (Result<(saveResults: [CKSubscription.ID : Result<CKSubscription, Error>], deleteResults: [CKSubscription.ID : Result<Void, Error>]), Error>) -> Void)\nModifies the specified subscriptions and delivers the results to a completion handler.\nfunc save(CKSubscription, completionHandler: (CKSubscription?, Error?) -> Void)\nSaves a specific subscription.\nfunc delete(withSubscriptionID: CKSubscription.ID, completionHandler: (String?, (Error)?) -> Void)\nDeletes a specific subscription and delivers the deleted subscription’s identifier to a completion handler."
  },
  {
    "title": "modifySubscriptions(saving:deleting:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckdatabase/3794325-modifysubscriptions",
    "html": "Parameters\nsubscriptionsToSave\n\nThe subscriptions to save.\n\nsubscriptionIDsToDelete\n\nThe identifiers of the subscriptions to permanently delete.\n\nReturn Value\n\nA tuple with the following named elements:\n\nsaveResults\n\nA dictionary of saved subscriptions. The dictionary uses the identifiers of the subscriptions you specify in subscriptionsToSave as its keys. The value of each key is a Result that contains either the corresponding modified subscription (as it appears on the server), or an error that describes why CloudKit can’t modify that subscription.\n\ndeleteResults\n\nA dictionary of deleted subscriptions. The dictionary uses the identifiers you specify in subscriptionIDsToDelete as its keys. The value of each key is a Result that contains either Void to indicate a successful deletion, or an error that describes why CloudKit can’t delete that subscription.\n\nDiscussion\n\nThis method throws an error if the request fails, such as when the network is unavailable or the device doesn’t have an active iCloud account; otherwise, the returned tuple includes any individual subscription errors.\n\nFor information on a more configurable way to modify subscriptions, see CKModifySubscriptionsOperation.\n\nSee Also\nModifying Subscriptions\nfunc modifySubscriptions(saving: [CKSubscription], deleting: [CKSubscription.ID], completionHandler: (Result<(saveResults: [CKSubscription.ID : Result<CKSubscription, Error>], deleteResults: [CKSubscription.ID : Result<Void, Error>]), Error>) -> Void)\nModifies the specified subscriptions and delivers the results to a completion handler.\nfunc save(CKSubscription, completionHandler: (CKSubscription?, Error?) -> Void)\nSaves a specific subscription.\nfunc deleteSubscription(withID: CKSubscription.ID) -> CKSubscription.ID\nDeletes a specific subscription and returns the deleted subscription’s identifier to an awaiting caller.\nfunc delete(withSubscriptionID: CKSubscription.ID, completionHandler: (String?, (Error)?) -> Void)\nDeletes a specific subscription and delivers the deleted subscription’s identifier to a completion handler."
  },
  {
    "title": "modifySubscriptions(saving:deleting:completionHandler:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckdatabase/3794326-modifysubscriptions",
    "html": "Parameters\nsubscriptionsToSave\n\nThe subscriptions to save.\n\nsubscriptionIDsToDelete\n\nThe identifiers of the subscriptions to permanently delete.\n\ncompletionHandler\n\nThe closure to execute after CloudKit processes the changes.\n\nDiscussion\n\nThe completion handler takes a single Result parameter that contains either a tuple, or an error if the request fails. For example, when the network is unavailable or the device doesn’t have an active iCloud account.\n\nWhen present, the tuple contains the following named elements:\n\nsaveResults\n\nA dictionary of saved subscriptions. The dictionary uses the identifiers of the subscriptions you specify in subscriptionsToSave as its keys. The value of each key is a Result that contains either the corresponding modified subscription (as it appears on the server), or an error that describes why CloudKit can’t modify that subscription.\n\ndeleteResults\n\nA dictionary of deleted subscriptions. The dictionary uses the identifiers you specify in subscriptionIDsToDelete as its keys. The value of each key is a Result that contains either Void to indicate a successful deletion, or an error that describes why CloudKit can’t delete that subscription.\n\nFor information on a more configurable way to modify subscriptions, see CKModifySubscriptionsOperation.\n\nSee Also\nModifying Subscriptions\nfunc modifySubscriptions(saving: [CKSubscription], deleting: [CKSubscription.ID]) -> (saveResults: [CKSubscription.ID : Result<CKSubscription, Error>], deleteResults: [CKSubscription.ID : Result<Void, Error>])\nModifies the specified subscriptions and returns the results to an awaiting caller.\nfunc save(CKSubscription, completionHandler: (CKSubscription?, Error?) -> Void)\nSaves a specific subscription.\nfunc deleteSubscription(withID: CKSubscription.ID) -> CKSubscription.ID\nDeletes a specific subscription and returns the deleted subscription’s identifier to an awaiting caller.\nfunc delete(withSubscriptionID: CKSubscription.ID, completionHandler: (String?, (Error)?) -> Void)\nDeletes a specific subscription and delivers the deleted subscription’s identifier to a completion handler."
  },
  {
    "title": "fetchAllSubscriptions(completionHandler:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckdatabase/1449110-fetchallsubscriptions",
    "html": "Parameters\ncompletionHandler\n\nThe closure to execute with the fetch results.\n\nDiscussion\n\nConcurrency Note\n\nYou can call this method from synchronous code using a completion handler, as shown on this page, or you can call it as an asynchronous method that has the following declaration:\n\nfunc allSubscriptions() async throws -> [CKSubscription]\n\n\nFor information about concurrency and asynchronous code in Swift, see Calling Objective-C APIs Asynchronously.\n\nThe completion handler takes the following parameters:\n\nThe database’s subscriptions, or nil if CloudKit can’t provide the subscriptions.\n\nAn error if a problem occurs, or nil if the fetch completes successfully.\n\nFor information on a more configurable way to fetch all subscriptions from a specific database, see fetchAllSubscriptionsOperation().\n\nSee Also\nFetching Subscriptions\nfunc subscriptions(for: [CKSubscription.ID]) -> [CKSubscription.ID : Result<CKSubscription, Error>]\nFetches the specified subscriptions and returns them to an awaiting caller.\nfunc fetch(withSubscriptionIDs: [CKSubscription.ID], completionHandler: (Result<[CKSubscription.ID : Result<CKSubscription, Error>], Error>) -> Void)\nFetches the specified subscriptions and delivers them to a completion handler.\nfunc subscription(for: CKSubscription.ID) -> CKSubscription\nFetches a specific subscription and returns it to an awaiting caller.\nfunc fetch(withSubscriptionID: CKSubscription.ID, completionHandler: (CKSubscription?, (Error)?) -> Void)\nFetches a specific subscription and delivers it to a completion handler."
  },
  {
    "title": "fetch(withSubscriptionIDs:completionHandler:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckdatabase/3794318-fetch",
    "html": "Parameters\nsubscriptionIDs\n\nThe identifiers of the subscriptions to fetch.\n\ncompletionHandler\n\nThe closure to execute with the fetch results.\n\nDiscussion\n\nThe completion handler takes the following parameters:\n\nA Result that contains either a dictionary of fetched subscriptions, or an error if the request fails, such as when the network is unavailable or the device doesn’t have an active iCloud account. When present, the dictionary uses the identifiers you specify in subscriptionIDs as its keys. The value of each key is a Result that contains either the corresponding fetched subscription, or an error that describes why CloudKit can’t provide that subscription.\n\nFor information on a more configurable way to fetch specific subscriptions, see CKFetchSubscriptionsOperation.\n\nSee Also\nFetching Subscriptions\nfunc subscriptions(for: [CKSubscription.ID]) -> [CKSubscription.ID : Result<CKSubscription, Error>]\nFetches the specified subscriptions and returns them to an awaiting caller.\nfunc subscription(for: CKSubscription.ID) -> CKSubscription\nFetches a specific subscription and returns it to an awaiting caller.\nfunc fetch(withSubscriptionID: CKSubscription.ID, completionHandler: (CKSubscription?, (Error)?) -> Void)\nFetches a specific subscription and delivers it to a completion handler.\nfunc fetchAllSubscriptions(completionHandler: ([CKSubscription]?, Error?) -> Void)\nFetches all subscriptions from the current database."
  },
  {
    "title": "modifyRecordZones(saving:deleting:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckdatabase/3794321-modifyrecordzones",
    "html": "Parameters\nrecordZonesToSave\n\nThe record zones to save.\n\nrecordZoneIDsToDelete\n\nThe identifiers of the record zones to permanently delete.\n\nReturn Value\n\nA tuple with the following named elements:\n\nsaveResults\n\nA dictionary of saved record zones. The dictionary uses the identifiers of the record zones you specify in recordZonesToSave as its keys. The value of each key is a Result that contains either the corresponding modified record zone (as it appears on the server), or an error that describes why CloudKit can’t modify that record zone.\n\ndeleteResults\n\nA dictionary of deleted record zones. The dictionary uses the identifiers you specify in recordZoneIDsToDelete as its keys. The value of each key is a Result that contains either Void to indicate a successful deletion, or an error that describes why CloudKit can’t delete that record zone.\n\nDiscussion\n\nWarning\n\nDeleting a record zone is a permanent action that deletes every record in that zone. You can’t restore a deleted record zone.\n\nThis method throws an error if the request fails, such as when the network is unavailable or the device doesn’t have an active iCloud account; otherwise, the returned tuple includes any individual record zone errors.\n\nFor information on a more configurable way to modify record zones, see CKModifyRecordZonesOperation.\n\nSee Also\nModifying Record Zones\nfunc modifyRecordZones(saving: [CKRecordZone], deleting: [CKRecordZone.ID], completionHandler: (Result<(saveResults: [CKRecordZone.ID : Result<CKRecordZone, Error>], deleteResults: [CKRecordZone.ID : Result<Void, Error>]), Error>) -> Void)\nModifies the specified record zones and delivers the results to a completion handler.\nfunc save(CKRecordZone, completionHandler: (CKRecordZone?, Error?) -> Void)\nSaves a specific record zone.\nfunc delete(withRecordZoneID: CKRecordZone.ID, completionHandler: (CKRecordZone.ID?, Error?) -> Void)\nDeletes a specific record zone."
  },
  {
    "title": "subscription(for:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckdatabase/3794333-subscription",
    "html": "Parameters\nsubscriptionID\n\nThe identifier of the subscription to fetch.\n\nReturn Value\n\nThe fetched subscription.\n\nDiscussion\n\nThis method throws an error if the request fails, such as when the network is unavailable or the device doesn’t have an active iCloud account.\n\nSee Also\nFetching Subscriptions\nfunc subscriptions(for: [CKSubscription.ID]) -> [CKSubscription.ID : Result<CKSubscription, Error>]\nFetches the specified subscriptions and returns them to an awaiting caller.\nfunc fetch(withSubscriptionIDs: [CKSubscription.ID], completionHandler: (Result<[CKSubscription.ID : Result<CKSubscription, Error>], Error>) -> Void)\nFetches the specified subscriptions and delivers them to a completion handler.\nfunc fetch(withSubscriptionID: CKSubscription.ID, completionHandler: (CKSubscription?, (Error)?) -> Void)\nFetches a specific subscription and delivers it to a completion handler.\nfunc fetchAllSubscriptions(completionHandler: ([CKSubscription]?, Error?) -> Void)\nFetches all subscriptions from the current database."
  },
  {
    "title": "modifyRecordZones(saving:deleting:completionHandler:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckdatabase/3794322-modifyrecordzones",
    "html": "Parameters\nrecordZonesToSave\n\nThe record zones to save.\n\nrecordZoneIDsToDelete\n\nThe identifiers of the record zones to permanently delete.\n\ncompletionHandler\n\nThe closure to execute after CloudKit processes the changes.\n\nDiscussion\n\nWarning\n\nDeleting a record zone is a permanent action that deletes every record in that zone. You can’t restore a deleted record zone.\n\nThe completion handler takes a single Result parameter that contains either a tuple, or an error if the request fails. For example, when the network is unavailable or the device doesn’t have an active iCloud account.\n\nWhen present, the tuple contains the following named elements:\n\nsaveResults\n\nA dictionary of saved record zones. The dictionary uses the identifiers of the record zones you specify in recordsZonesToSave as its keys. The value of each key is a Result that contains either the corresponding modified record zone (as it appears on the server), or an error that describes why CloudKit can’t modify that record.\n\ndeleteResults\n\nA dictionary of deleted record zones. The dictionary uses the identifiers you specify in recordZoneIDsToDelete as its keys. The value of each key is a Result that contains either Void to indicate a successful deletion, or an error that describes why CloudKit can’t delete that record zone.\n\nFor information on a more configurable way to modify record zones, see CKModifyRecordZonesOperation.\n\nSee Also\nModifying Record Zones\nfunc modifyRecordZones(saving: [CKRecordZone], deleting: [CKRecordZone.ID]) -> (saveResults: [CKRecordZone.ID : Result<CKRecordZone, Error>], deleteResults: [CKRecordZone.ID : Result<Void, Error>])\nModifies the specified record zones and returns the results to an awaiting caller.\nfunc save(CKRecordZone, completionHandler: (CKRecordZone?, Error?) -> Void)\nSaves a specific record zone.\nfunc delete(withRecordZoneID: CKRecordZone.ID, completionHandler: (CKRecordZone.ID?, Error?) -> Void)\nDeletes a specific record zone."
  },
  {
    "title": "fetch(withRecordZoneIDs:completionHandler:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckdatabase/3794317-fetch",
    "html": "Parameters\nzoneIDs\n\nThe identifiers of the record zones to fetch.\n\ncompletionHandler\n\nThe closure to execute with the fetch results.\n\nDiscussion\n\nThe completion handler takes the following parameters:\n\nA Result that contains either a dictionary of fetched record zones, or an error if the request fails, such as when the network is unavailable or the device doesn’t have an active iCloud account. When present, the dictionary uses the identifiers you specify in zoneIDs as its keys. The value of each key is a Result that contains either the corresponding fetched record zone, or an error that describes why CloudKit can’t provide that record zone.\n\nFor information on a more configurable way to fetch specific record zones, see CKFetchRecordZonesOperation.\n\nSee Also\nFetching Record Zones\nfunc recordZones(for: [CKRecordZone.ID]) -> [CKRecordZone.ID : Result<CKRecordZone, Error>]\nFetches the specified record zones and returns them to an awaiting caller.\nfunc fetchAllRecordZones(completionHandler: ([CKRecordZone]?, Error?) -> Void)\nFetches all record zones from the current database.\nfunc fetch(withRecordZoneID: CKRecordZone.ID, completionHandler: (CKRecordZone?, Error?) -> Void)\nFetches a specific record zone."
  },
  {
    "title": "fetchAllRecordZones(completionHandler:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckdatabase/1449112-fetchallrecordzones",
    "html": "Parameters\ncompletionHandler\n\nThe closure to execute with the fetch results.\n\nDiscussion\n\nConcurrency Note\n\nYou can call this method from synchronous code using a completion handler, as shown on this page, or you can call it as an asynchronous method that has the following declaration:\n\nfunc allRecordZones() async throws -> [CKRecordZone]\n\n\nFor information about concurrency and asynchronous code in Swift, see Calling Objective-C APIs Asynchronously.\n\nThe completion handler takes the following parameters:\n\nAn array of fetched record zones, or nil if there’s an error. When present, the array contains at least one record zone, the default zone.\n\nAn error if a problem occurs, or nil if CloudKit successfully fetches all record zones.\n\nSee Also\nFetching Record Zones\nfunc recordZones(for: [CKRecordZone.ID]) -> [CKRecordZone.ID : Result<CKRecordZone, Error>]\nFetches the specified record zones and returns them to an awaiting caller.\nfunc fetch(withRecordZoneIDs: [CKRecordZone.ID], completionHandler: (Result<[CKRecordZone.ID : Result<CKRecordZone, Error>], Error>) -> Void)\nFetches the specified record zones and delivers them to a completion handler.\nfunc fetch(withRecordZoneID: CKRecordZone.ID, completionHandler: (CKRecordZone?, Error?) -> Void)\nFetches a specific record zone."
  },
  {
    "title": "save(_:completionHandler:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckdatabase/1449108-save",
    "html": "Parameters\nzone\n\nThe record zone to save.\n\ncompletionHandler\n\nThe closure to execute after CloudKit saves the record.\n\nDiscussion\n\nConcurrency Note\n\nYou can call this method from synchronous code using a completion handler, as shown on this page, or you can call it as an asynchronous method that has the following declaration:\n\nfunc save(_ zone: CKRecordZone) async throws -> CKRecordZone\n\n\nFor information about concurrency and asynchronous code in Swift, see Calling Objective-C APIs Asynchronously.\n\nThe completion handler takes the following parameters:\n\nThe saved record zone (as it appears on the server), or nil if there’s an error.\n\nAn error if a problem occurs, or nil if CloudKit successfully saves the record zone.\n\nFor information on a more convenient way to save record zones, see modifyRecordZones(saving:deleting:).\n\nSee Also\nModifying Record Zones\nfunc modifyRecordZones(saving: [CKRecordZone], deleting: [CKRecordZone.ID]) -> (saveResults: [CKRecordZone.ID : Result<CKRecordZone, Error>], deleteResults: [CKRecordZone.ID : Result<Void, Error>])\nModifies the specified record zones and returns the results to an awaiting caller.\nfunc modifyRecordZones(saving: [CKRecordZone], deleting: [CKRecordZone.ID], completionHandler: (Result<(saveResults: [CKRecordZone.ID : Result<CKRecordZone, Error>], deleteResults: [CKRecordZone.ID : Result<Void, Error>]), Error>) -> Void)\nModifies the specified record zones and delivers the results to a completion handler.\nfunc delete(withRecordZoneID: CKRecordZone.ID, completionHandler: (CKRecordZone.ID?, Error?) -> Void)\nDeletes a specific record zone."
  },
  {
    "title": "delete(withRecordID:completionHandler:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckdatabase/1449122-delete",
    "html": "Parameters\nrecordID\n\nThe identifier of the record to delete.\n\ncompletionHandler\n\nThe closure to execute after CloudKit deletes the record.\n\nDiscussion\n\nConcurrency Note\n\nYou can call this method from synchronous code using a completion handler, as shown on this page, or you can call it as an asynchronous method that has the following declaration:\n\nfunc deleteRecord(withID recordID: CKRecord.ID) async throws -> CKRecord.ID\n\n\nFor information about concurrency and asynchronous code in Swift, see Calling Objective-C APIs Asynchronously.\n\nThe completion handler takes the following parameters:\n\nThe identifier of the deleted record, or nil if there’s an error.\n\nAn error if a problem occurs, or nil if CloudKit successfully deletes the record.\n\nDeleting a record may cause additional deletions if other records in the database reference the deleted record. CloudKit doesn’t provide the identifiers of any additional records it deletes.\n\nFor information on a more convenient way to delete records, see modifyRecords(saving:deleting:savePolicy:atomically:).\n\nSee Also\nModifying Records\nfunc modifyRecords(saving: [CKRecord], deleting: [CKRecord.ID], savePolicy: CKModifyRecordsOperation.RecordSavePolicy, atomically: Bool) -> (saveResults: [CKRecord.ID : Result<CKRecord, Error>], deleteResults: [CKRecord.ID : Result<Void, Error>])\nModifies the specified records and returns the results to an awaiting caller.\nfunc modifyRecords(saving: [CKRecord], deleting: [CKRecord.ID], savePolicy: CKModifyRecordsOperation.RecordSavePolicy, atomically: Bool, completionHandler: (Result<(saveResults: [CKRecord.ID : Result<CKRecord, Error>], deleteResults: [CKRecord.ID : Result<Void, Error>]), Error>) -> Void)\nModifies the specified records and delivers the results to a completion hander.\nenum CKModifyRecordsOperation.RecordSavePolicy\nConstants that indicate which policy to apply when saving records.\nfunc save(CKRecord, completionHandler: (CKRecord?, Error?) -> Void)\nSaves a specific record."
  },
  {
    "title": "save(_:completionHandler:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckdatabase/1449114-save",
    "html": "Parameters\nrecord\n\nThe record to save.\n\ncompletionHandler\n\nThe closure to execute after CloudKit saves the record.\n\nDiscussion\n\nConcurrency Note\n\nYou can call this method from synchronous code using a completion handler, as shown on this page, or you can call it as an asynchronous method that has the following declaration:\n\nfunc save(_ record: CKRecord) async throws -> CKRecord\n\n\nFor information about concurrency and asynchronous code in Swift, see Calling Objective-C APIs Asynchronously.\n\nThe completion handler takes the following parameters:\n\nThe saved record (as it appears on the server), or nil if there’s an error.\n\nAn error if a problem occurs, or nil if CloudKit successfully saves the record.\n\nThe save succeeds only when the specified record is new, or is a more recent version than the one on the server.\n\nFor information on a more convenient way to save records, see modifyRecords(saving:deleting:savePolicy:atomically:).\n\nSee Also\nModifying Records\nfunc modifyRecords(saving: [CKRecord], deleting: [CKRecord.ID], savePolicy: CKModifyRecordsOperation.RecordSavePolicy, atomically: Bool) -> (saveResults: [CKRecord.ID : Result<CKRecord, Error>], deleteResults: [CKRecord.ID : Result<Void, Error>])\nModifies the specified records and returns the results to an awaiting caller.\nfunc modifyRecords(saving: [CKRecord], deleting: [CKRecord.ID], savePolicy: CKModifyRecordsOperation.RecordSavePolicy, atomically: Bool, completionHandler: (Result<(saveResults: [CKRecord.ID : Result<CKRecord, Error>], deleteResults: [CKRecord.ID : Result<Void, Error>]), Error>) -> Void)\nModifies the specified records and delivers the results to a completion hander.\nenum CKModifyRecordsOperation.RecordSavePolicy\nConstants that indicate which policy to apply when saving records.\nfunc delete(withRecordID: CKRecord.ID, completionHandler: (CKRecord.ID?, Error?) -> Void)\nDeletes a specific record."
  },
  {
    "title": "networkUnavailable | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckerror/2325209-networkunavailable",
    "html": "Discussion\n\nYou can retry network failures immediately, but have your app implement a backoff period so that it doesn’t attempt the same operation repeatedly.\n\nIf the network is unavailable, have your app monitor for network reachability and wait to reissue the operation when the network is available again. See CFNetworkErrors for more information.\n\nSee Also\nGetting Error Codes\nstatic var accountTemporarilyUnavailable: CKError.Code\nAn error that occurs when the user’s iCloud account is temporarily unavailable.\nstatic var alreadyShared: CKError.Code\nAn error that occurs when CloudKit attempts to share a record with an existing share.\nstatic var assetFileModified: CKError.Code\nAn error that occurs when the system modifies an asset while saving it.\nstatic var assetFileNotFound: CKError.Code\nAn error that occurs when the system can’t find the specified asset.\nstatic var assetNotAvailable: CKError.Code\nAn error that occurs when the system can’t access the specified asset.\nstatic var badContainer: CKError.Code\nAn error that occurs when you use an unknown or unauthorized container.\nstatic var badDatabase: CKError.Code\nAn error that occurs when the operation can’t complete for the specified database.\nstatic var batchRequestFailed: CKError.Code\nAn error that occurs when the system rejects the entire batch of changes.\nstatic var changeTokenExpired: CKError.Code\nAn error that occurs when the change token expires.\nstatic var constraintViolation: CKError.Code\nAn error that occurs when the server rejects the request because of a unique constraint violation.\nstatic var incompatibleVersion: CKError.Code\nAn error that occurs when the current app version is older than the oldest allowed version.\nstatic var internalError: CKError.Code\nA nonrecoverable error that CloudKit encounters.\nstatic var invalidArguments: CKError.Code\nAn error that occurs when the request contains invalid information.\nstatic var limitExceeded: CKError.Code\nAn error that occurs when a request’s size exceeds the limit.\nstatic var managedAccountRestricted: CKError.Code\nAn error that occurs when CloudKit rejects a request due to a managed-account restriction.\nstatic var missingEntitlement: CKError.Code\nAn error that occurs when the app is missing a required entitlement.\nstatic var networkFailure: CKError.Code\nAn error that occurs when a network is available, but CloudKit is inaccessible.\nstatic var notAuthenticated: CKError.Code\nAn error that occurs when the user is unauthenticated.\nstatic var operationCancelled: CKError.Code\nAn error that occurs when an operation cancels.\nstatic var partialFailure: CKError.Code\nAn error that occurs when an operation completes with partial failures.\nstatic var participantMayNeedVerification: CKError.Code\nAn error that occurs when the user isn’t a participant of the share.\nstatic var permissionFailure: CKError.Code\nAn error that occurs when the user doesn’t have permission to save or fetch data.\nstatic var quotaExceeded: CKError.Code\nAn error that occurs when saving a record exceeds the user’s storage quota.\nstatic var referenceViolation: CKError.Code\nAn error that occurs when CloudKit can’t find the target of a reference.\nstatic var requestRateLimited: CKError.Code\nAn error that occurs when CloudKit rate-limits requests.\nstatic var serverRecordChanged: CKError.Code\nAn error that occurs when CloudKit rejects a record because the server’s version is different.\nstatic var serverRejectedRequest: CKError.Code\nAn error that occurs when CloudKit rejects the request.\nstatic var serverResponseLost: CKError.Code\nAn error that occurs when CloudKit is unable to maintain the network connection and provide a response.\nstatic var serviceUnavailable: CKError.Code\nAn error that occurs when CloudKit is unavailable.\nstatic var tooManyParticipants: CKError.Code\nAn error that occurs when a share has too many participants.\nstatic var unknownItem: CKError.Code\nAn error that occurs when the specified record doesn’t exist.\nstatic var userDeletedZone: CKError.Code\nAn error that occurs when the user deletes a record zone using the Settings app.\nstatic var zoneBusy: CKError.Code\nAn error that occurs when the server is too busy to handle the record zone operation.\nstatic var zoneNotFound: CKError.Code\nAn error that occurs when the specified record zone doesn’t exist.\nstatic var resultsTruncated: CKError.Code\nAn error that occurs when CloudKit truncates a query’s results.\nDeprecated\nenum CKError.Code\nThe error codes that CloudKit returns."
  },
  {
    "title": "partialFailure | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckerror/2325226-partialfailure",
    "html": "Discussion\n\nExamine the specific item failures, and act on the failed items. Each specific item error is from the CloudKit error domain. You can inspect the userInfo CKPartialErrorsByItemIDKey to see per-item errors.\n\nNote that in a custom zone, the system processes all items in an operation atomically. As a result, you may get a CKError.Code.batchRequestFailed error for all other items in an operation that don't cause an error.\n\nSee Also\nGetting Error Codes\nstatic var accountTemporarilyUnavailable: CKError.Code\nAn error that occurs when the user’s iCloud account is temporarily unavailable.\nstatic var alreadyShared: CKError.Code\nAn error that occurs when CloudKit attempts to share a record with an existing share.\nstatic var assetFileModified: CKError.Code\nAn error that occurs when the system modifies an asset while saving it.\nstatic var assetFileNotFound: CKError.Code\nAn error that occurs when the system can’t find the specified asset.\nstatic var assetNotAvailable: CKError.Code\nAn error that occurs when the system can’t access the specified asset.\nstatic var badContainer: CKError.Code\nAn error that occurs when you use an unknown or unauthorized container.\nstatic var badDatabase: CKError.Code\nAn error that occurs when the operation can’t complete for the specified database.\nstatic var batchRequestFailed: CKError.Code\nAn error that occurs when the system rejects the entire batch of changes.\nstatic var changeTokenExpired: CKError.Code\nAn error that occurs when the change token expires.\nstatic var constraintViolation: CKError.Code\nAn error that occurs when the server rejects the request because of a unique constraint violation.\nstatic var incompatibleVersion: CKError.Code\nAn error that occurs when the current app version is older than the oldest allowed version.\nstatic var internalError: CKError.Code\nA nonrecoverable error that CloudKit encounters.\nstatic var invalidArguments: CKError.Code\nAn error that occurs when the request contains invalid information.\nstatic var limitExceeded: CKError.Code\nAn error that occurs when a request’s size exceeds the limit.\nstatic var managedAccountRestricted: CKError.Code\nAn error that occurs when CloudKit rejects a request due to a managed-account restriction.\nstatic var missingEntitlement: CKError.Code\nAn error that occurs when the app is missing a required entitlement.\nstatic var networkFailure: CKError.Code\nAn error that occurs when a network is available, but CloudKit is inaccessible.\nstatic var networkUnavailable: CKError.Code\nAn error that occurs when the network is unavailable.\nstatic var notAuthenticated: CKError.Code\nAn error that occurs when the user is unauthenticated.\nstatic var operationCancelled: CKError.Code\nAn error that occurs when an operation cancels.\nstatic var participantMayNeedVerification: CKError.Code\nAn error that occurs when the user isn’t a participant of the share.\nstatic var permissionFailure: CKError.Code\nAn error that occurs when the user doesn’t have permission to save or fetch data.\nstatic var quotaExceeded: CKError.Code\nAn error that occurs when saving a record exceeds the user’s storage quota.\nstatic var referenceViolation: CKError.Code\nAn error that occurs when CloudKit can’t find the target of a reference.\nstatic var requestRateLimited: CKError.Code\nAn error that occurs when CloudKit rate-limits requests.\nstatic var serverRecordChanged: CKError.Code\nAn error that occurs when CloudKit rejects a record because the server’s version is different.\nstatic var serverRejectedRequest: CKError.Code\nAn error that occurs when CloudKit rejects the request.\nstatic var serverResponseLost: CKError.Code\nAn error that occurs when CloudKit is unable to maintain the network connection and provide a response.\nstatic var serviceUnavailable: CKError.Code\nAn error that occurs when CloudKit is unavailable.\nstatic var tooManyParticipants: CKError.Code\nAn error that occurs when a share has too many participants.\nstatic var unknownItem: CKError.Code\nAn error that occurs when the specified record doesn’t exist.\nstatic var userDeletedZone: CKError.Code\nAn error that occurs when the user deletes a record zone using the Settings app.\nstatic var zoneBusy: CKError.Code\nAn error that occurs when the server is too busy to handle the record zone operation.\nstatic var zoneNotFound: CKError.Code\nAn error that occurs when the specified record zone doesn’t exist.\nstatic var resultsTruncated: CKError.Code\nAn error that occurs when CloudKit truncates a query’s results.\nDeprecated\nenum CKError.Code\nThe error codes that CloudKit returns."
  },
  {
    "title": "notAuthenticated | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckerror/2325221-notauthenticated",
    "html": "See Also\nGetting Error Codes\nstatic var accountTemporarilyUnavailable: CKError.Code\nAn error that occurs when the user’s iCloud account is temporarily unavailable.\nstatic var alreadyShared: CKError.Code\nAn error that occurs when CloudKit attempts to share a record with an existing share.\nstatic var assetFileModified: CKError.Code\nAn error that occurs when the system modifies an asset while saving it.\nstatic var assetFileNotFound: CKError.Code\nAn error that occurs when the system can’t find the specified asset.\nstatic var assetNotAvailable: CKError.Code\nAn error that occurs when the system can’t access the specified asset.\nstatic var badContainer: CKError.Code\nAn error that occurs when you use an unknown or unauthorized container.\nstatic var badDatabase: CKError.Code\nAn error that occurs when the operation can’t complete for the specified database.\nstatic var batchRequestFailed: CKError.Code\nAn error that occurs when the system rejects the entire batch of changes.\nstatic var changeTokenExpired: CKError.Code\nAn error that occurs when the change token expires.\nstatic var constraintViolation: CKError.Code\nAn error that occurs when the server rejects the request because of a unique constraint violation.\nstatic var incompatibleVersion: CKError.Code\nAn error that occurs when the current app version is older than the oldest allowed version.\nstatic var internalError: CKError.Code\nA nonrecoverable error that CloudKit encounters.\nstatic var invalidArguments: CKError.Code\nAn error that occurs when the request contains invalid information.\nstatic var limitExceeded: CKError.Code\nAn error that occurs when a request’s size exceeds the limit.\nstatic var managedAccountRestricted: CKError.Code\nAn error that occurs when CloudKit rejects a request due to a managed-account restriction.\nstatic var missingEntitlement: CKError.Code\nAn error that occurs when the app is missing a required entitlement.\nstatic var networkFailure: CKError.Code\nAn error that occurs when a network is available, but CloudKit is inaccessible.\nstatic var networkUnavailable: CKError.Code\nAn error that occurs when the network is unavailable.\nstatic var operationCancelled: CKError.Code\nAn error that occurs when an operation cancels.\nstatic var partialFailure: CKError.Code\nAn error that occurs when an operation completes with partial failures.\nstatic var participantMayNeedVerification: CKError.Code\nAn error that occurs when the user isn’t a participant of the share.\nstatic var permissionFailure: CKError.Code\nAn error that occurs when the user doesn’t have permission to save or fetch data.\nstatic var quotaExceeded: CKError.Code\nAn error that occurs when saving a record exceeds the user’s storage quota.\nstatic var referenceViolation: CKError.Code\nAn error that occurs when CloudKit can’t find the target of a reference.\nstatic var requestRateLimited: CKError.Code\nAn error that occurs when CloudKit rate-limits requests.\nstatic var serverRecordChanged: CKError.Code\nAn error that occurs when CloudKit rejects a record because the server’s version is different.\nstatic var serverRejectedRequest: CKError.Code\nAn error that occurs when CloudKit rejects the request.\nstatic var serverResponseLost: CKError.Code\nAn error that occurs when CloudKit is unable to maintain the network connection and provide a response.\nstatic var serviceUnavailable: CKError.Code\nAn error that occurs when CloudKit is unavailable.\nstatic var tooManyParticipants: CKError.Code\nAn error that occurs when a share has too many participants.\nstatic var unknownItem: CKError.Code\nAn error that occurs when the specified record doesn’t exist.\nstatic var userDeletedZone: CKError.Code\nAn error that occurs when the user deletes a record zone using the Settings app.\nstatic var zoneBusy: CKError.Code\nAn error that occurs when the server is too busy to handle the record zone operation.\nstatic var zoneNotFound: CKError.Code\nAn error that occurs when the specified record zone doesn’t exist.\nstatic var resultsTruncated: CKError.Code\nAn error that occurs when CloudKit truncates a query’s results.\nDeprecated\nenum CKError.Code\nThe error codes that CloudKit returns."
  },
  {
    "title": "CKCurrentUserDefaultName | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckcurrentuserdefaultname",
    "html": "See Also\nDiscovering User Records\nfunc discoverAllIdentities(completionHandler: ([CKUserIdentity]?, Error?) -> Void)\nFetches all user identities that match entries in the user’s Contacts.\nDeprecated\nfunc discoverUserIdentity(withEmailAddress: String, completionHandler: (CKUserIdentity?, Error?) -> Void)\nFetches the user identity for the specified email address.\nDeprecated\nfunc discoverUserIdentity(withPhoneNumber: String, completionHandler: (CKUserIdentity?, Error?) -> Void)\nFetches the user identity for the specified phone number.\nDeprecated\nfunc discoverUserIdentity(withUserRecordID: CKRecord.ID, completionHandler: (CKUserIdentity?, Error?) -> Void)\nFetches the user identity for the specified user record ID.\nDeprecated\nfunc fetchShareParticipant(withEmailAddress: String, completionHandler: (CKShare.Participant?, Error?) -> Void)\nFetches the share participant with the specified email address.\nfunc fetchShareParticipant(withPhoneNumber: String, completionHandler: (CKShare.Participant?, Error?) -> Void)\nFetches the share participant with the specified phone number.\nfunc fetchShareParticipant(withUserRecordID: CKRecord.ID, completionHandler: (CKShare.Participant?, Error?) -> Void)\nFetches the share participant with the specified user record ID.\nfunc fetchUserRecordID(completionHandler: (CKRecord.ID?, Error?) -> Void)\nFetches the user record ID of the current user.\nlet CKOwnerDefaultName: String\nA constant that provides the default owner’s name.\nDeprecated"
  },
  {
    "title": "fetchShareParticipant(withEmailAddress:completionHandler:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckcontainer/1640489-fetchshareparticipant",
    "html": "Parameters\nemailAddress\n\nThe share participant’s email address.\n\ncompletionHandler\n\nThe handler to execute with the fetch results.\n\nDiscussion\n\nConcurrency Note\n\nYou can call this method from synchronous code using a completion handler, as shown on this page, or you can call it as an asynchronous method that has the following declaration:\n\nfunc shareParticipant(forEmailAddress emailAddress: String) async throws -> CKShare.Participant\n\n\nFor information about concurrency and asynchronous code in Swift, see Calling Objective-C APIs Asynchronously.\n\nThe closure doesn’t return a value and takes the following parameters:\n\nThe share participant, or nil if CloudKit can’t find the participant.\n\nAn error if a problem occurs, or nil if CloudKit successfully retrieves the participant.\n\nThis method searches for the share participant asynchronously and with a low priority. If you want the task to execute with a higher priority, create an instance of CKFetchShareParticipantsOperation and configure it to use the necessary priority.\n\nSee Also\nDiscovering User Records\nfunc discoverAllIdentities(completionHandler: ([CKUserIdentity]?, Error?) -> Void)\nFetches all user identities that match entries in the user’s Contacts.\nDeprecated\nfunc discoverUserIdentity(withEmailAddress: String, completionHandler: (CKUserIdentity?, Error?) -> Void)\nFetches the user identity for the specified email address.\nDeprecated\nfunc discoverUserIdentity(withPhoneNumber: String, completionHandler: (CKUserIdentity?, Error?) -> Void)\nFetches the user identity for the specified phone number.\nDeprecated\nfunc discoverUserIdentity(withUserRecordID: CKRecord.ID, completionHandler: (CKUserIdentity?, Error?) -> Void)\nFetches the user identity for the specified user record ID.\nDeprecated\nfunc fetchShareParticipant(withPhoneNumber: String, completionHandler: (CKShare.Participant?, Error?) -> Void)\nFetches the share participant with the specified phone number.\nfunc fetchShareParticipant(withUserRecordID: CKRecord.ID, completionHandler: (CKShare.Participant?, Error?) -> Void)\nFetches the share participant with the specified user record ID.\nfunc fetchUserRecordID(completionHandler: (CKRecord.ID?, Error?) -> Void)\nFetches the user record ID of the current user.\nlet CKCurrentUserDefaultName: String\nA constant that provides the current user’s default name.\nlet CKOwnerDefaultName: String\nA constant that provides the default owner’s name.\nDeprecated"
  },
  {
    "title": "discoverUserIdentity(withPhoneNumber:completionHandler:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckcontainer/1640516-discoveruseridentity",
    "html": "Parameters\nphoneNumber\n\nThe user’s phone number.\n\ncompletionHandler\n\nThe handler to execute with the fetch results.\n\nDiscussion\n\nConcurrency Note\n\nYou can call this method from synchronous code using a completion handler, as shown on this page, or you can call it as an asynchronous method that has the following declaration:\n\nfunc userIdentity(forPhoneNumber phoneNumber: String) async throws -> CKUserIdentity?\n\n\nFor information about concurrency and asynchronous code in Swift, see Calling Objective-C APIs Asynchronously.\n\nThis closure doesn’t return a value and takes the following parameters:\n\nThe user identity for the phone number, or nil if CloudKit can’t find an identity.\n\nAn error if a problem occurs, or nil if CloudKit successfully fetches a user identity.\n\nUse this method to retrieve the identity of a user who the current user knows. The user you’re searching for must meet the following criteria:\n\nThe user must be in the current user’s Contacts.\n\nThe user has run the app.\n\nThe user grants the userDiscoverability permission for the container.\n\nThis method searches for the user asynchronously and with a low priority. If you want the task to execute the request with a higher priority, create an instance of CKDiscoverUserIdentitiesOperation and configure it to use the necessary priority.\n\nSee Also\nDiscovering User Records\nfunc discoverAllIdentities(completionHandler: ([CKUserIdentity]?, Error?) -> Void)\nFetches all user identities that match entries in the user’s Contacts.\nDeprecated\nfunc discoverUserIdentity(withEmailAddress: String, completionHandler: (CKUserIdentity?, Error?) -> Void)\nFetches the user identity for the specified email address.\nDeprecated\nfunc discoverUserIdentity(withUserRecordID: CKRecord.ID, completionHandler: (CKUserIdentity?, Error?) -> Void)\nFetches the user identity for the specified user record ID.\nDeprecated\nfunc fetchShareParticipant(withEmailAddress: String, completionHandler: (CKShare.Participant?, Error?) -> Void)\nFetches the share participant with the specified email address.\nfunc fetchShareParticipant(withPhoneNumber: String, completionHandler: (CKShare.Participant?, Error?) -> Void)\nFetches the share participant with the specified phone number.\nfunc fetchShareParticipant(withUserRecordID: CKRecord.ID, completionHandler: (CKShare.Participant?, Error?) -> Void)\nFetches the share participant with the specified user record ID.\nfunc fetchUserRecordID(completionHandler: (CKRecord.ID?, Error?) -> Void)\nFetches the user record ID of the current user.\nlet CKCurrentUserDefaultName: String\nA constant that provides the current user’s default name.\nlet CKOwnerDefaultName: String\nA constant that provides the default owner’s name.\nDeprecated"
  },
  {
    "title": "fetchUserRecordID(completionHandler:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckcontainer/1399191-fetchuserrecordid",
    "html": "Parameters\ncompletionHandler\n\nThe handler to execute with the fetch results.\n\nDiscussion\n\nConcurrency Note\n\nYou can call this method from synchronous code using a completion handler, as shown on this page, or you can call it as an asynchronous method that has the following declaration:\n\nfunc userRecordID() async throws -> CKRecord.ID\n\n\nFor information about concurrency and asynchronous code in Swift, see Calling Objective-C APIs Asynchronously.\n\nThe closure doesn’t return a value and takes the following parameters:\n\nThe user record ID, or nil if the user disables iCloud Drive or the device doesn’t have an iCloud account.\n\nAn error if a problem occurs, or nil if CloudKit successfully retrieves the user record ID.\n\nCloudKit returns a CKError.Code.notAuthenticated error when any of the following conditions are met:\n\nThe device has an iCloud account but the user disables iCloud Drive.\n\nThe device has an iCloud account with restricted access.\n\nThe device doesn’t have an iCloud account.\n\nNote\n\nAt startup, fetching the user record ID may take longer while CloudKit makes the initial iCloud account request. After the initial fetch, accessing the ID generally takes less time.\n\nSee Also\nDiscovering User Records\nfunc discoverAllIdentities(completionHandler: ([CKUserIdentity]?, Error?) -> Void)\nFetches all user identities that match entries in the user’s Contacts.\nDeprecated\nfunc discoverUserIdentity(withEmailAddress: String, completionHandler: (CKUserIdentity?, Error?) -> Void)\nFetches the user identity for the specified email address.\nDeprecated\nfunc discoverUserIdentity(withPhoneNumber: String, completionHandler: (CKUserIdentity?, Error?) -> Void)\nFetches the user identity for the specified phone number.\nDeprecated\nfunc discoverUserIdentity(withUserRecordID: CKRecord.ID, completionHandler: (CKUserIdentity?, Error?) -> Void)\nFetches the user identity for the specified user record ID.\nDeprecated\nfunc fetchShareParticipant(withEmailAddress: String, completionHandler: (CKShare.Participant?, Error?) -> Void)\nFetches the share participant with the specified email address.\nfunc fetchShareParticipant(withPhoneNumber: String, completionHandler: (CKShare.Participant?, Error?) -> Void)\nFetches the share participant with the specified phone number.\nfunc fetchShareParticipant(withUserRecordID: CKRecord.ID, completionHandler: (CKShare.Participant?, Error?) -> Void)\nFetches the share participant with the specified user record ID.\nlet CKCurrentUserDefaultName: String\nA constant that provides the current user’s default name.\nlet CKOwnerDefaultName: String\nA constant that provides the default owner’s name.\nDeprecated"
  },
  {
    "title": "fetchShareParticipant(withUserRecordID:completionHandler:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckcontainer/1640387-fetchshareparticipant",
    "html": "Parameters\nuserRecordID\n\nThe share participant’s user record ID.\n\ncompletionHandler\n\nThe handler to execute with the fetch results.\n\nDiscussion\n\nConcurrency Note\n\nYou can call this method from synchronous code using a completion handler, as shown on this page, or you can call it as an asynchronous method that has the following declaration:\n\nfunc shareParticipant(forUserRecordID userRecordID: CKRecord.ID) async throws -> CKShare.Participant\n\n\nFor information about concurrency and asynchronous code in Swift, see Calling Objective-C APIs Asynchronously.\n\nThe closure doesn’t return a value and takes the following parameters:\n\nThe share participant, or nil if CloudKit can’t find the participant.\n\nAn error if a problem occurs, or nil if CloudKit successfully retrieves the participant.\n\nThis method searches for the share participant asynchronously and with a low priority. If you want the task to execute with a higher priority, create an instance of CKFetchShareParticipantsOperation and configure it to use the necessary priority.\n\nSee Also\nDiscovering User Records\nfunc discoverAllIdentities(completionHandler: ([CKUserIdentity]?, Error?) -> Void)\nFetches all user identities that match entries in the user’s Contacts.\nDeprecated\nfunc discoverUserIdentity(withEmailAddress: String, completionHandler: (CKUserIdentity?, Error?) -> Void)\nFetches the user identity for the specified email address.\nDeprecated\nfunc discoverUserIdentity(withPhoneNumber: String, completionHandler: (CKUserIdentity?, Error?) -> Void)\nFetches the user identity for the specified phone number.\nDeprecated\nfunc discoverUserIdentity(withUserRecordID: CKRecord.ID, completionHandler: (CKUserIdentity?, Error?) -> Void)\nFetches the user identity for the specified user record ID.\nDeprecated\nfunc fetchShareParticipant(withEmailAddress: String, completionHandler: (CKShare.Participant?, Error?) -> Void)\nFetches the share participant with the specified email address.\nfunc fetchShareParticipant(withPhoneNumber: String, completionHandler: (CKShare.Participant?, Error?) -> Void)\nFetches the share participant with the specified phone number.\nfunc fetchUserRecordID(completionHandler: (CKRecord.ID?, Error?) -> Void)\nFetches the user record ID of the current user.\nlet CKCurrentUserDefaultName: String\nA constant that provides the current user’s default name.\nlet CKOwnerDefaultName: String\nA constant that provides the default owner’s name.\nDeprecated"
  },
  {
    "title": "add(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckcontainer/1399215-add",
    "html": "Parameters\noperation\n\nThe operation to add to the queue. Make sure you fully configure the operation and have it ready to execute. Don’t change the operation’s configuration after you queue it.\n\nDiscussion\n\nThis method adds the operation to a queue that the container manages. The queue’s operations execute on background threads concurrently, and with default priorities. When you add an operation to the queue, its container becomes the current container."
  },
  {
    "title": "removeParticipant(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckshare/1640523-removeparticipant",
    "html": "Parameters\nparticipant\n\nThe participant to remove from the share.\n\nDiscussion\n\nTo modify the list of participants, a share’s publicPermission must be CKShare.ParticipantPermission.none. You can’t mix and match public and private users in the same share. You can only add certain participant types with this API. See CKShare.Participant for more information.\n\nSee Also\nConfiguring the Share\nvar publicPermission: CKShare.ParticipantPermission\nThe permission for anyone with access to the share’s URL.\nfunc addParticipant(CKShare.Participant)\nAdds a participant to the share.\nclass CKShare.Participant\nAn object that describes a user’s participation in a share."
  },
  {
    "title": "modifyRecords(saving:deleting:savePolicy:atomically:completionHandler:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckdatabase/3794324-modifyrecords",
    "html": "Parameters\nrecordsToSave\n\nThe records to save.\n\nrecordIDsToDelete\n\nThe identifiers of the records to permanently delete.\n\nsavePolicy\n\nThe policy to use when modifying existing records. For possible values, see CKModifyRecordsOperation.RecordSavePolicy.\n\natomically\n\nIf true, the entire operation fails if CloudKit can’t modify one or more of the specified records; otherwise, CloudKit reports individual failures in the returned tuple. Atomic changes are only applicable in record zones that have the atomic capability.\n\ncompletionHandler\n\nThe closure to execute after CloudKit processes the changes.\n\nDiscussion\n\nThe completion handler takes a single Result parameter that contains either a tuple, or an error if the request fails. For example, when the network is unavailable or the device doesn’t have an active iCloud account, or when atomically is true and one or more of the specified changes fail.\n\nWhen present, the tuple contains the following named elements:\n\nsaveResults\n\nA dictionary of saved records. The dictionary uses the identifiers of the records you specify in recordsToSave as its keys. The value of each key is a Result that contains either the corresponding modified record (as it appears on the server), or an error that describes why CloudKit can’t modify that record.\n\ndeleteResults\n\nA dictionary of deleted records. The dictionary uses the identifiers you specify in recordIDsToDelete as its keys. The value of each key is a Result that contains either Void to indicate a successful deletion, or an error that describes why CloudKit can’t delete that record.\n\nDeleting records may cause additional deletions if other records in the database reference the deleted records. CloudKit doesn’t provide the identifiers of any additional records it deletes.\n\nFor information on a more configurable way to modify records, see CKModifyRecordsOperation.\n\nSee Also\nModifying Records\nfunc modifyRecords(saving: [CKRecord], deleting: [CKRecord.ID], savePolicy: CKModifyRecordsOperation.RecordSavePolicy, atomically: Bool) -> (saveResults: [CKRecord.ID : Result<CKRecord, Error>], deleteResults: [CKRecord.ID : Result<Void, Error>])\nModifies the specified records and returns the results to an awaiting caller.\nenum CKModifyRecordsOperation.RecordSavePolicy\nConstants that indicate which policy to apply when saving records.\nfunc save(CKRecord, completionHandler: (CKRecord?, Error?) -> Void)\nSaves a specific record.\nfunc delete(withRecordID: CKRecord.ID, completionHandler: (CKRecord.ID?, Error?) -> Void)\nDeletes a specific record."
  },
  {
    "title": "qualityOfService | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckoperation/configuration/2866201-qualityofservice",
    "html": "See Also\nPreparing a Configuration\nvar allowsCellularAccess: Bool\nA Boolean value that indicates whether operations that use this configuration can send data over the cellular network.\nvar container: CKContainer?\nThe configuration’s container.\nvar isLongLived: Bool\nA Boolean value that indicates whether the operations that use this configuration are long-lived.\nvar timeoutIntervalForRequest: TimeInterval\nThe maximum amount of time that a request can take.\nvar timeoutIntervalForResource: TimeInterval\nThe maximum amount of time that a resource request can take."
  },
  {
    "title": "perform(_:inZoneWith:completionHandler:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckdatabase/1449127-perform",
    "html": "Parameters\nquery\n\nThe query that contains the search parameters. For more information, see CKQuery.\n\nzoneID\n\nThe identifier of the record zone to search. If you’re searching a shared database, provide a record zone identifier; otherwise, you can specify nil to search all record zones in the database.\n\ncompletionHandler\n\nThe closure to execute with the search results.\n\nDiscussion\n\nConcurrency Note\n\nYou can call this method from synchronous code using a completion handler, as shown on this page, or you can call it as an asynchronous method that has the following declaration:\n\nfunc perform(_ query: CKQuery, inZoneWith zoneID: CKRecordZone.ID?) async throws -> [CKRecord]\n\n\nFor information about concurrency and asynchronous code in Swift, see Calling Objective-C APIs Asynchronously.\n\nThe completion handler takes the following parameters:\n\nThe records that match the specified query, or nil if there’s an error.\n\nAn error if a problem occurs, or nil if CloudKit completes the search successfully.\n\nFor information on a more convenient way to search a database, see records(matching:inZoneWith:desiredKeys:resultsLimit:).\n\nSee Also\nQuerying Records\nfunc records(matching: CKQuery, inZoneWith: CKRecordZone.ID?, desiredKeys: [CKRecord.FieldKey]?, resultsLimit: Int) -> (matchResults: [(CKRecord.ID, Result<CKRecord, Error>)], queryCursor: CKQueryOperation.Cursor?)\nSearches for records that match a predicate and returns them to an awaiting caller.\nfunc records(continuingMatchFrom: CKQueryOperation.Cursor, desiredKeys: [CKRecord.FieldKey]?, resultsLimit: Int) -> (matchResults: [(CKRecord.ID, Result<CKRecord, Error>)], queryCursor: CKQueryOperation.Cursor?)\nRetrieves the next batch of records from an existing search and returns them to an awaiting caller.\nfunc fetch(withQuery: CKQuery, inZoneWith: CKRecordZone.ID?, desiredKeys: [CKRecord.FieldKey]?, resultsLimit: Int, completionHandler: (Result<(matchResults: [(CKRecord.ID, Result<CKRecord, Error>)], queryCursor: CKQueryOperation.Cursor?), Error>) -> Void)\nSearches for records that match a predicate and delivers them to a completion handler.\nfunc fetch(withCursor: CKQueryOperation.Cursor, desiredKeys: [CKRecord.FieldKey]?, resultsLimit: Int, completionHandler: (Result<(matchResults: [(CKRecord.ID, Result<CKRecord, Error>)], queryCursor: CKQueryOperation.Cursor?), Error>) -> Void)\nRetrieves the next batch of records from an existing search and delivers them to a completion handler.\nfunc records(matching: CKQuery, inZoneWith: CKRecordZone.ID?) -> [CKRecord]\nSearches for records in the specified record zone and returns them to an awaiting caller.\nDeprecated"
  },
  {
    "title": "Sharing CloudKit Data with Other iCloud Users | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/shared_records/sharing_cloudkit_data_with_other_icloud_users",
    "html": "Overview\n\nAs technology advances, people collaborate with others through cloud-based apps more than ever. They can share digital assets with friends, or invite their colleagues living around the world to work together. To support such use cases, apps need to move user data to the cloud and implement a data-sharing flow that includes features like sharing management, data synchronization, and access control.\n\nThis sample demonstrates how to use CloudKit to implement these features by allowing users to create topic and note records in their private databases and share them with other users. With the CloudKit sharing UI, users can send a share link, stop sharing topics, and manage permissions for a shared topic. Users who accept the share, called participants, can view or edit the shared record, or stop participating in the share.\n\nThe sample also demonstrates how to create an in-memory cache for a CloudKit record zone. Because of this local cache, the sample doesn’t have to query the server while navigating the UI within the zone.\n\nConfigure the Sample Code Project\n\nBefore building the sample, perform the following steps in Xcode:\n\nIn the General pane of the CloudKitShare target, update the Bundle Identifier field with a new identifier.\n\nIn the Signing & Capabilities pane, select the applicable team from the Team drop-down menu to let Xcode automatically manage the provisioning profile. See Assign a project to a team for details.\n\nMake sure the iCloud capability is present and the CloudKit option is in a selected state, then select the iCloud container with your bundle identifier from step 1 from the Containers list. If the container doesn’t exist, click the Add button (+), enter the container name (iCloud.<bundle identifier>), and click OK to let Xcode create the container and associate it with the app.\n\nIf you prefer to use a different container, select it from the Containers list, and specify the container identifier when creating the container variable in the AppDelegate class. An iCloud container identifier is case-sensitive and must begin with “iCloud.”.\n\nBefore running the sample on a device, configure the device as follows:\n\nLog in with an Apple ID. For the CloudKit private database to synchronize across devices, the Apple ID must be the same on the devices.\n\nChoose Settings > Apple ID > iCloud, and turn on iCloud Drive, if it is off.\n\nCreate a CloudKit Schema for the App\n\nCloudKit apps need to create a schema to define the record types and fields, and CloudKit Dashboard is the tool for doing that. For more information, see Inspecting and Editing an iCloud Container’s Schema.\n\nThe sample uses the following record types and fields:\n\nTopic\n    name (String)\nNote\n    title (String)\n    topic (Reference, pointing to the parent topic)\n\n\nIn this instance, there is no need to manually create the schema before running the sample because:\n\nWhen an app saves a record in the development environment, CloudKit automatically creates the corresponding record type if it doesn’t exist. For more information, see Designing and Creating a CloudKit Database.\n\nBefore saving a record, the sample doesn’t use any record-type information.\n\nFor real-world apps that use record types at an earlier phase, like creating a CKQuerySubscription at the beginning of a launch session, the schema must be ready first.\n\nCreate and Share a Topic\n\nTo create and share a topic with another iCloud user using the sample, follow these steps:\n\nPrepare two devices, A and B, and log in to each device with a different iCloud account.\n\nUse Xcode to build and run the sample app on the devices. If the system shows an alert that requests permission to use notifications, allow it.\n\nOn device A, tap the Zones button to show the zone view, then tap the Edit button and add a zone in the private database.\n\nTap the new zone to navigate to the topic view, then tap the Edit button and add a topic. Each topic has a Share button on the right.\n\nTap the Share button to show the CloudKit sharing UI, then follow the UI to send a link to the iCloud account for device B. Try to use Messages because it’s easier to set up.\n\nAfter receiving the link on device B, tap it to accept and open the share. The sample app launches, and then the shared topic and its zone appear in the shared database.\n\nNote\n\nTo be able to accept a share when users tap a share link, the app’s info.plist file must contain the CKSharingSupported key and its value must be true.\n\nTo discover more features in the CloudKit sharing UI:\n\nOn device A, find the shared topic and tap the Share button. Because it’s a shared topic, the sharing UI allows users to stop sharing or to change the permission for a participant.\n\nOn device B, tap the Share button of the accepted topic. On the participant side, the sharing UI allows users to remove their participation from the topic.\n\nOn device B, navigate to the shared database’s topic view, then tap the Edit button and add a note under the shared topic. The new note synchronizes within seconds to the private database on device A. (This assumes the topic’s “Anyone with this link can make changes” option is in an enabled state. If the topic’s “Anyone with this link can view” option is in an enabled state, participants have read-only permissions, and can’t add a note under the topic.)\n\nOn device A, add a note under the shared topic. The note synchronizes within seconds to device B. When creating a note, the sample sets its parent property to the topic, so the system automatically shares the note with its parent topic.\n\nnewNoteRecord.parent = CKRecord.Reference(record: topicRecord, action: .none)\n\nShare a Record\n\nThe sample uses UICloudSharingController to implement the sharing flow. Depending on whether the root record is in a shared state, there are different ways to create a sharing controller.\n\nif rootRecord.share != nil {\n    newSharingController(sharedRootRecord: rootRecord, database: database,\n                         completionHandler: completionHandler)\n} else {\n    newSharingController(unsharedRootRecord: rootRecord, database: database, zone: zone,\n                         completionHandler: completionHandler)\n}\n\n\nIf the root record is in a shared state, the sample grabs the recordID from the share property of the root record, uses it to fetch the share, which is the associated CKShare object, from the server, and calls init(share:container:) to create a sharing controller.\n\nlet sharingController = UICloudSharingController(share: share, container: self)\n\n\nIf the root record isn’t in a shared state, the sample uses init(preparationHandler:) to create the sharing controller.\n\nlet sharingController = UICloudSharingController { (_, prepareCompletionHandler) in\n\n\nIn the preparation handler, the sample sets up a new CKShare object using the root record.\n\nlet shareID = CKRecord.ID(recordName: UUID().uuidString, zoneID: zone.zoneID)\nvar share = CKShare(rootRecord: unsharedRootRecord, shareID: shareID)\nshare[CKShare.SystemFieldKey.title] = \"A cool topic to share!\" as CKRecordValue\nshare.publicPermission = .readWrite\n\n\nThe sample then saves the share and its root record together using CKModifyRecordsOperation.\n\nlet modifyRecordsOp = CKModifyRecordsOperation(recordsToSave: [share, unsharedRootRecord], recordIDsToDelete: nil)\n\n\nAfter creating the sharing controller, the sample uses the following code to present it:\n\nsharingController.popoverPresentationController?.sourceView = sender as? UIView\nself.rootRecord = topicRecord\nsharingController.delegate = self\nsharingController.availablePermissions = [.allowPublic, .allowReadOnly, .allowReadWrite]\nself.present(sharingController, animated: true) { self.spinner.stopAnimating() }\n\n\nUsing the sharing UI, users can send a link, stop sharing the record, change the permission for a participant, or quit the flow by closing the UI. According to what users do, the sharing controller may change the root record and its share, and notify the app through the UICloudSharingControllerDelegate protocol. To ensure the cached data is consistent with the server truth, the sample implements the following delegate methods:\n\ncloudSharingControllerDidSaveShare(_:) — CloudKit calls this method when it successfully shares a topic. When this happens, it creates the share and updates the shared topic and notes on the server, so the sample fetches the changes and updates the local cache.\n\ncloudSharingControllerDidStopSharing(_:) — CloudKit calls this method when users stop sharing a record. When this happens, it removes the share and updates the shared topic and notes on the server, so the sample fetches the changes and updates the local cache.\n\ncloudSharingController(_:failedToSaveShareWithError:) — CloudKit calls this method when the sharing controller fails to save a share. When this happens, the sample alerts the error and updates the cached root record to avoid an inconsistent status.\n\nMaintain a Local Cache of CloudKit Records\n\nTo avoid fetching data from the server each time the zone view and topic view are about to appear, the sample caches the zones in the container, and the topics and notes in the current zone. The caches are both in-memory because the sample doesn’t tend to add more complexity by introducing a persistence layer. Real-world apps can persist their cache to avoid doing an initial fetch on each launch.\n\nThe sample establishes the local caches with two steps: initial fetch and incremental update. In sceneWillEnterForeground(_:), the sample checks the account status, and then starts the initial fetch if there isn’t a cache for the current account.\n\nlet building = appDelegate.buildZoneCacheIfNeed(for: newUserRecordID)\n\n\nCloudKit notifications trigger the incremental updates. The sample uses CKDatabaseSubscription to subscribe to CloudKit database changes.\n\nlet subscription = CKDatabaseSubscription(subscriptionID: subscriptionID)\nlet notificationInfo = CKSubscription.NotificationInfo()\nnotificationInfo.shouldBadge = true\nnotificationInfo.alertBody = \"Database (\\(subscriptionID)) was changed!\"\nsubscription.notificationInfo = notificationInfo\n\n\nlet operation = CKModifySubscriptionsOperation(subscriptionsToSave: [subscription], subscriptionIDsToDelete: nil)\noperation.modifySubscriptionsCompletionBlock = { _, _, error in\n    completionHandler(error as NSError?)\n}\n\n\nadd(operation, to: operationQueue)\n\n\nWith the subscriptions, the sample gets push notifications when the database changes, and starts the incremental update from the following UNUserNotificationCenterDelegate method:\n\nfunc userNotificationCenter(_ center: UNUserNotificationCenter, willPresent notification: UNNotification,\n                            withCompletionHandler completionHandler: @escaping (UNNotificationPresentationOptions) -> Void) {\n    print(\"\\(#function)\")\n    updateWithNotificationUserInfo(notification.request.content.userInfo)\n    completionHandler([])\n}\n\n\nThe sample uses CKFetchDatabaseChangesOperation to fetch the deleted or changed zones. When doing the fetch, CloudKit provides a serverChangeToken (CKServerChangeToken) by calling the operation’s changeTokenUpdatedBlock. Apps keep the token and use it as previousServerChangeToken for the next fetch.\n\noperation.changeTokenUpdatedBlock = { serverChangeToken in\n    self.setServerChangeToken(newToken: serverChangeToken, cloudKitDB: cloudKitDB)\n}\n\n\nWhen apps use the token to create and run a CloudKit operation, the token tells the server which portions of the zones to return. If the token is nil, the server returns all zones.\n\nlet serverChangeToken = getServerChangeToken(for: cloudKitDB)\nlet operation = CKFetchDatabaseChangesOperation(previousServerChangeToken: serverChangeToken)\n\n\nAfter gathering the deleted and changed zones, the sample updates the zone cache and makes it consistent with the server truth.\n\nSimilarly, the sample uses CKFetchRecordZoneChangesOperation to gather the deleted and changed topic and notes, and uses them to maintain the topic cache.\n\nlet configuration = CKFetchRecordZoneChangesOperation.ZoneConfiguration()\nconfiguration.previousServerChangeToken = getServerChangeToken()\n\n\nlet operation = CKFetchRecordZoneChangesOperation(\n    recordZoneIDs: [zone.zoneID], configurationsByRecordZoneID: [zone.zoneID: configuration]\n)\n\n\nTo avoid blocking an app’s main queue, CloudKit operations and their callbacks must run on a secondary queue, which can be an app-provided operation queue (OperationQueue), or a private operation queue that CloudKit manages. The sample provides an operation queue to run CloudKit operations and update the cached data when the operations complete. This means the system can access the cached data from different queues: the app’s main queue that reads the data and updates the app UI, and a secondary queue that runs CloudKit operations and updates the data.\n\nTo be thread-safe, the sample serializes data access with a dispatch queue (DispatchQueue). One caveat of this solution is when the main queue needs to read the cached data while the secondary queue is updating it, the main queue must wait until the data update finishes. If the update takes a long time, it blocks the main queue for a long time, which leads to UI unresponsiveness. Real-world apps using the same method to serialize data access need to update the data quickly enough to avoid this issue.\n\nSee Also\nCollaboration\nSharing Core Data objects between iCloud users\nUse Core Data CloudKit to synchronize data between devices of an iCloud user and share data between different iCloud users.\nclass CKShare\nA specialized record type that manages a collection of shared records.\nstruct CKShareTransferRepresentation\nA transfer representation the system uses to share an item.\nclass CKAllowedSharingOptions\nAn object that controls participant access and permission options.\nclass CKSystemSharingUIObserver\nAn object the system uses to monitor changes in sharing.\nclass UICloudSharingController\nA view controller that presents standard screens for adding and removing people from a CloudKit share record.\nproperty list key CKSharingSupported\nA Boolean value that indicates your app supports CloudKit Sharing."
  },
  {
    "title": "records(matching:inZoneWith:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckdatabase/3794331-records",
    "html": "Deprecated\n\nUse records(matching:inZoneWith:desiredKeys:resultsLimit:) instead.\n\nParameters\nquery\n\nThe query that contains the search parameters. For more information, see CKQuery.\n\nzoneID\n\nThe identifier of the record zone to search. If you’re searching a shared database, provide a record zone identifier; otherwise, you can specify nil to search all record zones in the database.\n\nReturn Value\n\nAn array of records that match the specified query.\n\nDiscussion\n\nFor information on a more configurable way to search a database, see CKQueryOperation.\n\nSee Also\nQuerying Records\nfunc records(matching: CKQuery, inZoneWith: CKRecordZone.ID?, desiredKeys: [CKRecord.FieldKey]?, resultsLimit: Int) -> (matchResults: [(CKRecord.ID, Result<CKRecord, Error>)], queryCursor: CKQueryOperation.Cursor?)\nSearches for records that match a predicate and returns them to an awaiting caller.\nfunc records(continuingMatchFrom: CKQueryOperation.Cursor, desiredKeys: [CKRecord.FieldKey]?, resultsLimit: Int) -> (matchResults: [(CKRecord.ID, Result<CKRecord, Error>)], queryCursor: CKQueryOperation.Cursor?)\nRetrieves the next batch of records from an existing search and returns them to an awaiting caller.\nfunc fetch(withQuery: CKQuery, inZoneWith: CKRecordZone.ID?, desiredKeys: [CKRecord.FieldKey]?, resultsLimit: Int, completionHandler: (Result<(matchResults: [(CKRecord.ID, Result<CKRecord, Error>)], queryCursor: CKQueryOperation.Cursor?), Error>) -> Void)\nSearches for records that match a predicate and delivers them to a completion handler.\nfunc fetch(withCursor: CKQueryOperation.Cursor, desiredKeys: [CKRecord.FieldKey]?, resultsLimit: Int, completionHandler: (Result<(matchResults: [(CKRecord.ID, Result<CKRecord, Error>)], queryCursor: CKQueryOperation.Cursor?), Error>) -> Void)\nRetrieves the next batch of records from an existing search and delivers them to a completion handler.\nfunc perform(CKQuery, inZoneWith: CKRecordZone.ID?, completionHandler: ([CKRecord]?, Error?) -> Void)\nSearches for records matching a predicate in the specified record zone."
  },
  {
    "title": "fetch(withQuery:inZoneWith:desiredKeys:resultsLimit:completionHandler:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckdatabase/3856519-fetch",
    "html": "Parameters\nquery\n\nThe query that contains the search parameters. For more information, see CKQuery.\n\nzoneID\n\nThe identifier of the record zone to search. If you’re searching a shared database, provide a record zone identifier; otherwise, you can specify nil to search all record zones in the database.\n\ndesiredKeys\n\nThe fields to include on each fetched record. To include all fields, specify nil; to fetch only system fields, specify an empty array.\n\nresultsLimit\n\nThe maximum number of records to return in a single set of results.\n\ncompletionHandler\n\nThe closure to execute with the search results.\n\nDiscussion\n\nThe completion handler takes a single Result parameter that contains either a tuple, or an error if the request fails. For example, when the network is unavailable or the device doesn’t have an active iCloud account.\n\nWhen present, the tuple contains the following named elements:\n\nmatchResults\n\nAn array of tuples. Each tuple includes a record identifier and a Result that contains either the corresponding matched record, or an error that describes why CloudKit can’t provide that record. For example, if CloudKit fails to materialize an asset field, it returns an error instead of a partial record. CloudKit sorts the array according to the query’s sort descriptors.\n\nqueryCursor\n\nA cursor if the number of results exceeds resultsLimit; otherwise, nil.\n\nIf you specify resultsLimit and the number of matched records exceeds that value, CloudKit provides only that number of records and a cursor — an object that marks a specific location in the full search results. To retrieve the next subset of search results, pass that cursor to the fetch(withCursor:desiredKeys:resultsLimit:completionHandler:) method.\n\nFor information on a more configurable way to search a database, see CKQueryOperation.\n\nSee Also\nQuerying Records\nfunc records(matching: CKQuery, inZoneWith: CKRecordZone.ID?, desiredKeys: [CKRecord.FieldKey]?, resultsLimit: Int) -> (matchResults: [(CKRecord.ID, Result<CKRecord, Error>)], queryCursor: CKQueryOperation.Cursor?)\nSearches for records that match a predicate and returns them to an awaiting caller.\nfunc records(continuingMatchFrom: CKQueryOperation.Cursor, desiredKeys: [CKRecord.FieldKey]?, resultsLimit: Int) -> (matchResults: [(CKRecord.ID, Result<CKRecord, Error>)], queryCursor: CKQueryOperation.Cursor?)\nRetrieves the next batch of records from an existing search and returns them to an awaiting caller.\nfunc fetch(withCursor: CKQueryOperation.Cursor, desiredKeys: [CKRecord.FieldKey]?, resultsLimit: Int, completionHandler: (Result<(matchResults: [(CKRecord.ID, Result<CKRecord, Error>)], queryCursor: CKQueryOperation.Cursor?), Error>) -> Void)\nRetrieves the next batch of records from an existing search and delivers them to a completion handler.\nfunc perform(CKQuery, inZoneWith: CKRecordZone.ID?, completionHandler: ([CKRecord]?, Error?) -> Void)\nSearches for records matching a predicate in the specified record zone.\nfunc records(matching: CKQuery, inZoneWith: CKRecordZone.ID?) -> [CKRecord]\nSearches for records in the specified record zone and returns them to an awaiting caller.\nDeprecated"
  },
  {
    "title": "records(continuingMatchFrom:desiredKeys:resultsLimit:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckdatabase/3856523-records",
    "html": "Parameters\nqueryCursor\n\nThe cursor that identifies, within the full search results, the location of the next subset of results to retrieve.\n\ndesiredKeys\n\nThe fields to include on each fetched record. To include all fields, specify nil; to fetch only system fields, specify an empty array.\n\nresultsLimit\n\nThe maximum number of records to return in a single set of results.\n\nReturn Value\n\nA tuple with the following named elements:\n\nmatchResults\n\nAn array of tuples. Each tuple includes a record identifier and a Result that contains either the corresponding matched record, or an error that describes why CloudKit can’t provide that record. For example, if CloudKit fails to materialize an asset field, it returns an error instead of a partial record. CloudKit sorts the array according to the query’s sort descriptors.\n\nqueryCursor\n\nA cursor if the number of results exceeds resultsLimit; otherwise, nil.\n\nDiscussion\n\nIf you specify resultsLimit and the number of matched records exceeds that value, this method returns only that number of records and a cursor — an object that marks a specific location in the full search results. To retrieve the next subset of search results, execute this method again and pass the returned cursor from previous execution. This method throws an error if the request fails, such as when the network is unavailable or the device doesn’t have an active iCloud account; otherwise, the returned tuple includes any individual record errors.\n\nFor information on a more configurable way to search a database, see CKQueryOperation.\n\nSee Also\nQuerying Records\nfunc records(matching: CKQuery, inZoneWith: CKRecordZone.ID?, desiredKeys: [CKRecord.FieldKey]?, resultsLimit: Int) -> (matchResults: [(CKRecord.ID, Result<CKRecord, Error>)], queryCursor: CKQueryOperation.Cursor?)\nSearches for records that match a predicate and returns them to an awaiting caller.\nfunc fetch(withQuery: CKQuery, inZoneWith: CKRecordZone.ID?, desiredKeys: [CKRecord.FieldKey]?, resultsLimit: Int, completionHandler: (Result<(matchResults: [(CKRecord.ID, Result<CKRecord, Error>)], queryCursor: CKQueryOperation.Cursor?), Error>) -> Void)\nSearches for records that match a predicate and delivers them to a completion handler.\nfunc fetch(withCursor: CKQueryOperation.Cursor, desiredKeys: [CKRecord.FieldKey]?, resultsLimit: Int, completionHandler: (Result<(matchResults: [(CKRecord.ID, Result<CKRecord, Error>)], queryCursor: CKQueryOperation.Cursor?), Error>) -> Void)\nRetrieves the next batch of records from an existing search and delivers them to a completion handler.\nfunc perform(CKQuery, inZoneWith: CKRecordZone.ID?, completionHandler: ([CKRecord]?, Error?) -> Void)\nSearches for records matching a predicate in the specified record zone.\nfunc records(matching: CKQuery, inZoneWith: CKRecordZone.ID?) -> [CKRecord]\nSearches for records in the specified record zone and returns them to an awaiting caller.\nDeprecated"
  },
  {
    "title": "fetch(withCursor:desiredKeys:resultsLimit:completionHandler:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckdatabase/3856518-fetch",
    "html": "Parameters\nqueryCursor\n\nThe cursor that identifies, within the full search results, the location of the next subset of results to retrieve.\n\ndesiredKeys\n\nThe fields to include on each fetched record. To include all fields, specify nil; to fetch only system fields, specify an empty array.\n\nresultsLimit\n\nThe maximum number of records to return in a single set of results.\n\ncompletionHandler\n\nThe closure to execute with the search results.\n\nDiscussion\n\nThe completion handler takes a single Result parameter that contains either a tuple, or an error if the request fails. For example, when the network is unavailable or the device doesn’t have an active iCloud account.\n\nWhen present, the tuple contains the following named elements:\n\nmatchResults\n\nAn array of tuples. Each tuple includes a record identifier and a Result that contains either the corresponding matched record, or an error that describes why CloudKit can’t provide that record. For example, if CloudKit fails to materialize an asset field, it returns an error instead of a partial record. CloudKit sorts the array according to the query’s sort descriptors.\n\nqueryCursor\n\nA cursor if the number of results exceeds resultsLimit; otherwise, nil.\n\nIf you specify resultsLimit and the number of matched records exceeds that value, CloudKit provides only that number of records and a cursor — an object that marks a specific location in the full search results. To retrieve the next subset of search results, execute this method again and pass the provided cursor from previous execution.\n\nFor information on a more configurable way to search a database, see CKQueryOperation.\n\nSee Also\nQuerying Records\nfunc records(matching: CKQuery, inZoneWith: CKRecordZone.ID?, desiredKeys: [CKRecord.FieldKey]?, resultsLimit: Int) -> (matchResults: [(CKRecord.ID, Result<CKRecord, Error>)], queryCursor: CKQueryOperation.Cursor?)\nSearches for records that match a predicate and returns them to an awaiting caller.\nfunc records(continuingMatchFrom: CKQueryOperation.Cursor, desiredKeys: [CKRecord.FieldKey]?, resultsLimit: Int) -> (matchResults: [(CKRecord.ID, Result<CKRecord, Error>)], queryCursor: CKQueryOperation.Cursor?)\nRetrieves the next batch of records from an existing search and returns them to an awaiting caller.\nfunc fetch(withQuery: CKQuery, inZoneWith: CKRecordZone.ID?, desiredKeys: [CKRecord.FieldKey]?, resultsLimit: Int, completionHandler: (Result<(matchResults: [(CKRecord.ID, Result<CKRecord, Error>)], queryCursor: CKQueryOperation.Cursor?), Error>) -> Void)\nSearches for records that match a predicate and delivers them to a completion handler.\nfunc perform(CKQuery, inZoneWith: CKRecordZone.ID?, completionHandler: ([CKRecord]?, Error?) -> Void)\nSearches for records matching a predicate in the specified record zone.\nfunc records(matching: CKQuery, inZoneWith: CKRecordZone.ID?) -> [CKRecord]\nSearches for records in the specified record zone and returns them to an awaiting caller.\nDeprecated"
  },
  {
    "title": "records(matching:inZoneWith:desiredKeys:resultsLimit:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckdatabase/3856524-records",
    "html": "Parameters\nquery\n\nThe query that contains the search parameters. For more information, see CKQuery.\n\nzoneID\n\nThe identifier of the record zone to search. If you’re searching a shared database, provide a record zone identifier; otherwise, you can specify nil to search all record zones in the database.\n\ndesiredKeys\n\nThe fields to include on each fetched record. To include all fields, specify nil; to fetch only system fields, specify an empty array.\n\nresultsLimit\n\nThe maximum number of records to return in a single set of results.\n\nReturn Value\n\nA tuple with the following named elements:\n\nmatchResults\n\nAn array of tuples. Each tuple includes a record identifier and a Result that contains either the corresponding matched record, or an error that describes why CloudKit can’t provide that record. For example, if CloudKit fails to materialize an asset field, it returns an error instead of a partial record. CloudKit sorts the array according to the query’s sort descriptors.\n\nqueryCursor\n\nA cursor if the number of results exceeds resultsLimit; otherwise, nil.\n\nDiscussion\n\nIf you specify resultsLimit and the number of matched records exceeds that value, this method returns only that number of records and a cursor — an object that marks a specific location in the full search results. To retrieve the next subset of search results, pass that cursor to the records(continuingMatchFrom:desiredKeys:resultsLimit:) method. This method throws an error if the request fails, such as when the network is unavailable or the device doesn’t have an active iCloud account; otherwise, the returned tuple includes any individual record errors.\n\nFor information on a more configurable way to search a database, see CKQueryOperation.\n\nSee Also\nQuerying Records\nfunc records(continuingMatchFrom: CKQueryOperation.Cursor, desiredKeys: [CKRecord.FieldKey]?, resultsLimit: Int) -> (matchResults: [(CKRecord.ID, Result<CKRecord, Error>)], queryCursor: CKQueryOperation.Cursor?)\nRetrieves the next batch of records from an existing search and returns them to an awaiting caller.\nfunc fetch(withQuery: CKQuery, inZoneWith: CKRecordZone.ID?, desiredKeys: [CKRecord.FieldKey]?, resultsLimit: Int, completionHandler: (Result<(matchResults: [(CKRecord.ID, Result<CKRecord, Error>)], queryCursor: CKQueryOperation.Cursor?), Error>) -> Void)\nSearches for records that match a predicate and delivers them to a completion handler.\nfunc fetch(withCursor: CKQueryOperation.Cursor, desiredKeys: [CKRecord.FieldKey]?, resultsLimit: Int, completionHandler: (Result<(matchResults: [(CKRecord.ID, Result<CKRecord, Error>)], queryCursor: CKQueryOperation.Cursor?), Error>) -> Void)\nRetrieves the next batch of records from an existing search and delivers them to a completion handler.\nfunc perform(CKQuery, inZoneWith: CKRecordZone.ID?, completionHandler: ([CKRecord]?, Error?) -> Void)\nSearches for records matching a predicate in the specified record zone.\nfunc records(matching: CKQuery, inZoneWith: CKRecordZone.ID?) -> [CKRecord]\nSearches for records in the specified record zone and returns them to an awaiting caller.\nDeprecated"
  },
  {
    "title": "fetch(withRecordID:completionHandler:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckdatabase/1449126-fetch",
    "html": "Parameters\nrecordID\n\nThe identifier of the record to fetch.\n\ncompletionHandler\n\nThe closure to execute with the fetch results.\n\nDiscussion\n\nConcurrency Note\n\nYou can call this method from synchronous code using a completion handler, as shown on this page, or you can call it as an asynchronous method that has the following declaration:\n\nfunc record(for recordID: CKRecord.ID) async throws -> CKRecord\n\n\nFor information about concurrency and asynchronous code in Swift, see Calling Objective-C APIs Asynchronously.\n\nThe completion handler takes the following parameters:\n\nThe requested record, or nil if CloudKit can’t provide that record.\n\nAn error if a problem occurs, or nil if the fetch completes successfully.\n\nFor information on a more convenient way to fetch specific records, see records(for:desiredKeys:).\n\nSee Also\nFetching Records\nfunc records(for: [CKRecord.ID], desiredKeys: [CKRecord.FieldKey]?) -> [CKRecord.ID : Result<CKRecord, Error>]\nFetches the specified records and returns them to an awaiting caller.\nfunc fetch(withRecordIDs: [CKRecord.ID], desiredKeys: [CKRecord.FieldKey]?, completionHandler: (Result<[CKRecord.ID : Result<CKRecord, Error>], Error>) -> Void)\nFetches the specified records and delivers them to a completion handler."
  },
  {
    "title": "records(for:desiredKeys:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckdatabase/3794330-records",
    "html": "Parameters\nids\n\nThe identifiers of the records to fetch.\n\ndesiredKeys\n\nThe fields to include on each fetched record. To include all fields, specify nil; to fetch only system fields, specify an empty array.\n\nReturn Value\n\nA dictionary that contains the fetched records. The dictionary uses the identifiers you specify in ids as its keys. The value of each key is a Result that contains either the corresponding fetched record, or an error that describes why CloudKit can’t provide that record.\n\nDiscussion\n\nIf you’re fetching records of different types, make sure that desiredKeys is the union of all the fields you require across each distinct record type. This method throws an error if the request fails, such as when the network is unavailable or the device doesn’t have an active iCloud account; otherwise, the returned dictionary includes any individual record errors.\n\nFor information on a more configurable way to fetch specific records, see CKFetchRecordsOperation.\n\nSee Also\nFetching Records\nfunc fetch(withRecordIDs: [CKRecord.ID], desiredKeys: [CKRecord.FieldKey]?, completionHandler: (Result<[CKRecord.ID : Result<CKRecord, Error>], Error>) -> Void)\nFetches the specified records and delivers them to a completion handler.\nfunc fetch(withRecordID: CKRecord.ID, completionHandler: (CKRecord?, Error?) -> Void)\nFetches a specific record."
  },
  {
    "title": "fetch(withRecordIDs:desiredKeys:completionHandler:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckdatabase/3794316-fetch",
    "html": "Parameters\nrecordIDs\n\nThe identifiers of the records to fetch.\n\ndesiredKeys\n\nThe fields to include on each fetched record. To include all fields, specify nil; to fetch only system fields, specify an empty array.\n\ncompletionHandler\n\nThe closure to execute with the fetch results.\n\nDiscussion\n\nThe completion handler takes the following parameters:\n\nA Result that contains either a dictionary of fetched records, or an error if the request fails, such as when the network is unavailable or the device doesn’t have an active iCloud account. When present, the dictionary uses the identifiers you specify in recordIDs as its keys. The value of each key is a Result that contains either the corresponding fetched record, or an error that describes why CloudKit can’t provide that record.\n\nIf you’re fetching records of different types, make sure that desiredKeys is the union of all the fields you require across each distinct record type.\n\nFor information on a more configurable way to fetch specific records, see CKFetchRecordsOperation.\n\nSee Also\nFetching Records\nfunc records(for: [CKRecord.ID], desiredKeys: [CKRecord.FieldKey]?) -> [CKRecord.ID : Result<CKRecord, Error>]\nFetches the specified records and returns them to an awaiting caller.\nfunc fetch(withRecordID: CKRecord.ID, completionHandler: (CKRecord?, Error?) -> Void)\nFetches a specific record."
  },
  {
    "title": "configuredWith(configuration:group:body:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckdatabase/3794311-configuredwith",
    "html": "Parameters\nconfiguration\n\nAn interim configuration to apply to the current database.\n\ngroup\n\nThe group to associate with the methods you execute in the closure. Specifying a group helps the system prioritize those method calls, and helps you identify the calls in the server logs in CloudKit Console. For more information, see CKOperationGroup.\n\nbody\n\nThe closure to execute with the temporarily configured database.\n\nDiscussion\n\nUse this method to apply a specific configuration to the current database that lasts only for the duration of the trailing closure. For example, you might want to temporarily elevate the quality of service (QoS) for a group of method calls, or allow one or more expensive method calls to execute only while the device is using WiFi.\n\nfunc fetchRecords(with ids: [CKRecord.ID]) async throws\n    -> [CKRecord.ID: Result<CKRecord, Error>] {\n    \n    // Get a reference to the user's private database.\n    let database = CKContainer.default().privateCloudDatabase\n    \n    // Create a configuration that denies cellular access.\n    let config = CKOperation.Configuration()\n    config.allowsCellularAccess = false\n    \n    // Configure the database and execute an expensive fetch.\n    return try await database.configuredWith(configuration: config) { db in\n        try await db.records(for: ids)\n    }\n}\n\n\nSee Also\nConfiguring Database Requests\nfunc configuredWith<R>(configuration: CKOperation.Configuration?, group: CKOperationGroup?, body: (CKDatabase) -> R) -> R\nApplies a temporary configuration to the database within the scope of a closure."
  },
  {
    "title": "configuredWith(configuration:group:body:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckdatabase/3794310-configuredwith",
    "html": "Parameters\nconfiguration\n\nAn interim configuration to apply to the current database.\n\ngroup\n\nThe group to associate with the methods you execute in the closure. Specifying a group helps the system prioritize those method calls, and helps you identify the calls in the server logs in CloudKit Console. For more information, see CKOperationGroup.\n\nbody\n\nThe closure to execute with the temporarily configured database.\n\nDiscussion\n\nUse this method to apply a specific configuration to the current database that lasts only for the duration of the trailing closure. For example, you might want to temporarily elevate the quality of service (QoS) for a group of method calls, or allow one or more expensive method calls to execute only while the device is using WiFi.\n\nfunc fetchRecords(with ids: [CKRecord.ID], completionHandler: @escaping\n    (Result<[CKRecord.ID : Result<CKRecord, Error>], Error>) -> Void) {\n    \n    // Get a reference to the user's private database.\n    let database = CKContainer.default().privateCloudDatabase\n    \n    // Create a configuration that denies cellular access.\n    let config = CKOperation.Configuration()\n    config.allowsCellularAccess = false\n    \n    // Configure the database and execute an expensive fetch.\n    database.configuredWith(configuration: config) { db in\n        db.fetch(withRecordIDs: ids, completionHandler: completionHandler)\n    }\n}\n\n\nSee Also\nConfiguring Database Requests\nfunc configuredWith<R>(configuration: CKOperation.Configuration?, group: CKOperationGroup?, body: (CKDatabase) -> R) -> R\nApplies a temporary configuration to the database within the scope of a closure that supports concurrency."
  },
  {
    "title": "CKShare | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckshare",
    "html": "Overview\n\nA share is a specialized record type that facilitates the sharing of one or more records with many participants. You store shareable records in a custom record zone in the user’s private database. As you create records in that zone, they become eligible for record zone sharing. If you want to share a specific hierarchy of related records, rather than the entire record zone, set each record’s parent property to define the relationship with its parent. CloudKit infers the shared hierarchy using only the parent property, and ignores any custom reference fields.\n\nYou create a share with either the ID of the record zone to share, or the root record, which defines the point in a record hierarchy where you want to start sharing. CloudKit shares all the records in the record zone, or every record in the hierarchy below the root. If you set the root record’s parent property, CloudKit ignores it. A record can take part in only a single share. This applies to every record in the shared record zone or hierarchy. If a record is participating in another share, any attempt to save the share fails, and CloudKit returns an alreadyShared error.\n\nUse CKModifyRecordsOperation to save the share to the server. The initial set of records the share includes must exist on the server or be part of the same save operation to succeed. CloudKit then updates the share’s url property. Use UICloudSharingController to present options to the user for sharing the URL. Otherwise, distribute the URL to any participants you add to the share. You can allow anyone with the URL to take part in the share by setting publicPermission to a value more permissive than CKShare.ParticipantPermission.none.\n\nImportant\n\nYou must add the CKSharingSupported key to your app’s Info.plist file with a value of true. This allows the system to launch your app when a user taps or clicks the URL.\n\nAfter CloudKit saves the share, a participant can fetch its corresponding metadata, which includes a reference to the share, information about the user’s participation, and, for shared hierarchies, the root record’s record ID. Create an instance of CKFetchShareMetadataOperation using the share’s URL and add it to the container’s queue to execute it. The operation returns an instance of CKShare.Metadata for each URL you provide. This is only applicable if you manually process share acceptance. If a user receives the share URL and taps or clicks it, CloudKit automatically processes their participation.\n\nTo determine the configuration of a fetched share, inspect the recordName property of its recordID. If the value is CKRecordNameZoneWideShare, the share is managing a shared record zone; otherwise, it’s managing a shared record hierarchy.\n\nlet isZoneWide = (metadata.share.recordID.recordName == CKRecordNameZoneWideShare)\n\n\nCloudKit limits the number of participants in a share to 100, and each participant must have an active iCloud account. You don’t create participants. Instead, use UICloudSharingController to manage a share’s participants and their permissions. Alternatively, create an instance of CKUserIdentity.LookupInfo for each user. Provide the user’s email address or phone number, and use CKFetchShareParticipantsOperation to fetch the corresponding participants. CloudKit queries iCloud for corresponding accounts as part of the operation. If it doesn’t find an account, the server updates the participant’s userIdentity to reflect that by setting the hasiCloudAccount property to false. CloudKit associates the participant with their iCloud account when they accept the share if they launch the process by tapping or clicking the share URL.\n\nParticipants with write permissions can modify or delete any record that you include in the share. However, only the owner can delete a shared hierarchy’s root record. If a participant attempts to delete the share, CloudKit removes the participant. The share remains active for all other participants. If the owner deletes a share that manages a record hierarchy, CloudKit sets the root record’s share property to nil. CloudKit deletes the share if the owner of the shared heirarchy deletes its root record.\n\nYou can customize the title and image the system displays when initiating a share or accepting an invitation to participate. You can also provide a custom UTI to indicate the content of the shared records. Use the keys that CKShare.SystemFieldKey defines, as the following example shows:\n\nlet share = CKShare(rootRecord: album)\n\n\n// Configure the share so the system displays the album's \n// name and cover when the user initiates sharing or accepts \n// an invitation to participate.\nshare[CKShare.SystemFieldKey.title] = album[\"name\"]\nif let cover = album[\"cover\"] as? UIImage, let data = cover.pngData() {\n    share[CKShare.SystemFieldKey.thumbnailImageData] = data\n}\n// Include a custom UTI that describes the share's content.\nshare[CKShare.SystemFieldKey.shareType] = \"com.example.app.album\"\n\n\nTopics\nCreating a Share\ninit(coder: NSCoder)\nCreates a share from a serialized instance.\ninit(rootRecord: CKRecord)\nCreates a new share for the specified record.\ninit(rootRecord: CKRecord, shareID: CKRecord.ID)\nCreates a new share for the specified record and record ID.\ninit(recordZoneID: CKRecordZone.ID)\nCreates a new share for the specified record zone.\nAccessing the Share’s Attributes\nvar owner: CKShare.Participant\nThe participant that represents the share’s owner.\nvar currentUserParticipant: CKShare.Participant?\nThe participant that represents the current user.\nvar participants: [CKShare.Participant]\nAn array that contains the share’s participants.\nvar url: URL?\nThe URL for inviting participants to the share.\nConfiguring the Share\nvar publicPermission: CKShare.ParticipantPermission\nThe permission for anyone with access to the share’s URL.\nfunc addParticipant(CKShare.Participant)\nAdds a participant to the share.\nfunc removeParticipant(CKShare.Participant)\nRemoves a participant from the share.\nclass CKShare.Participant\nAn object that describes a user’s participation in a share.\nAccessing Metadata\nclass CKShare.Metadata\nAn object that describes a shared record’s metadata.\nSubscripting\nenum CKShare.SystemFieldKey\nConstants that represent the system fields of a share.\nRelationships\nInherits From\nCKRecord\nConforms To\nNSCopying\nNSSecureCoding\nSendable\nSee Also\nCollaboration\nSharing CloudKit Data with Other iCloud Users\nCreate and share private CloudKit data with other users by implementing the sharing UI.\nSharing Core Data objects between iCloud users\nUse Core Data CloudKit to synchronize data between devices of an iCloud user and share data between different iCloud users.\nstruct CKShareTransferRepresentation\nA transfer representation the system uses to share an item.\nclass CKAllowedSharingOptions\nAn object that controls participant access and permission options.\nclass CKSystemSharingUIObserver\nAn object the system uses to monitor changes in sharing.\nclass UICloudSharingController\nA view controller that presents standard screens for adding and removing people from a CloudKit share record.\nproperty list key CKSharingSupported\nA Boolean value that indicates your app supports CloudKit Sharing."
  },
  {
    "title": "desiredKeys | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksubscription/notificationinfo/1514931-desiredkeys",
    "html": "Discussion\n\nThis property contains an array of strings, each of which corresponds to the name of a field in the record that triggers the notification. When the system receives a notification, it includes the keys and their corresponding values. You can request a maximum of three keys.\n\nFor the keys you specify, the allowable types are NSString, NSNumber, CLLocation, NSDate, and CKRecord.Reference. You can’t specify keys with values that contain other data types. CloudKit may truncate strings that are more than 100 characters when it adds them to the notification’s payload."
  },
  {
    "title": "CKSubscription | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksubscription",
    "html": "Overview\n\nA subscription acts like a persistent query on the server that can track the creation, deletion, and modification of records. When changes occur, they trigger the delivery of push notifications so that your app can respond appropriately.\n\nSubscriptions don’t become active until you save them to the server and the server has time to index them. To save a subscription, use an instance of CKModifySubscriptionsOperation or the save(_:completionHandler:) method of CKDatabase. To cancel a subscription, delete the corresponding subscription from the server.\n\nNote\n\nYou don’t need to enable push notifications for the app’s explicit App ID in your developer account at developer.apple.com to receive subscription notifications. Xcode automatically adds the APNs entitlement to your entitlement file when you enable CloudKit. To learn about enabling CloudKit, see Enabling CloudKit in Your App.\n\nMost of a subscription’s configuration happens at initialization time. You must, however, specify how to deliver push notifications to the user’s device. Use the notificationInfo property to configure the delivery options. You must save the subscription before the changes take effect.\n\nNote\n\nCreate subscriptions in the development environment first and then promote them to production. Attempting to create a subscription directly in the production environment results in an error.\n\nHandling the Resulting Push Notifications\n\nWhen CloudKit modifies a record and triggers a subscription, the server sends push notifications to all devices with that subscription except for the one that makes the original changes. For subscription-based push notifications, the server can add data to the notification payload that indicates the condition that triggers the notification. In the application(_:didReceiveRemoteNotification:fetchCompletionHandler:) method of your app delegate, create a CKNotification object from the provided userInfo dictionary. You can then query it for the information that’s relevant to the notification.\n\nIn addition to sending a record ID with a push notification, you can ask the server to send a limited amount of data from the record that triggers the notification. Use the desiredKeys property of the object you assign to notificationInfo to specify the keys to include.\n\nAPNs limits the size of a push notification’s payload and CloudKit may omit keys and other pieces of data to keep the payload’s size under that limit. If this happens, you can fetch the entire payload from the server using an instance of CKFetchNotificationChangesOperation. This operation provides instances of CKQueryNotification or CKRecordZoneNotification, which contain information about the push notifications that CloudKit delivers to your app.\n\nTopics\nSpecifying the Push Notification Data\nvar notificationInfo: CKSubscription.NotificationInfo?\nThe configuration for a subscription’s push notifications.\nclass CKSubscription.NotificationInfo\nAn object that describes the configuration of a subscription’s push notifications.\nAccessing the Subscription Metadata\nvar subscriptionID: CKSubscription.ID\nThe subscription’s unique identifier.\ntypealias CKSubscription.ID\nA type that represents a subscription’s identifier.\nvar subscriptionType: CKSubscription.SubscriptionType\nThe behavior that a subscription provides.\nenum CKSubscription.SubscriptionType\nConstants that identify a subscription’s behavior.\nRelationships\nInherits From\nNSObject\nConforms To\nNSCopying\nNSSecureCoding\nSendable\nSee Also\nBase Objects\nclass CKNotification\nThe abstract base class for CloudKit notifications.\nclass CKDatabaseOperation\nThe abstract base class for operations that act upon databases in CloudKit."
  },
  {
    "title": "CKAllowedSharingOptions | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckallowedsharingoptions",
    "html": "Overview\n\nRegister an instance of this class with an NSItemProvider or when preparing a CKShareTransferRepresentation.ExportedShare before your app invokes the share sheet. The share sheet uses the registered CKAllowedSharingOptions object to let the user choose between the allowed options when sharing.\n\nTopics\nCreating sharing options\ninit(allowedParticipantPermissionOptions: CKSharingParticipantPermissionOption, allowedParticipantAccessOptions: CKSharingParticipantAccessOption)\nCreates and initializes an allowed sharing options object.\nUsing the standard options\nclass var standard: CKAllowedSharingOptions\nAn object set to the most permissive sharing options.\nConfiguring the options\nvar allowedParticipantAccessOptions: CKSharingParticipantAccessOption\nThe permission option the system uses to control whether a user can share publicly or privately.\nvar allowedParticipantPermissionOptions: CKSharingParticipantPermissionOption\nThe permission option the system uses to control whether a user can grant read-only or write access.\nstruct CKSharingParticipantAccessOption\nAn object that controls participant access options.\nstruct CKSharingParticipantPermissionOption\nAn object that controls participant permission options.\nRelationships\nInherits From\nNSObject\nConforms To\nNSCopying\nNSSecureCoding\nSendable\nSee Also\nCollaboration\nSharing CloudKit Data with Other iCloud Users\nCreate and share private CloudKit data with other users by implementing the sharing UI.\nSharing Core Data objects between iCloud users\nUse Core Data CloudKit to synchronize data between devices of an iCloud user and share data between different iCloud users.\nclass CKShare\nA specialized record type that manages a collection of shared records.\nstruct CKShareTransferRepresentation\nA transfer representation the system uses to share an item.\nclass CKSystemSharingUIObserver\nAn object the system uses to monitor changes in sharing.\nclass UICloudSharingController\nA view controller that presents standard screens for adding and removing people from a CloudKit share record.\nproperty list key CKSharingSupported\nA Boolean value that indicates your app supports CloudKit Sharing."
  },
  {
    "title": "CKQuerySubscription | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckquerysubscription",
    "html": "Overview\n\nSubscriptions track the creation, modification, and deletion of records in a database, and are fundamental in keeping data on the user’s device up to date. A subscription applies only to the user that creates it. When a subscription registers a change, such as CloudKit saving a new record, it sends push notifications to the user’s devices to inform your app about the change. You can then fetch the changes and cache them on-device. When appropriate, the server excludes the device where the change originates.\n\nNote\n\nYou don’t need to explicitly enable push notifications for your App ID to receive subscription notifications. Xcode automatically adds the entitlement when you enable the CloudKit capability. For more information, see Enabling CloudKit in Your App. To use silent push notifications, add the Background Modes capability in your Xcode project and then select the “Background fetch” and “Remote notifications” options.\n\nQuery subscriptions execute whenever a change occurs in a database that matches the predicate and options you specify. You scope a query subscription to an individual record type that you provide during initialization. You can set the subscription’s zoneID property to further specialize the subscription to a specific record zone in the database. This limits the scope of the subscription to only track changes in that record zone and reduces the number of notifications it generates. For more information about defining CloudKit-compatible predicates, see CKQuery.\n\nNote\n\nOnly public and private databases support query subscriptions. If you attempt to save a database subscription in the shared database, CloudKit returns an error.\n\nCreate any subscriptions on your app’s first launch. After you initialize a subscription, save it to the server using CKModifySubscriptionsOperation. When the operation completes, record that state on-device (in UserDefaults, for example). You can then check that state on subsequent launches to prevent unnecessary trips to the server.\n\nTo configure the notification the subscription generates, set the subscription’s notificationInfo property. Because the system coalesces notifications, don’t rely on them for specific changes. CloudKit can omit data to keep the payload size under the APNs size limit. Consider notifications an indication of remote changes and use CKQueryOperation to fetch the changed records. Create the operation with an instance of CKQuery that you configure with the same record type and predicate as the subscription. If you limit the subscription to a specific record zone, set the operation’s zoneID property to that record zone’s ID. Because CKQueryOperation doesn’t employ server change tokens, dispose of any records you cache on-device and use the query’s results instead.\n\nThe example below shows how to create a query subscription in the user’s private database, configure the notifications it generates — in this case, silent push notifications — and then save that subscription to the server:\n\n// Only proceed if you need to create the subscription.\nguard !UserDefaults.standard.bool(forKey: \"didCreateQuerySubscription\")\n    else { return }\n                \n// Define a predicate that matches records with a tags field\n// that contains the word 'Swift'.\nlet predicate = NSPredicate(format: \"tags CONTAINS %@\", \"Swift\")\n        \n// Create a subscription and scope it to the 'FeedItem' record type.\n// Provide a unique identifier for the subscription and declare the\n// circumstances for invoking it.\nlet subscription = CKQuerySubscription(recordType: \"FeedItem\",\n                                       predicate: predicate,\n                                       subscriptionID: \"tagged-feed-changes\",\n                                       options: .firesOnRecordCreation)\n\n\n// Further specialize the subscription to only evaluate\n// records in a specific record zone.\nsubscription.zoneID = recordZone.zoneID\n        \n// Configure the notification so that the system delivers it silently\n// and, therefore, doesn't require permission from the user.\nlet notificationInfo = CKSubscription.NotificationInfo()\nnotificationInfo.shouldSendContentAvailable = true\nsubscription.notificationInfo = notificationInfo\n        \n// Save the subscription to the server.\nlet operation = CKModifySubscriptionsOperation(\n    subscriptionsToSave: [subscription], subscriptionIDsToDelete: nil)\n\n\noperation.modifySubscriptionsCompletionBlock = { subscriptions, deleted, error in\n    if let error = error {\n        // Handle the error.\n    } else {\n        // Record that the system successfully creates the subscription\n        // to prevent unnecessary trips to the server in later launches.\n        UserDefaults.standard.setValue(true, forKey: \"didCreateQuerySubscription\")\n    }\n}\n        \n// Set an appropriate QoS and add the operation to the private\n// database's operation queue to execute it.\noperation.qualityOfService = .utility\nCKContainer.default().privateCloudDatabase.add(operation)\n\n\nTopics\nCreating a Subscription\ninit(recordType: CKRecord.RecordType, predicate: NSPredicate, subscriptionID: CKSubscription.ID, options: CKQuerySubscription.Options)\nCreates a named query-based subscription that queries records of a specific type.\ninit(coder: NSCoder)\nCreates a query-based subscription from a serialized instance.\nAccessing the Subscription Search Parameters\nvar predicate: NSPredicate\nThe matching criteria to apply to records.\nvar querySubscriptionOptions: CKQuerySubscription.Options\nOptions that define the behavior of the subscription.\nstruct CKQuerySubscription.Options\nConfiguration options for a query subscription.\nAccessing the Subscription Metadata\nvar recordType: CKRecord.RecordType?\nThe type of record that the subscription queries.\nvar zoneID: CKRecordZone.ID?\nThe ID of the record zone that the subscription queries.\nInitializers\ninit(recordType: CKRecord.RecordType, predicate: NSPredicate, options: CKQuerySubscription.Options)\nDeprecated\nRelationships\nInherits From\nCKSubscription\nConforms To\nNSCopying\nNSSecureCoding\nSendable\nSee Also\nPredicate-Driven Changes\nclass CKQueryNotification\nA notification that triggers when a record that matches the subscription’s predicate changes."
  },
  {
    "title": "CKFetchSubscriptionsOperation | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckfetchsubscriptionsoperation",
    "html": "Overview\n\nA fetch subscriptions operation retrieves subscriptions (with IDs you already know) from iCloud and can fetch all subscriptions for the current user.\n\nYou might fetch subscriptions so you can examine or modify their parameters — for example, to adjust the delivery options for push notifications that the subscription generates.\n\nIf you assign a handler to the completionBlock property, the operation calls it after it executes and passes it the results. Use the handler to perform any housekeeping tasks for the operation. The handler you specify should manage any failures, whether due to an error or an explicit cancellation.\n\nTopics\nCreating a Fetch Subscriptions Operation\ninit(subscriptionIDs: [CKSubscription.ID])\nCreates an operation for fetching the specified subscriptions.\ninit()\nCreates an empty fetch subscriptions operation.\nGetting All Subscriptions\nclass func fetchAllSubscriptionsOperation() -> Self\nReturns an operation that fetches all of the user’s subscriptions.\nConfiguring the Fetch Subscriptions Operation\nvar subscriptionIDs: [CKSubscription.ID]?\nThe IDs of the subscriptions to fetch.\nProcessing the Fetch Subscription Results\nvar fetchSubscriptionCompletionBlock: (([CKSubscription.ID : CKSubscription]?, (Error)?) -> Void)?\nThe block to execute with the fetch results.\nDeprecated\nInstance Properties\nvar fetchSubscriptionsResultBlock: ((Result<Void, Error>) -> Void)?\nvar perSubscriptionResultBlock: ((CKSubscription.ID, Result<CKSubscription, Error>) -> Void)?\nRelationships\nInherits From\nCKDatabaseOperation\nSee Also\nSubscription Management\nclass CKModifySubscriptionsOperation\nAn operation for modifying one or more subscriptions."
  },
  {
    "title": "CKSystemSharingUIObserver | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksystemsharinguiobserver",
    "html": "Overview\n\nInitialize a CKSystemSharingUIObserver instance with your CKContainer when preparing to share an item using the share sheet. Use your implementation to update the local state of a shared item when your app receives a CKShare, or to delete a locally cached share when the system notifies your app about a share deletion.\n\nThe system only propagates changes on the local device using CKSystemSharingUIObserver. The system doesn’t notify your app about any remote changes on the server. For more information about how to keep your local cache in sync with remote changes, see Remote Records.\n\nTopics\nCreating a sharing observer\ninit(container: CKContainer)\nCreates and initializes an observer using the provided container.\nConfiguring a sharing observer\nvar systemSharingUIDidSaveShareBlock: (CKRecord.ID, Result<CKShare, Error>) -> Void)?\nA callback block the system invokes after the success or failure of a system sharing UI save.\nvar systemSharingUIDidStopSharingBlock: (CKRecord.ID, Result<Void, Error>) -> Void)?\nA callback block the system invokes after the success or failure of a system sharing UI delete.\nRelationships\nInherits From\nNSObject\nConforms To\nSendable\nSee Also\nCollaboration\nSharing CloudKit Data with Other iCloud Users\nCreate and share private CloudKit data with other users by implementing the sharing UI.\nSharing Core Data objects between iCloud users\nUse Core Data CloudKit to synchronize data between devices of an iCloud user and share data between different iCloud users.\nclass CKShare\nA specialized record type that manages a collection of shared records.\nstruct CKShareTransferRepresentation\nA transfer representation the system uses to share an item.\nclass CKAllowedSharingOptions\nAn object that controls participant access and permission options.\nclass UICloudSharingController\nA view controller that presents standard screens for adding and removing people from a CloudKit share record.\nproperty list key CKSharingSupported\nA Boolean value that indicates your app supports CloudKit Sharing."
  },
  {
    "title": "CKError.Code.userDeletedZone | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckerror/code/userdeletedzone",
    "html": "See Also\nError Codes\ncase accountTemporarilyUnavailable\nAn error that occurs when the user’s iCloud account is temporarily unavailable.\ncase alreadyShared\nAn error that occurs when CloudKit attempts to share a record with an existing share.\ncase assetFileModified\nAn error that occurs when the system modifies an asset while saving it.\ncase assetFileNotFound\nAn error that occurs when the system can’t find the specified asset.\ncase assetNotAvailable\nAn error that occurs when the system can’t access the specified asset.\ncase badContainer\nAn error that occurs when you use an unknown or unauthorized container.\ncase badDatabase\nAn error that occurs when the operation can’t complete for the specified database.\ncase batchRequestFailed\nAn error that occurs when the system rejects the entire batch of changes.\ncase changeTokenExpired\nAn error that occurs when the change token expires.\ncase constraintViolation\nAn error that occurs when the server rejects the request because of a unique constraint violation.\ncase incompatibleVersion\nAn error that occurs when the current app version is older than the oldest allowed version.\ncase internalError\nA nonrecoverable error that CloudKit encounters.\ncase invalidArguments\nAn error that occurs when the request contains invalid information.\ncase limitExceeded\nAn error that occurs when a request’s size exceeds the limit.\ncase managedAccountRestricted\nAn error that occurs when CloudKit rejects a request due to a managed-account restriction.\ncase missingEntitlement\nAn error that occurs when the app is missing a required entitlement.\ncase networkFailure\nAn error that occurs when a network is available, but CloudKit is inaccessible.\ncase networkUnavailable\nAn error that occurs when the network is unavailable.\ncase notAuthenticated\nAn error that occurs when the user is unauthenticated.\ncase operationCancelled\nAn error that occurs when an operation cancels.\ncase partialFailure\nAn error that occurs when an operation completes with partial failures.\ncase participantMayNeedVerification\nAn error that occurs when the user isn’t a participant of the share.\ncase permissionFailure\nAn error that occurs when the user doesn’t have permission to save or fetch data.\ncase quotaExceeded\nAn error that occurs when saving a record exceeds the user’s storage quota.\ncase referenceViolation\nAn error that occurs when CloudKit can’t find the target of a reference.\ncase requestRateLimited\nAn error that occurs when CloudKit rate-limits requests.\ncase serverRecordChanged\nAn error that occurs when CloudKit rejects a record because the server’s version is different.\ncase serverRejectedRequest\nAn error that occurs when CloudKit rejects the request.\ncase serverResponseLost\nAn error that occurs when CloudKit is unable to maintain the network connection and provide a response.\ncase serviceUnavailable\nAn error that occurs when CloudKit is unavailable.\ncase tooManyParticipants\nAn error that occurs when a share has too many participants.\ncase unknownItem\nAn error that occurs when the specified record doesn’t exist.\ncase zoneBusy\nAn error that occurs when the server is too busy to handle the record zone operation.\ncase zoneNotFound\nAn error that occurs when the specified record zone doesn’t exist.\ncase resultsTruncated\nAn error that occurs when CloudKit truncates a query’s results.\nDeprecated"
  },
  {
    "title": "encryptedValues | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckrecord/3746821-encryptedvalues",
    "html": "Discussion\n\nUse the object this property returns to read and write encrypted key-value pairs that you store on the record. You can encrypt values of any data type that CloudKit supports, except CKAsset, which is encrypted by default, and CKRecord.Reference, which isn’t encrypted so it remains available for server-side use. Only encrypt new fields. CloudKit doesn’t allow encryption on fields that already exist in your app’s schema, or on records that you store in the public database.\n\nNote\n\nCloudKit doesn’t support indexes on encrypted fields. Don’t include encrypted fields in your predicate or sort descriptors when fetching records with CKQuery and CKQueryOperation.\n\nCloudKit encrypts the fields’ values on-device before saving them to iCloud, and decrypts the values only after fetching them from the server. When you enable Advanced Data Protection, the encryption keys are available exclusively to the record’s owner and, if the user shares the record, that share’s participants.\n\nThe following example shows how to use encryptedValues to encrypt and decrypt a string value:\n\nlet record = CKRecord(recordType: \"Property\")\n\n\n// Encrypt the name of the property's owner.\nrecord.encryptedValues[\"ownerName\"] = \"Maria Ruiz\"\n\n\n// Decrypt the name of the property's owner, using the\n// appropriate data type, and assign it to a local variable.\nvar clientName = record.encryptedValues[\"ownerName\"] as? NSString\n"
  },
  {
    "title": "recordZoneChanges(inZoneWith:since:desiredKeys:resultsLimit:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckdatabase/3856522-recordzonechanges",
    "html": "Parameters\nzoneID\n\nThe identifier of the record zone with changes.\n\nchangeToken\n\nThe change token from the previous execution of this method. If this is your app’s first fetch, or you want to refetch every change in the record zone’s history, specify nil.\n\ndesiredKeys\n\nThe fields to include on each fetched record. To include all fields, specify nil; to fetch only system fields, specify an empty array.\n\nresultsLimit\n\nThe maximum number of changes to return. The server may use a limit lower than this value.\n\nReturn Value\n\nA tuple with the following named elements:\n\nmodificationResultsByID\n\nA dictionary of record modifications that occur after the time that changeToken denotes. The dictionary uses the identifiers of modified records as its keys. The value of each key is a Result that contains either the corresponding modification, or an error that describes why CloudKit can’t provide that information.\n\ndeletions\n\nAn array of record deletions that occur after the time that changeToken denotes. Each deletion contains details about a deleted record.\n\nchangeToken\n\nThe change token that corresponds to the fetch results’ most recent change.\n\nmoreComing\n\nA Boolean value that indicates whether the server has additional changes for you to fetch.\n\nDiscussion\n\nThis method fetches record changes in the specfied record zone, such as those that occur during record creation, modification, and deletion. It throws an error if the request fails, such as when the network is unavailable or the device doesn’t have an active iCloud account; otherwise, the returned tuple includes any individual record errors.\n\nAlong with the fetched changes, CloudKit supplies a change token, which is an opaque token that denotes a specific point in the record zone’s history. Store this token and provide it the next time you execute this method. Change tokens conform to NSSecureCoding and are safe to cache on-disk. Don’t infer any behavior or order from a token’s contents.\n\nFor information on a more configurable way to fetch record zone changes, see CKFetchRecordZoneChangesOperation.\n\nSee Also\nFetching Changes\nfunc databaseChanges(since: CKServerChangeToken?, resultsLimit: Int?) -> (modifications: [CKDatabase.DatabaseChange.Modification], deletions: [CKDatabase.DatabaseChange.Deletion], changeToken: CKServerChangeToken, moreComing: Bool)\nFetches all modified record zones and returns them to an awaiting caller.\nfunc fetchDatabaseChanges(since: CKServerChangeToken?, resultsLimit: Int?, completionHandler: (Result<(modifications: [CKDatabase.DatabaseChange.Modification], deletions: [CKDatabase.DatabaseChange.Deletion], changeToken: CKServerChangeToken, moreComing: Bool), Error>) -> Void)\nFetches all modified record zones and delivers them to a completion handler.\nenum CKDatabase.DatabaseChange\nObjects that indicate the type of database change.\nfunc fetchRecordZoneChanges(inZoneWith: CKRecordZone.ID, since: CKServerChangeToken?, desiredKeys: [CKRecord.FieldKey]?, resultsLimit: Int?, completionHandler: (Result<(modificationResultsByID: [CKRecord.ID : Result<CKDatabase.RecordZoneChange.Modification, Error>], deletions: [CKDatabase.RecordZoneChange.Deletion], changeToken: CKServerChangeToken, moreComing: Bool), Error>) -> Void)\nFetches all modified records from a specific record zone and delivers them to a completion handler.\nenum CKDatabase.RecordZoneChange\nObjects that indicate the type of record zone change."
  },
  {
    "title": "fetchRecordZoneChanges(inZoneWith:since:desiredKeys:resultsLimit:completionHandler:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckdatabase/3856521-fetchrecordzonechanges",
    "html": "Parameters\nzoneID\n\nThe identifier of the record zone with changes.\n\nchangeToken\n\nThe change token from the previous execution of this method. If this is your app’s first fetch, or you want to refetch every change in the record zone’s history, specify nil.\n\ndesiredKeys\n\nThe fields to include on each fetched record. To include all fields, specify nil; to fetch only system fields, specify an empty array.\n\nresultsLimit\n\nThe maximum number of changes to return. The server may use a limit lower than this value.\n\ncompletionHandler\n\nThe closure to execute with the fetch results.\n\nDiscussion\n\nThe completion handler takes a single Result parameter that contains either a tuple, or an error if the request fails. For example, when the network is unavailable or the device doesn’t have an active iCloud account.\n\nWhen present, the tuple contains the following named elements:\n\nmodificationResultsByID\n\nA dictionary of record modifications that occur after the time that changeToken denotes. The dictionary uses the identifiers of modified records as its keys. The value of each key is a Result that contains either the corresponding modification, or an error that describes why CloudKit can’t provide that information.\n\ndeletions\n\nAn array of record deletions that occur after the time that changeToken denotes. Each deletion contains details about a deleted record.\n\nchangeToken\n\nThe change token that corresponds to the fetch results’ most recent change.\n\nmoreComing\n\nA Boolean value that indicates whether the server has additional changes for you to fetch.\n\nThis method fetches record changes in the specfied record zone, such as those that occur during record creation, modification, and deletion.\n\nAlong with the fetched changes, CloudKit supplies a change token, which is an opaque token that denotes a specific point in the record zone’s history. Store this token and provide it the next time you execute this method. Change tokens conform to NSSecureCoding and are safe to cache on-disk. Don’t infer any behavior or order from a token’s contents.\n\nFor information on a more configurable way to fetch record zone changes, see CKFetchRecordZoneChangesOperation.\n\nSee Also\nFetching Changes\nfunc databaseChanges(since: CKServerChangeToken?, resultsLimit: Int?) -> (modifications: [CKDatabase.DatabaseChange.Modification], deletions: [CKDatabase.DatabaseChange.Deletion], changeToken: CKServerChangeToken, moreComing: Bool)\nFetches all modified record zones and returns them to an awaiting caller.\nfunc fetchDatabaseChanges(since: CKServerChangeToken?, resultsLimit: Int?, completionHandler: (Result<(modifications: [CKDatabase.DatabaseChange.Modification], deletions: [CKDatabase.DatabaseChange.Deletion], changeToken: CKServerChangeToken, moreComing: Bool), Error>) -> Void)\nFetches all modified record zones and delivers them to a completion handler.\nenum CKDatabase.DatabaseChange\nObjects that indicate the type of database change.\nfunc recordZoneChanges(inZoneWith: CKRecordZone.ID, since: CKServerChangeToken?, desiredKeys: [CKRecord.FieldKey]?, resultsLimit: Int?) -> (modificationResultsByID: [CKRecord.ID : Result<CKDatabase.RecordZoneChange.Modification, Error>], deletions: [CKDatabase.RecordZoneChange.Deletion], changeToken: CKServerChangeToken, moreComing: Bool)\nFetches all modified records from a specific record zone and returns them to an awaiting caller.\nenum CKDatabase.RecordZoneChange\nObjects that indicate the type of record zone change."
  },
  {
    "title": "fetchDatabaseChanges(since:resultsLimit:completionHandler:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckdatabase/3856520-fetchdatabasechanges",
    "html": "Parameters\nchangeToken\n\nThe change token from the previous execution of this method. If this is your app’s first fetch, or you want to refetch every change in the database’s history, specify nil.\n\nresultsLimit\n\nThe maximum number of changes to return. The server may use a limit lower than this value.\n\ncompletionHandler\n\nThe closure to execute with the fetch results.\n\nDiscussion\n\nThe completion handler takes a single Result parameter that contains either a tuple, or an error if the request fails. For example, when the network is unavailable or the device doesn’t have an active iCloud account.\n\nWhen present, the tuple contains the following named elements:\n\nmodifications\n\nAn array of database modifications that occur after the time that changeToken denotes. Each modification contains details about a modified record zone.\n\ndeletions\n\nAn array of database deletions that occur after the time that changeToken denotes. Each deletion contains details about a deleted or purged record zone.\n\nchangeToken\n\nThe change token that corresponds to the fetch results’ most recent change.\n\nmoreComing\n\nA Boolean value that indicates whether the server has additional changes for you to fetch.\n\nThis method fetches record zone changes in a database, which includes new record zones, changed zones — including deleted or purged zones — and zones that contain record changes.\n\nAlong with the fetched changes, CloudKit supplies a change token, which is an opaque token that denotes a specific point in the database’s history. Store this token and provide it the next time you execute this method. Change tokens conform to NSSecureCoding and are safe to cache on-disk. Don’t infer any behavior or order from a token’s contents.\n\nFor information on a more configurable way to fetch database changes, see CKFetchDatabaseChangesOperation.\n\nSee Also\nFetching Changes\nfunc databaseChanges(since: CKServerChangeToken?, resultsLimit: Int?) -> (modifications: [CKDatabase.DatabaseChange.Modification], deletions: [CKDatabase.DatabaseChange.Deletion], changeToken: CKServerChangeToken, moreComing: Bool)\nFetches all modified record zones and returns them to an awaiting caller.\nenum CKDatabase.DatabaseChange\nObjects that indicate the type of database change.\nfunc recordZoneChanges(inZoneWith: CKRecordZone.ID, since: CKServerChangeToken?, desiredKeys: [CKRecord.FieldKey]?, resultsLimit: Int?) -> (modificationResultsByID: [CKRecord.ID : Result<CKDatabase.RecordZoneChange.Modification, Error>], deletions: [CKDatabase.RecordZoneChange.Deletion], changeToken: CKServerChangeToken, moreComing: Bool)\nFetches all modified records from a specific record zone and returns them to an awaiting caller.\nfunc fetchRecordZoneChanges(inZoneWith: CKRecordZone.ID, since: CKServerChangeToken?, desiredKeys: [CKRecord.FieldKey]?, resultsLimit: Int?, completionHandler: (Result<(modificationResultsByID: [CKRecord.ID : Result<CKDatabase.RecordZoneChange.Modification, Error>], deletions: [CKDatabase.RecordZoneChange.Deletion], changeToken: CKServerChangeToken, moreComing: Bool), Error>) -> Void)\nFetches all modified records from a specific record zone and delivers them to a completion handler.\nenum CKDatabase.RecordZoneChange\nObjects that indicate the type of record zone change."
  },
  {
    "title": "CKDatabase.DatabaseChange | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckdatabase/databasechange",
    "html": "Topics\nModifications\nstruct CKDatabase.DatabaseChange.Modification\nA database change that represents the modification of a record zone.\nDeletions\nstruct CKDatabase.DatabaseChange.Deletion\nA database change that represents the deletion of a record zone.\nSee Also\nFetching Changes\nfunc databaseChanges(since: CKServerChangeToken?, resultsLimit: Int?) -> (modifications: [CKDatabase.DatabaseChange.Modification], deletions: [CKDatabase.DatabaseChange.Deletion], changeToken: CKServerChangeToken, moreComing: Bool)\nFetches all modified record zones and returns them to an awaiting caller.\nfunc fetchDatabaseChanges(since: CKServerChangeToken?, resultsLimit: Int?, completionHandler: (Result<(modifications: [CKDatabase.DatabaseChange.Modification], deletions: [CKDatabase.DatabaseChange.Deletion], changeToken: CKServerChangeToken, moreComing: Bool), Error>) -> Void)\nFetches all modified record zones and delivers them to a completion handler.\nfunc recordZoneChanges(inZoneWith: CKRecordZone.ID, since: CKServerChangeToken?, desiredKeys: [CKRecord.FieldKey]?, resultsLimit: Int?) -> (modificationResultsByID: [CKRecord.ID : Result<CKDatabase.RecordZoneChange.Modification, Error>], deletions: [CKDatabase.RecordZoneChange.Deletion], changeToken: CKServerChangeToken, moreComing: Bool)\nFetches all modified records from a specific record zone and returns them to an awaiting caller.\nfunc fetchRecordZoneChanges(inZoneWith: CKRecordZone.ID, since: CKServerChangeToken?, desiredKeys: [CKRecord.FieldKey]?, resultsLimit: Int?, completionHandler: (Result<(modificationResultsByID: [CKRecord.ID : Result<CKDatabase.RecordZoneChange.Modification, Error>], deletions: [CKDatabase.RecordZoneChange.Deletion], changeToken: CKServerChangeToken, moreComing: Bool), Error>) -> Void)\nFetches all modified records from a specific record zone and delivers them to a completion handler.\nenum CKDatabase.RecordZoneChange\nObjects that indicate the type of record zone change."
  },
  {
    "title": "CKDatabase.RecordZoneChange | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckdatabase/recordzonechange",
    "html": "Topics\nModifications\nstruct CKDatabase.RecordZoneChange.Modification\nA record zone change that represents the modification of a record.\nDeletions\nstruct CKDatabase.RecordZoneChange.Deletion\nA record zone change that represents the deletion of a record.\nSee Also\nFetching Changes\nfunc databaseChanges(since: CKServerChangeToken?, resultsLimit: Int?) -> (modifications: [CKDatabase.DatabaseChange.Modification], deletions: [CKDatabase.DatabaseChange.Deletion], changeToken: CKServerChangeToken, moreComing: Bool)\nFetches all modified record zones and returns them to an awaiting caller.\nfunc fetchDatabaseChanges(since: CKServerChangeToken?, resultsLimit: Int?, completionHandler: (Result<(modifications: [CKDatabase.DatabaseChange.Modification], deletions: [CKDatabase.DatabaseChange.Deletion], changeToken: CKServerChangeToken, moreComing: Bool), Error>) -> Void)\nFetches all modified record zones and delivers them to a completion handler.\nenum CKDatabase.DatabaseChange\nObjects that indicate the type of database change.\nfunc recordZoneChanges(inZoneWith: CKRecordZone.ID, since: CKServerChangeToken?, desiredKeys: [CKRecord.FieldKey]?, resultsLimit: Int?) -> (modificationResultsByID: [CKRecord.ID : Result<CKDatabase.RecordZoneChange.Modification, Error>], deletions: [CKDatabase.RecordZoneChange.Deletion], changeToken: CKServerChangeToken, moreComing: Bool)\nFetches all modified records from a specific record zone and returns them to an awaiting caller.\nfunc fetchRecordZoneChanges(inZoneWith: CKRecordZone.ID, since: CKServerChangeToken?, desiredKeys: [CKRecord.FieldKey]?, resultsLimit: Int?, completionHandler: (Result<(modificationResultsByID: [CKRecord.ID : Result<CKDatabase.RecordZoneChange.Modification, Error>], deletions: [CKDatabase.RecordZoneChange.Deletion], changeToken: CKServerChangeToken, moreComing: Bool), Error>) -> Void)\nFetches all modified records from a specific record zone and delivers them to a completion handler."
  },
  {
    "title": "add(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckdatabase/1449116-add",
    "html": "Parameters\noperation\n\nThe operation to execute.\n\nDiscussion\n\nConfigure the operation fully before you call this method. Prior to the operation executing, CloudKit sets its database property to the current database. The operation executes at the priority and quality of service (QoS) that you specify using the queuePriority and qualityOfService properties."
  },
  {
    "title": "delete(withRecordZoneID:completionHandler:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckdatabase/1449118-delete",
    "html": "Parameters\nzoneID\n\nThe identifier of the record zone to delete.\n\ncompletionHandler\n\nThe closure to execute after CloudKit deletes the record zone.\n\nDiscussion\n\nConcurrency Note\n\nYou can call this method from synchronous code using a completion handler, as shown on this page, or you can call it as an asynchronous method that has the following declaration:\n\nfunc deleteRecordZone(withID zoneID: CKRecordZone.ID) async throws -> CKRecordZone.ID\n\n\nFor information about concurrency and asynchronous code in Swift, see Calling Objective-C APIs Asynchronously.\n\nWarning\n\nDeleting a record zone is a permanent action that deletes every record in that zone. You can’t restore a deleted record zone.\n\nThe completion handler takes the following parameters:\n\nThe identifier of the deleted record zone, or nil if there’s an error.\n\nAn error if a problem occurs, or nil if CloudKit successfully deletes the record zone.\n\nFor information on a more convenient way to delete record zones, see modifyRecordZones(saving:deleting:).\n\nSee Also\nModifying Record Zones\nfunc modifyRecordZones(saving: [CKRecordZone], deleting: [CKRecordZone.ID]) -> (saveResults: [CKRecordZone.ID : Result<CKRecordZone, Error>], deleteResults: [CKRecordZone.ID : Result<Void, Error>])\nModifies the specified record zones and returns the results to an awaiting caller.\nfunc modifyRecordZones(saving: [CKRecordZone], deleting: [CKRecordZone.ID], completionHandler: (Result<(saveResults: [CKRecordZone.ID : Result<CKRecordZone, Error>], deleteResults: [CKRecordZone.ID : Result<Void, Error>]), Error>) -> Void)\nModifies the specified record zones and delivers the results to a completion handler.\nfunc save(CKRecordZone, completionHandler: (CKRecordZone?, Error?) -> Void)\nSaves a specific record zone."
  },
  {
    "title": "recordZones(for:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckdatabase/3794328-recordzones",
    "html": "Parameters\nids\n\nThe identifiers of the record zones to fetch.\n\nReturn Value\n\nA dictionary that contains the fetched record zones. The dictionary uses the specified record zone identifiers as its keys. The value of each key is a Result that contains either the corresponding fetched record zone, or an error that describes why CloudKit can’t provide that record zone.\n\nDiscussion\n\nThis method throws an error if the request fails, such as when the network is unavailable or the device doesn’t have an active iCloud account; otherwise, the returned dictionary includes any individual record zone errors.\n\nFor information on a more configurable way to fetch specific record zones, see CKFetchRecordZonesOperation.\n\nSee Also\nFetching Record Zones\nfunc fetch(withRecordZoneIDs: [CKRecordZone.ID], completionHandler: (Result<[CKRecordZone.ID : Result<CKRecordZone, Error>], Error>) -> Void)\nFetches the specified record zones and delivers them to a completion handler.\nfunc fetchAllRecordZones(completionHandler: ([CKRecordZone]?, Error?) -> Void)\nFetches all record zones from the current database.\nfunc fetch(withRecordZoneID: CKRecordZone.ID, completionHandler: (CKRecordZone?, Error?) -> Void)\nFetches a specific record zone."
  },
  {
    "title": "CKFetchDatabaseChangesOperation | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckfetchdatabasechangesoperation",
    "html": "Overview\n\nUse this operation to fetch all record zone changes in a database. This includes new record zones, changed zones — including deleted or purged zones — and zones that contain record changes. When you create the operation, you provide a server change token, which is an opaque token that represents a specific point in the database’s history. CloudKit returns only the changes that occur after that point. For your app’s first fetch, or to refetch every change in the database’s history, use nil instead.\n\nNote\n\nOnly private and shared databases support this operation. If you attempt to execute this operation in the public database, CloudKit returns an error.\n\nThe operation yields new change tokens during its execution, and issues a final change token when it completes without error. The change tokens conform to NSSecureCoding and are safe to cache on-disk. This operation’s tokens aren’t compatible with CKFetchRecordZoneChangesOperation so you should segregate them in your cache. Don’t infer any behavior or order from the tokens’ contents.\n\nWhen your app launches for the first time, use this operation to fetch all the database’s changes. Cache the results on-device and use CKDatabaseSubscription to subscribe to future changes. Fetch those changes on receipt of the push notifications the subscription generates. It’s not necessary to perform a fetch each time your app launches, or to schedule fetches at regular intervals.\n\nThe operation calls recordZoneWithIDChangedBlock for each zone that contains record changes. It also calls it for new and modified record zones. Store the IDs that CloudKit provides to this callback. Use those IDs with CKFetchRecordZoneChangesOperation to fetch the corresponding changes. There are similar callbacks for deleted and purged record zones.\n\nTo run the operation, add it to the corresponding database’s operation queue. The operation executes its callbacks on a private serial queue.\n\nThe following example shows how to create the operation, configure its callbacks, and execute it. For brevity, it omits the delete and purge callbacks.\n\n// Create a fetch operation using the server change \n// token from the previous fetch.\nlet operation = CKFetchDatabaseChangesOperation(\n    previousServerChangeToken: token)\n        \n// Collect the IDs of the modified record zones.\noperation.recordZoneWithIDChangedBlock = { recordZoneID in\n    recordZoneIDs.append(recordZoneID)\n}\n        \n// Process any change tokens that CloudKit provides\n// as the operation runs.\noperation.changeTokenUpdatedBlock = { token in\n    tokenHandler(token)\n}\n        \n// Store the final change token and pass the IDs of the\n// modified record zones for further processing.\noperation.fetchDatabaseChangesCompletionBlock = { token, more, error in\n    if let error = error {\n        // Handle the error.\n    } else {\n        tokenHandler(token)\n        recordZonesHandler(recordZoneIDs)\n    }\n}\n        \n// Set an appropriate QoS and add the operation to the shared\n// database's operation queue to execute it.\noperation.qualityOfService = .utility\nCKContainer.default().sharedCloudDatabase.add(operation)\n\n\nTopics\nCreating an Operation\ninit(previousServerChangeToken: CKServerChangeToken?)\nCreates an operation for fetching database changes.\ninit()\nCreates an empty fetch database changes operation.\nConfiguring the Operation\nvar fetchAllChanges: Bool\nA Boolean value that indicates whether to send repeated requests to the server.\nvar previousServerChangeToken: CKServerChangeToken?\nThe server change token.\nvar resultsLimit: Int\nThe maximum number of results that the operation fetches.\nProcessing the Operation’s Results\nvar recordZoneWithIDChangedBlock: ((CKRecordZone.ID) -> Void)?\nThe closure to execute with a single record zone change.\nvar recordZoneWithIDWasDeletedBlock: ((CKRecordZone.ID) -> Void)?\nThe closure to execute when a record zone no longer exists.\nvar recordZoneWithIDWasDeletedDueToUserEncryptedDataResetBlock: ((CKRecordZone.ID) -> Void)?\nThe closure to execute when a user-invoked account reset deletes a record zone.\nvar recordZoneWithIDWasPurgedBlock: ((CKRecordZone.ID) -> Void)?\nThe closure to execute when CloudKit purges a record zone.\nvar changeTokenUpdatedBlock: ((CKServerChangeToken) -> Void)?\nThe closure to execute when the change token updates.\nvar fetchDatabaseChangesCompletionBlock: ((CKServerChangeToken?, Bool, Error?) -> Void)?\nThe closure to execute when the operation finishes.\nInstance Properties\nvar fetchDatabaseChangesResultBlock: ((Result<(serverChangeToken: CKServerChangeToken, moreComing: Bool), Error>) -> Void)?\nRelationships\nInherits From\nCKDatabaseOperation\nSee Also\nDatabase Changes\nclass CKDatabaseSubscription\nA subscription that generates push notifications when CloudKit modifies records in a database.\nclass CKDatabaseNotification\nA notification that triggers when the contents of a database change."
  },
  {
    "title": "desiredKeys | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckqueryoperation/1515268-desiredkeys",
    "html": "Discussion\n\nUse this property to limit the amount of data that CloudKit returns for each record. When CloudKit returns a record, it only includes fields with names that match one of the keys in this property. The property’s default value is nil, which instructs CloudKit to return all of a record’s keys.\n\nIf you intend to specify a value other than nil, do so before you execute the operation or add the operation to a queue.\n\nSee Also\nConfiguring the Query Operation\nquery\nThe query for the search.\ncursor\nThe cursor for continuing the search.\nCKQueryCursor\nAn object that marks the stopping point for a query and the starting point for retrieving the remaining results.\nzoneID\nThe ID of the record zone that contains the records to search.\nresultsLimit\nThe maximum number of records to return at one time.\nCKQueryOperationMaximumResults\nA constant value that represents the maximum number of results CloudKit retrieves."
  },
  {
    "title": "accept(_:completionHandler:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckcontainer/2113667-accept",
    "html": "Parameters\nmetadata\n\nThe metadata of the share to accept.\n\ncompletionHandler\n\nThe handler to execute when the process finishes.\n\nDiscussion\n\nConcurrency Note\n\nYou can call this method from synchronous code using a completion handler, as shown on this page, or you can call it as an asynchronous method that has the following declaration:\n\nfunc accept(_ metadata: CKShare.Metadata) async throws -> CKShare\n\n\nFor information about concurrency and asynchronous code in Swift, see Calling Objective-C APIs Asynchronously.\n\nThe closure doesn’t return a value and takes the following parameters:\n\nThe correspinding share, or nil if CloudKit can’t accept the metadata.\n\nAn error if a problem occurs, or nil if CloudKit successfully accepts the metadata.\n\nSee Also\nAccessing Container Metadata\nfunc fetchShareMetadata(with: URL, completionHandler: (CKShare.Metadata?, Error?) -> Void)\nFetches the share metadata for the specified share URL.\nstatic let CKAccountChanged: NSNotification.Name\nA notification that a container posts when the status of an iCloud account changes."
  },
  {
    "title": "fetchShareMetadata(with:completionHandler:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckcontainer/2113666-fetchsharemetadata",
    "html": "Parameters\nurl\n\nThe share URL that CloudKit uses to locate the metadata.\n\ncompletionHandler\n\nThe handler to execute with the fetch results.\n\nDiscussion\n\nConcurrency Note\n\nYou can call this method from synchronous code using a completion handler, as shown on this page, or you can call it as an asynchronous method that has the following declaration:\n\nfunc shareMetadata(for url: URL) async throws -> CKShare.Metadata\n\n\nFor information about concurrency and asynchronous code in Swift, see Calling Objective-C APIs Asynchronously.\n\nThe closure doesn’t return a value and takes the following parameters:\n\nThe share metadata, or nil if CloudKit can’t find the metadata.\n\nAn error if a problem occurs, or nil if CloudKit successfully retrieves the metadata.\n\nSee Also\nAccessing Container Metadata\nfunc accept(CKShare.Metadata, completionHandler: (CKShare?, Error?) -> Void)\nAccepts the specified share metadata.\nstatic let CKAccountChanged: NSNotification.Name\nA notification that a container posts when the status of an iCloud account changes."
  },
  {
    "title": "discoverUserIdentity(withEmailAddress:completionHandler:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckcontainer/1640430-discoveruseridentity",
    "html": "Parameters\nemail\n\nThe user’s email address.\n\ncompletionHandler\n\nThe handler to execute with the fetch results.\n\nDiscussion\n\nConcurrency Note\n\nYou can call this method from synchronous code using a completion handler, as shown on this page, or you can call it as an asynchronous method that has the following declaration:\n\nfunc userIdentity(forEmailAddress email: String) async throws -> CKUserIdentity?\n\n\nFor information about concurrency and asynchronous code in Swift, see Calling Objective-C APIs Asynchronously.\n\nThis closure doesn’t return a value and takes the following parameters:\n\nThe user identity for the email address, or nil if CloudKit can’t find an identity.\n\nAn error if a problem occurs, or nil if CloudKit successfully fetches a user identity.\n\nUse this method to retrieve the identity of a user who the current user knows. The user you’re searching for must meet the following criteria:\n\nThe user must be in the current user’s Contacts.\n\nThe user has run the app.\n\nThe user grants the userDiscoverability permission for the container.\n\nThis method searches for the user asynchronously and with a low priority. If you want the task to execute the request with a higher priority, create an instance of CKDiscoverUserIdentitiesOperation and configure it to use the necessary priority.\n\nSee Also\nDiscovering User Records\nfunc discoverAllIdentities(completionHandler: ([CKUserIdentity]?, Error?) -> Void)\nFetches all user identities that match entries in the user’s Contacts.\nDeprecated\nfunc discoverUserIdentity(withPhoneNumber: String, completionHandler: (CKUserIdentity?, Error?) -> Void)\nFetches the user identity for the specified phone number.\nDeprecated\nfunc discoverUserIdentity(withUserRecordID: CKRecord.ID, completionHandler: (CKUserIdentity?, Error?) -> Void)\nFetches the user identity for the specified user record ID.\nDeprecated\nfunc fetchShareParticipant(withEmailAddress: String, completionHandler: (CKShare.Participant?, Error?) -> Void)\nFetches the share participant with the specified email address.\nfunc fetchShareParticipant(withPhoneNumber: String, completionHandler: (CKShare.Participant?, Error?) -> Void)\nFetches the share participant with the specified phone number.\nfunc fetchShareParticipant(withUserRecordID: CKRecord.ID, completionHandler: (CKShare.Participant?, Error?) -> Void)\nFetches the share participant with the specified user record ID.\nfunc fetchUserRecordID(completionHandler: (CKRecord.ID?, Error?) -> Void)\nFetches the user record ID of the current user.\nlet CKCurrentUserDefaultName: String\nA constant that provides the current user’s default name.\nlet CKOwnerDefaultName: String\nA constant that provides the default owner’s name.\nDeprecated"
  },
  {
    "title": "fetchAllLongLivedOperationIDs(completionHandler:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckcontainer/3003355-fetchalllonglivedoperationids",
    "html": "Parameters\ncompletionHandler\n\nThe closure to execute with the fetch results.\n\nDiscussion\n\nThe closure doesn’t return a value and takes the following parameters:\n\nThe IDs of all of the long-lived operations that are running.\n\nAn error if a problem occurs, or nil if CloudKit successfully retrieves the IDs.\n\nA long-lived operation is one that continues to run after the user closes your app. When a long-lived operation completes, or your app or the system cancels it, it’s no longer active and CloudKit doesn’t include its ID in outstandingOperationsByIDs. An operation is complete when the system calls its completion handler.\n\nUse the fetchLongLivedOperation(withID:completionHandler:) method to fetch the operation for a specific ID.\n\nSee Also\nFetching Long-Lived Operations\nfunc fetchLongLivedOperation(withID: CKOperation.ID, completionHandler: (CKOperation?, (Error)?) -> Void)\nFetches the long-lived operation for the specified operation ID."
  },
  {
    "title": "fetchLongLivedOperation(withID:completionHandler:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckcontainer/3003356-fetchlonglivedoperation",
    "html": "Parameters\noperationID\n\nThe operation’s ID.\n\ncompletionHandler\n\nThe closure to execute with the fetch results.\n\nDiscussion\n\nThe closure doesn’t return a value and takes the following parameters:\n\nThe long-lived operation. If the operation completes, or your app or the system cancels it, this parameter is nil.\n\nAn error if a problem occurs, or nil if CloudKit successfully retrieves the operation.\n\nA long-lived operation is one that continues to run after the user closes your app. When a long-lived operation completes, the system calls its completion block to notify you.\n\nSee Also\nFetching Long-Lived Operations\nfunc fetchAllLongLivedOperationIDs(completionHandler: ([CKOperation.ID]?, (Error)?) -> Void)\nFetches the IDs of any long-lived operations that are running."
  },
  {
    "title": "CKOwnerDefaultName | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckownerdefaultname",
    "html": "See Also\nDiscovering User Records\nfunc discoverAllIdentities(completionHandler: ([CKUserIdentity]?, Error?) -> Void)\nFetches all user identities that match entries in the user’s Contacts.\nDeprecated\nfunc discoverUserIdentity(withEmailAddress: String, completionHandler: (CKUserIdentity?, Error?) -> Void)\nFetches the user identity for the specified email address.\nDeprecated\nfunc discoverUserIdentity(withPhoneNumber: String, completionHandler: (CKUserIdentity?, Error?) -> Void)\nFetches the user identity for the specified phone number.\nDeprecated\nfunc discoverUserIdentity(withUserRecordID: CKRecord.ID, completionHandler: (CKUserIdentity?, Error?) -> Void)\nFetches the user identity for the specified user record ID.\nDeprecated\nfunc fetchShareParticipant(withEmailAddress: String, completionHandler: (CKShare.Participant?, Error?) -> Void)\nFetches the share participant with the specified email address.\nfunc fetchShareParticipant(withPhoneNumber: String, completionHandler: (CKShare.Participant?, Error?) -> Void)\nFetches the share participant with the specified phone number.\nfunc fetchShareParticipant(withUserRecordID: CKRecord.ID, completionHandler: (CKShare.Participant?, Error?) -> Void)\nFetches the share participant with the specified user record ID.\nfunc fetchUserRecordID(completionHandler: (CKRecord.ID?, Error?) -> Void)\nFetches the user record ID of the current user.\nlet CKCurrentUserDefaultName: String\nA constant that provides the current user’s default name."
  },
  {
    "title": "CKRecordZone.ID | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckrecordzone/id",
    "html": "Overview\n\nZones are a mechanism for grouping related records together. You create zone ID objects when you want to fetch an existing zone object or create a new zone with a specific name.\n\nA record zone ID distinguishes one zone from another by a name string and the ID of the user who creates the zone. Both strings must be ASCII strings that don’t exceed 255 characters. When creating your own record zone ID objects, you can use names that have more meaning to your app or to the user, providing each zone name is unique within the specified database. The owner name must be either the current user name or the name of another user. Get the current user name from CKCurrentUserDefaultName or by calling fetchUserRecordID(completionHandler:).\n\nWhen creating new record zones, make the name string in the record zone ID unique in the target database. Public databases don’t support custom zones, and only the user who owns the database can create zones in private databases.\n\nDon’t create subclasses of this class.\n\nInteracting with Record Zone IDs\n\nAfter you create a record zone ID, interactions with it typically include:\n\nCreating a CKRecord.ID object so that you can fetch or create records in that zone.\n\nRetrieving an existing CKRecordZone object from the database.\n\nYou don’t need to create a record zone ID to create a record zone. The CKRecordZone class has initialization methods that create a record zone ID using the name string you provide.\n\nCreating Record Zone IDs for Records\n\nTo create a new record in a custom zone, create a record zone ID that specifies the zone name. Use the record zone ID to create a CKRecord.ID, and then use the record ID to create the record.\n\nFetching a Record Zone Object from the Database\n\nTo fetch a record zone from the database, use a CKFetchRecordZonesOperation object or the fetch(withRecordZoneID:completionHandler:) method of CKDatabase. Both techniques accept a record zone ID that you provide and retrieve the corresponding record zone object asynchronously. If you use the operation object, you can retrieve multiple record zones at the same time.\n\nTopics\nCreating a Record Zone ID\ninit(zoneName: String, ownerName: String)\nCreates a record zone ID with the specified name and owner.\nGetting the Record Zone ID Attributes\nvar zoneName: String\nThe unique name of the record zone.\nvar ownerName: String\nThe ID of the user who owns the record zone.\nAccessing the Default Zone\nstatic let `default`: CKRecordZone.ID\nThe default zone ID.\nstatic let defaultZoneName: String\nThe name of the default zone.\nInitializers\ninit(zoneName: String, ownerName: String?)\nDeprecated\nRelationships\nInherits From\nNSObject\nConforms To\nNSCopying\nNSSecureCoding\nSendable\nSee Also\nCreating a Record Zone\ninit(zoneName: String)\nCreates a record zone object with the specified zone name.\ninit(zoneID: CKRecordZone.ID)\nCreates a record zone object with the specified zone ID."
  },
  {
    "title": "discoverAllIdentities(completionHandler:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckcontainer/1640421-discoverallidentities",
    "html": "Parameters\ncompletionHandler\n\nThe handler to execute with the fetch results.\n\nDiscussion\n\nConcurrency Note\n\nYou can call this method from synchronous code using a completion handler, as shown on this page, or you can call it as an asynchronous method that has the following declaration:\n\nfunc allUserIdentitiesFromContacts() async throws -> [CKUserIdentity]\n\n\nFor information about concurrency and asynchronous code in Swift, see Calling Objective-C APIs Asynchronously.\n\nThe closure doesn’t return a value and takes the following parameters:\n\nThe user identities that match entries in the user’s Contacts.\n\nAn error if a problem occurs, or nil if the system successfully completes the request.\n\nThis method searches for the users asynchronously and with a low priority. If you want the task to execute with a higher priority, create an instance of CKDiscoverAllUserIdentitiesOperation and configure it to use the necessary priority.\n\nSee Also\nDiscovering User Records\nfunc discoverUserIdentity(withEmailAddress: String, completionHandler: (CKUserIdentity?, Error?) -> Void)\nFetches the user identity for the specified email address.\nDeprecated\nfunc discoverUserIdentity(withPhoneNumber: String, completionHandler: (CKUserIdentity?, Error?) -> Void)\nFetches the user identity for the specified phone number.\nDeprecated\nfunc discoverUserIdentity(withUserRecordID: CKRecord.ID, completionHandler: (CKUserIdentity?, Error?) -> Void)\nFetches the user identity for the specified user record ID.\nDeprecated\nfunc fetchShareParticipant(withEmailAddress: String, completionHandler: (CKShare.Participant?, Error?) -> Void)\nFetches the share participant with the specified email address.\nfunc fetchShareParticipant(withPhoneNumber: String, completionHandler: (CKShare.Participant?, Error?) -> Void)\nFetches the share participant with the specified phone number.\nfunc fetchShareParticipant(withUserRecordID: CKRecord.ID, completionHandler: (CKShare.Participant?, Error?) -> Void)\nFetches the share participant with the specified user record ID.\nfunc fetchUserRecordID(completionHandler: (CKRecord.ID?, Error?) -> Void)\nFetches the user record ID of the current user.\nlet CKCurrentUserDefaultName: String\nA constant that provides the current user’s default name.\nlet CKOwnerDefaultName: String\nA constant that provides the default owner’s name.\nDeprecated"
  },
  {
    "title": "CKContainer.ApplicationPermissionStatus | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckcontainer/applicationpermissionstatus",
    "html": "Topics\nPermission Statuses\ncase initialState\nThe app is yet to request the permission.\ncase couldNotComplete\nAn error that occurs while processing the permission request.\ncase denied\nThe user denies the permission.\ncase granted\nThe user grants the permission.\nRelationships\nConforms To\nSendable\nSee Also\nRequesting and Determining App Permissions\nfunc requestApplicationPermission(CKContainer.ApplicationPermissions, completionHandler: (CKContainer.ApplicationPermissionStatus, Error?) -> Void)\nPrompts the user to authorize the specified permission.\nDeprecated\nfunc status(forApplicationPermission: CKContainer.ApplicationPermissions, completionHandler: (CKContainer.ApplicationPermissionStatus, Error?) -> Void)\nDetermines the authorization status of the specified permission.\nDeprecated\nenum CKContainer.Application\nA collection of types for app permissions.\nstruct CKContainer.ApplicationPermissions\nConstants that represent the permissions that a user grants.\ntypealias CKContainer.ApplicationPermissionBlock\nA closure that processes the outcome of a permissions request.\nDeprecated"
  },
  {
    "title": "CKContainer.ApplicationPermissionBlock | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckcontainer/applicationpermissionblock",
    "html": "Discussion\n\nWhen you request or determine the status of a permission, use this closure to process the result. The closure has no return value and takes the following parameters:\n\nThe permission’s status. For a list of possible values, see CKContainer.ApplicationPermissionStatus.\n\nAn error if the system can’t fulfill the request, or nil if it successfully determines the status.\n\nSee Also\nRequesting and Determining App Permissions\nfunc requestApplicationPermission(CKContainer.ApplicationPermissions, completionHandler: (CKContainer.ApplicationPermissionStatus, Error?) -> Void)\nPrompts the user to authorize the specified permission.\nDeprecated\nfunc status(forApplicationPermission: CKContainer.ApplicationPermissions, completionHandler: (CKContainer.ApplicationPermissionStatus, Error?) -> Void)\nDetermines the authorization status of the specified permission.\nDeprecated\nenum CKContainer.Application\nA collection of types for app permissions.\nstruct CKContainer.ApplicationPermissions\nConstants that represent the permissions that a user grants.\nenum CKContainer.ApplicationPermissionStatus\nConstants that represent the status of a permission.\nDeprecated"
  },
  {
    "title": "CKAccountStatus | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckaccountstatus",
    "html": "Topics\nAccount Statuses\ncase available\nThe user’s iCloud account is available.\ncase couldNotDetermine\nCloudKit can’t determine the status of the user’s iCloud account.\ncase noAccount\nThe device doesn’t have an iCloud account.\ncase restricted\nThe system denies access to the user’s iCloud account.\ncase temporarilyUnavailable\nThe user’s iCloud account is temporarily unavailable.\nRelationships\nConforms To\nSendable\nSee Also\nDetermining the User’s iCloud Access Status\nfunc accountStatus(completionHandler: (CKAccountStatus, Error?) -> Void)\nDetermines whether the system can access the user’s iCloud account."
  },
  {
    "title": "CKContainer.ApplicationPermissions | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckcontainer/applicationpermissions",
    "html": "Topics\nCreating Permissions\ninit(rawValue: UInt)\nCreates a premission with the specified raw value.\nAccessing Permissions\nstatic var userDiscoverability: CKContainer.ApplicationPermissions\nThe user is discoverable using their email address.\nDeprecated\nRelationships\nConforms To\nOptionSet\nSendable\nSee Also\nRequesting and Determining App Permissions\nfunc requestApplicationPermission(CKContainer.ApplicationPermissions, completionHandler: (CKContainer.ApplicationPermissionStatus, Error?) -> Void)\nPrompts the user to authorize the specified permission.\nDeprecated\nfunc status(forApplicationPermission: CKContainer.ApplicationPermissions, completionHandler: (CKContainer.ApplicationPermissionStatus, Error?) -> Void)\nDetermines the authorization status of the specified permission.\nDeprecated\nenum CKContainer.Application\nA collection of types for app permissions.\ntypealias CKContainer.ApplicationPermissionBlock\nA closure that processes the outcome of a permissions request.\nDeprecated\nenum CKContainer.ApplicationPermissionStatus\nConstants that represent the status of a permission.\nDeprecated"
  },
  {
    "title": "containerIdentifier | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckcontainer/1399182-containeridentifier",
    "html": "Discussion\n\nUse this property’s value to distinguish different containers in your app."
  },
  {
    "title": "database(with:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckcontainer/1640475-database",
    "html": "Parameters\ndatabaseScope\n\nThe database’s scope. See CKDatabase.Scope for the available options.\n\nSee Also\nGetting the Public and Private Databases\nvar privateCloudDatabase: CKDatabase\nThe user’s private database.\nvar publicCloudDatabase: CKDatabase\nThe app’s public database.\nvar sharedCloudDatabase: CKDatabase\nThe database that contains shared data."
  },
  {
    "title": "sharedCloudDatabase | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckcontainer/1640408-sharedclouddatabase",
    "html": "Discussion\n\nThis database is only available if the device has an iCloud account. Permissions on the database are available only to the user according to the permissions of the enclosing CKShare instance, which represents the shared record. The current user doesn’t own the content in the shared database, and can view and modify that content only if the necessary permissions exist. Data in the shared database isn’t visible in the developer portal or to any user who doesn’t have access.\n\nData in the shared database counts toward your app’s iCloud storage quota.\n\nIf there isn’t an iCloud account on the user’s device, this property still returns a database, but any attempt to use it results in an error. To determine if there is an iCloud account on the device, use the accountStatus(completionHandler:) method.\n\nSee Also\nGetting the Public and Private Databases\nvar privateCloudDatabase: CKDatabase\nThe user’s private database.\nvar publicCloudDatabase: CKDatabase\nThe app’s public database.\nfunc database(with: CKDatabase.Scope) -> CKDatabase\nReturns the database with the specified scope."
  },
  {
    "title": "userRecordID | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckuseridentity/lookupinfo/1640405-userrecordid",
    "html": "Discussion\n\nUse this value to retrieve the user record for the user identity. The user record doesn’t contain any personal information about the user, by default. You can add data to the user record, but you shouldn’t add anything sensitive.\n\nSee Also\nAccessing the Criteria\nvar emailAddress: String?\nThe user’s email address.\nvar phoneNumber: String?\nThe user’s phone number."
  },
  {
    "title": "default() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckcontainer/1399189-default",
    "html": "Discussion\n\nUse this method to retrieve your app’s default container. This is the one you typically use to store your app’s data. If you want the container for a different app, create a container using the init(identifier:) method.\n\nDuring development, the container uses the development environment. When you release your app, the container uses the production environment.\n\nSee Also\nCreating Containers\ninit(identifier: String)\nCreates a container for the specified identifier."
  },
  {
    "title": "init(identifier:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckcontainer/1399193-init",
    "html": "Parameters\ncontainerIdentifier\n\nThe bundle identifier of the app with the container that you want to access. The bundle identifier must be in the app’s com.apple.developer.icloud-container-identifiers entitlement. This parameter must not be nil.\n\nDiscussion\n\nThe specified identifier must correspond to one of the ubiquity containers in the iCloud capabilities section of your Xcode project. Including the identifier with your app’s capabilities adds the corresponding entitlements to your app. To access your app’s default container, use the default() method instead.\n\nSee Also\nCreating Containers\nclass func `default`() -> CKContainer\nReturns the app’s default container."
  },
  {
    "title": "publicCloudDatabase | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckcontainer/1399166-publicclouddatabase",
    "html": "Discussion\n\nThis database is available regardless of whether the user’s device has an iCloud account. The contents of the public database are readable by all users of the app, and users have write access to the records, and other objects, they create. The public database’s contents are visible in the developer portal, where you can assign roles to users and restrict access as necessary.\n\nData in the public database counts toward your app’s iCloud storage quota.\n\nSee Also\nGetting the Public and Private Databases\nvar privateCloudDatabase: CKDatabase\nThe user’s private database.\nvar sharedCloudDatabase: CKDatabase\nThe database that contains shared data.\nfunc database(with: CKDatabase.Scope) -> CKDatabase\nReturns the database with the specified scope."
  },
  {
    "title": "privateCloudDatabase | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckcontainer/1399205-privateclouddatabase",
    "html": "Discussion\n\nThe user’s private database is only available if the device has an iCloud account. Only the user can access their private database, by default. They own all of the database’s content and can view and modify that content. Data in the private database isn’t visible in the developer portal.\n\nData in the private database counts toward the user’s iCloud storage quota.\n\nIf there isn’t an iCloud account on the user’s device, this property still returns a database, but any attempt to use it results in an error. To determine if there is an iCloud account on the device, use the accountStatus(completionHandler:) method.\n\nSee Also\nGetting the Public and Private Databases\nvar publicCloudDatabase: CKDatabase\nThe app’s public database.\nvar sharedCloudDatabase: CKDatabase\nThe database that contains shared data.\nfunc database(with: CKDatabase.Scope) -> CKDatabase\nReturns the database with the specified scope."
  },
  {
    "title": "phoneNumber | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckuseridentity/lookupinfo/1640482-phonenumber",
    "html": "See Also\nAccessing the Criteria\nvar emailAddress: String?\nThe user’s email address.\nvar userRecordID: CKRecord.ID?\nThe ID of the user record."
  },
  {
    "title": "emailAddress | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckuseridentity/lookupinfo/1640462-emailaddress",
    "html": "See Also\nAccessing the Criteria\nvar phoneNumber: String?\nThe user’s phone number.\nvar userRecordID: CKRecord.ID?\nThe ID of the user record."
  },
  {
    "title": "lookupInfos(withPhoneNumbers:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckuseridentity/lookupinfo/1640429-lookupinfos",
    "html": "Parameters\nphoneNumbers\n\nThe phone numbers for looking up the user identities.\n\nDiscussion\n\nUse the values that this method returns in an CKDiscoverUserIdentitiesOperation operation or an CKFetchShareParticipantsOperation operation to retrieve the corresponding user identities.\n\nSee Also\nCreating Multiple Lookup Infos\nclass func lookupInfos(withEmails: [String]) -> [CKUserIdentity.LookupInfo]\nReturns an array of lookup infos for the specifed email addresses.\nclass func lookupInfos(with: [CKRecord.ID]) -> [CKUserIdentity.LookupInfo]\nReturns an array of lookup infos for the specifed user record IDs."
  },
  {
    "title": "lookupInfos(with:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckuseridentity/lookupinfo/1640407-lookupinfos",
    "html": "Parameters\nrecordIDs\n\nThe user record IDs for looking up the user identities.\n\nDiscussion\n\nUse the values that this method returns in an CKDiscoverUserIdentitiesOperation operation or an CKFetchShareParticipantsOperation operation to retrieve the corresponding user identities.\n\nSee Also\nCreating Multiple Lookup Infos\nclass func lookupInfos(withEmails: [String]) -> [CKUserIdentity.LookupInfo]\nReturns an array of lookup infos for the specifed email addresses.\nclass func lookupInfos(withPhoneNumbers: [String]) -> [CKUserIdentity.LookupInfo]\nReturns an array of lookup infos for the specifed phone numbers."
  },
  {
    "title": "lookupInfos(withEmails:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckuseridentity/lookupinfo/1640439-lookupinfos",
    "html": "Parameters\nemails\n\nThe email addresses for looking up the user identities.\n\nDiscussion\n\nUse the values that this method returns in an CKDiscoverUserIdentitiesOperation operation or an CKFetchShareParticipantsOperation operation to retrieve the corresponding user identities.\n\nSee Also\nCreating Multiple Lookup Infos\nclass func lookupInfos(withPhoneNumbers: [String]) -> [CKUserIdentity.LookupInfo]\nReturns an array of lookup infos for the specifed phone numbers.\nclass func lookupInfos(with: [CKRecord.ID]) -> [CKUserIdentity.LookupInfo]\nReturns an array of lookup infos for the specifed user record IDs."
  },
  {
    "title": "contactIdentifiers | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckuseridentity/2866227-contactidentifiers",
    "html": "Discussion\n\nIdentities that CloudKit discovers using CKDiscoverAllUserIdentitiesOperation correspond to entries in the local Contacts database, matching the identifier on CNContact. Use these identifiers with the Contacts database to get additional information about the contacts. Multiple identifiers can exist for a single discovered user because multiple contacts can contain the same email addresses or phone numbers.\n\nTo transform these identifiers into an array of unified contact identifiers, create a predicate by calling the predicateForContacts(withIdentifiers:) method, and then pass that predicate to the unifiedContacts(matching:keysToFetch:) method.\n\nSee Also\nAccessing User Information\nvar userRecordID: CKRecord.ID?\nThe user record ID for the corresponding user record.\nvar nameComponents: PersonNameComponents?\nThe user’s name."
  },
  {
    "title": "init(phoneNumber:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckuseridentity/lookupinfo/1640402-init",
    "html": "Parameters\nphoneNumber\n\nThe phone number for looking up the user identity.\n\nDiscussion\n\nAfter you create a lookup info, use the CKDiscoverUserIdentitiesOperation operation or the CKFetchShareParticipantsOperation operation to retrieve the corresponding user identity.\n\nSee Also\nCreating a Lookup Info\ninit(emailAddress: String)\nCreates a lookup info for the specified email address.\ninit(userRecordID: CKRecord.ID)\nCreates a lookup info for the specified user record ID."
  },
  {
    "title": "init(userRecordID:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckuseridentity/lookupinfo/1640419-init",
    "html": "Parameters\nuserRecordID\n\nThe user record ID for looking up the user identity.\n\nDiscussion\n\nAfter you create a lookup info, use the CKDiscoverUserIdentitiesOperation operation or the CKFetchShareParticipantsOperation operation to retrieve the corresponding user identity.\n\nSee Also\nCreating a Lookup Info\ninit(emailAddress: String)\nCreates a lookup info for the specified email address.\ninit(phoneNumber: String)\nCreates a lookup info for the specified phone number."
  },
  {
    "title": "CKDiscoverUserIdentitiesOperation | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckdiscoveruseridentitiesoperation",
    "html": "Overview\n\nUse this operation to discover one or more iCloud users that match identity information you provide, such as email addresses and phone numbers.\n\nBefore CloudKit can return a user’s identity, you must ask for their permission by calling requestApplicationPermission(_:completionHandler:). Do this as part of any onboarding where you can highlight the benefits of being discoverable within the context of your app.\n\nThe operation executes the handlers you provide on an internal queue it manages. Your handlers must be capable of executing on a background queue. Tasks that need access to the main queue must redirect as appropriate.\n\nThe operation calls discoverUserIdentitiesCompletionBlock after it executes and returns results. Use the completion handler to perform housekeeping tasks for the operation. It should also manage any failures, whether due to an error or an explicit cancellation.\n\nNote\n\nBecause this class inherits from Operation, you can also set the completionBlock property. The operation calls both completion handlers if they’re both set.\n\nCloudKit operations have a default QoS of QualityOfService.default. Operations with this service level are discretionary. The system schedules their execution at an optimal time according to battery level and network conditions, among other factors. Use the qualityOfService property to set a more appropriate QoS for the operation.\n\nThe following example shows how to create the operation, configure its callbacks, and execute it using the default container’s queue:\n\nfunc fetchUserIdentities(withEmails emails: [String],\n    completion: @escaping (Result<[CKUserIdentity], Error>) -> Void) {\n    \n    var identities = [CKUserIdentity]()\n\n\n    // Convert the email addresses into instances of\n    // CKUserIdentity.LookupInfo, which CloudKit uses\n    // to discover identities.\n    let lookupInfos =\n        CKUserIdentity.LookupInfo.lookupInfos(withEmails: emails)\n    \n    // Create the operation using the array of lookup objects.\n    let operation = CKDiscoverUserIdentitiesOperation(\n        userIdentityLookupInfos: lookupInfos)\n    \n    // Cache the user identities as CloudKit discovers them.\n    operation.userIdentityDiscoveredBlock = { userIdentity, _ in\n        identities.append(userIdentity)\n    }\n    \n    // If the operation fails, return the error to the caller.\n    // Otherwise, return the array of discovered user identities.\n    operation.discoverUserIdentitiesCompletionBlock = { error in\n        if let error = error {\n            completion(.failure(error))\n        } else {\n            completion(.success(identities))\n        }\n    }\n    \n    // Set an appropriate QoS and add the operation to the\n    // default container's queue to execute it.\n    operation.qualityOfService = .userInitiated\n    CKContainer.default().add(operation)\n}\n\n\nTopics\nCreating an Operation\ninit()\nCreates an operation for discovering user identities.\ninit(userIdentityLookupInfos: [CKUserIdentity.LookupInfo])\nCreates an operation for discovering the user identities of the specified lookup infos.\nConfiguring the Operation\nvar userIdentityLookupInfos: [CKUserIdentity.LookupInfo]\nThe lookup info for discovering user identities.\nProcessing the Results\nvar userIdentityDiscoveredBlock: ((CKUserIdentity, CKUserIdentity.LookupInfo) -> Void)?\nThe closure to execute for each user identity.\nvar discoverUserIdentitiesCompletionBlock: ((Error?) -> Void)?\nThe closure to execute when the operation finishes.\nInstance Properties\nvar discoverUserIdentitiesResultBlock: ((Result<Void, Error>) -> Void)?\nRelationships\nInherits From\nCKOperation\nSee Also\nDeprecated classes\nclass CKDiscoverAllUserIdentitiesOperation\nAn operation that uses the device’s contacts to search for discoverable iCloud users.\nDeprecated\nclass CKFetchRecordChangesOperation\nAn operation that reports on the changed and deleted records in the specified record zone.\nDeprecated\nclass CKFetchNotificationChangesOperation\nAn operation that retrieves unread notifications from a CloudKit container.\nDeprecated\nclass CKMarkNotificationsReadOperation\nAn operation that marks push notifications as read by your app.\nDeprecated\nclass CKModifyBadgeOperation\nAn operation that sets the value of the app icon’s badge.\nDeprecated"
  },
  {
    "title": "CKDiscoverAllUserIdentitiesOperation | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckdiscoveralluseridentitiesoperation",
    "html": "Overview\n\nUse this operation to discover iCloud users that match entries in the device’s Contacts database. CloudKit uses the email addresses and phone numbers in each Contact record to search for a matching iCloud account.\n\nAlthough your app doesn’t need authorization to use the Contacts database to execute this operation, if it has authorization, you can use the contactIdentifiers property on any returned user identity to fetch the corresponding Contact record from the database.\n\nNote\n\nThis operation scales linearly with the number of email addresses and phone numbers in the device’s Contacts database, and may take some time to complete.\n\nBefore CloudKit can return a user’s identity, you must ask for their permission by calling requestApplicationPermission(_:completionHandler:). Do this as part of any onboarding where you can highlight the benefits of being discoverable within the context of your app.\n\nThe operation executes the handlers you provide on an internal queue it manages. Your handlers must be capable of executing on a background queue. Tasks that need access to the main queue must redirect as appropriate.\n\nThe operation calls discoverAllUserIdentitiesCompletionBlock after it executes and returns results. Use the completion handler to perform housekeeping tasks for the operation. It should also manage any failures, whether due to an error or an explicit cancellation.\n\nNote\n\nBecause this class inherits from Operation, you can also set the completionBlock property. The operation calls both completion handlers if they’re both set.\n\nCloudKit operations have a default QoS of QualityOfService.default. Operations with this service level are discretionary. The system schedules their execution at an optimal time according to battery level and network conditions, among other factors. Use the qualityOfService property to set a more appropriate QoS for the operation.\n\nThe following example shows how to create the operation, configure its callbacks, and execute it using the default container’s queue:\n\nfunc fetchUserIdentities(\n    completion: @escaping (Result<[CKUserIdentity], Error>) -> Void) {\n        \n    var identities = [CKUserIdentity]()\n    \n    // Create an operation to discover all the iCloud users\n    // in the user's Contacts database that use the app, and\n    // opt in to being discoverable.\n    let operation = CKDiscoverAllUserIdentitiesOperation()\n    \n    // Cache the user identities as CloudKit discovers them.  \n    operation.userIdentityDiscoveredBlock = { userIdentity in\n        identities.append(userIdentity)\n    }\n    \n    // If the operation fails, return the error to the caller.\n    // Otherwise, return the array of discovered user identities.\n    operation.discoverAllUserIdentitiesCompletionBlock = { error in\n        if let error = error {\n            completion(.failure(error))\n        } else {\n            completion(.success(identities))\n        }\n    }\n    \n    // Set an appropriate QoS and add the operation to the\n    // default container's queue to execute it.\n    operation.qualityOfService = .userInitiated\n    CKContainer.default().add(operation)\n}\n\n\nTopics\nCreating an Operation\ninit()\nCreates an operation for searching the device’s contacts.\nProcessing the Operation Results\nvar userIdentityDiscoveredBlock: ((CKUserIdentity) -> Void)?\nThe closure to execute for each user identity.\nvar discoverAllUserIdentitiesCompletionBlock: ((Error?) -> Void)?\nThe closure to execute when the operation finishes.\nInstance Properties\nvar discoverAllUserIdentitiesResultBlock: ((Result<Void, Error>) -> Void)?\nRelationships\nInherits From\nCKOperation\nSee Also\nDeprecated classes\nclass CKDiscoverUserIdentitiesOperation\nAn operation that uses the provided criteria to search for discoverable iCloud users.\nDeprecated\nclass CKFetchRecordChangesOperation\nAn operation that reports on the changed and deleted records in the specified record zone.\nDeprecated\nclass CKFetchNotificationChangesOperation\nAn operation that retrieves unread notifications from a CloudKit container.\nDeprecated\nclass CKMarkNotificationsReadOperation\nAn operation that marks push notifications as read by your app.\nDeprecated\nclass CKModifyBadgeOperation\nAn operation that sets the value of the app icon’s badge.\nDeprecated"
  },
  {
    "title": "init(emailAddress:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckuseridentity/lookupinfo/1640484-init",
    "html": "Parameters\nemailAddress\n\nThe email address for looking up the user identity.\n\nDiscussion\n\nAfter you create a lookup info, use the CKDiscoverUserIdentitiesOperation operation or the CKFetchShareParticipantsOperation operation to retrieve the corresponding user identity.\n\nSee Also\nCreating a Lookup Info\ninit(phoneNumber: String)\nCreates a lookup info for the specified phone number.\ninit(userRecordID: CKRecord.ID)\nCreates a lookup info for the specified user record ID."
  },
  {
    "title": "requestApplicationPermission(_:completionHandler:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckcontainer/1399174-requestapplicationpermission",
    "html": "Parameters\napplicationPermission\n\nThe permission to request. This permission applies only to the current container. For a list of possible values, see CKContainer.ApplicationPermissions.\n\ncompletionHandler\n\nThe handler to execute with the outcome.\n\nDiscussion\n\nConcurrency Note\n\nYou can call this method from synchronous code using a completion handler, as shown on this page, or you can call it as an asynchronous method that has the following declaration:\n\nfunc requestApplicationPermission(_ applicationPermission: CKContainer.ApplicationPermissions) async throws -> CKContainer.ApplicationPermissionStatus\n\n\nFor information about concurrency and asynchronous code in Swift, see Calling Objective-C APIs Asynchronously.\n\nTo implement social features in your app, it’s possible to correlate a user record with the user’s actual name, but your app must get permission from the user to do so. Making a user record discoverable to the contacts of that user involves calling the requestApplicationPermission(_:completionHandler:) method and asking for the userDiscoverability permission. When you call that method, CloudKit asks the user whether the user record can become discoverable. If the user grants the request, that user’s contacts can discover that user’s true identity when running the app. To discover the contacts of the current user, you use the discoverAllContactUserInfos(completionHandler:) method or one of several other methods to get the related user information.\n\nThe first time you request a permission on any of the user’s devices, the user receives a prompt to grant or deny the request. After the user grants or denies a permission, subsequent requests for the same permission (on the same or separate devices), don’t prompt the user again.\n\nThis method runs asynchronously, and the system calls your completion handler on an arbitary queue and provides the outcome.\n\nSee Also\nRequesting and Determining App Permissions\nfunc status(forApplicationPermission: CKContainer.ApplicationPermissions, completionHandler: (CKContainer.ApplicationPermissionStatus, Error?) -> Void)\nDetermines the authorization status of the specified permission.\nDeprecated\nenum CKContainer.Application\nA collection of types for app permissions.\nstruct CKContainer.ApplicationPermissions\nConstants that represent the permissions that a user grants.\ntypealias CKContainer.ApplicationPermissionBlock\nA closure that processes the outcome of a permissions request.\nDeprecated\nenum CKContainer.ApplicationPermissionStatus\nConstants that represent the status of a permission.\nDeprecated"
  },
  {
    "title": "nameComponents | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckuseridentity/1640458-namecomponents",
    "html": "Discussion\n\nYou can use this property to construct the user’s name for display. Use the components with an instance of PersonNameComponentsFormatter to create a string representation for the current locale.\n\nSee Also\nAccessing User Information\nvar userRecordID: CKRecord.ID?\nThe user record ID for the corresponding user record.\nvar contactIdentifiers: [String]\nIdentifiers that match contacts in the local Contacts database."
  },
  {
    "title": "parent | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckrecord/1640527-parent",
    "html": "Discussion\n\nUse parent references to inform CloudKit about the hierarchy of your records. CloudKit shares the hierarchy when a CKShare includes a referenced record. Add relationships between records as you create them, even if you don’t plan to share them. This allows you to manage the sharing of a hierarchy by only modifying the root record’s share reference.\n\nTo indicate that a record belongs to its parent, set this property to a reference that points to the parent record. The reference must use the CKRecord.ReferenceAction.none action or CloudKit throws an exception. The parent record must exist on the server when you save the child, or must be part of the same save operation. Otherwise, the operation fails.\n\nSee Also\nSharing Records\nvar share: CKRecord.Reference?\nA reference to the share object that determines the share status of the record.\nclass CKRecord.Reference\nA relationship between two records in a record zone.\nfunc setParent(CKRecord?)\nCreates and sets a reference object for a parent from its record.\nfunc setParent(CKRecord.ID?)\nCreates and sets a reference object for a parent from the parent’s record ID.\nenum CKRecord.SystemFieldKey\nPossible values for types of system field keys on records."
  },
  {
    "title": "CKShare.Participant | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckshare/participant",
    "html": "Overview\n\nParticipants are a key element of sharing in CloudKit. A participant provides information about an iCloud user and their participation in a share, including their identity, acceptance status, permissions, and role.\n\nThe acceptance status determines the participant’s visibilty of the shared records. Statuses are: pending, accepted, removed, and unknown. If the status is pending, use CKAcceptSharesOperation to accept the share. Upon acceptance, CloudKit makes the shared records available in the participant’s shared database. The records remain accessible for as long as the participant’s status is accepted.\n\nYou don’t create participants. Use the share’s participants property to access its existing participants. Use UICloudSharingController to manage the share’s participants and their permissions. Alternatively, you can generate participants using CKFetchShareParticipantsOperation. Participants must have an active iCloud account.\n\nAnyone with the URL of a public share can become a participant in that share. Participants of a public share assume the publicUser role. For private shares, the owner manages the participants. An owner is any participant with the owner role. A participant of a private share can’t accept the share unless the owner adds them first. Private share participants assume the privateUser role. CloudKit removes any pending participants if the owner changes the share’s publicPermission. CloudKit removes all participants if the new permission is none.\n\nParticipants with write permissions can modify or delete any record that you include in the share. However, only the owner can delete a shared hierarchy’s root record. If a participant attempts to delete the share, CloudKit removes the participant. The share remains active for all other participants.\n\nTopics\nAccessing the Participant’s Status\nvar acceptanceStatus: CKShare.ParticipantAcceptanceStatus\nThe current state of the user’s acceptance of the share.\ntypealias CKShare.Participant.AcceptanceStatus\nA type that represents the acceptance status of the participant.\nDeprecated\nenum CKShare.ParticipantAcceptanceStatus\nConstants that represent the status of a participant.\nAccessing the Participant's Identity\nvar userIdentity: CKUserIdentity\nThe identity of the participant.\nManaging the Participant's Capabilites\nvar permission: CKShare.ParticipantPermission\nThe participant’s permission level for the share.\ntypealias CKShare.Participant.Permission\nA type that represents the permissions for a participant.\nDeprecated\nenum CKShare.ParticipantPermission\nConstants that represent the permissions to grant to a share participant.\nvar role: CKShare.ParticipantRole\nThe participant’s role for the share.\ntypealias CKShare.Participant.Role\nA type that represents the role for a participant.\nDeprecated\nenum CKShare.ParticipantRole\nConstants that represent the role of a share’s participant.\nDeprecated\nDeprecated Symbols\nReview unsupported symbols and their replacements.\nRelationships\nInherits From\nNSObject\nConforms To\nNSCopying\nNSSecureCoding\nSendable\nSee Also\nConfiguring the Share\nvar publicPermission: CKShare.ParticipantPermission\nThe permission for anyone with access to the share’s URL.\nfunc addParticipant(CKShare.Participant)\nAdds a participant to the share.\nfunc removeParticipant(CKShare.Participant)\nRemoves a participant from the share."
  },
  {
    "title": "CKShare.Metadata | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckshare/metadata",
    "html": "Overview\n\nA share’s metadata is an intermediary object that provides access to the share, its owner, and, for a shared record hierarchy, its root record. Metadata also includes details about the current user’s participation in the share.\n\nYou don’t create metadata. CloudKit provides it to your app when the user taps or clicks a share’s url, such as in an email or a message. The method CloudKit calls varies by platform and app configuration, and includes the following:\n\nFor a scene-based iOS app in a running or suspended state, CloudKit calls the windowScene(_:userDidAcceptCloudKitShareWith:) method on your window scene delegate.\n\nFor a scene-based iOS app that’s not running, the system launches your app in response to the tap or click, and calls the scene(_:willConnectTo:options:) method on your scene delegate. The connectionOptions parameter contains the metadata. Use its cloudKitShareMetadata property to access it.\n\nFor an iOS app that doesn’t use scenes, CloudKit calls your app delegate’s application(_:userDidAcceptCloudKitShareWith:) method.\n\nFor a macOS app, CloudKit calls your app delegate’s application(_:userDidAcceptCloudKitShareWith:) method.\n\nFor a watchOS app, CloudKit calls the userDidAcceptCloudKitShare(with:) method on your watch extension delegate.\n\nRespond by checking the participantStatus of the provided metadata. If the status is pending, use CKAcceptSharesOperation to accept participation in the share. You can also fetch metadata independent of this flow using CKFetchShareMetadataOperation.\n\nFor a shared record hierarchy, the hierarchicalRootRecordID property contains the ID of the share’s root record. When using CKFetchShareMetadataOperation to fetch metadata, you can include the entire root record by setting the operation’s shouldFetchRootRecord property to true. CloudKit then populates the rootRecord property before it returns the metadata. You can further customize this behavior using the operation’s rootRecordDesiredKeys property to specify which fields to return. This functionality isn’t applicable for a shared record zone because, unlike a shared record hierarchy, it doesn’t have a nominated root record.\n\nThe participant properties provide the current user’s acceptance status, permissions, and role. Use these values to determine what functionality to provide to the user. For example, only display editing controls for accepted participants with readWrite permissions.\n\nTopics\nAccessing the Share\nvar share: CKShare\nThe share that owns the metadata.\nvar containerIdentifier: String\nThe ID of the share’s container.\nvar ownerIdentity: CKUserIdentity\nThe identity of the share’s owner.\nAccessing the Root Record\nvar hierarchicalRootRecordID: CKRecord.ID?\nThe record ID of the shared hierarchy’s root record.\nvar rootRecord: CKRecord?\nThe share’s root record.\nvar rootRecordID: CKRecord.ID\nThe record ID of the share’s root record.\nDeprecated\nAccessing the Participant’s Capabilities\nvar participantRole: CKShare.ParticipantRole\nThe share’s participant role for the user who retrieves the metadata.\nvar participantPermission: CKShare.ParticipantPermission\nThe share’s permissions for the user who retrieves the metadata.\nvar participantStatus: CKShare.ParticipantAcceptanceStatus\nThe share’s participation status for the user who retrieves the metadata.\nvar participantType: CKShare.ParticipantType\nThe share’s participation type for the user who retrieves the metadata.\nDeprecated\nRelationships\nInherits From\nNSObject\nConforms To\nNSCopying\nNSSecureCoding\nSendable"
  },
  {
    "title": "lookupInfo | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckuseridentity/1640371-lookupinfo",
    "html": "Discussion\n\nUse this property’s value to retrieve the user identity when using the CKDiscoverUserIdentitiesOperation and CKFetchShareParticipantsOperation operations.\n\nSee Also\nAccessing iCloud Information\nvar hasiCloudAccount: Bool\nA Boolean value that indicates whether the user has an iCloud account.\nclass CKUserIdentity.LookupInfo\nThe criteria to use when searching for discoverable iCloud users."
  },
  {
    "title": "userRecordID | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckuseridentity/1640504-userrecordid",
    "html": "See Also\nAccessing User Information\nvar contactIdentifiers: [String]\nIdentifiers that match contacts in the local Contacts database.\nvar nameComponents: PersonNameComponents?\nThe user’s name."
  },
  {
    "title": "addParticipant(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckshare/1640443-addparticipant",
    "html": "Parameters\nparticipant\n\nThe participant to add to the share.\n\nDiscussion\n\nIf a participant with a matching userIdentity already exists in the share, the system updates the existing participant’s properties and doesn’t add a new participant.\n\nTo modify the list of participants, a share’s publicPermission must be CKShare.ParticipantPermission.none. You can’t mix and match public and private users in the same share. You can only add certain participant types with this API. See CKShare.Participant for more information.\n\nSee Also\nConfiguring the Share\nvar publicPermission: CKShare.ParticipantPermission\nThe permission for anyone with access to the share’s URL.\nfunc removeParticipant(CKShare.Participant)\nRemoves a participant from the share.\nclass CKShare.Participant\nAn object that describes a user’s participation in a share."
  },
  {
    "title": "CKFetchShareMetadataOperation | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckfetchsharemetadataoperation",
    "html": "Overview\n\nUse this operation to fetch the metadata for one or more shares. A share’s metadata contains the share and details about the user’s participation. Fetch metadata when you want to manually accept participation in a share using CKAcceptSharesOperation.\n\nFor a shared record hierarchy, the fetched metadata includes the record ID of the share’s root record. Set shouldFetchRootRecord to true to fetch the entire root record. You can further customize this behavior using rootRecordDesiredKeys to specify which fields you want to include in your fetch. This functionality isn’t applicable for a shared record zone because, unlike a shared record hierarchy, it doesn’t have a nominated root record.\n\nTo run the operation, add it to any container’s operation queue. Returned metadata includes the ID of the container that stores the share. The operation executes its callbacks on a private serial queue.\n\nThe operation calls perShareMetadataBlock once for each URL you provide, and CloudKit returns the metadata, or an error if the fetch fails. CloudKit also batches per-URL errors. If the operation completes with errors, it returns a partialFailure error. The error stores individual errors in its userInfo dictionary. Use the CKPartialErrorsByItemIDKey key to extract them.\n\nWhen all of the following conditions are true, CloudKit returns a participantMayNeedVerification error:\n\nThere are pending participants that don’t have matched iCloud accounts.\n\nThe current user has an active iCloud account and isn’t an existing participant (pending or otherwise).\n\nOn receipt of this error, call openURL(_:) with the share’s URL to allow CloudKit to verify the user.\n\nThe following example demonstrates how to create the operation, configure it, and then execute it using the default container’s operation queue:\n\nfunc fetchShareMetadata(for shareURLs: [URL],\n    completion: @escaping (Result<[URL: CKShare.Metadata], Error>) -> Void) {\n        \n    var cache = [URL: CKShare.Metadata]()\n        \n    // Create the fetch operation using the share URLs that\n    // the caller provides to the method.\n    let operation = CKFetchShareMetadataOperation(shareURLs: shareURLs)\n        \n    // To reduce network requests, request that CloudKit \n    // includes the root record in the metadata it returns.\n    operation.shouldFetchRootRecord = true\n        \n    // Cache the metadata that CloudKit returns using the\n    // share URL. This implementation ignores per-metadata\n    // fetch errors and handles any errors in the completion\n    // closure instead.\n    operation.perShareMetadataBlock = { url, metadata, _ in\n        guard let metadata = metadata else { return }\n        cache[url] = metadata\n    }\n        \n    // If the operation fails, return the error to the caller.\n    // Otherwise, return the array of participants.\n    operation.fetchShareMetadataCompletionBlock = { error in\n        if let error = error {\n            completion(.failure(error))\n        } else {\n            completion(.success(cache))\n        }\n    }\n        \n    // Set an appropriate QoS and add the operation to the\n    // container's queue to execute it.\n    operation.qualityOfService = .userInitiated\n    CKContainer.default().add(operation)\n}\n\n\nTopics\nCreating an Operation\ninit()\nCreates an empty fetch share metadata operation.\ninit(shareURLs: [URL])\nCreates an operation for fetching the metadata for the specified shares.\nConfiguring the Operation\nvar shareURLs: [URL]?\nThe URLs of the shares to fetch.\nvar shouldFetchRootRecord: Bool\nA Boolean value that indicates whether to retrieve the root record.\nProcessing the Operation’s Results\nvar perShareMetadataBlock: ((URL, CKShare.Metadata?, Error?) -> Void)?\nThe closure to execute as the operation fetches individual shares.\nvar fetchShareMetadataCompletionBlock: ((Error?) -> Void)?\nThe closure to execute when the operation finishes.\nInstance Properties\nvar fetchShareMetadataResultBlock: ((Result<Void, Error>) -> Void)?\nvar perShareMetadataResultBlock: ((URL, Result<CKShare.Metadata, Error>) -> Void)?\nvar rootRecordDesiredKeys: [CKRecord.FieldKey]?\nThe fields to return when fetching the root record.\nRelationships\nInherits From\nCKOperation\nSee Also\nShare Requests\nclass CKShare.Metadata\nAn object that describes a shared record’s metadata.\nclass CKAcceptSharesOperation\nAn operation that confirms a user’s participation in a share."
  },
  {
    "title": "CKAcceptSharesOperation | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckacceptsharesoperation",
    "html": "Overview\n\nUse this operation to accept participation in one or more shares. You create the operation with an array of share metadatas, which CloudKit provides to your app when the user taps or clicks a share’s url. The method CloudKit calls varies by platform and app configuration. For more information, see CKShare.Metadata. You can also fetch a share’s metadata using CKFetchShareMetadataOperation.\n\nIf there are several metadatas, group them by their containerIdentifier and create an operation for each container. Then add the operation to each container’s operation queue to run it. The operation executes its callbacks on a private serial queue.\n\nThe operation calls perShareCompletionBlock once for each metadata you provide. CloudKit returns the metadata and its related share, or an error if it can’t accept the share. CloudKit also batches per-metadata errors. If the operation completes with errors, it returns a partialFailure error. The error stores individual errors in its userInfo dictionary. Use the CKPartialErrorsByItemIDKey key to extract them.\n\nAfter CloudKit applies all record changes, the operation calls acceptSharesCompletionBlock. When the closure executes, the server may continue processing residual tasks of the operation, such as creating the record zone in the user’s private database.\n\nThe following example demonstrates how to accept a share that CloudKit provides to your window scene delegate. It shows how to create the operation, configure it, and execute it in the correct container:\n\nfunc windowScene(_ windowScene: UIWindowScene, \n    userDidAcceptCloudKitShareWith cloudKitShareMetadata: CKShare.Metadata) {\n    \n    // Accept the share. If successful, schedule a fetch of the \n    // share's root record.\n    acceptShare(metadata: cloudKitShareMetadata) { [weak self] result in\n        switch result {\n        case .success(let recordID):\n            self?.fetchRootRecordAndNotifyObservers(recordID)\n        case .failure(let error):\n            // Handle the error...\n        }\n    }\n}\n    \nfunc acceptShare(metadata: CKShare.Metadata, \n    completion: @escaping (Result<CKRecord.ID, Error>) -> Void) {\n    \n    // Create a reference to the share's container so the operation\n    // executes in the correct context. \n    let container = CKContainer(identifier: metadata.containerIdentifier)\n    \n    // Create the operation using the metadata the caller provides.\n    let operation = CKAcceptSharesOperation(shareMetadatas: [metadata])\n        \n    var rootRecordID: CKRecord.ID!\n    // If CloudKit accepts the share, cache the root record's ID. \n    // The completion closure handles any errors.\n    operation.perShareCompletionBlock = { metadata, share, error in\n        if let _ = share, error == nil {\n            rootRecordID = hierarchicalRootRecordID \n        }\n    }\n\n\n    // If the operation fails, return the error to the caller.\n    // Otherwise, return the record ID of the share's root record.\n    operation.acceptSharesCompletionBlock = { error in\n        if let error = error {\n            completion(.failure(error))\n        } else {\n            completion(.success(rootRecordID))\n        }\n    }\n\n\n    // Set an appropriate QoS and add the operation to the\n    // container's queue to execute it.\n    operation.qualityOfService = .utility\n    container.add(operation)\n}\n\n\nTopics\nCreating a Share Accept Operation\ninit()\nCreates an operation for accepting shares.\ninit(shareMetadatas: [CKShare.Metadata])\nCreates an operation for accepting the specified shares.\nProcessing the Share Accept Results\nvar shareMetadatas: [CKShare.Metadata]?\nThe share metadatas to process.\nvar perShareCompletionBlock: ((CKShare.Metadata, CKShare?, Error?) -> Void)?\nThe block to execute as CloudKit processes individual shares.\nvar acceptSharesCompletionBlock: ((Error?) -> Void)?\nThe closure to execute when the operation finishes.\nInstance Properties\nvar acceptSharesResultBlock: ((Result<Void, Error>) -> Void)?\nvar perShareResultBlock: ((CKShare.Metadata, Result<CKShare, Error>) -> Void)?\nRelationships\nInherits From\nCKOperation\nSee Also\nShare Requests\nclass CKFetchShareMetadataOperation\nAn operation that fetches metadata for one or more shares.\nclass CKShare.Metadata\nAn object that describes a shared record’s metadata."
  },
  {
    "title": "CKFetchShareParticipantsOperation | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckfetchshareparticipantsoperation",
    "html": "Overview\n\nParticipants are a fundamental part of sharing in CloudKit. A participant provides information about a user and their participation in a share, which includes their identity, acceptance status, role, and permissions. The acceptance status manages the user’s visibilty of the shared records. The role and permissions control what actions the user can perform on those records.\n\nYou don’t create participants. Instead, create an instance of CKUserIdentity.LookupInfo for each user. Provide the user’s email address or phone number, and then use this operation to convert them into participants that you can add to a share. CloudKit limits the number of participants in a share to 100, and each participant must have an active iCloud account.\n\nNote\n\nUICloudSharingController provides a consistent and familiar experience for managing a share’s participants and their permissions. Only use this operation when you want to provide an app-specific approach.\n\nCloudKit queries iCloud for corresponding accounts as part of the operation. If it doesn’t find an account, the server updates the participant’s userIdentity to reflect that by setting the hasiCloudAccount property to false. CloudKit associates a participant with their iCloud account when they accept the share.\n\nAnyone with the URL of a public share can become a participant in that share. For a private share, the owner manages its participants. A participant can’t accept a private share unless the owner adds them first.\n\nTo run the operation, add it to the container’s operation queue. The operation executes its callbacks on a private serial queue.\n\nThe following example demonstrates how to create the operation, configure it, and then execute it using the default container’s operation queue:\n\nfunc fetchParticipants(for lookupInfos: [CKUserIdentity.LookupInfo], \n    completion: @escaping (Result<[CKShare.Participant], Error>) -> Void) {\n\n\n    var participants = [CKShare.Participant]()\n        \n    // Create the operation using the lookup objects\n    // that the caller provides to the method.\n    let operation = CKFetchShareParticipantsOperation(\n        userIdentityLookupInfos: lookupInfos)\n        \n    // Collect the participants as CloudKit generates them.\n    operation.shareParticipantFetchedBlock = { participant in\n        participants.append(participant)\n    }\n        \n    // If the operation fails, return the error to the caller.\n    // Otherwise, return the array of participants.\n    operation.fetchShareParticipantsCompletionBlock = { error in\n        if let error = error {\n            completion(.failure(error))\n        } else {\n            completion(.success(participants))\n        }\n    }\n        \n    // Set an appropriate QoS and add the operation to the\n    // container's queue to execute it.\n    operation.qualityOfService = .userInitiated\n    CKContainer.default().add(operation)\n}\n\n\nThe operation calls shareParticipantFetchedBlock once for each item you provide, and CloudKit returns the participant, or an error if it can’t generate a particpant. CloudKit also batches per-participant errors. If the operation completes with errors, it returns a partialFailure error. The error stores the individual errors in its userInfo dictionary. Use the CKPartialErrorsByItemIDKey key to extract them.\n\nTopics\nCreating an Operation\ninit()\nCreates an empty operation.\ninit(userIdentityLookupInfos: [CKUserIdentity.LookupInfo])\nCreates an operation for generating share participants from the specified user data.\nConfiguring the Operation\nvar userIdentityLookupInfos: [CKUserIdentity.LookupInfo]?\nThe user data for the participants.\nProcessing the Operation’s Results\nvar shareParticipantFetchedBlock: ((CKShare.Participant) -> Void)?\nThe closure to execute as the operation generates individual participants.\nDeprecated\nvar fetchShareParticipantsCompletionBlock: ((Error?) -> Void)?\nThe closure to execute when the operation finishes.\nInstance Properties\nvar fetchShareParticipantsResultBlock: ((Result<Void, Error>) -> Void)?\nvar perShareParticipantResultBlock: ((CKUserIdentity.LookupInfo, Result<CKShare.Participant, Error>) -> Void)?\nRelationships\nInherits From\nCKOperation\nSee Also\nParticipants\nclass CKShare.Participant\nAn object that describes a user’s participation in a share."
  },
  {
    "title": "publicPermission | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckshare/1640494-publicpermission",
    "html": "Discussion\n\nSetting this property’s value to be more permissive than CKShare.ParticipantPermission.none allows any user with the share’s URL to join. CloudKit removes all public participants when you save the share if you set the property’s value to CKShare.ParticipantPermission.none.\n\nThe default value is CKShare.ParticipantPermission.none\n\nSee Also\nConfiguring the Share\nfunc addParticipant(CKShare.Participant)\nAdds a participant to the share.\nfunc removeParticipant(CKShare.Participant)\nRemoves a participant from the share.\nclass CKShare.Participant\nAn object that describes a user’s participation in a share."
  },
  {
    "title": "CKShareTransferRepresentation | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksharetransferrepresentation",
    "html": "Topics\nCreating a transfer representation\ninit(exporter: (Item) -> CKShareTransferRepresentation<Item>.ExportedShare)\nCreates and initializes a transfer representation.\nAccessing transfer representation attributes\ntypealias CKShareTransferRepresentation.Body\nThe type of transfer representation for the share item.\nvar body: TransferRepresentation\nThe transfer representation for the share item.\nstruct CKShareTransferRepresentation.ExportedShare\nAn intermediate structure that returns an existing share or prepares a new one if it doesn’t exist.\nConfiguring a transfer representation\nfunc exportingCondition((Item) -> Bool) -> _ConditionalTransferRepresentation<CKShareTransferRepresentation<Item>>\nPrevents the system from exporting an item unless it meets the supplied condition.\nfunc suggestedFileName(String) -> TransferRepresentation<Self>\nProvides a filename to use if the receiver writes the item to storage.\nfunc visibility(TransferRepresentationVisibility) -> TransferRepresentation<Self>\nSpecifies the kinds of apps and processes that can see an item in transit.\nInstance Methods\nfunc suggestedFileName((Item) -> String?) -> TransferRepresentation<Self>\nRelationships\nConforms To\nTransferRepresentation\nSee Also\nCollaboration\nSharing CloudKit Data with Other iCloud Users\nCreate and share private CloudKit data with other users by implementing the sharing UI.\nSharing Core Data objects between iCloud users\nUse Core Data CloudKit to synchronize data between devices of an iCloud user and share data between different iCloud users.\nclass CKShare\nA specialized record type that manages a collection of shared records.\nclass CKAllowedSharingOptions\nAn object that controls participant access and permission options.\nclass CKSystemSharingUIObserver\nAn object the system uses to monitor changes in sharing.\nclass UICloudSharingController\nA view controller that presents standard screens for adding and removing people from a CloudKit share record.\nproperty list key CKSharingSupported\nA Boolean value that indicates your app supports CloudKit Sharing."
  },
  {
    "title": "CKNotification | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cknotification",
    "html": "Overview\n\nUse subclasses of CKNotification to extract data from push notifications that the system receives, or to fetch a container’s previous push notifications. In both cases, the object indicates the changed data.\n\nCKNotification is an abstract class. When you create a notification from a payload dictionary, the init(fromRemoteNotificationDictionary:) method returns an instance of the appropriate subclass. Similarly, when you fetch notifications from a container, you receive instances of a concrete subclass. CKNotification provides information about the push notification and its method of delivery. Subclasses contain specific data that provides the changes.\n\nTopics\nCreating a Notification\ninit?(fromRemoteNotificationDictionary: [AnyHashable : Any])\nCreates a new notification using the specified payload data.\nIdentifying the Notification\nvar notificationID: CKNotification.ID?\nThe notification’s ID.\nclass CKNotification.ID\nAn object that uniquely identifies a push notification that a container sends.\nvar notificationType: CKNotification.NotificationType\nThe type of event that generates the notification.\nenum CKNotification.NotificationType\nConstants that indicate the type of event that generates the push notification.\nvar containerIdentifier: String?\nThe ID of the container with the content that triggers the notification.\nGetting the Notification’s Status\nvar isPruned: Bool\nA Boolean value that indicates whether the system removes some push notification content before delivery.\nAccessing the Notification Info\nvar alertBody: String?\nThe notification’s alert body.\nDeprecated\nvar alertLocalizationKey: String?\nThe key that identifies the localized text for the alert body.\nDeprecated\nvar alertLocalizationArgs: [String]?\nThe fields for building a notification’s alert.\nDeprecated\nvar alertActionLocalizationKey: String?\nThe key that identifies the localized string for the notification’s action.\nDeprecated\nvar alertLaunchImage: String?\nThe filename of an image to use as a launch image.\nDeprecated\nvar soundName: String?\nThe name of the sound file to play when a notification arrives.\nDeprecated\nvar badge: NSNumber?\nThe value that the app icon’s badge displays.\nDeprecated\nvar category: String?\nThe name of the action group that corresponds to this notification.\nDeprecated\nvar subscriptionID: CKSubscription.ID?\nThe ID of the subscription that triggers the notification.\nvar subscriptionOwnerUserRecordID: CKRecord.ID?\nThe ID of the user record that creates the subscription that generates the push notification.\nvar title: String?\nThe notification’s title.\nDeprecated\nvar titleLocalizationKey: String?\nThe key that identifies the localized string for the notification’s title.\nDeprecated\nvar titleLocalizationArgs: [String]?\nThe fields for building a notification’s title.\nDeprecated\nvar subtitle: String?\nThe notification’s subtitle.\nDeprecated\nvar subtitleLocalizationKey: String?\nThe key that identifies the localized string for the notification’s subtitle.\nDeprecated\nvar subtitleLocalizationArgs: [String]?\nThe fields for building a notification’s subtitle.\nDeprecated\nRelationships\nInherits From\nNSObject\nConforms To\nSendable\nSee Also\nBase Objects\nclass CKSubscription\nAn abstract base class for subscriptions.\nclass CKDatabaseOperation\nThe abstract base class for operations that act upon databases in CloudKit."
  },
  {
    "title": "CKQueryNotification | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckquerynotification",
    "html": "Overview\n\nQuery subscriptions execute when a record that matches the subscription’s predicate changes, for example, when the user modifies a field’s value in the record. When CloudKit registers the change, it sends push notifications to the user’s devices to inform your app about the change. You can then fetch the changes and cache them on-device. When appropriate, CloudKit excludes the device where the change originates.\n\nYou configure a subscription’s notifications by setting it’s notificationInfo property. Do this before you save it to the server. A subscription generates either high-priority or medium-priority push notifications. CloudKit delivers medium-priority notifications to your app in the background. High-priority notifications are visual and the system displays them to the user. Visual notifications need the user’s permission. For more information, see Asking permission to use notifications.\n\nA subscription uses CKSubscription.NotificationInfo to configure its notifications. For background delivery, set only its shouldSendContentAvailable property to true. If you set any other property, CloudKit treats the notification as high-priority.\n\nNote\n\nTo receive silent push notifications, add the Background Modes capability to your Xcode project and select the “Background fetch” and “Remote notifications” options.\n\nDon’t rely on push notifications for changes because the system can coalesce them. CloudKit can omit data to keep the notification’s payload size under the APNs size limit. If you use desiredKeys to include extra data in the payload, the server removes that first. A notification’s isPruned property is true if CloudKit omits data.\n\nConsider notifications an indication of remote changes. Use databaseScope to determine which database contains the changed record. To fetch the changes, configure an instance of CKQueryOperation to match the subscription and then execute it in the database. CloudKit returns all records that match the predicate, including the changed record. Dispose of any records you cache on-device and use the operation’s results instead.\n\nYou don’t instantiate this class. Instead, implement application(_:didReceiveRemoteNotification:fetchCompletionHandler:) in your app delegate. Initialize CKNotification with the userInfo dictionary that CloudKit passes to the method. This returns an instance of the appropriate subclass. Use the notificationType property to determine the type. Then cast to that type to access type-specific properties and methods.\n\nTopics\nGetting the Database Scope\nvar databaseScope: CKDatabase.Scope\nThe type of database for the record zone.\nGetting the Notification Attributes\nvar queryNotificationReason: CKQueryNotification.Reason\nThe event that triggers the push notification.\nenum CKQueryNotification.Reason\nConstants that indicate the event that triggers the notification.\nGetting the Record Information\nvar recordID: CKRecord.ID?\nThe ID of the record that CloudKit creates, updates, or deletes.\nvar recordFields: [String : Any]?\nA dictionary of fields that have changes.\nRelationships\nInherits From\nCKNotification\nConforms To\nSendable\nSee Also\nPredicate-Driven Changes\nclass CKQuerySubscription\nA subscription that generates push notifications when CloudKit modifies records that match a predicate."
  },
  {
    "title": "CKDatabaseNotification | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckdatabasenotification",
    "html": "Overview\n\nDatabase subscriptions execute when changes happen in any of a database’s record zones, for example, when CloudKit saves a new record. When the subscription registers a change, it sends push notifications to the user’s devices to inform your app about the change. You can then fetch the changes and cache them on-device. When appropriate, CloudKit excludes the device where the change originates.\n\nYou configure a subscription’s notifications by setting it’s notificationInfo property. Do this before you save it to the server. A subscription generates either high-priority or medium-priority push notifications. CloudKit delivers medium-priority notifications to your app in the background. High-priority notifications are visual and the system displays them to the user. Visual notifications need the user’s permission. For more information, see Asking permission to use notifications.\n\nA subscription uses CKSubscription.NotificationInfo to configure its notifications. For background delivery, set only its shouldSendContentAvailable property to true. If you set any other property, CloudKit treats the notification as high-priority.\n\nNote\n\nTo receive silent push notifications, add the Background Modes capability to your Xcode project and select the “Background fetch” and “Remote notifications” options.\n\nDon’t rely on push notifications for specific changes because the system can coalesce them. CloudKit can omit data to keep the notification’s payload size under the APNs size limit. Consider notifications an indication of remote changes. Use databaseScope to determine which database has changes, and then CKFetchDatabaseChangesOperation to fetch those changes. A notification’s isPruned property is true if CloudKit omits data.\n\nYou don’t instantiate this class. Instead, implement application(_:didReceiveRemoteNotification:fetchCompletionHandler:) in your app delegate. Initialize CKNotification with the userInfo dictionary that CloudKit passes to the method. This returns an instance of the appropriate subclass. Use the notificationType property to determine the type. Then cast to that type to access type-specific properties and methods.\n\nTopics\nGetting the Database Scope\nvar databaseScope: CKDatabase.Scope\nThe type of database.\nRelationships\nInherits From\nCKNotification\nConforms To\nSendable\nSee Also\nDatabase Changes\nclass CKDatabaseSubscription\nA subscription that generates push notifications when CloudKit modifies records in a database.\nclass CKFetchDatabaseChangesOperation\nAn operation that fetches database changes."
  },
  {
    "title": "CKModifySubscriptionsOperation | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckmodifysubscriptionsoperation",
    "html": "Overview\n\nAfter you create or change the configuration of a subscription, use this operation to save those changes to the server. You can also use this operation to permanently delete subscriptions.\n\nIf you assign a handler to the completionBlock property, the operation calls it after it executes and passes it the results. Use the handler to perform any housekeeping tasks for the operation. The handler you specify should manage any failures, whether due to an error or an explicit cancellation.\n\nTopics\nCreating a Modify Subscriptions Operation\ninit(subscriptionsToSave: [CKSubscription]?, subscriptionIDsToDelete: [CKSubscription.ID]?)\nCreates an operation for saving and deleting the specified subscriptions.\ninit()\nCreates an empty modify subscriptions operation.\nConfiguring the Modify Subscriptions Operation\nvar subscriptionsToSave: [CKSubscription]?\nThe subscriptions to save to the database.\nvar subscriptionIDsToDelete: [CKSubscription.ID]?\nThe IDs of the subscriptions that you want to delete.\nProcessing the Modify Subscription Results\nvar modifySubscriptionsCompletionBlock: (([CKSubscription]?, [CKSubscription.ID]?, (Error)?) -> Void)?\nThe closure to execute after the operation modifies the subscriptions.\nDeprecated\nInstance Properties\nvar modifySubscriptionsResultBlock: ((Result<Void, Error>) -> Void)?\nvar perSubscriptionDeleteBlock: ((CKSubscription.ID, Result<Void, Error>) -> Void)?\nvar perSubscriptionSaveBlock: ((CKSubscription.ID, Result<CKSubscription, Error>) -> Void)?\nRelationships\nInherits From\nCKDatabaseOperation\nSee Also\nSubscription Management\nclass CKFetchSubscriptionsOperation\nAn operation for fetching subscriptions."
  },
  {
    "title": "CKServerChangeToken | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckserverchangetoken",
    "html": "Overview\n\nCloudKit uses server change tokens to record significant events in a database’s history, such as record creation, modification, and deletion. Using change tokens helps reduce the cost of a fetch operation — both the time to execute the fetch and the overall number of records it returns.\n\nYou don’t create change tokens. Instead, CKFetchDatabaseChangesOperation and CKFetchRecordZoneChangesOperation provide them during their execution and when they complete. Cache each token as you receive it, overwriting any previous token for the database or record zone you’re fetching from. Then, pass the cached token with your next fetch and CloudKit returns only the changes that occur after that point. Don’t infer any behavior or order from a token’s contents.\n\nThe change tokens that CKFetchDatabaseChangesOperation provides aren’t compatible with CKFetchRecordZoneChangesOperation and vice versa, so segregate them in your cache.\n\nChange tokens conform to NSSecureCoding and are safe to cache on-disk, as the following example shows:\n\nfunc writeToken(_ token: CKServerChangeToken, to url: URL) throws {\n    // Use a keyed archiver to securely encode the provided token.\n    let coder = NSKeyedArchiver(requiringSecureCoding: true)\n    coder.encode(token, forKey: \"token\")\n        \n    // Write the encoded data to disk. The caller provides the\n    // location as a file URL.\n    let data = coder.encodedData\n    try data.write(to: url)\n}\n    \nfunc readToken(at url: URL) throws -> CKServerChangeToken? {\n    // Create a Data instance with the contents of the file at\n    // the provided URL.\n    let data = try Data(contentsOf: url)\n        \n    // Use a keyed unarchiver to decode the token and return\n    // it to the caller.\n    let coder = try NSKeyedUnarchiver(forReadingFrom: data)\n    return coder.decodeObject(of: CKServerChangeToken.self, forKey: \"token\")\n}\n\n\nRelationships\nInherits From\nNSObject\nConforms To\nNSCopying\nNSSecureCoding\nSendable"
  },
  {
    "title": "CKRecordZoneSubscription | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckrecordzonesubscription",
    "html": "Overview\n\nSubscriptions track the creation, modification, and deletion of records in a database, and are fundamental in keeping data on the user’s device up to date. A subscription applies only to the user that creates it. When a subscription registers a change, such as CloudKit saving a new record, it sends push notifications to the user’s devices to inform your app about the change. You can then fetch the changes and cache them on-device. When appropriate, the server excludes the device where the change originates.\n\nNote\n\nYou don’t need to explicitly enable push notifications for your App ID to receive subscription notifications. Xcode automatically adds the entitlement when you enable the CloudKit capability. For more information, see Enabling CloudKit in Your App. To use silent push notifications, add the Background Modes capability in your Xcode project and then select the “Background fetch” and “Remote notifications” options.\n\nRecord zone subscriptions execute whenever a change happens in the record zone you specify when you create the subscription. You can further specialize the subscription by setting its recordType property to a specific record type. This limits the scope of the subscription to only track changes to records of that type and reduces the number of notifications it generates.\n\nNote\n\nOnly the private database supports record zone subscriptions. If you attempt to save a record zone subscription in a public or shared database, CloudKit returns an error.\n\nCreate any subscriptions on your app’s first launch. After you initialize a subscription, save it to the server using CKModifySubscriptionsOperation. When the operation completes, record that state on-device (in UserDefaults, for example). You can then check that state on subsequent launches to prevent unnecessary trips to the server.\n\nTo configure the notification that the subscription generates, set the subscription’s notificationInfo property. Because the system coalesces notifications, don’t rely on them for specific changes. CloudKit can omit data to keep the payload size under the APNs size limit. Consider notifications an indication of remote changes and use CKFetchRecordZoneChangesOperation to fetch the changed records. Server change tokens allow you to limit the fetch results to just the changes since your previous fetch.\n\nThe example below shows how to create a record zone subscription in the user’s private database, configure the notifications it generates — in this case, silent push notifications — and then save that subscription to the server:\n\n// Only proceed if the subscription doesn't already exist.\nguard !UserDefaults.standard.bool(forKey: \"didCreateFeedSubscription\") \n    else { return }\n        \n// Create a subscription that's scoped to a specific record zone. Provide\n// a subscription ID that's unique within the context of the user's \n// private database.\nlet subscription = CKRecordZoneSubscription(zoneID: recordZone.zoneID,\n                                            subscriptionID: \"feed-changes\")\n\n\n// Scope the subscription to just the 'FeedItem' record type.\nsubscription.recordType = \"FeedItem\"\n        \n// Configure the notification so that the system delivers it silently \n// and, therefore, doesn't require permission from the user.\nlet notificationInfo = CKSubscription.NotificationInfo()\nnotificationInfo.shouldSendContentAvailable = true\nsubscription.notificationInfo = notificationInfo\n        \n// Create an operation that saves the subscription to the server.\nlet operation = CKModifySubscriptionsOperation(\n    subscriptionsToSave: [subscription], subscriptionIDsToDelete: nil)\n\n\noperation.modifySubscriptionsCompletionBlock = { subscriptions, deleted, error in\n    if let error = error {\n        // Handle the error.\n    } else {\n        // Record that the system successfully creates the subscription\n        // to prevent unnecessary trips to the server in later launches.\n        UserDefaults.standard.setValue(true, forKey: \"didCreateFeedSubscription\")\n    }\n}\n        \n// Set an appropriate QoS and add the operation to the private\n// database's operation queue to execute it.\noperation.qualityOfService = .utility\nCKContainer.default().privateCloudDatabase.add(operation)\n\n\nTopics\nCreating a Zone-Based Subscription\ninit(zoneID: CKRecordZone.ID)\nCreates a subscription for all records in the specified record zone.\nDeprecated\ninit(zoneID: CKRecordZone.ID, subscriptionID: CKSubscription.ID)\nCreates a named subscription for all records in the specified record zone.\ninit(coder: NSCoder)\nCreates a zone-based subscription from a serialized instance.\nAccessing the Subscription Metadata\nvar recordType: CKRecord.RecordType?\nThe type of record that the subscription queries.\nvar zoneID: CKRecordZone.ID\nThe ID of the record zone that the subscription queries.\nRelationships\nInherits From\nCKSubscription\nConforms To\nNSCopying\nNSSecureCoding\nSendable\nSee Also\nRecord Zone Changes\nclass CKRecordZoneNotification\nA notification that triggers when the contents of a record zone change.\nclass CKFetchRecordZoneChangesOperation\nAn operation that fetches record zone changes."
  },
  {
    "title": "CKRecordZoneNotification | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckrecordzonenotification",
    "html": "Overview\n\nA record zone subscription executes when a user, or in certain scenarios, CloudKit, modifies a record in that zone, for example, when a field’s value changes in a record. When CloudKit registers the change, it sends push notifications to the user’s devices to inform your app about the change. You can then fetch the changes and cache them on-device. When appropriate, CloudKit excludes the device where the change originates.\n\nYou configure a subscription’s notifications by setting it’s notificationInfo property. Do this before you save it to the server. A subscription generates either high-priority or medium-priority push notifications. CloudKit delivers medium-priority notifications to your app in the background. High-priority notifications are visual and the system displays them to the user. Visual notifications need the user’s permission. For more information, see Asking permission to use notifications.\n\nA subscription uses CKSubscription.NotificationInfo to configure its notifications. For background delivery, set only its shouldSendContentAvailable property to true. If you set any other property, CloudKit treats the notification as high-priority.\n\nNote\n\nTo receive silent push notifications, add the Background Modes capability to your Xcode project and select the “Background fetch” and “Remote notifications” options.\n\nDon’t rely on push notifications for specific changes to records because the system can coalesce them. CloudKit can omit data to keep the notification’s payload size under the APNs size limit. Consider notifications an indication of remote changes. Use databaseScope to determine which database contains the changed record zone, and recordZoneID to determine which zone contains changed records. You can then fetch just those changes using CKFetchRecordZoneChangesOperation. A notification’s isPruned property is true if CloudKit omits data.\n\nYou don’t instantiate this class. Instead, implement application(_:didReceiveRemoteNotification:fetchCompletionHandler:) in your app delegate. Initialize CKNotification with the userInfo dictionary that CloudKit passes to the method. This returns an instance of the appropriate subclass. Use the notificationType property to determine the type. Then cast to that type to access type-specific properties and methods.\n\nTopics\nGetting the Record Zone ID\nvar recordZoneID: CKRecordZone.ID?\nThe ID of the record zone that has changes.\nGetting the Database Scope\nvar databaseScope: CKDatabase.Scope\nThe type of database for the record zone.\nRelationships\nInherits From\nCKNotification\nConforms To\nSendable\nSee Also\nRecord Zone Changes\nclass CKRecordZoneSubscription\nA subscription that generates push notifications when CloudKit modifies records in a specific record zone.\nclass CKFetchRecordZoneChangesOperation\nAn operation that fetches record zone changes."
  },
  {
    "title": "CKDatabaseSubscription | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckdatabasesubscription",
    "html": "Overview\n\nSubscriptions track the creation, modification, and deletion of records in a database, and are fundamental in keeping data on the user’s device up to date. A subscription applies only to the user that creates it. When a subscription registers a change, such as CloudKit saving a new record, it sends push notifications to the user’s devices to inform your app about the change. You can then fetch the changes and cache them on-device. When appropriate, the server excludes the device where the change originates.\n\nNote\n\nYou don’t need to explicitly enable push notifications for your App ID to receive subscription notifications. Xcode automatically adds the entitlement when you enable the CloudKit capability. For more information, see Enabling CloudKit in Your App. To use silent push notifications, add the Background Modes capability in your Xcode project and then select the “Background fetch” and “Remote notifications” options.\n\nA database subscription executes whenever a change occurs in a custom record zone that resides in the database where you save the subscription. This is important for the shared database because you don’t know what record zones exist in advance. The only exception to this is the default record zone in the user’s private database, which doesn’t participate in database subscriptions.\n\nYou can further specialize a database subscription by setting its recordType property to a specific record type. This limits the scope of the subscription to only track changes to records of that type and reduces the number of notifications it generates.\n\nNote\n\nOnly private and shared databases support database subscriptions. If you attempt to save a database subscription in the public database, CloudKit returns an error.\n\nCreate any subscriptions on your app’s first launch. After you initialize a subscription, save it to the server using CKModifySubscriptionsOperation. After the operation completes, record that state on-device (in UserDefaults, for example). You can then check that state on subsequent launches to prevent unnecessary trips to the server.\n\nTo configure the notification that the subscription generates, set the subscription’s notificationInfo property. Because the system coalesces notifications, don’t rely on them for specific changes. CloudKit can omit data to keep the payload size under the APNs size limit. Consider notifications an indication of remote changes, and use CKFetchDatabaseChangesOperation to fetch the record zones that contain those changes. After you have the record zones, use CKFetchRecordZoneChangesOperation to fetch the changed records in each zone. Server change tokens allow you to limit the fetch results to just the changes since your previous fetch.\n\nThe example below shows how to create a database subscription in the user’s private database, configure the notifications it generates — in this case, silent push notifications — and then save that subscription to the server:\n\n// Only proceed if the subscription doesn't already exist.\nguard !UserDefaults.standard.bool(forKey: \"didCreateFeedSubscription\") \n    else { return }\n        \n// Create a subscription with an ID that's unique within the scope of \n// the user's private database.\nlet subscription = CKDatabaseSubscription(subscriptionID: \"feed-changes\")\n\n\n// Scope the subscription to just the 'FeedItem' record type.\nsubscription.recordType = \"FeedItem\"\n        \n// Configure the notification so that the system delivers it silently \n// and, therefore, doesn't require permission from the user.\nlet notificationInfo = CKSubscription.NotificationInfo()\nnotificationInfo.shouldSendContentAvailable = true\nsubscription.notificationInfo = notificationInfo\n        \n// Create an operation that saves the subscription to the server.\nlet operation = CKModifySubscriptionsOperation(\n    subscriptionsToSave: [subscription], subscriptionIDsToDelete: nil)\n\n\noperation.modifySubscriptionsCompletionBlock = { subscriptions, deleted, error in\n    if let error = error {\n        // Handle the error.\n    } else {\n        // Record that the system successfully creates the subscription\n        // to prevent unnecessary trips to the server in later launches.\n        UserDefaults.standard.setValue(true, forKey: \"didCreateFeedSubscription\")\n    }\n}\n        \n// Set an appropriate QoS and add the operation to the private\n// database's operation queue to execute it.\noperation.qualityOfService = .utility\nCKContainer.default().privateCloudDatabase.add(operation)\n\n\nTopics\nCreating a Database Subscription\ninit()\nCreates an empty database subscription.\nDeprecated\ninit(subscriptionID: CKSubscription.ID)\nCreates a named subscription for all records in a database.\ninit(coder: NSCoder)\nCreates a database subscription from a serialized instance.\nAccessing the Subscription Metadata\nvar recordType: CKRecord.RecordType?\nThe type of record that the subscription queries.\nRelationships\nInherits From\nCKSubscription\nConforms To\nNSCopying\nNSSecureCoding\nSendable\nSee Also\nDatabase Changes\nclass CKDatabaseNotification\nA notification that triggers when the contents of a database change.\nclass CKFetchDatabaseChangesOperation\nAn operation that fetches database changes."
  },
  {
    "title": "CKRecordValueProtocol | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckrecordvalueprotocol",
    "html": "Relationships\nConforming Types\nArray\nConforms when Element conforms to CKRecordValueProtocol.\nBool\nCKAsset\nCKRecord.Reference\nCLLocation\nData\nDate\nDouble\nFloat\nInt\nInt16\nInt32\nInt64\nInt8\nNSArray\nNSData\nNSDate\nNSNumber\nNSString\nString\nUInt\nUInt16\nUInt32\nUInt64\nUInt8\nSee Also\nAccessing the Record’s Fields\nfunc object(forKey: CKRecord.FieldKey) -> (__CKRecordObjCValue)?\nReturns the object that the record stores for the specified key.\nsubscript(String) -> __CKRecordObjCValue?\nReturns the object that the record stores for the specified key.\nsubscript(CKRecord.FieldKey) -> (__CKRecordObjCValue)?\nReturns the object that the record stores for the specified key.\nfunc setObject((__CKRecordObjCValue)?, forKey: CKRecord.FieldKey)\nStores an object in the record using the specified key.\nfunc allKeys() -> [CKRecord.FieldKey]\nReturns an array of the record’s keys.\nfunc changedKeys() -> [CKRecord.FieldKey]\nReturns an array of keys with recent changes to their values.\nfunc makeIterator() -> CKRecordKeyValueIterator\nReturns an iterator of the record’s key-value pairs.\nstruct CKRecordKeyValueIterator\nAn iterator of the record’s key-value pairs.\nprotocol CKRecordKeyValueSetting\nA protocol for managing the key-value pairs of a CloudKit record.\ntypealias CKRecordValue\nA data type for objects that CloudKit stores on the server.\ntypealias CKRecord.Iterator\nA data type that CloudKit uses to iterate over a record’s key-value pairs.\ntypealias CKRecord.Element\nA type that represents a single key-value pair from a record."
  },
  {
    "title": "CKFetchRecordZoneChangesOperation | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckfetchrecordzonechangesoperation",
    "html": "Overview\n\nUse this operation to fetch record changes in one or more record zones, such as those that occur during record creation, modification, and deletion. You provide a configuration object for each record zone to query for changes. The configuration contains a server change token, which is an opaque pointer to a specific change in the zone’s history. CloudKit returns only the changes that occur after that point. For the first time you fetch a record zone’s changes, or to refetch all changes in a zone’s history, use nil instead.\n\nNote\n\nOnly private and shared databases support this operation. If you attempt to execute this operation in the public database, CloudKit returns an error.\n\nCloudKit processes the record zones in succession, and returns the changes for each zone in batches. Each batch yields a new change token. If all batches return without error, the operation issues a final change token for that zone. The change tokens conform to NSSecureCoding and are safe to cache on-disk. This operation’s tokens aren’t compatible with CKFetchDatabaseChangesOperation so you should segregate them in your app’s cache. Don’t infer behavior or order from the tokens’ contents.\n\nIf you create record zones in the private database, fetch all changes the first time the app launches. Cache the results on-device and use CKRecordZoneSubscription to subscribe to future changes. Fetch those changes on receipt of the push notifications the subscription generates. If you use the shared database, subscribe to changes with CKDatabaseSubscription instead. When a user participates in sharing, CloudKit adds and removes record zones. This means you don’t know in advance which zones exist in the shared database. Use CKFetchDatabaseChangesOperation to fetch shared record zones on receipt of the subscription’s push notifications. Then fetch the changes in those zones using this operation. Regardless of which database you use, it’s not necessary to perform fetches each time your app launches, or to schedule fetches at regular intervals.\n\nTo run the operation, add it to the corresponding database’s operation queue. The operation executes its callbacks on a private serial queue.\n\nThe following example demonstrates how to create the operation, configure its callbacks, and execute it. For brevity, it omits the delete and operation completion callbacks.\n\n// Create a dictionary that maps a record zone ID to its\n// corresponding zone configuration. The configuration\n// contains the server change token from the most recent \n// fetch of that record zone.\nvar configurations = \n    [CKRecordZone.ID: CKFetchRecordZoneChangesOperation.ZoneConfiguration]()\nrecordZoneIDs.forEach { recordZoneID in\n    let config = CKFetchRecordZoneChangesOperation.ZoneConfiguration()\n    config.previousServerChangeToken = tokenCache[recordZoneID]\n    configurations[recordZoneID] = config\n}\n\n\n// Create a fetch operation with an array of record zone IDs\n// and the zone configuration mapping dictionary.\nlet operation = CKFetchRecordZoneChangesOperation(\n    recordZoneIDs: recordZoneIDs, configurationsByRecordZoneID: configurations)\n\n\n// Process each changed record as CloudKit returns it.\noperation.recordChangedBlock = { record in\n    processRecord(record)\n}\n\n\n// Cache the change tokens that CloudKit provides as\n// the operation runs.\noperation.recordZoneChangeTokensUpdatedBlock = { recordZoneID, token, _ in\n    tokenCache[recordZoneID] = token\n}\n\n\n// If the fetch for the current record zone completes\n// successfully, cache the final change token.\noperation.recordZoneFetchCompletionBlock = { recordZoneID, token, _, _, error in\n    if let error = error {\n        // Handle the error.\n    } else {\n        tokenCache[recordZoneID] = token\n    }\n}\n\n\n// Set an appropriate QoS and add the operation to the shared\n// database's operation queue to execute it.\noperation.qualityOfService = .utility\nCKContainer.default().sharedCloudDatabase.add(operation)\n\n\nTopics\nCreating a Zone Change Operation\ninit(recordZoneIDs: [CKRecordZone.ID]?, configurationsByRecordZoneID: [CKRecordZone.ID : CKFetchRecordZoneChangesOperation.ZoneConfiguration]?)\nCreates an operation for fetching record zone changes.\ninit()\nCreates an empty fetch record zone changes operation.\nConfiguring the Zone Change Operation\nvar configurationsByRecordZoneID: [CKRecordZone.ID : CKFetchRecordZoneChangesOperation.ZoneConfiguration]?\nA dictionary of configurations for fetching change operations by zone identifier.\nclass CKFetchRecordZoneChangesOperation.ZoneConfiguration\nA configuration object that describes the information to fetch from a record zone.\nvar fetchAllChanges: Bool\nA Boolean value that indicates whether to send repeated requests to the server.\nvar recordZoneIDs: [CKRecordZone.ID]?\nThe IDs of the record zones that contain the records to fetch.\nProcessing the Zone Change Operation Results\nvar recordChangedBlock: ((CKRecord) -> Void)?\nThe closure to execute with the contents of a changed record.\nDeprecated\nvar recordWithIDWasDeletedBlock: ((CKRecord.ID, CKRecord.RecordType) -> Void)?\nThe closure to execute when a record no longer exists.\nvar recordZoneChangeTokensUpdatedBlock: ((CKRecordZone.ID, CKServerChangeToken?, Data?) -> Void)?\nThe closure to execute when the change token updates.\nvar recordZoneFetchCompletionBlock: ((CKRecordZone.ID, CKServerChangeToken?, Data?, Bool, Error?) -> Void)?\nThe closure to execute when a record zone’s fetch finishes.\nvar fetchRecordZoneChangesCompletionBlock: ((Error?) -> Void)?\nThe closure to execute when the operation finishes.\nDeprecated\nDeprecated Symbols\nReview unsupported symbols and their replacements.\nInstance Properties\nvar fetchRecordZoneChangesResultBlock: ((Result<Void, Error>) -> Void)?\nvar recordWasChangedBlock: ((CKRecord.ID, Result<CKRecord, Error>) -> Void)?\nvar recordZoneFetchResultBlock: ((CKRecordZone.ID, Result<(serverChangeToken: CKServerChangeToken, clientChangeTokenData: Data?, moreComing: Bool), Error>) -> Void)?\nRelationships\nInherits From\nCKDatabaseOperation\nSee Also\nRecord Zone Changes\nclass CKRecordZoneSubscription\nA subscription that generates push notifications when CloudKit modifies records in a specific record zone.\nclass CKRecordZoneNotification\nA notification that triggers when the contents of a record zone change."
  },
  {
    "title": "CKQueryOperation | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckqueryoperation",
    "html": "Overview\n\nA CKQueryOperation object is a concrete operation that you can use to execute queries. A query operation applies query parameters to the specified database and record zone, delivering any matching records asynchronously to the handlers that you provide.\n\nTo perform a new search:\n\nInitialize a CKQueryOperation object with a CKQuery object that contains the search criteria and sorting information for the records you want.\n\nAssign a handler to the queryCompletionBlock property so that you can process the results and execute the operation.\n\nIf the search yields many records, the operation object may deliver a portion of the total results to your blocks immediately, along with a cursor for obtaining the remaining records. Use the cursor to initialize and execute a separate CKQueryOperation instance when you’re ready to process the next batch of results.\n\nOptionally, configure the results by specifying values for the resultsLimit and desiredKeys properties.\n\nPass the query operation object to the add(_:) method of the target database to execute the operation.\n\nCloudKit restricts queries to the records in a single record zone. For new queries, you specify the zone when you initialize the query operation object. For cursor-based queries, the cursor contains the zone information. To search for records in multiple zones, you must create a separate CKQueryOperation object for each zone you want to search, although you can initialize each of them with the same CKQuery object.\n\nIf you assign a handler to the operation’s completionBlock property, the operation calls it after it executes and returns any results. Use a handler to perform housekeeping tasks for the operation, but don’t use it to process the results of the operation. The handler you provide should manage any failures, whether due to an error or an explicit cancellation.\n\nTopics\nCreating a Query Operation\ninit(query: CKQuery)\nCreates an operation that searches for records in the specified record zone.\ninit(cursor: CKQueryOperation.Cursor)\nCreates an operation with additional results from a previous search.\ninit()\nCreates an empty query operation.\nConfiguring the Query Operation\nvar query: CKQuery?\nThe query for the search.\nvar cursor: CKQueryOperation.Cursor?\nThe cursor for continuing the search.\nclass CKQueryOperation.Cursor\nAn object that marks the stopping point for a query and the starting point for retrieving the remaining results.\nvar zoneID: CKRecordZone.ID?\nThe ID of the record zone that contains the records to search.\nvar resultsLimit: Int\nThe maximum number of records to return at one time.\nclass let maximumResults: Int\nA constant value that represents the maximum number of results CloudKit retrieves.\nvar desiredKeys: [CKRecord.FieldKey]?\nThe fields of the records to fetch.\nProcessing the Query Results\nvar recordFetchedBlock: ((CKRecord) -> Void)?\nThe closure to execute when a record becomes available.\nDeprecated\nvar queryCompletionBlock: ((CKQueryOperation.Cursor?, Error?) -> Void)?\nThe closure to execute after CloudKit retrieves all of the records.\nInstance Properties\nvar queryResultBlock: ((Result<CKQueryOperation.Cursor?, Error>) -> Void)?\nvar recordMatchedBlock: ((CKRecord.ID, Result<CKRecord, Error>) -> Void)?\nRelationships\nInherits From\nCKDatabaseOperation\nSee Also\nQueries\nclass CKQuery\nA query that describes the criteria to apply when searching for records in a database.\nclass CKLocationSortDescriptor\nAn object for sorting records that contain location data."
  },
  {
    "title": "CKModifyRecordZonesOperation | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckmodifyrecordzonesoperation",
    "html": "Overview\n\nAfter you create one or more record zones, use this operation to save those zones to the database. You can also use the operation to delete record zones and their records.\n\nIf you assign a handler to the completionBlock property of the operation, CloudKit calls the handler after the operation executes and returns its results. Use the handler to perform housekeeping tasks for the operation, but don’t use it to process the results of the operation. The handler you provide should manage any failures of the operation, whether due to an error or an explicit cancellation.\n\nTopics\nCreating a Modify Zones Operation\ninit(recordZonesToSave: [CKRecordZone]?, recordZoneIDsToDelete: [CKRecordZone.ID]?)\nCreates an operation for modifying the specified record zones.\ninit()\nCreates an empty modify record zones operation.\nConfiguring the Modify Zones Operation\nvar recordZonesToSave: [CKRecordZone]?\nThe record zones to save to the database.\nvar recordZoneIDsToDelete: [CKRecordZone.ID]?\nThe IDs of the record zones to delete permanently from the database.\nProcessing the Modify Zones Results\nvar modifyRecordZonesCompletionBlock: (([CKRecordZone]?, [CKRecordZone.ID]?, Error?) -> Void)?\nThe closure to execute after CloudKit modifies all of the record zones.\nInstance Properties\nvar modifyRecordZonesResultBlock: ((Result<Void, Error>) -> Void)?\nvar perRecordZoneDeleteBlock: ((CKRecordZone.ID, Result<Void, Error>) -> Void)?\nvar perRecordZoneSaveBlock: ((CKRecordZone.ID, Result<CKRecordZone, Error>) -> Void)?\nRelationships\nInherits From\nCKDatabaseOperation\nSee Also\nTransactions\nclass CKModifyRecordsOperation\nAn operation that modifies one or more records."
  },
  {
    "title": "CKRecordZone.Capabilities | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckrecordzone/capabilities",
    "html": "Topics\nCreating Zone Capabilities\ninit(rawValue: UInt)\nCreates a set of capabilities for a record zone.\nZone Capabilities\nstatic var atomic: CKRecordZone.Capabilities\nA capability that allows atomic changes of multiple records.\nstatic var fetchChanges: CKRecordZone.Capabilities\nA capability for fetching only the changed records from a zone.\nstatic var sharing: CKRecordZone.Capabilities\nA capability for sharing a specific hierarchy of records.\nstatic var zoneWideSharing: CKRecordZone.Capabilities\nA capability for sharing the entire contents of a record zone.\nRelationships\nConforms To\nOptionSet\nSendable\nSee Also\nGetting the Zone Attributes\nvar zoneID: CKRecordZone.ID\nThe unique ID of the zone.\nvar capabilities: CKRecordZone.Capabilities\nThe capabilities that the zone supports."
  },
  {
    "title": "default() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckrecordzone/1514919-default",
    "html": "Discussion\n\nAlways use this method to retrieve the default zone for a database. You can use the returned object to specify the default zone for either the public or private database of a container. You don’t need to save the returned zone object before using it. The owner of the zone is CKOwnerDefaultName, which corresponds to the current user.\n\nThe default zone of a database is a convenient place to store and access records. If you don’t explicitly assign a zone to a record, CloudKit puts the record in the default zone.\n\nThe disadvantage of using the default zone for storing records is that it doesn’t have any special capabilities. You can’t save a group of records to iCloud atomically in the default zone. Similarly, you can’t use a CKFetchRecordChangesOperation object on records in the default zone."
  },
  {
    "title": "capabilities | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckrecordzone/1515194-capabilities",
    "html": "Discussion\n\nThe server determines the capabilities of the zone and sets the value of this property when you save the record zone. Always check this property before performing tasks that require a specific capability.\n\nDefault zones don’t support any special capabilities. Custom zones in a private database support the options that CKRecordZone.Capabilities provides.\n\nSee Also\nGetting the Zone Attributes\nvar zoneID: CKRecordZone.ID\nThe unique ID of the zone.\nstruct CKRecordZone.Capabilities\nThe capabilities that a record zone supports."
  },
  {
    "title": "zoneID | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckrecordzone/1514917-zoneid",
    "html": "Discussion\n\nThe zone ID contains the name of the zone and the name of the user who owns the zone. Use this property to access both of those values.\n\nSee Also\nGetting the Zone Attributes\nvar capabilities: CKRecordZone.Capabilities\nThe capabilities that the zone supports.\nstruct CKRecordZone.Capabilities\nThe capabilities that a record zone supports."
  },
  {
    "title": "CKError.Code.requestRateLimited | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckerror/code/requestratelimited",
    "html": "Discussion\n\nCheck for a CKErrorRetryAfterKey key in the userInfo dictionary of any CloudKit error that you receive. It's especially important to check for it if you receive any of these errors. Use the value of the CKErrorRetryAfterKey key as the number of seconds to wait before retrying this operation.\n\nSee Also\nError Codes\ncase accountTemporarilyUnavailable\nAn error that occurs when the user’s iCloud account is temporarily unavailable.\ncase alreadyShared\nAn error that occurs when CloudKit attempts to share a record with an existing share.\ncase assetFileModified\nAn error that occurs when the system modifies an asset while saving it.\ncase assetFileNotFound\nAn error that occurs when the system can’t find the specified asset.\ncase assetNotAvailable\nAn error that occurs when the system can’t access the specified asset.\ncase badContainer\nAn error that occurs when you use an unknown or unauthorized container.\ncase badDatabase\nAn error that occurs when the operation can’t complete for the specified database.\ncase batchRequestFailed\nAn error that occurs when the system rejects the entire batch of changes.\ncase changeTokenExpired\nAn error that occurs when the change token expires.\ncase constraintViolation\nAn error that occurs when the server rejects the request because of a unique constraint violation.\ncase incompatibleVersion\nAn error that occurs when the current app version is older than the oldest allowed version.\ncase internalError\nA nonrecoverable error that CloudKit encounters.\ncase invalidArguments\nAn error that occurs when the request contains invalid information.\ncase limitExceeded\nAn error that occurs when a request’s size exceeds the limit.\ncase managedAccountRestricted\nAn error that occurs when CloudKit rejects a request due to a managed-account restriction.\ncase missingEntitlement\nAn error that occurs when the app is missing a required entitlement.\ncase networkFailure\nAn error that occurs when a network is available, but CloudKit is inaccessible.\ncase networkUnavailable\nAn error that occurs when the network is unavailable.\ncase notAuthenticated\nAn error that occurs when the user is unauthenticated.\ncase operationCancelled\nAn error that occurs when an operation cancels.\ncase partialFailure\nAn error that occurs when an operation completes with partial failures.\ncase participantMayNeedVerification\nAn error that occurs when the user isn’t a participant of the share.\ncase permissionFailure\nAn error that occurs when the user doesn’t have permission to save or fetch data.\ncase quotaExceeded\nAn error that occurs when saving a record exceeds the user’s storage quota.\ncase referenceViolation\nAn error that occurs when CloudKit can’t find the target of a reference.\ncase serverRecordChanged\nAn error that occurs when CloudKit rejects a record because the server’s version is different.\ncase serverRejectedRequest\nAn error that occurs when CloudKit rejects the request.\ncase serverResponseLost\nAn error that occurs when CloudKit is unable to maintain the network connection and provide a response.\ncase serviceUnavailable\nAn error that occurs when CloudKit is unavailable.\ncase tooManyParticipants\nAn error that occurs when a share has too many participants.\ncase unknownItem\nAn error that occurs when the specified record doesn’t exist.\ncase userDeletedZone\nAn error that occurs when the user deletes a record zone using the Settings app.\ncase zoneBusy\nAn error that occurs when the server is too busy to handle the record zone operation.\ncase zoneNotFound\nAn error that occurs when the specified record zone doesn’t exist.\ncase resultsTruncated\nAn error that occurs when CloudKit truncates a query’s results.\nDeprecated"
  },
  {
    "title": "Obtaining an API Token for an iCloud Container | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/managing_icloud_containers_with_the_cloudkit_database_app/obtaining_an_api_token_for_an_icloud_container",
    "html": "Overview\n\nWith CloudKit, you can store data in iCloud and sync it across Apple devices. To access iCloud data from the web or other platforms, you can use CloudKit JS or CloudKit Web Services after obtaining a token.\n\nSelect API Access for Your Container\n\nUse your web browser to access the CloudKit Database app:\n\nSign in to the CloudKit Console at https://icloud.developer.apple.com/.\n\nSelect the CloudKit Database app.\n\nIn the top section, choose your app’s container from the list.\n\nIn the Settings section on the left, select Tokens & Keys.\n\nCreate the API Token\n\nTo obtain your container’s API token:\n\nFrom the Tokens & Keys section for your container, click the New API Token button. The detail area in the right panel shows an entry form for the new token.\n\nEnter the name for the API token.\n\nTo specify a custom URL to load after the user signs in using their Apple ID, choose URL Redirect and http:// from the Sign in Callback field and enter a custom URL.\n\nTo restrict the domains that can access your app’s container using CloudKit web services, choose \"Only the following domain(s) from the Allowed Origins field\", and enter a domain.\n\nTo add a description, type it in the Notes field.\n\nClick the Save Changes button.\n\nSee Also\nContainer Management\nInspecting and Editing an iCloud Container’s Schema\nReview and edit the schema for your app’s container using the CloudKit Database app.\nHandling an iCloud Container’s Data\nInspect and manage your app’s iCloud container data using the CloudKit Database app.\nDeploying an iCloud Container’s Schema\nReset your container’s state during development and deploy your container’s schema to production."
  },
  {
    "title": "CKError.Code.serviceUnavailable | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckerror/code/serviceunavailable",
    "html": "See Also\nError Codes\ncase accountTemporarilyUnavailable\nAn error that occurs when the user’s iCloud account is temporarily unavailable.\ncase alreadyShared\nAn error that occurs when CloudKit attempts to share a record with an existing share.\ncase assetFileModified\nAn error that occurs when the system modifies an asset while saving it.\ncase assetFileNotFound\nAn error that occurs when the system can’t find the specified asset.\ncase assetNotAvailable\nAn error that occurs when the system can’t access the specified asset.\ncase badContainer\nAn error that occurs when you use an unknown or unauthorized container.\ncase badDatabase\nAn error that occurs when the operation can’t complete for the specified database.\ncase batchRequestFailed\nAn error that occurs when the system rejects the entire batch of changes.\ncase changeTokenExpired\nAn error that occurs when the change token expires.\ncase constraintViolation\nAn error that occurs when the server rejects the request because of a unique constraint violation.\ncase incompatibleVersion\nAn error that occurs when the current app version is older than the oldest allowed version.\ncase internalError\nA nonrecoverable error that CloudKit encounters.\ncase invalidArguments\nAn error that occurs when the request contains invalid information.\ncase limitExceeded\nAn error that occurs when a request’s size exceeds the limit.\ncase managedAccountRestricted\nAn error that occurs when CloudKit rejects a request due to a managed-account restriction.\ncase missingEntitlement\nAn error that occurs when the app is missing a required entitlement.\ncase networkFailure\nAn error that occurs when a network is available, but CloudKit is inaccessible.\ncase networkUnavailable\nAn error that occurs when the network is unavailable.\ncase notAuthenticated\nAn error that occurs when the user is unauthenticated.\ncase operationCancelled\nAn error that occurs when an operation cancels.\ncase partialFailure\nAn error that occurs when an operation completes with partial failures.\ncase participantMayNeedVerification\nAn error that occurs when the user isn’t a participant of the share.\ncase permissionFailure\nAn error that occurs when the user doesn’t have permission to save or fetch data.\ncase quotaExceeded\nAn error that occurs when saving a record exceeds the user’s storage quota.\ncase referenceViolation\nAn error that occurs when CloudKit can’t find the target of a reference.\ncase requestRateLimited\nAn error that occurs when CloudKit rate-limits requests.\ncase serverRecordChanged\nAn error that occurs when CloudKit rejects a record because the server’s version is different.\ncase serverRejectedRequest\nAn error that occurs when CloudKit rejects the request.\ncase serverResponseLost\nAn error that occurs when CloudKit is unable to maintain the network connection and provide a response.\ncase tooManyParticipants\nAn error that occurs when a share has too many participants.\ncase unknownItem\nAn error that occurs when the specified record doesn’t exist.\ncase userDeletedZone\nAn error that occurs when the user deletes a record zone using the Settings app.\ncase zoneBusy\nAn error that occurs when the server is too busy to handle the record zone operation.\ncase zoneNotFound\nAn error that occurs when the specified record zone doesn’t exist.\ncase resultsTruncated\nAn error that occurs when CloudKit truncates a query’s results.\nDeprecated"
  },
  {
    "title": "Deploying an iCloud Container’s Schema | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/managing_icloud_containers_with_the_cloudkit_database_app/deploying_an_icloud_container_s_schema",
    "html": "Overview\n\nDuring initial development of your app, you create your schema and add records for testing in the development environment. Apps in the App Store can access only the production environment. Before you publish your app, you must deploy the development schema to the production environment to copy over its record types, fields, and indexes.\n\nAs you continue to develop your app, you can add record types and fields to the development environment. To prevent conflicts, you can’t delete record types or fields that are already in production. Every time you deploy the development schema, its additive changes merge into the production schema. For testing purposes, your app in development can access either the development or the production environment.\n\nReset the Development Environment\n\nYou can reset the development environment in the CloudKit Database app between runs of your app to remove all records. If your schema isn’t in production, resetting the development environment also deletes all record types. Otherwise, the development schema reverts to the state of the production environment.\n\nTo reset the development environment to the current state of production:\n\nSign in to CloudKit Console at https://icloud.developer.apple.com/.\n\nSelect the CloudKit Database app.\n\nIn the top section, choose your app’s container from the list.\n\nOn the left of the screen, select Reset Environment.\n\nIn the dialog that appears, read the warning, select the checkbox, and click Reset.\n\nDeploy the Development Schema\n\nAfter you finalize your schema and test your app in the development environment, you’re ready to deploy the schema to production in the CloudKit Database app. Deploying the schema copies its record types, fields, and indexes to the production environment, but doesn’t copy any records. After deployment, you can populate the production environment with records as necessary, and test your app there.\n\nNote\n\nTo deploy a schema, you must have privileges to edit the production environment. If you’re an individual, you’re the team administrator and have those privileges. If you’re a member of a team, ask your team administrator to perform these steps for you, or to grant you the administrator privilege.\n\nTo deploy the development schema to production:\n\nSign in to CloudKit Console at https://icloud.developer.apple.com/.\n\nSelect the CloudKit Database app.\n\nIn the top section, choose your container from the list.\n\nOn the left, select Deploy Schema Changes.\n\nReview the pending deployment changes and click Deploy.\n\nSee Also\nContainer Management\nInspecting and Editing an iCloud Container’s Schema\nReview and edit the schema for your app’s container using the CloudKit Database app.\nHandling an iCloud Container’s Data\nInspect and manage your app’s iCloud container data using the CloudKit Database app.\nObtaining an API Token for an iCloud Container\nGenerate an API token to access CloudKit web services or use CloudKit JS."
  },
  {
    "title": "Handling an iCloud Container’s Data | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/managing_icloud_containers_with_the_cloudkit_database_app/handling_an_icloud_container_s_data",
    "html": "Overview\n\nYou can use the CloudKit Database app to inspect data within a public iCloud container. If you develop using the same iCloud account to store private data, you can also use the CloudKit Database app to inspect and edit private data.\n\nDon’t use the CloudKit Database app as a general data editor. Although you can create, modify, and delete records using the CloudKit Dashboard app, the intent of this functionality is to help you debug your schema during the design phase.\n\nFind and Inspect Records\n\nUse the CloudKit Database app to search for records of a particular record type within a zone of the chosen database. To search for records in this way, you must first add a queryable index for that record type’s recordName. For more information, see the Enable Querying for Your Record Type section of Inspecting and Editing an iCloud Container’s Schema.\n\nTo search for records of a record type:\n\nFrom the CloudKit Database app, select your app’s container.\n\nSelect Records from the Data section on the left.\n\nIn the pane on the right, select the database, zone, and record type to view records for.\n\nOptionally, select fields to reduce the amount of data that returns in the results.\n\nClick the Add button (+) to add other filters to the request.\n\nClick the Query Records button, and view the results.\n\nExpand a record’s disclosure triangle to view its details.\n\nNote\n\nIf you get the error, “Field recordName is not marked queryable,” see the Enable Querying for Your Record Type section of Inspecting and Editing an iCloud Container’s Schema.\n\nCreate a Record\n\nYou can create records in public databases in either the development or production environment. If your developer account is also an iCloud account, you can do the same for your private database.\n\nTo create a new record:\n\nFrom the CloudKit Database app, select your app’s container.\n\nSelect Records from the Data section on the left.\n\nClick the Add button (+) at the top of the page, and choose Create New Record. The New Record dialog appears on the right. The new record has a random UUID that CloudKit assigns as the record name.\n\nSelect the database, type, and zone you’re creating a record for.\n\nEnter values in the Fields area, and click Save.\n\nModify or Delete a Record\n\nIn the development and production environment, you can modify and delete records in public databases. If your developer account is also an iCloud account, you can do the same for your private or shared databases.\n\nTo modify or delete an existing record:\n\nFrom the CloudKit Database app, select your app’s container.\n\nSelect Records from the Data section on the left.\n\nIn the pane on the right, select the database, zone, and record type to view records for.\n\nOptionally, select fields to reduce the amount of data that returns in the results.\n\nClick the Add button (+) to add other filters to the request.\n\nClick the Query Records button to search for records that match your criteria.\n\nIn the results list, select the record you want to edit or delete. Its fields appear in the Custom Fields area in the Record Details dialog at the right.\n\nTo edit a record, enter new values in the text fields and click Save.\n\nTo delete a record, click the Delete button. Then, in the dialog that appears, click Delete to confirm the deletion.\n\nSee Also\nContainer Management\nInspecting and Editing an iCloud Container’s Schema\nReview and edit the schema for your app’s container using the CloudKit Database app.\nDeploying an iCloud Container’s Schema\nReset your container’s state during development and deploy your container’s schema to production.\nObtaining an API Token for an iCloud Container\nGenerate an API token to access CloudKit web services or use CloudKit JS."
  },
  {
    "title": "CKOperation | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckoperation",
    "html": "Overview\n\nAll CloudKit operations descend from CKOperation, which provides the infrastructure for executing tasks in one of your app’s containers. Don’t subclass or create instances of this class directly. Instead, create instances of one of its concrete subclasses.\n\nUse the properties of this class to configure the behavior of the operation before submitting it to a queue or executing it directly. CloudKit operations involve communicating with the iCloud servers to send and receive data. You can use the properties of this class to configure the behavior of those network requests to ensure the best performance for your app.\n\nImportant\n\nCKOperation objects have a default quality of service level of QualityOfService.default (see qualityOfService). Operations with this service level are discretionary, and the system schedules them for an optimal time according to battery level and other factors. On iPhone, discretionary activities pause when the device is in Low Power Mode. For information about quality of service levels, see Prioritize Work with Quality of Service Classes in Energy Efficiency Guide for iOS Apps and Prioritize Work at the Task Level in Energy Efficiency Guide for Mac Apps.\n\nLong-Lived Operations\n\nA long-lived operation is an operation that continues to run after the user closes the app. To specify a long-lived operation, set isLongLived to true, provide a completion handler, and execute the operation. To get the identifiers of all running long-lived operations, use the fetchAllLongLivedOperationIDs(completionHandler:) method that CKContainer provides. To get a specific long-lived operation, use the fetchLongLivedOperation(withID:completionHandler:) method. Make sure you set the completion handler of a long-lived operation before you execute it so that the system can notify you when it completes and you can process the results. Do not execute an operation, change it to long-lived, and execute it again as a long-lived operation.\n\ncontainer.fetchAllLongLivedOperationIDs(completionHandler: { (operationIDs, error) in\n    if let error = error {\n        print(\"Error fetching long lived operations: \\(error)\")\n        // Handle error\n        return\n    }\n    guard let identifiers = operationIDs else { return }\n    for operationID in identifiers {\n        container.fetchLongLivedOperation(withID: operationID, completionHandler: { (operation, error) in\n            if let error = error {\n                print(\"Error fetching operation: \\(operationID)\\n\\(error)\")\n                // Handle error\n                return\n            }\n            guard let operation = operation else { return }\n            // Add callback handlers to operation\n            container.add(operation)\n        })\n    }\n})\n\n\nThe following is the typical life cycle of a long-lived operation:\n\nThe app creates a long-lived operation and executes it.\n\nThe daemon starts saving and sending the callbacks to the running app.\n\nThe app exits.\n\nThe daemon continues running the long-lived operation and saves the callbacks.\n\nThe app launches and fetches the long-lived operation.\n\nIf the operation is running or if it completed within the previous 24 hours, the daemon returns a proxy for the long-lived operation. If the operation completed more than 24 hours previously, the daemon may stop returning it in fetch requests.\n\nThe app runs the long-lived operation again.\n\nThe daemon sends the app all the saved callbacks (it doesn’t actually rerun the operation), and continues saving the callbacks and sending them to the running app.\n\nThe app receives the completion callback or the app cancels the operation.\n\nThe daemon stops including the operation in future fetch results.\n\nTopics\nCreating an Operation\ninit()\nCreates an operation.\nIdentifying the Operation\nvar operationID: CKOperation.ID\nA unique identifier for a long-lived operation.\ntypealias CKOperation.ID\nA type that represents the ID of an operation.\nManaging the Operation's Configuration\nvar configuration: CKOperation.Configuration!\nThe operation’s configuration.\nclass CKOperation.Configuration\nAn object that describes how a CloudKit operation behaves.\nvar group: CKOperationGroup?\nThe operation’s group.\nvar longLivedOperationWasPersistedBlock: (() -> Void)?\nThe closure to execute when the server begins to store callbacks for the long-lived operation.\nDeprecated\nDeprecated Symbols\nReview unsupported symbols and their replacements.\nRelationships\nInherits From\nOperation"
  },
  {
    "title": "Inspecting and Editing an iCloud Container’s Schema | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/managing_icloud_containers_with_the_cloudkit_database_app/inspecting_and_editing_an_icloud_container_s_schema",
    "html": "Overview\n\nUse the CloudKit Database app to verify existing record types, create new record types, edit fields, add search indexes, and delete unpublished record types.\n\nTo manage a schema’s record types, open the CloudKit Database app and select your app’s container.\n\nInspect Record Types\n\nIf you create a record programmatically through just-in-time schema creation, use the CloudKit Database app to verify that the record type appears in the schema with the name and fields you expect.\n\nTo view the fields for a record type:\n\nSelect Record Types in the CloudKit Database app Schema section for your app’s container.\n\nOn the main screen, select a record type. The app displays the field names and the field types for the record type you select. You can then add, modify, and remove unpublished fields and indexes.\n\nFor more information about just-in-time schema creation, see the Save Initial Records to iCloud section of Designing and Creating a CloudKit Database.\n\nEnable Querying for Your Record Type\n\nWhen designing and debugging your database, you might find it useful to search for records with a particular record type. To enable searching for records by type, you must first add an index to a field on your record type.\n\nWhen you create a record programmatically, iCloud creates a recordName metadata field in the corresponding record type. You add a QUERYABLE index to this field to enable searching for records by type in the CloudKit Database app and in code.\n\nTo enable querying:\n\nFrom the CloudKit Database app schema management page for your app’s container, select the Indexes menu item from the Schema section on the left.\n\nIn the main panel, select the Record Type to view, add, or remove indexes.\n\nTo the right of the Record Type name, click the icon to add an index.\n\nSelect the field name to add an index to, and select QUERYABLE for the index type.\n\nClick Save. The recordName index appears in the main panel, and you can search for records using that field.\n\nCreate a Record Type\n\nIn addition to creating record types programmatically using just-in-time schema creation, you can create new record types directly in the CloudKit Database app.\n\nTo create a new record type:\n\nFrom the CloudKit Database app schema management page for your app’s container, select Record Types from the Schema section on the left.\n\nClick the Add button and provide a name for the new record type in the field that appears.\n\nTo add a field, click Add Field, enter a field name, and select a field type from the menu.\n\nTo delete a field, click the Delete button (-) in the row of the field. The Delete button isn’t available for fields that are in production.\n\nClick Save. CloudKit adds the new record type to the schema.\n\nDelete a Record Type\n\nYou can delete a record type only in the development environment and only when that record type isn’t in production. Deleting a record type also deletes any corresponding records from the database.\n\nTo delete a record type:\n\nFrom the CloudKit Database App schema management page for your app’s container, select Record Types from the Schema section on the left.\n\nIn the center section, select the record type you want to delete.\n\nWhen the Record Type details appear, click the ellipsis in the top right, and then click the Delete Record Type button. The Delete Record Type button isn’t available for record types that are in production.\n\nClick Delete, and then confirm that you want to delete the record type. CloudKit removes the record type and its corresponding records from the container.\n\nSee Also\nContainer Management\nHandling an iCloud Container’s Data\nInspect and manage your app’s iCloud container data using the CloudKit Database app.\nDeploying an iCloud Container’s Schema\nReset your container’s state during development and deploy your container’s schema to production.\nObtaining an API Token for an iCloud Container\nGenerate an API token to access CloudKit web services or use CloudKit JS."
  },
  {
    "title": "fetchShareParticipant(withPhoneNumber:completionHandler:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckcontainer/1640493-fetchshareparticipant",
    "html": "Parameters\nphoneNumber\n\nThe share participant’s phone number.\n\ncompletionHandler\n\nThe handler to execute with the fetch results.\n\nDiscussion\n\nConcurrency Note\n\nYou can call this method from synchronous code using a completion handler, as shown on this page, or you can call it as an asynchronous method that has the following declaration:\n\nfunc shareParticipant(forPhoneNumber phoneNumber: String) async throws -> CKShare.Participant\n\n\nFor information about concurrency and asynchronous code in Swift, see Calling Objective-C APIs Asynchronously.\n\nThe closure doesn’t return a value and takes the following parameters:\n\nThe share participant, or nil if CloudKit can’t find the participant.\n\nAn error if a problem occurs, or nil if CloudKit successfully retrieves the participant.\n\nThis method searches for the share participant asynchronously and with a low priority. If you want the task to execute with a higher priority, create an instance of CKFetchShareParticipantsOperation and configure it to use the necessary priority.\n\nSee Also\nDiscovering User Records\nfunc discoverAllIdentities(completionHandler: ([CKUserIdentity]?, Error?) -> Void)\nFetches all user identities that match entries in the user’s Contacts.\nDeprecated\nfunc discoverUserIdentity(withEmailAddress: String, completionHandler: (CKUserIdentity?, Error?) -> Void)\nFetches the user identity for the specified email address.\nDeprecated\nfunc discoverUserIdentity(withPhoneNumber: String, completionHandler: (CKUserIdentity?, Error?) -> Void)\nFetches the user identity for the specified phone number.\nDeprecated\nfunc discoverUserIdentity(withUserRecordID: CKRecord.ID, completionHandler: (CKUserIdentity?, Error?) -> Void)\nFetches the user identity for the specified user record ID.\nDeprecated\nfunc fetchShareParticipant(withEmailAddress: String, completionHandler: (CKShare.Participant?, Error?) -> Void)\nFetches the share participant with the specified email address.\nfunc fetchShareParticipant(withUserRecordID: CKRecord.ID, completionHandler: (CKShare.Participant?, Error?) -> Void)\nFetches the share participant with the specified user record ID.\nfunc fetchUserRecordID(completionHandler: (CKRecord.ID?, Error?) -> Void)\nFetches the user record ID of the current user.\nlet CKCurrentUserDefaultName: String\nA constant that provides the current user’s default name.\nlet CKOwnerDefaultName: String\nA constant that provides the default owner’s name.\nDeprecated"
  },
  {
    "title": "discoverUserIdentity(withUserRecordID:completionHandler:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckcontainer/1640517-discoveruseridentity",
    "html": "Parameters\nuserRecordID\n\nThe user record’s ID.\n\ncompletionHandler\n\nThe handler to execute with the fetch results.\n\nDiscussion\n\nConcurrency Note\n\nYou can call this method from synchronous code using a completion handler, as shown on this page, or you can call it as an asynchronous method that has the following declaration:\n\nfunc userIdentity(forUserRecordID userRecordID: CKRecord.ID) async throws -> CKUserIdentity?\n\n\nFor information about concurrency and asynchronous code in Swift, see Calling Objective-C APIs Asynchronously.\n\nThis closure doesn’t return a value and takes the following parameters:\n\nThe user identity for the user record ID, or nil if CloudKit can’t find an identity.\n\nAn error if a problem occurs, or nil if CloudKit successfully fetches a user identity.\n\nUse this method to retrieve the identity of a user who you already have a user record ID for. The user you’re searching for must meet the following criteria:\n\nThe user has run the app.\n\nThe user grants the userDiscoverability permission for the container.\n\nThis method searches for the user asynchronously and with a low priority. If you want the task to execute the request with a higher priority, create an instance of CKDiscoverUserIdentitiesOperation and configure it to use the necessary priority.\n\nSee Also\nDiscovering User Records\nfunc discoverAllIdentities(completionHandler: ([CKUserIdentity]?, Error?) -> Void)\nFetches all user identities that match entries in the user’s Contacts.\nDeprecated\nfunc discoverUserIdentity(withEmailAddress: String, completionHandler: (CKUserIdentity?, Error?) -> Void)\nFetches the user identity for the specified email address.\nDeprecated\nfunc discoverUserIdentity(withPhoneNumber: String, completionHandler: (CKUserIdentity?, Error?) -> Void)\nFetches the user identity for the specified phone number.\nDeprecated\nfunc fetchShareParticipant(withEmailAddress: String, completionHandler: (CKShare.Participant?, Error?) -> Void)\nFetches the share participant with the specified email address.\nfunc fetchShareParticipant(withPhoneNumber: String, completionHandler: (CKShare.Participant?, Error?) -> Void)\nFetches the share participant with the specified phone number.\nfunc fetchShareParticipant(withUserRecordID: CKRecord.ID, completionHandler: (CKShare.Participant?, Error?) -> Void)\nFetches the share participant with the specified user record ID.\nfunc fetchUserRecordID(completionHandler: (CKRecord.ID?, Error?) -> Void)\nFetches the user record ID of the current user.\nlet CKCurrentUserDefaultName: String\nA constant that provides the current user’s default name.\nlet CKOwnerDefaultName: String\nA constant that provides the default owner’s name.\nDeprecated"
  },
  {
    "title": "status(forApplicationPermission:completionHandler:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckcontainer/1399195-status",
    "html": "Parameters\napplicationPermission\n\nThe permission to check. For a list of possible values, see CKContainer.ApplicationPermissions.\n\ncompletionHandler\n\nThe handler to execute with the outcome.\n\nDiscussion\n\nConcurrency Note\n\nYou can call this method from synchronous code using a completion handler, as shown on this page, or you can call it as an asynchronous method that has the following declaration:\n\nfunc applicationPermissionStatus(for applicationPermission: CKContainer.ApplicationPermissions) async throws -> CKContainer.ApplicationPermissionStatus\n\n\nFor information about concurrency and asynchronous code in Swift, see Calling Objective-C APIs Asynchronously.\n\nUse this method to determine the extra capabilities that the user grants to your app. If your app doesn’t have a specific permission, calling this method yields CKContainer.ApplicationPermissionStatus.initialState. In response, call the requestApplicationPermission(_:completionHandler:) method to prompt the user to provide their permission.\n\nSee Also\nRequesting and Determining App Permissions\nfunc requestApplicationPermission(CKContainer.ApplicationPermissions, completionHandler: (CKContainer.ApplicationPermissionStatus, Error?) -> Void)\nPrompts the user to authorize the specified permission.\nDeprecated\nenum CKContainer.Application\nA collection of types for app permissions.\nstruct CKContainer.ApplicationPermissions\nConstants that represent the permissions that a user grants.\ntypealias CKContainer.ApplicationPermissionBlock\nA closure that processes the outcome of a permissions request.\nDeprecated\nenum CKContainer.ApplicationPermissionStatus\nConstants that represent the status of a permission.\nDeprecated"
  },
  {
    "title": "accountStatus(completionHandler:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckcontainer/1399180-accountstatus",
    "html": "Parameters\ncompletionHandler\n\nThe handler to execute when the call completes.\n\nDiscussion\n\nConcurrency Note\n\nYou can call this method from synchronous code using a completion handler, as shown on this page, or you can call it as an asynchronous method that has the following declaration:\n\nfunc accountStatus() async throws -> CKAccountStatus\n\n\nFor information about concurrency and asynchronous code in Swift, see Calling Objective-C APIs Asynchronously.\n\nThe closure has no return value and takes the following parameters:\n\nThe status of the user’s iCloud account.\n\nAn error that describes the failure, or nil if the system successfully determines the status.\n\nThis method determines the status of the user’s iCloud account asynchronously, passing the results to the closure that you provide. Call this method before accessing the private database to determine whether that database is available. While your app is running, use the CKAccountChanged notification to detect account changes, and call this method again to determine the status of the new account.\n\nSee Also\nDetermining the User’s iCloud Access Status\nenum CKAccountStatus\nConstants that indicate the availability of the user’s iCloud account."
  },
  {
    "title": "CKContainer.Application | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckcontainer/application",
    "html": "Topics\nContainer Application Types\ntypealias CKContainer.Application.Permissions\nA type that represents the permissions that a user grants.\nDeprecated\ntypealias CKContainer.Application.PermissionBlock\nA type that represents a handler that processes the outcome of a permission’s request.\nDeprecated\ntypealias CKContainer.Application.PermissionStatus\nA type that represents the status of a permission.\nDeprecated\nSee Also\nRequesting and Determining App Permissions\nfunc requestApplicationPermission(CKContainer.ApplicationPermissions, completionHandler: (CKContainer.ApplicationPermissionStatus, Error?) -> Void)\nPrompts the user to authorize the specified permission.\nDeprecated\nfunc status(forApplicationPermission: CKContainer.ApplicationPermissions, completionHandler: (CKContainer.ApplicationPermissionStatus, Error?) -> Void)\nDetermines the authorization status of the specified permission.\nDeprecated\nstruct CKContainer.ApplicationPermissions\nConstants that represent the permissions that a user grants.\ntypealias CKContainer.ApplicationPermissionBlock\nA closure that processes the outcome of a permissions request.\nDeprecated\nenum CKContainer.ApplicationPermissionStatus\nConstants that represent the status of a permission.\nDeprecated"
  },
  {
    "title": "CKOperationGroup | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckoperationgroup",
    "html": "Overview\n\nIn certain situations, you might want to perform several CloudKit operations together. Grouping operations in CloudKit doesn’t ensure atomicity.\n\nFor example, when building a Calendar app, you group the following actions:\n\nFetch records from CloudKit, which consists of numerous queries that fetch both new records and records with changes.\n\nPerform incremental fetches of records in response to a push notification.\n\nUpdate several records when the user saves a calendar event.\n\nAssociate operation groups with operations by setting their group property. Create a new operation group for each distinct user interaction.\n\nTopics\nCreating an Operation Group\ninit()\nCreates an operation group.\ninit(coder: NSCoder)\nCreates an operation group from a serialized instance.\nConfiguring an Operation Group\nvar defaultConfiguration: CKOperation.Configuration!\nThe default configuration for operations in the group.\nvar expectedReceiveSize: CKOperationGroup.TransferSize\nThe estimated size of traffic to download from CloudKit.\nvar expectedSendSize: CKOperationGroup.TransferSize\nThe estimated size of traffic to upload to CloudKit.\nvar name: String?\nThe operation group’s name.\nvar operationGroupID: String\nThe operation group’s unique identifier.\nvar quantity: Int\nThe number of operations in the operation group.\nenum CKOperationGroup.TransferSize\nConstants that represent possible data transfer sizes.\nRelationships\nInherits From\nNSObject\nConforms To\nNSSecureCoding\nSendable\nSee Also\nCore objects\nclass CKContainer\nA conduit to your app’s databases.\nclass CKDatabase\nAn object that represents a collection of record zones and subscriptions."
  },
  {
    "title": "CKSyncEngine | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cksyncengine",
    "html": "Overview\n\nUse CKSyncEngine to handle your app’s CloudKit sync operations and benefit from the performance and reliability it provides. To use the class, create an instance early in your app’s launch process and specify a database to sync. Thereafter, and depending on good system conditions, the sync engine will periodically push and pull database and record zone changes on the app’s behalf. To participate in those sync operations and to provide the engine with the changes to send, create a type that conforms to CKSyncEngineDelegate and assign an instance of it to the engine’s configuration. You can have multiple instances of CKSyncEngine in a single process, each targeting a different database. For example, you may have one syncing a person’s private database and another syncing their shared database.\n\nBecause periodic sync relies on good system conditions — adequate battery charge, an active network connection, a signed-in iCloud account, and so on — the engine’s sync schedule is indeterminate; if you need to sync immediately, like when you need to ensure your app has the most recent changes before continuing, use the fetchChanges(_:) and sendChanges(_:) methods.\n\nThe sync engine uses an opaque type to track its internal state, and it’s your responsibility to persist that state to disk and make it available across app launches so the engine can function properly. For more information, see handleEvent(_:syncEngine:) and CKSyncEngine.Event.StateUpdate.\n\nCKSyncEngine requires the CloudKit and Remote notifications entitlements. For more information, see Configuring iCloud services and Configuring background execution modes.\n\nImportant\n\nDon’t use CKSyncEngine to sync your app’s public database.\n\nSend changes to iCloud\n\nA sync engine requires you to tell it about any changes to send, which you do by invoking the add(pendingDatabaseChanges:) and add(pendingRecordZoneChanges:) methods on the engine’s state property. If there are no scheduled sync operations when you invoke these methods, the engine automatically schedules one. Database changes don’t require any additional input, but the sync engine does expect you to provide the individual record zone changes — in batches — and return them from your delegate’s implementation of nextRecordZoneChangeBatch(_:syncEngine:). After the engine sends the changes, it notifies your delegate about their success (or failure) by dispatching CKSyncEngine.Event.sentDatabaseChanges(_:) and CKSyncEngine.Event.sentRecordZoneChanges(_:) events.\n\nFetch changes from iCloud\n\nBy default, a sync engine attempts to discover an existing CKDatabaseSubscription for the associated database and uses that to receive silent notifications about remote record changes. If the engine doesn’t find a subscription, it automatically creates one to use. On receipt of a notification, the engine schedules a sync operation to fetch the related changes. When that operation runs, the engine dispatches a CKSyncEngine.Event.willFetchChanges(_:) event to your delegate. As it receives fetched changes, the engine dispatches CKSyncEngine.Event.fetchedDatabaseChanges(_:) and CKSyncEngine.Event.fetchedRecordZoneChanges(_:), accordingly. After the operation finishes, the sync engine notifies your delegate by dispatching a CKSyncEngine.Event.didFetchChanges(_:) event. You handle all dispatched events in your delegate’s implementation of handleEvent(_:syncEngine:).\n\nTip\n\nA sample code project for CKSyncEngine is available on GitHub here: CloudKit Samples: CKSyncEngine.\n\nTopics\nCreating a sync engine\ninit(CKSyncEngine.Configuration)\nCreates a sync engine with the specified configuration.\nstruct CKSyncEngine.Configuration\nA type that configures the attributes and behavior of a sync engine.\nAccessing the engine’s attributes\nlet database: CKDatabase\nThe associated database.\nlet state: CKSyncEngine.State\nThe sync engine’s state.\nclass CKSyncEngine.State\nAn object that manages the sync engine’s state.\nParticipating in scheduled sync operations\nprotocol CKSyncEngineDelegate\nAn interface for providing record data to a sync engine and customizing that engine’s behavior.\nInvoking manual sync operations\nfunc fetchChanges(CKSyncEngine.FetchChangesOptions)\nFetches pending remote changes from the server.\nstruct CKSyncEngine.FetchChangesOptions\nA set of options to use with a fetch operation.\nfunc sendChanges(CKSyncEngine.SendChangesOptions)\nSends pending local changes to the server.\nstruct CKSyncEngine.SendChangesOptions\nA set of options to use with a send operation.\nCanceling operations\nfunc cancelOperations()\nCancels any in-progress or pending sync operations.\nDebugging the sync engine\nvar description: String\nThe textual description of the engine that’s suitable for logging.\nStructures\nstruct CKSyncEngine.FetchChangesContext\nRelationships\nConforms To\nCustomStringConvertible\nSendable\nSee Also\nRecords\nLocal Records\nManipulate records on-device and save changes to the server.\nRemote Records\nUse subscriptions and change tokens to efficiently manage modifications to remote records.\nShared Records\nShare one or more records with other iCloud users."
  },
  {
    "title": "hasiCloudAccount | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckuseridentity/1640513-hasicloudaccount",
    "html": "Discussion\n\ntrue if the user identity has an iCloud account; otherwise, false.\n\nSee Also\nAccessing iCloud Information\nvar lookupInfo: CKUserIdentity.LookupInfo?\nThe lookup info for retrieving the user identity.\nclass CKUserIdentity.LookupInfo\nThe criteria to use when searching for discoverable iCloud users."
  },
  {
    "title": "CKRecord.Reference | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckrecord/reference",
    "html": "Overview\n\nA CKReference object creates a many-to-one relationship between records in your database. Each reference object stores information about the one record that is the target of the reference. You then save the reference object in the fields of one or more records to create a link from those records to the target. Both records must be in the same zone of the same database.\n\nReferences create a stronger relationship between records than just saving the ID of a record as a string. Specifically, you can use references to create an ownership model between two records. When the reference object’s action is CKRecord.ReferenceAction.deleteSelf, the target of the reference—that is, the record in the reference’s recordID property—becomes the owner of the source record. Deleting the target (owner) record deletes all its source records. The deletion of any owned records can trigger further deletions if those records are the owners of other records. If a record contains two or more CKReference objects with an action of CKRecord.ReferenceAction.deleteSelf, CloudKit deletes the record when it deletes any of the objects it references.\n\nNote\n\nIt is permissible to create circular owning references for a set of records.\n\nTo save multiple records that contain references between them, save the target records first or save all the records in one batch operation using CKModifyRecordsOperation.\n\nInteracting with Reference Objects\n\nYou use reference objects to create strong links between two records and to search for related fields. When you create new records, you create reference objects and assign them to fields of your records. The only other time you create reference objects is when you build a search predicate to search for related records.\n\nLinking to Another Record\n\nTo link records together and create a strong relationship between them, create a new CKReference object, initialize it with the owner record, and assign that reference object to a field of the owned record. When you design the relationships among your own records, make the owner the more important of two related records. The owner record rarely depends on any records that point to it. The owner record is also the one that you typically fetch first from the database.\n\nImportant\n\nThere is a hard limit to the number of references with a CKRecord.ReferenceAction.deleteSelf action that any one record can have. This limit is 750 references, and any attempt to exceed it results in an error from the server.\n\nThe figure below shows an example of a relationship between a to-do list record and a set of item records that represent individual items to complete. The to-do list is the primary record, or owner, in the relationship because it represents the entire to-do list, including all items on the list. As a result, each item record has a field that contains a CKReference object that points to the owning to-do list record.\n\nThe following code sample shows how to create the reference object for each item record and configure it to point at the list record:\n\nitemRecord[\"owningList\"] = CKReference(record: listRecord, action: .deleteSelf)\n\n\nAn ownership type of organization is useful even if one object doesn’t explicitly own another. Ownership helps establish the relationships between records and how you search for them in the database. Ownership doesn’t require the deletion of the owned records when you delete their owner record. You can prevent such deletions by specifying the CKRecord.ReferenceAction.none action when you create a CKReference object.\n\nNote\n\nWhen you’re creating a CKReference between two objects and you have both objects in memory, be sure to fetch the object on the receiving end of the relationship. This is due to the creation of the CKReference between the two objects altering the recordChangeTag of the receiving object on the server.\n\nSearching for Related Records\n\nWhen you want to find records for a single owner object, you create a CKReference object and use it to build your search predicate. When you use reference objects in search predicates, the search code looks only at the ID value in the reference object. It matches the ID in records of the specified type with the ID you provide in the CKReference object.\n\nThe code sample below shows how to use a reference object to construct a query for the records in the figure above. The listID variable is a placeholder for the record ID of the list with the items you want to retrieve. The predicate tells the query object to search the owningList field of the target records and compare the reference object there with the one in the recordToMatch variable. Executing the query operation object returns the matching records asynchronously to the completion block you provide.\n\n// Match item records with an owningList field that points to the specified list record.\nlet listID = listRecord.recordID\nlet recordToMatch = CKReference(recordID: listID, action: .deleteSelf)\nlet predicate = NSPredicate(format: \"owningList == %@\", recordToMatch)\n// Create the query object.\nlet query = CKQuery(recordType: \"Item\", predicate: predicate)\nlet queryOp = CKQueryOperation(query: query)\nqueryOp.queryCompletionBlock = { (cursor, error) in\n    // Process the results…\n}\n// Add the CKQueryOperation to a queue to execute it and process the results asynchronously.\n\nTopics\nCreating a Reference\ninit(recordID: CKRecord.ID, action: CKRecord.ReferenceAction)\nCreates a reference object that points to the record with the specified ID.\ninit(record: CKRecord, action: CKRecord.ReferenceAction)\nCreates a reference object that points to the specified record object.\ntypealias CKRecord.Reference.Action\nA type that represents additional actions that occur when deleting references.\nDeprecated\nGetting the Reference Attributes\nvar action: CKRecord.ReferenceAction\nThe ownership behavior for the records.\nvar recordID: CKRecord.ID\nThe ID of the referenced record.\nenum CKRecord.ReferenceAction\nConstants that indicate the behavior when deleting a referenced record.\nRelationships\nInherits From\nNSObject\nConforms To\nCKRecordValueProtocol\nNSCopying\nNSSecureCoding\nSendable\nSee Also\nSharing Records\nvar parent: CKRecord.Reference?\nA reference to the record’s parent record.\nvar share: CKRecord.Reference?\nA reference to the share object that determines the share status of the record.\nfunc setParent(CKRecord?)\nCreates and sets a reference object for a parent from its record.\nfunc setParent(CKRecord.ID?)\nCreates and sets a reference object for a parent from the parent’s record ID.\nenum CKRecord.SystemFieldKey\nPossible values for types of system field keys on records."
  },
  {
    "title": "CKQuery | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckquery",
    "html": "Overview\n\nYou create a query as the first step in the search process. The query stores the search parameters, including the type of records to search, the match criteria (predicate) to apply, and the sort parameters to apply to the results. Then you use the query to initialize an instance of CKQueryOperation, which you execute to generate the results.\n\nAlways designate a record type and predicate when you create a query object. The record type narrows the scope of the search to one type of record, and the predicate defines the conditions for matching records of that type. Predicates usually compare one or more fields of a record to constant values, but you can create predicates that return all records of a specific type or perform more nuanced searches.\n\nBecause you can’t change the record type and predicate after initialization, you can use the same query to initialize multiple instances of CKQueryOperation, each of which targets a different database or record zone.\n\nBuilding Your Predicates\n\nAn NSPredicate object defines the logical conditions for determining whether a record is a match for a query. Queries support only a subset of the predicate behaviors that the NSPredicate class offers.\n\nPredicate Rules for Query Objects\n\nThe predicates you create for your query objects must follow these rules:\n\nPredicates derive from a format string. You can’t use value or block-based predicates.\n\nPredicates use only the operators in Table 2.\n\nPredicates operate only on fields that contain the following types of data:\n\nNSString\n\nNSDate\n\nNSNumber\n\nNSArray\n\nCKRecord.Reference\n\nCLLocation\n\nKey names in predicates correspond to fields in the currently evaluated record. Key names can include the names of the record’s metadata properties, such as creationDate, or any data fields you add to the record. You can’t use key paths to specify fields in related records.\n\nPredicates support the following variable substitution strings:\n\nUse %@ for value objects, such as strings, numbers, and dates.\n\nUse %K for the name of a field. This substitution variable indicates that the system uses the substitution string to look up a field name.\n\nWith one exception, the CONTAINS operator is only for testing list membership. The exception is when you use it to perform full-text searches in conjunction with the self key path. The self key path causes the server to look in searchable string-based fields for the specified token string. For example, a predicate string of @\"self contains 'blue'\" searches for the word blue in all fields that you mark for inclusion in full-text searches. You can’t use the self key path to search in fields with a type that isn’t a string.\n\nYou can combine the ANY and SOME aggregate operators with the IN and CONTAINS operators to perform list membership tests.\n\nThe distanceToLocation:fromLocation: operator function performs a radius-based location comparison and that comparison must determine whether the location value is inside the circular area you provide. You can’t use it to search for locations outside the specified circular area. Location indexes have a resolution of no less than 10 km.\n\nCloudKit doesn’t support the ALL aggregate operator.\n\nCloudKit doesn’t support the NOT compound operator in the following cases:\n\nYou can’t use it to negate an AND compound predicate.\n\nYou can’t use it in tokenized queries, such as self CONTAINS 'value'.\n\nYou can’t use it with the distanceToLocation:fromLocation: function.\n\nYou can’t use it in BETWEEN queries.\n\nSupported Predicate Operators\n\nThe following table lists the operators you can use in predicates for a query.\n\nTable 2 Supported predicate operators\n\nOperation\n\n\t\n\nSupported operators\n\n\n\n\nBasic comparisons\n\n\t\n\n=, ==\n\n>=, =>\n\n<=, =<\n\n<\n\n>\n\n!=, <>\n\nBETWEEN\n\n\n\n\nBoolean value predicates\n\n\t\n\nTRUEPREDICATE\n\nFALSEPREDICATE\n\n\n\n\nBasic compound predicates\n\n\t\n\nAND, &&\n\nNOT\n\n\n\n\nString comparisons\n\n\t\n\nBEGINSWITH\n\n\n\n\nAggregate operations\n\n\t\n\nIN\n\nCONTAINS\n\n\n\n\nFunctions\n\n\t\n\ndistanceToLocation:fromLocation:\n\nnow\n\ntokenize:using:\n\nSpecifying an unsupported operator or data type in your query’s predicate results in an error when you execute the query. For more information about creating predicate objects, see Predicate Programming Guide.\n\nSample Predicate Format Strings\n\nTo match records that link to a different record with an ID you know, create a predicate that matches a field that contains a reference as Listing 1 shows. In the example, the employee field of the record contains a CKRecord.Reference object that points to another record. When the query executes, a match occurs when the ID in the locally created CKRecord.Reference object is the same ID as in the specified field of the record.\n\nListing 1 Matching the ID of a record\nCKReference* recordToMatch = [[CKReference alloc] initWithRecordID:employeeID action:CKReferenceActionNone];\nNSPredicate* predicate = [NSPredicate predicateWithFormat:@\"employee == %@\", recordToMatch];\n\n\nTo match the contents of a field to a specific value, use a predicate similar to the ones in Listing 2. All of the listed predicates generate the same set of results, which in the example means that the favoriteColors field contains the value red. The value in the field must match the value you specify in the predicate exactly. String-based comparisons are case-insensitive, but otherwise, all comparisons must be an exact match of the specified value.\n\nListing 2 Matching a field to a specific value\nNSPredicate predicate = nil;\npredicate = [NSPredicate predicateWithFormat:@\"ANY favoriteColors = 'red'\"];\npredicate = [NSPredicate predicateWithFormat:@\"favoriteColors CONTAINS 'red'\"];\npredicate = [NSPredicate predicateWithFormat:@\"'red' IN favoriteColors\"];\npredicate = [NSPredicate predicateWithFormat:@\"%K CONTAINS %@\", @\"favoriteColors\", @\"red\"];\n\n\nYou can match more than one value at a time by using a predicate similar to the ones in Listing 3. In the example, the predicates report a match if the value in the favoriteColor field of a record matches either of the values red or green.\n\nListing 3 Matching a field to one or more values\nNSPredicate predicate = nil;\npredicate = [NSPredicate predicateWithFormat:@\"ANY { 'red', 'green' } = favoriteColor\"];\npredicate = [NSPredicate predicateWithFormat:@\"favoriteColor IN { 'red', 'green' }\"];\n\n\nFor fields that contain string values, you can match the beginning portion of the string using the BEGINSWITH operator as Listing 4 shows. You can’t use other string comparison operators, such as CONTAINS or ENDSWITH. When using this operator, the field must contain a string value and must start with the string you specify. Matches are case-sensitive. In the examples, the predicate matches records where the favoriteColors field contains the strings red, reddish, or redgreenducttape.\n\nListing 4 Matching a field that starts with a string value\nNSString* matchString = @\"red\";\nNSPredicate predicate = nil;\npredicate = [NSPredicate predicateWithFormat:@\"ANY favoriteColors BEGINSWITH 'red'\"]\npredicate = [NSPredicate predicateWithFormat:@\"ANY favoriteColors BEGINSWITH %@\", matchString]\n\n\nTo perform a tokenized search of a record’s fields, use the special operator self. A tokenized search searches any fields where you enable full-text search, which is all string-based fields by default. CloudKit treats each distinct word in the tokenized string as a separate token for the purpose of searching. Comparisons are case- and diacritic-insensitive. These token strings can be in a single field or in multiple fields.\n\nListing 5 shows an example that searches the fields of a record for the token strings bob or smith:\n\nListing 5 Matching a field that contains one or more tokens\nNSPredicate predicate = nil;\npredicate = [NSPredicate predicateWithFormat:@\"self contains 'bob smith'\"];\n\n\nTo search for multiple tokens present in the fields, use the AND predicate operator, as Listing 6 shows.\n\nListing 6 Matching a field that contains multiple tokens\nNSPredicate predicate = nil;\npredicate = [NSPredicate predicateWithFormat:@\"self contains 'bob' AND self contains __'__smith__'__\"];\n\n\nTo test whether two locations are near each other, create a predicate using the distanceToLocation:fromLocation: function as Listing 7 shows. Predicates that use this function must have the structure in the listing. In your code, replace the location variable with a field name from one of your records. This data type for the field must be a CLLocation object. Similarly, replace the fixedLoc and radius values with appropriate values from your app. The fixedLoc value is the geographic coordinate that marks the center of a circle with the specified radius. In this example, the predicate returns a match if the location in the record is within 10 kilometers of the specified latitude and longitude.\n\nListing 7 Matching by distance from a location\nCLLocation* fixedLoc = [[CLLocation alloc] initWithLatitude:37.331913 longitude:-122.030210];\nCGFloat radius = 10000; // meters\nNSPredicate predicate =\n   [NSPredicate predicateWithFormat:@\"distanceToLocation:fromLocation:(location, %@) < %f\", fixedLoc, radius]];\n\n\nTo retrieve all records of a specific type, use the TRUEPREDICATE expression as Listing 8 shows. A predicate with this operator always evaluates to true and, therefore, matches every record. When using such an operator, use a cursor to batch the results into smaller groups for processing.\n\nNote\n\nThe distanceToLocation:fromLocation: operator function performs a radius-based location comparison, and that comparison must determine whether the location value is inside the circular area you provide. You can’t use it to search for locations outside the specified circular area. Location indexes have a resolution of no less than 10 km.\n\nListing 8 Retrieving all records of a specific type\nNSPredicate predicate = nil;\npredicate = [NSPredicate predicateWithFormat:@\"TRUEPREDICATE\"];\n\nIndexes and Full-Text Search\n\nIndexes make it possible to search the contents of your records efficiently. During development, the server indexes all fields with data types it can use in the predicate of a query. This automatic indexing makes it easier to experiment with queries during development, but the indexes require space in a database and require time to generate and maintain. So when migrating to a production environment, remove the indexes for any fields that you don’t use in queries.\n\nFull-text search is another feature that is on by default for all fields during development. When you move to the production environment, disable full-text search for fields with content you don’t need to search. As with removing indexes, disabling full-text search improves the performance of your tokenized searches. To configure the indexing and full-text search options for fields in your schema, use CloudKit Dashboard.\n\nIn a full-text search, CloudKit ignores the following words if they appear in the token strings:\n\na\n\n\t\n\nby\n\n\t\n\nnot\n\n\t\n\nthen\n\n\n\n\nan\n\n\t\n\nfor\n\n\t\n\nof\n\n\t\n\nthere\n\n\n\n\nand\n\n\t\n\nif\n\n\t\n\non\n\n\t\n\nthese\n\n\n\n\nare\n\n\t\n\nin\n\n\t\n\nor\n\n\t\n\nthey\n\n\n\n\nas\n\n\t\n\ninto\n\n\t\n\nsuch\n\n\t\n\nthis\n\n\n\n\nat\n\n\t\n\nis\n\n\t\n\nthat\n\n\t\n\nto\n\n\n\n\nbe\n\n\t\n\nit\n\n\t\n\nthe\n\n\t\n\nwas\n\n\n\n\nbut\n\n\t\n\nno\n\n\t\n\ntheir\n\n\t\n\nwill\n\n\n\n\n\t\n\n\t\n\n\t\n\nwith\n\nExecuting a Search Using Your Query Object\n\nTo execute a query, do one of the following:\n\nCreate an instance of CKQueryOperation using your query. Run the operation directly or add it to an operation queue to perform the query and deliver the results.\n\nCall the perform(_:inZoneWith:completionHandler:) method of CKDatabase to execute the query. Process the results in your completion handler.\n\nQueries always run asynchronously and deliver results to a completion handler that you provide.\n\nTopics\nCreating a Query\ninit(coder: NSCoder)\nCreates an operation group from a serialized instance.\ninit(recordType: CKRecord.RecordType, predicate: NSPredicate)\nCreates a query with the specified record type and predicate.\nAccessing the Query Parameters\nvar recordType: CKRecord.RecordType\nThe record type to search.\nvar predicate: NSPredicate\nThe predicate to use for matching records.\nvar sortDescriptors: [NSSortDescriptor]?\nThe sort descriptors for organizing the query’s results.\nRelationships\nInherits From\nNSObject\nConforms To\nNSCopying\nNSSecureCoding\nSendable\nSee Also\nQueries\nclass CKQueryOperation\nAn operation for executing queries in a database.\nclass CKLocationSortDescriptor\nAn object for sorting records that contain location data."
  },
  {
    "title": "CKLocationSortDescriptor | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/cklocationsortdescriptor",
    "html": "Overview\n\nYou can add a location sort descriptor to your queries when searching for records. At creation time, you must provide the sort descriptor with a key that has a CLLocation object as its value. The sort descriptor uses the value of that key to perform the sort.\n\nCloudKit computes distance by drawing a direct line between the two locations that follows the curvature of the Earth. Distances don’t account for altitude changes between the two locations.\n\nTopics\nCreating a Location Sort Descriptor\ninit(key: String, relativeLocation: CLLocation)\nCreates a location sort descriptor using the specified key and relative location.\ninit(coder: NSCoder)\nCreates a location sort descriptor from a serialized instance.\nAccessing the Location Value\nvar relativeLocation: CLLocation\nThe reference location for sorting records.\nRelationships\nInherits From\nNSSortDescriptor\nConforms To\nNSSecureCoding\nSee Also\nQueries\nclass CKQuery\nA query that describes the criteria to apply when searching for records in a database.\nclass CKQueryOperation\nAn operation for executing queries in a database."
  },
  {
    "title": "CKDatabaseOperation | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckdatabaseoperation",
    "html": "Overview\n\nDatabase operations typically involve fetching and saving records and other database objects, as well as executing queries on the contents of the database. Use this class’s database property to tell the operation which database to use when you execute it. Don’t subclass this class or create instances of it. Instead, create instances of one of its concrete subclasses.\n\nTopics\nAccessing the Database\nvar database: CKDatabase?\nThe database that the operation uses.\nRelationships\nInherits From\nCKOperation"
  },
  {
    "title": "CKRecord | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckrecord",
    "html": "Overview\n\nRecords are the fundamental objects that manage data in CloudKit. You can define any number of record types for your app, with each record type corresponding to a different type of information. Within a record type, you then define one or more fields, each with a name and a value. Records can contain simple data types, such as strings and numbers, or more complex types, such as geographic locations or pointers to other records.\n\nAn important step in using CloudKit is defining the record types your app supports. A new record object doesn’t contain any keys or values. During development, you can add new keys and values at any time. The first time you set a value for a key and save the record, the server associates that type with the key for all records of the same type. The CKRecord class doesn’t impose these type constraints or do any local validation of a record’s contents. CloudKit enforces these constraints when you save the records.\n\nNote\n\nThe ability to add new keys is only possible during development. When you deploy to a production environment, the server returns an error if you try to specify an unknown record type or try to save a record that contains unknown keys.\n\nAlthough records behave like dictionaries, there are limitations to the types of values you can assign to keys. The following are the object types that the CKRecord class supports. Attempting to specify objects of any other type results in failure. Fields of all types are searchable unless otherwise noted.\n\nSupported Data Types\n\nCKRecord fields support the following data types:\n\nNSString\n\nStores relatively small amounts of text. Although strings themselves can be any length, use a CKAsset to store large amounts of text.\n\nNSNumber\n\nStores any numerical information, including integers and floating-point numbers.\n\nNSData\n\nStores arbitrary bytes of data. A typical use for data objects is to map the bytes that they contain to a struct. Don’t use data objects for storing large binary data files; use a CKAsset instead. Data fields aren’t searchable.\n\nNSDate\n\nStores day and time information in an accessible form.\n\nNSArray\n\nStores one or more objects of any other type in this table. You can store arrays of strings, arrays of numbers, arrays of references, and so on.\n\nCLLocation\n\nStores geographic coordinate data. You use locations in conjunction with the Core Location framework and any other services that handle location information.\n\nCKAsset\n\nAssociates a disk-based file with the record. Although assets have a close association with records, you manage them separately. For more information about using assets, see CKAsset.\n\nCKRecord.Reference\n\nCreates a link to a related record. A reference stores the ID of the target record. The advantage of using a reference instead of storing the ID as a string is that references can initiate cascade deletions of dependent records. The disadvantage is that references can only link between records in the same record zone. For more information, see CKRecord.Reference.\n\nImportant\n\nTo ensure the speed of fetching and saving records, the data that a record stores must not exceed 1 MB. Assets don’t count toward this limit, but all other data types do.\n\nDefining Records\n\nThe process for defining your record types depends entirely on your app and the data you’re trying to represent. It’s best to design records that encapsulate data for one unit of information. For example, you might use one record type to store an employee’s name, job title, and date of hire, and use a separate record type to store the employee’s address information. Using different record types lets you manage, manipulate, and validate the two types of information separately.\n\nUse fields that contain CKRecord.Reference objects to establish relationships between different types of records. After you define your record types, use the iCloud Dashboard to set them up. During development, you can also create new record types programmatically.\n\nIndexing the Fields of a Record\n\nIndexes make it possible to search the contents of your records efficiently. During development, the server indexes all fields with data types it can use in the predicate of a query. This automatic indexing makes it easier to experiment with queries during development, but the indexes require space in a database and require time to generate and maintain.\n\nTo manage the indexing behavior of your records in the production environment, use CloudKit Dashboard. When migrating your schema from the development environment to the production environment, enable indexing only for the fields that your app uses in queries, and disable it for all other fields.\n\nCustomizing Records\n\nUse this class as-is to manage data coming from or going to the server, and don’t subclass it.\n\nStoring Records Locally\n\nIf you store records in a local database, use the encodeSystemFields(with:) method to encode and store the record’s metadata. The metadata contains the record ID and the change tag, which you need later to sync records in a local database with those in CloudKit.\n\nTopics\nCreating a Record\ninit(recordType: CKRecord.RecordType, recordID: CKRecord.ID)\nCreates a record using an ID that you provide.\ntypealias CKRecord.RecordType\nThe data type that CloudKit requires for record types.\ntypealias CKRecord.FieldKey\nThe data type that CloudKit requires for record field names.\ninit(recordType: CKRecord.RecordType, zoneID: CKRecordZone.ID)\nCreates a record in the specified zone.\nDeprecated\nAccessing the Record’s Fields\nfunc object(forKey: CKRecord.FieldKey) -> (__CKRecordObjCValue)?\nReturns the object that the record stores for the specified key.\nsubscript(String) -> __CKRecordObjCValue?\nReturns the object that the record stores for the specified key.\nsubscript(CKRecord.FieldKey) -> (__CKRecordObjCValue)?\nReturns the object that the record stores for the specified key.\nfunc setObject((__CKRecordObjCValue)?, forKey: CKRecord.FieldKey)\nStores an object in the record using the specified key.\nfunc allKeys() -> [CKRecord.FieldKey]\nReturns an array of the record’s keys.\nfunc changedKeys() -> [CKRecord.FieldKey]\nReturns an array of keys with recent changes to their values.\nfunc makeIterator() -> CKRecordKeyValueIterator\nReturns an iterator of the record’s key-value pairs.\nstruct CKRecordKeyValueIterator\nAn iterator of the record’s key-value pairs.\nprotocol CKRecordValueProtocol\nA description of a CloudKit record value.\nprotocol CKRecordKeyValueSetting\nA protocol for managing the key-value pairs of a CloudKit record.\ntypealias CKRecordValue\nA data type for objects that CloudKit stores on the server.\ntypealias CKRecord.Iterator\nA data type that CloudKit uses to iterate over a record’s key-value pairs.\ntypealias CKRecord.Element\nA type that represents a single key-value pair from a record.\nAccessing the Record’s Metadata\nvar recordID: CKRecord.ID\nThe unique ID of the record.\nvar recordType: CKRecord.RecordType\nThe value that your app defines to identify the type of record.\nenum CKRecord.SystemType\nPossible values for record types of system records.\nvar creationDate: Date?\nThe time when CloudKit first saves the record to the server.\nvar creatorUserRecordID: CKRecord.ID?\nThe ID of the user who creates the record.\nvar modificationDate: Date?\nThe most recent time that CloudKit saved the record to the server.\nvar lastModifiedUserRecordID: CKRecord.ID?\nThe ID of the user who most recently modified the record.\nvar recordChangeTag: String?\nThe server change token for the record.\nclass CKRecord.ID\nAn object that uniquely identifies a record in a database.\nEncrypting the Record’s Values\nvar encryptedValues: CKRecordKeyValueSetting & Sendable\nAn object that manages the record’s encrypted key-value pairs.\nGetting Data for Full-Text Searches\nfunc allTokens() -> [String]\nReturns an array of strings to use for full-text searches of the field’s string-based values.\nEncoding the Record’s Metadata\nfunc encodeSystemFields(with: NSCoder)\nEncodes the record’s system fields using the specified archiver.\nSharing Records\nvar parent: CKRecord.Reference?\nA reference to the record’s parent record.\nvar share: CKRecord.Reference?\nA reference to the share object that determines the share status of the record.\nclass CKRecord.Reference\nA relationship between two records in a record zone.\nfunc setParent(CKRecord?)\nCreates and sets a reference object for a parent from its record.\nfunc setParent(CKRecord.ID?)\nCreates and sets a reference object for a parent from the parent’s record ID.\nenum CKRecord.SystemFieldKey\nPossible values for types of system field keys on records.\nRelationships\nInherits From\nNSObject\nConforms To\nCKRecordKeyValueSetting\nNSCopying\nNSSecureCoding\nSendable\nSequence\nSee Also\nSchemas\nDesigning and Creating a CloudKit Database\nCreate a schema to store your app’s objects as records in iCloud using CloudKit.\nManaging iCloud Containers with the CloudKit Database App\nInspect and modify the schema and data for your app's iCloud container.\nclass CKRecordZone\nA database partition that contains related records.\nclass CKRecord.Reference\nA relationship between two records in a record zone.\nclass CKAsset\nAn external file that belongs to a record.\nIntegrating a Text-Based Schema into Your Workflow\nDefine and update your schema with the CloudKit Schema Language."
  },
  {
    "title": "CKModifyRecordsOperation | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckmodifyrecordsoperation",
    "html": "Overview\n\nAfter modifying the fields of a record, use this operation to save those changes to a database. You also use this operation to delete records permanently from a database.\n\nIf you’re saving a record that contains a reference to another record, set the reference’s action to indicate if the target record’s deletion should cascade to the saved record. This helps avoid orphaned records in explicit record hierarchies. When creating two new records that have a reference between them, use the same operation to save both records at the same time. During a save operation, CloudKit requires that the target record of the parent reference, if set, exists in the database or is part of the same operation; all other reference fields are exempt from this requirement.\n\nWhen you save records, the value in the savePolicy property determines how to proceed when CloudKit detects conflicts. Because records can change between the time you fetch them and the time you save them, the save policy determines whether new changes overwrite existing changes. By default, the operation reports an error when there’s a newer version on the server. You can change the default setting to permit your changes to overwrite the server values wholly or partially.\n\nThe handlers you assign to monitor progress of the operation execute serially on an internal queue that the operation manages. Your handlers must be capable of executing on a background thread, so any tasks that require access to the main thread must redirect accordingly.\n\nIf you assign a completion handler to the completionBlock property of the operation, CloudKit calls it after the operation executes and returns the results. Use the completion handler to perform any housekeeping tasks for the operation, but don’t use it to process the results of the operation. The completion handler you provide should manage any failures of the operation, whether due to an error or an explicit cancellation.\n\nImportant\n\nTo ensure the speed of fetching and saving records, the server may reject large operations. When this occurs, a block reports the CKError.Code.limitExceeded error. Your app should handle this error, and refactor the operation into multiple smaller batches.\n\nTopics\nCreating a Modify Record Operation\ninit(recordsToSave: [CKRecord]?, recordIDsToDelete: [CKRecord.ID]?)\nCreates an operation for modifying the specified records.\ninit()\nCreates an empty modify records operation.\nConfiguring the Modify Record Operation\nvar recordsToSave: [CKRecord]?\nThe records to save to the database.\nvar recordIDsToDelete: [CKRecord.ID]?\nThe IDs of the records to delete permanently from the database.\nvar clientChangeTokenData: Data?\nA token that tracks local changes to records.\nvar isAtomic: Bool\nA Boolean value that indicates whether the entire operation fails when CloudKit can’t update one or more records in a record zone.\nvar savePolicy: CKModifyRecordsOperation.RecordSavePolicy\nThe policy to use when saving changes to records.\nenum CKModifyRecordsOperation.RecordSavePolicy\nConstants that indicate which policy to apply when saving records.\nProcessing the Modify Record Results\nvar perRecordProgressBlock: ((CKRecord, Double) -> Void)?\nThe closure to execute with progress information for individual records.\nvar perRecordCompletionBlock: ((CKRecord, Error?) -> Void)?\nThe closure to execute when CloudKit saves a record.\nDeprecated\nvar modifyRecordsCompletionBlock: (([CKRecord]?, [CKRecord.ID]?, Error?) -> Void)?\nThe closure to execute after CloudKit modifies all of the records.\nInstance Properties\nvar modifyRecordsResultBlock: ((Result<Void, Error>) -> Void)?\nvar perRecordDeleteBlock: ((CKRecord.ID, Result<Void, Error>) -> Void)?\nvar perRecordSaveBlock: ((CKRecord.ID, Result<CKRecord, Error>) -> Void)?\nRelationships\nInherits From\nCKDatabaseOperation\nSee Also\nTransactions\nclass CKModifyRecordZonesOperation\nAn operation that modifies one or more record zones."
  },
  {
    "title": "CKFetchRecordZonesOperation | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckfetchrecordzonesoperation",
    "html": "Overview\n\nUse this operation object to fetch record zones so that you can ascertain their capabilities.\n\nIf you assign a handler to the completionBlock property of the operation, CloudKit calls it after the operation executes and returns its results. You can use the handler to perform any housekeeping tasks that relate to the operation, but don’t use it to process the results of the operation. The handler you specify should manage any failures, whether due to an error or an explicit cancellation.\n\nTopics\nInitializing the Zone Fetch Operation\ninit(recordZoneIDs: [CKRecordZone.ID])\nCreates an operation for fetching the specified record zones.\ninit()\nCreates an empty fetch zones operation.\nGetting All Record Zones\nclass func fetchAllRecordZonesOperation() -> Self\nReturns an operation for fetching all record zones in the current database.\nConfiguring a Zone Fetch Operation\nvar recordZoneIDs: [CKRecordZone.ID]?\nThe IDs of the record zones to retrieve.\nProcessing Zone Fetch Results\nvar fetchRecordZonesCompletionBlock: (([CKRecordZone.ID : CKRecordZone]?, Error?) -> Void)?\nThe closure to execute after CloudKit retrieves all of the record zones.\nInstance Properties\nvar fetchRecordZonesResultBlock: ((Result<Void, Error>) -> Void)?\nvar perRecordZoneResultBlock: ((CKRecordZone.ID, Result<CKRecordZone, Error>) -> Void)?\nRelationships\nInherits From\nCKDatabaseOperation\nSee Also\nFetch Requests\nclass CKFetchRecordsOperation\nAn operation for retrieving records from a database."
  },
  {
    "title": "CKFetchRecordsOperation | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckfetchrecordsoperation",
    "html": "Overview\n\nUse this operation to retrieve the entire contents of each record or only a subset of its contained values. As records become available, the operation object reports progress about the state of the operation to several different blocks, which you can use to process the results.\n\nFetching records is a common use of CloudKit, even if your app doesn’t cache record IDs locally. For example, when you fetch a record related to the current record through a CKRecord.Reference object, you use the ID in the reference to perform the fetch.\n\nThe handlers you assign to process the fetched records execute serially on an internal queue that the fetch operation manages. Your handlers must be capable of executing on a background thread, so any tasks that require access to the main thread must redirect accordingly.\n\nIn addition to data records, a fetch records operation can fetch the current user record. The fetchCurrentUserRecordOperation() method returns a specially configured operation object that retrieves the current user record. That record is a standard CKRecord object that has no content initially. You can add data to the user record and save it as necessary. Don’t store sensitive personal information, such as passwords, in the user record because other users of your app can access the discoverable user record in a public database. If you must store sensitive information about a user, do so in a separate record that is accessible only to that user.\n\nIf you assign a closure to the completionBlock property of the operation object, CloudKit calls it after the operation executes and returns its results. Use a closure to perform any housekeeping tasks for the operation, but don’t use it to process the results of the operation. The closure you specify should handle the failure of the operation to complete its task, whether due to an error or an explicit cancellation.\n\nTopics\nCreating a Record Fetch Operation\ninit(recordIDs: [CKRecord.ID])\nCreates a fetch operation for retrieving the records with the specified IDs.\ninit()\nCreates an empty fetch operation.\nGetting the Current User Record\nclass func fetchCurrentUserRecordOperation() -> Self\nReturns a fetch operation for retrieving the current user record.\nConfiguring a Record Fetch Operation\nvar recordIDs: [CKRecord.ID]?\nThe record IDs of the records to fetch.\nvar desiredKeys: [CKRecord.FieldKey]?\nThe fields of the records to fetch.\nProcessing Record Fetch Results\nvar perRecordProgressBlock: ((CKRecord.ID, Double) -> Void)?\nThe closure to execute with progress information for individual records.\nvar perRecordCompletionBlock: ((CKRecord?, CKRecord.ID?, Error?) -> Void)?\nThe closure to execute when a record becomes available.\nvar fetchRecordsCompletionBlock: (([CKRecord.ID : CKRecord]?, Error?) -> Void)?\nThe closure to execute after CloudKit retrieves all of the records.\nInstance Properties\nvar fetchRecordsResultBlock: ((Result<Void, Error>) -> Void)?\nvar perRecordResultBlock: ((CKRecord.ID, Result<CKRecord, Error>) -> Void)?\nRelationships\nInherits From\nCKDatabaseOperation\nSee Also\nFetch Requests\nclass CKFetchRecordZonesOperation\nAn operation for retrieving record zones from a database."
  },
  {
    "title": "share | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckrecordzone/3746822-share",
    "html": "Discussion\n\nCloudKit sets this property only for fetched record zones that contain a share record; otherwise, it’s nil.\n\nTo share a record zone, create a share record using the init(recordZoneID:) method and then save it to the server. Shared record zones must have the zoneWideSharing capability, which CloudKit enables by default for new custom record zones in the user’s private database.\n\nA record zone, and the records it contains, can take part in only a single share. CloudKit returns an error if you attempt to share an already-shared record zone, or if that record zone contains previously shared records.\n\nRecord zone sharing errors include the following:\n\nCKError.Code.serverRecordChanged, which CloudKit returns if you try to share an already-shared record zone.\n\nCKError.Code.serverRejectedRequest, which CloudKit returns if you try to share a record hierarchy from an already-shared record zone.\n\nCKError.Code.invalidArguments, which CloudKit returns if you try to share a record zone that contains one or more shared hierarchies."
  },
  {
    "title": "init(fileURL:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckasset/1514990-init",
    "html": "Parameters\nfileURL\n\nThe URL of the file that you want to store in CloudKit. The URL must be a file URL, and must not be nil.\n\nReturn Value\n\nAn asset object that represents the specified file, or nil if the system can’t create the asset.\n\nDiscussion\n\nUse this method to initialize new file-based assets that you want to transfer to iCloud. After saving an asset to the server, CloudKit doesn’t delete the file at the specified URL. If you no longer need the file, you must delete it yourself. When you subsequently download a record that contains an asset, CloudKit downloads its own copy of the asset data to the local device and provides you with a URL to that file.\n\nYou can assign only one record to the asset that this method returns. If you want multiple records to point to the same file, you must create separate assets for each one.\n\nImportant\n\nCloudKit saves only the contents of the file and doesn’t save the filename or any file-related metadata. To preserve the filename or any file-related metadata, save that data separately in the record."
  },
  {
    "title": "fileURL | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckasset/1515050-fileurl",
    "html": "Discussion\n\nAfter you create an asset, use the URL in this property to access the asset’s contents. The URL in this property is different from the one you specify when creating the asset.\n\nNote\n\nIf a modify operation fails with a serverRecordChanged error, CloudKit doesn’t download assets for the copy of the server’s record that’s accessible using the error’s serverRecord property. In this scenario, fileURL is nil for all of that record’s asset fields."
  },
  {
    "title": "Designing and Creating a CloudKit Database | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/designing_and_creating_a_cloudkit_database",
    "html": "Overview\n\nAfter you enable CloudKit in your app, you create a schema for your container that describes how to store your objects. A schema defines record types and the possible relationships between them. A record type is a template for the allowed keys and values of a record. This relationship is analogous to how a class (record type) defines the properties an instance (record) can have.\n\nDesign Your Objects as Records\n\nCloudKit allows you to store your data as CKRecord objects, and relationships between those objects as CKRecord.Reference associations. Separate your data into record types by grouping objects of the same type together. If you’ve already separated your model data into classes, these classes might have the same record type in iCloud. Choose which objects and which of their properties and relationships you want to persist to iCloud.\n\nEach object property that you persist maps to a key-value pair, known as a field, within a CKRecord. CKRecord supports value types for your fields, such as String, or more complex types, such as Data.\n\nFor example, a “to-do item” might have the following record type:\n\nKey\n\n\t\n\nType\n\n\t\n\nExample value\n\n\n\n\ntitle\n\n\t\n\nString\n\n\t\n\n“Get apples”\n\n\n\n\ndueDate\n\n\t\n\nDate\n\n\t\n\nOctober 28, 2019\n\n\n\n\nisCompleted\n\n\t\n\nBool\n\n\t\n\nfalse\n\nFor information on additional supported value types, see CKRecord.\n\nCreate Records Programmatically\n\nCreate a CKRecord object with a string representing the type of record you want to store, using init(recordType:). Every record type must have a unique string name.\n\nlet record = CKRecord(recordType: \"ToDoItem\")\n\n\nThen set the record’s fields. Because CKRecord is key-value coding compliant, you can use setValuesForKeys(_:). The values you set could be from a details sheet that the user fills out.\n\nrecord.setValuesForKeys([\n    \"title\": \"Get apples\",\n    \"dueDate\": DateComponents(\n        calendar: Calendar.current,\n        year: 2019,\n        month: 10,\n        day: 28).date!,\n    \"isCompleted\": false // Stored as Int(64)\n])\n\nSave Initial Records to iCloud\n\nYou can create a schema using CloudKit Dashboard, or you can create a just-in-time schema by writing records programmatically.\n\nTo save a record to your container, you must pick a database to save the record to. Each container has a single public database accessible to all app users, and private databases for each user of your app. Also, a user may have a shared database if that user is accessing another user’s shared private data. Note that every database within your app’s container shares the same schema.\n\nAlthough an app can have multiple containers or can share a container, each app has one default container. You access the default container using default() on CKContainer. The following example uses the current user’s private database within the app’s default container and exists in an action handler for a Save button.\n\nlet container = CKContainer.default()\nlet database = container.privateCloudDatabase\n\n\nSave the record to the user’s private database in the app’s container.\n\ndatabase.save(record) { record, error in\n    if let error = error {\n        // Handle error.\n        return\n    }\n    // Record saved successfully.\n}\n\n\nWhen you run your app, it adds that record type to the schema and saves the record. If the record type already exists in the schema, iCloud uses the existing type. Saving a record works only if the user has signed into their iCloud account on their device.\n\nIf saving the record to iCloud succeeds, error is nil. (If error is non-nil, see CKError for possible values of error.)\n\nImportant\n\nDuring development, you can change your schema as much as you want, but once it’s deployed to production, you can’t delete any part of it. You can only make additive changes, such as adding a new field to a record type, or adding new record types.\n\nHandle or Prevent Errors Gracefully\n\nWhen designing your app, consider how to handle or prevent error conditions. For example, an error occurs if your app attempts to save a record to a user’s private database and the user hasn’t yet signed in to iCloud. You might handle this scenario by checking whether the user has signed in before the app saves the record. If the user hasn’t signed in, present an alert. If they’re signed in, save the record.\n\nThe following example example demonstrates preventing the error condition in this manner.\n\nCKContainer.default().accountStatus { accountStatus, error in\n    if accountStatus == .noAccount {\n        DispatchQueue.main.async {\n            let message = \n                \"\"\"\n                Sign in to your iCloud account to write records.\n                On the Home screen, launch Settings, tap Sign in to your\n                iPhone/iPad, and enter your Apple ID. Turn iCloud Drive on.\n                \"\"\"\n            let alert = UIAlertController(\n                title: \"Sign in to iCloud\",\n                message: message,\n                preferredStyle: .alert)\n            alert.addAction(UIAlertAction(title: \"OK\", style: .cancel))\n            self.present(alert, animated: true)\n        }\n    }\n    else {\n        // Save your record here.\n    }\n}\n\nRun Your App\n\nIn Xcode, run your app to execute the code that saves records and creates the schema in the database. To verify success, see Inspecting and Editing an iCloud Container’s Schema.\n\nSee Also\nSchemas\nManaging iCloud Containers with the CloudKit Database App\nInspect and modify the schema and data for your app's iCloud container.\nclass CKRecordZone\nA database partition that contains related records.\nclass CKRecord\nA collection of key-value pairs that store your app’s data.\nclass CKRecord.Reference\nA relationship between two records in a record zone.\nclass CKAsset\nAn external file that belongs to a record.\nIntegrating a Text-Based Schema into Your Workflow\nDefine and update your schema with the CloudKit Schema Language."
  },
  {
    "title": "init(zoneID:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckrecordzone/1515207-init",
    "html": "Parameters\nzoneID\n\nThe ID for the new zone. This parameter must not be nil.\n\nReturn Value\n\nThe custom record zone, or nil if CloudKit can’t create the zone.\n\nDiscussion\n\nUse this method when you want to create a new record zone from the information in a zone ID. After creating the zone, save it to the server using a CKModifyRecordZonesOperation object or the save(_:completionHandler:) method of CKDatabase.\n\nDon’t use this method to create a CKRecordZone object that corresponds to a zone that already exists in the database. If the zone exists, fetch it using a CKFetchRecordZonesOperation object or the fetch(withRecordZoneID:completionHandler:) method of CKDatabase.\n\nSee Also\nCreating a Record Zone\ninit(zoneName: String)\nCreates a record zone object with the specified zone name.\nclass CKRecordZone.ID\nAn object that uniquely identifies a record zone in a database."
  },
  {
    "title": "init(zoneName:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckrecordzone/1515102-init",
    "html": "Parameters\nzoneName\n\nThe name of the new zone. Zone names inside a user’s private database are unique, consist of up to 255 ASCII characters, and don’t start with an underscore. One way to ensure the uniqueness of zone names is to create a string from a UUID, but you can also use other techniques.\n\nIf this parameter is nil or is an empty string, the method throws an exception.\n\nReturn Value\n\nThe new custom zone, or nil if CloudKit can’t create the zone.\n\nDiscussion\n\nUse this method to create a new record zone. The new zone has the name you provide and the zone’s owner is the current user. After creating the zone, save it to the server using a CKModifyRecordZonesOperation object or the save(_:completionHandler:) method of CKDatabase. You must save the zone to the server before you attempt to save any records to that zone.\n\nDon’t use this method to create a CKRecordZone object that corresponds to a zone that already exists in the database. If the zone exists, fetch it using a CKFetchRecordZonesOperation object or the fetch(withRecordZoneID:completionHandler:) method of CKDatabase.\n\nSee Also\nCreating a Record Zone\ninit(zoneID: CKRecordZone.ID)\nCreates a record zone object with the specified zone ID.\nclass CKRecordZone.ID\nAn object that uniquely identifies a record zone in a database."
  },
  {
    "title": "Deprecated Symbols | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/deprecated_symbols",
    "html": "Topics\nDeprecated classes\nclass CKDiscoverAllUserIdentitiesOperation\nAn operation that uses the device’s contacts to search for discoverable iCloud users.\nDeprecated\nclass CKDiscoverUserIdentitiesOperation\nAn operation that uses the provided criteria to search for discoverable iCloud users.\nDeprecated\nclass CKFetchRecordChangesOperation\nAn operation that reports on the changed and deleted records in the specified record zone.\nDeprecated\nclass CKFetchNotificationChangesOperation\nAn operation that retrieves unread notifications from a CloudKit container.\nDeprecated\nclass CKMarkNotificationsReadOperation\nAn operation that marks push notifications as read by your app.\nDeprecated\nclass CKModifyBadgeOperation\nAn operation that sets the value of the app icon’s badge.\nDeprecated\nDeprecated type aliases\ntypealias CKContainer_Application_PermissionBlock\nDeprecated\ntypealias CKContainer_Application_PermissionStatus\nDeprecated\ntypealias CKContainer_Application_Permissions\nDeprecated\ntypealias CKRecord_Reference_Action\nDeprecated\ntypealias CKShare_Participant_AcceptanceStatus\nDeprecated\ntypealias CKShare_Participant_ParticipantType\nDeprecated\ntypealias CKShare_Participant_Permission\nDeprecated\ntypealias CKShare_Participant_Role\nDeprecated"
  },
  {
    "title": "CKError | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckerror",
    "html": "Overview\n\nCloudKit provides operations that faciliate moving data between your app and iCloud. There are also convenience methods in CKContainer and CKDatabase that provide similar functionality. If an operation or method fails to complete its task, CloudKit provides detailed error information that you can use to recover. A failure might be due to network or server conditions, or because of conflicts between local and remote data. For a list of possible reasons, see CKError.Code.\n\nIf you receive an error, cast it to an instance of CKError to access additional information that CloudKit provides. For example, if the error code is requestRateLimited, you can use the retryAfterSeconds property to determine how long you must wait before you retry the operation or method.\n\nBatch operations, such as CKModifyRecordsOperation, can complete with a partialFailure error. This means only a subset of the operation’s changes succeed. Use the partialErrorsByItemID property to access a dictionary that maps items that CloudKit can’t process to errors that describe those failures. You can then handle each error independently.\n\nIf you attempt to save a record and the server’s version of that record is newer, CloudKit returns a serverRecordChanged error. Use the ancestorRecord, clientRecord, and serverRecord properties to resolve the conflict. Make sure you merge any changes into serverRecord because that version contains the most recent change tag.\n\nTopics\nGetting Error Codes\nstatic var accountTemporarilyUnavailable: CKError.Code\nAn error that occurs when the user’s iCloud account is temporarily unavailable.\nstatic var alreadyShared: CKError.Code\nAn error that occurs when CloudKit attempts to share a record with an existing share.\nstatic var assetFileModified: CKError.Code\nAn error that occurs when the system modifies an asset while saving it.\nstatic var assetFileNotFound: CKError.Code\nAn error that occurs when the system can’t find the specified asset.\nstatic var assetNotAvailable: CKError.Code\nAn error that occurs when the system can’t access the specified asset.\nstatic var badContainer: CKError.Code\nAn error that occurs when you use an unknown or unauthorized container.\nstatic var badDatabase: CKError.Code\nAn error that occurs when the operation can’t complete for the specified database.\nstatic var batchRequestFailed: CKError.Code\nAn error that occurs when the system rejects the entire batch of changes.\nstatic var changeTokenExpired: CKError.Code\nAn error that occurs when the change token expires.\nstatic var constraintViolation: CKError.Code\nAn error that occurs when the server rejects the request because of a unique constraint violation.\nstatic var incompatibleVersion: CKError.Code\nAn error that occurs when the current app version is older than the oldest allowed version.\nstatic var internalError: CKError.Code\nA nonrecoverable error that CloudKit encounters.\nstatic var invalidArguments: CKError.Code\nAn error that occurs when the request contains invalid information.\nstatic var limitExceeded: CKError.Code\nAn error that occurs when a request’s size exceeds the limit.\nstatic var managedAccountRestricted: CKError.Code\nAn error that occurs when CloudKit rejects a request due to a managed-account restriction.\nstatic var missingEntitlement: CKError.Code\nAn error that occurs when the app is missing a required entitlement.\nstatic var networkFailure: CKError.Code\nAn error that occurs when a network is available, but CloudKit is inaccessible.\nstatic var networkUnavailable: CKError.Code\nAn error that occurs when the network is unavailable.\nstatic var notAuthenticated: CKError.Code\nAn error that occurs when the user is unauthenticated.\nstatic var operationCancelled: CKError.Code\nAn error that occurs when an operation cancels.\nstatic var partialFailure: CKError.Code\nAn error that occurs when an operation completes with partial failures.\nstatic var participantMayNeedVerification: CKError.Code\nAn error that occurs when the user isn’t a participant of the share.\nstatic var permissionFailure: CKError.Code\nAn error that occurs when the user doesn’t have permission to save or fetch data.\nstatic var quotaExceeded: CKError.Code\nAn error that occurs when saving a record exceeds the user’s storage quota.\nstatic var referenceViolation: CKError.Code\nAn error that occurs when CloudKit can’t find the target of a reference.\nstatic var requestRateLimited: CKError.Code\nAn error that occurs when CloudKit rate-limits requests.\nstatic var serverRecordChanged: CKError.Code\nAn error that occurs when CloudKit rejects a record because the server’s version is different.\nstatic var serverRejectedRequest: CKError.Code\nAn error that occurs when CloudKit rejects the request.\nstatic var serverResponseLost: CKError.Code\nAn error that occurs when CloudKit is unable to maintain the network connection and provide a response.\nstatic var serviceUnavailable: CKError.Code\nAn error that occurs when CloudKit is unavailable.\nstatic var tooManyParticipants: CKError.Code\nAn error that occurs when a share has too many participants.\nstatic var unknownItem: CKError.Code\nAn error that occurs when the specified record doesn’t exist.\nstatic var userDeletedZone: CKError.Code\nAn error that occurs when the user deletes a record zone using the Settings app.\nstatic var zoneBusy: CKError.Code\nAn error that occurs when the server is too busy to handle the record zone operation.\nstatic var zoneNotFound: CKError.Code\nAn error that occurs when the specified record zone doesn’t exist.\nstatic var resultsTruncated: CKError.Code\nAn error that occurs when CloudKit truncates a query’s results.\nDeprecated\nenum CKError.Code\nThe error codes that CloudKit returns.\nGetting Error Information\nstatic var errorDomain: String\nThe error’s domain.\nvar errorCode: Int\nThe error’s code.\nvar errorUserInfo: [String : Any]\nThe dictionary that provides additional context about the error.\nvar localizedDescription: String\nThe localized description of the error.\nGetting Partial Errors\nvar partialErrorsByItemID: [AnyHashable : Error]?\nThe dictionary that contains errors that relate to individual record operations.\nGetting Conflicted Records\nvar ancestorRecord: CKRecord?\nThe original version of the record.\nvar clientRecord: CKRecord?\nThe local version of the record that includes any changes.\nvar serverRecord: CKRecord?\nThe server’s version of the record.\nGetting Retry Information\nvar retryAfterSeconds: Double?\nThe number of seconds to wait before you retry the request.\nComparing Errors\nstatic func == (CKError, CKError) -> Bool\nReturns a Boolean value that indicates whether two errors are equal.\nstatic func != (CKError, CKError) -> Bool\nReturns a Boolean value that indicates whether two errors are unequal.\nInitializers\ninit(Code, userInfo: [String : Any])\nvar hashValue: Int\nvar userInfo: [String : Any]\nInstance Properties\nvar code: Code\nInstance Methods\nfunc hash(into: inout Hasher)\nSee Also\nErrors\nlet CKErrorDomain: String\nThe error domain for CloudKit errors.\nlet CKErrorRetryAfterKey: String\nThe key to retrieve the number of seconds to wait before you retry a request.\nlet CKErrorUserDidResetEncryptedDataKey: String\nThe key that determines whether CloudKit deletes a record zone because of a user action.\nlet CKPartialErrorsByItemIDKey: String\nThe key to retrieve partial errors.\nRecord Changed Error Keys\nConstants that represent conflicting records in a save operation."
  },
  {
    "title": "Record Changed Error Keys | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/record_changed_error_keys",
    "html": "Overview\n\nIf the version of a record on the server is newer than the version you try to save, the server returns a CKError.Code.serverRecordChanged error. The error’s userInfo dictionary contains the different versions of the conflicting records. Use these keys to retrieve the records, and to perform any resolution logic necessary to resolve the conflict.\n\nTopics\nRecord Changed Error Keys\nlet CKRecordChangedErrorAncestorRecordKey: String\nThe key to retrieve the original version of the record.\nlet CKRecordChangedErrorClientRecordKey: String\nThe key to retrieve the local version of the record.\nlet CKRecordChangedErrorServerRecordKey: String\nThe key to retrieve the server’s version of the record.\nSee Also\nErrors\nlet CKErrorDomain: String\nThe error domain for CloudKit errors.\nstruct CKError\nA type that describes a CloudKit error.\nlet CKErrorRetryAfterKey: String\nThe key to retrieve the number of seconds to wait before you retry a request.\nlet CKErrorUserDidResetEncryptedDataKey: String\nThe key that determines whether CloudKit deletes a record zone because of a user action.\nlet CKPartialErrorsByItemIDKey: String\nThe key to retrieve partial errors."
  },
  {
    "title": "CKPartialErrorsByItemIDKey | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckpartialerrorsbyitemidkey",
    "html": "Discussion\n\nThe value of this key is a dictionary that maps an item ID to an error. The type of each ID depends on where the error occurs. For example, if you receive a partial error when modifying a record, the ID is an instance of CKRecord.ID that corresponds to the record that CloudKit can’t modify.\n\nSee Also\nErrors\nlet CKErrorDomain: String\nThe error domain for CloudKit errors.\nstruct CKError\nA type that describes a CloudKit error.\nlet CKErrorRetryAfterKey: String\nThe key to retrieve the number of seconds to wait before you retry a request.\nlet CKErrorUserDidResetEncryptedDataKey: String\nThe key that determines whether CloudKit deletes a record zone because of a user action.\nRecord Changed Error Keys\nConstants that represent conflicting records in a save operation."
  },
  {
    "title": "CKErrorUserDidResetEncryptedDataKey | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckerroruserdidresetencrypteddatakey",
    "html": "Discussion\n\nAn NSNumber that represents a Boolean value you use to determine whether a user action causes CloudKit to delete a record zone. CloudKit adds this key to the error’s userInfo dictionary when the error code is CKError.Code.zoneNotFound.\n\nSee Also\nErrors\nlet CKErrorDomain: String\nThe error domain for CloudKit errors.\nstruct CKError\nA type that describes a CloudKit error.\nlet CKErrorRetryAfterKey: String\nThe key to retrieve the number of seconds to wait before you retry a request.\nlet CKPartialErrorsByItemIDKey: String\nThe key to retrieve partial errors.\nRecord Changed Error Keys\nConstants that represent conflicting records in a save operation."
  },
  {
    "title": "CKErrorDomain | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckerrordomain",
    "html": "See Also\nErrors\nstruct CKError\nA type that describes a CloudKit error.\nlet CKErrorRetryAfterKey: String\nThe key to retrieve the number of seconds to wait before you retry a request.\nlet CKErrorUserDidResetEncryptedDataKey: String\nThe key that determines whether CloudKit deletes a record zone because of a user action.\nlet CKPartialErrorsByItemIDKey: String\nThe key to retrieve partial errors.\nRecord Changed Error Keys\nConstants that represent conflicting records in a save operation."
  },
  {
    "title": "Identifying an App's Containers | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/identifying_an_app_s_containers",
    "html": "Overview\n\nAn app's Xcode project manages which CloudKit containers are available to that app. When you write code that needs to provide container identifiers for all of the containers your app uses, reference the list of active containers in Xcode.\n\nIdentify the Containers Your App Uses\n\nIn your app's Xcode project, select Signing & Capabilities > iCloud in the Project navigator.\n\nAfter you identify the containers that your app uses, you can create instances of CKContainer in your app and interact with CloudKit data.\n\n// These constants correspond to the containers you configure for your\n// target in your project's Signing & Capabilities tab.\nlet app = CKContainer(identifier: \"iCloud.com.example.MyCloudKitApp.app\")\nlet docs = CKContainer(identifier: \"iCloud.com.example.MyCloudKitApp.docs\")\nlet settings = CKContainer(identifier: \"iCloud.com.example.MyCloudKitApp.settings\")\n\n\nSee Also\nPrivacy\nEncrypting User Data\nDeploy industry-standard security technologies using CloudKit encryption.\nProviding User Access to CloudKit Data\nProvide users access to the data your app stores on their behalf.\nChanging Access Controls on User Data\nRestrict access to or remove restrictions from a user's data at their request.\nclass CKFetchWebAuthTokenOperation\nAn operation that creates an authentication token for use with CloudKit web services.\nResponding to Requests to Delete Data\nProvide options for users to delete their CloudKit data from your app."
  },
  {
    "title": "Responding to Requests to Delete Data | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/responding_to_requests_to_delete_data",
    "html": "Overview\n\nIf your app stores data in CloudKit on behalf of your users, give them a simple way to delete their data.\n\nIdentify Containers\n\nTo be sure that you delete all of a user's data that your app stores in CloudKit, cross-reference the list of containers your app has access to in Xcode and assemble a list of those containers' identifiers. Identifying an App's Containers describes this process.\n\nThe example below stores containers in an array to use later for enumeration:\n\nlet containers: [CKContainer] = [\n    CKContainer.default(),\n    .init(identifier: \"iCloud.com.example.myexampleapp.documents\"),\n    .init(identifier: \"iCloud.com.example.myexampleapp.settings\")\n]\n\n\nDelete Records\n\nThe example below uses an instance of CKModifyRecordZonesOperation to delete all records in each container's private database:\n\nfor container in containers {\n    container.privateCloudDatabase.fetchAllRecordZones { zones, error in\n        guard let zones = zones, error == nil else {\n            print(\"Error fetching zones.\")\n            return\n        }\n        \n        let zoneIDs = zones.map { $0.zoneID }\n        let deletionOperation = CKModifyRecordZonesOperation(recordZonesToSave: nil, recordZoneIDsToDelete: zoneIDs)\n        \n        deletionOperation.modifyRecordZonesCompletionBlock = { _, deletedZones, error in\n            guard error == nil else {\n                let error = error!\n                \n                print(\"Error deleting records.\", error)\n                return\n            }\n\n\n            print(\"Records successfully deleted in this zone.\")\n        }\n        \n        container.privateCloudDatabase.add(deletionOperation)\n    }\n}\n\n\nSee Also\nPrivacy\nEncrypting User Data\nDeploy industry-standard security technologies using CloudKit encryption.\nProviding User Access to CloudKit Data\nProvide users access to the data your app stores on their behalf.\nChanging Access Controls on User Data\nRestrict access to or remove restrictions from a user's data at their request.\nclass CKFetchWebAuthTokenOperation\nAn operation that creates an authentication token for use with CloudKit web services.\nIdentifying an App's Containers\nUse Xcode's Project navigator to find the identifiers of active CloudKit containers."
  },
  {
    "title": "CKFetchWebAuthTokenOperation | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckfetchwebauthtokenoperation",
    "html": "Overview\n\nCloudKit web services provides an HTTP interface to fetch, create, update, and delete records, zones, and subscriptions. Each request you send requires an API token, which you configure in CloudKit Dashboard. You must create an API token for each container in each environment.\n\nIf you want to send a request to an endpoint that requires an authenticated user, use this operation to fetch an authentication token. Append the authentication token, along with the API token, to the endpoint’s URL. That request then acts on behalf of the current user. Authentication tokens are short-lived and expire after a single use.\n\nFor an example of using a web authentication token with a CloudKit web service, see Changing Access Controls on User Data.\n\nThis operation executes the handlers you provide on an internal queue it manages. Your handlers must be capable of executing on a background queue. Tasks that need access to the main queue must redirect as appropriate.\n\nThe operation calls fetchWebAuthTokenCompletionBlock after it executes to provide the fetched token. Use the completion handler to perform housekeeping tasks for the operation. It should also manage any failures, whether due to an error or an explicit cancellation.\n\nNote\n\nBecause this class inherits from Operation, you can also set the completionBlock property. The operation calls both completion handlers if they’re both set.\n\nCloudKit operations have a default QoS of QualityOfService.default. Operations with this service level are discretionary. The system schedules their execution at an optimal time according to battery level and network conditions, among other factors. Use the qualityOfService property to set a more appropriate QoS for the operation.\n\nThe following example shows how to create the operation, configure its callbacks, and execute it in the user’s private database:\n\nfunc fetchWebAuthToken(for apiToken: String, \n    completion: @escaping (Result<String, Error>) -> Void) {\n    \n    // Create the operation using the API token\n    // that the caller provides to the method.\n    let operation = CKFetchWebAuthTokenOperation(apiToken: apiToken)\n    \n    // If the operation fails, return the error to the caller.\n    // Otherwise, return the fetched authentication token.\n    operation.fetchWebAuthTokenCompletionBlock = { webToken, error in\n        if let error = error {\n            completion(.failure(error))\n        } else {\n            completion(.success(webToken!))\n        }\n    }\n    \n    // Set an appropriate QoS and add the operation to the\n    // private database's queue to execute it.\n    operation.qualityOfService = .utility\n    CKContainer.default().privateCloudDatabase.add(operation)\n}\n\n\nTopics\nCreating a Fetch Token Operation\ninit(apiToken: String)\nCreates a fetch operation for the specified API token.\ninit()\nCreates an empty fetch operation.\nManaging the Operation’s Configuration\nvar apiToken: String?\nThe API token that allows access to an app’s container.\nvar fetchWebAuthTokenCompletionBlock: ((String?, Error?) -> Void)?\nThe block to execute when the operation finishes.\nInstance Properties\nvar fetchWebAuthTokenResultBlock: ((Result<String, Error>) -> Void)?\nRelationships\nInherits From\nCKDatabaseOperation\nSee Also\nPrivacy\nEncrypting User Data\nDeploy industry-standard security technologies using CloudKit encryption.\nProviding User Access to CloudKit Data\nProvide users access to the data your app stores on their behalf.\nChanging Access Controls on User Data\nRestrict access to or remove restrictions from a user's data at their request.\nResponding to Requests to Delete Data\nProvide options for users to delete their CloudKit data from your app.\nIdentifying an App's Containers\nUse Xcode's Project navigator to find the identifiers of active CloudKit containers."
  },
  {
    "title": "Changing Access Controls on User Data | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/changing_access_controls_on_user_data",
    "html": "Overview\n\nUsers can ask you to prevent any further changes to their data that your app stores in CloudKit. Use the restrict API that CloudKit Web Services provides to honor those requests. You can remove restrictions at the user's request by calling the unrestrict API.\n\nIdentify Containers\n\nTo be sure that you restrict changes and access to all of a user's data that your app stores, cross-reference the list of containers your app has access to in Xcode and assemble a list of those containers' identifiers. Identifying an App's Containers describes this process.\n\nThe example below stores containers in constants to use later:\n\nlet defaultContainer = CKContainer.default()\nlet documents = CKContainer(identifier: \"iCloud.com.example.myexampleapp.documents\")\nlet settings = CKContainer(identifier: \"iCloud.com.example.myexampleapp.settings\")\n\n\nCreate Reusable API Tokens\n\nThe restrict API call requires a token each time you call the API. You create an API token once for each container in your app using the CloudKit Dashboard, and reuse it in each API call to a specific container.\n\nGenerate a token in the CloudKit Dashboard by visiting the page for each container, then selecting API Access > New Token > Create Token. Tokens are specific to a deployment environment, so you need separate tokens for the production and development environments.\n\nThe example below stores tokens in a dictionary for each container to use later:\n\nlet containerAPITokens: [CKContainer: String] = [\n    defaultContainer: \"<# Token for the default container #>\",\n    documents: \"<# Token for a custom container #>\",\n    settings: \"<# Token for another custom container #>\"\n]\n\n\nlet containers = Array(containerAPITokens.keys)\n\n\nCreate Web Authentication Tokens\n\nThe restrict API call requires a new authentication token each time you call the API, in addition to the reusable API token. The example below shows how to create that token using an instance of CKFetchWebAuthTokenOperation:\n\nfor container in containers {\n    guard let apiToken = containerAPITokens[container] else {\n        continue\n    }\n    \n    let fetchAuthorization = CKFetchWebAuthTokenOperation(apiToken: apiToken)\n    \n    fetchAuthorization.fetchWebAuthTokenCompletionBlock = { webToken, error in\n        guard let webToken = webToken, error == nil else { return }\n        \n        restrict(container: container, apiToken: apiToken, webToken: webToken) { error in\n            guard error == nil else {\n                 print(\"Restriction failed. Reason: \", error!)\n                 return\n            }\n            print(\"Restriction succeeded.\")\n        }\n    }\n    \n    container.privateCloudDatabase.add(fetchAuthorization)\n}\n\n\nAfter you receive the authentication token, you can immediately call the restrict API once for each container.\n\nRestrict Data Access in Each Container\n\nThe example below defines the restrict(container:apiToken:webToken:completionHandler:) and requestRestriction(url:completionHandler:) methods for the example above to build the network request for the restrict API:\n\nfunc requestRestriction(url: URL, completionHandler: @escaping (Error?) -> Void) {\n    let task = URLSession.shared.dataTask(with: url) { data, response, error in\n        if let error = error {\n            completionHandler(error)\n            return\n        }\n        guard let httpResponse = response as? HTTPURLResponse,\n            (200...299).contains(httpResponse.statusCode) else {\n                completionHandler(RestrictError.failure)\n                return\n        }\n        \n        print(\"Restrict result\", httpResponse)\n        \n        // Other than indicating success or failure, the `restrict` API doesn't return actionable data in its response.\n        if data != nil {\n            completionHandler(nil)\n        } else {\n            completionHandler(RestrictError.failure)\n        }\n    }\n    task.resume()\n}\n\n\n/// A utility function that percent encodes a token for URL requests.\nfunc encodeToken(_ token: String) -> String {\n    return token.addingPercentEncoding(\n        withAllowedCharacters: CharacterSet(charactersIn: \"+/=\").inverted\n    ) ?? token\n}\n\n\n/// An error type that represents a failure in the `restrict` API call.\nenum RestrictError: Error {\n    case failure\n}\n\n\nfunc restrict(container: CKContainer, apiToken: String, webToken: String, completionHandler: @escaping (Error?) -> Void) {\n    let webToken = encodeToken(webToken)\n    \n    let identifier = container.containerIdentifier!\n    let env = \"production\" // Use \"development\" during development.\n    let baseURL = \"https://api.apple-cloudkit.com/database/1/\"\n    let apiPath = \"\\(identifier)/\\(env)/private/users/restrict\"\n    let query = \"?ckAPIToken=\\(apiToken)&ckWebAuthToken=\\(webToken)\"\n    \n    let url = URL(string: \"\\(baseURL)\\(apiPath)\\(query)\")!\n    \n    requestRestriction(url: url, completionHandler: completionHandler)\n}\n\n\nRemove Restrictions\n\nWhen a user requests that you remove restrictions, you use the unrestrict API, which performs the opposite operation that the restrict API performs.\n\nThe example below shows a modified version of the restrict(container:apiToken:webToken:completionHandler:) method from the previous example that removes restrictions instead of enabling them:\n\nfunc unrestrict(container: CKContainer, apiToken: String, webToken: String, completionHandler: @escaping (Error?) -> Void) {\n    let webToken = encodeToken(webToken)\n    \n    let identifier = container.containerIdentifier!\n    let env = \"production\" // Use \"development\" during development.\n    let baseURL = \"https://api.apple-cloudkit.com/database/1/\"\n    let apiPath = \"\\(identifier)/\\(env)/private/users/unrestrict\"\n    let query = \"?ckAPIToken=\\(apiToken)&ckWebAuthToken=\\(webToken)\"\n    \n    let url = URL(string: \"\\(baseURL)\\(apiPath)\\(query)\")!\n    \n    requestRestriction(url: url, completionHandler: completionHandler)\n}\n\n\nA successful call to the unrestrict(container:apiToken:webToken: completionHandler:) function (a nil error parameter in the completion handler indicates success) means that your app can access and modify user data.\n\nSee Also\nPrivacy\nEncrypting User Data\nDeploy industry-standard security technologies using CloudKit encryption.\nProviding User Access to CloudKit Data\nProvide users access to the data your app stores on their behalf.\nclass CKFetchWebAuthTokenOperation\nAn operation that creates an authentication token for use with CloudKit web services.\nResponding to Requests to Delete Data\nProvide options for users to delete their CloudKit data from your app.\nIdentifying an App's Containers\nUse Xcode's Project navigator to find the identifiers of active CloudKit containers."
  },
  {
    "title": "Encrypting User Data | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/encrypting_user_data",
    "html": "Overview\n\nThe CloudKit framework enforces strict policies and adopts privacy-preserving technologies to help you encrypt your users’ data. CloudKit stores data and protects data through account authentication using secure tokens. iCloud servers use encryption to ensure that only authorized users can access their data.\n\nEncryption adds another layer of protection on top of account-based access control, and is available for data that’s sensitive or private to the user. CloudKit’s encrypted fields allow you to optionally add that second layer of cryptographic protection by choosing which fields the system encrypts within a CKRecord.\n\nUse encrypted fields to offer data encryption to your users in your CloudKit-based apps, such as Photos, Notes, Health, Home, and so forth. See the iCloud security overview for more information.\n\nReview Supported Database Types\n\nCloudKit offers multiple database types, but not all databases support encryption.\n\nPrivate database\n\nStores data that belongs to a specific iCloud account, so iCloud supports account-based data encryption.\n\nShared database\n\nStores data that the data owner shares with the current user as a shared participant, so iCloud supports account-based data encryption.\n\nPublic database\n\nStores data that all users of your app can see, so account-based data encryption isn’t necessary.\n\nProtect Users\n\nCloudKit encrypts data with the key material in the user’s iCloud Keychain. If the user loses access to iCloud Keychain, CloudKit can’t access the key material that it previously used to encrypt the data, so iCloud can’t decrypt it.\n\nApple provides functionality to help users avoid this situation. However, there’s always a risk that a user might lose access to their iCloud keychain, and subsequently, can choose to start over by resetting to a new keychain. This may lead to a CKError.Code.zoneNotFound error from CloudKit that your app needs to handle. See the “Handle a User Keychain Reset” section below for more information.\n\nEncrypt Fields in CloudKit\n\nUse the encryptedValues property to set a field on a CKRecord that instructs CloudKit to automatically encrypt data while writing, and decrypt it while reading. This method of encryption and decryption applies to most of the Record value types, including NSString, NSNumber, NSDate, NSData, CLLocation, and NSArray. However, there’s no encryption support for CKRecord.Reference objects because they need to be visible to the server. CloudKit encrypts CKAsset by default so you can’t set it as a value for the encryptedValues property.\n\nBelow is an example of the encrypted values property setting and getting NSData:\n\n// Create a record.\nlet record = CKRecord(recordType: \"MyRecordType\")\n        \n// Define the encrypted field keys.\nlet dataKey = \"dataKey\"\nlet listKey = \"listKey\"\n        \n// Encrypt and decrypt arbitrary bytes of data.\nrecord.encryptedValues[dataKey] = NSData()\nlet _ = record.encryptedValues[dataKey] as? NSData\n        \n// Encrypt a list of data bytes.\nrecord.encryptedValues[listKey] = [\n    NSData(),\n    NSData()\n]\n        \n// Retrieve the keys of all encrypted fields.\nprint(record.encryptedValues.allKeys())\n\n\nYour CloudKit database schema needs to reflect which fields on specific record types require encryption. Update your schema in one of the following ways:\n\nWrite a new field to a new or existing CKRecord through the encryptedValues property in the development environment of your container. This triggers a schema update to your development environment, which reflects in CloudKit console.\n\nUsing CloudKit console, add a new field to a new record type in your development environment schema. Set the field type to the desired encrypted data type, such as Encrypted Double or Encrypted String.\n\nPromote this schema change to your production environment before deploying any app changes to the App Store that rely on the new schema.\n\nNote\n\nThe encrypted fields can’t have indexes because the server can’t read the fields. The encrypted fields also have to be newly introduced to an existing record or a new record. You can’t convert existing unencrypted fields in the CloudKit schema.\n\nUse Assets\n\nWhen creating or updating a CKRecord that contains a CKAsset, CloudKit breaks up the asset’s contents into chunks, and encrypts each chunk before storing it in the third-party services. CloudKit then encrypts the key for each chunk, which Apple maintains, with an asset key and stores the asset key on the relevant record.\n\nCloudKit automatically stores the asset key in an encrypted field on the record in the private database, and by proxy, in the shared database. This means that CloudKit ultimately encrypts the asset data to a key in the user’s iCloud Keychain.\n\nCloudKit doesn’t store the asset key in an encrypted field on the record in the public database because the record is accessible to anyone with access to that database.\n\nFor more information about security, see CloudKit security.\n\nHandle a User Keychain Reset\n\nWhen CloudKit is unable to decrypt the encrypted data, it returns a CKError.Code.zoneNotFound with an entry of CKErrorUserDidResetEncryptedDataKey in its userInfo dictionary. This error can occur in any CKOperation that involves reading existing zones or records, such as:\n\nCKFetchRecordsOperation\n\nCKFetchRecordZonesOperation\n\nCKFetchRecordZoneChangesOperation\n\nCKModifyRecordZonesOperation\n\nCKModifyRecordsOperation\n\nWhen this error occurs, the data becomes permanently lost. Your app needs to handle this situation in the following manner:\n\nDelete the relevant zones.\n\nRecreate the relevant zones.\n\nUpload the locally cached data from the device to those zones. CloudKit encrypts the new data using new key material from the user’s iCloud Keychain.\n\nNote\n\nUsers can also choose to manually delete their zones, resulting in data loss that isn’t related to resetting the keychain. In this case, any CKOperation that involves reading zones or records might encounter a CKError.Code.userDeletedZone error. For this error, prompt for the user’s confirmation to purge the associated local records or zones.\n\nUse CloudKit Web Services\n\nWhen making requests through the CloudKit web services interface with an authenticated user against compatible databases, you can:\n\nSave data in an encrypted field\n\nPass an isEncrypted flag along with the payload in a CKModifyRecordsOperation records request\n\nThe web services handle the encryption and decryption for you. The rules regarding CloudKit database schema promotion remain the same for web services as they are for native CloudKit.\n\nThe following shows an example request for creating records with the encrypted fields:\n\n{\n  \"operations\" : [ {\n    \"operationType\" : \"create\",\n    \"record\" : {\n      \"recordType\" : \"myRecordType\",\n      \"fields\" : {\n        \"myDoubleField\" : {\n          \"value\" : 0.55,\n          \"type\" : \"DOUBLE\",\n          \"isEncrypted\" : true\n        },\n        \"myIntListField\" : {\n          \"value\" : [ 123, 456, 789 ],\n          \"type\" : \"INT64_LIST\",\n          \"isEncrypted\" : true\n        }\n      \"recordName\" : \"recordWithEncryptedFields\",\n    }\n  } ],\n  \"zoneID\" : {\n    \"zoneName\" : \"myZone\"\n  }\n}\n\n\nSee Also\nPrivacy\nProviding User Access to CloudKit Data\nProvide users access to the data your app stores on their behalf.\nChanging Access Controls on User Data\nRestrict access to or remove restrictions from a user's data at their request.\nclass CKFetchWebAuthTokenOperation\nAn operation that creates an authentication token for use with CloudKit web services.\nResponding to Requests to Delete Data\nProvide options for users to delete their CloudKit data from your app.\nIdentifying an App's Containers\nUse Xcode's Project navigator to find the identifiers of active CloudKit containers."
  },
  {
    "title": "CKDatabase | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckdatabase",
    "html": "Overview\n\nA database takes requests and operations and applies them to the objects it contains, whether that’s record zones, records, or subscriptions. Each of your app’s users has access to the three separate databases:\n\nA public database that’s accessible to all users of your app.\n\nA private database that’s accessible only to the user of the current device.\n\nA shared database that’s accessible only to the user of the current device, which contains records that other iCloud users share with them.\n\nThe public database is always available, even when the device doesn’t have an active iCloud account. In this scenario, your app can fetch specific records and perform searches, but it can’t create or modify records. CloudKit requires an iCloud account for writing to the public database so it can identify the authors of any changes. All access to the private and shared databases requires an iCloud account.\n\nYou don’t create instances of CKDatabase, nor do you subclass it. Instead, you access the required database using one of your app’s containers. For more information, see CKContainer.\n\nBy default, CloudKit executes the methods in this class with a low-priority quality of service (QoS). To use a higher-priority QoS, perform the following:\n\nCreate an instance of CKOperation.Configuration and set its qualityOfService property to the preferred value.\n\nCall the databaseʼs configuredWith(configuration:group:body:) method and provide the configuration and a trailing closure.\n\nIn the closure, use the provided database to execute the relevant methods at the preferred QoS.\n\nfunc fetchRecords(with ids: [CKRecord.ID]) async throws\n    -> [CKRecord.ID: Result<CKRecord, Error>] {\n\n\n    // Get a reference to the user's private database.\n    let database = CKContainer.default().privateCloudDatabase\n\n\n    // Create a configuration with a higher-priority quality of service.\n    let config = CKOperation.Configuration()\n    config.qualityOfService = .userInitiated\n\n\n    // Configure the database and execute the fetch.\n    return try await database.configuredWith(configuration: config) { db in\n        try await db.records(for: ids)\n    }\n}\n\n\nTopics\nConfiguring Database Requests\nfunc configuredWith<R>(configuration: CKOperation.Configuration?, group: CKOperationGroup?, body: (CKDatabase) -> R) -> R\nApplies a temporary configuration to the database within the scope of a closure that supports concurrency.\nfunc configuredWith<R>(configuration: CKOperation.Configuration?, group: CKOperationGroup?, body: (CKDatabase) -> R) -> R\nApplies a temporary configuration to the database within the scope of a closure.\nFetching Records\nfunc records(for: [CKRecord.ID], desiredKeys: [CKRecord.FieldKey]?) -> [CKRecord.ID : Result<CKRecord, Error>]\nFetches the specified records and returns them to an awaiting caller.\nfunc fetch(withRecordIDs: [CKRecord.ID], desiredKeys: [CKRecord.FieldKey]?, completionHandler: (Result<[CKRecord.ID : Result<CKRecord, Error>], Error>) -> Void)\nFetches the specified records and delivers them to a completion handler.\nfunc fetch(withRecordID: CKRecord.ID, completionHandler: (CKRecord?, Error?) -> Void)\nFetches a specific record.\nQuerying Records\nfunc records(matching: CKQuery, inZoneWith: CKRecordZone.ID?, desiredKeys: [CKRecord.FieldKey]?, resultsLimit: Int) -> (matchResults: [(CKRecord.ID, Result<CKRecord, Error>)], queryCursor: CKQueryOperation.Cursor?)\nSearches for records that match a predicate and returns them to an awaiting caller.\nfunc records(continuingMatchFrom: CKQueryOperation.Cursor, desiredKeys: [CKRecord.FieldKey]?, resultsLimit: Int) -> (matchResults: [(CKRecord.ID, Result<CKRecord, Error>)], queryCursor: CKQueryOperation.Cursor?)\nRetrieves the next batch of records from an existing search and returns them to an awaiting caller.\nfunc fetch(withQuery: CKQuery, inZoneWith: CKRecordZone.ID?, desiredKeys: [CKRecord.FieldKey]?, resultsLimit: Int, completionHandler: (Result<(matchResults: [(CKRecord.ID, Result<CKRecord, Error>)], queryCursor: CKQueryOperation.Cursor?), Error>) -> Void)\nSearches for records that match a predicate and delivers them to a completion handler.\nfunc fetch(withCursor: CKQueryOperation.Cursor, desiredKeys: [CKRecord.FieldKey]?, resultsLimit: Int, completionHandler: (Result<(matchResults: [(CKRecord.ID, Result<CKRecord, Error>)], queryCursor: CKQueryOperation.Cursor?), Error>) -> Void)\nRetrieves the next batch of records from an existing search and delivers them to a completion handler.\nfunc perform(CKQuery, inZoneWith: CKRecordZone.ID?, completionHandler: ([CKRecord]?, Error?) -> Void)\nSearches for records matching a predicate in the specified record zone.\nfunc records(matching: CKQuery, inZoneWith: CKRecordZone.ID?) -> [CKRecord]\nSearches for records in the specified record zone and returns them to an awaiting caller.\nDeprecated\nModifying Records\nfunc modifyRecords(saving: [CKRecord], deleting: [CKRecord.ID], savePolicy: CKModifyRecordsOperation.RecordSavePolicy, atomically: Bool) -> (saveResults: [CKRecord.ID : Result<CKRecord, Error>], deleteResults: [CKRecord.ID : Result<Void, Error>])\nModifies the specified records and returns the results to an awaiting caller.\nfunc modifyRecords(saving: [CKRecord], deleting: [CKRecord.ID], savePolicy: CKModifyRecordsOperation.RecordSavePolicy, atomically: Bool, completionHandler: (Result<(saveResults: [CKRecord.ID : Result<CKRecord, Error>], deleteResults: [CKRecord.ID : Result<Void, Error>]), Error>) -> Void)\nModifies the specified records and delivers the results to a completion hander.\nenum CKModifyRecordsOperation.RecordSavePolicy\nConstants that indicate which policy to apply when saving records.\nfunc save(CKRecord, completionHandler: (CKRecord?, Error?) -> Void)\nSaves a specific record.\nfunc delete(withRecordID: CKRecord.ID, completionHandler: (CKRecord.ID?, Error?) -> Void)\nDeletes a specific record.\nFetching Record Zones\nfunc recordZones(for: [CKRecordZone.ID]) -> [CKRecordZone.ID : Result<CKRecordZone, Error>]\nFetches the specified record zones and returns them to an awaiting caller.\nfunc fetch(withRecordZoneIDs: [CKRecordZone.ID], completionHandler: (Result<[CKRecordZone.ID : Result<CKRecordZone, Error>], Error>) -> Void)\nFetches the specified record zones and delivers them to a completion handler.\nfunc fetchAllRecordZones(completionHandler: ([CKRecordZone]?, Error?) -> Void)\nFetches all record zones from the current database.\nfunc fetch(withRecordZoneID: CKRecordZone.ID, completionHandler: (CKRecordZone?, Error?) -> Void)\nFetches a specific record zone.\nModifying Record Zones\nfunc modifyRecordZones(saving: [CKRecordZone], deleting: [CKRecordZone.ID]) -> (saveResults: [CKRecordZone.ID : Result<CKRecordZone, Error>], deleteResults: [CKRecordZone.ID : Result<Void, Error>])\nModifies the specified record zones and returns the results to an awaiting caller.\nfunc modifyRecordZones(saving: [CKRecordZone], deleting: [CKRecordZone.ID], completionHandler: (Result<(saveResults: [CKRecordZone.ID : Result<CKRecordZone, Error>], deleteResults: [CKRecordZone.ID : Result<Void, Error>]), Error>) -> Void)\nModifies the specified record zones and delivers the results to a completion handler.\nfunc save(CKRecordZone, completionHandler: (CKRecordZone?, Error?) -> Void)\nSaves a specific record zone.\nfunc delete(withRecordZoneID: CKRecordZone.ID, completionHandler: (CKRecordZone.ID?, Error?) -> Void)\nDeletes a specific record zone.\nFetching Subscriptions\nfunc subscriptions(for: [CKSubscription.ID]) -> [CKSubscription.ID : Result<CKSubscription, Error>]\nFetches the specified subscriptions and returns them to an awaiting caller.\nfunc fetch(withSubscriptionIDs: [CKSubscription.ID], completionHandler: (Result<[CKSubscription.ID : Result<CKSubscription, Error>], Error>) -> Void)\nFetches the specified subscriptions and delivers them to a completion handler.\nfunc subscription(for: CKSubscription.ID) -> CKSubscription\nFetches a specific subscription and returns it to an awaiting caller.\nfunc fetch(withSubscriptionID: CKSubscription.ID, completionHandler: (CKSubscription?, (Error)?) -> Void)\nFetches a specific subscription and delivers it to a completion handler.\nfunc fetchAllSubscriptions(completionHandler: ([CKSubscription]?, Error?) -> Void)\nFetches all subscriptions from the current database.\nModifying Subscriptions\nfunc modifySubscriptions(saving: [CKSubscription], deleting: [CKSubscription.ID]) -> (saveResults: [CKSubscription.ID : Result<CKSubscription, Error>], deleteResults: [CKSubscription.ID : Result<Void, Error>])\nModifies the specified subscriptions and returns the results to an awaiting caller.\nfunc modifySubscriptions(saving: [CKSubscription], deleting: [CKSubscription.ID], completionHandler: (Result<(saveResults: [CKSubscription.ID : Result<CKSubscription, Error>], deleteResults: [CKSubscription.ID : Result<Void, Error>]), Error>) -> Void)\nModifies the specified subscriptions and delivers the results to a completion handler.\nfunc save(CKSubscription, completionHandler: (CKSubscription?, Error?) -> Void)\nSaves a specific subscription.\nfunc deleteSubscription(withID: CKSubscription.ID) -> CKSubscription.ID\nDeletes a specific subscription and returns the deleted subscription’s identifier to an awaiting caller.\nfunc delete(withSubscriptionID: CKSubscription.ID, completionHandler: (String?, (Error)?) -> Void)\nDeletes a specific subscription and delivers the deleted subscription’s identifier to a completion handler.\nFetching Changes\nfunc databaseChanges(since: CKServerChangeToken?, resultsLimit: Int?) -> (modifications: [CKDatabase.DatabaseChange.Modification], deletions: [CKDatabase.DatabaseChange.Deletion], changeToken: CKServerChangeToken, moreComing: Bool)\nFetches all modified record zones and returns them to an awaiting caller.\nfunc fetchDatabaseChanges(since: CKServerChangeToken?, resultsLimit: Int?, completionHandler: (Result<(modifications: [CKDatabase.DatabaseChange.Modification], deletions: [CKDatabase.DatabaseChange.Deletion], changeToken: CKServerChangeToken, moreComing: Bool), Error>) -> Void)\nFetches all modified record zones and delivers them to a completion handler.\nenum CKDatabase.DatabaseChange\nObjects that indicate the type of database change.\nfunc recordZoneChanges(inZoneWith: CKRecordZone.ID, since: CKServerChangeToken?, desiredKeys: [CKRecord.FieldKey]?, resultsLimit: Int?) -> (modificationResultsByID: [CKRecord.ID : Result<CKDatabase.RecordZoneChange.Modification, Error>], deletions: [CKDatabase.RecordZoneChange.Deletion], changeToken: CKServerChangeToken, moreComing: Bool)\nFetches all modified records from a specific record zone and returns them to an awaiting caller.\nfunc fetchRecordZoneChanges(inZoneWith: CKRecordZone.ID, since: CKServerChangeToken?, desiredKeys: [CKRecord.FieldKey]?, resultsLimit: Int?, completionHandler: (Result<(modificationResultsByID: [CKRecord.ID : Result<CKDatabase.RecordZoneChange.Modification, Error>], deletions: [CKDatabase.RecordZoneChange.Deletion], changeToken: CKServerChangeToken, moreComing: Bool), Error>) -> Void)\nFetches all modified records from a specific record zone and delivers them to a completion handler.\nenum CKDatabase.RecordZoneChange\nObjects that indicate the type of record zone change.\nRunning Operations\nfunc add(CKDatabaseOperation)\nExecutes the specified operation in the current database.\nGetting the Database Type\nvar databaseScope: CKDatabase.Scope\nThe type of database.\nenum CKDatabase.Scope\nConstants that represent the scope of a database.\nRelationships\nInherits From\nNSObject\nConforms To\nSendable\nSee Also\nCore objects\nclass CKContainer\nA conduit to your app’s databases.\nclass CKOperationGroup\nAn explicit association between two or more operations."
  },
  {
    "title": "CKContainer | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckcontainer",
    "html": "Overview\n\nA container manages all explicit and implicit attempts to access its contents.\n\nEvery app has a default container that manages its own content. If you develop a suite of apps, you can access any containers that you have the appropriate entitlements for. Each new container distinguishes between public and private data. CloudKit always stores private data in the appropriate container directory in the user’s iCloud account.\n\nNote\n\nCKContainer instances operate with a QualityOfService.userInitiated quality of service level by default. For information about quality of service, see Prioritize Work with Quality of Service Classes in Energy Efficiency Guide for iOS Apps and Prioritize Work at the Task Level in Energy Efficiency Guide for Mac Apps.\n\nInteracting with a Container\n\nA container coordinates all interactions between your app and the server. Most of these interactions involve the following tasks:\n\nDetermining whether the user has an iCloud account, which lets you know if you can write data to the user’s personal storage.\n\nWith the user’s permission, discovering other users who the current user knows, and making the current user’s information discoverable.\n\nGetting the container or one of its databases to use with an operation.\n\nPublic and Private Databases\n\nEach container provides a public and a private database for storing data. The contents of the public database are accessible to all users of the app, whereas the contents of the private database are, by default, visible only to the current user. Content that is specific to a single user usually belongs in that user’s private database, whereas app-related content that you provide (or that users want to share) belongs in the public database.\n\nThe public database is always available, regardless of whether the device has an active iCloud account. When there isn’t an iCloud account, your app can fetch records from and query the public database, but it can’t save changes. Saving records to the public database requires an active iCloud account to identify the owner of those records. Access to the private database always requires an active iCloud account on the device.\n\nNote\n\nThe data in a public database counts toward the iCloud storage quota of the app that owns the container. That data doesn’t count toward the storage quota of any single user. Data in the private database counts toward the user’s iCloud storage quota.\n\nUsing iCloud\n\nWhenever possible, design your app to run gracefully with or without an active iCloud account. Even without an active iCloud account, apps can fetch records from the public database and display that information to the user. If your app requires the ability to write to the public database or requires access to the private database, notify the user of the reason and encourage them to enable iCloud. You can even provide a button that takes the user directly to Settings so that they can enable iCloud. To implement such a button, have the button’s action open the URL that the openSettingsURLString constant provides.\n\nUser Records and Permissions\n\nWhen a user accesses a container for the first time, CloudKit assigns them a unique identifier and uses it to create two user records — one in the app’s public database and another in that user’s private database. By default, these records don’t contain any identifying personal information, but you can use the record in the user’s private database to store additional, nonsensitive information about that user. Because the public database’s user record is accessible to all users of your app, don’t use it to store information about the user.\n\nWhile a user record isn’t the same as the user’s CKUserIdentity, the identity does provide the identifier of their user record that you can use to fetch that record from either the public database or the user’s private database. For more information, see userRecordID.\n\nTesting Your Code Using the Development Container\n\nAt runtime, CloudKit uses your app’s com.apple.developer.icloud-container-environment entitlement to discover whether you’re using a Development or Production version of your provisioning profile. When you configure the entitlement for development, CloudKit configures the app’s containers to use the development server. The development environment is a safe place to make changes during the development process without disrupting users of your app. You can add new fields to records programmatically, and you can delete or modify fields using iCloud Dashboard.\n\nBefore shipping your app, always test your app’s behavior in the production environment. The production server generates errors when your app tries to add record types or add new fields to existing record types. Testing in the production environment helps you find and fix the places in your code where you’re making those types of changes. You can use CloudKit Dashboard to modify record types in the development environment, and then migrate those changes to the production environment.\n\nNote\n\nSimulator works only with the development environment. When you’re ready to test your app in a production environment, do so from a device.\n\nTopics\nCreating Containers\nclass func `default`() -> CKContainer\nReturns the app’s default container.\ninit(identifier: String)\nCreates a container for the specified identifier.\nGetting the Public and Private Databases\nvar privateCloudDatabase: CKDatabase\nThe user’s private database.\nvar publicCloudDatabase: CKDatabase\nThe app’s public database.\nvar sharedCloudDatabase: CKDatabase\nThe database that contains shared data.\nfunc database(with: CKDatabase.Scope) -> CKDatabase\nReturns the database with the specified scope.\nGetting the Container’s Identifier\nvar containerIdentifier: String?\nThe container’s unique identifier.\nDetermining the User’s iCloud Access Status\nfunc accountStatus(completionHandler: (CKAccountStatus, Error?) -> Void)\nDetermines whether the system can access the user’s iCloud account.\nenum CKAccountStatus\nConstants that indicate the availability of the user’s iCloud account.\nRequesting and Determining App Permissions\nfunc requestApplicationPermission(CKContainer.ApplicationPermissions, completionHandler: (CKContainer.ApplicationPermissionStatus, Error?) -> Void)\nPrompts the user to authorize the specified permission.\nDeprecated\nfunc status(forApplicationPermission: CKContainer.ApplicationPermissions, completionHandler: (CKContainer.ApplicationPermissionStatus, Error?) -> Void)\nDetermines the authorization status of the specified permission.\nDeprecated\nenum CKContainer.Application\nA collection of types for app permissions.\nstruct CKContainer.ApplicationPermissions\nConstants that represent the permissions that a user grants.\ntypealias CKContainer.ApplicationPermissionBlock\nA closure that processes the outcome of a permissions request.\nDeprecated\nenum CKContainer.ApplicationPermissionStatus\nConstants that represent the status of a permission.\nDeprecated\nPerforming Operations on the Container\nfunc add(CKOperation)\nAdds an operation to the container’s queue.\nDiscovering User Records\nfunc discoverAllIdentities(completionHandler: ([CKUserIdentity]?, Error?) -> Void)\nFetches all user identities that match entries in the user’s Contacts.\nDeprecated\nfunc discoverUserIdentity(withEmailAddress: String, completionHandler: (CKUserIdentity?, Error?) -> Void)\nFetches the user identity for the specified email address.\nDeprecated\nfunc discoverUserIdentity(withPhoneNumber: String, completionHandler: (CKUserIdentity?, Error?) -> Void)\nFetches the user identity for the specified phone number.\nDeprecated\nfunc discoverUserIdentity(withUserRecordID: CKRecord.ID, completionHandler: (CKUserIdentity?, Error?) -> Void)\nFetches the user identity for the specified user record ID.\nDeprecated\nfunc fetchShareParticipant(withEmailAddress: String, completionHandler: (CKShare.Participant?, Error?) -> Void)\nFetches the share participant with the specified email address.\nfunc fetchShareParticipant(withPhoneNumber: String, completionHandler: (CKShare.Participant?, Error?) -> Void)\nFetches the share participant with the specified phone number.\nfunc fetchShareParticipant(withUserRecordID: CKRecord.ID, completionHandler: (CKShare.Participant?, Error?) -> Void)\nFetches the share participant with the specified user record ID.\nfunc fetchUserRecordID(completionHandler: (CKRecord.ID?, Error?) -> Void)\nFetches the user record ID of the current user.\nlet CKCurrentUserDefaultName: String\nA constant that provides the current user’s default name.\nlet CKOwnerDefaultName: String\nA constant that provides the default owner’s name.\nDeprecated\nFetching Long-Lived Operations\nfunc fetchAllLongLivedOperationIDs(completionHandler: ([CKOperation.ID]?, (Error)?) -> Void)\nFetches the IDs of any long-lived operations that are running.\nfunc fetchLongLivedOperation(withID: CKOperation.ID, completionHandler: (CKOperation?, (Error)?) -> Void)\nFetches the long-lived operation for the specified operation ID.\nAccessing Container Metadata\nfunc fetchShareMetadata(with: URL, completionHandler: (CKShare.Metadata?, Error?) -> Void)\nFetches the share metadata for the specified share URL.\nfunc accept(CKShare.Metadata, completionHandler: (CKShare?, Error?) -> Void)\nAccepts the specified share metadata.\nstatic let CKAccountChanged: NSNotification.Name\nA notification that a container posts when the status of an iCloud account changes.\nInstance Methods\nfunc accept([CKShare.Metadata]) -> [CKShare.Metadata : Result<CKShare, Error>]\nfunc accept([CKShare.Metadata], completionHandler: (Result<[CKShare.Metadata : Result<CKShare, Error>], Error>) -> Void)\nfunc allLongLivedOperationIDs() -> [CKOperation.ID]\nfunc configuredWith<R>(configuration: CKOperation.Configuration?, group: CKOperationGroup?, body: (CKContainer) -> R) -> R\nfunc configuredWith<R>(configuration: CKOperation.Configuration?, group: CKOperationGroup?, body: (CKContainer) -> R) -> R\nfunc discoverUserIdentities(forEmailAddresses: [String], completionHandler: (Result<[String : CKUserIdentity], Error>) -> Void)\nDeprecated\nfunc discoverUserIdentities(forPhoneNumbers: [String], completionHandler: (Result<[String : CKUserIdentity], Error>) -> Void)\nDeprecated\nfunc discoverUserIdentities(forUserRecordIDs: [CKRecord.ID], completionHandler: (Result<[CKRecord.ID : CKUserIdentity], Error>) -> Void)\nDeprecated\nfunc fetchShareMetadatas(for: [URL], completionHandler: (Result<[URL : Result<CKShare.Metadata, Error>], Error>) -> Void)\nfunc fetchShareParticipants(forEmailAddresses: [String], completionHandler: (Result<[String : Result<CKShare.Participant, Error>], Error>) -> Void)\nfunc fetchShareParticipants(forPhoneNumbers: [String], completionHandler: (Result<[String : Result<CKShare.Participant, Error>], Error>) -> Void)\nfunc fetchShareParticipants(forUserRecordIDs: [CKRecord.ID], completionHandler: (Result<[CKRecord.ID : Result<CKShare.Participant, Error>], Error>) -> Void)\nfunc longLivedOperation(for: CKOperation.ID) -> CKOperation?\nfunc shareMetadatas(for: [URL]) -> [URL : Result<CKShare.Metadata, Error>]\nfunc shareParticipants(forEmailAddresses: [String]) -> [String : Result<CKShare.Participant, Error>]\nfunc shareParticipants(forPhoneNumbers: [String]) -> [String : Result<CKShare.Participant, Error>]\nfunc shareParticipants(forUserRecordIDs: [CKRecord.ID]) -> [CKRecord.ID : Result<CKShare.Participant, Error>]\nfunc userIdentities(forEmailAddresses: [String]) -> [String : CKUserIdentity]\nDeprecated\nfunc userIdentities(forPhoneNumbers: [String]) -> [String : CKUserIdentity]\nDeprecated\nfunc userIdentities(forUserRecordIDs: [CKRecord.ID]) -> [CKRecord.ID : CKUserIdentity]\nDeprecated\nRelationships\nInherits From\nNSObject\nConforms To\nSendable\nSee Also\nCore objects\nclass CKDatabase\nAn object that represents a collection of record zones and subscriptions.\nclass CKOperationGroup\nAn explicit association between two or more operations."
  },
  {
    "title": "CKUserIdentity.LookupInfo | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckuseridentity/lookupinfo",
    "html": "Overview\n\nUse this object when you want to discover the identities of your app’s users with CKDiscoverUserIdentitiesOperation, or to create a share’s participants with CKFetchShareParticipantsOperation.\n\nYou create individual instances by providing an email address, phone number, or user record ID. Alternatively, create an array of objects all at once by using one of the convenience methods, such as lookupInfos(withEmails:).\n\nTopics\nCreating a Lookup Info\ninit(emailAddress: String)\nCreates a lookup info for the specified email address.\ninit(phoneNumber: String)\nCreates a lookup info for the specified phone number.\ninit(userRecordID: CKRecord.ID)\nCreates a lookup info for the specified user record ID.\nCreating Multiple Lookup Infos\nclass func lookupInfos(withEmails: [String]) -> [CKUserIdentity.LookupInfo]\nReturns an array of lookup infos for the specifed email addresses.\nclass func lookupInfos(withPhoneNumbers: [String]) -> [CKUserIdentity.LookupInfo]\nReturns an array of lookup infos for the specifed phone numbers.\nclass func lookupInfos(with: [CKRecord.ID]) -> [CKUserIdentity.LookupInfo]\nReturns an array of lookup infos for the specifed user record IDs.\nAccessing the Criteria\nvar emailAddress: String?\nThe user’s email address.\nvar phoneNumber: String?\nThe user’s phone number.\nvar userRecordID: CKRecord.ID?\nThe ID of the user record.\nRelationships\nInherits From\nNSObject\nConforms To\nNSCopying\nNSSecureCoding\nSendable\nSee Also\nAccessing iCloud Information\nvar hasiCloudAccount: Bool\nA Boolean value that indicates whether the user has an iCloud account.\nvar lookupInfo: CKUserIdentity.LookupInfo?\nThe lookup info for retrieving the user identity."
  },
  {
    "title": "CKUserIdentity | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckuseridentity",
    "html": "Overview\n\nA user identity provides identifiable data about an iCloud user, including their name, user record ID, and an email address or phone number. CloudKit retrieves this information from the user’s iCloud account. A user must give their consent to be discoverable before CloudKit can provide this data to your app. For more information, see requestApplicationPermission(_:completionHandler:).\n\nYou don’t create instances of this class. Instead, CloudKit provides them in certain contexts. A share’s owner has a user identity, as does each of its participants. When creating participants, CloudKit tries to find iCloud accounts it can use to populate their identities. If CloudKit doesn’t find an account, it sets the identity’s hasiCloudAccount property to false.\n\nYou can also discover the identities of your app’s users by executing one of the user discovery operations: CKDiscoverAllUserIdentitiesOperation and CKDiscoverUserIdentitiesOperation. Identities that CloudKit discovers using CKDiscoverAllUserIdentitiesOperation correspond to entries in the device’s Contacts database. These identities contain the identifiers of their Contact records, which you can use to fetch those records from the Contacts database. For more information, see contactIdentifiers.\n\nTopics\nAccessing iCloud Information\nvar hasiCloudAccount: Bool\nA Boolean value that indicates whether the user has an iCloud account.\nvar lookupInfo: CKUserIdentity.LookupInfo?\nThe lookup info for retrieving the user identity.\nclass CKUserIdentity.LookupInfo\nThe criteria to use when searching for discoverable iCloud users.\nAccessing User Information\nvar userRecordID: CKRecord.ID?\nThe user record ID for the corresponding user record.\nvar contactIdentifiers: [String]\nIdentifiers that match contacts in the local Contacts database.\nvar nameComponents: PersonNameComponents?\nThe user’s name.\nRelationships\nInherits From\nNSObject\nConforms To\nNSCopying\nNSSecureCoding\nSendable\nSee Also\nUser discovery\nclass CKUserIdentity.LookupInfo\nThe criteria to use when searching for discoverable iCloud users."
  },
  {
    "title": "Shared Records | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/shared_records",
    "html": "Overview\n\nCloudKit users can share records in their private databases with other iCloud users, which enables collaboration between the people using your app. The user that initiates sharing, the owner, handles all aspects of the collaboration, from inviting people to participate to restricting what actions the participants can perform.\n\nCloudKit allows you to share both record zones and record hierarchies. If you want to share an unbounded collection of records that don’t have natural parent-child relationships, share their containing record zone. However, if you want to share only a specific set of related records, define an explicit record hierarchy and share that instead.\n\nFor more information, see Sharing CloudKit Data with Other iCloud Users.\n\nShare a Record Zone or Hierarchy\n\nYou store shareable records in a custom record zone in the user’s private database. As you create records in that zone, they become eligible for record zone sharing. If you then choose to share that record zone, CloudKit allows participants to access all the records it contains.\n\nAlternatively, you can build a hierarchy by defining relationships between records as you create them. Set a record’s parent property to designate it as a child of the referenced record. If your data model is hierarchical, this is good practice even if you don’t plan to share the records. Whereas sharing a record zone is catch-all, sharing a record hierarchy allows you to specify exactly which records to include.\n\nTo begin sharing, create an instance of CKShare with either the ID of the record zone to share, or the root record, which defines the point in the record hierarchy where you want to start sharing. CloudKit shares all the records in the record zone, or every record in the hierarchy below the root. A record can take part in only a single share. This applies to every record in the shared record zone or hierarchy.\n\nAfter you create the share, save it using CKModifyRecordsOperation. The shared records must already exist in iCloud or be part of the same save operation.\n\nInvite Participants\n\nAfter saving the share, CloudKit assigns it a stable share URL. Use this URL to invite other users to participate. In iOS, UICloudSharingController provides a consistent and familiar experience for managing a share’s participants and their permissions, and for distributing the share URL. Use NSItemProvider and NSSharingService in macOS (with the cloudSharing service name) to achieve similar functionality. Only invited participants can join a private share. Anyone with the share URL can join a public share. For more information, see publicPermission.\n\nWhen an invited user taps or clicks the share URL, CloudKit verifies they have an active iCloud account, which must match their participant details. After successful verification, the system launches your app. CloudKit provides share metadata to your app’s scene delegate or app delegate. The method the system calls varies by platform and app configuration. For more information, see CKShare.Metadata.\n\nImportant\n\nTo enable the system to launch your app when the user taps or clicks the share URL, add the CKSharingSupported key to the app’s Info.plist file. For more information, see CKSharingSupported.\n\nManage Share Participation\n\nAfter receiving the share metadata from CloudKit, use CKAcceptSharesOperation to confirm the user’s participation. CloudKit then creates a record zone in the participant’s shared database that provides a view into the owner’s private database. The record zone contains only the records in the share; no other data is accessible. A participant with write permissions can change or delete records in this new record zone. Any changes they make are visible to all participants.\n\nCreate a database subscription in the user’s shared database the first time they launch your app. Then, when they confirm participation in a share, iCloud notifies your app, on all of the user’s devices, of any changes to the shared records. For more information, see CKDatabaseSubscription.\n\nTo stop sharing, the share’s owner must delete the share or, for shared hierarchies, the root record. If a participant wants to leave the share, delete the share record from their shared database. Use UICloudSharingController or NSSharingService to allow a participant to stop participating. Or remove them from the share using the removeParticipant(_:) method, and then save the updated share to iCloud.\n\nCustomize the Sharing Experience\n\nYou can use the framework’s share-related operations to implement behavior similar to that of UICloudSharingController and NSSharingService to build a custom sharing experience by following these steps:\n\nUse CKFetchShareParticipantsOperation to generate participants and add them to the share using addParticipant(_:). Your app presents a list of potential participants to the user. You can also allow the owner to add participants by entering a participant’s email address or phone number.\n\nSave the share to iCloud.\n\nProvide the share URL to the participants. You can send the URL in an email or a message, or your app might have secure, in-app chat between users to facilitate distribution of the URL.\n\nFor each participant, fetch the share’s metadata using CKFetchShareMetadataOperation and the share URL.\n\nUse CKAcceptSharesOperation to confirm participation.\n\nAfter you share records, use the properties and methods on CKShare to manage the share’s participants.\n\nFor public shares, you can skip the first step. Accepting a public share’s metadata automatically adds the user as a participant.\n\nTopics\nCollaboration\nSharing CloudKit Data with Other iCloud Users\nCreate and share private CloudKit data with other users by implementing the sharing UI.\nSharing Core Data objects between iCloud users\nUse Core Data CloudKit to synchronize data between devices of an iCloud user and share data between different iCloud users.\nclass CKShare\nA specialized record type that manages a collection of shared records.\nstruct CKShareTransferRepresentation\nA transfer representation the system uses to share an item.\nclass CKAllowedSharingOptions\nAn object that controls participant access and permission options.\nclass CKSystemSharingUIObserver\nAn object the system uses to monitor changes in sharing.\nclass UICloudSharingController\nA view controller that presents standard screens for adding and removing people from a CloudKit share record.\nproperty list key CKSharingSupported\nA Boolean value that indicates your app supports CloudKit Sharing.\nShare Requests\nclass CKFetchShareMetadataOperation\nAn operation that fetches metadata for one or more shares.\nclass CKShare.Metadata\nAn object that describes a shared record’s metadata.\nclass CKAcceptSharesOperation\nAn operation that confirms a user’s participation in a share.\nParticipants\nclass CKFetchShareParticipantsOperation\nAn operation that converts user identities into share participants.\nclass CKShare.Participant\nAn object that describes a user’s participation in a share.\nBase Objects\nclass CKOperation\nThe abstract base class for all operations that execute in a database.\nSee Also\nRecords\nLocal Records\nManipulate records on-device and save changes to the server.\nRemote Records\nUse subscriptions and change tokens to efficiently manage modifications to remote records.\nclass CKSyncEngine\nAn object that manages the synchronization of local and remote record data."
  },
  {
    "title": "Remote Records | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/remote_records",
    "html": "Overview\n\nCloudKit stores your records in iCloud and uses subscriptions to notify your app in real time about record changes. You then use change tokens to handle these changes efficiently. Additionally, you can improve your app’s performance and support offline use by storing records in a local cache.\n\nWhen your app launches for the first time on a new device, use CKFetchDatabaseChangesOperation and CKFetchRecordZoneChangesOperation to fetch any records you need to populate your cache. Each operation expects a change token, which is an opaque token that represents a specific point in the database’s history. For the initial fetch, pass nil as the token to retrieve all changes in the database’s history. When the operation completes, save its change token so you can use it with your next fetch. Change tokens help reduce the amount of data CloudKit returns.\n\nAfter you fetch the records, subscribe to future changes. Subscriptions run in iCloud and listen for record changes, such as record creation, modification, and deletion. Create subscriptions, as necessary, in the public database, and the user’s private and shared databases. A subscription responds to changes to a database, to a custom record zone, or to records that match a specific set of criteria. You can further scope subscriptions to an individual record type.\n\nWhen the user modifies records on their device, save those changes to iCloud. In response, a subscription generates push notifications using the configuration you provide, and iCloud sends them to the user’s other devices. On receipt of a notification, fetch the changes from iCloud and update your cache. Use the change token from the previous fetch to limit the fetched records. Overwrite the token with the new one the fetch operation provides when it completes.\n\nNote\n\nSubscriptions belong to the users that create them. iCloud can notify several users’ devices in response to a change in the public database. This is because each user’s subscription is tracking the same set of records.\n\nEvery subscription type has a corresponding notification object that you can configure to meet your app’s needs. CloudKit supports high-priority visual notifications and medium-priority background notifications. A notification can include a limited number of fields from the changed record. You opt in to this behavior. For more information, see desiredKeys.\n\nBecause the system coalesces notifications, don’t rely on them for specific changes. Consider notifications an indication of remote changes, and use the fetch operations to reliably retrieve all changes that occur after your most recent fetch.\n\nCloudKit supports the following subscription types:\n\nDatabase\n\n\t\n\nUse a database subscription when you don’t know what record zones exist, such as in the shared database. Only private and shared databases support database subscriptions. For more information, see CKDatabaseSubscription.\n\n\n\n\nRecord zone\n\n\t\n\nUse a record zone subscription to track changes in a custom record zone in the user’s private database. You can’t use this subscription in public or shared databases. For more information, see CKRecordZoneSubscription.\n\n\n\n\nQuery\n\n\t\n\nUse a query subscription to track changes to records in a database that match a predicate. Only public and private databases support query subscriptions. For more information, see CKQuerySubscription.\n\nIntegrate Records with Your Existing Models\n\nIf you already cache your app’s model objects, you don’t need to cache CloudKit records in tandem. Instead, attach a record’s metadata to a model to associate the two. The metadata includes the record’s ID, record type, record zone ID, and change tag, as well as other information.\n\nWhen you fetch a record from iCloud, update the local model object using the record’s fields. Then encode the record’s metadata, attach it to the model, and save the model to the cache. To update a record in iCloud, decode the model’s metadata and use it to create an instance of CKRecord. Set the record’s fields to the model’s values and save it to iCloud.\n\nThe following example shows how to encode a record’s metadata and store it on a custom Product model. It also shows how to decode the metadata and use it to create an instance of CKRecord.\n\nfunc storeCloudRecord(_ record: CKRecord, on product: Product) {\n    \n    // Encode the record's metadata.\n    let coder = NSKeyedArchiver(requiringSecureCoding: true)\n    record.encodeSystemFields(with: coder)\n    \n    // Attach the encoded metadata to the \n    // model object so you can store it in\n    // your local cache.\n    product.recordMetadata = coder.encodedData\n}\n    \nfunc extractCloudRecord(from product: Product) throws -> CKRecord? {\n    guard let metadata = product.recordMetadata else { return nil }\n    \n    // Create an unarchiver from the record's stored metadata\n    // and use it to create an instance of CKRecord.\n    let coder = try NSKeyedUnarchiver(forReadingFrom: metadata)\n    let record = CKRecord(coder: coder)\n    coder.finishDecoding()\n\n\n    // Return the record to the caller, which can update its \n    // fields using the product's properties before saving\n    // it to iCloud.\n    return record\n}\n\n\nTopics\nDatabase Changes\nclass CKDatabaseSubscription\nA subscription that generates push notifications when CloudKit modifies records in a database.\nclass CKDatabaseNotification\nA notification that triggers when the contents of a database change.\nclass CKFetchDatabaseChangesOperation\nAn operation that fetches database changes.\nRecord Zone Changes\nclass CKRecordZoneSubscription\nA subscription that generates push notifications when CloudKit modifies records in a specific record zone.\nclass CKRecordZoneNotification\nA notification that triggers when the contents of a record zone change.\nclass CKFetchRecordZoneChangesOperation\nAn operation that fetches record zone changes.\nChange Tokens\nclass CKServerChangeToken\nAn opaque token that represents a specific point in a database’s history.\nSubscription Management\nclass CKFetchSubscriptionsOperation\nAn operation for fetching subscriptions.\nclass CKModifySubscriptionsOperation\nAn operation for modifying one or more subscriptions.\nPredicate-Driven Changes\nclass CKQuerySubscription\nA subscription that generates push notifications when CloudKit modifies records that match a predicate.\nclass CKQueryNotification\nA notification that triggers when a record that matches the subscription’s predicate changes.\nBase Objects\nclass CKSubscription\nAn abstract base class for subscriptions.\nclass CKNotification\nThe abstract base class for CloudKit notifications.\nclass CKDatabaseOperation\nThe abstract base class for operations that act upon databases in CloudKit.\nSee Also\nRecords\nLocal Records\nManipulate records on-device and save changes to the server.\nclass CKSyncEngine\nAn object that manages the synchronization of local and remote record data.\nShared Records\nShare one or more records with other iCloud users."
  },
  {
    "title": "Local Records | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/local_records",
    "html": "Overview\n\nCloudKit uses records and record zones to manage your app’s schema and the data it contains. You create these objects on the user’s device and save them to iCloud. After saving the objects, other devices can access and use them.\n\nUse CKRecord to create a record, which must have a record ID. The record ID consists of the record’s name and the ID of the record zone to store it in. If you don’t provide a record zone ID, CloudKit stores the record in the default zone. Record IDs must be unique within the database that contains the record. Derive a record’s name from an object that guarantees uniqueness, such as a UUID. CloudKit assigns a unique record name if you don’t provide one. After you create a record, assign its keys and their values, and then save it to iCloud with CKModifyRecordsOperation. Use the same operation to delete records.\n\nCloudKit stores records in record zones, which allow you to group specific types of records. For example, you might store a Product record type in one zone, and a Customer record type in another. Storing records in zones can make fetching them more efficient because you can scope queries, and other fetch operations, to a specific record zone to prevent searching the entire database. Only the private database supports custom record zones. Use CKRecordZone to create a zone, and then save it to the user’s private database with CKModifyRecordZonesOperation. The same operation supports deleting record zones. When you delete a zone, CloudKit deletes all the records it contains. To retrieve one or more record zones from iCloud, use CKFetchRecordZonesOperation. After you save a zone, create a record zone subscription. CloudKit uses subscriptions to notify your app of record changes. For more information, see Remote Records.\n\nTo allow users to share records, you must store those records in a custom record zone. For more information, see Shared Records.\n\nCloudKit provides two ways to fetch records from iCloud. If you know the IDs of the records to fetch, use CKFetchRecordsOperation. Otherwise, use CKQuery and CKQueryOperation. A query consists of a record type, a predicate that defines criteria, and sort descriptors. You can further scope a query to retrieve records from a specific record zone. Queries limit the number of records they return. If the record count exceeds the limit, iCloud returns a subset of records and a cursor. You then use the cursor to fetch the next batch of records in another operation.\n\nIt’s important to consider the cost of a record when fetching it, especially when the record contains one or more assets. Both CKFetchRecordsOperation and CKQueryOperation provide a desiredKeys property, which allows you to specify the fields the operation retrieves from iCloud. If you don’t immediately need any associated assets, use desiredKeys to exclude the corresponding fields. You can then download individual assets as you need them.\n\nThe following example shows how to construct a query operation. It searches a specific record zone for properties in Cupertino, and uses a sort descriptor to request that iCloud returns the results in chronological order. The operation excludes a field that contains an asset using desiredKeys. For brevity, the example omits configuring the operation’s callbacks and executing it.\n\n// Create a predicate that performs a case-insensitive search \n// of the record's address field for the value 'Cupertino'.\nlet predicate = NSPredicate(format: \"address CONTAINS[c] 'Cupertino'\")\n\n\n// Use the predicate to create a query. Limit the query to \n// only retrieve records of the 'Property' record type.\nlet query = CKQuery(recordType: \"Property\", predicate: predicate)\n\n\n// Set the query's sort descriptors so that iCloud returns \n// the records in chronological order.\nquery.sortDescriptors = [\n    NSSortDescriptor(key: \"creationDate\", ascending: true)\n]\n\n\n// Use the query to create a query operation. Scope the \n// operation to the record zone that contains property\n// records.\nlet operation = CKQueryOperation(query: query)\noperation.zoneID = propertiesRecordZone.zoneID\n\n\n// Each property has an address, a brochure, an owner, and\n// a sale price. Don't include the 'brochure' field in the \n// query results. It contains a PDF asset, which can be \n// several megabytes in size.\noperation.desiredKeys = [\n    \"address\",\n    \"ownerName\",\n    \"salePrice\"\n]\n\n\nTopics\nTransactions\nclass CKModifyRecordZonesOperation\nAn operation that modifies one or more record zones.\nclass CKModifyRecordsOperation\nAn operation that modifies one or more records.\nFetch Requests\nclass CKFetchRecordZonesOperation\nAn operation for retrieving record zones from a database.\nclass CKFetchRecordsOperation\nAn operation for retrieving records from a database.\nQueries\nclass CKQuery\nA query that describes the criteria to apply when searching for records in a database.\nclass CKQueryOperation\nAn operation for executing queries in a database.\nclass CKLocationSortDescriptor\nAn object for sorting records that contain location data.\nBase Objects\nclass CKDatabaseOperation\nThe abstract base class for operations that act upon databases in CloudKit.\nSee Also\nRecords\nRemote Records\nUse subscriptions and change tokens to efficiently manage modifications to remote records.\nclass CKSyncEngine\nAn object that manages the synchronization of local and remote record data.\nShared Records\nShare one or more records with other iCloud users."
  },
  {
    "title": "Integrating a Text-Based Schema into Your Workflow | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/integrating_a_text-based_schema_into_your_workflow",
    "html": "Overview\n\nCloudKit’s textual representation enables you to simultaneously manage your schema and the application source code that depends on it. The CloudKit command line tools download, verify, and install a schema to your container’s sandbox environment, while the CloudKit dashboard promotes a schema to the production environment.\n\nWhen publishing a schema, CloudKit attempts to apply changes to the existing schema, if one exists, to convert it to the form specifed in the new schema. If the modifications required would result in potential data loss with respect to the current production schema (like removing a record type or field name that exists already), then the schema isn’t valid and CloudKit makes no changes.\n\nFor containers with an existing schema, use the CloudKit command line tools to download the container’s schema. Manually constructing your existing schema by hand isn’t recommended, as any mistakes may result in your existing sandbox data becoming inaccessible. A good practice is to integrate the schema into your source code repository.\n\nLearn the CloudKit Schema Language Grammar\n\nThe grammar for the CloudKit Schema Language contains all the elements to define your schema. Use the grammar to create roles, declare record types and their permissions, as well as specify data types and options for each field in the record.\n\ncreate-schema:\n    DEFINE SCHEMA \n        [ { create-role | record-type } \";\" ] ...\n\n\ncreate-role:\n    CREATE ROLE %role-name% \n    \nrecord-type:\n    RECORD TYPE %type-name% ( \n        {\n            [ %field-name% data-type [ field-options [..] ] ]\n            |\n            [ GRANT { READ | CREATE | WRITE } [, ... ] TO %role-name% ]\n        } [\",\" ... ]\n    )    \n\n\nfield-options:\n    | QUERYABLE\n    | SORTABLE\n    | SEARCHABLE\n\n\ndata-type:\n   primitive-type | list-type\n\n\nprimitive-type:\n   | ASSET\n   | BYTES\n   | DOUBLE\n   | [ ENCRYPTED ] { BYTES | STRING | DOUBLE | INT64 | LOCATION | TIMESTAMP }\n   | INT64\n   | LOCATION \n   | NUMBER [ PREFERRED AS { INT64 | DOUBLE } ]\n   | REFERENCE\n   | STRING\n   | TIMESTAMP\n   \nlist-type:\n   | LIST \"<\" primitive-type \">\"\n\n\n\n\n\n\nAdditional details and guidelines for creating roles, record types, type names, field names, data types and permissions are listed below.\n\ncreate-role\n\nCreates a new role and grants create, read, or write permissions on record types.\n\nrecord-type\n\nCreates a new record, composed of fields and their types, and grants permissions to roles.\n\ntype-name\n\nThe identifier for the record type. Use double quotes around the name if it’s a reserved word.\n\nfield-name\n\nThe identifier for a field within a record type. Use double quotes around the name if it’s a reserved word.\n\nfield-options\n\nThe options define additional attributes of the field.\n\nQUERYABLE - Maintains an index to optimize equality lookups on the field.\n\nSORTABLE - Maintains an index optimizing for range searches on the field.\n\nSEARCHABLE - Maintains a text search index on the field.\n\ndata-type\n\nThe data type for the field in the record.\n\nAvoid using the NUMBER type, which is only for when a field is implicitly added to a schema by a record modification on a sandbox container. If such a field has been implicitly added to a type in your schema, the PREFERRED AS syntax allows you to explicitly indicate which type the NUMBER should be treated as (INT64 or DOUBLE). Once you assign NUMBER as a PREFERRED AS type, future definitions must not change that type.\n\nGRANT\n\nThe GRANT clause defines permission on the record type in the PUBLIC database. Unless your schema explicitly grants permissions, a type has no security privileges available in the PUBLIC database, making the type unusable.\n\nThe grammar uses these conventions:\n\nBrackets indicate optional parts.\n\nBraces and vertical bars indicate that you must choose one alternative.\n\nAn ellipsis indicates that the preceding element can be repeated.\n\nNames surrounded by percent signs indicate identifiers.\n\nIdentifiers must follow existing CloudKit naming conventions and restrictions. User-defined identifiers must follow these rules:\n\nThe first character must be one of a-z or A-Z.\n\nSubsequent characters must be one of a-z, A-Z, 0-9, or _ (underscore).\n\nUse double quotes around identifiers to include keywords and reserved words in the syntax definition. For example, to create a type called grant, define it as “grant”. The reserved words in the CloudKit Schema Language are: grant, preferred, queryable, sortable, and searchable.\n\nAlso, CloudKit reserves identifiers starting with a leading underscore as system-defined identifiers. For example, all record types have an implicitly defined ___recordID field. Use double quotes when referring to such system fields as well.\n\nThe language allows comments in these forms:\n\n// Single-line comment\n-- Single-line comment\n/* \nMulti-line comment\n*/\n\n\nCloudKit doesn’t preserve the comments in your schema when you upload them to CloudKit. Additionally, when you retreive the schema, the order of the elements may differ from the order when the schema was created or updated.\n\nRecognize Implicit Fields and Roles\n\nAll record types have the following implicitly defined fields:\n\n“___createTime” TIMESTAMP\n\n”___createdBy” REFERENCE\n\n”___etag” STRING\n\n”___modTime” TIMESTAMP\n\n”___modifiedBy” REFERENCE\n\n”___recordID” REFERENCE\n\nThese field names are always present within the record time so it’s not necessary to explicitly provide them. If you wish to make any of these fields queryable, sortable, or searchable, then your type must explicitly specify the field and the attribute. You can’t change the type of these system fields.\n\nThough CloudKit won’t remove the system field names, it doesn’t maintain the field options if the field isn’t mentioned in later schema updates. For example, if the following is in your schema:\n\nRECORD TYPE ApplicationType  (\n        \"___createTime\" TIMESTAMP QUERYABLE,\n        name STRING,\n        ...\n)\n\n\nThen CloudKit builds an index for efficient searches on the record creation time field. Later, if you modify the schema to no longer mention the creation time field:\n\nRECORD TYPE ApplicationType  (\n        name STRING,\n        ...\n)\n\n\nThen the __createTime field remains on the record type (since it’s a required system field), but CloudKit drops the index on the field, and the user query performance may degrade or fail as a result.\n\nAdditionally, all record types have these implicitly defined roles:\n\n“_creator”\n\nThe user that created a given record (“Creator” in the dashboard).\n\n”_world”\n\nAll users (“World” in the dashboard).\n\n”_icloud”\n\nAll authenticated users (“Authenticated” in the dashboard).\n\nFor types that you wish to use in a PUBLIC database, include the following grants:\n\nGRANT WRITE TO \"_creator\"\nGRANT CREATE TO \"_icloud\"\nGRANT READ TO \"_world\"\n\n\nView an Example Schema\n\nThis sample schema defines a simple company department and employee information. It demonstrates extending the attributes of system fields and the double quotes necessary for referring to system identifiers.\n\nDEFINE SCHEMA\n    CREATE ROLE DeptManager;\n\n\n    RECORD TYPE Department (\n        \"___createTime\" TIMESTAMP QUERYABLE SORTABLE,\n        \"___recordID\" REFERENCE QUERYABLE,\n        name STRING,\n        address STRING,\n        phone LIST<STRING>,\n        employees LIST<REFERENCE>,\n        GRANT WRITE TO \"_creator\", \n        GRANT CREATE TO \"_icloud\",\n        GRANT READ TO \"_world\",\n        GRANT WRITE, CREATE, READ TO DeptManager\n    );\n\n\n    RECORD TYPE Employee (\n        \"___createTime\" TIMESTAMP QUERYABLE SORTABLE,\n        \"___recordID\" REFERENCE QUERYABLE,\n        name STRING,\n        address STRING,\n        hiredate TIMESTAMP,\n        salary INT64,\n        GRANT WRITE TO \"_creator\", \n        GRANT CREATE TO \"_icloud\",\n        GRANT READ TO \"_world\"\n    );\n\n\nSee Also\nSchemas\nDesigning and Creating a CloudKit Database\nCreate a schema to store your app’s objects as records in iCloud using CloudKit.\nManaging iCloud Containers with the CloudKit Database App\nInspect and modify the schema and data for your app's iCloud container.\nclass CKRecordZone\nA database partition that contains related records.\nclass CKRecord\nA collection of key-value pairs that store your app’s data.\nclass CKRecord.Reference\nA relationship between two records in a record zone.\nclass CKAsset\nAn external file that belongs to a record."
  },
  {
    "title": "CKAsset | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckasset",
    "html": "Overview\n\nUse assets to incorporate external files into your app’s records, such as photos, videos, and binary files. Alternatively, use assets when a field’s value is more than a few kilobytes in size. To associate an instance of CKAsset with a record, assign it to one of its fields.\n\nNote\n\nCloudKit stores only an asset’s data. If you require its filename, or any other file-system metadata, use one or more separate fields on the record to store it.\n\nCloudKit stores an asset’s data separately from a record that references it, but maintains an association with that record. When you save a record that has an asset, CloudKit saves both the record and the asset to the server. Similarly, when you fetch the record, the server returns the record and the asset.\n\nWhen you fetch a record that contains an asset, CloudKit stores the asset’s data in a staging area accessible to your app. Use the asset’s fileURL property to access its staged location. The system regularly deletes files in the staging area to reclaim disk space. To avoid this behavior, move the data into your app’s container as soon as you fetch it.\n\nIf you don’t require the asset when retrieving records, use the operation’s desiredKeys property to exclude the field. For more information, see CKFetchRecordsOperation, CKQueryOperation, and CKFetchRecordZoneChangesOperation.\n\nIf you no longer require an asset that’s on the server, you don’t delete it. Instead, orphan the asset by setting any fields that contain the asset to nil and then saving the record. CloudKit periodically deletes orphaned assets from the server.\n\nTopics\nCreating an Asset\ninit(fileURL: URL)\nCreates an asset that references a file.\nGetting the URL of the Asset\nvar fileURL: URL?\nThe URL for accessing the asset.\nRelationships\nInherits From\nNSObject\nConforms To\nCKRecordValueProtocol\nSendable\nSee Also\nSchemas\nDesigning and Creating a CloudKit Database\nCreate a schema to store your app’s objects as records in iCloud using CloudKit.\nManaging iCloud Containers with the CloudKit Database App\nInspect and modify the schema and data for your app's iCloud container.\nclass CKRecordZone\nA database partition that contains related records.\nclass CKRecord\nA collection of key-value pairs that store your app’s data.\nclass CKRecord.Reference\nA relationship between two records in a record zone.\nIntegrating a Text-Based Schema into Your Workflow\nDefine and update your schema with the CloudKit Schema Language."
  },
  {
    "title": "CKRecordZone | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckrecordzone",
    "html": "Overview\n\nZones are an important part of how you organize your data. The public and private databases each have a single default zone. In the private database, you can use CKRecordZone objects to create additional custom zones as necessary. Use custom zones to arrange and encapsulate groups of related records in the private database. Custom zones support other capabilities too, such as the ability to write multiple records as a single atomic transaction.\n\nTreat each custom zone as a single unit of data that is separate from every other zone in the database. Inside the zone, you add records as you would anywhere else. You can also create links between the records inside a zone by using the CKRecord.Reference class. However, the CKRecord.Reference class doesn’t support cross-zone linking, so each reference object must point to a record in the same zone as the current record.\n\nUse the CKRecordZone class as-is and don’t subclass it.\n\nCreating a Custom Record Zone\n\nGenerally, you use instances of this class to create and manage custom zones. Although you can use this class to retrieve a database’s default zone, most operations act on records in the default zone by default, so you rarely need to specify it explicitly.\n\nTo create a custom zone, use CKRecordZone to create the zone object, and then save that zone to the user’s private database using a CKModifyRecordZonesOperation object. You can’t save any records in the zone until you save it to the database. When creating records, explicitly specify the zone ID if you want the records to reside in a specific zone; otherwise, they save to the default zone. You can’t create custom zones in a public database.\n\nAfter creating a CKRecordZone object and saving it to the database, you don’t interact with the object much. Instead, most interactions occur with its corresponding CKRecordZone.ID object, which you use to refer to the zone when creating records.\n\nTopics\nCreating a Record Zone\ninit(zoneName: String)\nCreates a record zone object with the specified zone name.\ninit(zoneID: CKRecordZone.ID)\nCreates a record zone object with the specified zone ID.\nclass CKRecordZone.ID\nAn object that uniquely identifies a record zone in a database.\nGetting the Default Record Zone\nclass func `default`() -> CKRecordZone\nReturns the default record zone.\nGetting the Zone Attributes\nvar zoneID: CKRecordZone.ID\nThe unique ID of the zone.\nvar capabilities: CKRecordZone.Capabilities\nThe capabilities that the zone supports.\nstruct CKRecordZone.Capabilities\nThe capabilities that a record zone supports.\nSharing Records\nvar share: CKRecord.Reference?\nA reference to the record zone’s share record.\nRelationships\nInherits From\nNSObject\nConforms To\nNSCopying\nNSSecureCoding\nSendable\nSee Also\nSchemas\nDesigning and Creating a CloudKit Database\nCreate a schema to store your app’s objects as records in iCloud using CloudKit.\nManaging iCloud Containers with the CloudKit Database App\nInspect and modify the schema and data for your app's iCloud container.\nclass CKRecord\nA collection of key-value pairs that store your app’s data.\nclass CKRecord.Reference\nA relationship between two records in a record zone.\nclass CKAsset\nAn external file that belongs to a record.\nIntegrating a Text-Based Schema into Your Workflow\nDefine and update your schema with the CloudKit Schema Language."
  },
  {
    "title": "Managing iCloud Containers with the CloudKit Database App | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/managing_icloud_containers_with_the_cloudkit_database_app",
    "html": "Overview\n\nThe CloudKit Database app is a web-based tool for developers to manage their iCloud containers. You can sign in to the CloudKit Database app through the Apple Developer web portal or through the CloudKit Console at https://icloud.developer.apple.com/.\n\nWith the CloudKit Database app, you can:\n\nSee all the containers for your account.\n\nView and edit your development schema, and view your production schema.\n\nView and edit your test data during development or debugging.\n\nView logs and metrics for your containers.\n\nDeploy your schema to production. See Deploying an iCloud Container’s Schema.\n\nObtain API tokens for use with CloudKit web services and CloudKit JS. See Obtaining an API Token for an iCloud Container.\n\nNavigate to an iCloud Container’s Schema Management Page\n\nA schema defines record types and the possible relationships between them. You can use CloudKit Database Console or code to create your app’s schema. If you use code to create a just-in-time schema, the CloudKit Database app can help you verify the schema is correct.\n\nTo navigate to the iCloud container’s schema management page:\n\nSign in to CloudKit Console at https://icloud.developer.apple.com/.\n\nSelect the CloudKit Database from the app list.\n\nFrom the container selection drop-down at the top of the page, choose your app’s container.\n\nClick the Record Types menu item in the Schema section to open the container’s schema management page.\n\nAfter you select the container you want to manage, you can access information about the schema quickly by using the menu items. See Inspecting and Editing an iCloud Container’s Schema for more details.\n\nNavigate to an iCloud Container’s Data Management Page\n\nYou can use the CloudKit Database app to inspect data within the public database of an iCloud container. If you develop using the same iCloud account to store private data, you can also use the CloudKit Database app to inspect and edit private data.\n\nDon’t use the CloudKit Database app as a general data editor. Although you can create, modify, and delete records using CloudKit Dashboard, the intent of this functionality is to help you debug your schema during the design phase.\n\nTo navigate to the iCloud container’s data management page:\n\nSign in to CloudKit Console at https://icloud.developer.apple.com/.\n\nSelect the CloudKit Database from the app list.\n\nFrom the container selection drop-down at the top of the page, choose your app’s container.\n\nClick the Records menu item in the Data section to open the container’s data management page.\n\nFor more information about inspecting a container’s data, see Handling an iCloud Container’s Data.\n\nTopics\nContainer Management\nInspecting and Editing an iCloud Container’s Schema\nReview and edit the schema for your app’s container using the CloudKit Database app.\nHandling an iCloud Container’s Data\nInspect and manage your app’s iCloud container data using the CloudKit Database app.\nDeploying an iCloud Container’s Schema\nReset your container’s state during development and deploy your container’s schema to production.\nObtaining an API Token for an iCloud Container\nGenerate an API token to access CloudKit web services or use CloudKit JS.\nSee Also\nSchemas\nDesigning and Creating a CloudKit Database\nCreate a schema to store your app’s objects as records in iCloud using CloudKit.\nclass CKRecordZone\nA database partition that contains related records.\nclass CKRecord\nA collection of key-value pairs that store your app’s data.\nclass CKRecord.Reference\nA relationship between two records in a record zone.\nclass CKAsset\nAn external file that belongs to a record.\nIntegrating a Text-Based Schema into Your Workflow\nDefine and update your schema with the CloudKit Schema Language."
  },
  {
    "title": "Deciding whether CloudKit is right for your app | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/deciding_whether_cloudkit_is_right_for_your_app",
    "html": "Overview\n\nUse iCloud to store your app’s data and make that data available on the web and on each device a person owns. iCloud provides a number of options for storing app data, where each option provides a different set of features and a varying amount of control over that data. Some options are easier to implement than others, so it’s important that you carefully consider each one and its suitability for your app before choosing CloudKit.\n\nStore documents, images, and other file types in iCloud\n\nIf your app creates files such as documents and images, and you want those files to sync across a person’s devices, use iCloud Documents. You decide which files to sync by storing them in your app’s ubiquity container, and iCloud manages the persistence and synchronization of those files for you. For more information, see url(forUbiquityContainerIdentifier:) and Configuring iCloud services.\n\nIn addition, the device’s owner can use iCloud Backup to store a snapshot of their device, including files that your app creates. That person can then restore an existing or new device from that snapshot. Even though your app isn’t explicitly participating in the system backup process, any files your app creates contribute to the backup’s overall size, and large backups may lead to longer restore times. If your app has files that the system doesn’t need to back up, such as temporary or cached files, use the available APIs to indicate to the system that it can ignore them. For more information, see Optimizing Your App’s Data for iCloud Backup.\n\nSync preferences and other key-value pairs using iCloud\n\nIf your app maintains a set of feature flags or other lightweight configuration, or enables someone to customize the app’s look and feel, you may want to synchronize that state across a person’s devices to create a rich and consistent experience. Using iCloud key-value storage, your app can store a maximum of 1,024 string keys, with associated data, and iCloud automatically keeps those key-value pairs in sync. Key-value storage supports only numeric types, as well as Bool, String, Date, Data, Array, and Dictionary. For more information, see NSUbiquitousKeyValueStore.\n\nStore model objects in CloudKit\n\nIf your app manages a complex graph of model objects, which may include relationships between those objects, use one of the options in the following table:\n\nNSPersistentCloudKitContainer\n\n\t\n\nIf you don’t require granular control over how and when your data syncs, or your app already uses NSPersistentContainer to persist data to disk, prefer this approach. NSPersistentCloudKitContainer provides a fully managed schema, maintains a local replica of your data, and supports the public, private, and shared databases. For more information, see Setting Up Core Data with CloudKit.\n\n\n\n\nCKSyncEngine\n\n\t\n\nWith a sync engine, you retain control of your data but the engine automatically schedules sync operations to fetch and send changes to that data. Your app participates in those operations by handling sync events and providing changed records when the engine requests them. Use CKSyncEngine with private and shared databases.\n\n\n\n\nCKDatabase, CKOperation, and related types\n\n\t\n\nCloudKit’s base types provide full control over the data you store, and the design and management of your container’s schema. This approach, however, is the most intricate and requires you to manually fetch and send records, resolve any conflicts, schedule operations, handle iCloud account changes, process change notifications, persist server change tokens, and so on. For more information, see Enabling CloudKit in Your App.\n\nSee Also\nEssentials\nEnabling CloudKit in Your App\nConfigure your app to store data in iCloud using CloudKit."
  },
  {
    "title": "Enabling CloudKit in Your App | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/enabling_cloudkit_in_your_app",
    "html": "Overview\n\nOnce you’ve determined that CloudKit is right for your app, you’re ready to set up your Xcode project to enable CloudKit development.\n\nAdd the iCloud Capability to Your Xcode Project\n\nAdding the iCloud capability to your project sets up the initial project entitlements. Before you proceed, verify that your Apple Developer Program membership is active and has admin permissions.\n\nTo add the iCloud capability:\n\nIn the Xcode Project navigator, select your project and your project target.\n\nClick the “Signing and Capabilities” tab and select “Automatically manage signing.”\n\nSpecify your development team.\n\nMake sure that your bundle identifier is one you want to use for your app. (This identifier determines the name of the iCloud container created in a later step.)\n\nClick the + Capability button, then search for iCloud in the Add Capability editor and select that capability. An iCloud section appears on your app’s Signing and Capabilities page.\n\nCreate Your Container\n\nNext, add the CloudKit service to add the appropriate entitlements to your project and tell iCloud to create a container for your app data:\n\nSelect the CloudKit checkbox. In addition to adding the CloudKit capability to your app, this selection also creates an iCloud container and adds the Push Notifications capability. The name of the container is your app’s bundle identifier prefixed with “iCloud.\"\n\nCheck the box next to the container name.\n\nMultiple apps and users have access to iCloud, but each app’s data and schema, together, are typically in separate containers. Although an app can have multiple containers or share a container, each app has one default container. Once you’ve created a container, you can’t delete or rename it.\n\nSelect or Create an iCloud Account for Development\n\nYou need an iCloud account to save records to a container. In your app or the simulator on which you test your app during development, enter the credentials for this iCloud account. If you don’t have an iCloud account, create one for use during development. In macOS, launch System Preferences and click Sign In. Click Create Apple ID under the Apple ID text field and follow the instructions.\n\nNote that your iCloud account is distinct from your Apple Developer account; however, you can use the same email address for both. Doing so gives you access to your iCloud account’s private user data in CloudKit Dashboard, which can be helpful for debugging.\n\nEnter iCloud Credentials Before Running Your App\n\nEnter your iCloud account credentials on a simulator or app-testing device. Entering the iCloud credentials enables reading from—and writing to—users’ own private and shared databases and, potentially, writing to the container’s public database.\n\nTo enter your credentials on an iOS or iPadOS device:\n\nLaunch the Settings app and click \"Sign in to your iPhone/iPad.\"\n\nEnter your Apple ID and password.\n\nClick Next. Wait until the system verifies your iCloud account.\n\nTo enable iCloud Drive, choose iCloud and then click the iCloud Drive switch. If the switch doesn’t appear, iCloud Drive is already enabled.\n\nPerform the same sign-in process for each iOS or iPadOS simulator you test your app on. You can access the simulators from Xcode by choosing Xcode > Open Developer Tool > Simulator.\n\nTo enter your credentials for macOS, go to System Preferences.\n\nView Your Container in CloudKit Dashboard\n\nCloudKit Dashboard is a web-based tool that lets you manage your app’s iCloud containers. It appears within the Apple Developer web portal, and you can use it to ensure that your container exists.\n\nUsing a web browser, such as Safari, navigate to the CloudKit Dashboard webpage at https://icloud.developer.apple.com/.\n\nIf you’re asked to sign in, enter your credentials and click Sign In.\n\nOn the CloudKit Dashboard page, verify that your container appears in the container list.\n\nFor more information on CloudKit Dashboard, see Managing iCloud Containers with the CloudKit Database App.\n\nSee Also\nEssentials\nDeciding whether CloudKit is right for your app\nExplore the various options you have for using iCloud to store and sync your app’s data."
  },
  {
    "title": "CKErrorRetryAfterKey | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/ckerrorretryafterkey",
    "html": "Discussion\n\nAn NSNumber that contains the number of seconds until you can retry a request. CloudKit adds this key to the error’s userInfo dictionary when the error code is CKError.Code.serviceUnavailable or CKError.Code.requestRateLimited.\n\nSee Also\nErrors\nlet CKErrorDomain: String\nThe error domain for CloudKit errors.\nstruct CKError\nA type that describes a CloudKit error.\nlet CKErrorUserDidResetEncryptedDataKey: String\nThe key that determines whether CloudKit deletes a record zone because of a user action.\nlet CKPartialErrorsByItemIDKey: String\nThe key to retrieve partial errors.\nRecord Changed Error Keys\nConstants that represent conflicting records in a save operation."
  },
  {
    "title": "Providing User Access to CloudKit Data | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/providing_user_access_to_cloudkit_data",
    "html": "Overview\n\nUser data in CloudKit belongs to the user. For this reason, apps that integrate with CloudKit need to provide users with a way to view and export their data.\n\nIdentify Containers and Record Types\n\nTo be sure that you're querying all of the data that your app stores, cross-reference the list of containers your app has access to in Xcode, and assemble a list of those containers' identifiers.\n\nThe CloudKit Dashboard lists the different record types you define for each container in your app. Assemble a list of these types and make sure that each type has a queryable index on its recordName field.\n\nAssociate Record Types with Containers\n\nAssociate the record types with the container they appear in. The example below uses a dictionary to represent the relationship between containers and the record types they contain:\n\nlet defaultContainer = CKContainer.default()\nlet documents = CKContainer(identifier: \"iCloud.com.example.myexampleapp.documents\")\nlet settings = CKContainer(identifier: \"iCloud.com.example.myexampleapp.settings\")\n\n\nlet containerRecordTypes: [CKContainer: [String]] = [\n    defaultContainer: [\"log\", \"verboseLog\"],\n    documents: [\"textDocument\", \"spreadsheet\"],\n    settings: [\"preference\", \"profile\"]\n]\n\n\nlet containers = Array(containerRecordTypes.keys)\n\n\nFind and List All Records\n\nStore user data in a container's private database. Use the containers in the example above to find all record zones in the private database for each container that your app uses.\n\nThe example below shows how to iterate over the containers, record zones, and records. It also shows how to list the fields for each record, which you use to show the data in those records:\n\n// Utility function to display records.\n// Customize it to display records appropriately\n// according to your app's unique record types.\nfunc printRecords(_ records: [CKRecord]) {\n    for record in records {\n        for key in record.allKeys() {\n            let value = record[key]\n            print(key + \" = \" + (value?.description ?? \"\") + \")\")\n        }\n    }\n}\n\n\nfor container in containers {\n    // User data should be stored in the private database.\n    let database = container.privateCloudDatabase\n    \n    database.fetchAllRecordZones { zones, error in\n        guard let zones = zones, error == nil else {\n            print(error!)\n            return\n        }\n        \n        // The true predicate represents a query for all records.\n        let alwaysTrue = NSPredicate(value: true)\n        for zone in zones {\n            for recordType in containerRecordTypes[container] ?? [] {\n                let query = CKQuery(recordType: recordType, predicate: alwaysTrue)\n                database.perform(query, inZoneWith: zone.zoneID) { records, error in\n                    guard let records = records, error == nil else {\n                        print(\"An error occurred fetching these records.\")\n                        return\n                    }\n                    \n                    printRecords(records)\n                }\n            }\n        }\n    }\n}\n\n\nUse each field's keys and values to give users an accessible report of the data your app stores in CloudKit.\n\nNote\n\nIf your app uses CloudKit subscriptions to maintain an on-device copy of user data, you can use that copy to generate the report rather than querying CloudKit.\n\nSee Also\nPrivacy\nEncrypting User Data\nDeploy industry-standard security technologies using CloudKit encryption.\nChanging Access Controls on User Data\nRestrict access to or remove restrictions from a user's data at their request.\nclass CKFetchWebAuthTokenOperation\nAn operation that creates an authentication token for use with CloudKit web services.\nResponding to Requests to Delete Data\nProvide options for users to delete their CloudKit data from your app.\nIdentifying an App's Containers\nUse Xcode's Project navigator to find the identifiers of active CloudKit containers."
  },
  {
    "title": "CloudKit | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/cloudkit/",
    "html": "Overview\n\nThe CloudKit framework provides interfaces for moving data between your app and your iCloud containers. You use CloudKit to store your app’s existing data in the cloud so that the user can access it on multiple devices. You can also store data in a public area where all users can access it.\n\nUsing the CloudKit framework\n\nCloudKit isn’t a replacement for your app’s existing data objects. Instead, CloudKit provides complementary services for managing the transfer of data to and from iCloud servers. Because it provides minimal offline caching support, CloudKit relies on the presence of the network and, optionally, a valid iCloud account. A valid iCloud account is only necessary when you want to save data that is specific to a single user. Apps can always store data in a public area that is readable by all users.\n\nRecords are at the heart of all data transactions in CloudKit. A record is a dictionary of key-value pairs that represents the data you want to save. You can add new keys and values to records at any time, and you can create links between related records to organize your data. The CKRecord class defines the interfaces for managing the contents of records. CloudKit also relies heavily on the use of Operation objects to manage the asynchronous transfer of data to and from the server.\n\nBefore using CloudKit, make sure it’s the most suitable option for your app. For more information, see Deciding whether CloudKit is right for your app.\n\nNote\n\nThe classes of the CloudKit framework aren’t for subclassing. Use these classes as-is to save, retrieve, and manipulate data in iCloud. In addition, many of the protocols of this framework aren’t for adoption by classes outside of CloudKit and UIKit. Each protocol reference document includes information about whether you can adopt the protocol in your own classes.\n\nTopics\nEssentials\nDeciding whether CloudKit is right for your app\nExplore the various options you have for using iCloud to store and sync your app’s data.\nEnabling CloudKit in Your App\nConfigure your app to store data in iCloud using CloudKit.\nSchemas\nDesigning and Creating a CloudKit Database\nCreate a schema to store your app’s objects as records in iCloud using CloudKit.\nManaging iCloud Containers with the CloudKit Database App\nInspect and modify the schema and data for your app's iCloud container.\nclass CKRecordZone\nA database partition that contains related records.\nclass CKRecord\nA collection of key-value pairs that store your app’s data.\nclass CKRecord.Reference\nA relationship between two records in a record zone.\nclass CKAsset\nAn external file that belongs to a record.\nIntegrating a Text-Based Schema into Your Workflow\nDefine and update your schema with the CloudKit Schema Language.\nRecords\nLocal Records\nManipulate records on-device and save changes to the server.\nRemote Records\nUse subscriptions and change tokens to efficiently manage modifications to remote records.\nclass CKSyncEngine\nAn object that manages the synchronization of local and remote record data.\nShared Records\nShare one or more records with other iCloud users.\nUser discovery\nclass CKUserIdentity\nThe identity of a user.\nclass CKUserIdentity.LookupInfo\nThe criteria to use when searching for discoverable iCloud users.\nCore objects\nclass CKContainer\nA conduit to your app’s databases.\nclass CKDatabase\nAn object that represents a collection of record zones and subscriptions.\nclass CKOperationGroup\nAn explicit association between two or more operations.\nPrivacy\nEncrypting User Data\nDeploy industry-standard security technologies using CloudKit encryption.\nProviding User Access to CloudKit Data\nProvide users access to the data your app stores on their behalf.\nChanging Access Controls on User Data\nRestrict access to or remove restrictions from a user's data at their request.\nclass CKFetchWebAuthTokenOperation\nAn operation that creates an authentication token for use with CloudKit web services.\nResponding to Requests to Delete Data\nProvide options for users to delete their CloudKit data from your app.\nIdentifying an App's Containers\nUse Xcode's Project navigator to find the identifiers of active CloudKit containers.\nErrors\nlet CKErrorDomain: String\nThe error domain for CloudKit errors.\nstruct CKError\nA type that describes a CloudKit error.\nlet CKErrorRetryAfterKey: String\nThe key to retrieve the number of seconds to wait before you retry a request.\nlet CKErrorUserDidResetEncryptedDataKey: String\nThe key that determines whether CloudKit deletes a record zone because of a user action.\nlet CKPartialErrorsByItemIDKey: String\nThe key to retrieve partial errors.\nRecord Changed Error Keys\nConstants that represent conflicting records in a save operation.\nDeprecated\nDeprecated Symbols\nReview unsupported symbols and their replacements."
  }
]