[
  {
    "title": "!=(_:_:)",
    "url": "https://developer.apple.com/documentation/musickit/musicplayer/queue/entryinsertionposition/!=(_:_:)",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nInequality is the inverse of equality. For any values a and b, a != b implies that a == b is false.\n\nThis is the default implementation of the not-equal-to operator (!=) for any type that conforms to Equatable."
  },
  {
    "title": "dropLast(_:)",
    "url": "https://developer.apple.com/documentation/musickit/applicationmusicplayer/queue-swift.class/entries-swift.struct/droplast(_:)",
    "html": "Parameters\nk\n\nThe number of elements to drop off the end of the collection. k must be greater than or equal to zero.\n\nReturn Value\n\nA subsequence that leaves off k elements from the end.\n\nDiscussion\n\nIf the number of elements to drop exceeds the number of elements in the collection, the result is an empty subsequence.\n\nlet numbers = [1, 2, 3, 4, 5]\nprint(numbers.dropLast(2))\n// Prints \"[1, 2, 3]\"\nprint(numbers.dropLast(10))\n// Prints \"[]\"\n\n\nComplexity\n\nO(1) if the collection conforms to RandomAccessCollection; otherwise, O(k), where k is the number of elements to drop."
  },
  {
    "title": "prefix(upTo:)",
    "url": "https://developer.apple.com/documentation/musickit/applicationmusicplayer/queue-swift.class/entries-swift.struct/prefix(upto:)",
    "html": "Parameters\nend\n\nThe “past the end” index of the resulting subsequence. end must be a valid index of the collection.\n\nReturn Value\n\nA subsequence up to, but not including, the end position.\n\nDiscussion\n\nThe resulting subsequence does not include the element at the position end. The following example searches for the index of the number 40 in an array of integers, and then prints the prefix of the array up to, but not including, that index:\n\nlet numbers = [10, 20, 30, 40, 50, 60]\nif let i = numbers.firstIndex(of: 40) {\n    print(numbers.prefix(upTo: i))\n}\n// Prints \"[10, 20, 30]\"\n\n\nPassing the collection’s starting index as the end parameter results in an empty subsequence.\n\nprint(numbers.prefix(upTo: numbers.startIndex))\n// Prints \"[]\"\n\n\nUsing the prefix(upTo:) method is equivalent to using a partial half-open range as the collection’s subscript. The subscript notation is preferred over prefix(upTo:).\n\nif let i = numbers.firstIndex(of: 40) {\n    print(numbers[..<i])\n}\n// Prints \"[10, 20, 30]\"\n\n\nComplexity\n\nO(1)"
  },
  {
    "title": "formIndex(_:offsetBy:limitedBy:)",
    "url": "https://developer.apple.com/documentation/musickit/applicationmusicplayer/queue-swift.class/entries-swift.struct/formindex(_:offsetby:limitedby:)",
    "html": "Parameters\ni\n\nA valid index of the collection.\n\ndistance\n\nThe distance to offset i. distance must not be negative unless the collection conforms to the BidirectionalCollection protocol.\n\nlimit\n\nA valid index of the collection to use as a limit. If distance > 0, a limit that is less than i has no effect. Likewise, if distance < 0, a limit that is greater than i has no effect.\n\nReturn Value\n\ntrue if i has been offset by exactly distance steps without going beyond limit; otherwise, false. When the return value is false, the value of i is equal to limit.\n\nDiscussion\n\nThe value passed as distance must not offset i beyond the bounds of the collection, unless the index passed as limit prevents offsetting beyond those bounds.\n\nComplexity\n\nO(1) if the collection conforms to RandomAccessCollection; otherwise, O(k), where k is the absolute value of distance."
  },
  {
    "title": "prefix(through:)",
    "url": "https://developer.apple.com/documentation/musickit/applicationmusicplayer/queue-swift.class/entries-swift.struct/prefix(through:)",
    "html": "Parameters\nposition\n\nThe index of the last element to include in the resulting subsequence. position must be a valid index of the collection that is not equal to the endIndex property.\n\nReturn Value\n\nA subsequence up to, and including, the given position.\n\nDiscussion\n\nThe resulting subsequence includes the element at the position specified by the through parameter. The following example searches for the index of the number 40 in an array of integers, and then prints the prefix of the array up to, and including, that index:\n\nlet numbers = [10, 20, 30, 40, 50, 60]\nif let i = numbers.firstIndex(of: 40) {\n    print(numbers.prefix(through: i))\n}\n// Prints \"[10, 20, 30, 40]\"\n\n\nUsing the prefix(through:) method is equivalent to using a partial closed range as the collection’s subscript. The subscript notation is preferred over prefix(through:).\n\nif let i = numbers.firstIndex(of: 40) {\n    print(numbers[...i])\n}\n// Prints \"[10, 20, 30, 40]\"\n\n\nComplexity\n\nO(1)"
  },
  {
    "title": "formIndex(_:offsetBy:)",
    "url": "https://developer.apple.com/documentation/musickit/applicationmusicplayer/queue-swift.class/entries-swift.struct/formindex(_:offsetby:)",
    "html": "Parameters\ni\n\nA valid index of the collection.\n\ndistance\n\nThe distance to offset i. distance must not be negative unless the collection conforms to the BidirectionalCollection protocol.\n\nDiscussion\n\nThe value passed as distance must not offset i beyond the bounds of the collection.\n\nComplexity\n\nO(1) if the collection conforms to RandomAccessCollection; otherwise, O(k), where k is the absolute value of distance."
  },
  {
    "title": "description",
    "url": "https://developer.apple.com/documentation/musickit/playlist/entry/description",
    "html": "Discussion\n\nCalling this property directly is discouraged. Instead, convert an instance of any type to a string by using the String(describing:) initializer. This initializer works with any type, and uses the custom description property for types that conform to CustomStringConvertible:\n\nstruct Point: CustomStringConvertible {\n    let x: Int, y: Int\n\n\n    var description: String {\n        return \"(\\(x), \\(y))\"\n    }\n}\n\n\nlet p = Point(x: 21, y: 30)\nlet s = String(describing: p)\nprint(s)\n// Prints \"(21, 30)\"\n\n\nThe conversion of p to a string in the assignment to s uses the Point type’s description property."
  },
  {
    "title": "debugDescription",
    "url": "https://developer.apple.com/documentation/musickit/playlist/entry/debugdescription",
    "html": "Discussion\n\nCalling this property directly is discouraged. Instead, convert an instance of any type to a string by using the String(reflecting:) initializer. This initializer works with any type, and uses the custom debugDescription property for types that conform to CustomDebugStringConvertible:\n\nstruct Point: CustomDebugStringConvertible {\n    let x: Int, y: Int\n\n\n    var debugDescription: String {\n        return \"(\\(x), \\(y))\"\n    }\n}\n\n\nlet p = Point(x: 21, y: 30)\nlet s = String(reflecting: p)\nprint(s)\n// Prints \"(21, 30)\"\n\n\nThe conversion of p to a string in the assignment to s uses the Point type’s debugDescription property."
  },
  {
    "title": "==(_:_:)",
    "url": "https://developer.apple.com/documentation/musickit/musicplayer/queue/entryinsertionposition/==(_:_:)",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nEquality is the inverse of inequality. For any values a and b, a == b implies that a != b is false."
  },
  {
    "title": "hash(into:)",
    "url": "https://developer.apple.com/documentation/musickit/musicplayer/queue/entryinsertionposition/hash(into:)",
    "html": "Parameters\nhasher\n\nThe hasher to use when combining the components of this instance.\n\nDiscussion\n\nImplement this method to conform to the Hashable protocol. The components used for hashing must be the same as the components compared in your type’s == operator implementation. Call hasher.combine(_:) with each of these components.\n\nImportant\n\nIn your implementation of hash(into:), don’t call finalize() on the hasher instance provided, or replace it with a different instance. Doing so may become a compile-time error in the future."
  },
  {
    "title": "!=(_:_:)",
    "url": "https://developer.apple.com/documentation/musickit/musicplayer/queue/!=(_:_:)",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nInequality is the inverse of equality. For any values a and b, a != b implies that a == b is false.\n\nThis is the default implementation of the not-equal-to operator (!=) for any type that conforms to Equatable."
  },
  {
    "title": "encode(to:)",
    "url": "https://developer.apple.com/documentation/musickit/musiclibrarysearchresponse/topresult/encode(to:)",
    "html": "Parameters\nencoder\n\nThe encoder to write data to.\n\nDiscussion\n\nIf the value fails to encode anything, encoder will encode an empty keyed container in its place.\n\nThis function throws an error if any values are invalid for the given encoder’s format."
  },
  {
    "title": "first",
    "url": "https://developer.apple.com/documentation/musickit/applicationmusicplayer/queue-swift.class/entries-swift.struct/first",
    "html": "Discussion\n\nIf the collection is empty, the value of this property is nil.\n\nlet numbers = [10, 20, 30, 40, 50]\nif let firstNumber = numbers.first {\n    print(firstNumber)\n}\n// Prints \"10\"\n"
  },
  {
    "title": "dropFirst(_:)",
    "url": "https://developer.apple.com/documentation/musickit/applicationmusicplayer/queue-swift.class/entries-swift.struct/dropfirst(_:)",
    "html": "Parameters\nk\n\nThe number of elements to drop from the beginning of the collection. k must be greater than or equal to zero.\n\nReturn Value\n\nA subsequence starting after the specified number of elements.\n\nDiscussion\n\nIf the number of elements to drop exceeds the number of elements in the collection, the result is an empty subsequence.\n\nlet numbers = [1, 2, 3, 4, 5]\nprint(numbers.dropFirst(2))\n// Prints \"[3, 4, 5]\"\nprint(numbers.dropFirst(10))\n// Prints \"[]\"\n\n\nComplexity\n\nO(1) if the collection conforms to RandomAccessCollection; otherwise, O(k), where k is the number of elements to drop from the beginning of the collection."
  },
  {
    "title": "firstIndex(where:)",
    "url": "https://developer.apple.com/documentation/musickit/applicationmusicplayer/queue-swift.class/entries-swift.struct/firstindex(where:)",
    "html": "Parameters\npredicate\n\nA closure that takes an element as its argument and returns a Boolean value that indicates whether the passed element represents a match.\n\nReturn Value\n\nThe index of the first element for which predicate returns true. If no elements in the collection satisfy the given predicate, returns nil.\n\nDiscussion\n\nYou can use the predicate to find an element of a type that doesn’t conform to the Equatable protocol or to find an element that matches particular criteria. Here’s an example that finds a student name that begins with the letter “A”:\n\nlet students = [\"Kofi\", \"Abena\", \"Peter\", \"Kweku\", \"Akosua\"]\nif let i = students.firstIndex(where: { $0.hasPrefix(\"A\") }) {\n    print(\"\\(students[i]) starts with 'A'!\")\n}\n// Prints \"Abena starts with 'A'!\"\n\n\nComplexity\n\nO(n), where n is the length of the collection."
  },
  {
    "title": "drop(while:)",
    "url": "https://developer.apple.com/documentation/musickit/applicationmusicplayer/queue-swift.class/entries-swift.struct/drop(while:)",
    "html": "Parameters\npredicate\n\nA closure that takes an element of the sequence as its argument and returns true if the element should be skipped or false if it should be included. Once the predicate returns false it will not be called again.\n\nDiscussion\n\nComplexity\n\nO(n), where n is the length of the collection."
  },
  {
    "title": "debugDescription",
    "url": "https://developer.apple.com/documentation/musickit/musiclibrarysearchresponse/topresult/debugdescription",
    "html": "Discussion\n\nCalling this property directly is discouraged. Instead, convert an instance of any type to a string by using the String(reflecting:) initializer. This initializer works with any type, and uses the custom debugDescription property for types that conform to CustomDebugStringConvertible:\n\nstruct Point: CustomDebugStringConvertible {\n    let x: Int, y: Int\n\n\n    var debugDescription: String {\n        return \"(\\(x), \\(y))\"\n    }\n}\n\n\nlet p = Point(x: 21, y: 30)\nlet s = String(reflecting: p)\nprint(s)\n// Prints \"(21, 30)\"\n\n\nThe conversion of p to a string in the assignment to s uses the Point type’s debugDescription property."
  },
  {
    "title": "init(from:)",
    "url": "https://developer.apple.com/documentation/musickit/musiclibrarysearchresponse/topresult/init(from:)",
    "html": "Parameters\ndecoder\n\nThe decoder to read data from.\n\nDiscussion\n\nThis initializer throws an error if reading from the decoder fails, or if the data read is corrupted or otherwise invalid."
  },
  {
    "title": "randomElement(using:)",
    "url": "https://developer.apple.com/documentation/musickit/applicationmusicplayer/queue-swift.class/entries-swift.struct/randomelement(using:)",
    "html": "Parameters\ngenerator\n\nThe random number generator to use when choosing a random element.\n\nReturn Value\n\nA random element from the collection. If the collection is empty, the method returns nil.\n\nDiscussion\n\nCall randomElement(using:) to select a random element from an array or another collection when you are using a custom random number generator. This example picks a name at random from an array:\n\nlet names = [\"Zoey\", \"Chloe\", \"Amani\", \"Amaia\"]\nlet randomName = names.randomElement(using: &myGenerator)!\n// randomName == \"Amani\"\n\n\nComplexity\n\nO(1) if the collection conforms to RandomAccessCollection; otherwise, O(n), where n is the length of the collection.\n\nNote\n\nThe algorithm used to select a random element may change in a future version of Swift. If you’re passing a generator that results in the same sequence of elements each time you run your program, that sequence may change when your program is compiled using a different version of Swift."
  },
  {
    "title": "shuffle()",
    "url": "https://developer.apple.com/documentation/musickit/applicationmusicplayer/queue-swift.class/entries-swift.struct/shuffle()",
    "html": "Discussion\n\nUse the shuffle() method to randomly reorder the elements of an array.\n\nvar names = [\"Alejandro\", \"Camila\", \"Diego\", \"Luciana\", \"Luis\", \"Sofía\"]\nnames.shuffle()\n// names == [\"Luis\", \"Camila\", \"Luciana\", \"Sofía\", \"Alejandro\", \"Diego\"]\n\n\nThis method is equivalent to calling shuffle(using:), passing in the system’s default random generator.\n\nComplexity\n\nO(n), where n is the length of the collection."
  },
  {
    "title": "withContiguousMutableStorageIfAvailable(_:)",
    "url": "https://developer.apple.com/documentation/musickit/applicationmusicplayer/queue-swift.class/entries-swift.struct/withcontiguousmutablestorageifavailable(_:)",
    "html": "Parameters\nbody\n\nA closure that receives an in-out UnsafeMutableBufferPointer to the collection’s contiguous storage.\n\nReturn Value\n\nThe value returned from body, unless the collection doesn’t support contiguous storage, in which case the method ignores body and returns nil.\n\nDiscussion\n\nThis method calls body(buffer), where buffer provides access to the contiguous mutable storage of the entire collection. If the contiguous storage doesn’t exist, the collection creates it. If the collection doesn’t support an internal representation in the form of contiguous mutable storage, this method doesn’t call body — it immediately returns nil.\n\nThe optimizer can often eliminate bounds- and uniqueness-checking within an algorithm. When that fails, however, invoking the same algorithm on the buffer argument may let you trade safety for speed.\n\nAlways perform any necessary cleanup in the closure, because the method makes no guarantees about the state of the collection if the closure throws an error. Your changes to the collection may be absent from the collection after throwing the error, because the closure could receive a temporary copy rather than direct access to the collection’s storage.\n\nWarning\n\nYour body closure must not replace buffer. This leads to a crash in all implementations of this method within the standard library.\n\nSuccessive calls to this method may provide a different pointer on each call. Don’t store buffer outside of this method.\n\nA Collection that provides its own implementation of this method must provide contiguous storage to its elements in the same order as they appear in the collection. This guarantees that it’s possible to generate contiguous mutable storage to any of its subsequences by slicing buffer with a range formed from the distances to the subsequence’s startIndex and endIndex, respectively."
  },
  {
    "title": "swapAt(_:_:)",
    "url": "https://developer.apple.com/documentation/musickit/applicationmusicplayer/queue-swift.class/entries-swift.struct/swapat(_:_:)",
    "html": "Parameters\ni\n\nThe index of the first value to swap.\n\nj\n\nThe index of the second value to swap.\n\nDiscussion\n\nBoth parameters must be valid indices of the collection that are not equal to endIndex. Calling swapAt(_:_:) with the same index as both i and j has no effect.\n\nComplexity\n\nO(1)"
  },
  {
    "title": "encode(to:)",
    "url": "https://developer.apple.com/documentation/musickit/playlist/entry/encode(to:)",
    "html": "Parameters\nencoder\n\nThe encoder to write data to.\n\nDiscussion\n\nIf the value fails to encode anything, encoder will encode an empty keyed container in its place.\n\nThis function throws an error if any values are invalid for the given encoder’s format."
  },
  {
    "title": "sort(by:)",
    "url": "https://developer.apple.com/documentation/musickit/applicationmusicplayer/queue-swift.class/entries-swift.struct/sort(by:)",
    "html": "Parameters\nareInIncreasingOrder\n\nA predicate that returns true if its first argument should be ordered before its second argument; otherwise, false. If areInIncreasingOrder throws an error during the sort, the elements may be in a different order, but none will be lost.\n\nDiscussion\n\nWhen you want to sort a collection of elements that don’t conform to the Comparable protocol, pass a closure to this method that returns true when the first element should be ordered before the second.\n\nIn the following example, the closure provides an ordering for an array of a custom enumeration that describes an HTTP response. The predicate orders errors before successes and sorts the error responses by their error code.\n\nenum HTTPResponse {\n    case ok\n    case error(Int)\n}\n\n\nvar responses: [HTTPResponse] = [.error(500), .ok, .ok, .error(404), .error(403)]\nresponses.sort {\n    switch ($0, $1) {\n    // Order errors by code\n    case let (.error(aCode), .error(bCode)):\n        return aCode < bCode\n\n\n    // All successes are equivalent, so none is before any other\n    case (.ok, .ok): return false\n\n\n    // Order errors before successes\n    case (.error, .ok): return true\n    case (.ok, .error): return false\n    }\n}\nprint(responses)\n// Prints \"[.error(403), .error(404), .error(500), .ok, .ok]\"\n\n\nAlternatively, use this method to sort a collection of elements that do conform to Comparable when you want the sort to be descending instead of ascending. Pass the greater-than operator (>) operator as the predicate.\n\nvar students = [\"Kofi\", \"Abena\", \"Peter\", \"Kweku\", \"Akosua\"]\nstudents.sort(by: >)\nprint(students)\n// Prints \"[\"Peter\", \"Kweku\", \"Kofi\", \"Akosua\", \"Abena\"]\"\n\n\nareInIncreasingOrder must be a strict weak ordering over the elements. That is, for any elements a, b, and c, the following conditions must hold:\n\nareInIncreasingOrder(a, a) is always false. (Irreflexivity)\n\nIf areInIncreasingOrder(a, b) and areInIncreasingOrder(b, c) are both true, then areInIncreasingOrder(a, c) is also true. (Transitive comparability)\n\nTwo elements are incomparable if neither is ordered before the other according to the predicate. If a and b are incomparable, and b and c are incomparable, then a and c are also incomparable. (Transitive incomparability)\n\nThe sorting algorithm is guaranteed to be stable. A stable sort preserves the relative order of elements for which areInIncreasingOrder does not establish an order.\n\nComplexity\n\nO(n log n), where n is the length of the collection."
  },
  {
    "title": "sort(using:)",
    "url": "https://developer.apple.com/documentation/musickit/applicationmusicplayer/queue-swift.class/entries-swift.struct/sort(using:)-2vim9",
    "html": "Parameters\ncomparators\n\nan array of comparators used to compare elements. The first comparator specifies the primary comparator to be used in sorting the sequence’s elements. Any subsequent comparators are used to further refine the order of elements with equal values."
  },
  {
    "title": "trimmingPrefix(_:)",
    "url": "https://developer.apple.com/documentation/musickit/applicationmusicplayer/queue-swift.class/entries-swift.struct/trimmingprefix(_:)",
    "html": "Parameters\npredicate\n\nA closure that takes an element of the sequence as its argument and returns a Boolean value indicating whether the element should be removed from the collection.\n\nReturn Value\n\nA collection containing the elements of the collection that are not removed by predicate."
  },
  {
    "title": "sort(using:)",
    "url": "https://developer.apple.com/documentation/musickit/applicationmusicplayer/queue-swift.class/entries-swift.struct/sort(using:)-875wx",
    "html": "Parameters\ncomparator\n\nthe sort comparator used to compare elements."
  },
  {
    "title": "reverse()",
    "url": "https://developer.apple.com/documentation/musickit/applicationmusicplayer/queue-swift.class/entries-swift.struct/reverse()",
    "html": "Discussion\n\nThe following example reverses the elements of an array of characters:\n\nvar characters: [Character] = [\"C\", \"a\", \"f\", \"é\"]\ncharacters.reverse()\nprint(characters)\n// Prints \"[\"é\", \"f\", \"a\", \"C\"]\"\n\n\nComplexity\n\nO(n), where n is the number of elements in the collection."
  },
  {
    "title": "shuffle(using:)",
    "url": "https://developer.apple.com/documentation/musickit/applicationmusicplayer/queue-swift.class/entries-swift.struct/shuffle(using:)",
    "html": "Parameters\ngenerator\n\nThe random number generator to use when shuffling the collection.\n\nDiscussion\n\nYou use this method to randomize the elements of a collection when you are using a custom random number generator. For example, you can use the shuffle(using:) method to randomly reorder the elements of an array.\n\nvar names = [\"Alejandro\", \"Camila\", \"Diego\", \"Luciana\", \"Luis\", \"Sofía\"]\nnames.shuffle(using: &myGenerator)\n// names == [\"Sofía\", \"Alejandro\", \"Camila\", \"Luis\", \"Diego\", \"Luciana\"]\n\n\nComplexity\n\nO(n), where n is the length of the collection.\n\nNote\n\nThe algorithm used to shuffle a collection may change in a future version of Swift. If you’re passing a generator that results in the same shuffled order each time you run your program, that sequence may change when your program is compiled using a different version of Swift."
  },
  {
    "title": "subscript(_:)",
    "url": "https://developer.apple.com/documentation/musickit/applicationmusicplayer/queue-swift.class/entries-swift.struct/subscript(_:)-2jq11",
    "html": "Parameters\nbounds\n\nA range of the collection’s indices. The bounds of the range must be valid indices of the collection.\n\nOverview\n\nThe accessed slice uses the same indices for the same elements as the original collection. Always use the slice’s startIndex property instead of assuming that its indices start at a particular value.\n\nThis example demonstrates getting a slice of an array of strings, finding the index of one of the strings in the slice, and then using that index in the original array.\n\nvar streets = [\"Adams\", \"Bryant\", \"Channing\", \"Douglas\", \"Evarts\"]\nlet streetsSlice = streets[2 ..< streets.endIndex]\nprint(streetsSlice)\n// Prints \"[\"Channing\", \"Douglas\", \"Evarts\"]\"\n\n\nlet index = streetsSlice.firstIndex(of: \"Evarts\")    // 4\nstreets[index!] = \"Eustace\"\nprint(streets[index!])\n// Prints \"Eustace\"\n\n\nComplexity\n\nO(1)"
  },
  {
    "title": "hashValue",
    "url": "https://developer.apple.com/documentation/musickit/musicplayer/queue/entryinsertionposition/hashvalue",
    "html": "Discussion\n\nHash values are not guaranteed to be equal across different executions of your program. Do not save hash values to use during a future execution.\n\nImportant\n\nhashValue is deprecated as a Hashable requirement. To conform to Hashable, implement the hash(into:) requirement instead. The compiler provides an implementation for hashValue for you."
  },
  {
    "title": "Equatable Implementations",
    "url": "https://developer.apple.com/documentation/musickit/musicplayer/queue/entryinsertionposition/equatable-implementations",
    "html": "Topics\nOperators\nstatic func != (Self, Self) -> Bool\nReturns a Boolean value indicating whether two values are not equal."
  },
  {
    "title": "==(_:_:)",
    "url": "https://developer.apple.com/documentation/musickit/musicplayer/queue/==(_:_:)",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nEquality is the inverse of inequality. For any values a and b, a == b implies that a != b is false."
  },
  {
    "title": "description",
    "url": "https://developer.apple.com/documentation/musickit/musiclibrarysearchresponse/topresult/description",
    "html": "Discussion\n\nCalling this property directly is discouraged. Instead, convert an instance of any type to a string by using the String(describing:) initializer. This initializer works with any type, and uses the custom description property for types that conform to CustomStringConvertible:\n\nstruct Point: CustomStringConvertible {\n    let x: Int, y: Int\n\n\n    var description: String {\n        return \"(\\(x), \\(y))\"\n    }\n}\n\n\nlet p = Point(x: 21, y: 30)\nlet s = String(describing: p)\nprint(s)\n// Prints \"(21, 30)\"\n\n\nThe conversion of p to a string in the assignment to s uses the Point type’s description property."
  },
  {
    "title": "isEmpty",
    "url": "https://developer.apple.com/documentation/musickit/applicationmusicplayer/queue-swift.class/entries-swift.struct/isempty",
    "html": "Discussion\n\nWhen you need to check whether your collection is empty, use the isEmpty property instead of checking that the count property is equal to zero. For collections that don’t conform to RandomAccessCollection, accessing the count property iterates through the elements of the collection.\n\nlet horseName = \"Silver\"\nif horseName.isEmpty {\n    print(\"My horse has no name.\")\n} else {\n    print(\"Hi ho, \\(horseName)!\")\n}\n// Prints \"Hi ho, Silver!\")\n\n\nComplexity\n\nO(1)"
  },
  {
    "title": "firstIndex(of:)",
    "url": "https://developer.apple.com/documentation/musickit/applicationmusicplayer/queue-swift.class/entries-swift.struct/firstindex(of:)",
    "html": "Parameters\nelement\n\nAn element to search for in the collection.\n\nReturn Value\n\nThe first index where element is found. If element is not found in the collection, returns nil.\n\nDiscussion\n\nAfter using firstIndex(of:) to find the position of a particular element in a collection, you can use it to access the element by subscripting. This example shows how you can modify one of the names in an array of students.\n\nvar students = [\"Ben\", \"Ivy\", \"Jordell\", \"Maxime\"]\nif let i = students.firstIndex(of: \"Maxime\") {\n    students[i] = \"Max\"\n}\nprint(students)\n// Prints \"[\"Ben\", \"Ivy\", \"Jordell\", \"Max\"]\"\n\n\nComplexity\n\nO(n), where n is the length of the collection."
  },
  {
    "title": "underestimatedCount",
    "url": "https://developer.apple.com/documentation/musickit/applicationmusicplayer/queue-swift.class/entries-swift.struct/underestimatedcount",
    "html": "Discussion\n\nComplexity\n\nO(1) if the collection conforms to RandomAccessCollection; otherwise, O(n), where n is the length of the collection."
  },
  {
    "title": "firstRange(of:)",
    "url": "https://developer.apple.com/documentation/musickit/applicationmusicplayer/queue-swift.class/entries-swift.struct/firstrange(of:)",
    "html": "Parameters\nother\n\nThe collection to search for.\n\nReturn Value\n\nA range in the collection of the first occurrence of sequence. Returns nil if sequence is not found."
  },
  {
    "title": "prefix(while:)",
    "url": "https://developer.apple.com/documentation/musickit/applicationmusicplayer/queue-swift.class/entries-swift.struct/prefix(while:)",
    "html": "Parameters\npredicate\n\nA closure that takes an element of the sequence as its argument and returns true if the element should be included or false if it should be excluded. Once the predicate returns false it will not be called again.\n\nDiscussion\n\nComplexity\n\nO(n), where n is the length of the collection."
  },
  {
    "title": "map(_:)",
    "url": "https://developer.apple.com/documentation/musickit/applicationmusicplayer/queue-swift.class/entries-swift.struct/map(_:)-9924d",
    "html": "Parameters\ntransform\n\nA mapping closure. transform accepts an element of this sequence as its parameter and returns a transformed value of the same or of a different type.\n\nReturn Value\n\nAn array containing the transformed elements of this sequence.\n\nDiscussion\n\nIn this example, map is used first to convert the names in the array to lowercase strings and then to count their characters.\n\nlet cast = [\"Vivien\", \"Marlon\", \"Kim\", \"Karl\"]\nlet lowercaseNames = cast.map { $0.lowercased() }\n// 'lowercaseNames' == [\"vivien\", \"marlon\", \"kim\", \"karl\"]\nlet letterCounts = cast.map { $0.count }\n// 'letterCounts' == [6, 6, 3, 4]\n"
  },
  {
    "title": "randomElement()",
    "url": "https://developer.apple.com/documentation/musickit/applicationmusicplayer/queue-swift.class/entries-swift.struct/randomelement()",
    "html": "Return Value\n\nA random element from the collection. If the collection is empty, the method returns nil.\n\nDiscussion\n\nCall randomElement() to select a random element from an array or another collection. This example picks a name at random from an array:\n\nlet names = [\"Zoey\", \"Chloe\", \"Amani\", \"Amaia\"]\nlet randomName = names.randomElement()!\n// randomName == \"Amani\"\n\n\nThis method is equivalent to calling randomElement(using:), passing in the system’s default random generator.\n\nComplexity\n\nO(1) if the collection conforms to RandomAccessCollection; otherwise, O(n), where n is the length of the collection."
  },
  {
    "title": "prefix(_:)",
    "url": "https://developer.apple.com/documentation/musickit/applicationmusicplayer/queue-swift.class/entries-swift.struct/prefix(_:)",
    "html": "Parameters\nmaxLength\n\nThe maximum number of elements to return. maxLength must be greater than or equal to zero.\n\nReturn Value\n\nA subsequence starting at the beginning of this collection with at most maxLength elements.\n\nDiscussion\n\nIf the maximum length exceeds the number of elements in the collection, the result contains all the elements in the collection.\n\nlet numbers = [1, 2, 3, 4, 5]\nprint(numbers.prefix(2))\n// Prints \"[1, 2]\"\nprint(numbers.prefix(10))\n// Prints \"[1, 2, 3, 4, 5]\"\n\n\nComplexity\n\nO(1) if the collection conforms to RandomAccessCollection; otherwise, O(k), where k is the number of elements to select from the beginning of the collection."
  },
  {
    "title": "replacing(_:with:subrange:maxReplacements:)",
    "url": "https://developer.apple.com/documentation/musickit/applicationmusicplayer/queue-swift.class/entries-swift.struct/replacing(_:with:subrange:maxreplacements:)",
    "html": "Parameters\nother\n\nThe sequence to replace.\n\nreplacement\n\nThe new elements to add to the collection.\n\nsubrange\n\nThe range in the collection in which to search for other.\n\nmaxReplacements\n\nA number specifying how many occurrences of other to replace. Default is Int.max.\n\nReturn Value\n\nA new collection in which all occurrences of other in subrange of the collection are replaced by replacement."
  },
  {
    "title": "replace(_:with:maxReplacements:)",
    "url": "https://developer.apple.com/documentation/musickit/applicationmusicplayer/queue-swift.class/entries-swift.struct/replace(_:with:maxreplacements:)",
    "html": "Parameters\nother\n\nThe sequence to replace.\n\nreplacement\n\nThe new elements to add to the collection.\n\nmaxReplacements\n\nA number specifying how many occurrences of other to replace. Default is Int.max."
  },
  {
    "title": "removeSubrange(_:)",
    "url": "https://developer.apple.com/documentation/musickit/applicationmusicplayer/queue-swift.class/entries-swift.struct/removesubrange(_:)-8htwl",
    "html": "Parameters\nbounds\n\nThe range of the collection to be removed. The bounds of the range must be valid indices of the collection.\n\nDiscussion\n\nAll the elements following the specified position are moved to close the gap. This example removes three elements from the middle of an array of measurements.\n\nvar measurements = [1.2, 1.5, 2.9, 1.2, 1.5]\nmeasurements.removeSubrange(1..<4)\nprint(measurements)\n// Prints \"[1.2, 1.5]\"\n\n\nCalling this method may invalidate any existing indices for use with this collection.\n\nComplexity\n\nO(n), where n is the length of the collection."
  },
  {
    "title": "removeFirst()",
    "url": "https://developer.apple.com/documentation/musickit/applicationmusicplayer/queue-swift.class/entries-swift.struct/removefirst()",
    "html": "Return Value\n\nThe removed element.\n\nDiscussion\n\nThe collection must not be empty.\n\nvar bugs = [\"Aphid\", \"Bumblebee\", \"Cicada\", \"Damselfly\", \"Earwig\"]\nbugs.removeFirst()\nprint(bugs)\n// Prints \"[\"Bumblebee\", \"Cicada\", \"Damselfly\", \"Earwig\"]\"\n\n\nCalling this method may invalidate any existing indices for use with this collection.\n\nComplexity\n\nO(n), where n is the length of the collection."
  },
  {
    "title": "min(by:)",
    "url": "https://developer.apple.com/documentation/musickit/applicationmusicplayer/queue-swift.class/entries-swift.struct/min(by:)",
    "html": "Parameters\nareInIncreasingOrder\n\nA predicate that returns true if its first argument should be ordered before its second argument; otherwise, false.\n\nReturn Value\n\nThe sequence’s minimum element, according to areInIncreasingOrder. If the sequence has no elements, returns nil.\n\nDiscussion\n\nThe predicate must be a strict weak ordering over the elements. That is, for any elements a, b, and c, the following conditions must hold:\n\nareInIncreasingOrder(a, a) is always false. (Irreflexivity)\n\nIf areInIncreasingOrder(a, b) and areInIncreasingOrder(b, c) are both true, then areInIncreasingOrder(a, c) is also true. (Transitive comparability)\n\nTwo elements are incomparable if neither is ordered before the other according to the predicate. If a and b are incomparable, and b and c are incomparable, then a and c are also incomparable. (Transitive incomparability)\n\nThis example shows how to use the min(by:) method on a dictionary to find the key-value pair with the lowest value.\n\nlet hues = [\"Heliotrope\": 296, \"Coral\": 16, \"Aquamarine\": 156]\nlet leastHue = hues.min { a, b in a.value < b.value }\nprint(leastHue)\n// Prints \"Optional((key: \"Coral\", value: 16))\"\n\n\nComplexity\n\nO(n), where n is the length of the sequence."
  },
  {
    "title": "split(maxSplits:omittingEmptySubsequences:whereSeparator:)",
    "url": "https://developer.apple.com/documentation/musickit/applicationmusicplayer/queue-swift.class/entries-swift.struct/split(maxsplits:omittingemptysubsequences:whereseparator:)",
    "html": "Parameters\nmaxSplits\n\nThe maximum number of times to split the collection, or one less than the number of subsequences to return. If maxSplits + 1 subsequences are returned, the last one is a suffix of the original collection containing the remaining elements. maxSplits must be greater than or equal to zero. The default value is Int.max.\n\nomittingEmptySubsequences\n\nIf false, an empty subsequence is returned in the result for each pair of consecutive elements satisfying the isSeparator predicate and for each element at the start or end of the collection satisfying the isSeparator predicate. The default value is true.\n\nisSeparator\n\nA closure that takes an element as an argument and returns a Boolean value indicating whether the collection should be split at that element.\n\nReturn Value\n\nAn array of subsequences, split from this collection’s elements.\n\nDiscussion\n\nThe resulting array consists of at most maxSplits + 1 subsequences. Elements that are used to split the sequence are not returned as part of any subsequence.\n\nThe following examples show the effects of the maxSplits and omittingEmptySubsequences parameters when splitting a string using a closure that matches spaces. The first use of split returns each word that was originally separated by one or more spaces.\n\nlet line = \"BLANCHE:   I don't want realism. I want magic!\"\nprint(line.split(whereSeparator: { $0 == \" \" }))\n// Prints \"[\"BLANCHE:\", \"I\", \"don\\'t\", \"want\", \"realism.\", \"I\", \"want\", \"magic!\"]\"\n\n\nThe second example passes 1 for the maxSplits parameter, so the original string is split just once, into two new strings.\n\nprint(line.split(maxSplits: 1, whereSeparator: { $0 == \" \" }))\n// Prints \"[\"BLANCHE:\", \"  I don\\'t want realism. I want magic!\"]\"\n\n\nThe final example passes false for the omittingEmptySubsequences parameter, so the returned array contains empty strings where spaces were repeated.\n\nprint(line.split(omittingEmptySubsequences: false, whereSeparator: { $0 == \" \" }))\n// Prints \"[\"BLANCHE:\", \"\", \"\", \"I\", \"don\\'t\", \"want\", \"realism.\", \"I\", \"want\", \"magic!\"]\"\n\n\nComplexity\n\nO(n), where n is the length of the collection."
  },
  {
    "title": "suffix(from:)",
    "url": "https://developer.apple.com/documentation/musickit/applicationmusicplayer/queue-swift.class/entries-swift.struct/suffix(from:)",
    "html": "Parameters\nstart\n\nThe index at which to start the resulting subsequence. start must be a valid index of the collection.\n\nReturn Value\n\nA subsequence starting at the start position.\n\nDiscussion\n\nThe following example searches for the index of the number 40 in an array of integers, and then prints the suffix of the array starting at that index:\n\nlet numbers = [10, 20, 30, 40, 50, 60]\nif let i = numbers.firstIndex(of: 40) {\n    print(numbers.suffix(from: i))\n}\n// Prints \"[40, 50, 60]\"\n\n\nPassing the collection’s endIndex as the start parameter results in an empty subsequence.\n\nprint(numbers.suffix(from: numbers.endIndex))\n// Prints \"[]\"\n\n\nUsing the suffix(from:) method is equivalent to using a partial range from the index as the collection’s subscript. The subscript notation is preferred over suffix(from:).\n\nif let i = numbers.firstIndex(of: 40) {\n    print(numbers[i...])\n}\n// Prints \"[40, 50, 60]\"\n\n\nComplexity\n\nO(1)"
  },
  {
    "title": "split(separator:maxSplits:omittingEmptySubsequences:)",
    "url": "https://developer.apple.com/documentation/musickit/applicationmusicplayer/queue-swift.class/entries-swift.struct/split(separator:maxsplits:omittingemptysubsequences:)",
    "html": "Parameters\nseparator\n\nThe element that should be split upon.\n\nmaxSplits\n\nThe maximum number of times to split the collection, or one less than the number of subsequences to return. If maxSplits + 1 subsequences are returned, the last one is a suffix of the original collection containing the remaining elements. maxSplits must be greater than or equal to zero. The default value is Int.max.\n\nomittingEmptySubsequences\n\nIf false, an empty subsequence is returned in the result for each consecutive pair of separator elements in the collection and for each instance of separator at the start or end of the collection. If true, only nonempty subsequences are returned. The default value is true.\n\nReturn Value\n\nAn array of subsequences, split from this collection’s elements.\n\nDiscussion\n\nThe resulting array consists of at most maxSplits + 1 subsequences. Elements that are used to split the collection are not returned as part of any subsequence.\n\nThe following examples show the effects of the maxSplits and omittingEmptySubsequences parameters when splitting a string at each space character (” “). The first use of split returns each word that was originally separated by one or more spaces.\n\nlet line = \"BLANCHE:   I don't want realism. I want magic!\"\nprint(line.split(separator: \" \"))\n// Prints \"[\"BLANCHE:\", \"I\", \"don\\'t\", \"want\", \"realism.\", \"I\", \"want\", \"magic!\"]\"\n\n\nThe second example passes 1 for the maxSplits parameter, so the original string is split just once, into two new strings.\n\nprint(line.split(separator: \" \", maxSplits: 1))\n// Prints \"[\"BLANCHE:\", \"  I don\\'t want realism. I want magic!\"]\"\n\n\nThe final example passes false for the omittingEmptySubsequences parameter, so the returned array contains empty strings where spaces were repeated.\n\nprint(line.split(separator: \" \", omittingEmptySubsequences: false))\n// Prints \"[\"BLANCHE:\", \"\", \"\", \"I\", \"don\\'t\", \"want\", \"realism.\", \"I\", \"want\", \"magic!\"]\"\n\n\nComplexity\n\nO(n), where n is the length of the collection."
  },
  {
    "title": "ranges(of:)",
    "url": "https://developer.apple.com/documentation/musickit/applicationmusicplayer/queue-swift.class/entries-swift.struct/ranges(of:)",
    "html": "Parameters\nother\n\nThe sequence to search for.\n\nReturn Value\n\nA collection of ranges of all occurrences of other. Returns an empty collection if other is not found."
  },
  {
    "title": "+(_:_:)",
    "url": "https://developer.apple.com/documentation/musickit/applicationmusicplayer/queue-swift.class/entries-swift.struct/+(_:_:)-xw4q",
    "html": "Parameters\nlhs\n\nA range-replaceable collection.\n\nrhs\n\nAnother range-replaceable collection.\n\nDiscussion\n\nThe two arguments must have the same Element type. For example, you can concatenate the elements of two integer arrays.\n\nlet lowerNumbers = [1, 2, 3, 4]\nlet higherNumbers: ContiguousArray = [5, 6, 7, 8, 9, 10]\nlet allNumbers = lowerNumbers + higherNumbers\nprint(allNumbers)\n// Prints \"[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\"\n\n\nThe resulting collection has the type of the argument on the left-hand side. In the example above, moreNumbers has the same type as numbers, which is [Int]."
  },
  {
    "title": "subscript(_:)",
    "url": "https://developer.apple.com/documentation/musickit/applicationmusicplayer/queue-swift.class/entries-swift.struct/subscript(_:)-6hho5",
    "html": "Parameters\nbounds\n\nA range of the collection’s indices. The bounds of the range must be valid indices of the collection.\n\nOverview\n\nThe range expression is converted to a concrete subrange relative to this collection. For example, using a PartialRangeFrom range expression with an array accesses the subrange from the start of the range expression until the end of the array.\n\nlet streets = [\"Adams\", \"Bryant\", \"Channing\", \"Douglas\", \"Evarts\"]\nlet streetsSlice = streets[2...]\nprint(streetsSlice)\n// [\"Channing\", \"Douglas\", \"Evarts\"]\n\n\nThe accessed slice uses the same indices for the same elements as the original collection uses. This example searches streetsSlice for one of the strings in the slice, and then uses that index in the original array.\n\nlet index = streetsSlice.firstIndex(of: \"Evarts\")    // 4\nprint(streets[index!])\n// \"Evarts\"\n\n\nAlways use the slice’s startIndex property instead of assuming that its indices start at a particular value. Attempting to access an element by using an index outside the bounds of the slice’s indices may result in a runtime error, even if that index is valid for the original collection.\n\nprint(streetsSlice.startIndex)\n// 2\nprint(streetsSlice[2])\n// \"Channing\"\n\n\nprint(streetsSlice[0])\n// error: Index out of bounds\n\n\nComplexity\n\nO(1)"
  },
  {
    "title": "partition(by:)",
    "url": "https://developer.apple.com/documentation/musickit/applicationmusicplayer/queue-swift.class/entries-swift.struct/partition(by:)-nz5z",
    "html": "Parameters\nbelongsInSecondPartition\n\nA predicate used to partition the collection. All elements satisfying this predicate are ordered after all elements not satisfying it.\n\nReturn Value\n\nThe index of the first element in the reordered collection that matches belongsInSecondPartition. If no elements in the collection match belongsInSecondPartition, the returned index is equal to the collection’s endIndex.\n\nDiscussion\n\nAfter partitioning a collection, there is a pivot index p where no element before p satisfies the belongsInSecondPartition predicate and every element at or after p satisfies belongsInSecondPartition. This operation isn’t guaranteed to be stable, so the relative ordering of elements within the partitions might change.\n\nIn the following example, an array of numbers is partitioned by a predicate that matches elements greater than 30.\n\nvar numbers = [30, 40, 20, 30, 30, 60, 10]\nlet p = numbers.partition(by: { $0 > 30 })\n// p == 5\n// numbers == [30, 10, 20, 30, 30, 60, 40]\n\n\nThe numbers array is now arranged in two partitions. The first partition, numbers[..<p], is made up of the elements that are not greater than 30. The second partition, numbers[p...], is made up of the elements that are greater than 30.\n\nlet first = numbers[..<p]\n// first == [30, 10, 20, 30, 30]\nlet second = numbers[p...]\n// second == [60, 40]\n\n\nNote that the order of elements in both partitions changed. That is, 40 appears before 60 in the original collection, but, after calling partition(by:), 60 appears before 40.\n\nComplexity\n\nO(n), where n is the length of the collection."
  },
  {
    "title": "partition(by:)",
    "url": "https://developer.apple.com/documentation/musickit/applicationmusicplayer/queue-swift.class/entries-swift.struct/partition(by:)-5byqr",
    "html": "Parameters\nbelongsInSecondPartition\n\nA predicate used to partition the collection. All elements satisfying this predicate are ordered after all elements not satisfying it.\n\nReturn Value\n\nThe index of the first element in the reordered collection that matches belongsInSecondPartition. If no elements in the collection match belongsInSecondPartition, the returned index is equal to the collection’s endIndex.\n\nDiscussion\n\nAfter partitioning a collection, there is a pivot index p where no element before p satisfies the belongsInSecondPartition predicate and every element at or after p satisfies belongsInSecondPartition. This operation isn’t guaranteed to be stable, so the relative ordering of elements within the partitions might change.\n\nIn the following example, an array of numbers is partitioned by a predicate that matches elements greater than 30.\n\nvar numbers = [30, 40, 20, 30, 30, 60, 10]\nlet p = numbers.partition(by: { $0 > 30 })\n// p == 5\n// numbers == [30, 10, 20, 30, 30, 60, 40]\n\n\nThe numbers array is now arranged in two partitions. The first partition, numbers[..<p], is made up of the elements that are not greater than 30. The second partition, numbers[p...], is made up of the elements that are greater than 30.\n\nlet first = numbers[..<p]\n// first == [30, 10, 20, 30, 30]\nlet second = numbers[p...]\n// second == [60, 40]\n\n\nNote that the order of elements in both partitions changed. That is, 40 appears before 60 in the original collection, but, after calling partition(by:), 60 appears before 40.\n\nComplexity\n\nO(n), where n is the length of the collection."
  },
  {
    "title": "difference(from:by:)",
    "url": "https://developer.apple.com/documentation/musickit/applicationmusicplayer/queue-swift.class/entries-swift.struct/difference(from:by:)",
    "html": "Parameters\nother\n\nThe base state.\n\nareEquivalent\n\nA closure that returns a Boolean value indicating whether two elements are equivalent.\n\nReturn Value\n\nThe difference needed to produce the receiver’s state from the parameter’s state.\n\nDiscussion\n\nThis function does not infer element moves. If you need to infer moves, call the inferringMoves() method on the resulting difference.\n\nComplexity\n\nWorst case performance is O(n * m), where n is the count of this collection and m is other.count. You can expect faster execution when the collections share many common elements."
  },
  {
    "title": "difference(from:)",
    "url": "https://developer.apple.com/documentation/musickit/applicationmusicplayer/queue-swift.class/entries-swift.struct/difference(from:)",
    "html": "Parameters\nother\n\nThe base state.\n\nReturn Value\n\nThe difference needed to produce this collection’s ordered elements from the given collection.\n\nDiscussion\n\nThis function does not infer element moves. If you need to infer moves, call the inferringMoves() method on the resulting difference.\n\nComplexity\n\nWorst case performance is O(n * m), where n is the count of this collection and m is other.count. You can expect faster execution when the collections share many common elements, or if Element conforms to Hashable."
  },
  {
    "title": "lastIndex(of:)",
    "url": "https://developer.apple.com/documentation/musickit/applicationmusicplayer/queue-swift.class/entries-swift.struct/lastindex(of:)",
    "html": "Parameters\nelement\n\nAn element to search for in the collection.\n\nReturn Value\n\nThe last index where element is found. If element is not found in the collection, this method returns nil.\n\nDiscussion\n\nAfter using lastIndex(of:) to find the position of the last instance of a particular element in a collection, you can use it to access the element by subscripting. This example shows how you can modify one of the names in an array of students.\n\nvar students = [\"Ben\", \"Ivy\", \"Jordell\", \"Ben\", \"Maxime\"]\nif let i = students.lastIndex(of: \"Ben\") {\n    students[i] = \"Benjamin\"\n}\nprint(students)\n// Prints \"[\"Ben\", \"Ivy\", \"Jordell\", \"Benjamin\", \"Max\"]\"\n\n\nComplexity\n\nO(n), where n is the length of the collection."
  },
  {
    "title": "suffix(_:)",
    "url": "https://developer.apple.com/documentation/musickit/applicationmusicplayer/queue-swift.class/entries-swift.struct/suffix(_:)",
    "html": "Parameters\nmaxLength\n\nThe maximum number of elements to return. maxLength must be greater than or equal to zero.\n\nReturn Value\n\nA subsequence terminating at the end of the collection with at most maxLength elements.\n\nDiscussion\n\nIf the maximum length exceeds the number of elements in the collection, the result contains the entire collection.\n\nlet numbers = [1, 2, 3, 4, 5]\nprint(numbers.suffix(2))\n// Prints \"[4, 5]\"\nprint(numbers.suffix(10))\n// Prints \"[1, 2, 3, 4, 5]\"\n\n\nComplexity\n\nO(1) if the collection conforms to RandomAccessCollection; otherwise, O(k), where k is equal to maxLength."
  },
  {
    "title": "last",
    "url": "https://developer.apple.com/documentation/musickit/applicationmusicplayer/queue-swift.class/entries-swift.struct/last",
    "html": "Discussion\n\nIf the collection is empty, the value of this property is nil.\n\nlet numbers = [10, 20, 30, 40, 50]\nif let lastNumber = numbers.last {\n    print(lastNumber)\n}\n// Prints \"50\"\n\n\nComplexity\n\nO(1)"
  },
  {
    "title": "reversed()",
    "url": "https://developer.apple.com/documentation/musickit/applicationmusicplayer/queue-swift.class/entries-swift.struct/reversed()",
    "html": "Discussion\n\nYou can reverse a collection without allocating new space for its elements by calling this reversed() method. A ReversedCollection instance wraps an underlying collection and provides access to its elements in reverse order. This example prints the characters of a string in reverse order:\n\nlet word = \"Backwards\"\nfor char in word.reversed() {\n    print(char, terminator: \"\")\n}\n// Prints \"sdrawkcaB\"\n\n\nIf you need a reversed collection of the same type, you may be able to use the collection’s sequence-based or collection-based initializer. For example, to get the reversed version of a string, reverse its characters and initialize a new String instance from the result.\n\nlet reversedWord = String(word.reversed())\nprint(reversedWord)\n// Prints \"sdrawkcaB\"\n\n\nComplexity\n\nO(1)"
  },
  {
    "title": "lastIndex(where:)",
    "url": "https://developer.apple.com/documentation/musickit/applicationmusicplayer/queue-swift.class/entries-swift.struct/lastindex(where:)",
    "html": "Parameters\npredicate\n\nA closure that takes an element as its argument and returns a Boolean value that indicates whether the passed element represents a match.\n\nReturn Value\n\nThe index of the last element in the collection that matches predicate, or nil if no elements match.\n\nDiscussion\n\nYou can use the predicate to find an element of a type that doesn’t conform to the Equatable protocol or to find an element that matches particular criteria. This example finds the index of the last name that begins with the letter A:\n\nlet students = [\"Kofi\", \"Abena\", \"Peter\", \"Kweku\", \"Akosua\"]\nif let i = students.lastIndex(where: { $0.hasPrefix(\"A\") }) {\n    print(\"\\(students[i]) starts with 'A'!\")\n}\n// Prints \"Akosua starts with 'A'!\"\n\n\nComplexity\n\nO(n), where n is the length of the collection."
  },
  {
    "title": "count",
    "url": "https://developer.apple.com/documentation/musickit/applicationmusicplayer/queue-swift.class/entries-swift.struct/count",
    "html": "Discussion\n\nTo check whether a collection is empty, use its isEmpty property instead of comparing count to zero. Unless the collection guarantees random-access performance, calculating count can be an O(n) operation.\n\nComplexity\n\nO(1) if the collection conforms to RandomAccessCollection; otherwise, O(n), where n is the length of the collection."
  },
  {
    "title": "last(where:)",
    "url": "https://developer.apple.com/documentation/musickit/applicationmusicplayer/queue-swift.class/entries-swift.struct/last(where:)",
    "html": "Parameters\npredicate\n\nA closure that takes an element of the sequence as its argument and returns a Boolean value indicating whether the element is a match.\n\nReturn Value\n\nThe last element of the sequence that satisfies predicate, or nil if there is no element that satisfies predicate.\n\nDiscussion\n\nThis example uses the last(where:) method to find the last negative number in an array of integers:\n\nlet numbers = [3, 7, 4, -2, 9, -6, 10, 1]\nif let lastNegative = numbers.last(where: { $0 < 0 }) {\n    print(\"The last negative number is \\(lastNegative).\")\n}\n// Prints \"The last negative number is -6.\"\n\n\nComplexity\n\nO(n), where n is the length of the collection."
  },
  {
    "title": "with(_:preferredSource:)",
    "url": "https://developer.apple.com/documentation/musickit/playlist/entry/with(_:preferredsource:)",
    "html": "Discussion\n\nThis asynchronous method fetches a more complete representation of the receiver, loading the contents for each property you request from either the Apple Music catalog or the user’s library, depending on the preferred source as well the availability of the content in those respective data sources.\n\nFor example, if you want to load the tracks relationship for an Album, as found in the user’s library, as well as other associations of content that only live in the Apple Music catalog, like the recordLabels and relatedAlbums associations, you can use this code:\n\nlet album: Album = …\nlet detailedAlbum = try await album.with(\n    [\n        .tracks,\n        .recordLabels,\n        .relatedAlbums\n    ],\n    preferredSource: .library\n)\n\n\nHere, because the tracks relationship for an Album is supported in both the library and the catalog, and because the this code specifically requests MusicPropertySource.library as the preferred source, the framework will load the tracks from the user’s library. However, because the recordLabels and relatedAlbums associations are only available in the Apple Music catalog, the framework will also issue a network request to Apple Music API to fetch those associations of content from the catalog."
  },
  {
    "title": "with(_:)",
    "url": "https://developer.apple.com/documentation/musickit/playlist/entry/with(_:)",
    "html": "Discussion\n\nThis asynchronous method fetches a more complete representation of the receiver from Apple Music API over the network."
  },
  {
    "title": "!=(_:_:)",
    "url": "https://developer.apple.com/documentation/musickit/playlist/entry/!=(_:_:)",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nInequality is the inverse of equality. For any values a and b, a != b implies that a == b is false.\n\nThis is the default implementation of the not-equal-to operator (!=) for any type that conforms to Equatable."
  },
  {
    "title": "init(from:)",
    "url": "https://developer.apple.com/documentation/musickit/playlist/entry/init(from:)",
    "html": "Parameters\ndecoder\n\nThe decoder to read data from.\n\nDiscussion\n\nThis initializer throws an error if reading from the decoder fails, or if the data read is corrupted or otherwise invalid."
  },
  {
    "title": "withContiguousStorageIfAvailable(_:)",
    "url": "https://developer.apple.com/documentation/musickit/applicationmusicplayer/queue-swift.class/entries-swift.struct/withcontiguousstorageifavailable(_:)",
    "html": "Parameters\nbody\n\nA closure that receives an UnsafeBufferPointer to the sequence’s contiguous storage.\n\nReturn Value\n\nThe value returned from body, unless the sequence doesn’t support contiguous storage, in which case the method ignores body and returns nil.\n\nDiscussion\n\nThis method calls body(buffer), where buffer is a pointer to the collection’s contiguous storage. If the contiguous storage doesn’t exist, the collection creates it. If the collection doesn’t support an internal representation in a form of contiguous storage, the method doesn’t call body — it immediately returns nil.\n\nThe optimizer can often eliminate bounds- and uniqueness-checking within an algorithm. When that fails, however, invoking the same algorithm on the buffer argument may let you trade safety for speed.\n\nSuccessive calls to this method may provide a different pointer on each call. Don’t store buffer outside of this method.\n\nA Collection that provides its own implementation of this method must provide contiguous storage to its elements in the same order as they appear in the collection. This guarantees that it’s possible to generate contiguous mutable storage to any of its subsequences by slicing buffer with a range formed from the distances to the subsequence’s startIndex and endIndex, respectively."
  },
  {
    "title": "!=(_:_:)",
    "url": "https://developer.apple.com/documentation/musickit/musiccatalogsearchsuggestionsresponse/suggestion/!=(_:_:)",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nInequality is the inverse of equality. For any values a and b, a != b implies that a == b is false.\n\nThis is the default implementation of the not-equal-to operator (!=) for any type that conforms to Equatable."
  },
  {
    "title": "remove(at:)",
    "url": "https://developer.apple.com/documentation/musickit/applicationmusicplayer/queue-swift.class/entries-swift.struct/remove(at:)",
    "html": "Parameters\nposition\n\nThe position of the element to remove. position must be a valid index of the collection that is not equal to the collection’s end index.\n\nReturn Value\n\nThe removed element.\n\nDiscussion\n\nAll the elements following the specified position are moved to close the gap. This example removes the middle element from an array of measurements.\n\nvar measurements = [1.2, 1.5, 2.9, 1.2, 1.6]\nlet removed = measurements.remove(at: 2)\nprint(measurements)\n// Prints \"[1.2, 1.5, 1.2, 1.6]\"\n\n\nCalling this method may invalidate any existing indices for use with this collection.\n\nComplexity\n\nO(n), where n is the length of the collection."
  },
  {
    "title": "removeAll(keepingCapacity:)",
    "url": "https://developer.apple.com/documentation/musickit/applicationmusicplayer/queue-swift.class/entries-swift.struct/removeall(keepingcapacity:)",
    "html": "Parameters\nkeepCapacity\n\nPass true to request that the collection avoid releasing its storage. Retaining the collection’s storage can be a useful optimization when you’re planning to grow the collection again. The default value is false.\n\nDiscussion\n\nCalling this method may invalidate any existing indices for use with this collection.\n\nComplexity\n\nO(n), where n is the length of the collection."
  },
  {
    "title": "removeFirst(_:)",
    "url": "https://developer.apple.com/documentation/musickit/applicationmusicplayer/queue-swift.class/entries-swift.struct/removefirst(_:)",
    "html": "Parameters\nk\n\nThe number of elements to remove from the collection. k must be greater than or equal to zero and must not exceed the number of elements in the collection.\n\nDiscussion\nvar bugs = [\"Aphid\", \"Bumblebee\", \"Cicada\", \"Damselfly\", \"Earwig\"]\nbugs.removeFirst(3)\nprint(bugs)\n// Prints \"[\"Damselfly\", \"Earwig\"]\"\n\n\nCalling this method may invalidate any existing indices for use with this collection.\n\nComplexity\n\nO(n), where n is the length of the collection."
  },
  {
    "title": "removeAll(where:)",
    "url": "https://developer.apple.com/documentation/musickit/applicationmusicplayer/queue-swift.class/entries-swift.struct/removeall(where:)-8bt3v",
    "html": "Parameters\nshouldBeRemoved\n\nA closure that takes an element of the sequence as its argument and returns a Boolean value indicating whether the element should be removed from the collection.\n\nDiscussion\n\nUse this method to remove every element in a collection that meets particular criteria. The order of the remaining elements is preserved. This example removes all the vowels from a string:\n\nvar phrase = \"The rain in Spain stays mainly in the plain.\"\n\n\nlet vowels: Set<Character> = [\"a\", \"e\", \"i\", \"o\", \"u\"]\nphrase.removeAll(where: { vowels.contains($0) })\n// phrase == \"Th rn n Spn stys mnly n th pln.\"\n\n\nComplexity\n\nO(n), where n is the length of the collection."
  },
  {
    "title": "removeLast(_:)",
    "url": "https://developer.apple.com/documentation/musickit/applicationmusicplayer/queue-swift.class/entries-swift.struct/removelast(_:)",
    "html": "Parameters\nk\n\nThe number of elements to remove from the collection. k must be greater than or equal to zero and must not exceed the number of elements in the collection.\n\nDiscussion\n\nAttempting to remove more elements than exist in the collection triggers a runtime error.\n\nCalling this method may invalidate all saved indices of this collection. Do not rely on a previously stored index value after altering a collection with any operation that can change its length.\n\nComplexity\n\nO(k), where k is the specified number of elements."
  },
  {
    "title": "removeAll(where:)",
    "url": "https://developer.apple.com/documentation/musickit/applicationmusicplayer/queue-swift.class/entries-swift.struct/removeall(where:)-2qnp6",
    "html": "Parameters\nshouldBeRemoved\n\nA closure that takes an element of the sequence as its argument and returns a Boolean value indicating whether the element should be removed from the collection.\n\nDiscussion\n\nUse this method to remove every element in a collection that meets particular criteria. The order of the remaining elements is preserved. This example removes all the odd values from an array of numbers:\n\nvar numbers = [5, 6, 7, 8, 9, 10, 11]\nnumbers.removeAll(where: { $0 % 2 != 0 })\n// numbers == [6, 8, 10]\n\n\nComplexity\n\nO(n), where n is the length of the collection."
  },
  {
    "title": "removeLast()",
    "url": "https://developer.apple.com/documentation/musickit/applicationmusicplayer/queue-swift.class/entries-swift.struct/removelast()",
    "html": "Return Value\n\nThe last element of the collection.\n\nDiscussion\n\nThe collection must not be empty.\n\nCalling this method may invalidate all saved indices of this collection. Do not rely on a previously stored index value after altering a collection with any operation that can change its length.\n\nComplexity\n\nO(1)"
  },
  {
    "title": "removeSubrange(_:)",
    "url": "https://developer.apple.com/documentation/musickit/applicationmusicplayer/queue-swift.class/entries-swift.struct/removesubrange(_:)-37gem",
    "html": "Parameters\nbounds\n\nThe range of the collection to be removed. The bounds of the range must be valid indices of the collection.\n\nDiscussion\n\nAll the elements following the specified position are moved to close the gap. This example removes three elements from the middle of an array of measurements.\n\nvar measurements = [1.2, 1.5, 2.9, 1.2, 1.5]\nmeasurements.removeSubrange(1..<4)\nprint(measurements)\n// Prints \"[1.2, 1.5]\"\n\n\nCalling this method may invalidate any existing indices for use with this collection.\n\nComplexity\n\nO(n), where n is the length of the collection."
  },
  {
    "title": "reserveCapacity(_:)",
    "url": "https://developer.apple.com/documentation/musickit/applicationmusicplayer/queue-swift.class/entries-swift.struct/reservecapacity(_:)",
    "html": "Parameters\nn\n\nThe requested number of elements to store.\n\nDiscussion\n\nIf you will be adding a known number of elements to a collection, use this method to avoid multiple reallocations. A type that conforms to RangeReplaceableCollection can choose how to respond when this method is called. Depending on the type, it may make sense to allocate more or less storage than requested or to take no action at all."
  },
  {
    "title": "trimPrefix(_:)",
    "url": "https://developer.apple.com/documentation/musickit/applicationmusicplayer/queue-swift.class/entries-swift.struct/trimprefix(_:)",
    "html": "Parameters\npredicate\n\nA closure that takes an element of the sequence as its argument and returns a Boolean value indicating whether the element should be removed from the collection."
  },
  {
    "title": "hashValue",
    "url": "https://developer.apple.com/documentation/musickit/musicplayer/queue/hashvalue",
    "html": "Discussion\n\nHash values are not guaranteed to be equal across different executions of your program. Do not save hash values to use during a future execution.\n\nImportant\n\nhashValue is deprecated as a Hashable requirement. To conform to Hashable, implement the hash(into:) requirement instead. The compiler provides an implementation for hashValue for you."
  },
  {
    "title": "hash(into:)",
    "url": "https://developer.apple.com/documentation/musickit/musicplayer/queue/hash(into:)",
    "html": "Parameters\nhasher\n\nThe hasher to use when combining the components of this instance.\n\nDiscussion\n\nImplement this method to conform to the Hashable protocol. The components used for hashing must be the same as the components compared in your type’s == operator implementation. Call hasher.combine(_:) with each of these components.\n\nImportant\n\nIn your implementation of hash(into:), don’t call finalize() on the hasher instance provided, or replace it with a different instance. Doing so may become a compile-time error in the future."
  },
  {
    "title": "compare(_:_:)",
    "url": "https://developer.apple.com/documentation/musickit/applicationmusicplayer/queue-swift.class/entries-swift.struct/compare(_:_:)",
    "html": "Discussion\n\nThe first element of the sequence of comparators specifies the primary comparator to be used in sorting the sequence’s elements. Any subsequent comparators are used to further refine the order of elements with equal values."
  },
  {
    "title": "allSatisfy(_:)",
    "url": "https://developer.apple.com/documentation/musickit/applicationmusicplayer/queue-swift.class/entries-swift.struct/allsatisfy(_:)",
    "html": "Parameters\npredicate\n\nA closure that takes an element of the sequence as its argument and returns a Boolean value that indicates whether the passed element satisfies a condition.\n\nReturn Value\n\ntrue if the sequence contains only elements that satisfy predicate; otherwise, false.\n\nDiscussion\n\nThe following code uses this method to test whether all the names in an array have at least five characters:\n\nlet names = [\"Sofia\", \"Camilla\", \"Martina\", \"Mateo\", \"Nicolás\"]\nlet allHaveAtLeastFive = names.allSatisfy({ $0.count >= 5 })\n// allHaveAtLeastFive == true\n\n\nIf the sequence is empty, this method returns true.\n\nComplexity\n\nO(n), where n is the length of the sequence."
  },
  {
    "title": "compactMap(_:)",
    "url": "https://developer.apple.com/documentation/musickit/applicationmusicplayer/queue-swift.class/entries-swift.struct/compactmap(_:)",
    "html": "Parameters\ntransform\n\nA closure that accepts an element of this sequence as its argument and returns an optional value.\n\nReturn Value\n\nAn array of the non-nil results of calling transform with each element of the sequence.\n\nDiscussion\n\nUse this method to receive an array of non-optional values when your transformation produces an optional value.\n\nIn this example, note the difference in the result of using map and compactMap with a transformation that returns an optional Int value.\n\nlet possibleNumbers = [\"1\", \"2\", \"three\", \"///4///\", \"5\"]\n\n\nlet mapped: [Int?] = possibleNumbers.map { str in Int(str) }\n// [1, 2, nil, nil, 5]\n\n\nlet compactMapped: [Int] = possibleNumbers.compactMap { str in Int(str) }\n// [1, 2, 5]\n\n\nComplexity\n\nO(n), where n is the length of this sequence."
  },
  {
    "title": "contains(where:)",
    "url": "https://developer.apple.com/documentation/musickit/applicationmusicplayer/queue-swift.class/entries-swift.struct/contains(where:)",
    "html": "Parameters\npredicate\n\nA closure that takes an element of the sequence as its argument and returns a Boolean value that indicates whether the passed element represents a match.\n\nReturn Value\n\ntrue if the sequence contains an element that satisfies predicate; otherwise, false.\n\nDiscussion\n\nYou can use the predicate to check for an element of a type that doesn’t conform to the Equatable protocol, such as the HTTPResponse enumeration in this example.\n\nenum HTTPResponse {\n    case ok\n    case error(Int)\n}\n\n\nlet lastThreeResponses: [HTTPResponse] = [.ok, .ok, .error(404)]\nlet hadError = lastThreeResponses.contains { element in\n    if case .error = element {\n        return true\n    } else {\n        return false\n    }\n}\n// 'hadError' == true\n\n\nAlternatively, a predicate can be satisfied by a range of Equatable elements or a general condition. This example shows how you can check an array for an expense greater than $100.\n\nlet expenses = [21.37, 55.21, 9.32, 10.18, 388.77, 11.41]\nlet hasBigPurchase = expenses.contains { $0 > 100 }\n// 'hasBigPurchase' == true\n\n\nComplexity\n\nO(n), where n is the length of the sequence."
  },
  {
    "title": "flatMap(_:)",
    "url": "https://developer.apple.com/documentation/musickit/applicationmusicplayer/queue-swift.class/entries-swift.struct/flatmap(_:)-9gqii",
    "html": "Parameters\ntransform\n\nA closure that accepts an element of this sequence as its argument and returns a sequence or collection.\n\nReturn Value\n\nThe resulting flattened array.\n\nDiscussion\n\nUse this method to receive a single-level collection when your transformation produces a sequence or collection for each element.\n\nIn this example, note the difference in the result of using map and flatMap with a transformation that returns an array.\n\nlet numbers = [1, 2, 3, 4]\n\n\nlet mapped = numbers.map { Array(repeating: $0, count: $0) }\n// [[1], [2, 2], [3, 3, 3], [4, 4, 4, 4]]\n\n\nlet flatMapped = numbers.flatMap { Array(repeating: $0, count: $0) }\n// [1, 2, 2, 3, 3, 3, 4, 4, 4, 4]\n\n\nIn fact, s.flatMap(transform) is equivalent to Array(s.map(transform).joined()).\n\nComplexity\n\nO(m + n), where n is the length of this sequence and m is the length of the result."
  },
  {
    "title": "elementsEqual(_:)",
    "url": "https://developer.apple.com/documentation/musickit/applicationmusicplayer/queue-swift.class/entries-swift.struct/elementsequal(_:)",
    "html": "Parameters\nother\n\nA sequence to compare to this sequence.\n\nReturn Value\n\ntrue if this sequence and other contain the same elements in the same order.\n\nDiscussion\n\nAt least one of the sequences must be finite.\n\nThis example tests whether one countable range shares the same elements as another countable range and an array.\n\nlet a = 1...3\nlet b = 1...10\n\n\nprint(a.elementsEqual(b))\n// Prints \"false\"\nprint(a.elementsEqual([1, 2, 3]))\n// Prints \"true\"\n\n\nComplexity\n\nO(m), where m is the lesser of the length of the sequence and the length of other."
  },
  {
    "title": "elementsEqual(_:by:)",
    "url": "https://developer.apple.com/documentation/musickit/applicationmusicplayer/queue-swift.class/entries-swift.struct/elementsequal(_:by:)",
    "html": "Parameters\nother\n\nA sequence to compare to this sequence.\n\nareEquivalent\n\nA predicate that returns true if its two arguments are equivalent; otherwise, false.\n\nReturn Value\n\ntrue if this sequence and other contain equivalent items, using areEquivalent as the equivalence test; otherwise, false.\n\nDiscussion\n\nAt least one of the sequences must be finite.\n\nThe predicate must be a equivalence relation over the elements. That is, for any elements a, b, and c, the following conditions must hold:\n\nareEquivalent(a, a) is always true. (Reflexivity)\n\nareEquivalent(a, b) implies areEquivalent(b, a). (Symmetry)\n\nIf areEquivalent(a, b) and areEquivalent(b, c) are both true, then areEquivalent(a, c) is also true. (Transitivity)\n\nComplexity\n\nO(m), where m is the lesser of the length of the sequence and the length of other."
  },
  {
    "title": "enumerated()",
    "url": "https://developer.apple.com/documentation/musickit/applicationmusicplayer/queue-swift.class/entries-swift.struct/enumerated()",
    "html": "Return Value\n\nA sequence of pairs enumerating the sequence.\n\nDiscussion\n\nThis example enumerates the characters of the string “Swift” and prints each character along with its place in the string.\n\nfor (n, c) in \"Swift\".enumerated() {\n    print(\"\\(n): '\\(c)'\")\n}\n// Prints \"0: 'S'\"\n// Prints \"1: 'w'\"\n// Prints \"2: 'i'\"\n// Prints \"3: 'f'\"\n// Prints \"4: 't'\"\n\n\nWhen you enumerate a collection, the integer part of each pair is a counter for the enumeration, but is not necessarily the index of the paired value. These counters can be used as indices only in instances of zero-based, integer-indexed collections, such as Array and ContiguousArray. For other collections the counters may be out of range or of the wrong type to use as an index. To iterate over the elements of a collection with its indices, use the zip(_:_:) function.\n\nThis example iterates over the indices and elements of a set, building a list consisting of indices of names with five or fewer letters.\n\nlet names: Set = [\"Sofia\", \"Camilla\", \"Martina\", \"Mateo\", \"Nicolás\"]\nvar shorterIndices: [Set<String>.Index] = []\nfor (i, name) in zip(names.indices, names) {\n    if name.count <= 5 {\n        shorterIndices.append(i)\n    }\n}\n\n\nNow that the shorterIndices array holds the indices of the shorter names in the names set, you can use those indices to access elements in the set.\n\nfor i in shorterIndices {\n    print(names[i])\n}\n// Prints \"Sofia\"\n// Prints \"Mateo\"\n\n\nComplexity\n\nO(1)"
  },
  {
    "title": "first(where:)",
    "url": "https://developer.apple.com/documentation/musickit/applicationmusicplayer/queue-swift.class/entries-swift.struct/first(where:)",
    "html": "Parameters\npredicate\n\nA closure that takes an element of the sequence as its argument and returns a Boolean value indicating whether the element is a match.\n\nReturn Value\n\nThe first element of the sequence that satisfies predicate, or nil if there is no element that satisfies predicate.\n\nDiscussion\n\nThe following example uses the first(where:) method to find the first negative number in an array of integers:\n\nlet numbers = [3, 7, 4, -2, 9, -6, 10, 1]\nif let firstNegative = numbers.first(where: { $0 < 0 }) {\n    print(\"The first negative number is \\(firstNegative).\")\n}\n// Prints \"The first negative number is -2.\"\n\n\nComplexity\n\nO(n), where n is the length of the sequence."
  },
  {
    "title": "lexicographicallyPrecedes(_:by:)",
    "url": "https://developer.apple.com/documentation/musickit/applicationmusicplayer/queue-swift.class/entries-swift.struct/lexicographicallyprecedes(_:by:)",
    "html": "Parameters\nother\n\nA sequence to compare to this sequence.\n\nareInIncreasingOrder\n\nA predicate that returns true if its first argument should be ordered before its second argument; otherwise, false.\n\nReturn Value\n\ntrue if this sequence precedes other in a dictionary ordering as ordered by areInIncreasingOrder; otherwise, false.\n\nDiscussion\n\nThe predicate must be a strict weak ordering over the elements. That is, for any elements a, b, and c, the following conditions must hold:\n\nareInIncreasingOrder(a, a) is always false. (Irreflexivity)\n\nIf areInIncreasingOrder(a, b) and areInIncreasingOrder(b, c) are both true, then areInIncreasingOrder(a, c) is also true. (Transitive comparability)\n\nTwo elements are incomparable if neither is ordered before the other according to the predicate. If a and b are incomparable, and b and c are incomparable, then a and c are also incomparable. (Transitive incomparability)\n\nNote\n\nThis method implements the mathematical notion of lexicographical ordering, which has no connection to Unicode. If you are sorting strings to present to the end user, use String APIs that perform localized comparison instead.\n\nComplexity\n\nO(m), where m is the lesser of the length of the sequence and the length of other."
  },
  {
    "title": "forEach(_:)",
    "url": "https://developer.apple.com/documentation/musickit/applicationmusicplayer/queue-swift.class/entries-swift.struct/foreach(_:)",
    "html": "Parameters\nbody\n\nA closure that takes an element of the sequence as a parameter.\n\nDiscussion\n\nThe two loops in the following example produce the same output:\n\nlet numberWords = [\"one\", \"two\", \"three\"]\nfor word in numberWords {\n    print(word)\n}\n// Prints \"one\"\n// Prints \"two\"\n// Prints \"three\"\n\n\nnumberWords.forEach { word in\n    print(word)\n}\n// Same as above\n\n\nUsing the forEach method is distinct from a for-in loop in two important ways:\n\nYou cannot use a break or continue statement to exit the current call of the body closure or skip subsequent calls.\n\nUsing the return statement in the body closure will exit only from the current call to body, not from any outer scope, and won’t skip subsequent calls."
  },
  {
    "title": "max(by:)",
    "url": "https://developer.apple.com/documentation/musickit/applicationmusicplayer/queue-swift.class/entries-swift.struct/max(by:)",
    "html": "Parameters\nareInIncreasingOrder\n\nA predicate that returns true if its first argument should be ordered before its second argument; otherwise, false.\n\nReturn Value\n\nThe sequence’s maximum element if the sequence is not empty; otherwise, nil.\n\nDiscussion\n\nThe predicate must be a strict weak ordering over the elements. That is, for any elements a, b, and c, the following conditions must hold:\n\nareInIncreasingOrder(a, a) is always false. (Irreflexivity)\n\nIf areInIncreasingOrder(a, b) and areInIncreasingOrder(b, c) are both true, then areInIncreasingOrder(a, c) is also true. (Transitive comparability)\n\nTwo elements are incomparable if neither is ordered before the other according to the predicate. If a and b are incomparable, and b and c are incomparable, then a and c are also incomparable. (Transitive incomparability)\n\nThis example shows how to use the max(by:) method on a dictionary to find the key-value pair with the highest value.\n\nlet hues = [\"Heliotrope\": 296, \"Coral\": 16, \"Aquamarine\": 156]\nlet greatestHue = hues.max { a, b in a.value < b.value }\nprint(greatestHue)\n// Prints \"Optional((key: \"Heliotrope\", value: 296))\"\n\n\nComplexity\n\nO(n), where n is the length of the sequence."
  },
  {
    "title": "map(_:)",
    "url": "https://developer.apple.com/documentation/musickit/applicationmusicplayer/queue-swift.class/entries-swift.struct/map(_:)-2wkgi",
    "html": "Parameters\ntransform\n\nA mapping closure. transform accepts an element of this sequence as its parameter and returns a transformed value of the same or of a different type.\n\nReturn Value\n\nAn array containing the transformed elements of this sequence.\n\nDiscussion\n\nIn this example, map is used first to convert the names in the array to lowercase strings and then to count their characters.\n\nlet cast = [\"Vivien\", \"Marlon\", \"Kim\", \"Karl\"]\nlet lowercaseNames = cast.map { $0.lowercased() }\n// 'lowercaseNames' == [\"vivien\", \"marlon\", \"kim\", \"karl\"]\nlet letterCounts = cast.map { $0.count }\n// 'letterCounts' == [6, 6, 3, 4]\n\n\nComplexity\n\nO(n), where n is the length of the sequence."
  },
  {
    "title": "reduce(_:_:)",
    "url": "https://developer.apple.com/documentation/musickit/applicationmusicplayer/queue-swift.class/entries-swift.struct/reduce(_:_:)",
    "html": "Parameters\ninitialResult\n\nThe value to use as the initial accumulating value. initialResult is passed to nextPartialResult the first time the closure is executed.\n\nnextPartialResult\n\nA closure that combines an accumulating value and an element of the sequence into a new accumulating value, to be used in the next call of the nextPartialResult closure or returned to the caller.\n\nReturn Value\n\nThe final accumulated value. If the sequence has no elements, the result is initialResult.\n\nDiscussion\n\nUse the reduce(_:_:) method to produce a single value from the elements of an entire sequence. For example, you can use this method on an array of numbers to find their sum or product.\n\nThe nextPartialResult closure is called sequentially with an accumulating value initialized to initialResult and each element of the sequence. This example shows how to find the sum of an array of numbers.\n\nlet numbers = [1, 2, 3, 4]\nlet numberSum = numbers.reduce(0, { x, y in\n    x + y\n})\n// numberSum == 10\n\n\nWhen numbers.reduce(_:_:) is called, the following steps occur:\n\nThe nextPartialResult closure is called with initialResult—0 in this case—and the first element of numbers, returning the sum: 1.\n\nThe closure is called again repeatedly with the previous call’s return value and each element of the sequence.\n\nWhen the sequence is exhausted, the last value returned from the closure is returned to the caller.\n\nIf the sequence has no elements, nextPartialResult is never executed and initialResult is the result of the call to reduce(_:_:).\n\nComplexity\n\nO(n), where n is the length of the sequence."
  },
  {
    "title": "+=(_:_:)",
    "url": "https://developer.apple.com/documentation/musickit/applicationmusicplayer/queue-swift.class/entries-swift.struct/+=(_:_:)",
    "html": "Parameters\nlhs\n\nThe array to append to.\n\nrhs\n\nA collection or finite sequence.\n\nDiscussion\n\nUse this operator to append the elements of a sequence to the end of range-replaceable collection with same Element type. This example appends the elements of a Range<Int> instance to an array of integers.\n\nvar numbers = [1, 2, 3, 4, 5]\nnumbers += 10...15\nprint(numbers)\n// Prints \"[1, 2, 3, 4, 5, 10, 11, 12, 13, 14, 15]\"\n\n\nComplexity\n\nO(m), where m is the length of the right-hand-side argument."
  },
  {
    "title": "insert(contentsOf:at:)",
    "url": "https://developer.apple.com/documentation/musickit/applicationmusicplayer/queue-swift.class/entries-swift.struct/insert(contentsof:at:)",
    "html": "Parameters\nnewElements\n\nThe new elements to insert into the collection.\n\ni\n\nThe position at which to insert the new elements. index must be a valid index of the collection.\n\nDiscussion\n\nThe new elements are inserted before the element currently at the specified index. If you pass the collection’s endIndex property as the index parameter, the new elements are appended to the collection.\n\nHere’s an example of inserting a range of integers into an array of the same type:\n\nvar numbers = [1, 2, 3, 4, 5]\nnumbers.insert(contentsOf: 100...103, at: 3)\nprint(numbers)\n// Prints \"[1, 2, 3, 100, 101, 102, 103, 4, 5]\"\n\n\nCalling this method may invalidate any existing indices for use with this collection.\n\nComplexity\n\nO(n + m), where n is length of this collection and m is the length of newElements. If i == endIndex, this method is equivalent to append(contentsOf:)."
  },
  {
    "title": "+(_:_:)",
    "url": "https://developer.apple.com/documentation/musickit/applicationmusicplayer/queue-swift.class/entries-swift.struct/+(_:_:)-6e1kk",
    "html": "Parameters\nlhs\n\nA collection or finite sequence.\n\nrhs\n\nA range-replaceable collection.\n\nDiscussion\n\nThe two arguments must have the same Element type. For example, you can concatenate the elements of a Range<Int> instance and an integer array.\n\nlet numbers = [7, 8, 9, 10]\nlet moreNumbers = (1...6) + numbers\nprint(moreNumbers)\n// Prints \"[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\"\n\n\nThe resulting collection has the type of argument on the right-hand side. In the example above, moreNumbers has the same type as numbers, which is [Int]."
  },
  {
    "title": "+(_:_:)",
    "url": "https://developer.apple.com/documentation/musickit/applicationmusicplayer/queue-swift.class/entries-swift.struct/+(_:_:)-qk55",
    "html": "Parameters\nlhs\n\nA range-replaceable collection.\n\nrhs\n\nA collection or finite sequence.\n\nDiscussion\n\nThe two arguments must have the same Element type. For example, you can concatenate the elements of an integer array and a Range<Int> instance.\n\nlet numbers = [1, 2, 3, 4]\nlet moreNumbers = numbers + (5...10)\nprint(moreNumbers)\n// Prints \"[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\"\n\n\nThe resulting collection has the type of the argument on the left-hand side. In the example above, moreNumbers has the same type as numbers, which is [Int]."
  },
  {
    "title": "append(contentsOf:)",
    "url": "https://developer.apple.com/documentation/musickit/applicationmusicplayer/queue-swift.class/entries-swift.struct/append(contentsof:)",
    "html": "Parameters\nnewElements\n\nThe elements to append to the collection.\n\nDiscussion\n\nThe collection being appended to allocates any additional necessary storage to hold the new elements.\n\nThe following example appends the elements of a Range<Int> instance to an array of integers:\n\nvar numbers = [1, 2, 3, 4, 5]\nnumbers.append(contentsOf: 10...15)\nprint(numbers)\n// Prints \"[1, 2, 3, 4, 5, 10, 11, 12, 13, 14, 15]\"\n\n\nComplexity\n\nO(m), where m is the length of newElements."
  },
  {
    "title": "append(_:)",
    "url": "https://developer.apple.com/documentation/musickit/applicationmusicplayer/queue-swift.class/entries-swift.struct/append(_:)",
    "html": "Parameters\nnewElement\n\nThe element to append to the collection.\n\nDiscussion\n\nIf the collection does not have sufficient capacity for another element, additional storage is allocated before appending newElement. The following example adds a new number to an array of integers:\n\nvar numbers = [1, 2, 3, 4, 5]\nnumbers.append(100)\n\n\nprint(numbers)\n// Prints \"[1, 2, 3, 4, 5, 100]\"\n\n\nComplexity\n\nO(1) on average, over many calls to append(_:) on the same collection."
  },
  {
    "title": "init(repeating:count:)",
    "url": "https://developer.apple.com/documentation/musickit/applicationmusicplayer/queue-swift.class/entries-swift.struct/init(repeating:count:)",
    "html": "Parameters\nrepeatedValue\n\nThe element to repeat.\n\ncount\n\nThe number of times to repeat the value passed in the repeating parameter. count must be zero or greater.\n\nDiscussion\n\nHere’s an example of creating an array initialized with five strings containing the letter Z.\n\nlet fiveZs = Array(repeating: \"Z\", count: 5)\nprint(fiveZs)\n// Prints \"[\"Z\", \"Z\", \"Z\", \"Z\", \"Z\"]\"\n"
  },
  {
    "title": "insert(_:at:)",
    "url": "https://developer.apple.com/documentation/musickit/applicationmusicplayer/queue-swift.class/entries-swift.struct/insert(_:at:)",
    "html": "Parameters\nnewElement\n\nThe new element to insert into the collection.\n\ni\n\nThe position at which to insert the new element. index must be a valid index into the collection.\n\nDiscussion\n\nThe new element is inserted before the element currently at the specified index. If you pass the collection’s endIndex property as the index parameter, the new element is appended to the collection.\n\nvar numbers = [1, 2, 3, 4, 5]\nnumbers.insert(100, at: 3)\nnumbers.insert(200, at: numbers.endIndex)\n\n\nprint(numbers)\n// Prints \"[1, 2, 3, 100, 4, 5, 200]\"\n\n\nCalling this method may invalidate any existing indices for use with this collection.\n\nComplexity\n\nO(n), where n is the length of the collection. If i == endIndex, this method is equivalent to append(_:)."
  },
  {
    "title": "popLast()",
    "url": "https://developer.apple.com/documentation/musickit/applicationmusicplayer/queue-swift.class/entries-swift.struct/poplast()",
    "html": "Return Value\n\nThe last element of the collection if the collection is not empty; otherwise, nil.\n\nDiscussion\n\nCalling this method may invalidate all saved indices of this collection. Do not rely on a previously stored index value after altering a collection with any operation that can change its length.\n\nComplexity\n\nO(1)"
  },
  {
    "title": "init(_:)",
    "url": "https://developer.apple.com/documentation/musickit/applicationmusicplayer/queue-swift.class/entries-swift.struct/init(_:)",
    "html": "Parameters\nelements\n\nThe sequence of elements for the new collection."
  },
  {
    "title": "filter(_:)",
    "url": "https://developer.apple.com/documentation/musickit/applicationmusicplayer/queue-swift.class/entries-swift.struct/filter(_:)",
    "html": "Parameters\nisIncluded\n\nA closure that takes an element of the sequence as its argument and returns a Boolean value indicating whether the element should be included in the returned collection.\n\nReturn Value\n\nA collection of the elements that isIncluded allowed.\n\nDiscussion\n\nIn this example, filter(_:) is used to include only names shorter than five characters.\n\nlet cast = [\"Vivien\", \"Marlon\", \"Kim\", \"Karl\"]\nlet shortNames = cast.filter { $0.count < 5 }\nprint(shortNames)\n// Prints \"[\"Kim\", \"Karl\"]\"\n\n\nComplexity\n\nO(n), where n is the length of the collection."
  },
  {
    "title": "applying(_:)",
    "url": "https://developer.apple.com/documentation/musickit/applicationmusicplayer/queue-swift.class/entries-swift.struct/applying(_:)",
    "html": "Parameters\ndifference\n\nThe difference to be applied.\n\nReturn Value\n\nAn instance representing the state of the receiver with the difference applied, or nil if the difference is incompatible with the receiver’s state.\n\nDiscussion\n\nComplexity\n\nO(n + c), where n is self.count and c is the number of changes contained by the parameter."
  },
  {
    "title": "init(from:)",
    "url": "https://developer.apple.com/documentation/musickit/playlist/entry/item-swift.enum/init(from:)",
    "html": "Parameters\ndecoder\n\nThe decoder to read data from.\n\nDiscussion\n\nThis initializer throws an error if reading from the decoder fails, or if the data read is corrupted or otherwise invalid."
  },
  {
    "title": "CustomStringConvertible Implementations",
    "url": "https://developer.apple.com/documentation/musickit/playlist/entry/customstringconvertible-implementations",
    "html": "Topics\nInstance Properties\nvar description: String\nA textual representation of this instance."
  },
  {
    "title": "sorted(using:)",
    "url": "https://developer.apple.com/documentation/musickit/applicationmusicplayer/queue-swift.class/entries-swift.struct/sorted(using:)-s2ql",
    "html": "Parameters\ncomparator\n\nthe comparator to use in ordering elements\n\nReturn Value\n\nan array of the elements sorted using comparator."
  },
  {
    "title": "reduce(into:_:)",
    "url": "https://developer.apple.com/documentation/musickit/applicationmusicplayer/queue-swift.class/entries-swift.struct/reduce(into:_:)",
    "html": "Parameters\ninitialResult\n\nThe value to use as the initial accumulating value.\n\nupdateAccumulatingResult\n\nA closure that updates the accumulating value with an element of the sequence.\n\nReturn Value\n\nThe final accumulated value. If the sequence has no elements, the result is initialResult.\n\nDiscussion\n\nUse the reduce(into:_:) method to produce a single value from the elements of an entire sequence. For example, you can use this method on an array of integers to filter adjacent equal entries or count frequencies.\n\nThis method is preferred over reduce(_:_:) for efficiency when the result is a copy-on-write type, for example an Array or a Dictionary.\n\nThe updateAccumulatingResult closure is called sequentially with a mutable accumulating value initialized to initialResult and each element of the sequence. This example shows how to build a dictionary of letter frequencies of a string.\n\nlet letters = \"abracadabra\"\nlet letterCount = letters.reduce(into: [:]) { counts, letter in\n    counts[letter, default: 0] += 1\n}\n// letterCount == [\"a\": 5, \"b\": 2, \"r\": 2, \"c\": 1, \"d\": 1]\n\n\nWhen letters.reduce(into:_:) is called, the following steps occur:\n\nThe updateAccumulatingResult closure is called with the initial accumulating value—[:] in this case—and the first character of letters, modifying the accumulating value by setting 1 for the key \"a\".\n\nThe closure is called again repeatedly with the updated accumulating value and each element of the sequence.\n\nWhen the sequence is exhausted, the accumulating value is returned to the caller.\n\nIf the sequence has no elements, updateAccumulatingResult is never executed and initialResult is the result of the call to reduce(into:_:).\n\nComplexity\n\nO(n), where n is the length of the sequence."
  },
  {
    "title": "starts(with:)",
    "url": "https://developer.apple.com/documentation/musickit/applicationmusicplayer/queue-swift.class/entries-swift.struct/starts(with:)",
    "html": "Parameters\npossiblePrefix\n\nA sequence to compare to this sequence.\n\nReturn Value\n\ntrue if the initial elements of the sequence are the same as the elements of possiblePrefix; otherwise, false. If possiblePrefix has no elements, the return value is true.\n\nDiscussion\n\nThis example tests whether one countable range begins with the elements of another countable range.\n\nlet a = 1...3\nlet b = 1...10\n\n\nprint(b.starts(with: a))\n// Prints \"true\"\n\n\nPassing a sequence with no elements or an empty collection as possiblePrefix always results in true.\n\nprint(b.starts(with: []))\n// Prints \"true\"\n\n\nComplexity\n\nO(m), where m is the lesser of the length of the sequence and the length of possiblePrefix."
  },
  {
    "title": "starts(with:by:)",
    "url": "https://developer.apple.com/documentation/musickit/applicationmusicplayer/queue-swift.class/entries-swift.struct/starts(with:by:)",
    "html": "Parameters\npossiblePrefix\n\nA sequence to compare to this sequence.\n\nareEquivalent\n\nA predicate that returns true if its two arguments are equivalent; otherwise, false.\n\nReturn Value\n\ntrue if the initial elements of the sequence are equivalent to the elements of possiblePrefix; otherwise, false. If possiblePrefix has no elements, the return value is true.\n\nDiscussion\n\nThe predicate must be a equivalence relation over the elements. That is, for any elements a, b, and c, the following conditions must hold:\n\nareEquivalent(a, a) is always true. (Reflexivity)\n\nareEquivalent(a, b) implies areEquivalent(b, a). (Symmetry)\n\nIf areEquivalent(a, b) and areEquivalent(b, c) are both true, then areEquivalent(a, c) is also true. (Transitivity)\n\nComplexity\n\nO(m), where m is the lesser of the length of the sequence and the length of possiblePrefix."
  },
  {
    "title": "!=(_:_:)",
    "url": "https://developer.apple.com/documentation/musickit/musicdatarequest/error/source-swift.enum/!=(_:_:)",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nInequality is the inverse of equality. For any values a and b, a != b implies that a == b is false.\n\nThis is the default implementation of the not-equal-to operator (!=) for any type that conforms to Equatable."
  },
  {
    "title": "description",
    "url": "https://developer.apple.com/documentation/musickit/musicdatarequest/error/source-swift.enum/description",
    "html": "Discussion\n\nCalling this property directly is discouraged. Instead, convert an instance of any type to a string by using the String(describing:) initializer. This initializer works with any type, and uses the custom description property for types that conform to CustomStringConvertible:\n\nstruct Point: CustomStringConvertible {\n    let x: Int, y: Int\n\n\n    var description: String {\n        return \"(\\(x), \\(y))\"\n    }\n}\n\n\nlet p = Point(x: 21, y: 30)\nlet s = String(describing: p)\nprint(s)\n// Prints \"(21, 30)\"\n\n\nThe conversion of p to a string in the assignment to s uses the Point type’s description property."
  },
  {
    "title": "!=(_:_:)",
    "url": "https://developer.apple.com/documentation/musickit/applicationmusicplayer/queue-swift.class/entries-swift.struct/!=(_:_:)",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nInequality is the inverse of equality. For any values a and b, a != b implies that a == b is false.\n\nThis is the default implementation of the not-equal-to operator (!=) for any type that conforms to Equatable."
  },
  {
    "title": "!=(_:_:)",
    "url": "https://developer.apple.com/documentation/musickit/curator/kind-swift.enum/!=(_:_:)",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nInequality is the inverse of equality. For any values a and b, a != b implies that a == b is false.\n\nThis is the default implementation of the not-equal-to operator (!=) for any type that conforms to Equatable."
  },
  {
    "title": "description",
    "url": "https://developer.apple.com/documentation/musickit/musiccatalogsearchsuggestionsresponse/suggestion/description",
    "html": "Discussion\n\nCalling this property directly is discouraged. Instead, convert an instance of any type to a string by using the String(describing:) initializer. This initializer works with any type, and uses the custom description property for types that conform to CustomStringConvertible:\n\nstruct Point: CustomStringConvertible {\n    let x: Int, y: Int\n\n\n    var description: String {\n        return \"(\\(x), \\(y))\"\n    }\n}\n\n\nlet p = Point(x: 21, y: 30)\nlet s = String(describing: p)\nprint(s)\n// Prints \"(21, 30)\"\n\n\nThe conversion of p to a string in the assignment to s uses the Point type’s description property."
  },
  {
    "title": "description",
    "url": "https://developer.apple.com/documentation/musickit/musicpersonalrecommendation/item/description",
    "html": "Discussion\n\nCalling this property directly is discouraged. Instead, convert an instance of any type to a string by using the String(describing:) initializer. This initializer works with any type, and uses the custom description property for types that conform to CustomStringConvertible:\n\nstruct Point: CustomStringConvertible {\n    let x: Int, y: Int\n\n\n    var description: String {\n        return \"(\\(x), \\(y))\"\n    }\n}\n\n\nlet p = Point(x: 21, y: 30)\nlet s = String(describing: p)\nprint(s)\n// Prints \"(21, 30)\"\n\n\nThe conversion of p to a string in the assignment to s uses the Point type’s description property."
  },
  {
    "title": "debugDescription",
    "url": "https://developer.apple.com/documentation/musickit/musicpersonalrecommendation/item/debugdescription",
    "html": "Discussion\n\nCalling this property directly is discouraged. Instead, convert an instance of any type to a string by using the String(reflecting:) initializer. This initializer works with any type, and uses the custom debugDescription property for types that conform to CustomDebugStringConvertible:\n\nstruct Point: CustomDebugStringConvertible {\n    let x: Int, y: Int\n\n\n    var debugDescription: String {\n        return \"(\\(x), \\(y))\"\n    }\n}\n\n\nlet p = Point(x: 21, y: 30)\nlet s = String(reflecting: p)\nprint(s)\n// Prints \"(21, 30)\"\n\n\nThe conversion of p to a string in the assignment to s uses the Point type’s debugDescription property."
  },
  {
    "title": "init(from:)",
    "url": "https://developer.apple.com/documentation/musickit/musicpersonalrecommendation/item/init(from:)",
    "html": "Parameters\ndecoder\n\nThe decoder to read data from.\n\nDiscussion\n\nThis initializer throws an error if reading from the decoder fails, or if the data read is corrupted or otherwise invalid."
  },
  {
    "title": "with(_:)",
    "url": "https://developer.apple.com/documentation/musickit/playlist/entry/item-swift.enum/with(_:)",
    "html": "Discussion\n\nThis asynchronous method fetches a more complete representation of the receiver from Apple Music API over the network."
  },
  {
    "title": "with(_:preferredSource:)",
    "url": "https://developer.apple.com/documentation/musickit/playlist/entry/item-swift.enum/with(_:preferredsource:)",
    "html": "Discussion\n\nThis asynchronous method fetches a more complete representation of the receiver, loading the contents for each property you request from either the Apple Music catalog or the user’s library, depending on the preferred source as well the availability of the content in those respective data sources.\n\nFor example, if you want to load the tracks relationship for an Album, as found in the user’s library, as well as other associations of content that only live in the Apple Music catalog, like the recordLabels and relatedAlbums associations, you can use this code:\n\nlet album: Album = …\nlet detailedAlbum = try await album.with(\n    [\n        .tracks,\n        .recordLabels,\n        .relatedAlbums\n    ],\n    preferredSource: .library\n)\n\n\nHere, because the tracks relationship for an Album is supported in both the library and the catalog, and because the this code specifically requests MusicPropertySource.library as the preferred source, the framework will load the tracks from the user’s library. However, because the recordLabels and relatedAlbums associations are only available in the Apple Music catalog, the framework will also issue a network request to Apple Music API to fetch those associations of content from the catalog."
  },
  {
    "title": "!=(_:_:)",
    "url": "https://developer.apple.com/documentation/musickit/musiclibrary/error/!=(_:_:)",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nInequality is the inverse of equality. For any values a and b, a != b implies that a == b is false.\n\nThis is the default implementation of the not-equal-to operator (!=) for any type that conforms to Equatable."
  },
  {
    "title": "!=(_:_:)",
    "url": "https://developer.apple.com/documentation/musickit/musicpersonalrecommendation/item/!=(_:_:)",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nInequality is the inverse of equality. For any values a and b, a != b implies that a == b is false.\n\nThis is the default implementation of the not-equal-to operator (!=) for any type that conforms to Equatable."
  },
  {
    "title": "encode(to:)",
    "url": "https://developer.apple.com/documentation/musickit/musicpersonalrecommendation/item/encode(to:)",
    "html": "Parameters\nencoder\n\nThe encoder to write data to.\n\nDiscussion\n\nIf the value fails to encode anything, encoder will encode an empty keyed container in its place.\n\nThis function throws an error if any values are invalid for the given encoder’s format."
  },
  {
    "title": "!=(_:_:)",
    "url": "https://developer.apple.com/documentation/musickit/musicplayer/shufflemode/!=(_:_:)",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nInequality is the inverse of equality. For any values a and b, a != b implies that a == b is false.\n\nThis is the default implementation of the not-equal-to operator (!=) for any type that conforms to Equatable."
  },
  {
    "title": "description",
    "url": "https://developer.apple.com/documentation/musickit/playlist/entry/item-swift.enum/description",
    "html": "Discussion\n\nCalling this property directly is discouraged. Instead, convert an instance of any type to a string by using the String(describing:) initializer. This initializer works with any type, and uses the custom description property for types that conform to CustomStringConvertible:\n\nstruct Point: CustomStringConvertible {\n    let x: Int, y: Int\n\n\n    var description: String {\n        return \"(\\(x), \\(y))\"\n    }\n}\n\n\nlet p = Point(x: 21, y: 30)\nlet s = String(describing: p)\nprint(s)\n// Prints \"(21, 30)\"\n\n\nThe conversion of p to a string in the assignment to s uses the Point type’s description property."
  },
  {
    "title": "replaceSubrange(_:with:)",
    "url": "https://developer.apple.com/documentation/musickit/applicationmusicplayer/queue-swift.class/entries-swift.struct/replacesubrange(_:with:)-5vg0h",
    "html": "Parameters\nsubrange\n\nThe subrange of the collection to replace. The bounds of the range must be valid indices of the collection.\n\nnewElements\n\nThe new elements to add to the collection.\n\nDiscussion\n\nThis method has the effect of removing the specified range of elements from the collection and inserting the new elements at the same location. The number of new elements need not match the number of elements being removed.\n\nIn this example, three elements in the middle of an array of integers are replaced by the five elements of a Repeated<Int> instance.\n\n var nums = [10, 20, 30, 40, 50]\n nums.replaceSubrange(1...3, with: repeatElement(1, count: 5))\n print(nums)\n // Prints \"[10, 1, 1, 1, 1, 1, 50]\"\n\n\nIf you pass a zero-length range as the subrange parameter, this method inserts the elements of newElements at subrange.startIndex. Calling the insert(contentsOf:at:) method instead is preferred.\n\nLikewise, if you pass a zero-length collection as the newElements parameter, this method removes the elements in the given subrange without replacement. Calling the removeSubrange(_:) method instead is preferred.\n\nCalling this method may invalidate any existing indices for use with this collection.\n\nComplexity\n\nO(n + m), where n is length of this collection and m is the length of newElements. If the call to this method simply appends the contents of newElements to the collection, the complexity is O(m)."
  },
  {
    "title": "replacing(_:with:maxReplacements:)",
    "url": "https://developer.apple.com/documentation/musickit/applicationmusicplayer/queue-swift.class/entries-swift.struct/replacing(_:with:maxreplacements:)",
    "html": "Parameters\nother\n\nThe sequence to replace.\n\nreplacement\n\nThe new elements to add to the collection.\n\nmaxReplacements\n\nA number specifying how many occurrences of other to replace. Default is Int.max.\n\nReturn Value\n\nA new collection in which all occurrences of other in subrange of the collection are replaced by replacement."
  },
  {
    "title": "replaceSubrange(_:with:)",
    "url": "https://developer.apple.com/documentation/musickit/applicationmusicplayer/queue-swift.class/entries-swift.struct/replacesubrange(_:with:)-21xgu",
    "html": "Parameters\nsubrange\n\nThe subrange of the collection to replace. The bounds of the range must be valid indices of the collection.\n\nnewElements\n\nThe new elements to add to the collection.\n\nDiscussion\n\nThis method has the effect of removing the specified range of elements from the collection and inserting the new elements at the same location. The number of new elements need not match the number of elements being removed.\n\nIn this example, three elements in the middle of an array of integers are replaced by the five elements of a Repeated<Int> instance.\n\n var nums = [10, 20, 30, 40, 50]\n nums.replaceSubrange(1...3, with: repeatElement(1, count: 5))\n print(nums)\n // Prints \"[10, 1, 1, 1, 1, 1, 50]\"\n\n\nIf you pass a zero-length range as the subrange parameter, this method inserts the elements of newElements at subrange.startIndex. Calling the insert(contentsOf:at:) method instead is preferred.\n\nLikewise, if you pass a zero-length collection as the newElements parameter, this method removes the elements in the given subrange without replacement. Calling the removeSubrange(_:) method instead is preferred.\n\nCalling this method may invalidate any existing indices for use with this collection.\n\nComplexity\n\nO(n + m), where n is length of this collection and m is the length of newElements. If the call to this method simply appends the contents of newElements to the collection, this method is equivalent to append(contentsOf:)."
  },
  {
    "title": "contains(_:)",
    "url": "https://developer.apple.com/documentation/musickit/applicationmusicplayer/queue-swift.class/entries-swift.struct/contains(_:)",
    "html": "Parameters\nelement\n\nThe element to find in the sequence.\n\nReturn Value\n\ntrue if the element was found in the sequence; otherwise, false.\n\nDiscussion\n\nThis example checks to see whether a favorite actor is in an array storing a movie’s cast.\n\nlet cast = [\"Vivien\", \"Marlon\", \"Kim\", \"Karl\"]\nprint(cast.contains(\"Marlon\"))\n// Prints \"true\"\nprint(cast.contains(\"James\"))\n// Prints \"false\"\n\n\nComplexity\n\nO(n), where n is the length of the sequence."
  },
  {
    "title": "encode(to:)",
    "url": "https://developer.apple.com/documentation/musickit/playlist/entry/item-swift.enum/encode(to:)",
    "html": "Parameters\nencoder\n\nThe encoder to write data to.\n\nDiscussion\n\nIf the value fails to encode anything, encoder will encode an empty keyed container in its place.\n\nThis function throws an error if any values are invalid for the given encoder’s format."
  },
  {
    "title": "debugDescription",
    "url": "https://developer.apple.com/documentation/musickit/playlist/entry/item-swift.enum/debugdescription",
    "html": "Discussion\n\nCalling this property directly is discouraged. Instead, convert an instance of any type to a string by using the String(reflecting:) initializer. This initializer works with any type, and uses the custom debugDescription property for types that conform to CustomDebugStringConvertible:\n\nstruct Point: CustomDebugStringConvertible {\n    let x: Int, y: Int\n\n\n    var debugDescription: String {\n        return \"(\\(x), \\(y))\"\n    }\n}\n\n\nlet p = Point(x: 21, y: 30)\nlet s = String(reflecting: p)\nprint(s)\n// Prints \"(21, 30)\"\n\n\nThe conversion of p to a string in the assignment to s uses the Point type’s debugDescription property."
  },
  {
    "title": "!=(_:_:)",
    "url": "https://developer.apple.com/documentation/musickit/playlist/entry/item-swift.enum/!=(_:_:)",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nInequality is the inverse of equality. For any values a and b, a != b implies that a == b is false.\n\nThis is the default implementation of the not-equal-to operator (!=) for any type that conforms to Equatable."
  },
  {
    "title": "CustomDebugStringConvertible Implementations",
    "url": "https://developer.apple.com/documentation/musickit/playlist/entry/customdebugstringconvertible-implementations",
    "html": "Topics\nInstance Properties\nvar debugDescription: String\nA textual representation of this instance, suitable for debugging."
  },
  {
    "title": "Encodable Implementations",
    "url": "https://developer.apple.com/documentation/musickit/playlist/entry/encodable-implementations",
    "html": "Topics\nInstance Methods\nfunc encode(to: any Encoder) throws\nEncodes this value into the given encoder."
  },
  {
    "title": "init(from:)",
    "url": "https://developer.apple.com/documentation/musickit/musicplayer/queue/entry/item-swift.enum/init(from:)",
    "html": "Parameters\ndecoder\n\nThe decoder to read data from.\n\nDiscussion\n\nThis initializer throws an error if reading from the decoder fails, or if the data read is corrupted or otherwise invalid."
  },
  {
    "title": "debugDescription",
    "url": "https://developer.apple.com/documentation/musickit/musiccatalogsearchresponse/topresult/debugdescription",
    "html": "Discussion\n\nCalling this property directly is discouraged. Instead, convert an instance of any type to a string by using the String(reflecting:) initializer. This initializer works with any type, and uses the custom debugDescription property for types that conform to CustomDebugStringConvertible:\n\nstruct Point: CustomDebugStringConvertible {\n    let x: Int, y: Int\n\n\n    var debugDescription: String {\n        return \"(\\(x), \\(y))\"\n    }\n}\n\n\nlet p = Point(x: 21, y: 30)\nlet s = String(reflecting: p)\nprint(s)\n// Prints \"(21, 30)\"\n\n\nThe conversion of p to a string in the assignment to s uses the Point type’s debugDescription property."
  },
  {
    "title": "description",
    "url": "https://developer.apple.com/documentation/musickit/musicplayer/queue/entry/item-swift.enum/description",
    "html": "Discussion\n\nCalling this property directly is discouraged. Instead, convert an instance of any type to a string by using the String(describing:) initializer. This initializer works with any type, and uses the custom description property for types that conform to CustomStringConvertible:\n\nstruct Point: CustomStringConvertible {\n    let x: Int, y: Int\n\n\n    var description: String {\n        return \"(\\(x), \\(y))\"\n    }\n}\n\n\nlet p = Point(x: 21, y: 30)\nlet s = String(describing: p)\nprint(s)\n// Prints \"(21, 30)\"\n\n\nThe conversion of p to a string in the assignment to s uses the Point type’s description property."
  },
  {
    "title": "!=(_:_:)",
    "url": "https://developer.apple.com/documentation/musickit/musicplayer/queue/entry/item-swift.enum/!=(_:_:)",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nInequality is the inverse of equality. For any values a and b, a != b implies that a == b is false.\n\nThis is the default implementation of the not-equal-to operator (!=) for any type that conforms to Equatable."
  },
  {
    "title": "sorted(by:)",
    "url": "https://developer.apple.com/documentation/musickit/applicationmusicplayer/queue-swift.class/entries-swift.struct/sorted(by:)",
    "html": "Parameters\nareInIncreasingOrder\n\nA predicate that returns true if its first argument should be ordered before its second argument; otherwise, false.\n\nReturn Value\n\nA sorted array of the sequence’s elements.\n\nDiscussion\n\nWhen you want to sort a sequence of elements that don’t conform to the Comparable protocol, pass a predicate to this method that returns true when the first element should be ordered before the second. The elements of the resulting array are ordered according to the given predicate.\n\nIn the following example, the predicate provides an ordering for an array of a custom HTTPResponse type. The predicate orders errors before successes and sorts the error responses by their error code.\n\nenum HTTPResponse {\n    case ok\n    case error(Int)\n}\n\n\nlet responses: [HTTPResponse] = [.error(500), .ok, .ok, .error(404), .error(403)]\nlet sortedResponses = responses.sorted {\n    switch ($0, $1) {\n    // Order errors by code\n    case let (.error(aCode), .error(bCode)):\n        return aCode < bCode\n\n\n    // All successes are equivalent, so none is before any other\n    case (.ok, .ok): return false\n\n\n    // Order errors before successes\n    case (.error, .ok): return true\n    case (.ok, .error): return false\n    }\n}\nprint(sortedResponses)\n// Prints \"[.error(403), .error(404), .error(500), .ok, .ok]\"\n\n\nYou also use this method to sort elements that conform to the Comparable protocol in descending order. To sort your sequence in descending order, pass the greater-than operator (>) as the areInIncreasingOrder parameter.\n\nlet students: Set = [\"Kofi\", \"Abena\", \"Peter\", \"Kweku\", \"Akosua\"]\nlet descendingStudents = students.sorted(by: >)\nprint(descendingStudents)\n// Prints \"[\"Peter\", \"Kweku\", \"Kofi\", \"Akosua\", \"Abena\"]\"\n\n\nCalling the related sorted() method is equivalent to calling this method and passing the less-than operator (<) as the predicate.\n\nprint(students.sorted())\n// Prints \"[\"Abena\", \"Akosua\", \"Kofi\", \"Kweku\", \"Peter\"]\"\nprint(students.sorted(by: <))\n// Prints \"[\"Abena\", \"Akosua\", \"Kofi\", \"Kweku\", \"Peter\"]\"\n\n\nThe predicate must be a strict weak ordering over the elements. That is, for any elements a, b, and c, the following conditions must hold:\n\nareInIncreasingOrder(a, a) is always false. (Irreflexivity)\n\nIf areInIncreasingOrder(a, b) and areInIncreasingOrder(b, c) are both true, then areInIncreasingOrder(a, c) is also true. (Transitive comparability)\n\nTwo elements are incomparable if neither is ordered before the other according to the predicate. If a and b are incomparable, and b and c are incomparable, then a and c are also incomparable. (Transitive incomparability)\n\nThe sorting algorithm is guaranteed to be stable. A stable sort preserves the relative order of elements for which areInIncreasingOrder does not establish an order.\n\nComplexity\n\nO(n log n), where n is the length of the sequence."
  },
  {
    "title": "shuffled()",
    "url": "https://developer.apple.com/documentation/musickit/applicationmusicplayer/queue-swift.class/entries-swift.struct/shuffled()",
    "html": "Return Value\n\nA shuffled array of this sequence’s elements.\n\nDiscussion\n\nFor example, you can shuffle the numbers between 0 and 9 by calling the shuffled() method on that range:\n\nlet numbers = 0...9\nlet shuffledNumbers = numbers.shuffled()\n// shuffledNumbers == [1, 7, 6, 2, 8, 9, 4, 3, 5, 0]\n\n\nThis method is equivalent to calling shuffled(using:), passing in the system’s default random generator.\n\nComplexity\n\nO(n), where n is the length of the sequence."
  },
  {
    "title": "!=(_:_:)",
    "url": "https://developer.apple.com/documentation/musickit/musiccatalogsearchresponse/topresult/!=(_:_:)",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nInequality is the inverse of equality. For any values a and b, a != b implies that a == b is false.\n\nThis is the default implementation of the not-equal-to operator (!=) for any type that conforms to Equatable."
  },
  {
    "title": "shuffled(using:)",
    "url": "https://developer.apple.com/documentation/musickit/applicationmusicplayer/queue-swift.class/entries-swift.struct/shuffled(using:)",
    "html": "Parameters\ngenerator\n\nThe random number generator to use when shuffling the sequence.\n\nReturn Value\n\nAn array of this sequence’s elements in a shuffled order.\n\nDiscussion\n\nYou use this method to randomize the elements of a sequence when you are using a custom random number generator. For example, you can shuffle the numbers between 0 and 9 by calling the shuffled(using:) method on that range:\n\nlet numbers = 0...9\nlet shuffledNumbers = numbers.shuffled(using: &myGenerator)\n// shuffledNumbers == [8, 9, 4, 3, 2, 6, 7, 0, 5, 1]\n\n\nComplexity\n\nO(n), where n is the length of the sequence.\n\nNote\n\nThe algorithm used to shuffle a sequence may change in a future version of Swift. If you’re passing a generator that results in the same shuffled order each time you run your program, that sequence may change when your program is compiled using a different version of Swift."
  },
  {
    "title": "encode(to:)",
    "url": "https://developer.apple.com/documentation/musickit/musiccatalogsearchresponse/topresult/encode(to:)",
    "html": "Parameters\nencoder\n\nThe encoder to write data to.\n\nDiscussion\n\nIf the value fails to encode anything, encoder will encode an empty keyed container in its place.\n\nThis function throws an error if any values are invalid for the given encoder’s format."
  },
  {
    "title": "sorted(using:)",
    "url": "https://developer.apple.com/documentation/musickit/applicationmusicplayer/queue-swift.class/entries-swift.struct/sorted(using:)-9afof",
    "html": "Parameters\ncomparators\n\nan array of comparators used to compare elements. The first comparator specifies the primary comparator to be used in sorting the sequence’s elements. Any subsequent comparators are used to further refine the order of elements with equal values.\n\nReturn Value\n\nan array of the elements sorted using comparators."
  },
  {
    "title": "encode(to:)",
    "url": "https://developer.apple.com/documentation/musickit/musicplayer/queue/entry/item-swift.enum/encode(to:)",
    "html": "Parameters\nencoder\n\nThe encoder to write data to.\n\nDiscussion\n\nIf the value fails to encode anything, encoder will encode an empty keyed container in its place.\n\nThis function throws an error if any values are invalid for the given encoder’s format."
  },
  {
    "title": "debugDescription",
    "url": "https://developer.apple.com/documentation/musickit/musicplayer/queue/entry/item-swift.enum/debugdescription",
    "html": "Discussion\n\nCalling this property directly is discouraged. Instead, convert an instance of any type to a string by using the String(reflecting:) initializer. This initializer works with any type, and uses the custom debugDescription property for types that conform to CustomDebugStringConvertible:\n\nstruct Point: CustomDebugStringConvertible {\n    let x: Int, y: Int\n\n\n    var debugDescription: String {\n        return \"(\\(x), \\(y))\"\n    }\n}\n\n\nlet p = Point(x: 21, y: 30)\nlet s = String(reflecting: p)\nprint(s)\n// Prints \"(21, 30)\"\n\n\nThe conversion of p to a string in the assignment to s uses the Point type’s debugDescription property."
  },
  {
    "title": "!=(_:_:)",
    "url": "https://developer.apple.com/documentation/musickit/playlist/kind-swift.enum/!=(_:_:)",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nInequality is the inverse of equality. For any values a and b, a != b implies that a == b is false.\n\nThis is the default implementation of the not-equal-to operator (!=) for any type that conforms to Equatable."
  },
  {
    "title": "debugDescription",
    "url": "https://developer.apple.com/documentation/musickit/musiccatalogsearchsuggestionsresponse/suggestion/debugdescription",
    "html": "Discussion\n\nCalling this property directly is discouraged. Instead, convert an instance of any type to a string by using the String(reflecting:) initializer. This initializer works with any type, and uses the custom debugDescription property for types that conform to CustomDebugStringConvertible:\n\nstruct Point: CustomDebugStringConvertible {\n    let x: Int, y: Int\n\n\n    var debugDescription: String {\n        return \"(\\(x), \\(y))\"\n    }\n}\n\n\nlet p = Point(x: 21, y: 30)\nlet s = String(reflecting: p)\nprint(s)\n// Prints \"(21, 30)\"\n\n\nThe conversion of p to a string in the assignment to s uses the Point type’s debugDescription property."
  },
  {
    "title": "hashValue",
    "url": "https://developer.apple.com/documentation/musickit/playlist/entry/hashvalue",
    "html": "Discussion\n\nHash values are not guaranteed to be equal across different executions of your program. Do not save hash values to use during a future execution.\n\nImportant\n\nhashValue is deprecated as a Hashable requirement. To conform to Hashable, implement the hash(into:) requirement instead. The compiler provides an implementation for hashValue for you."
  },
  {
    "title": "contentRating",
    "url": "https://developer.apple.com/documentation/musickit/playlist/entry/contentrating",
    "html": "Discussion\n\nA nil value means no rating is available for this playlist entry."
  },
  {
    "title": "MutableCollection Implementations",
    "url": "https://developer.apple.com/documentation/musickit/applicationmusicplayer/queue-swift.class/entries-swift.struct/mutablecollection-implementations",
    "html": "Topics\nInstance Methods\nfunc partition(by: (Self.Element) throws -> Bool) rethrows -> Self.Index\nReorders the elements of the collection such that all the elements that match the given predicate are after all the elements that don’t match.\nfunc partition(by: (Self.Element) throws -> Bool) rethrows -> Self.Index\nReorders the elements of the collection such that all the elements that match the given predicate are after all the elements that don’t match.\nAvailable when Self conforms to BidirectionalCollection.\nfunc reverse()\nReverses the elements of the collection in place.\nAvailable when Self conforms to BidirectionalCollection.\nfunc shuffle()\nShuffles the collection in place.\nAvailable when Self conforms to RandomAccessCollection.\nfunc shuffle<T>(using: inout T)\nShuffles the collection in place, using the given generator as a source for randomness.\nAvailable when Self conforms to RandomAccessCollection.\nfunc sort(by: (Self.Element, Self.Element) throws -> Bool) rethrows\nSorts the collection in place, using the given predicate as the comparison between elements.\nAvailable when Self conforms to RandomAccessCollection.\nfunc sort<S, Comparator>(using: S)\nSorts the collection using the given array of SortComparators to compare elements.\nAvailable when Self conforms to RandomAccessCollection.\nfunc sort<Comparator>(using: Comparator)\nSorts the collection using the given comparator to compare elements.\nAvailable when Self conforms to RandomAccessCollection.\nfunc swapAt(Self.Index, Self.Index)\nExchanges the values at the specified indices of the collection.\nfunc withContiguousMutableStorageIfAvailable<R>((inout UnsafeMutableBufferPointer<Self.Element>) throws -> R) rethrows -> R?\nExecutes a closure on the collection’s contiguous storage.\nSubscripts\nsubscript(Range<Self.Index>) -> Slice<Self>\nAccesses a contiguous subrange of the collection’s elements.\nDeprecated\nsubscript(Range<Self.Index>) -> Self.SubSequence\nDeprecated\nsubscript((UnboundedRange_) -> ()) -> Self.SubSequence\nsubscript<R>(R) -> Self.SubSequence"
  },
  {
    "title": "hash(into:)",
    "url": "https://developer.apple.com/documentation/musickit/applicationmusicplayer/queue-swift.class/entries-swift.struct/hash(into:)",
    "html": "Parameters\nhasher\n\nThe hasher to use when combining the components of this instance.\n\nDiscussion\n\nImplement this method to conform to the Hashable protocol. The components used for hashing must be the same as the components compared in your type’s == operator implementation. Call hasher.combine(_:) with each of these components.\n\nImportant\n\nIn your implementation of hash(into:), don’t call finalize() on the hasher instance provided, or replace it with a different instance. Doing so may become a compile-time error in the future."
  },
  {
    "title": "with(_:preferredSource:)",
    "url": "https://developer.apple.com/documentation/musickit/musicplayer/queue/entry/item-swift.enum/with(_:preferredsource:)",
    "html": "Discussion\n\nThis asynchronous method fetches a more complete representation of the receiver, loading the contents for each property you request from either the Apple Music catalog or the user’s library, depending on the preferred source as well the availability of the content in those respective data sources.\n\nFor example, if you want to load the tracks relationship for an Album, as found in the user’s library, as well as other associations of content that only live in the Apple Music catalog, like the recordLabels and relatedAlbums associations, you can use this code:\n\nlet album: Album = …\nlet detailedAlbum = try await album.with(\n    [\n        .tracks,\n        .recordLabels,\n        .relatedAlbums\n    ],\n    preferredSource: .library\n)\n\n\nHere, because the tracks relationship for an Album is supported in both the library and the catalog, and because the this code specifically requests MusicPropertySource.library as the preferred source, the framework will load the tracks from the user’s library. However, because the recordLabels and relatedAlbums associations are only available in the Apple Music catalog, the framework will also issue a network request to Apple Music API to fetch those associations of content from the catalog."
  },
  {
    "title": "debugDescription",
    "url": "https://developer.apple.com/documentation/musickit/musiccatalogchartsresponse/debugdescription",
    "html": "Discussion\n\nCalling this property directly is discouraged. Instead, convert an instance of any type to a string by using the String(reflecting:) initializer. This initializer works with any type, and uses the custom debugDescription property for types that conform to CustomDebugStringConvertible:\n\nstruct Point: CustomDebugStringConvertible {\n    let x: Int, y: Int\n\n\n    var debugDescription: String {\n        return \"(\\(x), \\(y))\"\n    }\n}\n\n\nlet p = Point(x: 21, y: 30)\nlet s = String(reflecting: p)\nprint(s)\n// Prints \"(21, 30)\"\n\n\nThe conversion of p to a string in the assignment to s uses the Point type’s debugDescription property."
  },
  {
    "title": "==(_:_:)",
    "url": "https://developer.apple.com/documentation/musickit/musicdatarequest/error/source-swift.enum/==(_:_:)",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nEquality is the inverse of inequality. For any values a and b, a == b implies that a != b is false."
  },
  {
    "title": "!=(_:_:)",
    "url": "https://developer.apple.com/documentation/musickit/musicsubscriptionoffer/messageidentifier/!=(_:_:)",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nInequality is the inverse of equality. For any values a and b, a != b implies that a == b is false.\n\nThis is the default implementation of the not-equal-to operator (!=) for any type that conforms to Equatable."
  },
  {
    "title": "description",
    "url": "https://developer.apple.com/documentation/musickit/musicdatarequest/error/description",
    "html": "Discussion\n\nCalling this property directly is discouraged. Instead, convert an instance of any type to a string by using the String(describing:) initializer. This initializer works with any type, and uses the custom description property for types that conform to CustomStringConvertible:\n\nstruct Point: CustomStringConvertible {\n    let x: Int, y: Int\n\n\n    var description: String {\n        return \"(\\(x), \\(y))\"\n    }\n}\n\n\nlet p = Point(x: 21, y: 30)\nlet s = String(describing: p)\nprint(s)\n// Prints \"(21, 30)\"\n\n\nThe conversion of p to a string in the assignment to s uses the Point type’s description property."
  },
  {
    "title": "==(_:_:)",
    "url": "https://developer.apple.com/documentation/musickit/musicplayer/queue/entry/==(_:_:)",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nEquality is the inverse of inequality. For any values a and b, a == b implies that a != b is false."
  },
  {
    "title": "description",
    "url": "https://developer.apple.com/documentation/musickit/musicplayer/queue/entry/description",
    "html": "Discussion\n\nCalling this property directly is discouraged. Instead, convert an instance of any type to a string by using the String(describing:) initializer. This initializer works with any type, and uses the custom description property for types that conform to CustomStringConvertible:\n\nstruct Point: CustomStringConvertible {\n    let x: Int, y: Int\n\n\n    var description: String {\n        return \"(\\(x), \\(y))\"\n    }\n}\n\n\nlet p = Point(x: 21, y: 30)\nlet s = String(describing: p)\nprint(s)\n// Prints \"(21, 30)\"\n\n\nThe conversion of p to a string in the assignment to s uses the Point type’s description property."
  },
  {
    "title": "hashValue",
    "url": "https://developer.apple.com/documentation/musickit/musicplayer/queue/entry/hashvalue",
    "html": "Discussion\n\nHash values are not guaranteed to be equal across different executions of your program. Do not save hash values to use during a future execution.\n\nImportant\n\nhashValue is deprecated as a Hashable requirement. To conform to Hashable, implement the hash(into:) requirement instead. The compiler provides an implementation for hashValue for you."
  },
  {
    "title": "MusicPlayer.Queue.EntryInsertionPosition",
    "url": "https://developer.apple.com/documentation/musickit/musicplayer/queue/entryinsertionposition",
    "html": "Topics\nOperators\nstatic func == (MusicPlayer.Queue.EntryInsertionPosition, MusicPlayer.Queue.EntryInsertionPosition) -> Bool\nReturns a Boolean value indicating whether two values are equal.\nEnumeration Cases\ncase afterCurrentEntry\nA position that allows prepending entries in the playback queue, similar to the Play Next feature in the Music app.\ncase tail\nA position that allows appending entries in the playback queue, similar to the Play Later feature in the Music app.\nInstance Properties\nvar hashValue: Int\nThe hash value.\nInstance Methods\nfunc hash(into: inout Hasher)\nHashes the essential components of this value by feeding them into the given hasher.\nDefault Implementations\nEquatable Implementations\nRelationships\nConforms To\nEquatable\nHashable\nSendable"
  },
  {
    "title": "Equatable Implementations",
    "url": "https://developer.apple.com/documentation/musickit/musicplayer/queue/equatable-implementations",
    "html": "Topics\nOperators\nstatic func != (Self, Self) -> Bool\nReturns a Boolean value indicating whether two values are not equal.\nstatic func == (MusicPlayer.Queue, MusicPlayer.Queue) -> Bool\nReturns a Boolean value indicating whether two values are equal."
  },
  {
    "title": "!=(_:_:)",
    "url": "https://developer.apple.com/documentation/musickit/anymusicproperty/!=(_:_:)",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nInequality is the inverse of equality. For any values a and b, a != b implies that a == b is false.\n\nThis is the default implementation of the not-equal-to operator (!=) for any type that conforms to Equatable."
  },
  {
    "title": "CustomStringConvertible Implementations",
    "url": "https://developer.apple.com/documentation/musickit/musiclibrarysearchresponse/topresult/customstringconvertible-implementations",
    "html": "Topics\nInstance Properties\nvar description: String\nA textual representation of this instance."
  },
  {
    "title": "Encodable Implementations",
    "url": "https://developer.apple.com/documentation/musickit/musiclibrarysearchresponse/topresult/encodable-implementations",
    "html": "Topics\nInstance Methods\nfunc encode(to: any Encoder) throws\nEncodes this value into the given encoder."
  },
  {
    "title": "Decodable Implementations",
    "url": "https://developer.apple.com/documentation/musickit/musiclibrarysearchresponse/topresult/decodable-implementations",
    "html": "Topics\nInitializers\ninit(from: any Decoder) throws\nCreates a new instance by decoding from the given decoder."
  },
  {
    "title": "CustomDebugStringConvertible Implementations",
    "url": "https://developer.apple.com/documentation/musickit/musiclibrarysearchresponse/topresult/customdebugstringconvertible-implementations",
    "html": "Topics\nInstance Properties\nvar debugDescription: String\nA textual representation of this instance, suitable for debugging."
  },
  {
    "title": "MusicLibraryRequestable Implementations",
    "url": "https://developer.apple.com/documentation/musickit/playlist/entry/musiclibraryrequestable-implementations",
    "html": "Topics\nType Aliases\ntypealias LibraryFilter\nThe associated type that contains the playlist entry properties your app uses for a library request.\ntypealias LibrarySortProperties\nThe associated type that contains the set of playlist entry properties your app uses to sort results for a library request."
  },
  {
    "title": "Equatable Implementations",
    "url": "https://developer.apple.com/documentation/musickit/playlist/entry/equatable-implementations",
    "html": "Topics\nOperators\nstatic func != (Self, Self) -> Bool\nReturns a Boolean value indicating whether two values are not equal."
  },
  {
    "title": "Decodable Implementations",
    "url": "https://developer.apple.com/documentation/musickit/playlist/entry/decodable-implementations",
    "html": "Topics\nInitializers\ninit(from: any Decoder) throws\nCreates a new instance by decoding from the given decoder."
  },
  {
    "title": "MusicItem Implementations",
    "url": "https://developer.apple.com/documentation/musickit/playlist/entry/musicitem-implementations",
    "html": "Topics\nInstance Methods\nfunc with([PartialMusicAsyncProperty<Self>]) async throws -> Self\nLoads a new instance of the music item that includes the specified properties.\nAvailable when Self conforms to MusicPropertyContainer and Decodable.\nfunc with([PartialMusicAsyncProperty<Self>], preferredSource: MusicPropertySource) async throws -> Self\nLoads a new instance of the music item that includes the specified properties.\nAvailable when Self conforms to MusicPropertyContainer and Decodable."
  },
  {
    "title": "==(_:_:)",
    "url": "https://developer.apple.com/documentation/musickit/playlist/entry/==(_:_:)",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nEquality is the inverse of inequality. For any values a and b, a == b implies that a != b is false."
  },
  {
    "title": "BidirectionalCollection Implementations",
    "url": "https://developer.apple.com/documentation/musickit/applicationmusicplayer/queue-swift.class/entries-swift.struct/bidirectionalcollection-implementations",
    "html": "Topics\nInstance Properties\nvar last: Self.Element?\nThe last element of the collection.\nInstance Methods\nfunc difference<C>(from: C) -> CollectionDifference<Self.Element>\nReturns the difference needed to produce this collection’s ordered elements from the given collection.\nAvailable when Element conforms to Equatable.\nfunc difference<C>(from: C, by: (C.Element, Self.Element) -> Bool) -> CollectionDifference<Self.Element>\nReturns the difference needed to produce this collection’s ordered elements from the given collection, using the given predicate as an equivalence test.\nfunc dropLast(Int) -> Self.SubSequence\nReturns a subsequence containing all but the specified number of final elements.\nfunc last(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?\nReturns the last element of the sequence that satisfies the given predicate.\nfunc lastIndex(of: Self.Element) -> Self.Index?\nReturns the last index where the specified value appears in the collection.\nAvailable when Element conforms to Equatable.\nfunc lastIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?\nReturns the index of the last element in the collection that matches the given predicate.\nfunc reversed() -> ReversedCollection<Self>\nReturns a view presenting the elements of the collection in reverse order.\nfunc suffix(Int) -> Self.SubSequence\nReturns a subsequence, up to the given maximum length, containing the final elements of the collection."
  },
  {
    "title": "ApplicationMusicPlayer.Queue.Entries.SubSequence",
    "url": "https://developer.apple.com/documentation/musickit/applicationmusicplayer/queue-swift.class/entries-swift.struct/subsequence",
    "html": "Discussion\n\nThe default subsequence type for collections that don’t define their own is Slice."
  },
  {
    "title": "Collection Implementations",
    "url": "https://developer.apple.com/documentation/musickit/applicationmusicplayer/queue-swift.class/entries-swift.struct/collection-implementations",
    "html": "Topics\nInstance Properties\nvar count: Int\nThe number of elements in the collection.\nvar first: Self.Element?\nThe first element of the collection.\nvar isEmpty: Bool\nA Boolean value indicating whether the collection is empty.\nvar underestimatedCount: Int\nA value less than or equal to the number of elements in the collection.\nInstance Methods\nfunc drop(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence\nReturns a subsequence by skipping elements while predicate returns true and returning the remaining elements.\nfunc dropFirst(Int) -> Self.SubSequence\nReturns a subsequence containing all but the given number of initial elements.\nfunc firstIndex(of: Self.Element) -> Self.Index?\nReturns the first index where the specified value appears in the collection.\nAvailable when Element conforms to Equatable.\nfunc firstIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?\nReturns the first index in which an element of the collection satisfies the given predicate.\nfunc firstRange<C>(of: C) -> Range<Self.Index>?\nFinds and returns the range of the first occurrence of a given collection within this collection.\nAvailable when Element conforms to Equatable.\nfunc formIndex(inout Self.Index, offsetBy: Int)\nOffsets the given index by the specified distance.\nfunc formIndex(inout Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Bool\nOffsets the given index by the specified distance, or so that it equals the given limiting index.\nfunc index(of: Self.Element) -> Self.Index?\nReturns the first index where the specified value appears in the collection.\nAvailable when Element conforms to Equatable.\nfunc map<T>((Self.Element) throws -> T) rethrows -> [T]\nReturns an array containing the results of mapping the given closure over the sequence’s elements.\nfunc prefix(Int) -> Self.SubSequence\nReturns a subsequence, up to the specified maximum length, containing the initial elements of the collection.\nfunc prefix(through: Self.Index) -> Self.SubSequence\nReturns a subsequence from the start of the collection through the specified position.\nfunc prefix(upTo: Self.Index) -> Self.SubSequence\nReturns a subsequence from the start of the collection up to, but not including, the specified position.\nfunc prefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence\nReturns a subsequence containing the initial elements until predicate returns false and skipping the remaining elements.\nfunc randomElement() -> Self.Element?\nReturns a random element of the collection.\nfunc randomElement<T>(using: inout T) -> Self.Element?\nReturns a random element of the collection, using the given generator as a source for randomness.\nfunc ranges<C>(of: C) -> [Range<Self.Index>]\nFinds and returns the ranges of the all occurrences of a given sequence within the collection.\nAvailable when Element conforms to Equatable.\nfunc split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [Self.SubSequence]\nReturns the longest possible subsequences of the collection, in order, that don’t contain elements satisfying the given predicate.\nfunc split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [Self.SubSequence]\nReturns the longest possible subsequences of the collection, in order, around elements equal to the given element.\nAvailable when Element conforms to Equatable.\nfunc suffix(from: Self.Index) -> Self.SubSequence\nReturns a subsequence from the specified position to the end of the collection.\nfunc trimmingPrefix<Prefix>(Prefix) -> Self.SubSequence\nReturns a new collection of the same type by removing initial elements that satisfy the given predicate from the start.\nAvailable when Element conforms to Equatable.\nfunc trimmingPrefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence\nSubscripts\nsubscript((UnboundedRange_) -> ()) -> Self.SubSequence\nsubscript<R>(R) -> Self.SubSequence\nAccesses the contiguous subrange of the collection’s elements specified by a range expression."
  },
  {
    "title": "RangeReplaceableCollection Implementations",
    "url": "https://developer.apple.com/documentation/musickit/applicationmusicplayer/queue-swift.class/entries-swift.struct/rangereplaceablecollection-implementations",
    "html": "Topics\nOperators\nstatic func + <Other>(Other, Self) -> Self\nCreates a new collection by concatenating the elements of a sequence and a collection.\nstatic func + <Other>(Self, Other) -> Self\nCreates a new collection by concatenating the elements of a collection and a sequence.\nstatic func + <Other>(Self, Other) -> Self\nCreates a new collection by concatenating the elements of two collections.\nstatic func += <Other>(inout Self, Other)\nAppends the elements of a sequence to a range-replaceable collection.\nInitializers\ninit<S>(S)\nCreates a new instance of a collection containing the elements of a sequence.\ninit(repeating: Self.Element, count: Int)\nCreates a new collection containing the specified number of a single, repeated value.\nInstance Methods\nfunc append(Self.Element)\nAdds an element to the end of the collection.\nfunc append<S>(contentsOf: S)\nAdds the elements of a sequence or collection to the end of this collection.\nfunc applying(CollectionDifference<Self.Element>) -> Self?\nApplies the given difference to this collection.\nfunc filter((Self.Element) throws -> Bool) rethrows -> Self\nReturns a new collection of the same type containing, in order, the elements of the original collection that satisfy the given predicate.\nfunc insert(Self.Element, at: Self.Index)\nInserts a new element into the collection at the specified position.\nfunc insert<C>(contentsOf: C, at: Self.Index)\nInserts the elements of a sequence into the collection at the specified position.\nfunc popLast() -> Self.Element?\nRemoves and returns the last element of the collection.\nAvailable when Self conforms to BidirectionalCollection.\nfunc remove(at: Self.Index) -> Self.Element\nRemoves and returns the element at the specified position.\nfunc removeAll(keepingCapacity: Bool)\nRemoves all elements from the collection.\nfunc removeAll(where: (Self.Element) throws -> Bool) rethrows\nRemoves all the elements that satisfy the given predicate.\nAvailable when Self conforms to MutableCollection.\nfunc removeAll(where: (Self.Element) throws -> Bool) rethrows\nRemoves all the elements that satisfy the given predicate.\nfunc removeFirst() -> Self.Element\nRemoves and returns the first element of the collection.\nfunc removeFirst(Int)\nRemoves the specified number of elements from the beginning of the collection.\nfunc removeLast() -> Self.Element\nRemoves and returns the last element of the collection.\nAvailable when Self conforms to BidirectionalCollection.\nfunc removeLast(Int)\nRemoves the specified number of elements from the end of the collection.\nAvailable when Self conforms to BidirectionalCollection.\nfunc removeSubrange(Range<Self.Index>)\nRemoves the elements in the specified subrange from the collection.\nfunc removeSubrange<R>(R)\nRemoves the elements in the specified subrange from the collection.\nfunc replace<C, Replacement>(C, with: Replacement, maxReplacements: Int)\nReplaces all occurrences of a target sequence with a given collection\nAvailable when Element conforms to Equatable.\nfunc replaceSubrange<C>(Range<Self.Index>, with: C)\nReplaces the specified subrange of elements with the given collection.\nDeprecated\nfunc replaceSubrange<C, R>(R, with: C)\nReplaces the specified subrange of elements with the given collection.\nfunc replacing<C, Replacement>(C, with: Replacement, maxReplacements: Int) -> Self\nReturns a new collection in which all occurrences of a target sequence are replaced by another collection.\nAvailable when Element conforms to Equatable.\nfunc replacing<C, Replacement>(C, with: Replacement, subrange: Range<Self.Index>, maxReplacements: Int) -> Self\nReturns a new collection in which all occurrences of a target sequence are replaced by another collection.\nAvailable when Element conforms to Equatable.\nfunc reserveCapacity(Int)\nPrepares the collection to store the specified number of elements, when doing so is appropriate for the underlying type.\nfunc trimPrefix<Prefix>(Prefix)\nRemoves the initial elements that satisfy the given predicate from the start of the sequence.\nAvailable when Element conforms to Equatable.\nfunc trimPrefix(while: (Self.Element) throws -> Bool) rethrows"
  },
  {
    "title": "description",
    "url": "https://developer.apple.com/documentation/musickit/musicsubscriptionoffer/action/description",
    "html": "Discussion\n\nCalling this property directly is discouraged. Instead, convert an instance of any type to a string by using the String(describing:) initializer. This initializer works with any type, and uses the custom description property for types that conform to CustomStringConvertible:\n\nstruct Point: CustomStringConvertible {\n    let x: Int, y: Int\n\n\n    var description: String {\n        return \"(\\(x), \\(y))\"\n    }\n}\n\n\nlet p = Point(x: 21, y: 30)\nlet s = String(describing: p)\nprint(s)\n// Prints \"(21, 30)\"\n\n\nThe conversion of p to a string in the assignment to s uses the Point type’s description property."
  },
  {
    "title": "description",
    "url": "https://developer.apple.com/documentation/musickit/musicsubscriptionoffer/options/description",
    "html": "Discussion\n\nCalling this property directly is discouraged. Instead, convert an instance of any type to a string by using the String(describing:) initializer. This initializer works with any type, and uses the custom description property for types that conform to CustomStringConvertible:\n\nstruct Point: CustomStringConvertible {\n    let x: Int, y: Int\n\n\n    var description: String {\n        return \"(\\(x), \\(y))\"\n    }\n}\n\n\nlet p = Point(x: 21, y: 30)\nlet s = String(describing: p)\nprint(s)\n// Prints \"(21, 30)\"\n\n\nThe conversion of p to a string in the assignment to s uses the Point type’s description property."
  },
  {
    "title": "!=(_:_:)",
    "url": "https://developer.apple.com/documentation/musickit/musicsubscriptionoffer/options/!=(_:_:)",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nInequality is the inverse of equality. For any values a and b, a != b implies that a == b is false.\n\nThis is the default implementation of the not-equal-to operator (!=) for any type that conforms to Equatable."
  },
  {
    "title": "==(_:_:)",
    "url": "https://developer.apple.com/documentation/musickit/musicsubscriptionoffer/options/==(_:_:)",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nEquality is the inverse of inequality. For any values a and b, a == b implies that a != b is false."
  },
  {
    "title": "!=(_:_:)",
    "url": "https://developer.apple.com/documentation/musickit/musicsubscriptionoffer/action/!=(_:_:)",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nInequality is the inverse of equality. For any values a and b, a != b implies that a == b is false.\n\nThis is the default implementation of the not-equal-to operator (!=) for any type that conforms to Equatable."
  },
  {
    "title": "hashValue",
    "url": "https://developer.apple.com/documentation/musickit/applicationmusicplayer/queue-swift.class/entries-swift.struct/hashvalue",
    "html": "Discussion\n\nHash values are not guaranteed to be equal across different executions of your program. Do not save hash values to use during a future execution.\n\nImportant\n\nhashValue is deprecated as a Hashable requirement. To conform to Hashable, implement the hash(into:) requirement instead. The compiler provides an implementation for hashValue for you."
  },
  {
    "title": "endIndex",
    "url": "https://developer.apple.com/documentation/musickit/applicationmusicplayer/queue-swift.class/entries-swift.struct/endindex",
    "html": "Discussion\n\nWhen you need a range that includes the last element of a collection, use the half-open range operator (..<) with endIndex. The ..< operator creates a range that doesn’t include the upper bound, so it’s always safe to use with endIndex. For example:\n\nlet numbers = [10, 20, 30, 40, 50]\nif let index = numbers.firstIndex(of: 30) {\n    print(numbers[index ..< numbers.endIndex])\n}\n// Prints \"[30, 40, 50]\"\n\n\nIf the collection is empty, endIndex is equal to startIndex."
  },
  {
    "title": "indices",
    "url": "https://developer.apple.com/documentation/musickit/applicationmusicplayer/queue-swift.class/entries-swift.struct/indices-swift.property",
    "html": "Discussion\n\nA collection’s indices property can hold a strong reference to the collection itself, causing the collection to be nonuniquely referenced. If you mutate the collection while iterating over its indices, a strong reference can result in an unexpected copy of the collection. To avoid the unexpected copy, use the index(after:) method starting with startIndex to produce indices instead.\n\nvar c = MyFancyCollection([10, 20, 30, 40, 50])\nvar i = c.startIndex\nwhile i != c.endIndex {\n    c[i] /= 5\n    i = c.index(after: i)\n}\n// c == MyFancyCollection([2, 4, 6, 8, 10])\n"
  },
  {
    "title": "startIndex",
    "url": "https://developer.apple.com/documentation/musickit/applicationmusicplayer/queue-swift.class/entries-swift.struct/startindex",
    "html": "Discussion\n\nIf the collection is empty, startIndex is equal to endIndex."
  },
  {
    "title": "formIndex(before:)",
    "url": "https://developer.apple.com/documentation/musickit/applicationmusicplayer/queue-swift.class/entries-swift.struct/formindex(before:)",
    "html": "Parameters\ni\n\nA valid index of the collection. i must be greater than startIndex."
  },
  {
    "title": "formIndex(after:)",
    "url": "https://developer.apple.com/documentation/musickit/applicationmusicplayer/queue-swift.class/entries-swift.struct/formindex(after:)",
    "html": "Parameters\ni\n\nA valid index of the collection. i must be less than endIndex."
  },
  {
    "title": "replaceSubrange(_:with:)",
    "url": "https://developer.apple.com/documentation/musickit/applicationmusicplayer/queue-swift.class/entries-swift.struct/replacesubrange(_:with:)-6z6ye",
    "html": "Parameters\nsubrange\n\nThe subrange of the collection to replace. The bounds of the range must be valid indices of the collection.\n\nnewElements\n\nThe new elements to add to the collection.\n\nDiscussion\n\nThis method has the effect of removing the specified range of elements from the collection and inserting the new elements at the same location. The number of new elements need not match the number of elements being removed.\n\nIn this example, three elements in the middle of an array of integers are replaced by the five elements of a Repeated<Int> instance.\n\n var nums = [10, 20, 30, 40, 50]\n nums.replaceSubrange(1...3, with: repeatElement(1, count: 5))\n print(nums)\n // Prints \"[10, 1, 1, 1, 1, 1, 50]\"\n\n\nIf you pass a zero-length range as the subrange parameter, this method inserts the elements of newElements at subrange.startIndex. Calling the insert(contentsOf:at:) method instead is preferred.\n\nLikewise, if you pass a zero-length collection as the newElements parameter, this method removes the elements in the given subrange without replacement. Calling the removeSubrange(_:) method instead is preferred.\n\nCalling this method may invalidate any existing indices for use with this collection.\n\nComplexity\n\nO(n + m), where n is length of this collection and m is the length of newElements. If the call to this method simply appends the contents of newElements to the collection, this method is equivalent to append(contentsOf:)."
  },
  {
    "title": "index(_:offsetBy:)",
    "url": "https://developer.apple.com/documentation/musickit/applicationmusicplayer/queue-swift.class/entries-swift.struct/index(_:offsetby:)",
    "html": "Parameters\ni\n\nA valid index of the collection.\n\ndistance\n\nThe distance to offset i. distance must not be negative unless the collection conforms to the BidirectionalCollection protocol.\n\nReturn Value\n\nAn index offset by distance from the index i. If distance is positive, this is the same value as the result of distance calls to index(after:). If distance is negative, this is the same value as the result of abs(distance) calls to index(before:).\n\nDiscussion\n\nThe following example obtains an index advanced four positions from a string’s starting index and then prints the character at that position.\n\nlet s = \"Swift\"\nlet i = s.index(s.startIndex, offsetBy: 4)\nprint(s[i])\n// Prints \"t\"\n\n\nThe value passed as distance must not offset i beyond the bounds of the collection.\n\nComplexity\n\nO(1) if the collection conforms to RandomAccessCollection; otherwise, O(k), where k is the absolute value of distance."
  },
  {
    "title": "index(before:)",
    "url": "https://developer.apple.com/documentation/musickit/applicationmusicplayer/queue-swift.class/entries-swift.struct/index(before:)",
    "html": "Parameters\ni\n\nA valid index of the collection. i must be greater than startIndex.\n\nReturn Value\n\nThe index value immediately before i."
  },
  {
    "title": "subscript(_:)",
    "url": "https://developer.apple.com/documentation/musickit/applicationmusicplayer/queue-swift.class/entries-swift.struct/subscript(_:)-1doxb",
    "html": "Parameters\nbounds\n\nA range of the collection’s indices. The bounds of the range must be valid indices of the collection.\n\nOverview\n\nFor example, using a PartialRangeFrom range expression with an array accesses the subrange from the start of the range expression until the end of the array.\n\nlet streets = [\"Adams\", \"Bryant\", \"Channing\", \"Douglas\", \"Evarts\"]\nlet streetsSlice = streets[2..<5]\nprint(streetsSlice)\n// [\"Channing\", \"Douglas\", \"Evarts\"]\n\n\nThe accessed slice uses the same indices for the same elements as the original collection. This example searches streetsSlice for one of the strings in the slice, and then uses that index in the original array.\n\nlet index = streetsSlice.firstIndex(of: \"Evarts\")!    // 4\nprint(streets[index])\n// \"Evarts\"\n\n\nAlways use the slice’s startIndex property instead of assuming that its indices start at a particular value. Attempting to access an element by using an index outside the bounds of the slice may result in a runtime error, even if that index is valid for the original collection.\n\nprint(streetsSlice.startIndex)\n// 2\nprint(streetsSlice[2])\n// \"Channing\"\n\n\nprint(streetsSlice[0])\n// error: Index out of bounds\n\n\nComplexity\n\nO(1)"
  },
  {
    "title": "!=(_:_:)",
    "url": "https://developer.apple.com/documentation/musickit/musicplayer/repeatmode/!=(_:_:)",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nInequality is the inverse of equality. For any values a and b, a != b implies that a == b is false.\n\nThis is the default implementation of the not-equal-to operator (!=) for any type that conforms to Equatable."
  },
  {
    "title": "!=(_:_:)",
    "url": "https://developer.apple.com/documentation/musickit/musicplayer/playbackstatus/!=(_:_:)",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nInequality is the inverse of equality. For any values a and b, a != b implies that a == b is false.\n\nThis is the default implementation of the not-equal-to operator (!=) for any type that conforms to Equatable."
  },
  {
    "title": "description",
    "url": "https://developer.apple.com/documentation/musickit/musicsubscriptionoffer/messageidentifier/description",
    "html": "Discussion\n\nCalling this property directly is discouraged. Instead, convert an instance of any type to a string by using the String(describing:) initializer. This initializer works with any type, and uses the custom description property for types that conform to CustomStringConvertible:\n\nstruct Point: CustomStringConvertible {\n    let x: Int, y: Int\n\n\n    var description: String {\n        return \"(\\(x), \\(y))\"\n    }\n}\n\n\nlet p = Point(x: 21, y: 30)\nlet s = String(describing: p)\nprint(s)\n// Prints \"(21, 30)\"\n\n\nThe conversion of p to a string in the assignment to s uses the Point type’s description property."
  },
  {
    "title": "description",
    "url": "https://developer.apple.com/documentation/musickit/musiccatalogsearchresponse/topresult/description",
    "html": "Discussion\n\nCalling this property directly is discouraged. Instead, convert an instance of any type to a string by using the String(describing:) initializer. This initializer works with any type, and uses the custom description property for types that conform to CustomStringConvertible:\n\nstruct Point: CustomStringConvertible {\n    let x: Int, y: Int\n\n\n    var description: String {\n        return \"(\\(x), \\(y))\"\n    }\n}\n\n\nlet p = Point(x: 21, y: 30)\nlet s = String(describing: p)\nprint(s)\n// Prints \"(21, 30)\"\n\n\nThe conversion of p to a string in the assignment to s uses the Point type’s description property."
  },
  {
    "title": "init(from:)",
    "url": "https://developer.apple.com/documentation/musickit/musiccatalogsearchresponse/topresult/init(from:)",
    "html": "Parameters\ndecoder\n\nThe decoder to read data from.\n\nDiscussion\n\nThis initializer throws an error if reading from the decoder fails, or if the data read is corrupted or otherwise invalid."
  },
  {
    "title": "with(_:)",
    "url": "https://developer.apple.com/documentation/musickit/musicplayer/queue/entry/item-swift.enum/with(_:)",
    "html": "Discussion\n\nThis asynchronous method fetches a more complete representation of the receiver from Apple Music API over the network."
  },
  {
    "title": "!=(_:_:)",
    "url": "https://developer.apple.com/documentation/musickit/musicplayer/queue/entry/!=(_:_:)",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nInequality is the inverse of equality. For any values a and b, a != b implies that a == b is false.\n\nThis is the default implementation of the not-equal-to operator (!=) for any type that conforms to Equatable."
  },
  {
    "title": "hashValue",
    "url": "https://developer.apple.com/documentation/musickit/musiclibrarysearchresponse/topresult/hashvalue",
    "html": "Discussion\n\nHash values are not guaranteed to be equal across different executions of your program. Do not save hash values to use during a future execution.\n\nImportant\n\nhashValue is deprecated as a Hashable requirement. To conform to Hashable, implement the hash(into:) requirement instead. The compiler provides an implementation for hashValue for you."
  },
  {
    "title": "==(_:_:)",
    "url": "https://developer.apple.com/documentation/musickit/applicationmusicplayer/queue-swift.class/entries-swift.struct/==(_:_:)",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nEquality is the inverse of inequality. For any values a and b, a == b implies that a != b is false."
  },
  {
    "title": "Hashable Implementations",
    "url": "https://developer.apple.com/documentation/musickit/musicplayer/queue/hashable-implementations",
    "html": "Topics\nInstance Properties\nvar hashValue: Int\nThe hash value.\nInstance Methods\nfunc hash(into: inout Hasher)\nHashes the essential components of this value by feeding them into the given hasher."
  },
  {
    "title": "!=(_:_:)",
    "url": "https://developer.apple.com/documentation/musickit/musiccatalogchartsresponse/!=(_:_:)",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nInequality is the inverse of equality. For any values a and b, a != b implies that a == b is false.\n\nThis is the default implementation of the not-equal-to operator (!=) for any type that conforms to Equatable."
  },
  {
    "title": "!=(_:_:)",
    "url": "https://developer.apple.com/documentation/musickit/musiclibrarysearchresponse/!=(_:_:)",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nInequality is the inverse of equality. For any values a and b, a != b implies that a == b is false.\n\nThis is the default implementation of the not-equal-to operator (!=) for any type that conforms to Equatable."
  },
  {
    "title": "description",
    "url": "https://developer.apple.com/documentation/musickit/musiclibrarysearchresponse/description",
    "html": "Discussion\n\nCalling this property directly is discouraged. Instead, convert an instance of any type to a string by using the String(describing:) initializer. This initializer works with any type, and uses the custom description property for types that conform to CustomStringConvertible:\n\nstruct Point: CustomStringConvertible {\n    let x: Int, y: Int\n\n\n    var description: String {\n        return \"(\\(x), \\(y))\"\n    }\n}\n\n\nlet p = Point(x: 21, y: 30)\nlet s = String(describing: p)\nprint(s)\n// Prints \"(21, 30)\"\n\n\nThe conversion of p to a string in the assignment to s uses the Point type’s description property."
  },
  {
    "title": "Sequence Implementations",
    "url": "https://developer.apple.com/documentation/musickit/applicationmusicplayer/queue-swift.class/entries-swift.struct/sequence-implementations",
    "html": "Topics\nInstance Properties\nvar lazy: LazySequence<Self>\nA sequence containing the same elements as this sequence, but on which some operations, such as map and filter, are implemented lazily.\nvar publisher: Publishers.Sequence<Self, Never>\nInstance Methods\nfunc allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether every element of a sequence satisfies a given predicate.\nfunc compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]\nReturns an array containing the non-nil results of calling the given transformation with each element of this sequence.\nfunc compare<Comparator>(Comparator.Compared, Comparator.Compared) -> ComparisonResult\nIf lhs is ordered before rhs in the ordering described by the given sequence of SortComparators\nfunc contains(Self.Element) -> Bool\nReturns a Boolean value indicating whether the sequence contains the given element.\nAvailable when Element conforms to Equatable.\nfunc contains(where: (Self.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether the sequence contains an element that satisfies the given predicate.\nfunc elementsEqual<OtherSequence>(OtherSequence) -> Bool\nReturns a Boolean value indicating whether this sequence and another sequence contain the same elements in the same order.\nAvailable when Element conforms to Equatable.\nfunc elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether this sequence and another sequence contain equivalent elements in the same order, using the given predicate as the equivalence test.\nfunc enumerated() -> EnumeratedSequence<Self>\nReturns a sequence of pairs (n, x), where n represents a consecutive integer starting at zero and x represents an element of the sequence.\nfunc first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?\nReturns the first element of the sequence that satisfies the given predicate.\nfunc flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]\nfunc flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]\nReturns an array containing the concatenated results of calling the given transformation with each element of this sequence.\nfunc forEach((Self.Element) throws -> Void) rethrows\nCalls the given closure on each element in the sequence in the same order as a for-in loop.\nfunc formatted<S>(S) -> S.FormatOutput\nfunc lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether the sequence precedes another sequence in a lexicographical (dictionary) ordering, using the given predicate to compare elements.\nfunc map<T>((Self.Element) throws -> T) rethrows -> [T]\nReturns an array containing the results of mapping the given closure over the sequence’s elements.\nfunc max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?\nReturns the maximum element in the sequence, using the given predicate as the comparison between elements.\nfunc min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?\nReturns the minimum element in the sequence, using the given predicate as the comparison between elements.\nfunc reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result\nReturns the result of combining the elements of the sequence using the given closure.\nfunc reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result\nReturns the result of combining the elements of the sequence using the given closure.\nfunc shuffled() -> [Self.Element]\nReturns the elements of the sequence, shuffled.\nfunc shuffled<T>(using: inout T) -> [Self.Element]\nReturns the elements of the sequence, shuffled using the given generator as a source for randomness.\nfunc sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]\nReturns the elements of the sequence, sorted using the given predicate as the comparison between elements.\nfunc sorted<S, Comparator>(using: S) -> [Self.Element]\nReturns the elements of the sequence, sorted using the given array of SortComparators to compare elements.\nfunc sorted<Comparator>(using: Comparator) -> [Self.Element]\nReturns the elements of the sequence, sorted using the given comparator to compare elements.\nfunc starts<PossiblePrefix>(with: PossiblePrefix) -> Bool\nReturns a Boolean value indicating whether the initial elements of the sequence are the same as the elements in another sequence.\nAvailable when Element conforms to Equatable.\nfunc starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether the initial elements of the sequence are equivalent to the elements in another sequence, using the given predicate as the equivalence test.\nfunc withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?\nExecutes a closure on the sequence’s contiguous storage."
  },
  {
    "title": "Equatable Implementations",
    "url": "https://developer.apple.com/documentation/musickit/applicationmusicplayer/queue-swift.class/entries-swift.struct/equatable-implementations",
    "html": "Topics\nOperators\nstatic func != (Self, Self) -> Bool\nReturns a Boolean value indicating whether two values are not equal."
  },
  {
    "title": "distance(from:to:)",
    "url": "https://developer.apple.com/documentation/musickit/applicationmusicplayer/queue-swift.class/entries-swift.struct/distance(from:to:)",
    "html": "Parameters\nstart\n\nA valid index of the collection.\n\nend\n\nAnother valid index of the collection. If end is equal to start, the result is zero.\n\nReturn Value\n\nThe distance between start and end. The result can be negative only if the collection conforms to the BidirectionalCollection protocol.\n\nDiscussion\n\nUnless the collection conforms to the BidirectionalCollection protocol, start must be less than or equal to end.\n\nComplexity\n\nO(1) if the collection conforms to RandomAccessCollection; otherwise, O(k), where k is the resulting distance."
  },
  {
    "title": "index(_:offsetBy:limitedBy:)",
    "url": "https://developer.apple.com/documentation/musickit/applicationmusicplayer/queue-swift.class/entries-swift.struct/index(_:offsetby:limitedby:)",
    "html": "Parameters\ni\n\nA valid index of the collection.\n\ndistance\n\nThe distance to offset i. distance must not be negative unless the collection conforms to the BidirectionalCollection protocol.\n\nlimit\n\nA valid index of the collection to use as a limit. If distance > 0, a limit that is less than i has no effect. Likewise, if distance < 0, a limit that is greater than i has no effect.\n\nReturn Value\n\nAn index offset by distance from the index i, unless that index would be beyond limit in the direction of movement. In that case, the method returns nil.\n\nDiscussion\n\nThe following example obtains an index advanced four positions from a string’s starting index and then prints the character at that position. The operation doesn’t require going beyond the limiting s.endIndex value, so it succeeds.\n\nlet s = \"Swift\"\nif let i = s.index(s.startIndex, offsetBy: 4, limitedBy: s.endIndex) {\n    print(s[i])\n}\n// Prints \"t\"\n\n\nThe next example attempts to retrieve an index six positions from s.startIndex but fails, because that distance is beyond the index passed as limit.\n\nlet j = s.index(s.startIndex, offsetBy: 6, limitedBy: s.endIndex)\nprint(j)\n// Prints \"nil\"\n\n\nThe value passed as distance must not offset i beyond the bounds of the collection, unless the index passed as limit prevents offsetting beyond those bounds.\n\nComplexity\n\nO(1) if the collection conforms to RandomAccessCollection; otherwise, O(k), where k is the absolute value of distance."
  },
  {
    "title": "index(after:)",
    "url": "https://developer.apple.com/documentation/musickit/applicationmusicplayer/queue-swift.class/entries-swift.struct/index(after:)",
    "html": "Parameters\ni\n\nA valid index of the collection. i must be less than endIndex.\n\nReturn Value\n\nThe index value immediately after i.\n\nDiscussion\n\nThe successor of an index must be well defined. For an index i into a collection c, calling c.index(after: i) returns the same index every time."
  },
  {
    "title": "ApplicationMusicPlayer.Queue.Entries.Index",
    "url": "https://developer.apple.com/documentation/musickit/applicationmusicplayer/queue-swift.class/entries-swift.struct/index",
    "html": "Discussion\n\nValid indices consist of the position of every element and a “past the end” position that’s not valid for use as a subscript argument."
  },
  {
    "title": "subscript(_:)",
    "url": "https://developer.apple.com/documentation/musickit/applicationmusicplayer/queue-swift.class/entries-swift.struct/subscript(_:)-6mwyn",
    "html": "Parameters\nposition\n\nThe position of the element to access. position must be a valid index of the collection that is not equal to the endIndex property.\n\nOverview\n\nThe following example accesses an element of an array through its subscript to print its value:\n\nvar streets = [\"Adams\", \"Bryant\", \"Channing\", \"Douglas\", \"Evarts\"]\nprint(streets[1])\n// Prints \"Bryant\"\n\n\nYou can subscript a collection with any valid index other than the collection’s end index. The end index refers to the position one past the last element of a collection, so it doesn’t correspond with an element.\n\nComplexity\n\nO(1)"
  },
  {
    "title": "CustomStringConvertible Implementations",
    "url": "https://developer.apple.com/documentation/musickit/musicdatarequest/error/source-swift.enum/customstringconvertible-implementations",
    "html": "Topics\nInstance Properties\nvar description: String\nA textual representation of this instance."
  },
  {
    "title": "Equatable Implementations",
    "url": "https://developer.apple.com/documentation/musickit/musicdatarequest/error/source-swift.enum/equatable-implementations",
    "html": "Topics\nOperators\nstatic func != (Self, Self) -> Bool\nReturns a Boolean value indicating whether two values are not equal."
  },
  {
    "title": "hash(into:)",
    "url": "https://developer.apple.com/documentation/musickit/musiclibrarysearchresponse/topresult/hash(into:)",
    "html": "Parameters\nhasher\n\nThe hasher to use when combining the components of this instance.\n\nDiscussion\n\nImplement this method to conform to the Hashable protocol. The components used for hashing must be the same as the components compared in your type’s == operator implementation. Call hasher.combine(_:) with each of these components.\n\nImportant\n\nIn your implementation of hash(into:), don’t call finalize() on the hasher instance provided, or replace it with a different instance. Doing so may become a compile-time error in the future."
  },
  {
    "title": "!=(_:_:)",
    "url": "https://developer.apple.com/documentation/musickit/musicpropertysource/!=(_:_:)",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nInequality is the inverse of equality. For any values a and b, a != b implies that a == b is false.\n\nThis is the default implementation of the not-equal-to operator (!=) for any type that conforms to Equatable."
  },
  {
    "title": "hashValue",
    "url": "https://developer.apple.com/documentation/musickit/musicsubscriptionoffer/options/hashvalue",
    "html": "Discussion\n\nHash values are not guaranteed to be equal across different executions of your program. Do not save hash values to use during a future execution.\n\nImportant\n\nhashValue is deprecated as a Hashable requirement. To conform to Hashable, implement the hash(into:) requirement instead. The compiler provides an implementation for hashValue for you."
  },
  {
    "title": "!=(_:_:)",
    "url": "https://developer.apple.com/documentation/musickit/musicsubscription/error/!=(_:_:)",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nInequality is the inverse of equality. For any values a and b, a != b implies that a == b is false.\n\nThis is the default implementation of the not-equal-to operator (!=) for any type that conforms to Equatable."
  },
  {
    "title": "hash(into:)",
    "url": "https://developer.apple.com/documentation/musickit/musicsubscriptionoffer/options/hash(into:)",
    "html": "Parameters\nhasher\n\nThe hasher to use when combining the components of this instance.\n\nDiscussion\n\nImplement this method to conform to the Hashable protocol. The components used for hashing must be the same as the components compared in your type’s == operator implementation. Call hasher.combine(_:) with each of these components.\n\nImportant\n\nIn your implementation of hash(into:), don’t call finalize() on the hasher instance provided, or replace it with a different instance. Doing so may become a compile-time error in the future."
  },
  {
    "title": "description",
    "url": "https://developer.apple.com/documentation/musickit/musicsubscription/error/description",
    "html": "Discussion\n\nCalling this property directly is discouraged. Instead, convert an instance of any type to a string by using the String(describing:) initializer. This initializer works with any type, and uses the custom description property for types that conform to CustomStringConvertible:\n\nstruct Point: CustomStringConvertible {\n    let x: Int, y: Int\n\n\n    var description: String {\n        return \"(\\(x), \\(y))\"\n    }\n}\n\n\nlet p = Point(x: 21, y: 30)\nlet s = String(describing: p)\nprint(s)\n// Prints \"(21, 30)\"\n\n\nThe conversion of p to a string in the assignment to s uses the Point type’s description property."
  },
  {
    "title": "debugDescription",
    "url": "https://developer.apple.com/documentation/musickit/musiclibrarysearchresponse/debugdescription",
    "html": "Discussion\n\nCalling this property directly is discouraged. Instead, convert an instance of any type to a string by using the String(reflecting:) initializer. This initializer works with any type, and uses the custom debugDescription property for types that conform to CustomDebugStringConvertible:\n\nstruct Point: CustomDebugStringConvertible {\n    let x: Int, y: Int\n\n\n    var debugDescription: String {\n        return \"(\\(x), \\(y))\"\n    }\n}\n\n\nlet p = Point(x: 21, y: 30)\nlet s = String(reflecting: p)\nprint(s)\n// Prints \"(21, 30)\"\n\n\nThe conversion of p to a string in the assignment to s uses the Point type’s debugDescription property."
  },
  {
    "title": "!=(_:_:)",
    "url": "https://developer.apple.com/documentation/musickit/musicauthorization/status/!=(_:_:)",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nInequality is the inverse of equality. For any values a and b, a != b implies that a == b is false.\n\nThis is the default implementation of the not-equal-to operator (!=) for any type that conforms to Equatable."
  },
  {
    "title": "debugDescription",
    "url": "https://developer.apple.com/documentation/musickit/curator/debugdescription",
    "html": "Discussion\n\nCalling this property directly is discouraged. Instead, convert an instance of any type to a string by using the String(reflecting:) initializer. This initializer works with any type, and uses the custom debugDescription property for types that conform to CustomDebugStringConvertible:\n\nstruct Point: CustomDebugStringConvertible {\n    let x: Int, y: Int\n\n\n    var debugDescription: String {\n        return \"(\\(x), \\(y))\"\n    }\n}\n\n\nlet p = Point(x: 21, y: 30)\nlet s = String(reflecting: p)\nprint(s)\n// Prints \"(21, 30)\"\n\n\nThe conversion of p to a string in the assignment to s uses the Point type’s debugDescription property."
  },
  {
    "title": "description",
    "url": "https://developer.apple.com/documentation/musickit/curator/description",
    "html": "Discussion\n\nCalling this property directly is discouraged. Instead, convert an instance of any type to a string by using the String(describing:) initializer. This initializer works with any type, and uses the custom description property for types that conform to CustomStringConvertible:\n\nstruct Point: CustomStringConvertible {\n    let x: Int, y: Int\n\n\n    var description: String {\n        return \"(\\(x), \\(y))\"\n    }\n}\n\n\nlet p = Point(x: 21, y: 30)\nlet s = String(describing: p)\nprint(s)\n// Prints \"(21, 30)\"\n\n\nThe conversion of p to a string in the assignment to s uses the Point type’s description property."
  },
  {
    "title": "init(from:)",
    "url": "https://developer.apple.com/documentation/musickit/curator/kind-swift.enum/init(from:)",
    "html": "Parameters\ndecoder\n\nThe decoder to read data from.\n\nDiscussion\n\nThis initializer throws an error if reading from the decoder fails, or if the data read is corrupted or otherwise invalid."
  },
  {
    "title": "hash(into:)",
    "url": "https://developer.apple.com/documentation/musickit/curator/kind-swift.enum/hash(into:)",
    "html": "Parameters\nhasher\n\nThe hasher to use when combining the components of this instance.\n\nDiscussion\n\nImplement this method to conform to the Hashable protocol. The components used for hashing must be the same as the components compared in your type’s == operator implementation. Call hasher.combine(_:) with each of these components.\n\nImportant\n\nIn your implementation of hash(into:), don’t call finalize() on the hasher instance provided, or replace it with a different instance. Doing so may become a compile-time error in the future."
  },
  {
    "title": "==(_:_:)",
    "url": "https://developer.apple.com/documentation/musickit/curator/kind-swift.enum/==(_:_:)",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nEquality is the inverse of inequality. For any values a and b, a == b implies that a != b is false."
  },
  {
    "title": "Equatable Implementations",
    "url": "https://developer.apple.com/documentation/musickit/curator/kind-swift.enum/equatable-implementations",
    "html": "Topics\nOperators\nstatic func != (Self, Self) -> Bool\nReturns a Boolean value indicating whether two values are not equal."
  },
  {
    "title": "encode(to:)",
    "url": "https://developer.apple.com/documentation/musickit/curator/kind-swift.enum/encode(to:)",
    "html": "Parameters\nencoder\n\nThe encoder to write data to.\n\nDiscussion\n\nIf the value fails to encode anything, encoder will encode an empty keyed container in its place.\n\nThis function throws an error if any values are invalid for the given encoder’s format."
  },
  {
    "title": "!=(_:_:)",
    "url": "https://developer.apple.com/documentation/musickit/musictokenrequesterror/!=(_:_:)",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nInequality is the inverse of equality. For any values a and b, a != b implies that a == b is false.\n\nThis is the default implementation of the not-equal-to operator (!=) for any type that conforms to Equatable."
  },
  {
    "title": "debugDescription",
    "url": "https://developer.apple.com/documentation/musickit/song/debugdescription",
    "html": "Discussion\n\nCalling this property directly is discouraged. Instead, convert an instance of any type to a string by using the String(reflecting:) initializer. This initializer works with any type, and uses the custom debugDescription property for types that conform to CustomDebugStringConvertible:\n\nstruct Point: CustomDebugStringConvertible {\n    let x: Int, y: Int\n\n\n    var debugDescription: String {\n        return \"(\\(x), \\(y))\"\n    }\n}\n\n\nlet p = Point(x: 21, y: 30)\nlet s = String(reflecting: p)\nprint(s)\n// Prints \"(21, 30)\"\n\n\nThe conversion of p to a string in the assignment to s uses the Point type’s debugDescription property."
  },
  {
    "title": "description",
    "url": "https://developer.apple.com/documentation/musickit/radioshow/description",
    "html": "Discussion\n\nCalling this property directly is discouraged. Instead, convert an instance of any type to a string by using the String(describing:) initializer. This initializer works with any type, and uses the custom description property for types that conform to CustomStringConvertible:\n\nstruct Point: CustomStringConvertible {\n    let x: Int, y: Int\n\n\n    var description: String {\n        return \"(\\(x), \\(y))\"\n    }\n}\n\n\nlet p = Point(x: 21, y: 30)\nlet s = String(describing: p)\nprint(s)\n// Prints \"(21, 30)\"\n\n\nThe conversion of p to a string in the assignment to s uses the Point type’s description property."
  },
  {
    "title": "hashValue",
    "url": "https://developer.apple.com/documentation/musickit/curator/kind-swift.enum/hashvalue",
    "html": "Discussion\n\nHash values are not guaranteed to be equal across different executions of your program. Do not save hash values to use during a future execution.\n\nImportant\n\nhashValue is deprecated as a Hashable requirement. To conform to Hashable, implement the hash(into:) requirement instead. The compiler provides an implementation for hashValue for you."
  },
  {
    "title": "debugDescription",
    "url": "https://developer.apple.com/documentation/musickit/station/debugdescription",
    "html": "Discussion\n\nCalling this property directly is discouraged. Instead, convert an instance of any type to a string by using the String(reflecting:) initializer. This initializer works with any type, and uses the custom debugDescription property for types that conform to CustomDebugStringConvertible:\n\nstruct Point: CustomDebugStringConvertible {\n    let x: Int, y: Int\n\n\n    var debugDescription: String {\n        return \"(\\(x), \\(y))\"\n    }\n}\n\n\nlet p = Point(x: 21, y: 30)\nlet s = String(reflecting: p)\nprint(s)\n// Prints \"(21, 30)\"\n\n\nThe conversion of p to a string in the assignment to s uses the Point type’s debugDescription property."
  },
  {
    "title": "debugDescription",
    "url": "https://developer.apple.com/documentation/musickit/genre/debugdescription",
    "html": "Discussion\n\nCalling this property directly is discouraged. Instead, convert an instance of any type to a string by using the String(reflecting:) initializer. This initializer works with any type, and uses the custom debugDescription property for types that conform to CustomDebugStringConvertible:\n\nstruct Point: CustomDebugStringConvertible {\n    let x: Int, y: Int\n\n\n    var debugDescription: String {\n        return \"(\\(x), \\(y))\"\n    }\n}\n\n\nlet p = Point(x: 21, y: 30)\nlet s = String(reflecting: p)\nprint(s)\n// Prints \"(21, 30)\"\n\n\nThe conversion of p to a string in the assignment to s uses the Point type’s debugDescription property."
  },
  {
    "title": "with(_:preferredSource:)",
    "url": "https://developer.apple.com/documentation/musickit/song/with(_:preferredsource:)",
    "html": "Discussion\n\nThis asynchronous method fetches a more complete representation of the receiver, loading the contents for each property you request from either the Apple Music catalog or the user’s library, depending on the preferred source as well the availability of the content in those respective data sources.\n\nFor example, if you want to load the tracks relationship for an Album, as found in the user’s library, as well as other associations of content that only live in the Apple Music catalog, like the recordLabels and relatedAlbums associations, you can use this code:\n\nlet album: Album = …\nlet detailedAlbum = try await album.with(\n    [\n        .tracks,\n        .recordLabels,\n        .relatedAlbums\n    ],\n    preferredSource: .library\n)\n\n\nHere, because the tracks relationship for an Album is supported in both the library and the catalog, and because the this code specifically requests MusicPropertySource.library as the preferred source, the framework will load the tracks from the user’s library. However, because the recordLabels and relatedAlbums associations are only available in the Apple Music catalog, the framework will also issue a network request to Apple Music API to fetch those associations of content from the catalog."
  },
  {
    "title": "encode(to:)",
    "url": "https://developer.apple.com/documentation/musickit/song/encode(to:)",
    "html": "Parameters\nencoder\n\nThe encoder to write data to.\n\nDiscussion\n\nIf the value fails to encode anything, encoder will encode an empty keyed container in its place.\n\nThis function throws an error if any values are invalid for the given encoder’s format."
  },
  {
    "title": "init(from:)",
    "url": "https://developer.apple.com/documentation/musickit/musiccatalogchartsresponse/init(from:)",
    "html": "Parameters\ndecoder\n\nThe decoder to read data from.\n\nDiscussion\n\nThis initializer throws an error if reading from the decoder fails, or if the data read is corrupted or otherwise invalid."
  },
  {
    "title": "!=(_:_:)",
    "url": "https://developer.apple.com/documentation/musickit/song/!=(_:_:)",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nInequality is the inverse of equality. For any values a and b, a != b implies that a == b is false.\n\nThis is the default implementation of the not-equal-to operator (!=) for any type that conforms to Equatable."
  },
  {
    "title": "description",
    "url": "https://developer.apple.com/documentation/musickit/song/description",
    "html": "Discussion\n\nCalling this property directly is discouraged. Instead, convert an instance of any type to a string by using the String(describing:) initializer. This initializer works with any type, and uses the custom description property for types that conform to CustomStringConvertible:\n\nstruct Point: CustomStringConvertible {\n    let x: Int, y: Int\n\n\n    var description: String {\n        return \"(\\(x), \\(y))\"\n    }\n}\n\n\nlet p = Point(x: 21, y: 30)\nlet s = String(describing: p)\nprint(s)\n// Prints \"(21, 30)\"\n\n\nThe conversion of p to a string in the assignment to s uses the Point type’s description property."
  },
  {
    "title": "with(_:)",
    "url": "https://developer.apple.com/documentation/musickit/song/with(_:)",
    "html": "Discussion\n\nThis asynchronous method fetches a more complete representation of the receiver from Apple Music API over the network."
  },
  {
    "title": "==(_:_:)",
    "url": "https://developer.apple.com/documentation/musickit/musiclibrarysearchresponse/topresult/==(_:_:)",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nEquality is the inverse of inequality. For any values a and b, a == b implies that a != b is false."
  },
  {
    "title": "encode(to:)",
    "url": "https://developer.apple.com/documentation/musickit/musiccatalogchartsresponse/encode(to:)",
    "html": "Parameters\nencoder\n\nThe encoder to write data to.\n\nDiscussion\n\nIf the value fails to encode anything, encoder will encode an empty keyed container in its place.\n\nThis function throws an error if any values are invalid for the given encoder’s format."
  },
  {
    "title": "description",
    "url": "https://developer.apple.com/documentation/musickit/musiccatalogchartsresponse/description",
    "html": "Discussion\n\nCalling this property directly is discouraged. Instead, convert an instance of any type to a string by using the String(describing:) initializer. This initializer works with any type, and uses the custom description property for types that conform to CustomStringConvertible:\n\nstruct Point: CustomStringConvertible {\n    let x: Int, y: Int\n\n\n    var description: String {\n        return \"(\\(x), \\(y))\"\n    }\n}\n\n\nlet p = Point(x: 21, y: 30)\nlet s = String(describing: p)\nprint(s)\n// Prints \"(21, 30)\"\n\n\nThe conversion of p to a string in the assignment to s uses the Point type’s description property."
  },
  {
    "title": "debugDescription",
    "url": "https://developer.apple.com/documentation/musickit/musicvideo/debugdescription",
    "html": "Discussion\n\nCalling this property directly is discouraged. Instead, convert an instance of any type to a string by using the String(reflecting:) initializer. This initializer works with any type, and uses the custom debugDescription property for types that conform to CustomDebugStringConvertible:\n\nstruct Point: CustomDebugStringConvertible {\n    let x: Int, y: Int\n\n\n    var debugDescription: String {\n        return \"(\\(x), \\(y))\"\n    }\n}\n\n\nlet p = Point(x: 21, y: 30)\nlet s = String(reflecting: p)\nprint(s)\n// Prints \"(21, 30)\"\n\n\nThe conversion of p to a string in the assignment to s uses the Point type’s debugDescription property."
  },
  {
    "title": "description",
    "url": "https://developer.apple.com/documentation/musickit/musicvideo/description",
    "html": "Discussion\n\nCalling this property directly is discouraged. Instead, convert an instance of any type to a string by using the String(describing:) initializer. This initializer works with any type, and uses the custom description property for types that conform to CustomStringConvertible:\n\nstruct Point: CustomStringConvertible {\n    let x: Int, y: Int\n\n\n    var description: String {\n        return \"(\\(x), \\(y))\"\n    }\n}\n\n\nlet p = Point(x: 21, y: 30)\nlet s = String(describing: p)\nprint(s)\n// Prints \"(21, 30)\"\n\n\nThe conversion of p to a string in the assignment to s uses the Point type’s description property."
  },
  {
    "title": "with(_:)",
    "url": "https://developer.apple.com/documentation/musickit/playlist/with(_:)",
    "html": "Discussion\n\nThis asynchronous method fetches a more complete representation of the receiver from Apple Music API over the network."
  },
  {
    "title": "!=(_:_:)",
    "url": "https://developer.apple.com/documentation/musickit/recordlabel/!=(_:_:)",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nInequality is the inverse of equality. For any values a and b, a != b implies that a == b is false.\n\nThis is the default implementation of the not-equal-to operator (!=) for any type that conforms to Equatable."
  },
  {
    "title": "encode(to:)",
    "url": "https://developer.apple.com/documentation/musickit/curator/encode(to:)",
    "html": "Parameters\nencoder\n\nThe encoder to write data to.\n\nDiscussion\n\nIf the value fails to encode anything, encoder will encode an empty keyed container in its place.\n\nThis function throws an error if any values are invalid for the given encoder’s format."
  },
  {
    "title": "with(_:preferredSource:)",
    "url": "https://developer.apple.com/documentation/musickit/musicvideo/with(_:preferredsource:)",
    "html": "Discussion\n\nThis asynchronous method fetches a more complete representation of the receiver, loading the contents for each property you request from either the Apple Music catalog or the user’s library, depending on the preferred source as well the availability of the content in those respective data sources.\n\nFor example, if you want to load the tracks relationship for an Album, as found in the user’s library, as well as other associations of content that only live in the Apple Music catalog, like the recordLabels and relatedAlbums associations, you can use this code:\n\nlet album: Album = …\nlet detailedAlbum = try await album.with(\n    [\n        .tracks,\n        .recordLabels,\n        .relatedAlbums\n    ],\n    preferredSource: .library\n)\n\n\nHere, because the tracks relationship for an Album is supported in both the library and the catalog, and because the this code specifically requests MusicPropertySource.library as the preferred source, the framework will load the tracks from the user’s library. However, because the recordLabels and relatedAlbums associations are only available in the Apple Music catalog, the framework will also issue a network request to Apple Music API to fetch those associations of content from the catalog."
  },
  {
    "title": "with(_:preferredSource:)",
    "url": "https://developer.apple.com/documentation/musickit/playlist/with(_:preferredsource:)",
    "html": "Discussion\n\nThis asynchronous method fetches a more complete representation of the receiver, loading the contents for each property you request from either the Apple Music catalog or the user’s library, depending on the preferred source as well the availability of the content in those respective data sources.\n\nFor example, if you want to load the tracks relationship for an Album, as found in the user’s library, as well as other associations of content that only live in the Apple Music catalog, like the recordLabels and relatedAlbums associations, you can use this code:\n\nlet album: Album = …\nlet detailedAlbum = try await album.with(\n    [\n        .tracks,\n        .recordLabels,\n        .relatedAlbums\n    ],\n    preferredSource: .library\n)\n\n\nHere, because the tracks relationship for an Album is supported in both the library and the catalog, and because the this code specifically requests MusicPropertySource.library as the preferred source, the framework will load the tracks from the user’s library. However, because the recordLabels and relatedAlbums associations are only available in the Apple Music catalog, the framework will also issue a network request to Apple Music API to fetch those associations of content from the catalog."
  },
  {
    "title": "init(from:)",
    "url": "https://developer.apple.com/documentation/musickit/playlist/init(from:)",
    "html": "Parameters\ndecoder\n\nThe decoder to read data from.\n\nDiscussion\n\nThis initializer throws an error if reading from the decoder fails, or if the data read is corrupted or otherwise invalid."
  },
  {
    "title": "with(_:preferredSource:)",
    "url": "https://developer.apple.com/documentation/musickit/recordlabel/with(_:preferredsource:)",
    "html": "Discussion\n\nThis asynchronous method fetches a more complete representation of the receiver, loading the contents for each property you request from either the Apple Music catalog or the user’s library, depending on the preferred source as well the availability of the content in those respective data sources.\n\nFor example, if you want to load the tracks relationship for an Album, as found in the user’s library, as well as other associations of content that only live in the Apple Music catalog, like the recordLabels and relatedAlbums associations, you can use this code:\n\nlet album: Album = …\nlet detailedAlbum = try await album.with(\n    [\n        .tracks,\n        .recordLabels,\n        .relatedAlbums\n    ],\n    preferredSource: .library\n)\n\n\nHere, because the tracks relationship for an Album is supported in both the library and the catalog, and because the this code specifically requests MusicPropertySource.library as the preferred source, the framework will load the tracks from the user’s library. However, because the recordLabels and relatedAlbums associations are only available in the Apple Music catalog, the framework will also issue a network request to Apple Music API to fetch those associations of content from the catalog."
  },
  {
    "title": "!=(_:_:)",
    "url": "https://developer.apple.com/documentation/musickit/radioshow/!=(_:_:)",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nInequality is the inverse of equality. For any values a and b, a != b implies that a == b is false.\n\nThis is the default implementation of the not-equal-to operator (!=) for any type that conforms to Equatable."
  },
  {
    "title": "description",
    "url": "https://developer.apple.com/documentation/musickit/playlist/description",
    "html": "Discussion\n\nCalling this property directly is discouraged. Instead, convert an instance of any type to a string by using the String(describing:) initializer. This initializer works with any type, and uses the custom description property for types that conform to CustomStringConvertible:\n\nstruct Point: CustomStringConvertible {\n    let x: Int, y: Int\n\n\n    var description: String {\n        return \"(\\(x), \\(y))\"\n    }\n}\n\n\nlet p = Point(x: 21, y: 30)\nlet s = String(describing: p)\nprint(s)\n// Prints \"(21, 30)\"\n\n\nThe conversion of p to a string in the assignment to s uses the Point type’s description property."
  },
  {
    "title": "!=(_:_:)",
    "url": "https://developer.apple.com/documentation/musickit/genre/!=(_:_:)",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nInequality is the inverse of equality. For any values a and b, a != b implies that a == b is false.\n\nThis is the default implementation of the not-equal-to operator (!=) for any type that conforms to Equatable."
  },
  {
    "title": "debugDescription",
    "url": "https://developer.apple.com/documentation/musickit/recordlabel/debugdescription",
    "html": "Discussion\n\nCalling this property directly is discouraged. Instead, convert an instance of any type to a string by using the String(reflecting:) initializer. This initializer works with any type, and uses the custom debugDescription property for types that conform to CustomDebugStringConvertible:\n\nstruct Point: CustomDebugStringConvertible {\n    let x: Int, y: Int\n\n\n    var debugDescription: String {\n        return \"(\\(x), \\(y))\"\n    }\n}\n\n\nlet p = Point(x: 21, y: 30)\nlet s = String(reflecting: p)\nprint(s)\n// Prints \"(21, 30)\"\n\n\nThe conversion of p to a string in the assignment to s uses the Point type’s debugDescription property."
  },
  {
    "title": "init(from:)",
    "url": "https://developer.apple.com/documentation/musickit/radioshow/init(from:)",
    "html": "Parameters\ndecoder\n\nThe decoder to read data from.\n\nDiscussion\n\nThis initializer throws an error if reading from the decoder fails, or if the data read is corrupted or otherwise invalid."
  },
  {
    "title": "with(_:)",
    "url": "https://developer.apple.com/documentation/musickit/recordlabel/with(_:)",
    "html": "Discussion\n\nThis asynchronous method fetches a more complete representation of the receiver from Apple Music API over the network."
  },
  {
    "title": "encode(to:)",
    "url": "https://developer.apple.com/documentation/musickit/radioshow/encode(to:)",
    "html": "Parameters\nencoder\n\nThe encoder to write data to.\n\nDiscussion\n\nIf the value fails to encode anything, encoder will encode an empty keyed container in its place.\n\nThis function throws an error if any values are invalid for the given encoder’s format."
  },
  {
    "title": "init(from:)",
    "url": "https://developer.apple.com/documentation/musickit/curator/init(from:)",
    "html": "Parameters\ndecoder\n\nThe decoder to read data from.\n\nDiscussion\n\nThis initializer throws an error if reading from the decoder fails, or if the data read is corrupted or otherwise invalid."
  },
  {
    "title": "encode(to:)",
    "url": "https://developer.apple.com/documentation/musickit/station/encode(to:)",
    "html": "Parameters\nencoder\n\nThe encoder to write data to.\n\nDiscussion\n\nIf the value fails to encode anything, encoder will encode an empty keyed container in its place.\n\nThis function throws an error if any values are invalid for the given encoder’s format."
  },
  {
    "title": "debugDescription",
    "url": "https://developer.apple.com/documentation/musickit/radioshow/debugdescription",
    "html": "Discussion\n\nCalling this property directly is discouraged. Instead, convert an instance of any type to a string by using the String(reflecting:) initializer. This initializer works with any type, and uses the custom debugDescription property for types that conform to CustomDebugStringConvertible:\n\nstruct Point: CustomDebugStringConvertible {\n    let x: Int, y: Int\n\n\n    var debugDescription: String {\n        return \"(\\(x), \\(y))\"\n    }\n}\n\n\nlet p = Point(x: 21, y: 30)\nlet s = String(reflecting: p)\nprint(s)\n// Prints \"(21, 30)\"\n\n\nThe conversion of p to a string in the assignment to s uses the Point type’s debugDescription property."
  },
  {
    "title": "with(_:preferredSource:)",
    "url": "https://developer.apple.com/documentation/musickit/station/with(_:preferredsource:)",
    "html": "Discussion\n\nThis asynchronous method fetches a more complete representation of the receiver, loading the contents for each property you request from either the Apple Music catalog or the user’s library, depending on the preferred source as well the availability of the content in those respective data sources.\n\nFor example, if you want to load the tracks relationship for an Album, as found in the user’s library, as well as other associations of content that only live in the Apple Music catalog, like the recordLabels and relatedAlbums associations, you can use this code:\n\nlet album: Album = …\nlet detailedAlbum = try await album.with(\n    [\n        .tracks,\n        .recordLabels,\n        .relatedAlbums\n    ],\n    preferredSource: .library\n)\n\n\nHere, because the tracks relationship for an Album is supported in both the library and the catalog, and because the this code specifically requests MusicPropertySource.library as the preferred source, the framework will load the tracks from the user’s library. However, because the recordLabels and relatedAlbums associations are only available in the Apple Music catalog, the framework will also issue a network request to Apple Music API to fetch those associations of content from the catalog."
  },
  {
    "title": "init(from:)",
    "url": "https://developer.apple.com/documentation/musickit/song/init(from:)",
    "html": "Parameters\ndecoder\n\nThe decoder to read data from.\n\nDiscussion\n\nThis initializer throws an error if reading from the decoder fails, or if the data read is corrupted or otherwise invalid."
  },
  {
    "title": "description",
    "url": "https://developer.apple.com/documentation/musickit/musicauthorization/status/description",
    "html": "Discussion\n\nCalling this property directly is discouraged. Instead, convert an instance of any type to a string by using the String(describing:) initializer. This initializer works with any type, and uses the custom description property for types that conform to CustomStringConvertible:\n\nstruct Point: CustomStringConvertible {\n    let x: Int, y: Int\n\n\n    var description: String {\n        return \"(\\(x), \\(y))\"\n    }\n}\n\n\nlet p = Point(x: 21, y: 30)\nlet s = String(describing: p)\nprint(s)\n// Prints \"(21, 30)\"\n\n\nThe conversion of p to a string in the assignment to s uses the Point type’s description property."
  },
  {
    "title": "==(_:_:)",
    "url": "https://developer.apple.com/documentation/musickit/playlist/kind-swift.enum/==(_:_:)",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nEquality is the inverse of inequality. For any values a and b, a == b implies that a != b is false."
  },
  {
    "title": "!=(_:_:)",
    "url": "https://developer.apple.com/documentation/musickit/station/!=(_:_:)",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nInequality is the inverse of equality. For any values a and b, a != b implies that a == b is false.\n\nThis is the default implementation of the not-equal-to operator (!=) for any type that conforms to Equatable."
  },
  {
    "title": "with(_:)",
    "url": "https://developer.apple.com/documentation/musickit/station/with(_:)",
    "html": "Discussion\n\nThis asynchronous method fetches a more complete representation of the receiver from Apple Music API over the network."
  },
  {
    "title": "init(from:)",
    "url": "https://developer.apple.com/documentation/musickit/station/init(from:)",
    "html": "Parameters\ndecoder\n\nThe decoder to read data from.\n\nDiscussion\n\nThis initializer throws an error if reading from the decoder fails, or if the data read is corrupted or otherwise invalid."
  },
  {
    "title": "!=(_:_:)",
    "url": "https://developer.apple.com/documentation/musickit/editorialnotes/!=(_:_:)",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nInequality is the inverse of equality. For any values a and b, a != b implies that a == b is false.\n\nThis is the default implementation of the not-equal-to operator (!=) for any type that conforms to Equatable."
  },
  {
    "title": "description",
    "url": "https://developer.apple.com/documentation/musickit/editorialnotes/description",
    "html": "Discussion\n\nCalling this property directly is discouraged. Instead, convert an instance of any type to a string by using the String(describing:) initializer. This initializer works with any type, and uses the custom description property for types that conform to CustomStringConvertible:\n\nstruct Point: CustomStringConvertible {\n    let x: Int, y: Int\n\n\n    var description: String {\n        return \"(\\(x), \\(y))\"\n    }\n}\n\n\nlet p = Point(x: 21, y: 30)\nlet s = String(describing: p)\nprint(s)\n// Prints \"(21, 30)\"\n\n\nThe conversion of p to a string in the assignment to s uses the Point type’s description property."
  },
  {
    "title": "encode(to:)",
    "url": "https://developer.apple.com/documentation/musickit/musiccatalogsearchsuggestionsresponse/encode(to:)",
    "html": "Parameters\nencoder\n\nThe encoder to write data to.\n\nDiscussion\n\nIf the value fails to encode anything, encoder will encode an empty keyed container in its place.\n\nThis function throws an error if any values are invalid for the given encoder’s format."
  },
  {
    "title": "debugDescription",
    "url": "https://developer.apple.com/documentation/musickit/editorialnotes/debugdescription",
    "html": "Discussion\n\nCalling this property directly is discouraged. Instead, convert an instance of any type to a string by using the String(reflecting:) initializer. This initializer works with any type, and uses the custom debugDescription property for types that conform to CustomDebugStringConvertible:\n\nstruct Point: CustomDebugStringConvertible {\n    let x: Int, y: Int\n\n\n    var debugDescription: String {\n        return \"(\\(x), \\(y))\"\n    }\n}\n\n\nlet p = Point(x: 21, y: 30)\nlet s = String(reflecting: p)\nprint(s)\n// Prints \"(21, 30)\"\n\n\nThe conversion of p to a string in the assignment to s uses the Point type’s debugDescription property."
  },
  {
    "title": "description",
    "url": "https://developer.apple.com/documentation/musickit/station/description",
    "html": "Discussion\n\nCalling this property directly is discouraged. Instead, convert an instance of any type to a string by using the String(describing:) initializer. This initializer works with any type, and uses the custom description property for types that conform to CustomStringConvertible:\n\nstruct Point: CustomStringConvertible {\n    let x: Int, y: Int\n\n\n    var description: String {\n        return \"(\\(x), \\(y))\"\n    }\n}\n\n\nlet p = Point(x: 21, y: 30)\nlet s = String(describing: p)\nprint(s)\n// Prints \"(21, 30)\"\n\n\nThe conversion of p to a string in the assignment to s uses the Point type’s description property."
  },
  {
    "title": "encode(to:)",
    "url": "https://developer.apple.com/documentation/musickit/editorialnotes/encode(to:)",
    "html": "Parameters\nencoder\n\nThe encoder to write data to.\n\nDiscussion\n\nIf the value fails to encode anything, encoder will encode an empty keyed container in its place.\n\nThis function throws an error if any values are invalid for the given encoder’s format."
  },
  {
    "title": "init(from:)",
    "url": "https://developer.apple.com/documentation/musickit/editorialnotes/init(from:)",
    "html": "Parameters\ndecoder\n\nThe decoder to read data from.\n\nDiscussion\n\nThis initializer throws an error if reading from the decoder fails, or if the data read is corrupted or otherwise invalid."
  },
  {
    "title": "!=(_:_:)",
    "url": "https://developer.apple.com/documentation/musickit/contentrating/!=(_:_:)",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nInequality is the inverse of equality. For any values a and b, a != b implies that a == b is false.\n\nThis is the default implementation of the not-equal-to operator (!=) for any type that conforms to Equatable."
  },
  {
    "title": "init(from:)",
    "url": "https://developer.apple.com/documentation/musickit/musiccatalogchart/init(from:)",
    "html": "Parameters\ndecoder\n\nThe decoder to read data from.\n\nDiscussion\n\nThis initializer throws an error if reading from the decoder fails, or if the data read is corrupted or otherwise invalid."
  },
  {
    "title": "init(from:)",
    "url": "https://developer.apple.com/documentation/musickit/musiccatalogsearchsuggestionsresponse/init(from:)",
    "html": "Parameters\ndecoder\n\nThe decoder to read data from.\n\nDiscussion\n\nThis initializer throws an error if reading from the decoder fails, or if the data read is corrupted or otherwise invalid."
  },
  {
    "title": "init(from:)",
    "url": "https://developer.apple.com/documentation/musickit/musiccatalogsearchsuggestionsresponse/suggestion/init(from:)",
    "html": "Parameters\ndecoder\n\nThe decoder to read data from.\n\nDiscussion\n\nThis initializer throws an error if reading from the decoder fails, or if the data read is corrupted or otherwise invalid."
  },
  {
    "title": "encode(to:)",
    "url": "https://developer.apple.com/documentation/musickit/musiccatalogsearchsuggestionsresponse/suggestion/encode(to:)",
    "html": "Parameters\nencoder\n\nThe encoder to write data to.\n\nDiscussion\n\nIf the value fails to encode anything, encoder will encode an empty keyed container in its place.\n\nThis function throws an error if any values are invalid for the given encoder’s format."
  },
  {
    "title": "hash(into:)",
    "url": "https://developer.apple.com/documentation/musickit/musiccatalogsearchsuggestionsresponse/suggestion/hash(into:)",
    "html": "Parameters\nhasher\n\nThe hasher to use when combining the components of this instance.\n\nDiscussion\n\nImplement this method to conform to the Hashable protocol. The components used for hashing must be the same as the components compared in your type’s == operator implementation. Call hasher.combine(_:) with each of these components.\n\nImportant\n\nIn your implementation of hash(into:), don’t call finalize() on the hasher instance provided, or replace it with a different instance. Doing so may become a compile-time error in the future."
  },
  {
    "title": "init(from:)",
    "url": "https://developer.apple.com/documentation/musickit/recentlyplayedmusicitem/init(from:)",
    "html": "Parameters\ndecoder\n\nThe decoder to read data from.\n\nDiscussion\n\nThis initializer throws an error if reading from the decoder fails, or if the data read is corrupted or otherwise invalid."
  },
  {
    "title": "with(_:preferredSource:)",
    "url": "https://developer.apple.com/documentation/musickit/radioshow/with(_:preferredsource:)",
    "html": "Discussion\n\nThis asynchronous method fetches a more complete representation of the receiver, loading the contents for each property you request from either the Apple Music catalog or the user’s library, depending on the preferred source as well the availability of the content in those respective data sources.\n\nFor example, if you want to load the tracks relationship for an Album, as found in the user’s library, as well as other associations of content that only live in the Apple Music catalog, like the recordLabels and relatedAlbums associations, you can use this code:\n\nlet album: Album = …\nlet detailedAlbum = try await album.with(\n    [\n        .tracks,\n        .recordLabels,\n        .relatedAlbums\n    ],\n    preferredSource: .library\n)\n\n\nHere, because the tracks relationship for an Album is supported in both the library and the catalog, and because the this code specifically requests MusicPropertySource.library as the preferred source, the framework will load the tracks from the user’s library. However, because the recordLabels and relatedAlbums associations are only available in the Apple Music catalog, the framework will also issue a network request to Apple Music API to fetch those associations of content from the catalog."
  },
  {
    "title": "encode(to:)",
    "url": "https://developer.apple.com/documentation/musickit/recentlyplayedmusicitem/encode(to:)",
    "html": "Parameters\nencoder\n\nThe encoder to write data to.\n\nDiscussion\n\nIf the value fails to encode anything, encoder will encode an empty keyed container in its place.\n\nThis function throws an error if any values are invalid for the given encoder’s format."
  },
  {
    "title": "debugDescription",
    "url": "https://developer.apple.com/documentation/musickit/recentlyplayedmusicitem/debugdescription",
    "html": "Discussion\n\nCalling this property directly is discouraged. Instead, convert an instance of any type to a string by using the String(reflecting:) initializer. This initializer works with any type, and uses the custom debugDescription property for types that conform to CustomDebugStringConvertible:\n\nstruct Point: CustomDebugStringConvertible {\n    let x: Int, y: Int\n\n\n    var debugDescription: String {\n        return \"(\\(x), \\(y))\"\n    }\n}\n\n\nlet p = Point(x: 21, y: 30)\nlet s = String(reflecting: p)\nprint(s)\n// Prints \"(21, 30)\"\n\n\nThe conversion of p to a string in the assignment to s uses the Point type’s debugDescription property."
  },
  {
    "title": "description",
    "url": "https://developer.apple.com/documentation/musickit/recentlyplayedmusicitem/description",
    "html": "Discussion\n\nCalling this property directly is discouraged. Instead, convert an instance of any type to a string by using the String(describing:) initializer. This initializer works with any type, and uses the custom description property for types that conform to CustomStringConvertible:\n\nstruct Point: CustomStringConvertible {\n    let x: Int, y: Int\n\n\n    var description: String {\n        return \"(\\(x), \\(y))\"\n    }\n}\n\n\nlet p = Point(x: 21, y: 30)\nlet s = String(describing: p)\nprint(s)\n// Prints \"(21, 30)\"\n\n\nThe conversion of p to a string in the assignment to s uses the Point type’s description property."
  },
  {
    "title": "with(_:)",
    "url": "https://developer.apple.com/documentation/musickit/radioshow/with(_:)",
    "html": "Discussion\n\nThis asynchronous method fetches a more complete representation of the receiver from Apple Music API over the network."
  },
  {
    "title": "encode(to:)",
    "url": "https://developer.apple.com/documentation/musickit/genre/encode(to:)",
    "html": "Parameters\nencoder\n\nThe encoder to write data to.\n\nDiscussion\n\nIf the value fails to encode anything, encoder will encode an empty keyed container in its place.\n\nThis function throws an error if any values are invalid for the given encoder’s format."
  },
  {
    "title": "max(by:)",
    "url": "https://developer.apple.com/documentation/musickit/musicsubscription/updates/max(by:)",
    "html": "Parameters\nareInIncreasingOrder\n\nA predicate that returns true if its first argument should be ordered before its second argument; otherwise, false.\n\nReturn Value\n\nThe sequence’s minimum element, according to areInIncreasingOrder. If the sequence has no elements, returns nil.\n\nDiscussion\n\nUse this method when the asynchronous sequence’s values don’t conform to Comparable, or when you want to apply a custom ordering to the sequence.\n\nThe predicate must be a strict weak ordering over the elements. That is, for any elements a, b, and c, the following conditions must hold:\n\nareInIncreasingOrder(a, a) is always false. (Irreflexivity)\n\nIf areInIncreasingOrder(a, b) and areInIncreasingOrder(b, c) are both true, then areInIncreasingOrder(a, c) is also true. (Transitive comparability)\n\nTwo elements are incomparable if neither is ordered before the other according to the predicate. If a and b are incomparable, and b and c are incomparable, then a and c are also incomparable. (Transitive incomparability)\n\nThe following example uses an enumeration of playing cards ranks, Rank, which ranges from ace (low) to king (high). An asynchronous sequence called RankCounter produces all elements of the array. The predicate provided to the max(by:) method sorts ranks based on their rawValue:\n\nenum Rank: Int {\n    case ace = 1, two, three, four, five, six, seven, eight, nine, ten, jack, queen, king\n}\n\n\nlet max = await RankCounter()\n    .max { $0.rawValue < $1.rawValue }\nprint(max ?? \"none\")\n// Prints \"king\"\n"
  },
  {
    "title": "CustomDebugStringConvertible Implementations",
    "url": "https://developer.apple.com/documentation/musickit/musicpersonalrecommendation/item/customdebugstringconvertible-implementations",
    "html": "Topics\nInstance Properties\nvar debugDescription: String\nA textual representation of this instance, suitable for debugging."
  },
  {
    "title": "init(from:)",
    "url": "https://developer.apple.com/documentation/musickit/genre/init(from:)",
    "html": "Parameters\ndecoder\n\nThe decoder to read data from.\n\nDiscussion\n\nThis initializer throws an error if reading from the decoder fails, or if the data read is corrupted or otherwise invalid."
  },
  {
    "title": "CustomStringConvertible Implementations",
    "url": "https://developer.apple.com/documentation/musickit/musicpersonalrecommendation/item/customstringconvertible-implementations",
    "html": "Topics\nInstance Properties\nvar description: String\nA textual representation of this instance."
  },
  {
    "title": "encode(to:)",
    "url": "https://developer.apple.com/documentation/musickit/musicpersonalrecommendation/encode(to:)",
    "html": "Parameters\nencoder\n\nThe encoder to write data to.\n\nDiscussion\n\nIf the value fails to encode anything, encoder will encode an empty keyed container in its place.\n\nThis function throws an error if any values are invalid for the given encoder’s format."
  },
  {
    "title": "init(from:)",
    "url": "https://developer.apple.com/documentation/musickit/musicpersonalrecommendation/init(from:)",
    "html": "Parameters\ndecoder\n\nThe decoder to read data from.\n\nDiscussion\n\nThis initializer throws an error if reading from the decoder fails, or if the data read is corrupted or otherwise invalid."
  },
  {
    "title": "Decodable Implementations",
    "url": "https://developer.apple.com/documentation/musickit/musicpersonalrecommendation/item/decodable-implementations",
    "html": "Topics\nInitializers\ninit(from: any Decoder) throws\nCreates a new instance by decoding from the given decoder."
  },
  {
    "title": "first(where:)",
    "url": "https://developer.apple.com/documentation/musickit/musicsubscription/updates/first(where:)",
    "html": "Parameters\npredicate\n\nA closure that takes an element of the asynchronous sequence as its argument and returns a Boolean value that indicates whether the element is a match.\n\nReturn Value\n\nThe first element of the sequence that satisfies predicate, or nil if there is no element that satisfies predicate.\n\nDiscussion\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 10. The first(where:) method returns the first member of the sequence that’s evenly divisible by both 2 and 3.\n\nlet divisibleBy2And3 = await Counter(howHigh: 10)\n    .first { $0 % 2 == 0 && $0 % 3 == 0 }\nprint(divisibleBy2And3 ?? \"none\")\n// Prints \"6\"\n\n\nThe predicate executes each time the asynchronous sequence produces an element, until either the predicate finds a match or the sequence ends."
  },
  {
    "title": "with(_:)",
    "url": "https://developer.apple.com/documentation/musickit/musicvideo/with(_:)",
    "html": "Discussion\n\nThis asynchronous method fetches a more complete representation of the receiver from Apple Music API over the network."
  },
  {
    "title": "!=(_:_:)",
    "url": "https://developer.apple.com/documentation/musickit/musicvideo/!=(_:_:)",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nInequality is the inverse of equality. For any values a and b, a != b implies that a == b is false.\n\nThis is the default implementation of the not-equal-to operator (!=) for any type that conforms to Equatable."
  },
  {
    "title": "encode(to:)",
    "url": "https://developer.apple.com/documentation/musickit/musicvideo/encode(to:)",
    "html": "Parameters\nencoder\n\nThe encoder to write data to.\n\nDiscussion\n\nIf the value fails to encode anything, encoder will encode an empty keyed container in its place.\n\nThis function throws an error if any values are invalid for the given encoder’s format."
  },
  {
    "title": "init(from:)",
    "url": "https://developer.apple.com/documentation/musickit/musicvideo/init(from:)",
    "html": "Parameters\ndecoder\n\nThe decoder to read data from.\n\nDiscussion\n\nThis initializer throws an error if reading from the decoder fails, or if the data read is corrupted or otherwise invalid."
  },
  {
    "title": "encode(to:)",
    "url": "https://developer.apple.com/documentation/musickit/playlist/encode(to:)",
    "html": "Parameters\nencoder\n\nThe encoder to write data to.\n\nDiscussion\n\nIf the value fails to encode anything, encoder will encode an empty keyed container in its place.\n\nThis function throws an error if any values are invalid for the given encoder’s format."
  },
  {
    "title": "!=(_:_:)",
    "url": "https://developer.apple.com/documentation/musickit/playlist/!=(_:_:)",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nInequality is the inverse of equality. For any values a and b, a != b implies that a == b is false.\n\nThis is the default implementation of the not-equal-to operator (!=) for any type that conforms to Equatable."
  },
  {
    "title": "encode(to:)",
    "url": "https://developer.apple.com/documentation/musickit/recordlabel/encode(to:)",
    "html": "Parameters\nencoder\n\nThe encoder to write data to.\n\nDiscussion\n\nIf the value fails to encode anything, encoder will encode an empty keyed container in its place.\n\nThis function throws an error if any values are invalid for the given encoder’s format."
  },
  {
    "title": "with(_:preferredSource:)",
    "url": "https://developer.apple.com/documentation/musickit/curator/with(_:preferredsource:)",
    "html": "Discussion\n\nThis asynchronous method fetches a more complete representation of the receiver, loading the contents for each property you request from either the Apple Music catalog or the user’s library, depending on the preferred source as well the availability of the content in those respective data sources.\n\nFor example, if you want to load the tracks relationship for an Album, as found in the user’s library, as well as other associations of content that only live in the Apple Music catalog, like the recordLabels and relatedAlbums associations, you can use this code:\n\nlet album: Album = …\nlet detailedAlbum = try await album.with(\n    [\n        .tracks,\n        .recordLabels,\n        .relatedAlbums\n    ],\n    preferredSource: .library\n)\n\n\nHere, because the tracks relationship for an Album is supported in both the library and the catalog, and because the this code specifically requests MusicPropertySource.library as the preferred source, the framework will load the tracks from the user’s library. However, because the recordLabels and relatedAlbums associations are only available in the Apple Music catalog, the framework will also issue a network request to Apple Music API to fetch those associations of content from the catalog."
  },
  {
    "title": "description",
    "url": "https://developer.apple.com/documentation/musickit/recordlabel/description",
    "html": "Discussion\n\nCalling this property directly is discouraged. Instead, convert an instance of any type to a string by using the String(describing:) initializer. This initializer works with any type, and uses the custom description property for types that conform to CustomStringConvertible:\n\nstruct Point: CustomStringConvertible {\n    let x: Int, y: Int\n\n\n    var description: String {\n        return \"(\\(x), \\(y))\"\n    }\n}\n\n\nlet p = Point(x: 21, y: 30)\nlet s = String(describing: p)\nprint(s)\n// Prints \"(21, 30)\"\n\n\nThe conversion of p to a string in the assignment to s uses the Point type’s description property."
  },
  {
    "title": "!=(_:_:)",
    "url": "https://developer.apple.com/documentation/musickit/curator/!=(_:_:)",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nInequality is the inverse of equality. For any values a and b, a != b implies that a == b is false.\n\nThis is the default implementation of the not-equal-to operator (!=) for any type that conforms to Equatable."
  },
  {
    "title": "init(from:)",
    "url": "https://developer.apple.com/documentation/musickit/recordlabel/init(from:)",
    "html": "Parameters\ndecoder\n\nThe decoder to read data from.\n\nDiscussion\n\nThis initializer throws an error if reading from the decoder fails, or if the data read is corrupted or otherwise invalid."
  },
  {
    "title": "with(_:)",
    "url": "https://developer.apple.com/documentation/musickit/curator/with(_:)",
    "html": "Discussion\n\nThis asynchronous method fetches a more complete representation of the receiver from Apple Music API over the network."
  },
  {
    "title": "allSatisfy(_:)",
    "url": "https://developer.apple.com/documentation/musickit/musicsubscription/updates/allsatisfy(_:)",
    "html": "Parameters\npredicate\n\nA closure that takes an element of the asynchronous sequence as its argument and returns a Boolean value that indicates whether the passed element satisfies a condition.\n\nReturn Value\n\ntrue if the sequence contains only elements that satisfy predicate; otherwise, false.\n\nDiscussion\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 10. The allSatisfy(_:) method checks to see whether all elements produced by the sequence are less than 10.\n\nlet allLessThanTen = await Counter(howHigh: 10)\n    .allSatisfy { $0 < 10 }\nprint(allLessThanTen)\n// Prints \"false\"\n\n\nThe predicate executes each time the asynchronous sequence produces an element, until either the predicate returns false or the sequence ends.\n\nIf the asynchronous sequence is empty, this method returns true."
  },
  {
    "title": "description",
    "url": "https://developer.apple.com/documentation/musickit/musiccatalogchartkind/description",
    "html": "Discussion\n\nCalling this property directly is discouraged. Instead, convert an instance of any type to a string by using the String(describing:) initializer. This initializer works with any type, and uses the custom description property for types that conform to CustomStringConvertible:\n\nstruct Point: CustomStringConvertible {\n    let x: Int, y: Int\n\n\n    var description: String {\n        return \"(\\(x), \\(y))\"\n    }\n}\n\n\nlet p = Point(x: 21, y: 30)\nlet s = String(describing: p)\nprint(s)\n// Prints \"(21, 30)\"\n\n\nThe conversion of p to a string in the assignment to s uses the Point type’s description property."
  },
  {
    "title": "hashValue",
    "url": "https://developer.apple.com/documentation/musickit/musiccatalogchart/hashvalue",
    "html": "Discussion\n\nHash values are not guaranteed to be equal across different executions of your program. Do not save hash values to use during a future execution.\n\nImportant\n\nhashValue is deprecated as a Hashable requirement. To conform to Hashable, implement the hash(into:) requirement instead. The compiler provides an implementation for hashValue for you."
  },
  {
    "title": "MusicItemCollection.Index",
    "url": "https://developer.apple.com/documentation/musickit/musicitemcollection/index",
    "html": "Discussion\n\nValid indices consist of the position of every element and a “past the end” position that’s not valid for use as a subscript argument."
  },
  {
    "title": "debugDescription",
    "url": "https://developer.apple.com/documentation/musickit/musiccatalogchart/debugdescription",
    "html": "Discussion\n\nCalling this property directly is discouraged. Instead, convert an instance of any type to a string by using the String(reflecting:) initializer. This initializer works with any type, and uses the custom debugDescription property for types that conform to CustomDebugStringConvertible:\n\nstruct Point: CustomDebugStringConvertible {\n    let x: Int, y: Int\n\n\n    var debugDescription: String {\n        return \"(\\(x), \\(y))\"\n    }\n}\n\n\nlet p = Point(x: 21, y: 30)\nlet s = String(reflecting: p)\nprint(s)\n// Prints \"(21, 30)\"\n\n\nThe conversion of p to a string in the assignment to s uses the Point type’s debugDescription property."
  },
  {
    "title": "!=(_:_:)",
    "url": "https://developer.apple.com/documentation/musickit/musiccatalogchart/!=(_:_:)",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nInequality is the inverse of equality. For any values a and b, a != b implies that a == b is false.\n\nThis is the default implementation of the not-equal-to operator (!=) for any type that conforms to Equatable."
  },
  {
    "title": "hash(into:)",
    "url": "https://developer.apple.com/documentation/musickit/musiccatalogchart/hash(into:)",
    "html": "Parameters\nhasher\n\nThe hasher to use when combining the components of this instance.\n\nDiscussion\n\nImplement this method to conform to the Hashable protocol. The components used for hashing must be the same as the components compared in your type’s == operator implementation. Call hasher.combine(_:) with each of these components.\n\nImportant\n\nIn your implementation of hash(into:), don’t call finalize() on the hasher instance provided, or replace it with a different instance. Doing so may become a compile-time error in the future."
  },
  {
    "title": "description",
    "url": "https://developer.apple.com/documentation/musickit/musiccatalogchart/description",
    "html": "Discussion\n\nCalling this property directly is discouraged. Instead, convert an instance of any type to a string by using the String(describing:) initializer. This initializer works with any type, and uses the custom description property for types that conform to CustomStringConvertible:\n\nstruct Point: CustomStringConvertible {\n    let x: Int, y: Int\n\n\n    var description: String {\n        return \"(\\(x), \\(y))\"\n    }\n}\n\n\nlet p = Point(x: 21, y: 30)\nlet s = String(describing: p)\nprint(s)\n// Prints \"(21, 30)\"\n\n\nThe conversion of p to a string in the assignment to s uses the Point type’s description property."
  },
  {
    "title": "MusicItemCollection.Iterator",
    "url": "https://developer.apple.com/documentation/musickit/musicitemcollection/iterator",
    "html": "Discussion\n\nBy default, a collection conforms to the Sequence protocol by supplying IndexingIterator as its associated Iterator type."
  },
  {
    "title": "displayTerm",
    "url": "https://developer.apple.com/documentation/musickit/musiccatalogsearchsuggestionsresponse/suggestion/displayterm",
    "html": "Discussion\n\nUse the searchTerm value for the actual search."
  },
  {
    "title": "!=(_:_:)",
    "url": "https://developer.apple.com/documentation/musickit/artist/!=(_:_:)",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nInequality is the inverse of equality. For any values a and b, a != b implies that a == b is false.\n\nThis is the default implementation of the not-equal-to operator (!=) for any type that conforms to Equatable."
  },
  {
    "title": "encode(to:)",
    "url": "https://developer.apple.com/documentation/musickit/playlist/kind-swift.enum/encode(to:)",
    "html": "Parameters\nencoder\n\nThe encoder to write data to.\n\nDiscussion\n\nIf the value fails to encode anything, encoder will encode an empty keyed container in its place.\n\nThis function throws an error if any values are invalid for the given encoder’s format."
  },
  {
    "title": "hash(into:)",
    "url": "https://developer.apple.com/documentation/musickit/playlist/kind-swift.enum/hash(into:)",
    "html": "Parameters\nhasher\n\nThe hasher to use when combining the components of this instance.\n\nDiscussion\n\nImplement this method to conform to the Hashable protocol. The components used for hashing must be the same as the components compared in your type’s == operator implementation. Call hasher.combine(_:) with each of these components.\n\nImportant\n\nIn your implementation of hash(into:), don’t call finalize() on the hasher instance provided, or replace it with a different instance. Doing so may become a compile-time error in the future."
  },
  {
    "title": "Equatable Implementations",
    "url": "https://developer.apple.com/documentation/musickit/playlist/kind-swift.enum/equatable-implementations",
    "html": "Topics\nOperators\nstatic func != (Self, Self) -> Bool\nReturns a Boolean value indicating whether two values are not equal."
  },
  {
    "title": "hashValue",
    "url": "https://developer.apple.com/documentation/musickit/playlist/kind-swift.enum/hashvalue",
    "html": "Discussion\n\nHash values are not guaranteed to be equal across different executions of your program. Do not save hash values to use during a future execution.\n\nImportant\n\nhashValue is deprecated as a Hashable requirement. To conform to Hashable, implement the hash(into:) requirement instead. The compiler provides an implementation for hashValue for you."
  },
  {
    "title": "hashValue",
    "url": "https://developer.apple.com/documentation/musickit/musiccatalogsearchsuggestionsresponse/suggestion/hashvalue",
    "html": "Discussion\n\nHash values are not guaranteed to be equal across different executions of your program. Do not save hash values to use during a future execution.\n\nImportant\n\nhashValue is deprecated as a Hashable requirement. To conform to Hashable, implement the hash(into:) requirement instead. The compiler provides an implementation for hashValue for you."
  },
  {
    "title": "description",
    "url": "https://developer.apple.com/documentation/musickit/musiclibraryresponse/description",
    "html": "Discussion\n\nCalling this property directly is discouraged. Instead, convert an instance of any type to a string by using the String(describing:) initializer. This initializer works with any type, and uses the custom description property for types that conform to CustomStringConvertible:\n\nstruct Point: CustomStringConvertible {\n    let x: Int, y: Int\n\n\n    var description: String {\n        return \"(\\(x), \\(y))\"\n    }\n}\n\n\nlet p = Point(x: 21, y: 30)\nlet s = String(describing: p)\nprint(s)\n// Prints \"(21, 30)\"\n\n\nThe conversion of p to a string in the assignment to s uses the Point type’s description property."
  },
  {
    "title": "init(from:)",
    "url": "https://developer.apple.com/documentation/musickit/playlist/kind-swift.enum/init(from:)",
    "html": "Parameters\ndecoder\n\nThe decoder to read data from.\n\nDiscussion\n\nThis initializer throws an error if reading from the decoder fails, or if the data read is corrupted or otherwise invalid."
  },
  {
    "title": "with(_:)",
    "url": "https://developer.apple.com/documentation/musickit/genre/with(_:)",
    "html": "Discussion\n\nThis asynchronous method fetches a more complete representation of the receiver from Apple Music API over the network."
  },
  {
    "title": "debugDescription",
    "url": "https://developer.apple.com/documentation/musickit/playlist/debugdescription",
    "html": "Discussion\n\nCalling this property directly is discouraged. Instead, convert an instance of any type to a string by using the String(reflecting:) initializer. This initializer works with any type, and uses the custom debugDescription property for types that conform to CustomDebugStringConvertible:\n\nstruct Point: CustomDebugStringConvertible {\n    let x: Int, y: Int\n\n\n    var debugDescription: String {\n        return \"(\\(x), \\(y))\"\n    }\n}\n\n\nlet p = Point(x: 21, y: 30)\nlet s = String(reflecting: p)\nprint(s)\n// Prints \"(21, 30)\"\n\n\nThe conversion of p to a string in the assignment to s uses the Point type’s debugDescription property."
  },
  {
    "title": "with(_:preferredSource:)",
    "url": "https://developer.apple.com/documentation/musickit/genre/with(_:preferredsource:)",
    "html": "Discussion\n\nThis asynchronous method fetches a more complete representation of the receiver, loading the contents for each property you request from either the Apple Music catalog or the user’s library, depending on the preferred source as well the availability of the content in those respective data sources.\n\nFor example, if you want to load the tracks relationship for an Album, as found in the user’s library, as well as other associations of content that only live in the Apple Music catalog, like the recordLabels and relatedAlbums associations, you can use this code:\n\nlet album: Album = …\nlet detailedAlbum = try await album.with(\n    [\n        .tracks,\n        .recordLabels,\n        .relatedAlbums\n    ],\n    preferredSource: .library\n)\n\n\nHere, because the tracks relationship for an Album is supported in both the library and the catalog, and because the this code specifically requests MusicPropertySource.library as the preferred source, the framework will load the tracks from the user’s library. However, because the recordLabels and relatedAlbums associations are only available in the Apple Music catalog, the framework will also issue a network request to Apple Music API to fetch those associations of content from the catalog."
  },
  {
    "title": "CustomDebugStringConvertible Implementations",
    "url": "https://developer.apple.com/documentation/musickit/musiccatalogsearchsuggestionsresponse/suggestion/customdebugstringconvertible-implementations",
    "html": "Topics\nInstance Properties\nvar debugDescription: String\nA textual representation of this instance, suitable for debugging."
  },
  {
    "title": "description",
    "url": "https://developer.apple.com/documentation/musickit/genre/description",
    "html": "Discussion\n\nCalling this property directly is discouraged. Instead, convert an instance of any type to a string by using the String(describing:) initializer. This initializer works with any type, and uses the custom description property for types that conform to CustomStringConvertible:\n\nstruct Point: CustomStringConvertible {\n    let x: Int, y: Int\n\n\n    var description: String {\n        return \"(\\(x), \\(y))\"\n    }\n}\n\n\nlet p = Point(x: 21, y: 30)\nlet s = String(describing: p)\nprint(s)\n// Prints \"(21, 30)\"\n\n\nThe conversion of p to a string in the assignment to s uses the Point type’s description property."
  },
  {
    "title": "Equatable Implementations",
    "url": "https://developer.apple.com/documentation/musickit/musiccatalogsearchsuggestionsresponse/suggestion/equatable-implementations",
    "html": "Topics\nOperators\nstatic func != (Self, Self) -> Bool\nReturns a Boolean value indicating whether two values are not equal."
  },
  {
    "title": "CustomStringConvertible Implementations",
    "url": "https://developer.apple.com/documentation/musickit/musiccatalogsearchsuggestionsresponse/suggestion/customstringconvertible-implementations",
    "html": "Topics\nInstance Properties\nvar description: String\nA textual representation of this instance."
  },
  {
    "title": "hash(into:)",
    "url": "https://developer.apple.com/documentation/musickit/musicpersonalrecommendation/item/hash(into:)",
    "html": "Parameters\nhasher\n\nThe hasher to use when combining the components of this instance.\n\nDiscussion\n\nImplement this method to conform to the Hashable protocol. The components used for hashing must be the same as the components compared in your type’s == operator implementation. Call hasher.combine(_:) with each of these components.\n\nImportant\n\nIn your implementation of hash(into:), don’t call finalize() on the hasher instance provided, or replace it with a different instance. Doing so may become a compile-time error in the future."
  },
  {
    "title": "hashValue",
    "url": "https://developer.apple.com/documentation/musickit/musicpersonalrecommendation/item/hashvalue",
    "html": "Discussion\n\nHash values are not guaranteed to be equal across different executions of your program. Do not save hash values to use during a future execution.\n\nImportant\n\nhashValue is deprecated as a Hashable requirement. To conform to Hashable, implement the hash(into:) requirement instead. The compiler provides an implementation for hashValue for you."
  },
  {
    "title": "min(by:)",
    "url": "https://developer.apple.com/documentation/musickit/musicsubscription/updates/min(by:)",
    "html": "Parameters\nareInIncreasingOrder\n\nA predicate that returns true if its first argument should be ordered before its second argument; otherwise, false.\n\nReturn Value\n\nThe sequence’s minimum element, according to areInIncreasingOrder. If the sequence has no elements, returns nil.\n\nDiscussion\n\nUse this method when the asynchronous sequence’s values don’t conform to Comparable, or when you want to apply a custom ordering to the sequence.\n\nThe predicate must be a strict weak ordering over the elements. That is, for any elements a, b, and c, the following conditions must hold:\n\nareInIncreasingOrder(a, a) is always false. (Irreflexivity)\n\nIf areInIncreasingOrder(a, b) and areInIncreasingOrder(b, c) are both true, then areInIncreasingOrder(a, c) is also true. (Transitive comparability)\n\nTwo elements are incomparable if neither is ordered before the other according to the predicate. If a and b are incomparable, and b and c are incomparable, then a and c are also incomparable. (Transitive incomparability)\n\nThe following example uses an enumeration of playing cards ranks, Rank, which ranges from ace (low) to king (high). An asynchronous sequence called RankCounter produces all elements of the array. The predicate provided to the min(by:) method sorts ranks based on their rawValue:\n\nenum Rank: Int {\n    case ace = 1, two, three, four, five, six, seven, eight, nine, ten, jack, queen, king\n}\n\n\nlet min = await RankCounter()\n    .min { $0.rawValue < $1.rawValue }\nprint(min ?? \"none\")\n// Prints \"ace\"\n"
  },
  {
    "title": "!=(_:_:)",
    "url": "https://developer.apple.com/documentation/musickit/musiclibraryresponse/!=(_:_:)",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nInequality is the inverse of equality. For any values a and b, a != b implies that a == b is false.\n\nThis is the default implementation of the not-equal-to operator (!=) for any type that conforms to Equatable."
  },
  {
    "title": "==(_:_:)",
    "url": "https://developer.apple.com/documentation/musickit/musiclibraryresponse/==(_:_:)",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nEquality is the inverse of inequality. For any values a and b, a == b implies that a != b is false."
  },
  {
    "title": "!=(_:_:)",
    "url": "https://developer.apple.com/documentation/musickit/musiccatalogsearchsuggestionsresponse/!=(_:_:)",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nInequality is the inverse of equality. For any values a and b, a != b implies that a == b is false.\n\nThis is the default implementation of the not-equal-to operator (!=) for any type that conforms to Equatable."
  },
  {
    "title": "hash(into:)",
    "url": "https://developer.apple.com/documentation/musickit/musiclibraryresponse/hash(into:)",
    "html": "Parameters\nhasher\n\nThe hasher to use when combining the components of this instance.\n\nDiscussion\n\nImplement this method to conform to the Hashable protocol. The components used for hashing must be the same as the components compared in your type’s == operator implementation. Call hasher.combine(_:) with each of these components.\n\nImportant\n\nIn your implementation of hash(into:), don’t call finalize() on the hasher instance provided, or replace it with a different instance. Doing so may become a compile-time error in the future."
  },
  {
    "title": "!=(_:_:)",
    "url": "https://developer.apple.com/documentation/musickit/musicpersonalrecommendation/!=(_:_:)",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nInequality is the inverse of equality. For any values a and b, a != b implies that a == b is false.\n\nThis is the default implementation of the not-equal-to operator (!=) for any type that conforms to Equatable."
  },
  {
    "title": "Equatable Implementations",
    "url": "https://developer.apple.com/documentation/musickit/musicpersonalrecommendation/item/equatable-implementations",
    "html": "Topics\nOperators\nstatic func != (Self, Self) -> Bool\nReturns a Boolean value indicating whether two values are not equal."
  },
  {
    "title": "description",
    "url": "https://developer.apple.com/documentation/musickit/musicpersonalrecommendation/description",
    "html": "Discussion\n\nCalling this property directly is discouraged. Instead, convert an instance of any type to a string by using the String(describing:) initializer. This initializer works with any type, and uses the custom description property for types that conform to CustomStringConvertible:\n\nstruct Point: CustomStringConvertible {\n    let x: Int, y: Int\n\n\n    var description: String {\n        return \"(\\(x), \\(y))\"\n    }\n}\n\n\nlet p = Point(x: 21, y: 30)\nlet s = String(describing: p)\nprint(s)\n// Prints \"(21, 30)\"\n\n\nThe conversion of p to a string in the assignment to s uses the Point type’s description property."
  },
  {
    "title": "==(_:_:)",
    "url": "https://developer.apple.com/documentation/musickit/musiccatalogsearchsuggestionsresponse/suggestion/==(_:_:)",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nEquality is the inverse of inequality. For any values a and b, a == b implies that a != b is false."
  },
  {
    "title": "Encodable Implementations",
    "url": "https://developer.apple.com/documentation/musickit/musicpersonalrecommendation/item/encodable-implementations",
    "html": "Topics\nInstance Methods\nfunc encode(to: any Encoder) throws\nEncodes this value into the given encoder."
  },
  {
    "title": "init(from:)",
    "url": "https://developer.apple.com/documentation/musickit/musiccatalogchartkind/init(from:)",
    "html": "Parameters\ndecoder\n\nThe decoder to read data from.\n\nDiscussion\n\nThis initializer throws an error if reading from the decoder fails, or if the data read is corrupted or otherwise invalid."
  },
  {
    "title": "!=(_:_:)",
    "url": "https://developer.apple.com/documentation/musickit/musiccatalogchartkind/!=(_:_:)",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nInequality is the inverse of equality. For any values a and b, a != b implies that a == b is false.\n\nThis is the default implementation of the not-equal-to operator (!=) for any type that conforms to Equatable."
  },
  {
    "title": "debugDescription",
    "url": "https://developer.apple.com/documentation/musickit/musicpersonalrecommendation/debugdescription",
    "html": "Discussion\n\nCalling this property directly is discouraged. Instead, convert an instance of any type to a string by using the String(reflecting:) initializer. This initializer works with any type, and uses the custom debugDescription property for types that conform to CustomDebugStringConvertible:\n\nstruct Point: CustomDebugStringConvertible {\n    let x: Int, y: Int\n\n\n    var debugDescription: String {\n        return \"(\\(x), \\(y))\"\n    }\n}\n\n\nlet p = Point(x: 21, y: 30)\nlet s = String(reflecting: p)\nprint(s)\n// Prints \"(21, 30)\"\n\n\nThe conversion of p to a string in the assignment to s uses the Point type’s debugDescription property."
  },
  {
    "title": "description",
    "url": "https://developer.apple.com/documentation/musickit/artist/description",
    "html": "Discussion\n\nCalling this property directly is discouraged. Instead, convert an instance of any type to a string by using the String(describing:) initializer. This initializer works with any type, and uses the custom description property for types that conform to CustomStringConvertible:\n\nstruct Point: CustomStringConvertible {\n    let x: Int, y: Int\n\n\n    var description: String {\n        return \"(\\(x), \\(y))\"\n    }\n}\n\n\nlet p = Point(x: 21, y: 30)\nlet s = String(describing: p)\nprint(s)\n// Prints \"(21, 30)\"\n\n\nThe conversion of p to a string in the assignment to s uses the Point type’s description property."
  },
  {
    "title": "encode(to:)",
    "url": "https://developer.apple.com/documentation/musickit/artist/encode(to:)",
    "html": "Parameters\nencoder\n\nThe encoder to write data to.\n\nDiscussion\n\nIf the value fails to encode anything, encoder will encode an empty keyed container in its place.\n\nThis function throws an error if any values are invalid for the given encoder’s format."
  },
  {
    "title": "debugDescription",
    "url": "https://developer.apple.com/documentation/musickit/artist/debugdescription",
    "html": "Discussion\n\nCalling this property directly is discouraged. Instead, convert an instance of any type to a string by using the String(reflecting:) initializer. This initializer works with any type, and uses the custom debugDescription property for types that conform to CustomDebugStringConvertible:\n\nstruct Point: CustomDebugStringConvertible {\n    let x: Int, y: Int\n\n\n    var debugDescription: String {\n        return \"(\\(x), \\(y))\"\n    }\n}\n\n\nlet p = Point(x: 21, y: 30)\nlet s = String(reflecting: p)\nprint(s)\n// Prints \"(21, 30)\"\n\n\nThe conversion of p to a string in the assignment to s uses the Point type’s debugDescription property."
  },
  {
    "title": "encode(to:)",
    "url": "https://developer.apple.com/documentation/musickit/musiccatalogchartkind/encode(to:)",
    "html": "Parameters\nencoder\n\nThe encoder to write data to.\n\nDiscussion\n\nIf the value fails to encode anything, encoder will encode an empty keyed container in its place.\n\nThis function throws an error if any values are invalid for the given encoder’s format."
  },
  {
    "title": "with(_:preferredSource:)",
    "url": "https://developer.apple.com/documentation/musickit/artist/with(_:preferredsource:)",
    "html": "Discussion\n\nThis asynchronous method fetches a more complete representation of the receiver, loading the contents for each property you request from either the Apple Music catalog or the user’s library, depending on the preferred source as well the availability of the content in those respective data sources.\n\nFor example, if you want to load the tracks relationship for an Album, as found in the user’s library, as well as other associations of content that only live in the Apple Music catalog, like the recordLabels and relatedAlbums associations, you can use this code:\n\nlet album: Album = …\nlet detailedAlbum = try await album.with(\n    [\n        .tracks,\n        .recordLabels,\n        .relatedAlbums\n    ],\n    preferredSource: .library\n)\n\n\nHere, because the tracks relationship for an Album is supported in both the library and the catalog, and because the this code specifically requests MusicPropertySource.library as the preferred source, the framework will load the tracks from the user’s library. However, because the recordLabels and relatedAlbums associations are only available in the Apple Music catalog, the framework will also issue a network request to Apple Music API to fetch those associations of content from the catalog."
  },
  {
    "title": "with(_:)",
    "url": "https://developer.apple.com/documentation/musickit/artist/with(_:)",
    "html": "Discussion\n\nThis asynchronous method fetches a more complete representation of the receiver from Apple Music API over the network."
  },
  {
    "title": "init(from:)",
    "url": "https://developer.apple.com/documentation/musickit/artist/init(from:)",
    "html": "Parameters\ndecoder\n\nThe decoder to read data from.\n\nDiscussion\n\nThis initializer throws an error if reading from the decoder fails, or if the data read is corrupted or otherwise invalid."
  },
  {
    "title": "contains(_:)",
    "url": "https://developer.apple.com/documentation/musickit/musicitemcollection/contains(_:)-84iyr",
    "html": "Parameters\nother\n\nA sequence to search for within this collection.\n\nReturn Value\n\ntrue if the collection contains the specified sequence, otherwise false."
  },
  {
    "title": "startIndex",
    "url": "https://developer.apple.com/documentation/musickit/musicitemcollection/startindex",
    "html": "Discussion\n\nIf the collection is empty, startIndex is equal to endIndex."
  },
  {
    "title": "drop(while:)",
    "url": "https://developer.apple.com/documentation/musickit/musicitemcollection/drop(while:)",
    "html": "Parameters\npredicate\n\nA closure that takes an element of the sequence as its argument and returns true if the element should be skipped or false if it should be included. Once the predicate returns false it will not be called again.\n\nDiscussion\n\nComplexity\n\nO(n), where n is the length of the collection."
  },
  {
    "title": "firstRange(of:)",
    "url": "https://developer.apple.com/documentation/musickit/musicitemcollection/firstrange(of:)-8ftik",
    "html": "Parameters\nother\n\nThe collection to search for.\n\nReturn Value\n\nA range in the collection of the first occurrence of sequence. Returns nil if sequence is not found."
  },
  {
    "title": "debugDescription",
    "url": "https://developer.apple.com/documentation/musickit/musiclibraryresponse/debugdescription",
    "html": "Discussion\n\nCalling this property directly is discouraged. Instead, convert an instance of any type to a string by using the String(reflecting:) initializer. This initializer works with any type, and uses the custom debugDescription property for types that conform to CustomDebugStringConvertible:\n\nstruct Point: CustomDebugStringConvertible {\n    let x: Int, y: Int\n\n\n    var debugDescription: String {\n        return \"(\\(x), \\(y))\"\n    }\n}\n\n\nlet p = Point(x: 21, y: 30)\nlet s = String(reflecting: p)\nprint(s)\n// Prints \"(21, 30)\"\n\n\nThe conversion of p to a string in the assignment to s uses the Point type’s debugDescription property."
  },
  {
    "title": "hashValue",
    "url": "https://developer.apple.com/documentation/musickit/musiclibraryresponse/hashvalue",
    "html": "Discussion\n\nHash values are not guaranteed to be equal across different executions of your program. Do not save hash values to use during a future execution.\n\nImportant\n\nhashValue is deprecated as a Hashable requirement. To conform to Hashable, implement the hash(into:) requirement instead. The compiler provides an implementation for hashValue for you."
  },
  {
    "title": "description",
    "url": "https://developer.apple.com/documentation/musickit/musiclibrarysection/description",
    "html": "Discussion\n\nCalling this property directly is discouraged. Instead, convert an instance of any type to a string by using the String(describing:) initializer. This initializer works with any type, and uses the custom description property for types that conform to CustomStringConvertible:\n\nstruct Point: CustomStringConvertible {\n    let x: Int, y: Int\n\n\n    var description: String {\n        return \"(\\(x), \\(y))\"\n    }\n}\n\n\nlet p = Point(x: 21, y: 30)\nlet s = String(describing: p)\nprint(s)\n// Prints \"(21, 30)\"\n\n\nThe conversion of p to a string in the assignment to s uses the Point type’s description property."
  },
  {
    "title": "debugDescription",
    "url": "https://developer.apple.com/documentation/musickit/musiclibrarysection/debugdescription",
    "html": "Discussion\n\nCalling this property directly is discouraged. Instead, convert an instance of any type to a string by using the String(reflecting:) initializer. This initializer works with any type, and uses the custom debugDescription property for types that conform to CustomDebugStringConvertible:\n\nstruct Point: CustomDebugStringConvertible {\n    let x: Int, y: Int\n\n\n    var debugDescription: String {\n        return \"(\\(x), \\(y))\"\n    }\n}\n\n\nlet p = Point(x: 21, y: 30)\nlet s = String(reflecting: p)\nprint(s)\n// Prints \"(21, 30)\"\n\n\nThe conversion of p to a string in the assignment to s uses the Point type’s debugDescription property."
  },
  {
    "title": "==(_:_:)",
    "url": "https://developer.apple.com/documentation/musickit/musiccatalogchart/==(_:_:)",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nEquality is the inverse of inequality. For any values a and b, a == b implies that a != b is false."
  },
  {
    "title": "debugDescription",
    "url": "https://developer.apple.com/documentation/musickit/musiccatalogsearchsuggestionsresponse/debugdescription",
    "html": "Discussion\n\nCalling this property directly is discouraged. Instead, convert an instance of any type to a string by using the String(reflecting:) initializer. This initializer works with any type, and uses the custom debugDescription property for types that conform to CustomDebugStringConvertible:\n\nstruct Point: CustomDebugStringConvertible {\n    let x: Int, y: Int\n\n\n    var debugDescription: String {\n        return \"(\\(x), \\(y))\"\n    }\n}\n\n\nlet p = Point(x: 21, y: 30)\nlet s = String(reflecting: p)\nprint(s)\n// Prints \"(21, 30)\"\n\n\nThe conversion of p to a string in the assignment to s uses the Point type’s debugDescription property."
  },
  {
    "title": "compactMap(_:)",
    "url": "https://developer.apple.com/documentation/musickit/musicsubscription/updates/compactmap(_:)-7ai6a",
    "html": "Parameters\ntransform\n\nA mapping closure. transform accepts an element of this sequence as its parameter and returns a transformed value of the same or of a different type.\n\nReturn Value\n\nAn asynchronous sequence that contains, in order, the non-nil elements produced by the transform closure.\n\nDiscussion\n\nUse the compactMap(_:) method to transform every element received from a base asynchronous sequence, while also discarding any nil results from the closure. Typically, you use this to transform from one type of element to another.\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 5. The closure provided to the compactMap(_:) method takes each Int and looks up a corresponding String from a romanNumeralDict dictionary. Because there is no key for 4, the closure returns nil in this case, which compactMap(_:) omits from the transformed asynchronous sequence.\n\nlet romanNumeralDict: [Int: String] =\n    [1: \"I\", 2: \"II\", 3: \"III\", 5: \"V\"]\n    \nlet stream = Counter(howHigh: 5)\n    .compactMap { romanNumeralDict[$0] }\nfor await numeral in stream {\n    print(numeral, terminator: \" \")\n}\n// Prints \"I II III V \"\n"
  },
  {
    "title": "!=(_:_:)",
    "url": "https://developer.apple.com/documentation/musickit/musiclibrarysearchrequest/!=(_:_:)",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nInequality is the inverse of equality. For any values a and b, a != b implies that a == b is false.\n\nThis is the default implementation of the not-equal-to operator (!=) for any type that conforms to Equatable."
  },
  {
    "title": "compactMap(_:)",
    "url": "https://developer.apple.com/documentation/musickit/musicsubscription/updates/compactmap(_:)-1213o",
    "html": "Parameters\ntransform\n\nAn error-throwing mapping closure. transform accepts an element of this sequence as its parameter and returns a transformed value of the same or of a different type. If transform throws an error, the sequence ends.\n\nReturn Value\n\nAn asynchronous sequence that contains, in order, the non-nil elements produced by the transform closure. The sequence ends either when the base sequence ends or when transform throws an error.\n\nDiscussion\n\nUse the compactMap(_:) method to transform every element received from a base asynchronous sequence, while also discarding any nil results from the closure. Typically, you use this to transform from one type of element to another.\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 5. The closure provided to the compactMap(_:) method takes each Int and looks up a corresponding String from a romanNumeralDict dictionary. Since there is no key for 4, the closure returns nil in this case, which compactMap(_:) omits from the transformed asynchronous sequence. When the value is 5, the closure throws MyError, terminating the sequence.\n\nlet romanNumeralDict: [Int: String] =\n    [1: \"I\", 2: \"II\", 3: \"III\", 5: \"V\"]\n\n\ndo {\n    let stream = Counter(howHigh: 5)\n        .compactMap { (value) throws -> String? in\n            if value == 5 {\n                throw MyError()\n            }\n            return romanNumeralDict[value]\n        }\n    for try await numeral in stream {\n        print(numeral, terminator: \" \")\n    }\n} catch {\n    print(\"Error: \\(error)\")\n}\n// Prints \"I II III Error: MyError() \"\n"
  },
  {
    "title": "dropFirst(_:)",
    "url": "https://developer.apple.com/documentation/musickit/musicsubscription/updates/dropfirst(_:)",
    "html": "Parameters\ncount\n\nThe number of elements to drop from the beginning of the sequence. count must be greater than or equal to zero.\n\nReturn Value\n\nAn asynchronous sequence that drops the first count elements from the base sequence.\n\nDiscussion\n\nUse dropFirst(_:) when you want to drop the first n elements from the base sequence and pass through the remaining elements.\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 10. The dropFirst(_:) method causes the modified sequence to ignore the values 1 through 3, and instead emit 4 through 10:\n\nfor await number in Counter(howHigh: 10).dropFirst(3) {\n    print(number, terminator: \" \")\n}\n// Prints \"4 5 6 7 8 9 10 \"\n\n\nIf the number of elements to drop exceeds the number of elements in the sequence, the result is an empty sequence."
  },
  {
    "title": "drop(while:)",
    "url": "https://developer.apple.com/documentation/musickit/musicsubscription/updates/drop(while:)",
    "html": "Parameters\npredicate\n\nA closure that takes an element as a parameter and returns a Boolean value indicating whether to drop the element from the modified sequence.\n\nReturn Value\n\nAn asynchronous sequence that skips over values from the base sequence until the provided closure returns false.\n\nDiscussion\n\nUse drop(while:) to omit elements from an asynchronous sequence until the element received meets a condition you specify.\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 10. The drop(while:) method causes the modified sequence to ignore received values until it encounters one that is divisible by 3:\n\nlet stream = Counter(howHigh: 10)\n    .drop { $0 % 3 != 0 }\nfor await number in stream {\n    print(number, terminator: \" \")\n}\n// Prints \"3 4 5 6 7 8 9 10 \"\n\n\nAfter the predicate returns false, the sequence never executes it again, and from then on the sequence passes through elements from its underlying sequence as-is."
  },
  {
    "title": "contains(_:)",
    "url": "https://developer.apple.com/documentation/musickit/musicsubscription/updates/contains(_:)",
    "html": "Parameters\nsearch\n\nThe element to find in the asynchronous sequence.\n\nReturn Value\n\ntrue if the method found the element in the asynchronous sequence; otherwise, false.\n\nDiscussion\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 10. The contains(_:) method checks to see whether the sequence produces the value 5:\n\nlet containsFive = await Counter(howHigh: 10)\n    .contains(5)\nprint(containsFive)\n// Prints \"true\"\n"
  },
  {
    "title": "contains(where:)",
    "url": "https://developer.apple.com/documentation/musickit/musicsubscription/updates/contains(where:)",
    "html": "Parameters\npredicate\n\nA closure that takes an element of the asynchronous sequence as its argument and returns a Boolean value that indicates whether the passed element represents a match.\n\nReturn Value\n\ntrue if the sequence contains an element that satisfies predicate; otherwise, false.\n\nDiscussion\n\nYou can use the predicate to check for an element of a type that doesn’t conform to the Equatable protocol, or to find an element that satisfies a general condition.\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 10. The contains(where:) method checks to see whether the sequence produces a value divisible by 3:\n\nlet containsDivisibleByThree = await Counter(howHigh: 10)\n    .contains { $0 % 3 == 0 }\nprint(containsDivisibleByThree)\n// Prints \"true\"\n\n\nThe predicate executes each time the asynchronous sequence produces an element, until either the predicate finds a match or the sequence ends."
  },
  {
    "title": "filter(_:)",
    "url": "https://developer.apple.com/documentation/musickit/musicsubscription/updates/filter(_:)",
    "html": "Parameters\nisIncluded\n\nA closure that takes an element of the asynchronous sequence as its argument and returns a Boolean value that indicates whether to include the element in the filtered sequence.\n\nReturn Value\n\nAn asynchronous sequence that contains, in order, the elements of the base sequence that satisfy the given predicate.\n\nDiscussion\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 10. The filter(_:) method returns true for even values and false for odd values, thereby filtering out the odd values:\n\nlet stream = Counter(howHigh: 10)\n    .filter { $0 % 2 == 0 }\nfor await number in stream {\n    print(number, terminator: \" \")\n}\n// Prints \"2 4 6 8 10 \"\n"
  },
  {
    "title": "flatMap(_:)",
    "url": "https://developer.apple.com/documentation/musickit/musicsubscription/updates/flatmap(_:)-7bx0r",
    "html": "Parameters\ntransform\n\nA mapping closure. transform accepts an element of this sequence as its parameter and returns an AsyncSequence.\n\nReturn Value\n\nA single, flattened asynchronous sequence that contains all elements in all the asynchronous sequences produced by transform.\n\nDiscussion\n\nUse this method to receive a single-level asynchronous sequence when your transformation produces an asynchronous sequence for each element.\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 5. The transforming closure takes the received Int and returns a new Counter that counts that high. For example, when the transform receives 3 from the base sequence, it creates a new Counter that produces the values 1, 2, and 3. The flatMap(_:) method “flattens” the resulting sequence-of-sequences into a single AsyncSequence.\n\nlet stream = Counter(howHigh: 5)\n    .flatMap { Counter(howHigh: $0) }\nfor await number in stream {\n    print(number, terminator: \" \")\n}\n// Prints \"1 1 2 1 2 3 1 2 3 4 1 2 3 4 5 \"\n"
  },
  {
    "title": "flatMap(_:)",
    "url": "https://developer.apple.com/documentation/musickit/musicsubscription/updates/flatmap(_:)-97m7b",
    "html": "Parameters\ntransform\n\nAn error-throwing mapping closure. transform accepts an element of this sequence as its parameter and returns an AsyncSequence. If transform throws an error, the sequence ends.\n\nReturn Value\n\nA single, flattened asynchronous sequence that contains all elements in all the asynchronous sequences produced by transform. The sequence ends either when the last sequence created from the last element from base sequence ends, or when transform throws an error.\n\nDiscussion\n\nUse this method to receive a single-level asynchronous sequence when your transformation produces an asynchronous sequence for each element.\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 5. The transforming closure takes the received Int and returns a new Counter that counts that high. For example, when the transform receives 3 from the base sequence, it creates a new Counter that produces the values 1, 2, and 3. The flatMap(_:) method “flattens” the resulting sequence-of-sequences into a single AsyncSequence. However, when the closure receives 4, it throws an error, terminating the sequence.\n\ndo {\n    let stream = Counter(howHigh: 5)\n        .flatMap { (value) -> Counter in\n            if value == 4 {\n                throw MyError()\n            }\n            return Counter(howHigh: value)\n        }\n    for try await number in stream {\n        print(number, terminator: \" \")\n    }\n} catch {\n    print(error)\n}\n// Prints \"1 1 2 1 2 3 MyError() \"\n"
  },
  {
    "title": "map(_:)",
    "url": "https://developer.apple.com/documentation/musickit/musicsubscription/updates/map(_:)-9tsek",
    "html": "Parameters\ntransform\n\nA mapping closure. transform accepts an element of this sequence as its parameter and returns a transformed value of the same or of a different type. transform can also throw an error, which ends the transformed sequence.\n\nReturn Value\n\nAn asynchronous sequence that contains, in order, the elements produced by the transform closure.\n\nDiscussion\n\nUse the map(_:) method to transform every element received from a base asynchronous sequence. Typically, you use this to transform from one type of element to another.\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 5. The closure provided to the map(_:) method takes each Int and looks up a corresponding String from a romanNumeralDict dictionary. This means the outer for await in loop iterates over String instances instead of the underlying Int values that Counter produces. Also, the dictionary doesn’t provide a key for 4, and the closure throws an error for any key it can’t look up, so receiving this value from Counter ends the modified sequence with an error.\n\nlet romanNumeralDict: [Int: String] =\n    [1: \"I\", 2: \"II\", 3: \"III\", 5: \"V\"]\n\n\ndo {\n    let stream = Counter(howHigh: 5)\n        .map { (value) throws -> String in\n            guard let roman = romanNumeralDict[value] else {\n                throw MyError()\n            }\n            return roman\n        }\n    for try await numeral in stream {\n        print(numeral, terminator: \" \")\n    }\n} catch {\n    print(\"Error: \\(error)\")\n}\n// Prints \"I II III Error: MyError() \"\n"
  },
  {
    "title": "reduce(into:_:)",
    "url": "https://developer.apple.com/documentation/musickit/musicsubscription/updates/reduce(into:_:)",
    "html": "Parameters\ninitialResult\n\nThe value to use as the initial accumulating value. The nextPartialResult closure receives initialResult the first time the closure executes.\n\nnextPartialResult\n\nA closure that combines an accumulating value and an element of the asynchronous sequence into a new accumulating value, for use in the next call of the nextPartialResult closure or returned to the caller.\n\nReturn Value\n\nThe final accumulated value. If the sequence has no elements, the result is initialResult.\n\nDiscussion\n\nUse the reduce(into:_:) method to produce a single value from the elements of an entire sequence. For example, you can use this method on a sequence of numbers to find their sum or product.\n\nThe nextPartialResult closure executes sequentially with an accumulating value initialized to initialResult and each element of the sequence.\n\nPrefer this method over reduce(_:_:) for efficiency when the result is a copy-on-write type, for example an Array or Dictionary."
  },
  {
    "title": "map(_:)",
    "url": "https://developer.apple.com/documentation/musickit/musicsubscription/updates/map(_:)-4x0yk",
    "html": "Parameters\ntransform\n\nA mapping closure. transform accepts an element of this sequence as its parameter and returns a transformed value of the same or of a different type.\n\nReturn Value\n\nAn asynchronous sequence that contains, in order, the elements produced by the transform closure.\n\nDiscussion\n\nUse the map(_:) method to transform every element received from a base asynchronous sequence. Typically, you use this to transform from one type of element to another.\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 5. The closure provided to the map(_:) method takes each Int and looks up a corresponding String from a romanNumeralDict dictionary. This means the outer for await in loop iterates over String instances instead of the underlying Int values that Counter produces:\n\nlet romanNumeralDict: [Int: String] =\n    [1: \"I\", 2: \"II\", 3: \"III\", 5: \"V\"]\n\n\nlet stream = Counter(howHigh: 5)\n    .map { romanNumeralDict[$0] ?? \"(unknown)\" }\nfor await numeral in stream {\n    print(numeral, terminator: \" \")\n}\n// Prints \"I II III (unknown) V \"\n"
  },
  {
    "title": "prefix(_:)",
    "url": "https://developer.apple.com/documentation/musickit/musicsubscription/updates/prefix(_:)",
    "html": "Parameters\ncount\n\nThe maximum number of elements to return. The value of count must be greater than or equal to zero.\n\nReturn Value\n\nAn asynchronous sequence starting at the beginning of the base sequence with at most count elements.\n\nDiscussion\n\nUse prefix(_:) to reduce the number of elements produced by the asynchronous sequence.\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 10. The prefix(_:) method causes the modified sequence to pass through the first six values, then end.\n\nfor await number in Counter(howHigh: 10).prefix(6) {\n    print(number, terminator: \" \")\n}\n// Prints \"1 2 3 4 5 6 \"\n\n\nIf the count passed to prefix(_:) exceeds the number of elements in the base sequence, the result contains all of the elements in the sequence."
  },
  {
    "title": "prefix(while:)",
    "url": "https://developer.apple.com/documentation/musickit/musicsubscription/updates/prefix(while:)",
    "html": "Parameters\npredicate\n\nA closure that takes an element as a parameter and returns a Boolean value indicating whether the element should be included in the modified sequence.\n\nReturn Value\n\nAn asynchronous sequence of the initial, consecutive elements that satisfy predicate.\n\nDiscussion\n\nUse prefix(while:) to produce values while elements from the base sequence meet a condition you specify. The modified sequence ends when the predicate closure returns false.\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 10. The prefix(while:) method causes the modified sequence to pass along values so long as they aren’t divisible by 2 and 3. Upon reaching 6, the sequence ends:\n\nlet stream = Counter(howHigh: 10)\n    .prefix { $0 % 2 != 0 || $0 % 3 != 0 }\nfor try await number in stream {\n    print(number, terminator: \" \")\n}\n// Prints \"1 2 3 4 5 \"\n"
  },
  {
    "title": "reduce(_:_:)",
    "url": "https://developer.apple.com/documentation/musickit/musicsubscription/updates/reduce(_:_:)",
    "html": "Parameters\ninitialResult\n\nThe value to use as the initial accumulating value. The nextPartialResult closure receives initialResult the first time the closure runs.\n\nnextPartialResult\n\nA closure that combines an accumulating value and an element of the asynchronous sequence into a new accumulating value, for use in the next call of the nextPartialResult closure or returned to the caller.\n\nReturn Value\n\nThe final accumulated value. If the sequence has no elements, the result is initialResult.\n\nDiscussion\n\nUse the reduce(_:_:) method to produce a single value from the elements of an entire sequence. For example, you can use this method on an sequence of numbers to find their sum or product.\n\nThe nextPartialResult closure executes sequentially with an accumulating value initialized to initialResult and each element of the sequence.\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 4. The reduce(_:_:) method sums the values received from the asynchronous sequence.\n\nlet sum = await Counter(howHigh: 4)\n    .reduce(0) {\n        $0 + $1\n    }\nprint(sum)\n// Prints \"10\"\n"
  },
  {
    "title": "description",
    "url": "https://developer.apple.com/documentation/musickit/musiccatalogsearchsuggestionsresponse/description",
    "html": "Discussion\n\nCalling this property directly is discouraged. Instead, convert an instance of any type to a string by using the String(describing:) initializer. This initializer works with any type, and uses the custom description property for types that conform to CustomStringConvertible:\n\nstruct Point: CustomStringConvertible {\n    let x: Int, y: Int\n\n\n    var description: String {\n        return \"(\\(x), \\(y))\"\n    }\n}\n\n\nlet p = Point(x: 21, y: 30)\nlet s = String(describing: p)\nprint(s)\n// Prints \"(21, 30)\"\n\n\nThe conversion of p to a string in the assignment to s uses the Point type’s description property."
  },
  {
    "title": "encode(to:)",
    "url": "https://developer.apple.com/documentation/musickit/audiovariant/encode(to:)",
    "html": "Parameters\nencoder\n\nThe encoder to write data to.\n\nDiscussion\n\nIf the value fails to encode anything, encoder will encode an empty keyed container in its place.\n\nThis function throws an error if any values are invalid for the given encoder’s format."
  },
  {
    "title": "init(from:)",
    "url": "https://developer.apple.com/documentation/musickit/audiovariant/init(from:)",
    "html": "Parameters\ndecoder\n\nThe decoder to read data from.\n\nDiscussion\n\nThis initializer throws an error if reading from the decoder fails, or if the data read is corrupted or otherwise invalid."
  },
  {
    "title": "description",
    "url": "https://developer.apple.com/documentation/musickit/audiovariant/description",
    "html": "Discussion\n\nCalling this property directly is discouraged. Instead, convert an instance of any type to a string by using the String(describing:) initializer. This initializer works with any type, and uses the custom description property for types that conform to CustomStringConvertible:\n\nstruct Point: CustomStringConvertible {\n    let x: Int, y: Int\n\n\n    var description: String {\n        return \"(\\(x), \\(y))\"\n    }\n}\n\n\nlet p = Point(x: 21, y: 30)\nlet s = String(describing: p)\nprint(s)\n// Prints \"(21, 30)\"\n\n\nThe conversion of p to a string in the assignment to s uses the Point type’s description property."
  },
  {
    "title": "!=(_:_:)",
    "url": "https://developer.apple.com/documentation/musickit/audiovariant/!=(_:_:)",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nInequality is the inverse of equality. For any values a and b, a != b implies that a == b is false.\n\nThis is the default implementation of the not-equal-to operator (!=) for any type that conforms to Equatable."
  },
  {
    "title": "MusicItem Implementations",
    "url": "https://developer.apple.com/documentation/musickit/playlist/entry/item-swift.enum/musicitem-implementations",
    "html": "Topics\nInstance Methods\nfunc with([PartialMusicAsyncProperty<Self>]) async throws -> Self\nLoads a new instance of the music item that includes the specified properties.\nAvailable when Self conforms to MusicPropertyContainer and Decodable.\nfunc with([PartialMusicAsyncProperty<Self>], preferredSource: MusicPropertySource) async throws -> Self\nLoads a new instance of the music item that includes the specified properties.\nAvailable when Self conforms to MusicPropertyContainer and Decodable."
  },
  {
    "title": "encode(to:)",
    "url": "https://developer.apple.com/documentation/musickit/musiccatalogchart/encode(to:)",
    "html": "Parameters\nencoder\n\nThe encoder to write data to.\n\nDiscussion\n\nIf the value fails to encode anything, encoder will encode an empty keyed container in its place.\n\nThis function throws an error if any values are invalid for the given encoder’s format."
  },
  {
    "title": "isEmpty",
    "url": "https://developer.apple.com/documentation/musickit/musicitemcollection/isempty",
    "html": "Discussion\n\nWhen you need to check whether your collection is empty, use the isEmpty property instead of checking that the count property is equal to zero. For collections that don’t conform to RandomAccessCollection, accessing the count property iterates through the elements of the collection.\n\nlet horseName = \"Silver\"\nif horseName.isEmpty {\n    print(\"My horse has no name.\")\n} else {\n    print(\"Hi ho, \\(horseName)!\")\n}\n// Prints \"Hi ho, Silver!\")\n\n\nComplexity\n\nO(1)"
  },
  {
    "title": "first",
    "url": "https://developer.apple.com/documentation/musickit/musicitemcollection/first",
    "html": "Discussion\n\nIf the collection is empty, the value of this property is nil.\n\nlet numbers = [10, 20, 30, 40, 50]\nif let firstNumber = numbers.first {\n    print(firstNumber)\n}\n// Prints \"10\"\n"
  },
  {
    "title": "underestimatedCount",
    "url": "https://developer.apple.com/documentation/musickit/musicitemcollection/underestimatedcount",
    "html": "Discussion\n\nComplexity\n\nO(1) if the collection conforms to RandomAccessCollection; otherwise, O(n), where n is the length of the collection."
  },
  {
    "title": "dropFirst(_:)",
    "url": "https://developer.apple.com/documentation/musickit/musicitemcollection/dropfirst(_:)",
    "html": "Parameters\nk\n\nThe number of elements to drop from the beginning of the collection. k must be greater than or equal to zero.\n\nReturn Value\n\nA subsequence starting after the specified number of elements.\n\nDiscussion\n\nIf the number of elements to drop exceeds the number of elements in the collection, the result is an empty subsequence.\n\nlet numbers = [1, 2, 3, 4, 5]\nprint(numbers.dropFirst(2))\n// Prints \"[3, 4, 5]\"\nprint(numbers.dropFirst(10))\n// Prints \"[]\"\n\n\nComplexity\n\nO(1) if the collection conforms to RandomAccessCollection; otherwise, O(k), where k is the number of elements to drop from the beginning of the collection."
  },
  {
    "title": "firstIndex(where:)",
    "url": "https://developer.apple.com/documentation/musickit/musicitemcollection/firstindex(where:)",
    "html": "Parameters\npredicate\n\nA closure that takes an element as its argument and returns a Boolean value that indicates whether the passed element represents a match.\n\nReturn Value\n\nThe index of the first element for which predicate returns true. If no elements in the collection satisfy the given predicate, returns nil.\n\nDiscussion\n\nYou can use the predicate to find an element of a type that doesn’t conform to the Equatable protocol or to find an element that matches particular criteria. Here’s an example that finds a student name that begins with the letter “A”:\n\nlet students = [\"Kofi\", \"Abena\", \"Peter\", \"Kweku\", \"Akosua\"]\nif let i = students.firstIndex(where: { $0.hasPrefix(\"A\") }) {\n    print(\"\\(students[i]) starts with 'A'!\")\n}\n// Prints \"Abena starts with 'A'!\"\n\n\nComplexity\n\nO(n), where n is the length of the collection."
  },
  {
    "title": "formIndex(_:offsetBy:limitedBy:)",
    "url": "https://developer.apple.com/documentation/musickit/musicitemcollection/formindex(_:offsetby:limitedby:)",
    "html": "Parameters\ni\n\nA valid index of the collection.\n\ndistance\n\nThe distance to offset i. distance must not be negative unless the collection conforms to the BidirectionalCollection protocol.\n\nlimit\n\nA valid index of the collection to use as a limit. If distance > 0, a limit that is less than i has no effect. Likewise, if distance < 0, a limit that is greater than i has no effect.\n\nReturn Value\n\ntrue if i has been offset by exactly distance steps without going beyond limit; otherwise, false. When the return value is false, the value of i is equal to limit.\n\nDiscussion\n\nThe value passed as distance must not offset i beyond the bounds of the collection, unless the index passed as limit prevents offsetting beyond those bounds.\n\nComplexity\n\nO(1) if the collection conforms to RandomAccessCollection; otherwise, O(k), where k is the absolute value of distance."
  },
  {
    "title": "prefix(_:)",
    "url": "https://developer.apple.com/documentation/musickit/musicitemcollection/prefix(_:)",
    "html": "Parameters\nmaxLength\n\nThe maximum number of elements to return. maxLength must be greater than or equal to zero.\n\nReturn Value\n\nA subsequence starting at the beginning of this collection with at most maxLength elements.\n\nDiscussion\n\nIf the maximum length exceeds the number of elements in the collection, the result contains all the elements in the collection.\n\nlet numbers = [1, 2, 3, 4, 5]\nprint(numbers.prefix(2))\n// Prints \"[1, 2]\"\nprint(numbers.prefix(10))\n// Prints \"[1, 2, 3, 4, 5]\"\n\n\nComplexity\n\nO(1) if the collection conforms to RandomAccessCollection; otherwise, O(k), where k is the number of elements to select from the beginning of the collection."
  },
  {
    "title": "firstIndex(of:)",
    "url": "https://developer.apple.com/documentation/musickit/musicitemcollection/firstindex(of:)",
    "html": "Parameters\nelement\n\nAn element to search for in the collection.\n\nReturn Value\n\nThe first index where element is found. If element is not found in the collection, returns nil.\n\nDiscussion\n\nAfter using firstIndex(of:) to find the position of a particular element in a collection, you can use it to access the element by subscripting. This example shows how you can modify one of the names in an array of students.\n\nvar students = [\"Ben\", \"Ivy\", \"Jordell\", \"Maxime\"]\nif let i = students.firstIndex(of: \"Maxime\") {\n    students[i] = \"Max\"\n}\nprint(students)\n// Prints \"[\"Ben\", \"Ivy\", \"Jordell\", \"Max\"]\"\n\n\nComplexity\n\nO(n), where n is the length of the collection."
  },
  {
    "title": "next()",
    "url": "https://developer.apple.com/documentation/musickit/musicsubscription/updates/iterator/next()",
    "html": "Return Value\n\nThe next element, if it exists, or nil to signal the end of the sequence."
  },
  {
    "title": "formIndex(_:offsetBy:)",
    "url": "https://developer.apple.com/documentation/musickit/musicitemcollection/formindex(_:offsetby:)",
    "html": "Parameters\ni\n\nA valid index of the collection.\n\ndistance\n\nThe distance to offset i. distance must not be negative unless the collection conforms to the BidirectionalCollection protocol.\n\nDiscussion\n\nThe value passed as distance must not offset i beyond the bounds of the collection.\n\nComplexity\n\nO(1) if the collection conforms to RandomAccessCollection; otherwise, O(k), where k is the absolute value of distance."
  },
  {
    "title": "prefix(upTo:)",
    "url": "https://developer.apple.com/documentation/musickit/musicitemcollection/prefix(upto:)",
    "html": "Parameters\nend\n\nThe “past the end” index of the resulting subsequence. end must be a valid index of the collection.\n\nReturn Value\n\nA subsequence up to, but not including, the end position.\n\nDiscussion\n\nThe resulting subsequence does not include the element at the position end. The following example searches for the index of the number 40 in an array of integers, and then prints the prefix of the array up to, but not including, that index:\n\nlet numbers = [10, 20, 30, 40, 50, 60]\nif let i = numbers.firstIndex(of: 40) {\n    print(numbers.prefix(upTo: i))\n}\n// Prints \"[10, 20, 30]\"\n\n\nPassing the collection’s starting index as the end parameter results in an empty subsequence.\n\nprint(numbers.prefix(upTo: numbers.startIndex))\n// Prints \"[]\"\n\n\nUsing the prefix(upTo:) method is equivalent to using a partial half-open range as the collection’s subscript. The subscript notation is preferred over prefix(upTo:).\n\nif let i = numbers.firstIndex(of: 40) {\n    print(numbers[..<i])\n}\n// Prints \"[10, 20, 30]\"\n\n\nComplexity\n\nO(1)"
  },
  {
    "title": "prefix(while:)",
    "url": "https://developer.apple.com/documentation/musickit/musicitemcollection/prefix(while:)",
    "html": "Parameters\npredicate\n\nA closure that takes an element of the sequence as its argument and returns true if the element should be included or false if it should be excluded. Once the predicate returns false it will not be called again.\n\nDiscussion\n\nComplexity\n\nO(n), where n is the length of the collection."
  },
  {
    "title": "==(_:_:)",
    "url": "https://developer.apple.com/documentation/musickit/musiclibrarysection/==(_:_:)",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nEquality is the inverse of inequality. For any values a and b, a == b implies that a != b is false."
  },
  {
    "title": "map(_:)",
    "url": "https://developer.apple.com/documentation/musickit/musicitemcollection/map(_:)-8tnbx",
    "html": "Parameters\ntransform\n\nA mapping closure. transform accepts an element of this sequence as its parameter and returns a transformed value of the same or of a different type.\n\nReturn Value\n\nAn array containing the transformed elements of this sequence.\n\nDiscussion\n\nIn this example, map is used first to convert the names in the array to lowercase strings and then to count their characters.\n\nlet cast = [\"Vivien\", \"Marlon\", \"Kim\", \"Karl\"]\nlet lowercaseNames = cast.map { $0.lowercased() }\n// 'lowercaseNames' == [\"vivien\", \"marlon\", \"kim\", \"karl\"]\nlet letterCounts = cast.map { $0.count }\n// 'letterCounts' == [6, 6, 3, 4]\n"
  },
  {
    "title": "prefix(through:)",
    "url": "https://developer.apple.com/documentation/musickit/musicitemcollection/prefix(through:)",
    "html": "Parameters\nposition\n\nThe index of the last element to include in the resulting subsequence. position must be a valid index of the collection that is not equal to the endIndex property.\n\nReturn Value\n\nA subsequence up to, and including, the given position.\n\nDiscussion\n\nThe resulting subsequence includes the element at the position specified by the through parameter. The following example searches for the index of the number 40 in an array of integers, and then prints the prefix of the array up to, and including, that index:\n\nlet numbers = [10, 20, 30, 40, 50, 60]\nif let i = numbers.firstIndex(of: 40) {\n    print(numbers.prefix(through: i))\n}\n// Prints \"[10, 20, 30, 40]\"\n\n\nUsing the prefix(through:) method is equivalent to using a partial closed range as the collection’s subscript. The subscript notation is preferred over prefix(through:).\n\nif let i = numbers.firstIndex(of: 40) {\n    print(numbers[...i])\n}\n// Prints \"[10, 20, 30, 40]\"\n\n\nComplexity\n\nO(1)"
  },
  {
    "title": "hash(into:)",
    "url": "https://developer.apple.com/documentation/musickit/musiclibrarysection/hash(into:)",
    "html": "Parameters\nhasher\n\nThe hasher to use when combining the components of this instance.\n\nDiscussion\n\nImplement this method to conform to the Hashable protocol. The components used for hashing must be the same as the components compared in your type’s == operator implementation. Call hasher.combine(_:) with each of these components.\n\nImportant\n\nIn your implementation of hash(into:), don’t call finalize() on the hasher instance provided, or replace it with a different instance. Doing so may become a compile-time error in the future."
  },
  {
    "title": "!=(_:_:)",
    "url": "https://developer.apple.com/documentation/musickit/musiclibrarysection/!=(_:_:)",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nInequality is the inverse of equality. For any values a and b, a != b implies that a == b is false.\n\nThis is the default implementation of the not-equal-to operator (!=) for any type that conforms to Equatable."
  },
  {
    "title": "hashValue",
    "url": "https://developer.apple.com/documentation/musickit/musiclibrarysection/hashvalue",
    "html": "Discussion\n\nHash values are not guaranteed to be equal across different executions of your program. Do not save hash values to use during a future execution.\n\nImportant\n\nhashValue is deprecated as a Hashable requirement. To conform to Hashable, implement the hash(into:) requirement instead. The compiler provides an implementation for hashValue for you."
  },
  {
    "title": "init(rawValue:)",
    "url": "https://developer.apple.com/documentation/musickit/musiclibrary/error/init(rawvalue:)",
    "html": "Parameters\nrawValue\n\nThe raw value to use for the new instance.\n\nDiscussion\n\nIf there is no value of the type that corresponds with the specified raw value, this initializer returns nil. For example:\n\nenum PaperSize: String {\n    case A4, A5, Letter, Legal\n}\n\n\nprint(PaperSize(rawValue: \"Legal\"))\n// Prints \"Optional(\"PaperSize.Legal\")\"\n\n\nprint(PaperSize(rawValue: \"Tabloid\"))\n// Prints \"nil\"\n"
  },
  {
    "title": "difference(from:by:)",
    "url": "https://developer.apple.com/documentation/musickit/musicitemcollection/difference(from:by:)",
    "html": "Parameters\nother\n\nThe base state.\n\nareEquivalent\n\nA closure that returns a Boolean value indicating whether two elements are equivalent.\n\nReturn Value\n\nThe difference needed to produce the receiver’s state from the parameter’s state.\n\nDiscussion\n\nThis function does not infer element moves. If you need to infer moves, call the inferringMoves() method on the resulting difference.\n\nComplexity\n\nWorst case performance is O(n * m), where n is the count of this collection and m is other.count. You can expect faster execution when the collections share many common elements."
  },
  {
    "title": "randomElement()",
    "url": "https://developer.apple.com/documentation/musickit/musicitemcollection/randomelement()",
    "html": "Return Value\n\nA random element from the collection. If the collection is empty, the method returns nil.\n\nDiscussion\n\nCall randomElement() to select a random element from an array or another collection. This example picks a name at random from an array:\n\nlet names = [\"Zoey\", \"Chloe\", \"Amani\", \"Amaia\"]\nlet randomName = names.randomElement()!\n// randomName == \"Amani\"\n\n\nThis method is equivalent to calling randomElement(using:), passing in the system’s default random generator.\n\nComplexity\n\nO(1) if the collection conforms to RandomAccessCollection; otherwise, O(n), where n is the length of the collection."
  },
  {
    "title": "randomElement(using:)",
    "url": "https://developer.apple.com/documentation/musickit/musicitemcollection/randomelement(using:)",
    "html": "Parameters\ngenerator\n\nThe random number generator to use when choosing a random element.\n\nReturn Value\n\nA random element from the collection. If the collection is empty, the method returns nil.\n\nDiscussion\n\nCall randomElement(using:) to select a random element from an array or another collection when you are using a custom random number generator. This example picks a name at random from an array:\n\nlet names = [\"Zoey\", \"Chloe\", \"Amani\", \"Amaia\"]\nlet randomName = names.randomElement(using: &myGenerator)!\n// randomName == \"Amani\"\n\n\nComplexity\n\nO(1) if the collection conforms to RandomAccessCollection; otherwise, O(n), where n is the length of the collection.\n\nNote\n\nThe algorithm used to select a random element may change in a future version of Swift. If you’re passing a generator that results in the same sequence of elements each time you run your program, that sequence may change when your program is compiled using a different version of Swift."
  },
  {
    "title": "split(separator:maxSplits:omittingEmptySubsequences:)",
    "url": "https://developer.apple.com/documentation/musickit/musicitemcollection/split(separator:maxsplits:omittingemptysubsequences:)-6fvn2",
    "html": "Parameters\nseparator\n\nThe element that should be split upon.\n\nmaxSplits\n\nThe maximum number of times to split the collection, or one less than the number of subsequences to return. If maxSplits + 1 subsequences are returned, the last one is a suffix of the original collection containing the remaining elements. maxSplits must be greater than or equal to zero. The default value is Int.max.\n\nomittingEmptySubsequences\n\nIf false, an empty subsequence is returned in the result for each consecutive pair of separator elements in the collection and for each instance of separator at the start or end of the collection. If true, only nonempty subsequences are returned. The default value is true.\n\nReturn Value\n\nAn array of subsequences, split from this collection’s elements.\n\nDiscussion\n\nThe resulting array consists of at most maxSplits + 1 subsequences. Elements that are used to split the collection are not returned as part of any subsequence.\n\nThe following examples show the effects of the maxSplits and omittingEmptySubsequences parameters when splitting a string at each space character (” “). The first use of split returns each word that was originally separated by one or more spaces.\n\nlet line = \"BLANCHE:   I don't want realism. I want magic!\"\nprint(line.split(separator: \" \"))\n// Prints \"[\"BLANCHE:\", \"I\", \"don\\'t\", \"want\", \"realism.\", \"I\", \"want\", \"magic!\"]\"\n\n\nThe second example passes 1 for the maxSplits parameter, so the original string is split just once, into two new strings.\n\nprint(line.split(separator: \" \", maxSplits: 1))\n// Prints \"[\"BLANCHE:\", \"  I don\\'t want realism. I want magic!\"]\"\n\n\nThe final example passes false for the omittingEmptySubsequences parameter, so the returned array contains empty strings where spaces were repeated.\n\nprint(line.split(separator: \" \", omittingEmptySubsequences: false))\n// Prints \"[\"BLANCHE:\", \"\", \"\", \"I\", \"don\\'t\", \"want\", \"realism.\", \"I\", \"want\", \"magic!\"]\"\n\n\nComplexity\n\nO(n), where n is the length of the collection."
  },
  {
    "title": "suffix(from:)",
    "url": "https://developer.apple.com/documentation/musickit/musicitemcollection/suffix(from:)",
    "html": "Parameters\nstart\n\nThe index at which to start the resulting subsequence. start must be a valid index of the collection.\n\nReturn Value\n\nA subsequence starting at the start position.\n\nDiscussion\n\nThe following example searches for the index of the number 40 in an array of integers, and then prints the suffix of the array starting at that index:\n\nlet numbers = [10, 20, 30, 40, 50, 60]\nif let i = numbers.firstIndex(of: 40) {\n    print(numbers.suffix(from: i))\n}\n// Prints \"[40, 50, 60]\"\n\n\nPassing the collection’s endIndex as the start parameter results in an empty subsequence.\n\nprint(numbers.suffix(from: numbers.endIndex))\n// Prints \"[]\"\n\n\nUsing the suffix(from:) method is equivalent to using a partial range from the index as the collection’s subscript. The subscript notation is preferred over suffix(from:).\n\nif let i = numbers.firstIndex(of: 40) {\n    print(numbers[i...])\n}\n// Prints \"[40, 50, 60]\"\n\n\nComplexity\n\nO(1)"
  },
  {
    "title": "RawRepresentable Implementations",
    "url": "https://developer.apple.com/documentation/musickit/musiclibrary/error/rawrepresentable-implementations",
    "html": "Topics\nInstance Properties\nvar hashValue: Int\nAvailable when Self conforms to Hashable and RawValue conforms to Hashable.\nInstance Methods\nfunc hash(into: inout Hasher)\nAvailable when Self conforms to Hashable and RawValue conforms to Hashable."
  },
  {
    "title": "split(maxSplits:omittingEmptySubsequences:whereSeparator:)",
    "url": "https://developer.apple.com/documentation/musickit/musicitemcollection/split(maxsplits:omittingemptysubsequences:whereseparator:)",
    "html": "Parameters\nmaxSplits\n\nThe maximum number of times to split the collection, or one less than the number of subsequences to return. If maxSplits + 1 subsequences are returned, the last one is a suffix of the original collection containing the remaining elements. maxSplits must be greater than or equal to zero. The default value is Int.max.\n\nomittingEmptySubsequences\n\nIf false, an empty subsequence is returned in the result for each pair of consecutive elements satisfying the isSeparator predicate and for each element at the start or end of the collection satisfying the isSeparator predicate. The default value is true.\n\nisSeparator\n\nA closure that takes an element as an argument and returns a Boolean value indicating whether the collection should be split at that element.\n\nReturn Value\n\nAn array of subsequences, split from this collection’s elements.\n\nDiscussion\n\nThe resulting array consists of at most maxSplits + 1 subsequences. Elements that are used to split the sequence are not returned as part of any subsequence.\n\nThe following examples show the effects of the maxSplits and omittingEmptySubsequences parameters when splitting a string using a closure that matches spaces. The first use of split returns each word that was originally separated by one or more spaces.\n\nlet line = \"BLANCHE:   I don't want realism. I want magic!\"\nprint(line.split(whereSeparator: { $0 == \" \" }))\n// Prints \"[\"BLANCHE:\", \"I\", \"don\\'t\", \"want\", \"realism.\", \"I\", \"want\", \"magic!\"]\"\n\n\nThe second example passes 1 for the maxSplits parameter, so the original string is split just once, into two new strings.\n\nprint(line.split(maxSplits: 1, whereSeparator: { $0 == \" \" }))\n// Prints \"[\"BLANCHE:\", \"  I don\\'t want realism. I want magic!\"]\"\n\n\nThe final example passes false for the omittingEmptySubsequences parameter, so the returned array contains empty strings where spaces were repeated.\n\nprint(line.split(omittingEmptySubsequences: false, whereSeparator: { $0 == \" \" }))\n// Prints \"[\"BLANCHE:\", \"\", \"\", \"I\", \"don\\'t\", \"want\", \"realism.\", \"I\", \"want\", \"magic!\"]\"\n\n\nComplexity\n\nO(n), where n is the length of the collection."
  },
  {
    "title": "ranges(of:)",
    "url": "https://developer.apple.com/documentation/musickit/musicitemcollection/ranges(of:)",
    "html": "Parameters\nother\n\nThe sequence to search for.\n\nReturn Value\n\nA collection of ranges of all occurrences of other. Returns an empty collection if other is not found."
  },
  {
    "title": "split(separator:maxSplits:omittingEmptySubsequences:)",
    "url": "https://developer.apple.com/documentation/musickit/musicitemcollection/split(separator:maxsplits:omittingemptysubsequences:)-33qix",
    "html": "Parameters\nseparator\n\nThe element to be split upon.\n\nReturn Value\n\nA collection of subsequences, split from this collection’s elements."
  },
  {
    "title": "Equatable Implementations",
    "url": "https://developer.apple.com/documentation/musickit/musiclibrary/error/equatable-implementations",
    "html": "Topics\nOperators\nstatic func != (Self, Self) -> Bool\nReturns a Boolean value indicating whether two values are not equal."
  },
  {
    "title": "with(_:)",
    "url": "https://developer.apple.com/documentation/musickit/musicpropertycontainer/with(_:)-10vhk",
    "html": "Discussion\n\nThis asynchronous method fetches a more complete representation of the receiver from Apple Music API over the network."
  },
  {
    "title": "hash(into:)",
    "url": "https://developer.apple.com/documentation/musickit/playlist/entry/hash(into:)",
    "html": "Parameters\nhasher\n\nThe hasher to use when combining the components of this instance.\n\nDiscussion\n\nImplement this method to conform to the Hashable protocol. The components used for hashing must be the same as the components compared in your type’s == operator implementation. Call hasher.combine(_:) with each of these components.\n\nImportant\n\nIn your implementation of hash(into:), don’t call finalize() on the hasher instance provided, or replace it with a different instance. Doing so may become a compile-time error in the future."
  },
  {
    "title": "==(_:_:)",
    "url": "https://developer.apple.com/documentation/musickit/playlist/entry/item-swift.enum/==(_:_:)",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nEquality is the inverse of inequality. For any values a and b, a == b implies that a != b is false."
  },
  {
    "title": "formIntersection(_:)",
    "url": "https://developer.apple.com/documentation/musickit/musictokenrequestoptions/formintersection(_:)",
    "html": "Parameters\nother\n\nAn option set.\n\nDiscussion\n\nThis method is implemented as a & (bitwise AND) operation on the two sets’ raw values."
  },
  {
    "title": "subscript(_:)",
    "url": "https://developer.apple.com/documentation/musickit/musicitemcollection/subscript(_:)-59tw",
    "html": "Parameters\nbounds\n\nA range of the collection’s indices. The bounds of the range must be valid indices of the collection.\n\nOverview\n\nThe range expression is converted to a concrete subrange relative to this collection. For example, using a PartialRangeFrom range expression with an array accesses the subrange from the start of the range expression until the end of the array.\n\nlet streets = [\"Adams\", \"Bryant\", \"Channing\", \"Douglas\", \"Evarts\"]\nlet streetsSlice = streets[2...]\nprint(streetsSlice)\n// [\"Channing\", \"Douglas\", \"Evarts\"]\n\n\nThe accessed slice uses the same indices for the same elements as the original collection uses. This example searches streetsSlice for one of the strings in the slice, and then uses that index in the original array.\n\nlet index = streetsSlice.firstIndex(of: \"Evarts\")    // 4\nprint(streets[index!])\n// \"Evarts\"\n\n\nAlways use the slice’s startIndex property instead of assuming that its indices start at a particular value. Attempting to access an element by using an index outside the bounds of the slice’s indices may result in a runtime error, even if that index is valid for the original collection.\n\nprint(streetsSlice.startIndex)\n// 2\nprint(streetsSlice[2])\n// \"Channing\"\n\n\nprint(streetsSlice[0])\n// error: Index out of bounds\n\n\nComplexity\n\nO(1)"
  },
  {
    "title": "MusicItemCollection.SubSequence",
    "url": "https://developer.apple.com/documentation/musickit/musicitemcollection/subsequence",
    "html": "Discussion\n\nThe default subsequence type for collections that don’t define their own is Slice."
  },
  {
    "title": "subscript(_:)",
    "url": "https://developer.apple.com/documentation/musickit/musicitemcollection/subscript(_:)-766rl",
    "html": "Parameters\nposition\n\nThe position of the element to access. position must be a valid index of the collection that is not equal to the endIndex property.\n\nOverview\n\nThe following example accesses an element of an array through its subscript to print its value:\n\nvar streets = [\"Adams\", \"Bryant\", \"Channing\", \"Douglas\", \"Evarts\"]\nprint(streets[1])\n// Prints \"Bryant\"\n\n\nYou can subscript a collection with any valid index other than the collection’s end index. The end index refers to the position one past the last element of a collection, so it doesn’t correspond with an element.\n\nComplexity\n\nO(1)"
  },
  {
    "title": "endIndex",
    "url": "https://developer.apple.com/documentation/musickit/musicitemcollection/endindex",
    "html": "Discussion\n\nWhen you need a range that includes the last element of a collection, use the half-open range operator (..<) with endIndex. The ..< operator creates a range that doesn’t include the upper bound, so it’s always safe to use with endIndex. For example:\n\nlet numbers = [10, 20, 30, 40, 50]\nif let index = numbers.firstIndex(of: 30) {\n    print(numbers[index ..< numbers.endIndex])\n}\n// Prints \"[30, 40, 50]\"\n\n\nIf the collection is empty, endIndex is equal to startIndex."
  },
  {
    "title": "count",
    "url": "https://developer.apple.com/documentation/musickit/musicitemcollection/count",
    "html": "Discussion\n\nTo check whether a collection is empty, use its isEmpty property instead of comparing count to zero. Unless the collection guarantees random-access performance, calculating count can be an O(n) operation.\n\nComplexity\n\nO(1) if the collection conforms to RandomAccessCollection; otherwise, O(n), where n is the length of the collection."
  },
  {
    "title": "!=(_:_:)",
    "url": "https://developer.apple.com/documentation/musickit/musicitemcollection/!=(_:_:)",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nInequality is the inverse of equality. For any values a and b, a != b implies that a == b is false.\n\nThis is the default implementation of the not-equal-to operator (!=) for any type that conforms to Equatable."
  },
  {
    "title": "hashValue",
    "url": "https://developer.apple.com/documentation/musickit/musicitemcollection/hashvalue",
    "html": "Discussion\n\nHash values are not guaranteed to be equal across different executions of your program. Do not save hash values to use during a future execution.\n\nImportant\n\nhashValue is deprecated as a Hashable requirement. To conform to Hashable, implement the hash(into:) requirement instead. The compiler provides an implementation for hashValue for you."
  },
  {
    "title": "joined(separator:)",
    "url": "https://developer.apple.com/documentation/musickit/musicitemcollection/joined(separator:)-6zlx3",
    "html": "Parameters\nseparator\n\nA string to insert between each of the elements in this sequence. The default separator is an empty string.\n\nReturn Value\n\nA single, concatenated string.\n\nDiscussion\n\nThe following example shows how an array of strings can be joined to a single, comma-separated string:\n\nlet cast = [\"Vivien\", \"Marlon\", \"Kim\", \"Karl\"]\nlet list = cast.joined(separator: \", \")\nprint(list)\n// Prints \"Vivien, Marlon, Kim, Karl\"\n"
  },
  {
    "title": "lastIndex(of:)",
    "url": "https://developer.apple.com/documentation/musickit/musicitemcollection/lastindex(of:)",
    "html": "Parameters\nelement\n\nAn element to search for in the collection.\n\nReturn Value\n\nThe last index where element is found. If element is not found in the collection, this method returns nil.\n\nDiscussion\n\nAfter using lastIndex(of:) to find the position of the last instance of a particular element in a collection, you can use it to access the element by subscripting. This example shows how you can modify one of the names in an array of students.\n\nvar students = [\"Ben\", \"Ivy\", \"Jordell\", \"Ben\", \"Maxime\"]\nif let i = students.lastIndex(of: \"Ben\") {\n    students[i] = \"Benjamin\"\n}\nprint(students)\n// Prints \"[\"Ben\", \"Ivy\", \"Jordell\", \"Benjamin\", \"Max\"]\"\n\n\nComplexity\n\nO(n), where n is the length of the collection."
  },
  {
    "title": "description",
    "url": "https://developer.apple.com/documentation/musickit/musicitemcollection/description",
    "html": "Discussion\n\nCalling this property directly is discouraged. Instead, convert an instance of any type to a string by using the String(describing:) initializer. This initializer works with any type, and uses the custom description property for types that conform to CustomStringConvertible:\n\nstruct Point: CustomStringConvertible {\n    let x: Int, y: Int\n\n\n    var description: String {\n        return \"(\\(x), \\(y))\"\n    }\n}\n\n\nlet p = Point(x: 21, y: 30)\nlet s = String(describing: p)\nprint(s)\n// Prints \"(21, 30)\"\n\n\nThe conversion of p to a string in the assignment to s uses the Point type’s description property."
  },
  {
    "title": "encode(to:)",
    "url": "https://developer.apple.com/documentation/musickit/musicitemcollection/encode(to:)",
    "html": "Parameters\nencoder\n\nThe encoder to write data to.\n\nDiscussion\n\nIf the value fails to encode anything, encoder will encode an empty keyed container in its place.\n\nThis function throws an error if any values are invalid for the given encoder’s format."
  },
  {
    "title": "hashValue",
    "url": "https://developer.apple.com/documentation/musickit/playlist/entry/item-swift.enum/hashvalue",
    "html": "Discussion\n\nHash values are not guaranteed to be equal across different executions of your program. Do not save hash values to use during a future execution.\n\nImportant\n\nhashValue is deprecated as a Hashable requirement. To conform to Hashable, implement the hash(into:) requirement instead. The compiler provides an implementation for hashValue for you."
  },
  {
    "title": "difference(from:)",
    "url": "https://developer.apple.com/documentation/musickit/musicitemcollection/difference(from:)",
    "html": "Parameters\nother\n\nThe base state.\n\nReturn Value\n\nThe difference needed to produce this collection’s ordered elements from the given collection.\n\nDiscussion\n\nThis function does not infer element moves. If you need to infer moves, call the inferringMoves() method on the resulting difference.\n\nComplexity\n\nWorst case performance is O(n * m), where n is the count of this collection and m is other.count. You can expect faster execution when the collections share many common elements, or if Element conforms to Hashable."
  },
  {
    "title": "hash(into:)",
    "url": "https://developer.apple.com/documentation/musickit/playlist/entry/item-swift.enum/hash(into:)",
    "html": "Parameters\nhasher\n\nThe hasher to use when combining the components of this instance.\n\nDiscussion\n\nImplement this method to conform to the Hashable protocol. The components used for hashing must be the same as the components compared in your type’s == operator implementation. Call hasher.combine(_:) with each of these components.\n\nImportant\n\nIn your implementation of hash(into:), don’t call finalize() on the hasher instance provided, or replace it with a different instance. Doing so may become a compile-time error in the future."
  },
  {
    "title": "CustomStringConvertible Implementations",
    "url": "https://developer.apple.com/documentation/musickit/playlist/entry/item-swift.enum/customstringconvertible-implementations",
    "html": "Topics\nInstance Properties\nvar description: String\nA textual representation of this instance."
  },
  {
    "title": "hashValue",
    "url": "https://developer.apple.com/documentation/musickit/musicplayer/shufflemode/hashvalue",
    "html": "Discussion\n\nHash values are not guaranteed to be equal across different executions of your program. Do not save hash values to use during a future execution.\n\nImportant\n\nhashValue is deprecated as a Hashable requirement. To conform to Hashable, implement the hash(into:) requirement instead. The compiler provides an implementation for hashValue for you."
  },
  {
    "title": "Equatable Implementations",
    "url": "https://developer.apple.com/documentation/musickit/musicplayer/shufflemode/equatable-implementations",
    "html": "Topics\nOperators\nstatic func != (Self, Self) -> Bool\nReturns a Boolean value indicating whether two values are not equal."
  },
  {
    "title": "last",
    "url": "https://developer.apple.com/documentation/musickit/musicitemcollection/last",
    "html": "Discussion\n\nIf the collection is empty, the value of this property is nil.\n\nlet numbers = [10, 20, 30, 40, 50]\nif let lastNumber = numbers.last {\n    print(lastNumber)\n}\n// Prints \"50\"\n\n\nComplexity\n\nO(1)"
  },
  {
    "title": "hash(into:)",
    "url": "https://developer.apple.com/documentation/musickit/musicplayer/shufflemode/hash(into:)",
    "html": "Parameters\nhasher\n\nThe hasher to use when combining the components of this instance.\n\nDiscussion\n\nImplement this method to conform to the Hashable protocol. The components used for hashing must be the same as the components compared in your type’s == operator implementation. Call hasher.combine(_:) with each of these components.\n\nImportant\n\nIn your implementation of hash(into:), don’t call finalize() on the hasher instance provided, or replace it with a different instance. Doing so may become a compile-time error in the future."
  },
  {
    "title": "rawValue",
    "url": "https://developer.apple.com/documentation/musickit/musiclibrary/error/rawvalue-swift.property",
    "html": "Discussion\n\nA new instance initialized with rawValue will be equivalent to this instance. For example:\n\nenum PaperSize: String {\n    case A4, A5, Letter, Legal\n}\n\n\nlet selectedSize = PaperSize.Letter\nprint(selectedSize.rawValue)\n// Prints \"Letter\"\n\n\nprint(selectedSize == PaperSize(rawValue: selectedSize.rawValue)!)\n// Prints \"true\"\n"
  },
  {
    "title": "MusicLibrary.Error.RawValue",
    "url": "https://developer.apple.com/documentation/musickit/musiclibrary/error/rawvalue-swift.typealias",
    "html": "Discussion\n\nEvery distinct value of the conforming type has a corresponding unique value of the RawValue type, but there may be values of the RawValue type that don’t have a corresponding value of the conforming type."
  },
  {
    "title": "description",
    "url": "https://developer.apple.com/documentation/musickit/musiclibrary/error/description",
    "html": "Discussion\n\nCalling this property directly is discouraged. Instead, convert an instance of any type to a string by using the String(describing:) initializer. This initializer works with any type, and uses the custom description property for types that conform to CustomStringConvertible:\n\nstruct Point: CustomStringConvertible {\n    let x: Int, y: Int\n\n\n    var description: String {\n        return \"(\\(x), \\(y))\"\n    }\n}\n\n\nlet p = Point(x: 21, y: 30)\nlet s = String(describing: p)\nprint(s)\n// Prints \"(21, 30)\"\n\n\nThe conversion of p to a string in the assignment to s uses the Point type’s description property."
  },
  {
    "title": "MusicLibrary.Error.permissionDenied",
    "url": "https://developer.apple.com/documentation/musickit/musiclibrary/error/permissiondenied",
    "html": "Discussion\n\nApps using MusicKit need to request prior informed consent from the user to access their Apple Music library by calling request() at the appropriate point in the app flow, right before needing to use other APIs from MusicKit."
  },
  {
    "title": "hash(into:)",
    "url": "https://developer.apple.com/documentation/musickit/musiccatalogsearchresponse/topresult/hash(into:)",
    "html": "Parameters\nhasher\n\nThe hasher to use when combining the components of this instance.\n\nDiscussion\n\nImplement this method to conform to the Hashable protocol. The components used for hashing must be the same as the components compared in your type’s == operator implementation. Call hasher.combine(_:) with each of these components.\n\nImportant\n\nIn your implementation of hash(into:), don’t call finalize() on the hasher instance provided, or replace it with a different instance. Doing so may become a compile-time error in the future."
  },
  {
    "title": "debugDescription",
    "url": "https://developer.apple.com/documentation/musickit/musiccatalogsearchresponse/debugdescription",
    "html": "Discussion\n\nCalling this property directly is discouraged. Instead, convert an instance of any type to a string by using the String(reflecting:) initializer. This initializer works with any type, and uses the custom debugDescription property for types that conform to CustomDebugStringConvertible:\n\nstruct Point: CustomDebugStringConvertible {\n    let x: Int, y: Int\n\n\n    var debugDescription: String {\n        return \"(\\(x), \\(y))\"\n    }\n}\n\n\nlet p = Point(x: 21, y: 30)\nlet s = String(reflecting: p)\nprint(s)\n// Prints \"(21, 30)\"\n\n\nThe conversion of p to a string in the assignment to s uses the Point type’s debugDescription property."
  },
  {
    "title": "symmetricDifference(_:)",
    "url": "https://developer.apple.com/documentation/musickit/musictokenrequestoptions/symmetricdifference(_:)",
    "html": "Parameters\nother\n\nAn option set.\n\nReturn Value\n\nA new option set with only the elements contained in either this set or other, but not in both."
  },
  {
    "title": "dropLast(_:)",
    "url": "https://developer.apple.com/documentation/musickit/musicitemcollection/droplast(_:)",
    "html": "Parameters\nk\n\nThe number of elements to drop off the end of the collection. k must be greater than or equal to zero.\n\nReturn Value\n\nA subsequence that leaves off k elements from the end.\n\nDiscussion\n\nIf the number of elements to drop exceeds the number of elements in the collection, the result is an empty subsequence.\n\nlet numbers = [1, 2, 3, 4, 5]\nprint(numbers.dropLast(2))\n// Prints \"[1, 2, 3]\"\nprint(numbers.dropLast(10))\n// Prints \"[]\"\n\n\nComplexity\n\nO(1) if the collection conforms to RandomAccessCollection; otherwise, O(k), where k is the number of elements to drop."
  },
  {
    "title": "firstRange(of:)",
    "url": "https://developer.apple.com/documentation/musickit/musicitemcollection/firstrange(of:)-4wrl",
    "html": "Parameters\nother\n\nThe collection to search for.\n\nReturn Value\n\nA range in the collection of the first occurrence of sequence. Returns nil if sequence is not found."
  },
  {
    "title": "last(where:)",
    "url": "https://developer.apple.com/documentation/musickit/musicitemcollection/last(where:)",
    "html": "Parameters\npredicate\n\nA closure that takes an element of the sequence as its argument and returns a Boolean value indicating whether the element is a match.\n\nReturn Value\n\nThe last element of the sequence that satisfies predicate, or nil if there is no element that satisfies predicate.\n\nDiscussion\n\nThis example uses the last(where:) method to find the last negative number in an array of integers:\n\nlet numbers = [3, 7, 4, -2, 9, -6, 10, 1]\nif let lastNegative = numbers.last(where: { $0 < 0 }) {\n    print(\"The last negative number is \\(lastNegative).\")\n}\n// Prints \"The last negative number is -6.\"\n\n\nComplexity\n\nO(n), where n is the length of the collection."
  },
  {
    "title": "lastIndex(where:)",
    "url": "https://developer.apple.com/documentation/musickit/musicitemcollection/lastindex(where:)",
    "html": "Parameters\npredicate\n\nA closure that takes an element as its argument and returns a Boolean value that indicates whether the passed element represents a match.\n\nReturn Value\n\nThe index of the last element in the collection that matches predicate, or nil if no elements match.\n\nDiscussion\n\nYou can use the predicate to find an element of a type that doesn’t conform to the Equatable protocol or to find an element that matches particular criteria. This example finds the index of the last name that begins with the letter A:\n\nlet students = [\"Kofi\", \"Abena\", \"Peter\", \"Kweku\", \"Akosua\"]\nif let i = students.lastIndex(where: { $0.hasPrefix(\"A\") }) {\n    print(\"\\(students[i]) starts with 'A'!\")\n}\n// Prints \"Akosua starts with 'A'!\"\n\n\nComplexity\n\nO(n), where n is the length of the collection."
  },
  {
    "title": "debugDescription",
    "url": "https://developer.apple.com/documentation/musickit/musicitemcollection/debugdescription",
    "html": "Discussion\n\nCalling this property directly is discouraged. Instead, convert an instance of any type to a string by using the String(reflecting:) initializer. This initializer works with any type, and uses the custom debugDescription property for types that conform to CustomDebugStringConvertible:\n\nstruct Point: CustomDebugStringConvertible {\n    let x: Int, y: Int\n\n\n    var debugDescription: String {\n        return \"(\\(x), \\(y))\"\n    }\n}\n\n\nlet p = Point(x: 21, y: 30)\nlet s = String(reflecting: p)\nprint(s)\n// Prints \"(21, 30)\"\n\n\nThe conversion of p to a string in the assignment to s uses the Point type’s debugDescription property."
  },
  {
    "title": "hash(into:)",
    "url": "https://developer.apple.com/documentation/musickit/musicitemcollection/hash(into:)",
    "html": "Parameters\nhasher\n\nThe hasher to use when combining the components of this instance.\n\nDiscussion\n\nImplement this method to conform to the Hashable protocol. The components used for hashing must be the same as the components compared in your type’s == operator implementation. Call hasher.combine(_:) with each of these components.\n\nImportant\n\nIn your implementation of hash(into:), don’t call finalize() on the hasher instance provided, or replace it with a different instance. Doing so may become a compile-time error in the future."
  },
  {
    "title": "==(_:_:)",
    "url": "https://developer.apple.com/documentation/musickit/musicitemcollection/==(_:_:)",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nEquality is the inverse of inequality. For any values a and b, a == b implies that a != b is false."
  },
  {
    "title": "suffix(_:)",
    "url": "https://developer.apple.com/documentation/musickit/musicitemcollection/suffix(_:)",
    "html": "Parameters\nmaxLength\n\nThe maximum number of elements to return. maxLength must be greater than or equal to zero.\n\nReturn Value\n\nA subsequence terminating at the end of the collection with at most maxLength elements.\n\nDiscussion\n\nIf the maximum length exceeds the number of elements in the collection, the result contains the entire collection.\n\nlet numbers = [1, 2, 3, 4, 5]\nprint(numbers.suffix(2))\n// Prints \"[4, 5]\"\nprint(numbers.suffix(10))\n// Prints \"[1, 2, 3, 4, 5]\"\n\n\nComplexity\n\nO(1) if the collection conforms to RandomAccessCollection; otherwise, O(k), where k is equal to maxLength."
  },
  {
    "title": "reversed()",
    "url": "https://developer.apple.com/documentation/musickit/musicitemcollection/reversed()",
    "html": "Discussion\n\nYou can reverse a collection without allocating new space for its elements by calling this reversed() method. A ReversedCollection instance wraps an underlying collection and provides access to its elements in reverse order. This example prints the characters of a string in reverse order:\n\nlet word = \"Backwards\"\nfor char in word.reversed() {\n    print(char, terminator: \"\")\n}\n// Prints \"sdrawkcaB\"\n\n\nIf you need a reversed collection of the same type, you may be able to use the collection’s sequence-based or collection-based initializer. For example, to get the reversed version of a string, reverse its characters and initialize a new String instance from the result.\n\nlet reversedWord = String(word.reversed())\nprint(reversedWord)\n// Prints \"sdrawkcaB\"\n\n\nComplexity\n\nO(1)"
  },
  {
    "title": "!=(_:_:)",
    "url": "https://developer.apple.com/documentation/musickit/musictokenrequestoptions/!=(_:_:)",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nInequality is the inverse of equality. For any values a and b, a != b implies that a == b is false.\n\nThis is the default implementation of the not-equal-to operator (!=) for any type that conforms to Equatable."
  },
  {
    "title": "init(from:)",
    "url": "https://developer.apple.com/documentation/musickit/musicitemcollection/init(from:)",
    "html": "Parameters\ndecoder\n\nThe decoder to read data from.\n\nDiscussion\n\nThis initializer throws an error if reading from the decoder fails, or if the data read is corrupted or otherwise invalid."
  },
  {
    "title": "contentRating",
    "url": "https://developer.apple.com/documentation/musickit/playlist/entry/item-swift.enum/contentrating",
    "html": "Discussion\n\nA nil value means no rating is available for this playlist entry’s item."
  },
  {
    "title": "Encodable Implementations",
    "url": "https://developer.apple.com/documentation/musickit/playlist/entry/item-swift.enum/encodable-implementations",
    "html": "Topics\nInstance Methods\nfunc encode(to: any Encoder) throws\nEncodes this value into the given encoder."
  },
  {
    "title": "Equatable Implementations",
    "url": "https://developer.apple.com/documentation/musickit/playlist/entry/item-swift.enum/equatable-implementations",
    "html": "Topics\nOperators\nstatic func != (Self, Self) -> Bool\nReturns a Boolean value indicating whether two values are not equal."
  },
  {
    "title": "CustomDebugStringConvertible Implementations",
    "url": "https://developer.apple.com/documentation/musickit/playlist/entry/item-swift.enum/customdebugstringconvertible-implementations",
    "html": "Topics\nInstance Properties\nvar debugDescription: String\nA textual representation of this instance, suitable for debugging."
  },
  {
    "title": "==(_:_:)",
    "url": "https://developer.apple.com/documentation/musickit/musicplayer/shufflemode/==(_:_:)",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nEquality is the inverse of inequality. For any values a and b, a == b implies that a != b is false."
  },
  {
    "title": "Decodable Implementations",
    "url": "https://developer.apple.com/documentation/musickit/playlist/entry/item-swift.enum/decodable-implementations",
    "html": "Topics\nInitializers\ninit(from: any Decoder) throws\nCreates a new instance by decoding from the given decoder."
  },
  {
    "title": "hashValue",
    "url": "https://developer.apple.com/documentation/musickit/musiccatalogsearchresponse/topresult/hashvalue",
    "html": "Discussion\n\nHash values are not guaranteed to be equal across different executions of your program. Do not save hash values to use during a future execution.\n\nImportant\n\nhashValue is deprecated as a Hashable requirement. To conform to Hashable, implement the hash(into:) requirement instead. The compiler provides an implementation for hashValue for you."
  },
  {
    "title": "contains(_:)",
    "url": "https://developer.apple.com/documentation/musickit/musictokenrequestoptions/contains(_:)",
    "html": "Parameters\nmember\n\nThe element to look for in the option set.\n\nReturn Value\n\ntrue if the option set contains member; otherwise, false.\n\nDiscussion\n\nThis example uses the contains(_:) method to check whether next-day shipping is in the availableOptions instance.\n\nlet availableOptions = ShippingOptions.express\nif availableOptions.contains(.nextDay) {\n    print(\"Next day shipping available\")\n}\n// Prints \"Next day shipping available\"\n"
  },
  {
    "title": "formSymmetricDifference(_:)",
    "url": "https://developer.apple.com/documentation/musickit/musictokenrequestoptions/formsymmetricdifference(_:)",
    "html": "Parameters\nother\n\nAn option set.\n\nDiscussion\n\nThis method is implemented as a ^ (bitwise XOR) operation on the two sets’ raw values."
  },
  {
    "title": "formUnion(_:)",
    "url": "https://developer.apple.com/documentation/musickit/musictokenrequestoptions/formunion(_:)",
    "html": "Parameters\nother\n\nAn option set.\n\nDiscussion\n\nThis method is implemented as a | (bitwise OR) operation on the two sets’ raw values."
  },
  {
    "title": "insert(_:)",
    "url": "https://developer.apple.com/documentation/musickit/musictokenrequestoptions/insert(_:)",
    "html": "Parameters\nnewMember\n\nThe element to insert.\n\nReturn Value\n\n(true, newMember) if newMember was not contained in self. Otherwise, returns (false, oldMember), where oldMember is the member of the set equal to newMember.\n\nDiscussion\n\nIn the following example, the .secondDay shipping option is added to the freeOptions option set if purchasePrice is greater than 50.0. For the ShippingOptions declaration, see the OptionSet protocol discussion.\n\nlet purchasePrice = 87.55\n\n\nvar freeOptions: ShippingOptions = [.standard, .priority]\nif purchasePrice > 50 {\n    freeOptions.insert(.secondDay)\n}\nprint(freeOptions.contains(.secondDay))\n// Prints \"true\"\n"
  },
  {
    "title": "isSubset(of:)",
    "url": "https://developer.apple.com/documentation/musickit/musictokenrequestoptions/issubset(of:)",
    "html": "Parameters\nother\n\nA set of the same type as the current set.\n\nReturn Value\n\ntrue if the set is a subset of other; otherwise, false.\n\nDiscussion\n\nSet A is a subset of another set B if every member of A is also a member of B.\n\nlet employees: Set = [\"Alicia\", \"Bethany\", \"Chris\", \"Diana\", \"Eric\"]\nlet attendees: Set = [\"Alicia\", \"Bethany\", \"Diana\"]\nprint(attendees.isSubset(of: employees))\n// Prints \"true\"\n"
  },
  {
    "title": "intersection(_:)",
    "url": "https://developer.apple.com/documentation/musickit/musictokenrequestoptions/intersection(_:)",
    "html": "Parameters\nother\n\nAn option set.\n\nReturn Value\n\nA new option set with only the elements contained in both this set and other.\n\nDiscussion\n\nThis example uses the intersection(_:) method to limit the available shipping options to what can be used with a PO Box destination.\n\n// Can only ship standard or priority to PO Boxes\nlet poboxShipping: ShippingOptions = [.standard, .priority]\nlet memberShipping: ShippingOptions =\n        [.standard, .priority, .secondDay]\n\n\nlet availableOptions = memberShipping.intersection(poboxShipping)\nprint(availableOptions.contains(.priority))\n// Prints \"true\"\nprint(availableOptions.contains(.secondDay))\n// Prints \"false\"\n"
  },
  {
    "title": "remove(_:)",
    "url": "https://developer.apple.com/documentation/musickit/musictokenrequestoptions/remove(_:)",
    "html": "Parameters\nmember\n\nThe element of the set to remove.\n\nReturn Value\n\nThe intersection of [member] and the set, if the intersection was nonempty; otherwise, nil.\n\nDiscussion\n\nIn the following example, the .priority shipping option is removed from the options option set. Attempting to remove the same shipping option a second time results in nil, because options no longer contains .priority as a member.\n\nvar options: ShippingOptions = [.secondDay, .priority]\nlet priorityOption = options.remove(.priority)\nprint(priorityOption == .priority)\n// Prints \"true\"\n\n\nprint(options.remove(.priority))\n// Prints \"nil\"\n\n\nIn the next example, the .express element is passed to remove(_:). Although .express is not a member of options, .express subsumes the remaining .secondDay element of the option set. Therefore, options is emptied and the intersection between .express and options is returned.\n\nlet expressOption = options.remove(.express)\nprint(expressOption == .express)\n// Prints \"false\"\nprint(expressOption == .secondDay)\n// Prints \"true\"\n"
  },
  {
    "title": "isSuperset(of:)",
    "url": "https://developer.apple.com/documentation/musickit/musictokenrequestoptions/issuperset(of:)",
    "html": "Parameters\nother\n\nA set of the same type as the current set.\n\nReturn Value\n\ntrue if the set is a superset of other; otherwise, false.\n\nDiscussion\n\nSet A is a superset of another set B if every member of B is also a member of A.\n\nlet employees: Set = [\"Alicia\", \"Bethany\", \"Chris\", \"Diana\", \"Eric\"]\nlet attendees: Set = [\"Alicia\", \"Bethany\", \"Diana\"]\nprint(employees.isSuperset(of: attendees))\n// Prints \"true\"\n"
  },
  {
    "title": "update(with:)",
    "url": "https://developer.apple.com/documentation/musickit/musictokenrequestoptions/update(with:)",
    "html": "Return Value\n\nThe intersection of [newMember] and the set if the intersection was nonempty; otherwise, nil.\n\nDiscussion\n\nIf newMember is not contained in the set but subsumes current members of the set, the subsumed members are returned.\n\nvar options: ShippingOptions = [.secondDay, .priority]\nlet replaced = options.update(with: .express)\nprint(replaced == .secondDay)\n// Prints \"true\"\n"
  },
  {
    "title": "subtract(_:)",
    "url": "https://developer.apple.com/documentation/musickit/musictokenrequestoptions/subtract(_:)",
    "html": "Parameters\nother\n\nA set of the same type as the current set.\n\nDiscussion\n\nIn the following example, the elements of the employees set that are also members of the neighbors set are removed. In particular, the names \"Bethany\" and \"Eric\" are removed from employees.\n\nvar employees: Set = [\"Alicia\", \"Bethany\", \"Chris\", \"Diana\", \"Eric\"]\nlet neighbors: Set = [\"Bethany\", \"Eric\", \"Forlani\", \"Greta\"]\nemployees.subtract(neighbors)\nprint(employees)\n// Prints \"[\"Diana\", \"Chris\", \"Alicia\"]\"\n"
  },
  {
    "title": "union(_:)",
    "url": "https://developer.apple.com/documentation/musickit/musictokenrequestoptions/union(_:)",
    "html": "Parameters\nother\n\nAn option set.\n\nReturn Value\n\nA new option set made up of the elements contained in this set, in other, or in both.\n\nDiscussion\n\nThis example uses the union(_:) method to add two more shipping options to the default set.\n\nlet defaultShipping = ShippingOptions.standard\nlet memberShipping = defaultShipping.union([.secondDay, .priority])\nprint(memberShipping.contains(.priority))\n// Prints \"true\"\n"
  },
  {
    "title": "isDisjoint(with:)",
    "url": "https://developer.apple.com/documentation/musickit/musictokenrequestoptions/isdisjoint(with:)",
    "html": "Parameters\nother\n\nA set of the same type as the current set.\n\nReturn Value\n\ntrue if the set has no elements in common with other; otherwise, false.\n\nDiscussion\n\nIn the following example, the employees set is disjoint with the visitors set because no name appears in both sets.\n\nlet employees: Set = [\"Alicia\", \"Bethany\", \"Chris\", \"Diana\", \"Eric\"]\nlet visitors: Set = [\"Marcia\", \"Nathaniel\", \"Olivia\"]\nprint(employees.isDisjoint(with: visitors))\n// Prints \"true\"\n"
  },
  {
    "title": "init(_:)",
    "url": "https://developer.apple.com/documentation/musickit/musictokenrequestoptions/init(_:)",
    "html": "Parameters\nsequence\n\nThe elements to use as members of the new set.\n\nDiscussion\n\nUse this initializer to create a new set from an existing sequence, like an array or a range:\n\nlet validIndices = Set(0..<7).subtracting([2, 4, 5])\nprint(validIndices)\n// Prints \"[6, 0, 1, 3]\"\n"
  },
  {
    "title": "init(arrayLiteral:)",
    "url": "https://developer.apple.com/documentation/musickit/musictokenrequestoptions/init(arrayliteral:)",
    "html": "Parameters\narrayLiteral\n\nA list of elements of the new set.\n\nDiscussion\n\nDo not call this initializer directly. It is used by the compiler when you use an array literal. Instead, create a new set using an array literal as its value by enclosing a comma-separated list of values in square brackets. You can use an array literal anywhere a set is expected by the type context.\n\nHere, a set of strings is created from an array literal holding only strings:\n\nlet ingredients: Set = [\"cocoa beans\", \"sugar\", \"cocoa butter\", \"salt\"]\nif ingredients.isSuperset(of: [\"sugar\", \"salt\"]) {\n    print(\"Whatever it is, it's bound to be delicious!\")\n}\n// Prints \"Whatever it is, it's bound to be delicious!\"\n"
  },
  {
    "title": "isStrictSubset(of:)",
    "url": "https://developer.apple.com/documentation/musickit/musictokenrequestoptions/isstrictsubset(of:)",
    "html": "Parameters\nother\n\nA set of the same type as the current set.\n\nReturn Value\n\ntrue if the set is a strict subset of other; otherwise, false.\n\nDiscussion\n\nSet A is a strict subset of another set B if every member of A is also a member of B and B contains at least one element that is not a member of A.\n\nlet employees: Set = [\"Alicia\", \"Bethany\", \"Chris\", \"Diana\", \"Eric\"]\nlet attendees: Set = [\"Alicia\", \"Bethany\", \"Diana\"]\nprint(attendees.isStrictSubset(of: employees))\n// Prints \"true\"\n\n\n// A set is never a strict subset of itself:\nprint(attendees.isStrictSubset(of: attendees))\n// Prints \"false\"\n"
  },
  {
    "title": "isStrictSuperset(of:)",
    "url": "https://developer.apple.com/documentation/musickit/musictokenrequestoptions/isstrictsuperset(of:)",
    "html": "Parameters\nother\n\nA set of the same type as the current set.\n\nReturn Value\n\ntrue if the set is a strict superset of other; otherwise, false.\n\nDiscussion\n\nSet A is a strict superset of another set B if every member of B is also a member of A and A contains at least one element that is not a member of B.\n\nlet employees: Set = [\"Alicia\", \"Bethany\", \"Chris\", \"Diana\", \"Eric\"]\nlet attendees: Set = [\"Alicia\", \"Bethany\", \"Diana\"]\nprint(employees.isStrictSuperset(of: attendees))\n// Prints \"true\"\n\n\n// A set is never a strict superset of itself:\nprint(employees.isStrictSuperset(of: employees))\n// Prints \"false\"\n"
  },
  {
    "title": "subtracting(_:)",
    "url": "https://developer.apple.com/documentation/musickit/musictokenrequestoptions/subtracting(_:)",
    "html": "Parameters\nother\n\nA set of the same type as the current set.\n\nReturn Value\n\nA new set.\n\nDiscussion\n\nIn the following example, the nonNeighbors set is made up of the elements of the employees set that are not elements of neighbors:\n\nlet employees: Set = [\"Alicia\", \"Bethany\", \"Chris\", \"Diana\", \"Eric\"]\nlet neighbors: Set = [\"Bethany\", \"Eric\", \"Forlani\", \"Greta\"]\nlet nonNeighbors = employees.subtracting(neighbors)\nprint(nonNeighbors)\n// Prints \"[\"Diana\", \"Chris\", \"Alicia\"]\"\n"
  },
  {
    "title": "repeatMode",
    "url": "https://developer.apple.com/documentation/musickit/musicplayer/state-swift.class/repeatmode",
    "html": "Discussion\n\nDefaults to nil."
  },
  {
    "title": "shuffleMode",
    "url": "https://developer.apple.com/documentation/musickit/musicplayer/state-swift.class/shufflemode",
    "html": "Discussion\n\nDefaults to nil."
  },
  {
    "title": "==(_:_:)",
    "url": "https://developer.apple.com/documentation/musickit/musiccatalogsearchresponse/topresult/==(_:_:)",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nEquality is the inverse of inequality. For any values a and b, a == b implies that a != b is false."
  },
  {
    "title": "playbackRate",
    "url": "https://developer.apple.com/documentation/musickit/musicplayer/state-swift.class/playbackrate",
    "html": "Discussion\n\nThis value represents a multiplier for the default playback rate of the current entry. A value of 0.0 indicates that the entry isn’t playing, and a value of 1.0 indicates that it’s playing at normal speed. Positive values indicate forward playback, and negative values indicate reverse playback.\n\nSetting the value of this property changes the playback rate accordingly."
  },
  {
    "title": "lexicographicallyPrecedes(_:by:)",
    "url": "https://developer.apple.com/documentation/musickit/musicitemcollection/lexicographicallyprecedes(_:by:)",
    "html": "Parameters\nother\n\nA sequence to compare to this sequence.\n\nareInIncreasingOrder\n\nA predicate that returns true if its first argument should be ordered before its second argument; otherwise, false.\n\nReturn Value\n\ntrue if this sequence precedes other in a dictionary ordering as ordered by areInIncreasingOrder; otherwise, false.\n\nDiscussion\n\nThe predicate must be a strict weak ordering over the elements. That is, for any elements a, b, and c, the following conditions must hold:\n\nareInIncreasingOrder(a, a) is always false. (Irreflexivity)\n\nIf areInIncreasingOrder(a, b) and areInIncreasingOrder(b, c) are both true, then areInIncreasingOrder(a, c) is also true. (Transitive comparability)\n\nTwo elements are incomparable if neither is ordered before the other according to the predicate. If a and b are incomparable, and b and c are incomparable, then a and c are also incomparable. (Transitive incomparability)\n\nNote\n\nThis method implements the mathematical notion of lexicographical ordering, which has no connection to Unicode. If you are sorting strings to present to the end user, use String APIs that perform localized comparison instead.\n\nComplexity\n\nO(m), where m is the lesser of the length of the sequence and the length of other."
  },
  {
    "title": "sorted(using:)",
    "url": "https://developer.apple.com/documentation/musickit/musicitemcollection/sorted(using:)-8uvpa",
    "html": "Parameters\ncomparator\n\nthe comparator to use in ordering elements\n\nReturn Value\n\nan array of the elements sorted using comparator."
  },
  {
    "title": "sorted(by:)",
    "url": "https://developer.apple.com/documentation/musickit/musicitemcollection/sorted(by:)",
    "html": "Parameters\nareInIncreasingOrder\n\nA predicate that returns true if its first argument should be ordered before its second argument; otherwise, false.\n\nReturn Value\n\nA sorted array of the sequence’s elements.\n\nDiscussion\n\nWhen you want to sort a sequence of elements that don’t conform to the Comparable protocol, pass a predicate to this method that returns true when the first element should be ordered before the second. The elements of the resulting array are ordered according to the given predicate.\n\nIn the following example, the predicate provides an ordering for an array of a custom HTTPResponse type. The predicate orders errors before successes and sorts the error responses by their error code.\n\nenum HTTPResponse {\n    case ok\n    case error(Int)\n}\n\n\nlet responses: [HTTPResponse] = [.error(500), .ok, .ok, .error(404), .error(403)]\nlet sortedResponses = responses.sorted {\n    switch ($0, $1) {\n    // Order errors by code\n    case let (.error(aCode), .error(bCode)):\n        return aCode < bCode\n\n\n    // All successes are equivalent, so none is before any other\n    case (.ok, .ok): return false\n\n\n    // Order errors before successes\n    case (.error, .ok): return true\n    case (.ok, .error): return false\n    }\n}\nprint(sortedResponses)\n// Prints \"[.error(403), .error(404), .error(500), .ok, .ok]\"\n\n\nYou also use this method to sort elements that conform to the Comparable protocol in descending order. To sort your sequence in descending order, pass the greater-than operator (>) as the areInIncreasingOrder parameter.\n\nlet students: Set = [\"Kofi\", \"Abena\", \"Peter\", \"Kweku\", \"Akosua\"]\nlet descendingStudents = students.sorted(by: >)\nprint(descendingStudents)\n// Prints \"[\"Peter\", \"Kweku\", \"Kofi\", \"Akosua\", \"Abena\"]\"\n\n\nCalling the related sorted() method is equivalent to calling this method and passing the less-than operator (<) as the predicate.\n\nprint(students.sorted())\n// Prints \"[\"Abena\", \"Akosua\", \"Kofi\", \"Kweku\", \"Peter\"]\"\nprint(students.sorted(by: <))\n// Prints \"[\"Abena\", \"Akosua\", \"Kofi\", \"Kweku\", \"Peter\"]\"\n\n\nThe predicate must be a strict weak ordering over the elements. That is, for any elements a, b, and c, the following conditions must hold:\n\nareInIncreasingOrder(a, a) is always false. (Irreflexivity)\n\nIf areInIncreasingOrder(a, b) and areInIncreasingOrder(b, c) are both true, then areInIncreasingOrder(a, c) is also true. (Transitive comparability)\n\nTwo elements are incomparable if neither is ordered before the other according to the predicate. If a and b are incomparable, and b and c are incomparable, then a and c are also incomparable. (Transitive incomparability)\n\nThe sorting algorithm is guaranteed to be stable. A stable sort preserves the relative order of elements for which areInIncreasingOrder does not establish an order.\n\nComplexity\n\nO(n log n), where n is the length of the sequence."
  },
  {
    "title": "sorted()",
    "url": "https://developer.apple.com/documentation/musickit/musicitemcollection/sorted()",
    "html": "Return Value\n\nA sorted array of the sequence’s elements.\n\nDiscussion\n\nYou can sort any sequence of elements that conform to the Comparable protocol by calling this method. Elements are sorted in ascending order.\n\nHere’s an example of sorting a list of students’ names. Strings in Swift conform to the Comparable protocol, so the names are sorted in ascending order according to the less-than operator (<).\n\nlet students: Set = [\"Kofi\", \"Abena\", \"Peter\", \"Kweku\", \"Akosua\"]\nlet sortedStudents = students.sorted()\nprint(sortedStudents)\n// Prints \"[\"Abena\", \"Akosua\", \"Kofi\", \"Kweku\", \"Peter\"]\"\n\n\nTo sort the elements of your sequence in descending order, pass the greater-than operator (>) to the sorted(by:) method.\n\nlet descendingStudents = students.sorted(by: >)\nprint(descendingStudents)\n// Prints \"[\"Peter\", \"Kweku\", \"Kofi\", \"Akosua\", \"Abena\"]\"\n\n\nThe sorting algorithm is guaranteed to be stable. A stable sort preserves the relative order of elements that compare as equal.\n\nComplexity\n\nO(n log n), where n is the length of the sequence."
  },
  {
    "title": "Encodable Implementations",
    "url": "https://developer.apple.com/documentation/musickit/musicplayer/queue/entry/item-swift.enum/encodable-implementations",
    "html": "Topics\nInstance Methods\nfunc encode(to: any Encoder) throws\nEncodes this value into the given encoder."
  },
  {
    "title": "Decodable Implementations",
    "url": "https://developer.apple.com/documentation/musickit/musicplayer/queue/entry/item-swift.enum/decodable-implementations",
    "html": "Topics\nInitializers\ninit(from: any Decoder) throws\nCreates a new instance by decoding from the given decoder."
  },
  {
    "title": "Equatable Implementations",
    "url": "https://developer.apple.com/documentation/musickit/musiccatalogsearchresponse/topresult/equatable-implementations",
    "html": "Topics\nOperators\nstatic func != (Self, Self) -> Bool\nReturns a Boolean value indicating whether two values are not equal."
  },
  {
    "title": "Encodable Implementations",
    "url": "https://developer.apple.com/documentation/musickit/musiccatalogsearchresponse/topresult/encodable-implementations",
    "html": "Topics\nInstance Methods\nfunc encode(to: any Encoder) throws\nEncodes this value into the given encoder."
  },
  {
    "title": "CustomDebugStringConvertible Implementations",
    "url": "https://developer.apple.com/documentation/musickit/musiccatalogsearchresponse/topresult/customdebugstringconvertible-implementations",
    "html": "Topics\nInstance Properties\nvar debugDescription: String\nA textual representation of this instance, suitable for debugging."
  },
  {
    "title": "MusicPlayer.PlaybackStatus.interrupted",
    "url": "https://developer.apple.com/documentation/musickit/musicplayer/playbackstatus/interrupted",
    "html": "Discussion\n\nWhen an incoming phone call interrupts the music player, it may resume playing automatically upon ending the call."
  },
  {
    "title": "==(_:_:)",
    "url": "https://developer.apple.com/documentation/musickit/musicplayer/playbackstatus/==(_:_:)",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nEquality is the inverse of inequality. For any values a and b, a == b implies that a != b is false."
  },
  {
    "title": "min()",
    "url": "https://developer.apple.com/documentation/musickit/musicitemcollection/min()",
    "html": "Return Value\n\nThe sequence’s minimum element. If the sequence has no elements, returns nil.\n\nDiscussion\n\nThis example finds the smallest value in an array of height measurements.\n\nlet heights = [67.5, 65.7, 64.3, 61.1, 58.5, 60.3, 64.9]\nlet lowestHeight = heights.min()\nprint(lowestHeight)\n// Prints \"Optional(58.5)\"\n\n\nComplexity\n\nO(n), where n is the length of the sequence."
  },
  {
    "title": "starts(with:)",
    "url": "https://developer.apple.com/documentation/musickit/musicitemcollection/starts(with:)",
    "html": "Parameters\npossiblePrefix\n\nA sequence to compare to this sequence.\n\nReturn Value\n\ntrue if the initial elements of the sequence are the same as the elements of possiblePrefix; otherwise, false. If possiblePrefix has no elements, the return value is true.\n\nDiscussion\n\nThis example tests whether one countable range begins with the elements of another countable range.\n\nlet a = 1...3\nlet b = 1...10\n\n\nprint(b.starts(with: a))\n// Prints \"true\"\n\n\nPassing a sequence with no elements or an empty collection as possiblePrefix always results in true.\n\nprint(b.starts(with: []))\n// Prints \"true\"\n\n\nComplexity\n\nO(m), where m is the lesser of the length of the sequence and the length of possiblePrefix."
  },
  {
    "title": "lexicographicallyPrecedes(_:)",
    "url": "https://developer.apple.com/documentation/musickit/musicitemcollection/lexicographicallyprecedes(_:)",
    "html": "Parameters\nother\n\nA sequence to compare to this sequence.\n\nReturn Value\n\ntrue if this sequence precedes other in a dictionary ordering; otherwise, false.\n\nDiscussion\n\nThis example uses the lexicographicallyPrecedes method to test which array of integers comes first in a lexicographical ordering.\n\nlet a = [1, 2, 2, 2]\nlet b = [1, 2, 3, 4]\n\n\nprint(a.lexicographicallyPrecedes(b))\n// Prints \"true\"\nprint(b.lexicographicallyPrecedes(b))\n// Prints \"false\"\n\n\nNote\n\nThis method implements the mathematical notion of lexicographical ordering, which has no connection to Unicode. If you are sorting strings to present to the end user, use String APIs that perform localized comparison.\n\nComplexity\n\nO(m), where m is the lesser of the length of the sequence and the length of other."
  },
  {
    "title": "joined(separator:)",
    "url": "https://developer.apple.com/documentation/musickit/musicitemcollection/joined(separator:)-6uzne",
    "html": "Parameters\nseparator\n\nA sequence to insert between each of this sequence’s elements.\n\nReturn Value\n\nThe joined sequence of elements.\n\nDiscussion\n\nThis example shows how an array of [Int] instances can be joined, using another [Int] instance as the separator:\n\nlet nestedNumbers = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nlet joined = nestedNumbers.joined(separator: [-1, -2])\nprint(Array(joined))\n// Prints \"[1, 2, 3, -1, -2, 4, 5, 6, -1, -2, 7, 8, 9]\"\n"
  },
  {
    "title": "distance(from:to:)",
    "url": "https://developer.apple.com/documentation/musickit/musicitemcollection/distance(from:to:)",
    "html": "Parameters\nstart\n\nA valid index of the collection.\n\nend\n\nAnother valid index of the collection. If end is equal to start, the result is zero.\n\nReturn Value\n\nThe distance between start and end. The result can be negative only if the collection conforms to the BidirectionalCollection protocol.\n\nDiscussion\n\nUnless the collection conforms to the BidirectionalCollection protocol, start must be less than or equal to end.\n\nComplexity\n\nO(1)"
  },
  {
    "title": "hash(into:)",
    "url": "https://developer.apple.com/documentation/musickit/musicplayer/queue/entry/item-swift.enum/hash(into:)",
    "html": "Parameters\nhasher\n\nThe hasher to use when combining the components of this instance.\n\nDiscussion\n\nImplement this method to conform to the Hashable protocol. The components used for hashing must be the same as the components compared in your type’s == operator implementation. Call hasher.combine(_:) with each of these components.\n\nImportant\n\nIn your implementation of hash(into:), don’t call finalize() on the hasher instance provided, or replace it with a different instance. Doing so may become a compile-time error in the future."
  },
  {
    "title": "CustomDebugStringConvertible Implementations",
    "url": "https://developer.apple.com/documentation/musickit/musicplayer/queue/entry/item-swift.enum/customdebugstringconvertible-implementations",
    "html": "Topics\nInstance Properties\nvar debugDescription: String\nA textual representation of this instance, suitable for debugging."
  },
  {
    "title": "CustomStringConvertible Implementations",
    "url": "https://developer.apple.com/documentation/musickit/musicplayer/queue/entry/item-swift.enum/customstringconvertible-implementations",
    "html": "Topics\nInstance Properties\nvar description: String\nA textual representation of this instance."
  },
  {
    "title": "Equatable Implementations",
    "url": "https://developer.apple.com/documentation/musickit/musicplayer/queue/entry/item-swift.enum/equatable-implementations",
    "html": "Topics\nOperators\nstatic func != (Self, Self) -> Bool\nReturns a Boolean value indicating whether two values are not equal."
  },
  {
    "title": "index(_:offsetBy:)",
    "url": "https://developer.apple.com/documentation/musickit/musicitemcollection/index(_:offsetby:)",
    "html": "Parameters\ni\n\nA valid index of the collection.\n\ndistance\n\nThe distance to offset i. distance must not be negative unless the collection conforms to the BidirectionalCollection protocol.\n\nReturn Value\n\nAn index offset by distance from the index i. If distance is positive, this is the same value as the result of distance calls to index(after:). If distance is negative, this is the same value as the result of abs(distance) calls to index(before:).\n\nDiscussion\n\nThe following example obtains an index advanced four positions from a string’s starting index and then prints the character at that position.\n\nlet s = \"Swift\"\nlet i = s.index(s.startIndex, offsetBy: 4)\nprint(s[i])\n// Prints \"t\"\n\n\nThe value passed as distance must not offset i beyond the bounds of the collection.\n\nComplexity\n\nO(1)"
  },
  {
    "title": "MusicItem Implementations",
    "url": "https://developer.apple.com/documentation/musickit/musicplayer/queue/entry/item-swift.enum/musicitem-implementations",
    "html": "Topics\nInstance Methods\nfunc with([PartialMusicAsyncProperty<Self>]) async throws -> Self\nLoads a new instance of the music item that includes the specified properties.\nAvailable when Self conforms to MusicPropertyContainer and Decodable.\nfunc with([PartialMusicAsyncProperty<Self>], preferredSource: MusicPropertySource) async throws -> Self\nLoads a new instance of the music item that includes the specified properties.\nAvailable when Self conforms to MusicPropertyContainer and Decodable."
  },
  {
    "title": "Equatable Implementations",
    "url": "https://developer.apple.com/documentation/musickit/musicplayer/queue/entry/equatable-implementations",
    "html": "Topics\nOperators\nstatic func != (Self, Self) -> Bool\nReturns a Boolean value indicating whether two values are not equal."
  },
  {
    "title": "subscript(_:)",
    "url": "https://developer.apple.com/documentation/musickit/musicitemcollection/subscript(_:)-1h5iv",
    "html": "Parameters\nbounds\n\nA range of the collection’s indices. The bounds of the range must be valid indices of the collection.\n\nOverview\n\nThe accessed slice uses the same indices for the same elements as the original collection uses. Always use the slice’s startIndex property instead of assuming that its indices start at a particular value.\n\nThis example demonstrates getting a slice of an array of strings, finding the index of one of the strings in the slice, and then using that index in the original array.\n\nlet streets = [\"Adams\", \"Bryant\", \"Channing\", \"Douglas\", \"Evarts\"]\nlet streetsSlice = streets[2 ..< streets.endIndex]\nprint(streetsSlice)\n// Prints \"[\"Channing\", \"Douglas\", \"Evarts\"]\"\n\n\nlet index = streetsSlice.firstIndex(of: \"Evarts\")    // 4\nprint(streets[index!])\n// Prints \"Evarts\"\n\n\nComplexity\n\nO(1)"
  },
  {
    "title": "Decodable Implementations",
    "url": "https://developer.apple.com/documentation/musickit/musiccatalogsearchresponse/topresult/decodable-implementations",
    "html": "Topics\nInitializers\ninit(from: any Decoder) throws\nCreates a new instance by decoding from the given decoder."
  },
  {
    "title": "CustomStringConvertible Implementations",
    "url": "https://developer.apple.com/documentation/musickit/musiccatalogsearchresponse/topresult/customstringconvertible-implementations",
    "html": "Topics\nInstance Properties\nvar description: String\nA textual representation of this instance."
  },
  {
    "title": "index(before:)",
    "url": "https://developer.apple.com/documentation/musickit/musicitemcollection/index(before:)",
    "html": "Parameters\ni\n\nA valid index of the collection. i must be greater than startIndex.\n\nReturn Value\n\nThe index value immediately before i."
  },
  {
    "title": "hashValue",
    "url": "https://developer.apple.com/documentation/musickit/musicplayer/repeatmode/hashvalue",
    "html": "Discussion\n\nHash values are not guaranteed to be equal across different executions of your program. Do not save hash values to use during a future execution.\n\nImportant\n\nhashValue is deprecated as a Hashable requirement. To conform to Hashable, implement the hash(into:) requirement instead. The compiler provides an implementation for hashValue for you."
  },
  {
    "title": "withContiguousStorageIfAvailable(_:)",
    "url": "https://developer.apple.com/documentation/musickit/musicitemcollection/withcontiguousstorageifavailable(_:)",
    "html": "Parameters\nbody\n\nA closure that receives an UnsafeBufferPointer to the sequence’s contiguous storage.\n\nReturn Value\n\nThe value returned from body, unless the sequence doesn’t support contiguous storage, in which case the method ignores body and returns nil.\n\nDiscussion\n\nThis method calls body(buffer), where buffer is a pointer to the collection’s contiguous storage. If the contiguous storage doesn’t exist, the collection creates it. If the collection doesn’t support an internal representation in a form of contiguous storage, the method doesn’t call body — it immediately returns nil.\n\nThe optimizer can often eliminate bounds- and uniqueness-checking within an algorithm. When that fails, however, invoking the same algorithm on the buffer argument may let you trade safety for speed.\n\nSuccessive calls to this method may provide a different pointer on each call. Don’t store buffer outside of this method.\n\nA Collection that provides its own implementation of this method must provide contiguous storage to its elements in the same order as they appear in the collection. This guarantees that it’s possible to generate contiguous mutable storage to any of its subsequences by slicing buffer with a range formed from the distances to the subsequence’s startIndex and endIndex, respectively."
  },
  {
    "title": "hash(into:)",
    "url": "https://developer.apple.com/documentation/musickit/musicplayer/repeatmode/hash(into:)",
    "html": "Parameters\nhasher\n\nThe hasher to use when combining the components of this instance.\n\nDiscussion\n\nImplement this method to conform to the Hashable protocol. The components used for hashing must be the same as the components compared in your type’s == operator implementation. Call hasher.combine(_:) with each of these components.\n\nImportant\n\nIn your implementation of hash(into:), don’t call finalize() on the hasher instance provided, or replace it with a different instance. Doing so may become a compile-time error in the future."
  },
  {
    "title": "Equatable Implementations",
    "url": "https://developer.apple.com/documentation/musickit/musicplayer/repeatmode/equatable-implementations",
    "html": "Topics\nOperators\nstatic func != (Self, Self) -> Bool\nReturns a Boolean value indicating whether two values are not equal."
  },
  {
    "title": "sorted(using:)",
    "url": "https://developer.apple.com/documentation/musickit/musicitemcollection/sorted(using:)-9hucf",
    "html": "Parameters\ncomparators\n\nan array of comparators used to compare elements. The first comparator specifies the primary comparator to be used in sorting the sequence’s elements. Any subsequent comparators are used to further refine the order of elements with equal values.\n\nReturn Value\n\nan array of the elements sorted using comparators."
  },
  {
    "title": "starts(with:by:)",
    "url": "https://developer.apple.com/documentation/musickit/musicitemcollection/starts(with:by:)",
    "html": "Parameters\npossiblePrefix\n\nA sequence to compare to this sequence.\n\nareEquivalent\n\nA predicate that returns true if its two arguments are equivalent; otherwise, false.\n\nReturn Value\n\ntrue if the initial elements of the sequence are equivalent to the elements of possiblePrefix; otherwise, false. If possiblePrefix has no elements, the return value is true.\n\nDiscussion\n\nThe predicate must be a equivalence relation over the elements. That is, for any elements a, b, and c, the following conditions must hold:\n\nareEquivalent(a, a) is always true. (Reflexivity)\n\nareEquivalent(a, b) implies areEquivalent(b, a). (Symmetry)\n\nIf areEquivalent(a, b) and areEquivalent(b, c) are both true, then areEquivalent(a, c) is also true. (Transitivity)\n\nComplexity\n\nO(m), where m is the lesser of the length of the sequence and the length of possiblePrefix."
  },
  {
    "title": "forEach(_:)",
    "url": "https://developer.apple.com/documentation/musickit/musicitemcollection/foreach(_:)",
    "html": "Parameters\nbody\n\nA closure that takes an element of the sequence as a parameter.\n\nDiscussion\n\nThe two loops in the following example produce the same output:\n\nlet numberWords = [\"one\", \"two\", \"three\"]\nfor word in numberWords {\n    print(word)\n}\n// Prints \"one\"\n// Prints \"two\"\n// Prints \"three\"\n\n\nnumberWords.forEach { word in\n    print(word)\n}\n// Same as above\n\n\nUsing the forEach method is distinct from a for-in loop in two important ways:\n\nYou cannot use a break or continue statement to exit the current call of the body closure or skip subsequent calls.\n\nUsing the return statement in the body closure will exit only from the current call to body, not from any outer scope, and won’t skip subsequent calls."
  },
  {
    "title": "joined()",
    "url": "https://developer.apple.com/documentation/musickit/musicitemcollection/joined()",
    "html": "Return Value\n\nA flattened view of the elements of this sequence of sequences.\n\nDiscussion\n\nIn this example, an array of three ranges is flattened so that the elements of each range can be iterated in turn.\n\nlet ranges = [0..<3, 8..<10, 15..<17]\n\n\n// A for-in loop over 'ranges' accesses each range:\nfor range in ranges {\n  print(range)\n}\n// Prints \"0..<3\"\n// Prints \"8..<10\"\n// Prints \"15..<17\"\n\n\n// Use 'joined()' to access each element of each range:\nfor index in ranges.joined() {\n    print(index, terminator: \" \")\n}\n// Prints: \"0 1 2 8 9 15 16\"\n"
  },
  {
    "title": "map(_:)",
    "url": "https://developer.apple.com/documentation/musickit/musicitemcollection/map(_:)-9z1u5",
    "html": "Parameters\ntransform\n\nA mapping closure. transform accepts an element of this sequence as its parameter and returns a transformed value of the same or of a different type.\n\nReturn Value\n\nAn array containing the transformed elements of this sequence.\n\nDiscussion\n\nIn this example, map is used first to convert the names in the array to lowercase strings and then to count their characters.\n\nlet cast = [\"Vivien\", \"Marlon\", \"Kim\", \"Karl\"]\nlet lowercaseNames = cast.map { $0.lowercased() }\n// 'lowercaseNames' == [\"vivien\", \"marlon\", \"kim\", \"karl\"]\nlet letterCounts = cast.map { $0.count }\n// 'letterCounts' == [6, 6, 3, 4]\n\n\nComplexity\n\nO(n), where n is the length of the sequence."
  },
  {
    "title": "description",
    "url": "https://developer.apple.com/documentation/musickit/musiccatalogresourceresponse/description",
    "html": "Discussion\n\nCalling this property directly is discouraged. Instead, convert an instance of any type to a string by using the String(describing:) initializer. This initializer works with any type, and uses the custom description property for types that conform to CustomStringConvertible:\n\nstruct Point: CustomStringConvertible {\n    let x: Int, y: Int\n\n\n    var description: String {\n        return \"(\\(x), \\(y))\"\n    }\n}\n\n\nlet p = Point(x: 21, y: 30)\nlet s = String(describing: p)\nprint(s)\n// Prints \"(21, 30)\"\n\n\nThe conversion of p to a string in the assignment to s uses the Point type’s description property."
  },
  {
    "title": "max()",
    "url": "https://developer.apple.com/documentation/musickit/musicitemcollection/max()",
    "html": "Return Value\n\nThe sequence’s maximum element. If the sequence has no elements, returns nil.\n\nDiscussion\n\nThis example finds the largest value in an array of height measurements.\n\nlet heights = [67.5, 65.7, 64.3, 61.1, 58.5, 60.3, 64.9]\nlet greatestHeight = heights.max()\nprint(greatestHeight)\n// Prints \"Optional(67.5)\"\n\n\nComplexity\n\nO(n), where n is the length of the sequence."
  },
  {
    "title": "joined(separator:)",
    "url": "https://developer.apple.com/documentation/musickit/musicitemcollection/joined(separator:)-39nu7",
    "html": "Parameters\nseparator\n\nA string to insert between each of the elements in this sequence. The default separator is an empty string.\n\nReturn Value\n\nA single, concatenated string.\n\nDiscussion\n\nThe following example shows how an array of strings can be joined to a single, comma-separated string:\n\nlet cast = [\"Vivien\", \"Marlon\", \"Kim\", \"Karl\"]\nlet list = cast.joined(separator: \", \")\nprint(list)\n// Prints \"Vivien, Marlon, Kim, Karl\"\n"
  },
  {
    "title": "max(by:)",
    "url": "https://developer.apple.com/documentation/musickit/musicitemcollection/max(by:)",
    "html": "Parameters\nareInIncreasingOrder\n\nA predicate that returns true if its first argument should be ordered before its second argument; otherwise, false.\n\nReturn Value\n\nThe sequence’s maximum element if the sequence is not empty; otherwise, nil.\n\nDiscussion\n\nThe predicate must be a strict weak ordering over the elements. That is, for any elements a, b, and c, the following conditions must hold:\n\nareInIncreasingOrder(a, a) is always false. (Irreflexivity)\n\nIf areInIncreasingOrder(a, b) and areInIncreasingOrder(b, c) are both true, then areInIncreasingOrder(a, c) is also true. (Transitive comparability)\n\nTwo elements are incomparable if neither is ordered before the other according to the predicate. If a and b are incomparable, and b and c are incomparable, then a and c are also incomparable. (Transitive incomparability)\n\nThis example shows how to use the max(by:) method on a dictionary to find the key-value pair with the highest value.\n\nlet hues = [\"Heliotrope\": 296, \"Coral\": 16, \"Aquamarine\": 156]\nlet greatestHue = hues.max { a, b in a.value < b.value }\nprint(greatestHue)\n// Prints \"Optional((key: \"Heliotrope\", value: 296))\"\n\n\nComplexity\n\nO(n), where n is the length of the sequence."
  },
  {
    "title": "min(by:)",
    "url": "https://developer.apple.com/documentation/musickit/musicitemcollection/min(by:)",
    "html": "Parameters\nareInIncreasingOrder\n\nA predicate that returns true if its first argument should be ordered before its second argument; otherwise, false.\n\nReturn Value\n\nThe sequence’s minimum element, according to areInIncreasingOrder. If the sequence has no elements, returns nil.\n\nDiscussion\n\nThe predicate must be a strict weak ordering over the elements. That is, for any elements a, b, and c, the following conditions must hold:\n\nareInIncreasingOrder(a, a) is always false. (Irreflexivity)\n\nIf areInIncreasingOrder(a, b) and areInIncreasingOrder(b, c) are both true, then areInIncreasingOrder(a, c) is also true. (Transitive comparability)\n\nTwo elements are incomparable if neither is ordered before the other according to the predicate. If a and b are incomparable, and b and c are incomparable, then a and c are also incomparable. (Transitive incomparability)\n\nThis example shows how to use the min(by:) method on a dictionary to find the key-value pair with the lowest value.\n\nlet hues = [\"Heliotrope\": 296, \"Coral\": 16, \"Aquamarine\": 156]\nlet leastHue = hues.min { a, b in a.value < b.value }\nprint(leastHue)\n// Prints \"Optional((key: \"Coral\", value: 16))\"\n\n\nComplexity\n\nO(n), where n is the length of the sequence."
  },
  {
    "title": "reduce(_:_:)",
    "url": "https://developer.apple.com/documentation/musickit/musicitemcollection/reduce(_:_:)",
    "html": "Parameters\ninitialResult\n\nThe value to use as the initial accumulating value. initialResult is passed to nextPartialResult the first time the closure is executed.\n\nnextPartialResult\n\nA closure that combines an accumulating value and an element of the sequence into a new accumulating value, to be used in the next call of the nextPartialResult closure or returned to the caller.\n\nReturn Value\n\nThe final accumulated value. If the sequence has no elements, the result is initialResult.\n\nDiscussion\n\nUse the reduce(_:_:) method to produce a single value from the elements of an entire sequence. For example, you can use this method on an array of numbers to find their sum or product.\n\nThe nextPartialResult closure is called sequentially with an accumulating value initialized to initialResult and each element of the sequence. This example shows how to find the sum of an array of numbers.\n\nlet numbers = [1, 2, 3, 4]\nlet numberSum = numbers.reduce(0, { x, y in\n    x + y\n})\n// numberSum == 10\n\n\nWhen numbers.reduce(_:_:) is called, the following steps occur:\n\nThe nextPartialResult closure is called with initialResult—0 in this case—and the first element of numbers, returning the sum: 1.\n\nThe closure is called again repeatedly with the previous call’s return value and each element of the sequence.\n\nWhen the sequence is exhausted, the last value returned from the closure is returned to the caller.\n\nIf the sequence has no elements, nextPartialResult is never executed and initialResult is the result of the call to reduce(_:_:).\n\nComplexity\n\nO(n), where n is the length of the sequence."
  },
  {
    "title": "reduce(into:_:)",
    "url": "https://developer.apple.com/documentation/musickit/musicitemcollection/reduce(into:_:)",
    "html": "Parameters\ninitialResult\n\nThe value to use as the initial accumulating value.\n\nupdateAccumulatingResult\n\nA closure that updates the accumulating value with an element of the sequence.\n\nReturn Value\n\nThe final accumulated value. If the sequence has no elements, the result is initialResult.\n\nDiscussion\n\nUse the reduce(into:_:) method to produce a single value from the elements of an entire sequence. For example, you can use this method on an array of integers to filter adjacent equal entries or count frequencies.\n\nThis method is preferred over reduce(_:_:) for efficiency when the result is a copy-on-write type, for example an Array or a Dictionary.\n\nThe updateAccumulatingResult closure is called sequentially with a mutable accumulating value initialized to initialResult and each element of the sequence. This example shows how to build a dictionary of letter frequencies of a string.\n\nlet letters = \"abracadabra\"\nlet letterCount = letters.reduce(into: [:]) { counts, letter in\n    counts[letter, default: 0] += 1\n}\n// letterCount == [\"a\": 5, \"b\": 2, \"r\": 2, \"c\": 1, \"d\": 1]\n\n\nWhen letters.reduce(into:_:) is called, the following steps occur:\n\nThe updateAccumulatingResult closure is called with the initial accumulating value—[:] in this case—and the first character of letters, modifying the accumulating value by setting 1 for the key \"a\".\n\nThe closure is called again repeatedly with the updated accumulating value and each element of the sequence.\n\nWhen the sequence is exhausted, the accumulating value is returned to the caller.\n\nIf the sequence has no elements, updateAccumulatingResult is never executed and initialResult is the result of the call to reduce(into:_:).\n\nComplexity\n\nO(n), where n is the length of the sequence."
  },
  {
    "title": "indices",
    "url": "https://developer.apple.com/documentation/musickit/musicitemcollection/indices-swift.property",
    "html": "Discussion\n\nA collection’s indices property can hold a strong reference to the collection itself, causing the collection to be nonuniquely referenced. If you mutate the collection while iterating over its indices, a strong reference can result in an unexpected copy of the collection. To avoid the unexpected copy, use the index(after:) method starting with startIndex to produce indices instead.\n\nvar c = MyFancyCollection([10, 20, 30, 40, 50])\nvar i = c.startIndex\nwhile i != c.endIndex {\n    c[i] /= 5\n    i = c.index(after: i)\n}\n// c == MyFancyCollection([2, 4, 6, 8, 10])\n"
  },
  {
    "title": "Equatable Implementations",
    "url": "https://developer.apple.com/documentation/musickit/musicplayer/playbackstatus/equatable-implementations",
    "html": "Topics\nOperators\nstatic func != (Self, Self) -> Bool\nReturns a Boolean value indicating whether two values are not equal."
  },
  {
    "title": "hash(into:)",
    "url": "https://developer.apple.com/documentation/musickit/musicplayer/playbackstatus/hash(into:)",
    "html": "Parameters\nhasher\n\nThe hasher to use when combining the components of this instance.\n\nDiscussion\n\nImplement this method to conform to the Hashable protocol. The components used for hashing must be the same as the components compared in your type’s == operator implementation. Call hasher.combine(_:) with each of these components.\n\nImportant\n\nIn your implementation of hash(into:), don’t call finalize() on the hasher instance provided, or replace it with a different instance. Doing so may become a compile-time error in the future."
  },
  {
    "title": "shuffled()",
    "url": "https://developer.apple.com/documentation/musickit/musicitemcollection/shuffled()",
    "html": "Return Value\n\nA shuffled array of this sequence’s elements.\n\nDiscussion\n\nFor example, you can shuffle the numbers between 0 and 9 by calling the shuffled() method on that range:\n\nlet numbers = 0...9\nlet shuffledNumbers = numbers.shuffled()\n// shuffledNumbers == [1, 7, 6, 2, 8, 9, 4, 3, 5, 0]\n\n\nThis method is equivalent to calling shuffled(using:), passing in the system’s default random generator.\n\nComplexity\n\nO(n), where n is the length of the sequence."
  },
  {
    "title": "hashValue",
    "url": "https://developer.apple.com/documentation/musickit/musicplayer/playbackstatus/hashvalue",
    "html": "Discussion\n\nHash values are not guaranteed to be equal across different executions of your program. Do not save hash values to use during a future execution.\n\nImportant\n\nhashValue is deprecated as a Hashable requirement. To conform to Hashable, implement the hash(into:) requirement instead. The compiler provides an implementation for hashValue for you."
  },
  {
    "title": "formIndex(after:)",
    "url": "https://developer.apple.com/documentation/musickit/musicitemcollection/formindex(after:)",
    "html": "Parameters\ni\n\nA valid index of the collection. i must be less than endIndex."
  },
  {
    "title": "shuffled(using:)",
    "url": "https://developer.apple.com/documentation/musickit/musicitemcollection/shuffled(using:)",
    "html": "Parameters\ngenerator\n\nThe random number generator to use when shuffling the sequence.\n\nReturn Value\n\nAn array of this sequence’s elements in a shuffled order.\n\nDiscussion\n\nYou use this method to randomize the elements of a sequence when you are using a custom random number generator. For example, you can shuffle the numbers between 0 and 9 by calling the shuffled(using:) method on that range:\n\nlet numbers = 0...9\nlet shuffledNumbers = numbers.shuffled(using: &myGenerator)\n// shuffledNumbers == [8, 9, 4, 3, 2, 6, 7, 0, 5, 1]\n\n\nComplexity\n\nO(n), where n is the length of the sequence.\n\nNote\n\nThe algorithm used to shuffle a sequence may change in a future version of Swift. If you’re passing a generator that results in the same shuffled order each time you run your program, that sequence may change when your program is compiled using a different version of Swift."
  },
  {
    "title": "hash(into:)",
    "url": "https://developer.apple.com/documentation/musickit/musicplayer/queue/entry/hash(into:)",
    "html": "Parameters\nhasher\n\nThe hasher to use when combining the components of this instance.\n\nDiscussion\n\nImplement this method to conform to the Hashable protocol. The components used for hashing must be the same as the components compared in your type’s == operator implementation. Call hasher.combine(_:) with each of these components.\n\nImportant\n\nIn your implementation of hash(into:), don’t call finalize() on the hasher instance provided, or replace it with a different instance. Doing so may become a compile-time error in the future."
  },
  {
    "title": "==(_:_:)",
    "url": "https://developer.apple.com/documentation/musickit/musicplayer/queue/entry/item-swift.enum/==(_:_:)",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nEquality is the inverse of inequality. For any values a and b, a == b implies that a != b is false."
  },
  {
    "title": "hashValue",
    "url": "https://developer.apple.com/documentation/musickit/musicplayer/queue/entry/item-swift.enum/hashvalue",
    "html": "Discussion\n\nHash values are not guaranteed to be equal across different executions of your program. Do not save hash values to use during a future execution.\n\nImportant\n\nhashValue is deprecated as a Hashable requirement. To conform to Hashable, implement the hash(into:) requirement instead. The compiler provides an implementation for hashValue for you."
  },
  {
    "title": "MusicPlayer.Queue.Entry",
    "url": "https://developer.apple.com/documentation/musickit/musicplayer/queue/entry",
    "html": "Topics\nOperators\nstatic func == (MusicPlayer.Queue.Entry, MusicPlayer.Queue.Entry) -> Bool\nReturns a Boolean value indicating whether two values are equal.\nInitializers\ninit(any PlayableMusicItem, startTime: TimeInterval?, endTime: TimeInterval?)\nCreates an entry of the playback queue with a playable music item, and optional start and end times.\nInstance Properties\nvar artwork: Artwork?\nThe artwork of this entry of the playback queue.\nvar description: String\nA textual representation of this instance.\nvar endTime: TimeInterval?\nAn optional end time for this entry of the playback queue.\nvar hashValue: Int\nThe hash value.\nlet id: String\nThe unique identifier of this entry of the playback queue.\nvar isTransient: Bool\nA Boolean value that indicates whether this entry of the playback queue has a transient music item.\nvar item: MusicPlayer.Queue.Entry.Item?\nA music item that corresponds to this entry of the playback queue, such as a song or a music video.\nvar startTime: TimeInterval?\nAn optional start time for this entry of the playback queue.\nvar subtitle: String?\nThe subtitle of this entry of the playback queue.\nvar title: String\nThe title of this entry of the playback queue.\nvar transientItem: (any PlayableMusicItem)?\nA music item that corresponds to a recently inserted entry in the playback queue that has underlying items the music player still needs to resolve.\nInstance Methods\nfunc hash(into: inout Hasher)\nHashes the essential components of this value by feeding them into the given hasher.\nType Aliases\ntypealias ID\nA type representing the stable identity of the entity associated with an instance.\nEnumerations\nenum Item\nAn item that corresponds to an entry in the playback queue.\nDefault Implementations\nEquatable Implementations\nRelationships\nConforms To\nCustomStringConvertible\nEquatable\nHashable\nIdentifiable"
  },
  {
    "title": "==(_:_:)",
    "url": "https://developer.apple.com/documentation/musickit/musicplayer/repeatmode/==(_:_:)",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nEquality is the inverse of inequality. For any values a and b, a == b implies that a != b is false."
  },
  {
    "title": "init(from:)",
    "url": "https://developer.apple.com/documentation/musickit/musicrecentlyplayedresponse/init(from:)",
    "html": "Parameters\ndecoder\n\nThe decoder to read data from.\n\nDiscussion\n\nThis initializer throws an error if reading from the decoder fails, or if the data read is corrupted or otherwise invalid."
  },
  {
    "title": "encode(to:)",
    "url": "https://developer.apple.com/documentation/musickit/musicrecentlyplayedresponse/encode(to:)",
    "html": "Parameters\nencoder\n\nThe encoder to write data to.\n\nDiscussion\n\nIf the value fails to encode anything, encoder will encode an empty keyed container in its place.\n\nThis function throws an error if any values are invalid for the given encoder’s format."
  },
  {
    "title": "index(after:)",
    "url": "https://developer.apple.com/documentation/musickit/musicitemcollection/index(after:)",
    "html": "Parameters\ni\n\nA valid index of the collection. i must be less than endIndex.\n\nReturn Value\n\nThe index value immediately after i.\n\nDiscussion\n\nThe successor of an index must be well defined. For an index i into a collection c, calling c.index(after: i) returns the same index every time."
  },
  {
    "title": "index(_:offsetBy:limitedBy:)",
    "url": "https://developer.apple.com/documentation/musickit/musicitemcollection/index(_:offsetby:limitedby:)",
    "html": "Parameters\ni\n\nA valid index of the collection.\n\ndistance\n\nThe distance to offset i. distance must not be negative unless the collection conforms to the BidirectionalCollection protocol.\n\nlimit\n\nA valid index of the collection to use as a limit. If distance > 0, a limit that is less than i has no effect. Likewise, if distance < 0, a limit that is greater than i has no effect.\n\nReturn Value\n\nAn index offset by distance from the index i, unless that index would be beyond limit in the direction of movement. In that case, the method returns nil.\n\nDiscussion\n\nThe following example obtains an index advanced four positions from a string’s starting index and then prints the character at that position. The operation doesn’t require going beyond the limiting s.endIndex value, so it succeeds.\n\nlet s = \"Swift\"\nif let i = s.index(s.startIndex, offsetBy: 4, limitedBy: s.endIndex) {\n    print(s[i])\n}\n// Prints \"t\"\n\n\nThe next example attempts to retrieve an index six positions from s.startIndex but fails, because that distance is beyond the index passed as limit.\n\nlet j = s.index(s.startIndex, offsetBy: 6, limitedBy: s.endIndex)\nprint(j)\n// Prints \"nil\"\n\n\nThe value passed as distance must not offset i beyond the bounds of the collection, unless the index passed as limit prevents offsetting beyond those bounds.\n\nComplexity\n\nO(1)"
  },
  {
    "title": "with(_:preferredSource:)",
    "url": "https://developer.apple.com/documentation/musickit/album/with(_:preferredsource:)",
    "html": "Discussion\n\nThis asynchronous method fetches a more complete representation of the receiver, loading the contents for each property you request from either the Apple Music catalog or the user’s library, depending on the preferred source as well the availability of the content in those respective data sources.\n\nFor example, if you want to load the tracks relationship for an Album, as found in the user’s library, as well as other associations of content that only live in the Apple Music catalog, like the recordLabels and relatedAlbums associations, you can use this code:\n\nlet album: Album = …\nlet detailedAlbum = try await album.with(\n    [\n        .tracks,\n        .recordLabels,\n        .relatedAlbums\n    ],\n    preferredSource: .library\n)\n\n\nHere, because the tracks relationship for an Album is supported in both the library and the catalog, and because the this code specifically requests MusicPropertySource.library as the preferred source, the framework will load the tracks from the user’s library. However, because the recordLabels and relatedAlbums associations are only available in the Apple Music catalog, the framework will also issue a network request to Apple Music API to fetch those associations of content from the catalog."
  },
  {
    "title": "description",
    "url": "https://developer.apple.com/documentation/musickit/track/description",
    "html": "Discussion\n\nCalling this property directly is discouraged. Instead, convert an instance of any type to a string by using the String(describing:) initializer. This initializer works with any type, and uses the custom description property for types that conform to CustomStringConvertible:\n\nstruct Point: CustomStringConvertible {\n    let x: Int, y: Int\n\n\n    var description: String {\n        return \"(\\(x), \\(y))\"\n    }\n}\n\n\nlet p = Point(x: 21, y: 30)\nlet s = String(describing: p)\nprint(s)\n// Prints \"(21, 30)\"\n\n\nThe conversion of p to a string in the assignment to s uses the Point type’s description property."
  },
  {
    "title": "with(_:)",
    "url": "https://developer.apple.com/documentation/musickit/album/with(_:)",
    "html": "Discussion\n\nThis asynchronous method fetches a more complete representation of the receiver from Apple Music API over the network."
  },
  {
    "title": "with(_:preferredSource:)",
    "url": "https://developer.apple.com/documentation/musickit/track/with(_:preferredsource:)",
    "html": "Discussion\n\nThis asynchronous method fetches a more complete representation of the receiver, loading the contents for each property you request from either the Apple Music catalog or the user’s library, depending on the preferred source as well the availability of the content in those respective data sources.\n\nFor example, if you want to load the tracks relationship for an Album, as found in the user’s library, as well as other associations of content that only live in the Apple Music catalog, like the recordLabels and relatedAlbums associations, you can use this code:\n\nlet album: Album = …\nlet detailedAlbum = try await album.with(\n    [\n        .tracks,\n        .recordLabels,\n        .relatedAlbums\n    ],\n    preferredSource: .library\n)\n\n\nHere, because the tracks relationship for an Album is supported in both the library and the catalog, and because the this code specifically requests MusicPropertySource.library as the preferred source, the framework will load the tracks from the user’s library. However, because the recordLabels and relatedAlbums associations are only available in the Apple Music catalog, the framework will also issue a network request to Apple Music API to fetch those associations of content from the catalog."
  },
  {
    "title": "with(_:)",
    "url": "https://developer.apple.com/documentation/musickit/track/with(_:)",
    "html": "Discussion\n\nThis asynchronous method fetches a more complete representation of the receiver from Apple Music API over the network."
  },
  {
    "title": "!=(_:_:)",
    "url": "https://developer.apple.com/documentation/musickit/musiccatalogresourceresponse/!=(_:_:)",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nInequality is the inverse of equality. For any values a and b, a != b implies that a == b is false.\n\nThis is the default implementation of the not-equal-to operator (!=) for any type that conforms to Equatable."
  },
  {
    "title": "init(from:)",
    "url": "https://developer.apple.com/documentation/musickit/musiccatalogresourceresponse/init(from:)",
    "html": "Parameters\ndecoder\n\nThe decoder to read data from.\n\nDiscussion\n\nThis initializer throws an error if reading from the decoder fails, or if the data read is corrupted or otherwise invalid."
  },
  {
    "title": "split(separator:maxSplits:omittingEmptySubsequences:)",
    "url": "https://developer.apple.com/documentation/musickit/musicitemcollection/split(separator:maxsplits:omittingemptysubsequences:)-2vhx7",
    "html": "Parameters\nseparator\n\nThe element that should be split upon.\n\nmaxSplits\n\nThe maximum number of times to split the sequence, or one less than the number of subsequences to return. If maxSplits + 1 subsequences are returned, the last one is a suffix of the original sequence containing the remaining elements. maxSplits must be greater than or equal to zero. The default value is Int.max.\n\nomittingEmptySubsequences\n\nIf false, an empty subsequence is returned in the result for each consecutive pair of separator elements in the sequence and for each instance of separator at the start or end of the sequence. If true, only nonempty subsequences are returned. The default value is true.\n\nReturn Value\n\nAn array of subsequences, split from this sequence’s elements.\n\nDiscussion\n\nThe resulting array consists of at most maxSplits + 1 subsequences. Elements that are used to split the sequence are not returned as part of any subsequence.\n\nThe following examples show the effects of the maxSplits and omittingEmptySubsequences parameters when splitting a string at each space character (” “). The first use of split returns each word that was originally separated by one or more spaces.\n\nlet line = \"BLANCHE:   I don't want realism. I want magic!\"\nprint(line.split(separator: \" \")\n          .map(String.init))\n// Prints \"[\"BLANCHE:\", \"I\", \"don\\'t\", \"want\", \"realism.\", \"I\", \"want\", \"magic!\"]\"\n\n\nThe second example passes 1 for the maxSplits parameter, so the original string is split just once, into two new strings.\n\nprint(line.split(separator: \" \", maxSplits: 1)\n          .map(String.init))\n// Prints \"[\"BLANCHE:\", \"  I don\\'t want realism. I want magic!\"]\"\n\n\nThe final example passes false for the omittingEmptySubsequences parameter, so the returned array contains empty strings where spaces were repeated.\n\nprint(line.split(separator: \" \", omittingEmptySubsequences: false)\n          .map(String.init))\n// Prints \"[\"BLANCHE:\", \"\", \"\", \"I\", \"don\\'t\", \"want\", \"realism.\", \"I\", \"want\", \"magic!\"]\"\n\n\nComplexity\n\nO(n), where n is the length of the sequence."
  },
  {
    "title": "hashValue",
    "url": "https://developer.apple.com/documentation/musickit/musiccatalogresourceresponse/hashvalue",
    "html": "Discussion\n\nHash values are not guaranteed to be equal across different executions of your program. Do not save hash values to use during a future execution.\n\nImportant\n\nhashValue is deprecated as a Hashable requirement. To conform to Hashable, implement the hash(into:) requirement instead. The compiler provides an implementation for hashValue for you."
  },
  {
    "title": "==(_:_:)",
    "url": "https://developer.apple.com/documentation/musickit/musiccatalogresourceresponse/==(_:_:)",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nEquality is the inverse of inequality. For any values a and b, a == b implies that a != b is false."
  },
  {
    "title": "debugDescription",
    "url": "https://developer.apple.com/documentation/musickit/musiccatalogresourceresponse/debugdescription",
    "html": "Discussion\n\nCalling this property directly is discouraged. Instead, convert an instance of any type to a string by using the String(reflecting:) initializer. This initializer works with any type, and uses the custom debugDescription property for types that conform to CustomDebugStringConvertible:\n\nstruct Point: CustomDebugStringConvertible {\n    let x: Int, y: Int\n\n\n    var debugDescription: String {\n        return \"(\\(x), \\(y))\"\n    }\n}\n\n\nlet p = Point(x: 21, y: 30)\nlet s = String(reflecting: p)\nprint(s)\n// Prints \"(21, 30)\"\n\n\nThe conversion of p to a string in the assignment to s uses the Point type’s debugDescription property."
  },
  {
    "title": "compactMap(_:)",
    "url": "https://developer.apple.com/documentation/musickit/musicitemcollection/compactmap(_:)",
    "html": "Parameters\ntransform\n\nA closure that accepts an element of this sequence as its argument and returns an optional value.\n\nReturn Value\n\nAn array of the non-nil results of calling transform with each element of the sequence.\n\nDiscussion\n\nUse this method to receive an array of non-optional values when your transformation produces an optional value.\n\nIn this example, note the difference in the result of using map and compactMap with a transformation that returns an optional Int value.\n\nlet possibleNumbers = [\"1\", \"2\", \"three\", \"///4///\", \"5\"]\n\n\nlet mapped: [Int?] = possibleNumbers.map { str in Int(str) }\n// [1, 2, nil, nil, 5]\n\n\nlet compactMapped: [Int] = possibleNumbers.compactMap { str in Int(str) }\n// [1, 2, 5]\n\n\nComplexity\n\nO(n), where n is the length of this sequence."
  },
  {
    "title": "flatMap(_:)",
    "url": "https://developer.apple.com/documentation/musickit/musicitemcollection/flatmap(_:)-21yez",
    "html": "Parameters\ntransform\n\nA closure that accepts an element of this sequence as its argument and returns a sequence or collection.\n\nReturn Value\n\nThe resulting flattened array.\n\nDiscussion\n\nUse this method to receive a single-level collection when your transformation produces a sequence or collection for each element.\n\nIn this example, note the difference in the result of using map and flatMap with a transformation that returns an array.\n\nlet numbers = [1, 2, 3, 4]\n\n\nlet mapped = numbers.map { Array(repeating: $0, count: $0) }\n// [[1], [2, 2], [3, 3, 3], [4, 4, 4, 4]]\n\n\nlet flatMapped = numbers.flatMap { Array(repeating: $0, count: $0) }\n// [1, 2, 2, 3, 3, 3, 4, 4, 4, 4]\n\n\nIn fact, s.flatMap(transform) is equivalent to Array(s.map(transform).joined()).\n\nComplexity\n\nO(m + n), where n is the length of this sequence and m is the length of the result."
  },
  {
    "title": "elementsEqual(_:by:)",
    "url": "https://developer.apple.com/documentation/musickit/musicitemcollection/elementsequal(_:by:)",
    "html": "Parameters\nother\n\nA sequence to compare to this sequence.\n\nareEquivalent\n\nA predicate that returns true if its two arguments are equivalent; otherwise, false.\n\nReturn Value\n\ntrue if this sequence and other contain equivalent items, using areEquivalent as the equivalence test; otherwise, false.\n\nDiscussion\n\nAt least one of the sequences must be finite.\n\nThe predicate must be a equivalence relation over the elements. That is, for any elements a, b, and c, the following conditions must hold:\n\nareEquivalent(a, a) is always true. (Reflexivity)\n\nareEquivalent(a, b) implies areEquivalent(b, a). (Symmetry)\n\nIf areEquivalent(a, b) and areEquivalent(b, c) are both true, then areEquivalent(a, c) is also true. (Transitivity)\n\nComplexity\n\nO(m), where m is the lesser of the length of the sequence and the length of other."
  },
  {
    "title": "contains(where:)",
    "url": "https://developer.apple.com/documentation/musickit/musicitemcollection/contains(where:)",
    "html": "Parameters\npredicate\n\nA closure that takes an element of the sequence as its argument and returns a Boolean value that indicates whether the passed element represents a match.\n\nReturn Value\n\ntrue if the sequence contains an element that satisfies predicate; otherwise, false.\n\nDiscussion\n\nYou can use the predicate to check for an element of a type that doesn’t conform to the Equatable protocol, such as the HTTPResponse enumeration in this example.\n\nenum HTTPResponse {\n    case ok\n    case error(Int)\n}\n\n\nlet lastThreeResponses: [HTTPResponse] = [.ok, .ok, .error(404)]\nlet hadError = lastThreeResponses.contains { element in\n    if case .error = element {\n        return true\n    } else {\n        return false\n    }\n}\n// 'hadError' == true\n\n\nAlternatively, a predicate can be satisfied by a range of Equatable elements or a general condition. This example shows how you can check an array for an expense greater than $100.\n\nlet expenses = [21.37, 55.21, 9.32, 10.18, 388.77, 11.41]\nlet hasBigPurchase = expenses.contains { $0 > 100 }\n// 'hasBigPurchase' == true\n\n\nComplexity\n\nO(n), where n is the length of the sequence."
  },
  {
    "title": "allSatisfy(_:)",
    "url": "https://developer.apple.com/documentation/musickit/musicitemcollection/allsatisfy(_:)",
    "html": "Parameters\npredicate\n\nA closure that takes an element of the sequence as its argument and returns a Boolean value that indicates whether the passed element satisfies a condition.\n\nReturn Value\n\ntrue if the sequence contains only elements that satisfy predicate; otherwise, false.\n\nDiscussion\n\nThe following code uses this method to test whether all the names in an array have at least five characters:\n\nlet names = [\"Sofia\", \"Camilla\", \"Martina\", \"Mateo\", \"Nicolás\"]\nlet allHaveAtLeastFive = names.allSatisfy({ $0.count >= 5 })\n// allHaveAtLeastFive == true\n\n\nIf the sequence is empty, this method returns true.\n\nComplexity\n\nO(n), where n is the length of the sequence."
  },
  {
    "title": "contains(_:)",
    "url": "https://developer.apple.com/documentation/musickit/musicitemcollection/contains(_:)-512nn",
    "html": "Parameters\nelement\n\nThe element to find in the sequence.\n\nReturn Value\n\ntrue if the element was found in the sequence; otherwise, false.\n\nDiscussion\n\nThis example checks to see whether a favorite actor is in an array storing a movie’s cast.\n\nlet cast = [\"Vivien\", \"Marlon\", \"Kim\", \"Karl\"]\nprint(cast.contains(\"Marlon\"))\n// Prints \"true\"\nprint(cast.contains(\"James\"))\n// Prints \"false\"\n\n\nComplexity\n\nO(n), where n is the length of the sequence."
  },
  {
    "title": "first(where:)",
    "url": "https://developer.apple.com/documentation/musickit/musicitemcollection/first(where:)",
    "html": "Parameters\npredicate\n\nA closure that takes an element of the sequence as its argument and returns a Boolean value indicating whether the element is a match.\n\nReturn Value\n\nThe first element of the sequence that satisfies predicate, or nil if there is no element that satisfies predicate.\n\nDiscussion\n\nThe following example uses the first(where:) method to find the first negative number in an array of integers:\n\nlet numbers = [3, 7, 4, -2, 9, -6, 10, 1]\nif let firstNegative = numbers.first(where: { $0 < 0 }) {\n    print(\"The first negative number is \\(firstNegative).\")\n}\n// Prints \"The first negative number is -2.\"\n\n\nComplexity\n\nO(n), where n is the length of the sequence."
  },
  {
    "title": "elementsEqual(_:)",
    "url": "https://developer.apple.com/documentation/musickit/musicitemcollection/elementsequal(_:)",
    "html": "Parameters\nother\n\nA sequence to compare to this sequence.\n\nReturn Value\n\ntrue if this sequence and other contain the same elements in the same order.\n\nDiscussion\n\nAt least one of the sequences must be finite.\n\nThis example tests whether one countable range shares the same elements as another countable range and an array.\n\nlet a = 1...3\nlet b = 1...10\n\n\nprint(a.elementsEqual(b))\n// Prints \"false\"\nprint(a.elementsEqual([1, 2, 3]))\n// Prints \"true\"\n\n\nComplexity\n\nO(m), where m is the lesser of the length of the sequence and the length of other."
  },
  {
    "title": "filter(_:)",
    "url": "https://developer.apple.com/documentation/musickit/musicitemcollection/filter(_:)-9p5wx",
    "html": "Parameters\nisIncluded\n\nA closure that takes an element of the sequence as its argument and returns a Boolean value indicating whether the element should be included in the returned array.\n\nReturn Value\n\nAn array of the elements that isIncluded allowed.\n\nDiscussion\n\nIn this example, filter(_:) is used to include only names shorter than five characters.\n\nlet cast = [\"Vivien\", \"Marlon\", \"Kim\", \"Karl\"]\nlet shortNames = cast.filter { $0.count < 5 }\nprint(shortNames)\n// Prints \"[\"Kim\", \"Karl\"]\"\n\n\nComplexity\n\nO(n), where n is the length of the sequence."
  },
  {
    "title": "enumerated()",
    "url": "https://developer.apple.com/documentation/musickit/musicitemcollection/enumerated()",
    "html": "Return Value\n\nA sequence of pairs enumerating the sequence.\n\nDiscussion\n\nThis example enumerates the characters of the string “Swift” and prints each character along with its place in the string.\n\nfor (n, c) in \"Swift\".enumerated() {\n    print(\"\\(n): '\\(c)'\")\n}\n// Prints \"0: 'S'\"\n// Prints \"1: 'w'\"\n// Prints \"2: 'i'\"\n// Prints \"3: 'f'\"\n// Prints \"4: 't'\"\n\n\nWhen you enumerate a collection, the integer part of each pair is a counter for the enumeration, but is not necessarily the index of the paired value. These counters can be used as indices only in instances of zero-based, integer-indexed collections, such as Array and ContiguousArray. For other collections the counters may be out of range or of the wrong type to use as an index. To iterate over the elements of a collection with its indices, use the zip(_:_:) function.\n\nThis example iterates over the indices and elements of a set, building a list consisting of indices of names with five or fewer letters.\n\nlet names: Set = [\"Sofia\", \"Camilla\", \"Martina\", \"Mateo\", \"Nicolás\"]\nvar shorterIndices: [Set<String>.Index] = []\nfor (i, name) in zip(names.indices, names) {\n    if name.count <= 5 {\n        shorterIndices.append(i)\n    }\n}\n\n\nNow that the shorterIndices array holds the indices of the shorter names in the names set, you can use those indices to access elements in the set.\n\nfor i in shorterIndices {\n    print(names[i])\n}\n// Prints \"Sofia\"\n// Prints \"Mateo\"\n\n\nComplexity\n\nO(1)"
  },
  {
    "title": "compare(_:_:)",
    "url": "https://developer.apple.com/documentation/musickit/musicitemcollection/compare(_:_:)",
    "html": "Discussion\n\nThe first element of the sequence of comparators specifies the primary comparator to be used in sorting the sequence’s elements. Any subsequent comparators are used to further refine the order of elements with equal values."
  },
  {
    "title": "init(from:)",
    "url": "https://developer.apple.com/documentation/musickit/musicpersonalrecommendationsresponse/init(from:)",
    "html": "Parameters\ndecoder\n\nThe decoder to read data from.\n\nDiscussion\n\nThis initializer throws an error if reading from the decoder fails, or if the data read is corrupted or otherwise invalid."
  },
  {
    "title": "description",
    "url": "https://developer.apple.com/documentation/musickit/musicpersonalrecommendationsresponse/description",
    "html": "Discussion\n\nCalling this property directly is discouraged. Instead, convert an instance of any type to a string by using the String(describing:) initializer. This initializer works with any type, and uses the custom description property for types that conform to CustomStringConvertible:\n\nstruct Point: CustomStringConvertible {\n    let x: Int, y: Int\n\n\n    var description: String {\n        return \"(\\(x), \\(y))\"\n    }\n}\n\n\nlet p = Point(x: 21, y: 30)\nlet s = String(describing: p)\nprint(s)\n// Prints \"(21, 30)\"\n\n\nThe conversion of p to a string in the assignment to s uses the Point type’s description property."
  },
  {
    "title": "!=(_:_:)",
    "url": "https://developer.apple.com/documentation/musickit/track/!=(_:_:)",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nInequality is the inverse of equality. For any values a and b, a != b implies that a == b is false.\n\nThis is the default implementation of the not-equal-to operator (!=) for any type that conforms to Equatable."
  },
  {
    "title": "!=(_:_:)",
    "url": "https://developer.apple.com/documentation/musickit/musiccatalogsearchresponse/!=(_:_:)",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nInequality is the inverse of equality. For any values a and b, a != b implies that a == b is false.\n\nThis is the default implementation of the not-equal-to operator (!=) for any type that conforms to Equatable."
  },
  {
    "title": "init(from:)",
    "url": "https://developer.apple.com/documentation/musickit/musiccatalogsearchresponse/init(from:)",
    "html": "Parameters\ndecoder\n\nThe decoder to read data from.\n\nDiscussion\n\nThis initializer throws an error if reading from the decoder fails, or if the data read is corrupted or otherwise invalid."
  },
  {
    "title": "encode(to:)",
    "url": "https://developer.apple.com/documentation/musickit/musiccatalogsearchresponse/encode(to:)",
    "html": "Parameters\nencoder\n\nThe encoder to write data to.\n\nDiscussion\n\nIf the value fails to encode anything, encoder will encode an empty keyed container in its place.\n\nThis function throws an error if any values are invalid for the given encoder’s format."
  },
  {
    "title": "description",
    "url": "https://developer.apple.com/documentation/musickit/musiccatalogsearchresponse/description",
    "html": "Discussion\n\nCalling this property directly is discouraged. Instead, convert an instance of any type to a string by using the String(describing:) initializer. This initializer works with any type, and uses the custom description property for types that conform to CustomStringConvertible:\n\nstruct Point: CustomStringConvertible {\n    let x: Int, y: Int\n\n\n    var description: String {\n        return \"(\\(x), \\(y))\"\n    }\n}\n\n\nlet p = Point(x: 21, y: 30)\nlet s = String(describing: p)\nprint(s)\n// Prints \"(21, 30)\"\n\n\nThe conversion of p to a string in the assignment to s uses the Point type’s description property."
  },
  {
    "title": "description",
    "url": "https://developer.apple.com/documentation/musickit/previewasset/description",
    "html": "Discussion\n\nCalling this property directly is discouraged. Instead, convert an instance of any type to a string by using the String(describing:) initializer. This initializer works with any type, and uses the custom description property for types that conform to CustomStringConvertible:\n\nstruct Point: CustomStringConvertible {\n    let x: Int, y: Int\n\n\n    var description: String {\n        return \"(\\(x), \\(y))\"\n    }\n}\n\n\nlet p = Point(x: 21, y: 30)\nlet s = String(describing: p)\nprint(s)\n// Prints \"(21, 30)\"\n\n\nThe conversion of p to a string in the assignment to s uses the Point type’s description property."
  },
  {
    "title": "init(from:)",
    "url": "https://developer.apple.com/documentation/musickit/track/init(from:)",
    "html": "Parameters\ndecoder\n\nThe decoder to read data from.\n\nDiscussion\n\nThis initializer throws an error if reading from the decoder fails, or if the data read is corrupted or otherwise invalid."
  },
  {
    "title": "encode(to:)",
    "url": "https://developer.apple.com/documentation/musickit/track/encode(to:)",
    "html": "Parameters\nencoder\n\nThe encoder to write data to.\n\nDiscussion\n\nIf the value fails to encode anything, encoder will encode an empty keyed container in its place.\n\nThis function throws an error if any values are invalid for the given encoder’s format."
  },
  {
    "title": "debugDescription",
    "url": "https://developer.apple.com/documentation/musickit/track/debugdescription",
    "html": "Discussion\n\nCalling this property directly is discouraged. Instead, convert an instance of any type to a string by using the String(reflecting:) initializer. This initializer works with any type, and uses the custom debugDescription property for types that conform to CustomDebugStringConvertible:\n\nstruct Point: CustomDebugStringConvertible {\n    let x: Int, y: Int\n\n\n    var debugDescription: String {\n        return \"(\\(x), \\(y))\"\n    }\n}\n\n\nlet p = Point(x: 21, y: 30)\nlet s = String(reflecting: p)\nprint(s)\n// Prints \"(21, 30)\"\n\n\nThe conversion of p to a string in the assignment to s uses the Point type’s debugDescription property."
  },
  {
    "title": "!=(_:_:)",
    "url": "https://developer.apple.com/documentation/musickit/previewasset/!=(_:_:)",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nInequality is the inverse of equality. For any values a and b, a != b implies that a == b is false.\n\nThis is the default implementation of the not-equal-to operator (!=) for any type that conforms to Equatable."
  },
  {
    "title": "debugDescription",
    "url": "https://developer.apple.com/documentation/musickit/previewasset/debugdescription",
    "html": "Discussion\n\nCalling this property directly is discouraged. Instead, convert an instance of any type to a string by using the String(reflecting:) initializer. This initializer works with any type, and uses the custom debugDescription property for types that conform to CustomDebugStringConvertible:\n\nstruct Point: CustomDebugStringConvertible {\n    let x: Int, y: Int\n\n\n    var debugDescription: String {\n        return \"(\\(x), \\(y))\"\n    }\n}\n\n\nlet p = Point(x: 21, y: 30)\nlet s = String(reflecting: p)\nprint(s)\n// Prints \"(21, 30)\"\n\n\nThe conversion of p to a string in the assignment to s uses the Point type’s debugDescription property."
  },
  {
    "title": "encode(to:)",
    "url": "https://developer.apple.com/documentation/musickit/previewasset/encode(to:)",
    "html": "Parameters\nencoder\n\nThe encoder to write data to.\n\nDiscussion\n\nIf the value fails to encode anything, encoder will encode an empty keyed container in its place.\n\nThis function throws an error if any values are invalid for the given encoder’s format."
  },
  {
    "title": "init(from:)",
    "url": "https://developer.apple.com/documentation/musickit/previewasset/init(from:)",
    "html": "Parameters\ndecoder\n\nThe decoder to read data from.\n\nDiscussion\n\nThis initializer throws an error if reading from the decoder fails, or if the data read is corrupted or otherwise invalid."
  },
  {
    "title": "hashValue",
    "url": "https://developer.apple.com/documentation/musickit/musicrecentlyplayedresponse/hashvalue",
    "html": "Discussion\n\nHash values are not guaranteed to be equal across different executions of your program. Do not save hash values to use during a future execution.\n\nImportant\n\nhashValue is deprecated as a Hashable requirement. To conform to Hashable, implement the hash(into:) requirement instead. The compiler provides an implementation for hashValue for you."
  },
  {
    "title": "hash(into:)",
    "url": "https://developer.apple.com/documentation/musickit/musicrecentlyplayedresponse/hash(into:)",
    "html": "Parameters\nhasher\n\nThe hasher to use when combining the components of this instance.\n\nDiscussion\n\nImplement this method to conform to the Hashable protocol. The components used for hashing must be the same as the components compared in your type’s == operator implementation. Call hasher.combine(_:) with each of these components.\n\nImportant\n\nIn your implementation of hash(into:), don’t call finalize() on the hasher instance provided, or replace it with a different instance. Doing so may become a compile-time error in the future."
  },
  {
    "title": "encode(to:)",
    "url": "https://developer.apple.com/documentation/musickit/album/encode(to:)",
    "html": "Parameters\nencoder\n\nThe encoder to write data to.\n\nDiscussion\n\nIf the value fails to encode anything, encoder will encode an empty keyed container in its place.\n\nThis function throws an error if any values are invalid for the given encoder’s format."
  },
  {
    "title": "!=(_:_:)",
    "url": "https://developer.apple.com/documentation/musickit/album/!=(_:_:)",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nInequality is the inverse of equality. For any values a and b, a != b implies that a == b is false.\n\nThis is the default implementation of the not-equal-to operator (!=) for any type that conforms to Equatable."
  },
  {
    "title": "init(from:)",
    "url": "https://developer.apple.com/documentation/musickit/album/init(from:)",
    "html": "Parameters\ndecoder\n\nThe decoder to read data from.\n\nDiscussion\n\nThis initializer throws an error if reading from the decoder fails, or if the data read is corrupted or otherwise invalid."
  },
  {
    "title": "formIndex(before:)",
    "url": "https://developer.apple.com/documentation/musickit/musicitemcollection/formindex(before:)",
    "html": "Parameters\ni\n\nA valid index of the collection. i must be greater than startIndex."
  },
  {
    "title": "debugDescription",
    "url": "https://developer.apple.com/documentation/musickit/musicdataresponse/debugdescription",
    "html": "Discussion\n\nCalling this property directly is discouraged. Instead, convert an instance of any type to a string by using the String(reflecting:) initializer. This initializer works with any type, and uses the custom debugDescription property for types that conform to CustomDebugStringConvertible:\n\nstruct Point: CustomDebugStringConvertible {\n    let x: Int, y: Int\n\n\n    var debugDescription: String {\n        return \"(\\(x), \\(y))\"\n    }\n}\n\n\nlet p = Point(x: 21, y: 30)\nlet s = String(reflecting: p)\nprint(s)\n// Prints \"(21, 30)\"\n\n\nThe conversion of p to a string in the assignment to s uses the Point type’s debugDescription property."
  },
  {
    "title": "!=(_:_:)",
    "url": "https://developer.apple.com/documentation/musickit/musicdataresponse/!=(_:_:)",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nInequality is the inverse of equality. For any values a and b, a != b implies that a == b is false.\n\nThis is the default implementation of the not-equal-to operator (!=) for any type that conforms to Equatable."
  },
  {
    "title": "ApplicationMusicPlayer.Queue.Entries",
    "url": "https://developer.apple.com/documentation/musickit/applicationmusicplayer/queue-swift.class/entries-swift.struct",
    "html": "Topics\nOperators\nstatic func == (ApplicationMusicPlayer.Queue.Entries, ApplicationMusicPlayer.Queue.Entries) -> Bool\nReturns a Boolean value indicating whether two values are equal.\nInitializers\ninit()\nCreates an empty collection of entries.\ninit(arrayLiteral: MusicPlayer.Queue.Entry...)\nCreates an instance initialized with the given elements.\nInstance Properties\nvar endIndex: ApplicationMusicPlayer.Queue.Entries.Index\nThe collection’s “past the end” position—that is, the position one greater than the last valid subscript argument.\nvar hashValue: Int\nThe hash value.\nvar indices: ApplicationMusicPlayer.Queue.Entries.Indices\nThe indices that are valid for subscripting the collection, in ascending order.\nvar startIndex: ApplicationMusicPlayer.Queue.Entries.Index\nThe position of the first element in a nonempty collection.\nInstance Methods\nfunc distance(from: ApplicationMusicPlayer.Queue.Entries.Index, to: ApplicationMusicPlayer.Queue.Entries.Index) -> Int\nReturns the distance between two indices.\nfunc formIndex(after: inout ApplicationMusicPlayer.Queue.Entries.Index)\nReplaces the given index with its successor.\nfunc formIndex(before: inout ApplicationMusicPlayer.Queue.Entries.Index)\nReplaces the given index with its predecessor.\nfunc hash(into: inout Hasher)\nHashes the essential components of this value by feeding them into the given hasher.\nfunc index(ApplicationMusicPlayer.Queue.Entries.Index, offsetBy: Int) -> ApplicationMusicPlayer.Queue.Entries.Index\nReturns an index that is the specified distance from the given index.\nfunc index(ApplicationMusicPlayer.Queue.Entries.Index, offsetBy: Int, limitedBy: ApplicationMusicPlayer.Queue.Entries.Index) -> ApplicationMusicPlayer.Queue.Entries.Index?\nReturns an index that is the specified distance from the given index, unless that distance is beyond a given limiting index.\nfunc index(after: ApplicationMusicPlayer.Queue.Entries.Index) -> ApplicationMusicPlayer.Queue.Entries.Index\nReturns the position immediately after the given index.\nfunc index(before: ApplicationMusicPlayer.Queue.Entries.Index) -> ApplicationMusicPlayer.Queue.Entries.Index\nReturns the position immediately before the given index.\nfunc makeIterator() -> ApplicationMusicPlayer.Queue.Entries.Iterator\nReturns an iterator over the elements of this sequence.\nfunc replaceSubrange<C>(Range<ApplicationMusicPlayer.Queue.Entries.Index>, with: C)\nReplaces the specified subrange of elements with the given collection.\nSubscripts\nsubscript(Range<ApplicationMusicPlayer.Queue.Entries.Index>) -> ApplicationMusicPlayer.Queue.Entries.SubSequence\nAccesses a contiguous subrange of the collection’s elements.\nsubscript(ApplicationMusicPlayer.Queue.Entries.Index) -> ApplicationMusicPlayer.Queue.Entries.Element\nAccesses the element at the specified position.\nType Aliases\ntypealias ArrayLiteralElement\nThe type of the elements of an array literal.\ntypealias Element\nA type representing the sequence’s elements.\ntypealias Index\nA type that represents a position in the collection.\ntypealias Indices\nA type that represents the indices that are valid for subscripting the collection, in ascending order.\ntypealias Iterator\nA type that provides the sequence’s iteration interface and encapsulates its iteration state.\ntypealias SubSequence\nA collection representing a contiguous subrange of this collection’s elements. The subsequence shares indices with the original collection.\nDefault Implementations\nBidirectionalCollection Implementations\nCollection Implementations\nEquatable Implementations\nMutableCollection Implementations\nRangeReplaceableCollection Implementations\nSequence Implementations\nRelationships\nConforms To\nBidirectionalCollection\nCollection\nEquatable\nExpressibleByArrayLiteral\nHashable\nMutableCollection\nRandomAccessCollection\nRangeReplaceableCollection\nSequence"
  },
  {
    "title": "description",
    "url": "https://developer.apple.com/documentation/musickit/musicdataresponse/description",
    "html": "Discussion\n\nCalling this property directly is discouraged. Instead, convert an instance of any type to a string by using the String(describing:) initializer. This initializer works with any type, and uses the custom description property for types that conform to CustomStringConvertible:\n\nstruct Point: CustomStringConvertible {\n    let x: Int, y: Int\n\n\n    var description: String {\n        return \"(\\(x), \\(y))\"\n    }\n}\n\n\nlet p = Point(x: 21, y: 30)\nlet s = String(describing: p)\nprint(s)\n// Prints \"(21, 30)\"\n\n\nThe conversion of p to a string in the assignment to s uses the Point type’s description property."
  },
  {
    "title": "hash(into:)",
    "url": "https://developer.apple.com/documentation/musickit/musiccatalogresourceresponse/hash(into:)",
    "html": "Parameters\nhasher\n\nThe hasher to use when combining the components of this instance.\n\nDiscussion\n\nImplement this method to conform to the Hashable protocol. The components used for hashing must be the same as the components compared in your type’s == operator implementation. Call hasher.combine(_:) with each of these components.\n\nImportant\n\nIn your implementation of hash(into:), don’t call finalize() on the hasher instance provided, or replace it with a different instance. Doing so may become a compile-time error in the future."
  },
  {
    "title": "!=(_:_:)",
    "url": "https://developer.apple.com/documentation/musickit/musicsubscription/!=(_:_:)",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nInequality is the inverse of equality. For any values a and b, a != b implies that a == b is false.\n\nThis is the default implementation of the not-equal-to operator (!=) for any type that conforms to Equatable."
  },
  {
    "title": "Equatable Implementations",
    "url": "https://developer.apple.com/documentation/musickit/musicsubscriptionoffer/options/equatable-implementations",
    "html": "Topics\nOperators\nstatic func != (Self, Self) -> Bool\nReturns a Boolean value indicating whether two values are not equal.\nstatic func == (MusicSubscriptionOffer.Options, MusicSubscriptionOffer.Options) -> Bool\nReturns a Boolean value indicating whether two values are equal."
  },
  {
    "title": "Equatable Implementations",
    "url": "https://developer.apple.com/documentation/musickit/musicsubscriptionoffer/action/equatable-implementations",
    "html": "Topics\nOperators\nstatic func != (Self, Self) -> Bool\nReturns a Boolean value indicating whether two values are not equal."
  },
  {
    "title": "CustomStringConvertible Implementations",
    "url": "https://developer.apple.com/documentation/musickit/musicsubscriptionoffer/action/customstringconvertible-implementations",
    "html": "Topics\nInstance Properties\nvar description: String\nA textual representation of this instance."
  },
  {
    "title": "description",
    "url": "https://developer.apple.com/documentation/musickit/album/description",
    "html": "Discussion\n\nCalling this property directly is discouraged. Instead, convert an instance of any type to a string by using the String(describing:) initializer. This initializer works with any type, and uses the custom description property for types that conform to CustomStringConvertible:\n\nstruct Point: CustomStringConvertible {\n    let x: Int, y: Int\n\n\n    var description: String {\n        return \"(\\(x), \\(y))\"\n    }\n}\n\n\nlet p = Point(x: 21, y: 30)\nlet s = String(describing: p)\nprint(s)\n// Prints \"(21, 30)\"\n\n\nThe conversion of p to a string in the assignment to s uses the Point type’s description property."
  },
  {
    "title": "debugDescription",
    "url": "https://developer.apple.com/documentation/musickit/album/debugdescription",
    "html": "Discussion\n\nCalling this property directly is discouraged. Instead, convert an instance of any type to a string by using the String(reflecting:) initializer. This initializer works with any type, and uses the custom debugDescription property for types that conform to CustomDebugStringConvertible:\n\nstruct Point: CustomDebugStringConvertible {\n    let x: Int, y: Int\n\n\n    var debugDescription: String {\n        return \"(\\(x), \\(y))\"\n    }\n}\n\n\nlet p = Point(x: 21, y: 30)\nlet s = String(reflecting: p)\nprint(s)\n// Prints \"(21, 30)\"\n\n\nThe conversion of p to a string in the assignment to s uses the Point type’s debugDescription property."
  },
  {
    "title": "!=(_:_:)",
    "url": "https://developer.apple.com/documentation/musickit/musicrecentlyplayedresponse/!=(_:_:)",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nInequality is the inverse of equality. For any values a and b, a != b implies that a == b is false.\n\nThis is the default implementation of the not-equal-to operator (!=) for any type that conforms to Equatable."
  },
  {
    "title": "==(_:_:)",
    "url": "https://developer.apple.com/documentation/musickit/musicrecentlyplayedresponse/==(_:_:)",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nEquality is the inverse of inequality. For any values a and b, a == b implies that a != b is false."
  },
  {
    "title": "debugDescription",
    "url": "https://developer.apple.com/documentation/musickit/musicpersonalrecommendationsresponse/debugdescription",
    "html": "Discussion\n\nCalling this property directly is discouraged. Instead, convert an instance of any type to a string by using the String(reflecting:) initializer. This initializer works with any type, and uses the custom debugDescription property for types that conform to CustomDebugStringConvertible:\n\nstruct Point: CustomDebugStringConvertible {\n    let x: Int, y: Int\n\n\n    var debugDescription: String {\n        return \"(\\(x), \\(y))\"\n    }\n}\n\n\nlet p = Point(x: 21, y: 30)\nlet s = String(reflecting: p)\nprint(s)\n// Prints \"(21, 30)\"\n\n\nThe conversion of p to a string in the assignment to s uses the Point type’s debugDescription property."
  },
  {
    "title": "debugDescription",
    "url": "https://developer.apple.com/documentation/musickit/musicrecentlyplayedresponse/debugdescription",
    "html": "Discussion\n\nCalling this property directly is discouraged. Instead, convert an instance of any type to a string by using the String(reflecting:) initializer. This initializer works with any type, and uses the custom debugDescription property for types that conform to CustomDebugStringConvertible:\n\nstruct Point: CustomDebugStringConvertible {\n    let x: Int, y: Int\n\n\n    var debugDescription: String {\n        return \"(\\(x), \\(y))\"\n    }\n}\n\n\nlet p = Point(x: 21, y: 30)\nlet s = String(reflecting: p)\nprint(s)\n// Prints \"(21, 30)\"\n\n\nThe conversion of p to a string in the assignment to s uses the Point type’s debugDescription property."
  },
  {
    "title": "description",
    "url": "https://developer.apple.com/documentation/musickit/musicrecentlyplayedresponse/description",
    "html": "Discussion\n\nCalling this property directly is discouraged. Instead, convert an instance of any type to a string by using the String(describing:) initializer. This initializer works with any type, and uses the custom description property for types that conform to CustomStringConvertible:\n\nstruct Point: CustomStringConvertible {\n    let x: Int, y: Int\n\n\n    var description: String {\n        return \"(\\(x), \\(y))\"\n    }\n}\n\n\nlet p = Point(x: 21, y: 30)\nlet s = String(describing: p)\nprint(s)\n// Prints \"(21, 30)\"\n\n\nThe conversion of p to a string in the assignment to s uses the Point type’s description property."
  },
  {
    "title": "!=(_:_:)",
    "url": "https://developer.apple.com/documentation/musickit/titledsection/!=(_:_:)",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nInequality is the inverse of equality. For any values a and b, a != b implies that a == b is false.\n\nThis is the default implementation of the not-equal-to operator (!=) for any type that conforms to Equatable."
  },
  {
    "title": "action",
    "url": "https://developer.apple.com/documentation/musickit/musicsubscriptionoffer/options/action",
    "html": "Discussion\n\nDefaults to subscribe."
  },
  {
    "title": "!=(_:_:)",
    "url": "https://developer.apple.com/documentation/musickit/musicpersonalrecommendationsresponse/!=(_:_:)",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nInequality is the inverse of equality. For any values a and b, a != b implies that a == b is false.\n\nThis is the default implementation of the not-equal-to operator (!=) for any type that conforms to Equatable."
  },
  {
    "title": "hashValue",
    "url": "https://developer.apple.com/documentation/musickit/musiclibrarysectionedresponse/hashvalue",
    "html": "Discussion\n\nHash values are not guaranteed to be equal across different executions of your program. Do not save hash values to use during a future execution.\n\nImportant\n\nhashValue is deprecated as a Hashable requirement. To conform to Hashable, implement the hash(into:) requirement instead. The compiler provides an implementation for hashValue for you."
  },
  {
    "title": "!=(_:_:)",
    "url": "https://developer.apple.com/documentation/musickit/musicpersonalrecommendationsrequest/!=(_:_:)",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nInequality is the inverse of equality. For any values a and b, a != b implies that a == b is false.\n\nThis is the default implementation of the not-equal-to operator (!=) for any type that conforms to Equatable."
  },
  {
    "title": "hash(into:)",
    "url": "https://developer.apple.com/documentation/musickit/musiclibrarysectionedresponse/hash(into:)",
    "html": "Parameters\nhasher\n\nThe hasher to use when combining the components of this instance.\n\nDiscussion\n\nImplement this method to conform to the Hashable protocol. The components used for hashing must be the same as the components compared in your type’s == operator implementation. Call hasher.combine(_:) with each of these components.\n\nImportant\n\nIn your implementation of hash(into:), don’t call finalize() on the hasher instance provided, or replace it with a different instance. Doing so may become a compile-time error in the future."
  },
  {
    "title": "hashValue",
    "url": "https://developer.apple.com/documentation/musickit/musiccatalogchartsresponse/hashvalue",
    "html": "Discussion\n\nHash values are not guaranteed to be equal across different executions of your program. Do not save hash values to use during a future execution.\n\nImportant\n\nhashValue is deprecated as a Hashable requirement. To conform to Hashable, implement the hash(into:) requirement instead. The compiler provides an implementation for hashValue for you."
  },
  {
    "title": "rawValue",
    "url": "https://developer.apple.com/documentation/musickit/musicsubscription/error/rawvalue-swift.property",
    "html": "Discussion\n\nA new instance initialized with rawValue will be equivalent to this instance. For example:\n\nenum PaperSize: String {\n    case A4, A5, Letter, Legal\n}\n\n\nlet selectedSize = PaperSize.Letter\nprint(selectedSize.rawValue)\n// Prints \"Letter\"\n\n\nprint(selectedSize == PaperSize(rawValue: selectedSize.rawValue)!)\n// Prints \"true\"\n"
  },
  {
    "title": "MusicSubscription.Error.RawValue",
    "url": "https://developer.apple.com/documentation/musickit/musicsubscription/error/rawvalue-swift.typealias",
    "html": "Discussion\n\nEvery distinct value of the conforming type has a corresponding unique value of the RawValue type, but there may be values of the RawValue type that don’t have a corresponding value of the conforming type."
  },
  {
    "title": "init(term:includingTopResultsOfTypes:)",
    "url": "https://developer.apple.com/documentation/musickit/musiccatalogsearchsuggestionsrequest/init(term:includingtopresultsoftypes:)",
    "html": "Discussion\n\nBy default, top results are not fetched."
  },
  {
    "title": "Equatable Implementations",
    "url": "https://developer.apple.com/documentation/musickit/musicsubscription/error/equatable-implementations",
    "html": "Topics\nOperators\nstatic func != (Self, Self) -> Bool\nReturns a Boolean value indicating whether two values are not equal."
  },
  {
    "title": "messageIdentifier",
    "url": "https://developer.apple.com/documentation/musickit/musicsubscriptionoffer/options/messageidentifier",
    "html": "Discussion\n\nDefaults to join."
  },
  {
    "title": "Hashable Implementations",
    "url": "https://developer.apple.com/documentation/musickit/musicsubscriptionoffer/options/hashable-implementations",
    "html": "Topics\nInstance Properties\nvar hashValue: Int\nThe hash value.\nInstance Methods\nfunc hash(into: inout Hasher)\nHashes the essential components of this value by feeding them into the given hasher."
  },
  {
    "title": "CustomStringConvertible Implementations",
    "url": "https://developer.apple.com/documentation/musickit/musicsubscriptionoffer/options/customstringconvertible-implementations",
    "html": "Topics\nInstance Properties\nvar description: String\nA textual representation of this instance."
  },
  {
    "title": "rawValue",
    "url": "https://developer.apple.com/documentation/musickit/musicsubscriptionoffer/messageidentifier/rawvalue-swift.property",
    "html": "Discussion\n\nA new instance initialized with rawValue will be equivalent to this instance. For example:\n\nenum PaperSize: String {\n    case A4, A5, Letter, Legal\n}\n\n\nlet selectedSize = PaperSize.Letter\nprint(selectedSize.rawValue)\n// Prints \"Letter\"\n\n\nprint(selectedSize == PaperSize(rawValue: selectedSize.rawValue)!)\n// Prints \"true\"\n"
  },
  {
    "title": "MusicSubscriptionOffer.MessageIdentifier.RawValue",
    "url": "https://developer.apple.com/documentation/musickit/musicsubscriptionoffer/messageidentifier/rawvalue-swift.typealias",
    "html": "Discussion\n\nEvery distinct value of the conforming type has a corresponding unique value of the RawValue type, but there may be values of the RawValue type that don’t have a corresponding value of the conforming type."
  },
  {
    "title": "rawValue",
    "url": "https://developer.apple.com/documentation/musickit/musicsubscriptionoffer/action/rawvalue-swift.property",
    "html": "Discussion\n\nA new instance initialized with rawValue will be equivalent to this instance. For example:\n\nenum PaperSize: String {\n    case A4, A5, Letter, Legal\n}\n\n\nlet selectedSize = PaperSize.Letter\nprint(selectedSize.rawValue)\n// Prints \"Letter\"\n\n\nprint(selectedSize == PaperSize(rawValue: selectedSize.rawValue)!)\n// Prints \"true\"\n"
  },
  {
    "title": "MusicSubscriptionOffer.Action.RawValue",
    "url": "https://developer.apple.com/documentation/musickit/musicsubscriptionoffer/action/rawvalue-swift.typealias",
    "html": "Discussion\n\nEvery distinct value of the conforming type has a corresponding unique value of the RawValue type, but there may be values of the RawValue type that don’t have a corresponding value of the conforming type."
  },
  {
    "title": "RawRepresentable Implementations",
    "url": "https://developer.apple.com/documentation/musickit/musicsubscriptionoffer/action/rawrepresentable-implementations",
    "html": "Topics\nInstance Properties\nvar hashValue: Int\nAvailable when Self conforms to Hashable and RawValue conforms to Hashable.\nInstance Methods\nfunc hash(into: inout Hasher)\nAvailable when Self conforms to Hashable and RawValue conforms to Hashable."
  },
  {
    "title": "!=(_:_:)",
    "url": "https://developer.apple.com/documentation/musickit/musiccatalogchartsrequest/!=(_:_:)",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nInequality is the inverse of equality. For any values a and b, a != b implies that a == b is false.\n\nThis is the default implementation of the not-equal-to operator (!=) for any type that conforms to Equatable."
  },
  {
    "title": "description",
    "url": "https://developer.apple.com/documentation/musickit/musiclibrarysectionedresponse/description",
    "html": "Discussion\n\nCalling this property directly is discouraged. Instead, convert an instance of any type to a string by using the String(describing:) initializer. This initializer works with any type, and uses the custom description property for types that conform to CustomStringConvertible:\n\nstruct Point: CustomStringConvertible {\n    let x: Int, y: Int\n\n\n    var description: String {\n        return \"(\\(x), \\(y))\"\n    }\n}\n\n\nlet p = Point(x: 21, y: 30)\nlet s = String(describing: p)\nprint(s)\n// Prints \"(21, 30)\"\n\n\nThe conversion of p to a string in the assignment to s uses the Point type’s description property."
  },
  {
    "title": "!=(_:_:)",
    "url": "https://developer.apple.com/documentation/musickit/musicdatarequest/!=(_:_:)",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nInequality is the inverse of equality. For any values a and b, a != b implies that a == b is false.\n\nThis is the default implementation of the not-equal-to operator (!=) for any type that conforms to Equatable."
  },
  {
    "title": "==(_:_:)",
    "url": "https://developer.apple.com/documentation/musickit/musiclibrarysectionedresponse/==(_:_:)",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nEquality is the inverse of inequality. For any values a and b, a == b implies that a != b is false."
  },
  {
    "title": "!=(_:_:)",
    "url": "https://developer.apple.com/documentation/musickit/musiclibrarysectionedresponse/!=(_:_:)",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nInequality is the inverse of equality. For any values a and b, a != b implies that a == b is false.\n\nThis is the default implementation of the not-equal-to operator (!=) for any type that conforms to Equatable."
  },
  {
    "title": "hashValue",
    "url": "https://developer.apple.com/documentation/musickit/musiclibrarysearchresponse/hashvalue",
    "html": "Discussion\n\nHash values are not guaranteed to be equal across different executions of your program. Do not save hash values to use during a future execution.\n\nImportant\n\nhashValue is deprecated as a Hashable requirement. To conform to Hashable, implement the hash(into:) requirement instead. The compiler provides an implementation for hashValue for you."
  },
  {
    "title": "init(from:)",
    "url": "https://developer.apple.com/documentation/musickit/musicitemid/init(from:)-1vo44",
    "html": "Parameters\ndecoder\n\nThe decoder to read data from.\n\nDiscussion\n\nThis initializer throws an error if reading from the decoder fails, or if the data read is corrupted or otherwise invalid."
  },
  {
    "title": "hash(into:)",
    "url": "https://developer.apple.com/documentation/musickit/anymusicproperty/hash(into:)",
    "html": "Parameters\nhasher\n\nThe hasher to use when combining the components of this instance.\n\nDiscussion\n\nImplement this method to conform to the Hashable protocol. The components used for hashing must be the same as the components compared in your type’s == operator implementation. Call hasher.combine(_:) with each of these components.\n\nImportant\n\nIn your implementation of hash(into:), don’t call finalize() on the hasher instance provided, or replace it with a different instance. Doing so may become a compile-time error in the future."
  },
  {
    "title": "hashValue",
    "url": "https://developer.apple.com/documentation/musickit/anymusicproperty/hashvalue",
    "html": "Discussion\n\nHash values are not guaranteed to be equal across different executions of your program. Do not save hash values to use during a future execution.\n\nImportant\n\nhashValue is deprecated as a Hashable requirement. To conform to Hashable, implement the hash(into:) requirement instead. The compiler provides an implementation for hashValue for you."
  },
  {
    "title": "hash(into:)",
    "url": "https://developer.apple.com/documentation/musickit/musiclibrarysearchresponse/hash(into:)",
    "html": "Parameters\nhasher\n\nThe hasher to use when combining the components of this instance.\n\nDiscussion\n\nImplement this method to conform to the Hashable protocol. The components used for hashing must be the same as the components compared in your type’s == operator implementation. Call hasher.combine(_:) with each of these components.\n\nImportant\n\nIn your implementation of hash(into:), don’t call finalize() on the hasher instance provided, or replace it with a different instance. Doing so may become a compile-time error in the future."
  },
  {
    "title": "CustomDebugStringConvertible Implementations",
    "url": "https://developer.apple.com/documentation/musickit/musiclibrarysearchresponse/customdebugstringconvertible-implementations",
    "html": "Topics\nInstance Properties\nvar debugDescription: String\nA textual representation of this instance, suitable for debugging."
  },
  {
    "title": "==(_:_:)",
    "url": "https://developer.apple.com/documentation/musickit/musiccatalogchartsresponse/==(_:_:)",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nEquality is the inverse of inequality. For any values a and b, a == b implies that a != b is false."
  },
  {
    "title": "CustomStringConvertible Implementations",
    "url": "https://developer.apple.com/documentation/musickit/musicsubscription/error/customstringconvertible-implementations",
    "html": "Topics\nInstance Properties\nvar description: String\nA textual representation of this instance."
  },
  {
    "title": "Error Implementations",
    "url": "https://developer.apple.com/documentation/musickit/musicsubscription/error/error-implementations",
    "html": "Topics\nInstance Properties\nvar localizedDescription: String\nRetrieve the localized description for this error."
  },
  {
    "title": "RawRepresentable Implementations",
    "url": "https://developer.apple.com/documentation/musickit/musicsubscription/error/rawrepresentable-implementations",
    "html": "Topics\nInstance Properties\nvar hashValue: Int\nAvailable when Self conforms to Hashable and RawValue conforms to Hashable.\nInstance Methods\nfunc hash(into: inout Hasher)\nAvailable when Self conforms to Hashable and RawValue conforms to Hashable."
  },
  {
    "title": "detailText",
    "url": "https://developer.apple.com/documentation/musickit/musicdatarequest/error/detailtext",
    "html": "Discussion\n\nThis is to help identify possible resolutions."
  },
  {
    "title": "MusicDataRequest.Error.Source",
    "url": "https://developer.apple.com/documentation/musickit/musicdatarequest/error/source-swift.enum",
    "html": "Topics\nOperators\nstatic func == (MusicDataRequest.Error.Source, MusicDataRequest.Error.Source) -> Bool\nReturns a Boolean value indicating whether two values are equal.\nEnumeration Cases\ncase parameter(String)\nThe URI query parameter that causes the error.\nDefault Implementations\nCustomStringConvertible Implementations\nEquatable Implementations\nRelationships\nConforms To\nCustomStringConvertible\nEquatable\nSendable"
  },
  {
    "title": "CustomStringConvertible Implementations",
    "url": "https://developer.apple.com/documentation/musickit/musicdatarequest/error/customstringconvertible-implementations",
    "html": "Topics\nInstance Properties\nvar description: String\nA textual representation of this instance."
  },
  {
    "title": "CustomStringConvertible Implementations",
    "url": "https://developer.apple.com/documentation/musickit/musicsubscriptionoffer/messageidentifier/customstringconvertible-implementations",
    "html": "Topics\nInstance Properties\nvar description: String\nA textual representation of this instance."
  },
  {
    "title": "Equatable Implementations",
    "url": "https://developer.apple.com/documentation/musickit/musicsubscriptionoffer/messageidentifier/equatable-implementations",
    "html": "Topics\nOperators\nstatic func != (Self, Self) -> Bool\nReturns a Boolean value indicating whether two values are not equal."
  },
  {
    "title": "RawRepresentable Implementations",
    "url": "https://developer.apple.com/documentation/musickit/musicsubscriptionoffer/messageidentifier/rawrepresentable-implementations",
    "html": "Topics\nInstance Properties\nvar hashValue: Int\nAvailable when Self conforms to Hashable and RawValue conforms to Hashable.\nInstance Methods\nfunc hash(into: inout Hasher)\nAvailable when Self conforms to Hashable and RawValue conforms to Hashable."
  },
  {
    "title": "==(_:_:)",
    "url": "https://developer.apple.com/documentation/musickit/musiclibrarysearchresponse/==(_:_:)",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nEquality is the inverse of inequality. For any values a and b, a == b implies that a != b is false."
  },
  {
    "title": "debugDescription",
    "url": "https://developer.apple.com/documentation/musickit/musiclibrarysectionedresponse/debugdescription",
    "html": "Discussion\n\nCalling this property directly is discouraged. Instead, convert an instance of any type to a string by using the String(reflecting:) initializer. This initializer works with any type, and uses the custom debugDescription property for types that conform to CustomDebugStringConvertible:\n\nstruct Point: CustomDebugStringConvertible {\n    let x: Int, y: Int\n\n\n    var debugDescription: String {\n        return \"(\\(x), \\(y))\"\n    }\n}\n\n\nlet p = Point(x: 21, y: 30)\nlet s = String(reflecting: p)\nprint(s)\n// Prints \"(21, 30)\"\n\n\nThe conversion of p to a string in the assignment to s uses the Point type’s debugDescription property."
  },
  {
    "title": "encode(to:)",
    "url": "https://developer.apple.com/documentation/musickit/musicpersonalrecommendationsresponse/encode(to:)",
    "html": "Parameters\nencoder\n\nThe encoder to write data to.\n\nDiscussion\n\nIf the value fails to encode anything, encoder will encode an empty keyed container in its place.\n\nThis function throws an error if any values are invalid for the given encoder’s format."
  },
  {
    "title": "==(_:_:)",
    "url": "https://developer.apple.com/documentation/musickit/anymusicproperty/==(_:_:)",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nEquality is the inverse of inequality. For any values a and b, a == b implies that a != b is false."
  },
  {
    "title": "LibrarySortProperties",
    "url": "https://developer.apple.com/documentation/musickit/musiclibraryrequestable/librarysortproperties",
    "html": "Required"
  },
  {
    "title": "MusicTokenRequestError.userTokenRevoked",
    "url": "https://developer.apple.com/documentation/musickit/musictokenrequesterror/usertokenrevoked",
    "html": "Discussion\n\nIn iOS, apps may attempt to recover from this error condition by suggesting to their users that they can grant access to their Apple Music data again by linking to openSettingsURLString."
  },
  {
    "title": "developerToken(options:)",
    "url": "https://developer.apple.com/documentation/musickit/defaultmusictokenprovider/developertoken(options:)",
    "html": "Discussion\n\nIf you opt to create a custom implementation of the MusicDeveloperTokenProvider protocol, make sure to discard any cached developer token if the options parameter contains ignoreCache.\n\nYou can add the newly generated token to an in-memory or persistent cache for faster access upon subsequent requests for this token."
  },
  {
    "title": "Equatable Implementations",
    "url": "https://developer.apple.com/documentation/musickit/anymusicproperty/equatable-implementations",
    "html": "Topics\nOperators\nstatic func != (Self, Self) -> Bool\nReturns a Boolean value indicating whether two values are not equal."
  },
  {
    "title": "description",
    "url": "https://developer.apple.com/documentation/musickit/musicitemid/description",
    "html": "Discussion\n\nCalling this property directly is discouraged. Instead, convert an instance of any type to a string by using the String(describing:) initializer. This initializer works with any type, and uses the custom description property for types that conform to CustomStringConvertible:\n\nstruct Point: CustomStringConvertible {\n    let x: Int, y: Int\n\n\n    var description: String {\n        return \"(\\(x), \\(y))\"\n    }\n}\n\n\nlet p = Point(x: 21, y: 30)\nlet s = String(describing: p)\nprint(s)\n// Prints \"(21, 30)\"\n\n\nThe conversion of p to a string in the assignment to s uses the Point type’s description property."
  },
  {
    "title": "init(from:)",
    "url": "https://developer.apple.com/documentation/musickit/musicitemid/init(from:)-3u4ec",
    "html": "Parameters\ndecoder\n\nThe decoder to read data from.\n\nDiscussion\n\nThis initializer throws an error if reading from the decoder fails, or if the data read is corrupted or otherwise invalid."
  },
  {
    "title": "description",
    "url": "https://developer.apple.com/documentation/musickit/artwork/description",
    "html": "Discussion\n\nCalling this property directly is discouraged. Instead, convert an instance of any type to a string by using the String(describing:) initializer. This initializer works with any type, and uses the custom description property for types that conform to CustomStringConvertible:\n\nstruct Point: CustomStringConvertible {\n    let x: Int, y: Int\n\n\n    var description: String {\n        return \"(\\(x), \\(y))\"\n    }\n}\n\n\nlet p = Point(x: 21, y: 30)\nlet s = String(describing: p)\nprint(s)\n// Prints \"(21, 30)\"\n\n\nThe conversion of p to a string in the assignment to s uses the Point type’s description property."
  },
  {
    "title": "init(from:)",
    "url": "https://developer.apple.com/documentation/musickit/artwork/init(from:)",
    "html": "Parameters\ndecoder\n\nThe decoder to read data from.\n\nDiscussion\n\nThis initializer throws an error if reading from the decoder fails, or if the data read is corrupted or otherwise invalid."
  },
  {
    "title": "init(unicodeScalarLiteral:)",
    "url": "https://developer.apple.com/documentation/musickit/musicitemid/init(unicodescalarliteral:)",
    "html": "Parameters\nvalue\n\nThe value of the new instance."
  },
  {
    "title": "!=(_:_:)",
    "url": "https://developer.apple.com/documentation/musickit/musicitemid/!=(_:_:)",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nInequality is the inverse of equality. For any values a and b, a != b implies that a == b is false.\n\nThis is the default implementation of the not-equal-to operator (!=) for any type that conforms to Equatable."
  },
  {
    "title": "encode(to:)",
    "url": "https://developer.apple.com/documentation/musickit/musicitemid/encode(to:)",
    "html": "Parameters\nencoder\n\nThe encoder to write data to.\n\nDiscussion\n\nIf the value fails to encode anything, encoder will encode an empty keyed container in its place.\n\nThis function throws an error if any values are invalid for the given encoder’s format."
  },
  {
    "title": "with(_:preferredSource:)",
    "url": "https://developer.apple.com/documentation/musickit/musicitem/with(_:preferredsource:)-416sk",
    "html": "Discussion\n\nThis asynchronous method fetches a more complete representation of the receiver, loading the contents for each property you request from either the Apple Music catalog or the user’s library, depending on the preferred source as well the availability of the content in those respective data sources.\n\nFor example, if you want to load the tracks relationship for an Album, as found in the user’s library, as well as other associations of content that only live in the Apple Music catalog, like the recordLabels and relatedAlbums associations, you can use this code:\n\nlet album: Album = …\nlet detailedAlbum = try await album.with(\n    [\n        .tracks,\n        .recordLabels,\n        .relatedAlbums\n    ],\n    preferredSource: .library\n)\n\n\nHere, because the tracks relationship for an Album is supported in both the library and the catalog, and because the this code specifically requests MusicPropertySource.library as the preferred source, the framework will load the tracks from the user’s library. However, because the recordLabels and relatedAlbums associations are only available in the Apple Music catalog, the framework will also issue a network request to Apple Music API to fetch those associations of content from the catalog."
  },
  {
    "title": "init(extendedGraphemeClusterLiteral:)",
    "url": "https://developer.apple.com/documentation/musickit/musicitemid/init(extendedgraphemeclusterliteral:)",
    "html": "Parameters\nvalue\n\nThe value of the new instance."
  },
  {
    "title": "MusicTokenRequestError.permissionDenied",
    "url": "https://developer.apple.com/documentation/musickit/musictokenrequesterror/permissiondenied",
    "html": "Discussion\n\nApps using MusicKit need to request prior informed consent from the user to access their Apple Music data by calling request() at the appropriate point in the app flow, right before needing to use other APIs from MusicKit."
  },
  {
    "title": "CustomStringConvertible Implementations",
    "url": "https://developer.apple.com/documentation/musickit/musiclibrarysearchresponse/customstringconvertible-implementations",
    "html": "Topics\nInstance Properties\nvar description: String\nA textual representation of this instance."
  },
  {
    "title": "Equatable Implementations",
    "url": "https://developer.apple.com/documentation/musickit/musiclibrarysearchresponse/equatable-implementations",
    "html": "Topics\nOperators\nstatic func != (Self, Self) -> Bool\nReturns a Boolean value indicating whether two values are not equal."
  },
  {
    "title": "init(rawValue:)",
    "url": "https://developer.apple.com/documentation/musickit/musicsubscription/error/init(rawvalue:)",
    "html": "Parameters\nrawValue\n\nThe raw value to use for the new instance.\n\nDiscussion\n\nIf there is no value of the type that corresponds with the specified raw value, this initializer returns nil. For example:\n\nenum PaperSize: String {\n    case A4, A5, Letter, Legal\n}\n\n\nprint(PaperSize(rawValue: \"Legal\"))\n// Prints \"Optional(\"PaperSize.Legal\")\"\n\n\nprint(PaperSize(rawValue: \"Tabloid\"))\n// Prints \"nil\"\n"
  },
  {
    "title": "Equatable Implementations",
    "url": "https://developer.apple.com/documentation/musickit/musiccatalogchartsresponse/equatable-implementations",
    "html": "Topics\nOperators\nstatic func != (Self, Self) -> Bool\nReturns a Boolean value indicating whether two values are not equal."
  },
  {
    "title": "CustomDebugStringConvertible Implementations",
    "url": "https://developer.apple.com/documentation/musickit/musiccatalogchartsresponse/customdebugstringconvertible-implementations",
    "html": "Topics\nInstance Properties\nvar debugDescription: String\nA textual representation of this instance, suitable for debugging."
  },
  {
    "title": "Encodable Implementations",
    "url": "https://developer.apple.com/documentation/musickit/musiccatalogchartsresponse/encodable-implementations",
    "html": "Topics\nInstance Methods\nfunc encode(to: any Encoder) throws\nEncodes this value into the given encoder."
  },
  {
    "title": "Decodable Implementations",
    "url": "https://developer.apple.com/documentation/musickit/musiccatalogchartsresponse/decodable-implementations",
    "html": "Topics\nInitializers\ninit(from: any Decoder) throws\nCreates a new instance by decoding from the given decoder."
  },
  {
    "title": "CustomStringConvertible Implementations",
    "url": "https://developer.apple.com/documentation/musickit/musiccatalogchartsresponse/customstringconvertible-implementations",
    "html": "Topics\nInstance Properties\nvar description: String\nA textual representation of this instance."
  },
  {
    "title": "Equatable Implementations",
    "url": "https://developer.apple.com/documentation/musickit/song/equatable-implementations",
    "html": "Topics\nOperators\nstatic func != (Self, Self) -> Bool\nReturns a Boolean value indicating whether two values are not equal."
  },
  {
    "title": "init(rawValue:)",
    "url": "https://developer.apple.com/documentation/musickit/musicauthorization/status/init(rawvalue:)",
    "html": "Parameters\nrawValue\n\nThe raw value to use for the new instance.\n\nDiscussion\n\nIf there is no value of the type that corresponds with the specified raw value, this initializer returns nil. For example:\n\nenum PaperSize: String {\n    case A4, A5, Letter, Legal\n}\n\n\nprint(PaperSize(rawValue: \"Legal\"))\n// Prints \"Optional(\"PaperSize.Legal\")\"\n\n\nprint(PaperSize(rawValue: \"Tabloid\"))\n// Prints \"nil\"\n"
  },
  {
    "title": "Encodable Implementations",
    "url": "https://developer.apple.com/documentation/musickit/song/encodable-implementations",
    "html": "Topics\nInstance Methods\nfunc encode(to: any Encoder) throws\nEncodes this value into the given encoder."
  },
  {
    "title": "MusicLibraryRequestable Implementations",
    "url": "https://developer.apple.com/documentation/musickit/song/musiclibraryrequestable-implementations",
    "html": "Topics\nType Aliases\ntypealias LibraryFilter\nThe associated type that contains the song properties your app uses for a library request.\ntypealias LibrarySortProperties\nThe associated type that contains the set of song properties your app uses to sort results for a library request."
  },
  {
    "title": "MusicItem Implementations",
    "url": "https://developer.apple.com/documentation/musickit/song/musicitem-implementations",
    "html": "Topics\nInstance Methods\nfunc with([PartialMusicAsyncProperty<Self>]) async throws -> Self\nLoads a new instance of the music item that includes the specified properties.\nAvailable when Self conforms to MusicPropertyContainer and Decodable.\nfunc with([PartialMusicAsyncProperty<Self>], preferredSource: MusicPropertySource) async throws -> Self\nLoads a new instance of the music item that includes the specified properties.\nAvailable when Self conforms to MusicPropertyContainer and Decodable."
  },
  {
    "title": "encode(to:)",
    "url": "https://developer.apple.com/documentation/musickit/contentrating/encode(to:)",
    "html": "Parameters\nencoder\n\nThe encoder to write data to.\n\nDiscussion\n\nIf the value fails to encode anything, encoder will encode an empty keyed container in its place.\n\nThis function throws an error if any values are invalid for the given encoder’s format."
  },
  {
    "title": "hashValue",
    "url": "https://developer.apple.com/documentation/musickit/contentrating/hashvalue",
    "html": "Discussion\n\nHash values are not guaranteed to be equal across different executions of your program. Do not save hash values to use during a future execution.\n\nImportant\n\nhashValue is deprecated as a Hashable requirement. To conform to Hashable, implement the hash(into:) requirement instead. The compiler provides an implementation for hashValue for you."
  },
  {
    "title": "init(from:)",
    "url": "https://developer.apple.com/documentation/musickit/contentrating/init(from:)",
    "html": "Parameters\ndecoder\n\nThe decoder to read data from.\n\nDiscussion\n\nThis initializer throws an error if reading from the decoder fails, or if the data read is corrupted or otherwise invalid."
  },
  {
    "title": "CustomStringConvertible Implementations",
    "url": "https://developer.apple.com/documentation/musickit/song/customstringconvertible-implementations",
    "html": "Topics\nInstance Properties\nvar description: String\nA textual representation of this instance."
  },
  {
    "title": "id",
    "url": "https://developer.apple.com/documentation/musickit/librarymusicvideofilter/id",
    "html": "Required"
  },
  {
    "title": "genres",
    "url": "https://developer.apple.com/documentation/musickit/librarymusicvideofilter/genres",
    "html": "Required"
  },
  {
    "title": "title",
    "url": "https://developer.apple.com/documentation/musickit/librarymusicvideofilter/title",
    "html": "Required"
  },
  {
    "title": "artists",
    "url": "https://developer.apple.com/documentation/musickit/librarymusicvideofilter/artists",
    "html": "Required"
  },
  {
    "title": "MusicAuthorization.Status.denied",
    "url": "https://developer.apple.com/documentation/musickit/musicauthorization/status/denied",
    "html": "Discussion\n\nOn iOS, applications may attempt to recover from this situation by suggesting to their users that they can grant access to their Apple Music data again by linking to openSettingsURLString."
  },
  {
    "title": "MusicAuthorization.Status.restricted",
    "url": "https://developer.apple.com/documentation/musickit/musicauthorization/status/restricted",
    "html": "Discussion\n\nIn this scenario, don’t prompt for authorization.\n\nAn example of this situation is when the device is in education mode."
  },
  {
    "title": "LibraryFilter",
    "url": "https://developer.apple.com/documentation/musickit/musiclibraryrequestable/libraryfilter",
    "html": "Required"
  },
  {
    "title": "description",
    "url": "https://developer.apple.com/documentation/musickit/musicdatarequest/description",
    "html": "Discussion\n\nCalling this property directly is discouraged. Instead, convert an instance of any type to a string by using the String(describing:) initializer. This initializer works with any type, and uses the custom description property for types that conform to CustomStringConvertible:\n\nstruct Point: CustomStringConvertible {\n    let x: Int, y: Int\n\n\n    var description: String {\n        return \"(\\(x), \\(y))\"\n    }\n}\n\n\nlet p = Point(x: 21, y: 30)\nlet s = String(describing: p)\nprint(s)\n// Prints \"(21, 30)\"\n\n\nThe conversion of p to a string in the assignment to s uses the Point type’s description property."
  },
  {
    "title": "Error Implementations",
    "url": "https://developer.apple.com/documentation/musickit/musicdatarequest/error/error-implementations",
    "html": "Topics\nInstance Properties\nvar localizedDescription: String\nRetrieve the localized description for this error."
  },
  {
    "title": "encode(to:)",
    "url": "https://developer.apple.com/documentation/musickit/artwork/encode(to:)",
    "html": "Parameters\nencoder\n\nThe encoder to write data to.\n\nDiscussion\n\nIf the value fails to encode anything, encoder will encode an empty keyed container in its place.\n\nThis function throws an error if any values are invalid for the given encoder’s format."
  },
  {
    "title": "!=(_:_:)",
    "url": "https://developer.apple.com/documentation/musickit/artwork/!=(_:_:)",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nInequality is the inverse of equality. For any values a and b, a != b implies that a == b is false.\n\nThis is the default implementation of the not-equal-to operator (!=) for any type that conforms to Equatable."
  },
  {
    "title": "with(_:preferredSource:)",
    "url": "https://developer.apple.com/documentation/musickit/musicitem/with(_:preferredsource:)-2hn42",
    "html": "Discussion\n\nThis asynchronous method fetches a more complete representation of the receiver, loading the contents for each property you request from either the Apple Music catalog or the user’s library, depending on the preferred source as well the availability of the content in those respective data sources.\n\nFor example, if you want to load the tracks relationship for an Album, as found in the user’s library, as well as other associations of content that only live in the Apple Music catalog, like the recordLabels and relatedAlbums associations, you can use this code:\n\nlet album: Album = …\nlet detailedAlbum = try await album.with(\n    .tracks,\n    .recordLabels,\n    .relatedAlbums, \n    preferredSource: .library\n)\n\n\nHere, because the tracks relationship for an Album is supported in both the library and the catalog, and because the this code specifically requests MusicPropertySource.library as the preferred source, the framework will load the tracks from the user’s library. However, because the recordLabels and relatedAlbums associations are only available in the Apple Music catalog, the framework will also issue a network request to Apple Music API to fetch those associations of content from the catalog."
  },
  {
    "title": "debugDescription",
    "url": "https://developer.apple.com/documentation/musickit/artwork/debugdescription",
    "html": "Discussion\n\nCalling this property directly is discouraged. Instead, convert an instance of any type to a string by using the String(reflecting:) initializer. This initializer works with any type, and uses the custom debugDescription property for types that conform to CustomDebugStringConvertible:\n\nstruct Point: CustomDebugStringConvertible {\n    let x: Int, y: Int\n\n\n    var debugDescription: String {\n        return \"(\\(x), \\(y))\"\n    }\n}\n\n\nlet p = Point(x: 21, y: 30)\nlet s = String(reflecting: p)\nprint(s)\n// Prints \"(21, 30)\"\n\n\nThe conversion of p to a string in the assignment to s uses the Point type’s debugDescription property."
  },
  {
    "title": "MusicLibrarySearchResponse.TopResult",
    "url": "https://developer.apple.com/documentation/musickit/musiclibrarysearchresponse/topresult",
    "html": "Topics\nOperators\nstatic func == (MusicLibrarySearchResponse.TopResult, MusicLibrarySearchResponse.TopResult) -> Bool\nReturns a Boolean value indicating whether two values are equal.\nEnumeration Cases\ncase album(Album)\nAn item that corresponds to an album.\ncase artist(Artist)\nAn item that corresponds to an artist.\ncase musicVideo(MusicVideo)\nAn item that corresponds to a music video.\ncase playlist(Playlist)\nAn item that corresponds to a playlist.\ncase song(Song)\nAn item that corresponds to a song.\nInstance Properties\nvar artwork: Artwork?\nThe artwork of this top result for library search.\nvar hashValue: Int\nThe hash value.\nvar id: MusicItemID\nThe unique identifier of this item.\nvar title: String\nThe title of this top result for library search.\nInstance Methods\nfunc hash(into: inout Hasher)\nHashes the essential components of this value by feeding them into the given hasher.\nType Aliases\ntypealias ID\nA type representing the stable identity of the entity associated with an instance.\nDefault Implementations\nCustomDebugStringConvertible Implementations\nCustomStringConvertible Implementations\nDecodable Implementations\nEncodable Implementations\nEquatable Implementations\nRelationships\nConforms To\nCustomDebugStringConvertible\nCustomStringConvertible\nDecodable\nEncodable\nEquatable\nHashable\nIdentifiable\nMusicItem\nSendable"
  },
  {
    "title": "id",
    "url": "https://developer.apple.com/documentation/musickit/musicitem/id",
    "html": "Required"
  },
  {
    "title": "with(_:)",
    "url": "https://developer.apple.com/documentation/musickit/musicitem/with(_:)",
    "html": "Discussion\n\nThis asynchronous method fetches a more complete representation of the receiver from Apple Music API over the network."
  },
  {
    "title": "isAppleDigitalMaster",
    "url": "https://developer.apple.com/documentation/musickit/song/isappledigitalmaster",
    "html": "Discussion\n\nApple Digital Masters start from 24-bit files and are optimized to bring the best-sounding audio to Apple products."
  },
  {
    "title": "contentRating",
    "url": "https://developer.apple.com/documentation/musickit/song/contentrating",
    "html": "Discussion\n\nA nil value means no rating is available for this song."
  },
  {
    "title": "hash(into:)",
    "url": "https://developer.apple.com/documentation/musickit/contentrating/hash(into:)",
    "html": "Parameters\nhasher\n\nThe hasher to use when combining the components of this instance.\n\nDiscussion\n\nImplement this method to conform to the Hashable protocol. The components used for hashing must be the same as the components compared in your type’s == operator implementation. Call hasher.combine(_:) with each of these components.\n\nImportant\n\nIn your implementation of hash(into:), don’t call finalize() on the hasher instance provided, or replace it with a different instance. Doing so may become a compile-time error in the future."
  },
  {
    "title": "==(_:_:)",
    "url": "https://developer.apple.com/documentation/musickit/contentrating/==(_:_:)",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nEquality is the inverse of inequality. For any values a and b, a == b implies that a != b is false."
  },
  {
    "title": "FilterableMusicItem Implementations",
    "url": "https://developer.apple.com/documentation/musickit/song/filterablemusicitem-implementations",
    "html": "Topics\nType Aliases\ntypealias FilterType\nThe associated type that contains the set of song properties your app uses as a filter for a catalog resource request."
  },
  {
    "title": "CustomDebugStringConvertible Implementations",
    "url": "https://developer.apple.com/documentation/musickit/song/customdebugstringconvertible-implementations",
    "html": "Topics\nInstance Properties\nvar debugDescription: String\nA textual representation of this instance, suitable for debugging."
  },
  {
    "title": "Decodable Implementations",
    "url": "https://developer.apple.com/documentation/musickit/song/decodable-implementations",
    "html": "Topics\nInitializers\ninit(from: any Decoder) throws\nCreates a new instance by decoding from the given decoder."
  },
  {
    "title": "init(rawValue:)",
    "url": "https://developer.apple.com/documentation/musickit/musictokenrequesterror/init(rawvalue:)",
    "html": "Parameters\nrawValue\n\nThe raw value to use for the new instance.\n\nDiscussion\n\nIf there is no value of the type that corresponds with the specified raw value, this initializer returns nil. For example:\n\nenum PaperSize: String {\n    case A4, A5, Letter, Legal\n}\n\n\nprint(PaperSize(rawValue: \"Legal\"))\n// Prints \"Optional(\"PaperSize.Legal\")\"\n\n\nprint(PaperSize(rawValue: \"Tabloid\"))\n// Prints \"nil\"\n"
  },
  {
    "title": "albums",
    "url": "https://developer.apple.com/documentation/musickit/librarymusicvideofilter/albums",
    "html": "Required"
  },
  {
    "title": "rawValue",
    "url": "https://developer.apple.com/documentation/musickit/musictokenrequesterror/rawvalue-swift.property",
    "html": "Discussion\n\nA new instance initialized with rawValue will be equivalent to this instance. For example:\n\nenum PaperSize: String {\n    case A4, A5, Letter, Legal\n}\n\n\nlet selectedSize = PaperSize.Letter\nprint(selectedSize.rawValue)\n// Prints \"Letter\"\n\n\nprint(selectedSize == PaperSize(rawValue: selectedSize.rawValue)!)\n// Prints \"true\"\n"
  },
  {
    "title": "Error Implementations",
    "url": "https://developer.apple.com/documentation/musickit/musictokenrequesterror/error-implementations",
    "html": "Topics\nInstance Properties\nvar localizedDescription: String\nRetrieve the localized description for this error."
  },
  {
    "title": "artistName",
    "url": "https://developer.apple.com/documentation/musickit/librarymusicvideofilter/artistname",
    "html": "Required"
  },
  {
    "title": "RawRepresentable Implementations",
    "url": "https://developer.apple.com/documentation/musickit/musictokenrequesterror/rawrepresentable-implementations",
    "html": "Topics\nInstance Properties\nvar hashValue: Int\nAvailable when Self conforms to Hashable and RawValue conforms to Hashable.\nInstance Methods\nfunc hash(into: inout Hasher)\nAvailable when Self conforms to Hashable and RawValue conforms to Hashable."
  },
  {
    "title": "description",
    "url": "https://developer.apple.com/documentation/musickit/musictokenrequesterror/description",
    "html": "Discussion\n\nCalling this property directly is discouraged. Instead, convert an instance of any type to a string by using the String(describing:) initializer. This initializer works with any type, and uses the custom description property for types that conform to CustomStringConvertible:\n\nstruct Point: CustomStringConvertible {\n    let x: Int, y: Int\n\n\n    var description: String {\n        return \"(\\(x), \\(y))\"\n    }\n}\n\n\nlet p = Point(x: 21, y: 30)\nlet s = String(describing: p)\nprint(s)\n// Prints \"(21, 30)\"\n\n\nThe conversion of p to a string in the assignment to s uses the Point type’s description property."
  },
  {
    "title": "albumTitle",
    "url": "https://developer.apple.com/documentation/musickit/librarymusicvideofilter/albumtitle",
    "html": "Required"
  },
  {
    "title": "Equatable Implementations",
    "url": "https://developer.apple.com/documentation/musickit/musictokenrequesterror/equatable-implementations",
    "html": "Topics\nOperators\nstatic func != (Self, Self) -> Bool\nReturns a Boolean value indicating whether two values are not equal."
  },
  {
    "title": "MusicTokenRequestError.RawValue",
    "url": "https://developer.apple.com/documentation/musickit/musictokenrequesterror/rawvalue-swift.typealias",
    "html": "Discussion\n\nEvery distinct value of the conforming type has a corresponding unique value of the RawValue type, but there may be values of the RawValue type that don’t have a corresponding value of the conforming type."
  },
  {
    "title": "hash(into:)",
    "url": "https://developer.apple.com/documentation/musickit/song/hash(into:)",
    "html": "Parameters\nhasher\n\nThe hasher to use when combining the components of this instance.\n\nDiscussion\n\nImplement this method to conform to the Hashable protocol. The components used for hashing must be the same as the components compared in your type’s == operator implementation. Call hasher.combine(_:) with each of these components.\n\nImportant\n\nIn your implementation of hash(into:), don’t call finalize() on the hasher instance provided, or replace it with a different instance. Doing so may become a compile-time error in the future."
  },
  {
    "title": "CustomStringConvertible Implementations",
    "url": "https://developer.apple.com/documentation/musickit/editorialnotes/customstringconvertible-implementations",
    "html": "Topics\nInstance Properties\nvar description: String\nA textual representation of this instance."
  },
  {
    "title": "hashValue",
    "url": "https://developer.apple.com/documentation/musickit/editorialnotes/hashvalue",
    "html": "Discussion\n\nHash values are not guaranteed to be equal across different executions of your program. Do not save hash values to use during a future execution.\n\nImportant\n\nhashValue is deprecated as a Hashable requirement. To conform to Hashable, implement the hash(into:) requirement instead. The compiler provides an implementation for hashValue for you."
  },
  {
    "title": "CustomDebugStringConvertible Implementations",
    "url": "https://developer.apple.com/documentation/musickit/station/customdebugstringconvertible-implementations",
    "html": "Topics\nInstance Properties\nvar debugDescription: String\nA textual representation of this instance, suitable for debugging."
  },
  {
    "title": "hashValue",
    "url": "https://developer.apple.com/documentation/musickit/song/hashvalue",
    "html": "Discussion\n\nHash values are not guaranteed to be equal across different executions of your program. Do not save hash values to use during a future execution.\n\nImportant\n\nhashValue is deprecated as a Hashable requirement. To conform to Hashable, implement the hash(into:) requirement instead. The compiler provides an implementation for hashValue for you."
  },
  {
    "title": "Equatable Implementations",
    "url": "https://developer.apple.com/documentation/musickit/musicauthorization/status/equatable-implementations",
    "html": "Topics\nOperators\nstatic func != (Self, Self) -> Bool\nReturns a Boolean value indicating whether two values are not equal."
  },
  {
    "title": "RawRepresentable Implementations",
    "url": "https://developer.apple.com/documentation/musickit/musicauthorization/status/rawrepresentable-implementations",
    "html": "Topics\nInstance Properties\nvar hashValue: Int\nAvailable when Self conforms to Hashable and RawValue conforms to Hashable.\nInstance Methods\nfunc hash(into: inout Hasher)\nAvailable when Self conforms to Hashable and RawValue conforms to Hashable."
  },
  {
    "title": "rawValue",
    "url": "https://developer.apple.com/documentation/musickit/musicauthorization/status/rawvalue-swift.property",
    "html": "Discussion\n\nA new instance initialized with rawValue will be equivalent to this instance. For example:\n\nenum PaperSize: String {\n    case A4, A5, Letter, Legal\n}\n\n\nlet selectedSize = PaperSize.Letter\nprint(selectedSize.rawValue)\n// Prints \"Letter\"\n\n\nprint(selectedSize == PaperSize(rawValue: selectedSize.rawValue)!)\n// Prints \"true\"\n"
  },
  {
    "title": "CustomStringConvertible Implementations",
    "url": "https://developer.apple.com/documentation/musickit/musicauthorization/status/customstringconvertible-implementations",
    "html": "Topics\nInstance Properties\nvar description: String\nA textual representation of this instance."
  },
  {
    "title": "MusicAuthorization.Status.RawValue",
    "url": "https://developer.apple.com/documentation/musickit/musicauthorization/status/rawvalue-swift.typealias",
    "html": "Discussion\n\nEvery distinct value of the conforming type has a corresponding unique value of the RawValue type, but there may be values of the RawValue type that don’t have a corresponding value of the conforming type."
  },
  {
    "title": "Equatable Implementations",
    "url": "https://developer.apple.com/documentation/musickit/contentrating/equatable-implementations",
    "html": "Topics\nOperators\nstatic func != (Self, Self) -> Bool\nReturns a Boolean value indicating whether two values are not equal."
  },
  {
    "title": "Equatable Implementations",
    "url": "https://developer.apple.com/documentation/musickit/editorialnotes/equatable-implementations",
    "html": "Topics\nOperators\nstatic func != (Self, Self) -> Bool\nReturns a Boolean value indicating whether two values are not equal."
  },
  {
    "title": "Encodable Implementations",
    "url": "https://developer.apple.com/documentation/musickit/editorialnotes/encodable-implementations",
    "html": "Topics\nInstance Methods\nfunc encode(to: any Encoder) throws\nEncodes this value into the given encoder."
  },
  {
    "title": "==(_:_:)",
    "url": "https://developer.apple.com/documentation/musickit/song/==(_:_:)",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nEquality is the inverse of inequality. For any values a and b, a == b implies that a != b is false."
  },
  {
    "title": "CustomDebugStringConvertible Implementations",
    "url": "https://developer.apple.com/documentation/musickit/editorialnotes/customdebugstringconvertible-implementations",
    "html": "Topics\nInstance Properties\nvar debugDescription: String\nA textual representation of this instance, suitable for debugging."
  },
  {
    "title": "Decodable Implementations",
    "url": "https://developer.apple.com/documentation/musickit/editorialnotes/decodable-implementations",
    "html": "Topics\nInitializers\ninit(from: any Decoder) throws\nCreates a new instance by decoding from the given decoder."
  },
  {
    "title": "hash(into:)",
    "url": "https://developer.apple.com/documentation/musickit/editorialnotes/hash(into:)",
    "html": "Parameters\nhasher\n\nThe hasher to use when combining the components of this instance.\n\nDiscussion\n\nImplement this method to conform to the Hashable protocol. The components used for hashing must be the same as the components compared in your type’s == operator implementation. Call hasher.combine(_:) with each of these components.\n\nImportant\n\nIn your implementation of hash(into:), don’t call finalize() on the hasher instance provided, or replace it with a different instance. Doing so may become a compile-time error in the future."
  },
  {
    "title": "MusicItem Implementations",
    "url": "https://developer.apple.com/documentation/musickit/station/musicitem-implementations",
    "html": "Topics\nInstance Methods\nfunc with([PartialMusicAsyncProperty<Self>]) async throws -> Self\nLoads a new instance of the music item that includes the specified properties.\nAvailable when Self conforms to MusicPropertyContainer and Decodable.\nfunc with([PartialMusicAsyncProperty<Self>], preferredSource: MusicPropertySource) async throws -> Self\nLoads a new instance of the music item that includes the specified properties.\nAvailable when Self conforms to MusicPropertyContainer and Decodable."
  },
  {
    "title": "Equatable Implementations",
    "url": "https://developer.apple.com/documentation/musickit/station/equatable-implementations",
    "html": "Topics\nOperators\nstatic func != (Self, Self) -> Bool\nReturns a Boolean value indicating whether two values are not equal."
  },
  {
    "title": "==(_:_:)",
    "url": "https://developer.apple.com/documentation/musickit/editorialnotes/==(_:_:)",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nEquality is the inverse of inequality. For any values a and b, a == b implies that a != b is false."
  },
  {
    "title": "Encodable Implementations",
    "url": "https://developer.apple.com/documentation/musickit/station/encodable-implementations",
    "html": "Topics\nInstance Methods\nfunc encode(to: any Encoder) throws\nEncodes this value into the given encoder."
  },
  {
    "title": "Decodable Implementations",
    "url": "https://developer.apple.com/documentation/musickit/station/decodable-implementations",
    "html": "Topics\nInitializers\ninit(from: any Decoder) throws\nCreates a new instance by decoding from the given decoder."
  },
  {
    "title": "CustomStringConvertible Implementations",
    "url": "https://developer.apple.com/documentation/musickit/station/customstringconvertible-implementations",
    "html": "Topics\nInstance Properties\nvar description: String\nA textual representation of this instance."
  },
  {
    "title": "hash(into:)",
    "url": "https://developer.apple.com/documentation/musickit/station/hash(into:)",
    "html": "Parameters\nhasher\n\nThe hasher to use when combining the components of this instance.\n\nDiscussion\n\nImplement this method to conform to the Hashable protocol. The components used for hashing must be the same as the components compared in your type’s == operator implementation. Call hasher.combine(_:) with each of these components.\n\nImportant\n\nIn your implementation of hash(into:), don’t call finalize() on the hasher instance provided, or replace it with a different instance. Doing so may become a compile-time error in the future."
  },
  {
    "title": "hashValue",
    "url": "https://developer.apple.com/documentation/musickit/musicvideo/hashvalue",
    "html": "Discussion\n\nHash values are not guaranteed to be equal across different executions of your program. Do not save hash values to use during a future execution.\n\nImportant\n\nhashValue is deprecated as a Hashable requirement. To conform to Hashable, implement the hash(into:) requirement instead. The compiler provides an implementation for hashValue for you."
  },
  {
    "title": "hashValue",
    "url": "https://developer.apple.com/documentation/musickit/station/hashvalue",
    "html": "Discussion\n\nHash values are not guaranteed to be equal across different executions of your program. Do not save hash values to use during a future execution.\n\nImportant\n\nhashValue is deprecated as a Hashable requirement. To conform to Hashable, implement the hash(into:) requirement instead. The compiler provides an implementation for hashValue for you."
  },
  {
    "title": "duration",
    "url": "https://developer.apple.com/documentation/musickit/station/duration",
    "html": "Discussion\n\nLive and programmed stations don’t have a duration."
  },
  {
    "title": "FilterableMusicItem Implementations",
    "url": "https://developer.apple.com/documentation/musickit/musicvideo/filterablemusicitem-implementations",
    "html": "Topics\nType Aliases\ntypealias FilterType\nThe associated type that contains the set of music video properties your app uses as a filter for a catalog resource request."
  },
  {
    "title": "CustomStringConvertible Implementations",
    "url": "https://developer.apple.com/documentation/musickit/musicvideo/customstringconvertible-implementations",
    "html": "Topics\nInstance Properties\nvar description: String\nA textual representation of this instance."
  },
  {
    "title": "==(_:_:)",
    "url": "https://developer.apple.com/documentation/musickit/station/==(_:_:)",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nEquality is the inverse of inequality. For any values a and b, a == b implies that a != b is false."
  },
  {
    "title": "CustomDebugStringConvertible Implementations",
    "url": "https://developer.apple.com/documentation/musickit/musicvideo/customdebugstringconvertible-implementations",
    "html": "Topics\nInstance Properties\nvar debugDescription: String\nA textual representation of this instance, suitable for debugging."
  },
  {
    "title": "hash(into:)",
    "url": "https://developer.apple.com/documentation/musickit/musicvideo/hash(into:)",
    "html": "Parameters\nhasher\n\nThe hasher to use when combining the components of this instance.\n\nDiscussion\n\nImplement this method to conform to the Hashable protocol. The components used for hashing must be the same as the components compared in your type’s == operator implementation. Call hasher.combine(_:) with each of these components.\n\nImportant\n\nIn your implementation of hash(into:), don’t call finalize() on the hasher instance provided, or replace it with a different instance. Doing so may become a compile-time error in the future."
  },
  {
    "title": "FilterableMusicItem Implementations",
    "url": "https://developer.apple.com/documentation/musickit/station/filterablemusicitem-implementations",
    "html": "Topics\nType Aliases\ntypealias FilterType\nThe associated type that contains the set of station properties your app uses as a filter for a catalog resource request."
  },
  {
    "title": "FilterableMusicItem Implementations",
    "url": "https://developer.apple.com/documentation/musickit/recordlabel/filterablemusicitem-implementations",
    "html": "Topics\nType Aliases\ntypealias FilterType\nThe associated type that contains the set of properties for record labels your app uses as a filter for a catalog resource request."
  },
  {
    "title": "Equatable Implementations",
    "url": "https://developer.apple.com/documentation/musickit/recordlabel/equatable-implementations",
    "html": "Topics\nOperators\nstatic func != (Self, Self) -> Bool\nReturns a Boolean value indicating whether two values are not equal."
  },
  {
    "title": "MusicItem Implementations",
    "url": "https://developer.apple.com/documentation/musickit/playlist/musicitem-implementations",
    "html": "Topics\nInstance Methods\nfunc with([PartialMusicAsyncProperty<Self>]) async throws -> Self\nLoads a new instance of the music item that includes the specified properties.\nAvailable when Self conforms to MusicPropertyContainer and Decodable.\nfunc with([PartialMusicAsyncProperty<Self>], preferredSource: MusicPropertySource) async throws -> Self\nLoads a new instance of the music item that includes the specified properties.\nAvailable when Self conforms to MusicPropertyContainer and Decodable."
  },
  {
    "title": "Encodable Implementations",
    "url": "https://developer.apple.com/documentation/musickit/curator/encodable-implementations",
    "html": "Topics\nInstance Methods\nfunc encode(to: any Encoder) throws\nEncodes this value into the given encoder."
  },
  {
    "title": "==(_:_:)",
    "url": "https://developer.apple.com/documentation/musickit/recordlabel/==(_:_:)",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nEquality is the inverse of inequality. For any values a and b, a == b implies that a != b is false."
  },
  {
    "title": "contentRating",
    "url": "https://developer.apple.com/documentation/musickit/musicvideo/contentrating",
    "html": "Discussion\n\nA nil value means no rating is available for this music video."
  },
  {
    "title": "episodeNumber",
    "url": "https://developer.apple.com/documentation/musickit/station/episodenumber",
    "html": "Discussion\n\nThis value appears when the station represents an episode of a show or other content."
  },
  {
    "title": "MusicLibraryRequestable Implementations",
    "url": "https://developer.apple.com/documentation/musickit/musicvideo/musiclibraryrequestable-implementations",
    "html": "Topics\nType Aliases\ntypealias LibraryFilter\nThe associated type that contains the music video properties your app uses for a library request.\ntypealias LibrarySortProperties\nThe associated type that contains the set of music video properties your app uses to sort results for a library request."
  },
  {
    "title": "MusicItem Implementations",
    "url": "https://developer.apple.com/documentation/musickit/musicvideo/musicitem-implementations",
    "html": "Topics\nInstance Methods\nfunc with([PartialMusicAsyncProperty<Self>]) async throws -> Self\nLoads a new instance of the music item that includes the specified properties.\nAvailable when Self conforms to MusicPropertyContainer and Decodable.\nfunc with([PartialMusicAsyncProperty<Self>], preferredSource: MusicPropertySource) async throws -> Self\nLoads a new instance of the music item that includes the specified properties.\nAvailable when Self conforms to MusicPropertyContainer and Decodable."
  },
  {
    "title": "Decodable Implementations",
    "url": "https://developer.apple.com/documentation/musickit/musicvideo/decodable-implementations",
    "html": "Topics\nInitializers\ninit(from: any Decoder) throws\nCreates a new instance by decoding from the given decoder."
  },
  {
    "title": "Encodable Implementations",
    "url": "https://developer.apple.com/documentation/musickit/musicvideo/encodable-implementations",
    "html": "Topics\nInstance Methods\nfunc encode(to: any Encoder) throws\nEncodes this value into the given encoder."
  },
  {
    "title": "Equatable Implementations",
    "url": "https://developer.apple.com/documentation/musickit/musicvideo/equatable-implementations",
    "html": "Topics\nOperators\nstatic func != (Self, Self) -> Bool\nReturns a Boolean value indicating whether two values are not equal."
  },
  {
    "title": "Encodable Implementations",
    "url": "https://developer.apple.com/documentation/musickit/recordlabel/encodable-implementations",
    "html": "Topics\nInstance Methods\nfunc encode(to: any Encoder) throws\nEncodes this value into the given encoder."
  },
  {
    "title": "CustomDebugStringConvertible Implementations",
    "url": "https://developer.apple.com/documentation/musickit/recordlabel/customdebugstringconvertible-implementations",
    "html": "Topics\nInstance Properties\nvar debugDescription: String\nA textual representation of this instance, suitable for debugging."
  },
  {
    "title": "Decodable Implementations",
    "url": "https://developer.apple.com/documentation/musickit/recordlabel/decodable-implementations",
    "html": "Topics\nInitializers\ninit(from: any Decoder) throws\nCreates a new instance by decoding from the given decoder."
  },
  {
    "title": "CustomStringConvertible Implementations",
    "url": "https://developer.apple.com/documentation/musickit/recordlabel/customstringconvertible-implementations",
    "html": "Topics\nInstance Properties\nvar description: String\nA textual representation of this instance."
  },
  {
    "title": "hash(into:)",
    "url": "https://developer.apple.com/documentation/musickit/recordlabel/hash(into:)",
    "html": "Parameters\nhasher\n\nThe hasher to use when combining the components of this instance.\n\nDiscussion\n\nImplement this method to conform to the Hashable protocol. The components used for hashing must be the same as the components compared in your type’s == operator implementation. Call hasher.combine(_:) with each of these components.\n\nImportant\n\nIn your implementation of hash(into:), don’t call finalize() on the hasher instance provided, or replace it with a different instance. Doing so may become a compile-time error in the future."
  },
  {
    "title": "hashValue",
    "url": "https://developer.apple.com/documentation/musickit/recordlabel/hashvalue",
    "html": "Discussion\n\nHash values are not guaranteed to be equal across different executions of your program. Do not save hash values to use during a future execution.\n\nImportant\n\nhashValue is deprecated as a Hashable requirement. To conform to Hashable, implement the hash(into:) requirement instead. The compiler provides an implementation for hashValue for you."
  },
  {
    "title": "MusicItem Implementations",
    "url": "https://developer.apple.com/documentation/musickit/curator/musicitem-implementations",
    "html": "Topics\nInstance Methods\nfunc with([PartialMusicAsyncProperty<Self>]) async throws -> Self\nLoads a new instance of the music item that includes the specified properties.\nAvailable when Self conforms to MusicPropertyContainer and Decodable.\nfunc with([PartialMusicAsyncProperty<Self>], preferredSource: MusicPropertySource) async throws -> Self\nLoads a new instance of the music item that includes the specified properties.\nAvailable when Self conforms to MusicPropertyContainer and Decodable."
  },
  {
    "title": "MusicLibraryRequestable Implementations",
    "url": "https://developer.apple.com/documentation/musickit/playlist/musiclibraryrequestable-implementations",
    "html": "Topics\nType Aliases\ntypealias LibraryFilter\nThe associated type that contains the playlist properties your app uses for a library request.\ntypealias LibrarySortProperties\nThe associated type that contains the set of playlist properties your app uses to sort results for a library request."
  },
  {
    "title": "FilterableMusicItem Implementations",
    "url": "https://developer.apple.com/documentation/musickit/curator/filterablemusicitem-implementations",
    "html": "Topics\nType Aliases\ntypealias FilterType\nThe associated type that contains the curator properties your app uses as a filter for a catalog resource request."
  },
  {
    "title": "FilterableMusicItem Implementations",
    "url": "https://developer.apple.com/documentation/musickit/playlist/filterablemusicitem-implementations",
    "html": "Topics\nType Aliases\ntypealias FilterType\nThe associated type that contains the set of playlist properties your app uses as a filter for a catalog resource request."
  },
  {
    "title": "Equatable Implementations",
    "url": "https://developer.apple.com/documentation/musickit/playlist/equatable-implementations",
    "html": "Topics\nOperators\nstatic func != (Self, Self) -> Bool\nReturns a Boolean value indicating whether two values are not equal."
  },
  {
    "title": "Equatable Implementations",
    "url": "https://developer.apple.com/documentation/musickit/curator/equatable-implementations",
    "html": "Topics\nOperators\nstatic func != (Self, Self) -> Bool\nReturns a Boolean value indicating whether two values are not equal."
  },
  {
    "title": "Encodable Implementations",
    "url": "https://developer.apple.com/documentation/musickit/playlist/encodable-implementations",
    "html": "Topics\nInstance Methods\nfunc encode(to: any Encoder) throws\nEncodes this value into the given encoder."
  },
  {
    "title": "hash(into:)",
    "url": "https://developer.apple.com/documentation/musickit/playlist/hash(into:)",
    "html": "Parameters\nhasher\n\nThe hasher to use when combining the components of this instance.\n\nDiscussion\n\nImplement this method to conform to the Hashable protocol. The components used for hashing must be the same as the components compared in your type’s == operator implementation. Call hasher.combine(_:) with each of these components.\n\nImportant\n\nIn your implementation of hash(into:), don’t call finalize() on the hasher instance provided, or replace it with a different instance. Doing so may become a compile-time error in the future."
  },
  {
    "title": "Equatable Implementations",
    "url": "https://developer.apple.com/documentation/musickit/genre/equatable-implementations",
    "html": "Topics\nOperators\nstatic func != (Self, Self) -> Bool\nReturns a Boolean value indicating whether two values are not equal."
  },
  {
    "title": "hashValue",
    "url": "https://developer.apple.com/documentation/musickit/curator/hashvalue",
    "html": "Discussion\n\nHash values are not guaranteed to be equal across different executions of your program. Do not save hash values to use during a future execution.\n\nImportant\n\nhashValue is deprecated as a Hashable requirement. To conform to Hashable, implement the hash(into:) requirement instead. The compiler provides an implementation for hashValue for you."
  },
  {
    "title": "Decodable Implementations",
    "url": "https://developer.apple.com/documentation/musickit/radioshow/decodable-implementations",
    "html": "Topics\nInitializers\ninit(from: any Decoder) throws\nCreates a new instance by decoding from the given decoder."
  },
  {
    "title": "MusicItem Implementations",
    "url": "https://developer.apple.com/documentation/musickit/recordlabel/musicitem-implementations",
    "html": "Topics\nInstance Methods\nfunc with([PartialMusicAsyncProperty<Self>]) async throws -> Self\nLoads a new instance of the music item that includes the specified properties.\nAvailable when Self conforms to MusicPropertyContainer and Decodable.\nfunc with([PartialMusicAsyncProperty<Self>], preferredSource: MusicPropertySource) async throws -> Self\nLoads a new instance of the music item that includes the specified properties.\nAvailable when Self conforms to MusicPropertyContainer and Decodable."
  },
  {
    "title": "Equatable Implementations",
    "url": "https://developer.apple.com/documentation/musickit/radioshow/equatable-implementations",
    "html": "Topics\nOperators\nstatic func != (Self, Self) -> Bool\nReturns a Boolean value indicating whether two values are not equal."
  },
  {
    "title": "Encodable Implementations",
    "url": "https://developer.apple.com/documentation/musickit/radioshow/encodable-implementations",
    "html": "Topics\nInstance Methods\nfunc encode(to: any Encoder) throws\nEncodes this value into the given encoder."
  },
  {
    "title": "==(_:_:)",
    "url": "https://developer.apple.com/documentation/musickit/playlist/==(_:_:)",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nEquality is the inverse of inequality. For any values a and b, a == b implies that a != b is false."
  },
  {
    "title": "==(_:_:)",
    "url": "https://developer.apple.com/documentation/musickit/musicvideo/==(_:_:)",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nEquality is the inverse of inequality. For any values a and b, a == b implies that a != b is false."
  },
  {
    "title": "Decodable Implementations",
    "url": "https://developer.apple.com/documentation/musickit/playlist/decodable-implementations",
    "html": "Topics\nInitializers\ninit(from: any Decoder) throws\nCreates a new instance by decoding from the given decoder."
  },
  {
    "title": "Decodable Implementations",
    "url": "https://developer.apple.com/documentation/musickit/curator/decodable-implementations",
    "html": "Topics\nInitializers\ninit(from: any Decoder) throws\nCreates a new instance by decoding from the given decoder."
  },
  {
    "title": "CustomStringConvertible Implementations",
    "url": "https://developer.apple.com/documentation/musickit/playlist/customstringconvertible-implementations",
    "html": "Topics\nInstance Properties\nvar description: String\nA textual representation of this instance."
  },
  {
    "title": "CustomDebugStringConvertible Implementations",
    "url": "https://developer.apple.com/documentation/musickit/curator/customdebugstringconvertible-implementations",
    "html": "Topics\nInstance Properties\nvar debugDescription: String\nA textual representation of this instance, suitable for debugging."
  },
  {
    "title": "Curator.Kind",
    "url": "https://developer.apple.com/documentation/musickit/curator/kind-swift.enum",
    "html": "Topics\nOperators\nstatic func == (Curator.Kind, Curator.Kind) -> Bool\nReturns a Boolean value indicating whether two values are equal.\nEnumeration Cases\ncase editorial\nIndicates that the curator is an Apple Music curator.\ncase external\nIndicates that the curator is an external, third-party curator.\nInitializers\ninit(from: any Decoder) throws\nCreates a new instance by decoding from the given decoder.\nInstance Properties\nvar hashValue: Int\nThe hash value.\nInstance Methods\nfunc encode(to: any Encoder) throws\nEncodes this value into the given encoder.\nfunc hash(into: inout Hasher)\nHashes the essential components of this value by feeding them into the given hasher.\nDefault Implementations\nEquatable Implementations\nRelationships\nConforms To\nDecodable\nEncodable\nEquatable\nHashable\nSendable"
  },
  {
    "title": "CustomStringConvertible Implementations",
    "url": "https://developer.apple.com/documentation/musickit/curator/customstringconvertible-implementations",
    "html": "Topics\nInstance Properties\nvar description: String\nA textual representation of this instance."
  },
  {
    "title": "hash(into:)",
    "url": "https://developer.apple.com/documentation/musickit/genre/hash(into:)",
    "html": "Parameters\nhasher\n\nThe hasher to use when combining the components of this instance.\n\nDiscussion\n\nImplement this method to conform to the Hashable protocol. The components used for hashing must be the same as the components compared in your type’s == operator implementation. Call hasher.combine(_:) with each of these components.\n\nImportant\n\nIn your implementation of hash(into:), don’t call finalize() on the hasher instance provided, or replace it with a different instance. Doing so may become a compile-time error in the future."
  },
  {
    "title": "CustomStringConvertible Implementations",
    "url": "https://developer.apple.com/documentation/musickit/radioshow/customstringconvertible-implementations",
    "html": "Topics\nInstance Properties\nvar description: String\nA textual representation of this instance."
  },
  {
    "title": "CustomDebugStringConvertible Implementations",
    "url": "https://developer.apple.com/documentation/musickit/radioshow/customdebugstringconvertible-implementations",
    "html": "Topics\nInstance Properties\nvar debugDescription: String\nA textual representation of this instance, suitable for debugging."
  },
  {
    "title": "hash(into:)",
    "url": "https://developer.apple.com/documentation/musickit/radioshow/hash(into:)",
    "html": "Parameters\nhasher\n\nThe hasher to use when combining the components of this instance.\n\nDiscussion\n\nImplement this method to conform to the Hashable protocol. The components used for hashing must be the same as the components compared in your type’s == operator implementation. Call hasher.combine(_:) with each of these components.\n\nImportant\n\nIn your implementation of hash(into:), don’t call finalize() on the hasher instance provided, or replace it with a different instance. Doing so may become a compile-time error in the future."
  },
  {
    "title": "hashValue",
    "url": "https://developer.apple.com/documentation/musickit/radioshow/hashvalue",
    "html": "Discussion\n\nHash values are not guaranteed to be equal across different executions of your program. Do not save hash values to use during a future execution.\n\nImportant\n\nhashValue is deprecated as a Hashable requirement. To conform to Hashable, implement the hash(into:) requirement instead. The compiler provides an implementation for hashValue for you."
  },
  {
    "title": "MusicLibraryRequestable Implementations",
    "url": "https://developer.apple.com/documentation/musickit/genre/musiclibraryrequestable-implementations",
    "html": "Topics\nType Aliases\ntypealias LibraryFilter\nThe associated type that contains the genre properties your app uses for a library request.\ntypealias LibrarySortProperties\nThe associated type that contains the set of genre properties your app uses to sort results for a library request."
  },
  {
    "title": "Playlist.Kind",
    "url": "https://developer.apple.com/documentation/musickit/playlist/kind-swift.enum",
    "html": "Topics\nOperators\nstatic func == (Playlist.Kind, Playlist.Kind) -> Bool\nReturns a Boolean value indicating whether two values are equal.\nEnumeration Cases\ncase editorial\nIndicates that the playlist was created by an Apple Music curator.\ncase external\nIndicates that the playlist was created by an external curator.\ncase personalMix\nIndicates that the playlist is a personalized playlist for an Apple Music user.\ncase replay\nIndicates that the playlist is a personalized Replay playlist for an Apple Music user.\ncase userShared\nIndicates that the playlist was created and shared by an Apple Music user.\nInitializers\ninit(from: any Decoder) throws\nCreates a new instance by decoding from the given decoder.\nInstance Properties\nvar hashValue: Int\nThe hash value.\nInstance Methods\nfunc encode(to: any Encoder) throws\nEncodes this value into the given encoder.\nfunc hash(into: inout Hasher)\nHashes the essential components of this value by feeding them into the given hasher.\nDefault Implementations\nEquatable Implementations\nRelationships\nConforms To\nDecodable\nEncodable\nEquatable\nHashable\nSendable"
  },
  {
    "title": "CustomDebugStringConvertible Implementations",
    "url": "https://developer.apple.com/documentation/musickit/playlist/customdebugstringconvertible-implementations",
    "html": "Topics\nInstance Properties\nvar debugDescription: String\nA textual representation of this instance, suitable for debugging."
  },
  {
    "title": "MusicItem Implementations",
    "url": "https://developer.apple.com/documentation/musickit/genre/musicitem-implementations",
    "html": "Topics\nInstance Methods\nfunc with([PartialMusicAsyncProperty<Self>]) async throws -> Self\nLoads a new instance of the music item that includes the specified properties.\nAvailable when Self conforms to MusicPropertyContainer and Decodable.\nfunc with([PartialMusicAsyncProperty<Self>], preferredSource: MusicPropertySource) async throws -> Self\nLoads a new instance of the music item that includes the specified properties.\nAvailable when Self conforms to MusicPropertyContainer and Decodable."
  },
  {
    "title": "FilterableMusicItem Implementations",
    "url": "https://developer.apple.com/documentation/musickit/genre/filterablemusicitem-implementations",
    "html": "Topics\nType Aliases\ntypealias FilterType\nThe associated type that contains the set of genre properties your app uses as a filter for a catalog resource request."
  },
  {
    "title": "CustomStringConvertible Implementations",
    "url": "https://developer.apple.com/documentation/musickit/genre/customstringconvertible-implementations",
    "html": "Topics\nInstance Properties\nvar description: String\nA textual representation of this instance."
  },
  {
    "title": "CustomDebugStringConvertible Implementations",
    "url": "https://developer.apple.com/documentation/musickit/genre/customdebugstringconvertible-implementations",
    "html": "Topics\nInstance Properties\nvar debugDescription: String\nA textual representation of this instance, suitable for debugging."
  },
  {
    "title": "Encodable Implementations",
    "url": "https://developer.apple.com/documentation/musickit/genre/encodable-implementations",
    "html": "Topics\nInstance Methods\nfunc encode(to: any Encoder) throws\nEncodes this value into the given encoder."
  },
  {
    "title": "==(_:_:)",
    "url": "https://developer.apple.com/documentation/musickit/radioshow/==(_:_:)",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nEquality is the inverse of inequality. For any values a and b, a == b implies that a != b is false."
  },
  {
    "title": "Decodable Implementations",
    "url": "https://developer.apple.com/documentation/musickit/genre/decodable-implementations",
    "html": "Topics\nInitializers\ninit(from: any Decoder) throws\nCreates a new instance by decoding from the given decoder."
  },
  {
    "title": "==(_:_:)",
    "url": "https://developer.apple.com/documentation/musickit/curator/==(_:_:)",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nEquality is the inverse of inequality. For any values a and b, a == b implies that a != b is false."
  },
  {
    "title": "hash(into:)",
    "url": "https://developer.apple.com/documentation/musickit/curator/hash(into:)",
    "html": "Parameters\nhasher\n\nThe hasher to use when combining the components of this instance.\n\nDiscussion\n\nImplement this method to conform to the Hashable protocol. The components used for hashing must be the same as the components compared in your type’s == operator implementation. Call hasher.combine(_:) with each of these components.\n\nImportant\n\nIn your implementation of hash(into:), don’t call finalize() on the hasher instance provided, or replace it with a different instance. Doing so may become a compile-time error in the future."
  },
  {
    "title": "hashValue",
    "url": "https://developer.apple.com/documentation/musickit/playlist/hashvalue",
    "html": "Discussion\n\nHash values are not guaranteed to be equal across different executions of your program. Do not save hash values to use during a future execution.\n\nImportant\n\nhashValue is deprecated as a Hashable requirement. To conform to Hashable, implement the hash(into:) requirement instead. The compiler provides an implementation for hashValue for you."
  },
  {
    "title": "MusicItem Implementations",
    "url": "https://developer.apple.com/documentation/musickit/radioshow/musicitem-implementations",
    "html": "Topics\nInstance Methods\nfunc with([PartialMusicAsyncProperty<Self>]) async throws -> Self\nLoads a new instance of the music item that includes the specified properties.\nAvailable when Self conforms to MusicPropertyContainer and Decodable.\nfunc with([PartialMusicAsyncProperty<Self>], preferredSource: MusicPropertySource) async throws -> Self\nLoads a new instance of the music item that includes the specified properties.\nAvailable when Self conforms to MusicPropertyContainer and Decodable."
  },
  {
    "title": "FilterableMusicItem Implementations",
    "url": "https://developer.apple.com/documentation/musickit/radioshow/filterablemusicitem-implementations",
    "html": "Topics\nType Aliases\ntypealias FilterType\nThe associated type that contains the radio show properties your app uses as a filter for a catalog resource request."
  },
  {
    "title": "CustomDebugStringConvertible Implementations",
    "url": "https://developer.apple.com/documentation/musickit/recentlyplayedmusicitem/customdebugstringconvertible-implementations",
    "html": "Topics\nInstance Properties\nvar debugDescription: String\nA textual representation of this instance, suitable for debugging."
  },
  {
    "title": "CustomStringConvertible Implementations",
    "url": "https://developer.apple.com/documentation/musickit/recentlyplayedmusicitem/customstringconvertible-implementations",
    "html": "Topics\nInstance Properties\nvar description: String\nA textual representation of this instance."
  },
  {
    "title": "Decodable Implementations",
    "url": "https://developer.apple.com/documentation/musickit/recentlyplayedmusicitem/decodable-implementations",
    "html": "Topics\nInitializers\ninit(from: any Decoder) throws\nCreates a new instance by decoding from the given decoder."
  },
  {
    "title": "Encodable Implementations",
    "url": "https://developer.apple.com/documentation/musickit/recentlyplayedmusicitem/encodable-implementations",
    "html": "Topics\nInstance Methods\nfunc encode(to: any Encoder) throws\nEncodes this value into the given encoder."
  },
  {
    "title": "Equatable Implementations",
    "url": "https://developer.apple.com/documentation/musickit/musicpropertysource/equatable-implementations",
    "html": "Topics\nOperators\nstatic func != (Self, Self) -> Bool\nReturns a Boolean value indicating whether two values are not equal."
  },
  {
    "title": "==(_:_:)",
    "url": "https://developer.apple.com/documentation/musickit/genre/==(_:_:)",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nEquality is the inverse of inequality. For any values a and b, a == b implies that a != b is false."
  },
  {
    "title": "hashValue",
    "url": "https://developer.apple.com/documentation/musickit/genre/hashvalue",
    "html": "Discussion\n\nHash values are not guaranteed to be equal across different executions of your program. Do not save hash values to use during a future execution.\n\nImportant\n\nhashValue is deprecated as a Hashable requirement. To conform to Hashable, implement the hash(into:) requirement instead. The compiler provides an implementation for hashValue for you."
  },
  {
    "title": "encode(to:)",
    "url": "https://developer.apple.com/documentation/musickit/musicpropertysource/encode(to:)",
    "html": "Parameters\nencoder\n\nThe encoder to write data to.\n\nDiscussion\n\nIf the value fails to encode anything, encoder will encode an empty keyed container in its place.\n\nThis function throws an error if any values are invalid for the given encoder’s format."
  },
  {
    "title": "hash(into:)",
    "url": "https://developer.apple.com/documentation/musickit/musicpropertysource/hash(into:)",
    "html": "Parameters\nhasher\n\nThe hasher to use when combining the components of this instance.\n\nDiscussion\n\nImplement this method to conform to the Hashable protocol. The components used for hashing must be the same as the components compared in your type’s == operator implementation. Call hasher.combine(_:) with each of these components.\n\nImportant\n\nIn your implementation of hash(into:), don’t call finalize() on the hasher instance provided, or replace it with a different instance. Doing so may become a compile-time error in the future."
  },
  {
    "title": "hash(into:)",
    "url": "https://developer.apple.com/documentation/musickit/musiccatalogchartkind/hash(into:)",
    "html": "Parameters\nhasher\n\nThe hasher to use when combining the components of this instance.\n\nDiscussion\n\nImplement this method to conform to the Hashable protocol. The components used for hashing must be the same as the components compared in your type’s == operator implementation. Call hasher.combine(_:) with each of these components.\n\nImportant\n\nIn your implementation of hash(into:), don’t call finalize() on the hasher instance provided, or replace it with a different instance. Doing so may become a compile-time error in the future."
  },
  {
    "title": "hashValue",
    "url": "https://developer.apple.com/documentation/musickit/musiccatalogchartkind/hashvalue",
    "html": "Discussion\n\nHash values are not guaranteed to be equal across different executions of your program. Do not save hash values to use during a future execution.\n\nImportant\n\nhashValue is deprecated as a Hashable requirement. To conform to Hashable, implement the hash(into:) requirement instead. The compiler provides an implementation for hashValue for you."
  },
  {
    "title": "MusicPersonalRecommendation.Item",
    "url": "https://developer.apple.com/documentation/musickit/musicpersonalrecommendation/item",
    "html": "Topics\nOperators\nstatic func == (MusicPersonalRecommendation.Item, MusicPersonalRecommendation.Item) -> Bool\nReturns a Boolean value indicating whether two values are equal.\nEnumeration Cases\ncase album(Album)\nAn item that corresponds to an album.\ncase playlist(Playlist)\nAn item that corresponds to a playlist.\ncase station(Station)\nAn item that corresponds to a station.\nInstance Properties\nvar artwork: Artwork?\nThe artwork of this item.\nvar hashValue: Int\nThe hash value.\nvar id: MusicItemID\nThe unique identifier of this item.\nvar subtitle: String?\nThe subtitle of this item.\nvar title: String\nThe title of this item.\nInstance Methods\nfunc hash(into: inout Hasher)\nHashes the essential components of this value by feeding them into the given hasher.\nType Aliases\ntypealias ID\nA type representing the stable identity of the entity associated with an instance.\nDefault Implementations\nCustomDebugStringConvertible Implementations\nCustomStringConvertible Implementations\nDecodable Implementations\nEncodable Implementations\nEquatable Implementations\nRelationships\nConforms To\nCustomDebugStringConvertible\nCustomStringConvertible\nDecodable\nEncodable\nEquatable\nHashable\nIdentifiable\nMusicItem\nSendable"
  },
  {
    "title": "hash(into:)",
    "url": "https://developer.apple.com/documentation/musickit/audiovariant/hash(into:)",
    "html": "Parameters\nhasher\n\nThe hasher to use when combining the components of this instance.\n\nDiscussion\n\nImplement this method to conform to the Hashable protocol. The components used for hashing must be the same as the components compared in your type’s == operator implementation. Call hasher.combine(_:) with each of these components.\n\nImportant\n\nIn your implementation of hash(into:), don’t call finalize() on the hasher instance provided, or replace it with a different instance. Doing so may become a compile-time error in the future."
  },
  {
    "title": "Encodable Implementations",
    "url": "https://developer.apple.com/documentation/musickit/musiccatalogchartkind/encodable-implementations",
    "html": "Topics\nInstance Methods\nfunc encode(to: any Encoder) throws\nEncodes this value into the given encoder."
  },
  {
    "title": "Decodable Implementations",
    "url": "https://developer.apple.com/documentation/musickit/musiccatalogchartkind/decodable-implementations",
    "html": "Topics\nInitializers\ninit(from: any Decoder) throws\nCreates a new instance by decoding from the given decoder."
  },
  {
    "title": "CustomStringConvertible Implementations",
    "url": "https://developer.apple.com/documentation/musickit/musiccatalogchartkind/customstringconvertible-implementations",
    "html": "Topics\nInstance Properties\nvar description: String\nA textual representation of this instance."
  },
  {
    "title": "Equatable Implementations",
    "url": "https://developer.apple.com/documentation/musickit/musiccatalogchartkind/equatable-implementations",
    "html": "Topics\nOperators\nstatic func != (Self, Self) -> Bool\nReturns a Boolean value indicating whether two values are not equal."
  },
  {
    "title": "==(_:_:)",
    "url": "https://developer.apple.com/documentation/musickit/musicpersonalrecommendation/==(_:_:)",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nEquality is the inverse of inequality. For any values a and b, a == b implies that a != b is false."
  },
  {
    "title": "hashValue",
    "url": "https://developer.apple.com/documentation/musickit/recentlyplayedmusicitem/hashvalue",
    "html": "Discussion\n\nHash values are not guaranteed to be equal across different executions of your program. Do not save hash values to use during a future execution.\n\nImportant\n\nhashValue is deprecated as a Hashable requirement. To conform to Hashable, implement the hash(into:) requirement instead. The compiler provides an implementation for hashValue for you."
  },
  {
    "title": "hashValue",
    "url": "https://developer.apple.com/documentation/musickit/musicpropertysource/hashvalue",
    "html": "Discussion\n\nHash values are not guaranteed to be equal across different executions of your program. Do not save hash values to use during a future execution.\n\nImportant\n\nhashValue is deprecated as a Hashable requirement. To conform to Hashable, implement the hash(into:) requirement instead. The compiler provides an implementation for hashValue for you."
  },
  {
    "title": "init(from:)",
    "url": "https://developer.apple.com/documentation/musickit/musicpropertysource/init(from:)",
    "html": "Parameters\ndecoder\n\nThe decoder to read data from.\n\nDiscussion\n\nThis initializer throws an error if reading from the decoder fails, or if the data read is corrupted or otherwise invalid."
  },
  {
    "title": "==(_:_:)",
    "url": "https://developer.apple.com/documentation/musickit/musicpropertysource/==(_:_:)",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nEquality is the inverse of inequality. For any values a and b, a == b implies that a != b is false."
  },
  {
    "title": "==(_:_:)",
    "url": "https://developer.apple.com/documentation/musickit/musiccatalogchartkind/==(_:_:)",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nEquality is the inverse of inequality. For any values a and b, a == b implies that a != b is false."
  },
  {
    "title": "hashValue",
    "url": "https://developer.apple.com/documentation/musickit/musicpersonalrecommendation/hashvalue",
    "html": "Discussion\n\nHash values are not guaranteed to be equal across different executions of your program. Do not save hash values to use during a future execution.\n\nImportant\n\nhashValue is deprecated as a Hashable requirement. To conform to Hashable, implement the hash(into:) requirement instead. The compiler provides an implementation for hashValue for you."
  },
  {
    "title": "hash(into:)",
    "url": "https://developer.apple.com/documentation/musickit/musicpersonalrecommendation/hash(into:)",
    "html": "Parameters\nhasher\n\nThe hasher to use when combining the components of this instance.\n\nDiscussion\n\nImplement this method to conform to the Hashable protocol. The components used for hashing must be the same as the components compared in your type’s == operator implementation. Call hasher.combine(_:) with each of these components.\n\nImportant\n\nIn your implementation of hash(into:), don’t call finalize() on the hasher instance provided, or replace it with a different instance. Doing so may become a compile-time error in the future."
  },
  {
    "title": "CustomStringConvertible Implementations",
    "url": "https://developer.apple.com/documentation/musickit/musicpersonalrecommendation/customstringconvertible-implementations",
    "html": "Topics\nInstance Properties\nvar description: String\nA textual representation of this instance."
  },
  {
    "title": "CustomDebugStringConvertible Implementations",
    "url": "https://developer.apple.com/documentation/musickit/musicpersonalrecommendation/customdebugstringconvertible-implementations",
    "html": "Topics\nInstance Properties\nvar debugDescription: String\nA textual representation of this instance, suitable for debugging."
  },
  {
    "title": "Equatable Implementations",
    "url": "https://developer.apple.com/documentation/musickit/artist/equatable-implementations",
    "html": "Topics\nOperators\nstatic func != (Self, Self) -> Bool\nReturns a Boolean value indicating whether two values are not equal."
  },
  {
    "title": "MusicItem Implementations",
    "url": "https://developer.apple.com/documentation/musickit/artist/musicitem-implementations",
    "html": "Topics\nInstance Methods\nfunc with([PartialMusicAsyncProperty<Self>]) async throws -> Self\nLoads a new instance of the music item that includes the specified properties.\nAvailable when Self conforms to MusicPropertyContainer and Decodable.\nfunc with([PartialMusicAsyncProperty<Self>], preferredSource: MusicPropertySource) async throws -> Self\nLoads a new instance of the music item that includes the specified properties.\nAvailable when Self conforms to MusicPropertyContainer and Decodable."
  },
  {
    "title": "Encodable Implementations",
    "url": "https://developer.apple.com/documentation/musickit/artist/encodable-implementations",
    "html": "Topics\nInstance Methods\nfunc encode(to: any Encoder) throws\nEncodes this value into the given encoder."
  },
  {
    "title": "hashValue",
    "url": "https://developer.apple.com/documentation/musickit/audiovariant/hashvalue",
    "html": "Discussion\n\nHash values are not guaranteed to be equal across different executions of your program. Do not save hash values to use during a future execution.\n\nImportant\n\nhashValue is deprecated as a Hashable requirement. To conform to Hashable, implement the hash(into:) requirement instead. The compiler provides an implementation for hashValue for you."
  },
  {
    "title": "FilterableMusicItem Implementations",
    "url": "https://developer.apple.com/documentation/musickit/artist/filterablemusicitem-implementations",
    "html": "Topics\nType Aliases\ntypealias FilterType\nThe associated type that contains the artist properties your app uses as a filter for a catalog resource request."
  },
  {
    "title": "CustomStringConvertible Implementations",
    "url": "https://developer.apple.com/documentation/musickit/artist/customstringconvertible-implementations",
    "html": "Topics\nInstance Properties\nvar description: String\nA textual representation of this instance."
  },
  {
    "title": "Decodable Implementations",
    "url": "https://developer.apple.com/documentation/musickit/artist/decodable-implementations",
    "html": "Topics\nInitializers\ninit(from: any Decoder) throws\nCreates a new instance by decoding from the given decoder."
  },
  {
    "title": "CustomDebugStringConvertible Implementations",
    "url": "https://developer.apple.com/documentation/musickit/artist/customdebugstringconvertible-implementations",
    "html": "Topics\nInstance Properties\nvar debugDescription: String\nA textual representation of this instance, suitable for debugging."
  },
  {
    "title": "hash(into:)",
    "url": "https://developer.apple.com/documentation/musickit/artist/hash(into:)",
    "html": "Parameters\nhasher\n\nThe hasher to use when combining the components of this instance.\n\nDiscussion\n\nImplement this method to conform to the Hashable protocol. The components used for hashing must be the same as the components compared in your type’s == operator implementation. Call hasher.combine(_:) with each of these components.\n\nImportant\n\nIn your implementation of hash(into:), don’t call finalize() on the hasher instance provided, or replace it with a different instance. Doing so may become a compile-time error in the future."
  },
  {
    "title": "hash(into:)",
    "url": "https://developer.apple.com/documentation/musickit/recentlyplayedmusicitem/hash(into:)",
    "html": "Parameters\nhasher\n\nThe hasher to use when combining the components of this instance.\n\nDiscussion\n\nImplement this method to conform to the Hashable protocol. The components used for hashing must be the same as the components compared in your type’s == operator implementation. Call hasher.combine(_:) with each of these components.\n\nImportant\n\nIn your implementation of hash(into:), don’t call finalize() on the hasher instance provided, or replace it with a different instance. Doing so may become a compile-time error in the future."
  },
  {
    "title": "Decodable Implementations",
    "url": "https://developer.apple.com/documentation/musickit/musiccatalogchart/decodable-implementations",
    "html": "Topics\nInitializers\ninit(from: any Decoder) throws\nCreates a new instance by decoding from the given decoder.\nAvailable when MusicItemType conforms to MusicCatalogChartRequestable and Decodable."
  },
  {
    "title": "hashValue",
    "url": "https://developer.apple.com/documentation/musickit/artist/hashvalue",
    "html": "Discussion\n\nHash values are not guaranteed to be equal across different executions of your program. Do not save hash values to use during a future execution.\n\nImportant\n\nhashValue is deprecated as a Hashable requirement. To conform to Hashable, implement the hash(into:) requirement instead. The compiler provides an implementation for hashValue for you."
  },
  {
    "title": "MusicCatalogSearchSuggestionsResponse.Suggestion",
    "url": "https://developer.apple.com/documentation/musickit/musiccatalogsearchsuggestionsresponse/suggestion",
    "html": "Topics\nOperators\nstatic func == (MusicCatalogSearchSuggestionsResponse.Suggestion, MusicCatalogSearchSuggestionsResponse.Suggestion) -> Bool\nReturns a Boolean value indicating whether two values are equal.\nInitializers\ninit(from: any Decoder) throws\nCreates a new instance by decoding from the given decoder.\nInstance Properties\nlet displayTerm: String\nA term to display to the user to select from.\nvar hashValue: Int\nThe hash value.\nvar id: String\nThe unique identifier for the suggestion.\nlet searchTerm: String\nThe term to use as a search input when using this suggestion.\nInstance Methods\nfunc encode(to: any Encoder) throws\nEncodes this value into the given encoder.\nfunc hash(into: inout Hasher)\nHashes the essential components of this value by feeding them into the given hasher.\nType Aliases\ntypealias ID\nA type representing the stable identity of the entity associated with an instance.\nDefault Implementations\nCustomDebugStringConvertible Implementations\nCustomStringConvertible Implementations\nEquatable Implementations\nRelationships\nConforms To\nCustomDebugStringConvertible\nCustomStringConvertible\nDecodable\nEncodable\nEquatable\nHashable\nIdentifiable\nSendable"
  },
  {
    "title": "CustomDebugStringConvertible Implementations",
    "url": "https://developer.apple.com/documentation/musickit/musiclibraryresponse/customdebugstringconvertible-implementations",
    "html": "Topics\nInstance Properties\nvar debugDescription: String\nA textual representation of this instance, suitable for debugging.\nAvailable when MusicItemType conforms to MusicItem."
  },
  {
    "title": "CustomStringConvertible Implementations",
    "url": "https://developer.apple.com/documentation/musickit/musiclibraryresponse/customstringconvertible-implementations",
    "html": "Topics\nInstance Properties\nvar description: String\nA textual representation of this instance.\nAvailable when MusicItemType conforms to MusicItem."
  },
  {
    "title": "Equatable Implementations",
    "url": "https://developer.apple.com/documentation/musickit/musiclibraryresponse/equatable-implementations",
    "html": "Topics\nOperators\nstatic func != (Self, Self) -> Bool\nReturns a Boolean value indicating whether two values are not equal.\nstatic func == (MusicLibraryResponse<MusicItemType>, MusicLibraryResponse<MusicItemType>) -> Bool\nReturns a Boolean value indicating whether two values are equal.\nAvailable when MusicItemType conforms to MusicItem and Equatable."
  },
  {
    "title": "Hashable Implementations",
    "url": "https://developer.apple.com/documentation/musickit/musiclibraryresponse/hashable-implementations",
    "html": "Topics\nInstance Properties\nvar hashValue: Int\nThe hash value.\nAvailable when MusicItemType conforms to MusicItem and Hashable.\nInstance Methods\nfunc hash(into: inout Hasher)\nHashes the essential components of this value by feeding them into the given hasher.\nAvailable when MusicItemType conforms to MusicItem and Hashable."
  },
  {
    "title": "==(_:_:)",
    "url": "https://developer.apple.com/documentation/musickit/musiccatalogsearchsuggestionsresponse/==(_:_:)",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nEquality is the inverse of inequality. For any values a and b, a == b implies that a != b is false."
  },
  {
    "title": "hashValue",
    "url": "https://developer.apple.com/documentation/musickit/musiccatalogsearchsuggestionsresponse/hashvalue",
    "html": "Discussion\n\nHash values are not guaranteed to be equal across different executions of your program. Do not save hash values to use during a future execution.\n\nImportant\n\nhashValue is deprecated as a Hashable requirement. To conform to Hashable, implement the hash(into:) requirement instead. The compiler provides an implementation for hashValue for you."
  },
  {
    "title": "==(_:_:)",
    "url": "https://developer.apple.com/documentation/musickit/artist/==(_:_:)",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nEquality is the inverse of inequality. For any values a and b, a == b implies that a != b is false."
  },
  {
    "title": "Encodable Implementations",
    "url": "https://developer.apple.com/documentation/musickit/musicpersonalrecommendation/encodable-implementations",
    "html": "Topics\nInstance Methods\nfunc encode(to: any Encoder) throws\nEncodes this value into the given encoder."
  },
  {
    "title": "==(_:_:)",
    "url": "https://developer.apple.com/documentation/musickit/audiovariant/==(_:_:)",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nEquality is the inverse of inequality. For any values a and b, a == b implies that a != b is false."
  },
  {
    "title": "Decodable Implementations",
    "url": "https://developer.apple.com/documentation/musickit/musicpersonalrecommendation/decodable-implementations",
    "html": "Topics\nInitializers\ninit(from: any Decoder) throws\nCreates a new instance by decoding from the given decoder."
  },
  {
    "title": "Equatable Implementations",
    "url": "https://developer.apple.com/documentation/musickit/musicpersonalrecommendation/equatable-implementations",
    "html": "Topics\nOperators\nstatic func != (Self, Self) -> Bool\nReturns a Boolean value indicating whether two values are not equal."
  },
  {
    "title": "MusicLibraryRequestable Implementations",
    "url": "https://developer.apple.com/documentation/musickit/artist/musiclibraryrequestable-implementations",
    "html": "Topics\nType Aliases\ntypealias LibraryFilter\nThe associated type that contains the artist properties your app uses for a library request.\ntypealias LibrarySortProperties\nThe associated type that contains the set of artist properties your app uses to sort results for a library request."
  },
  {
    "title": "Decodable Implementations",
    "url": "https://developer.apple.com/documentation/musickit/audiovariant/decodable-implementations",
    "html": "Topics\nInitializers\ninit(from: any Decoder) throws\nCreates a new instance by decoding from the given decoder."
  },
  {
    "title": "CustomStringConvertible Implementations",
    "url": "https://developer.apple.com/documentation/musickit/audiovariant/customstringconvertible-implementations",
    "html": "Topics\nInstance Properties\nvar description: String\nA textual representation of this instance."
  },
  {
    "title": "Encodable Implementations",
    "url": "https://developer.apple.com/documentation/musickit/audiovariant/encodable-implementations",
    "html": "Topics\nInstance Methods\nfunc encode(to: any Encoder) throws\nEncodes this value into the given encoder."
  },
  {
    "title": "Equatable Implementations",
    "url": "https://developer.apple.com/documentation/musickit/audiovariant/equatable-implementations",
    "html": "Topics\nOperators\nstatic func != (Self, Self) -> Bool\nReturns a Boolean value indicating whether two values are not equal."
  },
  {
    "title": "limit",
    "url": "https://developer.apple.com/documentation/musickit/musiclibraryrequest/limit",
    "html": "Discussion\n\nA limit of 0 length means no limit."
  },
  {
    "title": "hash(into:)",
    "url": "https://developer.apple.com/documentation/musickit/musiccatalogsearchsuggestionsresponse/hash(into:)",
    "html": "Parameters\nhasher\n\nThe hasher to use when combining the components of this instance.\n\nDiscussion\n\nImplement this method to conform to the Hashable protocol. The components used for hashing must be the same as the components compared in your type’s == operator implementation. Call hasher.combine(_:) with each of these components.\n\nImportant\n\nIn your implementation of hash(into:), don’t call finalize() on the hasher instance provided, or replace it with a different instance. Doing so may become a compile-time error in the future."
  },
  {
    "title": "CustomStringConvertible Implementations",
    "url": "https://developer.apple.com/documentation/musickit/musiccatalogsearchsuggestionsresponse/customstringconvertible-implementations",
    "html": "Topics\nInstance Properties\nvar description: String\nA textual representation of this instance."
  },
  {
    "title": "Equatable Implementations",
    "url": "https://developer.apple.com/documentation/musickit/musiccatalogsearchsuggestionsresponse/equatable-implementations",
    "html": "Topics\nOperators\nstatic func != (Self, Self) -> Bool\nReturns a Boolean value indicating whether two values are not equal."
  },
  {
    "title": "Decodable Implementations",
    "url": "https://developer.apple.com/documentation/musickit/musiccatalogsearchsuggestionsresponse/decodable-implementations",
    "html": "Topics\nInitializers\ninit(from: any Decoder) throws\nCreates a new instance by decoding from the given decoder."
  },
  {
    "title": "Encodable Implementations",
    "url": "https://developer.apple.com/documentation/musickit/musiccatalogsearchsuggestionsresponse/encodable-implementations",
    "html": "Topics\nInstance Methods\nfunc encode(to: any Encoder) throws\nEncodes this value into the given encoder."
  },
  {
    "title": "CustomDebugStringConvertible Implementations",
    "url": "https://developer.apple.com/documentation/musickit/musiccatalogchart/customdebugstringconvertible-implementations",
    "html": "Topics\nInstance Properties\nvar debugDescription: String\nA textual representation of this instance, suitable for debugging.\nAvailable when MusicItemType conforms to MusicCatalogChartRequestable."
  },
  {
    "title": "CustomStringConvertible Implementations",
    "url": "https://developer.apple.com/documentation/musickit/musiccatalogchart/customstringconvertible-implementations",
    "html": "Topics\nInstance Properties\nvar description: String\nA textual representation of this instance.\nAvailable when MusicItemType conforms to MusicCatalogChartRequestable."
  },
  {
    "title": "Hashable Implementations",
    "url": "https://developer.apple.com/documentation/musickit/musiccatalogchart/hashable-implementations",
    "html": "Topics\nInstance Properties\nvar hashValue: Int\nThe hash value.\nAvailable when MusicItemType conforms to MusicCatalogChartRequestable and Hashable.\nInstance Methods\nfunc hash(into: inout Hasher)\nHashes the essential components of this value by feeding them into the given hasher.\nAvailable when MusicItemType conforms to MusicCatalogChartRequestable and Hashable."
  },
  {
    "title": "Encodable Implementations",
    "url": "https://developer.apple.com/documentation/musickit/musiccatalogchart/encodable-implementations",
    "html": "Topics\nInstance Methods\nfunc encode(to: any Encoder) throws\nEncodes this value into the given encoder.\nAvailable when MusicItemType conforms to MusicCatalogChartRequestable and Encodable."
  },
  {
    "title": "Equatable Implementations",
    "url": "https://developer.apple.com/documentation/musickit/musiccatalogchart/equatable-implementations",
    "html": "Topics\nOperators\nstatic func != (Self, Self) -> Bool\nReturns a Boolean value indicating whether two values are not equal.\nstatic func == (MusicCatalogChart<MusicItemType>, MusicCatalogChart<MusicItemType>) -> Bool\nReturns a Boolean value indicating whether two values are equal.\nAvailable when MusicItemType conforms to MusicCatalogChartRequestable and Equatable."
  },
  {
    "title": "CustomStringConvertible Implementations",
    "url": "https://developer.apple.com/documentation/musickit/musiclibrarysection/customstringconvertible-implementations",
    "html": "Topics\nInstance Properties\nvar description: String\nA textual representation of this instance.\nAvailable when SectionType conforms to MusicLibrarySectionRequestable and MusicItemType conforms to MusicLibraryRequestable."
  },
  {
    "title": "CustomDebugStringConvertible Implementations",
    "url": "https://developer.apple.com/documentation/musickit/musiclibrarysection/customdebugstringconvertible-implementations",
    "html": "Topics\nInstance Properties\nvar debugDescription: String\nA textual representation of this instance, suitable for debugging.\nAvailable when SectionType conforms to MusicLibrarySectionRequestable and MusicItemType conforms to MusicLibraryRequestable."
  },
  {
    "title": "CustomDebugStringConvertible Implementations",
    "url": "https://developer.apple.com/documentation/musickit/musiccatalogsearchsuggestionsresponse/customdebugstringconvertible-implementations",
    "html": "Topics\nInstance Properties\nvar debugDescription: String\nA textual representation of this instance, suitable for debugging."
  },
  {
    "title": "hashValue",
    "url": "https://developer.apple.com/documentation/musickit/musiclibrarysearchrequest/hashvalue",
    "html": "Discussion\n\nHash values are not guaranteed to be equal across different executions of your program. Do not save hash values to use during a future execution.\n\nImportant\n\nhashValue is deprecated as a Hashable requirement. To conform to Hashable, implement the hash(into:) requirement instead. The compiler provides an implementation for hashValue for you."
  },
  {
    "title": "Equatable Implementations",
    "url": "https://developer.apple.com/documentation/musickit/musiclibrarysection/equatable-implementations",
    "html": "Topics\nOperators\nstatic func != (Self, Self) -> Bool\nReturns a Boolean value indicating whether two values are not equal.\nstatic func == (MusicLibrarySection<SectionType, MusicItemType>, MusicLibrarySection<SectionType, MusicItemType>) -> Bool\nReturns a Boolean value indicating whether two values are equal.\nAvailable when SectionType conforms to MusicLibrarySectionRequestable, SectionType conforms to Equatable, MusicItemType conforms to MusicLibraryRequestable, and MusicItemType conforms to Equatable."
  },
  {
    "title": "Hashable Implementations",
    "url": "https://developer.apple.com/documentation/musickit/musiclibrarysection/hashable-implementations",
    "html": "Topics\nInstance Properties\nvar hashValue: Int\nThe hash value.\nAvailable when SectionType conforms to MusicLibrarySectionRequestable, SectionType conforms to Hashable, MusicItemType conforms to MusicLibraryRequestable, and MusicItemType conforms to Hashable.\nInstance Methods\nfunc hash(into: inout Hasher)\nHashes the essential components of this value by feeding them into the given hasher.\nAvailable when SectionType conforms to MusicLibrarySectionRequestable, SectionType conforms to Hashable, MusicItemType conforms to MusicLibraryRequestable, and MusicItemType conforms to Hashable."
  },
  {
    "title": "Identifiable Implementations",
    "url": "https://developer.apple.com/documentation/musickit/musiclibrarysection/identifiable-implementations",
    "html": "Topics\nInstance Properties\nvar id: MusicItemID\nThe stable identity of the entity associated with this instance.\nAvailable when SectionType conforms to MusicLibrarySectionRequestable and MusicItemType conforms to MusicLibraryRequestable.\nType Aliases\ntypealias ID\nA type representing the stable identity of the entity associated with an instance.\nAvailable when SectionType conforms to MusicLibrarySectionRequestable and MusicItemType conforms to MusicLibraryRequestable."
  },
  {
    "title": "MusicSubscription.Updates.Iterator",
    "url": "https://developer.apple.com/documentation/musickit/musicsubscription/updates/iterator",
    "html": "Topics\nInstance Methods\nfunc next() async -> MusicSubscription?\nAsynchronously advances to the next element and returns it, or ends the sequence if there is no next element.\nType Aliases\ntypealias Element\nRelationships\nConforms To\nAsyncIteratorProtocol"
  },
  {
    "title": "init(from:)",
    "url": "https://developer.apple.com/documentation/musickit/playparameters/init(from:)",
    "html": "Parameters\ndecoder\n\nThe decoder to read data from.\n\nDiscussion\n\nThis initializer throws an error if reading from the decoder fails, or if the data read is corrupted or otherwise invalid."
  },
  {
    "title": "Equatable Implementations",
    "url": "https://developer.apple.com/documentation/musickit/musiclibrarysearchrequest/equatable-implementations",
    "html": "Topics\nOperators\nstatic func != (Self, Self) -> Bool\nReturns a Boolean value indicating whether two values are not equal."
  },
  {
    "title": "AsyncSequence Implementations",
    "url": "https://developer.apple.com/documentation/musickit/musicsubscription/updates/asyncsequence-implementations",
    "html": "Topics\nInstance Methods\nfunc allSatisfy((Self.Element) async throws -> Bool) async rethrows -> Bool\nReturns a Boolean value that indicates whether all elements produced by the asynchronous sequence satisfy the given predicate.\nfunc compactMap<ElementOfResult>((Self.Element) async throws -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<Self, ElementOfResult>\nCreates an asynchronous sequence that maps an error-throwing closure over the base sequence’s elements, omitting results that don’t return a value.\nfunc compactMap<ElementOfResult>((Self.Element) async -> ElementOfResult?) -> AsyncCompactMapSequence<Self, ElementOfResult>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements, omitting results that don’t return a value.\nfunc contains(Self.Element) async rethrows -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains the given element.\nAvailable when Element conforms to Equatable.\nfunc contains(where: (Self.Element) async throws -> Bool) async rethrows -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains an element that satisfies the given predicate.\nfunc drop(while: (Self.Element) async -> Bool) -> AsyncDropWhileSequence<Self>\nOmits elements from the base asynchronous sequence until a given closure returns false, after which it passes through all remaining elements.\nfunc dropFirst(Int) -> AsyncDropFirstSequence<Self>\nOmits a specified number of elements from the base asynchronous sequence, then passes through all remaining elements.\nfunc filter((Self.Element) async -> Bool) -> AsyncFilterSequence<Self>\nCreates an asynchronous sequence that contains, in order, the elements of the base sequence that satisfy the given predicate.\nfunc first(where: (Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the first element of the sequence that satisfies the given predicate.\nfunc flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given transformation with each element of this sequence.\nfunc flatMap<SegmentOfResult>((Self.Element) async throws -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<Self, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given error-throwing transformation with each element of this sequence.\nfunc map<Transformed>((Self.Element) async -> Transformed) -> AsyncMapSequence<Self, Transformed>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements.\nfunc map<Transformed>((Self.Element) async throws -> Transformed) -> AsyncThrowingMapSequence<Self, Transformed>\nCreates an asynchronous sequence that maps the given error-throwing closure over the asynchronous sequence’s elements.\nfunc max(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the maximum element in the asynchronous sequence, using the given predicate as the comparison between elements.\nfunc min(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the minimum element in the asynchronous sequence, using the given predicate as the comparison between elements.\nfunc prefix(Int) -> AsyncPrefixSequence<Self>\nReturns an asynchronous sequence, up to the specified maximum length, containing the initial elements of the base asynchronous sequence.\nfunc prefix(while: (Self.Element) async -> Bool) rethrows -> AsyncPrefixWhileSequence<Self>\nReturns an asynchronous sequence, containing the initial, consecutive elements of the base sequence that satisfy the given predicate.\nfunc reduce<Result>(Result, (Result, Self.Element) async throws -> Result) async rethrows -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure.\nfunc reduce<Result>(into: Result, (inout Result, Self.Element) async throws -> Void) async rethrows -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure, given a mutable initial value."
  },
  {
    "title": "makeAsyncIterator()",
    "url": "https://developer.apple.com/documentation/musickit/musicsubscription/updates/makeasynciterator()",
    "html": "Return Value\n\nAn instance of the AsyncIterator type used to produce elements of the asynchronous sequence."
  },
  {
    "title": "!=(_:_:)",
    "url": "https://developer.apple.com/documentation/musickit/playparameters/!=(_:_:)",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nInequality is the inverse of equality. For any values a and b, a != b implies that a == b is false.\n\nThis is the default implementation of the not-equal-to operator (!=) for any type that conforms to Equatable."
  },
  {
    "title": "encode(to:)",
    "url": "https://developer.apple.com/documentation/musickit/playparameters/encode(to:)",
    "html": "Parameters\nencoder\n\nThe encoder to write data to.\n\nDiscussion\n\nIf the value fails to encode anything, encoder will encode an empty keyed container in its place.\n\nThis function throws an error if any values are invalid for the given encoder’s format."
  },
  {
    "title": "description",
    "url": "https://developer.apple.com/documentation/musickit/musicextendedattributeproperty/description",
    "html": "Discussion\n\nCalling this property directly is discouraged. Instead, convert an instance of any type to a string by using the String(describing:) initializer. This initializer works with any type, and uses the custom description property for types that conform to CustomStringConvertible:\n\nstruct Point: CustomStringConvertible {\n    let x: Int, y: Int\n\n\n    var description: String {\n        return \"(\\(x), \\(y))\"\n    }\n}\n\n\nlet p = Point(x: 21, y: 30)\nlet s = String(describing: p)\nprint(s)\n// Prints \"(21, 30)\"\n\n\nThe conversion of p to a string in the assignment to s uses the Point type’s description property."
  },
  {
    "title": "libraryAddedDate",
    "url": "https://developer.apple.com/documentation/musickit/librarymusicvideosortproperties/libraryaddeddate",
    "html": "Required"
  },
  {
    "title": "id",
    "url": "https://developer.apple.com/documentation/musickit/libraryplaylistfilter/id",
    "html": "Required"
  },
  {
    "title": "lastPlayedDate",
    "url": "https://developer.apple.com/documentation/musickit/libraryplaylistsortproperties/lastplayeddate",
    "html": "Required"
  },
  {
    "title": "description",
    "url": "https://developer.apple.com/documentation/musickit/musicattributeproperty/description",
    "html": "Discussion\n\nCalling this property directly is discouraged. Instead, convert an instance of any type to a string by using the String(describing:) initializer. This initializer works with any type, and uses the custom description property for types that conform to CustomStringConvertible:\n\nstruct Point: CustomStringConvertible {\n    let x: Int, y: Int\n\n\n    var description: String {\n        return \"(\\(x), \\(y))\"\n    }\n}\n\n\nlet p = Point(x: 21, y: 30)\nlet s = String(describing: p)\nprint(s)\n// Prints \"(21, 30)\"\n\n\nThe conversion of p to a string in the assignment to s uses the Point type’s description property."
  },
  {
    "title": "libraryAddedDate",
    "url": "https://developer.apple.com/documentation/musickit/libraryplaylistsortproperties/libraryaddeddate",
    "html": "Required"
  },
  {
    "title": "==(_:_:)",
    "url": "https://developer.apple.com/documentation/musickit/musiclibrarysearchrequest/==(_:_:)",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nEquality is the inverse of inequality. For any values a and b, a == b implies that a != b is false."
  },
  {
    "title": "name",
    "url": "https://developer.apple.com/documentation/musickit/libraryplaylistsortproperties/name",
    "html": "Required"
  },
  {
    "title": "hash(into:)",
    "url": "https://developer.apple.com/documentation/musickit/musiclibrarysearchrequest/hash(into:)",
    "html": "Parameters\nhasher\n\nThe hasher to use when combining the components of this instance.\n\nDiscussion\n\nImplement this method to conform to the Hashable protocol. The components used for hashing must be the same as the components compared in your type’s == operator implementation. Call hasher.combine(_:) with each of these components.\n\nImportant\n\nIn your implementation of hash(into:), don’t call finalize() on the hasher instance provided, or replace it with a different instance. Doing so may become a compile-time error in the future."
  },
  {
    "title": "edit(_:name:description:authorDisplayName:items:)",
    "url": "https://developer.apple.com/documentation/musickit/musiclibrary/edit(_:name:description:authordisplayname:items:)",
    "html": "Return Value\n\nThe edited playlist.\n\nDiscussion\n\nThis function will throw an error if your app attempts to edit a playlist that another app created."
  },
  {
    "title": "Collection Implementations",
    "url": "https://developer.apple.com/documentation/musickit/musicitemcollection/collection-implementations",
    "html": "Topics\nInstance Properties\nvar count: Int\nThe number of elements in the collection.\nvar endIndex: MusicItemCollection<MusicItemType>.Index\nThe collection’s “past the end” position—that is, the position one greater than the last valid subscript argument.\nAvailable when MusicItemType conforms to MusicItem.\nvar first: Self.Element?\nThe first element of the collection.\nvar isEmpty: Bool\nA Boolean value indicating whether the collection is empty.\nvar startIndex: MusicItemCollection<MusicItemType>.Index\nThe position of the first element in a nonempty collection.\nAvailable when MusicItemType conforms to MusicItem.\nvar underestimatedCount: Int\nA value less than or equal to the number of elements in the collection.\nInstance Methods\nfunc contains<C>(C) -> Bool\nReturns a Boolean value indicating whether the collection contains the given sequence.\nAvailable when Element conforms to Equatable.\nfunc drop(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence\nReturns a subsequence by skipping elements while predicate returns true and returning the remaining elements.\nfunc dropFirst(Int) -> Self.SubSequence\nReturns a subsequence containing all but the given number of initial elements.\nfunc firstIndex(of: Self.Element) -> Self.Index?\nReturns the first index where the specified value appears in the collection.\nAvailable when Element conforms to Equatable.\nfunc firstIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?\nReturns the first index in which an element of the collection satisfies the given predicate.\nfunc firstRange<C>(of: C) -> Range<Self.Index>?\nFinds and returns the range of the first occurrence of a given collection within this collection.\nAvailable when Element conforms to Equatable.\nfunc formIndex(inout Self.Index, offsetBy: Int)\nOffsets the given index by the specified distance.\nfunc formIndex(inout Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Bool\nOffsets the given index by the specified distance, or so that it equals the given limiting index.\nfunc index(of: Self.Element) -> Self.Index?\nReturns the first index where the specified value appears in the collection.\nAvailable when Element conforms to Equatable.\nfunc makeIterator() -> IndexingIterator<Self>\nReturns an iterator over the elements of the collection.\nAvailable when Iterator is IndexingIterator<Self>.\nfunc map<T>((Self.Element) throws -> T) rethrows -> [T]\nReturns an array containing the results of mapping the given closure over the sequence’s elements.\nfunc prefix(Int) -> Self.SubSequence\nReturns a subsequence, up to the specified maximum length, containing the initial elements of the collection.\nfunc prefix(through: Self.Index) -> Self.SubSequence\nReturns a subsequence from the start of the collection through the specified position.\nfunc prefix(upTo: Self.Index) -> Self.SubSequence\nReturns a subsequence from the start of the collection up to, but not including, the specified position.\nfunc prefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence\nReturns a subsequence containing the initial elements until predicate returns false and skipping the remaining elements.\nfunc randomElement() -> Self.Element?\nReturns a random element of the collection.\nfunc randomElement<T>(using: inout T) -> Self.Element?\nReturns a random element of the collection, using the given generator as a source for randomness.\nfunc ranges<C>(of: C) -> [Range<Self.Index>]\nFinds and returns the ranges of the all occurrences of a given sequence within the collection.\nAvailable when Element conforms to Equatable.\nfunc split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [Self.SubSequence]\nReturns the longest possible subsequences of the collection, in order, that don’t contain elements satisfying the given predicate.\nfunc split<C>(separator: C, maxSplits: Int, omittingEmptySubsequences: Bool) -> [Self.SubSequence]\nReturns the longest possible subsequences of the collection, in order, around elements equal to the given separator.\nAvailable when Element conforms to Equatable.\nfunc split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [Self.SubSequence]\nReturns the longest possible subsequences of the collection, in order, around elements equal to the given element.\nAvailable when Element conforms to Equatable.\nfunc suffix(from: Self.Index) -> Self.SubSequence\nReturns a subsequence from the specified position to the end of the collection.\nfunc trimmingPrefix<Prefix>(Prefix) -> Self.SubSequence\nReturns a new collection of the same type by removing initial elements that satisfy the given predicate from the start.\nAvailable when Element conforms to Equatable.\nfunc trimmingPrefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence\nSubscripts\nsubscript((UnboundedRange_) -> ()) -> Self.SubSequence\nsubscript<R>(R) -> Self.SubSequence\nAccesses the contiguous subrange of the collection’s elements specified by a range expression.\nsubscript(MusicItemCollection<MusicItemType>.Index) -> MusicItemCollection<MusicItemType>.Element\nAccesses the element at the specified position.\nAvailable when MusicItemType conforms to MusicItem.\nType Aliases\ntypealias Index\nA type that represents a position in the collection.\nAvailable when MusicItemType conforms to MusicItem.\ntypealias Indices\nA type that represents the indices that are valid for subscripting the collection, in ascending order.\nAvailable when MusicItemType conforms to MusicItem.\ntypealias Iterator\nA type that provides the collection’s iteration interface and encapsulates its iteration state.\nAvailable when MusicItemType conforms to MusicItem.\ntypealias SubSequence\nA collection representing a contiguous subrange of this collection’s elements. The subsequence shares indices with the original collection.\nAvailable when MusicItemType conforms to MusicItem."
  },
  {
    "title": "edit(_:name:description:authorDisplayName:)",
    "url": "https://developer.apple.com/documentation/musickit/musiclibrary/edit(_:name:description:authordisplayname:)",
    "html": "Return Value\n\nThe edited playlist.\n\nDiscussion\n\nThis function will throw an error if your app attempts to edit a playlist that another app created."
  },
  {
    "title": "+=(_:_:)",
    "url": "https://developer.apple.com/documentation/musickit/musicitemcollection/+=(_:_:)",
    "html": "Discussion\n\nIn addition to appending the underlying items of the collection to the existing collection on the left hand side, this will also transfer to the collection on the left hand side any information about a next batch from the collection on the right hand side, or lack thereof.\n\nThis appending operator is particularly useful for aggregating subsequent batches from a given collection into a local variable (for example, to use a MusicItemCollection to drive a SwiftUI List or ForEach)."
  },
  {
    "title": "nextBatch(limit:)",
    "url": "https://developer.apple.com/documentation/musickit/musicitemcollection/nextbatch(limit:)-ywue",
    "html": "Discussion\n\nThis method returns the next batch of items as another collection of music items of the same type."
  },
  {
    "title": "createPlaylist(name:description:authorDisplayName:)",
    "url": "https://developer.apple.com/documentation/musickit/musiclibrary/createplaylist(name:description:authordisplayname:)",
    "html": "Parameters\nname\n\nThe name of the playlist.\n\ndescription\n\nAn optional description of the playlist.\n\nauthorDisplayName\n\nThe display name of the author for the playlist. A nil value will result in the framework using your app’s name instead.\n\nReturn Value\n\nThe newly created playlist."
  },
  {
    "title": "trackCount",
    "url": "https://developer.apple.com/documentation/musickit/libraryalbumsortproperties/trackcount",
    "html": "Required"
  },
  {
    "title": "MusicLibrary.Error",
    "url": "https://developer.apple.com/documentation/musickit/musiclibrary/error",
    "html": "Topics\nEnumeration Cases\ncase addToPlaylistFailed\nAn error that indicates a failure in the process of adding an item to a playlist.\ncase createPlaylistFailed\nAn error that indicates a failure in the process of creating a playlist.\ncase editPlaylistFailed\nAn error that indicates a failure in the process of editing a playlist.\ncase itemAlreadyAdded\nAn error indicating that the item attempting to be added to the user’s music library is already in the library.\ncase permissionDenied\nAn error that occurs when the user doesn’t consent for the current app to access their Apple Music library.\ncase playlistNotInLibrary\nAn error indicating that the playlist attempting to be added to is not in the user’s library.\ncase unableToAddItem\nAn error indicating that the item attempting to be added to the user’s music library cannot be added.\ncase unknown\nAn error indicating the ocurrence of an unknown or unexpected error.\nInitializers\ninit?(rawValue: String)\nCreates a new instance with the specified raw value.\nInstance Properties\nvar description: String\nA textual representation of this instance.\nvar errorDescription: String?\nA localized message describing what error occurred.\nvar failureReason: String?\nA localized message describing the reason for the failure.\nvar helpAnchor: String?\nA localized message providing “help” text if the user requests help.\nvar rawValue: String\nThe corresponding value of the raw type.\nvar recoverySuggestion: String?\nA localized message describing how one might recover from the failure.\nType Aliases\ntypealias RawValue\nThe raw type that can be used to represent all values of the conforming type.\nDefault Implementations\nEquatable Implementations\nError Implementations\nRawRepresentable Implementations\nRelationships\nConforms To\nCustomStringConvertible\nEquatable\nError\nHashable\nLocalizedError\nRawRepresentable\nSendable"
  },
  {
    "title": "add(_:to:)",
    "url": "https://developer.apple.com/documentation/musickit/musiclibrary/add(_:to:)",
    "html": "Return Value\n\nThe updated playlist."
  },
  {
    "title": "name",
    "url": "https://developer.apple.com/documentation/musickit/libraryplaylistfilter/name",
    "html": "Required"
  },
  {
    "title": "id",
    "url": "https://developer.apple.com/documentation/musickit/libraryalbumfilter/id",
    "html": "Required"
  },
  {
    "title": "artists",
    "url": "https://developer.apple.com/documentation/musickit/libraryalbumfilter/artists",
    "html": "Required"
  },
  {
    "title": "with(_:preferredSource:)",
    "url": "https://developer.apple.com/documentation/musickit/musicpropertycontainer/with(_:preferredsource:)-8ec7p",
    "html": "Required\n\nDiscussion\n\nThis asynchronous method fetches a more complete representation of the receiver, loading the contents for each property you request from either the Apple Music catalog or the user’s library, depending on the preferred source as well the availability of the content in those respective data sources.\n\nFor example, if you want to load the tracks relationship for an Album, as found in the user’s library, as well as other associations of content that only live in the Apple Music catalog, like the recordLabels and relatedAlbums associations, you can use this code:\n\nlet album: Album = …\nlet detailedAlbum = try await album.with(\n    [\n        .tracks,\n        .recordLabels,\n        .relatedAlbums\n    ],\n    preferredSource: .library\n)\n\n\nHere, because the tracks relationship for an Album is supported in both the library and the catalog, and because the this code specifically requests MusicPropertySource.library as the preferred source, the framework will load the tracks from the user’s library. However, because the recordLabels and relatedAlbums associations are only available in the Apple Music catalog, the framework will also issue a network request to Apple Music API to fetch those associations of content from the catalog."
  },
  {
    "title": "trackNumber",
    "url": "https://developer.apple.com/documentation/musickit/librarymusicvideosortproperties/tracknumber",
    "html": "Required"
  },
  {
    "title": "with(_:preferredSource:)",
    "url": "https://developer.apple.com/documentation/musickit/musicpropertycontainer/with(_:preferredsource:)-9wqhc",
    "html": "Required\n\nDiscussion\n\nThis asynchronous method fetches a more complete representation of the receiver, loading the contents for each property you request from either the Apple Music catalog or the user’s library, depending on the preferred source as well the availability of the content in those respective data sources.\n\nFor example, if you want to load the tracks relationship for an Album, as found in the user’s library, as well as other associations of content that only live in the Apple Music catalog, like the recordLabels and relatedAlbums associations, you can use this code:\n\nlet album: Album = …\nlet detailedAlbum = try await album.with(\n    .tracks,\n    .recordLabels,\n    .relatedAlbums, \n    preferredSource: .library\n)\n\n\nHere, because the tracks relationship for an Album is supported in both the library and the catalog, and because the this code specifically requests MusicPropertySource.library as the preferred source, the framework will load the tracks from the user’s library. However, because the recordLabels and relatedAlbums associations are only available in the Apple Music catalog, the framework will also issue a network request to Apple Music API to fetch those associations of content from the catalog."
  },
  {
    "title": "albumTitle",
    "url": "https://developer.apple.com/documentation/musickit/librarymusicvideosortproperties/albumtitle",
    "html": "Required"
  },
  {
    "title": "with(_:)",
    "url": "https://developer.apple.com/documentation/musickit/musicpropertycontainer/with(_:)-6xwf7",
    "html": "Required Default implementation provided.\n\nDiscussion\n\nThis asynchronous method fetches a more complete representation of the receiver from Apple Music API over the network.\n\nDefault Implementations\nMusicPropertyContainer Implementations\nfunc with(PartialMusicAsyncProperty<Self>...) async throws -> Self\nLoads a new instance of the music item that includes the specified properties."
  },
  {
    "title": "description",
    "url": "https://developer.apple.com/documentation/musickit/musicrelationshipproperty/description",
    "html": "Discussion\n\nCalling this property directly is discouraged. Instead, convert an instance of any type to a string by using the String(describing:) initializer. This initializer works with any type, and uses the custom description property for types that conform to CustomStringConvertible:\n\nstruct Point: CustomStringConvertible {\n    let x: Int, y: Int\n\n\n    var description: String {\n        return \"(\\(x), \\(y))\"\n    }\n}\n\n\nlet p = Point(x: 21, y: 30)\nlet s = String(describing: p)\nprint(s)\n// Prints \"(21, 30)\"\n\n\nThe conversion of p to a string in the assignment to s uses the Point type’s description property."
  },
  {
    "title": "artistName",
    "url": "https://developer.apple.com/documentation/musickit/libraryalbumsortproperties/artistname",
    "html": "Required"
  },
  {
    "title": "lastPlayedDate",
    "url": "https://developer.apple.com/documentation/musickit/libraryalbumsortproperties/lastplayeddate",
    "html": "Required"
  },
  {
    "title": "releaseDate",
    "url": "https://developer.apple.com/documentation/musickit/libraryalbumsortproperties/releasedate",
    "html": "Required"
  },
  {
    "title": "Playlist.Entry.Item",
    "url": "https://developer.apple.com/documentation/musickit/playlist/entry/item-swift.enum",
    "html": "Topics\nOperators\nstatic func == (Playlist.Entry.Item, Playlist.Entry.Item) -> Bool\nReturns a Boolean value indicating whether two values are equal.\nEnumeration Cases\ncase musicVideo(MusicVideo)\nAn item that corresponds to a music video.\ncase song(Song)\nAn item that corresponds to a song.\nInstance Properties\nvar albumTitle: String?\nThe title of the album the playlist entry’s item appears on.\nvar artistName: String\nThe artist’s name.\nvar artistURL: URL?\nThe artist’s URL.\nvar artwork: Artwork?\nThe artwork for the playlist entry’s item.\nvar contentRating: ContentRating?\nThe rating of the content.\nvar duration: TimeInterval?\nThe duration of the playlist entry’s item.\nvar editorialNotes: EditorialNotes?\nThe editorial notes for the playlist entry’s item.\nvar genreNames: [String]\nThe names of the playlist entry’s item associated genres.\nvar hashValue: Int\nThe hash value.\nvar id: MusicItemID\nThe unique identifier for the playlist entry item.\nvar isrc: String?\nThe International Standard Recording Code (ISRC) for the playlist entry’s item.\nvar lastPlayedDate: Date?\nThe date when the user last played the playlist entry’s item on this device.\nvar libraryAddedDate: Date?\nThe date when the user added the playlist entry’s item to the library.\nvar playCount: Int?\nThe number of times the user played the playlist entry’s item.\nvar playParameters: PlayParameters?\nThe parameters to use to play the playlist entry’s item.\nvar previewAssets: [PreviewAsset]?\nThe preview assets for the playlist entry’s item.\nvar releaseDate: Date?\nThe release date of the playlist entry’s item.\nvar title: String\nThe title of the playlist entry’s item.\nvar url: URL?\nThe URL for the playlist entry’s item.\nInstance Methods\nfunc hash(into: inout Hasher)\nHashes the essential components of this value by feeding them into the given hasher.\nType Aliases\ntypealias ID\nA type representing the stable identity of the entity associated with an instance.\nDefault Implementations\nCustomDebugStringConvertible Implementations\nCustomStringConvertible Implementations\nDecodable Implementations\nEncodable Implementations\nEquatable Implementations\nMusicItem Implementations\nRelationships\nConforms To\nCustomDebugStringConvertible\nCustomStringConvertible\nDecodable\nEncodable\nEquatable\nHashable\nIdentifiable\nMusicItem\nMusicPropertyContainer\nPlayableMusicItem\nSendable"
  },
  {
    "title": "MusicPlayer.ShuffleMode",
    "url": "https://developer.apple.com/documentation/musickit/musicplayer/shufflemode",
    "html": "Topics\nOperators\nstatic func == (MusicPlayer.ShuffleMode, MusicPlayer.ShuffleMode) -> Bool\nReturns a Boolean value indicating whether two values are equal.\nEnumeration Cases\ncase off\nThe shuffle mode is in a disabled state.\ncase songs\nThe music player’s shuffle songs mode.\nInstance Properties\nvar hashValue: Int\nThe hash value.\nInstance Methods\nfunc hash(into: inout Hasher)\nHashes the essential components of this value by feeding them into the given hasher.\nDefault Implementations\nEquatable Implementations\nRelationships\nConforms To\nEquatable\nHashable\nSendable"
  },
  {
    "title": "title",
    "url": "https://developer.apple.com/documentation/musickit/libraryalbumsortproperties/title",
    "html": "Required"
  },
  {
    "title": "title",
    "url": "https://developer.apple.com/documentation/musickit/musicitemcollection/title",
    "html": "Discussion\n\nCollections that represent an association from a music item often contain a title."
  },
  {
    "title": "nextBatch(limit:)",
    "url": "https://developer.apple.com/documentation/musickit/musicitemcollection/nextbatch(limit:)-432i0",
    "html": "Discussion\n\nThis method returns the next batch of items as another collection of music items of the same type."
  },
  {
    "title": "BidirectionalCollection Implementations",
    "url": "https://developer.apple.com/documentation/musickit/musicitemcollection/bidirectionalcollection-implementations",
    "html": "Topics\nInstance Properties\nvar last: Self.Element?\nThe last element of the collection.\nInstance Methods\nfunc difference<C>(from: C) -> CollectionDifference<Self.Element>\nReturns the difference needed to produce this collection’s ordered elements from the given collection.\nAvailable when Element conforms to Equatable.\nfunc difference<C>(from: C, by: (C.Element, Self.Element) -> Bool) -> CollectionDifference<Self.Element>\nReturns the difference needed to produce this collection’s ordered elements from the given collection, using the given predicate as an equivalence test.\nfunc dropLast(Int) -> Self.SubSequence\nReturns a subsequence containing all but the specified number of final elements.\nfunc firstRange<C>(of: C) -> Range<Self.Index>?\nFinds and returns the range of the first occurrence of a given collection within this collection.\nAvailable when Element conforms to Comparable.\nfunc joined(separator: String) -> String\nReturns a new string by concatenating the elements of the sequence, adding the given separator between each element.\nAvailable when Element is String.\nfunc last(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?\nReturns the last element of the sequence that satisfies the given predicate.\nfunc lastIndex(of: Self.Element) -> Self.Index?\nReturns the last index where the specified value appears in the collection.\nAvailable when Element conforms to Equatable.\nfunc lastIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?\nReturns the index of the last element in the collection that matches the given predicate.\nfunc reversed() -> ReversedCollection<Self>\nReturns a view presenting the elements of the collection in reverse order.\nfunc suffix(Int) -> Self.SubSequence\nReturns a subsequence, up to the given maximum length, containing the final elements of the collection."
  },
  {
    "title": "CustomDebugStringConvertible Implementations",
    "url": "https://developer.apple.com/documentation/musickit/musicitemcollection/customdebugstringconvertible-implementations",
    "html": "Topics\nInstance Properties\nvar debugDescription: String\nA textual representation of this instance, suitable for debugging.\nAvailable when MusicItemType conforms to MusicItem."
  },
  {
    "title": "CustomStringConvertible Implementations",
    "url": "https://developer.apple.com/documentation/musickit/musicitemcollection/customstringconvertible-implementations",
    "html": "Topics\nInstance Properties\nvar description: String\nA textual representation of this instance.\nAvailable when MusicItemType conforms to MusicItem."
  },
  {
    "title": "Decodable Implementations",
    "url": "https://developer.apple.com/documentation/musickit/musicitemcollection/decodable-implementations",
    "html": "Topics\nInitializers\ninit(from: any Decoder) throws\nCreates a new instance by decoding from the given decoder.\nAvailable when MusicItemType conforms to MusicItem and Decodable."
  },
  {
    "title": "Hashable Implementations",
    "url": "https://developer.apple.com/documentation/musickit/musicitemcollection/hashable-implementations",
    "html": "Topics\nInstance Properties\nvar hashValue: Int\nThe hash value.\nAvailable when MusicItemType conforms to MusicItem and Hashable.\nInstance Methods\nfunc hash(into: inout Hasher)\nHashes the essential components of this value by feeding them into the given hasher.\nAvailable when MusicItemType conforms to MusicItem and Hashable."
  },
  {
    "title": "Encodable Implementations",
    "url": "https://developer.apple.com/documentation/musickit/musicitemcollection/encodable-implementations",
    "html": "Topics\nInstance Methods\nfunc encode(to: any Encoder) throws\nEncodes this value into the given encoder.\nAvailable when MusicItemType conforms to MusicItem and Encodable."
  },
  {
    "title": "Equatable Implementations",
    "url": "https://developer.apple.com/documentation/musickit/musicitemcollection/equatable-implementations",
    "html": "Topics\nOperators\nstatic func != (Self, Self) -> Bool\nReturns a Boolean value indicating whether two values are not equal.\nstatic func == (MusicItemCollection<MusicItemType>, MusicItemCollection<MusicItemType>) -> Bool\nReturns a Boolean value indicating whether two values are equal.\nAvailable when MusicItemType conforms to MusicItem and Equatable."
  },
  {
    "title": "MusicTokenRequestOptions.Element",
    "url": "https://developer.apple.com/documentation/musickit/musictokenrequestoptions/element",
    "html": "Discussion\n\nTo inherit all the default implementations from the OptionSet protocol, the Element type must be Self, the default."
  },
  {
    "title": "rawValue",
    "url": "https://developer.apple.com/documentation/musickit/musictokenrequestoptions/rawvalue-swift.property",
    "html": "Discussion\n\nA new instance initialized with rawValue will be equivalent to this instance. For example:\n\nenum PaperSize: String {\n    case A4, A5, Letter, Legal\n}\n\n\nlet selectedSize = PaperSize.Letter\nprint(selectedSize.rawValue)\n// Prints \"Letter\"\n\n\nprint(selectedSize == PaperSize(rawValue: selectedSize.rawValue)!)\n// Prints \"true\"\n"
  },
  {
    "title": "MusicTokenRequestOptions.RawValue",
    "url": "https://developer.apple.com/documentation/musickit/musictokenrequestoptions/rawvalue-swift.typealias",
    "html": "Discussion\n\nEvery distinct value of the conforming type has a corresponding unique value of the RawValue type, but there may be values of the RawValue type that don’t have a corresponding value of the conforming type."
  },
  {
    "title": "ignoreCache",
    "url": "https://developer.apple.com/documentation/musickit/musictokenrequestoptions/ignorecache",
    "html": "Discussion\n\nYou can add the newly generated token to an in-memory or persistent cache for faster access upon subsequent requests for this token."
  },
  {
    "title": "Equatable Implementations",
    "url": "https://developer.apple.com/documentation/musickit/musictokenrequestoptions/equatable-implementations",
    "html": "Topics\nOperators\nstatic func != (Self, Self) -> Bool\nReturns a Boolean value indicating whether two values are not equal."
  },
  {
    "title": "OptionSet Implementations",
    "url": "https://developer.apple.com/documentation/musickit/musictokenrequestoptions/optionset-implementations",
    "html": "Topics\nInitializers\ninit()\nCreates an empty option set.\nAvailable when RawValue conforms to FixedWidthInteger.\nInstance Methods\nfunc contains(Self) -> Bool\nReturns a Boolean value that indicates whether a given element is a member of the option set.\nAvailable when Self is Self.Element.\nfunc formIntersection(Self)\nRemoves all elements of this option set that are not also present in the given set.\nAvailable when RawValue conforms to FixedWidthInteger.\nfunc formSymmetricDifference(Self)\nReplaces this set with a new set containing all elements contained in either this set or the given set, but not in both.\nAvailable when RawValue conforms to FixedWidthInteger.\nfunc formUnion(Self)\nInserts the elements of another set into this option set.\nAvailable when RawValue conforms to FixedWidthInteger.\nfunc insert(Self.Element) -> (inserted: Bool, memberAfterInsert: Self.Element)\nAdds the given element to the option set if it is not already a member.\nAvailable when Self is Self.Element.\nfunc intersection(Self) -> Self\nReturns a new option set with only the elements contained in both this set and the given set.\nfunc remove(Self.Element) -> Self.Element?\nRemoves the given element and all elements subsumed by it.\nAvailable when Self is Self.Element.\nfunc symmetricDifference(Self) -> Self\nReturns a new option set with the elements contained in this set or in the given set, but not in both.\nfunc union(Self) -> Self\nReturns a new option set of the elements contained in this set, in the given set, or in both.\nfunc update(with: Self.Element) -> Self.Element?\nInserts the given element into the set.\nAvailable when Self is Self.Element."
  },
  {
    "title": "SetAlgebra Implementations",
    "url": "https://developer.apple.com/documentation/musickit/musictokenrequestoptions/setalgebra-implementations",
    "html": "Topics\nInitializers\ninit<S>(S)\nCreates a new set from a finite sequence of items.\ninit(arrayLiteral: Self.Element...)\nCreates a set containing the elements of the given array literal.\nAvailable when ArrayLiteralElement is Self.Element.\nInstance Properties\nvar isEmpty: Bool\nA Boolean value that indicates whether the set has no elements.\nInstance Methods\nfunc isDisjoint(with: Self) -> Bool\nReturns a Boolean value that indicates whether the set has no members in common with the given set.\nfunc isStrictSubset(of: Self) -> Bool\nReturns a Boolean value that indicates whether this set is a strict subset of the given set.\nfunc isStrictSuperset(of: Self) -> Bool\nReturns a Boolean value that indicates whether this set is a strict superset of the given set.\nfunc isSubset(of: Self) -> Bool\nReturns a Boolean value that indicates whether the set is a subset of another set.\nfunc isSuperset(of: Self) -> Bool\nReturns a Boolean value that indicates whether the set is a superset of the given set.\nfunc subtract(Self)\nRemoves the elements of the given set from this set.\nfunc subtracting(Self) -> Self\nReturns a new set containing the elements of this set that do not occur in the given set."
  },
  {
    "title": "MusicPlayer.State",
    "url": "https://developer.apple.com/documentation/musickit/musicplayer/state-swift.class",
    "html": "Topics\nInstance Properties\nvar audioVariant: AudioVariant?\nThe active variant that indicates the quality of audio for the current entry.\nvar objectWillChange: AnyPublisher<Void, Never>\nA publisher that emits before the object has changed.\nvar playbackRate: Float\nThe current playback rate for the player.\nvar playbackStatus: MusicPlayer.PlaybackStatus\nThe current playback status of the music player.\nvar repeatMode: MusicPlayer.RepeatMode?\nThe current repeat mode of the music player.\nvar shuffleMode: MusicPlayer.ShuffleMode?\nThe current shuffle mode of the music player.\nType Aliases\ntypealias ObjectWillChangePublisher\nThe type of publisher that emits before the object has changed.\nRelationships\nConforms To\nObservableObject"
  },
  {
    "title": "createPlaylist(name:description:authorDisplayName:items:)",
    "url": "https://developer.apple.com/documentation/musickit/musiclibrary/createplaylist(name:description:authordisplayname:items:)",
    "html": "Parameters\nname\n\nThe name of the playlist.\n\ndescription\n\nAn optional description of the playlist.\n\nauthorDisplayName\n\nThe display name of the author for the playlist. A nil value will result in the framework using your app’s name instead.\n\nitems\n\nThe items of the playlist.\n\nReturn Value\n\nThe newly created playlist."
  },
  {
    "title": "isCompilation",
    "url": "https://developer.apple.com/documentation/musickit/libraryalbumfilter/iscompilation",
    "html": "Required"
  },
  {
    "title": "title",
    "url": "https://developer.apple.com/documentation/musickit/libraryalbumfilter/title",
    "html": "Required"
  },
  {
    "title": "title",
    "url": "https://developer.apple.com/documentation/musickit/librarymusicvideosortproperties/title",
    "html": "Required"
  },
  {
    "title": "playCount",
    "url": "https://developer.apple.com/documentation/musickit/librarymusicvideosortproperties/playcount",
    "html": "Required"
  },
  {
    "title": "artistName",
    "url": "https://developer.apple.com/documentation/musickit/libraryalbumfilter/artistname",
    "html": "Required"
  },
  {
    "title": "lastPlayedDate",
    "url": "https://developer.apple.com/documentation/musickit/librarymusicvideosortproperties/lastplayeddate",
    "html": "Required"
  },
  {
    "title": "duration",
    "url": "https://developer.apple.com/documentation/musickit/librarymusicvideosortproperties/duration",
    "html": "Required"
  },
  {
    "title": "artistName",
    "url": "https://developer.apple.com/documentation/musickit/librarymusicvideosortproperties/artistname",
    "html": "Required"
  },
  {
    "title": "MusicCatalogSearchResponse.TopResult",
    "url": "https://developer.apple.com/documentation/musickit/musiccatalogsearchresponse/topresult",
    "html": "Topics\nOperators\nstatic func == (MusicCatalogSearchResponse.TopResult, MusicCatalogSearchResponse.TopResult) -> Bool\nReturns a Boolean value indicating whether two values are equal.\nEnumeration Cases\ncase album(Album)\nAn item that corresponds to an album.\ncase artist(Artist)\nAn item that corresponds to an artist.\ncase curator(Curator)\nAn item that corresponds to a curator.\ncase musicVideo(MusicVideo)\nAn item that corresponds to a music video.\ncase playlist(Playlist)\nAn item that corresponds to a playlist.\ncase radioShow(RadioShow)\nAn item that corresponds to a radio show.\ncase recordLabel(RecordLabel)\nAn item that corresponds to a record label.\ncase song(Song)\nAn item that corresponds to a song.\ncase station(Station)\nAn item that corresponds to a station.\nInstance Properties\nvar artwork: Artwork?\nThe artwork of this top result for catalog search.\nvar hashValue: Int\nThe hash value.\nvar id: MusicItemID\nThe unique identifier of this top result for catalog search.\nvar title: String\nThe title of this top result for catalog search.\nInstance Methods\nfunc hash(into: inout Hasher)\nHashes the essential components of this value by feeding them into the given hasher.\nType Aliases\ntypealias ID\nA type representing the stable identity of the entity associated with an instance.\nDefault Implementations\nCustomDebugStringConvertible Implementations\nCustomStringConvertible Implementations\nDecodable Implementations\nEncodable Implementations\nEquatable Implementations\nRelationships\nConforms To\nCustomDebugStringConvertible\nCustomStringConvertible\nDecodable\nEncodable\nEquatable\nHashable\nIdentifiable\nMusicItem\nSendable"
  },
  {
    "title": "CustomDebugStringConvertible Implementations",
    "url": "https://developer.apple.com/documentation/musickit/musiccatalogsearchresponse/customdebugstringconvertible-implementations",
    "html": "Topics\nInstance Properties\nvar debugDescription: String\nA textual representation of this instance, suitable for debugging."
  },
  {
    "title": "FilterType",
    "url": "https://developer.apple.com/documentation/musickit/filterablemusicitem/filtertype",
    "html": "Required"
  },
  {
    "title": "MusicPlayer.PlaybackStatus",
    "url": "https://developer.apple.com/documentation/musickit/musicplayer/playbackstatus",
    "html": "Overview\n\nYou determine a music player’s state by checking the playbackStatus property. Depending on the property’s value, you can update your app’s user interface or take other appropriate action.\n\nTopics\nOperators\nstatic func == (MusicPlayer.PlaybackStatus, MusicPlayer.PlaybackStatus) -> Bool\nReturns a Boolean value indicating whether two values are equal.\nEnumeration Cases\ncase interrupted\nThe music player is in an interrupted state, such as from an incoming phone call.\ncase paused\nThe music player is in a paused state.\ncase playing\nThe music player is playing.\ncase seekingBackward\nThe music player is seeking backward.\ncase seekingForward\nThe music player is seeking forward.\ncase stopped\nThe music player is in a stopped state.\nInstance Properties\nvar hashValue: Int\nThe hash value.\nInstance Methods\nfunc hash(into: inout Hasher)\nHashes the essential components of this value by feeding them into the given hasher.\nDefault Implementations\nEquatable Implementations\nRelationships\nConforms To\nEquatable\nHashable\nSendable"
  },
  {
    "title": "MusicPlayer.Queue.Entry.Item",
    "url": "https://developer.apple.com/documentation/musickit/musicplayer/queue/entry/item-swift.enum",
    "html": "Topics\nOperators\nstatic func == (MusicPlayer.Queue.Entry.Item, MusicPlayer.Queue.Entry.Item) -> Bool\nReturns a Boolean value indicating whether two values are equal.\nEnumeration Cases\ncase musicVideo(MusicVideo)\nAn item that corresponds to a music video.\ncase song(Song)\nAn item that corresponds to a song.\nInstance Properties\nvar hashValue: Int\nThe hash value.\nvar id: MusicItemID\nThe unique identifier for the music player item.\nvar playParameters: PlayParameters?\nThe parameters to use to play the item.\nInstance Methods\nfunc hash(into: inout Hasher)\nHashes the essential components of this value by feeding them into the given hasher.\nType Aliases\ntypealias ID\nA type representing the stable identity of the entity associated with an instance.\nDefault Implementations\nCustomDebugStringConvertible Implementations\nCustomStringConvertible Implementations\nDecodable Implementations\nEncodable Implementations\nEquatable Implementations\nMusicItem Implementations\nRelationships\nConforms To\nCustomDebugStringConvertible\nCustomStringConvertible\nDecodable\nEncodable\nEquatable\nHashable\nIdentifiable\nMusicItem\nMusicPropertyContainer\nPlayableMusicItem\nSendable"
  },
  {
    "title": "MusicPlayer.RepeatMode",
    "url": "https://developer.apple.com/documentation/musickit/musicplayer/repeatmode",
    "html": "Topics\nOperators\nstatic func == (MusicPlayer.RepeatMode, MusicPlayer.RepeatMode) -> Bool\nReturns a Boolean value indicating whether two values are equal.\nEnumeration Cases\ncase all\nThe music player is repeating the currently playing collection, such as an album or a playlist.\ncase none\nThe repeat mode is in a disabled state.\ncase one\nThe music player is repeating the currently playing entry.\nInstance Properties\nvar hashValue: Int\nThe hash value.\nInstance Methods\nfunc hash(into: inout Hasher)\nHashes the essential components of this value by feeding them into the given hasher.\nDefault Implementations\nEquatable Implementations\nRelationships\nConforms To\nEquatable\nHashable\nSendable"
  },
  {
    "title": "playParameters",
    "url": "https://developer.apple.com/documentation/musickit/playablemusicitem/playparameters",
    "html": "Required"
  },
  {
    "title": "libraryAddedDate",
    "url": "https://developer.apple.com/documentation/musickit/libraryalbumsortproperties/libraryaddeddate",
    "html": "Required"
  },
  {
    "title": "id",
    "url": "https://developer.apple.com/documentation/musickit/recordlabelfilter/id",
    "html": "Required"
  },
  {
    "title": "id",
    "url": "https://developer.apple.com/documentation/musickit/songfilter/id",
    "html": "Required"
  },
  {
    "title": "id",
    "url": "https://developer.apple.com/documentation/musickit/stationfilter/id",
    "html": "Required"
  },
  {
    "title": "isrc",
    "url": "https://developer.apple.com/documentation/musickit/songfilter/isrc",
    "html": "Required"
  },
  {
    "title": "Sequence Implementations",
    "url": "https://developer.apple.com/documentation/musickit/musicitemcollection/sequence-implementations",
    "html": "Topics\nInstance Properties\nvar lazy: LazySequence<Self>\nA sequence containing the same elements as this sequence, but on which some operations, such as map and filter, are implemented lazily.\nvar publisher: Publishers.Sequence<Self, Never>\nInstance Methods\nfunc allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether every element of a sequence satisfies a given predicate.\nfunc compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]\nReturns an array containing the non-nil results of calling the given transformation with each element of this sequence.\nfunc compare<Comparator>(Comparator.Compared, Comparator.Compared) -> ComparisonResult\nIf lhs is ordered before rhs in the ordering described by the given sequence of SortComparators\nfunc contains(Self.Element) -> Bool\nReturns a Boolean value indicating whether the sequence contains the given element.\nAvailable when Element conforms to Equatable.\nfunc contains(where: (Self.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether the sequence contains an element that satisfies the given predicate.\nfunc elementsEqual<OtherSequence>(OtherSequence) -> Bool\nReturns a Boolean value indicating whether this sequence and another sequence contain the same elements in the same order.\nAvailable when Element conforms to Equatable.\nfunc elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether this sequence and another sequence contain equivalent elements in the same order, using the given predicate as the equivalence test.\nfunc enumerated() -> EnumeratedSequence<Self>\nReturns a sequence of pairs (n, x), where n represents a consecutive integer starting at zero and x represents an element of the sequence.\nfunc filter(Predicate<Self.Element>) throws -> [Self.Element]\nfunc filter((Self.Element) throws -> Bool) rethrows -> [Self.Element]\nReturns an array containing, in order, the elements of the sequence that satisfy the given predicate.\nfunc first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?\nReturns the first element of the sequence that satisfies the given predicate.\nfunc flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]\nReturns an array containing the concatenated results of calling the given transformation with each element of this sequence.\nfunc flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]\nfunc forEach((Self.Element) throws -> Void) rethrows\nCalls the given closure on each element in the sequence in the same order as a for-in loop.\nfunc formatted() -> String\nAvailable when Element is String.\nfunc formatted<S>(S) -> S.FormatOutput\nfunc joined() -> FlattenSequence<Self>\nReturns the elements of this sequence of sequences, concatenated.\nfunc joined(separator: String) -> String\nReturns a new string by concatenating the elements of the sequence, adding the given separator between each element.\nAvailable when Element conforms to StringProtocol.\nfunc joined<Separator>(separator: Separator) -> JoinedSequence<Self>\nReturns the concatenated elements of this sequence of sequences, inserting the given separator between each element.\nfunc lexicographicallyPrecedes<OtherSequence>(OtherSequence) -> Bool\nReturns a Boolean value indicating whether the sequence precedes another sequence in a lexicographical (dictionary) ordering, using the less-than operator (<) to compare elements.\nAvailable when Element conforms to Comparable.\nfunc lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether the sequence precedes another sequence in a lexicographical (dictionary) ordering, using the given predicate to compare elements.\nfunc map<T>((Self.Element) throws -> T) rethrows -> [T]\nReturns an array containing the results of mapping the given closure over the sequence’s elements.\nfunc max() -> Self.Element?\nReturns the maximum element in the sequence.\nAvailable when Element conforms to Comparable.\nfunc max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?\nReturns the maximum element in the sequence, using the given predicate as the comparison between elements.\nfunc min() -> Self.Element?\nReturns the minimum element in the sequence.\nAvailable when Element conforms to Comparable.\nfunc min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?\nReturns the minimum element in the sequence, using the given predicate as the comparison between elements.\nfunc reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result\nReturns the result of combining the elements of the sequence using the given closure.\nfunc reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result\nReturns the result of combining the elements of the sequence using the given closure.\nfunc shuffled() -> [Self.Element]\nReturns the elements of the sequence, shuffled.\nfunc shuffled<T>(using: inout T) -> [Self.Element]\nReturns the elements of the sequence, shuffled using the given generator as a source for randomness.\nfunc sorted() -> [Self.Element]\nReturns the elements of the sequence, sorted.\nAvailable when Element conforms to Comparable.\nfunc sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]\nReturns the elements of the sequence, sorted using the given predicate as the comparison between elements.\nfunc sorted<Comparator>(using: Comparator) -> [Self.Element]\nReturns the elements of the sequence, sorted using the given comparator to compare elements.\nfunc sorted<S, Comparator>(using: S) -> [Self.Element]\nReturns the elements of the sequence, sorted using the given array of SortComparators to compare elements.\nfunc split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [ArraySlice<Self.Element>]\nReturns the longest possible subsequences of the sequence, in order, around elements equal to the given element.\nAvailable when Element conforms to Equatable.\nfunc starts<PossiblePrefix>(with: PossiblePrefix) -> Bool\nReturns a Boolean value indicating whether the initial elements of the sequence are the same as the elements in another sequence.\nAvailable when Element conforms to Equatable.\nfunc starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether the initial elements of the sequence are equivalent to the elements in another sequence, using the given predicate as the equivalence test.\nfunc withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?\nExecutes a closure on the sequence’s contiguous storage.\nType Aliases\ntypealias Element\nA type representing the sequence’s elements.\nAvailable when MusicItemType conforms to MusicItem."
  },
  {
    "title": "RandomAccessCollection Implementations",
    "url": "https://developer.apple.com/documentation/musickit/musicitemcollection/randomaccesscollection-implementations",
    "html": "Topics\nInstance Properties\nvar indices: MusicItemCollection<MusicItemType>.Indices\nThe indices that are valid for subscripting the collection, in ascending order.\nAvailable when MusicItemType conforms to MusicItem.\nInstance Methods\nfunc distance(from: MusicItemCollection<MusicItemType>.Index, to: MusicItemCollection<MusicItemType>.Index) -> Int\nReturns the distance between two indices.\nAvailable when MusicItemType conforms to MusicItem.\nfunc formIndex(after: inout MusicItemCollection<MusicItemType>.Index)\nReplaces the given index with its successor.\nAvailable when MusicItemType conforms to MusicItem.\nfunc formIndex(before: inout MusicItemCollection<MusicItemType>.Index)\nReplaces the given index with its predecessor.\nAvailable when MusicItemType conforms to MusicItem.\nfunc index(MusicItemCollection<MusicItemType>.Index, offsetBy: Int) -> MusicItemCollection<MusicItemType>.Index\nReturns an index that is the specified distance from the given index.\nAvailable when MusicItemType conforms to MusicItem.\nfunc index(MusicItemCollection<MusicItemType>.Index, offsetBy: Int, limitedBy: MusicItemCollection<MusicItemType>.Index) -> MusicItemCollection<MusicItemType>.Index?\nReturns an index that is the specified distance from the given index, unless that distance is beyond a given limiting index.\nAvailable when MusicItemType conforms to MusicItem.\nfunc index(after: MusicItemCollection<MusicItemType>.Index) -> MusicItemCollection<MusicItemType>.Index\nReturns the position immediately after the given index.\nAvailable when MusicItemType conforms to MusicItem.\nfunc index(before: MusicItemCollection<MusicItemType>.Index) -> MusicItemCollection<MusicItemType>.Index\nReturns the position immediately before the given index.\nAvailable when MusicItemType conforms to MusicItem.\nSubscripts\nsubscript(Range<MusicItemCollection<MusicItemType>.Index>) -> MusicItemCollection<MusicItemType>.SubSequence\nAccesses a contiguous subrange of the collection’s elements.\nAvailable when MusicItemType conforms to MusicItem."
  },
  {
    "title": "ExpressibleByArrayLiteral Implementations",
    "url": "https://developer.apple.com/documentation/musickit/musicitemcollection/expressiblebyarrayliteral-implementations",
    "html": "Topics\nInitializers\ninit(arrayLiteral: MusicItemType...)\nCreates an instance initialized with the given elements.\nAvailable when MusicItemType conforms to MusicItem.\nType Aliases\ntypealias ArrayLiteralElement\nThe type of the elements of an array literal.\nAvailable when MusicItemType conforms to MusicItem."
  },
  {
    "title": "init(rawValue:)",
    "url": "https://developer.apple.com/documentation/musickit/musictokenrequestoptions/init(rawvalue:)",
    "html": "Parameters\nrawValue\n\nThe raw value of the option set to create. Each bit of rawValue potentially represents an element of the option set, though raw values may include bits that are not defined as distinct values of the OptionSet type.\n\nDiscussion\n\nThis initializer always succeeds, even if the value passed as rawValue exceeds the static properties declared as part of the option set. This example creates an instance of ShippingOptions with a raw value beyond the highest element, with a bit mask that effectively contains all the declared static members.\n\nlet extraOptions = ShippingOptions(rawValue: 255)\nprint(extraOptions.isStrictSuperset(of: .all))\n// Prints \"true\"\n"
  },
  {
    "title": "CustomDebugStringConvertible Implementations",
    "url": "https://developer.apple.com/documentation/musickit/musicdataresponse/customdebugstringconvertible-implementations",
    "html": "Topics\nInstance Properties\nvar debugDescription: String\nA textual representation of this instance, suitable for debugging."
  },
  {
    "title": "Equatable Implementations",
    "url": "https://developer.apple.com/documentation/musickit/musicdataresponse/equatable-implementations",
    "html": "Topics\nOperators\nstatic func != (Self, Self) -> Bool\nReturns a Boolean value indicating whether two values are not equal."
  },
  {
    "title": "CustomStringConvertible Implementations",
    "url": "https://developer.apple.com/documentation/musickit/musicdataresponse/customstringconvertible-implementations",
    "html": "Topics\nInstance Properties\nvar description: String\nA textual representation of this instance."
  },
  {
    "title": "hash(into:)",
    "url": "https://developer.apple.com/documentation/musickit/musicdataresponse/hash(into:)",
    "html": "Parameters\nhasher\n\nThe hasher to use when combining the components of this instance.\n\nDiscussion\n\nImplement this method to conform to the Hashable protocol. The components used for hashing must be the same as the components compared in your type’s == operator implementation. Call hasher.combine(_:) with each of these components.\n\nImportant\n\nIn your implementation of hash(into:), don’t call finalize() on the hasher instance provided, or replace it with a different instance. Doing so may become a compile-time error in the future."
  },
  {
    "title": "ApplicationMusicPlayer.Queue",
    "url": "https://developer.apple.com/documentation/musickit/applicationmusicplayer/queue-swift.class",
    "html": "Topics\nStructures\nstruct Entries\nInitializers\ninit<S>(S, startingAt: S.Element?)\nCreates a playback queue with playback queue entries.\ninit(album: Album, startingAt: Track)\nCreates a playback queue with an album and a specific track for the player to start playback.\ninit(arrayLiteral: any PlayableMusicItem...)\ninit<S, PlayableMusicItemType>(for: S, startingAt: S.Element?)\nCreates a playback queue with playable music items.\ninit(playlist: Playlist, startingAt: Playlist.Entry)\nCreates a playback queue with a playlist and a specific playlist entry for the player to start playback.\nInstance Properties\nvar entries: ApplicationMusicPlayer.Queue.Entries\nRelationships\nInherits From\nMusicPlayer.Queue\nConforms To\nEquatable\nExpressibleByArrayLiteral\nHashable\nObservableObject"
  },
  {
    "title": "==(_:_:)",
    "url": "https://developer.apple.com/documentation/musickit/musicdataresponse/==(_:_:)",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nEquality is the inverse of inequality. For any values a and b, a == b implies that a != b is false."
  },
  {
    "title": "hashValue",
    "url": "https://developer.apple.com/documentation/musickit/musicdataresponse/hashvalue",
    "html": "Discussion\n\nHash values are not guaranteed to be equal across different executions of your program. Do not save hash values to use during a future execution.\n\nImportant\n\nhashValue is deprecated as a Hashable requirement. To conform to Hashable, implement the hash(into:) requirement instead. The compiler provides an implementation for hashValue for you."
  },
  {
    "title": "hash(into:)",
    "url": "https://developer.apple.com/documentation/musickit/musiccatalogsearchresponse/hash(into:)",
    "html": "Parameters\nhasher\n\nThe hasher to use when combining the components of this instance.\n\nDiscussion\n\nImplement this method to conform to the Hashable protocol. The components used for hashing must be the same as the components compared in your type’s == operator implementation. Call hasher.combine(_:) with each of these components.\n\nImportant\n\nIn your implementation of hash(into:), don’t call finalize() on the hasher instance provided, or replace it with a different instance. Doing so may become a compile-time error in the future."
  },
  {
    "title": "hashValue",
    "url": "https://developer.apple.com/documentation/musickit/musiccatalogsearchresponse/hashvalue",
    "html": "Discussion\n\nHash values are not guaranteed to be equal across different executions of your program. Do not save hash values to use during a future execution.\n\nImportant\n\nhashValue is deprecated as a Hashable requirement. To conform to Hashable, implement the hash(into:) requirement instead. The compiler provides an implementation for hashValue for you."
  },
  {
    "title": "==(_:_:)",
    "url": "https://developer.apple.com/documentation/musickit/musiccatalogsearchresponse/==(_:_:)",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nEquality is the inverse of inequality. For any values a and b, a == b implies that a != b is false."
  },
  {
    "title": "Hashable Implementations",
    "url": "https://developer.apple.com/documentation/musickit/musiccatalogresourceresponse/hashable-implementations",
    "html": "Topics\nInstance Properties\nvar hashValue: Int\nThe hash value.\nAvailable when MusicItemType conforms to MusicItem and Hashable.\nInstance Methods\nfunc hash(into: inout Hasher)\nHashes the essential components of this value by feeding them into the given hasher.\nAvailable when MusicItemType conforms to MusicItem and Hashable."
  },
  {
    "title": "Equatable Implementations",
    "url": "https://developer.apple.com/documentation/musickit/musiccatalogresourceresponse/equatable-implementations",
    "html": "Topics\nOperators\nstatic func != (Self, Self) -> Bool\nReturns a Boolean value indicating whether two values are not equal.\nstatic func == (MusicCatalogResourceResponse<MusicItemType>, MusicCatalogResourceResponse<MusicItemType>) -> Bool\nReturns a Boolean value indicating whether two values are equal.\nAvailable when MusicItemType conforms to MusicItem and Equatable."
  },
  {
    "title": "Decodable Implementations",
    "url": "https://developer.apple.com/documentation/musickit/musiccatalogresourceresponse/decodable-implementations",
    "html": "Topics\nInitializers\ninit(from: any Decoder) throws\nCreates a new instance by decoding from the given decoder.\nAvailable when MusicItemType conforms to MusicItem and Decodable."
  },
  {
    "title": "CustomStringConvertible Implementations",
    "url": "https://developer.apple.com/documentation/musickit/musiccatalogresourceresponse/customstringconvertible-implementations",
    "html": "Topics\nInstance Properties\nvar description: String\nA textual representation of this instance.\nAvailable when MusicItemType conforms to MusicItem."
  },
  {
    "title": "CustomDebugStringConvertible Implementations",
    "url": "https://developer.apple.com/documentation/musickit/musiccatalogresourceresponse/customdebugstringconvertible-implementations",
    "html": "Topics\nInstance Properties\nvar debugDescription: String\nA textual representation of this instance, suitable for debugging.\nAvailable when MusicItemType conforms to MusicItem."
  },
  {
    "title": "prepareToPlay()",
    "url": "https://developer.apple.com/documentation/musickit/musicplayer/preparetoplay()",
    "html": "Discussion\n\nCall this function to ensure that the player buffers the starting entry in the queue and that the entry is ready to play."
  },
  {
    "title": "beginSeekingForward()",
    "url": "https://developer.apple.com/documentation/musickit/musicplayer/beginseekingforward()",
    "html": "Discussion\n\nUse this method to move the current playback position forward in time at an accelerated rate. Seeking begins when you call this method, and continues until you call the endSeeking() method.\n\nIf the player is streaming the underlying content, this method has no effect."
  },
  {
    "title": "beginSeekingBackward()",
    "url": "https://developer.apple.com/documentation/musickit/musicplayer/beginseekingbackward()",
    "html": "Discussion\n\nUse this method to move the current playback position backward in time at an accelerated rate. Seeking begins when you call this method, and continues until you call the endSeeking() method.\n\nIf the player is streaming the underlying content, this method has no effect."
  },
  {
    "title": "play()",
    "url": "https://developer.apple.com/documentation/musickit/musicplayer/play()",
    "html": "Discussion\n\nIf playback isn’t underway, this method resumes playback from its paused location; otherwise, this method plays the first available entry from the beginning.\n\nIf a music player isn’t ready for playback when you call this method, this method prepares the music player and then starts playback."
  },
  {
    "title": "playbackTime",
    "url": "https://developer.apple.com/documentation/musickit/musicplayer/playbacktime",
    "html": "Discussion\n\nChanging the value of this property moves the playhead to the new location. For content streaming live from a server, this value represents the time from the beginning of the playlist when it first loads. This property returns NaN if the CMTime is invalid or indefinite."
  },
  {
    "title": "skipToNextEntry()",
    "url": "https://developer.apple.com/documentation/musickit/musicplayer/skiptonextentry()",
    "html": "Discussion\n\nIf the music player isn’t playing, this method designates the next entry as the next to play.\n\nWhen you call this method, playback ends if the music player is already at the last entry in the playback queue."
  },
  {
    "title": "endSeeking()",
    "url": "https://developer.apple.com/documentation/musickit/musicplayer/endseeking()",
    "html": "Discussion\n\nCall this method to end a seek operation that begins when you call either the beginSeekingBackward() or beginSeekingForward() method. After calling this method, the player returns to its previous state. For example, if the entry is playing before seeking begins, it continues playing from the new playhead position after calling this method."
  },
  {
    "title": "pause()",
    "url": "https://developer.apple.com/documentation/musickit/musicplayer/pause()",
    "html": "Discussion\n\nIf playback isn’t currently underway, this method has no effect. To resume playback of the current entry from the pause point, call the play() method."
  },
  {
    "title": "skipToPreviousEntry()",
    "url": "https://developer.apple.com/documentation/musickit/musicplayer/skiptopreviousentry()",
    "html": "Discussion\n\nIf the music player isn’t playing, this method designates the previous entry as the next to play.\n\nWhen you call this method, playback ends if the music player is already at the first entry in the playback queue."
  },
  {
    "title": "hashValue",
    "url": "https://developer.apple.com/documentation/musickit/previewasset/hashvalue",
    "html": "Discussion\n\nHash values are not guaranteed to be equal across different executions of your program. Do not save hash values to use during a future execution.\n\nImportant\n\nhashValue is deprecated as a Hashable requirement. To conform to Hashable, implement the hash(into:) requirement instead. The compiler provides an implementation for hashValue for you."
  },
  {
    "title": "upc",
    "url": "https://developer.apple.com/documentation/musickit/albumfilter/upc",
    "html": "Required"
  },
  {
    "title": "MusicItem Implementations",
    "url": "https://developer.apple.com/documentation/musickit/track/musicitem-implementations",
    "html": "Topics\nInstance Methods\nfunc with([PartialMusicAsyncProperty<Self>]) async throws -> Self\nLoads a new instance of the music item that includes the specified properties.\nAvailable when Self conforms to MusicPropertyContainer and Decodable.\nfunc with([PartialMusicAsyncProperty<Self>], preferredSource: MusicPropertySource) async throws -> Self\nLoads a new instance of the music item that includes the specified properties.\nAvailable when Self conforms to MusicPropertyContainer and Decodable."
  },
  {
    "title": "hash(into:)",
    "url": "https://developer.apple.com/documentation/musickit/track/hash(into:)",
    "html": "Parameters\nhasher\n\nThe hasher to use when combining the components of this instance.\n\nDiscussion\n\nImplement this method to conform to the Hashable protocol. The components used for hashing must be the same as the components compared in your type’s == operator implementation. Call hasher.combine(_:) with each of these components.\n\nImportant\n\nIn your implementation of hash(into:), don’t call finalize() on the hasher instance provided, or replace it with a different instance. Doing so may become a compile-time error in the future."
  },
  {
    "title": "Equatable Implementations",
    "url": "https://developer.apple.com/documentation/musickit/track/equatable-implementations",
    "html": "Topics\nOperators\nstatic func != (Self, Self) -> Bool\nReturns a Boolean value indicating whether two values are not equal."
  },
  {
    "title": "id",
    "url": "https://developer.apple.com/documentation/musickit/albumfilter/id",
    "html": "Required"
  },
  {
    "title": "hashValue",
    "url": "https://developer.apple.com/documentation/musickit/track/hashvalue",
    "html": "Discussion\n\nHash values are not guaranteed to be equal across different executions of your program. Do not save hash values to use during a future execution.\n\nImportant\n\nhashValue is deprecated as a Hashable requirement. To conform to Hashable, implement the hash(into:) requirement instead. The compiler provides an implementation for hashValue for you."
  },
  {
    "title": "Equatable Implementations",
    "url": "https://developer.apple.com/documentation/musickit/musiccatalogsearchresponse/equatable-implementations",
    "html": "Topics\nOperators\nstatic func != (Self, Self) -> Bool\nReturns a Boolean value indicating whether two values are not equal."
  },
  {
    "title": "Decodable Implementations",
    "url": "https://developer.apple.com/documentation/musickit/musiccatalogsearchresponse/decodable-implementations",
    "html": "Topics\nInitializers\ninit(from: any Decoder) throws\nCreates a new instance by decoding from the given decoder."
  },
  {
    "title": "Encodable Implementations",
    "url": "https://developer.apple.com/documentation/musickit/musiccatalogsearchresponse/encodable-implementations",
    "html": "Topics\nInstance Methods\nfunc encode(to: any Encoder) throws\nEncodes this value into the given encoder."
  },
  {
    "title": "CustomStringConvertible Implementations",
    "url": "https://developer.apple.com/documentation/musickit/musiccatalogsearchresponse/customstringconvertible-implementations",
    "html": "Topics\nInstance Properties\nvar description: String\nA textual representation of this instance."
  },
  {
    "title": "id",
    "url": "https://developer.apple.com/documentation/musickit/radioshowfilter/id",
    "html": "Required"
  },
  {
    "title": "id",
    "url": "https://developer.apple.com/documentation/musickit/playlistfilter/id",
    "html": "Required"
  },
  {
    "title": "CustomStringConvertible Implementations",
    "url": "https://developer.apple.com/documentation/musickit/previewasset/customstringconvertible-implementations",
    "html": "Topics\nInstance Properties\nvar description: String\nA textual representation of this instance."
  },
  {
    "title": "MusicLibraryRequestable Implementations",
    "url": "https://developer.apple.com/documentation/musickit/album/musiclibraryrequestable-implementations",
    "html": "Topics\nType Aliases\ntypealias LibraryFilter\nThe associated type that contains the album properties your app uses for a library request.\ntypealias LibrarySortProperties\nThe associated type that contains the set of album properties your app uses to sort results for a library request."
  },
  {
    "title": "==(_:_:)",
    "url": "https://developer.apple.com/documentation/musickit/previewasset/==(_:_:)",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nEquality is the inverse of inequality. For any values a and b, a == b implies that a != b is false."
  },
  {
    "title": "==(_:_:)",
    "url": "https://developer.apple.com/documentation/musickit/track/==(_:_:)",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nEquality is the inverse of inequality. For any values a and b, a == b implies that a != b is false."
  },
  {
    "title": "id",
    "url": "https://developer.apple.com/documentation/musickit/curatorfilter/id",
    "html": "Required"
  },
  {
    "title": "Encodable Implementations",
    "url": "https://developer.apple.com/documentation/musickit/track/encodable-implementations",
    "html": "Topics\nInstance Methods\nfunc encode(to: any Encoder) throws\nEncodes this value into the given encoder."
  },
  {
    "title": "MusicLibraryRequestable Implementations",
    "url": "https://developer.apple.com/documentation/musickit/track/musiclibraryrequestable-implementations",
    "html": "Topics\nType Aliases\ntypealias LibraryFilter\nThe associated type that contains the track properties your app uses for a library request.\ntypealias LibrarySortProperties\nThe associated type that contains the set of track properties your app uses to sort results for a library request."
  },
  {
    "title": "Decodable Implementations",
    "url": "https://developer.apple.com/documentation/musickit/track/decodable-implementations",
    "html": "Topics\nInitializers\ninit(from: any Decoder) throws\nCreates a new instance by decoding from the given decoder."
  },
  {
    "title": "CustomStringConvertible Implementations",
    "url": "https://developer.apple.com/documentation/musickit/track/customstringconvertible-implementations",
    "html": "Topics\nInstance Properties\nvar description: String\nA textual representation of this instance."
  },
  {
    "title": "CustomDebugStringConvertible Implementations",
    "url": "https://developer.apple.com/documentation/musickit/track/customdebugstringconvertible-implementations",
    "html": "Topics\nInstance Properties\nvar debugDescription: String\nA textual representation of this instance, suitable for debugging."
  },
  {
    "title": "isAppleDigitalMaster",
    "url": "https://developer.apple.com/documentation/musickit/album/isappledigitalmaster",
    "html": "Discussion\n\nApple Digital Masters start from 24-bit files and are optimized to bring the best-sounding audio to Apple products."
  },
  {
    "title": "Equatable Implementations",
    "url": "https://developer.apple.com/documentation/musickit/previewasset/equatable-implementations",
    "html": "Topics\nOperators\nstatic func != (Self, Self) -> Bool\nReturns a Boolean value indicating whether two values are not equal."
  },
  {
    "title": "Encodable Implementations",
    "url": "https://developer.apple.com/documentation/musickit/previewasset/encodable-implementations",
    "html": "Topics\nInstance Methods\nfunc encode(to: any Encoder) throws\nEncodes this value into the given encoder."
  },
  {
    "title": "Decodable Implementations",
    "url": "https://developer.apple.com/documentation/musickit/previewasset/decodable-implementations",
    "html": "Topics\nInitializers\ninit(from: any Decoder) throws\nCreates a new instance by decoding from the given decoder."
  },
  {
    "title": "CustomDebugStringConvertible Implementations",
    "url": "https://developer.apple.com/documentation/musickit/previewasset/customdebugstringconvertible-implementations",
    "html": "Topics\nInstance Properties\nvar debugDescription: String\nA textual representation of this instance, suitable for debugging."
  },
  {
    "title": "hash(into:)",
    "url": "https://developer.apple.com/documentation/musickit/previewasset/hash(into:)",
    "html": "Parameters\nhasher\n\nThe hasher to use when combining the components of this instance.\n\nDiscussion\n\nImplement this method to conform to the Hashable protocol. The components used for hashing must be the same as the components compared in your type’s == operator implementation. Call hasher.combine(_:) with each of these components.\n\nImportant\n\nIn your implementation of hash(into:), don’t call finalize() on the hasher instance provided, or replace it with a different instance. Doing so may become a compile-time error in the future."
  },
  {
    "title": "MusicItem Implementations",
    "url": "https://developer.apple.com/documentation/musickit/album/musicitem-implementations",
    "html": "Topics\nInstance Methods\nfunc with([PartialMusicAsyncProperty<Self>]) async throws -> Self\nLoads a new instance of the music item that includes the specified properties.\nAvailable when Self conforms to MusicPropertyContainer and Decodable.\nfunc with([PartialMusicAsyncProperty<Self>], preferredSource: MusicPropertySource) async throws -> Self\nLoads a new instance of the music item that includes the specified properties.\nAvailable when Self conforms to MusicPropertyContainer and Decodable."
  },
  {
    "title": "FilterableMusicItem Implementations",
    "url": "https://developer.apple.com/documentation/musickit/album/filterablemusicitem-implementations",
    "html": "Topics\nType Aliases\ntypealias FilterType\nThe associated type that contains the album properties your app uses as a filter for a catalog resource request."
  },
  {
    "title": "contentRating",
    "url": "https://developer.apple.com/documentation/musickit/track/contentrating",
    "html": "Discussion\n\nA nil value means no rating is available for this track."
  },
  {
    "title": "Hashable Implementations",
    "url": "https://developer.apple.com/documentation/musickit/musicrecentlyplayedresponse/hashable-implementations",
    "html": "Topics\nInstance Properties\nvar hashValue: Int\nThe hash value.\nAvailable when MusicItemType conforms to MusicRecentlyPlayedRequestable and Hashable.\nInstance Methods\nfunc hash(into: inout Hasher)\nHashes the essential components of this value by feeding them into the given hasher.\nAvailable when MusicItemType conforms to MusicRecentlyPlayedRequestable and Hashable."
  },
  {
    "title": "Equatable Implementations",
    "url": "https://developer.apple.com/documentation/musickit/album/equatable-implementations",
    "html": "Topics\nOperators\nstatic func != (Self, Self) -> Bool\nReturns a Boolean value indicating whether two values are not equal."
  },
  {
    "title": "Encodable Implementations",
    "url": "https://developer.apple.com/documentation/musickit/album/encodable-implementations",
    "html": "Topics\nInstance Methods\nfunc encode(to: any Encoder) throws\nEncodes this value into the given encoder."
  },
  {
    "title": "Decodable Implementations",
    "url": "https://developer.apple.com/documentation/musickit/album/decodable-implementations",
    "html": "Topics\nInitializers\ninit(from: any Decoder) throws\nCreates a new instance by decoding from the given decoder."
  },
  {
    "title": "CustomStringConvertible Implementations",
    "url": "https://developer.apple.com/documentation/musickit/album/customstringconvertible-implementations",
    "html": "Topics\nInstance Properties\nvar description: String\nA textual representation of this instance."
  },
  {
    "title": "CustomDebugStringConvertible Implementations",
    "url": "https://developer.apple.com/documentation/musickit/album/customdebugstringconvertible-implementations",
    "html": "Topics\nInstance Properties\nvar debugDescription: String\nA textual representation of this instance, suitable for debugging."
  },
  {
    "title": "hash(into:)",
    "url": "https://developer.apple.com/documentation/musickit/musiccatalogchartsrequest/hash(into:)",
    "html": "Parameters\nhasher\n\nThe hasher to use when combining the components of this instance.\n\nDiscussion\n\nImplement this method to conform to the Hashable protocol. The components used for hashing must be the same as the components compared in your type’s == operator implementation. Call hasher.combine(_:) with each of these components.\n\nImportant\n\nIn your implementation of hash(into:), don’t call finalize() on the hasher instance provided, or replace it with a different instance. Doing so may become a compile-time error in the future."
  },
  {
    "title": "hashValue",
    "url": "https://developer.apple.com/documentation/musickit/album/hashvalue",
    "html": "Discussion\n\nHash values are not guaranteed to be equal across different executions of your program. Do not save hash values to use during a future execution.\n\nImportant\n\nhashValue is deprecated as a Hashable requirement. To conform to Hashable, implement the hash(into:) requirement instead. The compiler provides an implementation for hashValue for you."
  },
  {
    "title": "contentRating",
    "url": "https://developer.apple.com/documentation/musickit/album/contentrating",
    "html": "Discussion\n\nA nil value means no rating is available for this album."
  },
  {
    "title": "==(_:_:)",
    "url": "https://developer.apple.com/documentation/musickit/musicpersonalrecommendationsresponse/==(_:_:)",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nEquality is the inverse of inequality. For any values a and b, a == b implies that a != b is false."
  },
  {
    "title": "CustomStringConvertible Implementations",
    "url": "https://developer.apple.com/documentation/musickit/musicpersonalrecommendationsresponse/customstringconvertible-implementations",
    "html": "Topics\nInstance Properties\nvar description: String\nA textual representation of this instance."
  },
  {
    "title": "Decodable Implementations",
    "url": "https://developer.apple.com/documentation/musickit/musicpersonalrecommendationsresponse/decodable-implementations",
    "html": "Topics\nInitializers\ninit(from: any Decoder) throws\nCreates a new instance by decoding from the given decoder."
  },
  {
    "title": "limit",
    "url": "https://developer.apple.com/documentation/musickit/musiclibrarysectionedrequest/limit",
    "html": "Discussion\n\nA limit of 0 length means no limit."
  },
  {
    "title": "Encodable Implementations",
    "url": "https://developer.apple.com/documentation/musickit/musicrecentlyplayedresponse/encodable-implementations",
    "html": "Topics\nInstance Methods\nfunc encode(to: any Encoder) throws\nEncodes this value into the given encoder.\nAvailable when MusicItemType conforms to MusicRecentlyPlayedRequestable and Encodable."
  },
  {
    "title": "Decodable Implementations",
    "url": "https://developer.apple.com/documentation/musickit/musicrecentlyplayedresponse/decodable-implementations",
    "html": "Topics\nInitializers\ninit(from: any Decoder) throws\nCreates a new instance by decoding from the given decoder.\nAvailable when MusicItemType conforms to MusicRecentlyPlayedRequestable and Decodable."
  },
  {
    "title": "Equatable Implementations",
    "url": "https://developer.apple.com/documentation/musickit/musicrecentlyplayedresponse/equatable-implementations",
    "html": "Topics\nOperators\nstatic func != (Self, Self) -> Bool\nReturns a Boolean value indicating whether two values are not equal.\nstatic func == (MusicRecentlyPlayedResponse<MusicItemType>, MusicRecentlyPlayedResponse<MusicItemType>) -> Bool\nReturns a Boolean value indicating whether two values are equal.\nAvailable when MusicItemType conforms to MusicRecentlyPlayedRequestable and Equatable."
  },
  {
    "title": "artistName",
    "url": "https://developer.apple.com/documentation/musickit/album/artistname",
    "html": "Discussion\n\nYou can find more precise information about this album’s artists in the artists relationship, which, unlike artistName, requires that you load it explicitly using the with(_:) method, as in the following example:\n\n    let detailedAlbum = try await album.with([.artists])\n    let firstArtist = album.artists?.first\n"
  },
  {
    "title": "hash(into:)",
    "url": "https://developer.apple.com/documentation/musickit/album/hash(into:)",
    "html": "Parameters\nhasher\n\nThe hasher to use when combining the components of this instance.\n\nDiscussion\n\nImplement this method to conform to the Hashable protocol. The components used for hashing must be the same as the components compared in your type’s == operator implementation. Call hasher.combine(_:) with each of these components.\n\nImportant\n\nIn your implementation of hash(into:), don’t call finalize() on the hasher instance provided, or replace it with a different instance. Doing so may become a compile-time error in the future."
  },
  {
    "title": "isComplete",
    "url": "https://developer.apple.com/documentation/musickit/album/iscomplete",
    "html": "Discussion\n\nIf true, the album is complete; otherwise, it’s incomplete. An album is complete if it contains all its tracks and songs."
  },
  {
    "title": "genres",
    "url": "https://developer.apple.com/documentation/musickit/libraryartistfilter/genres",
    "html": "Required"
  },
  {
    "title": "Equatable Implementations",
    "url": "https://developer.apple.com/documentation/musickit/musicpersonalrecommendationsresponse/equatable-implementations",
    "html": "Topics\nOperators\nstatic func != (Self, Self) -> Bool\nReturns a Boolean value indicating whether two values are not equal."
  },
  {
    "title": "Explore more content with MusicKit",
    "url": "https://developer.apple.com/documentation/musickit/explore_more_content_with_musickit",
    "html": "Overview\n\nNote\n\nThis sample code project is associated with WWDC22 session 110347: Explore more content with MusicKit.\n\nConfigure the sample code project\n\nThis sample code project doesn’t work in the simulator. Before you run the sample code project in Xcode, perform the following steps:\n\nIn Xcode’s Project navigator, select the project, and click the Signing & Capabilities tab.\n\nFrom the Team pop-up menu, choose your developer team.\n\nIn the Bundle Identifier field, enter a new bundle ID for the MusicMarathon target. The bundle identifier for the project has an associated App ID, so you need a unique identifier to create your own App ID. Use a reverse-DNS format for your identifier, as Preparing your app for distribution describes.\n\nIn Safari, visit the Certificates, Identifiers, and Profiles section of the Apple Developer website.\n\nSelect Identifiers, and click the Add button to create a new App ID for MusicMarathon. Follow the steps until you reach the Register an App ID page.\n\nFor the Bundle ID, select Explicit, and enter the bundle ID from step 2.\n\nClick the App Services tab, and select the MusicKit checkbox.\n\nComplete the App ID creation process.\n\nAfter creating your App ID, your Xcode project needs no additional configuration. The MusicKit app service is a runtime service that automatically associates with your app’s bundle ID.\n\nSee Also\nEssentials\nUsing Automatic Developer Token Generation for Apple Music API\nEnable your app’s integration with the MusicKit App Service in the developer portal.\nUsing MusicKit to Integrate with Apple Music\nFind an album in Apple Music that corresponds to a CD in a user’s collection, and present the information for the album."
  },
  {
    "title": "hashValue",
    "url": "https://developer.apple.com/documentation/musickit/titledsection/hashvalue",
    "html": "Discussion\n\nHash values are not guaranteed to be equal across different executions of your program. Do not save hash values to use during a future execution.\n\nImportant\n\nhashValue is deprecated as a Hashable requirement. To conform to Hashable, implement the hash(into:) requirement instead. The compiler provides an implementation for hashValue for you."
  },
  {
    "title": "==(_:_:)",
    "url": "https://developer.apple.com/documentation/musickit/titledsection/==(_:_:)",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nEquality is the inverse of inequality. For any values a and b, a == b implies that a != b is false."
  },
  {
    "title": "hash(into:)",
    "url": "https://developer.apple.com/documentation/musickit/titledsection/hash(into:)",
    "html": "Parameters\nhasher\n\nThe hasher to use when combining the components of this instance.\n\nDiscussion\n\nImplement this method to conform to the Hashable protocol. The components used for hashing must be the same as the components compared in your type’s == operator implementation. Call hasher.combine(_:) with each of these components.\n\nImportant\n\nIn your implementation of hash(into:), don’t call finalize() on the hasher instance provided, or replace it with a different instance. Doing so may become a compile-time error in the future."
  },
  {
    "title": "hashValue",
    "url": "https://developer.apple.com/documentation/musickit/musicpersonalrecommendationsresponse/hashvalue",
    "html": "Discussion\n\nHash values are not guaranteed to be equal across different executions of your program. Do not save hash values to use during a future execution.\n\nImportant\n\nhashValue is deprecated as a Hashable requirement. To conform to Hashable, implement the hash(into:) requirement instead. The compiler provides an implementation for hashValue for you."
  },
  {
    "title": "CustomDebugStringConvertible Implementations",
    "url": "https://developer.apple.com/documentation/musickit/musicpersonalrecommendationsresponse/customdebugstringconvertible-implementations",
    "html": "Topics\nInstance Properties\nvar debugDescription: String\nA textual representation of this instance, suitable for debugging."
  },
  {
    "title": "Equatable Implementations",
    "url": "https://developer.apple.com/documentation/musickit/titledsection/equatable-implementations",
    "html": "Topics\nOperators\nstatic func != (Self, Self) -> Bool\nReturns a Boolean value indicating whether two values are not equal."
  },
  {
    "title": "Hashable Implementations",
    "url": "https://developer.apple.com/documentation/musickit/musiclibrarysectionedresponse/hashable-implementations",
    "html": "Topics\nInstance Properties\nvar hashValue: Int\nThe hash value.\nAvailable when SectionType conforms to MusicLibrarySectionRequestable, SectionType conforms to Hashable, MusicItemType conforms to MusicLibraryRequestable, and MusicItemType conforms to Hashable.\nInstance Methods\nfunc hash(into: inout Hasher)\nHashes the essential components of this value by feeding them into the given hasher.\nAvailable when SectionType conforms to MusicLibrarySectionRequestable, SectionType conforms to Hashable, MusicItemType conforms to MusicLibraryRequestable, and MusicItemType conforms to Hashable."
  },
  {
    "title": "hashValue",
    "url": "https://developer.apple.com/documentation/musickit/musicpersonalrecommendationsrequest/hashvalue",
    "html": "Discussion\n\nHash values are not guaranteed to be equal across different executions of your program. Do not save hash values to use during a future execution.\n\nImportant\n\nhashValue is deprecated as a Hashable requirement. To conform to Hashable, implement the hash(into:) requirement instead. The compiler provides an implementation for hashValue for you."
  },
  {
    "title": "hash(into:)",
    "url": "https://developer.apple.com/documentation/musickit/musicpersonalrecommendationsrequest/hash(into:)",
    "html": "Parameters\nhasher\n\nThe hasher to use when combining the components of this instance.\n\nDiscussion\n\nImplement this method to conform to the Hashable protocol. The components used for hashing must be the same as the components compared in your type’s == operator implementation. Call hasher.combine(_:) with each of these components.\n\nImportant\n\nIn your implementation of hash(into:), don’t call finalize() on the hasher instance provided, or replace it with a different instance. Doing so may become a compile-time error in the future."
  },
  {
    "title": "duration",
    "url": "https://developer.apple.com/documentation/musickit/librarysongsortproperties/duration",
    "html": "Required"
  },
  {
    "title": "Equatable Implementations",
    "url": "https://developer.apple.com/documentation/musickit/musicpersonalrecommendationsrequest/equatable-implementations",
    "html": "Topics\nOperators\nstatic func != (Self, Self) -> Bool\nReturns a Boolean value indicating whether two values are not equal."
  },
  {
    "title": "lastPlayedDate",
    "url": "https://developer.apple.com/documentation/musickit/librarysongsortproperties/lastplayeddate",
    "html": "Required"
  },
  {
    "title": "libraryAddedDate",
    "url": "https://developer.apple.com/documentation/musickit/librarysongsortproperties/libraryaddeddate",
    "html": "Required"
  },
  {
    "title": "trackNumber",
    "url": "https://developer.apple.com/documentation/musickit/librarysongsortproperties/tracknumber",
    "html": "Required"
  },
  {
    "title": "title",
    "url": "https://developer.apple.com/documentation/musickit/librarysongsortproperties/title",
    "html": "Required"
  },
  {
    "title": "playCount",
    "url": "https://developer.apple.com/documentation/musickit/librarysongsortproperties/playcount",
    "html": "Required"
  },
  {
    "title": "CustomStringConvertible Implementations",
    "url": "https://developer.apple.com/documentation/musickit/musicrecentlyplayedresponse/customstringconvertible-implementations",
    "html": "Topics\nInstance Properties\nvar description: String\nA textual representation of this instance.\nAvailable when MusicItemType conforms to MusicRecentlyPlayedRequestable."
  },
  {
    "title": "==(_:_:)",
    "url": "https://developer.apple.com/documentation/musickit/musiccatalogchartsrequest/==(_:_:)",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nEquality is the inverse of inequality. For any values a and b, a == b implies that a != b is false."
  },
  {
    "title": "CustomDebugStringConvertible Implementations",
    "url": "https://developer.apple.com/documentation/musickit/musicrecentlyplayedresponse/customdebugstringconvertible-implementations",
    "html": "Topics\nInstance Properties\nvar debugDescription: String\nA textual representation of this instance, suitable for debugging.\nAvailable when MusicItemType conforms to MusicRecentlyPlayedRequestable."
  },
  {
    "title": "==(_:_:)",
    "url": "https://developer.apple.com/documentation/musickit/album/==(_:_:)",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nEquality is the inverse of inequality. For any values a and b, a == b implies that a != b is false."
  },
  {
    "title": "MusicSubscriptionOffer.Options",
    "url": "https://developer.apple.com/documentation/musickit/musicsubscriptionoffer/options",
    "html": "Topics\nInitializers\ninit(action: MusicSubscriptionOffer.Action, messageIdentifier: MusicSubscriptionOffer.MessageIdentifier, itemID: MusicItemID?, affiliateToken: String?, campaignToken: String?)\nCreates options for a subscription offer sheet with specific values for common properties.\nInstance Properties\nvar action: MusicSubscriptionOffer.Action\nAn action for the subscription offers entry point.\nvar affiliateToken: String?\nAn affiliate token for the Apple Services affiliate program.\nvar campaignToken: String?\nA campaign token for the Apple Services affiliate program.\nvar itemID: MusicItemID?\nAn identifier for the music item the user is trying to access, which requires an active subscription.\nvar messageIdentifier: MusicSubscriptionOffer.MessageIdentifier\nAn identifier for selecting the main message that the subscription offer sheet presents to the user.\nType Properties\nstatic let `default`: MusicSubscriptionOffer.Options\nThe default set of options for loading subscription offers for Apple Music.\nDefault Implementations\nCustomStringConvertible Implementations\nEquatable Implementations\nHashable Implementations\nRelationships\nConforms To\nCustomStringConvertible\nEquatable\nHashable\nSendable"
  },
  {
    "title": "MusicSubscriptionOffer.MessageIdentifier",
    "url": "https://developer.apple.com/documentation/musickit/musicsubscriptionoffer/messageidentifier",
    "html": "Topics\nInitializers\ninit(String)\nCreates a message identifier with the specified raw value.\ninit(rawValue: String)\nCreates a message identifier with the specified raw value.\nInstance Properties\nlet rawValue: String\nThe corresponding value of the raw type.\nType Aliases\ntypealias RawValue\nThe raw type that can be used to represent all values of the conforming type.\nType Properties\nstatic let addMusic: MusicSubscriptionOffer.MessageIdentifier\nAn identifier for the message that invites the user to add music to their library by subscribing to Apple Music.\nstatic let join: MusicSubscriptionOffer.MessageIdentifier\nAn identifier for the message that invites the user to join Apple Music.\nstatic let playMusic: MusicSubscriptionOffer.MessageIdentifier\nAn identifier for the message that invites the user to play music by subscribing to Apple Music.\nDefault Implementations\nCustomStringConvertible Implementations\nEquatable Implementations\nRawRepresentable Implementations\nRelationships\nConforms To\nCustomStringConvertible\nEquatable\nHashable\nRawRepresentable\nSendable"
  },
  {
    "title": "name",
    "url": "https://developer.apple.com/documentation/musickit/libraryartistfilter/name",
    "html": "Required"
  },
  {
    "title": "id",
    "url": "https://developer.apple.com/documentation/musickit/libraryartistfilter/id",
    "html": "Required"
  },
  {
    "title": "hashValue",
    "url": "https://developer.apple.com/documentation/musickit/artwork/hashvalue",
    "html": "Discussion\n\nHash values are not guaranteed to be equal across different executions of your program. Do not save hash values to use during a future execution.\n\nImportant\n\nhashValue is deprecated as a Hashable requirement. To conform to Hashable, implement the hash(into:) requirement instead. The compiler provides an implementation for hashValue for you."
  },
  {
    "title": "==(_:_:)",
    "url": "https://developer.apple.com/documentation/musickit/artwork/==(_:_:)",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nEquality is the inverse of inequality. For any values a and b, a == b implies that a != b is false."
  },
  {
    "title": "MusicSubscriptionOffer.Action",
    "url": "https://developer.apple.com/documentation/musickit/musicsubscriptionoffer/action",
    "html": "Topics\nInitializers\ninit(String)\nCreates an action with the specified raw value.\ninit(rawValue: String)\nCreates an action with the specified raw value.\nInstance Properties\nlet rawValue: String\nThe corresponding value of the raw type.\nType Aliases\ntypealias RawValue\nThe raw type that can be used to represent all values of the conforming type.\nType Properties\nstatic let subscribe: MusicSubscriptionOffer.Action\nAn action for inviting the user to subscribe to Apple Music.\nDefault Implementations\nCustomStringConvertible Implementations\nEquatable Implementations\nRawRepresentable Implementations\nRelationships\nConforms To\nCustomStringConvertible\nEquatable\nHashable\nRawRepresentable\nSendable"
  },
  {
    "title": "hashValue",
    "url": "https://developer.apple.com/documentation/musickit/musiccatalogchartsrequest/hashvalue",
    "html": "Discussion\n\nHash values are not guaranteed to be equal across different executions of your program. Do not save hash values to use during a future execution.\n\nImportant\n\nhashValue is deprecated as a Hashable requirement. To conform to Hashable, implement the hash(into:) requirement instead. The compiler provides an implementation for hashValue for you."
  },
  {
    "title": "Equatable Implementations",
    "url": "https://developer.apple.com/documentation/musickit/musicdatarequest/equatable-implementations",
    "html": "Topics\nOperators\nstatic func != (Self, Self) -> Bool\nReturns a Boolean value indicating whether two values are not equal."
  },
  {
    "title": "genres",
    "url": "https://developer.apple.com/documentation/musickit/librarytrackfilter/genres",
    "html": "Required"
  },
  {
    "title": "Equatable Implementations",
    "url": "https://developer.apple.com/documentation/musickit/musiccatalogchartsrequest/equatable-implementations",
    "html": "Topics\nOperators\nstatic func != (Self, Self) -> Bool\nReturns a Boolean value indicating whether two values are not equal."
  },
  {
    "title": "albumTitle",
    "url": "https://developer.apple.com/documentation/musickit/librarytrackfilter/albumtitle",
    "html": "Required"
  },
  {
    "title": "albums",
    "url": "https://developer.apple.com/documentation/musickit/librarytrackfilter/albums",
    "html": "Required"
  },
  {
    "title": "duration",
    "url": "https://developer.apple.com/documentation/musickit/librarytracksortproperties/duration",
    "html": "Required"
  },
  {
    "title": "artists",
    "url": "https://developer.apple.com/documentation/musickit/librarytrackfilter/artists",
    "html": "Required"
  },
  {
    "title": "id",
    "url": "https://developer.apple.com/documentation/musickit/librarytrackfilter/id",
    "html": "Required"
  },
  {
    "title": "title",
    "url": "https://developer.apple.com/documentation/musickit/librarytrackfilter/title",
    "html": "Required"
  },
  {
    "title": "Equatable Implementations",
    "url": "https://developer.apple.com/documentation/musickit/musiclibrarysectionedresponse/equatable-implementations",
    "html": "Topics\nOperators\nstatic func != (Self, Self) -> Bool\nReturns a Boolean value indicating whether two values are not equal.\nstatic func == (MusicLibrarySectionedResponse<SectionType, MusicItemType>, MusicLibrarySectionedResponse<SectionType, MusicItemType>) -> Bool\nReturns a Boolean value indicating whether two values are equal.\nAvailable when SectionType conforms to MusicLibrarySectionRequestable, SectionType conforms to Equatable, MusicItemType conforms to MusicLibraryRequestable, and MusicItemType conforms to Equatable."
  },
  {
    "title": "hash(into:)",
    "url": "https://developer.apple.com/documentation/musickit/musicpersonalrecommendationsresponse/hash(into:)",
    "html": "Parameters\nhasher\n\nThe hasher to use when combining the components of this instance.\n\nDiscussion\n\nImplement this method to conform to the Hashable protocol. The components used for hashing must be the same as the components compared in your type’s == operator implementation. Call hasher.combine(_:) with each of these components.\n\nImportant\n\nIn your implementation of hash(into:), don’t call finalize() on the hasher instance provided, or replace it with a different instance. Doing so may become a compile-time error in the future."
  },
  {
    "title": "CustomStringConvertible Implementations",
    "url": "https://developer.apple.com/documentation/musickit/musiclibrarysectionedresponse/customstringconvertible-implementations",
    "html": "Topics\nInstance Properties\nvar description: String\nA textual representation of this instance.\nAvailable when SectionType conforms to MusicLibrarySectionRequestable and MusicItemType conforms to MusicLibraryRequestable."
  },
  {
    "title": "CustomDebugStringConvertible Implementations",
    "url": "https://developer.apple.com/documentation/musickit/musiclibrarysectionedresponse/customdebugstringconvertible-implementations",
    "html": "Topics\nInstance Properties\nvar debugDescription: String\nA textual representation of this instance, suitable for debugging.\nAvailable when SectionType conforms to MusicLibrarySectionRequestable and MusicItemType conforms to MusicLibraryRequestable."
  },
  {
    "title": "Encodable Implementations",
    "url": "https://developer.apple.com/documentation/musickit/musicpersonalrecommendationsresponse/encodable-implementations",
    "html": "Topics\nInstance Methods\nfunc encode(to: any Encoder) throws\nEncodes this value into the given encoder."
  },
  {
    "title": "==(_:_:)",
    "url": "https://developer.apple.com/documentation/musickit/musicpersonalrecommendationsrequest/==(_:_:)",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nEquality is the inverse of inequality. For any values a and b, a == b implies that a != b is false."
  },
  {
    "title": "artistName",
    "url": "https://developer.apple.com/documentation/musickit/librarysongsortproperties/artistname",
    "html": "Required"
  },
  {
    "title": "composerName",
    "url": "https://developer.apple.com/documentation/musickit/librarysongsortproperties/composername",
    "html": "Required"
  },
  {
    "title": "discNumber",
    "url": "https://developer.apple.com/documentation/musickit/librarysongsortproperties/discnumber",
    "html": "Required"
  },
  {
    "title": "albumTitle",
    "url": "https://developer.apple.com/documentation/musickit/librarysongsortproperties/albumtitle",
    "html": "Required"
  },
  {
    "title": "isrc",
    "url": "https://developer.apple.com/documentation/musickit/musicvideofilter/isrc",
    "html": "Required"
  },
  {
    "title": "MusicLibrarySearchResponse",
    "url": "https://developer.apple.com/documentation/musickit/musiclibrarysearchresponse",
    "html": "Topics\nOperators\nstatic func == (MusicLibrarySearchResponse, MusicLibrarySearchResponse) -> Bool\nReturns a Boolean value indicating whether two values are equal.\nInstance Properties\nlet albums: MusicItemCollection<Album>\nA collection of albums.\nlet artists: MusicItemCollection<Artist>\nA collection of artists.\nvar hashValue: Int\nThe hash value.\nlet musicVideos: MusicItemCollection<MusicVideo>\nA collection of music videos.\nlet playlists: MusicItemCollection<Playlist>\nA collection of playlists.\nlet songs: MusicItemCollection<Song>\nA collection of songs.\nlet topResults: MusicItemCollection<MusicLibrarySearchResponse.TopResult>\nA collection of top results.\nInstance Methods\nfunc hash(into: inout Hasher)\nHashes the essential components of this value by feeding them into the given hasher.\nEnumerations\nenum TopResult\nAn item that represents one of the top results in a library search response.\nDefault Implementations\nCustomDebugStringConvertible Implementations\nCustomStringConvertible Implementations\nEquatable Implementations\nRelationships\nConforms To\nCustomDebugStringConvertible\nCustomStringConvertible\nEquatable\nHashable\nSendable"
  },
  {
    "title": "MusicCatalogSearchSuggestionsRequest",
    "url": "https://developer.apple.com/documentation/musickit/musiccatalogsearchsuggestionsrequest",
    "html": "Topics\nInitializers\ninit(term: String, includingTopResultsOfTypes: [any MusicCatalogSearchable.Type])\nCreates a catalog search suggestions request for a specified search term along with a list of types to include when fetching top results.\nInstance Properties\nvar limit: Int?\nA limit for the number of items to return in the catalog search suggestions response.\nlet term: String\nThe search term for the request.\nvar typesForTopResults: [any MusicCatalogSearchable.Type]\nThe list of requested types for top results.\nInstance Methods\nfunc response() async throws -> MusicCatalogSearchSuggestionsResponse\nFetches suggestions of the requested catalog searchable types that match the search term of the request."
  },
  {
    "title": "MusicCatalogChartsResponse",
    "url": "https://developer.apple.com/documentation/musickit/musiccatalogchartsresponse",
    "html": "Topics\nOperators\nstatic func == (MusicCatalogChartsResponse, MusicCatalogChartsResponse) -> Bool\nReturns a Boolean value indicating whether two values are equal.\nInstance Properties\nlet albumCharts: [MusicCatalogChart<Album>]\nA collection of charts that contain albums.\nvar hashValue: Int\nThe hash value.\nlet musicVideoCharts: [MusicCatalogChart<MusicVideo>]\nA collection of charts that contain music videos.\nlet playlistCharts: [MusicCatalogChart<Playlist>]\nA collection of charts that contain playlists.\nlet songCharts: [MusicCatalogChart<Song>]\nA collection of charts that contain songs.\nInstance Methods\nfunc hash(into: inout Hasher)\nHashes the essential components of this value by feeding them into the given hasher.\nDefault Implementations\nCustomDebugStringConvertible Implementations\nCustomStringConvertible Implementations\nDecodable Implementations\nEncodable Implementations\nEquatable Implementations\nRelationships\nConforms To\nCustomDebugStringConvertible\nCustomStringConvertible\nDecodable\nEncodable\nEquatable\nHashable\nSendable"
  },
  {
    "title": "developerToken(options:)",
    "url": "https://developer.apple.com/documentation/musickit/musicdevelopertokenprovider/developertoken(options:)",
    "html": "Required\n\nDiscussion\n\nIf you opt to create a custom implementation of the MusicDeveloperTokenProvider protocol, make sure to discard any cached developer token if the options parameter contains ignoreCache.\n\nYou can add the newly generated token to an in-memory or persistent cache for faster access upon subsequent requests for this token."
  },
  {
    "title": "Artwork",
    "url": "https://developer.apple.com/documentation/MusicKit/Artwork",
    "html": "Topics\nOperators\nstatic func == (Artwork, Artwork) -> Bool\nReturns a Boolean value indicating whether two values are equal.\nInstance Properties\nlet alternateText: String?\nA textual description for the image.\nlet backgroundColor: CGColor?\nThe average background color of the image.\nvar hashValue: Int\nThe hash value.\nlet maximumHeight: Int\nThe maximum height available for the image.\nlet maximumWidth: Int\nThe maximum width available for the image.\nlet primaryTextColor: CGColor?\nThe primary text color to use when displaying the background color.\nlet quaternaryTextColor: CGColor?\nThe final posttertiary text color to use when displaying the background color.\nlet secondaryTextColor: CGColor?\nThe secondary text color to use when displaying the background color.\nlet tertiaryTextColor: CGColor?\nThe tertiary text color to use when displaying the background color.\nInstance Methods\nfunc hash(into: inout Hasher)\nHashes the essential components of this value by feeding them into the given hasher.\nfunc url(width: Int, height: Int) -> URL?\nReturns a URL to request the image asset for a specified width and height.\nDefault Implementations\nCustomDebugStringConvertible Implementations\nCustomStringConvertible Implementations\nDecodable Implementations\nEncodable Implementations\nEquatable Implementations\nRelationships\nConforms To\nCustomDebugStringConvertible\nCustomStringConvertible\nDecodable\nEncodable\nEquatable\nHashable\nSendable\nSee Also\nArtwork\nstruct ArtworkImage\nA view that displays the image for a music item’s artwork."
  },
  {
    "title": "init(_:height:)",
    "url": "https://developer.apple.com/documentation/musickit/artworkimage/init(_:height:)",
    "html": "Discussion\n\nThis initializer derives the URL for loading the artwork image from the Artwork instance and the specified sizing parameters, as well as the display scale for the current environment.\n\nThe loaded image and placeholder have constrained frames from these sizing parameters.\n\nIf you provide the height only, the artwork image calculates the width dimension as a proportional length according to the aspect ratio of the artwork."
  },
  {
    "title": "hash(into:)",
    "url": "https://developer.apple.com/documentation/musickit/musicsubscription/hash(into:)",
    "html": "Parameters\nhasher\n\nThe hasher to use when combining the components of this instance.\n\nDiscussion\n\nImplement this method to conform to the Hashable protocol. The components used for hashing must be the same as the components compared in your type’s == operator implementation. Call hasher.combine(_:) with each of these components.\n\nImportant\n\nIn your implementation of hash(into:), don’t call finalize() on the hasher instance provided, or replace it with a different instance. Doing so may become a compile-time error in the future."
  },
  {
    "title": "init(_:width:height:)",
    "url": "https://developer.apple.com/documentation/musickit/artworkimage/init(_:width:height:)",
    "html": "Discussion\n\nThis initializer derives the URL for loading the artwork image from the Artwork instance and the specified sizing parameters, as well as the display scale for the current environment.\n\nThe loaded image and placeholder have constrained frames from these sizing parameters."
  },
  {
    "title": "MusicSubscription.Error",
    "url": "https://developer.apple.com/documentation/musickit/musicsubscription/error",
    "html": "Topics\nEnumeration Cases\ncase permissionDenied\nAn error indicating that the user doesn’t consent for your app to access their Apple Music data.\ncase privacyAcknowledgementRequired\nAn error indicating that the user needs to acknowledge the most-recent privacy policy for Apple Music.\ncase unknown\nAn error indicating the ocurrence of an unknown or unexpected error.\nInitializers\ninit?(rawValue: String)\nCreates a new instance with the specified raw value.\nInstance Properties\nvar errorDescription: String?\nA localized message describing what error occurred.\nvar failureReason: String?\nA localized message describing the reason for the failure.\nvar helpAnchor: String?\nA localized message providing “help” text if the user requests help.\nvar rawValue: String\nThe corresponding value of the raw type.\nvar recoverySuggestion: String?\nA localized message describing how one might recover from the failure.\nType Aliases\ntypealias RawValue\nThe raw type that can be used to represent all values of the conforming type.\nDefault Implementations\nCustomStringConvertible Implementations\nEquatable Implementations\nError Implementations\nRawRepresentable Implementations\nRelationships\nConforms To\nCustomStringConvertible\nEquatable\nError\nHashable\nLocalizedError\nRawRepresentable\nSendable"
  },
  {
    "title": "Equatable Implementations",
    "url": "https://developer.apple.com/documentation/musickit/musicsubscription/equatable-implementations",
    "html": "Topics\nOperators\nstatic func != (Self, Self) -> Bool\nReturns a Boolean value indicating whether two values are not equal."
  },
  {
    "title": "MusicDataRequest.Error",
    "url": "https://developer.apple.com/documentation/musickit/musicdatarequest/error",
    "html": "Topics\nInstance Properties\nlet code: Int\nThe specific code for the underlying cause of the error.\nlet detailText: String\nAdditional detailed information about the cause of the error.\nlet id: String\nThe identifier for the error.\nlet originalResponse: MusicDataResponse\nThe original response that contains the error.\nlet source: MusicDataRequest.Error.Source?\nThe source of the error.\nlet status: Int\nThe HTTP status code for the error.\nlet title: String\nA developer-friendly title for the error.\nEnumerations\nenum Source\nA representation of the source of an error from Apple Music API.\nDefault Implementations\nCustomStringConvertible Implementations\nError Implementations\nRelationships\nConforms To\nCustomStringConvertible\nError\nSendable"
  },
  {
    "title": "MusicLibraryRequestable",
    "url": "https://developer.apple.com/documentation/musickit/musiclibraryrequestable",
    "html": "Topics\nAssociated Types\nassociatedtype LibraryFilter\nThe associated type that contains the set of music item properties your app uses as a filter for a library request.\n\nRequired\n\nassociatedtype LibrarySortProperties\nThe associated type that contains the set of properties your app uses to sort results for a library request.\n\nRequired\n\nRelationships\nInherits From\nMusicItem\nSendable\nConforming Types\nAlbum\nArtist\nGenre\nMusicVideo\nPlaylist\nPlaylist.Entry\nSong\nTrack"
  },
  {
    "title": "CustomStringConvertible Implementations",
    "url": "https://developer.apple.com/documentation/musickit/musicdatarequest/customstringconvertible-implementations",
    "html": "Topics\nInstance Properties\nvar description: String\nA textual representation of this instance."
  },
  {
    "title": "==(_:_:)",
    "url": "https://developer.apple.com/documentation/musickit/musicdatarequest/==(_:_:)",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nEquality is the inverse of inequality. For any values a and b, a == b implies that a != b is false."
  },
  {
    "title": "AnyMusicProperty",
    "url": "https://developer.apple.com/documentation/musickit/anymusicproperty",
    "html": "Topics\nOperators\nstatic func == (AnyMusicProperty, AnyMusicProperty) -> Bool\nReturns a Boolean value indicating whether two values are equal.\nInstance Properties\nvar hashValue: Int\nThe hash value.\nInstance Methods\nfunc hash(into: inout Hasher)\nHashes the essential components of this value by feeding them into the given hasher.\nDefault Implementations\nEquatable Implementations\nRelationships\nInherited By\nPartialMusicProperty\nConforms To\nEquatable\nHashable\nSendable\nSee Also\nUtility\nprotocol MusicItem\nA protocol with basic requirements for music items.\nstruct MusicItemID\nAn object that represents a unique identifier for a music item.\nstruct MusicItemCollection\nA collection of music items.\nprotocol MusicPropertyContainer\nA protocol for music items that allow loading additional properties that you can fetch asynchronously.\nclass MusicRelationshipProperty\nAn identifier for a music item relationship property from a specific root type to a specific value type for the element of the resulting collection.\nclass MusicExtendedAttributeProperty\nAn identifier for a music item extended attribute property from a specific root type to a specific resulting value type.\nclass MusicAttributeProperty\nAn identifier for a music item attribute property from a specific root type to a specific resulting value type.\nclass PartialMusicAsyncProperty\nA partially type-erased identifier for a music item property that you can fetch asynchronously from a concrete root type to any resulting value type.\nclass PartialMusicProperty\nA partially type-erased identifier for a music item property from a concrete root type to any resulting value type."
  },
  {
    "title": "hash(into:)",
    "url": "https://developer.apple.com/documentation/musickit/musicdatarequest/hash(into:)",
    "html": "Parameters\nhasher\n\nThe hasher to use when combining the components of this instance.\n\nDiscussion\n\nImplement this method to conform to the Hashable protocol. The components used for hashing must be the same as the components compared in your type’s == operator implementation. Call hasher.combine(_:) with each of these components.\n\nImportant\n\nIn your implementation of hash(into:), don’t call finalize() on the hasher instance provided, or replace it with a different instance. Doing so may become a compile-time error in the future."
  },
  {
    "title": "hashValue",
    "url": "https://developer.apple.com/documentation/musickit/musicdatarequest/hashvalue",
    "html": "Discussion\n\nHash values are not guaranteed to be equal across different executions of your program. Do not save hash values to use during a future execution.\n\nImportant\n\nhashValue is deprecated as a Hashable requirement. To conform to Hashable, implement the hash(into:) requirement instead. The compiler provides an implementation for hashValue for you."
  },
  {
    "title": "trackNumber",
    "url": "https://developer.apple.com/documentation/musickit/librarytracksortproperties/tracknumber",
    "html": "Required"
  },
  {
    "title": "albumCount",
    "url": "https://developer.apple.com/documentation/musickit/libraryartistsortproperties/albumcount",
    "html": "Required"
  },
  {
    "title": "playCount",
    "url": "https://developer.apple.com/documentation/musickit/librarytracksortproperties/playcount",
    "html": "Required"
  },
  {
    "title": "libraryAddedDate",
    "url": "https://developer.apple.com/documentation/musickit/librarygenresortproperties/libraryaddeddate",
    "html": "Required"
  },
  {
    "title": "playlists",
    "url": "https://developer.apple.com/documentation/musickit/libraryartistfilter/playlists",
    "html": "Required"
  },
  {
    "title": "title",
    "url": "https://developer.apple.com/documentation/musickit/librarytracksortproperties/title",
    "html": "Required"
  },
  {
    "title": "init(stringLiteral:)",
    "url": "https://developer.apple.com/documentation/musickit/musicitemid/init(stringliteral:)",
    "html": "Parameters\nvalue\n\nThe value of the new instance."
  },
  {
    "title": "init(rawValue:)",
    "url": "https://developer.apple.com/documentation/musickit/musicitemid/init(rawvalue:)",
    "html": "Parameters\nrawValue\n\nThe raw value to use for the new instance.\n\nDiscussion\n\nIf there is no value of the type that corresponds with the specified raw value, this initializer returns nil. For example:\n\nenum PaperSize: String {\n    case A4, A5, Letter, Legal\n}\n\n\nprint(PaperSize(rawValue: \"Legal\"))\n// Prints \"Optional(\"PaperSize.Legal\")\"\n\n\nprint(PaperSize(rawValue: \"Tabloid\"))\n// Prints \"nil\"\n"
  },
  {
    "title": "rawValue",
    "url": "https://developer.apple.com/documentation/musickit/musicitemid/rawvalue-swift.property",
    "html": "Discussion\n\nA new instance initialized with rawValue will be equivalent to this instance. For example:\n\nenum PaperSize: String {\n    case A4, A5, Letter, Legal\n}\n\n\nlet selectedSize = PaperSize.Letter\nprint(selectedSize.rawValue)\n// Prints \"Letter\"\n\n\nprint(selectedSize == PaperSize(rawValue: selectedSize.rawValue)!)\n// Prints \"true\"\n"
  },
  {
    "title": "MusicItemID.RawValue",
    "url": "https://developer.apple.com/documentation/musickit/musicitemid/rawvalue-swift.typealias",
    "html": "Discussion\n\nEvery distinct value of the conforming type has a corresponding unique value of the RawValue type, but there may be values of the RawValue type that don’t have a corresponding value of the conforming type."
  },
  {
    "title": "MusicItemID.ExtendedGraphemeClusterLiteralType",
    "url": "https://developer.apple.com/documentation/musickit/musicitemid/extendedgraphemeclusterliteraltype",
    "html": "Discussion\n\nValid types for ExtendedGraphemeClusterLiteralType are Character, String, and StaticString."
  },
  {
    "title": "MusicItemID.StringLiteralType",
    "url": "https://developer.apple.com/documentation/musickit/musicitemid/stringliteraltype",
    "html": "Discussion\n\nValid types for StringLiteralType are String and StaticString."
  },
  {
    "title": "MusicItemID.UnicodeScalarLiteralType",
    "url": "https://developer.apple.com/documentation/musickit/musicitemid/unicodescalarliteraltype",
    "html": "Discussion\n\nValid types for UnicodeScalarLiteralType are Unicode.Scalar, Character, String, and StaticString."
  },
  {
    "title": "CustomStringConvertible Implementations",
    "url": "https://developer.apple.com/documentation/musickit/musicitemid/customstringconvertible-implementations",
    "html": "Topics\nInstance Properties\nvar description: String\nA textual representation of this instance."
  },
  {
    "title": "RawRepresentable Implementations",
    "url": "https://developer.apple.com/documentation/musickit/musicitemid/rawrepresentable-implementations",
    "html": "Topics\nInitializers\ninit(from: any Decoder) throws\nCreates a new instance by decoding from the given decoder, when the type’s RawValue is String.\nAvailable when Self conforms to Decodable and RawValue is String.\nInstance Properties\nvar hashValue: Int\nAvailable when Self conforms to Hashable and RawValue conforms to Hashable.\nInstance Methods\nfunc hash(into: inout Hasher)\nAvailable when Self conforms to Hashable and RawValue conforms to Hashable."
  },
  {
    "title": "Equatable Implementations",
    "url": "https://developer.apple.com/documentation/musickit/artwork/equatable-implementations",
    "html": "Topics\nOperators\nstatic func != (Self, Self) -> Bool\nReturns a Boolean value indicating whether two values are not equal."
  },
  {
    "title": "Encodable Implementations",
    "url": "https://developer.apple.com/documentation/musickit/artwork/encodable-implementations",
    "html": "Topics\nInstance Methods\nfunc encode(to: any Encoder) throws\nEncodes this value into the given encoder."
  },
  {
    "title": "CustomDebugStringConvertible Implementations",
    "url": "https://developer.apple.com/documentation/musickit/artwork/customdebugstringconvertible-implementations",
    "html": "Topics\nInstance Properties\nvar debugDescription: String\nA textual representation of this instance, suitable for debugging."
  },
  {
    "title": "CustomStringConvertible Implementations",
    "url": "https://developer.apple.com/documentation/musickit/artwork/customstringconvertible-implementations",
    "html": "Topics\nInstance Properties\nvar description: String\nA textual representation of this instance."
  },
  {
    "title": "Decodable Implementations",
    "url": "https://developer.apple.com/documentation/musickit/artwork/decodable-implementations",
    "html": "Topics\nInitializers\ninit(from: any Decoder) throws\nCreates a new instance by decoding from the given decoder."
  },
  {
    "title": "hash(into:)",
    "url": "https://developer.apple.com/documentation/musickit/artwork/hash(into:)",
    "html": "Parameters\nhasher\n\nThe hasher to use when combining the components of this instance.\n\nDiscussion\n\nImplement this method to conform to the Hashable protocol. The components used for hashing must be the same as the components compared in your type’s == operator implementation. Call hasher.combine(_:) with each of these components.\n\nImportant\n\nIn your implementation of hash(into:), don’t call finalize() on the hasher instance provided, or replace it with a different instance. Doing so may become a compile-time error in the future."
  },
  {
    "title": "discNumber",
    "url": "https://developer.apple.com/documentation/musickit/librarytracksortproperties/discnumber",
    "html": "Required"
  },
  {
    "title": "albumTitle",
    "url": "https://developer.apple.com/documentation/musickit/librarytracksortproperties/albumtitle",
    "html": "Required"
  },
  {
    "title": "artistName",
    "url": "https://developer.apple.com/documentation/musickit/librarytrackfilter/artistname",
    "html": "Required"
  },
  {
    "title": "artistName",
    "url": "https://developer.apple.com/documentation/musickit/librarytracksortproperties/artistname",
    "html": "Required"
  },
  {
    "title": "lastPlayedDate",
    "url": "https://developer.apple.com/documentation/musickit/librarytracksortproperties/lastplayeddate",
    "html": "Required"
  },
  {
    "title": "libraryAddedDate",
    "url": "https://developer.apple.com/documentation/musickit/librarytracksortproperties/libraryaddeddate",
    "html": "Required"
  },
  {
    "title": "currentCountryCode",
    "url": "https://developer.apple.com/documentation/musickit/musicdatarequest/currentcountrycode",
    "html": "Discussion\n\nThe current country code may be useful to construct the URL for a MusicDataRequest because a typical catalog endpoint for Apple Music API requires the inclusion of a country code in the path of the corresponding URL."
  },
  {
    "title": "libraryAddedDate",
    "url": "https://developer.apple.com/documentation/musickit/libraryartistsortproperties/libraryaddeddate",
    "html": "Required"
  },
  {
    "title": "name",
    "url": "https://developer.apple.com/documentation/musickit/libraryartistsortproperties/name",
    "html": "Required"
  },
  {
    "title": "name",
    "url": "https://developer.apple.com/documentation/musickit/librarygenrefilter/name",
    "html": "Required"
  },
  {
    "title": "id",
    "url": "https://developer.apple.com/documentation/musickit/librarygenrefilter/id",
    "html": "Required"
  },
  {
    "title": "name",
    "url": "https://developer.apple.com/documentation/musickit/librarygenresortproperties/name",
    "html": "Required"
  },
  {
    "title": "Decodable Implementations",
    "url": "https://developer.apple.com/documentation/musickit/musicitemid/decodable-implementations",
    "html": "Topics\nInitializers\ninit(from: any Decoder) throws\nCreates a new instance by decoding from the given decoder."
  },
  {
    "title": "Equatable Implementations",
    "url": "https://developer.apple.com/documentation/musickit/musicitemid/equatable-implementations",
    "html": "Topics\nOperators\nstatic func != (Self, Self) -> Bool\nReturns a Boolean value indicating whether two values are not equal."
  },
  {
    "title": "ExpressibleByUnicodeScalarLiteral Implementations",
    "url": "https://developer.apple.com/documentation/musickit/musicitemid/expressiblebyunicodescalarliteral-implementations",
    "html": "Topics\nInitializers\ninit(unicodeScalarLiteral: Self.ExtendedGraphemeClusterLiteralType)\nCreates an instance initialized to the given value.\nAvailable when ExtendedGraphemeClusterLiteralType is Self.UnicodeScalarLiteralType."
  },
  {
    "title": "ExpressibleByExtendedGraphemeClusterLiteral Implementations",
    "url": "https://developer.apple.com/documentation/musickit/musicitemid/expressiblebyextendedgraphemeclusterliteral-implementations",
    "html": "Topics\nInitializers\ninit(extendedGraphemeClusterLiteral: Self.StringLiteralType)\nCreates an instance initialized to the given value.\nAvailable when ExtendedGraphemeClusterLiteralType is Self.StringLiteralType."
  },
  {
    "title": "Encodable Implementations",
    "url": "https://developer.apple.com/documentation/musickit/musicitemid/encodable-implementations",
    "html": "Topics\nInstance Methods\nfunc encode(to: any Encoder) throws\nEncodes this value into the given encoder."
  },
  {
    "title": "MusicItem",
    "url": "https://developer.apple.com/documentation/musickit/musicitem",
    "html": "Topics\nInstance Properties\nvar id: MusicItemID\nThe unique identifier for the music item.\n\nRequired\n\nInstance Methods\nfunc with([PartialMusicAsyncProperty<Self>]) async throws -> Self\nLoads a new instance of the music item that includes the specified properties.\nAvailable when Self conforms to MusicPropertyContainer and Decodable.\nfunc with(PartialMusicAsyncProperty<Self>..., preferredSource: MusicPropertySource) async throws -> Self\nLoads a new instance of the music item that includes the specified properties.\nAvailable when Self conforms to MusicPropertyContainer and Decodable.\nfunc with([PartialMusicAsyncProperty<Self>], preferredSource: MusicPropertySource) async throws -> Self\nLoads a new instance of the music item that includes the specified properties.\nAvailable when Self conforms to MusicPropertyContainer and Decodable.\nRelationships\nInherits From\nSendable\nInherited By\nFilterableMusicItem\nMusicCatalogChartRequestable\nMusicCatalogSearchable\nMusicCatalogTopLevelResourceRequesting\nMusicLibraryAddable\nMusicLibraryRequestable\nMusicLibrarySearchable\nMusicPersonalRecommendationItem\nMusicPlaylistAddable\nMusicRecentlyPlayedRequestable\nPlayableMusicItem\nConforming Types\nAlbum\nArtist\nCurator\nGenre\nMusicCatalogSearchResponse.TopResult\nMusicLibrarySearchResponse.TopResult\nMusicPersonalRecommendation\nMusicPersonalRecommendation.Item\nMusicPlayer.Queue.Entry.Item\nMusicVideo\nPlaylist\nPlaylist.Entry\nPlaylist.Entry.Item\nRadioShow\nRecentlyPlayedMusicItem\nRecordLabel\nSong\nStation\nTrack\nSee Also\nUtility\nstruct MusicItemID\nAn object that represents a unique identifier for a music item.\nstruct MusicItemCollection\nA collection of music items.\nprotocol MusicPropertyContainer\nA protocol for music items that allow loading additional properties that you can fetch asynchronously.\nclass MusicRelationshipProperty\nAn identifier for a music item relationship property from a specific root type to a specific value type for the element of the resulting collection.\nclass MusicExtendedAttributeProperty\nAn identifier for a music item extended attribute property from a specific root type to a specific resulting value type.\nclass MusicAttributeProperty\nAn identifier for a music item attribute property from a specific root type to a specific resulting value type.\nclass PartialMusicAsyncProperty\nA partially type-erased identifier for a music item property that you can fetch asynchronously from a concrete root type to any resulting value type.\nclass PartialMusicProperty\nA partially type-erased identifier for a music item property from a concrete root type to any resulting value type.\nclass AnyMusicProperty\nA type-erased identifier for a music item property, from any root type to any resulting value type."
  },
  {
    "title": "MusicTokenRequestError",
    "url": "https://developer.apple.com/documentation/musickit/musictokenrequesterror",
    "html": "Topics\nEnumeration Cases\ncase developerTokenRequestFailed\nAn error that indicates a failure in the process of fetching a developer token for the current app.\ncase permissionDenied\nAn error that occurs when the user doesn’t consent for the current app to access their Apple Music data.\ncase privacyAcknowledgementRequired\nAn error that occurs when the user needs to acknowledge the most recent privacy policy.\ncase unknown\nAn error indicating the ocurrence of an unknown or unexpected error.\ncase userNotSignedIn\nAn error that occurs when the user isn’t signed in with an Apple Music account.\ncase userTokenRequestFailed\nAn error that indicates a failure in the process of fetching a user token.\ncase userTokenRevoked\nAn error that occurs when the user revokes permission for the current app to access their Apple Music data.\nInitializers\ninit?(rawValue: String)\nCreates a new instance with the specified raw value.\nInstance Properties\nvar description: String\nA textual representation of this instance.\nvar errorDescription: String?\nA localized message describing what error occurred.\nvar failureReason: String?\nA localized message describing the reason for the failure.\nvar helpAnchor: String?\nA localized message providing “help” text if the user requests help.\nvar rawValue: String\nThe corresponding value of the raw type.\nvar recoverySuggestion: String?\nA localized message describing how one might recover from the failure.\nType Aliases\ntypealias RawValue\nThe raw type that can be used to represent all values of the conforming type.\nDefault Implementations\nEquatable Implementations\nError Implementations\nRawRepresentable Implementations\nRelationships\nConforms To\nCustomStringConvertible\nEquatable\nError\nHashable\nLocalizedError\nRawRepresentable\nSendable\nSee Also\nToken management\ntypealias MusicTokenProvider\nAn object that music requests use to access Apple Music API.\nprotocol MusicDeveloperTokenProvider\nA set of methods that music requests use to access Apple Music API.\nclass MusicUserTokenProvider\nA class that music requests use to fetch user tokens your app requires to access Apple Music API.\nstruct MusicTokenRequestOptions\nOptions that music requests pass into token provider methods to fetch a required token for accessing Apple Music API.\nclass DefaultMusicTokenProvider\nThe default token provider that music requests use to access Apple Music API."
  },
  {
    "title": "LibraryMusicVideoFilter",
    "url": "https://developer.apple.com/documentation/musickit/librarymusicvideofilter",
    "html": "Topics\nInstance Properties\nvar albumTitle: String?\nThe title of the album the music video appears on.\n\nRequired\n\nvar albums: MusicItemCollection<Album>?\nThe music video’s associated albums.\n\nRequired\n\nvar artistName: String?\nThe artist’s name.\n\nRequired\n\nvar artists: MusicItemCollection<Artist>?\nThe music video’s associated artists.\n\nRequired\n\nvar genres: MusicItemCollection<Genre>?\nThe music video’s associated genres.\n\nRequired\n\nvar id: MusicItemID\nThe unique identifier for the music video.\n\nRequired\n\nvar title: String\nThe title of the music video.\n\nRequired"
  },
  {
    "title": "DefaultMusicTokenProvider",
    "url": "https://developer.apple.com/documentation/musickit/defaultmusictokenprovider",
    "html": "Topics\nInitializers\ninit()\nCreates a user token provider.\nInstance Methods\nfunc developerToken(options: MusicTokenRequestOptions) async throws -> String\nFetches and returns a developer token for Apple Music API.\nRelationships\nConforms To\nMusicDeveloperTokenProvider\nSendable\nSee Also\nToken management\ntypealias MusicTokenProvider\nAn object that music requests use to access Apple Music API.\nprotocol MusicDeveloperTokenProvider\nA set of methods that music requests use to access Apple Music API.\nclass MusicUserTokenProvider\nA class that music requests use to fetch user tokens your app requires to access Apple Music API.\nstruct MusicTokenRequestOptions\nOptions that music requests pass into token provider methods to fetch a required token for accessing Apple Music API.\nenum MusicTokenRequestError\nAn error that the token provider or music requests can throw upon requesting any token necessary for accessing Apple Music API."
  },
  {
    "title": "request()",
    "url": "https://developer.apple.com/documentation/musickit/musicauthorization/request()",
    "html": "Discussion\n\nBefore using any other MusicKit API in your app, make sure the user grants your app access to their Apple Music data, You can do this either by comparing currentStatus to MusicAuthorization.Status.authorized, or by simply calling request() regardless of the current authorization status value. Calling request() results in presenting a standard user consent dialog to the user when necessary.\n\nRequesting authorization to use MusicKit requires the inclusion of a short description of the app’s reason for using MusicKit. You need to add this purpose string to the app’s Info.plist file using the NSAppleMusicUsageDescription key."
  },
  {
    "title": "MusicAuthorization.Status",
    "url": "https://developer.apple.com/documentation/musickit/musicauthorization/status",
    "html": "Topics\nEnumeration Cases\ncase authorized\nThe user granted permission for the current app to use MusicKit.\ncase denied\nThe user denied permission for the current app to use MusicKit.\ncase notDetermined\nThe user has yet to decide whether to authorize the current app to use MusicKit.\ncase restricted\nApps on this device can’t access MusicKit in a way that the user can’t change.\nInitializers\ninit?(rawValue: String)\nCreates a new instance with the specified raw value.\nInstance Properties\nvar rawValue: String\nThe corresponding value of the raw type.\nType Aliases\ntypealias RawValue\nThe raw type that can be used to represent all values of the conforming type.\nDefault Implementations\nCustomStringConvertible Implementations\nEquatable Implementations\nRawRepresentable Implementations\nRelationships\nConforms To\nCustomStringConvertible\nEquatable\nHashable\nRawRepresentable\nSendable"
  },
  {
    "title": "id",
    "url": "https://developer.apple.com/documentation/musickit/musicvideofilter/id",
    "html": "Required"
  },
  {
    "title": "ContentRating",
    "url": "https://developer.apple.com/documentation/musickit/contentrating",
    "html": "Overview\n\nA nil value means no rating is available for this resource.\n\nTopics\nOperators\nstatic func == (ContentRating, ContentRating) -> Bool\nReturns a Boolean value indicating whether two values are equal.\nEnumeration Cases\ncase clean\ncase explicit\nInitializers\ninit(from: any Decoder) throws\nCreates a new instance by decoding from the given decoder.\nInstance Properties\nvar hashValue: Int\nThe hash value.\nInstance Methods\nfunc encode(to: any Encoder) throws\nEncodes this value into the given encoder.\nfunc hash(into: inout Hasher)\nHashes the essential components of this value by feeding them into the given hasher.\nDefault Implementations\nEquatable Implementations\nRelationships\nConforms To\nDecodable\nEncodable\nEquatable\nHashable\nSendable\nSee Also\nMusic Item Attributes\nstruct EditorialNotes\nAn object that represents editorial notes.\nstruct PreviewAsset\nAn object that represents a preview for resources."
  },
  {
    "title": "Song",
    "url": "https://developer.apple.com/documentation/musickit/song",
    "html": "Topics\nOperators\nstatic func == (Song, Song) -> Bool\nReturns a Boolean value indicating whether two values are equal.\nInstance Properties\nvar albumTitle: String?\nThe title of the album the song appears on.\nvar albums: MusicItemCollection<Album>?\nThe song’s associated albums.\nvar artistName: String\nThe artist’s name.\nvar artistURL: URL?\nThe artist’s URL.\nvar artists: MusicItemCollection<Artist>?\nThe song’s associated artists.\nvar artwork: Artwork?\nThe artwork for the song.\nvar attribution: String?\nFor classical music only, the name of the artist or composer to attribute to the song.\nvar audioVariants: [AudioVariant]?\nThe variants that indicate the quality of audio available for the song.\nvar composerName: String?\nThe name of the song’s composer.\nvar composers: MusicItemCollection<Artist>?\nThe song’s composers.\nvar contentRating: ContentRating?\nThe rating of the content.\nvar discNumber: Int?\nThe number of the disc the song appears on.\nvar duration: TimeInterval?\nThe duration of the song.\nvar editorialNotes: EditorialNotes?\nThe editorial notes for the song.\nvar genreNames: [String]\nThe names of the song’s associated genres.\nvar genres: MusicItemCollection<Genre>?\nThe song’s associated genres.\nvar hasLyrics: Bool\nA Boolean value that indicates whether the song has lyrics available in the catalog. If true, the song has lyrics available; otherwise, it doesn’t.\nvar hashValue: Int\nThe hash value.\nlet id: MusicItemID\nThe unique identifier for the song.\nvar isAppleDigitalMaster: Bool?\nA Boolean value that indicates whether the song is an Apple Digital Master.\nvar isrc: String?\nThe International Standard Recording Code (ISRC) for the song.\nvar lastPlayedDate: Date?\nThe date when the user last played the song on this device.\nvar libraryAddedDate: Date?\nThe date when the user added the song to the library.\nvar movementCount: Int?\nFor classical music only, the movement count of this song.\nvar movementName: String?\nFor classical music only, the movement name of this song.\nvar movementNumber: Int?\nFor classical music only, the movement number of this song.\nvar musicVideos: MusicItemCollection<MusicVideo>?\nThe song’s associated music videos.\nvar playCount: Int?\nThe number of times the user played the song.\nvar playParameters: PlayParameters?\nThe parameters to use to play the song.\nvar previewAssets: [PreviewAsset]?\nThe preview assets for the song.\nvar releaseDate: Date?\nThe release date (or expected prerelease date) for the song.\nvar station: Station?\nThe song’s associated station.\nvar title: String\nThe title of the song.\nvar trackNumber: Int?\nThe song’s number in the album’s track list.\nvar url: URL?\nThe URL for the song.\nvar workName: String?\nFor classical music only, the name of the associated work.\nInstance Methods\nfunc hash(into: inout Hasher)\nHashes the essential components of this value by feeding them into the given hasher.\nType Aliases\ntypealias ID\nA type representing the stable identity of the entity associated with an instance.\nDefault Implementations\nCustomDebugStringConvertible Implementations\nCustomStringConvertible Implementations\nDecodable Implementations\nEncodable Implementations\nEquatable Implementations\nFilterableMusicItem Implementations\nMusicItem Implementations\nMusicLibraryRequestable Implementations\nRelationships\nConforms To\nCustomDebugStringConvertible\nCustomStringConvertible\nDecodable\nEncodable\nEquatable\nFilterableMusicItem\nHashable\nIdentifiable\nMusicCatalogChartRequestable\nMusicCatalogSearchable\nMusicItem\nMusicLibraryAddable\nMusicLibraryRequestable\nMusicLibrarySearchable\nMusicPlaylistAddable\nMusicPropertyContainer\nMusicRecentlyPlayedRequestable\nPlayableMusicItem\nSendable\nSee Also\nMusic Items\nstruct Album\nA music item that represents an album.\nstruct Artist\nA music item that represents an artist.\nstruct Curator\nA music item that represents a curator.\nstruct Genre\nA music item that represents a genre.\nstruct MusicVideo\nA music item that represents a music video.\nstruct Playlist\nA music item that represents a playlist.\nstruct RadioShow\nA music item that represents a radio show.\nstruct RecordLabel\nA music item that represents a record label.\nstruct Station\nA music item that represents a station.\nenum Track\nA music item that represents a track."
  },
  {
    "title": "id",
    "url": "https://developer.apple.com/documentation/musickit/genrefilter/id",
    "html": "Required"
  },
  {
    "title": "EditorialNotes",
    "url": "https://developer.apple.com/documentation/musickit/editorialnotes",
    "html": "Topics\nOperators\nstatic func == (EditorialNotes, EditorialNotes) -> Bool\nReturns a Boolean value indicating whether two values are equal.\nInstance Properties\nvar hashValue: Int\nThe hash value.\nlet name: String?\nThe name for the editorial notes.\nlet short: String?\nAbbreviated notes that display inline or when the content appears alongside other content.\nlet standard: String?\nNotes that appear when the content displays prominently.\nlet tagline: String?\nThe tag line for the editorial notes.\nInstance Methods\nfunc hash(into: inout Hasher)\nHashes the essential components of this value by feeding them into the given hasher.\nDefault Implementations\nCustomDebugStringConvertible Implementations\nCustomStringConvertible Implementations\nDecodable Implementations\nEncodable Implementations\nEquatable Implementations\nRelationships\nConforms To\nCustomDebugStringConvertible\nCustomStringConvertible\nDecodable\nEncodable\nEquatable\nHashable\nSendable\nSee Also\nMusic Item Attributes\nenum ContentRating\nThe rating of the content that potentially plays while playing a resource.\nstruct PreviewAsset\nAn object that represents a preview for resources."
  },
  {
    "title": "Station",
    "url": "https://developer.apple.com/documentation/musickit/station",
    "html": "Topics\nOperators\nstatic func == (Station, Station) -> Bool\nReturns a Boolean value indicating whether two values are equal.\nInstance Properties\nvar artwork: Artwork?\nThe station artwork.\nvar contentRating: ContentRating?\nThe rating of the content that potentially plays while playing the station.\nvar duration: TimeInterval?\nThe duration of the stream.\nvar editorialNotes: EditorialNotes?\nThe notes about the station that appear in the Music app.\nvar episodeNumber: Int?\nThe episode number of the station.\nvar hashValue: Int\nThe hash value.\nlet id: MusicItemID\nThe unique identifier for the station.\nvar isLive: Bool\nA Boolean value that indicates whether the station is live.\nvar name: String\nThe name of the station.\nvar playParameters: PlayParameters?\nThe parameters to use to play the station.\nvar stationProviderName: String?\nThe name of the entity that provides the station.\nvar url: URL?\nThe URL for the station.\nInstance Methods\nfunc hash(into: inout Hasher)\nHashes the essential components of this value by feeding them into the given hasher.\nType Aliases\ntypealias ID\nA type representing the stable identity of the entity associated with an instance.\nDefault Implementations\nCustomDebugStringConvertible Implementations\nCustomStringConvertible Implementations\nDecodable Implementations\nEncodable Implementations\nEquatable Implementations\nFilterableMusicItem Implementations\nMusicItem Implementations\nRelationships\nConforms To\nCustomDebugStringConvertible\nCustomStringConvertible\nDecodable\nEncodable\nEquatable\nFilterableMusicItem\nHashable\nIdentifiable\nMusicCatalogSearchable\nMusicItem\nMusicPersonalRecommendationItem\nMusicPropertyContainer\nMusicRecentlyPlayedRequestable\nPlayableMusicItem\nSendable\nSee Also\nMusic Items\nstruct Album\nA music item that represents an album.\nstruct Artist\nA music item that represents an artist.\nstruct Curator\nA music item that represents a curator.\nstruct Genre\nA music item that represents a genre.\nstruct MusicVideo\nA music item that represents a music video.\nstruct Playlist\nA music item that represents a playlist.\nstruct RadioShow\nA music item that represents a radio show.\nstruct RecordLabel\nA music item that represents a record label.\nstruct Song\nA music item that represents a song.\nenum Track\nA music item that represents a track."
  },
  {
    "title": "MusicVideo",
    "url": "https://developer.apple.com/documentation/musickit/musicvideo",
    "html": "Topics\nOperators\nstatic func == (MusicVideo, MusicVideo) -> Bool\nReturns a Boolean value indicating whether two values are equal.\nInstance Properties\nvar albumTitle: String?\nThe title of the album the music video appears on.\nvar albums: MusicItemCollection<Album>?\nThe music video’s associated albums.\nvar artistName: String\nThe artist’s name.\nvar artistURL: URL?\nThe artist’s URL.\nvar artists: MusicItemCollection<Artist>?\nThe music video’s associated artists.\nvar artwork: Artwork?\nThe artwork for the music video.\nvar contentRating: ContentRating?\nThe rating of the content.\nvar duration: TimeInterval?\nThe duration of the music video.\nvar editorialNotes: EditorialNotes?\nThe editorial notes for the music video.\nvar genreNames: [String]\nThe names of the music video’s associated genres.\nvar genres: MusicItemCollection<Genre>?\nThe music video’s associated genres.\nvar has4K: Bool?\nA Boolean value that indicates whether the music video has 4K content.\nvar hasHDR: Bool?\nA Boolean value that indicates whether the music video has HDR10-encoded content.\nvar hashValue: Int\nThe hash value.\nlet id: MusicItemID\nThe unique identifier for the music video.\nvar isPreview: Bool\nA Boolean value that indicates whether this content corresponds to a subscription video preview.\nvar isrc: String?\nThe International Standard Recording Code (ISRC) for the music video.\nvar lastPlayedDate: Date?\nThe date when the user last played the music video on this device.\nvar libraryAddedDate: Date?\nThe date when the user added the music video to the library.\nvar moreByArtist: MusicItemCollection<MusicVideo>?\nA collection of additional music videos by the artist.\nvar moreInGenre: MusicItemCollection<MusicVideo>?\nA collection of music videos in the same genre as this music video.\nvar playCount: Int?\nThe number of times the user played the music video.\nvar playParameters: PlayParameters?\nThe parameters to use to play the music video.\nvar previewAssets: [PreviewAsset]?\nThe preview assets for the music video.\nvar releaseDate: Date?\nThe release date (or expected prerelease date) for the music video.\nvar songs: MusicItemCollection<Song>?\nThe music video’s associated songs.\nvar title: String\nThe title of the music video.\nvar trackNumber: Int?\nThe music video’s number in the album’s track list.\nvar url: URL?\nThe URL for the music video.\nvar workName: String?\nFor classical music only, the name of the associated work.\nInstance Methods\nfunc hash(into: inout Hasher)\nHashes the essential components of this value by feeding them into the given hasher.\nType Aliases\ntypealias ID\nA type representing the stable identity of the entity associated with an instance.\nDefault Implementations\nCustomDebugStringConvertible Implementations\nCustomStringConvertible Implementations\nDecodable Implementations\nEncodable Implementations\nEquatable Implementations\nFilterableMusicItem Implementations\nMusicItem Implementations\nMusicLibraryRequestable Implementations\nRelationships\nConforms To\nCustomDebugStringConvertible\nCustomStringConvertible\nDecodable\nEncodable\nEquatable\nFilterableMusicItem\nHashable\nIdentifiable\nMusicCatalogChartRequestable\nMusicCatalogSearchable\nMusicItem\nMusicLibraryAddable\nMusicLibraryRequestable\nMusicLibrarySearchable\nMusicPlaylistAddable\nMusicPropertyContainer\nMusicRecentlyPlayedRequestable\nSendable\nSee Also\nMusic Items\nstruct Album\nA music item that represents an album.\nstruct Artist\nA music item that represents an artist.\nstruct Curator\nA music item that represents a curator.\nstruct Genre\nA music item that represents a genre.\nstruct Playlist\nA music item that represents a playlist.\nstruct RadioShow\nA music item that represents a radio show.\nstruct RecordLabel\nA music item that represents a record label.\nstruct Song\nA music item that represents a song.\nstruct Station\nA music item that represents a station.\nenum Track\nA music item that represents a track."
  },
  {
    "title": "RecordLabel",
    "url": "https://developer.apple.com/documentation/musickit/recordlabel",
    "html": "Topics\nOperators\nstatic func == (RecordLabel, RecordLabel) -> Bool\nReturns a Boolean value indicating whether two values are equal.\nInstance Properties\nvar artwork: Artwork?\nThe record label’s artwork.\nvar hashValue: Int\nThe hash value.\nlet id: MusicItemID\nThe unique identifier for the record label.\nvar latestReleases: MusicItemCollection<Album>?\nA collection of the most recent releases for the record label.\nvar name: String\nThe name of the record label.\nvar shortDescription: String?\nAn abbreviated description to show inline or when the record label appears alongside other content.\nvar standardDescription: String?\nA description to show when the record label is prominently displayed.\nvar topReleases: MusicItemCollection<Album>?\nA collection of top releases for the record label.\nvar url: URL?\nThe URL for the record label.\nInstance Methods\nfunc hash(into: inout Hasher)\nHashes the essential components of this value by feeding them into the given hasher.\nType Aliases\ntypealias ID\nA type representing the stable identity of the entity associated with an instance.\nDefault Implementations\nCustomDebugStringConvertible Implementations\nCustomStringConvertible Implementations\nDecodable Implementations\nEncodable Implementations\nEquatable Implementations\nFilterableMusicItem Implementations\nMusicItem Implementations\nRelationships\nConforms To\nCustomDebugStringConvertible\nCustomStringConvertible\nDecodable\nEncodable\nEquatable\nFilterableMusicItem\nHashable\nIdentifiable\nMusicCatalogSearchable\nMusicItem\nMusicPropertyContainer\nSendable\nSee Also\nMusic Items\nstruct Album\nA music item that represents an album.\nstruct Artist\nA music item that represents an artist.\nstruct Curator\nA music item that represents a curator.\nstruct Genre\nA music item that represents a genre.\nstruct MusicVideo\nA music item that represents a music video.\nstruct Playlist\nA music item that represents a playlist.\nstruct RadioShow\nA music item that represents a radio show.\nstruct Song\nA music item that represents a song.\nstruct Station\nA music item that represents a station.\nenum Track\nA music item that represents a track."
  },
  {
    "title": "Curator",
    "url": "https://developer.apple.com/documentation/musickit/curator",
    "html": "Topics\nOperators\nstatic func == (Curator, Curator) -> Bool\nReturns a Boolean value indicating whether two values are equal.\nInstance Properties\nvar artwork: Artwork?\nThe curator artwork.\nvar editorialNotes: EditorialNotes?\nThe notes about the curator that appear in the Music catalog.\nvar hashValue: Int\nThe hash value.\nlet id: MusicItemID\nThe unique identifier for the curator.\nvar kind: Curator.Kind\nThe kind of curator.\nvar name: String\nThe name of the curator.\nvar playlists: MusicItemCollection<Playlist>?\nThe curator’s associated playlists.\nvar url: URL?\nThe URL for the curator.\nInstance Methods\nfunc hash(into: inout Hasher)\nHashes the essential components of this value by feeding them into the given hasher.\nType Aliases\ntypealias ID\nA type representing the stable identity of the entity associated with an instance.\nEnumerations\nenum Kind\nThe available kinds of curators.\nDefault Implementations\nCustomDebugStringConvertible Implementations\nCustomStringConvertible Implementations\nDecodable Implementations\nEncodable Implementations\nEquatable Implementations\nFilterableMusicItem Implementations\nMusicItem Implementations\nRelationships\nConforms To\nCustomDebugStringConvertible\nCustomStringConvertible\nDecodable\nEncodable\nEquatable\nFilterableMusicItem\nHashable\nIdentifiable\nMusicCatalogSearchable\nMusicItem\nMusicPropertyContainer\nSendable\nSee Also\nMusic Items\nstruct Album\nA music item that represents an album.\nstruct Artist\nA music item that represents an artist.\nstruct Genre\nA music item that represents a genre.\nstruct MusicVideo\nA music item that represents a music video.\nstruct Playlist\nA music item that represents a playlist.\nstruct RadioShow\nA music item that represents a radio show.\nstruct RecordLabel\nA music item that represents a record label.\nstruct Song\nA music item that represents a song.\nstruct Station\nA music item that represents a station.\nenum Track\nA music item that represents a track."
  },
  {
    "title": "Playlist",
    "url": "https://developer.apple.com/documentation/musickit/playlist",
    "html": "Topics\nStructures\nstruct Entry\nA music item that represents a playlist entry.\nOperators\nstatic func == (Playlist, Playlist) -> Bool\nReturns a Boolean value indicating whether two values are equal.\nInstance Properties\nvar artwork: Artwork?\nThe artwork for the playlist.\nvar curator: Curator?\nThe playlist’s associated curator.\nvar curatorName: String?\nThe display name for the playlist’s curator.\nvar entries: MusicItemCollection<Playlist.Entry>?\nThe entries in the playlist\nvar featuredArtists: MusicItemCollection<Artist>?\nA collection of featured artists for this playlist.\nvar hashValue: Int\nThe hash value.\nlet id: MusicItemID\nThe unique identifier for the playlist.\nvar isChart: Bool?\nA Boolean value that indicates whether the playlist represents a popularity chart.\nvar kind: Playlist.Kind?\nThe kind of playlist.\nvar lastModifiedDate: Date?\nThe playlist’s most recent modification date.\nvar lastPlayedDate: Date?\nThe date when the user last played the playlist on this device.\nvar libraryAddedDate: Date?\nThe date when the user added the playlist to the library.\nvar moreByCurator: MusicItemCollection<Playlist>?\nA collection of additional playlists by the same curator.\nvar name: String\nThe name of the playlist.\nvar playParameters: PlayParameters?\nThe parameters to use to play the tracks in the playlist.\nvar radioShow: RadioShow?\nThe playlist’s associated radio show.\nvar shortDescription: String?\nAn abbreviated description to show inline or when the playlist appears alongside other content.\nvar standardDescription: String?\nA description to show when the playlist is prominently displayed.\nvar tracks: MusicItemCollection<Track>?\nThe tracks in the playlist.\nvar url: URL?\nThe URL for the playlist.\nInstance Methods\nfunc hash(into: inout Hasher)\nHashes the essential components of this value by feeding them into the given hasher.\nType Aliases\ntypealias ID\nA type representing the stable identity of the entity associated with an instance.\nEnumerations\nenum Kind\nThe available kinds of playlists.\nDefault Implementations\nCustomDebugStringConvertible Implementations\nCustomStringConvertible Implementations\nDecodable Implementations\nEncodable Implementations\nEquatable Implementations\nFilterableMusicItem Implementations\nMusicItem Implementations\nMusicLibraryRequestable Implementations\nRelationships\nConforms To\nCustomDebugStringConvertible\nCustomStringConvertible\nDecodable\nEncodable\nEquatable\nFilterableMusicItem\nHashable\nIdentifiable\nMusicCatalogChartRequestable\nMusicCatalogSearchable\nMusicItem\nMusicLibraryAddable\nMusicLibraryRequestable\nMusicLibrarySearchable\nMusicLibrarySectionRequestable\nMusicPersonalRecommendationItem\nMusicPlaylistAddable\nMusicPropertyContainer\nPlayableMusicItem\nSendable\nSee Also\nMusic Items\nstruct Album\nA music item that represents an album.\nstruct Artist\nA music item that represents an artist.\nstruct Curator\nA music item that represents a curator.\nstruct Genre\nA music item that represents a genre.\nstruct MusicVideo\nA music item that represents a music video.\nstruct RadioShow\nA music item that represents a radio show.\nstruct RecordLabel\nA music item that represents a record label.\nstruct Song\nA music item that represents a song.\nstruct Station\nA music item that represents a station.\nenum Track\nA music item that represents a track."
  },
  {
    "title": "RadioShow",
    "url": "https://developer.apple.com/documentation/musickit/radioshow",
    "html": "Topics\nOperators\nstatic func == (RadioShow, RadioShow) -> Bool\nReturns a Boolean value indicating whether two values are equal.\nInstance Properties\nvar artwork: Artwork?\nThe radio show artwork.\nvar editorialNotes: EditorialNotes?\nThe notes about the radio show that appear in the Music catalog.\nvar hashValue: Int\nThe hash value.\nvar hostName: String?\nThe name of the host for the radio show.\nlet id: MusicItemID\nThe unique identifier for the radio show.\nvar name: String\nThe name of the radio show.\nvar playlists: MusicItemCollection<Playlist>?\nThe radio show’s associated playlists.\nvar url: URL?\nThe URL for the radio show.\nInstance Methods\nfunc hash(into: inout Hasher)\nHashes the essential components of this value by feeding them into the given hasher.\nType Aliases\ntypealias ID\nA type representing the stable identity of the entity associated with an instance.\nDefault Implementations\nCustomDebugStringConvertible Implementations\nCustomStringConvertible Implementations\nDecodable Implementations\nEncodable Implementations\nEquatable Implementations\nFilterableMusicItem Implementations\nMusicItem Implementations\nRelationships\nConforms To\nCustomDebugStringConvertible\nCustomStringConvertible\nDecodable\nEncodable\nEquatable\nFilterableMusicItem\nHashable\nIdentifiable\nMusicCatalogSearchable\nMusicItem\nMusicPropertyContainer\nSendable\nSee Also\nMusic Items\nstruct Album\nA music item that represents an album.\nstruct Artist\nA music item that represents an artist.\nstruct Curator\nA music item that represents a curator.\nstruct Genre\nA music item that represents a genre.\nstruct MusicVideo\nA music item that represents a music video.\nstruct Playlist\nA music item that represents a playlist.\nstruct RecordLabel\nA music item that represents a record label.\nstruct Song\nA music item that represents a song.\nstruct Station\nA music item that represents a station.\nenum Track\nA music item that represents a track."
  },
  {
    "title": "Genre",
    "url": "https://developer.apple.com/documentation/musickit/genre",
    "html": "Topics\nOperators\nstatic func == (Genre, Genre) -> Bool\nReturns a Boolean value indicating whether two values are equal.\nInstance Properties\nvar hashValue: Int\nThe hash value.\nlet id: MusicItemID\nThe unique identifier for the genre.\nvar libraryAddedDate: Date?\nThe date when the user added the genre to the library.\nvar name: String\nThe localized name of the genre.\nvar parent: Genre?\nThe parent genre, if any.\nInstance Methods\nfunc hash(into: inout Hasher)\nHashes the essential components of this value by feeding them into the given hasher.\nType Aliases\ntypealias ID\nA type representing the stable identity of the entity associated with an instance.\nDefault Implementations\nCustomDebugStringConvertible Implementations\nCustomStringConvertible Implementations\nDecodable Implementations\nEncodable Implementations\nEquatable Implementations\nFilterableMusicItem Implementations\nMusicItem Implementations\nMusicLibraryRequestable Implementations\nRelationships\nConforms To\nCustomDebugStringConvertible\nCustomStringConvertible\nDecodable\nEncodable\nEquatable\nFilterableMusicItem\nHashable\nIdentifiable\nMusicCatalogTopLevelResourceRequesting\nMusicItem\nMusicLibraryRequestable\nMusicLibrarySectionRequestable\nMusicPropertyContainer\nSendable\nSee Also\nMusic Items\nstruct Album\nA music item that represents an album.\nstruct Artist\nA music item that represents an artist.\nstruct Curator\nA music item that represents a curator.\nstruct MusicVideo\nA music item that represents a music video.\nstruct Playlist\nA music item that represents a playlist.\nstruct RadioShow\nA music item that represents a radio show.\nstruct RecordLabel\nA music item that represents a record label.\nstruct Song\nA music item that represents a song.\nstruct Station\nA music item that represents a station.\nenum Track\nA music item that represents a track."
  },
  {
    "title": "MusicPropertySource",
    "url": "https://developer.apple.com/documentation/musickit/musicpropertysource",
    "html": "Topics\nOperators\nstatic func == (MusicPropertySource, MusicPropertySource) -> Bool\nReturns a Boolean value indicating whether two values are equal.\nEnumeration Cases\ncase catalog\nThe source representing the Apple Music catalog.\ncase library\nThe source representing the user’s music library.\nInitializers\ninit(from: any Decoder) throws\nCreates a new instance by decoding from the given decoder.\nInstance Properties\nvar hashValue: Int\nThe hash value.\nInstance Methods\nfunc encode(to: any Encoder) throws\nEncodes this value into the given encoder.\nfunc hash(into: inout Hasher)\nHashes the essential components of this value by feeding them into the given hasher.\nType Aliases\ntypealias AllCases\nA type that can represent a collection of all values of this type.\nType Properties\nstatic var allCases: [MusicPropertySource]\nA collection of all values of this type.\nDefault Implementations\nEquatable Implementations\nRelationships\nConforms To\nCaseIterable\nDecodable\nEncodable\nEquatable\nHashable\nSendable"
  },
  {
    "title": "MusicCatalogChartKind",
    "url": "https://developer.apple.com/documentation/musickit/musiccatalogchartkind",
    "html": "Topics\nOperators\nstatic func == (MusicCatalogChartKind, MusicCatalogChartKind) -> Bool\nReturns a Boolean value indicating whether two values are equal.\nEnumeration Cases\ncase cityTop\ncase dailyGlobalTop\ncase mostPlayed\nInstance Properties\nvar hashValue: Int\nThe hash value.\nInstance Methods\nfunc hash(into: inout Hasher)\nHashes the essential components of this value by feeding them into the given hasher.\nType Aliases\ntypealias AllCases\nA type that can represent a collection of all values of this type.\nType Properties\nstatic var allCases: [MusicCatalogChartKind]\nA collection of all values of this type.\nDefault Implementations\nCustomStringConvertible Implementations\nDecodable Implementations\nEncodable Implementations\nEquatable Implementations\nRelationships\nConforms To\nCaseIterable\nCustomStringConvertible\nDecodable\nEncodable\nEquatable\nHashable\nSendable"
  },
  {
    "title": "RecentlyPlayedMusicItem",
    "url": "https://developer.apple.com/documentation/musickit/recentlyplayedmusicitem",
    "html": "Topics\nOperators\nstatic func == (RecentlyPlayedMusicItem, RecentlyPlayedMusicItem) -> Bool\nReturns a Boolean value indicating whether two values are equal.\nEnumeration Cases\ncase album(Album)\nAn item that corresponds to an album.\ncase playlist(Playlist)\nAn item that corresponds to a playlist.\ncase station(Station)\nAn item that corresponds to a station.\nInstance Properties\nvar artwork: Artwork?\nThe artwork of this item.\nvar hashValue: Int\nThe hash value.\nvar id: MusicItemID\nThe unique identifier of this item.\nvar playParameters: PlayParameters?\nThe parameters to use to play this item.\nvar subtitle: String?\nThe subtitle of this item.\nvar title: String\nThe title of this item.\nInstance Methods\nfunc hash(into: inout Hasher)\nHashes the essential components of this value by feeding them into the given hasher.\nType Aliases\ntypealias ID\nA type representing the stable identity of the entity associated with an instance.\nDefault Implementations\nCustomDebugStringConvertible Implementations\nCustomStringConvertible Implementations\nDecodable Implementations\nEncodable Implementations\nEquatable Implementations\nRelationships\nConforms To\nCustomDebugStringConvertible\nCustomStringConvertible\nDecodable\nEncodable\nEquatable\nHashable\nIdentifiable\nMusicItem\nMusicRecentlyPlayedRequestable\nPlayableMusicItem\nSendable"
  },
  {
    "title": "MusicPersonalRecommendation",
    "url": "https://developer.apple.com/documentation/musickit/musicpersonalrecommendation",
    "html": "Topics\nOperators\nstatic func == (MusicPersonalRecommendation, MusicPersonalRecommendation) -> Bool\nReturns a Boolean value indicating whether two values are equal.\nInstance Properties\nvar albums: MusicItemCollection<Album>\nThe albums for the personal recommendation.\nvar hashValue: Int\nThe hash value.\nlet id: MusicItemID\nThe unique identifier for the personal recommendation.\nvar items: MusicItemCollection<MusicPersonalRecommendation.Item>\nThe items for the personal recommendation.\nlet nextRefreshDate: Date?\nThe next date for refreshing the personal recommendation.\nvar playlists: MusicItemCollection<Playlist>\nThe playlists for the personal recommendation.\nlet reason: String?\nThe reason for the personal recommendation.\nvar stations: MusicItemCollection<Station>\nThe stations for the personal recommendation.\nlet title: String?\nThe title for the personal recommendation.\nvar types: [any MusicPersonalRecommendationItem.Type]\nThe types of items in the personal recommendation.\nInstance Methods\nfunc hash(into: inout Hasher)\nHashes the essential components of this value by feeding them into the given hasher.\nType Aliases\ntypealias ID\nA type representing the stable identity of the entity associated with an instance.\nEnumerations\nenum Item\nAn item that represents an album, a playlist, or a station for a personal recommendation.\nDefault Implementations\nCustomDebugStringConvertible Implementations\nCustomStringConvertible Implementations\nDecodable Implementations\nEncodable Implementations\nEquatable Implementations\nRelationships\nConforms To\nCustomDebugStringConvertible\nCustomStringConvertible\nDecodable\nEncodable\nEquatable\nHashable\nIdentifiable\nMusicItem\nSendable"
  },
  {
    "title": "AudioVariant",
    "url": "https://developer.apple.com/documentation/musickit/audiovariant",
    "html": "Topics\nOperators\nstatic func == (AudioVariant, AudioVariant) -> Bool\nReturns a Boolean value indicating whether two values are equal.\nEnumeration Cases\ncase dolbyAtmos\nDolby Atmos is an immersive audio experience that surrounds you with sound from all sides, including above.\ncase dolbyAudio\nDolby Audio is a surround sound format that includes Dolby 5.1 and 7.1.\ncase highResolutionLossless\nHi-Res Lossless uses Apple Lossless Audio Codec (ALAC) for bit-for-bit accuracy up to 24-bit/192 kHz.\ncase lossless\nLossless uses Apple Lossless Audio Codec (ALAC) for bit-for-bit accuracy up to 24-bit/48 kHz.\ncase lossyStereo\nLossy stereo uses compression used to store sound data.\ncase spatialAudio\nSpatial audio is a fallback mode if the content is Dolby Atmos or Dolby Audio, but hardware capabilities don’t support them.\nInstance Properties\nvar hashValue: Int\nThe hash value.\nInstance Methods\nfunc hash(into: inout Hasher)\nHashes the essential components of this value by feeding them into the given hasher.\nType Aliases\ntypealias AllCases\nA type that can represent a collection of all values of this type.\nType Properties\nstatic var allCases: [AudioVariant]\nA collection of all values of this type.\nDefault Implementations\nCustomStringConvertible Implementations\nDecodable Implementations\nEncodable Implementations\nEquatable Implementations\nRelationships\nConforms To\nCaseIterable\nCustomStringConvertible\nDecodable\nEncodable\nEquatable\nHashable\nSendable"
  },
  {
    "title": "Artist",
    "url": "https://developer.apple.com/documentation/musickit/artist",
    "html": "Topics\nOperators\nstatic func == (Artist, Artist) -> Bool\nReturns a Boolean value indicating whether two values are equal.\nInstance Properties\nvar albums: MusicItemCollection<Album>?\nThe artist’s associated albums.\nvar appearsOnAlbums: MusicItemCollection<Album>?\nA collection of albums from other artists that this artist appears on.\nvar artwork: Artwork?\nThe artist artwork.\nvar compilationAlbums: MusicItemCollection<Album>?\nA collection of compilation albums that include tracks by the artist.\nvar editorialNotes: EditorialNotes?\nThe notes about the artist that appear in the Music catalog.\nvar featuredAlbums: MusicItemCollection<Album>?\nA collection of featured albums of the artist.\nvar featuredPlaylists: MusicItemCollection<Playlist>?\nA collection of the artist’s associated playlists.\nvar fullAlbums: MusicItemCollection<Album>?\nA collection of the artist’s full-release albums.\nvar genreNames: [String]?\nThe names of this artist’s associated genres.\nvar genres: MusicItemCollection<Genre>?\nThe artist’s associated genres.\nvar hashValue: Int\nThe hash value.\nlet id: MusicItemID\nThe unique identifier for the artist.\nvar latestRelease: Album?\nThe artist’s most recent album.\nvar libraryAddedDate: Date?\nThe date when the user added the artist to the library.\nvar liveAlbums: MusicItemCollection<Album>?\nA collection of the artist’s live albums.\nvar musicVideos: MusicItemCollection<MusicVideo>?\nThe artist’s associated music videos.\nvar name: String\nThe name of the artist.\nvar playlists: MusicItemCollection<Playlist>?\nThe artist’s associated playlists.\nvar similarArtists: MusicItemCollection<Artist>?\nA collection of artists similar to this artist.\nvar singles: MusicItemCollection<Album>?\nA collection of the artist’s associated albums in the singles category.\nvar station: Station?\nThe artist’s associated station.\nvar topMusicVideos: MusicItemCollection<MusicVideo>?\nA collection of the artist’s top music videos.\nvar topSongs: MusicItemCollection<Song>?\nA collection of the artist’s top songs.\nvar url: URL?\nThe URL for the artist.\nInstance Methods\nfunc hash(into: inout Hasher)\nHashes the essential components of this value by feeding them into the given hasher.\nType Aliases\ntypealias ID\nA type representing the stable identity of the entity associated with an instance.\nDefault Implementations\nCustomDebugStringConvertible Implementations\nCustomStringConvertible Implementations\nDecodable Implementations\nEncodable Implementations\nEquatable Implementations\nFilterableMusicItem Implementations\nMusicItem Implementations\nMusicLibraryRequestable Implementations\nRelationships\nConforms To\nCustomDebugStringConvertible\nCustomStringConvertible\nDecodable\nEncodable\nEquatable\nFilterableMusicItem\nHashable\nIdentifiable\nMusicCatalogSearchable\nMusicItem\nMusicLibraryRequestable\nMusicLibrarySearchable\nMusicLibrarySectionRequestable\nMusicPropertyContainer\nSendable\nSee Also\nMusic Items\nstruct Album\nA music item that represents an album.\nstruct Curator\nA music item that represents a curator.\nstruct Genre\nA music item that represents a genre.\nstruct MusicVideo\nA music item that represents a music video.\nstruct Playlist\nA music item that represents a playlist.\nstruct RadioShow\nA music item that represents a radio show.\nstruct RecordLabel\nA music item that represents a record label.\nstruct Song\nA music item that represents a song.\nstruct Station\nA music item that represents a station.\nenum Track\nA music item that represents a track."
  },
  {
    "title": "MusicLibraryResponse",
    "url": "https://developer.apple.com/documentation/musickit/musiclibraryresponse",
    "html": "Topics\nInstance Properties\nlet items: MusicItemCollection<MusicItemType>\nA collection of items that match the filters on the originating library request.\nDefault Implementations\nCustomDebugStringConvertible Implementations\nCustomStringConvertible Implementations\nEquatable Implementations\nHashable Implementations\nRelationships\nConforms To\nCustomDebugStringConvertible\nCustomStringConvertible\nEquatable\nHashable\nSendable"
  },
  {
    "title": "MusicCatalogSearchSuggestionsResponse",
    "url": "https://developer.apple.com/documentation/musickit/musiccatalogsearchsuggestionsresponse",
    "html": "Topics\nStructures\nstruct Suggestion\nAn item that represents a suggestion in the search suggestions response.\nOperators\nstatic func == (MusicCatalogSearchSuggestionsResponse, MusicCatalogSearchSuggestionsResponse) -> Bool\nReturns a Boolean value indicating whether two values are equal.\nInstance Properties\nvar hashValue: Int\nThe hash value.\nlet suggestions: [MusicCatalogSearchSuggestionsResponse.Suggestion]\nA collection of suggested terms.\nlet topResults: MusicItemCollection<MusicCatalogSearchSuggestionsResponse.TopResult>\nA collection of top results.\nInstance Methods\nfunc hash(into: inout Hasher)\nHashes the essential components of this value by feeding them into the given hasher.\nType Aliases\ntypealias TopResult\nA type alias for an item that represents one of the top results in a catalog search suggestions response.\nDefault Implementations\nCustomDebugStringConvertible Implementations\nCustomStringConvertible Implementations\nDecodable Implementations\nEncodable Implementations\nEquatable Implementations\nRelationships\nConforms To\nCustomDebugStringConvertible\nCustomStringConvertible\nDecodable\nEncodable\nEquatable\nHashable\nSendable"
  },
  {
    "title": "MusicCatalogChart",
    "url": "https://developer.apple.com/documentation/musickit/musiccatalogchart",
    "html": "Topics\nInstance Properties\nlet id: String\nThe unique identifier for the catalog chart.\nlet items: MusicItemCollection<MusicItemType>\nThe items for the catalog chart.\nlet kind: MusicCatalogChartKind\nThe kind of catalog chart.\nlet title: String\nThe title for the catalog chart.\nType Aliases\ntypealias ID\nA type representing the stable identity of the entity associated with an instance.\nDefault Implementations\nCustomDebugStringConvertible Implementations\nCustomStringConvertible Implementations\nDecodable Implementations\nEncodable Implementations\nEquatable Implementations\nHashable Implementations\nRelationships\nConforms To\nCustomDebugStringConvertible\nCustomStringConvertible\nDecodable\nEncodable\nEquatable\nHashable\nIdentifiable\nSendable"
  },
  {
    "title": "MusicLibraryRequest",
    "url": "https://developer.apple.com/documentation/musickit/musiclibraryrequest",
    "html": "Topics\nInitializers\ninit()\nCreates a request to fetch items from the library.\nInstance Properties\nvar includeOnlyDownloadedContent: Bool\nA Boolean value that indicates whether the library response should only include items downloaded on the user’s device.\nvar limit: Int\nA limit for the number of items to return in the library response.\nvar offset: Int\nAn offset for the request.\nInstance Methods\nfunc filter(matching: KeyPath<MusicItemType.LibraryFilter, String?>, contains: String)\nFilters items by a given optional property that contains a specific string.\nfunc filter(matching: KeyPath<MusicItemType.LibraryFilter, String>, contains: String)\nFilters items by a given property that contains a specific string.\nfunc filter<RelatedMusicItemType>(matching: KeyPath<MusicItemType.LibraryFilter, MusicItemCollection<RelatedMusicItemType>?>, contains: RelatedMusicItemType)\nFilters items by a given relationship that matches a specific value.\nfunc filter<Value>(matching: KeyPath<MusicItemType.LibraryFilter, Value>, equalTo: Value)\nFilters items by a given property that matches a specific value.\nfunc filter<Value>(matching: KeyPath<MusicItemType.LibraryFilter, Value?>, equalTo: Value?)\nFilters items by a given optional property that matches a specific value.\nfunc filter<Value>(matching: KeyPath<MusicItemType.LibraryFilter, Value?>, memberOf: [Value?])\nFilters items by an optional property for an array of possible values.\nfunc filter<Value>(matching: KeyPath<MusicItemType.LibraryFilter, Value>, memberOf: [Value])\nFilters items by a property for an array of possible values.\nfunc filter(text: String)\nFilters items by a specific string.\nfunc response() async throws -> MusicLibraryResponse<MusicItemType>\nFetches items from the user’s music library.\nfunc sort<Value>(by: KeyPath<MusicItemType.LibrarySortProperties, Value>, ascending: Bool)\nSorts items by a specified property."
  },
  {
    "title": "MusicLibrarySection",
    "url": "https://developer.apple.com/documentation/musickit/musiclibrarysection",
    "html": "Overview\n\nYour app can access any property of the requested section type directly on this library section object.\n\nYour app can also access the items contained in a library section with the items property.\n\nTopics\nInstance Properties\nlet items: MusicItemCollection<MusicItemType>\nA collection of items that correspond to the children of the section.\nSubscripts\nsubscript<T>(dynamicMember _: KeyPath<SectionType, T>) -> T\nA subscript that allows your app to access any property of the requested section type directly on this library section object.\nDefault Implementations\nCustomDebugStringConvertible Implementations\nCustomStringConvertible Implementations\nEquatable Implementations\nHashable Implementations\nIdentifiable Implementations\nRelationships\nConforms To\nCustomDebugStringConvertible\nCustomStringConvertible\nEquatable\nHashable\nIdentifiable\nSendable"
  },
  {
    "title": "MusicLibrarySearchRequest",
    "url": "https://developer.apple.com/documentation/musickit/musiclibrarysearchrequest",
    "html": "Topics\nOperators\nstatic func == (MusicLibrarySearchRequest, MusicLibrarySearchRequest) -> Bool\nReturns a Boolean value indicating whether two values are equal.\nInitializers\ninit(term: String, types: [any MusicLibrarySearchable.Type])\nCreates a library search request for a specified search term and list of library searchable types.\nInstance Properties\nvar hashValue: Int\nThe hash value.\nvar includeTopResults: Bool\nA Boolean value that indicates whether to request top search results.\nvar limit: Int\nA limit for the number of items to return in the library search response.\nlet term: String\nThe search term for the request.\nvar types: [any MusicLibrarySearchable.Type]\nThe list of requested library searchable types.\nInstance Methods\nfunc hash(into: inout Hasher)\nHashes the essential components of this value by feeding them into the given hasher.\nfunc response() async throws -> MusicLibrarySearchResponse\nFetches items of the requested library searchable types that match the search term of the request.\nDefault Implementations\nEquatable Implementations\nRelationships\nConforms To\nEquatable\nHashable\nSendable"
  },
  {
    "title": "MusicRecentlyPlayedRequestable",
    "url": "https://developer.apple.com/documentation/musickit/musicrecentlyplayedrequestable",
    "html": "Relationships\nInherits From\nMusicItem\nSendable\nConforming Types\nMusicVideo\nRecentlyPlayedMusicItem\nSong\nStation\nTrack"
  },
  {
    "title": "init(_:width:)",
    "url": "https://developer.apple.com/documentation/musickit/artworkimage/init(_:width:)",
    "html": "Discussion\n\nThis initializer derives the URL for loading the artwork image from the Artwork instance and the specified sizing parameters, as well as the display scale for the current environment.\n\nThe loaded image and placeholder have constrained frames from these sizing parameters.\n\nIf you provide the width only, the artwork image calculates the height dimension as a proportional length according to the aspect ratio of the artwork."
  },
  {
    "title": "==(_:_:)",
    "url": "https://developer.apple.com/documentation/musickit/playparameters/==(_:_:)",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nEquality is the inverse of inequality. For any values a and b, a == b implies that a != b is false."
  },
  {
    "title": "body",
    "url": "https://developer.apple.com/documentation/musickit/artworkimage/body-swift.property",
    "html": "Discussion\n\nWhen you implement a custom view, you must implement a computed body property to provide the content for your view. Return a view that’s composed of built-in views that SwiftUI provides, plus other composite views that you’ve already defined:\n\nstruct MyView: View {\n    var body: some View {\n        Text(\"Hello, World!\")\n    }\n}\n\n\nFor more information about composing views and a view hierarchy, see doc:Declaring-a-Custom-View."
  },
  {
    "title": "hashValue",
    "url": "https://developer.apple.com/documentation/musickit/musicsubscription/hashvalue",
    "html": "Discussion\n\nHash values are not guaranteed to be equal across different executions of your program. Do not save hash values to use during a future execution.\n\nImportant\n\nhashValue is deprecated as a Hashable requirement. To conform to Hashable, implement the hash(into:) requirement instead. The compiler provides an implementation for hashValue for you."
  },
  {
    "title": "hashValue",
    "url": "https://developer.apple.com/documentation/musickit/playparameters/hashvalue",
    "html": "Discussion\n\nHash values are not guaranteed to be equal across different executions of your program. Do not save hash values to use during a future execution.\n\nImportant\n\nhashValue is deprecated as a Hashable requirement. To conform to Hashable, implement the hash(into:) requirement instead. The compiler provides an implementation for hashValue for you."
  },
  {
    "title": "ArtworkImage.Body",
    "url": "https://developer.apple.com/documentation/musickit/artworkimage/body-swift.typealias",
    "html": "Discussion\n\nWhen you create a custom view, Swift infers this type from your implementation of the required View/body-swift.property property."
  },
  {
    "title": "Decodable Implementations",
    "url": "https://developer.apple.com/documentation/musickit/playparameters/decodable-implementations",
    "html": "Topics\nInitializers\ninit(from: any Decoder) throws\nCreates a new instance by decoding from the given decoder."
  },
  {
    "title": "hash(into:)",
    "url": "https://developer.apple.com/documentation/musickit/playparameters/hash(into:)",
    "html": "Parameters\nhasher\n\nThe hasher to use when combining the components of this instance.\n\nDiscussion\n\nImplement this method to conform to the Hashable protocol. The components used for hashing must be the same as the components compared in your type’s == operator implementation. Call hasher.combine(_:) with each of these components.\n\nImportant\n\nIn your implementation of hash(into:), don’t call finalize() on the hasher instance provided, or replace it with a different instance. Doing so may become a compile-time error in the future."
  },
  {
    "title": "MusicSubscription.Updates",
    "url": "https://developer.apple.com/documentation/musickit/musicsubscription/updates",
    "html": "Topics\nStructures\nstruct Iterator\nAn iterator for the asynchronous sequence to use for observing updates to the current state of the user’s subscription to Apple Music.\nInstance Methods\nfunc makeAsyncIterator() -> MusicSubscription.Updates.Iterator\nCreates the asynchronous iterator that produces elements of this asynchronous sequence.\nType Aliases\ntypealias AsyncIterator\nThe type of asynchronous iterator that produces elements of this asynchronous sequence.\ntypealias Element\nThe type of element the asynchronous sequence produces.\nDefault Implementations\nAsyncSequence Implementations\nRelationships\nConforms To\nAsyncSequence"
  },
  {
    "title": "description",
    "url": "https://developer.apple.com/documentation/musickit/musicsubscription/description",
    "html": "Discussion\n\nCalling this property directly is discouraged. Instead, convert an instance of any type to a string by using the String(describing:) initializer. This initializer works with any type, and uses the custom description property for types that conform to CustomStringConvertible:\n\nstruct Point: CustomStringConvertible {\n    let x: Int, y: Int\n\n\n    var description: String {\n        return \"(\\(x), \\(y))\"\n    }\n}\n\n\nlet p = Point(x: 21, y: 30)\nlet s = String(describing: p)\nprint(s)\n// Prints \"(21, 30)\"\n\n\nThe conversion of p to a string in the assignment to s uses the Point type’s description property."
  },
  {
    "title": "Equatable Implementations",
    "url": "https://developer.apple.com/documentation/musickit/playparameters/equatable-implementations",
    "html": "Topics\nOperators\nstatic func != (Self, Self) -> Bool\nReturns a Boolean value indicating whether two values are not equal."
  },
  {
    "title": "==(_:_:)",
    "url": "https://developer.apple.com/documentation/musickit/musicsubscription/==(_:_:)",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nEquality is the inverse of inequality. For any values a and b, a == b implies that a != b is false."
  },
  {
    "title": "Encodable Implementations",
    "url": "https://developer.apple.com/documentation/musickit/playparameters/encodable-implementations",
    "html": "Topics\nInstance Methods\nfunc encode(to: any Encoder) throws\nEncodes this value into the given encoder."
  },
  {
    "title": "MusicLibrarySectionRequestable",
    "url": "https://developer.apple.com/documentation/musickit/musiclibrarysectionrequestable",
    "html": "Relationships\nConforming Types\nAlbum\nArtist\nGenre\nPlaylist\nTitledSection"
  },
  {
    "title": "MusicLibrarySearchable",
    "url": "https://developer.apple.com/documentation/musickit/musiclibrarysearchable",
    "html": "Relationships\nInherits From\nMusicItem\nSendable\nConforming Types\nAlbum\nArtist\nMusicVideo\nPlaylist\nSong"
  },
  {
    "title": "MusicPersonalRecommendationItem",
    "url": "https://developer.apple.com/documentation/musickit/musicpersonalrecommendationitem",
    "html": "Relationships\nInherits From\nMusicItem\nSendable\nConforming Types\nAlbum\nPlaylist\nStation"
  },
  {
    "title": "MusicLibraryRequestFilterValueMembershipComparable",
    "url": "https://developer.apple.com/documentation/musickit/musiclibraryrequestfiltervaluemembershipcomparable",
    "html": "Relationships\nConforming Types\nMusicItemID"
  },
  {
    "title": "MusicLibraryRequestFilterValueEquatable",
    "url": "https://developer.apple.com/documentation/musickit/musiclibraryrequestfiltervalueequatable",
    "html": "Relationships\nConforming Types\nMusicItemID"
  },
  {
    "title": "PartialMusicProperty",
    "url": "https://developer.apple.com/documentation/musickit/partialmusicproperty",
    "html": "Topics\nType Properties\nstatic let albums: MusicRelationshipProperty<Artist, Album>\nAn identifier for the relationship property that returns the associated albums for the artist.\nAvailable when Root is Artist.\nstatic let albums: MusicRelationshipProperty<Song, Album>\nAn identifier for the relationship property that returns the associated albums for the song.\nAvailable when Root is Song.\nstatic let albums: MusicRelationshipProperty<MusicVideo, Album>\nAn identifier of the relationship property that returns the associated albums for the music video.\nAvailable when Root is MusicVideo.\nstatic let appearsOn: MusicRelationshipProperty<Album, Playlist>\nAn identifier for the association property that returns a collection of playlists that include tracks from the album.\nAvailable when Root is Album.\nstatic let appearsOnAlbums: MusicRelationshipProperty<Artist, Album>\nAn identifier for the association property that returns a collection of albums from other artists that this artist appears on.\nAvailable when Root is Artist.\nstatic var artistURL: MusicExtendedAttributeProperty<MusicVideo, URL>\nAn identifier for the extended attribute property that returns the artist’s URL.\nAvailable when Root is MusicVideo.\nstatic var artistURL: MusicExtendedAttributeProperty<Song, URL>\nAn identifier for the extended attribute property that returns the artist’s URL.\nAvailable when Root is Song.\nstatic var artistURL: MusicExtendedAttributeProperty<Album, URL>\nAn identifier for the extended attribute property that returns the artist’s URL.\nAvailable when Root is Album.\nstatic let artists: MusicRelationshipProperty<Album, Artist>\nAn identifier for the relationship property that returns the associated artists for the album.\nAvailable when Root is Album.\nstatic let artists: MusicRelationshipProperty<Song, Artist>\nAn identifier for the relationship property that returns the associated artists for the song.\nAvailable when Root is Song.\nstatic let artists: MusicRelationshipProperty<MusicVideo, Artist>\nAn identifier of the relationship property that returns the associated artists for the music video.\nAvailable when Root is MusicVideo.\nstatic let audioVariants: MusicExtendedAttributeProperty<Song, [AudioVariant]>\nAn identifier for the extended attribute property that returns the audio variants for the song.\nAvailable when Root is Song.\nstatic let audioVariants: MusicExtendedAttributeProperty<Album, [AudioVariant]>\nAn identifier for the extended attribute property that returns the audio variants for the album.\nAvailable when Root is Album.\nstatic let compilationAlbums: MusicRelationshipProperty<Artist, Album>\nAn identifier for the association property that returns a collection of compilation albums that include tracks by the artist.\nAvailable when Root is Artist.\nstatic let composers: MusicRelationshipProperty<Song, Artist>\nAn identifier for the relationship property that returns the song’s composers.\nAvailable when Root is Song.\nstatic let curator: MusicRelationshipProperty<Playlist, Curator>\nAn identifier for the extended attribute property that returns the playlist’s associated curator.\nAvailable when Root is Playlist.\nstatic let entries: MusicRelationshipProperty<Playlist, Playlist.Entry>\nAn identifier for the relationship property that returns the entries in the playlist.\nAvailable when Root is Playlist.\nstatic let featuredAlbums: MusicRelationshipProperty<Artist, Album>\nAn identifier for the association property that returns a collection of featured albums for the artist.\nAvailable when Root is Artist.\nstatic let featuredArtists: MusicRelationshipProperty<Playlist, Artist>\nAn identifier for the association property that returns a collection of featured artists for this playlist.\nAvailable when Root is Playlist.\nstatic let featuredPlaylists: MusicRelationshipProperty<Artist, Playlist>\nAn identifier for the association property that returns a collection of the artist’s playlists.\nAvailable when Root is Artist.\nstatic let fullAlbums: MusicRelationshipProperty<Artist, Album>\nAn identifier for the association property that returns a collection of the artist’s full-release albums.\nAvailable when Root is Artist.\nstatic let genres: MusicRelationshipProperty<MusicVideo, Genre>\nAn identifier of the relationship property that returns the associated genres for the music video.\nAvailable when Root is MusicVideo.\nstatic let genres: MusicRelationshipProperty<Artist, Genre>\nAn identifier for the relationship property that returns the associated genres for the artist.\nAvailable when Root is Artist.\nstatic let genres: MusicRelationshipProperty<Song, Genre>\nAn identifier for the relationship property that returns the associated genres for the song.\nAvailable when Root is Song.\nstatic let genres: MusicRelationshipProperty<Album, Genre>\nAn identifier for the relationship property that returns the genres for the album.\nAvailable when Root is Album.\nstatic let latestRelease: MusicRelationshipProperty<Artist, Album>\nAn identifier for the association property that returns the artist’s most recent album.\nAvailable when Root is Artist.\nstatic var latestReleases: MusicRelationshipProperty<RecordLabel, Album>\nAn identifier for the association property that returns a collection of the most recent releases for the record label.\nAvailable when Root is RecordLabel.\nstatic let liveAlbums: MusicRelationshipProperty<Artist, Album>\nAn identifier for the association property that returns a collection of the artist’s live albums.\nAvailable when Root is Artist.\nstatic let moreByArtist: MusicRelationshipProperty<MusicVideo, MusicVideo>\nAn identifier of the association property that returns a collection of additional music videos by the artist.\nAvailable when Root is MusicVideo.\nstatic let moreByCurator: MusicRelationshipProperty<Playlist, Playlist>\nAn identifier for the association property that returns a collection of additional playlists by the same curator.\nAvailable when Root is Playlist.\nstatic let moreInGenre: MusicRelationshipProperty<MusicVideo, MusicVideo>\nA identifier of the association property that returns a collection of music videos in the same genre as this music video.\nAvailable when Root is MusicVideo.\nstatic let musicVideos: MusicRelationshipProperty<Artist, MusicVideo>\nAn identifier for the relationship property that returns the associated music videos for the artist.\nAvailable when Root is Artist.\nstatic let musicVideos: MusicRelationshipProperty<Song, MusicVideo>\nAn identifier for the relationship property that returns the song’s associated music videos.\nAvailable when Root is Song.\nstatic let otherVersions: MusicRelationshipProperty<Album, Album>\nAn identifier for the association property that returns a collection of other versions of the album.\nAvailable when Root is Album.\nstatic let playlists: MusicRelationshipProperty<Artist, Playlist>\nAn identifier for the relationship property that returns the associated playlists for the artist.\nAvailable when Root is Artist.\nstatic let playlists: MusicRelationshipProperty<Curator, Playlist>\nAn identifier for the relationship property that returns the associated playlists for the curator.\nAvailable when Root is Curator.\nstatic let playlists: MusicRelationshipProperty<RadioShow, Playlist>\nAn identifier for the relationship property that returns the associated playlists for the radio show.\nAvailable when Root is RadioShow.\nstatic let radioShow: MusicRelationshipProperty<Playlist, RadioShow>\nAn identifier for the extended attribute property that returns the playlist’s associated radio show.\nAvailable when Root is Playlist.\nstatic let recordLabels: MusicRelationshipProperty<Album, RecordLabel>\nAn identifier for the relationship property that returns the record labels for the album.\nAvailable when Root is Album.\nstatic let relatedAlbums: MusicRelationshipProperty<Album, Album>\nAn identifier for the association property that returns a collection of related albums.\nAvailable when Root is Album.\nstatic let relatedVideos: MusicRelationshipProperty<Album, MusicVideo>\nAn identifier for the association property that returns a collection of related music videos for the album.\nAvailable when Root is Album.\nstatic let similarArtists: MusicRelationshipProperty<Artist, Artist>\nAn identifier for the association property that returns a collection of artists similar to this artist.\nAvailable when Root is Artist.\nstatic let singles: MusicRelationshipProperty<Artist, Album>\nAn identifier of the association property that returns a collection of the artist’s albums in the singles category.\nAvailable when Root is Artist.\nstatic let songs: MusicRelationshipProperty<MusicVideo, Song>\nAn identifier of the relationship property that returns the associated songs for the music video.\nAvailable when Root is MusicVideo.\nstatic let station: MusicRelationshipProperty<Song, Station>\nAn identifier for the relationship property that returns the associated station for the song.\nAvailable when Root is Song.\nstatic let station: MusicRelationshipProperty<Artist, Station>\nAn identifier for the relationship property that returns the associated station for the artist.\nAvailable when Root is Artist.\nstatic let topMusicVideos: MusicRelationshipProperty<Artist, MusicVideo>\nAn identifier for the association property that returns a collection of the artist’s top music videos.\nAvailable when Root is Artist.\nstatic var topReleases: MusicRelationshipProperty<RecordLabel, Album>\nAn identifier for the association property that returns a collection of top releases for the record label.\nAvailable when Root is RecordLabel.\nstatic let topSongs: MusicRelationshipProperty<Artist, Song>\nAn identifier for the association property that returns a collection of the artist’s top songs.\nAvailable when Root is Artist.\nstatic let tracks: MusicRelationshipProperty<Playlist, Track>\nAn identifier for the relationship property that returns the tracks in the playlist.\nAvailable when Root is Playlist.\nstatic let tracks: MusicRelationshipProperty<Album, Track>\nAn identifier for the relationship property that returns the tracks on the album.\nAvailable when Root is Album.\nRelationships\nInherits From\nAnyMusicProperty\nInherited By\nMusicAttributeProperty\nPartialMusicAsyncProperty\nConforms To\nEquatable\nHashable\nSendable\nSee Also\nUtility\nprotocol MusicItem\nA protocol with basic requirements for music items.\nstruct MusicItemID\nAn object that represents a unique identifier for a music item.\nstruct MusicItemCollection\nA collection of music items.\nprotocol MusicPropertyContainer\nA protocol for music items that allow loading additional properties that you can fetch asynchronously.\nclass MusicRelationshipProperty\nAn identifier for a music item relationship property from a specific root type to a specific value type for the element of the resulting collection.\nclass MusicExtendedAttributeProperty\nAn identifier for a music item extended attribute property from a specific root type to a specific resulting value type.\nclass MusicAttributeProperty\nAn identifier for a music item attribute property from a specific root type to a specific resulting value type.\nclass PartialMusicAsyncProperty\nA partially type-erased identifier for a music item property that you can fetch asynchronously from a concrete root type to any resulting value type.\nclass AnyMusicProperty\nA type-erased identifier for a music item property, from any root type to any resulting value type."
  },
  {
    "title": "MusicLibraryAddable",
    "url": "https://developer.apple.com/documentation/musickit/musiclibraryaddable",
    "html": "Relationships\nInherits From\nMusicItem\nSendable\nConforming Types\nAlbum\nMusicVideo\nPlaylist\nPlaylist.Entry\nSong\nTrack"
  },
  {
    "title": "LibraryPlaylistSortProperties",
    "url": "https://developer.apple.com/documentation/musickit/libraryplaylistsortproperties",
    "html": "Topics\nInstance Properties\nvar lastPlayedDate: Date?\nThe date when the user last played the playlist on this device.\n\nRequired\n\nvar libraryAddedDate: Date?\nThe date when the user added the playlist to the library.\n\nRequired\n\nvar name: String\nThe name of the playlist.\n\nRequired"
  },
  {
    "title": "MusicAttributeProperty",
    "url": "https://developer.apple.com/documentation/musickit/musicattributeproperty",
    "html": "Topics\nInstance Properties\nvar description: String\nA textual representation of this instance.\nRelationships\nInherits From\nPartialMusicProperty\nConforms To\nCustomStringConvertible\nEquatable\nHashable\nSendable\nSee Also\nUtility\nprotocol MusicItem\nA protocol with basic requirements for music items.\nstruct MusicItemID\nAn object that represents a unique identifier for a music item.\nstruct MusicItemCollection\nA collection of music items.\nprotocol MusicPropertyContainer\nA protocol for music items that allow loading additional properties that you can fetch asynchronously.\nclass MusicRelationshipProperty\nAn identifier for a music item relationship property from a specific root type to a specific value type for the element of the resulting collection.\nclass MusicExtendedAttributeProperty\nAn identifier for a music item extended attribute property from a specific root type to a specific resulting value type.\nclass PartialMusicAsyncProperty\nA partially type-erased identifier for a music item property that you can fetch asynchronously from a concrete root type to any resulting value type.\nclass PartialMusicProperty\nA partially type-erased identifier for a music item property from a concrete root type to any resulting value type.\nclass AnyMusicProperty\nA type-erased identifier for a music item property, from any root type to any resulting value type."
  },
  {
    "title": "MusicExtendedAttributeProperty",
    "url": "https://developer.apple.com/documentation/musickit/musicextendedattributeproperty",
    "html": "Topics\nInstance Properties\nvar description: String\nA textual representation of this instance.\nRelationships\nInherits From\nPartialMusicAsyncProperty\nConforms To\nCustomStringConvertible\nEquatable\nHashable\nSendable\nSee Also\nUtility\nprotocol MusicItem\nA protocol with basic requirements for music items.\nstruct MusicItemID\nAn object that represents a unique identifier for a music item.\nstruct MusicItemCollection\nA collection of music items.\nprotocol MusicPropertyContainer\nA protocol for music items that allow loading additional properties that you can fetch asynchronously.\nclass MusicRelationshipProperty\nAn identifier for a music item relationship property from a specific root type to a specific value type for the element of the resulting collection.\nclass MusicAttributeProperty\nAn identifier for a music item attribute property from a specific root type to a specific resulting value type.\nclass PartialMusicAsyncProperty\nA partially type-erased identifier for a music item property that you can fetch asynchronously from a concrete root type to any resulting value type.\nclass PartialMusicProperty\nA partially type-erased identifier for a music item property from a concrete root type to any resulting value type.\nclass AnyMusicProperty\nA type-erased identifier for a music item property, from any root type to any resulting value type."
  },
  {
    "title": "MusicLibrary",
    "url": "https://developer.apple.com/documentation/musickit/musiclibrary",
    "html": "Topics\nInstance Methods\nfunc add<MusicItemType>(MusicItemType) async throws\nAdds an item to the user’s music library.\nfunc add<MusicItemType>(MusicItemType, to: Playlist) async throws -> Playlist\nAdds an item to the end of an existing playlist.\nfunc createPlaylist(name: String, description: String?, authorDisplayName: String?) async throws -> Playlist\nCreates a playlist in the user’s music library.\nfunc createPlaylist<S, MusicPlaylistAddableType>(name: String, description: String?, authorDisplayName: String?, items: S) async throws -> Playlist\nCreates a playlist in the user’s music library.\nfunc edit(Playlist, name: String?, description: String?, authorDisplayName: String?) async throws -> Playlist\nEdits a playlist that your app has created.\nfunc edit<S, MusicPlaylistAddableType>(Playlist, name: String?, description: String?, authorDisplayName: String?, items: S) async throws -> Playlist\nEdits a playlist that your app has created including items to rebuild the list of entries.\nType Properties\nstatic let shared: MusicLibrary\nA shared object that allows your app to modify the user’s music library.\nEnumerations\nenum Error\nAn error that the music library can throw upon accessing, manipulating, or requesting data from the user’s music library."
  },
  {
    "title": "LibraryPlaylistFilter",
    "url": "https://developer.apple.com/documentation/musickit/libraryplaylistfilter",
    "html": "Topics\nInstance Properties\nvar id: MusicItemID\nThe unique identifier for the playlist.\n\nRequired\n\nvar name: String\nThe name of the playlist.\n\nRequired"
  },
  {
    "title": "LibraryAlbumFilter",
    "url": "https://developer.apple.com/documentation/musickit/libraryalbumfilter",
    "html": "Topics\nInstance Properties\nvar artistName: String\nThe artist’s name.\n\nRequired\n\nvar artists: MusicItemCollection<Artist>?\nThe album’s associated artists.\n\nRequired\n\nvar genres: MusicItemCollection<Genre>?\nThe genres for the album.\n\nRequired\n\nvar id: MusicItemID\nThe unique identifier for the album.\n\nRequired\n\nvar isCompilation: Bool?\nA Boolean value that indicates whether the album is a compilation.\n\nRequired\n\nvar title: String\nThe title of the album.\n\nRequired"
  },
  {
    "title": "LibraryPlaylistEntryFilter",
    "url": "https://developer.apple.com/documentation/musickit/libraryplaylistentryfilter",
    "html": "Topics\nInstance Properties\nvar id: MusicItemID\nThe unique identifier for the playlist entry.\n\nRequired"
  },
  {
    "title": "LibraryMusicVideoSortProperties",
    "url": "https://developer.apple.com/documentation/musickit/librarymusicvideosortproperties",
    "html": "Topics\nInstance Properties\nvar albumTitle: String?\nThe title of the album the music video appears on.\n\nRequired\n\nvar artistName: String?\nThe artist’s name.\n\nRequired\n\nvar duration: TimeInterval?\nThe duration of the music video.\n\nRequired\n\nvar lastPlayedDate: Date?\nThe date when the user last played the music video on this device.\n\nRequired\n\nvar libraryAddedDate: Date?\nThe date when the user added the music video to the library.\n\nRequired\n\nvar playCount: Int?\nThe number of times the user played the music video.\n\nRequired\n\nvar title: String\nThe title of the music video.\n\nRequired\n\nvar trackNumber: Int?\nThe music video’s number in the album’s track list.\n\nRequired"
  },
  {
    "title": "PartialMusicAsyncProperty",
    "url": "https://developer.apple.com/documentation/musickit/partialmusicasyncproperty",
    "html": "Relationships\nInherits From\nPartialMusicProperty\nInherited By\nMusicExtendedAttributeProperty\nMusicRelationshipProperty\nConforms To\nEquatable\nHashable\nSendable\nSee Also\nUtility\nprotocol MusicItem\nA protocol with basic requirements for music items.\nstruct MusicItemID\nAn object that represents a unique identifier for a music item.\nstruct MusicItemCollection\nA collection of music items.\nprotocol MusicPropertyContainer\nA protocol for music items that allow loading additional properties that you can fetch asynchronously.\nclass MusicRelationshipProperty\nAn identifier for a music item relationship property from a specific root type to a specific value type for the element of the resulting collection.\nclass MusicExtendedAttributeProperty\nAn identifier for a music item extended attribute property from a specific root type to a specific resulting value type.\nclass MusicAttributeProperty\nAn identifier for a music item attribute property from a specific root type to a specific resulting value type.\nclass PartialMusicProperty\nA partially type-erased identifier for a music item property from a concrete root type to any resulting value type.\nclass AnyMusicProperty\nA type-erased identifier for a music item property, from any root type to any resulting value type."
  },
  {
    "title": "MusicPropertyContainer",
    "url": "https://developer.apple.com/documentation/musickit/musicpropertycontainer",
    "html": "Topics\nInstance Methods\nfunc with([PartialMusicAsyncProperty<Self>]) async throws -> Self\nLoads a new instance of the music item that includes the specified properties.\n\nRequired Default implementation provided.\n\nfunc with([PartialMusicAsyncProperty<Self>], preferredSource: MusicPropertySource) async throws -> Self\nLoads a new instance of the music item that includes the specified properties.\n\nRequired\n\nfunc with(PartialMusicAsyncProperty<Self>..., preferredSource: MusicPropertySource) async throws -> Self\nLoads a new instance of the music item that includes the specified properties.\n\nRequired\n\nRelationships\nConforming Types\nAlbum\nArtist\nCurator\nGenre\nMusicPlayer.Queue.Entry.Item\nMusicVideo\nPlaylist\nPlaylist.Entry\nPlaylist.Entry.Item\nRadioShow\nRecordLabel\nSong\nStation\nTrack\nSee Also\nUtility\nprotocol MusicItem\nA protocol with basic requirements for music items.\nstruct MusicItemID\nAn object that represents a unique identifier for a music item.\nstruct MusicItemCollection\nA collection of music items.\nclass MusicRelationshipProperty\nAn identifier for a music item relationship property from a specific root type to a specific value type for the element of the resulting collection.\nclass MusicExtendedAttributeProperty\nAn identifier for a music item extended attribute property from a specific root type to a specific resulting value type.\nclass MusicAttributeProperty\nAn identifier for a music item attribute property from a specific root type to a specific resulting value type.\nclass PartialMusicAsyncProperty\nA partially type-erased identifier for a music item property that you can fetch asynchronously from a concrete root type to any resulting value type.\nclass PartialMusicProperty\nA partially type-erased identifier for a music item property from a concrete root type to any resulting value type.\nclass AnyMusicProperty\nA type-erased identifier for a music item property, from any root type to any resulting value type."
  },
  {
    "title": "MusicRelationshipProperty",
    "url": "https://developer.apple.com/documentation/musickit/musicrelationshipproperty",
    "html": "Topics\nInstance Properties\nvar description: String\nA textual representation of this instance.\nRelationships\nInherits From\nPartialMusicAsyncProperty\nConforms To\nCustomStringConvertible\nEquatable\nHashable\nSendable\nSee Also\nUtility\nprotocol MusicItem\nA protocol with basic requirements for music items.\nstruct MusicItemID\nAn object that represents a unique identifier for a music item.\nstruct MusicItemCollection\nA collection of music items.\nprotocol MusicPropertyContainer\nA protocol for music items that allow loading additional properties that you can fetch asynchronously.\nclass MusicExtendedAttributeProperty\nAn identifier for a music item extended attribute property from a specific root type to a specific resulting value type.\nclass MusicAttributeProperty\nAn identifier for a music item attribute property from a specific root type to a specific resulting value type.\nclass PartialMusicAsyncProperty\nA partially type-erased identifier for a music item property that you can fetch asynchronously from a concrete root type to any resulting value type.\nclass PartialMusicProperty\nA partially type-erased identifier for a music item property from a concrete root type to any resulting value type.\nclass AnyMusicProperty\nA type-erased identifier for a music item property, from any root type to any resulting value type."
  },
  {
    "title": "LibraryAlbumSortProperties",
    "url": "https://developer.apple.com/documentation/musickit/libraryalbumsortproperties",
    "html": "Topics\nInstance Properties\nvar artistName: String\nThe artist’s name.\n\nRequired\n\nvar lastPlayedDate: Date?\nThe date when the user last played the album on this device.\n\nRequired\n\nvar libraryAddedDate: Date?\nThe date when the user added the album to the library.\n\nRequired\n\nvar releaseDate: Date?\nThe release date (or expected prerelease date) for the album.\n\nRequired\n\nvar title: String\nThe title of the album.\n\nRequired\n\nvar trackCount: Int\nThe number of tracks for the album.\n\nRequired"
  },
  {
    "title": "MusicItemCollection",
    "url": "https://developer.apple.com/documentation/musickit/musicitemcollection",
    "html": "Topics\nOperators\nstatic func += (inout MusicItemCollection<MusicItemType>, MusicItemCollection<MusicItemType>)\nAppends contents of a collection representing a next batch, in the right hand side, to the existing collection on the left hand side.\nInitializers\ninit<S>(S)\nAvailable when MusicItemType conforms to MusicItem.\nInstance Properties\nvar hasNextBatch: Bool\nA Boolean value that indicates whether the collection has information that allows it to fetch a subsequent batch of items.\nAvailable when MusicItemType conforms to MusicItem.\nvar title: String?\nAn optional title for the collection.\nInstance Methods\nfunc nextBatch(limit: Int?) async throws -> MusicItemCollection<MusicItemType>?\nFetches the next batch of items asynchronously.\nAvailable when MusicItemType conforms to MusicItem.\nfunc nextBatch(limit: Int?) async throws -> MusicItemCollection<MusicItemType>?\nFetches the next batch of items asynchronously.\nAvailable when MusicItemType conforms to MusicItem.\nDefault Implementations\nBidirectionalCollection Implementations\nCollection Implementations\nCustomDebugStringConvertible Implementations\nCustomStringConvertible Implementations\nDecodable Implementations\nEncodable Implementations\nEquatable Implementations\nExpressibleByArrayLiteral Implementations\nHashable Implementations\nRandomAccessCollection Implementations\nSequence Implementations\nRelationships\nConforms To\nBidirectionalCollection\nCollection\nCustomDebugStringConvertible\nCustomStringConvertible\nDecodable\nEncodable\nEquatable\nExpressibleByArrayLiteral\nHashable\nRandomAccessCollection\nSendable\nSequence\nSee Also\nUtility\nprotocol MusicItem\nA protocol with basic requirements for music items.\nstruct MusicItemID\nAn object that represents a unique identifier for a music item.\nprotocol MusicPropertyContainer\nA protocol for music items that allow loading additional properties that you can fetch asynchronously.\nclass MusicRelationshipProperty\nAn identifier for a music item relationship property from a specific root type to a specific value type for the element of the resulting collection.\nclass MusicExtendedAttributeProperty\nAn identifier for a music item extended attribute property from a specific root type to a specific resulting value type.\nclass MusicAttributeProperty\nAn identifier for a music item attribute property from a specific root type to a specific resulting value type.\nclass PartialMusicAsyncProperty\nA partially type-erased identifier for a music item property that you can fetch asynchronously from a concrete root type to any resulting value type.\nclass PartialMusicProperty\nA partially type-erased identifier for a music item property from a concrete root type to any resulting value type.\nclass AnyMusicProperty\nA type-erased identifier for a music item property, from any root type to any resulting value type."
  },
  {
    "title": "MusicTokenProvider",
    "url": "https://developer.apple.com/documentation/musickit/musictokenprovider",
    "html": "Discussion\n\nA token provider for MusicKit needs to be a subclass of MusicUserTokenProvider which conforms to the MusicDeveloperTokenProvider protocol.\n\nSee Also\nToken management\nprotocol MusicDeveloperTokenProvider\nA set of methods that music requests use to access Apple Music API.\nclass MusicUserTokenProvider\nA class that music requests use to fetch user tokens your app requires to access Apple Music API.\nstruct MusicTokenRequestOptions\nOptions that music requests pass into token provider methods to fetch a required token for accessing Apple Music API.\nenum MusicTokenRequestError\nAn error that the token provider or music requests can throw upon requesting any token necessary for accessing Apple Music API.\nclass DefaultMusicTokenProvider\nThe default token provider that music requests use to access Apple Music API."
  },
  {
    "title": "MusicTokenRequestOptions",
    "url": "https://developer.apple.com/documentation/musickit/musictokenrequestoptions",
    "html": "Topics\nInitializers\ninit(rawValue: Int)\nCreates a new option set from the given raw value.\nInstance Properties\nlet rawValue: Int\nThe corresponding value of the raw type.\nType Aliases\ntypealias ArrayLiteralElement\nThe type of the elements of an array literal.\ntypealias Element\nThe element type of the option set.\ntypealias RawValue\nThe raw type that can be used to represent all values of the conforming type.\nType Properties\nstatic let ignoreCache: MusicTokenRequestOptions\nAn option that indicates the token provider needs to discard any cached token and generate a new token.\nDefault Implementations\nEquatable Implementations\nOptionSet Implementations\nSetAlgebra Implementations\nRelationships\nConforms To\nEquatable\nExpressibleByArrayLiteral\nOptionSet\nRawRepresentable\nSendable\nSetAlgebra\nSee Also\nToken management\ntypealias MusicTokenProvider\nAn object that music requests use to access Apple Music API.\nprotocol MusicDeveloperTokenProvider\nA set of methods that music requests use to access Apple Music API.\nclass MusicUserTokenProvider\nA class that music requests use to fetch user tokens your app requires to access Apple Music API.\nenum MusicTokenRequestError\nAn error that the token provider or music requests can throw upon requesting any token necessary for accessing Apple Music API.\nclass DefaultMusicTokenProvider\nThe default token provider that music requests use to access Apple Music API."
  },
  {
    "title": "MusicPlayer",
    "url": "https://developer.apple.com/documentation/musickit/musicplayer",
    "html": "Topics\nClasses\nclass Queue\nA representation of the playback queue for a music player.\nclass State\nAn object that exposes the observable properties of a music player.\nInstance Properties\nvar isPreparedToPlay: Bool\nA Boolean value that indicates whether a music player is ready to play.\nvar playbackTime: TimeInterval\nThe current playback time, in seconds, of the current entry.\nlet state: MusicPlayer.State\nAn object that exposes the observable properties of the music player.\nInstance Methods\nfunc beginSeekingBackward()\nBegins seeking backward through the music content.\nfunc beginSeekingForward()\nBegins seeking forward through the music content.\nfunc endSeeking()\nEnds forward and backward seeking through the music content.\nfunc pause()\nPauses playback of the current entry.\nfunc play() async throws\nInitiates playback from the current queue.\nfunc prepareToPlay() async throws\nPrepares the current queue for playback, interrupting any active (nonmixable) audio sessions.\nfunc restartCurrentEntry()\nRestarts playback at the beginning of the currently playing entry.\nfunc skipToNextEntry() async throws\nStarts playback of the next entry in the playback queue.\nfunc skipToPreviousEntry() async throws\nStarts playback of the previous entry in the playback queue.\nfunc stop()\nEnds playback of the current entry.\nEnumerations\nenum PlaybackStatus\nThe music player playback status modes.\nenum RepeatMode\nThe repeat modes for the music player.\nenum ShuffleMode\nThe shuffle modes for the music player.\nRelationships\nInherited By\nApplicationMusicPlayer\nSystemMusicPlayer\nSee Also\nPlayback\nclass ApplicationMusicPlayer\nAn object your app uses to play music in a way that doesn’t affect the Music app’s state.\nclass SystemMusicPlayer\nAn object your app uses to play music by controlling the Music app’s state.\nprotocol PlayableMusicItem\nA set of properties that a music player uses to initiate playback for a music item.\nstruct PlayParameters\nAn opaque object that represents parameters to initiate playback of a playable music item using a music player."
  },
  {
    "title": "PlayableMusicItem",
    "url": "https://developer.apple.com/documentation/musickit/playablemusicitem",
    "html": "Topics\nInstance Properties\nvar playParameters: PlayParameters?\nThe parameters to use to play the music item.\n\nRequired\n\nRelationships\nInherits From\nMusicItem\nSendable\nConforming Types\nAlbum\nMusicPlayer.Queue.Entry.Item\nPlaylist\nPlaylist.Entry\nPlaylist.Entry.Item\nRecentlyPlayedMusicItem\nSong\nStation\nTrack\nSee Also\nPlayback\nclass ApplicationMusicPlayer\nAn object your app uses to play music in a way that doesn’t affect the Music app’s state.\nclass SystemMusicPlayer\nAn object your app uses to play music by controlling the Music app’s state.\nclass MusicPlayer\nAn object your app uses to play music.\nstruct PlayParameters\nAn opaque object that represents parameters to initiate playback of a playable music item using a music player."
  },
  {
    "title": "SystemMusicPlayer",
    "url": "https://developer.apple.com/documentation/musickit/systemmusicplayer",
    "html": "Overview\n\nThe system music player employs the Music app on your behalf. When your app accesses the system music player for the first time, it assumes the current Music app state and controls it as your app runs. The shared state includes the following:\n\nRepeat mode (see MusicPlayer.RepeatMode)\n\nShuffle mode (see MusicPlayer.ShuffleMode)\n\nPlayback status (see MusicPlayer/PlaybackStatus\u0004)\n\nThe system music player doesn’t share other aspects of the Music app’s state. Music that’s playing continues to play when your app moves to the background.\n\nTopics\nInstance Properties\nvar queue: MusicPlayer.Queue\nThe playback queue for the system music player.\nType Properties\nstatic let shared: SystemMusicPlayer\nThe shared system music player, which controls the Music app’s state.\nRelationships\nInherits From\nMusicPlayer\nSee Also\nPlayback\nclass ApplicationMusicPlayer\nAn object your app uses to play music in a way that doesn’t affect the Music app’s state.\nclass MusicPlayer\nAn object your app uses to play music.\nprotocol PlayableMusicItem\nA set of properties that a music player uses to initiate playback for a music item.\nstruct PlayParameters\nAn opaque object that represents parameters to initiate playback of a playable music item using a music player."
  },
  {
    "title": "StationFilter",
    "url": "https://developer.apple.com/documentation/musickit/stationfilter",
    "html": "Topics\nInstance Properties\nvar id: MusicItemID\nThe unique identifier for the station.\n\nRequired\n\nSee Also\nResource Loading Using Filters\nstruct MusicCatalogResourceRequest\nA request that your app uses to fetch items from the Apple Music catalog using a filter.\nstruct MusicCatalogResourceResponse\nAn object that contains results for a catalog resource request.\nprotocol AlbumFilter\nAlbum properties your app uses as a filter for a catalog resource request.\nprotocol ArtistFilter\nArtist properties your app uses as a filter for a catalog resource request.\nprotocol CuratorFilter\nCurator properties your app uses as a filter for a catalog resource request.\nprotocol GenreFilter\nGenre properties your app uses as a filter for a catalog resource request.\nprotocol MusicVideoFilter\nMusic video properties your app uses as a filter for a catalog resource request.\nprotocol PlaylistFilter\nPlaylist properties your app uses as a filter for a catalog resource request.\nprotocol RadioShowFilter\nRadio Show properties your app uses as a filter for a catalog resource request.\nprotocol RecordLabelFilter\nThe set of record label properties your app uses as a filter for a catalog resource request.\nprotocol SongFilter\nSong properties your app uses as a filter for a catalog resource request.\nprotocol FilterableMusicItem\nA declaration of the associated type that contains the set of music item properties your app uses as a filter for a catalog resource request."
  },
  {
    "title": "RecordLabelFilter",
    "url": "https://developer.apple.com/documentation/musickit/recordlabelfilter",
    "html": "Topics\nInstance Properties\nvar id: MusicItemID\nThe unique identifier for the record label.\n\nRequired\n\nSee Also\nResource Loading Using Filters\nstruct MusicCatalogResourceRequest\nA request that your app uses to fetch items from the Apple Music catalog using a filter.\nstruct MusicCatalogResourceResponse\nAn object that contains results for a catalog resource request.\nprotocol AlbumFilter\nAlbum properties your app uses as a filter for a catalog resource request.\nprotocol ArtistFilter\nArtist properties your app uses as a filter for a catalog resource request.\nprotocol CuratorFilter\nCurator properties your app uses as a filter for a catalog resource request.\nprotocol GenreFilter\nGenre properties your app uses as a filter for a catalog resource request.\nprotocol MusicVideoFilter\nMusic video properties your app uses as a filter for a catalog resource request.\nprotocol PlaylistFilter\nPlaylist properties your app uses as a filter for a catalog resource request.\nprotocol RadioShowFilter\nRadio Show properties your app uses as a filter for a catalog resource request.\nprotocol SongFilter\nSong properties your app uses as a filter for a catalog resource request.\nprotocol StationFilter\nThe set of station properties your app uses as a filter for a catalog resource request.\nprotocol FilterableMusicItem\nA declaration of the associated type that contains the set of music item properties your app uses as a filter for a catalog resource request."
  },
  {
    "title": "SongFilter",
    "url": "https://developer.apple.com/documentation/musickit/songfilter",
    "html": "Topics\nInstance Properties\nvar id: MusicItemID\nThe unique identifier for the song.\n\nRequired\n\nvar isrc: String?\nThe International Standard Recording Code (ISRC) for the song.\n\nRequired\n\nSee Also\nResource Loading Using Filters\nstruct MusicCatalogResourceRequest\nA request that your app uses to fetch items from the Apple Music catalog using a filter.\nstruct MusicCatalogResourceResponse\nAn object that contains results for a catalog resource request.\nprotocol AlbumFilter\nAlbum properties your app uses as a filter for a catalog resource request.\nprotocol ArtistFilter\nArtist properties your app uses as a filter for a catalog resource request.\nprotocol CuratorFilter\nCurator properties your app uses as a filter for a catalog resource request.\nprotocol GenreFilter\nGenre properties your app uses as a filter for a catalog resource request.\nprotocol MusicVideoFilter\nMusic video properties your app uses as a filter for a catalog resource request.\nprotocol PlaylistFilter\nPlaylist properties your app uses as a filter for a catalog resource request.\nprotocol RadioShowFilter\nRadio Show properties your app uses as a filter for a catalog resource request.\nprotocol RecordLabelFilter\nThe set of record label properties your app uses as a filter for a catalog resource request.\nprotocol StationFilter\nThe set of station properties your app uses as a filter for a catalog resource request.\nprotocol FilterableMusicItem\nA declaration of the associated type that contains the set of music item properties your app uses as a filter for a catalog resource request."
  },
  {
    "title": "MusicDataResponse",
    "url": "https://developer.apple.com/documentation/musickit/musicdataresponse",
    "html": "Topics\nOperators\nstatic func == (MusicDataResponse, MusicDataResponse) -> Bool\nReturns a Boolean value indicating whether two values are equal.\nInstance Properties\nlet data: Data\nThe raw data returned by the Apple Music API endpoint for the originating data request.\nvar hashValue: Int\nThe hash value.\nlet urlResponse: HTTPURLResponse\nThe URL response returned by the Apple Music API endpoint for the originating data request.\nInstance Methods\nfunc hash(into: inout Hasher)\nHashes the essential components of this value by feeding them into the given hasher.\nDefault Implementations\nCustomDebugStringConvertible Implementations\nCustomStringConvertible Implementations\nEquatable Implementations\nRelationships\nConforms To\nCustomDebugStringConvertible\nCustomStringConvertible\nEquatable\nHashable\nSendable\nSee Also\nGeneral Purpose Data Request\nstruct MusicDataRequest\nA request for loading data from an arbitrary Apple Music API endpoint."
  },
  {
    "title": "ApplicationMusicPlayer",
    "url": "https://developer.apple.com/documentation/musickit/applicationmusicplayer",
    "html": "Overview\n\nThe application music player plays music specifically for your app, and doesn’t affect the Music app’s state.\n\nIf your app includes a background audio mode in your Info.plist file, the application music player continues playing the current music item when your app moves to the background.\n\nTopics\nClasses\nclass Queue\nInstance Properties\nvar queue: ApplicationMusicPlayer.Queue\nThe playback queue for the application music player.\nType Properties\nstatic let shared: ApplicationMusicPlayer\nThe shared application music player, which plays music specifically for your app.\nRelationships\nInherits From\nMusicPlayer\nSee Also\nPlayback\nclass SystemMusicPlayer\nAn object your app uses to play music by controlling the Music app’s state.\nclass MusicPlayer\nAn object your app uses to play music.\nprotocol PlayableMusicItem\nA set of properties that a music player uses to initiate playback for a music item.\nstruct PlayParameters\nAn opaque object that represents parameters to initiate playback of a playable music item using a music player."
  },
  {
    "title": "FilterableMusicItem",
    "url": "https://developer.apple.com/documentation/musickit/filterablemusicitem",
    "html": "Topics\nAssociated Types\nassociatedtype FilterType\nThe associated type that contains the set of music item properties your app uses as a filter for a catalog resource request.\n\nRequired\n\nRelationships\nInherits From\nMusicItem\nSendable\nConforming Types\nAlbum\nArtist\nCurator\nGenre\nMusicVideo\nPlaylist\nRadioShow\nRecordLabel\nSong\nStation\nSee Also\nResource Loading Using Filters\nstruct MusicCatalogResourceRequest\nA request that your app uses to fetch items from the Apple Music catalog using a filter.\nstruct MusicCatalogResourceResponse\nAn object that contains results for a catalog resource request.\nprotocol AlbumFilter\nAlbum properties your app uses as a filter for a catalog resource request.\nprotocol ArtistFilter\nArtist properties your app uses as a filter for a catalog resource request.\nprotocol CuratorFilter\nCurator properties your app uses as a filter for a catalog resource request.\nprotocol GenreFilter\nGenre properties your app uses as a filter for a catalog resource request.\nprotocol MusicVideoFilter\nMusic video properties your app uses as a filter for a catalog resource request.\nprotocol PlaylistFilter\nPlaylist properties your app uses as a filter for a catalog resource request.\nprotocol RadioShowFilter\nRadio Show properties your app uses as a filter for a catalog resource request.\nprotocol RecordLabelFilter\nThe set of record label properties your app uses as a filter for a catalog resource request.\nprotocol SongFilter\nSong properties your app uses as a filter for a catalog resource request.\nprotocol StationFilter\nThe set of station properties your app uses as a filter for a catalog resource request."
  },
  {
    "title": "RadioShowFilter",
    "url": "https://developer.apple.com/documentation/musickit/radioshowfilter",
    "html": "Topics\nInstance Properties\nvar id: MusicItemID\nThe unique identifier for the radio show.\n\nRequired\n\nSee Also\nResource Loading Using Filters\nstruct MusicCatalogResourceRequest\nA request that your app uses to fetch items from the Apple Music catalog using a filter.\nstruct MusicCatalogResourceResponse\nAn object that contains results for a catalog resource request.\nprotocol AlbumFilter\nAlbum properties your app uses as a filter for a catalog resource request.\nprotocol ArtistFilter\nArtist properties your app uses as a filter for a catalog resource request.\nprotocol CuratorFilter\nCurator properties your app uses as a filter for a catalog resource request.\nprotocol GenreFilter\nGenre properties your app uses as a filter for a catalog resource request.\nprotocol MusicVideoFilter\nMusic video properties your app uses as a filter for a catalog resource request.\nprotocol PlaylistFilter\nPlaylist properties your app uses as a filter for a catalog resource request.\nprotocol RecordLabelFilter\nThe set of record label properties your app uses as a filter for a catalog resource request.\nprotocol SongFilter\nSong properties your app uses as a filter for a catalog resource request.\nprotocol StationFilter\nThe set of station properties your app uses as a filter for a catalog resource request.\nprotocol FilterableMusicItem\nA declaration of the associated type that contains the set of music item properties your app uses as a filter for a catalog resource request."
  },
  {
    "title": "PlaylistFilter",
    "url": "https://developer.apple.com/documentation/musickit/playlistfilter",
    "html": "Topics\nInstance Properties\nvar id: MusicItemID\nThe unique identifier for the playlist.\n\nRequired\n\nSee Also\nResource Loading Using Filters\nstruct MusicCatalogResourceRequest\nA request that your app uses to fetch items from the Apple Music catalog using a filter.\nstruct MusicCatalogResourceResponse\nAn object that contains results for a catalog resource request.\nprotocol AlbumFilter\nAlbum properties your app uses as a filter for a catalog resource request.\nprotocol ArtistFilter\nArtist properties your app uses as a filter for a catalog resource request.\nprotocol CuratorFilter\nCurator properties your app uses as a filter for a catalog resource request.\nprotocol GenreFilter\nGenre properties your app uses as a filter for a catalog resource request.\nprotocol MusicVideoFilter\nMusic video properties your app uses as a filter for a catalog resource request.\nprotocol RadioShowFilter\nRadio Show properties your app uses as a filter for a catalog resource request.\nprotocol RecordLabelFilter\nThe set of record label properties your app uses as a filter for a catalog resource request.\nprotocol SongFilter\nSong properties your app uses as a filter for a catalog resource request.\nprotocol StationFilter\nThe set of station properties your app uses as a filter for a catalog resource request.\nprotocol FilterableMusicItem\nA declaration of the associated type that contains the set of music item properties your app uses as a filter for a catalog resource request."
  },
  {
    "title": "MusicCatalogSearchResponse",
    "url": "https://developer.apple.com/documentation/musickit/musiccatalogsearchresponse",
    "html": "Topics\nOperators\nstatic func == (MusicCatalogSearchResponse, MusicCatalogSearchResponse) -> Bool\nReturns a Boolean value indicating whether two values are equal.\nInstance Properties\nlet albums: MusicItemCollection<Album>\nA collection of albums.\nlet artists: MusicItemCollection<Artist>\nA collection of artists.\nlet curators: MusicItemCollection<Curator>\nA collection of curators.\nvar hashValue: Int\nThe hash value.\nlet musicVideos: MusicItemCollection<MusicVideo>\nA collection of music videos.\nlet playlists: MusicItemCollection<Playlist>\nA collection of playlists.\nlet radioShows: MusicItemCollection<RadioShow>\nA collection of radio shows.\nlet recordLabels: MusicItemCollection<RecordLabel>\nA collection of record labels.\nlet songs: MusicItemCollection<Song>\nA collection of songs.\nlet stations: MusicItemCollection<Station>\nA collection of stations.\nlet topResults: MusicItemCollection<MusicCatalogSearchResponse.TopResult>\nA collection of top results.\nInstance Methods\nfunc hash(into: inout Hasher)\nHashes the essential components of this value by feeding them into the given hasher.\nEnumerations\nenum TopResult\nAn item that represents one of the top results in a catalog search response.\nDefault Implementations\nCustomDebugStringConvertible Implementations\nCustomStringConvertible Implementations\nDecodable Implementations\nEncodable Implementations\nEquatable Implementations\nRelationships\nConforms To\nCustomDebugStringConvertible\nCustomStringConvertible\nDecodable\nEncodable\nEquatable\nHashable\nSee Also\nCatalog Search\nstruct MusicCatalogSearchRequest\nA request that your app uses to fetch items from the Apple Music catalog using a search term.\nprotocol MusicCatalogSearchable\nA protocol for music items that your app can fetch by using a catalog search request."
  },
  {
    "title": "MusicCatalogResourceResponse",
    "url": "https://developer.apple.com/documentation/musickit/musiccatalogresourceresponse",
    "html": "Topics\nInstance Properties\nlet items: MusicItemCollection<MusicItemType>\nA collection of items matching the filter used in the originating MusicCatalogResourceRequest.\nDefault Implementations\nCustomDebugStringConvertible Implementations\nCustomStringConvertible Implementations\nDecodable Implementations\nEncodable Implementations\nEquatable Implementations\nHashable Implementations\nRelationships\nConforms To\nCustomDebugStringConvertible\nCustomStringConvertible\nDecodable\nEncodable\nEquatable\nHashable\nSendable\nSee Also\nResource Loading Using Filters\nstruct MusicCatalogResourceRequest\nA request that your app uses to fetch items from the Apple Music catalog using a filter.\nprotocol AlbumFilter\nAlbum properties your app uses as a filter for a catalog resource request.\nprotocol ArtistFilter\nArtist properties your app uses as a filter for a catalog resource request.\nprotocol CuratorFilter\nCurator properties your app uses as a filter for a catalog resource request.\nprotocol GenreFilter\nGenre properties your app uses as a filter for a catalog resource request.\nprotocol MusicVideoFilter\nMusic video properties your app uses as a filter for a catalog resource request.\nprotocol PlaylistFilter\nPlaylist properties your app uses as a filter for a catalog resource request.\nprotocol RadioShowFilter\nRadio Show properties your app uses as a filter for a catalog resource request.\nprotocol RecordLabelFilter\nThe set of record label properties your app uses as a filter for a catalog resource request.\nprotocol SongFilter\nSong properties your app uses as a filter for a catalog resource request.\nprotocol StationFilter\nThe set of station properties your app uses as a filter for a catalog resource request.\nprotocol FilterableMusicItem\nA declaration of the associated type that contains the set of music item properties your app uses as a filter for a catalog resource request."
  },
  {
    "title": "MusicCatalogResourceRequest",
    "url": "https://developer.apple.com/documentation/musickit/musiccatalogresourcerequest",
    "html": "Topics\nInitializers\ninit()\nCreates a request to fetch top-level items in the Apple Music catalog.\ninit<Value>(matching: KeyPath<MusicItemType.FilterType, Value>, equalTo: Value)\nCreates a request to fetch items using a filter that matches a specific value.\ninit<Value>(matching: KeyPath<MusicItemType.FilterType, Value>, memberOf: [Value])\nCreates a request to fetch items using a filter that matches any value from an array of possible values.\nInstance Properties\nvar limit: Int?\nA limit for the number of items to return in the catalog resource response.\nvar properties: [PartialMusicAsyncProperty<MusicItemType>]\nA list of properties which the resource request will fetch for each music item in the response.\nInstance Methods\nfunc response() async throws -> MusicCatalogResourceResponse<MusicItemType>\nFetches items from the Apple Music catalog that match a specific filter.\nRelationships\nConforms To\nSendable\nSee Also\nResource Loading Using Filters\nstruct MusicCatalogResourceResponse\nAn object that contains results for a catalog resource request.\nprotocol AlbumFilter\nAlbum properties your app uses as a filter for a catalog resource request.\nprotocol ArtistFilter\nArtist properties your app uses as a filter for a catalog resource request.\nprotocol CuratorFilter\nCurator properties your app uses as a filter for a catalog resource request.\nprotocol GenreFilter\nGenre properties your app uses as a filter for a catalog resource request.\nprotocol MusicVideoFilter\nMusic video properties your app uses as a filter for a catalog resource request.\nprotocol PlaylistFilter\nPlaylist properties your app uses as a filter for a catalog resource request.\nprotocol RadioShowFilter\nRadio Show properties your app uses as a filter for a catalog resource request.\nprotocol RecordLabelFilter\nThe set of record label properties your app uses as a filter for a catalog resource request.\nprotocol SongFilter\nSong properties your app uses as a filter for a catalog resource request.\nprotocol StationFilter\nThe set of station properties your app uses as a filter for a catalog resource request.\nprotocol FilterableMusicItem\nA declaration of the associated type that contains the set of music item properties your app uses as a filter for a catalog resource request."
  },
  {
    "title": "CuratorFilter",
    "url": "https://developer.apple.com/documentation/musickit/curatorfilter",
    "html": "Topics\nInstance Properties\nvar id: MusicItemID\nThe unique identifier for the curator.\n\nRequired\n\nSee Also\nResource Loading Using Filters\nstruct MusicCatalogResourceRequest\nA request that your app uses to fetch items from the Apple Music catalog using a filter.\nstruct MusicCatalogResourceResponse\nAn object that contains results for a catalog resource request.\nprotocol AlbumFilter\nAlbum properties your app uses as a filter for a catalog resource request.\nprotocol ArtistFilter\nArtist properties your app uses as a filter for a catalog resource request.\nprotocol GenreFilter\nGenre properties your app uses as a filter for a catalog resource request.\nprotocol MusicVideoFilter\nMusic video properties your app uses as a filter for a catalog resource request.\nprotocol PlaylistFilter\nPlaylist properties your app uses as a filter for a catalog resource request.\nprotocol RadioShowFilter\nRadio Show properties your app uses as a filter for a catalog resource request.\nprotocol RecordLabelFilter\nThe set of record label properties your app uses as a filter for a catalog resource request.\nprotocol SongFilter\nSong properties your app uses as a filter for a catalog resource request.\nprotocol StationFilter\nThe set of station properties your app uses as a filter for a catalog resource request.\nprotocol FilterableMusicItem\nA declaration of the associated type that contains the set of music item properties your app uses as a filter for a catalog resource request."
  },
  {
    "title": "AlbumFilter",
    "url": "https://developer.apple.com/documentation/musickit/albumfilter",
    "html": "Topics\nInstance Properties\nvar id: MusicItemID\nThe unique identifier for the album.\n\nRequired\n\nvar upc: String?\nThe universal product code (UPC) for the album.\n\nRequired\n\nSee Also\nResource Loading Using Filters\nstruct MusicCatalogResourceRequest\nA request that your app uses to fetch items from the Apple Music catalog using a filter.\nstruct MusicCatalogResourceResponse\nAn object that contains results for a catalog resource request.\nprotocol ArtistFilter\nArtist properties your app uses as a filter for a catalog resource request.\nprotocol CuratorFilter\nCurator properties your app uses as a filter for a catalog resource request.\nprotocol GenreFilter\nGenre properties your app uses as a filter for a catalog resource request.\nprotocol MusicVideoFilter\nMusic video properties your app uses as a filter for a catalog resource request.\nprotocol PlaylistFilter\nPlaylist properties your app uses as a filter for a catalog resource request.\nprotocol RadioShowFilter\nRadio Show properties your app uses as a filter for a catalog resource request.\nprotocol RecordLabelFilter\nThe set of record label properties your app uses as a filter for a catalog resource request.\nprotocol SongFilter\nSong properties your app uses as a filter for a catalog resource request.\nprotocol StationFilter\nThe set of station properties your app uses as a filter for a catalog resource request.\nprotocol FilterableMusicItem\nA declaration of the associated type that contains the set of music item properties your app uses as a filter for a catalog resource request."
  },
  {
    "title": "ArtistFilter",
    "url": "https://developer.apple.com/documentation/musickit/artistfilter",
    "html": "Topics\nInstance Properties\nvar id: MusicItemID\nThe unique identifier for the artist.\n\nRequired\n\nSee Also\nResource Loading Using Filters\nstruct MusicCatalogResourceRequest\nA request that your app uses to fetch items from the Apple Music catalog using a filter.\nstruct MusicCatalogResourceResponse\nAn object that contains results for a catalog resource request.\nprotocol AlbumFilter\nAlbum properties your app uses as a filter for a catalog resource request.\nprotocol CuratorFilter\nCurator properties your app uses as a filter for a catalog resource request.\nprotocol GenreFilter\nGenre properties your app uses as a filter for a catalog resource request.\nprotocol MusicVideoFilter\nMusic video properties your app uses as a filter for a catalog resource request.\nprotocol PlaylistFilter\nPlaylist properties your app uses as a filter for a catalog resource request.\nprotocol RadioShowFilter\nRadio Show properties your app uses as a filter for a catalog resource request.\nprotocol RecordLabelFilter\nThe set of record label properties your app uses as a filter for a catalog resource request.\nprotocol SongFilter\nSong properties your app uses as a filter for a catalog resource request.\nprotocol StationFilter\nThe set of station properties your app uses as a filter for a catalog resource request.\nprotocol FilterableMusicItem\nA declaration of the associated type that contains the set of music item properties your app uses as a filter for a catalog resource request."
  },
  {
    "title": "Track",
    "url": "https://developer.apple.com/documentation/musickit/track",
    "html": "Topics\nOperators\nstatic func == (Track, Track) -> Bool\nReturns a Boolean value indicating whether two values are equal.\nEnumeration Cases\ncase musicVideo(MusicVideo)\nA track that corresponds to a music video.\ncase song(Song)\nA track that corresponds to a song.\nInstance Properties\nvar albumTitle: String?\nThe title of the album the track appears on.\nvar albums: MusicItemCollection<Album>?\nThe track’s associated albums.\nvar artistName: String\nThe artist’s name.\nvar artistURL: URL?\nThe artist’s URL.\nvar artists: MusicItemCollection<Artist>?\nThe track’s associated artists.\nvar artwork: Artwork?\nThe artwork for the track.\nvar contentRating: ContentRating?\nThe rating of the content.\nvar discNumber: Int?\nThe disc number of the track.\nvar duration: TimeInterval?\nThe duration of the track.\nvar editorialNotes: EditorialNotes?\nThe editorial notes for the track.\nvar genreNames: [String]\nThe names of the track’s associated genres.\nvar genres: MusicItemCollection<Genre>?\nThe track’s associated genres.\nvar hashValue: Int\nThe hash value.\nvar id: MusicItemID\nThe unique identifier for the track.\nvar isrc: String?\nThe International Standard Recording Code (ISRC) for the track.\nvar lastPlayedDate: Date?\nThe date when the user last played the track on this device.\nvar libraryAddedDate: Date?\nThe date when the user added the track to the library.\nvar playCount: Int?\nThe number of times the user played the track.\nvar playParameters: PlayParameters?\nThe parameters to use to play the track.\nvar previewAssets: [PreviewAsset]?\nThe preview assets for the track.\nvar releaseDate: Date?\nThe release date (or expected for pre-release) of the track.\nvar title: String\nThe title of the track.\nvar trackNumber: Int?\nThe track’s number in the album’s track list.\nvar url: URL?\nThe URL for the track.\nvar workName: String?\nFor classical music only, the name of the associated work.\nInstance Methods\nfunc hash(into: inout Hasher)\nHashes the essential components of this value by feeding them into the given hasher.\nType Aliases\ntypealias ID\nA type representing the stable identity of the entity associated with an instance.\nDefault Implementations\nCustomDebugStringConvertible Implementations\nCustomStringConvertible Implementations\nDecodable Implementations\nEncodable Implementations\nEquatable Implementations\nMusicItem Implementations\nMusicLibraryRequestable Implementations\nRelationships\nConforms To\nCustomDebugStringConvertible\nCustomStringConvertible\nDecodable\nEncodable\nEquatable\nHashable\nIdentifiable\nMusicItem\nMusicLibraryAddable\nMusicLibraryRequestable\nMusicPlaylistAddable\nMusicPropertyContainer\nMusicRecentlyPlayedRequestable\nPlayableMusicItem\nSendable\nSee Also\nMusic Items\nstruct Album\nA music item that represents an album.\nstruct Artist\nA music item that represents an artist.\nstruct Curator\nA music item that represents a curator.\nstruct Genre\nA music item that represents a genre.\nstruct MusicVideo\nA music item that represents a music video.\nstruct Playlist\nA music item that represents a playlist.\nstruct RadioShow\nA music item that represents a radio show.\nstruct RecordLabel\nA music item that represents a record label.\nstruct Song\nA music item that represents a song.\nstruct Station\nA music item that represents a station."
  },
  {
    "title": "MusicCatalogSearchRequest",
    "url": "https://developer.apple.com/documentation/musickit/musiccatalogsearchrequest",
    "html": "Topics\nInitializers\ninit(term: String, types: [any MusicCatalogSearchable.Type])\nCreates a catalog search request for a specified search term and list of catalog searchable types.\nInstance Properties\nvar includeTopResults: Bool\nA Boolean value that indicates whether to request top search results.\nvar limit: Int?\nA limit for the number of items to return in the catalog search response.\nvar offset: Int?\nAn offet for the request.\nlet term: String\nThe search term for the request.\nvar types: [any MusicCatalogSearchable.Type]\nThe list of requested catalog searchable types.\nInstance Methods\nfunc response() async throws -> MusicCatalogSearchResponse\nFetches items of the requested catalog searchable types that match the search term of the request.\nSee Also\nCatalog Search\nstruct MusicCatalogSearchResponse\nAn object that contains results for a catalog search request.\nprotocol MusicCatalogSearchable\nA protocol for music items that your app can fetch by using a catalog search request."
  },
  {
    "title": "MusicCatalogSearchable",
    "url": "https://developer.apple.com/documentation/musickit/musiccatalogsearchable",
    "html": "Relationships\nInherits From\nMusicItem\nSendable\nConforming Types\nAlbum\nArtist\nCurator\nMusicVideo\nPlaylist\nRadioShow\nRecordLabel\nSong\nStation\nSee Also\nCatalog Search\nstruct MusicCatalogSearchRequest\nA request that your app uses to fetch items from the Apple Music catalog using a search term.\nstruct MusicCatalogSearchResponse\nAn object that contains results for a catalog search request."
  },
  {
    "title": "PreviewAsset",
    "url": "https://developer.apple.com/documentation/musickit/previewasset",
    "html": "Topics\nOperators\nstatic func == (PreviewAsset, PreviewAsset) -> Bool\nReturns a Boolean value indicating whether two values are equal.\nInstance Properties\nlet artwork: Artwork?\nThe preview artwork for the associated preview music video.\nvar hashValue: Int\nThe hash value.\nlet hlsURL: URL?\nThe HLS preview URL for the content.\nlet url: URL?\nThe preview URL for the content.\nInstance Methods\nfunc hash(into: inout Hasher)\nHashes the essential components of this value by feeding them into the given hasher.\nDefault Implementations\nCustomDebugStringConvertible Implementations\nCustomStringConvertible Implementations\nDecodable Implementations\nEncodable Implementations\nEquatable Implementations\nRelationships\nConforms To\nCustomDebugStringConvertible\nCustomStringConvertible\nDecodable\nEncodable\nEquatable\nHashable\nSendable\nSee Also\nMusic Item Attributes\nenum ContentRating\nThe rating of the content that potentially plays while playing a resource.\nstruct EditorialNotes\nAn object that represents editorial notes."
  },
  {
    "title": "Album",
    "url": "https://developer.apple.com/documentation/musickit/album",
    "html": "Topics\nOperators\nstatic func == (Album, Album) -> Bool\nReturns a Boolean value indicating whether two values are equal.\nInstance Properties\nvar appearsOn: MusicItemCollection<Playlist>?\nA collection of playlists that include tracks from the album.\nvar artistName: String\nThe artist’s name.\nvar artistURL: URL?\nThe artist’s URL.\nvar artists: MusicItemCollection<Artist>?\nThe album’s associated artists.\nvar artwork: Artwork?\nThe album artwork.\nvar audioVariants: [AudioVariant]?\nThe variants that indicate the quality of audio available for the album.\nvar contentRating: ContentRating?\nThe rating of the content.\nvar copyright: String?\nThe copyright text for the album.\nvar editorialNotes: EditorialNotes?\nThe notes about the album that appear in the Music app.\nvar genreNames: [String]\nThe names of the album’s associated genres.\nvar genres: MusicItemCollection<Genre>?\nThe genres for the album.\nvar hashValue: Int\nThe hash value.\nlet id: MusicItemID\nThe unique identifier for the album.\nvar isAppleDigitalMaster: Bool?\nA Boolean value that indicates whether the album is an Apple Digital Master.\nvar isCompilation: Bool?\nA Boolean value that indicates whether the album is a compilation.\nvar isComplete: Bool?\nA Boolean value that indicates whether the album is complete.\nvar isSingle: Bool?\nA Boolean value that indicates whether the album consists of a single song.\nvar lastPlayedDate: Date?\nThe date when the user last played the album on this device.\nvar libraryAddedDate: Date?\nThe date when the user added the album to the library.\nvar otherVersions: MusicItemCollection<Album>?\nA collection of other versions of the album.\nvar playParameters: PlayParameters?\nThe parameters to use to play the tracks of the album.\nvar recordLabelName: String?\nThe name of the album’s record label.\nvar recordLabels: MusicItemCollection<RecordLabel>?\nThe record labels for the album.\nvar relatedAlbums: MusicItemCollection<Album>?\nA collection of related albums.\nvar relatedVideos: MusicItemCollection<MusicVideo>?\nA collection of the album’s music videos.\nvar releaseDate: Date?\nThe release date (or expected prerelease date) for the album.\nvar title: String\nThe title of the album.\nvar trackCount: Int\nThe number of tracks for the album.\nvar tracks: MusicItemCollection<Track>?\nThe tracks on the album.\nvar upc: String?\nThe universal product code (UPC) for the album.\nvar url: URL?\nThe URL for the album.\nInstance Methods\nfunc hash(into: inout Hasher)\nHashes the essential components of this value by feeding them into the given hasher.\nType Aliases\ntypealias ID\nA type representing the stable identity of the entity associated with an instance.\nDefault Implementations\nCustomDebugStringConvertible Implementations\nCustomStringConvertible Implementations\nDecodable Implementations\nEncodable Implementations\nEquatable Implementations\nFilterableMusicItem Implementations\nMusicItem Implementations\nMusicLibraryRequestable Implementations\nRelationships\nConforms To\nCustomDebugStringConvertible\nCustomStringConvertible\nDecodable\nEncodable\nEquatable\nFilterableMusicItem\nHashable\nIdentifiable\nMusicCatalogChartRequestable\nMusicCatalogSearchable\nMusicItem\nMusicLibraryAddable\nMusicLibraryRequestable\nMusicLibrarySearchable\nMusicLibrarySectionRequestable\nMusicPersonalRecommendationItem\nMusicPlaylistAddable\nMusicPropertyContainer\nPlayableMusicItem\nSendable\nSee Also\nMusic Items\nstruct Artist\nA music item that represents an artist.\nstruct Curator\nA music item that represents a curator.\nstruct Genre\nA music item that represents a genre.\nstruct MusicVideo\nA music item that represents a music video.\nstruct Playlist\nA music item that represents a playlist.\nstruct RadioShow\nA music item that represents a radio show.\nstruct RecordLabel\nA music item that represents a record label.\nstruct Song\nA music item that represents a song.\nstruct Station\nA music item that represents a station.\nenum Track\nA music item that represents a track."
  },
  {
    "title": "Using Automatic Developer Token Generation for Apple Music API",
    "url": "https://developer.apple.com/documentation/musickit/using-automatic-token-generation-for-apple-music-api",
    "html": "Overview\n\nMusicKit accelerates the way you integrate your app with Apple Music API by automatically generating the developer token on behalf of your app. It then includes the developer token in requests that it issues to Apple Music API for your app.\n\nTo benefit from this automatic behavior, just enable the MusicKit App Service in the developer portal for your app. The MusicKit App Service is a runtime service that automatically associates with your app’s bundle identifier.\n\nEnable the MusicKit App Service\n\nIn Safari, visit the Certificates, Identifiers, and Profiles section of the developer web site.\n\nIn the Identifiers subsection, open the App ID for your app and begin editing its configuration, or create a new one.\n\nOn the Register an App ID page, select the Explicit option for the bundle ID of your app.\n\nClick or tap the App Services tab, and select the Enabled checkbox for MusicKit.\n\nComplete the App ID creation process, or save the changes.\n\nBe sure to set the bundle identifier of your app target to the same value you use for your App ID in these steps.\n\nSee Also\nEssentials\nUsing MusicKit to Integrate with Apple Music\nFind an album in Apple Music that corresponds to a CD in a user’s collection, and present the information for the album.\nproperty list key NSAppleMusicUsageDescription\nA message that tells the user why the app is requesting access to the user’s media library."
  },
  {
    "title": "MusicRecentlyPlayedResponse",
    "url": "https://developer.apple.com/documentation/musickit/musicrecentlyplayedresponse",
    "html": "Topics\nInstance Properties\nlet items: MusicItemCollection<MusicItemType>\nA collection of items the user has recently played.\nDefault Implementations\nCustomDebugStringConvertible Implementations\nCustomStringConvertible Implementations\nDecodable Implementations\nEncodable Implementations\nEquatable Implementations\nHashable Implementations\nRelationships\nConforms To\nCustomDebugStringConvertible\nCustomStringConvertible\nDecodable\nEncodable\nEquatable\nHashable\nSendable"
  },
  {
    "title": "MusicLibrarySectionedRequest",
    "url": "https://developer.apple.com/documentation/musickit/musiclibrarysectionedrequest",
    "html": "Topics\nInitializers\ninit()\nCreates a request to fetch items grouped by sections from the library.\nInstance Properties\nvar includeOnlyDownloadedContent: Bool\nA Boolean value that indicates whether the library response should only include items downloaded on the user’s device.\nvar limit: Int\nA limit for the number of items to return in the library response.\nvar offset: Int\nAn offset for the request.\nInstance Methods\nfunc filterItems<RelatedMusicItemType>(matching: KeyPath<MusicItemType.LibraryFilter, MusicItemCollection<RelatedMusicItemType>?>, contains: RelatedMusicItemType)\nFilters items by a given relationship that matches a specific value.\nfunc filterItems(matching: KeyPath<MusicItemType.LibraryFilter, String>, contains: String)\nFilters items by a given property that contains a specific string.\nfunc filterItems(matching: KeyPath<MusicItemType.LibraryFilter, String?>, contains: String)\nFilters items by a given optional property that contains a specific string.\nfunc filterItems<Value>(matching: KeyPath<MusicItemType.LibraryFilter, Value>, equalTo: Value)\nFilters items by a given property that matches a specific value.\nfunc filterItems<Value>(matching: KeyPath<MusicItemType.LibraryFilter, Value?>, equalTo: Value?)\nFilters items by a given optional property that matches a specific value.\nfunc filterItems<Value>(matching: KeyPath<MusicItemType.LibraryFilter, Value>, memberOf: [Value])\nFilters items by a property for an array of possible values.\nfunc filterItems<Value>(matching: KeyPath<MusicItemType.LibraryFilter, Value?>, memberOf: [Value?])\nFilters items by an optional property for an array of possible values.\nfunc filterItems(text: String)\nFilters items by a specific string.\nfunc filterSections(matching: KeyPath<SectionType.LibraryFilter, String?>, contains: String)\nFilters sections by a given optional property that contains a specific string.\nfunc filterSections(matching: KeyPath<SectionType.LibraryFilter, String>, contains: String)\nFilters sections by a given property that contains a specific string.\nfunc filterSections<Value>(matching: KeyPath<SectionType.LibraryFilter, Value?>, equalTo: Value?)\nFilters sections by a given optional property that matches a specific value.\nfunc filterSections<Value>(matching: KeyPath<SectionType.LibraryFilter, Value>, equalTo: Value)\nFilters sections by a given property that matches a specific value.\nfunc filterSections<Value>(matching: KeyPath<SectionType.LibraryFilter, Value>, memberOf: [Value])\nFilters sections by a property for an array of possible values.\nfunc filterSections<Value>(matching: KeyPath<SectionType.LibraryFilter, Value?>, memberOf: [Value?])\nFilters sections by an optional property for an array of possible values.\nfunc filterSections(text: String)\nFilters sections by a specific string.\nfunc response() async throws -> MusicLibrarySectionedResponse<SectionType, MusicItemType>\nFetches items grouped by sections from the user’s music library.\nfunc sortItems<Value>(by: KeyPath<MusicItemType.LibrarySortProperties, Value>, ascending: Bool)\nSorts items by a specified property.\nfunc sortSections<Value>(by: KeyPath<SectionType.LibrarySortProperties, Value>, ascending: Bool)\nSorts sections by a specified property."
  },
  {
    "title": "MusicRecentlyPlayedRequest",
    "url": "https://developer.apple.com/documentation/musickit/musicrecentlyplayedrequest",
    "html": "Topics\nInitializers\ninit()\nCreates a request for items the user has recently played.\nInstance Properties\nvar limit: Int?\nA limit for the number of items to return in the response that contains items the user has recently played.\nvar offset: Int?\nAn offet for the request.\nInstance Methods\nfunc response() async throws -> MusicRecentlyPlayedResponse<MusicItemType>\nFetches items the user has recently played."
  },
  {
    "title": "Using MusicKit to Integrate with Apple Music",
    "url": "https://developer.apple.com/documentation/musickit/using_musickit_to_integrate_with_apple_music",
    "html": "Overview\n\nNote\n\nThis sample code project is associated with WWDC21 session 10294: Meet MusicKit for Swift.\n\nConfigure the Sample Code Project\n\nThis sample code project must be run on a physical device.\n\nBefore you run the sample code project in Xcode, perform the following steps:\n\nIn the Project navigator, select the project and click the Signing & Capabilities tab.\n\nSelect your developer team from the Team menu.\n\nChoose a new bundle identifier for the MusicAlbums target, and enter it in the Bundle Identifier field. The bundle identifier within the project has an associated App ID, so you need a unique identifier to create your own App ID. Use a reverse-DNS format for your identifier, as Preparing your app for distribution describes.\n\nIn Safari, visit the Certificates, Identifiers, and Profiles section of the developer web site.\n\nSelect Identifiers and click the Add button to create a new App ID for MusicAlbums. Follow the steps until you reach the Register an App ID page.\n\nFor the Bundle ID, select Explicit, and enter the bundle identifier from step 2.\n\nClick the App Services tab, and select the MusicKit checkbox.\n\nComplete the App ID creation process.\n\nAfter creating your App ID, your Xcode project needs no additional configuration. The MusicKit App Service is a run-time service that automatically associates with your app’s bundle ID.\n\nSee Also\nEssentials\nUsing Automatic Developer Token Generation for Apple Music API\nEnable your app’s integration with the MusicKit App Service in the developer portal.\nExplore more content with MusicKit\nTrack your outdoor runs with access to the Apple Music catalog, personal recommendations, and your own personal music library."
  },
  {
    "title": "TitledSection",
    "url": "https://developer.apple.com/documentation/musickit/titledsection",
    "html": "Overview\n\nFor example, when you perform a library sectioned request of albums, the library sectioned response will contain albums grouped by the first letter of their title, and the title property of this section will be equal to that first letter.\n\nTopics\nOperators\nstatic func == (TitledSection, TitledSection) -> Bool\nReturns a Boolean value indicating whether two values are equal.\nInstance Properties\nvar hashValue: Int\nThe hash value.\nvar id: MusicItemID\nThe unique identifier for the titled section.\nlet title: String\nThe title of the section.\nInstance Methods\nfunc hash(into: inout Hasher)\nHashes the essential components of this value by feeding them into the given hasher.\nType Aliases\ntypealias ID\nA type representing the stable identity of the entity associated with an instance.\nDefault Implementations\nEquatable Implementations\nRelationships\nConforms To\nEquatable\nHashable\nIdentifiable\nMusicLibrarySectionRequestable\nSendable"
  },
  {
    "title": "MusicPersonalRecommendationsResponse",
    "url": "https://developer.apple.com/documentation/musickit/musicpersonalrecommendationsresponse",
    "html": "Topics\nOperators\nstatic func == (MusicPersonalRecommendationsResponse, MusicPersonalRecommendationsResponse) -> Bool\nReturns a Boolean value indicating whether two values are equal.\nInstance Properties\nvar hashValue: Int\nThe hash value.\nlet recommendations: MusicItemCollection<MusicPersonalRecommendation>\nA collection of personal recommendations.\nInstance Methods\nfunc hash(into: inout Hasher)\nHashes the essential components of this value by feeding them into the given hasher.\nDefault Implementations\nCustomDebugStringConvertible Implementations\nCustomStringConvertible Implementations\nDecodable Implementations\nEncodable Implementations\nEquatable Implementations\nRelationships\nConforms To\nCustomDebugStringConvertible\nCustomStringConvertible\nDecodable\nEncodable\nEquatable\nHashable\nSendable"
  },
  {
    "title": "MusicLibrarySectionedResponse",
    "url": "https://developer.apple.com/documentation/musickit/musiclibrarysectionedresponse",
    "html": "Topics\nInstance Properties\nlet sections: [MusicLibrarySection<SectionType, MusicItemType>]\nAn array of sections that match the filters on the originating library request.\nDefault Implementations\nCustomDebugStringConvertible Implementations\nCustomStringConvertible Implementations\nEquatable Implementations\nHashable Implementations\nRelationships\nConforms To\nCustomDebugStringConvertible\nCustomStringConvertible\nEquatable\nHashable\nSendable"
  },
  {
    "title": "MusicPersonalRecommendationsRequest",
    "url": "https://developer.apple.com/documentation/musickit/musicpersonalrecommendationsrequest",
    "html": "Topics\nOperators\nstatic func == (MusicPersonalRecommendationsRequest, MusicPersonalRecommendationsRequest) -> Bool\nReturns a Boolean value indicating whether two values are equal.\nInitializers\ninit()\nCreates a request to fetch default personal recommendations for the user.\ninit<S>(refreshing: S)\nCreates a request to fetch default personal recommendations for the user.\nInstance Properties\nvar hashValue: Int\nThe hash value.\nvar limit: Int?\nA limit for the number of recommendations to return in the personal recommendations response.\nvar offset: Int?\nAn offet for the request.\nInstance Methods\nfunc hash(into: inout Hasher)\nHashes the essential components of this value by feeding them into the given hasher.\nfunc response() async throws -> MusicPersonalRecommendationsResponse\nFetches the music recommendations based on the user’s library and listening history.\nDefault Implementations\nEquatable Implementations\nRelationships\nConforms To\nEquatable\nHashable\nSendable"
  },
  {
    "title": "LibrarySongSortProperties",
    "url": "https://developer.apple.com/documentation/musickit/librarysongsortproperties",
    "html": "Topics\nInstance Properties\nvar albumTitle: String?\nThe title of the album the song appears on.\n\nRequired\n\nvar artistName: String?\nThe artist’s name.\n\nRequired\n\nvar composerName: String?\nThe name of the song’s composer.\n\nRequired\n\nvar discNumber: Int?\nThe disc number of the song.\n\nRequired\n\nvar duration: TimeInterval?\nThe duration of the song.\n\nRequired\n\nvar lastPlayedDate: Date?\nThe date when the user last played the song on this device.\n\nRequired\n\nvar libraryAddedDate: Date?\nThe date when the user added the song to the library.\n\nRequired\n\nvar playCount: Int?\nThe number of times the user played the song.\n\nRequired\n\nvar title: String\nThe title of the song.\n\nRequired\n\nvar trackNumber: Int?\nThe song’s number in the album’s track list.\n\nRequired"
  },
  {
    "title": "MusicCatalogChartsRequest",
    "url": "https://developer.apple.com/documentation/musickit/musiccatalogchartsrequest",
    "html": "Topics\nOperators\nstatic func == (MusicCatalogChartsRequest, MusicCatalogChartsRequest) -> Bool\nReturns a Boolean value indicating whether two values are equal.\nInitializers\ninit(genre: Genre?, kinds: [MusicCatalogChartKind], types: [any MusicCatalogChartRequestable.Type])\nCreates a catalog charts request for a specified genre and list of types to include in the catalog charts response.\nInstance Properties\nvar genre: Genre?\nThe genre for the request.\nvar hashValue: Int\nThe hash value.\nvar kinds: [MusicCatalogChartKind]\nThe kinds of requested catalog charts.\nvar limit: Int?\nA limit for the number of items to return in the catalog search response.\nvar offset: Int?\nAn offet for the request.\nvar types: [any MusicCatalogChartRequestable.Type]\nThe list of requested types for the catalog charts response.\nInstance Methods\nfunc hash(into: inout Hasher)\nHashes the essential components of this value by feeding them into the given hasher.\nfunc response() async throws -> MusicCatalogChartsResponse\nFetches the most popular items of the requested types that match the genre and kinds for the request.\nDefault Implementations\nEquatable Implementations\nRelationships\nConforms To\nEquatable\nHashable\nSendable"
  },
  {
    "title": "MusicCatalogTopLevelResourceRequesting",
    "url": "https://developer.apple.com/documentation/musickit/musiccatalogtoplevelresourcerequesting",
    "html": "Relationships\nInherits From\nMusicItem\nSendable\nConforming Types\nGenre"
  },
  {
    "title": "LibraryTrackFilter",
    "url": "https://developer.apple.com/documentation/musickit/librarytrackfilter",
    "html": "Topics\nInstance Properties\nvar albumTitle: String?\nThe title of the album the track appears on.\n\nRequired\n\nvar albums: MusicItemCollection<Album>?\nThe track’s associated albums.\n\nRequired\n\nvar artistName: String?\nThe artist’s name.\n\nRequired\n\nvar artists: MusicItemCollection<Artist>?\nThe track’s associated artists.\n\nRequired\n\nvar genres: MusicItemCollection<Genre>?\nThe track’s associated genres.\n\nRequired\n\nvar id: MusicItemID\nThe unique identifier for the track.\n\nRequired\n\nvar title: String\nThe title of the track.\n\nRequired"
  },
  {
    "title": "MusicCatalogChartRequestable",
    "url": "https://developer.apple.com/documentation/musickit/musiccatalogchartrequestable",
    "html": "Relationships\nInherits From\nMusicItem\nSendable\nConforming Types\nAlbum\nMusicVideo\nPlaylist\nSong"
  },
  {
    "title": "LibraryTrackSortProperties",
    "url": "https://developer.apple.com/documentation/musickit/librarytracksortproperties",
    "html": "Topics\nInstance Properties\nvar albumTitle: String?\nThe title of the album the track appears on.\n\nRequired\n\nvar artistName: String?\nThe artist’s name.\n\nRequired\n\nvar discNumber: Int?\nThe disc number of the track.\n\nRequired\n\nvar duration: TimeInterval?\nThe duration of the track.\n\nRequired\n\nvar lastPlayedDate: Date?\nThe date when the user last played the track on this device.\n\nRequired\n\nvar libraryAddedDate: Date?\nThe date when the user added the track to the library.\n\nRequired\n\nvar playCount: Int?\nThe number of times the user played the track.\n\nRequired\n\nvar title: String\nThe title of the track.\n\nRequired\n\nvar trackNumber: Int?\nThe track’s number in the album’s track list.\n\nRequired"
  },
  {
    "title": "LibraryGenreSortProperties",
    "url": "https://developer.apple.com/documentation/musickit/librarygenresortproperties",
    "html": "Topics\nInstance Properties\nvar libraryAddedDate: Date?\nThe date when the user added the genre to the library.\n\nRequired\n\nvar name: String\nThe localized name of the genre.\n\nRequired"
  },
  {
    "title": "LibraryArtistSortProperties",
    "url": "https://developer.apple.com/documentation/musickit/libraryartistsortproperties",
    "html": "Topics\nInstance Properties\nvar albumCount: Int?\nThe number of albums from this artist.\n\nRequired\n\nvar libraryAddedDate: Date?\nThe date when the user added the artist to the library.\n\nRequired\n\nvar name: String\nThe name of the artist.\n\nRequired"
  },
  {
    "title": "LibraryGenreFilter",
    "url": "https://developer.apple.com/documentation/musickit/librarygenrefilter",
    "html": "Topics\nInstance Properties\nvar id: MusicItemID\nThe unique identifier for the genre.\n\nRequired\n\nvar name: String\nThe localized name of the genre.\n\nRequired"
  },
  {
    "title": "LibraryArtistFilter",
    "url": "https://developer.apple.com/documentation/musickit/libraryartistfilter",
    "html": "Topics\nInstance Properties\nvar genres: MusicItemCollection<Genre>?\nThe artist’s associated genres.\n\nRequired\n\nvar id: MusicItemID\nThe unique identifier for the artist.\n\nRequired\n\nvar name: String\nThe name of the artist.\n\nRequired\n\nvar playlists: MusicItemCollection<Playlist>?\nThe artist’s associated playlists.\n\nRequired"
  },
  {
    "title": "MusicItemID",
    "url": "https://developer.apple.com/documentation/musickit/musicitemid",
    "html": "Topics\nInitializers\ninit(String)\nCreates a music item identifier with a string.\ninit(rawValue: String)\nCreates a new instance with the specified raw value.\ninit(stringLiteral: String)\nCreates an instance initialized to the given string value.\nInstance Properties\nlet rawValue: String\nThe corresponding value of the raw type.\nType Aliases\ntypealias ExtendedGraphemeClusterLiteralType\nA type that represents an extended grapheme cluster literal.\ntypealias RawValue\nThe raw type that can be used to represent all values of the conforming type.\ntypealias StringLiteralType\nA type that represents a string literal.\ntypealias UnicodeScalarLiteralType\nA type that represents a Unicode scalar literal.\nDefault Implementations\nCustomStringConvertible Implementations\nDecodable Implementations\nEncodable Implementations\nEquatable Implementations\nExpressibleByExtendedGraphemeClusterLiteral Implementations\nExpressibleByUnicodeScalarLiteral Implementations\nRawRepresentable Implementations\nRelationships\nConforms To\nCustomStringConvertible\nDecodable\nEncodable\nEquatable\nExpressibleByExtendedGraphemeClusterLiteral\nExpressibleByStringLiteral\nExpressibleByUnicodeScalarLiteral\nHashable\nMusicLibraryRequestFilterValueEquatable\nMusicLibraryRequestFilterValueMembershipComparable\nRawRepresentable\nSendable\nSee Also\nUtility\nprotocol MusicItem\nA protocol with basic requirements for music items.\nstruct MusicItemCollection\nA collection of music items.\nprotocol MusicPropertyContainer\nA protocol for music items that allow loading additional properties that you can fetch asynchronously.\nclass MusicRelationshipProperty\nAn identifier for a music item relationship property from a specific root type to a specific value type for the element of the resulting collection.\nclass MusicExtendedAttributeProperty\nAn identifier for a music item extended attribute property from a specific root type to a specific resulting value type.\nclass MusicAttributeProperty\nAn identifier for a music item attribute property from a specific root type to a specific resulting value type.\nclass PartialMusicAsyncProperty\nA partially type-erased identifier for a music item property that you can fetch asynchronously from a concrete root type to any resulting value type.\nclass PartialMusicProperty\nA partially type-erased identifier for a music item property from a concrete root type to any resulting value type.\nclass AnyMusicProperty\nA type-erased identifier for a music item property, from any root type to any resulting value type."
  },
  {
    "title": "Artwork",
    "url": "https://developer.apple.com/documentation/musickit/artwork",
    "html": "Topics\nOperators\nstatic func == (Artwork, Artwork) -> Bool\nReturns a Boolean value indicating whether two values are equal.\nInstance Properties\nlet alternateText: String?\nA textual description for the image.\nlet backgroundColor: CGColor?\nThe average background color of the image.\nvar hashValue: Int\nThe hash value.\nlet maximumHeight: Int\nThe maximum height available for the image.\nlet maximumWidth: Int\nThe maximum width available for the image.\nlet primaryTextColor: CGColor?\nThe primary text color to use when displaying the background color.\nlet quaternaryTextColor: CGColor?\nThe final posttertiary text color to use when displaying the background color.\nlet secondaryTextColor: CGColor?\nThe secondary text color to use when displaying the background color.\nlet tertiaryTextColor: CGColor?\nThe tertiary text color to use when displaying the background color.\nInstance Methods\nfunc hash(into: inout Hasher)\nHashes the essential components of this value by feeding them into the given hasher.\nfunc url(width: Int, height: Int) -> URL?\nReturns a URL to request the image asset for a specified width and height.\nDefault Implementations\nCustomDebugStringConvertible Implementations\nCustomStringConvertible Implementations\nDecodable Implementations\nEncodable Implementations\nEquatable Implementations\nRelationships\nConforms To\nCustomDebugStringConvertible\nCustomStringConvertible\nDecodable\nEncodable\nEquatable\nHashable\nSendable\nSee Also\nArtwork\nstruct ArtworkImage\nA view that displays the image for a music item’s artwork."
  },
  {
    "title": "MusicSubscriptionOffer",
    "url": "https://developer.apple.com/documentation/musickit/musicsubscriptionoffer",
    "html": "Topics\nStructures\nstruct Action\nA representation of the entry point for the sheet with subscription offers for Apple Music.\nstruct MessageIdentifier\nAn identifier for the main message that the subscription offer sheet presents to the user.\nstruct Options\nOptions for loading subscription offers for Apple Music.\nSee Also\nApple Music Subscription\nstruct MusicSubscription\nA representation of the current state of the user’s subscription to Apple Music."
  },
  {
    "title": "MusicDeveloperTokenProvider",
    "url": "https://developer.apple.com/documentation/musickit/musicdevelopertokenprovider",
    "html": "Topics\nInstance Methods\nfunc developerToken(options: MusicTokenRequestOptions) async throws -> String\nFetches and returns a developer token for Apple Music API.\n\nRequired\n\nRelationships\nInherits From\nSendable\nConforming Types\nDefaultMusicTokenProvider\nSee Also\nToken management\ntypealias MusicTokenProvider\nAn object that music requests use to access Apple Music API.\nclass MusicUserTokenProvider\nA class that music requests use to fetch user tokens your app requires to access Apple Music API.\nstruct MusicTokenRequestOptions\nOptions that music requests pass into token provider methods to fetch a required token for accessing Apple Music API.\nenum MusicTokenRequestError\nAn error that the token provider or music requests can throw upon requesting any token necessary for accessing Apple Music API.\nclass DefaultMusicTokenProvider\nThe default token provider that music requests use to access Apple Music API."
  },
  {
    "title": "ArtworkImage",
    "url": "https://developer.apple.com/documentation/musickit/artworkimage",
    "html": "Overview\n\nYou can create an artwork image with an instance of Artwork.\n\nWhile the artwork’s image data is loading, ArtworkImage automatically displays a placeholder with a solid color that matches the backgroundColor property of the artwork to render.\n\nTopics\nInitializers\ninit(Artwork, height: CGFloat)\nCreates an instance with a specified height.\ninit(Artwork, width: CGFloat)\nCreates an instance with a specified width.\ninit(Artwork, width: CGFloat, height: CGFloat)\nCreates an instance with a specified width and height.\nInstance Properties\nvar body: some View\nThe content and behavior of the view.\nType Aliases\ntypealias Body\nThe type of view representing the body of this view.\nDefault Implementations\nView Implementations\nRelationships\nConforms To\nView\nSee Also\nArtwork\nstruct Artwork\nAn object that represents artwork for a music item."
  },
  {
    "title": "PlayParameters",
    "url": "https://developer.apple.com/documentation/musickit/playparameters",
    "html": "Topics\nOperators\nstatic func == (PlayParameters, PlayParameters) -> Bool\nReturns a Boolean value indicating whether two values are equal.\nInstance Properties\nvar hashValue: Int\nThe hash value.\nInstance Methods\nfunc hash(into: inout Hasher)\nHashes the essential components of this value by feeding them into the given hasher.\nDefault Implementations\nDecodable Implementations\nEncodable Implementations\nEquatable Implementations\nRelationships\nConforms To\nDecodable\nEncodable\nEquatable\nHashable\nSendable\nSee Also\nPlayback\nclass ApplicationMusicPlayer\nAn object your app uses to play music in a way that doesn’t affect the Music app’s state.\nclass SystemMusicPlayer\nAn object your app uses to play music by controlling the Music app’s state.\nclass MusicPlayer\nAn object your app uses to play music.\nprotocol PlayableMusicItem\nA set of properties that a music player uses to initiate playback for a music item."
  },
  {
    "title": "MusicUserTokenProvider",
    "url": "https://developer.apple.com/documentation/musickit/musicusertokenprovider",
    "html": "Topics\nInitializers\ninit()\nCreates a user token provider.\nInstance Methods\nfunc userToken(for: String, options: MusicTokenRequestOptions) async throws -> String\nFetches and returns a user token for Apple Music API.\nSee Also\nToken management\ntypealias MusicTokenProvider\nAn object that music requests use to access Apple Music API.\nprotocol MusicDeveloperTokenProvider\nA set of methods that music requests use to access Apple Music API.\nstruct MusicTokenRequestOptions\nOptions that music requests pass into token provider methods to fetch a required token for accessing Apple Music API.\nenum MusicTokenRequestError\nAn error that the token provider or music requests can throw upon requesting any token necessary for accessing Apple Music API.\nclass DefaultMusicTokenProvider\nThe default token provider that music requests use to access Apple Music API."
  },
  {
    "title": "MusicSubscription",
    "url": "https://developer.apple.com/documentation/musickit/musicsubscription",
    "html": "Topics\nStructures\nstruct Updates\nAn asynchronous sequence to use for observing updates to the current state of the user’s subscription to Apple Music.\nOperators\nstatic func == (MusicSubscription, MusicSubscription) -> Bool\nReturns a Boolean value indicating whether two values are equal.\nInstance Properties\nlet canBecomeSubscriber: Bool\nA capability that allows your app to present subscription offers for Apple Music.\nlet canPlayCatalogContent: Bool\nA capability that allows your app to play subscription content using a music player.\nvar description: String\nA textual representation of this instance.\nlet hasCloudLibraryEnabled: Bool\nA capability that allows your app to perform modifications to the user’s iCloud Music Library.\nvar hashValue: Int\nThe hash value.\nInstance Methods\nfunc hash(into: inout Hasher)\nHashes the essential components of this value by feeding them into the given hasher.\nType Properties\nstatic var current: MusicSubscription\nThe current state of the user’s subscription to Apple Music.\nstatic var subscriptionUpdates: MusicSubscription.Updates\nAn asynchronous sequence to use for observing updates to the current state of the user’s subscription to Apple Music.\nEnumerations\nenum Error\nAn error that MusicKit can throw upon requesting the current music subscription of the user.\nDefault Implementations\nEquatable Implementations\nRelationships\nConforms To\nCustomStringConvertible\nEquatable\nHashable\nSendable\nSee Also\nApple Music Subscription\nstruct MusicSubscriptionOffer\nA type for grouping other types for showing subscription offers for Apple Music."
  },
  {
    "title": "MusicDataRequest",
    "url": "https://developer.apple.com/documentation/musickit/musicdatarequest",
    "html": "Topics\nStructures\nstruct Error\nAn error that the Apple Music API returns.\nOperators\nstatic func == (MusicDataRequest, MusicDataRequest) -> Bool\nReturns a Boolean value indicating whether two values are equal.\nInitializers\ninit(urlRequest: URLRequest)\nCreates a data request with a URL request.\nInstance Properties\nvar hashValue: Int\nThe hash value.\nlet urlRequest: URLRequest\nThe URL request for the data request.\nInstance Methods\nfunc hash(into: inout Hasher)\nHashes the essential components of this value by feeding them into the given hasher.\nfunc response() async throws -> MusicDataResponse\nFetches data from the Apple Music API endpoint that the URL request defines.\nType Properties\nstatic var currentCountryCode: String\nFetches the current country code for the user’s Apple Music account.\nstatic var tokenProvider: any MusicUserTokenProvider & MusicDeveloperTokenProvider\nThe shared token provider for fetching tokens that Apple Music API requires.\nDefault Implementations\nCustomStringConvertible Implementations\nEquatable Implementations\nRelationships\nConforms To\nCustomStringConvertible\nEquatable\nHashable\nSendable\nSee Also\nGeneral Purpose Data Request\nstruct MusicDataResponse\nAn object containing results for a data request."
  },
  {
    "title": "MusicAuthorization",
    "url": "https://developer.apple.com/documentation/musickit/musicauthorization",
    "html": "Topics\nType Properties\nstatic var currentStatus: MusicAuthorization.Status\nThe authorization status the user sets for accessing MusicKit.\nType Methods\nstatic func request() async -> MusicAuthorization.Status\nAsks the user for permission for the current app to access MusicKit.\nEnumerations\nenum Status\nA value that indicates the authorization status the user sets for the current app to access their Apple Music data."
  },
  {
    "title": "MusicVideoFilter",
    "url": "https://developer.apple.com/documentation/musickit/musicvideofilter",
    "html": "Topics\nInstance Properties\nvar id: MusicItemID\nThe unique identifier for the music video.\n\nRequired\n\nvar isrc: String?\nThe International Standard Recording Code (ISRC) for the music video.\n\nRequired\n\nSee Also\nResource Loading Using Filters\nstruct MusicCatalogResourceRequest\nA request that your app uses to fetch items from the Apple Music catalog using a filter.\nstruct MusicCatalogResourceResponse\nAn object that contains results for a catalog resource request.\nprotocol AlbumFilter\nAlbum properties your app uses as a filter for a catalog resource request.\nprotocol ArtistFilter\nArtist properties your app uses as a filter for a catalog resource request.\nprotocol CuratorFilter\nCurator properties your app uses as a filter for a catalog resource request.\nprotocol GenreFilter\nGenre properties your app uses as a filter for a catalog resource request.\nprotocol PlaylistFilter\nPlaylist properties your app uses as a filter for a catalog resource request.\nprotocol RadioShowFilter\nRadio Show properties your app uses as a filter for a catalog resource request.\nprotocol RecordLabelFilter\nThe set of record label properties your app uses as a filter for a catalog resource request.\nprotocol SongFilter\nSong properties your app uses as a filter for a catalog resource request.\nprotocol StationFilter\nThe set of station properties your app uses as a filter for a catalog resource request.\nprotocol FilterableMusicItem\nA declaration of the associated type that contains the set of music item properties your app uses as a filter for a catalog resource request."
  },
  {
    "title": "GenreFilter",
    "url": "https://developer.apple.com/documentation/musickit/genrefilter",
    "html": "Topics\nInstance Properties\nvar id: MusicItemID\nThe unique identifier for the genre.\n\nRequired\n\nSee Also\nResource Loading Using Filters\nstruct MusicCatalogResourceRequest\nA request that your app uses to fetch items from the Apple Music catalog using a filter.\nstruct MusicCatalogResourceResponse\nAn object that contains results for a catalog resource request.\nprotocol AlbumFilter\nAlbum properties your app uses as a filter for a catalog resource request.\nprotocol ArtistFilter\nArtist properties your app uses as a filter for a catalog resource request.\nprotocol CuratorFilter\nCurator properties your app uses as a filter for a catalog resource request.\nprotocol MusicVideoFilter\nMusic video properties your app uses as a filter for a catalog resource request.\nprotocol PlaylistFilter\nPlaylist properties your app uses as a filter for a catalog resource request.\nprotocol RadioShowFilter\nRadio Show properties your app uses as a filter for a catalog resource request.\nprotocol RecordLabelFilter\nThe set of record label properties your app uses as a filter for a catalog resource request.\nprotocol SongFilter\nSong properties your app uses as a filter for a catalog resource request.\nprotocol StationFilter\nThe set of station properties your app uses as a filter for a catalog resource request.\nprotocol FilterableMusicItem\nA declaration of the associated type that contains the set of music item properties your app uses as a filter for a catalog resource request."
  },
  {
    "title": "MusicKit",
    "url": "https://developer.apple.com/documentation/MusicKit",
    "html": "Overview\n\nUse MusicKit to integrate your app with Apple Music API, a web service you use to access information about music items in the Apple Music catalog. Using MusicKit, you can more easily build apps that tie into Apple Music.\n\nThe framework provides a model layer for accessing music items in Swift, as well as playback support so you can add music to your app. Additionally, it provides some related user interface elements, such as a view to display images that correspond to artwork for a music item, or a way to present music subscription offers to users who may not have an active Apple Music subscription.\n\nImportant\n\nUsers must grant permission for your app to access their music data. Add the NSAppleMusicUsageDescription key to your app’s Info.plist file, and include a description of how you intend to use the user’s media. If this key isn’t present, the system terminates your app when it tries to access the user’s music.\n\nRequest permission for your app to use MusicKit with MusicAuthorization. Check specific capabilities for the current MusicSubscription to ensure your music-related functionality is available to the user. Find music items using a search term with MusicCatalogSearchRequest, or find music items using a filter with MusicCatalogResourceRequest. Play music in your app with one of the two music players that MusicKit offers. Allow the user to begin a free trial for Apple Music from within your app by presenting a music subscription offer.\n\nYou can load content from an arbitrary Apple Music API endpoint with MusicDataRequest to take further advantage of additional functionality available in Apple Music API.\n\nTopics\nEssentials\nUsing Automatic Developer Token Generation for Apple Music API\nEnable your app’s integration with the MusicKit App Service in the developer portal.\nUsing MusicKit to Integrate with Apple Music\nFind an album in Apple Music that corresponds to a CD in a user’s collection, and present the information for the album.\nproperty list key NSAppleMusicUsageDescription\nA message that tells the user why the app is requesting access to the user’s media library.\nMusic Items\nA set of value types represents each kind of music item.\nstruct Album\nA music item that represents an album.\nstruct Artist\nA music item that represents an artist.\nstruct Curator\nA music item that represents a curator.\nstruct Genre\nA music item that represents a genre.\nstruct MusicVideo\nA music item that represents a music video.\nstruct Playlist\nA music item that represents a playlist.\nstruct RadioShow\nA music item that represents a radio show.\nstruct RecordLabel\nA music item that represents a record label.\nstruct Song\nA music item that represents a song.\nstruct Station\nA music item that represents a station.\nenum Track\nA music item that represents a track.\nMusic Item Attributes\nA set of structured attributes for music items.\nenum ContentRating\nThe rating of the content that potentially plays while playing a resource.\nstruct EditorialNotes\nAn object that represents editorial notes.\nstruct PreviewAsset\nAn object that represents a preview for resources.\nCatalog Search\nThe catalog search request allows your app to find music items in the Apple Music catalog.\nstruct MusicCatalogSearchRequest\nA request that your app uses to fetch items from the Apple Music catalog using a search term.\nstruct MusicCatalogSearchResponse\nAn object that contains results for a catalog search request.\nprotocol MusicCatalogSearchable\nA protocol for music items that your app can fetch by using a catalog search request.\nResource Loading Using Filters\nThe catalog resource request allows your app to load items using a specific filter. Each music item type has its own set of properties you can use as a filter for a catalog resource request when loading music items for your app.\nstruct MusicCatalogResourceRequest\nA request that your app uses to fetch items from the Apple Music catalog using a filter.\nstruct MusicCatalogResourceResponse\nAn object that contains results for a catalog resource request.\nprotocol AlbumFilter\nAlbum properties your app uses as a filter for a catalog resource request.\nprotocol ArtistFilter\nArtist properties your app uses as a filter for a catalog resource request.\nprotocol CuratorFilter\nCurator properties your app uses as a filter for a catalog resource request.\nprotocol GenreFilter\nGenre properties your app uses as a filter for a catalog resource request.\nprotocol MusicVideoFilter\nMusic video properties your app uses as a filter for a catalog resource request.\nprotocol PlaylistFilter\nPlaylist properties your app uses as a filter for a catalog resource request.\nprotocol RadioShowFilter\nRadio Show properties your app uses as a filter for a catalog resource request.\nprotocol RecordLabelFilter\nThe set of record label properties your app uses as a filter for a catalog resource request.\nprotocol SongFilter\nSong properties your app uses as a filter for a catalog resource request.\nprotocol StationFilter\nThe set of station properties your app uses as a filter for a catalog resource request.\nprotocol FilterableMusicItem\nA declaration of the associated type that contains the set of music item properties your app uses as a filter for a catalog resource request.\nGeneral Purpose Data Request\nstruct MusicDataRequest\nA request for loading data from an arbitrary Apple Music API endpoint.\nstruct MusicDataResponse\nAn object containing results for a data request.\nPlayback\nclass ApplicationMusicPlayer\nAn object your app uses to play music in a way that doesn’t affect the Music app’s state.\nclass SystemMusicPlayer\nAn object your app uses to play music by controlling the Music app’s state.\nclass MusicPlayer\nAn object your app uses to play music.\nprotocol PlayableMusicItem\nA set of properties that a music player uses to initiate playback for a music item.\nstruct PlayParameters\nAn opaque object that represents parameters to initiate playback of a playable music item using a music player.\nArtwork\nstruct Artwork\nAn object that represents artwork for a music item.\nstruct ArtworkImage\nA view that displays the image for a music item’s artwork.\nAuthorization\nBefore you can use any of the functionality of the framework, you need to request the user’s informed consent for your app to access their music data.\nstruct MusicAuthorization\nA type that allows you to request the user’s informed consent for your app to access their music data.\nApple Music Subscription\nstruct MusicSubscription\nA representation of the current state of the user’s subscription to Apple Music.\nstruct MusicSubscriptionOffer\nA type for grouping other types for showing subscription offers for Apple Music.\nToken management\nThe framework manages tokens for accessing Apple Music API automatically by default, but you can generate your own developer token by creating a class that inherits from the token provider type alias.\ntypealias MusicTokenProvider\nAn object that music requests use to access Apple Music API.\nprotocol MusicDeveloperTokenProvider\nA set of methods that music requests use to access Apple Music API.\nclass MusicUserTokenProvider\nA class that music requests use to fetch user tokens your app requires to access Apple Music API.\nstruct MusicTokenRequestOptions\nOptions that music requests pass into token provider methods to fetch a required token for accessing Apple Music API.\nenum MusicTokenRequestError\nAn error that the token provider or music requests can throw upon requesting any token necessary for accessing Apple Music API.\nclass DefaultMusicTokenProvider\nThe default token provider that music requests use to access Apple Music API.\nUtility\nprotocol MusicItem\nA protocol with basic requirements for music items.\nstruct MusicItemID\nAn object that represents a unique identifier for a music item.\nstruct MusicItemCollection\nA collection of music items.\nprotocol MusicPropertyContainer\nA protocol for music items that allow loading additional properties that you can fetch asynchronously.\nclass MusicRelationshipProperty\nAn identifier for a music item relationship property from a specific root type to a specific value type for the element of the resulting collection.\nclass MusicExtendedAttributeProperty\nAn identifier for a music item extended attribute property from a specific root type to a specific resulting value type.\nclass MusicAttributeProperty\nAn identifier for a music item attribute property from a specific root type to a specific resulting value type.\nclass PartialMusicAsyncProperty\nA partially type-erased identifier for a music item property that you can fetch asynchronously from a concrete root type to any resulting value type.\nclass PartialMusicProperty\nA partially type-erased identifier for a music item property from a concrete root type to any resulting value type.\nclass AnyMusicProperty\nA type-erased identifier for a music item property, from any root type to any resulting value type.\nClasses\nclass MusicLibrary\nAn object your app uses to access the user’s music library.\nProtocols\nprotocol LibraryAlbumFilter\nAlbum properties your app uses as a filter for a library request.\nprotocol LibraryAlbumSortProperties\nAlbum properties your app uses to sort results for a library request.\nprotocol LibraryArtistFilter\nArtist properties your app uses as a filter for a library request.\nprotocol LibraryArtistSortProperties\nArtist properties your app uses to sort results for a library request.\nprotocol LibraryGenreFilter\nGenre properties your app uses as a filter for a library request.\nprotocol LibraryGenreSortProperties\nGenre properties your app uses to sort results for a library request.\nprotocol LibraryMusicVideoFilter\nMusic video properties your app uses as a filter for a library request.\nprotocol LibraryMusicVideoSortProperties\nMusic video properties your app uses to sort results for a library request.\nprotocol LibraryPlaylistEntryFilter\nPlaylist entry properties your app uses as a filter for a library request.\nprotocol LibraryPlaylistEntrySortProperties\nPlaylist entry properties your app uses to sort results for a library request.\nprotocol LibraryPlaylistFilter\nPlaylist properties your app uses as a filter for a library request.\nprotocol LibraryPlaylistSortProperties\nPlaylist properties your app uses to sort results for a library request.\nprotocol LibrarySongFilter\nSong properties your app uses as a filter for a library request.\nprotocol LibrarySongSortProperties\nSong properties your app uses to sort results for a library request.\nprotocol LibraryTrackFilter\nTrack properties your app uses as a filter for a library request.\nprotocol LibraryTrackSortProperties\nTrack properties your app uses to sort results for a library request.\nprotocol MusicCatalogChartRequestable\nA protocol for music items that your app can fetch by using a catalog charts request.\nprotocol MusicCatalogTopLevelResourceRequesting\nA protocol for music items that your app can fetch by using a catalog resource request without any filter.\nprotocol MusicLibraryAddable\nA protocol for music items that your app can add to the music library.\nprotocol MusicLibraryRequestFilterValueEquatable\nA protocol for types of values your app can use with equality filters when fetching items using a music library request.\nprotocol MusicLibraryRequestFilterValueMembershipComparable\nA protocol for types of values your app can use with membership filters when fetching items using a music library request.\nprotocol MusicLibraryRequestable\nA protocol for music items that your app can fetch by using a library request.\nprotocol MusicLibrarySearchable\nA protocol for music items that your app can fetch by using a library search request.\nprotocol MusicLibrarySectionRequestable\nA protocol for types your app uses as sections when fetching items using a library sectioned request.\nprotocol MusicPersonalRecommendationItem\nA protocol for music items that your app can fetch by using a personal recommendations request.\nprotocol MusicPlaylistAddable\nA protocol for music items that your app can add to a playlist.\nprotocol MusicRecentlyPlayedRequestable\nA protocol for music items that your app can fetch by using a recently played request.\nStructures\nstruct MusicCatalogChart\nAn object that contains popular items in the Apple Music catalog.\nstruct MusicCatalogChartsRequest\nA request that your app uses to fetch the most popular items in the Apple Music catalog.\nstruct MusicCatalogChartsResponse\nAn object that contains results for a catalog charts request.\nstruct MusicCatalogSearchSuggestionsRequest\nA request that your app uses to fetch suggestions from the Apple Music catalog using a search term.\nstruct MusicCatalogSearchSuggestionsResponse\nAn object that contains results for a catalog search suggestions request.\nstruct MusicLibraryRequest\nA request that your app uses to fetch items from the user’s music library.\nstruct MusicLibraryResponse\nAn object that contains results for a library request.\nstruct MusicLibrarySearchRequest\nA request that your app uses to fetch items from user’s library using a search term.\nstruct MusicLibrarySearchResponse\nAn object that contains results for a library search request.\nstruct MusicLibrarySection\nA section for a library sectioned response.\nstruct MusicLibrarySectionedRequest\nA request that your app uses to fetch items grouped by sections from the user’s music library.\nstruct MusicLibrarySectionedResponse\nAn object that contains results for a library sectioned request.\nstruct MusicPersonalRecommendation\nAn object that contains recommended items based on the user’s library and listening history.\nstruct MusicPersonalRecommendationsRequest\nA request that your app uses to fetch music recommendations based on the user’s library and listening history.\nstruct MusicPersonalRecommendationsResponse\nAn object that contains results for a personal recommendations request.\nstruct MusicRecentlyPlayedRequest\nA request that your app uses to fetch items the user has recently played.\nstruct MusicRecentlyPlayedResponse\nAn object that contains items the user has recently played.\nstruct TitledSection\nA section you can use to request items from the library grouped by title.\nType Aliases\ntypealias MusicRecentlyPlayedContainerRequest\nA request that your app uses to fetch albums, playlists or stations that the user has recently played.\ntypealias MusicRecentlyPlayedContainerResponse\nAn object that contains albums, playlists or stations that the user has recently played.\nEnumerations\nenum AudioVariant\nVariants that indicate the quality of audio available for an item.\nenum MusicCatalogChartKind\nThe available kinds of catalog charts.\nenum MusicPropertySource\nAn enumeration that specifies which source to use when requesting properties and relationships.\nenum RecentlyPlayedMusicItem\nAn item that represents an album, a playlist, or a station that the user has recently played.\nSee Also\nRelated Documentation\nMedia Player\nFind and play songs, audio podcasts, audio books, and more from within your app.\nApple Music API\nIntegrate streaming music with catalog and personal content."
  }
]