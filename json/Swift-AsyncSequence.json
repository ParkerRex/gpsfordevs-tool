[
  {
    "title": "reduce(_:_:)",
    "url": "https://developer.apple.com/documentation/swift/asyncsequence/reduce(_:_:)",
    "html": "Parameters\ninitialResult\n\nThe value to use as the initial accumulating value. The nextPartialResult closure receives initialResult the first time the closure runs.\n\nnextPartialResult\n\nA closure that combines an accumulating value and an element of the asynchronous sequence into a new accumulating value, for use in the next call of the nextPartialResult closure or returned to the caller.\n\nReturn Value\n\nThe final accumulated value. If the sequence has no elements, the result is initialResult.\n\nDiscussion\n\nUse the reduce(_:_:) method to produce a single value from the elements of an entire sequence. For example, you can use this method on an sequence of numbers to find their sum or product.\n\nThe nextPartialResult closure executes sequentially with an accumulating value initialized to initialResult and each element of the sequence.\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 4. The reduce(_:_:) method sums the values received from the asynchronous sequence.\n\nlet sum = await Counter(howHigh: 4)\n    .reduce(0) {\n        $0 + $1\n    }\nprint(sum)\n// Prints \"10\"\n\nSee Also\nTransforming a Sequence\nfunc map<Transformed>((Self.Element) async -> Transformed) -> AsyncMapSequence<Self, Transformed>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements.\nstruct AsyncMapSequence\nAn asynchronous sequence that maps the given closure over the asynchronous sequence’s elements.\nfunc map<Transformed>((Self.Element) async throws -> Transformed) -> AsyncThrowingMapSequence<Self, Transformed>\nCreates an asynchronous sequence that maps the given error-throwing closure over the asynchronous sequence’s elements.\nstruct AsyncThrowingMapSequence\nAn asynchronous sequence that maps the given error-throwing closure over the asynchronous sequence’s elements.\nfunc compactMap<ElementOfResult>((Self.Element) async -> ElementOfResult?) -> AsyncCompactMapSequence<Self, ElementOfResult>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements, omitting results that don’t return a value.\nstruct AsyncCompactMapSequence\nAn asynchronous sequence that maps a given closure over the asynchronous sequence’s elements, omitting results that don’t return a value.\nfunc compactMap<ElementOfResult>((Self.Element) async throws -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<Self, ElementOfResult>\nCreates an asynchronous sequence that maps an error-throwing closure over the base sequence’s elements, omitting results that don’t return a value.\nstruct AsyncThrowingCompactMapSequence\nAn asynchronous sequence that maps an error-throwing closure over the base sequence’s elements, omitting results that don’t return a value.\nfunc flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given transformation with each element of this sequence.\nstruct AsyncFlatMapSequence\nAn asynchronous sequence that concatenates the results of calling a given transformation with each element of this sequence.\nfunc flatMap<SegmentOfResult>((Self.Element) async throws -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<Self, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given error-throwing transformation with each element of this sequence.\nstruct AsyncThrowingFlatMapSequence\nAn asynchronous sequence that concatenates the results of calling a given error-throwing transformation with each element of this sequence.\nfunc reduce<Result>(into: Result, (inout Result, Self.Element) async throws -> Void) async rethrows -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure, given a mutable initial value."
  },
  {
    "title": "map(_:)",
    "url": "https://developer.apple.com/documentation/swift/asyncsequence/map(_:)-1q1k3",
    "html": "Parameters\ntransform\n\nA mapping closure. transform accepts an element of this sequence as its parameter and returns a transformed value of the same or of a different type.\n\nReturn Value\n\nAn asynchronous sequence that contains, in order, the elements produced by the transform closure.\n\nDiscussion\n\nUse the map(_:) method to transform every element received from a base asynchronous sequence. Typically, you use this to transform from one type of element to another.\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 5. The closure provided to the map(_:) method takes each Int and looks up a corresponding String from a romanNumeralDict dictionary. This means the outer for await in loop iterates over String instances instead of the underlying Int values that Counter produces:\n\nlet romanNumeralDict: [Int: String] =\n    [1: \"I\", 2: \"II\", 3: \"III\", 5: \"V\"]\n\n\nlet stream = Counter(howHigh: 5)\n    .map { romanNumeralDict[$0] ?? \"(unknown)\" }\nfor await numeral in stream {\n    print(numeral, terminator: \" \")\n}\n// Prints \"I II III (unknown) V \"\n\nSee Also\nTransforming a Sequence\nstruct AsyncMapSequence\nAn asynchronous sequence that maps the given closure over the asynchronous sequence’s elements.\nfunc map<Transformed>((Self.Element) async throws -> Transformed) -> AsyncThrowingMapSequence<Self, Transformed>\nCreates an asynchronous sequence that maps the given error-throwing closure over the asynchronous sequence’s elements.\nstruct AsyncThrowingMapSequence\nAn asynchronous sequence that maps the given error-throwing closure over the asynchronous sequence’s elements.\nfunc compactMap<ElementOfResult>((Self.Element) async -> ElementOfResult?) -> AsyncCompactMapSequence<Self, ElementOfResult>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements, omitting results that don’t return a value.\nstruct AsyncCompactMapSequence\nAn asynchronous sequence that maps a given closure over the asynchronous sequence’s elements, omitting results that don’t return a value.\nfunc compactMap<ElementOfResult>((Self.Element) async throws -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<Self, ElementOfResult>\nCreates an asynchronous sequence that maps an error-throwing closure over the base sequence’s elements, omitting results that don’t return a value.\nstruct AsyncThrowingCompactMapSequence\nAn asynchronous sequence that maps an error-throwing closure over the base sequence’s elements, omitting results that don’t return a value.\nfunc flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given transformation with each element of this sequence.\nstruct AsyncFlatMapSequence\nAn asynchronous sequence that concatenates the results of calling a given transformation with each element of this sequence.\nfunc flatMap<SegmentOfResult>((Self.Element) async throws -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<Self, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given error-throwing transformation with each element of this sequence.\nstruct AsyncThrowingFlatMapSequence\nAn asynchronous sequence that concatenates the results of calling a given error-throwing transformation with each element of this sequence.\nfunc reduce<Result>(Result, (Result, Self.Element) async throws -> Result) async rethrows -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure.\nfunc reduce<Result>(into: Result, (inout Result, Self.Element) async throws -> Void) async rethrows -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure, given a mutable initial value."
  },
  {
    "title": "prefix(while:)",
    "url": "https://developer.apple.com/documentation/swift/asyncsequence/prefix(while:)-6yp5n",
    "html": "Parameters\npredicate\n\nA error-throwing closure that takes an element of the asynchronous sequence as its argument and returns a Boolean value that indicates whether to include the element in the modified sequence.\n\nReturn Value\n\nAn asynchronous sequence that contains, in order, the elements of the base sequence that satisfy the given predicate. If the predicate throws an error, the sequence contains only values produced prior to the error.\n\nDiscussion\n\nUse prefix(while:) to produce values while elements from the base sequence meet a condition you specify. The modified sequence ends when the predicate closure returns false or throws an error.\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 10. The prefix(_:) method causes the modified sequence to pass through values less than 8, but throws an error when it receives a value that’s divisible by 5:\n\ndo {\n    let stream = try Counter(howHigh: 10)\n        .prefix {\n            if $0 % 5 == 0 {\n                throw MyError()\n            }\n            return $0 < 8\n        }\n    for try await number in stream {\n        print(number, terminator: \" \")\n    }\n} catch {\n    print(\"Error: \\(error)\")\n}\n// Prints \"1 2 3 4 Error: MyError() \"\n\nSee Also\nSelecting Elements\nfunc prefix(Int) -> AsyncPrefixSequence<Self>\nReturns an asynchronous sequence, up to the specified maximum length, containing the initial elements of the base asynchronous sequence.\nstruct AsyncPrefixSequence\nAn asynchronous sequence, up to a specified maximum length, containing the initial elements of a base asynchronous sequence.\nfunc prefix(while: (Self.Element) async -> Bool) rethrows -> AsyncPrefixWhileSequence<Self>\nReturns an asynchronous sequence, containing the initial, consecutive elements of the base sequence that satisfy the given predicate.\nstruct AsyncPrefixWhileSequence\nAn asynchronous sequence, containing the initial, consecutive elements of the base sequence that satisfy a given predicate.\nstruct AsyncThrowingPrefixWhileSequence\nAn asynchronous sequence, containing the initial, consecutive elements of the base sequence that satisfy the given error-throwing predicate."
  },
  {
    "title": "max()",
    "url": "https://developer.apple.com/documentation/swift/asyncsequence/max()",
    "html": "Return Value\n\nThe sequence’s maximum element. If the sequence has no elements, returns nil.\n\nDiscussion\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 10. The max() method returns the max value of the sequence.\n\nlet max = await Counter(howHigh: 10)\n    .max()\nprint(max ?? \"none\")\n// Prints \"10\"\n\nSee Also\nFinding Elements\nfunc contains(Self.Element) async rethrows -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains the given element.\nAvailable when Element conforms to Equatable.\nfunc contains(where: (Self.Element) async throws -> Bool) async rethrows -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains an element that satisfies the given predicate.\nfunc allSatisfy((Self.Element) async throws -> Bool) async rethrows -> Bool\nReturns a Boolean value that indicates whether all elements produced by the asynchronous sequence satisfy the given predicate.\nfunc first(where: (Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the first element of the sequence that satisfies the given predicate.\nfunc min() async rethrows -> Self.Element?\nReturns the minimum element in an asynchronous sequence of comparable elements.\nAvailable when Element conforms to Comparable.\nfunc min(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the minimum element in the asynchronous sequence, using the given predicate as the comparison between elements.\nfunc max(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the maximum element in the asynchronous sequence, using the given predicate as the comparison between elements."
  },
  {
    "title": "min()",
    "url": "https://developer.apple.com/documentation/swift/asyncsequence/min()",
    "html": "Return Value\n\nThe sequence’s minimum element. If the sequence has no elements, returns nil.\n\nDiscussion\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 10. The min() method returns the minimum value of the sequence.\n\nlet min = await Counter(howHigh: 10)\n    .min()\nprint(min ?? \"none\")\n// Prints \"1\"\n\nSee Also\nFinding Elements\nfunc contains(Self.Element) async rethrows -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains the given element.\nAvailable when Element conforms to Equatable.\nfunc contains(where: (Self.Element) async throws -> Bool) async rethrows -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains an element that satisfies the given predicate.\nfunc allSatisfy((Self.Element) async throws -> Bool) async rethrows -> Bool\nReturns a Boolean value that indicates whether all elements produced by the asynchronous sequence satisfy the given predicate.\nfunc first(where: (Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the first element of the sequence that satisfies the given predicate.\nfunc min(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the minimum element in the asynchronous sequence, using the given predicate as the comparison between elements.\nfunc max() async rethrows -> Self.Element?\nReturns the maximum element in an asynchronous sequence of comparable elements.\nAvailable when Element conforms to Comparable.\nfunc max(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the maximum element in the asynchronous sequence, using the given predicate as the comparison between elements."
  },
  {
    "title": "first(where:)",
    "url": "https://developer.apple.com/documentation/swift/asyncsequence/first(where:)",
    "html": "Parameters\npredicate\n\nA closure that takes an element of the asynchronous sequence as its argument and returns a Boolean value that indicates whether the element is a match.\n\nReturn Value\n\nThe first element of the sequence that satisfies predicate, or nil if there is no element that satisfies predicate.\n\nDiscussion\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 10. The first(where:) method returns the first member of the sequence that’s evenly divisible by both 2 and 3.\n\nlet divisibleBy2And3 = await Counter(howHigh: 10)\n    .first { $0 % 2 == 0 && $0 % 3 == 0 }\nprint(divisibleBy2And3 ?? \"none\")\n// Prints \"6\"\n\n\nThe predicate executes each time the asynchronous sequence produces an element, until either the predicate finds a match or the sequence ends.\n\nSee Also\nFinding Elements\nfunc contains(Self.Element) async rethrows -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains the given element.\nAvailable when Element conforms to Equatable.\nfunc contains(where: (Self.Element) async throws -> Bool) async rethrows -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains an element that satisfies the given predicate.\nfunc allSatisfy((Self.Element) async throws -> Bool) async rethrows -> Bool\nReturns a Boolean value that indicates whether all elements produced by the asynchronous sequence satisfy the given predicate.\nfunc min() async rethrows -> Self.Element?\nReturns the minimum element in an asynchronous sequence of comparable elements.\nAvailable when Element conforms to Comparable.\nfunc min(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the minimum element in the asynchronous sequence, using the given predicate as the comparison between elements.\nfunc max() async rethrows -> Self.Element?\nReturns the maximum element in an asynchronous sequence of comparable elements.\nAvailable when Element conforms to Comparable.\nfunc max(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the maximum element in the asynchronous sequence, using the given predicate as the comparison between elements."
  },
  {
    "title": "allSatisfy(_:)",
    "url": "https://developer.apple.com/documentation/swift/asyncsequence/allsatisfy(_:)",
    "html": "Parameters\npredicate\n\nA closure that takes an element of the asynchronous sequence as its argument and returns a Boolean value that indicates whether the passed element satisfies a condition.\n\nReturn Value\n\ntrue if the sequence contains only elements that satisfy predicate; otherwise, false.\n\nDiscussion\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 10. The allSatisfy(_:) method checks to see whether all elements produced by the sequence are less than 10.\n\nlet allLessThanTen = await Counter(howHigh: 10)\n    .allSatisfy { $0 < 10 }\nprint(allLessThanTen)\n// Prints \"false\"\n\n\nThe predicate executes each time the asynchronous sequence produces an element, until either the predicate returns false or the sequence ends.\n\nIf the asynchronous sequence is empty, this method returns true.\n\nSee Also\nFinding Elements\nfunc contains(Self.Element) async rethrows -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains the given element.\nAvailable when Element conforms to Equatable.\nfunc contains(where: (Self.Element) async throws -> Bool) async rethrows -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains an element that satisfies the given predicate.\nfunc first(where: (Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the first element of the sequence that satisfies the given predicate.\nfunc min() async rethrows -> Self.Element?\nReturns the minimum element in an asynchronous sequence of comparable elements.\nAvailable when Element conforms to Comparable.\nfunc min(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the minimum element in the asynchronous sequence, using the given predicate as the comparison between elements.\nfunc max() async rethrows -> Self.Element?\nReturns the maximum element in an asynchronous sequence of comparable elements.\nAvailable when Element conforms to Comparable.\nfunc max(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the maximum element in the asynchronous sequence, using the given predicate as the comparison between elements."
  },
  {
    "title": "unicodeScalars",
    "url": "https://developer.apple.com/documentation/swift/asyncsequence/unicodescalars",
    "html": "See Also\nAdapting Textual Sequences\nvar characters: AsyncCharacterSequence<Self>\nA non-blocking sequence of Characters created by decoding the elements of self as UTF8.\nAvailable when Element is UInt8.\nstruct AsyncCharacterSequence\nAn asychronous sequence of characters.\nstruct AsyncUnicodeScalarSequence\nAn asychronous sequence of Unicode scalar values.\nvar lines: AsyncLineSequence<Self>\nA non-blocking sequence of newline-separated Strings created by decoding the elements of self as UTF8.\nAvailable when Element is UInt8.\nstruct AsyncLineSequence\nAn asychronous sequence of lines of text."
  },
  {
    "title": "contains(where:)",
    "url": "https://developer.apple.com/documentation/swift/asyncsequence/contains(where:)",
    "html": "Parameters\npredicate\n\nA closure that takes an element of the asynchronous sequence as its argument and returns a Boolean value that indicates whether the passed element represents a match.\n\nReturn Value\n\ntrue if the sequence contains an element that satisfies predicate; otherwise, false.\n\nDiscussion\n\nYou can use the predicate to check for an element of a type that doesn’t conform to the Equatable protocol, or to find an element that satisfies a general condition.\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 10. The contains(where:) method checks to see whether the sequence produces a value divisible by 3:\n\nlet containsDivisibleByThree = await Counter(howHigh: 10)\n    .contains { $0 % 3 == 0 }\nprint(containsDivisibleByThree)\n// Prints \"true\"\n\n\nThe predicate executes each time the asynchronous sequence produces an element, until either the predicate finds a match or the sequence ends.\n\nSee Also\nFinding Elements\nfunc contains(Self.Element) async rethrows -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains the given element.\nAvailable when Element conforms to Equatable.\nfunc allSatisfy((Self.Element) async throws -> Bool) async rethrows -> Bool\nReturns a Boolean value that indicates whether all elements produced by the asynchronous sequence satisfy the given predicate.\nfunc first(where: (Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the first element of the sequence that satisfies the given predicate.\nfunc min() async rethrows -> Self.Element?\nReturns the minimum element in an asynchronous sequence of comparable elements.\nAvailable when Element conforms to Comparable.\nfunc min(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the minimum element in the asynchronous sequence, using the given predicate as the comparison between elements.\nfunc max() async rethrows -> Self.Element?\nReturns the maximum element in an asynchronous sequence of comparable elements.\nAvailable when Element conforms to Comparable.\nfunc max(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the maximum element in the asynchronous sequence, using the given predicate as the comparison between elements."
  },
  {
    "title": "characters",
    "url": "https://developer.apple.com/documentation/swift/asyncsequence/characters",
    "html": "See Also\nAdapting Textual Sequences\nstruct AsyncCharacterSequence\nAn asychronous sequence of characters.\nvar unicodeScalars: AsyncUnicodeScalarSequence<Self>\nA non-blocking sequence of UnicodeScalars created by decoding the elements of self as UTF8.\nAvailable when Element is UInt8.\nstruct AsyncUnicodeScalarSequence\nAn asychronous sequence of Unicode scalar values.\nvar lines: AsyncLineSequence<Self>\nA non-blocking sequence of newline-separated Strings created by decoding the elements of self as UTF8.\nAvailable when Element is UInt8.\nstruct AsyncLineSequence\nAn asychronous sequence of lines of text."
  },
  {
    "title": "flatMap(_:)",
    "url": "https://developer.apple.com/documentation/swift/asyncsequence/flatmap(_:)-5j8ra",
    "html": "Parameters\ntransform\n\nAn error-throwing mapping closure. transform accepts an element of this sequence as its parameter and returns an AsyncSequence. If transform throws an error, the sequence ends.\n\nReturn Value\n\nA single, flattened asynchronous sequence that contains all elements in all the asynchronous sequences produced by transform. The sequence ends either when the last sequence created from the last element from base sequence ends, or when transform throws an error.\n\nDiscussion\n\nUse this method to receive a single-level asynchronous sequence when your transformation produces an asynchronous sequence for each element.\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 5. The transforming closure takes the received Int and returns a new Counter that counts that high. For example, when the transform receives 3 from the base sequence, it creates a new Counter that produces the values 1, 2, and 3. The flatMap(_:) method “flattens” the resulting sequence-of-sequences into a single AsyncSequence. However, when the closure receives 4, it throws an error, terminating the sequence.\n\ndo {\n    let stream = Counter(howHigh: 5)\n        .flatMap { (value) -> Counter in\n            if value == 4 {\n                throw MyError()\n            }\n            return Counter(howHigh: value)\n        }\n    for try await number in stream {\n        print(number, terminator: \" \")\n    }\n} catch {\n    print(error)\n}\n// Prints \"1 1 2 1 2 3 MyError() \"\n\nSee Also\nTransforming a Sequence\nfunc map<Transformed>((Self.Element) async -> Transformed) -> AsyncMapSequence<Self, Transformed>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements.\nstruct AsyncMapSequence\nAn asynchronous sequence that maps the given closure over the asynchronous sequence’s elements.\nfunc map<Transformed>((Self.Element) async throws -> Transformed) -> AsyncThrowingMapSequence<Self, Transformed>\nCreates an asynchronous sequence that maps the given error-throwing closure over the asynchronous sequence’s elements.\nstruct AsyncThrowingMapSequence\nAn asynchronous sequence that maps the given error-throwing closure over the asynchronous sequence’s elements.\nfunc compactMap<ElementOfResult>((Self.Element) async -> ElementOfResult?) -> AsyncCompactMapSequence<Self, ElementOfResult>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements, omitting results that don’t return a value.\nstruct AsyncCompactMapSequence\nAn asynchronous sequence that maps a given closure over the asynchronous sequence’s elements, omitting results that don’t return a value.\nfunc compactMap<ElementOfResult>((Self.Element) async throws -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<Self, ElementOfResult>\nCreates an asynchronous sequence that maps an error-throwing closure over the base sequence’s elements, omitting results that don’t return a value.\nstruct AsyncThrowingCompactMapSequence\nAn asynchronous sequence that maps an error-throwing closure over the base sequence’s elements, omitting results that don’t return a value.\nfunc flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given transformation with each element of this sequence.\nstruct AsyncFlatMapSequence\nAn asynchronous sequence that concatenates the results of calling a given transformation with each element of this sequence.\nstruct AsyncThrowingFlatMapSequence\nAn asynchronous sequence that concatenates the results of calling a given error-throwing transformation with each element of this sequence.\nfunc reduce<Result>(Result, (Result, Self.Element) async throws -> Result) async rethrows -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure.\nfunc reduce<Result>(into: Result, (inout Result, Self.Element) async throws -> Void) async rethrows -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure, given a mutable initial value."
  },
  {
    "title": "flatMap(_:)",
    "url": "https://developer.apple.com/documentation/swift/asyncsequence/flatmap(_:)-30ren",
    "html": "Parameters\ntransform\n\nA mapping closure. transform accepts an element of this sequence as its parameter and returns an AsyncSequence.\n\nReturn Value\n\nA single, flattened asynchronous sequence that contains all elements in all the asynchronous sequences produced by transform.\n\nDiscussion\n\nUse this method to receive a single-level asynchronous sequence when your transformation produces an asynchronous sequence for each element.\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 5. The transforming closure takes the received Int and returns a new Counter that counts that high. For example, when the transform receives 3 from the base sequence, it creates a new Counter that produces the values 1, 2, and 3. The flatMap(_:) method “flattens” the resulting sequence-of-sequences into a single AsyncSequence.\n\nlet stream = Counter(howHigh: 5)\n    .flatMap { Counter(howHigh: $0) }\nfor await number in stream {\n    print(number, terminator: \" \")\n}\n// Prints \"1 1 2 1 2 3 1 2 3 4 1 2 3 4 5 \"\n\nSee Also\nTransforming a Sequence\nfunc map<Transformed>((Self.Element) async -> Transformed) -> AsyncMapSequence<Self, Transformed>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements.\nstruct AsyncMapSequence\nAn asynchronous sequence that maps the given closure over the asynchronous sequence’s elements.\nfunc map<Transformed>((Self.Element) async throws -> Transformed) -> AsyncThrowingMapSequence<Self, Transformed>\nCreates an asynchronous sequence that maps the given error-throwing closure over the asynchronous sequence’s elements.\nstruct AsyncThrowingMapSequence\nAn asynchronous sequence that maps the given error-throwing closure over the asynchronous sequence’s elements.\nfunc compactMap<ElementOfResult>((Self.Element) async -> ElementOfResult?) -> AsyncCompactMapSequence<Self, ElementOfResult>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements, omitting results that don’t return a value.\nstruct AsyncCompactMapSequence\nAn asynchronous sequence that maps a given closure over the asynchronous sequence’s elements, omitting results that don’t return a value.\nfunc compactMap<ElementOfResult>((Self.Element) async throws -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<Self, ElementOfResult>\nCreates an asynchronous sequence that maps an error-throwing closure over the base sequence’s elements, omitting results that don’t return a value.\nstruct AsyncThrowingCompactMapSequence\nAn asynchronous sequence that maps an error-throwing closure over the base sequence’s elements, omitting results that don’t return a value.\nstruct AsyncFlatMapSequence\nAn asynchronous sequence that concatenates the results of calling a given transformation with each element of this sequence.\nfunc flatMap<SegmentOfResult>((Self.Element) async throws -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<Self, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given error-throwing transformation with each element of this sequence.\nstruct AsyncThrowingFlatMapSequence\nAn asynchronous sequence that concatenates the results of calling a given error-throwing transformation with each element of this sequence.\nfunc reduce<Result>(Result, (Result, Self.Element) async throws -> Result) async rethrows -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure.\nfunc reduce<Result>(into: Result, (inout Result, Self.Element) async throws -> Void) async rethrows -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure, given a mutable initial value."
  },
  {
    "title": "compactMap(_:)",
    "url": "https://developer.apple.com/documentation/swift/asyncsequence/compactmap(_:)-gfdq",
    "html": "Parameters\ntransform\n\nA mapping closure. transform accepts an element of this sequence as its parameter and returns a transformed value of the same or of a different type.\n\nReturn Value\n\nAn asynchronous sequence that contains, in order, the non-nil elements produced by the transform closure.\n\nDiscussion\n\nUse the compactMap(_:) method to transform every element received from a base asynchronous sequence, while also discarding any nil results from the closure. Typically, you use this to transform from one type of element to another.\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 5. The closure provided to the compactMap(_:) method takes each Int and looks up a corresponding String from a romanNumeralDict dictionary. Because there is no key for 4, the closure returns nil in this case, which compactMap(_:) omits from the transformed asynchronous sequence.\n\nlet romanNumeralDict: [Int: String] =\n    [1: \"I\", 2: \"II\", 3: \"III\", 5: \"V\"]\n    \nlet stream = Counter(howHigh: 5)\n    .compactMap { romanNumeralDict[$0] }\nfor await numeral in stream {\n    print(numeral, terminator: \" \")\n}\n// Prints \"I II III V \"\n\nSee Also\nTransforming a Sequence\nfunc map<Transformed>((Self.Element) async -> Transformed) -> AsyncMapSequence<Self, Transformed>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements.\nstruct AsyncMapSequence\nAn asynchronous sequence that maps the given closure over the asynchronous sequence’s elements.\nfunc map<Transformed>((Self.Element) async throws -> Transformed) -> AsyncThrowingMapSequence<Self, Transformed>\nCreates an asynchronous sequence that maps the given error-throwing closure over the asynchronous sequence’s elements.\nstruct AsyncThrowingMapSequence\nAn asynchronous sequence that maps the given error-throwing closure over the asynchronous sequence’s elements.\nstruct AsyncCompactMapSequence\nAn asynchronous sequence that maps a given closure over the asynchronous sequence’s elements, omitting results that don’t return a value.\nfunc compactMap<ElementOfResult>((Self.Element) async throws -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<Self, ElementOfResult>\nCreates an asynchronous sequence that maps an error-throwing closure over the base sequence’s elements, omitting results that don’t return a value.\nstruct AsyncThrowingCompactMapSequence\nAn asynchronous sequence that maps an error-throwing closure over the base sequence’s elements, omitting results that don’t return a value.\nfunc flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given transformation with each element of this sequence.\nstruct AsyncFlatMapSequence\nAn asynchronous sequence that concatenates the results of calling a given transformation with each element of this sequence.\nfunc flatMap<SegmentOfResult>((Self.Element) async throws -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<Self, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given error-throwing transformation with each element of this sequence.\nstruct AsyncThrowingFlatMapSequence\nAn asynchronous sequence that concatenates the results of calling a given error-throwing transformation with each element of this sequence.\nfunc reduce<Result>(Result, (Result, Self.Element) async throws -> Result) async rethrows -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure.\nfunc reduce<Result>(into: Result, (inout Result, Self.Element) async throws -> Void) async rethrows -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure, given a mutable initial value."
  },
  {
    "title": "map(_:)",
    "url": "https://developer.apple.com/documentation/swift/asyncsequence/map(_:)-70wgb",
    "html": "Parameters\ntransform\n\nA mapping closure. transform accepts an element of this sequence as its parameter and returns a transformed value of the same or of a different type. transform can also throw an error, which ends the transformed sequence.\n\nReturn Value\n\nAn asynchronous sequence that contains, in order, the elements produced by the transform closure.\n\nDiscussion\n\nUse the map(_:) method to transform every element received from a base asynchronous sequence. Typically, you use this to transform from one type of element to another.\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 5. The closure provided to the map(_:) method takes each Int and looks up a corresponding String from a romanNumeralDict dictionary. This means the outer for await in loop iterates over String instances instead of the underlying Int values that Counter produces. Also, the dictionary doesn’t provide a key for 4, and the closure throws an error for any key it can’t look up, so receiving this value from Counter ends the modified sequence with an error.\n\nlet romanNumeralDict: [Int: String] =\n    [1: \"I\", 2: \"II\", 3: \"III\", 5: \"V\"]\n\n\ndo {\n    let stream = Counter(howHigh: 5)\n        .map { (value) throws -> String in\n            guard let roman = romanNumeralDict[value] else {\n                throw MyError()\n            }\n            return roman\n        }\n    for try await numeral in stream {\n        print(numeral, terminator: \" \")\n    }\n} catch {\n    print(\"Error: \\(error)\")\n}\n// Prints \"I II III Error: MyError() \"\n\nSee Also\nTransforming a Sequence\nfunc map<Transformed>((Self.Element) async -> Transformed) -> AsyncMapSequence<Self, Transformed>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements.\nstruct AsyncMapSequence\nAn asynchronous sequence that maps the given closure over the asynchronous sequence’s elements.\nstruct AsyncThrowingMapSequence\nAn asynchronous sequence that maps the given error-throwing closure over the asynchronous sequence’s elements.\nfunc compactMap<ElementOfResult>((Self.Element) async -> ElementOfResult?) -> AsyncCompactMapSequence<Self, ElementOfResult>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements, omitting results that don’t return a value.\nstruct AsyncCompactMapSequence\nAn asynchronous sequence that maps a given closure over the asynchronous sequence’s elements, omitting results that don’t return a value.\nfunc compactMap<ElementOfResult>((Self.Element) async throws -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<Self, ElementOfResult>\nCreates an asynchronous sequence that maps an error-throwing closure over the base sequence’s elements, omitting results that don’t return a value.\nstruct AsyncThrowingCompactMapSequence\nAn asynchronous sequence that maps an error-throwing closure over the base sequence’s elements, omitting results that don’t return a value.\nfunc flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given transformation with each element of this sequence.\nstruct AsyncFlatMapSequence\nAn asynchronous sequence that concatenates the results of calling a given transformation with each element of this sequence.\nfunc flatMap<SegmentOfResult>((Self.Element) async throws -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<Self, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given error-throwing transformation with each element of this sequence.\nstruct AsyncThrowingFlatMapSequence\nAn asynchronous sequence that concatenates the results of calling a given error-throwing transformation with each element of this sequence.\nfunc reduce<Result>(Result, (Result, Self.Element) async throws -> Result) async rethrows -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure.\nfunc reduce<Result>(into: Result, (inout Result, Self.Element) async throws -> Void) async rethrows -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure, given a mutable initial value."
  },
  {
    "title": "filter(_:)",
    "url": "https://developer.apple.com/documentation/swift/asyncsequence/filter(_:)-435af",
    "html": "Parameters\nisIncluded\n\nA closure that takes an element of the asynchronous sequence as its argument and returns a Boolean value that indicates whether to include the element in the filtered sequence.\n\nReturn Value\n\nAn asynchronous sequence that contains, in order, the elements of the base sequence that satisfy the given predicate.\n\nDiscussion\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 10. The filter(_:) method returns true for even values and false for odd values, thereby filtering out the odd values:\n\nlet stream = Counter(howHigh: 10)\n    .filter { $0 % 2 == 0 }\nfor await number in stream {\n    print(number, terminator: \" \")\n}\n// Prints \"2 4 6 8 10 \"\n\nSee Also\nExcluding Elements\nfunc dropFirst(Int) -> AsyncDropFirstSequence<Self>\nOmits a specified number of elements from the base asynchronous sequence, then passes through all remaining elements.\nstruct AsyncDropFirstSequence\nAn asynchronous sequence which omits a specified number of elements from the base asynchronous sequence, then passes through all remaining elements.\nfunc drop(while: (Self.Element) async -> Bool) -> AsyncDropWhileSequence<Self>\nOmits elements from the base asynchronous sequence until a given closure returns false, after which it passes through all remaining elements.\nstruct AsyncDropWhileSequence\nAn asynchronous sequence which omits elements from the base sequence until a given closure returns false, after which it passes through all remaining elements.\nfunc drop(while: (Self.Element) async throws -> Bool) -> AsyncThrowingDropWhileSequence<Self>\nOmits elements from the base sequence until a given error-throwing closure returns false, after which it passes through all remaining elements.\nstruct AsyncThrowingDropWhileSequence\nAn asynchronous sequence which omits elements from the base sequence until a given error-throwing closure returns false, after which it passes through all remaining elements.\nstruct AsyncFilterSequence\nAn asynchronous sequence that contains, in order, the elements of the base sequence that satisfy a given predicate.\nfunc filter((Self.Element) async throws -> Bool) -> AsyncThrowingFilterSequence<Self>\nCreates an asynchronous sequence that contains, in order, the elements of the base sequence that satisfy the given error-throwing predicate.\nstruct AsyncThrowingFilterSequence\nAn asynchronous sequence that contains, in order, the elements of the base sequence that satisfy the given error-throwing predicate."
  },
  {
    "title": "drop(while:)",
    "url": "https://developer.apple.com/documentation/swift/asyncsequence/drop(while:)-9sp3b",
    "html": "Parameters\npredicate\n\nA closure that takes an element as a parameter and returns a Boolean value indicating whether to drop the element from the modified sequence.\n\nReturn Value\n\nAn asynchronous sequence that skips over values from the base sequence until the provided closure returns false.\n\nDiscussion\n\nUse drop(while:) to omit elements from an asynchronous sequence until the element received meets a condition you specify.\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 10. The drop(while:) method causes the modified sequence to ignore received values until it encounters one that is divisible by 3:\n\nlet stream = Counter(howHigh: 10)\n    .drop { $0 % 3 != 0 }\nfor await number in stream {\n    print(number, terminator: \" \")\n}\n// Prints \"3 4 5 6 7 8 9 10 \"\n\n\nAfter the predicate returns false, the sequence never executes it again, and from then on the sequence passes through elements from its underlying sequence as-is.\n\nSee Also\nExcluding Elements\nfunc dropFirst(Int) -> AsyncDropFirstSequence<Self>\nOmits a specified number of elements from the base asynchronous sequence, then passes through all remaining elements.\nstruct AsyncDropFirstSequence\nAn asynchronous sequence which omits a specified number of elements from the base asynchronous sequence, then passes through all remaining elements.\nstruct AsyncDropWhileSequence\nAn asynchronous sequence which omits elements from the base sequence until a given closure returns false, after which it passes through all remaining elements.\nfunc drop(while: (Self.Element) async throws -> Bool) -> AsyncThrowingDropWhileSequence<Self>\nOmits elements from the base sequence until a given error-throwing closure returns false, after which it passes through all remaining elements.\nstruct AsyncThrowingDropWhileSequence\nAn asynchronous sequence which omits elements from the base sequence until a given error-throwing closure returns false, after which it passes through all remaining elements.\nfunc filter((Self.Element) async -> Bool) -> AsyncFilterSequence<Self>\nCreates an asynchronous sequence that contains, in order, the elements of the base sequence that satisfy the given predicate.\nstruct AsyncFilterSequence\nAn asynchronous sequence that contains, in order, the elements of the base sequence that satisfy a given predicate.\nfunc filter((Self.Element) async throws -> Bool) -> AsyncThrowingFilterSequence<Self>\nCreates an asynchronous sequence that contains, in order, the elements of the base sequence that satisfy the given error-throwing predicate.\nstruct AsyncThrowingFilterSequence\nAn asynchronous sequence that contains, in order, the elements of the base sequence that satisfy the given error-throwing predicate."
  },
  {
    "title": "filter(_:)",
    "url": "https://developer.apple.com/documentation/swift/asyncsequence/filter(_:)-2cc0l",
    "html": "Parameters\nisIncluded\n\nAn error-throwing closure that takes an element of the asynchronous sequence as its argument and returns a Boolean value that indicates whether to include the element in the filtered sequence.\n\nReturn Value\n\nAn asynchronous sequence that contains, in order, the elements of the base sequence that satisfy the given predicate. If the predicate throws an error, the sequence contains only values produced prior to the error.\n\nDiscussion\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 10. The filter(_:) method returns true for even values and false for odd values, thereby filtering out the odd values, but also throws an error for values divisible by 5:\n\ndo {\n    let stream = Counter(howHigh: 10)\n        .filter {\n            if $0 % 5 == 0 {\n                throw MyError()\n            }\n            return $0 % 2 == 0\n        }\n    for try await number in stream {\n        print(number, terminator: \" \")\n    }\n} catch {\n    print(\"Error: \\(error)\")\n}\n// Prints \"2 4 Error: MyError() \"\n\nSee Also\nExcluding Elements\nfunc dropFirst(Int) -> AsyncDropFirstSequence<Self>\nOmits a specified number of elements from the base asynchronous sequence, then passes through all remaining elements.\nstruct AsyncDropFirstSequence\nAn asynchronous sequence which omits a specified number of elements from the base asynchronous sequence, then passes through all remaining elements.\nfunc drop(while: (Self.Element) async -> Bool) -> AsyncDropWhileSequence<Self>\nOmits elements from the base asynchronous sequence until a given closure returns false, after which it passes through all remaining elements.\nstruct AsyncDropWhileSequence\nAn asynchronous sequence which omits elements from the base sequence until a given closure returns false, after which it passes through all remaining elements.\nfunc drop(while: (Self.Element) async throws -> Bool) -> AsyncThrowingDropWhileSequence<Self>\nOmits elements from the base sequence until a given error-throwing closure returns false, after which it passes through all remaining elements.\nstruct AsyncThrowingDropWhileSequence\nAn asynchronous sequence which omits elements from the base sequence until a given error-throwing closure returns false, after which it passes through all remaining elements.\nfunc filter((Self.Element) async -> Bool) -> AsyncFilterSequence<Self>\nCreates an asynchronous sequence that contains, in order, the elements of the base sequence that satisfy the given predicate.\nstruct AsyncFilterSequence\nAn asynchronous sequence that contains, in order, the elements of the base sequence that satisfy a given predicate.\nstruct AsyncThrowingFilterSequence\nAn asynchronous sequence that contains, in order, the elements of the base sequence that satisfy the given error-throwing predicate."
  },
  {
    "title": "drop(while:)",
    "url": "https://developer.apple.com/documentation/swift/asyncsequence/drop(while:)-67kgo",
    "html": "Parameters\npredicate\n\nAn error-throwing closure that takes an element as a parameter and returns a Boolean value indicating whether to drop the element from the modified sequence.\n\nReturn Value\n\nAn asynchronous sequence that skips over values until the provided closure returns false or throws an error.\n\nDiscussion\n\nUse drop(while:) to omit elements from an asynchronous sequence until the element received meets a condition you specify. If the closure you provide throws an error, the sequence produces no elements and throws the error instead.\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 10. The predicate passed to the drop(while:) method throws an error if it encounters an even number, and otherwise returns true while it receives elements less than 5. Because the predicate throws when it receives 2 from the base sequence, this example throws without ever printing anything.\n\ndo {\n    let stream = Counter(howHigh: 10)\n        .drop {\n            if $0 % 2 == 0 {\n                throw EvenError()\n            }\n            return $0 < 5\n        }\n    for try await number in stream {\n        print(number)\n    }\n} catch {\n    print(error)\n}\n// Prints \"EvenError()\"\n\n\nAfter the predicate returns false, the sequence never executes it again, and from then on the sequence passes through elements from its underlying sequence. A predicate that throws an error also never executes again.\n\nSee Also\nExcluding Elements\nfunc dropFirst(Int) -> AsyncDropFirstSequence<Self>\nOmits a specified number of elements from the base asynchronous sequence, then passes through all remaining elements.\nstruct AsyncDropFirstSequence\nAn asynchronous sequence which omits a specified number of elements from the base asynchronous sequence, then passes through all remaining elements.\nfunc drop(while: (Self.Element) async -> Bool) -> AsyncDropWhileSequence<Self>\nOmits elements from the base asynchronous sequence until a given closure returns false, after which it passes through all remaining elements.\nstruct AsyncDropWhileSequence\nAn asynchronous sequence which omits elements from the base sequence until a given closure returns false, after which it passes through all remaining elements.\nstruct AsyncThrowingDropWhileSequence\nAn asynchronous sequence which omits elements from the base sequence until a given error-throwing closure returns false, after which it passes through all remaining elements.\nfunc filter((Self.Element) async -> Bool) -> AsyncFilterSequence<Self>\nCreates an asynchronous sequence that contains, in order, the elements of the base sequence that satisfy the given predicate.\nstruct AsyncFilterSequence\nAn asynchronous sequence that contains, in order, the elements of the base sequence that satisfy a given predicate.\nfunc filter((Self.Element) async throws -> Bool) -> AsyncThrowingFilterSequence<Self>\nCreates an asynchronous sequence that contains, in order, the elements of the base sequence that satisfy the given error-throwing predicate.\nstruct AsyncThrowingFilterSequence\nAn asynchronous sequence that contains, in order, the elements of the base sequence that satisfy the given error-throwing predicate."
  },
  {
    "title": "dropFirst(_:)",
    "url": "https://developer.apple.com/documentation/swift/asyncsequence/dropfirst(_:)",
    "html": "Parameters\ncount\n\nThe number of elements to drop from the beginning of the sequence. count must be greater than or equal to zero.\n\nReturn Value\n\nAn asynchronous sequence that drops the first count elements from the base sequence.\n\nDiscussion\n\nUse dropFirst(_:) when you want to drop the first n elements from the base sequence and pass through the remaining elements.\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 10. The dropFirst(_:) method causes the modified sequence to ignore the values 1 through 3, and instead emit 4 through 10:\n\nfor await number in Counter(howHigh: 10).dropFirst(3) {\n    print(number, terminator: \" \")\n}\n// Prints \"4 5 6 7 8 9 10 \"\n\n\nIf the number of elements to drop exceeds the number of elements in the sequence, the result is an empty sequence.\n\nSee Also\nExcluding Elements\nstruct AsyncDropFirstSequence\nAn asynchronous sequence which omits a specified number of elements from the base asynchronous sequence, then passes through all remaining elements.\nfunc drop(while: (Self.Element) async -> Bool) -> AsyncDropWhileSequence<Self>\nOmits elements from the base asynchronous sequence until a given closure returns false, after which it passes through all remaining elements.\nstruct AsyncDropWhileSequence\nAn asynchronous sequence which omits elements from the base sequence until a given closure returns false, after which it passes through all remaining elements.\nfunc drop(while: (Self.Element) async throws -> Bool) -> AsyncThrowingDropWhileSequence<Self>\nOmits elements from the base sequence until a given error-throwing closure returns false, after which it passes through all remaining elements.\nstruct AsyncThrowingDropWhileSequence\nAn asynchronous sequence which omits elements from the base sequence until a given error-throwing closure returns false, after which it passes through all remaining elements.\nfunc filter((Self.Element) async -> Bool) -> AsyncFilterSequence<Self>\nCreates an asynchronous sequence that contains, in order, the elements of the base sequence that satisfy the given predicate.\nstruct AsyncFilterSequence\nAn asynchronous sequence that contains, in order, the elements of the base sequence that satisfy a given predicate.\nfunc filter((Self.Element) async throws -> Bool) -> AsyncThrowingFilterSequence<Self>\nCreates an asynchronous sequence that contains, in order, the elements of the base sequence that satisfy the given error-throwing predicate.\nstruct AsyncThrowingFilterSequence\nAn asynchronous sequence that contains, in order, the elements of the base sequence that satisfy the given error-throwing predicate."
  },
  {
    "title": "lines",
    "url": "https://developer.apple.com/documentation/swift/asyncsequence/lines",
    "html": "See Also\nAdapting Textual Sequences\nvar characters: AsyncCharacterSequence<Self>\nA non-blocking sequence of Characters created by decoding the elements of self as UTF8.\nAvailable when Element is UInt8.\nstruct AsyncCharacterSequence\nAn asychronous sequence of characters.\nvar unicodeScalars: AsyncUnicodeScalarSequence<Self>\nA non-blocking sequence of UnicodeScalars created by decoding the elements of self as UTF8.\nAvailable when Element is UInt8.\nstruct AsyncUnicodeScalarSequence\nAn asychronous sequence of Unicode scalar values.\nstruct AsyncLineSequence\nAn asychronous sequence of lines of text."
  },
  {
    "title": "contains(_:)",
    "url": "https://developer.apple.com/documentation/swift/asyncsequence/contains(_:)",
    "html": "Parameters\nsearch\n\nThe element to find in the asynchronous sequence.\n\nReturn Value\n\ntrue if the method found the element in the asynchronous sequence; otherwise, false.\n\nDiscussion\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 10. The contains(_:) method checks to see whether the sequence produces the value 5:\n\nlet containsFive = await Counter(howHigh: 10)\n    .contains(5)\nprint(containsFive)\n// Prints \"true\"\n\nSee Also\nFinding Elements\nfunc contains(where: (Self.Element) async throws -> Bool) async rethrows -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains an element that satisfies the given predicate.\nfunc allSatisfy((Self.Element) async throws -> Bool) async rethrows -> Bool\nReturns a Boolean value that indicates whether all elements produced by the asynchronous sequence satisfy the given predicate.\nfunc first(where: (Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the first element of the sequence that satisfies the given predicate.\nfunc min() async rethrows -> Self.Element?\nReturns the minimum element in an asynchronous sequence of comparable elements.\nAvailable when Element conforms to Comparable.\nfunc min(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the minimum element in the asynchronous sequence, using the given predicate as the comparison between elements.\nfunc max() async rethrows -> Self.Element?\nReturns the maximum element in an asynchronous sequence of comparable elements.\nAvailable when Element conforms to Comparable.\nfunc max(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the maximum element in the asynchronous sequence, using the given predicate as the comparison between elements."
  },
  {
    "title": "Element",
    "url": "https://developer.apple.com/documentation/swift/asyncsequence/element",
    "html": "Required\n\nSee Also\nCreating an Iterator\nfunc makeAsyncIterator() -> Self.AsyncIterator\nCreates the asynchronous iterator that produces elements of this asynchronous sequence.\n\nRequired\n\nassociatedtype AsyncIterator : AsyncIteratorProtocol\nThe type of asynchronous iterator that produces elements of this asynchronous sequence.\n\nRequired\n\nprotocol AsyncIteratorProtocol\nA type that asynchronously supplies the values of a sequence one at a time."
  },
  {
    "title": "makeAsyncIterator()",
    "url": "https://developer.apple.com/documentation/swift/asyncsequence/makeasynciterator()",
    "html": "Required\n\nReturn Value\n\nAn instance of the AsyncIterator type used to produce elements of the asynchronous sequence.\n\nSee Also\nCreating an Iterator\nassociatedtype AsyncIterator : AsyncIteratorProtocol\nThe type of asynchronous iterator that produces elements of this asynchronous sequence.\n\nRequired\n\nprotocol AsyncIteratorProtocol\nA type that asynchronously supplies the values of a sequence one at a time.\nassociatedtype Element\nThe type of element produced by this asynchronous sequence.\n\nRequired"
  },
  {
    "title": "AsyncIterator",
    "url": "https://developer.apple.com/documentation/swift/asyncsequence/asynciterator",
    "html": "Required\n\nSee Also\nCreating an Iterator\nfunc makeAsyncIterator() -> Self.AsyncIterator\nCreates the asynchronous iterator that produces elements of this asynchronous sequence.\n\nRequired\n\nprotocol AsyncIteratorProtocol\nA type that asynchronously supplies the values of a sequence one at a time.\nassociatedtype Element\nThe type of element produced by this asynchronous sequence.\n\nRequired"
  },
  {
    "title": "prefix(_:)",
    "url": "https://developer.apple.com/documentation/swift/asyncsequence/prefix(_:)",
    "html": "Parameters\ncount\n\nThe maximum number of elements to return. The value of count must be greater than or equal to zero.\n\nReturn Value\n\nAn asynchronous sequence starting at the beginning of the base sequence with at most count elements.\n\nDiscussion\n\nUse prefix(_:) to reduce the number of elements produced by the asynchronous sequence.\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 10. The prefix(_:) method causes the modified sequence to pass through the first six values, then end.\n\nfor await number in Counter(howHigh: 10).prefix(6) {\n    print(number, terminator: \" \")\n}\n// Prints \"1 2 3 4 5 6 \"\n\n\nIf the count passed to prefix(_:) exceeds the number of elements in the base sequence, the result contains all of the elements in the sequence.\n\nSee Also\nSelecting Elements\nstruct AsyncPrefixSequence\nAn asynchronous sequence, up to a specified maximum length, containing the initial elements of a base asynchronous sequence.\nfunc prefix(while: (Self.Element) async -> Bool) rethrows -> AsyncPrefixWhileSequence<Self>\nReturns an asynchronous sequence, containing the initial, consecutive elements of the base sequence that satisfy the given predicate.\nstruct AsyncPrefixWhileSequence\nAn asynchronous sequence, containing the initial, consecutive elements of the base sequence that satisfy a given predicate.\nfunc prefix(while: (Self.Element) async throws -> Bool) rethrows -> AsyncThrowingPrefixWhileSequence<Self>\nReturns an asynchronous sequence, containing the initial, consecutive elements of the base sequence that satisfy the given error-throwing predicate.\nstruct AsyncThrowingPrefixWhileSequence\nAn asynchronous sequence, containing the initial, consecutive elements of the base sequence that satisfy the given error-throwing predicate."
  },
  {
    "title": "max(by:)",
    "url": "https://developer.apple.com/documentation/swift/asyncsequence/max(by:)",
    "html": "Parameters\nareInIncreasingOrder\n\nA predicate that returns true if its first argument should be ordered before its second argument; otherwise, false.\n\nReturn Value\n\nThe sequence’s minimum element, according to areInIncreasingOrder. If the sequence has no elements, returns nil.\n\nDiscussion\n\nUse this method when the asynchronous sequence’s values don’t conform to Comparable, or when you want to apply a custom ordering to the sequence.\n\nThe predicate must be a strict weak ordering over the elements. That is, for any elements a, b, and c, the following conditions must hold:\n\nareInIncreasingOrder(a, a) is always false. (Irreflexivity)\n\nIf areInIncreasingOrder(a, b) and areInIncreasingOrder(b, c) are both true, then areInIncreasingOrder(a, c) is also true. (Transitive comparability)\n\nTwo elements are incomparable if neither is ordered before the other according to the predicate. If a and b are incomparable, and b and c are incomparable, then a and c are also incomparable. (Transitive incomparability)\n\nThe following example uses an enumeration of playing cards ranks, Rank, which ranges from ace (low) to king (high). An asynchronous sequence called RankCounter produces all elements of the array. The predicate provided to the max(by:) method sorts ranks based on their rawValue:\n\nenum Rank: Int {\n    case ace = 1, two, three, four, five, six, seven, eight, nine, ten, jack, queen, king\n}\n\n\nlet max = await RankCounter()\n    .max { $0.rawValue < $1.rawValue }\nprint(max ?? \"none\")\n// Prints \"king\"\n\nSee Also\nFinding Elements\nfunc contains(Self.Element) async rethrows -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains the given element.\nAvailable when Element conforms to Equatable.\nfunc contains(where: (Self.Element) async throws -> Bool) async rethrows -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains an element that satisfies the given predicate.\nfunc allSatisfy((Self.Element) async throws -> Bool) async rethrows -> Bool\nReturns a Boolean value that indicates whether all elements produced by the asynchronous sequence satisfy the given predicate.\nfunc first(where: (Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the first element of the sequence that satisfies the given predicate.\nfunc min() async rethrows -> Self.Element?\nReturns the minimum element in an asynchronous sequence of comparable elements.\nAvailable when Element conforms to Comparable.\nfunc min(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the minimum element in the asynchronous sequence, using the given predicate as the comparison between elements.\nfunc max() async rethrows -> Self.Element?\nReturns the maximum element in an asynchronous sequence of comparable elements.\nAvailable when Element conforms to Comparable."
  },
  {
    "title": "prefix(while:)",
    "url": "https://developer.apple.com/documentation/swift/asyncsequence/prefix(while:)-2xy95",
    "html": "Parameters\npredicate\n\nA closure that takes an element as a parameter and returns a Boolean value indicating whether the element should be included in the modified sequence.\n\nReturn Value\n\nAn asynchronous sequence of the initial, consecutive elements that satisfy predicate.\n\nDiscussion\n\nUse prefix(while:) to produce values while elements from the base sequence meet a condition you specify. The modified sequence ends when the predicate closure returns false.\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 10. The prefix(while:) method causes the modified sequence to pass along values so long as they aren’t divisible by 2 and 3. Upon reaching 6, the sequence ends:\n\nlet stream = Counter(howHigh: 10)\n    .prefix { $0 % 2 != 0 || $0 % 3 != 0 }\nfor try await number in stream {\n    print(number, terminator: \" \")\n}\n// Prints \"1 2 3 4 5 \"\n\nSee Also\nSelecting Elements\nfunc prefix(Int) -> AsyncPrefixSequence<Self>\nReturns an asynchronous sequence, up to the specified maximum length, containing the initial elements of the base asynchronous sequence.\nstruct AsyncPrefixSequence\nAn asynchronous sequence, up to a specified maximum length, containing the initial elements of a base asynchronous sequence.\nstruct AsyncPrefixWhileSequence\nAn asynchronous sequence, containing the initial, consecutive elements of the base sequence that satisfy a given predicate.\nfunc prefix(while: (Self.Element) async throws -> Bool) rethrows -> AsyncThrowingPrefixWhileSequence<Self>\nReturns an asynchronous sequence, containing the initial, consecutive elements of the base sequence that satisfy the given error-throwing predicate.\nstruct AsyncThrowingPrefixWhileSequence\nAn asynchronous sequence, containing the initial, consecutive elements of the base sequence that satisfy the given error-throwing predicate."
  },
  {
    "title": "AsyncSequence",
    "url": "https://developer.apple.com/documentation/swift/asyncsequence",
    "html": "Overview\n\nAn AsyncSequence resembles the Sequence type — offering a list of values you can step through one at a time — and adds asynchronicity. An AsyncSequence may have all, some, or none of its values available when you first use it. Instead, you use await to receive values as they become available.\n\nAs with Sequence, you typically iterate through an AsyncSequence with a for await-in loop. However, because the caller must potentially wait for values, you use the await keyword. The following example shows how to iterate over Counter, a custom AsyncSequence that produces Int values from 1 up to a howHigh value:\n\nfor await number in Counter(howHigh: 10) {\n    print(number, terminator: \" \")\n}\n// Prints \"1 2 3 4 5 6 7 8 9 10 \"\n\n\nAn AsyncSequence doesn’t generate or contain the values; it just defines how you access them. Along with defining the type of values as an associated type called Element, the AsyncSequence defines a makeAsyncIterator() method. This returns an instance of type AsyncIterator. Like the standard IteratorProtocol, the AsyncIteratorProtocol defines a single next() method to produce elements. The difference is that the AsyncIterator defines its next() method as async, which requires a caller to wait for the next value with the await keyword.\n\nAsyncSequence also defines methods for processing the elements you receive, modeled on the operations provided by the basic Sequence in the standard library. There are two categories of methods: those that return a single value, and those that return another AsyncSequence.\n\nSingle-value methods eliminate the need for a for await-in loop, and instead let you make a single await call. For example, the contains(_:) method returns a Boolean value that indicates if a given value exists in the AsyncSequence. Given the Counter sequence from the previous example, you can test for the existence of a sequence member with a one-line call:\n\nlet found = await Counter(howHigh: 10).contains(5) // true\n\n\nMethods that return another AsyncSequence return a type specific to the method’s semantics. For example, the .map(_:) method returns a AsyncMapSequence (or a AsyncThrowingMapSequence, if the closure you provide to the map(_:) method can throw an error). These returned sequences don’t eagerly await the next member of the sequence, which allows the caller to decide when to start work. Typically, you’ll iterate over these sequences with for await-in, like the base AsyncSequence you started with. In the following example, the map(_:) method transforms each Int received from a Counter sequence into a String:\n\nlet stream = Counter(howHigh: 10)\n    .map { $0 % 2 == 0 ? \"Even\" : \"Odd\" }\nfor await s in stream {\n    print(s, terminator: \" \")\n}\n// Prints \"Odd Even Odd Even Odd Even Odd Even Odd Even \"\n\nTopics\nCreating an Iterator\nfunc makeAsyncIterator() -> Self.AsyncIterator\nCreates the asynchronous iterator that produces elements of this asynchronous sequence.\n\nRequired\n\nassociatedtype AsyncIterator : AsyncIteratorProtocol\nThe type of asynchronous iterator that produces elements of this asynchronous sequence.\n\nRequired\n\nprotocol AsyncIteratorProtocol\nA type that asynchronously supplies the values of a sequence one at a time.\nassociatedtype Element\nThe type of element produced by this asynchronous sequence.\n\nRequired\n\nFinding Elements\nfunc contains(Self.Element) async rethrows -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains the given element.\nAvailable when Element conforms to Equatable.\nfunc contains(where: (Self.Element) async throws -> Bool) async rethrows -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains an element that satisfies the given predicate.\nfunc allSatisfy((Self.Element) async throws -> Bool) async rethrows -> Bool\nReturns a Boolean value that indicates whether all elements produced by the asynchronous sequence satisfy the given predicate.\nfunc first(where: (Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the first element of the sequence that satisfies the given predicate.\nfunc min() async rethrows -> Self.Element?\nReturns the minimum element in an asynchronous sequence of comparable elements.\nAvailable when Element conforms to Comparable.\nfunc min(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the minimum element in the asynchronous sequence, using the given predicate as the comparison between elements.\nfunc max() async rethrows -> Self.Element?\nReturns the maximum element in an asynchronous sequence of comparable elements.\nAvailable when Element conforms to Comparable.\nfunc max(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the maximum element in the asynchronous sequence, using the given predicate as the comparison between elements.\nSelecting Elements\nfunc prefix(Int) -> AsyncPrefixSequence<Self>\nReturns an asynchronous sequence, up to the specified maximum length, containing the initial elements of the base asynchronous sequence.\nstruct AsyncPrefixSequence\nAn asynchronous sequence, up to a specified maximum length, containing the initial elements of a base asynchronous sequence.\nAvailable when Base conforms to AsyncSequence.\nfunc prefix(while: (Self.Element) async -> Bool) rethrows -> AsyncPrefixWhileSequence<Self>\nReturns an asynchronous sequence, containing the initial, consecutive elements of the base sequence that satisfy the given predicate.\nstruct AsyncPrefixWhileSequence\nAn asynchronous sequence, containing the initial, consecutive elements of the base sequence that satisfy a given predicate.\nAvailable when Base conforms to AsyncSequence.\nfunc prefix(while: (Self.Element) async throws -> Bool) rethrows -> AsyncThrowingPrefixWhileSequence<Self>\nReturns an asynchronous sequence, containing the initial, consecutive elements of the base sequence that satisfy the given error-throwing predicate.\nstruct AsyncThrowingPrefixWhileSequence\nAn asynchronous sequence, containing the initial, consecutive elements of the base sequence that satisfy the given error-throwing predicate.\nAvailable when Base conforms to AsyncSequence.\nExcluding Elements\nfunc dropFirst(Int) -> AsyncDropFirstSequence<Self>\nOmits a specified number of elements from the base asynchronous sequence, then passes through all remaining elements.\nstruct AsyncDropFirstSequence\nAn asynchronous sequence which omits a specified number of elements from the base asynchronous sequence, then passes through all remaining elements.\nAvailable when Base conforms to AsyncSequence.\nfunc drop(while: (Self.Element) async -> Bool) -> AsyncDropWhileSequence<Self>\nOmits elements from the base asynchronous sequence until a given closure returns false, after which it passes through all remaining elements.\nstruct AsyncDropWhileSequence\nAn asynchronous sequence which omits elements from the base sequence until a given closure returns false, after which it passes through all remaining elements.\nAvailable when Base conforms to AsyncSequence.\nfunc drop(while: (Self.Element) async throws -> Bool) -> AsyncThrowingDropWhileSequence<Self>\nOmits elements from the base sequence until a given error-throwing closure returns false, after which it passes through all remaining elements.\nstruct AsyncThrowingDropWhileSequence\nAn asynchronous sequence which omits elements from the base sequence until a given error-throwing closure returns false, after which it passes through all remaining elements.\nAvailable when Base conforms to AsyncSequence.\nfunc filter((Self.Element) async -> Bool) -> AsyncFilterSequence<Self>\nCreates an asynchronous sequence that contains, in order, the elements of the base sequence that satisfy the given predicate.\nstruct AsyncFilterSequence\nAn asynchronous sequence that contains, in order, the elements of the base sequence that satisfy a given predicate.\nAvailable when Base conforms to AsyncSequence.\nfunc filter((Self.Element) async throws -> Bool) -> AsyncThrowingFilterSequence<Self>\nCreates an asynchronous sequence that contains, in order, the elements of the base sequence that satisfy the given error-throwing predicate.\nstruct AsyncThrowingFilterSequence\nAn asynchronous sequence that contains, in order, the elements of the base sequence that satisfy the given error-throwing predicate.\nAvailable when Base conforms to AsyncSequence.\nTransforming a Sequence\nfunc map<Transformed>((Self.Element) async -> Transformed) -> AsyncMapSequence<Self, Transformed>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements.\nstruct AsyncMapSequence\nAn asynchronous sequence that maps the given closure over the asynchronous sequence’s elements.\nAvailable when Base conforms to AsyncSequence.\nfunc map<Transformed>((Self.Element) async throws -> Transformed) -> AsyncThrowingMapSequence<Self, Transformed>\nCreates an asynchronous sequence that maps the given error-throwing closure over the asynchronous sequence’s elements.\nstruct AsyncThrowingMapSequence\nAn asynchronous sequence that maps the given error-throwing closure over the asynchronous sequence’s elements.\nAvailable when Base conforms to AsyncSequence.\nfunc compactMap<ElementOfResult>((Self.Element) async -> ElementOfResult?) -> AsyncCompactMapSequence<Self, ElementOfResult>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements, omitting results that don’t return a value.\nstruct AsyncCompactMapSequence\nAn asynchronous sequence that maps a given closure over the asynchronous sequence’s elements, omitting results that don’t return a value.\nAvailable when Base conforms to AsyncSequence.\nfunc compactMap<ElementOfResult>((Self.Element) async throws -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<Self, ElementOfResult>\nCreates an asynchronous sequence that maps an error-throwing closure over the base sequence’s elements, omitting results that don’t return a value.\nstruct AsyncThrowingCompactMapSequence\nAn asynchronous sequence that maps an error-throwing closure over the base sequence’s elements, omitting results that don’t return a value.\nAvailable when Base conforms to AsyncSequence.\nfunc flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given transformation with each element of this sequence.\nstruct AsyncFlatMapSequence\nAn asynchronous sequence that concatenates the results of calling a given transformation with each element of this sequence.\nAvailable when Base conforms to AsyncSequence and SegmentOfResult conforms to AsyncSequence.\nfunc flatMap<SegmentOfResult>((Self.Element) async throws -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<Self, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given error-throwing transformation with each element of this sequence.\nstruct AsyncThrowingFlatMapSequence\nAn asynchronous sequence that concatenates the results of calling a given error-throwing transformation with each element of this sequence.\nAvailable when Base conforms to AsyncSequence and SegmentOfResult conforms to AsyncSequence.\nfunc reduce<Result>(Result, (Result, Self.Element) async throws -> Result) async rethrows -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure.\nfunc reduce<Result>(into: Result, (inout Result, Self.Element) async throws -> Void) async rethrows -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure, given a mutable initial value.\nAdapting Textual Sequences\nvar characters: AsyncCharacterSequence<Self>\nA non-blocking sequence of Characters created by decoding the elements of self as UTF8.\nAvailable when Element is UInt8.\nstruct AsyncCharacterSequence\nAn asychronous sequence of characters.\nvar unicodeScalars: AsyncUnicodeScalarSequence<Self>\nA non-blocking sequence of UnicodeScalars created by decoding the elements of self as UTF8.\nAvailable when Element is UInt8.\nstruct AsyncUnicodeScalarSequence\nAn asychronous sequence of Unicode scalar values.\nvar lines: AsyncLineSequence<Self>\nA non-blocking sequence of newline-separated Strings created by decoding the elements of self as UTF8.\nAvailable when Element is UInt8.\nstruct AsyncLineSequence\nAn asychronous sequence of lines of text.\nRelationships\nConforming Types\nAsyncCompactMapSequence\nConforms when Base conforms to AsyncSequence.\nAsyncDropFirstSequence\nConforms when Base conforms to AsyncSequence.\nAsyncDropWhileSequence\nConforms when Base conforms to AsyncSequence.\nAsyncFilterSequence\nConforms when Base conforms to AsyncSequence.\nAsyncFlatMapSequence\nConforms when Base conforms to AsyncSequence and SegmentOfResult conforms to AsyncSequence.\nAsyncMapSequence\nConforms when Base conforms to AsyncSequence.\nAsyncPrefixSequence\nConforms when Base conforms to AsyncSequence.\nAsyncPrefixWhileSequence\nConforms when Base conforms to AsyncSequence.\nAsyncStream\nAsyncThrowingCompactMapSequence\nConforms when Base conforms to AsyncSequence.\nAsyncThrowingDropWhileSequence\nConforms when Base conforms to AsyncSequence.\nAsyncThrowingFilterSequence\nConforms when Base conforms to AsyncSequence.\nAsyncThrowingFlatMapSequence\nConforms when Base conforms to AsyncSequence and SegmentOfResult conforms to AsyncSequence.\nAsyncThrowingMapSequence\nConforms when Base conforms to AsyncSequence.\nAsyncThrowingPrefixWhileSequence\nConforms when Base conforms to AsyncSequence.\nAsyncThrowingStream\nConforms when Failure conforms to Error.\nTaskGroup\nConforms when ChildTaskResult conforms to Sendable.\nThrowingTaskGroup\nConforms when ChildTaskResult conforms to Sendable and Failure conforms to Error.\nSee Also\nAsynchronous Sequences\nstruct AsyncStream\nAn asynchronous sequence generated from a closure that calls a continuation to produce new elements.\nstruct AsyncThrowingStream\nAn asynchronous sequence generated from an error-throwing closure that calls a continuation to produce new elements.\nAvailable when Failure conforms to Error."
  }
]