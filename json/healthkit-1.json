[
  {
    "title": "HKSwimmingStrokeStyle.backstroke | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkswimmingstrokestyle/backstroke",
    "html": "See Also\nStrokes\ncase breaststroke\nThe user swam the breaststroke.\ncase butterfly\nThe user swam the butterfly stroke.\ncase freestyle\nThe user swam the freestyle stroke.\ncase mixed\nThe user swam a mixture of strokes.\ncase kickboard\nThe user swam using a kickboard.\ncase unknown\nThe user’s stroke could not be determined."
  },
  {
    "title": "HKSwimmingStrokeStyle.breaststroke | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkswimmingstrokestyle/breaststroke",
    "html": "See Also\nStrokes\ncase backstroke\nThe user swam the backstroke.\ncase butterfly\nThe user swam the butterfly stroke.\ncase freestyle\nThe user swam the freestyle stroke.\ncase mixed\nThe user swam a mixture of strokes.\ncase kickboard\nThe user swam using a kickboard.\ncase unknown\nThe user’s stroke could not be determined."
  },
  {
    "title": "HKSwimmingStrokeStyle.butterfly | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkswimmingstrokestyle/butterfly",
    "html": "See Also\nStrokes\ncase backstroke\nThe user swam the backstroke.\ncase breaststroke\nThe user swam the breaststroke.\ncase freestyle\nThe user swam the freestyle stroke.\ncase mixed\nThe user swam a mixture of strokes.\ncase kickboard\nThe user swam using a kickboard.\ncase unknown\nThe user’s stroke could not be determined."
  },
  {
    "title": "HKSwimmingStrokeStyle.freestyle | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkswimmingstrokestyle/freestyle",
    "html": "See Also\nStrokes\ncase backstroke\nThe user swam the backstroke.\ncase breaststroke\nThe user swam the breaststroke.\ncase butterfly\nThe user swam the butterfly stroke.\ncase mixed\nThe user swam a mixture of strokes.\ncase kickboard\nThe user swam using a kickboard.\ncase unknown\nThe user’s stroke could not be determined."
  },
  {
    "title": "HKBodyTemperatureSensorLocation.toe | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkbodytemperaturesensorlocation/toe",
    "html": "See Also\nLocations\ncase other\nThe temperature was taken at a location that is not otherwise in this list.\ncase armpit\nThe temperature was taken in the armpit.\ncase body\nThe temperature was taken on the body.\ncase ear\nThe temperature was taken in the ear.\ncase finger\nThe temperature was taken at the finger.\ncase gastroIntestinal\nThe temperature was taken inside the gastrointestinal tract.\ncase mouth\nThe temperature was taken in the mouth.\ncase rectum\nThe temperature was taken in the rectum.\ncase earDrum\nThe temperature was taken on the eardrum.\ncase temporalArtery\nThe temperature was taken at the temporal artery.\ncase forehead\nThe temperature was taken on the forehead."
  },
  {
    "title": "HKBodyTemperatureSensorLocation.armpit | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkbodytemperaturesensorlocation/armpit",
    "html": "See Also\nLocations\ncase other\nThe temperature was taken at a location that is not otherwise in this list.\ncase body\nThe temperature was taken on the body.\ncase ear\nThe temperature was taken in the ear.\ncase finger\nThe temperature was taken at the finger.\ncase gastroIntestinal\nThe temperature was taken inside the gastrointestinal tract.\ncase mouth\nThe temperature was taken in the mouth.\ncase rectum\nThe temperature was taken in the rectum.\ncase toe\nThe temperature was taken at the toe.\ncase earDrum\nThe temperature was taken on the eardrum.\ncase temporalArtery\nThe temperature was taken at the temporal artery.\ncase forehead\nThe temperature was taken on the forehead."
  },
  {
    "title": "HKHeartRateSensorLocation.earLobe | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkheartratesensorlocation/earlobe",
    "html": "See Also\nLocations\ncase other\nThe heart rate sensor’s location is not otherwise on this list.\ncase chest\nThe heart rate sensor is located on the user’s chest.\ncase wrist\nThe heart rate sensor is located on the user’s wrist.\ncase finger\nThe heart rate sensor is located on the user’s finger.\ncase hand\nThe heart rate sensor is located on the user’s hand.\ncase foot\nThe heart rate sensor is located on the user’s foot."
  },
  {
    "title": "HKHeartRateSensorLocation.hand | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkheartratesensorlocation/hand",
    "html": "See Also\nLocations\ncase other\nThe heart rate sensor’s location is not otherwise on this list.\ncase chest\nThe heart rate sensor is located on the user’s chest.\ncase wrist\nThe heart rate sensor is located on the user’s wrist.\ncase finger\nThe heart rate sensor is located on the user’s finger.\ncase earLobe\nThe heart rate sensor is located on the user’s earlobe.\ncase foot\nThe heart rate sensor is located on the user’s foot."
  },
  {
    "title": "HKWeatherCondition.showers | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkweathercondition/showers",
    "html": "See Also\nWeather Conditions\ncase none\nThe weather condition is unknown or irrelevant.\ncase clear\nThe weather condition is clear.\ncase fair\nThe weather condition is fair.\ncase partlyCloudy\nThe weather condition is partly cloudy.\ncase mostlyCloudy\nThe weather condition is mostly cloudy.\ncase cloudy\nThe weather condition is cloudy.\ncase foggy\nThe weather condition is foggy.\ncase haze\nThe weather condition is hazy.\ncase windy\nThe weather condition is windy.\ncase blustery\nThe weather condition is blustery.\ncase smoky\nThe weather condition is smoky.\ncase dust\nThe weather condition is dust.\ncase snow\nThe weather condition is snow.\ncase hail\nThe weather condition is hail.\ncase sleet\nThe weather condition is sleet.\ncase freezingDrizzle\nThe weather condition is freezing drizzle.\ncase freezingRain\nThe weather condition is freezing rain.\ncase mixedRainAndHail\nThe weather condition is mixed rain and hail.\ncase mixedRainAndSnow\nThe weather condition is mixed rain and snow.\ncase mixedRainAndSleet\nThe weather condition is mixed rain and sleet.\ncase mixedSnowAndSleet\nThe weather condition is mixed snow and sleet.\ncase drizzle\nThe weather condition is drizzle.\ncase scatteredShowers\nThe weather condition is scattered showers.\ncase thunderstorms\nThe weather condition is thunderstorms.\ncase tropicalStorm\nThe weather condition is tropical storm.\ncase hurricane\nThe weather condition is hurricane.\ncase tornado\nThe weather condition is tornado."
  },
  {
    "title": "HKWeatherCondition.scatteredShowers | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkweathercondition/scatteredshowers",
    "html": "See Also\nWeather Conditions\ncase none\nThe weather condition is unknown or irrelevant.\ncase clear\nThe weather condition is clear.\ncase fair\nThe weather condition is fair.\ncase partlyCloudy\nThe weather condition is partly cloudy.\ncase mostlyCloudy\nThe weather condition is mostly cloudy.\ncase cloudy\nThe weather condition is cloudy.\ncase foggy\nThe weather condition is foggy.\ncase haze\nThe weather condition is hazy.\ncase windy\nThe weather condition is windy.\ncase blustery\nThe weather condition is blustery.\ncase smoky\nThe weather condition is smoky.\ncase dust\nThe weather condition is dust.\ncase snow\nThe weather condition is snow.\ncase hail\nThe weather condition is hail.\ncase sleet\nThe weather condition is sleet.\ncase freezingDrizzle\nThe weather condition is freezing drizzle.\ncase freezingRain\nThe weather condition is freezing rain.\ncase mixedRainAndHail\nThe weather condition is mixed rain and hail.\ncase mixedRainAndSnow\nThe weather condition is mixed rain and snow.\ncase mixedRainAndSleet\nThe weather condition is mixed rain and sleet.\ncase mixedSnowAndSleet\nThe weather condition is mixed snow and sleet.\ncase drizzle\nThe weather condition is drizzle.\ncase showers\nThe weather condition is showers.\ncase thunderstorms\nThe weather condition is thunderstorms.\ncase tropicalStorm\nThe weather condition is tropical storm.\ncase hurricane\nThe weather condition is hurricane.\ncase tornado\nThe weather condition is tornado."
  },
  {
    "title": "HKWeatherCondition.mixedRainAndHail | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkweathercondition/mixedrainandhail",
    "html": "See Also\nWeather Conditions\ncase none\nThe weather condition is unknown or irrelevant.\ncase clear\nThe weather condition is clear.\ncase fair\nThe weather condition is fair.\ncase partlyCloudy\nThe weather condition is partly cloudy.\ncase mostlyCloudy\nThe weather condition is mostly cloudy.\ncase cloudy\nThe weather condition is cloudy.\ncase foggy\nThe weather condition is foggy.\ncase haze\nThe weather condition is hazy.\ncase windy\nThe weather condition is windy.\ncase blustery\nThe weather condition is blustery.\ncase smoky\nThe weather condition is smoky.\ncase dust\nThe weather condition is dust.\ncase snow\nThe weather condition is snow.\ncase hail\nThe weather condition is hail.\ncase sleet\nThe weather condition is sleet.\ncase freezingDrizzle\nThe weather condition is freezing drizzle.\ncase freezingRain\nThe weather condition is freezing rain.\ncase mixedRainAndSnow\nThe weather condition is mixed rain and snow.\ncase mixedRainAndSleet\nThe weather condition is mixed rain and sleet.\ncase mixedSnowAndSleet\nThe weather condition is mixed snow and sleet.\ncase drizzle\nThe weather condition is drizzle.\ncase scatteredShowers\nThe weather condition is scattered showers.\ncase showers\nThe weather condition is showers.\ncase thunderstorms\nThe weather condition is thunderstorms.\ncase tropicalStorm\nThe weather condition is tropical storm.\ncase hurricane\nThe weather condition is hurricane.\ncase tornado\nThe weather condition is tornado."
  },
  {
    "title": "HKHeartbeatSeriesQueryDescriptor.Results.Iterator.Element | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkheartbeatseriesquerydescriptor/results/iterator/element",
    "html": "See Also\nAccessing the Results\nfunc next() -> HKHeartbeatSeriesQueryDescriptor.Results.Element?\nAsynchronously waits for the next heartbeat and returns it."
  },
  {
    "title": "next() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkelectrocardiogramquerydescriptor/results/iterator/3916320-next",
    "html": "Relationships\nFrom Protocol\nAsyncIteratorProtocol\nSee Also\nAccessing the Results\ntypealias HKElectrocardiogramQueryDescriptor.Results.Iterator.Element\nThe type for voltage measurements returned by the iterator."
  },
  {
    "title": "HKElectrocardiogramQueryDescriptor.Results.Iterator.Element | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkelectrocardiogramquerydescriptor/results/iterator/element",
    "html": "See Also\nAccessing the Results\nfunc next() -> HKElectrocardiogramQueryDescriptor.Results.Element?\nAsynchronously waits for the next measurement and returns it."
  },
  {
    "title": "r4 | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkfhirrelease/3552008-r4",
    "html": "See Also\nReleases\nstatic let dstu2: HKFHIRRelease\nThe Second Draft Standard for Trial Use (DSTU2) release.\nstatic let unknown: HKFHIRRelease\nAn unknown release."
  },
  {
    "title": "unknown | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkfhirrelease/3552009-unknown",
    "html": "See Also\nReleases\nstatic let dstu2: HKFHIRRelease\nThe Second Draft Standard for Trial Use (DSTU2) release.\nstatic let r4: HKFHIRRelease\nThe Release 4 (R4) release."
  },
  {
    "title": "HKAnchoredObjectQueryDescriptor.Results.Iterator.Element | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkanchoredobjectquerydescriptor/results/iterator/element",
    "html": "See Also\nIterating Over Results\nfunc next() -> HKAnchoredObjectQueryDescriptor<Sample>.Results.Element?\nAsynchronously waits for the next element and returns it."
  },
  {
    "title": "next() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkoutroutequerydescriptor/results/iterator/3916631-next",
    "html": "Relationships\nFrom Protocol\nAsyncIteratorProtocol\nSee Also\nAccessing the Results\ntypealias HKWorkoutRouteQueryDescriptor.Results.Iterator.Element\nThe type for locations returned by the iterator."
  },
  {
    "title": "HKHeartRateSensorLocation.chest | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkheartratesensorlocation/chest",
    "html": "See Also\nLocations\ncase other\nThe heart rate sensor’s location is not otherwise on this list.\ncase wrist\nThe heart rate sensor is located on the user’s wrist.\ncase finger\nThe heart rate sensor is located on the user’s finger.\ncase hand\nThe heart rate sensor is located on the user’s hand.\ncase earLobe\nThe heart rate sensor is located on the user’s earlobe.\ncase foot\nThe heart rate sensor is located on the user’s foot."
  },
  {
    "title": "next() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkheartbeatseriesquerydescriptor/results/iterator/3916376-next",
    "html": "Relationships\nFrom Protocol\nAsyncIteratorProtocol\nSee Also\nAccessing the Results\ntypealias HKHeartbeatSeriesQueryDescriptor.Results.Iterator.Element\nThe type for heartbeat data returned by the iterator."
  },
  {
    "title": "HKHeartRateRecoveryTestType.maxExercise | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkheartraterecoverytesttype/maxexercise",
    "html": "Discussion\n\nIn this test, a person exercises to their physical limit. The test measures their max heart rate during the workout, and then compares this with their heart rate after the workout ends. This lets the test calculate the actual heart rate recovery.\n\nSee Also\nHeart-rate recovery tests\ncase predictionNonExercise\nA test that estimates a person’s heart-rate recovery without using exercise.\ncase predictionSubMaxExercise\nA test that estimates a person’s heart-rate recovery using lower-intensity exercise."
  },
  {
    "title": "HKHeartRateSensorLocation.other | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkheartratesensorlocation/other",
    "html": "See Also\nLocations\ncase chest\nThe heart rate sensor is located on the user’s chest.\ncase wrist\nThe heart rate sensor is located on the user’s wrist.\ncase finger\nThe heart rate sensor is located on the user’s finger.\ncase hand\nThe heart rate sensor is located on the user’s hand.\ncase earLobe\nThe heart rate sensor is located on the user’s earlobe.\ncase foot\nThe heart rate sensor is located on the user’s foot."
  },
  {
    "title": "HKBodyTemperatureSensorLocation.other | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkbodytemperaturesensorlocation/other",
    "html": "See Also\nLocations\ncase armpit\nThe temperature was taken in the armpit.\ncase body\nThe temperature was taken on the body.\ncase ear\nThe temperature was taken in the ear.\ncase finger\nThe temperature was taken at the finger.\ncase gastroIntestinal\nThe temperature was taken inside the gastrointestinal tract.\ncase mouth\nThe temperature was taken in the mouth.\ncase rectum\nThe temperature was taken in the rectum.\ncase toe\nThe temperature was taken at the toe.\ncase earDrum\nThe temperature was taken on the eardrum.\ncase temporalArtery\nThe temperature was taken at the temporal artery.\ncase forehead\nThe temperature was taken on the forehead."
  },
  {
    "title": "HKSwimmingStrokeStyle.unknown | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkswimmingstrokestyle/unknown",
    "html": "See Also\nStrokes\ncase backstroke\nThe user swam the backstroke.\ncase breaststroke\nThe user swam the breaststroke.\ncase butterfly\nThe user swam the butterfly stroke.\ncase freestyle\nThe user swam the freestyle stroke.\ncase mixed\nThe user swam a mixture of strokes.\ncase kickboard\nThe user swam using a kickboard."
  },
  {
    "title": "HKSwimmingStrokeStyle.kickboard | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkswimmingstrokestyle/kickboard",
    "html": "See Also\nStrokes\ncase backstroke\nThe user swam the backstroke.\ncase breaststroke\nThe user swam the breaststroke.\ncase butterfly\nThe user swam the butterfly stroke.\ncase freestyle\nThe user swam the freestyle stroke.\ncase mixed\nThe user swam a mixture of strokes.\ncase unknown\nThe user’s stroke could not be determined."
  },
  {
    "title": "HKSwimmingStrokeStyle.mixed | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkswimmingstrokestyle/mixed",
    "html": "See Also\nStrokes\ncase backstroke\nThe user swam the backstroke.\ncase breaststroke\nThe user swam the breaststroke.\ncase butterfly\nThe user swam the butterfly stroke.\ncase freestyle\nThe user swam the freestyle stroke.\ncase kickboard\nThe user swam using a kickboard.\ncase unknown\nThe user’s stroke could not be determined."
  },
  {
    "title": "HKBodyTemperatureSensorLocation.mouth | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkbodytemperaturesensorlocation/mouth",
    "html": "See Also\nLocations\ncase other\nThe temperature was taken at a location that is not otherwise in this list.\ncase armpit\nThe temperature was taken in the armpit.\ncase body\nThe temperature was taken on the body.\ncase ear\nThe temperature was taken in the ear.\ncase finger\nThe temperature was taken at the finger.\ncase gastroIntestinal\nThe temperature was taken inside the gastrointestinal tract.\ncase rectum\nThe temperature was taken in the rectum.\ncase toe\nThe temperature was taken at the toe.\ncase earDrum\nThe temperature was taken on the eardrum.\ncase temporalArtery\nThe temperature was taken at the temporal artery.\ncase forehead\nThe temperature was taken on the forehead."
  },
  {
    "title": "HKBodyTemperatureSensorLocation.ear | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkbodytemperaturesensorlocation/ear",
    "html": "See Also\nLocations\ncase other\nThe temperature was taken at a location that is not otherwise in this list.\ncase armpit\nThe temperature was taken in the armpit.\ncase body\nThe temperature was taken on the body.\ncase finger\nThe temperature was taken at the finger.\ncase gastroIntestinal\nThe temperature was taken inside the gastrointestinal tract.\ncase mouth\nThe temperature was taken in the mouth.\ncase rectum\nThe temperature was taken in the rectum.\ncase toe\nThe temperature was taken at the toe.\ncase earDrum\nThe temperature was taken on the eardrum.\ncase temporalArtery\nThe temperature was taken at the temporal artery.\ncase forehead\nThe temperature was taken on the forehead."
  },
  {
    "title": "HKBodyTemperatureSensorLocation.body | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkbodytemperaturesensorlocation/body",
    "html": "See Also\nLocations\ncase other\nThe temperature was taken at a location that is not otherwise in this list.\ncase armpit\nThe temperature was taken in the armpit.\ncase ear\nThe temperature was taken in the ear.\ncase finger\nThe temperature was taken at the finger.\ncase gastroIntestinal\nThe temperature was taken inside the gastrointestinal tract.\ncase mouth\nThe temperature was taken in the mouth.\ncase rectum\nThe temperature was taken in the rectum.\ncase toe\nThe temperature was taken at the toe.\ncase earDrum\nThe temperature was taken on the eardrum.\ncase temporalArtery\nThe temperature was taken at the temporal artery.\ncase forehead\nThe temperature was taken on the forehead."
  },
  {
    "title": "HKBodyTemperatureSensorLocation.gastroIntestinal | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkbodytemperaturesensorlocation/gastrointestinal",
    "html": "See Also\nLocations\ncase other\nThe temperature was taken at a location that is not otherwise in this list.\ncase armpit\nThe temperature was taken in the armpit.\ncase body\nThe temperature was taken on the body.\ncase ear\nThe temperature was taken in the ear.\ncase finger\nThe temperature was taken at the finger.\ncase mouth\nThe temperature was taken in the mouth.\ncase rectum\nThe temperature was taken in the rectum.\ncase toe\nThe temperature was taken at the toe.\ncase earDrum\nThe temperature was taken on the eardrum.\ncase temporalArtery\nThe temperature was taken at the temporal artery.\ncase forehead\nThe temperature was taken on the forehead."
  },
  {
    "title": "HKBodyTemperatureSensorLocation.rectum | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkbodytemperaturesensorlocation/rectum",
    "html": "See Also\nLocations\ncase other\nThe temperature was taken at a location that is not otherwise in this list.\ncase armpit\nThe temperature was taken in the armpit.\ncase body\nThe temperature was taken on the body.\ncase ear\nThe temperature was taken in the ear.\ncase finger\nThe temperature was taken at the finger.\ncase gastroIntestinal\nThe temperature was taken inside the gastrointestinal tract.\ncase mouth\nThe temperature was taken in the mouth.\ncase toe\nThe temperature was taken at the toe.\ncase earDrum\nThe temperature was taken on the eardrum.\ncase temporalArtery\nThe temperature was taken at the temporal artery.\ncase forehead\nThe temperature was taken on the forehead."
  },
  {
    "title": "HKBodyTemperatureSensorLocation.earDrum | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkbodytemperaturesensorlocation/eardrum",
    "html": "See Also\nLocations\ncase other\nThe temperature was taken at a location that is not otherwise in this list.\ncase armpit\nThe temperature was taken in the armpit.\ncase body\nThe temperature was taken on the body.\ncase ear\nThe temperature was taken in the ear.\ncase finger\nThe temperature was taken at the finger.\ncase gastroIntestinal\nThe temperature was taken inside the gastrointestinal tract.\ncase mouth\nThe temperature was taken in the mouth.\ncase rectum\nThe temperature was taken in the rectum.\ncase toe\nThe temperature was taken at the toe.\ncase temporalArtery\nThe temperature was taken at the temporal artery.\ncase forehead\nThe temperature was taken on the forehead."
  },
  {
    "title": "HKBodyTemperatureSensorLocation.temporalArtery | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkbodytemperaturesensorlocation/temporalartery",
    "html": "See Also\nLocations\ncase other\nThe temperature was taken at a location that is not otherwise in this list.\ncase armpit\nThe temperature was taken in the armpit.\ncase body\nThe temperature was taken on the body.\ncase ear\nThe temperature was taken in the ear.\ncase finger\nThe temperature was taken at the finger.\ncase gastroIntestinal\nThe temperature was taken inside the gastrointestinal tract.\ncase mouth\nThe temperature was taken in the mouth.\ncase rectum\nThe temperature was taken in the rectum.\ncase toe\nThe temperature was taken at the toe.\ncase earDrum\nThe temperature was taken on the eardrum.\ncase forehead\nThe temperature was taken on the forehead."
  },
  {
    "title": "HKBodyTemperatureSensorLocation.forehead | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkbodytemperaturesensorlocation/forehead",
    "html": "See Also\nLocations\ncase other\nThe temperature was taken at a location that is not otherwise in this list.\ncase armpit\nThe temperature was taken in the armpit.\ncase body\nThe temperature was taken on the body.\ncase ear\nThe temperature was taken in the ear.\ncase finger\nThe temperature was taken at the finger.\ncase gastroIntestinal\nThe temperature was taken inside the gastrointestinal tract.\ncase mouth\nThe temperature was taken in the mouth.\ncase rectum\nThe temperature was taken in the rectum.\ncase toe\nThe temperature was taken at the toe.\ncase earDrum\nThe temperature was taken on the eardrum.\ncase temporalArtery\nThe temperature was taken at the temporal artery."
  },
  {
    "title": "HKWeatherCondition.hurricane | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkweathercondition/hurricane",
    "html": "See Also\nWeather Conditions\ncase none\nThe weather condition is unknown or irrelevant.\ncase clear\nThe weather condition is clear.\ncase fair\nThe weather condition is fair.\ncase partlyCloudy\nThe weather condition is partly cloudy.\ncase mostlyCloudy\nThe weather condition is mostly cloudy.\ncase cloudy\nThe weather condition is cloudy.\ncase foggy\nThe weather condition is foggy.\ncase haze\nThe weather condition is hazy.\ncase windy\nThe weather condition is windy.\ncase blustery\nThe weather condition is blustery.\ncase smoky\nThe weather condition is smoky.\ncase dust\nThe weather condition is dust.\ncase snow\nThe weather condition is snow.\ncase hail\nThe weather condition is hail.\ncase sleet\nThe weather condition is sleet.\ncase freezingDrizzle\nThe weather condition is freezing drizzle.\ncase freezingRain\nThe weather condition is freezing rain.\ncase mixedRainAndHail\nThe weather condition is mixed rain and hail.\ncase mixedRainAndSnow\nThe weather condition is mixed rain and snow.\ncase mixedRainAndSleet\nThe weather condition is mixed rain and sleet.\ncase mixedSnowAndSleet\nThe weather condition is mixed snow and sleet.\ncase drizzle\nThe weather condition is drizzle.\ncase scatteredShowers\nThe weather condition is scattered showers.\ncase showers\nThe weather condition is showers.\ncase thunderstorms\nThe weather condition is thunderstorms.\ncase tropicalStorm\nThe weather condition is tropical storm.\ncase tornado\nThe weather condition is tornado."
  },
  {
    "title": "HKWeatherCondition.mixedSnowAndSleet | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkweathercondition/mixedsnowandsleet",
    "html": "See Also\nWeather Conditions\ncase none\nThe weather condition is unknown or irrelevant.\ncase clear\nThe weather condition is clear.\ncase fair\nThe weather condition is fair.\ncase partlyCloudy\nThe weather condition is partly cloudy.\ncase mostlyCloudy\nThe weather condition is mostly cloudy.\ncase cloudy\nThe weather condition is cloudy.\ncase foggy\nThe weather condition is foggy.\ncase haze\nThe weather condition is hazy.\ncase windy\nThe weather condition is windy.\ncase blustery\nThe weather condition is blustery.\ncase smoky\nThe weather condition is smoky.\ncase dust\nThe weather condition is dust.\ncase snow\nThe weather condition is snow.\ncase hail\nThe weather condition is hail.\ncase sleet\nThe weather condition is sleet.\ncase freezingDrizzle\nThe weather condition is freezing drizzle.\ncase freezingRain\nThe weather condition is freezing rain.\ncase mixedRainAndHail\nThe weather condition is mixed rain and hail.\ncase mixedRainAndSnow\nThe weather condition is mixed rain and snow.\ncase mixedRainAndSleet\nThe weather condition is mixed rain and sleet.\ncase drizzle\nThe weather condition is drizzle.\ncase scatteredShowers\nThe weather condition is scattered showers.\ncase showers\nThe weather condition is showers.\ncase thunderstorms\nThe weather condition is thunderstorms.\ncase tropicalStorm\nThe weather condition is tropical storm.\ncase hurricane\nThe weather condition is hurricane.\ncase tornado\nThe weather condition is tornado."
  },
  {
    "title": "HKWeatherCondition.tornado | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkweathercondition/tornado",
    "html": "See Also\nWeather Conditions\ncase none\nThe weather condition is unknown or irrelevant.\ncase clear\nThe weather condition is clear.\ncase fair\nThe weather condition is fair.\ncase partlyCloudy\nThe weather condition is partly cloudy.\ncase mostlyCloudy\nThe weather condition is mostly cloudy.\ncase cloudy\nThe weather condition is cloudy.\ncase foggy\nThe weather condition is foggy.\ncase haze\nThe weather condition is hazy.\ncase windy\nThe weather condition is windy.\ncase blustery\nThe weather condition is blustery.\ncase smoky\nThe weather condition is smoky.\ncase dust\nThe weather condition is dust.\ncase snow\nThe weather condition is snow.\ncase hail\nThe weather condition is hail.\ncase sleet\nThe weather condition is sleet.\ncase freezingDrizzle\nThe weather condition is freezing drizzle.\ncase freezingRain\nThe weather condition is freezing rain.\ncase mixedRainAndHail\nThe weather condition is mixed rain and hail.\ncase mixedRainAndSnow\nThe weather condition is mixed rain and snow.\ncase mixedRainAndSleet\nThe weather condition is mixed rain and sleet.\ncase mixedSnowAndSleet\nThe weather condition is mixed snow and sleet.\ncase drizzle\nThe weather condition is drizzle.\ncase scatteredShowers\nThe weather condition is scattered showers.\ncase showers\nThe weather condition is showers.\ncase thunderstorms\nThe weather condition is thunderstorms.\ncase tropicalStorm\nThe weather condition is tropical storm.\ncase hurricane\nThe weather condition is hurricane."
  },
  {
    "title": "HKWeatherCondition.thunderstorms | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkweathercondition/thunderstorms",
    "html": "See Also\nWeather Conditions\ncase none\nThe weather condition is unknown or irrelevant.\ncase clear\nThe weather condition is clear.\ncase fair\nThe weather condition is fair.\ncase partlyCloudy\nThe weather condition is partly cloudy.\ncase mostlyCloudy\nThe weather condition is mostly cloudy.\ncase cloudy\nThe weather condition is cloudy.\ncase foggy\nThe weather condition is foggy.\ncase haze\nThe weather condition is hazy.\ncase windy\nThe weather condition is windy.\ncase blustery\nThe weather condition is blustery.\ncase smoky\nThe weather condition is smoky.\ncase dust\nThe weather condition is dust.\ncase snow\nThe weather condition is snow.\ncase hail\nThe weather condition is hail.\ncase sleet\nThe weather condition is sleet.\ncase freezingDrizzle\nThe weather condition is freezing drizzle.\ncase freezingRain\nThe weather condition is freezing rain.\ncase mixedRainAndHail\nThe weather condition is mixed rain and hail.\ncase mixedRainAndSnow\nThe weather condition is mixed rain and snow.\ncase mixedRainAndSleet\nThe weather condition is mixed rain and sleet.\ncase mixedSnowAndSleet\nThe weather condition is mixed snow and sleet.\ncase drizzle\nThe weather condition is drizzle.\ncase scatteredShowers\nThe weather condition is scattered showers.\ncase showers\nThe weather condition is showers.\ncase tropicalStorm\nThe weather condition is tropical storm.\ncase hurricane\nThe weather condition is hurricane.\ncase tornado\nThe weather condition is tornado."
  },
  {
    "title": "HKInsulinDeliveryReason.basal | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkinsulindeliveryreason/basal",
    "html": "Discussion\n\nUsers typically administer basal insulin at a continuous rate from an insulin pump, or as a periodic injection of slow-acting insulin.\n\nSee Also\nDelivery Reasons\ncase bolus\nInsulin administered to meet the user’s episodic requirements."
  },
  {
    "title": "HKWeatherCondition.mixedRainAndSleet | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkweathercondition/mixedrainandsleet",
    "html": "See Also\nWeather Conditions\ncase none\nThe weather condition is unknown or irrelevant.\ncase clear\nThe weather condition is clear.\ncase fair\nThe weather condition is fair.\ncase partlyCloudy\nThe weather condition is partly cloudy.\ncase mostlyCloudy\nThe weather condition is mostly cloudy.\ncase cloudy\nThe weather condition is cloudy.\ncase foggy\nThe weather condition is foggy.\ncase haze\nThe weather condition is hazy.\ncase windy\nThe weather condition is windy.\ncase blustery\nThe weather condition is blustery.\ncase smoky\nThe weather condition is smoky.\ncase dust\nThe weather condition is dust.\ncase snow\nThe weather condition is snow.\ncase hail\nThe weather condition is hail.\ncase sleet\nThe weather condition is sleet.\ncase freezingDrizzle\nThe weather condition is freezing drizzle.\ncase freezingRain\nThe weather condition is freezing rain.\ncase mixedRainAndHail\nThe weather condition is mixed rain and hail.\ncase mixedRainAndSnow\nThe weather condition is mixed rain and snow.\ncase mixedSnowAndSleet\nThe weather condition is mixed snow and sleet.\ncase drizzle\nThe weather condition is drizzle.\ncase scatteredShowers\nThe weather condition is scattered showers.\ncase showers\nThe weather condition is showers.\ncase thunderstorms\nThe weather condition is thunderstorms.\ncase tropicalStorm\nThe weather condition is tropical storm.\ncase hurricane\nThe weather condition is hurricane.\ncase tornado\nThe weather condition is tornado."
  },
  {
    "title": "HKWeatherCondition.mixedRainAndSnow | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkweathercondition/mixedrainandsnow",
    "html": "See Also\nWeather Conditions\ncase none\nThe weather condition is unknown or irrelevant.\ncase clear\nThe weather condition is clear.\ncase fair\nThe weather condition is fair.\ncase partlyCloudy\nThe weather condition is partly cloudy.\ncase mostlyCloudy\nThe weather condition is mostly cloudy.\ncase cloudy\nThe weather condition is cloudy.\ncase foggy\nThe weather condition is foggy.\ncase haze\nThe weather condition is hazy.\ncase windy\nThe weather condition is windy.\ncase blustery\nThe weather condition is blustery.\ncase smoky\nThe weather condition is smoky.\ncase dust\nThe weather condition is dust.\ncase snow\nThe weather condition is snow.\ncase hail\nThe weather condition is hail.\ncase sleet\nThe weather condition is sleet.\ncase freezingDrizzle\nThe weather condition is freezing drizzle.\ncase freezingRain\nThe weather condition is freezing rain.\ncase mixedRainAndHail\nThe weather condition is mixed rain and hail.\ncase mixedRainAndSleet\nThe weather condition is mixed rain and sleet.\ncase mixedSnowAndSleet\nThe weather condition is mixed snow and sleet.\ncase drizzle\nThe weather condition is drizzle.\ncase scatteredShowers\nThe weather condition is scattered showers.\ncase showers\nThe weather condition is showers.\ncase thunderstorms\nThe weather condition is thunderstorms.\ncase tropicalStorm\nThe weather condition is tropical storm.\ncase hurricane\nThe weather condition is hurricane.\ncase tornado\nThe weather condition is tornado."
  },
  {
    "title": "HKVO2MaxTestType.predictionNonExercise | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkvo2maxtesttype/predictionnonexercise",
    "html": "See Also\nTest Types\ncase maxExercise\nA test that measures VO2 max rate by monitoring exercise to the user’s physical limit.\ncase predictionSubMaxExercise\nA calculation that estimates VO2 max rate based on low-intensity exercise."
  },
  {
    "title": "HKWeatherCondition.sleet | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkweathercondition/sleet",
    "html": "See Also\nWeather Conditions\ncase none\nThe weather condition is unknown or irrelevant.\ncase clear\nThe weather condition is clear.\ncase fair\nThe weather condition is fair.\ncase partlyCloudy\nThe weather condition is partly cloudy.\ncase mostlyCloudy\nThe weather condition is mostly cloudy.\ncase cloudy\nThe weather condition is cloudy.\ncase foggy\nThe weather condition is foggy.\ncase haze\nThe weather condition is hazy.\ncase windy\nThe weather condition is windy.\ncase blustery\nThe weather condition is blustery.\ncase smoky\nThe weather condition is smoky.\ncase dust\nThe weather condition is dust.\ncase snow\nThe weather condition is snow.\ncase hail\nThe weather condition is hail.\ncase freezingDrizzle\nThe weather condition is freezing drizzle.\ncase freezingRain\nThe weather condition is freezing rain.\ncase mixedRainAndHail\nThe weather condition is mixed rain and hail.\ncase mixedRainAndSnow\nThe weather condition is mixed rain and snow.\ncase mixedRainAndSleet\nThe weather condition is mixed rain and sleet.\ncase mixedSnowAndSleet\nThe weather condition is mixed snow and sleet.\ncase drizzle\nThe weather condition is drizzle.\ncase scatteredShowers\nThe weather condition is scattered showers.\ncase showers\nThe weather condition is showers.\ncase thunderstorms\nThe weather condition is thunderstorms.\ncase tropicalStorm\nThe weather condition is tropical storm.\ncase hurricane\nThe weather condition is hurricane.\ncase tornado\nThe weather condition is tornado."
  },
  {
    "title": "HKWeatherCondition.hail | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkweathercondition/hail",
    "html": "See Also\nWeather Conditions\ncase none\nThe weather condition is unknown or irrelevant.\ncase clear\nThe weather condition is clear.\ncase fair\nThe weather condition is fair.\ncase partlyCloudy\nThe weather condition is partly cloudy.\ncase mostlyCloudy\nThe weather condition is mostly cloudy.\ncase cloudy\nThe weather condition is cloudy.\ncase foggy\nThe weather condition is foggy.\ncase haze\nThe weather condition is hazy.\ncase windy\nThe weather condition is windy.\ncase blustery\nThe weather condition is blustery.\ncase smoky\nThe weather condition is smoky.\ncase dust\nThe weather condition is dust.\ncase snow\nThe weather condition is snow.\ncase sleet\nThe weather condition is sleet.\ncase freezingDrizzle\nThe weather condition is freezing drizzle.\ncase freezingRain\nThe weather condition is freezing rain.\ncase mixedRainAndHail\nThe weather condition is mixed rain and hail.\ncase mixedRainAndSnow\nThe weather condition is mixed rain and snow.\ncase mixedRainAndSleet\nThe weather condition is mixed rain and sleet.\ncase mixedSnowAndSleet\nThe weather condition is mixed snow and sleet.\ncase drizzle\nThe weather condition is drizzle.\ncase scatteredShowers\nThe weather condition is scattered showers.\ncase showers\nThe weather condition is showers.\ncase thunderstorms\nThe weather condition is thunderstorms.\ncase tropicalStorm\nThe weather condition is tropical storm.\ncase hurricane\nThe weather condition is hurricane.\ncase tornado\nThe weather condition is tornado."
  },
  {
    "title": "HKWeatherCondition.snow | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkweathercondition/snow",
    "html": "See Also\nWeather Conditions\ncase none\nThe weather condition is unknown or irrelevant.\ncase clear\nThe weather condition is clear.\ncase fair\nThe weather condition is fair.\ncase partlyCloudy\nThe weather condition is partly cloudy.\ncase mostlyCloudy\nThe weather condition is mostly cloudy.\ncase cloudy\nThe weather condition is cloudy.\ncase foggy\nThe weather condition is foggy.\ncase haze\nThe weather condition is hazy.\ncase windy\nThe weather condition is windy.\ncase blustery\nThe weather condition is blustery.\ncase smoky\nThe weather condition is smoky.\ncase dust\nThe weather condition is dust.\ncase hail\nThe weather condition is hail.\ncase sleet\nThe weather condition is sleet.\ncase freezingDrizzle\nThe weather condition is freezing drizzle.\ncase freezingRain\nThe weather condition is freezing rain.\ncase mixedRainAndHail\nThe weather condition is mixed rain and hail.\ncase mixedRainAndSnow\nThe weather condition is mixed rain and snow.\ncase mixedRainAndSleet\nThe weather condition is mixed rain and sleet.\ncase mixedSnowAndSleet\nThe weather condition is mixed snow and sleet.\ncase drizzle\nThe weather condition is drizzle.\ncase scatteredShowers\nThe weather condition is scattered showers.\ncase showers\nThe weather condition is showers.\ncase thunderstorms\nThe weather condition is thunderstorms.\ncase tropicalStorm\nThe weather condition is tropical storm.\ncase hurricane\nThe weather condition is hurricane.\ncase tornado\nThe weather condition is tornado."
  },
  {
    "title": "HKWeatherCondition.freezingRain | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkweathercondition/freezingrain",
    "html": "See Also\nWeather Conditions\ncase none\nThe weather condition is unknown or irrelevant.\ncase clear\nThe weather condition is clear.\ncase fair\nThe weather condition is fair.\ncase partlyCloudy\nThe weather condition is partly cloudy.\ncase mostlyCloudy\nThe weather condition is mostly cloudy.\ncase cloudy\nThe weather condition is cloudy.\ncase foggy\nThe weather condition is foggy.\ncase haze\nThe weather condition is hazy.\ncase windy\nThe weather condition is windy.\ncase blustery\nThe weather condition is blustery.\ncase smoky\nThe weather condition is smoky.\ncase dust\nThe weather condition is dust.\ncase snow\nThe weather condition is snow.\ncase hail\nThe weather condition is hail.\ncase sleet\nThe weather condition is sleet.\ncase freezingDrizzle\nThe weather condition is freezing drizzle.\ncase mixedRainAndHail\nThe weather condition is mixed rain and hail.\ncase mixedRainAndSnow\nThe weather condition is mixed rain and snow.\ncase mixedRainAndSleet\nThe weather condition is mixed rain and sleet.\ncase mixedSnowAndSleet\nThe weather condition is mixed snow and sleet.\ncase drizzle\nThe weather condition is drizzle.\ncase scatteredShowers\nThe weather condition is scattered showers.\ncase showers\nThe weather condition is showers.\ncase thunderstorms\nThe weather condition is thunderstorms.\ncase tropicalStorm\nThe weather condition is tropical storm.\ncase hurricane\nThe weather condition is hurricane.\ncase tornado\nThe weather condition is tornado."
  },
  {
    "title": "HKWeatherCondition.freezingDrizzle | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkweathercondition/freezingdrizzle",
    "html": "See Also\nWeather Conditions\ncase none\nThe weather condition is unknown or irrelevant.\ncase clear\nThe weather condition is clear.\ncase fair\nThe weather condition is fair.\ncase partlyCloudy\nThe weather condition is partly cloudy.\ncase mostlyCloudy\nThe weather condition is mostly cloudy.\ncase cloudy\nThe weather condition is cloudy.\ncase foggy\nThe weather condition is foggy.\ncase haze\nThe weather condition is hazy.\ncase windy\nThe weather condition is windy.\ncase blustery\nThe weather condition is blustery.\ncase smoky\nThe weather condition is smoky.\ncase dust\nThe weather condition is dust.\ncase snow\nThe weather condition is snow.\ncase hail\nThe weather condition is hail.\ncase sleet\nThe weather condition is sleet.\ncase freezingRain\nThe weather condition is freezing rain.\ncase mixedRainAndHail\nThe weather condition is mixed rain and hail.\ncase mixedRainAndSnow\nThe weather condition is mixed rain and snow.\ncase mixedRainAndSleet\nThe weather condition is mixed rain and sleet.\ncase mixedSnowAndSleet\nThe weather condition is mixed snow and sleet.\ncase drizzle\nThe weather condition is drizzle.\ncase scatteredShowers\nThe weather condition is scattered showers.\ncase showers\nThe weather condition is showers.\ncase thunderstorms\nThe weather condition is thunderstorms.\ncase tropicalStorm\nThe weather condition is tropical storm.\ncase hurricane\nThe weather condition is hurricane.\ncase tornado\nThe weather condition is tornado."
  },
  {
    "title": "HKWorkoutRouteQueryDescriptor.Results.Iterator.Element | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkoutroutequerydescriptor/results/iterator/element",
    "html": "See Also\nAccessing the Results\nfunc next() -> HKWorkoutRouteQueryDescriptor.Results.Element?\nAsynchronously waits for the next location and returns it."
  },
  {
    "title": "next() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkanchoredobjectquerydescriptor/results/iterator/3916264-next",
    "html": "Relationships\nFrom Protocol\nAsyncIteratorProtocol\nSee Also\nIterating Over Results\ntypealias HKAnchoredObjectQueryDescriptor.Results.Iterator.Element\nThe type for results returned by the anchored object iterator."
  },
  {
    "title": "dstu2 | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkfhirrelease/3552007-dstu2",
    "html": "See Also\nReleases\nstatic let r4: HKFHIRRelease\nThe Release 4 (R4) release.\nstatic let unknown: HKFHIRRelease\nAn unknown release."
  },
  {
    "title": "HKQuantitySeriesSampleQueryDescriptor.Results.Iterator.Element | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquantityseriessamplequerydescriptor/results/iterator/element",
    "html": "See Also\nAccessing the Results\nfunc next() -> HKQuantitySeriesSampleQueryDescriptor.Results.Element?\nAsynchronously waits for the next element and returns it."
  },
  {
    "title": "next() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquantityseriessamplequerydescriptor/results/iterator/3916479-next",
    "html": "Relationships\nFrom Protocol\nAsyncIteratorProtocol\nSee Also\nAccessing the Results\ntypealias HKQuantitySeriesSampleQueryDescriptor.Results.Iterator.Element\nThe type for results returned by the series sample query iterator."
  },
  {
    "title": "HKVO2MaxTestType.maxExercise | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkvo2maxtesttype/maxexercise",
    "html": "See Also\nTest Types\ncase predictionSubMaxExercise\nA calculation that estimates VO2 max rate based on low-intensity exercise.\ncase predictionNonExercise\nA calculation that estimates VO2 max rate without any exercise."
  },
  {
    "title": "init(rawValue:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkfhirrelease/3552442-init",
    "html": "Parameters\nrawValue\n\nThe raw string value."
  },
  {
    "title": "HKVO2MaxTestType.predictionSubMaxExercise | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkvo2maxtesttype/predictionsubmaxexercise",
    "html": "See Also\nTest Types\ncase maxExercise\nA test that measures VO2 max rate by monitoring exercise to the user’s physical limit.\ncase predictionNonExercise\nA calculation that estimates VO2 max rate without any exercise."
  },
  {
    "title": "prefix(while:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkelectrocardiogramquerydescriptor/results/3916354-prefix",
    "html": "Parameters\npredicate\n\nA closure that takes an element as a parameter and returns a Boolean value indicating whether the element should be included in the modified sequence.\n\nReturn Value\n\nAn asynchronous sequence of the initial, consecutive elements that satisfy predicate.\n\nDiscussion\n\nUse prefix(while:) to produce values while elements from the base sequence meet a condition you specify. The modified sequence ends when the predicate closure returns false.\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 10. The prefix(while:) method causes the modified sequence to pass along values so long as they aren’t divisible by 2 and 3. Upon reaching 6, the sequence ends:\n\nlet stream = Counter(howHigh: 10)\n    .prefix { $0 % 2 != 0 || $0 % 3 != 0 }\nfor try await number in stream {\n    print(number, terminator: \" \")\n}\n// Prints \"1 2 3 4 5 \"\n\nSee Also\nSelecting Elements\nfunc prefix(Int) -> AsyncPrefixSequence<HKElectrocardiogramQueryDescriptor.Results>\nReturns an asynchronous sequence, up to the specified maximum length, containing the initial elements of the base asynchronous sequence."
  },
  {
    "title": "HKWeatherCondition.partlyCloudy | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkweathercondition/partlycloudy",
    "html": "See Also\nWeather Conditions\ncase none\nThe weather condition is unknown or irrelevant.\ncase clear\nThe weather condition is clear.\ncase fair\nThe weather condition is fair.\ncase mostlyCloudy\nThe weather condition is mostly cloudy.\ncase cloudy\nThe weather condition is cloudy.\ncase foggy\nThe weather condition is foggy.\ncase haze\nThe weather condition is hazy.\ncase windy\nThe weather condition is windy.\ncase blustery\nThe weather condition is blustery.\ncase smoky\nThe weather condition is smoky.\ncase dust\nThe weather condition is dust.\ncase snow\nThe weather condition is snow.\ncase hail\nThe weather condition is hail.\ncase sleet\nThe weather condition is sleet.\ncase freezingDrizzle\nThe weather condition is freezing drizzle.\ncase freezingRain\nThe weather condition is freezing rain.\ncase mixedRainAndHail\nThe weather condition is mixed rain and hail.\ncase mixedRainAndSnow\nThe weather condition is mixed rain and snow.\ncase mixedRainAndSleet\nThe weather condition is mixed rain and sleet.\ncase mixedSnowAndSleet\nThe weather condition is mixed snow and sleet.\ncase drizzle\nThe weather condition is drizzle.\ncase scatteredShowers\nThe weather condition is scattered showers.\ncase showers\nThe weather condition is showers.\ncase thunderstorms\nThe weather condition is thunderstorms.\ncase tropicalStorm\nThe weather condition is tropical storm.\ncase hurricane\nThe weather condition is hurricane.\ncase tornado\nThe weather condition is tornado."
  },
  {
    "title": "HKWeatherCondition.foggy | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkweathercondition/foggy",
    "html": "See Also\nWeather Conditions\ncase none\nThe weather condition is unknown or irrelevant.\ncase clear\nThe weather condition is clear.\ncase fair\nThe weather condition is fair.\ncase partlyCloudy\nThe weather condition is partly cloudy.\ncase mostlyCloudy\nThe weather condition is mostly cloudy.\ncase cloudy\nThe weather condition is cloudy.\ncase haze\nThe weather condition is hazy.\ncase windy\nThe weather condition is windy.\ncase blustery\nThe weather condition is blustery.\ncase smoky\nThe weather condition is smoky.\ncase dust\nThe weather condition is dust.\ncase snow\nThe weather condition is snow.\ncase hail\nThe weather condition is hail.\ncase sleet\nThe weather condition is sleet.\ncase freezingDrizzle\nThe weather condition is freezing drizzle.\ncase freezingRain\nThe weather condition is freezing rain.\ncase mixedRainAndHail\nThe weather condition is mixed rain and hail.\ncase mixedRainAndSnow\nThe weather condition is mixed rain and snow.\ncase mixedRainAndSleet\nThe weather condition is mixed rain and sleet.\ncase mixedSnowAndSleet\nThe weather condition is mixed snow and sleet.\ncase drizzle\nThe weather condition is drizzle.\ncase scatteredShowers\nThe weather condition is scattered showers.\ncase showers\nThe weather condition is showers.\ncase thunderstorms\nThe weather condition is thunderstorms.\ncase tropicalStorm\nThe weather condition is tropical storm.\ncase hurricane\nThe weather condition is hurricane.\ncase tornado\nThe weather condition is tornado."
  },
  {
    "title": "HKWeatherCondition.mostlyCloudy | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkweathercondition/mostlycloudy",
    "html": "See Also\nWeather Conditions\ncase none\nThe weather condition is unknown or irrelevant.\ncase clear\nThe weather condition is clear.\ncase fair\nThe weather condition is fair.\ncase partlyCloudy\nThe weather condition is partly cloudy.\ncase cloudy\nThe weather condition is cloudy.\ncase foggy\nThe weather condition is foggy.\ncase haze\nThe weather condition is hazy.\ncase windy\nThe weather condition is windy.\ncase blustery\nThe weather condition is blustery.\ncase smoky\nThe weather condition is smoky.\ncase dust\nThe weather condition is dust.\ncase snow\nThe weather condition is snow.\ncase hail\nThe weather condition is hail.\ncase sleet\nThe weather condition is sleet.\ncase freezingDrizzle\nThe weather condition is freezing drizzle.\ncase freezingRain\nThe weather condition is freezing rain.\ncase mixedRainAndHail\nThe weather condition is mixed rain and hail.\ncase mixedRainAndSnow\nThe weather condition is mixed rain and snow.\ncase mixedRainAndSleet\nThe weather condition is mixed rain and sleet.\ncase mixedSnowAndSleet\nThe weather condition is mixed snow and sleet.\ncase drizzle\nThe weather condition is drizzle.\ncase scatteredShowers\nThe weather condition is scattered showers.\ncase showers\nThe weather condition is showers.\ncase thunderstorms\nThe weather condition is thunderstorms.\ncase tropicalStorm\nThe weather condition is tropical storm.\ncase hurricane\nThe weather condition is hurricane.\ncase tornado\nThe weather condition is tornado."
  },
  {
    "title": "HKWeatherCondition.cloudy | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkweathercondition/cloudy",
    "html": "See Also\nWeather Conditions\ncase none\nThe weather condition is unknown or irrelevant.\ncase clear\nThe weather condition is clear.\ncase fair\nThe weather condition is fair.\ncase partlyCloudy\nThe weather condition is partly cloudy.\ncase mostlyCloudy\nThe weather condition is mostly cloudy.\ncase foggy\nThe weather condition is foggy.\ncase haze\nThe weather condition is hazy.\ncase windy\nThe weather condition is windy.\ncase blustery\nThe weather condition is blustery.\ncase smoky\nThe weather condition is smoky.\ncase dust\nThe weather condition is dust.\ncase snow\nThe weather condition is snow.\ncase hail\nThe weather condition is hail.\ncase sleet\nThe weather condition is sleet.\ncase freezingDrizzle\nThe weather condition is freezing drizzle.\ncase freezingRain\nThe weather condition is freezing rain.\ncase mixedRainAndHail\nThe weather condition is mixed rain and hail.\ncase mixedRainAndSnow\nThe weather condition is mixed rain and snow.\ncase mixedRainAndSleet\nThe weather condition is mixed rain and sleet.\ncase mixedSnowAndSleet\nThe weather condition is mixed snow and sleet.\ncase drizzle\nThe weather condition is drizzle.\ncase scatteredShowers\nThe weather condition is scattered showers.\ncase showers\nThe weather condition is showers.\ncase thunderstorms\nThe weather condition is thunderstorms.\ncase tropicalStorm\nThe weather condition is tropical storm.\ncase hurricane\nThe weather condition is hurricane.\ncase tornado\nThe weather condition is tornado."
  },
  {
    "title": "HKWeatherCondition.windy | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkweathercondition/windy",
    "html": "See Also\nWeather Conditions\ncase none\nThe weather condition is unknown or irrelevant.\ncase clear\nThe weather condition is clear.\ncase fair\nThe weather condition is fair.\ncase partlyCloudy\nThe weather condition is partly cloudy.\ncase mostlyCloudy\nThe weather condition is mostly cloudy.\ncase cloudy\nThe weather condition is cloudy.\ncase foggy\nThe weather condition is foggy.\ncase haze\nThe weather condition is hazy.\ncase blustery\nThe weather condition is blustery.\ncase smoky\nThe weather condition is smoky.\ncase dust\nThe weather condition is dust.\ncase snow\nThe weather condition is snow.\ncase hail\nThe weather condition is hail.\ncase sleet\nThe weather condition is sleet.\ncase freezingDrizzle\nThe weather condition is freezing drizzle.\ncase freezingRain\nThe weather condition is freezing rain.\ncase mixedRainAndHail\nThe weather condition is mixed rain and hail.\ncase mixedRainAndSnow\nThe weather condition is mixed rain and snow.\ncase mixedRainAndSleet\nThe weather condition is mixed rain and sleet.\ncase mixedSnowAndSleet\nThe weather condition is mixed snow and sleet.\ncase drizzle\nThe weather condition is drizzle.\ncase scatteredShowers\nThe weather condition is scattered showers.\ncase showers\nThe weather condition is showers.\ncase thunderstorms\nThe weather condition is thunderstorms.\ncase tropicalStorm\nThe weather condition is tropical storm.\ncase hurricane\nThe weather condition is hurricane.\ncase tornado\nThe weather condition is tornado."
  },
  {
    "title": "HKWeatherCondition.smoky | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkweathercondition/smoky",
    "html": "See Also\nWeather Conditions\ncase none\nThe weather condition is unknown or irrelevant.\ncase clear\nThe weather condition is clear.\ncase fair\nThe weather condition is fair.\ncase partlyCloudy\nThe weather condition is partly cloudy.\ncase mostlyCloudy\nThe weather condition is mostly cloudy.\ncase cloudy\nThe weather condition is cloudy.\ncase foggy\nThe weather condition is foggy.\ncase haze\nThe weather condition is hazy.\ncase windy\nThe weather condition is windy.\ncase blustery\nThe weather condition is blustery.\ncase dust\nThe weather condition is dust.\ncase snow\nThe weather condition is snow.\ncase hail\nThe weather condition is hail.\ncase sleet\nThe weather condition is sleet.\ncase freezingDrizzle\nThe weather condition is freezing drizzle.\ncase freezingRain\nThe weather condition is freezing rain.\ncase mixedRainAndHail\nThe weather condition is mixed rain and hail.\ncase mixedRainAndSnow\nThe weather condition is mixed rain and snow.\ncase mixedRainAndSleet\nThe weather condition is mixed rain and sleet.\ncase mixedSnowAndSleet\nThe weather condition is mixed snow and sleet.\ncase drizzle\nThe weather condition is drizzle.\ncase scatteredShowers\nThe weather condition is scattered showers.\ncase showers\nThe weather condition is showers.\ncase thunderstorms\nThe weather condition is thunderstorms.\ncase tropicalStorm\nThe weather condition is tropical storm.\ncase hurricane\nThe weather condition is hurricane.\ncase tornado\nThe weather condition is tornado."
  },
  {
    "title": "HKWeatherCondition.fair | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkweathercondition/fair",
    "html": "See Also\nWeather Conditions\ncase none\nThe weather condition is unknown or irrelevant.\ncase clear\nThe weather condition is clear.\ncase partlyCloudy\nThe weather condition is partly cloudy.\ncase mostlyCloudy\nThe weather condition is mostly cloudy.\ncase cloudy\nThe weather condition is cloudy.\ncase foggy\nThe weather condition is foggy.\ncase haze\nThe weather condition is hazy.\ncase windy\nThe weather condition is windy.\ncase blustery\nThe weather condition is blustery.\ncase smoky\nThe weather condition is smoky.\ncase dust\nThe weather condition is dust.\ncase snow\nThe weather condition is snow.\ncase hail\nThe weather condition is hail.\ncase sleet\nThe weather condition is sleet.\ncase freezingDrizzle\nThe weather condition is freezing drizzle.\ncase freezingRain\nThe weather condition is freezing rain.\ncase mixedRainAndHail\nThe weather condition is mixed rain and hail.\ncase mixedRainAndSnow\nThe weather condition is mixed rain and snow.\ncase mixedRainAndSleet\nThe weather condition is mixed rain and sleet.\ncase mixedSnowAndSleet\nThe weather condition is mixed snow and sleet.\ncase drizzle\nThe weather condition is drizzle.\ncase scatteredShowers\nThe weather condition is scattered showers.\ncase showers\nThe weather condition is showers.\ncase thunderstorms\nThe weather condition is thunderstorms.\ncase tropicalStorm\nThe weather condition is tropical storm.\ncase hurricane\nThe weather condition is hurricane.\ncase tornado\nThe weather condition is tornado."
  },
  {
    "title": "HKWeatherCondition.clear | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkweathercondition/clear",
    "html": "See Also\nWeather Conditions\ncase none\nThe weather condition is unknown or irrelevant.\ncase fair\nThe weather condition is fair.\ncase partlyCloudy\nThe weather condition is partly cloudy.\ncase mostlyCloudy\nThe weather condition is mostly cloudy.\ncase cloudy\nThe weather condition is cloudy.\ncase foggy\nThe weather condition is foggy.\ncase haze\nThe weather condition is hazy.\ncase windy\nThe weather condition is windy.\ncase blustery\nThe weather condition is blustery.\ncase smoky\nThe weather condition is smoky.\ncase dust\nThe weather condition is dust.\ncase snow\nThe weather condition is snow.\ncase hail\nThe weather condition is hail.\ncase sleet\nThe weather condition is sleet.\ncase freezingDrizzle\nThe weather condition is freezing drizzle.\ncase freezingRain\nThe weather condition is freezing rain.\ncase mixedRainAndHail\nThe weather condition is mixed rain and hail.\ncase mixedRainAndSnow\nThe weather condition is mixed rain and snow.\ncase mixedRainAndSleet\nThe weather condition is mixed rain and sleet.\ncase mixedSnowAndSleet\nThe weather condition is mixed snow and sleet.\ncase drizzle\nThe weather condition is drizzle.\ncase scatteredShowers\nThe weather condition is scattered showers.\ncase showers\nThe weather condition is showers.\ncase thunderstorms\nThe weather condition is thunderstorms.\ncase tropicalStorm\nThe weather condition is tropical storm.\ncase hurricane\nThe weather condition is hurricane.\ncase tornado\nThe weather condition is tornado."
  },
  {
    "title": "HKWeatherCondition.none | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkweathercondition/none",
    "html": "See Also\nWeather Conditions\ncase clear\nThe weather condition is clear.\ncase fair\nThe weather condition is fair.\ncase partlyCloudy\nThe weather condition is partly cloudy.\ncase mostlyCloudy\nThe weather condition is mostly cloudy.\ncase cloudy\nThe weather condition is cloudy.\ncase foggy\nThe weather condition is foggy.\ncase haze\nThe weather condition is hazy.\ncase windy\nThe weather condition is windy.\ncase blustery\nThe weather condition is blustery.\ncase smoky\nThe weather condition is smoky.\ncase dust\nThe weather condition is dust.\ncase snow\nThe weather condition is snow.\ncase hail\nThe weather condition is hail.\ncase sleet\nThe weather condition is sleet.\ncase freezingDrizzle\nThe weather condition is freezing drizzle.\ncase freezingRain\nThe weather condition is freezing rain.\ncase mixedRainAndHail\nThe weather condition is mixed rain and hail.\ncase mixedRainAndSnow\nThe weather condition is mixed rain and snow.\ncase mixedRainAndSleet\nThe weather condition is mixed rain and sleet.\ncase mixedSnowAndSleet\nThe weather condition is mixed snow and sleet.\ncase drizzle\nThe weather condition is drizzle.\ncase scatteredShowers\nThe weather condition is scattered showers.\ncase showers\nThe weather condition is showers.\ncase thunderstorms\nThe weather condition is thunderstorms.\ncase tropicalStorm\nThe weather condition is tropical storm.\ncase hurricane\nThe weather condition is hurricane.\ncase tornado\nThe weather condition is tornado."
  },
  {
    "title": "HKActivitySummaryQueryDescriptor.Results.Iterator.Element | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkactivitysummaryquerydescriptor/results/iterator/element",
    "html": "See Also\nIterating Over Results\nfunc next() -> HKActivitySummaryQueryDescriptor.Results.Element?\nAsynchronously waits for the next element and returns it."
  },
  {
    "title": "next() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkactivitysummaryquerydescriptor/results/iterator/3916209-next",
    "html": "Discussion\n\nA long-running query that the HKActivitySummaryQueryDescriptor creates continues to monitor the HealthKit store until you cancel the query. After you cancel the query, the next() method returns nil.\n\nRelationships\nFrom Protocol\nAsyncIteratorProtocol\nSee Also\nIterating Over Results\ntypealias HKActivitySummaryQueryDescriptor.Results.Iterator.Element\nThe type for results that the active summary iterator returns."
  },
  {
    "title": "HKHeartRateRecoveryTestType.predictionSubMaxExercise | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkheartraterecoverytesttype/predictionsubmaxexercise",
    "html": "Discussion\n\nIn this test, a person performs lower-intensity exercise, staying below their physical limit. The test then estimates their actual heart rate recovery based on the difference between their exercising heart rate, and the rate of recovery after the exercise ends.\n\nSee Also\nHeart-rate recovery tests\ncase maxExercise\nMeasures a person’s actual heart-rate recovery.\ncase predictionNonExercise\nA test that estimates a person’s heart-rate recovery without using exercise."
  },
  {
    "title": "HKUserMotionContext.stationary | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkusermotioncontext/stationary",
    "html": "See Also\nMotion contexts\ncase notSet\nThe person’s motion was not specified.\ncase active\nThe person was active during the sample."
  },
  {
    "title": "HKUserMotionContext.notSet | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkusermotioncontext/notset",
    "html": "See Also\nMotion contexts\ncase active\nThe person was active during the sample.\ncase stationary\nThe person was stationary during the sample."
  },
  {
    "title": "HKUserMotionContext.active | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkusermotioncontext/active",
    "html": "See Also\nMotion contexts\ncase notSet\nThe person’s motion was not specified.\ncase stationary\nThe person was stationary during the sample."
  },
  {
    "title": "HKWaterSalinity | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkwatersalinity",
    "html": "Topics\nEnumeration Cases\ncase freshWater\ncase saltWater\nRelationships\nConforms To\nSendable"
  },
  {
    "title": "HKActivityMoveMode.appleMoveTime | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkactivitymovemode/applemovetime",
    "html": "Discussion\n\nMove time measures every full minute where the watch detects the user actively moving. Apple Watch uses the accelerometer and gyroscopes to detect activities that involve full-body movements, like walking, running, or playing in the playground.\n\nFor younger users, the Activity app’s Move ring (and HealthKit’s related activity summary) can track move time instead of active energy burned:\n\nHealthKit automatically tracks move time for any users under 13 years old.\n\nUsers 13 to 18 years old can choose whether to track move time or active calorie burn.\n\nAll users over 18 years old track active calorie burn.\n\nSee Also\nMove Modes\ncase activeEnergy\nA value that indicates the Move ring measures active energy burned."
  },
  {
    "title": "HKBloodGlucoseMealTime.preprandial | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkbloodglucosemealtime/preprandial",
    "html": "See Also\nRelative Meal Times\ncase postprandial\nA blood glucose sample taken just after eating a meal."
  },
  {
    "title": "HKBloodGlucoseMealTime.postprandial | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkbloodglucosemealtime/postprandial",
    "html": "See Also\nRelative Meal Times\ncase preprandial\nA blood glucose sample taken just before eating a meal."
  },
  {
    "title": "HKSwimmingStrokeStyle | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkswimmingstrokestyle",
    "html": "Topics\nStrokes\ncase backstroke\nThe user swam the backstroke.\ncase breaststroke\nThe user swam the breaststroke.\ncase butterfly\nThe user swam the butterfly stroke.\ncase freestyle\nThe user swam the freestyle stroke.\ncase mixed\nThe user swam a mixture of strokes.\ncase kickboard\nThe user swam using a kickboard.\ncase unknown\nThe user’s stroke could not be determined.\nRelationships\nConforms To\nSendable"
  },
  {
    "title": "HKPhysicalEffortEstimationType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkphysicaleffortestimationtype",
    "html": "Topics\nEnumeration Cases\ncase activityLookup\ncase deviceSensed\nRelationships\nConforms To\nSendable"
  },
  {
    "title": "HKActivityMoveMode.activeEnergy | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkactivitymovemode/activeenergy",
    "html": "See Also\nMove Modes\ncase appleMoveTime\nA value that indicates the Activity app’s Move ring measures Apple Move Time."
  },
  {
    "title": "!=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkheartbeatseriesquerydescriptor/heartbeat/3916365",
    "html": "Parameters\nlhs\n\nThe first heartbeat to compare.\n\nrhs\n\nThe second heartbeat to compare.\n\nSee Also\nComparing Heartbeats\nfunc hash(into: inout Hasher)\nHashes the essential components of the heartbeat by passing them into the given hash function.\nvar hashValue: Int\nThe hashed value for the heartbeat.\nstatic func == (HKHeartbeatSeriesQueryDescriptor.Heartbeat, HKHeartbeatSeriesQueryDescriptor.Heartbeat) -> Bool\nIndicates whether two heartbeats are equal."
  },
  {
    "title": "Receiving Downhill Skiing and Snowboarding Data | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkoutactivitytype/snowboarding/receiving_downhill_skiing_and_snowboarding_data",
    "html": "Overview\n\nOn Apple Watch Series 3, the system automatically generates distance samples, segments, and pause and resume events during HKWorkoutActivityType.downhillSkiing and HKWorkoutActivityType.snowboarding workout sessions. Monitor these samples to receive additional information about individual runs. You can then display this information on the watch during the session.\n\nReceiving Distance Samples\n\nThe system generates a distanceDownhillSnowSports sample at the end of each run. Use an HKAnchoredObjectQuery query to receive and process these samples.\n\nlet updateHandler: ((HKAnchoredObjectQuery, [HKSample]?, [HKDeletedObject]?, HKQueryAnchor?, Error?) -> Void) = { [unowned self] (query, samplesOrNil, deletedObjectsOrNil, newAnchorOrNil, errorOrNil) in\n    \n    // Check for errors.\n    if let error = errorOrNil {\n        // Handle the error here.\n        print(\"*** An error occurred: \\(error.localizedDescription) ***\")\n        return\n    }\n    \n    // Process the samples.\n    if let samples = samplesOrNil  {\n        // Do something with the distance samples here.\n        print(\"Samples: \\(samples)\")\n    }\n    \n    // Update the anchor.\n    if let newAnchor = newAnchorOrNil {\n        self.myCurrentAnchor = newAnchor\n    }\n}\n// Get the downhill skiing type.\nguard let downhillSnowSport = HKObjectType.quantityType(forIdentifier: HKQuantityTypeIdentifier.distanceDownhillSnowSports) else {\n    fatalError(\"*** Unable to get the downhill snow sport type ***\")\n}\n// Only find samples that start after the workout began.\nlet datePredicate = NSPredicate(format: \"%K > %@\", HKPredicateKeyPathStartDate, workoutStartDate as NSDate)\nlet distanceQuery = HKAnchoredObjectQuery(type: downhillSnowSport,\n                                          predicate: datePredicate,\n                                          anchor: myCurrentAnchor,\n                                          limit: HKObjectQueryNoLimit,\n                                          resultsHandler: updateHandler)\ndistanceQuery.updateHandler = updateHandler\n// Run the query.\nstore.execute(distanceQuery)\n\nReceiving Segments\n\nThe system generates a segment event for each run. This event is passed to your app using the session delegate’s workoutSession(_:didGenerate:) method.\n\nfunc workoutSession(_ workoutSession: HKWorkoutSession, didGenerate event: HKWorkoutEvent) {\n    \n    // Check to see if the event is a segment.\n    if event.type == .segment {\n        \n        // Get the segment's start and end times.\n        let startTime = event.dateInterval.start\n        let endTime = event.dateInterval.end\n        \n        // Get the segment's metadata.\n        let averageSpeed = event.metadata?[HKMetadataKeyAverageSpeed]\n        let maxSpeed = event.metadata?[HKMetadataKeyMaximumSpeed]\n        let alpineSlope = event.metadata?[HKMetadataKeyAlpineSlopeGrade]\n        let elevationAscended = event.metadata?[HKMetadataKeyElevationAscended]\n        let elevationDescended = event.metadata?[HKMetadataKeyElevationDescended]\n        \n        // Do something with the segment data here...\n        \n    }\n    \n    // Also handle any other event types...\n}\n\n\n\n\nEach autogenerated segment has a metadata dictionary with the following keys and values:\n\nHKMetadataKeyAverageSpeed\n\nHKMetadataKeyMaximumSpeed\n\nHKMetadataKeyAlpineSlopeGrade\n\nHKMetadataKeyElevationDescended\n\nHKMetadataKeyElevationAscended\n\nHandling Pause and Resume Events\n\nThe system automatically generates HKWorkoutEventType.motionPaused and HKWorkoutEventType.motionResumed events for HKWorkoutActivityType.downhillSkiing and HKWorkoutActivityType.snowboarding sessions:\n\nHKWorkoutEventType.motionPaused events are generated at the end of each run.\n\nHKWorkoutEventType.motionResumed events are generated at the beginning of the next run.\n\nThese events are similar to the motion events generated for HKWorkoutActivityType.running workout sessions; however, unlike HKWorkoutActivityType.running sessions, HKWorkoutActivityType.downhillSkiing and HKWorkoutActivityType.snowboarding sessions do not continue to run in the background while paused. As a result, you should use these events to pause and resume any other long-running tasks your app is performing (for example, location tracking)."
  },
  {
    "title": "HKWorkoutSwimmingLocationType.pool | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkoutswimminglocationtype/pool",
    "html": "See Also\nSwimming Locations\ncase openWater\nThe user swam in open water like a lake or ocean.\ncase unknown\nThe swimming location could not be determined."
  },
  {
    "title": "HKCyclingFunctionalThresholdPowerTestType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkcyclingfunctionalthresholdpowertesttype",
    "html": "Topics\nEnumeration Cases\ncase maxExercise20Minute\ncase maxExercise60Minute\ncase predictionExercise\ncase rampTest\nRelationships\nConforms To\nSendable"
  },
  {
    "title": "HKWorkoutSwimmingLocationType.unknown | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkoutswimminglocationtype/unknown",
    "html": "See Also\nSwimming Locations\ncase openWater\nThe user swam in open water like a lake or ocean.\ncase pool\nThe user swam in a pool."
  },
  {
    "title": "HKHeartRateSensorLocation.finger | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkheartratesensorlocation/finger",
    "html": "See Also\nLocations\ncase other\nThe heart rate sensor’s location is not otherwise on this list.\ncase chest\nThe heart rate sensor is located on the user’s chest.\ncase wrist\nThe heart rate sensor is located on the user’s wrist.\ncase hand\nThe heart rate sensor is located on the user’s hand.\ncase earLobe\nThe heart rate sensor is located on the user’s earlobe.\ncase foot\nThe heart rate sensor is located on the user’s foot."
  },
  {
    "title": "HKHeartRateSensorLocation.wrist | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkheartratesensorlocation/wrist",
    "html": "See Also\nLocations\ncase other\nThe heart rate sensor’s location is not otherwise on this list.\ncase chest\nThe heart rate sensor is located on the user’s chest.\ncase finger\nThe heart rate sensor is located on the user’s finger.\ncase hand\nThe heart rate sensor is located on the user’s hand.\ncase earLobe\nThe heart rate sensor is located on the user’s earlobe.\ncase foot\nThe heart rate sensor is located on the user’s foot."
  },
  {
    "title": "HKHeartRateSensorLocation.foot | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkheartratesensorlocation/foot",
    "html": "See Also\nLocations\ncase other\nThe heart rate sensor’s location is not otherwise on this list.\ncase chest\nThe heart rate sensor is located on the user’s chest.\ncase wrist\nThe heart rate sensor is located on the user’s wrist.\ncase finger\nThe heart rate sensor is located on the user’s finger.\ncase hand\nThe heart rate sensor is located on the user’s hand.\ncase earLobe\nThe heart rate sensor is located on the user’s earlobe."
  },
  {
    "title": "HKBodyTemperatureSensorLocation.finger | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkbodytemperaturesensorlocation/finger",
    "html": "See Also\nLocations\ncase other\nThe temperature was taken at a location that is not otherwise in this list.\ncase armpit\nThe temperature was taken in the armpit.\ncase body\nThe temperature was taken on the body.\ncase ear\nThe temperature was taken in the ear.\ncase gastroIntestinal\nThe temperature was taken inside the gastrointestinal tract.\ncase mouth\nThe temperature was taken in the mouth.\ncase rectum\nThe temperature was taken in the rectum.\ncase toe\nThe temperature was taken at the toe.\ncase earDrum\nThe temperature was taken on the eardrum.\ncase temporalArtery\nThe temperature was taken at the temporal artery.\ncase forehead\nThe temperature was taken on the forehead."
  },
  {
    "title": "HKElectrocardiogram.Classification.inconclusiveHighHeartRate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkelectrocardiogram/classification/inconclusivehighheartrate",
    "html": "Discussion\n\nThe HKAppleECGAlgorithmVersion.version1 algorithm can categorize heart rates below 120 BPM. HKAppleECGAlgorithmVersion.version2 can categorize heart rates up to 150 BPM.\n\nSee Also\nClassifications\ncase sinusRhythm\nThe sample exhibits no signs of atrial fibrillation.\ncase atrialFibrillation\nThe sample exhibits signs of atrial fibrillation.\ncase inconclusiveLowHeartRate\nAn unclassifiable sample caused by a heart rate below 50 bpm.\ncase inconclusivePoorReading\nAn unclassifiable sample caused by an unclear signal.\ncase inconclusiveOther\nAn unclassifiable sample caused by an unknown issue.\ncase unrecognized\nA sample classification that this version of HealthKit doesn’t recognize.\ncase notSet\nA sample that doesn’t have an assigned classification."
  },
  {
    "title": "allSatisfy(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquantityseriessamplequerydescriptor/results/3916480-allsatisfy",
    "html": "Parameters\npredicate\n\nA closure that takes an element of the asynchronous sequence as its argument and returns a Boolean value that indicates whether the passed element satisfies a condition.\n\nReturn Value\n\ntrue if the sequence contains only elements that satisfy predicate; otherwise, false.\n\nDiscussion\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 10. The allSatisfy(_:) method checks to see whether all elements produced by the sequence are less than 10.\n\nlet allLessThanTen = await Counter(howHigh: 10)\n    .allSatisfy { $0 < 10 }\nprint(allLessThanTen)\n// Prints \"false\"\n\n\nThe predicate executes each time the asynchronous sequence produces an element, until either the predicate returns false or the sequence ends.\n\nIf the asynchronous sequence is empty, this method returns true.\n\nSee Also\nFinding Elements\nfunc contains(HKQuantitySeriesSampleQueryDescriptor.Result) -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains the given element.\nfunc contains(where: (HKQuantitySeriesSampleQueryDescriptor.Result) -> Bool) -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains an element that satisfies the given predicate.\nfunc first(where: (HKQuantitySeriesSampleQueryDescriptor.Result) -> Bool) -> HKQuantitySeriesSampleQueryDescriptor.Result?\nReturns the first element of the sequence that satisfies the given predicate.\nfunc max(by: (HKQuantitySeriesSampleQueryDescriptor.Result, HKQuantitySeriesSampleQueryDescriptor.Result) -> Bool) -> HKQuantitySeriesSampleQueryDescriptor.Result?\nReturns the maximum element in the asynchronous sequence, using the given predicate as the comparison between elements.\nfunc min(by: (HKQuantitySeriesSampleQueryDescriptor.Result, HKQuantitySeriesSampleQueryDescriptor.Result) -> Bool) -> HKQuantitySeriesSampleQueryDescriptor.Result?\nReturns the minimum element in the asynchronous sequence, using the given predicate as the comparison between elements."
  },
  {
    "title": "HKElectrocardiogram.Lead.appleWatchSimilarToLeadI | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkelectrocardiogram/lead/applewatchsimilartoleadi",
    "html": "Discussion\n\nThe Apple Watch’s heart rate sensor generates and analyzes ECG data similar to a Lead I ECG."
  },
  {
    "title": "max(by:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkoutroutequerydescriptor/results/3916659-max",
    "html": "Parameters\nareInIncreasingOrder\n\nA predicate that returns true if its first argument should be ordered before its second argument; otherwise, false.\n\nReturn Value\n\nThe sequence’s minimum element, according to areInIncreasingOrder. If the sequence has no elements, returns nil.\n\nDiscussion\n\nUse this method when the asynchronous sequence’s values don’t conform to Comparable, or when you want to apply a custom ordering to the sequence.\n\nThe predicate must be a strict weak ordering over the elements. That is, for any elements a, b, and c, the following conditions must hold:\n\nareInIncreasingOrder(a, a) is always false. (Irreflexivity)\n\nIf areInIncreasingOrder(a, b) and areInIncreasingOrder(b, c) are both true, then areInIncreasingOrder(a, c) is also true. (Transitive comparability)\n\nTwo elements are incomparable if neither is ordered before the other according to the predicate. If a and b are incomparable, and b and c are incomparable, then a and c are also incomparable. (Transitive incomparability)\n\nThe following example uses an enumeration of playing cards ranks, Rank, which ranges from ace (low) to king (high). An asynchronous sequence called RankCounter produces all elements of the array. The predicate provided to the max(by:) method sorts ranks based on their rawValue:\n\nenum Rank: Int {\n    case ace = 1, two, three, four, five, six, seven, eight, nine, ten, jack, queen, king\n}\n\n\nlet max = await RankCounter()\n    .max { $0.rawValue < $1.rawValue }\nprint(max ?? \"none\")\n// Prints \"king\"\n\nSee Also\nFinding Elements\nfunc contains(CLLocation) -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains the given element.\nfunc contains(where: (CLLocation) -> Bool) -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains an element that satisfies the given predicate.\nfunc allSatisfy((CLLocation) -> Bool) -> Bool\nReturns a Boolean value that indicates whether all elements produced by the asynchronous sequence satisfy the given predicate.\nfunc first(where: (CLLocation) -> Bool) -> CLLocation?\nReturns the first element of the sequence that satisfies the given predicate.\nfunc min(by: (CLLocation, CLLocation) -> Bool) -> CLLocation?\nReturns the minimum element in the asynchronous sequence, using the given predicate as the comparison between elements."
  },
  {
    "title": "timeIntervalSinceStart | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkheartbeatseriesquerydescriptor/heartbeat/3916370-timeintervalsincestart",
    "html": "See Also\nAccessing Heartbeat Data\nlet precededByGap: Bool"
  },
  {
    "title": "precededByGap | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkheartbeatseriesquerydescriptor/heartbeat/3916369-precededbygap",
    "html": "See Also\nAccessing Heartbeat Data\nlet timeIntervalSinceStart: TimeInterval"
  },
  {
    "title": "HKElectrocardiogram.Classification.inconclusiveLowHeartRate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkelectrocardiogram/classification/inconclusivelowheartrate",
    "html": "See Also\nClassifications\ncase sinusRhythm\nThe sample exhibits no signs of atrial fibrillation.\ncase atrialFibrillation\nThe sample exhibits signs of atrial fibrillation.\ncase inconclusiveHighHeartRate\nAn unclassifiable sample caused by a rapid heart rate.\ncase inconclusivePoorReading\nAn unclassifiable sample caused by an unclear signal.\ncase inconclusiveOther\nAn unclassifiable sample caused by an unknown issue.\ncase unrecognized\nA sample classification that this version of HealthKit doesn’t recognize.\ncase notSet\nA sample that doesn’t have an assigned classification."
  },
  {
    "title": "HKElectrocardiogram.SymptomsStatus.none | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkelectrocardiogram/symptomsstatus/none",
    "html": "See Also\nStatus\ncase present\nThe user added a symptom when they recorded the ECG.\ncase notSet"
  },
  {
    "title": "HKElectrocardiogram.Classification.sinusRhythm | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkelectrocardiogram/classification/sinusrhythm",
    "html": "See Also\nClassifications\ncase atrialFibrillation\nThe sample exhibits signs of atrial fibrillation.\ncase inconclusiveHighHeartRate\nAn unclassifiable sample caused by a rapid heart rate.\ncase inconclusiveLowHeartRate\nAn unclassifiable sample caused by a heart rate below 50 bpm.\ncase inconclusivePoorReading\nAn unclassifiable sample caused by an unclear signal.\ncase inconclusiveOther\nAn unclassifiable sample caused by an unknown issue.\ncase unrecognized\nA sample classification that this version of HealthKit doesn’t recognize.\ncase notSet\nA sample that doesn’t have an assigned classification."
  },
  {
    "title": "HKElectrocardiogram.Classification.atrialFibrillation | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkelectrocardiogram/classification/atrialfibrillation",
    "html": "See Also\nClassifications\ncase sinusRhythm\nThe sample exhibits no signs of atrial fibrillation.\ncase inconclusiveHighHeartRate\nAn unclassifiable sample caused by a rapid heart rate.\ncase inconclusiveLowHeartRate\nAn unclassifiable sample caused by a heart rate below 50 bpm.\ncase inconclusivePoorReading\nAn unclassifiable sample caused by an unclear signal.\ncase inconclusiveOther\nAn unclassifiable sample caused by an unknown issue.\ncase unrecognized\nA sample classification that this version of HealthKit doesn’t recognize.\ncase notSet\nA sample that doesn’t have an assigned classification."
  },
  {
    "title": "HKElectrocardiogram.SymptomsStatus.notSet | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkelectrocardiogram/symptomsstatus/notset",
    "html": "See Also\nStatus\ncase none\nThe user didn’t enter a symptom when they recorded the ECG.\ncase present\nThe user added a symptom when they recorded the ECG."
  },
  {
    "title": "HKInsulinDeliveryReason.bolus | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkinsulindeliveryreason/bolus",
    "html": "Discussion\n\nUsers administer bolus insulin to meet episodic needs, such as during a meal or to correct their blood glucose levels.\n\nSee Also\nDelivery Reasons\ncase basal\nInsulin administered to meet the user’s basic metabolic needs."
  },
  {
    "title": "HKWeatherCondition.tropicalStorm | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkweathercondition/tropicalstorm",
    "html": "See Also\nWeather Conditions\ncase none\nThe weather condition is unknown or irrelevant.\ncase clear\nThe weather condition is clear.\ncase fair\nThe weather condition is fair.\ncase partlyCloudy\nThe weather condition is partly cloudy.\ncase mostlyCloudy\nThe weather condition is mostly cloudy.\ncase cloudy\nThe weather condition is cloudy.\ncase foggy\nThe weather condition is foggy.\ncase haze\nThe weather condition is hazy.\ncase windy\nThe weather condition is windy.\ncase blustery\nThe weather condition is blustery.\ncase smoky\nThe weather condition is smoky.\ncase dust\nThe weather condition is dust.\ncase snow\nThe weather condition is snow.\ncase hail\nThe weather condition is hail.\ncase sleet\nThe weather condition is sleet.\ncase freezingDrizzle\nThe weather condition is freezing drizzle.\ncase freezingRain\nThe weather condition is freezing rain.\ncase mixedRainAndHail\nThe weather condition is mixed rain and hail.\ncase mixedRainAndSnow\nThe weather condition is mixed rain and snow.\ncase mixedRainAndSleet\nThe weather condition is mixed rain and sleet.\ncase mixedSnowAndSleet\nThe weather condition is mixed snow and sleet.\ncase drizzle\nThe weather condition is drizzle.\ncase scatteredShowers\nThe weather condition is scattered showers.\ncase showers\nThe weather condition is showers.\ncase thunderstorms\nThe weather condition is thunderstorms.\ncase hurricane\nThe weather condition is hurricane.\ncase tornado\nThe weather condition is tornado."
  },
  {
    "title": "HKWeatherCondition.drizzle | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkweathercondition/drizzle",
    "html": "See Also\nWeather Conditions\ncase none\nThe weather condition is unknown or irrelevant.\ncase clear\nThe weather condition is clear.\ncase fair\nThe weather condition is fair.\ncase partlyCloudy\nThe weather condition is partly cloudy.\ncase mostlyCloudy\nThe weather condition is mostly cloudy.\ncase cloudy\nThe weather condition is cloudy.\ncase foggy\nThe weather condition is foggy.\ncase haze\nThe weather condition is hazy.\ncase windy\nThe weather condition is windy.\ncase blustery\nThe weather condition is blustery.\ncase smoky\nThe weather condition is smoky.\ncase dust\nThe weather condition is dust.\ncase snow\nThe weather condition is snow.\ncase hail\nThe weather condition is hail.\ncase sleet\nThe weather condition is sleet.\ncase freezingDrizzle\nThe weather condition is freezing drizzle.\ncase freezingRain\nThe weather condition is freezing rain.\ncase mixedRainAndHail\nThe weather condition is mixed rain and hail.\ncase mixedRainAndSnow\nThe weather condition is mixed rain and snow.\ncase mixedRainAndSleet\nThe weather condition is mixed rain and sleet.\ncase mixedSnowAndSleet\nThe weather condition is mixed snow and sleet.\ncase scatteredShowers\nThe weather condition is scattered showers.\ncase showers\nThe weather condition is showers.\ncase thunderstorms\nThe weather condition is thunderstorms.\ncase tropicalStorm\nThe weather condition is tropical storm.\ncase hurricane\nThe weather condition is hurricane.\ncase tornado\nThe weather condition is tornado."
  },
  {
    "title": "HKWeatherCondition.dust | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkweathercondition/dust",
    "html": "See Also\nWeather Conditions\ncase none\nThe weather condition is unknown or irrelevant.\ncase clear\nThe weather condition is clear.\ncase fair\nThe weather condition is fair.\ncase partlyCloudy\nThe weather condition is partly cloudy.\ncase mostlyCloudy\nThe weather condition is mostly cloudy.\ncase cloudy\nThe weather condition is cloudy.\ncase foggy\nThe weather condition is foggy.\ncase haze\nThe weather condition is hazy.\ncase windy\nThe weather condition is windy.\ncase blustery\nThe weather condition is blustery.\ncase smoky\nThe weather condition is smoky.\ncase snow\nThe weather condition is snow.\ncase hail\nThe weather condition is hail.\ncase sleet\nThe weather condition is sleet.\ncase freezingDrizzle\nThe weather condition is freezing drizzle.\ncase freezingRain\nThe weather condition is freezing rain.\ncase mixedRainAndHail\nThe weather condition is mixed rain and hail.\ncase mixedRainAndSnow\nThe weather condition is mixed rain and snow.\ncase mixedRainAndSleet\nThe weather condition is mixed rain and sleet.\ncase mixedSnowAndSleet\nThe weather condition is mixed snow and sleet.\ncase drizzle\nThe weather condition is drizzle.\ncase scatteredShowers\nThe weather condition is scattered showers.\ncase showers\nThe weather condition is showers.\ncase thunderstorms\nThe weather condition is thunderstorms.\ncase tropicalStorm\nThe weather condition is tropical storm.\ncase hurricane\nThe weather condition is hurricane.\ncase tornado\nThe weather condition is tornado."
  },
  {
    "title": "map(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkheartbeatseriesquerydescriptor/results/3916402-map",
    "html": "Parameters\ntransform\n\nA mapping closure. transform accepts an element of this sequence as its parameter and returns a transformed value of the same or of a different type. transform can also throw an error, which ends the transformed sequence.\n\nReturn Value\n\nAn asynchronous sequence that contains, in order, the elements produced by the transform closure.\n\nDiscussion\n\nUse the map(_:) method to transform every element received from a base asynchronous sequence. Typically, you use this to transform from one type of element to another.\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 5. The closure provided to the map(_:) method takes each Int and looks up a corresponding String from a romanNumeralDict dictionary. This means the outer for await in loop iterates over String instances instead of the underlying Int values that Counter produces. Also, the dictionary doesn’t provide a key for 4, and the closure throws an error for any key it can’t look up, so receiving this value from Counter ends the modified sequence with an error.\n\nlet romanNumeralDict: [Int: String] =\n    [1: \"I\", 2: \"II\", 3: \"III\", 5: \"V\"]\n\n\ndo {\n    let stream = Counter(howHigh: 5)\n        .map { (value) throws -> String in\n            guard let roman = romanNumeralDict[value] else {\n                throw MyError()\n            }\n            return roman\n        }\n    for try await numeral in stream {\n        print(numeral, terminator: \" \")\n    }\n} catch {\n    print(\"Error: \\(error)\")\n}\n// Prints \"I II III Error: MyError() \"\n\nSee Also\nTransforming a Series\nfunc map<Transformed>((HKHeartbeatSeriesQueryDescriptor.Heartbeat) -> Transformed) -> AsyncMapSequence<HKHeartbeatSeriesQueryDescriptor.Results, Transformed>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements.\nfunc reduce<Result>(Result, (Result, HKHeartbeatSeriesQueryDescriptor.Heartbeat) -> Result) -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure.\nfunc reduce<Result>(into: Result, (inout Result, HKHeartbeatSeriesQueryDescriptor.Heartbeat) -> Void) -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure, given a mutable initial value.\nfunc compactMap<ElementOfResult>((HKHeartbeatSeriesQueryDescriptor.Heartbeat) -> ElementOfResult?) -> AsyncCompactMapSequence<HKHeartbeatSeriesQueryDescriptor.Results, ElementOfResult>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements, omitting results that don’t return a value.\nfunc compactMap<ElementOfResult>((HKHeartbeatSeriesQueryDescriptor.Heartbeat) -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<HKHeartbeatSeriesQueryDescriptor.Results, ElementOfResult>\nCreates an asynchronous sequence that maps an error-throwing closure over the base sequence’s elements, omitting results that don’t return a value.\nfunc flatMap<SegmentOfResult>((HKHeartbeatSeriesQueryDescriptor.Heartbeat) -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<HKHeartbeatSeriesQueryDescriptor.Results, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given error-throwing transformation with each element of this sequence.\nfunc flatMap<SegmentOfResult>((HKHeartbeatSeriesQueryDescriptor.Heartbeat) -> SegmentOfResult) -> AsyncFlatMapSequence<HKHeartbeatSeriesQueryDescriptor.Results, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given transformation with each element of this sequence."
  },
  {
    "title": "reduce(into:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkheartbeatseriesquerydescriptor/results/3916414-reduce",
    "html": "Parameters\ninitialResult\n\nThe value to use as the initial accumulating value. The nextPartialResult closure receives initialResult the first time the closure executes.\n\nnextPartialResult\n\nA closure that combines an accumulating value and an element of the asynchronous sequence into a new accumulating value, for use in the next call of the nextPartialResult closure or returned to the caller.\n\nReturn Value\n\nThe final accumulated value. If the sequence has no elements, the result is initialResult.\n\nDiscussion\n\nUse the reduce(into:_:) method to produce a single value from the elements of an entire sequence. For example, you can use this method on a sequence of numbers to find their sum or product.\n\nThe nextPartialResult closure executes sequentially with an accumulating value initialized to initialResult and each element of the sequence.\n\nPrefer this method over reduce(_:_:) for efficiency when the result is a copy-on-write type, for example an Array or Dictionary.\n\nSee Also\nTransforming a Series\nfunc map<Transformed>((HKHeartbeatSeriesQueryDescriptor.Heartbeat) -> Transformed) -> AsyncMapSequence<HKHeartbeatSeriesQueryDescriptor.Results, Transformed>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements.\nfunc map<Transformed>((HKHeartbeatSeriesQueryDescriptor.Heartbeat) -> Transformed) -> AsyncThrowingMapSequence<HKHeartbeatSeriesQueryDescriptor.Results, Transformed>\nCreates an asynchronous sequence that maps the given error-throwing closure over the asynchronous sequence’s elements.\nfunc reduce<Result>(Result, (Result, HKHeartbeatSeriesQueryDescriptor.Heartbeat) -> Result) -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure.\nfunc compactMap<ElementOfResult>((HKHeartbeatSeriesQueryDescriptor.Heartbeat) -> ElementOfResult?) -> AsyncCompactMapSequence<HKHeartbeatSeriesQueryDescriptor.Results, ElementOfResult>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements, omitting results that don’t return a value.\nfunc compactMap<ElementOfResult>((HKHeartbeatSeriesQueryDescriptor.Heartbeat) -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<HKHeartbeatSeriesQueryDescriptor.Results, ElementOfResult>\nCreates an asynchronous sequence that maps an error-throwing closure over the base sequence’s elements, omitting results that don’t return a value.\nfunc flatMap<SegmentOfResult>((HKHeartbeatSeriesQueryDescriptor.Heartbeat) -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<HKHeartbeatSeriesQueryDescriptor.Results, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given error-throwing transformation with each element of this sequence.\nfunc flatMap<SegmentOfResult>((HKHeartbeatSeriesQueryDescriptor.Heartbeat) -> SegmentOfResult) -> AsyncFlatMapSequence<HKHeartbeatSeriesQueryDescriptor.Results, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given transformation with each element of this sequence."
  },
  {
    "title": "compactMap(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkheartbeatseriesquerydescriptor/results/3916381-compactmap",
    "html": "Parameters\ntransform\n\nAn error-throwing mapping closure. transform accepts an element of this sequence as its parameter and returns a transformed value of the same or of a different type. If transform throws an error, the sequence ends.\n\nReturn Value\n\nAn asynchronous sequence that contains, in order, the non-nil elements produced by the transform closure. The sequence ends either when the base sequence ends or when transform throws an error.\n\nDiscussion\n\nUse the compactMap(_:) method to transform every element received from a base asynchronous sequence, while also discarding any nil results from the closure. Typically, you use this to transform from one type of element to another.\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 5. The closure provided to the compactMap(_:) method takes each Int and looks up a corresponding String from a romanNumeralDict dictionary. Since there is no key for 4, the closure returns nil in this case, which compactMap(_:) omits from the transformed asynchronous sequence. When the value is 5, the closure throws MyError, terminating the sequence.\n\nlet romanNumeralDict: [Int: String] =\n    [1: \"I\", 2: \"II\", 3: \"III\", 5: \"V\"]\n\n\ndo {\n    let stream = Counter(howHigh: 5)\n        .compactMap { (value) throws -> String? in\n            if value == 5 {\n                throw MyError()\n            }\n            return romanNumeralDict[value]\n        }\n    for try await numeral in stream {\n        print(numeral, terminator: \" \")\n    }\n} catch {\n    print(\"Error: \\(error)\")\n}\n// Prints \"I II III Error: MyError() \"\n\nSee Also\nTransforming a Series\nfunc map<Transformed>((HKHeartbeatSeriesQueryDescriptor.Heartbeat) -> Transformed) -> AsyncMapSequence<HKHeartbeatSeriesQueryDescriptor.Results, Transformed>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements.\nfunc map<Transformed>((HKHeartbeatSeriesQueryDescriptor.Heartbeat) -> Transformed) -> AsyncThrowingMapSequence<HKHeartbeatSeriesQueryDescriptor.Results, Transformed>\nCreates an asynchronous sequence that maps the given error-throwing closure over the asynchronous sequence’s elements.\nfunc reduce<Result>(Result, (Result, HKHeartbeatSeriesQueryDescriptor.Heartbeat) -> Result) -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure.\nfunc reduce<Result>(into: Result, (inout Result, HKHeartbeatSeriesQueryDescriptor.Heartbeat) -> Void) -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure, given a mutable initial value.\nfunc compactMap<ElementOfResult>((HKHeartbeatSeriesQueryDescriptor.Heartbeat) -> ElementOfResult?) -> AsyncCompactMapSequence<HKHeartbeatSeriesQueryDescriptor.Results, ElementOfResult>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements, omitting results that don’t return a value.\nfunc flatMap<SegmentOfResult>((HKHeartbeatSeriesQueryDescriptor.Heartbeat) -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<HKHeartbeatSeriesQueryDescriptor.Results, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given error-throwing transformation with each element of this sequence.\nfunc flatMap<SegmentOfResult>((HKHeartbeatSeriesQueryDescriptor.Heartbeat) -> SegmentOfResult) -> AsyncFlatMapSequence<HKHeartbeatSeriesQueryDescriptor.Results, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given transformation with each element of this sequence."
  },
  {
    "title": "flatMap(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkheartbeatseriesquerydescriptor/results/3916395-flatmap",
    "html": "Parameters\ntransform\n\nAn error-throwing mapping closure. transform accepts an element of this sequence as its parameter and returns an AsyncSequence. If transform throws an error, the sequence ends.\n\nReturn Value\n\nA single, flattened asynchronous sequence that contains all elements in all the asynchronous sequences produced by transform. The sequence ends either when the last sequence created from the last element from base sequence ends, or when transform throws an error.\n\nDiscussion\n\nUse this method to receive a single-level asynchronous sequence when your transformation produces an asynchronous sequence for each element.\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 5. The transforming closure takes the received Int and returns a new Counter that counts that high. For example, when the transform receives 3 from the base sequence, it creates a new Counter that produces the values 1, 2, and 3. The flatMap(_:) method “flattens” the resulting sequence-of-sequences into a single AsyncSequence. However, when the closure receives 4, it throws an error, terminating the sequence.\n\ndo {\n    let stream = Counter(howHigh: 5)\n        .flatMap { (value) -> Counter in\n            if value == 4 {\n                throw MyError()\n            }\n            return Counter(howHigh: value)\n        }\n    for try await number in stream {\n        print(number, terminator: \" \")\n    }\n} catch {\n    print(error)\n}\n// Prints \"1 1 2 1 2 3 MyError() \"\n\nSee Also\nTransforming a Series\nfunc map<Transformed>((HKHeartbeatSeriesQueryDescriptor.Heartbeat) -> Transformed) -> AsyncMapSequence<HKHeartbeatSeriesQueryDescriptor.Results, Transformed>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements.\nfunc map<Transformed>((HKHeartbeatSeriesQueryDescriptor.Heartbeat) -> Transformed) -> AsyncThrowingMapSequence<HKHeartbeatSeriesQueryDescriptor.Results, Transformed>\nCreates an asynchronous sequence that maps the given error-throwing closure over the asynchronous sequence’s elements.\nfunc reduce<Result>(Result, (Result, HKHeartbeatSeriesQueryDescriptor.Heartbeat) -> Result) -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure.\nfunc reduce<Result>(into: Result, (inout Result, HKHeartbeatSeriesQueryDescriptor.Heartbeat) -> Void) -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure, given a mutable initial value.\nfunc compactMap<ElementOfResult>((HKHeartbeatSeriesQueryDescriptor.Heartbeat) -> ElementOfResult?) -> AsyncCompactMapSequence<HKHeartbeatSeriesQueryDescriptor.Results, ElementOfResult>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements, omitting results that don’t return a value.\nfunc compactMap<ElementOfResult>((HKHeartbeatSeriesQueryDescriptor.Heartbeat) -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<HKHeartbeatSeriesQueryDescriptor.Results, ElementOfResult>\nCreates an asynchronous sequence that maps an error-throwing closure over the base sequence’s elements, omitting results that don’t return a value.\nfunc flatMap<SegmentOfResult>((HKHeartbeatSeriesQueryDescriptor.Heartbeat) -> SegmentOfResult) -> AsyncFlatMapSequence<HKHeartbeatSeriesQueryDescriptor.Results, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given transformation with each element of this sequence."
  },
  {
    "title": "contains(where:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkattachment/asyncbytes/3952547-contains",
    "html": "Parameters\npredicate\n\nA closure that takes an element of the asynchronous sequence as its argument and returns a Boolean value that indicates whether the passed element represents a match.\n\nReturn Value\n\ntrue if the sequence contains an element that satisfies predicate; otherwise, false.\n\nDiscussion\n\nYou can use the predicate to check for an element of a type that doesn’t conform to the Equatable protocol, or to find an element that satisfies a general condition.\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 10. The contains(where:) method checks to see whether the sequence produces a value divisible by 3:\n\nlet containsDivisibleByThree = await Counter(howHigh: 10)\n    .contains { $0 % 3 == 0 }\nprint(containsDivisibleByThree)\n// Prints \"true\"\n\n\nThe predicate executes each time the asynchronous sequence produces an element, until either the predicate finds a match or the sequence ends.\n\nSee Also\nFinding bytes\nfunc contains(UInt8) -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains the given element.\nfunc allSatisfy((UInt8) -> Bool) -> Bool\nReturns a Boolean value that indicates whether all elements produced by the asynchronous sequence satisfy the given predicate.\nfunc first(where: (UInt8) -> Bool) -> UInt8?\nReturns the first element of the sequence that satisfies the given predicate.\nfunc min() -> UInt8?\nReturns the minimum element in an asynchronous sequence of comparable elements.\nfunc min(by: (UInt8, UInt8) -> Bool) -> UInt8?\nReturns the minimum element in the asynchronous sequence, using the given predicate as the comparison between elements.\nfunc max() -> UInt8?\nReturns the maximum element in an asynchronous sequence of comparable elements.\nfunc max(by: (UInt8, UInt8) -> Bool) -> UInt8?\nReturns the maximum element in the asynchronous sequence, using the given predicate as the comparison between elements."
  },
  {
    "title": "allSatisfy(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkattachment/asyncbytes/3952538-allsatisfy",
    "html": "Parameters\npredicate\n\nA closure that takes an element of the asynchronous sequence as its argument and returns a Boolean value that indicates whether the passed element satisfies a condition.\n\nReturn Value\n\ntrue if the sequence contains only elements that satisfy predicate; otherwise, false.\n\nDiscussion\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 10. The allSatisfy(_:) method checks to see whether all elements produced by the sequence are less than 10.\n\nlet allLessThanTen = await Counter(howHigh: 10)\n    .allSatisfy { $0 < 10 }\nprint(allLessThanTen)\n// Prints \"false\"\n\n\nThe predicate executes each time the asynchronous sequence produces an element, until either the predicate returns false or the sequence ends.\n\nIf the asynchronous sequence is empty, this method returns true.\n\nSee Also\nFinding bytes\nfunc contains(UInt8) -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains the given element.\nfunc contains(where: (UInt8) -> Bool) -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains an element that satisfies the given predicate.\nfunc first(where: (UInt8) -> Bool) -> UInt8?\nReturns the first element of the sequence that satisfies the given predicate.\nfunc min() -> UInt8?\nReturns the minimum element in an asynchronous sequence of comparable elements.\nfunc min(by: (UInt8, UInt8) -> Bool) -> UInt8?\nReturns the minimum element in the asynchronous sequence, using the given predicate as the comparison between elements.\nfunc max() -> UInt8?\nReturns the maximum element in an asynchronous sequence of comparable elements.\nfunc max(by: (UInt8, UInt8) -> Bool) -> UInt8?\nReturns the maximum element in the asynchronous sequence, using the given predicate as the comparison between elements."
  },
  {
    "title": "max() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkattachment/asyncbytes/3952567-max",
    "html": "Return Value\n\nThe sequence’s maximum element. If the sequence has no elements, returns nil.\n\nDiscussion\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 10. The max() method returns the max value of the sequence.\n\nlet max = await Counter(howHigh: 10)\n    .max()\nprint(max ?? \"none\")\n// Prints \"10\"\n\nSee Also\nFinding bytes\nfunc contains(UInt8) -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains the given element.\nfunc contains(where: (UInt8) -> Bool) -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains an element that satisfies the given predicate.\nfunc allSatisfy((UInt8) -> Bool) -> Bool\nReturns a Boolean value that indicates whether all elements produced by the asynchronous sequence satisfy the given predicate.\nfunc first(where: (UInt8) -> Bool) -> UInt8?\nReturns the first element of the sequence that satisfies the given predicate.\nfunc min() -> UInt8?\nReturns the minimum element in an asynchronous sequence of comparable elements.\nfunc min(by: (UInt8, UInt8) -> Bool) -> UInt8?\nReturns the minimum element in the asynchronous sequence, using the given predicate as the comparison between elements.\nfunc max(by: (UInt8, UInt8) -> Bool) -> UInt8?\nReturns the maximum element in the asynchronous sequence, using the given predicate as the comparison between elements."
  },
  {
    "title": "prefix(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkattachment/asyncbytes/3952575-prefix",
    "html": "Parameters\ncount\n\nThe maximum number of elements to return. The value of count must be greater than or equal to zero.\n\nReturn Value\n\nAn asynchronous sequence starting at the beginning of the base sequence with at most count elements.\n\nDiscussion\n\nUse prefix(_:) to reduce the number of elements produced by the asynchronous sequence.\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 10. The prefix(_:) method causes the modified sequence to pass through the first six values, then end.\n\nfor await number in Counter(howHigh: 10).prefix(6) {\n    print(number, terminator: \" \")\n}\n// Prints \"1 2 3 4 5 6 \"\n\n\nIf the count passed to prefix(_:) exceeds the number of elements in the base sequence, the result contains all of the elements in the sequence.\n\nSee Also\nSelecting bytes\nfunc prefix(while: (UInt8) -> Bool) -> AsyncPrefixWhileSequence<HKAttachment.AsyncBytes>\nReturns an asynchronous sequence, containing the initial, consecutive elements of the base sequence that satisfy the given predicate."
  },
  {
    "title": "contains(where:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkanchoredobjectquerydescriptor/results/3916271-contains",
    "html": "Parameters\npredicate\n\nA closure that takes an element of the asynchronous sequence as its argument and returns a Boolean value that indicates whether the passed element represents a match.\n\nReturn Value\n\ntrue if the sequence contains an element that satisfies predicate; otherwise, false.\n\nDiscussion\n\nYou can use the predicate to check for an element of a type that doesn’t conform to the Equatable protocol, or to find an element that satisfies a general condition.\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 10. The contains(where:) method checks to see whether the sequence produces a value divisible by 3:\n\nlet containsDivisibleByThree = await Counter(howHigh: 10)\n    .contains { $0 % 3 == 0 }\nprint(containsDivisibleByThree)\n// Prints \"true\"\n\n\nThe predicate executes each time the asynchronous sequence produces an element, until either the predicate finds a match or the sequence ends.\n\nSee Also\nFinding Elements\nfunc allSatisfy((HKAnchoredObjectQueryDescriptor<Sample>.Result) -> Bool) -> Bool\nReturns a Boolean value that indicates whether all elements produced by the asynchronous sequence satisfy the given predicate.\nfunc first(where: (HKAnchoredObjectQueryDescriptor<Sample>.Result) -> Bool) -> HKAnchoredObjectQueryDescriptor<Sample>.Result?\nReturns the first element of the sequence that satisfies the given predicate.\nfunc max(by: (HKAnchoredObjectQueryDescriptor<Sample>.Result, HKAnchoredObjectQueryDescriptor<Sample>.Result) -> Bool) -> HKAnchoredObjectQueryDescriptor<Sample>.Result?\nReturns the maximum element in the asynchronous sequence, using the given predicate as the comparison between elements.\nfunc min(by: (HKAnchoredObjectQueryDescriptor<Sample>.Result, HKAnchoredObjectQueryDescriptor<Sample>.Result) -> Bool) -> HKAnchoredObjectQueryDescriptor<Sample>.Result?\nReturns the minimum element in the asynchronous sequence, using the given predicate as the comparison between elements."
  },
  {
    "title": "HKElectrocardiogram.Classification.unrecognized | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkelectrocardiogram/classification/unrecognized",
    "html": "Discussion\n\nFor example, if the Apple Watch recording the sample is running a newer version of watchOS, it may support classification types that aren’t included in this version. You can check the version of the algorithm used to classify the ECG by reading the value of the sample’s HKMetadataKeyAppleECGAlgorithmVersion metadata key.\n\nSee Also\nClassifications\ncase sinusRhythm\nThe sample exhibits no signs of atrial fibrillation.\ncase atrialFibrillation\nThe sample exhibits signs of atrial fibrillation.\ncase inconclusiveHighHeartRate\nAn unclassifiable sample caused by a rapid heart rate.\ncase inconclusiveLowHeartRate\nAn unclassifiable sample caused by a heart rate below 50 bpm.\ncase inconclusivePoorReading\nAn unclassifiable sample caused by an unclear signal.\ncase inconclusiveOther\nAn unclassifiable sample caused by an unknown issue.\ncase notSet\nA sample that doesn’t have an assigned classification."
  },
  {
    "title": "HKElectrocardiogram.Classification.notSet | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkelectrocardiogram/classification/notset",
    "html": "See Also\nClassifications\ncase sinusRhythm\nThe sample exhibits no signs of atrial fibrillation.\ncase atrialFibrillation\nThe sample exhibits signs of atrial fibrillation.\ncase inconclusiveHighHeartRate\nAn unclassifiable sample caused by a rapid heart rate.\ncase inconclusiveLowHeartRate\nAn unclassifiable sample caused by a heart rate below 50 bpm.\ncase inconclusivePoorReading\nAn unclassifiable sample caused by an unclear signal.\ncase inconclusiveOther\nAn unclassifiable sample caused by an unknown issue.\ncase unrecognized\nA sample classification that this version of HealthKit doesn’t recognize."
  },
  {
    "title": "HKElectrocardiogram.Classification.inconclusiveOther | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkelectrocardiogram/classification/inconclusiveother",
    "html": "See Also\nClassifications\ncase sinusRhythm\nThe sample exhibits no signs of atrial fibrillation.\ncase atrialFibrillation\nThe sample exhibits signs of atrial fibrillation.\ncase inconclusiveHighHeartRate\nAn unclassifiable sample caused by a rapid heart rate.\ncase inconclusiveLowHeartRate\nAn unclassifiable sample caused by a heart rate below 50 bpm.\ncase inconclusivePoorReading\nAn unclassifiable sample caused by an unclear signal.\ncase unrecognized\nA sample classification that this version of HealthKit doesn’t recognize.\ncase notSet\nA sample that doesn’t have an assigned classification."
  },
  {
    "title": "contains(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkelectrocardiogramquerydescriptor/results/3916327-contains",
    "html": "Parameters\nsearch\n\nThe element to find in the asynchronous sequence.\n\nReturn Value\n\ntrue if the method found the element in the asynchronous sequence; otherwise, false.\n\nDiscussion\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 10. The contains(_:) method checks to see whether the sequence produces the value 5:\n\nlet containsFive = await Counter(howHigh: 10)\n    .contains(5)\nprint(containsFive)\n// Prints \"true\"\n\nSee Also\nFinding Elements\nfunc contains(where: (HKElectrocardiogram.VoltageMeasurement) -> Bool) -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains an element that satisfies the given predicate.\nfunc allSatisfy((HKElectrocardiogram.VoltageMeasurement) -> Bool) -> Bool\nReturns a Boolean value that indicates whether all elements produced by the asynchronous sequence satisfy the given predicate.\nfunc first(where: (HKElectrocardiogram.VoltageMeasurement) -> Bool) -> HKElectrocardiogram.VoltageMeasurement?\nReturns the first element of the sequence that satisfies the given predicate.\nfunc max(by: (HKElectrocardiogram.VoltageMeasurement, HKElectrocardiogram.VoltageMeasurement) -> Bool) -> HKElectrocardiogram.VoltageMeasurement?\nReturns the maximum element in the asynchronous sequence, using the given predicate as the comparison between elements.\nfunc min(by: (HKElectrocardiogram.VoltageMeasurement, HKElectrocardiogram.VoltageMeasurement) -> Bool) -> HKElectrocardiogram.VoltageMeasurement?\nReturns the minimum element in the asynchronous sequence, using the given predicate as the comparison between elements."
  },
  {
    "title": "HKElectrocardiogramQueryDescriptor.Results.AsyncIterator | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkelectrocardiogramquerydescriptor/results/asynciterator",
    "html": "See Also\nCreating an Iterator\nfunc makeAsyncIterator() -> HKElectrocardiogramQueryDescriptor.Results.Iterator\nCreates the asynchronous iterator that produces results from this asynchronous sequence.\nstruct HKElectrocardiogramQueryDescriptor.Results.Iterator\nAn iterator for accessing individual voltage measurements from the series.\ntypealias HKElectrocardiogramQueryDescriptor.Results.Element\nA structure that represents a single voltage measurement."
  },
  {
    "title": "HKElectrocardiogramQueryDescriptor.Results.Element | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkelectrocardiogramquerydescriptor/results/element",
    "html": "See Also\nCreating an Iterator\nfunc makeAsyncIterator() -> HKElectrocardiogramQueryDescriptor.Results.Iterator\nCreates the asynchronous iterator that produces results from this asynchronous sequence.\nstruct HKElectrocardiogramQueryDescriptor.Results.Iterator\nAn iterator for accessing individual voltage measurements from the series.\ntypealias HKElectrocardiogramQueryDescriptor.Results.AsyncIterator\nAn iterator for accessing individual voltage measurements from an electrocardiogram sample."
  },
  {
    "title": "contains(where:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkelectrocardiogramquerydescriptor/results/3916329-contains",
    "html": "Parameters\npredicate\n\nA closure that takes an element of the asynchronous sequence as its argument and returns a Boolean value that indicates whether the passed element represents a match.\n\nReturn Value\n\ntrue if the sequence contains an element that satisfies predicate; otherwise, false.\n\nDiscussion\n\nYou can use the predicate to check for an element of a type that doesn’t conform to the Equatable protocol, or to find an element that satisfies a general condition.\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 10. The contains(where:) method checks to see whether the sequence produces a value divisible by 3:\n\nlet containsDivisibleByThree = await Counter(howHigh: 10)\n    .contains { $0 % 3 == 0 }\nprint(containsDivisibleByThree)\n// Prints \"true\"\n\n\nThe predicate executes each time the asynchronous sequence produces an element, until either the predicate finds a match or the sequence ends.\n\nSee Also\nFinding Elements\nfunc contains(HKElectrocardiogram.VoltageMeasurement) -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains the given element.\nfunc allSatisfy((HKElectrocardiogram.VoltageMeasurement) -> Bool) -> Bool\nReturns a Boolean value that indicates whether all elements produced by the asynchronous sequence satisfy the given predicate.\nfunc first(where: (HKElectrocardiogram.VoltageMeasurement) -> Bool) -> HKElectrocardiogram.VoltageMeasurement?\nReturns the first element of the sequence that satisfies the given predicate.\nfunc max(by: (HKElectrocardiogram.VoltageMeasurement, HKElectrocardiogram.VoltageMeasurement) -> Bool) -> HKElectrocardiogram.VoltageMeasurement?\nReturns the maximum element in the asynchronous sequence, using the given predicate as the comparison between elements.\nfunc min(by: (HKElectrocardiogram.VoltageMeasurement, HKElectrocardiogram.VoltageMeasurement) -> Bool) -> HKElectrocardiogram.VoltageMeasurement?\nReturns the minimum element in the asynchronous sequence, using the given predicate as the comparison between elements."
  },
  {
    "title": "max(by:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkelectrocardiogramquerydescriptor/results/3916348-max",
    "html": "Parameters\nareInIncreasingOrder\n\nA predicate that returns true if its first argument should be ordered before its second argument; otherwise, false.\n\nReturn Value\n\nThe sequence’s minimum element, according to areInIncreasingOrder. If the sequence has no elements, returns nil.\n\nDiscussion\n\nUse this method when the asynchronous sequence’s values don’t conform to Comparable, or when you want to apply a custom ordering to the sequence.\n\nThe predicate must be a strict weak ordering over the elements. That is, for any elements a, b, and c, the following conditions must hold:\n\nareInIncreasingOrder(a, a) is always false. (Irreflexivity)\n\nIf areInIncreasingOrder(a, b) and areInIncreasingOrder(b, c) are both true, then areInIncreasingOrder(a, c) is also true. (Transitive comparability)\n\nTwo elements are incomparable if neither is ordered before the other according to the predicate. If a and b are incomparable, and b and c are incomparable, then a and c are also incomparable. (Transitive incomparability)\n\nThe following example uses an enumeration of playing cards ranks, Rank, which ranges from ace (low) to king (high). An asynchronous sequence called RankCounter produces all elements of the array. The predicate provided to the max(by:) method sorts ranks based on their rawValue:\n\nenum Rank: Int {\n    case ace = 1, two, three, four, five, six, seven, eight, nine, ten, jack, queen, king\n}\n\n\nlet max = await RankCounter()\n    .max { $0.rawValue < $1.rawValue }\nprint(max ?? \"none\")\n// Prints \"king\"\n\nSee Also\nFinding Elements\nfunc contains(HKElectrocardiogram.VoltageMeasurement) -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains the given element.\nfunc contains(where: (HKElectrocardiogram.VoltageMeasurement) -> Bool) -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains an element that satisfies the given predicate.\nfunc allSatisfy((HKElectrocardiogram.VoltageMeasurement) -> Bool) -> Bool\nReturns a Boolean value that indicates whether all elements produced by the asynchronous sequence satisfy the given predicate.\nfunc first(where: (HKElectrocardiogram.VoltageMeasurement) -> Bool) -> HKElectrocardiogram.VoltageMeasurement?\nReturns the first element of the sequence that satisfies the given predicate.\nfunc min(by: (HKElectrocardiogram.VoltageMeasurement, HKElectrocardiogram.VoltageMeasurement) -> Bool) -> HKElectrocardiogram.VoltageMeasurement?\nReturns the minimum element in the asynchronous sequence, using the given predicate as the comparison between elements."
  },
  {
    "title": "min(by:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkelectrocardiogramquerydescriptor/results/3916350-min",
    "html": "Parameters\nareInIncreasingOrder\n\nA predicate that returns true if its first argument should be ordered before its second argument; otherwise, false.\n\nReturn Value\n\nThe sequence’s minimum element, according to areInIncreasingOrder. If the sequence has no elements, returns nil.\n\nDiscussion\n\nUse this method when the asynchronous sequence’s values don’t conform to Comparable, or when you want to apply a custom ordering to the sequence.\n\nThe predicate must be a strict weak ordering over the elements. That is, for any elements a, b, and c, the following conditions must hold:\n\nareInIncreasingOrder(a, a) is always false. (Irreflexivity)\n\nIf areInIncreasingOrder(a, b) and areInIncreasingOrder(b, c) are both true, then areInIncreasingOrder(a, c) is also true. (Transitive comparability)\n\nTwo elements are incomparable if neither is ordered before the other according to the predicate. If a and b are incomparable, and b and c are incomparable, then a and c are also incomparable. (Transitive incomparability)\n\nThe following example uses an enumeration of playing cards ranks, Rank, which ranges from ace (low) to king (high). An asynchronous sequence called RankCounter produces all elements of the array. The predicate provided to the min(by:) method sorts ranks based on their rawValue:\n\nenum Rank: Int {\n    case ace = 1, two, three, four, five, six, seven, eight, nine, ten, jack, queen, king\n}\n\n\nlet min = await RankCounter()\n    .min { $0.rawValue < $1.rawValue }\nprint(min ?? \"none\")\n// Prints \"ace\"\n\nSee Also\nFinding Elements\nfunc contains(HKElectrocardiogram.VoltageMeasurement) -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains the given element.\nfunc contains(where: (HKElectrocardiogram.VoltageMeasurement) -> Bool) -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains an element that satisfies the given predicate.\nfunc allSatisfy((HKElectrocardiogram.VoltageMeasurement) -> Bool) -> Bool\nReturns a Boolean value that indicates whether all elements produced by the asynchronous sequence satisfy the given predicate.\nfunc first(where: (HKElectrocardiogram.VoltageMeasurement) -> Bool) -> HKElectrocardiogram.VoltageMeasurement?\nReturns the first element of the sequence that satisfies the given predicate.\nfunc max(by: (HKElectrocardiogram.VoltageMeasurement, HKElectrocardiogram.VoltageMeasurement) -> Bool) -> HKElectrocardiogram.VoltageMeasurement?\nReturns the maximum element in the asynchronous sequence, using the given predicate as the comparison between elements."
  },
  {
    "title": "first(where:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkelectrocardiogramquerydescriptor/results/3916337-first",
    "html": "Parameters\npredicate\n\nA closure that takes an element of the asynchronous sequence as its argument and returns a Boolean value that indicates whether the element is a match.\n\nReturn Value\n\nThe first element of the sequence that satisfies predicate, or nil if there is no element that satisfies predicate.\n\nDiscussion\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 10. The first(where:) method returns the first member of the sequence that’s evenly divisible by both 2 and 3.\n\nlet divisibleBy2And3 = await Counter(howHigh: 10)\n    .first { $0 % 2 == 0 && $0 % 3 == 0 }\nprint(divisibleBy2And3 ?? \"none\")\n// Prints \"6\"\n\n\nThe predicate executes each time the asynchronous sequence produces an element, until either the predicate finds a match or the sequence ends.\n\nSee Also\nFinding Elements\nfunc contains(HKElectrocardiogram.VoltageMeasurement) -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains the given element.\nfunc contains(where: (HKElectrocardiogram.VoltageMeasurement) -> Bool) -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains an element that satisfies the given predicate.\nfunc allSatisfy((HKElectrocardiogram.VoltageMeasurement) -> Bool) -> Bool\nReturns a Boolean value that indicates whether all elements produced by the asynchronous sequence satisfy the given predicate.\nfunc max(by: (HKElectrocardiogram.VoltageMeasurement, HKElectrocardiogram.VoltageMeasurement) -> Bool) -> HKElectrocardiogram.VoltageMeasurement?\nReturns the maximum element in the asynchronous sequence, using the given predicate as the comparison between elements.\nfunc min(by: (HKElectrocardiogram.VoltageMeasurement, HKElectrocardiogram.VoltageMeasurement) -> Bool) -> HKElectrocardiogram.VoltageMeasurement?\nReturns the minimum element in the asynchronous sequence, using the given predicate as the comparison between elements."
  },
  {
    "title": "map(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkelectrocardiogramquerydescriptor/results/3916346-map",
    "html": "Parameters\ntransform\n\nA mapping closure. transform accepts an element of this sequence as its parameter and returns a transformed value of the same or of a different type. transform can also throw an error, which ends the transformed sequence.\n\nReturn Value\n\nAn asynchronous sequence that contains, in order, the elements produced by the transform closure.\n\nDiscussion\n\nUse the map(_:) method to transform every element received from a base asynchronous sequence. Typically, you use this to transform from one type of element to another.\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 5. The closure provided to the map(_:) method takes each Int and looks up a corresponding String from a romanNumeralDict dictionary. This means the outer for await in loop iterates over String instances instead of the underlying Int values that Counter produces. Also, the dictionary doesn’t provide a key for 4, and the closure throws an error for any key it can’t look up, so receiving this value from Counter ends the modified sequence with an error.\n\nlet romanNumeralDict: [Int: String] =\n    [1: \"I\", 2: \"II\", 3: \"III\", 5: \"V\"]\n\n\ndo {\n    let stream = Counter(howHigh: 5)\n        .map { (value) throws -> String in\n            guard let roman = romanNumeralDict[value] else {\n                throw MyError()\n            }\n            return roman\n        }\n    for try await numeral in stream {\n        print(numeral, terminator: \" \")\n    }\n} catch {\n    print(\"Error: \\(error)\")\n}\n// Prints \"I II III Error: MyError() \"\n\nSee Also\nTransforming a Series\nfunc map<Transformed>((HKElectrocardiogram.VoltageMeasurement) -> Transformed) -> AsyncMapSequence<HKElectrocardiogramQueryDescriptor.Results, Transformed>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements.\nfunc reduce<Result>(Result, (Result, HKElectrocardiogram.VoltageMeasurement) -> Result) -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure.\nfunc reduce<Result>(into: Result, (inout Result, HKElectrocardiogram.VoltageMeasurement) -> Void) -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure, given a mutable initial value.\nfunc compactMap<ElementOfResult>((HKElectrocardiogram.VoltageMeasurement) -> ElementOfResult?) -> AsyncCompactMapSequence<HKElectrocardiogramQueryDescriptor.Results, ElementOfResult>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements, omitting results that don’t return a value.\nfunc compactMap<ElementOfResult>((HKElectrocardiogram.VoltageMeasurement) -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<HKElectrocardiogramQueryDescriptor.Results, ElementOfResult>\nCreates an asynchronous sequence that maps an error-throwing closure over the base sequence’s elements, omitting results that don’t return a value.\nfunc flatMap<SegmentOfResult>((HKElectrocardiogram.VoltageMeasurement) -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<HKElectrocardiogramQueryDescriptor.Results, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given error-throwing transformation with each element of this sequence.\nfunc flatMap<SegmentOfResult>((HKElectrocardiogram.VoltageMeasurement) -> SegmentOfResult) -> AsyncFlatMapSequence<HKElectrocardiogramQueryDescriptor.Results, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given transformation with each element of this sequence."
  },
  {
    "title": "drop(while:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkelectrocardiogramquerydescriptor/results/3916331-drop",
    "html": "Parameters\npredicate\n\nA closure that takes an element as a parameter and returns a Boolean value indicating whether to drop the element from the modified sequence.\n\nReturn Value\n\nAn asynchronous sequence that skips over values from the base sequence until the provided closure returns false.\n\nDiscussion\n\nUse drop(while:) to omit elements from an asynchronous sequence until the element received meets a condition you specify.\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 10. The drop(while:) method causes the modified sequence to ignore received values until it encounters one that is divisible by 3:\n\nlet stream = Counter(howHigh: 10)\n    .drop { $0 % 3 != 0 }\nfor await number in stream {\n    print(number, terminator: \" \")\n}\n// Prints \"3 4 5 6 7 8 9 10 \"\n\n\nAfter the predicate returns false, the sequence never executes it again, and from then on the sequence passes through elements from its underlying sequence as-is.\n\nSee Also\nExcluding Elements\nfunc dropFirst(Int) -> AsyncDropFirstSequence<HKElectrocardiogramQueryDescriptor.Results>\nOmits a specified number of elements from the base asynchronous sequence, then passes through all remaining elements.\nfunc filter((HKElectrocardiogram.VoltageMeasurement) -> Bool) -> AsyncFilterSequence<HKElectrocardiogramQueryDescriptor.Results>\nCreates an asynchronous sequence that contains, in order, the elements of the base sequence that satisfy the given predicate."
  },
  {
    "title": "filter(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkelectrocardiogramquerydescriptor/results/3916335-filter",
    "html": "Parameters\nisIncluded\n\nA closure that takes an element of the asynchronous sequence as its argument and returns a Boolean value that indicates whether to include the element in the filtered sequence.\n\nReturn Value\n\nAn asynchronous sequence that contains, in order, the elements of the base sequence that satisfy the given predicate.\n\nDiscussion\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 10. The filter(_:) method returns true for even values and false for odd values, thereby filtering out the odd values:\n\nlet stream = Counter(howHigh: 10)\n    .filter { $0 % 2 == 0 }\nfor await number in stream {\n    print(number, terminator: \" \")\n}\n// Prints \"2 4 6 8 10 \"\n\nSee Also\nExcluding Elements\nfunc drop(while: (HKElectrocardiogram.VoltageMeasurement) -> Bool) -> AsyncDropWhileSequence<HKElectrocardiogramQueryDescriptor.Results>\nOmits elements from the base asynchronous sequence until a given closure returns false, after which it passes through all remaining elements.\nfunc dropFirst(Int) -> AsyncDropFirstSequence<HKElectrocardiogramQueryDescriptor.Results>\nOmits a specified number of elements from the base asynchronous sequence, then passes through all remaining elements."
  },
  {
    "title": "dropFirst(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkelectrocardiogramquerydescriptor/results/3916333-dropfirst",
    "html": "Parameters\ncount\n\nThe number of elements to drop from the beginning of the sequence. count must be greater than or equal to zero.\n\nReturn Value\n\nAn asynchronous sequence that drops the first count elements from the base sequence.\n\nDiscussion\n\nUse dropFirst(_:) when you want to drop the first n elements from the base sequence and pass through the remaining elements.\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 10. The dropFirst(_:) method causes the modified sequence to ignore the values 1 through 3, and instead emit 4 through 10:\n\nfor await number in Counter(howHigh: 10).dropFirst(3) {\n    print(number, terminator: \" \")\n}\n// Prints \"4 5 6 7 8 9 10 \"\n\n\nIf the number of elements to drop exceeds the number of elements in the sequence, the result is an empty sequence.\n\nSee Also\nExcluding Elements\nfunc drop(while: (HKElectrocardiogram.VoltageMeasurement) -> Bool) -> AsyncDropWhileSequence<HKElectrocardiogramQueryDescriptor.Results>\nOmits elements from the base asynchronous sequence until a given closure returns false, after which it passes through all remaining elements.\nfunc filter((HKElectrocardiogram.VoltageMeasurement) -> Bool) -> AsyncFilterSequence<HKElectrocardiogramQueryDescriptor.Results>\nCreates an asynchronous sequence that contains, in order, the elements of the base sequence that satisfy the given predicate."
  },
  {
    "title": "compactMap(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkelectrocardiogramquerydescriptor/results/3916323-compactmap",
    "html": "Parameters\ntransform\n\nA mapping closure. transform accepts an element of this sequence as its parameter and returns a transformed value of the same or of a different type.\n\nReturn Value\n\nAn asynchronous sequence that contains, in order, the non-nil elements produced by the transform closure.\n\nDiscussion\n\nUse the compactMap(_:) method to transform every element received from a base asynchronous sequence, while also discarding any nil results from the closure. Typically, you use this to transform from one type of element to another.\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 5. The closure provided to the compactMap(_:) method takes each Int and looks up a corresponding String from a romanNumeralDict dictionary. Because there is no key for 4, the closure returns nil in this case, which compactMap(_:) omits from the transformed asynchronous sequence.\n\nlet romanNumeralDict: [Int: String] =\n    [1: \"I\", 2: \"II\", 3: \"III\", 5: \"V\"]\n    \nlet stream = Counter(howHigh: 5)\n    .compactMap { romanNumeralDict[$0] }\nfor await numeral in stream {\n    print(numeral, terminator: \" \")\n}\n// Prints \"I II III V \"\n\nSee Also\nTransforming a Series\nfunc map<Transformed>((HKElectrocardiogram.VoltageMeasurement) -> Transformed) -> AsyncMapSequence<HKElectrocardiogramQueryDescriptor.Results, Transformed>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements.\nfunc map<Transformed>((HKElectrocardiogram.VoltageMeasurement) -> Transformed) -> AsyncThrowingMapSequence<HKElectrocardiogramQueryDescriptor.Results, Transformed>\nCreates an asynchronous sequence that maps the given error-throwing closure over the asynchronous sequence’s elements.\nfunc reduce<Result>(Result, (Result, HKElectrocardiogram.VoltageMeasurement) -> Result) -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure.\nfunc reduce<Result>(into: Result, (inout Result, HKElectrocardiogram.VoltageMeasurement) -> Void) -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure, given a mutable initial value.\nfunc compactMap<ElementOfResult>((HKElectrocardiogram.VoltageMeasurement) -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<HKElectrocardiogramQueryDescriptor.Results, ElementOfResult>\nCreates an asynchronous sequence that maps an error-throwing closure over the base sequence’s elements, omitting results that don’t return a value.\nfunc flatMap<SegmentOfResult>((HKElectrocardiogram.VoltageMeasurement) -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<HKElectrocardiogramQueryDescriptor.Results, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given error-throwing transformation with each element of this sequence.\nfunc flatMap<SegmentOfResult>((HKElectrocardiogram.VoltageMeasurement) -> SegmentOfResult) -> AsyncFlatMapSequence<HKElectrocardiogramQueryDescriptor.Results, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given transformation with each element of this sequence."
  },
  {
    "title": "compactMap(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkelectrocardiogramquerydescriptor/results/3916325-compactmap",
    "html": "Parameters\ntransform\n\nAn error-throwing mapping closure. transform accepts an element of this sequence as its parameter and returns a transformed value of the same or of a different type. If transform throws an error, the sequence ends.\n\nReturn Value\n\nAn asynchronous sequence that contains, in order, the non-nil elements produced by the transform closure. The sequence ends either when the base sequence ends or when transform throws an error.\n\nDiscussion\n\nUse the compactMap(_:) method to transform every element received from a base asynchronous sequence, while also discarding any nil results from the closure. Typically, you use this to transform from one type of element to another.\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 5. The closure provided to the compactMap(_:) method takes each Int and looks up a corresponding String from a romanNumeralDict dictionary. Since there is no key for 4, the closure returns nil in this case, which compactMap(_:) omits from the transformed asynchronous sequence. When the value is 5, the closure throws MyError, terminating the sequence.\n\nlet romanNumeralDict: [Int: String] =\n    [1: \"I\", 2: \"II\", 3: \"III\", 5: \"V\"]\n\n\ndo {\n    let stream = Counter(howHigh: 5)\n        .compactMap { (value) throws -> String? in\n            if value == 5 {\n                throw MyError()\n            }\n            return romanNumeralDict[value]\n        }\n    for try await numeral in stream {\n        print(numeral, terminator: \" \")\n    }\n} catch {\n    print(\"Error: \\(error)\")\n}\n// Prints \"I II III Error: MyError() \"\n\nSee Also\nTransforming a Series\nfunc map<Transformed>((HKElectrocardiogram.VoltageMeasurement) -> Transformed) -> AsyncMapSequence<HKElectrocardiogramQueryDescriptor.Results, Transformed>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements.\nfunc map<Transformed>((HKElectrocardiogram.VoltageMeasurement) -> Transformed) -> AsyncThrowingMapSequence<HKElectrocardiogramQueryDescriptor.Results, Transformed>\nCreates an asynchronous sequence that maps the given error-throwing closure over the asynchronous sequence’s elements.\nfunc reduce<Result>(Result, (Result, HKElectrocardiogram.VoltageMeasurement) -> Result) -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure.\nfunc reduce<Result>(into: Result, (inout Result, HKElectrocardiogram.VoltageMeasurement) -> Void) -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure, given a mutable initial value.\nfunc compactMap<ElementOfResult>((HKElectrocardiogram.VoltageMeasurement) -> ElementOfResult?) -> AsyncCompactMapSequence<HKElectrocardiogramQueryDescriptor.Results, ElementOfResult>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements, omitting results that don’t return a value.\nfunc flatMap<SegmentOfResult>((HKElectrocardiogram.VoltageMeasurement) -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<HKElectrocardiogramQueryDescriptor.Results, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given error-throwing transformation with each element of this sequence.\nfunc flatMap<SegmentOfResult>((HKElectrocardiogram.VoltageMeasurement) -> SegmentOfResult) -> AsyncFlatMapSequence<HKElectrocardiogramQueryDescriptor.Results, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given transformation with each element of this sequence."
  },
  {
    "title": "reduce(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkelectrocardiogramquerydescriptor/results/3916356-reduce",
    "html": "Parameters\ninitialResult\n\nThe value to use as the initial accumulating value. The nextPartialResult closure receives initialResult the first time the closure runs.\n\nnextPartialResult\n\nA closure that combines an accumulating value and an element of the asynchronous sequence into a new accumulating value, for use in the next call of the nextPartialResult closure or returned to the caller.\n\nReturn Value\n\nThe final accumulated value. If the sequence has no elements, the result is initialResult.\n\nDiscussion\n\nUse the reduce(_:_:) method to produce a single value from the elements of an entire sequence. For example, you can use this method on an sequence of numbers to find their sum or product.\n\nThe nextPartialResult closure executes sequentially with an accumulating value initialized to initialResult and each element of the sequence.\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 4. The reduce(_:_:) method sums the values received from the asynchronous sequence.\n\nlet sum = await Counter(howHigh: 4)\n    .reduce(0) {\n        $0 + $1\n    }\nprint(sum)\n// Prints \"10\"\n\nSee Also\nTransforming a Series\nfunc map<Transformed>((HKElectrocardiogram.VoltageMeasurement) -> Transformed) -> AsyncMapSequence<HKElectrocardiogramQueryDescriptor.Results, Transformed>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements.\nfunc map<Transformed>((HKElectrocardiogram.VoltageMeasurement) -> Transformed) -> AsyncThrowingMapSequence<HKElectrocardiogramQueryDescriptor.Results, Transformed>\nCreates an asynchronous sequence that maps the given error-throwing closure over the asynchronous sequence’s elements.\nfunc reduce<Result>(into: Result, (inout Result, HKElectrocardiogram.VoltageMeasurement) -> Void) -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure, given a mutable initial value.\nfunc compactMap<ElementOfResult>((HKElectrocardiogram.VoltageMeasurement) -> ElementOfResult?) -> AsyncCompactMapSequence<HKElectrocardiogramQueryDescriptor.Results, ElementOfResult>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements, omitting results that don’t return a value.\nfunc compactMap<ElementOfResult>((HKElectrocardiogram.VoltageMeasurement) -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<HKElectrocardiogramQueryDescriptor.Results, ElementOfResult>\nCreates an asynchronous sequence that maps an error-throwing closure over the base sequence’s elements, omitting results that don’t return a value.\nfunc flatMap<SegmentOfResult>((HKElectrocardiogram.VoltageMeasurement) -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<HKElectrocardiogramQueryDescriptor.Results, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given error-throwing transformation with each element of this sequence.\nfunc flatMap<SegmentOfResult>((HKElectrocardiogram.VoltageMeasurement) -> SegmentOfResult) -> AsyncFlatMapSequence<HKElectrocardiogramQueryDescriptor.Results, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given transformation with each element of this sequence."
  },
  {
    "title": "reduce(into:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkelectrocardiogramquerydescriptor/results/3916358-reduce",
    "html": "Parameters\ninitialResult\n\nThe value to use as the initial accumulating value. The nextPartialResult closure receives initialResult the first time the closure executes.\n\nnextPartialResult\n\nA closure that combines an accumulating value and an element of the asynchronous sequence into a new accumulating value, for use in the next call of the nextPartialResult closure or returned to the caller.\n\nReturn Value\n\nThe final accumulated value. If the sequence has no elements, the result is initialResult.\n\nDiscussion\n\nUse the reduce(into:_:) method to produce a single value from the elements of an entire sequence. For example, you can use this method on a sequence of numbers to find their sum or product.\n\nThe nextPartialResult closure executes sequentially with an accumulating value initialized to initialResult and each element of the sequence.\n\nPrefer this method over reduce(_:_:) for efficiency when the result is a copy-on-write type, for example an Array or Dictionary.\n\nSee Also\nTransforming a Series\nfunc map<Transformed>((HKElectrocardiogram.VoltageMeasurement) -> Transformed) -> AsyncMapSequence<HKElectrocardiogramQueryDescriptor.Results, Transformed>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements.\nfunc map<Transformed>((HKElectrocardiogram.VoltageMeasurement) -> Transformed) -> AsyncThrowingMapSequence<HKElectrocardiogramQueryDescriptor.Results, Transformed>\nCreates an asynchronous sequence that maps the given error-throwing closure over the asynchronous sequence’s elements.\nfunc reduce<Result>(Result, (Result, HKElectrocardiogram.VoltageMeasurement) -> Result) -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure.\nfunc compactMap<ElementOfResult>((HKElectrocardiogram.VoltageMeasurement) -> ElementOfResult?) -> AsyncCompactMapSequence<HKElectrocardiogramQueryDescriptor.Results, ElementOfResult>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements, omitting results that don’t return a value.\nfunc compactMap<ElementOfResult>((HKElectrocardiogram.VoltageMeasurement) -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<HKElectrocardiogramQueryDescriptor.Results, ElementOfResult>\nCreates an asynchronous sequence that maps an error-throwing closure over the base sequence’s elements, omitting results that don’t return a value.\nfunc flatMap<SegmentOfResult>((HKElectrocardiogram.VoltageMeasurement) -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<HKElectrocardiogramQueryDescriptor.Results, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given error-throwing transformation with each element of this sequence.\nfunc flatMap<SegmentOfResult>((HKElectrocardiogram.VoltageMeasurement) -> SegmentOfResult) -> AsyncFlatMapSequence<HKElectrocardiogramQueryDescriptor.Results, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given transformation with each element of this sequence."
  },
  {
    "title": "flatMap(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkelectrocardiogramquerydescriptor/results/3916339-flatmap",
    "html": "Parameters\ntransform\n\nAn error-throwing mapping closure. transform accepts an element of this sequence as its parameter and returns an AsyncSequence. If transform throws an error, the sequence ends.\n\nReturn Value\n\nA single, flattened asynchronous sequence that contains all elements in all the asynchronous sequences produced by transform. The sequence ends either when the last sequence created from the last element from base sequence ends, or when transform throws an error.\n\nDiscussion\n\nUse this method to receive a single-level asynchronous sequence when your transformation produces an asynchronous sequence for each element.\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 5. The transforming closure takes the received Int and returns a new Counter that counts that high. For example, when the transform receives 3 from the base sequence, it creates a new Counter that produces the values 1, 2, and 3. The flatMap(_:) method “flattens” the resulting sequence-of-sequences into a single AsyncSequence. However, when the closure receives 4, it throws an error, terminating the sequence.\n\ndo {\n    let stream = Counter(howHigh: 5)\n        .flatMap { (value) -> Counter in\n            if value == 4 {\n                throw MyError()\n            }\n            return Counter(howHigh: value)\n        }\n    for try await number in stream {\n        print(number, terminator: \" \")\n    }\n} catch {\n    print(error)\n}\n// Prints \"1 1 2 1 2 3 MyError() \"\n\nSee Also\nTransforming a Series\nfunc map<Transformed>((HKElectrocardiogram.VoltageMeasurement) -> Transformed) -> AsyncMapSequence<HKElectrocardiogramQueryDescriptor.Results, Transformed>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements.\nfunc map<Transformed>((HKElectrocardiogram.VoltageMeasurement) -> Transformed) -> AsyncThrowingMapSequence<HKElectrocardiogramQueryDescriptor.Results, Transformed>\nCreates an asynchronous sequence that maps the given error-throwing closure over the asynchronous sequence’s elements.\nfunc reduce<Result>(Result, (Result, HKElectrocardiogram.VoltageMeasurement) -> Result) -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure.\nfunc reduce<Result>(into: Result, (inout Result, HKElectrocardiogram.VoltageMeasurement) -> Void) -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure, given a mutable initial value.\nfunc compactMap<ElementOfResult>((HKElectrocardiogram.VoltageMeasurement) -> ElementOfResult?) -> AsyncCompactMapSequence<HKElectrocardiogramQueryDescriptor.Results, ElementOfResult>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements, omitting results that don’t return a value.\nfunc compactMap<ElementOfResult>((HKElectrocardiogram.VoltageMeasurement) -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<HKElectrocardiogramQueryDescriptor.Results, ElementOfResult>\nCreates an asynchronous sequence that maps an error-throwing closure over the base sequence’s elements, omitting results that don’t return a value.\nfunc flatMap<SegmentOfResult>((HKElectrocardiogram.VoltageMeasurement) -> SegmentOfResult) -> AsyncFlatMapSequence<HKElectrocardiogramQueryDescriptor.Results, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given transformation with each element of this sequence."
  },
  {
    "title": "flatMap(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkelectrocardiogramquerydescriptor/results/3916341-flatmap",
    "html": "Parameters\ntransform\n\nA mapping closure. transform accepts an element of this sequence as its parameter and returns an AsyncSequence.\n\nReturn Value\n\nA single, flattened asynchronous sequence that contains all elements in all the asynchronous sequences produced by transform.\n\nDiscussion\n\nUse this method to receive a single-level asynchronous sequence when your transformation produces an asynchronous sequence for each element.\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 5. The transforming closure takes the received Int and returns a new Counter that counts that high. For example, when the transform receives 3 from the base sequence, it creates a new Counter that produces the values 1, 2, and 3. The flatMap(_:) method “flattens” the resulting sequence-of-sequences into a single AsyncSequence.\n\nlet stream = Counter(howHigh: 5)\n    .flatMap { Counter(howHigh: $0) }\nfor await number in stream {\n    print(number, terminator: \" \")\n}\n// Prints \"1 1 2 1 2 3 1 2 3 4 1 2 3 4 5 \"\n\nSee Also\nTransforming a Series\nfunc map<Transformed>((HKElectrocardiogram.VoltageMeasurement) -> Transformed) -> AsyncMapSequence<HKElectrocardiogramQueryDescriptor.Results, Transformed>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements.\nfunc map<Transformed>((HKElectrocardiogram.VoltageMeasurement) -> Transformed) -> AsyncThrowingMapSequence<HKElectrocardiogramQueryDescriptor.Results, Transformed>\nCreates an asynchronous sequence that maps the given error-throwing closure over the asynchronous sequence’s elements.\nfunc reduce<Result>(Result, (Result, HKElectrocardiogram.VoltageMeasurement) -> Result) -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure.\nfunc reduce<Result>(into: Result, (inout Result, HKElectrocardiogram.VoltageMeasurement) -> Void) -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure, given a mutable initial value.\nfunc compactMap<ElementOfResult>((HKElectrocardiogram.VoltageMeasurement) -> ElementOfResult?) -> AsyncCompactMapSequence<HKElectrocardiogramQueryDescriptor.Results, ElementOfResult>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements, omitting results that don’t return a value.\nfunc compactMap<ElementOfResult>((HKElectrocardiogram.VoltageMeasurement) -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<HKElectrocardiogramQueryDescriptor.Results, ElementOfResult>\nCreates an asynchronous sequence that maps an error-throwing closure over the base sequence’s elements, omitting results that don’t return a value.\nfunc flatMap<SegmentOfResult>((HKElectrocardiogram.VoltageMeasurement) -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<HKElectrocardiogramQueryDescriptor.Results, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given error-throwing transformation with each element of this sequence."
  },
  {
    "title": "makeAsyncIterator() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkheartbeatseriesquerydescriptor/results/3916399-makeasynciterator",
    "html": "Relationships\nFrom Protocol\nAsyncSequence\nSee Also\nCreating an Iterator\nstruct HKHeartbeatSeriesQueryDescriptor.Results.Iterator\nAn iterator for accessing individual data entries from the series.\ntypealias HKHeartbeatSeriesQueryDescriptor.Results.AsyncIterator\nAn iterator for accessing data about individual heartbeats from a heartbeat series sample.\ntypealias HKHeartbeatSeriesQueryDescriptor.Results.Element\nA structure that represents a single heartbeat from the series."
  },
  {
    "title": "HKHeartbeatSeriesQueryDescriptor.Results.Element | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkheartbeatseriesquerydescriptor/results/element",
    "html": "See Also\nCreating an Iterator\nfunc makeAsyncIterator() -> HKHeartbeatSeriesQueryDescriptor.Results.Iterator\nCreates the asynchronous iterator that produces results from this asynchronous sequence.\nstruct HKHeartbeatSeriesQueryDescriptor.Results.Iterator\nAn iterator for accessing individual data entries from the series.\ntypealias HKHeartbeatSeriesQueryDescriptor.Results.AsyncIterator\nAn iterator for accessing data about individual heartbeats from a heartbeat series sample."
  },
  {
    "title": "HKHeartbeatSeriesQueryDescriptor.Results.AsyncIterator | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkheartbeatseriesquerydescriptor/results/asynciterator",
    "html": "See Also\nCreating an Iterator\nfunc makeAsyncIterator() -> HKHeartbeatSeriesQueryDescriptor.Results.Iterator\nCreates the asynchronous iterator that produces results from this asynchronous sequence.\nstruct HKHeartbeatSeriesQueryDescriptor.Results.Iterator\nAn iterator for accessing individual data entries from the series.\ntypealias HKHeartbeatSeriesQueryDescriptor.Results.Element\nA structure that represents a single heartbeat from the series."
  },
  {
    "title": "contains(where:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkheartbeatseriesquerydescriptor/results/3916385-contains",
    "html": "Parameters\npredicate\n\nA closure that takes an element of the asynchronous sequence as its argument and returns a Boolean value that indicates whether the passed element represents a match.\n\nReturn Value\n\ntrue if the sequence contains an element that satisfies predicate; otherwise, false.\n\nDiscussion\n\nYou can use the predicate to check for an element of a type that doesn’t conform to the Equatable protocol, or to find an element that satisfies a general condition.\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 10. The contains(where:) method checks to see whether the sequence produces a value divisible by 3:\n\nlet containsDivisibleByThree = await Counter(howHigh: 10)\n    .contains { $0 % 3 == 0 }\nprint(containsDivisibleByThree)\n// Prints \"true\"\n\n\nThe predicate executes each time the asynchronous sequence produces an element, until either the predicate finds a match or the sequence ends.\n\nSee Also\nFinding Elements\nfunc contains(HKHeartbeatSeriesQueryDescriptor.Heartbeat) -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains the given element.\nfunc allSatisfy((HKHeartbeatSeriesQueryDescriptor.Heartbeat) -> Bool) -> Bool\nReturns a Boolean value that indicates whether all elements produced by the asynchronous sequence satisfy the given predicate.\nfunc first(where: (HKHeartbeatSeriesQueryDescriptor.Heartbeat) -> Bool) -> HKHeartbeatSeriesQueryDescriptor.Heartbeat?\nReturns the first element of the sequence that satisfies the given predicate.\nfunc max(by: (HKHeartbeatSeriesQueryDescriptor.Heartbeat, HKHeartbeatSeriesQueryDescriptor.Heartbeat) -> Bool) -> HKHeartbeatSeriesQueryDescriptor.Heartbeat?\nReturns the maximum element in the asynchronous sequence, using the given predicate as the comparison between elements.\nfunc min(by: (HKHeartbeatSeriesQueryDescriptor.Heartbeat, HKHeartbeatSeriesQueryDescriptor.Heartbeat) -> Bool) -> HKHeartbeatSeriesQueryDescriptor.Heartbeat?\nReturns the minimum element in the asynchronous sequence, using the given predicate as the comparison between elements."
  },
  {
    "title": "first(where:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkheartbeatseriesquerydescriptor/results/3916393-first",
    "html": "Parameters\npredicate\n\nA closure that takes an element of the asynchronous sequence as its argument and returns a Boolean value that indicates whether the element is a match.\n\nReturn Value\n\nThe first element of the sequence that satisfies predicate, or nil if there is no element that satisfies predicate.\n\nDiscussion\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 10. The first(where:) method returns the first member of the sequence that’s evenly divisible by both 2 and 3.\n\nlet divisibleBy2And3 = await Counter(howHigh: 10)\n    .first { $0 % 2 == 0 && $0 % 3 == 0 }\nprint(divisibleBy2And3 ?? \"none\")\n// Prints \"6\"\n\n\nThe predicate executes each time the asynchronous sequence produces an element, until either the predicate finds a match or the sequence ends.\n\nSee Also\nFinding Elements\nfunc contains(HKHeartbeatSeriesQueryDescriptor.Heartbeat) -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains the given element.\nfunc contains(where: (HKHeartbeatSeriesQueryDescriptor.Heartbeat) -> Bool) -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains an element that satisfies the given predicate.\nfunc allSatisfy((HKHeartbeatSeriesQueryDescriptor.Heartbeat) -> Bool) -> Bool\nReturns a Boolean value that indicates whether all elements produced by the asynchronous sequence satisfy the given predicate.\nfunc max(by: (HKHeartbeatSeriesQueryDescriptor.Heartbeat, HKHeartbeatSeriesQueryDescriptor.Heartbeat) -> Bool) -> HKHeartbeatSeriesQueryDescriptor.Heartbeat?\nReturns the maximum element in the asynchronous sequence, using the given predicate as the comparison between elements.\nfunc min(by: (HKHeartbeatSeriesQueryDescriptor.Heartbeat, HKHeartbeatSeriesQueryDescriptor.Heartbeat) -> Bool) -> HKHeartbeatSeriesQueryDescriptor.Heartbeat?\nReturns the minimum element in the asynchronous sequence, using the given predicate as the comparison between elements."
  },
  {
    "title": "min(by:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkheartbeatseriesquerydescriptor/results/3916406-min",
    "html": "Parameters\nareInIncreasingOrder\n\nA predicate that returns true if its first argument should be ordered before its second argument; otherwise, false.\n\nReturn Value\n\nThe sequence’s minimum element, according to areInIncreasingOrder. If the sequence has no elements, returns nil.\n\nDiscussion\n\nUse this method when the asynchronous sequence’s values don’t conform to Comparable, or when you want to apply a custom ordering to the sequence.\n\nThe predicate must be a strict weak ordering over the elements. That is, for any elements a, b, and c, the following conditions must hold:\n\nareInIncreasingOrder(a, a) is always false. (Irreflexivity)\n\nIf areInIncreasingOrder(a, b) and areInIncreasingOrder(b, c) are both true, then areInIncreasingOrder(a, c) is also true. (Transitive comparability)\n\nTwo elements are incomparable if neither is ordered before the other according to the predicate. If a and b are incomparable, and b and c are incomparable, then a and c are also incomparable. (Transitive incomparability)\n\nThe following example uses an enumeration of playing cards ranks, Rank, which ranges from ace (low) to king (high). An asynchronous sequence called RankCounter produces all elements of the array. The predicate provided to the min(by:) method sorts ranks based on their rawValue:\n\nenum Rank: Int {\n    case ace = 1, two, three, four, five, six, seven, eight, nine, ten, jack, queen, king\n}\n\n\nlet min = await RankCounter()\n    .min { $0.rawValue < $1.rawValue }\nprint(min ?? \"none\")\n// Prints \"ace\"\n\nSee Also\nFinding Elements\nfunc contains(HKHeartbeatSeriesQueryDescriptor.Heartbeat) -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains the given element.\nfunc contains(where: (HKHeartbeatSeriesQueryDescriptor.Heartbeat) -> Bool) -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains an element that satisfies the given predicate.\nfunc allSatisfy((HKHeartbeatSeriesQueryDescriptor.Heartbeat) -> Bool) -> Bool\nReturns a Boolean value that indicates whether all elements produced by the asynchronous sequence satisfy the given predicate.\nfunc first(where: (HKHeartbeatSeriesQueryDescriptor.Heartbeat) -> Bool) -> HKHeartbeatSeriesQueryDescriptor.Heartbeat?\nReturns the first element of the sequence that satisfies the given predicate.\nfunc max(by: (HKHeartbeatSeriesQueryDescriptor.Heartbeat, HKHeartbeatSeriesQueryDescriptor.Heartbeat) -> Bool) -> HKHeartbeatSeriesQueryDescriptor.Heartbeat?\nReturns the maximum element in the asynchronous sequence, using the given predicate as the comparison between elements."
  },
  {
    "title": "allSatisfy(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkheartbeatseriesquerydescriptor/results/3916377-allsatisfy",
    "html": "Parameters\npredicate\n\nA closure that takes an element of the asynchronous sequence as its argument and returns a Boolean value that indicates whether the passed element satisfies a condition.\n\nReturn Value\n\ntrue if the sequence contains only elements that satisfy predicate; otherwise, false.\n\nDiscussion\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 10. The allSatisfy(_:) method checks to see whether all elements produced by the sequence are less than 10.\n\nlet allLessThanTen = await Counter(howHigh: 10)\n    .allSatisfy { $0 < 10 }\nprint(allLessThanTen)\n// Prints \"false\"\n\n\nThe predicate executes each time the asynchronous sequence produces an element, until either the predicate returns false or the sequence ends.\n\nIf the asynchronous sequence is empty, this method returns true.\n\nSee Also\nFinding Elements\nfunc contains(HKHeartbeatSeriesQueryDescriptor.Heartbeat) -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains the given element.\nfunc contains(where: (HKHeartbeatSeriesQueryDescriptor.Heartbeat) -> Bool) -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains an element that satisfies the given predicate.\nfunc first(where: (HKHeartbeatSeriesQueryDescriptor.Heartbeat) -> Bool) -> HKHeartbeatSeriesQueryDescriptor.Heartbeat?\nReturns the first element of the sequence that satisfies the given predicate.\nfunc max(by: (HKHeartbeatSeriesQueryDescriptor.Heartbeat, HKHeartbeatSeriesQueryDescriptor.Heartbeat) -> Bool) -> HKHeartbeatSeriesQueryDescriptor.Heartbeat?\nReturns the maximum element in the asynchronous sequence, using the given predicate as the comparison between elements.\nfunc min(by: (HKHeartbeatSeriesQueryDescriptor.Heartbeat, HKHeartbeatSeriesQueryDescriptor.Heartbeat) -> Bool) -> HKHeartbeatSeriesQueryDescriptor.Heartbeat?\nReturns the minimum element in the asynchronous sequence, using the given predicate as the comparison between elements."
  },
  {
    "title": "max(by:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkheartbeatseriesquerydescriptor/results/3916404-max",
    "html": "Parameters\nareInIncreasingOrder\n\nA predicate that returns true if its first argument should be ordered before its second argument; otherwise, false.\n\nReturn Value\n\nThe sequence’s minimum element, according to areInIncreasingOrder. If the sequence has no elements, returns nil.\n\nDiscussion\n\nUse this method when the asynchronous sequence’s values don’t conform to Comparable, or when you want to apply a custom ordering to the sequence.\n\nThe predicate must be a strict weak ordering over the elements. That is, for any elements a, b, and c, the following conditions must hold:\n\nareInIncreasingOrder(a, a) is always false. (Irreflexivity)\n\nIf areInIncreasingOrder(a, b) and areInIncreasingOrder(b, c) are both true, then areInIncreasingOrder(a, c) is also true. (Transitive comparability)\n\nTwo elements are incomparable if neither is ordered before the other according to the predicate. If a and b are incomparable, and b and c are incomparable, then a and c are also incomparable. (Transitive incomparability)\n\nThe following example uses an enumeration of playing cards ranks, Rank, which ranges from ace (low) to king (high). An asynchronous sequence called RankCounter produces all elements of the array. The predicate provided to the max(by:) method sorts ranks based on their rawValue:\n\nenum Rank: Int {\n    case ace = 1, two, three, four, five, six, seven, eight, nine, ten, jack, queen, king\n}\n\n\nlet max = await RankCounter()\n    .max { $0.rawValue < $1.rawValue }\nprint(max ?? \"none\")\n// Prints \"king\"\n\nSee Also\nFinding Elements\nfunc contains(HKHeartbeatSeriesQueryDescriptor.Heartbeat) -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains the given element.\nfunc contains(where: (HKHeartbeatSeriesQueryDescriptor.Heartbeat) -> Bool) -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains an element that satisfies the given predicate.\nfunc allSatisfy((HKHeartbeatSeriesQueryDescriptor.Heartbeat) -> Bool) -> Bool\nReturns a Boolean value that indicates whether all elements produced by the asynchronous sequence satisfy the given predicate.\nfunc first(where: (HKHeartbeatSeriesQueryDescriptor.Heartbeat) -> Bool) -> HKHeartbeatSeriesQueryDescriptor.Heartbeat?\nReturns the first element of the sequence that satisfies the given predicate.\nfunc min(by: (HKHeartbeatSeriesQueryDescriptor.Heartbeat, HKHeartbeatSeriesQueryDescriptor.Heartbeat) -> Bool) -> HKHeartbeatSeriesQueryDescriptor.Heartbeat?\nReturns the minimum element in the asynchronous sequence, using the given predicate as the comparison between elements."
  },
  {
    "title": "prefix(while:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkheartbeatseriesquerydescriptor/results/3916410-prefix",
    "html": "Parameters\npredicate\n\nA closure that takes an element as a parameter and returns a Boolean value indicating whether the element should be included in the modified sequence.\n\nReturn Value\n\nAn asynchronous sequence of the initial, consecutive elements that satisfy predicate.\n\nDiscussion\n\nUse prefix(while:) to produce values while elements from the base sequence meet a condition you specify. The modified sequence ends when the predicate closure returns false.\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 10. The prefix(while:) method causes the modified sequence to pass along values so long as they aren’t divisible by 2 and 3. Upon reaching 6, the sequence ends:\n\nlet stream = Counter(howHigh: 10)\n    .prefix { $0 % 2 != 0 || $0 % 3 != 0 }\nfor try await number in stream {\n    print(number, terminator: \" \")\n}\n// Prints \"1 2 3 4 5 \"\n\nSee Also\nSelecting Elements\nfunc prefix(Int) -> AsyncPrefixSequence<HKHeartbeatSeriesQueryDescriptor.Results>\nReturns an asynchronous sequence, up to the specified maximum length, containing the initial elements of the base asynchronous sequence."
  },
  {
    "title": "prefix(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkheartbeatseriesquerydescriptor/results/3916408-prefix",
    "html": "Parameters\ncount\n\nThe maximum number of elements to return. The value of count must be greater than or equal to zero.\n\nReturn Value\n\nAn asynchronous sequence starting at the beginning of the base sequence with at most count elements.\n\nDiscussion\n\nUse prefix(_:) to reduce the number of elements produced by the asynchronous sequence.\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 10. The prefix(_:) method causes the modified sequence to pass through the first six values, then end.\n\nfor await number in Counter(howHigh: 10).prefix(6) {\n    print(number, terminator: \" \")\n}\n// Prints \"1 2 3 4 5 6 \"\n\n\nIf the count passed to prefix(_:) exceeds the number of elements in the base sequence, the result contains all of the elements in the sequence.\n\nSee Also\nSelecting Elements\nfunc prefix(while: (HKHeartbeatSeriesQueryDescriptor.Heartbeat) -> Bool) -> AsyncPrefixWhileSequence<HKHeartbeatSeriesQueryDescriptor.Results>\nReturns an asynchronous sequence, containing the initial, consecutive elements of the base sequence that satisfy the given predicate."
  },
  {
    "title": "HKWeatherCondition.haze | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkweathercondition/haze",
    "html": "See Also\nWeather Conditions\ncase none\nThe weather condition is unknown or irrelevant.\ncase clear\nThe weather condition is clear.\ncase fair\nThe weather condition is fair.\ncase partlyCloudy\nThe weather condition is partly cloudy.\ncase mostlyCloudy\nThe weather condition is mostly cloudy.\ncase cloudy\nThe weather condition is cloudy.\ncase foggy\nThe weather condition is foggy.\ncase windy\nThe weather condition is windy.\ncase blustery\nThe weather condition is blustery.\ncase smoky\nThe weather condition is smoky.\ncase dust\nThe weather condition is dust.\ncase snow\nThe weather condition is snow.\ncase hail\nThe weather condition is hail.\ncase sleet\nThe weather condition is sleet.\ncase freezingDrizzle\nThe weather condition is freezing drizzle.\ncase freezingRain\nThe weather condition is freezing rain.\ncase mixedRainAndHail\nThe weather condition is mixed rain and hail.\ncase mixedRainAndSnow\nThe weather condition is mixed rain and snow.\ncase mixedRainAndSleet\nThe weather condition is mixed rain and sleet.\ncase mixedSnowAndSleet\nThe weather condition is mixed snow and sleet.\ncase drizzle\nThe weather condition is drizzle.\ncase scatteredShowers\nThe weather condition is scattered showers.\ncase showers\nThe weather condition is showers.\ncase thunderstorms\nThe weather condition is thunderstorms.\ncase tropicalStorm\nThe weather condition is tropical storm.\ncase hurricane\nThe weather condition is hurricane.\ncase tornado\nThe weather condition is tornado."
  },
  {
    "title": "drop(while:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkheartbeatseriesquerydescriptor/results/3916387-drop",
    "html": "Parameters\npredicate\n\nA closure that takes an element as a parameter and returns a Boolean value indicating whether to drop the element from the modified sequence.\n\nReturn Value\n\nAn asynchronous sequence that skips over values from the base sequence until the provided closure returns false.\n\nDiscussion\n\nUse drop(while:) to omit elements from an asynchronous sequence until the element received meets a condition you specify.\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 10. The drop(while:) method causes the modified sequence to ignore received values until it encounters one that is divisible by 3:\n\nlet stream = Counter(howHigh: 10)\n    .drop { $0 % 3 != 0 }\nfor await number in stream {\n    print(number, terminator: \" \")\n}\n// Prints \"3 4 5 6 7 8 9 10 \"\n\n\nAfter the predicate returns false, the sequence never executes it again, and from then on the sequence passes through elements from its underlying sequence as-is.\n\nSee Also\nExcluding Elements\nfunc dropFirst(Int) -> AsyncDropFirstSequence<HKHeartbeatSeriesQueryDescriptor.Results>\nOmits a specified number of elements from the base asynchronous sequence, then passes through all remaining elements.\nfunc filter((HKHeartbeatSeriesQueryDescriptor.Heartbeat) -> Bool) -> AsyncFilterSequence<HKHeartbeatSeriesQueryDescriptor.Results>\nCreates an asynchronous sequence that contains, in order, the elements of the base sequence that satisfy the given predicate."
  },
  {
    "title": "HKWeatherCondition.blustery | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkweathercondition/blustery",
    "html": "See Also\nWeather Conditions\ncase none\nThe weather condition is unknown or irrelevant.\ncase clear\nThe weather condition is clear.\ncase fair\nThe weather condition is fair.\ncase partlyCloudy\nThe weather condition is partly cloudy.\ncase mostlyCloudy\nThe weather condition is mostly cloudy.\ncase cloudy\nThe weather condition is cloudy.\ncase foggy\nThe weather condition is foggy.\ncase haze\nThe weather condition is hazy.\ncase windy\nThe weather condition is windy.\ncase smoky\nThe weather condition is smoky.\ncase dust\nThe weather condition is dust.\ncase snow\nThe weather condition is snow.\ncase hail\nThe weather condition is hail.\ncase sleet\nThe weather condition is sleet.\ncase freezingDrizzle\nThe weather condition is freezing drizzle.\ncase freezingRain\nThe weather condition is freezing rain.\ncase mixedRainAndHail\nThe weather condition is mixed rain and hail.\ncase mixedRainAndSnow\nThe weather condition is mixed rain and snow.\ncase mixedRainAndSleet\nThe weather condition is mixed rain and sleet.\ncase mixedSnowAndSleet\nThe weather condition is mixed snow and sleet.\ncase drizzle\nThe weather condition is drizzle.\ncase scatteredShowers\nThe weather condition is scattered showers.\ncase showers\nThe weather condition is showers.\ncase thunderstorms\nThe weather condition is thunderstorms.\ncase tropicalStorm\nThe weather condition is tropical storm.\ncase hurricane\nThe weather condition is hurricane.\ncase tornado\nThe weather condition is tornado."
  },
  {
    "title": "HKWorkoutRouteQueryDescriptor.Results.AsyncIterator | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkoutroutequerydescriptor/results/asynciterator",
    "html": "See Also\nCreating an Iterator\nfunc makeAsyncIterator() -> HKWorkoutRouteQueryDescriptor.Results.Iterator\nCreates the asynchronous iterator that produces results from this asynchronous sequence.\nstruct HKWorkoutRouteQueryDescriptor.Results.Iterator\nAn iterator for accessing individual locations from the workout route.\ntypealias HKWorkoutRouteQueryDescriptor.Results.Element\nA location with a timestamp."
  },
  {
    "title": "init(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquantityseriessamplequerydescriptor/options/3916432-init",
    "html": "Parameters\nsequence\n\nThe elements to use as members of the new set.\n\nDiscussion\n\nUse this initializer to create a new set from an existing sequence, like an array or a range:\n\nlet validIndices = Set(0..<7).subtracting([2, 4, 5])\nprint(validIndices)\n// Prints \"[6, 0, 1, 3]\"\n\nSee Also\nCreating Options\ninit()\nCreates an empty option set.\ninit(arrayLiteral: HKQuantitySeriesSampleQueryDescriptor.Options...)\nCreates a set containing the elements of the given array literal.\ninit(rawValue: Int)\nCreates a set that includes an option that corresponds to the provided raw value.\ntypealias HKQuantitySeriesSampleQueryDescriptor.Options.RawValue\nThe raw value for an option.\nlet rawValue: Int\nThe raw value for the options."
  },
  {
    "title": "updatedStatistics | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkstatisticscollectionquerydescriptor/result/3916557-updatedstatistics",
    "html": "See Also\nAccessing Statistical Data\nlet statisticsCollection: HKStatisticsCollection\nA collection of statistics, representing the results calculated over separate time intervals."
  },
  {
    "title": "HKHeartRateRecoveryTestType.predictionNonExercise | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkheartraterecoverytesttype/predictionnonexercise",
    "html": "See Also\nHeart-rate recovery tests\ncase maxExercise\nMeasures a person’s actual heart-rate recovery.\ncase predictionSubMaxExercise\nA test that estimates a person’s heart-rate recovery using lower-intensity exercise."
  },
  {
    "title": "next() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkstatisticscollectionquerydescriptor/results/iterator/3916563-next",
    "html": "Discussion\n\nA long-running query created by an HKStatisticsCollectionQueryDescriptor continues to monitor the HealthKit store until canceled. After you cancel the query, the next()method returns nil.\n\nRelationships\nFrom Protocol\nAsyncIteratorProtocol\nSee Also\nIterating Over Results\ntypealias HKStatisticsCollectionQueryDescriptor.Results.Iterator.Element\nThe type for results returned by the active summary iterator."
  },
  {
    "title": "statisticsCollection | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkstatisticscollectionquerydescriptor/result/3916556-statisticscollection",
    "html": "See Also\nAccessing Statistical Data\nlet updatedStatistics: [HKStatistics]?\nA collection of statistics that have changed."
  },
  {
    "title": "HKStatisticsCollectionQueryDescriptor.Results.Iterator.Element | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkstatisticscollectionquerydescriptor/results/iterator/element",
    "html": "See Also\nIterating Over Results\nfunc next() -> HKStatisticsCollectionQueryDescriptor.Results.Element?\nAsynchronously waits for the next element and returns it."
  },
  {
    "title": "==(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkheartbeatseriesquerydescriptor/heartbeat/3916366",
    "html": "Parameters\nlhs\n\nThe first heartbeat to compare.\n\nrhs\n\nThe second heartbeat to compare.\n\nSee Also\nComparing Heartbeats\nfunc hash(into: inout Hasher)\nHashes the essential components of the heartbeat by passing them into the given hash function.\nvar hashValue: Int\nThe hashed value for the heartbeat.\nstatic func != (HKHeartbeatSeriesQueryDescriptor.Heartbeat, HKHeartbeatSeriesQueryDescriptor.Heartbeat) -> Bool\nIndicates whether two heartbeats are unequal."
  },
  {
    "title": "HKWorkoutSwimmingLocationType.openWater | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkoutswimminglocationtype/openwater",
    "html": "See Also\nSwimming Locations\ncase pool\nThe user swam in a pool.\ncase unknown\nThe swimming location could not be determined."
  },
  {
    "title": "hashValue | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkheartbeatseriesquerydescriptor/heartbeat/3916368-hashvalue",
    "html": "Relationships\nFrom Protocol\nHashable\nSee Also\nComparing Heartbeats\nfunc hash(into: inout Hasher)\nHashes the essential components of the heartbeat by passing them into the given hash function.\nstatic func == (HKHeartbeatSeriesQueryDescriptor.Heartbeat, HKHeartbeatSeriesQueryDescriptor.Heartbeat) -> Bool\nIndicates whether two heartbeats are equal.\nstatic func != (HKHeartbeatSeriesQueryDescriptor.Heartbeat, HKHeartbeatSeriesQueryDescriptor.Heartbeat) -> Bool\nIndicates whether two heartbeats are unequal."
  },
  {
    "title": "hash(into:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkheartbeatseriesquerydescriptor/heartbeat/3916367-hash",
    "html": "Parameters\nhasher\n\nThe hash function to use when combining the components of the heartbeat.\n\nRelationships\nFrom Protocol\nHashable\nSee Also\nComparing Heartbeats\nvar hashValue: Int\nThe hashed value for the heartbeat.\nstatic func == (HKHeartbeatSeriesQueryDescriptor.Heartbeat, HKHeartbeatSeriesQueryDescriptor.Heartbeat) -> Bool\nIndicates whether two heartbeats are equal.\nstatic func != (HKHeartbeatSeriesQueryDescriptor.Heartbeat, HKHeartbeatSeriesQueryDescriptor.Heartbeat) -> Bool\nIndicates whether two heartbeats are unequal."
  },
  {
    "title": "filter(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquantityseriessamplequerydescriptor/results/3916494-filter",
    "html": "Parameters\nisIncluded\n\nA closure that takes an element of the asynchronous sequence as its argument and returns a Boolean value that indicates whether to include the element in the filtered sequence.\n\nReturn Value\n\nAn asynchronous sequence that contains, in order, the elements of the base sequence that satisfy the given predicate.\n\nDiscussion\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 10. The filter(_:) method returns true for even values and false for odd values, thereby filtering out the odd values:\n\nlet stream = Counter(howHigh: 10)\n    .filter { $0 % 2 == 0 }\nfor await number in stream {\n    print(number, terminator: \" \")\n}\n// Prints \"2 4 6 8 10 \"\n\nSee Also\nExcluding Elements\nfunc dropFirst(Int) -> AsyncDropFirstSequence<HKQuantitySeriesSampleQueryDescriptor.Results>\nOmits a specified number of elements from the base asynchronous sequence, then passes through all remaining elements.\nfunc drop(while: (HKQuantitySeriesSampleQueryDescriptor.Result) -> Bool) -> AsyncDropWhileSequence<HKQuantitySeriesSampleQueryDescriptor.Results>\nOmits elements from the base asynchronous sequence until a given closure returns false, after which it passes through all remaining elements."
  },
  {
    "title": "drop(while:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkoutroutequerydescriptor/results/3916642-drop",
    "html": "Parameters\npredicate\n\nA closure that takes an element as a parameter and returns a Boolean value indicating whether to drop the element from the modified sequence.\n\nReturn Value\n\nAn asynchronous sequence that skips over values from the base sequence until the provided closure returns false.\n\nDiscussion\n\nUse drop(while:) to omit elements from an asynchronous sequence until the element received meets a condition you specify.\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 10. The drop(while:) method causes the modified sequence to ignore received values until it encounters one that is divisible by 3:\n\nlet stream = Counter(howHigh: 10)\n    .drop { $0 % 3 != 0 }\nfor await number in stream {\n    print(number, terminator: \" \")\n}\n// Prints \"3 4 5 6 7 8 9 10 \"\n\n\nAfter the predicate returns false, the sequence never executes it again, and from then on the sequence passes through elements from its underlying sequence as-is.\n\nSee Also\nExcluding Elements\nfunc dropFirst(Int) -> AsyncDropFirstSequence<HKWorkoutRouteQueryDescriptor.Results>\nOmits a specified number of elements from the base asynchronous sequence, then passes through all remaining elements.\nfunc filter((CLLocation) -> Bool) -> AsyncFilterSequence<HKWorkoutRouteQueryDescriptor.Results>\nCreates an asynchronous sequence that contains, in order, the elements of the base sequence that satisfy the given predicate."
  },
  {
    "title": "dropFirst(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkheartbeatseriesquerydescriptor/results/3916389-dropfirst",
    "html": "Parameters\ncount\n\nThe number of elements to drop from the beginning of the sequence. count must be greater than or equal to zero.\n\nReturn Value\n\nAn asynchronous sequence that drops the first count elements from the base sequence.\n\nDiscussion\n\nUse dropFirst(_:) when you want to drop the first n elements from the base sequence and pass through the remaining elements.\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 10. The dropFirst(_:) method causes the modified sequence to ignore the values 1 through 3, and instead emit 4 through 10:\n\nfor await number in Counter(howHigh: 10).dropFirst(3) {\n    print(number, terminator: \" \")\n}\n// Prints \"4 5 6 7 8 9 10 \"\n\n\nIf the number of elements to drop exceeds the number of elements in the sequence, the result is an empty sequence.\n\nSee Also\nExcluding Elements\nfunc drop(while: (HKHeartbeatSeriesQueryDescriptor.Heartbeat) -> Bool) -> AsyncDropWhileSequence<HKHeartbeatSeriesQueryDescriptor.Results>\nOmits elements from the base asynchronous sequence until a given closure returns false, after which it passes through all remaining elements.\nfunc filter((HKHeartbeatSeriesQueryDescriptor.Heartbeat) -> Bool) -> AsyncFilterSequence<HKHeartbeatSeriesQueryDescriptor.Results>\nCreates an asynchronous sequence that contains, in order, the elements of the base sequence that satisfy the given predicate."
  },
  {
    "title": "filter(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkheartbeatseriesquerydescriptor/results/3916391-filter",
    "html": "Parameters\nisIncluded\n\nA closure that takes an element of the asynchronous sequence as its argument and returns a Boolean value that indicates whether to include the element in the filtered sequence.\n\nReturn Value\n\nAn asynchronous sequence that contains, in order, the elements of the base sequence that satisfy the given predicate.\n\nDiscussion\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 10. The filter(_:) method returns true for even values and false for odd values, thereby filtering out the odd values:\n\nlet stream = Counter(howHigh: 10)\n    .filter { $0 % 2 == 0 }\nfor await number in stream {\n    print(number, terminator: \" \")\n}\n// Prints \"2 4 6 8 10 \"\n\nSee Also\nExcluding Elements\nfunc drop(while: (HKHeartbeatSeriesQueryDescriptor.Heartbeat) -> Bool) -> AsyncDropWhileSequence<HKHeartbeatSeriesQueryDescriptor.Results>\nOmits elements from the base asynchronous sequence until a given closure returns false, after which it passes through all remaining elements.\nfunc dropFirst(Int) -> AsyncDropFirstSequence<HKHeartbeatSeriesQueryDescriptor.Results>\nOmits a specified number of elements from the base asynchronous sequence, then passes through all remaining elements."
  },
  {
    "title": "map(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkheartbeatseriesquerydescriptor/results/3916400-map",
    "html": "Parameters\ntransform\n\nA mapping closure. transform accepts an element of this sequence as its parameter and returns a transformed value of the same or of a different type.\n\nReturn Value\n\nAn asynchronous sequence that contains, in order, the elements produced by the transform closure.\n\nDiscussion\n\nUse the map(_:) method to transform every element received from a base asynchronous sequence. Typically, you use this to transform from one type of element to another.\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 5. The closure provided to the map(_:) method takes each Int and looks up a corresponding String from a romanNumeralDict dictionary. This means the outer for await in loop iterates over String instances instead of the underlying Int values that Counter produces:\n\nlet romanNumeralDict: [Int: String] =\n    [1: \"I\", 2: \"II\", 3: \"III\", 5: \"V\"]\n\n\nlet stream = Counter(howHigh: 5)\n    .map { romanNumeralDict[$0] ?? \"(unknown)\" }\nfor await numeral in stream {\n    print(numeral, terminator: \" \")\n}\n// Prints \"I II III (unknown) V \"\n\nSee Also\nTransforming a Series\nfunc map<Transformed>((HKHeartbeatSeriesQueryDescriptor.Heartbeat) -> Transformed) -> AsyncThrowingMapSequence<HKHeartbeatSeriesQueryDescriptor.Results, Transformed>\nCreates an asynchronous sequence that maps the given error-throwing closure over the asynchronous sequence’s elements.\nfunc reduce<Result>(Result, (Result, HKHeartbeatSeriesQueryDescriptor.Heartbeat) -> Result) -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure.\nfunc reduce<Result>(into: Result, (inout Result, HKHeartbeatSeriesQueryDescriptor.Heartbeat) -> Void) -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure, given a mutable initial value.\nfunc compactMap<ElementOfResult>((HKHeartbeatSeriesQueryDescriptor.Heartbeat) -> ElementOfResult?) -> AsyncCompactMapSequence<HKHeartbeatSeriesQueryDescriptor.Results, ElementOfResult>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements, omitting results that don’t return a value.\nfunc compactMap<ElementOfResult>((HKHeartbeatSeriesQueryDescriptor.Heartbeat) -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<HKHeartbeatSeriesQueryDescriptor.Results, ElementOfResult>\nCreates an asynchronous sequence that maps an error-throwing closure over the base sequence’s elements, omitting results that don’t return a value.\nfunc flatMap<SegmentOfResult>((HKHeartbeatSeriesQueryDescriptor.Heartbeat) -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<HKHeartbeatSeriesQueryDescriptor.Results, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given error-throwing transformation with each element of this sequence.\nfunc flatMap<SegmentOfResult>((HKHeartbeatSeriesQueryDescriptor.Heartbeat) -> SegmentOfResult) -> AsyncFlatMapSequence<HKHeartbeatSeriesQueryDescriptor.Results, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given transformation with each element of this sequence."
  },
  {
    "title": "reduce(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkheartbeatseriesquerydescriptor/results/3916412-reduce",
    "html": "Parameters\ninitialResult\n\nThe value to use as the initial accumulating value. The nextPartialResult closure receives initialResult the first time the closure runs.\n\nnextPartialResult\n\nA closure that combines an accumulating value and an element of the asynchronous sequence into a new accumulating value, for use in the next call of the nextPartialResult closure or returned to the caller.\n\nReturn Value\n\nThe final accumulated value. If the sequence has no elements, the result is initialResult.\n\nDiscussion\n\nUse the reduce(_:_:) method to produce a single value from the elements of an entire sequence. For example, you can use this method on an sequence of numbers to find their sum or product.\n\nThe nextPartialResult closure executes sequentially with an accumulating value initialized to initialResult and each element of the sequence.\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 4. The reduce(_:_:) method sums the values received from the asynchronous sequence.\n\nlet sum = await Counter(howHigh: 4)\n    .reduce(0) {\n        $0 + $1\n    }\nprint(sum)\n// Prints \"10\"\n\nSee Also\nTransforming a Series\nfunc map<Transformed>((HKHeartbeatSeriesQueryDescriptor.Heartbeat) -> Transformed) -> AsyncMapSequence<HKHeartbeatSeriesQueryDescriptor.Results, Transformed>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements.\nfunc map<Transformed>((HKHeartbeatSeriesQueryDescriptor.Heartbeat) -> Transformed) -> AsyncThrowingMapSequence<HKHeartbeatSeriesQueryDescriptor.Results, Transformed>\nCreates an asynchronous sequence that maps the given error-throwing closure over the asynchronous sequence’s elements.\nfunc reduce<Result>(into: Result, (inout Result, HKHeartbeatSeriesQueryDescriptor.Heartbeat) -> Void) -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure, given a mutable initial value.\nfunc compactMap<ElementOfResult>((HKHeartbeatSeriesQueryDescriptor.Heartbeat) -> ElementOfResult?) -> AsyncCompactMapSequence<HKHeartbeatSeriesQueryDescriptor.Results, ElementOfResult>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements, omitting results that don’t return a value.\nfunc compactMap<ElementOfResult>((HKHeartbeatSeriesQueryDescriptor.Heartbeat) -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<HKHeartbeatSeriesQueryDescriptor.Results, ElementOfResult>\nCreates an asynchronous sequence that maps an error-throwing closure over the base sequence’s elements, omitting results that don’t return a value.\nfunc flatMap<SegmentOfResult>((HKHeartbeatSeriesQueryDescriptor.Heartbeat) -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<HKHeartbeatSeriesQueryDescriptor.Results, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given error-throwing transformation with each element of this sequence.\nfunc flatMap<SegmentOfResult>((HKHeartbeatSeriesQueryDescriptor.Heartbeat) -> SegmentOfResult) -> AsyncFlatMapSequence<HKHeartbeatSeriesQueryDescriptor.Results, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given transformation with each element of this sequence."
  },
  {
    "title": "compactMap(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkheartbeatseriesquerydescriptor/results/3916379-compactmap",
    "html": "Parameters\ntransform\n\nA mapping closure. transform accepts an element of this sequence as its parameter and returns a transformed value of the same or of a different type.\n\nReturn Value\n\nAn asynchronous sequence that contains, in order, the non-nil elements produced by the transform closure.\n\nDiscussion\n\nUse the compactMap(_:) method to transform every element received from a base asynchronous sequence, while also discarding any nil results from the closure. Typically, you use this to transform from one type of element to another.\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 5. The closure provided to the compactMap(_:) method takes each Int and looks up a corresponding String from a romanNumeralDict dictionary. Because there is no key for 4, the closure returns nil in this case, which compactMap(_:) omits from the transformed asynchronous sequence.\n\nlet romanNumeralDict: [Int: String] =\n    [1: \"I\", 2: \"II\", 3: \"III\", 5: \"V\"]\n    \nlet stream = Counter(howHigh: 5)\n    .compactMap { romanNumeralDict[$0] }\nfor await numeral in stream {\n    print(numeral, terminator: \" \")\n}\n// Prints \"I II III V \"\n\nSee Also\nTransforming a Series\nfunc map<Transformed>((HKHeartbeatSeriesQueryDescriptor.Heartbeat) -> Transformed) -> AsyncMapSequence<HKHeartbeatSeriesQueryDescriptor.Results, Transformed>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements.\nfunc map<Transformed>((HKHeartbeatSeriesQueryDescriptor.Heartbeat) -> Transformed) -> AsyncThrowingMapSequence<HKHeartbeatSeriesQueryDescriptor.Results, Transformed>\nCreates an asynchronous sequence that maps the given error-throwing closure over the asynchronous sequence’s elements.\nfunc reduce<Result>(Result, (Result, HKHeartbeatSeriesQueryDescriptor.Heartbeat) -> Result) -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure.\nfunc reduce<Result>(into: Result, (inout Result, HKHeartbeatSeriesQueryDescriptor.Heartbeat) -> Void) -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure, given a mutable initial value.\nfunc compactMap<ElementOfResult>((HKHeartbeatSeriesQueryDescriptor.Heartbeat) -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<HKHeartbeatSeriesQueryDescriptor.Results, ElementOfResult>\nCreates an asynchronous sequence that maps an error-throwing closure over the base sequence’s elements, omitting results that don’t return a value.\nfunc flatMap<SegmentOfResult>((HKHeartbeatSeriesQueryDescriptor.Heartbeat) -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<HKHeartbeatSeriesQueryDescriptor.Results, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given error-throwing transformation with each element of this sequence.\nfunc flatMap<SegmentOfResult>((HKHeartbeatSeriesQueryDescriptor.Heartbeat) -> SegmentOfResult) -> AsyncFlatMapSequence<HKHeartbeatSeriesQueryDescriptor.Results, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given transformation with each element of this sequence."
  },
  {
    "title": "flatMap(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkheartbeatseriesquerydescriptor/results/3916397-flatmap",
    "html": "Parameters\ntransform\n\nA mapping closure. transform accepts an element of this sequence as its parameter and returns an AsyncSequence.\n\nReturn Value\n\nA single, flattened asynchronous sequence that contains all elements in all the asynchronous sequences produced by transform.\n\nDiscussion\n\nUse this method to receive a single-level asynchronous sequence when your transformation produces an asynchronous sequence for each element.\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 5. The transforming closure takes the received Int and returns a new Counter that counts that high. For example, when the transform receives 3 from the base sequence, it creates a new Counter that produces the values 1, 2, and 3. The flatMap(_:) method “flattens” the resulting sequence-of-sequences into a single AsyncSequence.\n\nlet stream = Counter(howHigh: 5)\n    .flatMap { Counter(howHigh: $0) }\nfor await number in stream {\n    print(number, terminator: \" \")\n}\n// Prints \"1 1 2 1 2 3 1 2 3 4 1 2 3 4 5 \"\n\nSee Also\nTransforming a Series\nfunc map<Transformed>((HKHeartbeatSeriesQueryDescriptor.Heartbeat) -> Transformed) -> AsyncMapSequence<HKHeartbeatSeriesQueryDescriptor.Results, Transformed>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements.\nfunc map<Transformed>((HKHeartbeatSeriesQueryDescriptor.Heartbeat) -> Transformed) -> AsyncThrowingMapSequence<HKHeartbeatSeriesQueryDescriptor.Results, Transformed>\nCreates an asynchronous sequence that maps the given error-throwing closure over the asynchronous sequence’s elements.\nfunc reduce<Result>(Result, (Result, HKHeartbeatSeriesQueryDescriptor.Heartbeat) -> Result) -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure.\nfunc reduce<Result>(into: Result, (inout Result, HKHeartbeatSeriesQueryDescriptor.Heartbeat) -> Void) -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure, given a mutable initial value.\nfunc compactMap<ElementOfResult>((HKHeartbeatSeriesQueryDescriptor.Heartbeat) -> ElementOfResult?) -> AsyncCompactMapSequence<HKHeartbeatSeriesQueryDescriptor.Results, ElementOfResult>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements, omitting results that don’t return a value.\nfunc compactMap<ElementOfResult>((HKHeartbeatSeriesQueryDescriptor.Heartbeat) -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<HKHeartbeatSeriesQueryDescriptor.Results, ElementOfResult>\nCreates an asynchronous sequence that maps an error-throwing closure over the base sequence’s elements, omitting results that don’t return a value.\nfunc flatMap<SegmentOfResult>((HKHeartbeatSeriesQueryDescriptor.Heartbeat) -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<HKHeartbeatSeriesQueryDescriptor.Results, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given error-throwing transformation with each element of this sequence."
  },
  {
    "title": "makeAsyncIterator() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkattachment/asyncbytes/3952562-makeasynciterator",
    "html": "Relationships\nFrom Protocol\nAsyncSequence\nSee Also\nCreating an iterator\ntypealias HKAttachment.AsyncBytes.AsyncIterator\nThe type of asynchronous iterator that produces elements of this asynchronous sequence.\ntypealias HKAttachment.AsyncBytes.Element\nThe type of element produced by this asynchronous sequence."
  },
  {
    "title": "HKAttachment.AsyncBytes.AsyncIterator | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkattachment/asyncbytes/asynciterator",
    "html": "See Also\nCreating an iterator\nfunc makeAsyncIterator() -> BufferedAsyncByteIterator\nCreates the asynchronous iterator that produces elements of this asynchronous sequence.\ntypealias HKAttachment.AsyncBytes.Element\nThe type of element produced by this asynchronous sequence."
  },
  {
    "title": "HKAttachment.AsyncBytes.Element | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkattachment/asyncbytes/element",
    "html": "See Also\nCreating an iterator\nfunc makeAsyncIterator() -> BufferedAsyncByteIterator\nCreates the asynchronous iterator that produces elements of this asynchronous sequence.\ntypealias HKAttachment.AsyncBytes.AsyncIterator\nThe type of asynchronous iterator that produces elements of this asynchronous sequence."
  },
  {
    "title": "first(where:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkattachment/asyncbytes/3952555-first",
    "html": "Parameters\npredicate\n\nA closure that takes an element of the asynchronous sequence as its argument and returns a Boolean value that indicates whether the element is a match.\n\nReturn Value\n\nThe first element of the sequence that satisfies predicate, or nil if there is no element that satisfies predicate.\n\nDiscussion\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 10. The first(where:) method returns the first member of the sequence that’s evenly divisible by both 2 and 3.\n\nlet divisibleBy2And3 = await Counter(howHigh: 10)\n    .first { $0 % 2 == 0 && $0 % 3 == 0 }\nprint(divisibleBy2And3 ?? \"none\")\n// Prints \"6\"\n\n\nThe predicate executes each time the asynchronous sequence produces an element, until either the predicate finds a match or the sequence ends.\n\nSee Also\nFinding bytes\nfunc contains(UInt8) -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains the given element.\nfunc contains(where: (UInt8) -> Bool) -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains an element that satisfies the given predicate.\nfunc allSatisfy((UInt8) -> Bool) -> Bool\nReturns a Boolean value that indicates whether all elements produced by the asynchronous sequence satisfy the given predicate.\nfunc min() -> UInt8?\nReturns the minimum element in an asynchronous sequence of comparable elements.\nfunc min(by: (UInt8, UInt8) -> Bool) -> UInt8?\nReturns the minimum element in the asynchronous sequence, using the given predicate as the comparison between elements.\nfunc max() -> UInt8?\nReturns the maximum element in an asynchronous sequence of comparable elements.\nfunc max(by: (UInt8, UInt8) -> Bool) -> UInt8?\nReturns the maximum element in the asynchronous sequence, using the given predicate as the comparison between elements."
  },
  {
    "title": "min() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkattachment/asyncbytes/3952571-min",
    "html": "Return Value\n\nThe sequence’s minimum element. If the sequence has no elements, returns nil.\n\nDiscussion\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 10. The min() method returns the minimum value of the sequence.\n\nlet min = await Counter(howHigh: 10)\n    .min()\nprint(min ?? \"none\")\n// Prints \"1\"\n\nSee Also\nFinding bytes\nfunc contains(UInt8) -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains the given element.\nfunc contains(where: (UInt8) -> Bool) -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains an element that satisfies the given predicate.\nfunc allSatisfy((UInt8) -> Bool) -> Bool\nReturns a Boolean value that indicates whether all elements produced by the asynchronous sequence satisfy the given predicate.\nfunc first(where: (UInt8) -> Bool) -> UInt8?\nReturns the first element of the sequence that satisfies the given predicate.\nfunc min(by: (UInt8, UInt8) -> Bool) -> UInt8?\nReturns the minimum element in the asynchronous sequence, using the given predicate as the comparison between elements.\nfunc max() -> UInt8?\nReturns the maximum element in an asynchronous sequence of comparable elements.\nfunc max(by: (UInt8, UInt8) -> Bool) -> UInt8?\nReturns the maximum element in the asynchronous sequence, using the given predicate as the comparison between elements."
  },
  {
    "title": "min(by:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkattachment/asyncbytes/3952573-min",
    "html": "Parameters\nareInIncreasingOrder\n\nA predicate that returns true if its first argument should be ordered before its second argument; otherwise, false.\n\nReturn Value\n\nThe sequence’s minimum element, according to areInIncreasingOrder. If the sequence has no elements, returns nil.\n\nDiscussion\n\nUse this method when the asynchronous sequence’s values don’t conform to Comparable, or when you want to apply a custom ordering to the sequence.\n\nThe predicate must be a strict weak ordering over the elements. That is, for any elements a, b, and c, the following conditions must hold:\n\nareInIncreasingOrder(a, a) is always false. (Irreflexivity)\n\nIf areInIncreasingOrder(a, b) and areInIncreasingOrder(b, c) are both true, then areInIncreasingOrder(a, c) is also true. (Transitive comparability)\n\nTwo elements are incomparable if neither is ordered before the other according to the predicate. If a and b are incomparable, and b and c are incomparable, then a and c are also incomparable. (Transitive incomparability)\n\nThe following example uses an enumeration of playing cards ranks, Rank, which ranges from ace (low) to king (high). An asynchronous sequence called RankCounter produces all elements of the array. The predicate provided to the min(by:) method sorts ranks based on their rawValue:\n\nenum Rank: Int {\n    case ace = 1, two, three, four, five, six, seven, eight, nine, ten, jack, queen, king\n}\n\n\nlet min = await RankCounter()\n    .min { $0.rawValue < $1.rawValue }\nprint(min ?? \"none\")\n// Prints \"ace\"\n\nSee Also\nFinding bytes\nfunc contains(UInt8) -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains the given element.\nfunc contains(where: (UInt8) -> Bool) -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains an element that satisfies the given predicate.\nfunc allSatisfy((UInt8) -> Bool) -> Bool\nReturns a Boolean value that indicates whether all elements produced by the asynchronous sequence satisfy the given predicate.\nfunc first(where: (UInt8) -> Bool) -> UInt8?\nReturns the first element of the sequence that satisfies the given predicate.\nfunc min() -> UInt8?\nReturns the minimum element in an asynchronous sequence of comparable elements.\nfunc max() -> UInt8?\nReturns the maximum element in an asynchronous sequence of comparable elements.\nfunc max(by: (UInt8, UInt8) -> Bool) -> UInt8?\nReturns the maximum element in the asynchronous sequence, using the given predicate as the comparison between elements."
  },
  {
    "title": "max(by:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkattachment/asyncbytes/3952569-max",
    "html": "Parameters\nareInIncreasingOrder\n\nA predicate that returns true if its first argument should be ordered before its second argument; otherwise, false.\n\nReturn Value\n\nThe sequence’s minimum element, according to areInIncreasingOrder. If the sequence has no elements, returns nil.\n\nDiscussion\n\nUse this method when the asynchronous sequence’s values don’t conform to Comparable, or when you want to apply a custom ordering to the sequence.\n\nThe predicate must be a strict weak ordering over the elements. That is, for any elements a, b, and c, the following conditions must hold:\n\nareInIncreasingOrder(a, a) is always false. (Irreflexivity)\n\nIf areInIncreasingOrder(a, b) and areInIncreasingOrder(b, c) are both true, then areInIncreasingOrder(a, c) is also true. (Transitive comparability)\n\nTwo elements are incomparable if neither is ordered before the other according to the predicate. If a and b are incomparable, and b and c are incomparable, then a and c are also incomparable. (Transitive incomparability)\n\nThe following example uses an enumeration of playing cards ranks, Rank, which ranges from ace (low) to king (high). An asynchronous sequence called RankCounter produces all elements of the array. The predicate provided to the max(by:) method sorts ranks based on their rawValue:\n\nenum Rank: Int {\n    case ace = 1, two, three, four, five, six, seven, eight, nine, ten, jack, queen, king\n}\n\n\nlet max = await RankCounter()\n    .max { $0.rawValue < $1.rawValue }\nprint(max ?? \"none\")\n// Prints \"king\"\n\nSee Also\nFinding bytes\nfunc contains(UInt8) -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains the given element.\nfunc contains(where: (UInt8) -> Bool) -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains an element that satisfies the given predicate.\nfunc allSatisfy((UInt8) -> Bool) -> Bool\nReturns a Boolean value that indicates whether all elements produced by the asynchronous sequence satisfy the given predicate.\nfunc first(where: (UInt8) -> Bool) -> UInt8?\nReturns the first element of the sequence that satisfies the given predicate.\nfunc min() -> UInt8?\nReturns the minimum element in an asynchronous sequence of comparable elements.\nfunc min(by: (UInt8, UInt8) -> Bool) -> UInt8?\nReturns the minimum element in the asynchronous sequence, using the given predicate as the comparison between elements.\nfunc max() -> UInt8?\nReturns the maximum element in an asynchronous sequence of comparable elements."
  },
  {
    "title": "prefix(while:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkattachment/asyncbytes/3952577-prefix",
    "html": "Parameters\npredicate\n\nA closure that takes an element as a parameter and returns a Boolean value indicating whether the element should be included in the modified sequence.\n\nReturn Value\n\nAn asynchronous sequence of the initial, consecutive elements that satisfy predicate.\n\nDiscussion\n\nUse prefix(while:) to produce values while elements from the base sequence meet a condition you specify. The modified sequence ends when the predicate closure returns false.\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 10. The prefix(while:) method causes the modified sequence to pass along values so long as they aren’t divisible by 2 and 3. Upon reaching 6, the sequence ends:\n\nlet stream = Counter(howHigh: 10)\n    .prefix { $0 % 2 != 0 || $0 % 3 != 0 }\nfor try await number in stream {\n    print(number, terminator: \" \")\n}\n// Prints \"1 2 3 4 5 \"\n\nSee Also\nSelecting bytes\nfunc prefix(Int) -> AsyncPrefixSequence<HKAttachment.AsyncBytes>\nReturns an asynchronous sequence, up to the specified maximum length, containing the initial elements of the base asynchronous sequence."
  },
  {
    "title": "drop(while:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkattachment/asyncbytes/3952549-drop",
    "html": "Parameters\npredicate\n\nA closure that takes an element as a parameter and returns a Boolean value indicating whether to drop the element from the modified sequence.\n\nReturn Value\n\nAn asynchronous sequence that skips over values from the base sequence until the provided closure returns false.\n\nDiscussion\n\nUse drop(while:) to omit elements from an asynchronous sequence until the element received meets a condition you specify.\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 10. The drop(while:) method causes the modified sequence to ignore received values until it encounters one that is divisible by 3:\n\nlet stream = Counter(howHigh: 10)\n    .drop { $0 % 3 != 0 }\nfor await number in stream {\n    print(number, terminator: \" \")\n}\n// Prints \"3 4 5 6 7 8 9 10 \"\n\n\nAfter the predicate returns false, the sequence never executes it again, and from then on the sequence passes through elements from its underlying sequence as-is.\n\nSee Also\nExcluding bytes\nfunc dropFirst(Int) -> AsyncDropFirstSequence<HKAttachment.AsyncBytes>\nOmits a specified number of elements from the base asynchronous sequence, then passes through all remaining elements.\nfunc filter((UInt8) -> Bool) -> AsyncFilterSequence<HKAttachment.AsyncBytes>\nCreates an asynchronous sequence that contains, in order, the elements of the base sequence that satisfy the given predicate."
  },
  {
    "title": "filter(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkattachment/asyncbytes/3952553-filter",
    "html": "Parameters\nisIncluded\n\nA closure that takes an element of the asynchronous sequence as its argument and returns a Boolean value that indicates whether to include the element in the filtered sequence.\n\nReturn Value\n\nAn asynchronous sequence that contains, in order, the elements of the base sequence that satisfy the given predicate.\n\nDiscussion\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 10. The filter(_:) method returns true for even values and false for odd values, thereby filtering out the odd values:\n\nlet stream = Counter(howHigh: 10)\n    .filter { $0 % 2 == 0 }\nfor await number in stream {\n    print(number, terminator: \" \")\n}\n// Prints \"2 4 6 8 10 \"\n\nSee Also\nExcluding bytes\nfunc drop(while: (UInt8) -> Bool) -> AsyncDropWhileSequence<HKAttachment.AsyncBytes>\nOmits elements from the base asynchronous sequence until a given closure returns false, after which it passes through all remaining elements.\nfunc dropFirst(Int) -> AsyncDropFirstSequence<HKAttachment.AsyncBytes>\nOmits a specified number of elements from the base asynchronous sequence, then passes through all remaining elements."
  },
  {
    "title": "map(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkattachment/asyncbytes/3952563-map",
    "html": "Parameters\ntransform\n\nA mapping closure. transform accepts an element of this sequence as its parameter and returns a transformed value of the same or of a different type.\n\nReturn Value\n\nAn asynchronous sequence that contains, in order, the elements produced by the transform closure.\n\nDiscussion\n\nUse the map(_:) method to transform every element received from a base asynchronous sequence. Typically, you use this to transform from one type of element to another.\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 5. The closure provided to the map(_:) method takes each Int and looks up a corresponding String from a romanNumeralDict dictionary. This means the outer for await in loop iterates over String instances instead of the underlying Int values that Counter produces:\n\nlet romanNumeralDict: [Int: String] =\n    [1: \"I\", 2: \"II\", 3: \"III\", 5: \"V\"]\n\n\nlet stream = Counter(howHigh: 5)\n    .map { romanNumeralDict[$0] ?? \"(unknown)\" }\nfor await numeral in stream {\n    print(numeral, terminator: \" \")\n}\n// Prints \"I II III (unknown) V \"\n\nSee Also\nTransforming bytes\nfunc map<Transformed>((UInt8) -> Transformed) -> AsyncThrowingMapSequence<HKAttachment.AsyncBytes, Transformed>\nCreates an asynchronous sequence that maps the given error-throwing closure over the asynchronous sequence’s elements.\nfunc reduce<Result>(Result, (Result, UInt8) -> Result) -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure.\nfunc reduce<Result>(into: Result, (inout Result, UInt8) -> Void) -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure, given a mutable initial value.\nfunc compactMap<ElementOfResult>((UInt8) -> ElementOfResult?) -> AsyncCompactMapSequence<HKAttachment.AsyncBytes, ElementOfResult>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements, omitting results that don’t return a value.\nfunc compactMap<ElementOfResult>((UInt8) -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<HKAttachment.AsyncBytes, ElementOfResult>\nCreates an asynchronous sequence that maps an error-throwing closure over the base sequence’s elements, omitting results that don’t return a value.\nfunc flatMap<SegmentOfResult>((UInt8) -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<HKAttachment.AsyncBytes, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given error-throwing transformation with each element of this sequence.\nfunc flatMap<SegmentOfResult>((UInt8) -> SegmentOfResult) -> AsyncFlatMapSequence<HKAttachment.AsyncBytes, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given transformation with each element of this sequence."
  },
  {
    "title": "dropFirst(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkattachment/asyncbytes/3952551-dropfirst",
    "html": "Parameters\ncount\n\nThe number of elements to drop from the beginning of the sequence. count must be greater than or equal to zero.\n\nReturn Value\n\nAn asynchronous sequence that drops the first count elements from the base sequence.\n\nDiscussion\n\nUse dropFirst(_:) when you want to drop the first n elements from the base sequence and pass through the remaining elements.\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 10. The dropFirst(_:) method causes the modified sequence to ignore the values 1 through 3, and instead emit 4 through 10:\n\nfor await number in Counter(howHigh: 10).dropFirst(3) {\n    print(number, terminator: \" \")\n}\n// Prints \"4 5 6 7 8 9 10 \"\n\n\nIf the number of elements to drop exceeds the number of elements in the sequence, the result is an empty sequence.\n\nSee Also\nExcluding bytes\nfunc drop(while: (UInt8) -> Bool) -> AsyncDropWhileSequence<HKAttachment.AsyncBytes>\nOmits elements from the base asynchronous sequence until a given closure returns false, after which it passes through all remaining elements.\nfunc filter((UInt8) -> Bool) -> AsyncFilterSequence<HKAttachment.AsyncBytes>\nCreates an asynchronous sequence that contains, in order, the elements of the base sequence that satisfy the given predicate."
  },
  {
    "title": "reduce(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkattachment/asyncbytes/3952579-reduce",
    "html": "Parameters\ninitialResult\n\nThe value to use as the initial accumulating value. The nextPartialResult closure receives initialResult the first time the closure runs.\n\nnextPartialResult\n\nA closure that combines an accumulating value and an element of the asynchronous sequence into a new accumulating value, for use in the next call of the nextPartialResult closure or returned to the caller.\n\nReturn Value\n\nThe final accumulated value. If the sequence has no elements, the result is initialResult.\n\nDiscussion\n\nUse the reduce(_:_:) method to produce a single value from the elements of an entire sequence. For example, you can use this method on an sequence of numbers to find their sum or product.\n\nThe nextPartialResult closure executes sequentially with an accumulating value initialized to initialResult and each element of the sequence.\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 4. The reduce(_:_:) method sums the values received from the asynchronous sequence.\n\nlet sum = await Counter(howHigh: 4)\n    .reduce(0) {\n        $0 + $1\n    }\nprint(sum)\n// Prints \"10\"\n\nSee Also\nTransforming bytes\nfunc map<Transformed>((UInt8) -> Transformed) -> AsyncMapSequence<HKAttachment.AsyncBytes, Transformed>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements.\nfunc map<Transformed>((UInt8) -> Transformed) -> AsyncThrowingMapSequence<HKAttachment.AsyncBytes, Transformed>\nCreates an asynchronous sequence that maps the given error-throwing closure over the asynchronous sequence’s elements.\nfunc reduce<Result>(into: Result, (inout Result, UInt8) -> Void) -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure, given a mutable initial value.\nfunc compactMap<ElementOfResult>((UInt8) -> ElementOfResult?) -> AsyncCompactMapSequence<HKAttachment.AsyncBytes, ElementOfResult>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements, omitting results that don’t return a value.\nfunc compactMap<ElementOfResult>((UInt8) -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<HKAttachment.AsyncBytes, ElementOfResult>\nCreates an asynchronous sequence that maps an error-throwing closure over the base sequence’s elements, omitting results that don’t return a value.\nfunc flatMap<SegmentOfResult>((UInt8) -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<HKAttachment.AsyncBytes, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given error-throwing transformation with each element of this sequence.\nfunc flatMap<SegmentOfResult>((UInt8) -> SegmentOfResult) -> AsyncFlatMapSequence<HKAttachment.AsyncBytes, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given transformation with each element of this sequence."
  },
  {
    "title": "unicodeScalars | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkattachment/asyncbytes/3952582-unicodescalars",
    "html": "See Also\nWorking with text data\nvar characters: AsyncCharacterSequence<HKAttachment.AsyncBytes>\nvar lines: AsyncLineSequence<HKAttachment.AsyncBytes>"
  },
  {
    "title": "map(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkanchoredobjectquerydescriptor/results/3916286-map",
    "html": "Parameters\ntransform\n\nA mapping closure. transform accepts an element of this sequence as its parameter and returns a transformed value of the same or of a different type.\n\nReturn Value\n\nAn asynchronous sequence that contains, in order, the elements produced by the transform closure.\n\nDiscussion\n\nUse the map(_:) method to transform every element received from a base asynchronous sequence. Typically, you use this to transform from one type of element to another.\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 5. The closure provided to the map(_:) method takes each Int and looks up a corresponding String from a romanNumeralDict dictionary. This means the outer for await in loop iterates over String instances instead of the underlying Int values that Counter produces:\n\nlet romanNumeralDict: [Int: String] =\n    [1: \"I\", 2: \"II\", 3: \"III\", 5: \"V\"]\n\n\nlet stream = Counter(howHigh: 5)\n    .map { romanNumeralDict[$0] ?? \"(unknown)\" }\nfor await numeral in stream {\n    print(numeral, terminator: \" \")\n}\n// Prints \"I II III (unknown) V \"\n\nSee Also\nTransforming a Sequence\nfunc map<Transformed>((HKAnchoredObjectQueryDescriptor<Sample>.Result) -> Transformed) -> AsyncThrowingMapSequence<HKAnchoredObjectQueryDescriptor<Sample>.Results, Transformed>\nCreates an asynchronous sequence that maps the given error-throwing closure over the asynchronous sequence’s elements.\nfunc reduce<Result>(Result, (Result, HKAnchoredObjectQueryDescriptor<Sample>.Result) -> Result) -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure.\nfunc reduce<Result>(into: Result, (inout Result, HKAnchoredObjectQueryDescriptor<Sample>.Result) -> Void) -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure, given a mutable initial value.\nfunc compactMap<ElementOfResult>((HKAnchoredObjectQueryDescriptor<Sample>.Result) -> ElementOfResult?) -> AsyncCompactMapSequence<HKAnchoredObjectQueryDescriptor<Sample>.Results, ElementOfResult>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements, omitting results that don’t return a value.\nfunc compactMap<ElementOfResult>((HKAnchoredObjectQueryDescriptor<Sample>.Result) -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<HKAnchoredObjectQueryDescriptor<Sample>.Results, ElementOfResult>\nCreates an asynchronous sequence that maps an error-throwing closure over the base sequence’s elements, omitting results that don’t return a value.\nfunc flatMap<SegmentOfResult>((HKAnchoredObjectQueryDescriptor<Sample>.Result) -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<HKAnchoredObjectQueryDescriptor<Sample>.Results, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given error-throwing transformation with each element of this sequence.\nfunc flatMap<SegmentOfResult>((HKAnchoredObjectQueryDescriptor<Sample>.Result) -> SegmentOfResult) -> AsyncFlatMapSequence<HKAnchoredObjectQueryDescriptor<Sample>.Results, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given transformation with each element of this sequence."
  },
  {
    "title": "filter(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkanchoredobjectquerydescriptor/results/3916277-filter",
    "html": "Parameters\nisIncluded\n\nA closure that takes an element of the asynchronous sequence as its argument and returns a Boolean value that indicates whether to include the element in the filtered sequence.\n\nReturn Value\n\nAn asynchronous sequence that contains, in order, the elements of the base sequence that satisfy the given predicate.\n\nDiscussion\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 10. The filter(_:) method returns true for even values and false for odd values, thereby filtering out the odd values:\n\nlet stream = Counter(howHigh: 10)\n    .filter { $0 % 2 == 0 }\nfor await number in stream {\n    print(number, terminator: \" \")\n}\n// Prints \"2 4 6 8 10 \"\n\nSee Also\nExcluding Elements\nfunc dropFirst(Int) -> AsyncDropFirstSequence<HKAnchoredObjectQueryDescriptor<Sample>.Results>\nOmits a specified number of elements from the base asynchronous sequence, then passes through all remaining elements.\nfunc drop(while: (HKAnchoredObjectQueryDescriptor<Sample>.Result) -> Bool) -> AsyncDropWhileSequence<HKAnchoredObjectQueryDescriptor<Sample>.Results>\nOmits elements from the base asynchronous sequence until a given closure returns false, after which it passes through all remaining elements."
  },
  {
    "title": "allSatisfy(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkelectrocardiogramquerydescriptor/results/3916321-allsatisfy",
    "html": "Parameters\npredicate\n\nA closure that takes an element of the asynchronous sequence as its argument and returns a Boolean value that indicates whether the passed element satisfies a condition.\n\nReturn Value\n\ntrue if the sequence contains only elements that satisfy predicate; otherwise, false.\n\nDiscussion\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 10. The allSatisfy(_:) method checks to see whether all elements produced by the sequence are less than 10.\n\nlet allLessThanTen = await Counter(howHigh: 10)\n    .allSatisfy { $0 < 10 }\nprint(allLessThanTen)\n// Prints \"false\"\n\n\nThe predicate executes each time the asynchronous sequence produces an element, until either the predicate returns false or the sequence ends.\n\nIf the asynchronous sequence is empty, this method returns true.\n\nSee Also\nFinding Elements\nfunc contains(HKElectrocardiogram.VoltageMeasurement) -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains the given element.\nfunc contains(where: (HKElectrocardiogram.VoltageMeasurement) -> Bool) -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains an element that satisfies the given predicate.\nfunc first(where: (HKElectrocardiogram.VoltageMeasurement) -> Bool) -> HKElectrocardiogram.VoltageMeasurement?\nReturns the first element of the sequence that satisfies the given predicate.\nfunc max(by: (HKElectrocardiogram.VoltageMeasurement, HKElectrocardiogram.VoltageMeasurement) -> Bool) -> HKElectrocardiogram.VoltageMeasurement?\nReturns the maximum element in the asynchronous sequence, using the given predicate as the comparison between elements.\nfunc min(by: (HKElectrocardiogram.VoltageMeasurement, HKElectrocardiogram.VoltageMeasurement) -> Bool) -> HKElectrocardiogram.VoltageMeasurement?\nReturns the minimum element in the asynchronous sequence, using the given predicate as the comparison between elements."
  },
  {
    "title": "init(fromValue:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkqueryanchor/1615355-init",
    "html": "Parameters\nvalue\n\nAn anchor value.\n\nReturn Value\n\nAn anchored object corresponding to the same sample as the anchor value.\n\nDiscussion\n\nPrior to iOS 9.0, anchored object queries used anchor values to track the last sample returned by a previous query. Use this method to convert those anchor values into anchor objects.\n\nSee Also\nRelated Documentation\ninit(type: HKSampleType, predicate: NSPredicate?, anchor: HKQueryAnchor?, limit: Int, resultsHandler: (HKAnchoredObjectQuery, [HKSample]?, [HKDeletedObject]?, HKQueryAnchor?, Error?) -> Void)\nInitializes a new anchored object query.\ninit(type: HKSampleType, predicate: NSPredicate?, anchor: Int, limit: Int, completionHandler: (HKAnchoredObjectQuery, [HKSample]?, Int, Error?) -> Void)\nInitializes a new anchored object query."
  },
  {
    "title": "prefix(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkelectrocardiogramquerydescriptor/results/3916352-prefix",
    "html": "Parameters\ncount\n\nThe maximum number of elements to return. The value of count must be greater than or equal to zero.\n\nReturn Value\n\nAn asynchronous sequence starting at the beginning of the base sequence with at most count elements.\n\nDiscussion\n\nUse prefix(_:) to reduce the number of elements produced by the asynchronous sequence.\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 10. The prefix(_:) method causes the modified sequence to pass through the first six values, then end.\n\nfor await number in Counter(howHigh: 10).prefix(6) {\n    print(number, terminator: \" \")\n}\n// Prints \"1 2 3 4 5 6 \"\n\n\nIf the count passed to prefix(_:) exceeds the number of elements in the base sequence, the result contains all of the elements in the sequence.\n\nSee Also\nSelecting Elements\nfunc prefix(while: (HKElectrocardiogram.VoltageMeasurement) -> Bool) -> AsyncPrefixWhileSequence<HKElectrocardiogramQueryDescriptor.Results>\nReturns an asynchronous sequence, containing the initial, consecutive elements of the base sequence that satisfy the given predicate."
  },
  {
    "title": "map(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkelectrocardiogramquerydescriptor/results/3916344-map",
    "html": "Parameters\ntransform\n\nA mapping closure. transform accepts an element of this sequence as its parameter and returns a transformed value of the same or of a different type.\n\nReturn Value\n\nAn asynchronous sequence that contains, in order, the elements produced by the transform closure.\n\nDiscussion\n\nUse the map(_:) method to transform every element received from a base asynchronous sequence. Typically, you use this to transform from one type of element to another.\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 5. The closure provided to the map(_:) method takes each Int and looks up a corresponding String from a romanNumeralDict dictionary. This means the outer for await in loop iterates over String instances instead of the underlying Int values that Counter produces:\n\nlet romanNumeralDict: [Int: String] =\n    [1: \"I\", 2: \"II\", 3: \"III\", 5: \"V\"]\n\n\nlet stream = Counter(howHigh: 5)\n    .map { romanNumeralDict[$0] ?? \"(unknown)\" }\nfor await numeral in stream {\n    print(numeral, terminator: \" \")\n}\n// Prints \"I II III (unknown) V \"\n\nSee Also\nTransforming a Series\nfunc map<Transformed>((HKElectrocardiogram.VoltageMeasurement) -> Transformed) -> AsyncThrowingMapSequence<HKElectrocardiogramQueryDescriptor.Results, Transformed>\nCreates an asynchronous sequence that maps the given error-throwing closure over the asynchronous sequence’s elements.\nfunc reduce<Result>(Result, (Result, HKElectrocardiogram.VoltageMeasurement) -> Result) -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure.\nfunc reduce<Result>(into: Result, (inout Result, HKElectrocardiogram.VoltageMeasurement) -> Void) -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure, given a mutable initial value.\nfunc compactMap<ElementOfResult>((HKElectrocardiogram.VoltageMeasurement) -> ElementOfResult?) -> AsyncCompactMapSequence<HKElectrocardiogramQueryDescriptor.Results, ElementOfResult>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements, omitting results that don’t return a value.\nfunc compactMap<ElementOfResult>((HKElectrocardiogram.VoltageMeasurement) -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<HKElectrocardiogramQueryDescriptor.Results, ElementOfResult>\nCreates an asynchronous sequence that maps an error-throwing closure over the base sequence’s elements, omitting results that don’t return a value.\nfunc flatMap<SegmentOfResult>((HKElectrocardiogram.VoltageMeasurement) -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<HKElectrocardiogramQueryDescriptor.Results, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given error-throwing transformation with each element of this sequence.\nfunc flatMap<SegmentOfResult>((HKElectrocardiogram.VoltageMeasurement) -> SegmentOfResult) -> AsyncFlatMapSequence<HKElectrocardiogramQueryDescriptor.Results, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given transformation with each element of this sequence."
  },
  {
    "title": "HKElectrocardiogramQueryDescriptor.Results.Iterator | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkelectrocardiogramquerydescriptor/results/iterator",
    "html": "Topics\nAccessing the Results\ntypealias HKElectrocardiogramQueryDescriptor.Results.Iterator.Element\nThe type for voltage measurements returned by the iterator.\nfunc next() -> HKElectrocardiogramQueryDescriptor.Results.Element?\nAsynchronously waits for the next measurement and returns it.\nRelationships\nConforms To\nAsyncIteratorProtocol\nSee Also\nCreating an Iterator\nfunc makeAsyncIterator() -> HKElectrocardiogramQueryDescriptor.Results.Iterator\nCreates the asynchronous iterator that produces results from this asynchronous sequence.\ntypealias HKElectrocardiogramQueryDescriptor.Results.AsyncIterator\nAn iterator for accessing individual voltage measurements from an electrocardiogram sample.\ntypealias HKElectrocardiogramQueryDescriptor.Results.Element\nA structure that represents a single voltage measurement."
  },
  {
    "title": "HKElectrocardiogram.Classification.inconclusivePoorReading | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkelectrocardiogram/classification/inconclusivepoorreading",
    "html": "Discussion\n\nApple Watch reports a poor recording when circumstances cause the watch to collect insufficient or inaccurate data, such as when the user wears the watch too loosely on their wrist, or if the user’s arm isn’t resting on a firm surface. The user can make another attempt at measuring their ECG after fixing the issue.\n\nSee Also\nClassifications\ncase sinusRhythm\nThe sample exhibits no signs of atrial fibrillation.\ncase atrialFibrillation\nThe sample exhibits signs of atrial fibrillation.\ncase inconclusiveHighHeartRate\nAn unclassifiable sample caused by a rapid heart rate.\ncase inconclusiveLowHeartRate\nAn unclassifiable sample caused by a heart rate below 50 bpm.\ncase inconclusiveOther\nAn unclassifiable sample caused by an unknown issue.\ncase unrecognized\nA sample classification that this version of HealthKit doesn’t recognize.\ncase notSet\nA sample that doesn’t have an assigned classification."
  },
  {
    "title": "makeAsyncIterator() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkelectrocardiogramquerydescriptor/results/3916343-makeasynciterator",
    "html": "Relationships\nFrom Protocol\nAsyncSequence\nSee Also\nCreating an Iterator\nstruct HKElectrocardiogramQueryDescriptor.Results.Iterator\nAn iterator for accessing individual voltage measurements from the series.\ntypealias HKElectrocardiogramQueryDescriptor.Results.AsyncIterator\nAn iterator for accessing individual voltage measurements from an electrocardiogram sample.\ntypealias HKElectrocardiogramQueryDescriptor.Results.Element\nA structure that represents a single voltage measurement."
  },
  {
    "title": "HKHeartbeatSeriesQueryDescriptor.Results.Iterator | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkheartbeatseriesquerydescriptor/results/iterator",
    "html": "Topics\nAccessing the Results\ntypealias HKHeartbeatSeriesQueryDescriptor.Results.Iterator.Element\nThe type for heartbeat data returned by the iterator.\nfunc next() -> HKHeartbeatSeriesQueryDescriptor.Results.Element?\nAsynchronously waits for the next heartbeat and returns it.\nRelationships\nConforms To\nAsyncIteratorProtocol\nSee Also\nCreating an Iterator\nfunc makeAsyncIterator() -> HKHeartbeatSeriesQueryDescriptor.Results.Iterator\nCreates the asynchronous iterator that produces results from this asynchronous sequence.\ntypealias HKHeartbeatSeriesQueryDescriptor.Results.AsyncIterator\nAn iterator for accessing data about individual heartbeats from a heartbeat series sample.\ntypealias HKHeartbeatSeriesQueryDescriptor.Results.Element\nA structure that represents a single heartbeat from the series."
  },
  {
    "title": "isSuperset(of:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquantityseriessamplequerydescriptor/options/3916450-issuperset",
    "html": "Parameters\nother\n\nA set of the same type as the current set.\n\nReturn Value\n\ntrue if the set is a superset of other; otherwise, false.\n\nDiscussion\n\nSet A is a superset of another set B if every member of B is also a member of A.\n\nlet employees: Set = [\"Alicia\", \"Bethany\", \"Chris\", \"Diana\", \"Eric\"]\nlet attendees: Set = [\"Alicia\", \"Bethany\", \"Diana\"]\nprint(employees.isSuperset(of: attendees))\n// Prints \"true\"\n\nSee Also\nComparing Sets\nfunc isDisjoint(with: HKQuantitySeriesSampleQueryDescriptor.Options) -> Bool\nReturns a Boolean value that indicates whether the set has no members in common with the given set.\nfunc isSubset(of: HKQuantitySeriesSampleQueryDescriptor.Options) -> Bool\nReturns a Boolean value that indicates whether the set is a subset of another set.\nfunc isStrictSubset(of: HKQuantitySeriesSampleQueryDescriptor.Options) -> Bool\nReturns a Boolean value that indicates whether this set is a strict subset of the given set.\nfunc isStrictSuperset(of: HKQuantitySeriesSampleQueryDescriptor.Options) -> Bool\nReturns a Boolean value that indicates whether this set is a strict superset of the given set.\nstatic func != (HKQuantitySeriesSampleQueryDescriptor.Options, HKQuantitySeriesSampleQueryDescriptor.Options) -> Bool\nReturns a Boolean value indicating whether two option sets aren’t equal."
  },
  {
    "title": "contains(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkheartbeatseriesquerydescriptor/results/3916383-contains",
    "html": "Parameters\nsearch\n\nThe element to find in the asynchronous sequence.\n\nReturn Value\n\ntrue if the method found the element in the asynchronous sequence; otherwise, false.\n\nDiscussion\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 10. The contains(_:) method checks to see whether the sequence produces the value 5:\n\nlet containsFive = await Counter(howHigh: 10)\n    .contains(5)\nprint(containsFive)\n// Prints \"true\"\n\nSee Also\nFinding Elements\nfunc contains(where: (HKHeartbeatSeriesQueryDescriptor.Heartbeat) -> Bool) -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains an element that satisfies the given predicate.\nfunc allSatisfy((HKHeartbeatSeriesQueryDescriptor.Heartbeat) -> Bool) -> Bool\nReturns a Boolean value that indicates whether all elements produced by the asynchronous sequence satisfy the given predicate.\nfunc first(where: (HKHeartbeatSeriesQueryDescriptor.Heartbeat) -> Bool) -> HKHeartbeatSeriesQueryDescriptor.Heartbeat?\nReturns the first element of the sequence that satisfies the given predicate.\nfunc max(by: (HKHeartbeatSeriesQueryDescriptor.Heartbeat, HKHeartbeatSeriesQueryDescriptor.Heartbeat) -> Bool) -> HKHeartbeatSeriesQueryDescriptor.Heartbeat?\nReturns the maximum element in the asynchronous sequence, using the given predicate as the comparison between elements.\nfunc min(by: (HKHeartbeatSeriesQueryDescriptor.Heartbeat, HKHeartbeatSeriesQueryDescriptor.Heartbeat) -> Bool) -> HKHeartbeatSeriesQueryDescriptor.Heartbeat?\nReturns the minimum element in the asynchronous sequence, using the given predicate as the comparison between elements."
  },
  {
    "title": "compactMap(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkanchoredobjectquerydescriptor/results/3916269-compactmap",
    "html": "Parameters\ntransform\n\nAn error-throwing mapping closure. transform accepts an element of this sequence as its parameter and returns a transformed value of the same or of a different type. If transform throws an error, the sequence ends.\n\nReturn Value\n\nAn asynchronous sequence that contains, in order, the non-nil elements produced by the transform closure. The sequence ends either when the base sequence ends or when transform throws an error.\n\nDiscussion\n\nUse the compactMap(_:) method to transform every element received from a base asynchronous sequence, while also discarding any nil results from the closure. Typically, you use this to transform from one type of element to another.\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 5. The closure provided to the compactMap(_:) method takes each Int and looks up a corresponding String from a romanNumeralDict dictionary. Since there is no key for 4, the closure returns nil in this case, which compactMap(_:) omits from the transformed asynchronous sequence. When the value is 5, the closure throws MyError, terminating the sequence.\n\nlet romanNumeralDict: [Int: String] =\n    [1: \"I\", 2: \"II\", 3: \"III\", 5: \"V\"]\n\n\ndo {\n    let stream = Counter(howHigh: 5)\n        .compactMap { (value) throws -> String? in\n            if value == 5 {\n                throw MyError()\n            }\n            return romanNumeralDict[value]\n        }\n    for try await numeral in stream {\n        print(numeral, terminator: \" \")\n    }\n} catch {\n    print(\"Error: \\(error)\")\n}\n// Prints \"I II III Error: MyError() \"\n\nSee Also\nTransforming a Sequence\nfunc map<Transformed>((HKAnchoredObjectQueryDescriptor<Sample>.Result) -> Transformed) -> AsyncMapSequence<HKAnchoredObjectQueryDescriptor<Sample>.Results, Transformed>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements.\nfunc map<Transformed>((HKAnchoredObjectQueryDescriptor<Sample>.Result) -> Transformed) -> AsyncThrowingMapSequence<HKAnchoredObjectQueryDescriptor<Sample>.Results, Transformed>\nCreates an asynchronous sequence that maps the given error-throwing closure over the asynchronous sequence’s elements.\nfunc reduce<Result>(Result, (Result, HKAnchoredObjectQueryDescriptor<Sample>.Result) -> Result) -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure.\nfunc reduce<Result>(into: Result, (inout Result, HKAnchoredObjectQueryDescriptor<Sample>.Result) -> Void) -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure, given a mutable initial value.\nfunc compactMap<ElementOfResult>((HKAnchoredObjectQueryDescriptor<Sample>.Result) -> ElementOfResult?) -> AsyncCompactMapSequence<HKAnchoredObjectQueryDescriptor<Sample>.Results, ElementOfResult>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements, omitting results that don’t return a value.\nfunc flatMap<SegmentOfResult>((HKAnchoredObjectQueryDescriptor<Sample>.Result) -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<HKAnchoredObjectQueryDescriptor<Sample>.Results, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given error-throwing transformation with each element of this sequence.\nfunc flatMap<SegmentOfResult>((HKAnchoredObjectQueryDescriptor<Sample>.Result) -> SegmentOfResult) -> AsyncFlatMapSequence<HKAnchoredObjectQueryDescriptor<Sample>.Results, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given transformation with each element of this sequence."
  },
  {
    "title": "HKWorkoutRouteQueryDescriptor.Results.Iterator | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkoutroutequerydescriptor/results/iterator",
    "html": "Topics\nAccessing the Results\ntypealias HKWorkoutRouteQueryDescriptor.Results.Iterator.Element\nThe type for locations returned by the iterator.\nfunc next() -> HKWorkoutRouteQueryDescriptor.Results.Element?\nAsynchronously waits for the next location and returns it.\nRelationships\nConforms To\nAsyncIteratorProtocol\nSee Also\nCreating an Iterator\nfunc makeAsyncIterator() -> HKWorkoutRouteQueryDescriptor.Results.Iterator\nCreates the asynchronous iterator that produces results from this asynchronous sequence.\ntypealias HKWorkoutRouteQueryDescriptor.Results.AsyncIterator\nAn iterator for accessing individual locations from a workout route.\ntypealias HKWorkoutRouteQueryDescriptor.Results.Element\nA location with a timestamp."
  },
  {
    "title": "!=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquantityseriessamplequerydescriptor/result/3916467",
    "html": "Parameters\nlhs\n\nThe first entry to compare.\n\nrhs\n\nThe second entry to compare.\n\nSee Also\nComparing Results\nfunc hash(into: inout Hasher)\nHashes the essential components of the entry by passing them into the given hash function.\nvar hashValue: Int\nThe hashed value for the entry.\nstatic func == (HKQuantitySeriesSampleQueryDescriptor.Result, HKQuantitySeriesSampleQueryDescriptor.Result) -> Bool\nIndicates whether two entries are equal."
  },
  {
    "title": "makeAsyncIterator() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkoutroutequerydescriptor/results/3916654-makeasynciterator",
    "html": "Relationships\nFrom Protocol\nAsyncSequence\nSee Also\nCreating an Iterator\nstruct HKWorkoutRouteQueryDescriptor.Results.Iterator\nAn iterator for accessing individual locations from the workout route.\ntypealias HKWorkoutRouteQueryDescriptor.Results.AsyncIterator\nAn iterator for accessing individual locations from a workout route.\ntypealias HKWorkoutRouteQueryDescriptor.Results.Element\nA location with a timestamp."
  },
  {
    "title": "contains(where:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkoutroutequerydescriptor/results/3916640-contains",
    "html": "Parameters\npredicate\n\nA closure that takes an element of the asynchronous sequence as its argument and returns a Boolean value that indicates whether the passed element represents a match.\n\nReturn Value\n\ntrue if the sequence contains an element that satisfies predicate; otherwise, false.\n\nDiscussion\n\nYou can use the predicate to check for an element of a type that doesn’t conform to the Equatable protocol, or to find an element that satisfies a general condition.\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 10. The contains(where:) method checks to see whether the sequence produces a value divisible by 3:\n\nlet containsDivisibleByThree = await Counter(howHigh: 10)\n    .contains { $0 % 3 == 0 }\nprint(containsDivisibleByThree)\n// Prints \"true\"\n\n\nThe predicate executes each time the asynchronous sequence produces an element, until either the predicate finds a match or the sequence ends.\n\nSee Also\nFinding Elements\nfunc contains(CLLocation) -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains the given element.\nfunc allSatisfy((CLLocation) -> Bool) -> Bool\nReturns a Boolean value that indicates whether all elements produced by the asynchronous sequence satisfy the given predicate.\nfunc first(where: (CLLocation) -> Bool) -> CLLocation?\nReturns the first element of the sequence that satisfies the given predicate.\nfunc min(by: (CLLocation, CLLocation) -> Bool) -> CLLocation?\nReturns the minimum element in the asynchronous sequence, using the given predicate as the comparison between elements.\nfunc max(by: (CLLocation, CLLocation) -> Bool) -> CLLocation?\nReturns the maximum element in the asynchronous sequence, using the given predicate as the comparison between elements."
  },
  {
    "title": "first(where:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkoutroutequerydescriptor/results/3916648-first",
    "html": "Parameters\npredicate\n\nA closure that takes an element of the asynchronous sequence as its argument and returns a Boolean value that indicates whether the element is a match.\n\nReturn Value\n\nThe first element of the sequence that satisfies predicate, or nil if there is no element that satisfies predicate.\n\nDiscussion\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 10. The first(where:) method returns the first member of the sequence that’s evenly divisible by both 2 and 3.\n\nlet divisibleBy2And3 = await Counter(howHigh: 10)\n    .first { $0 % 2 == 0 && $0 % 3 == 0 }\nprint(divisibleBy2And3 ?? \"none\")\n// Prints \"6\"\n\n\nThe predicate executes each time the asynchronous sequence produces an element, until either the predicate finds a match or the sequence ends.\n\nSee Also\nFinding Elements\nfunc contains(CLLocation) -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains the given element.\nfunc contains(where: (CLLocation) -> Bool) -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains an element that satisfies the given predicate.\nfunc allSatisfy((CLLocation) -> Bool) -> Bool\nReturns a Boolean value that indicates whether all elements produced by the asynchronous sequence satisfy the given predicate.\nfunc min(by: (CLLocation, CLLocation) -> Bool) -> CLLocation?\nReturns the minimum element in the asynchronous sequence, using the given predicate as the comparison between elements.\nfunc max(by: (CLLocation, CLLocation) -> Bool) -> CLLocation?\nReturns the maximum element in the asynchronous sequence, using the given predicate as the comparison between elements."
  },
  {
    "title": "prefix(while:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkoutroutequerydescriptor/results/3916665-prefix",
    "html": "Parameters\npredicate\n\nA closure that takes an element as a parameter and returns a Boolean value indicating whether the element should be included in the modified sequence.\n\nReturn Value\n\nAn asynchronous sequence of the initial, consecutive elements that satisfy predicate.\n\nDiscussion\n\nUse prefix(while:) to produce values while elements from the base sequence meet a condition you specify. The modified sequence ends when the predicate closure returns false.\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 10. The prefix(while:) method causes the modified sequence to pass along values so long as they aren’t divisible by 2 and 3. Upon reaching 6, the sequence ends:\n\nlet stream = Counter(howHigh: 10)\n    .prefix { $0 % 2 != 0 || $0 % 3 != 0 }\nfor try await number in stream {\n    print(number, terminator: \" \")\n}\n// Prints \"1 2 3 4 5 \"\n\nSee Also\nSelecting Elements\nfunc prefix(Int) -> AsyncPrefixSequence<HKWorkoutRouteQueryDescriptor.Results>\nReturns an asynchronous sequence, up to the specified maximum length, containing the initial elements of the base asynchronous sequence."
  },
  {
    "title": "contains(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkoutroutequerydescriptor/results/3916638-contains",
    "html": "Parameters\nsearch\n\nThe element to find in the asynchronous sequence.\n\nReturn Value\n\ntrue if the method found the element in the asynchronous sequence; otherwise, false.\n\nDiscussion\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 10. The contains(_:) method checks to see whether the sequence produces the value 5:\n\nlet containsFive = await Counter(howHigh: 10)\n    .contains(5)\nprint(containsFive)\n// Prints \"true\"\n\nSee Also\nFinding Elements\nfunc contains(where: (CLLocation) -> Bool) -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains an element that satisfies the given predicate.\nfunc allSatisfy((CLLocation) -> Bool) -> Bool\nReturns a Boolean value that indicates whether all elements produced by the asynchronous sequence satisfy the given predicate.\nfunc first(where: (CLLocation) -> Bool) -> CLLocation?\nReturns the first element of the sequence that satisfies the given predicate.\nfunc min(by: (CLLocation, CLLocation) -> Bool) -> CLLocation?\nReturns the minimum element in the asynchronous sequence, using the given predicate as the comparison between elements.\nfunc max(by: (CLLocation, CLLocation) -> Bool) -> CLLocation?\nReturns the maximum element in the asynchronous sequence, using the given predicate as the comparison between elements."
  },
  {
    "title": "allSatisfy(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkoutroutequerydescriptor/results/3916632-allsatisfy",
    "html": "Parameters\npredicate\n\nA closure that takes an element of the asynchronous sequence as its argument and returns a Boolean value that indicates whether the passed element satisfies a condition.\n\nReturn Value\n\ntrue if the sequence contains only elements that satisfy predicate; otherwise, false.\n\nDiscussion\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 10. The allSatisfy(_:) method checks to see whether all elements produced by the sequence are less than 10.\n\nlet allLessThanTen = await Counter(howHigh: 10)\n    .allSatisfy { $0 < 10 }\nprint(allLessThanTen)\n// Prints \"false\"\n\n\nThe predicate executes each time the asynchronous sequence produces an element, until either the predicate returns false or the sequence ends.\n\nIf the asynchronous sequence is empty, this method returns true.\n\nSee Also\nFinding Elements\nfunc contains(CLLocation) -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains the given element.\nfunc contains(where: (CLLocation) -> Bool) -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains an element that satisfies the given predicate.\nfunc first(where: (CLLocation) -> Bool) -> CLLocation?\nReturns the first element of the sequence that satisfies the given predicate.\nfunc min(by: (CLLocation, CLLocation) -> Bool) -> CLLocation?\nReturns the minimum element in the asynchronous sequence, using the given predicate as the comparison between elements.\nfunc max(by: (CLLocation, CLLocation) -> Bool) -> CLLocation?\nReturns the maximum element in the asynchronous sequence, using the given predicate as the comparison between elements."
  },
  {
    "title": "min(by:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkoutroutequerydescriptor/results/3916661-min",
    "html": "Parameters\nareInIncreasingOrder\n\nA predicate that returns true if its first argument should be ordered before its second argument; otherwise, false.\n\nReturn Value\n\nThe sequence’s minimum element, according to areInIncreasingOrder. If the sequence has no elements, returns nil.\n\nDiscussion\n\nUse this method when the asynchronous sequence’s values don’t conform to Comparable, or when you want to apply a custom ordering to the sequence.\n\nThe predicate must be a strict weak ordering over the elements. That is, for any elements a, b, and c, the following conditions must hold:\n\nareInIncreasingOrder(a, a) is always false. (Irreflexivity)\n\nIf areInIncreasingOrder(a, b) and areInIncreasingOrder(b, c) are both true, then areInIncreasingOrder(a, c) is also true. (Transitive comparability)\n\nTwo elements are incomparable if neither is ordered before the other according to the predicate. If a and b are incomparable, and b and c are incomparable, then a and c are also incomparable. (Transitive incomparability)\n\nThe following example uses an enumeration of playing cards ranks, Rank, which ranges from ace (low) to king (high). An asynchronous sequence called RankCounter produces all elements of the array. The predicate provided to the min(by:) method sorts ranks based on their rawValue:\n\nenum Rank: Int {\n    case ace = 1, two, three, four, five, six, seven, eight, nine, ten, jack, queen, king\n}\n\n\nlet min = await RankCounter()\n    .min { $0.rawValue < $1.rawValue }\nprint(min ?? \"none\")\n// Prints \"ace\"\n\nSee Also\nFinding Elements\nfunc contains(CLLocation) -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains the given element.\nfunc contains(where: (CLLocation) -> Bool) -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains an element that satisfies the given predicate.\nfunc allSatisfy((CLLocation) -> Bool) -> Bool\nReturns a Boolean value that indicates whether all elements produced by the asynchronous sequence satisfy the given predicate.\nfunc first(where: (CLLocation) -> Bool) -> CLLocation?\nReturns the first element of the sequence that satisfies the given predicate.\nfunc max(by: (CLLocation, CLLocation) -> Bool) -> CLLocation?\nReturns the maximum element in the asynchronous sequence, using the given predicate as the comparison between elements."
  },
  {
    "title": "prefix(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkoutroutequerydescriptor/results/3916663-prefix",
    "html": "Parameters\ncount\n\nThe maximum number of elements to return. The value of count must be greater than or equal to zero.\n\nReturn Value\n\nAn asynchronous sequence starting at the beginning of the base sequence with at most count elements.\n\nDiscussion\n\nUse prefix(_:) to reduce the number of elements produced by the asynchronous sequence.\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 10. The prefix(_:) method causes the modified sequence to pass through the first six values, then end.\n\nfor await number in Counter(howHigh: 10).prefix(6) {\n    print(number, terminator: \" \")\n}\n// Prints \"1 2 3 4 5 6 \"\n\n\nIf the count passed to prefix(_:) exceeds the number of elements in the base sequence, the result contains all of the elements in the sequence.\n\nSee Also\nSelecting Elements\nfunc prefix(while: (CLLocation) -> Bool) -> AsyncPrefixWhileSequence<HKWorkoutRouteQueryDescriptor.Results>\nReturns an asynchronous sequence, containing the initial, consecutive elements of the base sequence that satisfy the given predicate."
  },
  {
    "title": "dropFirst(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkoutroutequerydescriptor/results/3916644-dropfirst",
    "html": "Parameters\ncount\n\nThe number of elements to drop from the beginning of the sequence. count must be greater than or equal to zero.\n\nReturn Value\n\nAn asynchronous sequence that drops the first count elements from the base sequence.\n\nDiscussion\n\nUse dropFirst(_:) when you want to drop the first n elements from the base sequence and pass through the remaining elements.\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 10. The dropFirst(_:) method causes the modified sequence to ignore the values 1 through 3, and instead emit 4 through 10:\n\nfor await number in Counter(howHigh: 10).dropFirst(3) {\n    print(number, terminator: \" \")\n}\n// Prints \"4 5 6 7 8 9 10 \"\n\n\nIf the number of elements to drop exceeds the number of elements in the sequence, the result is an empty sequence.\n\nSee Also\nExcluding Elements\nfunc drop(while: (CLLocation) -> Bool) -> AsyncDropWhileSequence<HKWorkoutRouteQueryDescriptor.Results>\nOmits elements from the base asynchronous sequence until a given closure returns false, after which it passes through all remaining elements.\nfunc filter((CLLocation) -> Bool) -> AsyncFilterSequence<HKWorkoutRouteQueryDescriptor.Results>\nCreates an asynchronous sequence that contains, in order, the elements of the base sequence that satisfy the given predicate."
  },
  {
    "title": "filter(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkoutroutequerydescriptor/results/3916646-filter",
    "html": "Parameters\nisIncluded\n\nA closure that takes an element of the asynchronous sequence as its argument and returns a Boolean value that indicates whether to include the element in the filtered sequence.\n\nReturn Value\n\nAn asynchronous sequence that contains, in order, the elements of the base sequence that satisfy the given predicate.\n\nDiscussion\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 10. The filter(_:) method returns true for even values and false for odd values, thereby filtering out the odd values:\n\nlet stream = Counter(howHigh: 10)\n    .filter { $0 % 2 == 0 }\nfor await number in stream {\n    print(number, terminator: \" \")\n}\n// Prints \"2 4 6 8 10 \"\n\nSee Also\nExcluding Elements\nfunc drop(while: (CLLocation) -> Bool) -> AsyncDropWhileSequence<HKWorkoutRouteQueryDescriptor.Results>\nOmits elements from the base asynchronous sequence until a given closure returns false, after which it passes through all remaining elements.\nfunc dropFirst(Int) -> AsyncDropFirstSequence<HKWorkoutRouteQueryDescriptor.Results>\nOmits a specified number of elements from the base asynchronous sequence, then passes through all remaining elements."
  },
  {
    "title": "HKQuantitySeriesSampleQueryDescriptor.Results.AsyncIterator | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquantityseriessamplequerydescriptor/results/asynciterator",
    "html": "See Also\nCreating an Iterator\nfunc makeAsyncIterator() -> HKQuantitySeriesSampleQueryDescriptor.Results.Iterator\nCreates the asynchronous iterator that produces results from this asynchronous sequence.\nstruct HKQuantitySeriesSampleQueryDescriptor.Results.Iterator\nAn iterator for accessing individual data entries from the series.\ntypealias HKQuantitySeriesSampleQueryDescriptor.Results.Element\nA structure that represents a single data entry from a series."
  },
  {
    "title": "HKQuantitySeriesSampleQueryDescriptor.Results.Element | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquantityseriessamplequerydescriptor/results/element",
    "html": "See Also\nCreating an Iterator\nfunc makeAsyncIterator() -> HKQuantitySeriesSampleQueryDescriptor.Results.Iterator\nCreates the asynchronous iterator that produces results from this asynchronous sequence.\nstruct HKQuantitySeriesSampleQueryDescriptor.Results.Iterator\nAn iterator for accessing individual data entries from the series.\ntypealias HKQuantitySeriesSampleQueryDescriptor.Results.AsyncIterator\nAn iterator for accessing individual data entries from the series."
  },
  {
    "title": "map(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkoutroutequerydescriptor/results/3916655-map",
    "html": "Parameters\ntransform\n\nA mapping closure. transform accepts an element of this sequence as its parameter and returns a transformed value of the same or of a different type.\n\nReturn Value\n\nAn asynchronous sequence that contains, in order, the elements produced by the transform closure.\n\nDiscussion\n\nUse the map(_:) method to transform every element received from a base asynchronous sequence. Typically, you use this to transform from one type of element to another.\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 5. The closure provided to the map(_:) method takes each Int and looks up a corresponding String from a romanNumeralDict dictionary. This means the outer for await in loop iterates over String instances instead of the underlying Int values that Counter produces:\n\nlet romanNumeralDict: [Int: String] =\n    [1: \"I\", 2: \"II\", 3: \"III\", 5: \"V\"]\n\n\nlet stream = Counter(howHigh: 5)\n    .map { romanNumeralDict[$0] ?? \"(unknown)\" }\nfor await numeral in stream {\n    print(numeral, terminator: \" \")\n}\n// Prints \"I II III (unknown) V \"\n\nSee Also\nTransforming a Series\nfunc map<Transformed>((CLLocation) -> Transformed) -> AsyncThrowingMapSequence<HKWorkoutRouteQueryDescriptor.Results, Transformed>\nCreates an asynchronous sequence that maps the given error-throwing closure over the asynchronous sequence’s elements.\nfunc reduce<Result>(Result, (Result, CLLocation) -> Result) -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure.\nfunc reduce<Result>(into: Result, (inout Result, CLLocation) -> Void) -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure, given a mutable initial value.\nfunc compactMap<ElementOfResult>((CLLocation) -> ElementOfResult?) -> AsyncCompactMapSequence<HKWorkoutRouteQueryDescriptor.Results, ElementOfResult>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements, omitting results that don’t return a value.\nfunc compactMap<ElementOfResult>((CLLocation) -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<HKWorkoutRouteQueryDescriptor.Results, ElementOfResult>\nCreates an asynchronous sequence that maps an error-throwing closure over the base sequence’s elements, omitting results that don’t return a value.\nfunc flatMap<SegmentOfResult>((CLLocation) -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<HKWorkoutRouteQueryDescriptor.Results, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given error-throwing transformation with each element of this sequence.\nfunc flatMap<SegmentOfResult>((CLLocation) -> SegmentOfResult) -> AsyncFlatMapSequence<HKWorkoutRouteQueryDescriptor.Results, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given transformation with each element of this sequence."
  },
  {
    "title": "map(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkoutroutequerydescriptor/results/3916657-map",
    "html": "Parameters\ntransform\n\nA mapping closure. transform accepts an element of this sequence as its parameter and returns a transformed value of the same or of a different type. transform can also throw an error, which ends the transformed sequence.\n\nReturn Value\n\nAn asynchronous sequence that contains, in order, the elements produced by the transform closure.\n\nDiscussion\n\nUse the map(_:) method to transform every element received from a base asynchronous sequence. Typically, you use this to transform from one type of element to another.\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 5. The closure provided to the map(_:) method takes each Int and looks up a corresponding String from a romanNumeralDict dictionary. This means the outer for await in loop iterates over String instances instead of the underlying Int values that Counter produces. Also, the dictionary doesn’t provide a key for 4, and the closure throws an error for any key it can’t look up, so receiving this value from Counter ends the modified sequence with an error.\n\nlet romanNumeralDict: [Int: String] =\n    [1: \"I\", 2: \"II\", 3: \"III\", 5: \"V\"]\n\n\ndo {\n    let stream = Counter(howHigh: 5)\n        .map { (value) throws -> String in\n            guard let roman = romanNumeralDict[value] else {\n                throw MyError()\n            }\n            return roman\n        }\n    for try await numeral in stream {\n        print(numeral, terminator: \" \")\n    }\n} catch {\n    print(\"Error: \\(error)\")\n}\n// Prints \"I II III Error: MyError() \"\n\nSee Also\nTransforming a Series\nfunc map<Transformed>((CLLocation) -> Transformed) -> AsyncMapSequence<HKWorkoutRouteQueryDescriptor.Results, Transformed>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements.\nfunc reduce<Result>(Result, (Result, CLLocation) -> Result) -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure.\nfunc reduce<Result>(into: Result, (inout Result, CLLocation) -> Void) -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure, given a mutable initial value.\nfunc compactMap<ElementOfResult>((CLLocation) -> ElementOfResult?) -> AsyncCompactMapSequence<HKWorkoutRouteQueryDescriptor.Results, ElementOfResult>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements, omitting results that don’t return a value.\nfunc compactMap<ElementOfResult>((CLLocation) -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<HKWorkoutRouteQueryDescriptor.Results, ElementOfResult>\nCreates an asynchronous sequence that maps an error-throwing closure over the base sequence’s elements, omitting results that don’t return a value.\nfunc flatMap<SegmentOfResult>((CLLocation) -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<HKWorkoutRouteQueryDescriptor.Results, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given error-throwing transformation with each element of this sequence.\nfunc flatMap<SegmentOfResult>((CLLocation) -> SegmentOfResult) -> AsyncFlatMapSequence<HKWorkoutRouteQueryDescriptor.Results, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given transformation with each element of this sequence."
  },
  {
    "title": "flatMap(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkoutroutequerydescriptor/results/3916650-flatmap",
    "html": "Parameters\ntransform\n\nAn error-throwing mapping closure. transform accepts an element of this sequence as its parameter and returns an AsyncSequence. If transform throws an error, the sequence ends.\n\nReturn Value\n\nA single, flattened asynchronous sequence that contains all elements in all the asynchronous sequences produced by transform. The sequence ends either when the last sequence created from the last element from base sequence ends, or when transform throws an error.\n\nDiscussion\n\nUse this method to receive a single-level asynchronous sequence when your transformation produces an asynchronous sequence for each element.\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 5. The transforming closure takes the received Int and returns a new Counter that counts that high. For example, when the transform receives 3 from the base sequence, it creates a new Counter that produces the values 1, 2, and 3. The flatMap(_:) method “flattens” the resulting sequence-of-sequences into a single AsyncSequence. However, when the closure receives 4, it throws an error, terminating the sequence.\n\ndo {\n    let stream = Counter(howHigh: 5)\n        .flatMap { (value) -> Counter in\n            if value == 4 {\n                throw MyError()\n            }\n            return Counter(howHigh: value)\n        }\n    for try await number in stream {\n        print(number, terminator: \" \")\n    }\n} catch {\n    print(error)\n}\n// Prints \"1 1 2 1 2 3 MyError() \"\n\nSee Also\nTransforming a Series\nfunc map<Transformed>((CLLocation) -> Transformed) -> AsyncMapSequence<HKWorkoutRouteQueryDescriptor.Results, Transformed>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements.\nfunc map<Transformed>((CLLocation) -> Transformed) -> AsyncThrowingMapSequence<HKWorkoutRouteQueryDescriptor.Results, Transformed>\nCreates an asynchronous sequence that maps the given error-throwing closure over the asynchronous sequence’s elements.\nfunc reduce<Result>(Result, (Result, CLLocation) -> Result) -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure.\nfunc reduce<Result>(into: Result, (inout Result, CLLocation) -> Void) -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure, given a mutable initial value.\nfunc compactMap<ElementOfResult>((CLLocation) -> ElementOfResult?) -> AsyncCompactMapSequence<HKWorkoutRouteQueryDescriptor.Results, ElementOfResult>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements, omitting results that don’t return a value.\nfunc compactMap<ElementOfResult>((CLLocation) -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<HKWorkoutRouteQueryDescriptor.Results, ElementOfResult>\nCreates an asynchronous sequence that maps an error-throwing closure over the base sequence’s elements, omitting results that don’t return a value.\nfunc flatMap<SegmentOfResult>((CLLocation) -> SegmentOfResult) -> AsyncFlatMapSequence<HKWorkoutRouteQueryDescriptor.Results, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given transformation with each element of this sequence."
  },
  {
    "title": "compactMap(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkoutroutequerydescriptor/results/3916636-compactmap",
    "html": "Parameters\ntransform\n\nAn error-throwing mapping closure. transform accepts an element of this sequence as its parameter and returns a transformed value of the same or of a different type. If transform throws an error, the sequence ends.\n\nReturn Value\n\nAn asynchronous sequence that contains, in order, the non-nil elements produced by the transform closure. The sequence ends either when the base sequence ends or when transform throws an error.\n\nDiscussion\n\nUse the compactMap(_:) method to transform every element received from a base asynchronous sequence, while also discarding any nil results from the closure. Typically, you use this to transform from one type of element to another.\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 5. The closure provided to the compactMap(_:) method takes each Int and looks up a corresponding String from a romanNumeralDict dictionary. Since there is no key for 4, the closure returns nil in this case, which compactMap(_:) omits from the transformed asynchronous sequence. When the value is 5, the closure throws MyError, terminating the sequence.\n\nlet romanNumeralDict: [Int: String] =\n    [1: \"I\", 2: \"II\", 3: \"III\", 5: \"V\"]\n\n\ndo {\n    let stream = Counter(howHigh: 5)\n        .compactMap { (value) throws -> String? in\n            if value == 5 {\n                throw MyError()\n            }\n            return romanNumeralDict[value]\n        }\n    for try await numeral in stream {\n        print(numeral, terminator: \" \")\n    }\n} catch {\n    print(\"Error: \\(error)\")\n}\n// Prints \"I II III Error: MyError() \"\n\nSee Also\nTransforming a Series\nfunc map<Transformed>((CLLocation) -> Transformed) -> AsyncMapSequence<HKWorkoutRouteQueryDescriptor.Results, Transformed>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements.\nfunc map<Transformed>((CLLocation) -> Transformed) -> AsyncThrowingMapSequence<HKWorkoutRouteQueryDescriptor.Results, Transformed>\nCreates an asynchronous sequence that maps the given error-throwing closure over the asynchronous sequence’s elements.\nfunc reduce<Result>(Result, (Result, CLLocation) -> Result) -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure.\nfunc reduce<Result>(into: Result, (inout Result, CLLocation) -> Void) -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure, given a mutable initial value.\nfunc compactMap<ElementOfResult>((CLLocation) -> ElementOfResult?) -> AsyncCompactMapSequence<HKWorkoutRouteQueryDescriptor.Results, ElementOfResult>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements, omitting results that don’t return a value.\nfunc flatMap<SegmentOfResult>((CLLocation) -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<HKWorkoutRouteQueryDescriptor.Results, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given error-throwing transformation with each element of this sequence.\nfunc flatMap<SegmentOfResult>((CLLocation) -> SegmentOfResult) -> AsyncFlatMapSequence<HKWorkoutRouteQueryDescriptor.Results, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given transformation with each element of this sequence."
  },
  {
    "title": "compactMap(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkoutroutequerydescriptor/results/3916634-compactmap",
    "html": "Parameters\ntransform\n\nA mapping closure. transform accepts an element of this sequence as its parameter and returns a transformed value of the same or of a different type.\n\nReturn Value\n\nAn asynchronous sequence that contains, in order, the non-nil elements produced by the transform closure.\n\nDiscussion\n\nUse the compactMap(_:) method to transform every element received from a base asynchronous sequence, while also discarding any nil results from the closure. Typically, you use this to transform from one type of element to another.\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 5. The closure provided to the compactMap(_:) method takes each Int and looks up a corresponding String from a romanNumeralDict dictionary. Because there is no key for 4, the closure returns nil in this case, which compactMap(_:) omits from the transformed asynchronous sequence.\n\nlet romanNumeralDict: [Int: String] =\n    [1: \"I\", 2: \"II\", 3: \"III\", 5: \"V\"]\n    \nlet stream = Counter(howHigh: 5)\n    .compactMap { romanNumeralDict[$0] }\nfor await numeral in stream {\n    print(numeral, terminator: \" \")\n}\n// Prints \"I II III V \"\n\nSee Also\nTransforming a Series\nfunc map<Transformed>((CLLocation) -> Transformed) -> AsyncMapSequence<HKWorkoutRouteQueryDescriptor.Results, Transformed>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements.\nfunc map<Transformed>((CLLocation) -> Transformed) -> AsyncThrowingMapSequence<HKWorkoutRouteQueryDescriptor.Results, Transformed>\nCreates an asynchronous sequence that maps the given error-throwing closure over the asynchronous sequence’s elements.\nfunc reduce<Result>(Result, (Result, CLLocation) -> Result) -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure.\nfunc reduce<Result>(into: Result, (inout Result, CLLocation) -> Void) -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure, given a mutable initial value.\nfunc compactMap<ElementOfResult>((CLLocation) -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<HKWorkoutRouteQueryDescriptor.Results, ElementOfResult>\nCreates an asynchronous sequence that maps an error-throwing closure over the base sequence’s elements, omitting results that don’t return a value.\nfunc flatMap<SegmentOfResult>((CLLocation) -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<HKWorkoutRouteQueryDescriptor.Results, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given error-throwing transformation with each element of this sequence.\nfunc flatMap<SegmentOfResult>((CLLocation) -> SegmentOfResult) -> AsyncFlatMapSequence<HKWorkoutRouteQueryDescriptor.Results, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given transformation with each element of this sequence."
  },
  {
    "title": "flatMap(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkoutroutequerydescriptor/results/3916652-flatmap",
    "html": "Parameters\ntransform\n\nA mapping closure. transform accepts an element of this sequence as its parameter and returns an AsyncSequence.\n\nReturn Value\n\nA single, flattened asynchronous sequence that contains all elements in all the asynchronous sequences produced by transform.\n\nDiscussion\n\nUse this method to receive a single-level asynchronous sequence when your transformation produces an asynchronous sequence for each element.\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 5. The transforming closure takes the received Int and returns a new Counter that counts that high. For example, when the transform receives 3 from the base sequence, it creates a new Counter that produces the values 1, 2, and 3. The flatMap(_:) method “flattens” the resulting sequence-of-sequences into a single AsyncSequence.\n\nlet stream = Counter(howHigh: 5)\n    .flatMap { Counter(howHigh: $0) }\nfor await number in stream {\n    print(number, terminator: \" \")\n}\n// Prints \"1 1 2 1 2 3 1 2 3 4 1 2 3 4 5 \"\n\nSee Also\nTransforming a Series\nfunc map<Transformed>((CLLocation) -> Transformed) -> AsyncMapSequence<HKWorkoutRouteQueryDescriptor.Results, Transformed>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements.\nfunc map<Transformed>((CLLocation) -> Transformed) -> AsyncThrowingMapSequence<HKWorkoutRouteQueryDescriptor.Results, Transformed>\nCreates an asynchronous sequence that maps the given error-throwing closure over the asynchronous sequence’s elements.\nfunc reduce<Result>(Result, (Result, CLLocation) -> Result) -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure.\nfunc reduce<Result>(into: Result, (inout Result, CLLocation) -> Void) -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure, given a mutable initial value.\nfunc compactMap<ElementOfResult>((CLLocation) -> ElementOfResult?) -> AsyncCompactMapSequence<HKWorkoutRouteQueryDescriptor.Results, ElementOfResult>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements, omitting results that don’t return a value.\nfunc compactMap<ElementOfResult>((CLLocation) -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<HKWorkoutRouteQueryDescriptor.Results, ElementOfResult>\nCreates an asynchronous sequence that maps an error-throwing closure over the base sequence’s elements, omitting results that don’t return a value.\nfunc flatMap<SegmentOfResult>((CLLocation) -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<HKWorkoutRouteQueryDescriptor.Results, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given error-throwing transformation with each element of this sequence."
  },
  {
    "title": "reduce(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkoutroutequerydescriptor/results/3916667-reduce",
    "html": "Parameters\ninitialResult\n\nThe value to use as the initial accumulating value. The nextPartialResult closure receives initialResult the first time the closure runs.\n\nnextPartialResult\n\nA closure that combines an accumulating value and an element of the asynchronous sequence into a new accumulating value, for use in the next call of the nextPartialResult closure or returned to the caller.\n\nReturn Value\n\nThe final accumulated value. If the sequence has no elements, the result is initialResult.\n\nDiscussion\n\nUse the reduce(_:_:) method to produce a single value from the elements of an entire sequence. For example, you can use this method on an sequence of numbers to find their sum or product.\n\nThe nextPartialResult closure executes sequentially with an accumulating value initialized to initialResult and each element of the sequence.\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 4. The reduce(_:_:) method sums the values received from the asynchronous sequence.\n\nlet sum = await Counter(howHigh: 4)\n    .reduce(0) {\n        $0 + $1\n    }\nprint(sum)\n// Prints \"10\"\n\nSee Also\nTransforming a Series\nfunc map<Transformed>((CLLocation) -> Transformed) -> AsyncMapSequence<HKWorkoutRouteQueryDescriptor.Results, Transformed>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements.\nfunc map<Transformed>((CLLocation) -> Transformed) -> AsyncThrowingMapSequence<HKWorkoutRouteQueryDescriptor.Results, Transformed>\nCreates an asynchronous sequence that maps the given error-throwing closure over the asynchronous sequence’s elements.\nfunc reduce<Result>(into: Result, (inout Result, CLLocation) -> Void) -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure, given a mutable initial value.\nfunc compactMap<ElementOfResult>((CLLocation) -> ElementOfResult?) -> AsyncCompactMapSequence<HKWorkoutRouteQueryDescriptor.Results, ElementOfResult>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements, omitting results that don’t return a value.\nfunc compactMap<ElementOfResult>((CLLocation) -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<HKWorkoutRouteQueryDescriptor.Results, ElementOfResult>\nCreates an asynchronous sequence that maps an error-throwing closure over the base sequence’s elements, omitting results that don’t return a value.\nfunc flatMap<SegmentOfResult>((CLLocation) -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<HKWorkoutRouteQueryDescriptor.Results, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given error-throwing transformation with each element of this sequence.\nfunc flatMap<SegmentOfResult>((CLLocation) -> SegmentOfResult) -> AsyncFlatMapSequence<HKWorkoutRouteQueryDescriptor.Results, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given transformation with each element of this sequence."
  },
  {
    "title": "reduce(into:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkoutroutequerydescriptor/results/3916669-reduce",
    "html": "Parameters\ninitialResult\n\nThe value to use as the initial accumulating value. The nextPartialResult closure receives initialResult the first time the closure executes.\n\nnextPartialResult\n\nA closure that combines an accumulating value and an element of the asynchronous sequence into a new accumulating value, for use in the next call of the nextPartialResult closure or returned to the caller.\n\nReturn Value\n\nThe final accumulated value. If the sequence has no elements, the result is initialResult.\n\nDiscussion\n\nUse the reduce(into:_:) method to produce a single value from the elements of an entire sequence. For example, you can use this method on a sequence of numbers to find their sum or product.\n\nThe nextPartialResult closure executes sequentially with an accumulating value initialized to initialResult and each element of the sequence.\n\nPrefer this method over reduce(_:_:) for efficiency when the result is a copy-on-write type, for example an Array or Dictionary.\n\nSee Also\nTransforming a Series\nfunc map<Transformed>((CLLocation) -> Transformed) -> AsyncMapSequence<HKWorkoutRouteQueryDescriptor.Results, Transformed>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements.\nfunc map<Transformed>((CLLocation) -> Transformed) -> AsyncThrowingMapSequence<HKWorkoutRouteQueryDescriptor.Results, Transformed>\nCreates an asynchronous sequence that maps the given error-throwing closure over the asynchronous sequence’s elements.\nfunc reduce<Result>(Result, (Result, CLLocation) -> Result) -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure.\nfunc compactMap<ElementOfResult>((CLLocation) -> ElementOfResult?) -> AsyncCompactMapSequence<HKWorkoutRouteQueryDescriptor.Results, ElementOfResult>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements, omitting results that don’t return a value.\nfunc compactMap<ElementOfResult>((CLLocation) -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<HKWorkoutRouteQueryDescriptor.Results, ElementOfResult>\nCreates an asynchronous sequence that maps an error-throwing closure over the base sequence’s elements, omitting results that don’t return a value.\nfunc flatMap<SegmentOfResult>((CLLocation) -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<HKWorkoutRouteQueryDescriptor.Results, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given error-throwing transformation with each element of this sequence.\nfunc flatMap<SegmentOfResult>((CLLocation) -> SegmentOfResult) -> AsyncFlatMapSequence<HKWorkoutRouteQueryDescriptor.Results, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given transformation with each element of this sequence."
  },
  {
    "title": "max(by:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquantityseriessamplequerydescriptor/results/3916507-max",
    "html": "Parameters\nareInIncreasingOrder\n\nA predicate that returns true if its first argument should be ordered before its second argument; otherwise, false.\n\nReturn Value\n\nThe sequence’s minimum element, according to areInIncreasingOrder. If the sequence has no elements, returns nil.\n\nDiscussion\n\nUse this method when the asynchronous sequence’s values don’t conform to Comparable, or when you want to apply a custom ordering to the sequence.\n\nThe predicate must be a strict weak ordering over the elements. That is, for any elements a, b, and c, the following conditions must hold:\n\nareInIncreasingOrder(a, a) is always false. (Irreflexivity)\n\nIf areInIncreasingOrder(a, b) and areInIncreasingOrder(b, c) are both true, then areInIncreasingOrder(a, c) is also true. (Transitive comparability)\n\nTwo elements are incomparable if neither is ordered before the other according to the predicate. If a and b are incomparable, and b and c are incomparable, then a and c are also incomparable. (Transitive incomparability)\n\nThe following example uses an enumeration of playing cards ranks, Rank, which ranges from ace (low) to king (high). An asynchronous sequence called RankCounter produces all elements of the array. The predicate provided to the max(by:) method sorts ranks based on their rawValue:\n\nenum Rank: Int {\n    case ace = 1, two, three, four, five, six, seven, eight, nine, ten, jack, queen, king\n}\n\n\nlet max = await RankCounter()\n    .max { $0.rawValue < $1.rawValue }\nprint(max ?? \"none\")\n// Prints \"king\"\n\nSee Also\nFinding Elements\nfunc contains(HKQuantitySeriesSampleQueryDescriptor.Result) -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains the given element.\nfunc contains(where: (HKQuantitySeriesSampleQueryDescriptor.Result) -> Bool) -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains an element that satisfies the given predicate.\nfunc allSatisfy((HKQuantitySeriesSampleQueryDescriptor.Result) -> Bool) -> Bool\nReturns a Boolean value that indicates whether all elements produced by the asynchronous sequence satisfy the given predicate.\nfunc first(where: (HKQuantitySeriesSampleQueryDescriptor.Result) -> Bool) -> HKQuantitySeriesSampleQueryDescriptor.Result?\nReturns the first element of the sequence that satisfies the given predicate.\nfunc min(by: (HKQuantitySeriesSampleQueryDescriptor.Result, HKQuantitySeriesSampleQueryDescriptor.Result) -> Bool) -> HKQuantitySeriesSampleQueryDescriptor.Result?\nReturns the minimum element in the asynchronous sequence, using the given predicate as the comparison between elements."
  },
  {
    "title": "first(where:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquantityseriessamplequerydescriptor/results/3916496-first",
    "html": "Parameters\npredicate\n\nA closure that takes an element of the asynchronous sequence as its argument and returns a Boolean value that indicates whether the element is a match.\n\nReturn Value\n\nThe first element of the sequence that satisfies predicate, or nil if there is no element that satisfies predicate.\n\nDiscussion\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 10. The first(where:) method returns the first member of the sequence that’s evenly divisible by both 2 and 3.\n\nlet divisibleBy2And3 = await Counter(howHigh: 10)\n    .first { $0 % 2 == 0 && $0 % 3 == 0 }\nprint(divisibleBy2And3 ?? \"none\")\n// Prints \"6\"\n\n\nThe predicate executes each time the asynchronous sequence produces an element, until either the predicate finds a match or the sequence ends.\n\nSee Also\nFinding Elements\nfunc contains(HKQuantitySeriesSampleQueryDescriptor.Result) -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains the given element.\nfunc contains(where: (HKQuantitySeriesSampleQueryDescriptor.Result) -> Bool) -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains an element that satisfies the given predicate.\nfunc allSatisfy((HKQuantitySeriesSampleQueryDescriptor.Result) -> Bool) -> Bool\nReturns a Boolean value that indicates whether all elements produced by the asynchronous sequence satisfy the given predicate.\nfunc max(by: (HKQuantitySeriesSampleQueryDescriptor.Result, HKQuantitySeriesSampleQueryDescriptor.Result) -> Bool) -> HKQuantitySeriesSampleQueryDescriptor.Result?\nReturns the maximum element in the asynchronous sequence, using the given predicate as the comparison between elements.\nfunc min(by: (HKQuantitySeriesSampleQueryDescriptor.Result, HKQuantitySeriesSampleQueryDescriptor.Result) -> Bool) -> HKQuantitySeriesSampleQueryDescriptor.Result?\nReturns the minimum element in the asynchronous sequence, using the given predicate as the comparison between elements."
  },
  {
    "title": "contains(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquantityseriessamplequerydescriptor/results/3916486-contains",
    "html": "Parameters\nsearch\n\nThe element to find in the asynchronous sequence.\n\nReturn Value\n\ntrue if the method found the element in the asynchronous sequence; otherwise, false.\n\nDiscussion\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 10. The contains(_:) method checks to see whether the sequence produces the value 5:\n\nlet containsFive = await Counter(howHigh: 10)\n    .contains(5)\nprint(containsFive)\n// Prints \"true\"\n\nSee Also\nFinding Elements\nfunc contains(where: (HKQuantitySeriesSampleQueryDescriptor.Result) -> Bool) -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains an element that satisfies the given predicate.\nfunc allSatisfy((HKQuantitySeriesSampleQueryDescriptor.Result) -> Bool) -> Bool\nReturns a Boolean value that indicates whether all elements produced by the asynchronous sequence satisfy the given predicate.\nfunc first(where: (HKQuantitySeriesSampleQueryDescriptor.Result) -> Bool) -> HKQuantitySeriesSampleQueryDescriptor.Result?\nReturns the first element of the sequence that satisfies the given predicate.\nfunc max(by: (HKQuantitySeriesSampleQueryDescriptor.Result, HKQuantitySeriesSampleQueryDescriptor.Result) -> Bool) -> HKQuantitySeriesSampleQueryDescriptor.Result?\nReturns the maximum element in the asynchronous sequence, using the given predicate as the comparison between elements.\nfunc min(by: (HKQuantitySeriesSampleQueryDescriptor.Result, HKQuantitySeriesSampleQueryDescriptor.Result) -> Bool) -> HKQuantitySeriesSampleQueryDescriptor.Result?\nReturns the minimum element in the asynchronous sequence, using the given predicate as the comparison between elements."
  },
  {
    "title": "makeAsyncIterator() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquantityseriessamplequerydescriptor/results/3916502-makeasynciterator",
    "html": "Relationships\nFrom Protocol\nAsyncSequence\nSee Also\nCreating an Iterator\nstruct HKQuantitySeriesSampleQueryDescriptor.Results.Iterator\nAn iterator for accessing individual data entries from the series.\ntypealias HKQuantitySeriesSampleQueryDescriptor.Results.AsyncIterator\nAn iterator for accessing individual data entries from the series.\ntypealias HKQuantitySeriesSampleQueryDescriptor.Results.Element\nA structure that represents a single data entry from a series."
  },
  {
    "title": "contains(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkattachment/asyncbytes/3952545-contains",
    "html": "Parameters\nsearch\n\nThe element to find in the asynchronous sequence.\n\nReturn Value\n\ntrue if the method found the element in the asynchronous sequence; otherwise, false.\n\nDiscussion\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 10. The contains(_:) method checks to see whether the sequence produces the value 5:\n\nlet containsFive = await Counter(howHigh: 10)\n    .contains(5)\nprint(containsFive)\n// Prints \"true\"\n\nSee Also\nFinding bytes\nfunc contains(where: (UInt8) -> Bool) -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains an element that satisfies the given predicate.\nfunc allSatisfy((UInt8) -> Bool) -> Bool\nReturns a Boolean value that indicates whether all elements produced by the asynchronous sequence satisfy the given predicate.\nfunc first(where: (UInt8) -> Bool) -> UInt8?\nReturns the first element of the sequence that satisfies the given predicate.\nfunc min() -> UInt8?\nReturns the minimum element in an asynchronous sequence of comparable elements.\nfunc min(by: (UInt8, UInt8) -> Bool) -> UInt8?\nReturns the minimum element in the asynchronous sequence, using the given predicate as the comparison between elements.\nfunc max() -> UInt8?\nReturns the maximum element in an asynchronous sequence of comparable elements.\nfunc max(by: (UInt8, UInt8) -> Bool) -> UInt8?\nReturns the maximum element in the asynchronous sequence, using the given predicate as the comparison between elements."
  },
  {
    "title": "map(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkattachment/asyncbytes/3952565-map",
    "html": "Parameters\ntransform\n\nA mapping closure. transform accepts an element of this sequence as its parameter and returns a transformed value of the same or of a different type. transform can also throw an error, which ends the transformed sequence.\n\nReturn Value\n\nAn asynchronous sequence that contains, in order, the elements produced by the transform closure.\n\nDiscussion\n\nUse the map(_:) method to transform every element received from a base asynchronous sequence. Typically, you use this to transform from one type of element to another.\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 5. The closure provided to the map(_:) method takes each Int and looks up a corresponding String from a romanNumeralDict dictionary. This means the outer for await in loop iterates over String instances instead of the underlying Int values that Counter produces. Also, the dictionary doesn’t provide a key for 4, and the closure throws an error for any key it can’t look up, so receiving this value from Counter ends the modified sequence with an error.\n\nlet romanNumeralDict: [Int: String] =\n    [1: \"I\", 2: \"II\", 3: \"III\", 5: \"V\"]\n\n\ndo {\n    let stream = Counter(howHigh: 5)\n        .map { (value) throws -> String in\n            guard let roman = romanNumeralDict[value] else {\n                throw MyError()\n            }\n            return roman\n        }\n    for try await numeral in stream {\n        print(numeral, terminator: \" \")\n    }\n} catch {\n    print(\"Error: \\(error)\")\n}\n// Prints \"I II III Error: MyError() \"\n\nSee Also\nTransforming bytes\nfunc map<Transformed>((UInt8) -> Transformed) -> AsyncMapSequence<HKAttachment.AsyncBytes, Transformed>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements.\nfunc reduce<Result>(Result, (Result, UInt8) -> Result) -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure.\nfunc reduce<Result>(into: Result, (inout Result, UInt8) -> Void) -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure, given a mutable initial value.\nfunc compactMap<ElementOfResult>((UInt8) -> ElementOfResult?) -> AsyncCompactMapSequence<HKAttachment.AsyncBytes, ElementOfResult>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements, omitting results that don’t return a value.\nfunc compactMap<ElementOfResult>((UInt8) -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<HKAttachment.AsyncBytes, ElementOfResult>\nCreates an asynchronous sequence that maps an error-throwing closure over the base sequence’s elements, omitting results that don’t return a value.\nfunc flatMap<SegmentOfResult>((UInt8) -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<HKAttachment.AsyncBytes, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given error-throwing transformation with each element of this sequence.\nfunc flatMap<SegmentOfResult>((UInt8) -> SegmentOfResult) -> AsyncFlatMapSequence<HKAttachment.AsyncBytes, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given transformation with each element of this sequence."
  },
  {
    "title": "reduce(into:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkattachment/asyncbytes/3952581-reduce",
    "html": "Parameters\ninitialResult\n\nThe value to use as the initial accumulating value. The nextPartialResult closure receives initialResult the first time the closure executes.\n\nnextPartialResult\n\nA closure that combines an accumulating value and an element of the asynchronous sequence into a new accumulating value, for use in the next call of the nextPartialResult closure or returned to the caller.\n\nReturn Value\n\nThe final accumulated value. If the sequence has no elements, the result is initialResult.\n\nDiscussion\n\nUse the reduce(into:_:) method to produce a single value from the elements of an entire sequence. For example, you can use this method on a sequence of numbers to find their sum or product.\n\nThe nextPartialResult closure executes sequentially with an accumulating value initialized to initialResult and each element of the sequence.\n\nPrefer this method over reduce(_:_:) for efficiency when the result is a copy-on-write type, for example an Array or Dictionary.\n\nSee Also\nTransforming bytes\nfunc map<Transformed>((UInt8) -> Transformed) -> AsyncMapSequence<HKAttachment.AsyncBytes, Transformed>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements.\nfunc map<Transformed>((UInt8) -> Transformed) -> AsyncThrowingMapSequence<HKAttachment.AsyncBytes, Transformed>\nCreates an asynchronous sequence that maps the given error-throwing closure over the asynchronous sequence’s elements.\nfunc reduce<Result>(Result, (Result, UInt8) -> Result) -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure.\nfunc compactMap<ElementOfResult>((UInt8) -> ElementOfResult?) -> AsyncCompactMapSequence<HKAttachment.AsyncBytes, ElementOfResult>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements, omitting results that don’t return a value.\nfunc compactMap<ElementOfResult>((UInt8) -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<HKAttachment.AsyncBytes, ElementOfResult>\nCreates an asynchronous sequence that maps an error-throwing closure over the base sequence’s elements, omitting results that don’t return a value.\nfunc flatMap<SegmentOfResult>((UInt8) -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<HKAttachment.AsyncBytes, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given error-throwing transformation with each element of this sequence.\nfunc flatMap<SegmentOfResult>((UInt8) -> SegmentOfResult) -> AsyncFlatMapSequence<HKAttachment.AsyncBytes, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given transformation with each element of this sequence."
  },
  {
    "title": "compactMap(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkattachment/asyncbytes/3952541-compactmap",
    "html": "Parameters\ntransform\n\nA mapping closure. transform accepts an element of this sequence as its parameter and returns a transformed value of the same or of a different type.\n\nReturn Value\n\nAn asynchronous sequence that contains, in order, the non-nil elements produced by the transform closure.\n\nDiscussion\n\nUse the compactMap(_:) method to transform every element received from a base asynchronous sequence, while also discarding any nil results from the closure. Typically, you use this to transform from one type of element to another.\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 5. The closure provided to the compactMap(_:) method takes each Int and looks up a corresponding String from a romanNumeralDict dictionary. Because there is no key for 4, the closure returns nil in this case, which compactMap(_:) omits from the transformed asynchronous sequence.\n\nlet romanNumeralDict: [Int: String] =\n    [1: \"I\", 2: \"II\", 3: \"III\", 5: \"V\"]\n    \nlet stream = Counter(howHigh: 5)\n    .compactMap { romanNumeralDict[$0] }\nfor await numeral in stream {\n    print(numeral, terminator: \" \")\n}\n// Prints \"I II III V \"\n\nSee Also\nTransforming bytes\nfunc map<Transformed>((UInt8) -> Transformed) -> AsyncMapSequence<HKAttachment.AsyncBytes, Transformed>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements.\nfunc map<Transformed>((UInt8) -> Transformed) -> AsyncThrowingMapSequence<HKAttachment.AsyncBytes, Transformed>\nCreates an asynchronous sequence that maps the given error-throwing closure over the asynchronous sequence’s elements.\nfunc reduce<Result>(Result, (Result, UInt8) -> Result) -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure.\nfunc reduce<Result>(into: Result, (inout Result, UInt8) -> Void) -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure, given a mutable initial value.\nfunc compactMap<ElementOfResult>((UInt8) -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<HKAttachment.AsyncBytes, ElementOfResult>\nCreates an asynchronous sequence that maps an error-throwing closure over the base sequence’s elements, omitting results that don’t return a value.\nfunc flatMap<SegmentOfResult>((UInt8) -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<HKAttachment.AsyncBytes, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given error-throwing transformation with each element of this sequence.\nfunc flatMap<SegmentOfResult>((UInt8) -> SegmentOfResult) -> AsyncFlatMapSequence<HKAttachment.AsyncBytes, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given transformation with each element of this sequence."
  },
  {
    "title": "compactMap(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkattachment/asyncbytes/3952543-compactmap",
    "html": "Parameters\ntransform\n\nAn error-throwing mapping closure. transform accepts an element of this sequence as its parameter and returns a transformed value of the same or of a different type. If transform throws an error, the sequence ends.\n\nReturn Value\n\nAn asynchronous sequence that contains, in order, the non-nil elements produced by the transform closure. The sequence ends either when the base sequence ends or when transform throws an error.\n\nDiscussion\n\nUse the compactMap(_:) method to transform every element received from a base asynchronous sequence, while also discarding any nil results from the closure. Typically, you use this to transform from one type of element to another.\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 5. The closure provided to the compactMap(_:) method takes each Int and looks up a corresponding String from a romanNumeralDict dictionary. Since there is no key for 4, the closure returns nil in this case, which compactMap(_:) omits from the transformed asynchronous sequence. When the value is 5, the closure throws MyError, terminating the sequence.\n\nlet romanNumeralDict: [Int: String] =\n    [1: \"I\", 2: \"II\", 3: \"III\", 5: \"V\"]\n\n\ndo {\n    let stream = Counter(howHigh: 5)\n        .compactMap { (value) throws -> String? in\n            if value == 5 {\n                throw MyError()\n            }\n            return romanNumeralDict[value]\n        }\n    for try await numeral in stream {\n        print(numeral, terminator: \" \")\n    }\n} catch {\n    print(\"Error: \\(error)\")\n}\n// Prints \"I II III Error: MyError() \"\n\nSee Also\nTransforming bytes\nfunc map<Transformed>((UInt8) -> Transformed) -> AsyncMapSequence<HKAttachment.AsyncBytes, Transformed>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements.\nfunc map<Transformed>((UInt8) -> Transformed) -> AsyncThrowingMapSequence<HKAttachment.AsyncBytes, Transformed>\nCreates an asynchronous sequence that maps the given error-throwing closure over the asynchronous sequence’s elements.\nfunc reduce<Result>(Result, (Result, UInt8) -> Result) -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure.\nfunc reduce<Result>(into: Result, (inout Result, UInt8) -> Void) -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure, given a mutable initial value.\nfunc compactMap<ElementOfResult>((UInt8) -> ElementOfResult?) -> AsyncCompactMapSequence<HKAttachment.AsyncBytes, ElementOfResult>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements, omitting results that don’t return a value.\nfunc flatMap<SegmentOfResult>((UInt8) -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<HKAttachment.AsyncBytes, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given error-throwing transformation with each element of this sequence.\nfunc flatMap<SegmentOfResult>((UInt8) -> SegmentOfResult) -> AsyncFlatMapSequence<HKAttachment.AsyncBytes, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given transformation with each element of this sequence."
  },
  {
    "title": "flatMap(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkattachment/asyncbytes/3952559-flatmap",
    "html": "Parameters\ntransform\n\nA mapping closure. transform accepts an element of this sequence as its parameter and returns an AsyncSequence.\n\nReturn Value\n\nA single, flattened asynchronous sequence that contains all elements in all the asynchronous sequences produced by transform.\n\nDiscussion\n\nUse this method to receive a single-level asynchronous sequence when your transformation produces an asynchronous sequence for each element.\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 5. The transforming closure takes the received Int and returns a new Counter that counts that high. For example, when the transform receives 3 from the base sequence, it creates a new Counter that produces the values 1, 2, and 3. The flatMap(_:) method “flattens” the resulting sequence-of-sequences into a single AsyncSequence.\n\nlet stream = Counter(howHigh: 5)\n    .flatMap { Counter(howHigh: $0) }\nfor await number in stream {\n    print(number, terminator: \" \")\n}\n// Prints \"1 1 2 1 2 3 1 2 3 4 1 2 3 4 5 \"\n\nSee Also\nTransforming bytes\nfunc map<Transformed>((UInt8) -> Transformed) -> AsyncMapSequence<HKAttachment.AsyncBytes, Transformed>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements.\nfunc map<Transformed>((UInt8) -> Transformed) -> AsyncThrowingMapSequence<HKAttachment.AsyncBytes, Transformed>\nCreates an asynchronous sequence that maps the given error-throwing closure over the asynchronous sequence’s elements.\nfunc reduce<Result>(Result, (Result, UInt8) -> Result) -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure.\nfunc reduce<Result>(into: Result, (inout Result, UInt8) -> Void) -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure, given a mutable initial value.\nfunc compactMap<ElementOfResult>((UInt8) -> ElementOfResult?) -> AsyncCompactMapSequence<HKAttachment.AsyncBytes, ElementOfResult>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements, omitting results that don’t return a value.\nfunc compactMap<ElementOfResult>((UInt8) -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<HKAttachment.AsyncBytes, ElementOfResult>\nCreates an asynchronous sequence that maps an error-throwing closure over the base sequence’s elements, omitting results that don’t return a value.\nfunc flatMap<SegmentOfResult>((UInt8) -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<HKAttachment.AsyncBytes, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given error-throwing transformation with each element of this sequence."
  },
  {
    "title": "flatMap(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkattachment/asyncbytes/3952557-flatmap",
    "html": "Parameters\ntransform\n\nAn error-throwing mapping closure. transform accepts an element of this sequence as its parameter and returns an AsyncSequence. If transform throws an error, the sequence ends.\n\nReturn Value\n\nA single, flattened asynchronous sequence that contains all elements in all the asynchronous sequences produced by transform. The sequence ends either when the last sequence created from the last element from base sequence ends, or when transform throws an error.\n\nDiscussion\n\nUse this method to receive a single-level asynchronous sequence when your transformation produces an asynchronous sequence for each element.\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 5. The transforming closure takes the received Int and returns a new Counter that counts that high. For example, when the transform receives 3 from the base sequence, it creates a new Counter that produces the values 1, 2, and 3. The flatMap(_:) method “flattens” the resulting sequence-of-sequences into a single AsyncSequence. However, when the closure receives 4, it throws an error, terminating the sequence.\n\ndo {\n    let stream = Counter(howHigh: 5)\n        .flatMap { (value) -> Counter in\n            if value == 4 {\n                throw MyError()\n            }\n            return Counter(howHigh: value)\n        }\n    for try await number in stream {\n        print(number, terminator: \" \")\n    }\n} catch {\n    print(error)\n}\n// Prints \"1 1 2 1 2 3 MyError() \"\n\nSee Also\nTransforming bytes\nfunc map<Transformed>((UInt8) -> Transformed) -> AsyncMapSequence<HKAttachment.AsyncBytes, Transformed>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements.\nfunc map<Transformed>((UInt8) -> Transformed) -> AsyncThrowingMapSequence<HKAttachment.AsyncBytes, Transformed>\nCreates an asynchronous sequence that maps the given error-throwing closure over the asynchronous sequence’s elements.\nfunc reduce<Result>(Result, (Result, UInt8) -> Result) -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure.\nfunc reduce<Result>(into: Result, (inout Result, UInt8) -> Void) -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure, given a mutable initial value.\nfunc compactMap<ElementOfResult>((UInt8) -> ElementOfResult?) -> AsyncCompactMapSequence<HKAttachment.AsyncBytes, ElementOfResult>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements, omitting results that don’t return a value.\nfunc compactMap<ElementOfResult>((UInt8) -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<HKAttachment.AsyncBytes, ElementOfResult>\nCreates an asynchronous sequence that maps an error-throwing closure over the base sequence’s elements, omitting results that don’t return a value.\nfunc flatMap<SegmentOfResult>((UInt8) -> SegmentOfResult) -> AsyncFlatMapSequence<HKAttachment.AsyncBytes, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given transformation with each element of this sequence."
  },
  {
    "title": "characters | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkattachment/asyncbytes/3952540-characters",
    "html": "See Also\nWorking with text data\nvar lines: AsyncLineSequence<HKAttachment.AsyncBytes>\nvar unicodeScalars: AsyncUnicodeScalarSequence<HKAttachment.AsyncBytes>"
  },
  {
    "title": "lines | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkattachment/asyncbytes/3952561-lines",
    "html": "See Also\nWorking with text data\nvar characters: AsyncCharacterSequence<HKAttachment.AsyncBytes>\nvar unicodeScalars: AsyncUnicodeScalarSequence<HKAttachment.AsyncBytes>"
  },
  {
    "title": "makeAsyncIterator() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkanchoredobjectquerydescriptor/results/3916285-makeasynciterator",
    "html": "Relationships\nFrom Protocol\nAsyncSequence\nSee Also\nCreating an Iterator\nstruct HKAnchoredObjectQueryDescriptor.Results.Iterator\nAn iterator for accessing anchored object results.\ntypealias HKAnchoredObjectQueryDescriptor.Results.AsyncIterator\nAn iterator that returns results from an asynchronous sequence.\ntypealias HKAnchoredObjectQueryDescriptor.Results.Element\nA set of results that an anchored object query returns."
  },
  {
    "title": "HKAnchoredObjectQueryDescriptor.Results.Iterator | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkanchoredobjectquerydescriptor/results/iterator",
    "html": "Topics\nIterating Over Results\ntypealias HKAnchoredObjectQueryDescriptor.Results.Iterator.Element\nThe type for results returned by the anchored object iterator.\nfunc next() -> HKAnchoredObjectQueryDescriptor<Sample>.Results.Element?\nAsynchronously waits for the next element and returns it.\nRelationships\nConforms To\nAsyncIteratorProtocol\nSee Also\nCreating an Iterator\nfunc makeAsyncIterator() -> HKAnchoredObjectQueryDescriptor<Sample>.Results.Iterator\nCreates the asynchronous iterator that produces results from this asynchronous sequence.\ntypealias HKAnchoredObjectQueryDescriptor.Results.AsyncIterator\nAn iterator that returns results from an asynchronous sequence.\ntypealias HKAnchoredObjectQueryDescriptor.Results.Element\nA set of results that an anchored object query returns."
  },
  {
    "title": "HKAnchoredObjectQueryDescriptor.Results.AsyncIterator | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkanchoredobjectquerydescriptor/results/asynciterator",
    "html": "See Also\nCreating an Iterator\nfunc makeAsyncIterator() -> HKAnchoredObjectQueryDescriptor<Sample>.Results.Iterator\nCreates the asynchronous iterator that produces results from this asynchronous sequence.\nstruct HKAnchoredObjectQueryDescriptor.Results.Iterator\nAn iterator for accessing anchored object results.\ntypealias HKAnchoredObjectQueryDescriptor.Results.Element\nA set of results that an anchored object query returns."
  },
  {
    "title": "max(by:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkanchoredobjectquerydescriptor/results/3916290-max",
    "html": "Parameters\nareInIncreasingOrder\n\nA predicate that returns true if its first argument should be ordered before its second argument; otherwise, false.\n\nReturn Value\n\nThe sequence’s minimum element, according to areInIncreasingOrder. If the sequence has no elements, returns nil.\n\nDiscussion\n\nUse this method when the asynchronous sequence’s values don’t conform to Comparable, or when you want to apply a custom ordering to the sequence.\n\nThe predicate must be a strict weak ordering over the elements. That is, for any elements a, b, and c, the following conditions must hold:\n\nareInIncreasingOrder(a, a) is always false. (Irreflexivity)\n\nIf areInIncreasingOrder(a, b) and areInIncreasingOrder(b, c) are both true, then areInIncreasingOrder(a, c) is also true. (Transitive comparability)\n\nTwo elements are incomparable if neither is ordered before the other according to the predicate. If a and b are incomparable, and b and c are incomparable, then a and c are also incomparable. (Transitive incomparability)\n\nThe following example uses an enumeration of playing cards ranks, Rank, which ranges from ace (low) to king (high). An asynchronous sequence called RankCounter produces all elements of the array. The predicate provided to the max(by:) method sorts ranks based on their rawValue:\n\nenum Rank: Int {\n    case ace = 1, two, three, four, five, six, seven, eight, nine, ten, jack, queen, king\n}\n\n\nlet max = await RankCounter()\n    .max { $0.rawValue < $1.rawValue }\nprint(max ?? \"none\")\n// Prints \"king\"\n\nSee Also\nFinding Elements\nfunc contains(where: (HKAnchoredObjectQueryDescriptor<Sample>.Result) -> Bool) -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains an element that satisfies the given predicate.\nfunc allSatisfy((HKAnchoredObjectQueryDescriptor<Sample>.Result) -> Bool) -> Bool\nReturns a Boolean value that indicates whether all elements produced by the asynchronous sequence satisfy the given predicate.\nfunc first(where: (HKAnchoredObjectQueryDescriptor<Sample>.Result) -> Bool) -> HKAnchoredObjectQueryDescriptor<Sample>.Result?\nReturns the first element of the sequence that satisfies the given predicate.\nfunc min(by: (HKAnchoredObjectQueryDescriptor<Sample>.Result, HKAnchoredObjectQueryDescriptor<Sample>.Result) -> Bool) -> HKAnchoredObjectQueryDescriptor<Sample>.Result?\nReturns the minimum element in the asynchronous sequence, using the given predicate as the comparison between elements."
  },
  {
    "title": "allSatisfy(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkanchoredobjectquerydescriptor/results/3916265-allsatisfy",
    "html": "Parameters\npredicate\n\nA closure that takes an element of the asynchronous sequence as its argument and returns a Boolean value that indicates whether the passed element satisfies a condition.\n\nReturn Value\n\ntrue if the sequence contains only elements that satisfy predicate; otherwise, false.\n\nDiscussion\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 10. The allSatisfy(_:) method checks to see whether all elements produced by the sequence are less than 10.\n\nlet allLessThanTen = await Counter(howHigh: 10)\n    .allSatisfy { $0 < 10 }\nprint(allLessThanTen)\n// Prints \"false\"\n\n\nThe predicate executes each time the asynchronous sequence produces an element, until either the predicate returns false or the sequence ends.\n\nIf the asynchronous sequence is empty, this method returns true.\n\nSee Also\nFinding Elements\nfunc contains(where: (HKAnchoredObjectQueryDescriptor<Sample>.Result) -> Bool) -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains an element that satisfies the given predicate.\nfunc first(where: (HKAnchoredObjectQueryDescriptor<Sample>.Result) -> Bool) -> HKAnchoredObjectQueryDescriptor<Sample>.Result?\nReturns the first element of the sequence that satisfies the given predicate.\nfunc max(by: (HKAnchoredObjectQueryDescriptor<Sample>.Result, HKAnchoredObjectQueryDescriptor<Sample>.Result) -> Bool) -> HKAnchoredObjectQueryDescriptor<Sample>.Result?\nReturns the maximum element in the asynchronous sequence, using the given predicate as the comparison between elements.\nfunc min(by: (HKAnchoredObjectQueryDescriptor<Sample>.Result, HKAnchoredObjectQueryDescriptor<Sample>.Result) -> Bool) -> HKAnchoredObjectQueryDescriptor<Sample>.Result?\nReturns the minimum element in the asynchronous sequence, using the given predicate as the comparison between elements."
  },
  {
    "title": "min(by:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkanchoredobjectquerydescriptor/results/3916292-min",
    "html": "Parameters\nareInIncreasingOrder\n\nA predicate that returns true if its first argument should be ordered before its second argument; otherwise, false.\n\nReturn Value\n\nThe sequence’s minimum element, according to areInIncreasingOrder. If the sequence has no elements, returns nil.\n\nDiscussion\n\nUse this method when the asynchronous sequence’s values don’t conform to Comparable, or when you want to apply a custom ordering to the sequence.\n\nThe predicate must be a strict weak ordering over the elements. That is, for any elements a, b, and c, the following conditions must hold:\n\nareInIncreasingOrder(a, a) is always false. (Irreflexivity)\n\nIf areInIncreasingOrder(a, b) and areInIncreasingOrder(b, c) are both true, then areInIncreasingOrder(a, c) is also true. (Transitive comparability)\n\nTwo elements are incomparable if neither is ordered before the other according to the predicate. If a and b are incomparable, and b and c are incomparable, then a and c are also incomparable. (Transitive incomparability)\n\nThe following example uses an enumeration of playing cards ranks, Rank, which ranges from ace (low) to king (high). An asynchronous sequence called RankCounter produces all elements of the array. The predicate provided to the min(by:) method sorts ranks based on their rawValue:\n\nenum Rank: Int {\n    case ace = 1, two, three, four, five, six, seven, eight, nine, ten, jack, queen, king\n}\n\n\nlet min = await RankCounter()\n    .min { $0.rawValue < $1.rawValue }\nprint(min ?? \"none\")\n// Prints \"ace\"\n\nSee Also\nFinding Elements\nfunc contains(where: (HKAnchoredObjectQueryDescriptor<Sample>.Result) -> Bool) -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains an element that satisfies the given predicate.\nfunc allSatisfy((HKAnchoredObjectQueryDescriptor<Sample>.Result) -> Bool) -> Bool\nReturns a Boolean value that indicates whether all elements produced by the asynchronous sequence satisfy the given predicate.\nfunc first(where: (HKAnchoredObjectQueryDescriptor<Sample>.Result) -> Bool) -> HKAnchoredObjectQueryDescriptor<Sample>.Result?\nReturns the first element of the sequence that satisfies the given predicate.\nfunc max(by: (HKAnchoredObjectQueryDescriptor<Sample>.Result, HKAnchoredObjectQueryDescriptor<Sample>.Result) -> Bool) -> HKAnchoredObjectQueryDescriptor<Sample>.Result?\nReturns the maximum element in the asynchronous sequence, using the given predicate as the comparison between elements."
  },
  {
    "title": "drop(while:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkanchoredobjectquerydescriptor/results/3916273-drop",
    "html": "Parameters\npredicate\n\nA closure that takes an element as a parameter and returns a Boolean value indicating whether to drop the element from the modified sequence.\n\nReturn Value\n\nAn asynchronous sequence that skips over values from the base sequence until the provided closure returns false.\n\nDiscussion\n\nUse drop(while:) to omit elements from an asynchronous sequence until the element received meets a condition you specify.\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 10. The drop(while:) method causes the modified sequence to ignore received values until it encounters one that is divisible by 3:\n\nlet stream = Counter(howHigh: 10)\n    .drop { $0 % 3 != 0 }\nfor await number in stream {\n    print(number, terminator: \" \")\n}\n// Prints \"3 4 5 6 7 8 9 10 \"\n\n\nAfter the predicate returns false, the sequence never executes it again, and from then on the sequence passes through elements from its underlying sequence as-is.\n\nSee Also\nExcluding Elements\nfunc dropFirst(Int) -> AsyncDropFirstSequence<HKAnchoredObjectQueryDescriptor<Sample>.Results>\nOmits a specified number of elements from the base asynchronous sequence, then passes through all remaining elements.\nfunc filter((HKAnchoredObjectQueryDescriptor<Sample>.Result) -> Bool) -> AsyncFilterSequence<HKAnchoredObjectQueryDescriptor<Sample>.Results>\nCreates an asynchronous sequence that contains, in order, the elements of the base sequence that satisfy the given predicate."
  },
  {
    "title": "first(where:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkanchoredobjectquerydescriptor/results/3916279-first",
    "html": "Parameters\npredicate\n\nA closure that takes an element of the asynchronous sequence as its argument and returns a Boolean value that indicates whether the element is a match.\n\nReturn Value\n\nThe first element of the sequence that satisfies predicate, or nil if there is no element that satisfies predicate.\n\nDiscussion\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 10. The first(where:) method returns the first member of the sequence that’s evenly divisible by both 2 and 3.\n\nlet divisibleBy2And3 = await Counter(howHigh: 10)\n    .first { $0 % 2 == 0 && $0 % 3 == 0 }\nprint(divisibleBy2And3 ?? \"none\")\n// Prints \"6\"\n\n\nThe predicate executes each time the asynchronous sequence produces an element, until either the predicate finds a match or the sequence ends.\n\nSee Also\nFinding Elements\nfunc contains(where: (HKAnchoredObjectQueryDescriptor<Sample>.Result) -> Bool) -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains an element that satisfies the given predicate.\nfunc allSatisfy((HKAnchoredObjectQueryDescriptor<Sample>.Result) -> Bool) -> Bool\nReturns a Boolean value that indicates whether all elements produced by the asynchronous sequence satisfy the given predicate.\nfunc max(by: (HKAnchoredObjectQueryDescriptor<Sample>.Result, HKAnchoredObjectQueryDescriptor<Sample>.Result) -> Bool) -> HKAnchoredObjectQueryDescriptor<Sample>.Result?\nReturns the maximum element in the asynchronous sequence, using the given predicate as the comparison between elements.\nfunc min(by: (HKAnchoredObjectQueryDescriptor<Sample>.Result, HKAnchoredObjectQueryDescriptor<Sample>.Result) -> Bool) -> HKAnchoredObjectQueryDescriptor<Sample>.Result?\nReturns the minimum element in the asynchronous sequence, using the given predicate as the comparison between elements."
  },
  {
    "title": "dropFirst(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkanchoredobjectquerydescriptor/results/3916275-dropfirst",
    "html": "Parameters\ncount\n\nThe number of elements to drop from the beginning of the sequence. count must be greater than or equal to zero.\n\nReturn Value\n\nAn asynchronous sequence that drops the first count elements from the base sequence.\n\nDiscussion\n\nUse dropFirst(_:) when you want to drop the first n elements from the base sequence and pass through the remaining elements.\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 10. The dropFirst(_:) method causes the modified sequence to ignore the values 1 through 3, and instead emit 4 through 10:\n\nfor await number in Counter(howHigh: 10).dropFirst(3) {\n    print(number, terminator: \" \")\n}\n// Prints \"4 5 6 7 8 9 10 \"\n\n\nIf the number of elements to drop exceeds the number of elements in the sequence, the result is an empty sequence.\n\nSee Also\nExcluding Elements\nfunc drop(while: (HKAnchoredObjectQueryDescriptor<Sample>.Result) -> Bool) -> AsyncDropWhileSequence<HKAnchoredObjectQueryDescriptor<Sample>.Results>\nOmits elements from the base asynchronous sequence until a given closure returns false, after which it passes through all remaining elements.\nfunc filter((HKAnchoredObjectQueryDescriptor<Sample>.Result) -> Bool) -> AsyncFilterSequence<HKAnchoredObjectQueryDescriptor<Sample>.Results>\nCreates an asynchronous sequence that contains, in order, the elements of the base sequence that satisfy the given predicate."
  },
  {
    "title": "prefix(while:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkanchoredobjectquerydescriptor/results/3916296-prefix",
    "html": "Parameters\npredicate\n\nA closure that takes an element as a parameter and returns a Boolean value indicating whether the element should be included in the modified sequence.\n\nReturn Value\n\nAn asynchronous sequence of the initial, consecutive elements that satisfy predicate.\n\nDiscussion\n\nUse prefix(while:) to produce values while elements from the base sequence meet a condition you specify. The modified sequence ends when the predicate closure returns false.\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 10. The prefix(while:) method causes the modified sequence to pass along values so long as they aren’t divisible by 2 and 3. Upon reaching 6, the sequence ends:\n\nlet stream = Counter(howHigh: 10)\n    .prefix { $0 % 2 != 0 || $0 % 3 != 0 }\nfor try await number in stream {\n    print(number, terminator: \" \")\n}\n// Prints \"1 2 3 4 5 \"\n\nSee Also\nSelecting Elements\nfunc prefix(Int) -> AsyncPrefixSequence<HKAnchoredObjectQueryDescriptor<Sample>.Results>\nReturns an asynchronous sequence, up to the specified maximum length, containing the initial elements of the base asynchronous sequence."
  },
  {
    "title": "prefix(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkanchoredobjectquerydescriptor/results/3916294-prefix",
    "html": "Parameters\ncount\n\nThe maximum number of elements to return. The value of count must be greater than or equal to zero.\n\nReturn Value\n\nAn asynchronous sequence starting at the beginning of the base sequence with at most count elements.\n\nDiscussion\n\nUse prefix(_:) to reduce the number of elements produced by the asynchronous sequence.\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 10. The prefix(_:) method causes the modified sequence to pass through the first six values, then end.\n\nfor await number in Counter(howHigh: 10).prefix(6) {\n    print(number, terminator: \" \")\n}\n// Prints \"1 2 3 4 5 6 \"\n\n\nIf the count passed to prefix(_:) exceeds the number of elements in the base sequence, the result contains all of the elements in the sequence.\n\nSee Also\nSelecting Elements\nfunc prefix(while: (HKAnchoredObjectQueryDescriptor<Sample>.Result) -> Bool) -> AsyncPrefixWhileSequence<HKAnchoredObjectQueryDescriptor<Sample>.Results>\nReturns an asynchronous sequence, containing the initial, consecutive elements of the base sequence that satisfy the given predicate."
  },
  {
    "title": "compactMap(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquantityseriessamplequerydescriptor/results/3916482-compactmap",
    "html": "Parameters\ntransform\n\nA mapping closure. transform accepts an element of this sequence as its parameter and returns a transformed value of the same or of a different type.\n\nReturn Value\n\nAn asynchronous sequence that contains, in order, the non-nil elements produced by the transform closure.\n\nDiscussion\n\nUse the compactMap(_:) method to transform every element received from a base asynchronous sequence, while also discarding any nil results from the closure. Typically, you use this to transform from one type of element to another.\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 5. The closure provided to the compactMap(_:) method takes each Int and looks up a corresponding String from a romanNumeralDict dictionary. Because there is no key for 4, the closure returns nil in this case, which compactMap(_:) omits from the transformed asynchronous sequence.\n\nlet romanNumeralDict: [Int: String] =\n    [1: \"I\", 2: \"II\", 3: \"III\", 5: \"V\"]\n    \nlet stream = Counter(howHigh: 5)\n    .compactMap { romanNumeralDict[$0] }\nfor await numeral in stream {\n    print(numeral, terminator: \" \")\n}\n// Prints \"I II III V \"\n\nSee Also\nTransforming a Sequence\nfunc map<Transformed>((HKQuantitySeriesSampleQueryDescriptor.Result) -> Transformed) -> AsyncMapSequence<HKQuantitySeriesSampleQueryDescriptor.Results, Transformed>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements.\nfunc map<Transformed>((HKQuantitySeriesSampleQueryDescriptor.Result) -> Transformed) -> AsyncThrowingMapSequence<HKQuantitySeriesSampleQueryDescriptor.Results, Transformed>\nCreates an asynchronous sequence that maps the given error-throwing closure over the asynchronous sequence’s elements.\nfunc reduce<Result>(Result, (Result, HKQuantitySeriesSampleQueryDescriptor.Result) -> Result) -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure.\nfunc reduce<Result>(into: Result, (inout Result, HKQuantitySeriesSampleQueryDescriptor.Result) -> Void) -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure, given a mutable initial value.\nfunc compactMap<ElementOfResult>((HKQuantitySeriesSampleQueryDescriptor.Result) -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<HKQuantitySeriesSampleQueryDescriptor.Results, ElementOfResult>\nCreates an asynchronous sequence that maps an error-throwing closure over the base sequence’s elements, omitting results that don’t return a value.\nfunc flatMap<SegmentOfResult>((HKQuantitySeriesSampleQueryDescriptor.Result) -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<HKQuantitySeriesSampleQueryDescriptor.Results, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given error-throwing transformation with each element of this sequence.\nfunc flatMap<SegmentOfResult>((HKQuantitySeriesSampleQueryDescriptor.Result) -> SegmentOfResult) -> AsyncFlatMapSequence<HKQuantitySeriesSampleQueryDescriptor.Results, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given transformation with each element of this sequence."
  },
  {
    "title": "flatMap(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquantityseriessamplequerydescriptor/results/3916500-flatmap",
    "html": "Parameters\ntransform\n\nA mapping closure. transform accepts an element of this sequence as its parameter and returns an AsyncSequence.\n\nReturn Value\n\nA single, flattened asynchronous sequence that contains all elements in all the asynchronous sequences produced by transform.\n\nDiscussion\n\nUse this method to receive a single-level asynchronous sequence when your transformation produces an asynchronous sequence for each element.\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 5. The transforming closure takes the received Int and returns a new Counter that counts that high. For example, when the transform receives 3 from the base sequence, it creates a new Counter that produces the values 1, 2, and 3. The flatMap(_:) method “flattens” the resulting sequence-of-sequences into a single AsyncSequence.\n\nlet stream = Counter(howHigh: 5)\n    .flatMap { Counter(howHigh: $0) }\nfor await number in stream {\n    print(number, terminator: \" \")\n}\n// Prints \"1 1 2 1 2 3 1 2 3 4 1 2 3 4 5 \"\n\nSee Also\nTransforming a Sequence\nfunc map<Transformed>((HKQuantitySeriesSampleQueryDescriptor.Result) -> Transformed) -> AsyncMapSequence<HKQuantitySeriesSampleQueryDescriptor.Results, Transformed>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements.\nfunc map<Transformed>((HKQuantitySeriesSampleQueryDescriptor.Result) -> Transformed) -> AsyncThrowingMapSequence<HKQuantitySeriesSampleQueryDescriptor.Results, Transformed>\nCreates an asynchronous sequence that maps the given error-throwing closure over the asynchronous sequence’s elements.\nfunc reduce<Result>(Result, (Result, HKQuantitySeriesSampleQueryDescriptor.Result) -> Result) -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure.\nfunc reduce<Result>(into: Result, (inout Result, HKQuantitySeriesSampleQueryDescriptor.Result) -> Void) -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure, given a mutable initial value.\nfunc compactMap<ElementOfResult>((HKQuantitySeriesSampleQueryDescriptor.Result) -> ElementOfResult?) -> AsyncCompactMapSequence<HKQuantitySeriesSampleQueryDescriptor.Results, ElementOfResult>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements, omitting results that don’t return a value.\nfunc compactMap<ElementOfResult>((HKQuantitySeriesSampleQueryDescriptor.Result) -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<HKQuantitySeriesSampleQueryDescriptor.Results, ElementOfResult>\nCreates an asynchronous sequence that maps an error-throwing closure over the base sequence’s elements, omitting results that don’t return a value.\nfunc flatMap<SegmentOfResult>((HKQuantitySeriesSampleQueryDescriptor.Result) -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<HKQuantitySeriesSampleQueryDescriptor.Results, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given error-throwing transformation with each element of this sequence."
  },
  {
    "title": "flatMap(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquantityseriessamplequerydescriptor/results/3916498-flatmap",
    "html": "Parameters\ntransform\n\nAn error-throwing mapping closure. transform accepts an element of this sequence as its parameter and returns an AsyncSequence. If transform throws an error, the sequence ends.\n\nReturn Value\n\nA single, flattened asynchronous sequence that contains all elements in all the asynchronous sequences produced by transform. The sequence ends either when the last sequence created from the last element from base sequence ends, or when transform throws an error.\n\nDiscussion\n\nUse this method to receive a single-level asynchronous sequence when your transformation produces an asynchronous sequence for each element.\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 5. The transforming closure takes the received Int and returns a new Counter that counts that high. For example, when the transform receives 3 from the base sequence, it creates a new Counter that produces the values 1, 2, and 3. The flatMap(_:) method “flattens” the resulting sequence-of-sequences into a single AsyncSequence. However, when the closure receives 4, it throws an error, terminating the sequence.\n\ndo {\n    let stream = Counter(howHigh: 5)\n        .flatMap { (value) -> Counter in\n            if value == 4 {\n                throw MyError()\n            }\n            return Counter(howHigh: value)\n        }\n    for try await number in stream {\n        print(number, terminator: \" \")\n    }\n} catch {\n    print(error)\n}\n// Prints \"1 1 2 1 2 3 MyError() \"\n\nSee Also\nTransforming a Sequence\nfunc map<Transformed>((HKQuantitySeriesSampleQueryDescriptor.Result) -> Transformed) -> AsyncMapSequence<HKQuantitySeriesSampleQueryDescriptor.Results, Transformed>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements.\nfunc map<Transformed>((HKQuantitySeriesSampleQueryDescriptor.Result) -> Transformed) -> AsyncThrowingMapSequence<HKQuantitySeriesSampleQueryDescriptor.Results, Transformed>\nCreates an asynchronous sequence that maps the given error-throwing closure over the asynchronous sequence’s elements.\nfunc reduce<Result>(Result, (Result, HKQuantitySeriesSampleQueryDescriptor.Result) -> Result) -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure.\nfunc reduce<Result>(into: Result, (inout Result, HKQuantitySeriesSampleQueryDescriptor.Result) -> Void) -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure, given a mutable initial value.\nfunc compactMap<ElementOfResult>((HKQuantitySeriesSampleQueryDescriptor.Result) -> ElementOfResult?) -> AsyncCompactMapSequence<HKQuantitySeriesSampleQueryDescriptor.Results, ElementOfResult>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements, omitting results that don’t return a value.\nfunc compactMap<ElementOfResult>((HKQuantitySeriesSampleQueryDescriptor.Result) -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<HKQuantitySeriesSampleQueryDescriptor.Results, ElementOfResult>\nCreates an asynchronous sequence that maps an error-throwing closure over the base sequence’s elements, omitting results that don’t return a value.\nfunc flatMap<SegmentOfResult>((HKQuantitySeriesSampleQueryDescriptor.Result) -> SegmentOfResult) -> AsyncFlatMapSequence<HKQuantitySeriesSampleQueryDescriptor.Results, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given transformation with each element of this sequence."
  },
  {
    "title": "!=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquantityseriessamplequerydescriptor/options/3916421",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nSee Also\nComparing Sets\nfunc isDisjoint(with: HKQuantitySeriesSampleQueryDescriptor.Options) -> Bool\nReturns a Boolean value that indicates whether the set has no members in common with the given set.\nfunc isSubset(of: HKQuantitySeriesSampleQueryDescriptor.Options) -> Bool\nReturns a Boolean value that indicates whether the set is a subset of another set.\nfunc isStrictSubset(of: HKQuantitySeriesSampleQueryDescriptor.Options) -> Bool\nReturns a Boolean value that indicates whether this set is a strict subset of the given set.\nfunc isSuperset(of: HKQuantitySeriesSampleQueryDescriptor.Options) -> Bool\nReturns a Boolean value that indicates whether the set is a superset of the given set.\nfunc isStrictSuperset(of: HKQuantitySeriesSampleQueryDescriptor.Options) -> Bool\nReturns a Boolean value that indicates whether this set is a strict superset of the given set."
  },
  {
    "title": "HKCategoryValuePresence.present | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkcategoryvaluepresence/present",
    "html": "See Also\nPresence of Symptoms\ncase notPresent\nThe symptom isn’t present."
  },
  {
    "title": "sample | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquantityseriessamplequerydescriptor/result/3916473-sample",
    "html": "Discussion\n\nHealthKit sets this value to nil unless you included the includeSample option when you created the series query descriptor.\n\nSee Also\nAccessing Sample Data\nlet quantity: HKQuantity\nThe quantity stored by the data entry.\nlet dateInterval: DateInterval\nThe date interval for the entry."
  },
  {
    "title": "HKCategoryValueContraceptive.intrauterineDevice | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkcategoryvaluecontraceptive/intrauterinedevice",
    "html": "See Also\nContraceptive Types\ncase unspecified\nAn unspecified type of contraceptive.\ncase implant\nA contraceptive implant.\ncase injection\nAn injectable contraceptive.\ncase intravaginalRing\nA contraceptive intravaginal ring.\ncase oral\nAn oral contraceptive.\ncase patch\nA contraceptive patch."
  },
  {
    "title": "hashValue | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquantityseriessamplequerydescriptor/result/3916471-hashvalue",
    "html": "Relationships\nFrom Protocol\nHashable\nSee Also\nComparing Results\nfunc hash(into: inout Hasher)\nHashes the essential components of the entry by passing them into the given hash function.\nstatic func == (HKQuantitySeriesSampleQueryDescriptor.Result, HKQuantitySeriesSampleQueryDescriptor.Result) -> Bool\nIndicates whether two entries are equal.\nstatic func != (HKQuantitySeriesSampleQueryDescriptor.Result, HKQuantitySeriesSampleQueryDescriptor.Result) -> Bool\nIndicates whether two data entries are unequal."
  },
  {
    "title": "isStrictSuperset(of:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquantityseriessamplequerydescriptor/options/3916446-isstrictsuperset",
    "html": "Parameters\nother\n\nA set of the same type as the current set.\n\nReturn Value\n\ntrue if the set is a strict superset of other; otherwise, false.\n\nDiscussion\n\nSet A is a strict superset of another set B if every member of B is also a member of A and A contains at least one element that is not a member of B.\n\nlet employees: Set = [\"Alicia\", \"Bethany\", \"Chris\", \"Diana\", \"Eric\"]\nlet attendees: Set = [\"Alicia\", \"Bethany\", \"Diana\"]\nprint(employees.isStrictSuperset(of: attendees))\n// Prints \"true\"\n\n\n// A set is never a strict superset of itself:\nprint(employees.isStrictSuperset(of: employees))\n// Prints \"false\"\n\nSee Also\nComparing Sets\nfunc isDisjoint(with: HKQuantitySeriesSampleQueryDescriptor.Options) -> Bool\nReturns a Boolean value that indicates whether the set has no members in common with the given set.\nfunc isSubset(of: HKQuantitySeriesSampleQueryDescriptor.Options) -> Bool\nReturns a Boolean value that indicates whether the set is a subset of another set.\nfunc isStrictSubset(of: HKQuantitySeriesSampleQueryDescriptor.Options) -> Bool\nReturns a Boolean value that indicates whether this set is a strict subset of the given set.\nfunc isSuperset(of: HKQuantitySeriesSampleQueryDescriptor.Options) -> Bool\nReturns a Boolean value that indicates whether the set is a superset of the given set.\nstatic func != (HKQuantitySeriesSampleQueryDescriptor.Options, HKQuantitySeriesSampleQueryDescriptor.Options) -> Bool\nReturns a Boolean value indicating whether two option sets aren’t equal."
  },
  {
    "title": "dateInterval | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquantityseriessamplequerydescriptor/result/3916469-dateinterval",
    "html": "See Also\nAccessing Sample Data\nlet sample: HKQuantitySample?\nThe quantity sample that owns the series of data entries.\nlet quantity: HKQuantity\nThe quantity stored by the data entry."
  },
  {
    "title": "isSubset(of:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquantityseriessamplequerydescriptor/options/3916448-issubset",
    "html": "Parameters\nother\n\nA set of the same type as the current set.\n\nReturn Value\n\ntrue if the set is a subset of other; otherwise, false.\n\nDiscussion\n\nSet A is a subset of another set B if every member of A is also a member of B.\n\nlet employees: Set = [\"Alicia\", \"Bethany\", \"Chris\", \"Diana\", \"Eric\"]\nlet attendees: Set = [\"Alicia\", \"Bethany\", \"Diana\"]\nprint(attendees.isSubset(of: employees))\n// Prints \"true\"\n\nSee Also\nComparing Sets\nfunc isDisjoint(with: HKQuantitySeriesSampleQueryDescriptor.Options) -> Bool\nReturns a Boolean value that indicates whether the set has no members in common with the given set.\nfunc isStrictSubset(of: HKQuantitySeriesSampleQueryDescriptor.Options) -> Bool\nReturns a Boolean value that indicates whether this set is a strict subset of the given set.\nfunc isSuperset(of: HKQuantitySeriesSampleQueryDescriptor.Options) -> Bool\nReturns a Boolean value that indicates whether the set is a superset of the given set.\nfunc isStrictSuperset(of: HKQuantitySeriesSampleQueryDescriptor.Options) -> Bool\nReturns a Boolean value that indicates whether this set is a strict superset of the given set.\nstatic func != (HKQuantitySeriesSampleQueryDescriptor.Options, HKQuantitySeriesSampleQueryDescriptor.Options) -> Bool\nReturns a Boolean value indicating whether two option sets aren’t equal."
  },
  {
    "title": "isStrictSubset(of:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquantityseriessamplequerydescriptor/options/3916444-isstrictsubset",
    "html": "Parameters\nother\n\nA set of the same type as the current set.\n\nReturn Value\n\ntrue if the set is a strict subset of other; otherwise, false.\n\nDiscussion\n\nSet A is a strict subset of another set B if every member of A is also a member of B and B contains at least one element that is not a member of A.\n\nlet employees: Set = [\"Alicia\", \"Bethany\", \"Chris\", \"Diana\", \"Eric\"]\nlet attendees: Set = [\"Alicia\", \"Bethany\", \"Diana\"]\nprint(attendees.isStrictSubset(of: employees))\n// Prints \"true\"\n\n\n// A set is never a strict subset of itself:\nprint(attendees.isStrictSubset(of: attendees))\n// Prints \"false\"\n\nSee Also\nComparing Sets\nfunc isDisjoint(with: HKQuantitySeriesSampleQueryDescriptor.Options) -> Bool\nReturns a Boolean value that indicates whether the set has no members in common with the given set.\nfunc isSubset(of: HKQuantitySeriesSampleQueryDescriptor.Options) -> Bool\nReturns a Boolean value that indicates whether the set is a subset of another set.\nfunc isSuperset(of: HKQuantitySeriesSampleQueryDescriptor.Options) -> Bool\nReturns a Boolean value that indicates whether the set is a superset of the given set.\nfunc isStrictSuperset(of: HKQuantitySeriesSampleQueryDescriptor.Options) -> Bool\nReturns a Boolean value that indicates whether this set is a strict superset of the given set.\nstatic func != (HKQuantitySeriesSampleQueryDescriptor.Options, HKQuantitySeriesSampleQueryDescriptor.Options) -> Bool\nReturns a Boolean value indicating whether two option sets aren’t equal."
  },
  {
    "title": "hash(into:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquantityseriessamplequerydescriptor/result/3916470-hash",
    "html": "Parameters\nhasher\n\nThe hash function to use when combining the components of the data entry.\n\nRelationships\nFrom Protocol\nHashable\nSee Also\nComparing Results\nvar hashValue: Int\nThe hashed value for the entry.\nstatic func == (HKQuantitySeriesSampleQueryDescriptor.Result, HKQuantitySeriesSampleQueryDescriptor.Result) -> Bool\nIndicates whether two entries are equal.\nstatic func != (HKQuantitySeriesSampleQueryDescriptor.Result, HKQuantitySeriesSampleQueryDescriptor.Result) -> Bool\nIndicates whether two data entries are unequal."
  },
  {
    "title": "orderByQuantitySampleStartDate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquantityseriessamplequerydescriptor/options/3916452-orderbyquantitysamplestartdate",
    "html": "See Also\nSetting Options\nstatic let includeSample: HKQuantitySeriesSampleQueryDescriptor.Options\nAn option indicating that the results should include a reference to the quantity sample that contains the series data."
  },
  {
    "title": "init() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquantityseriessamplequerydescriptor/options/3916431-init",
    "html": "Discussion\n\nThis initializer creates an option set with a raw value of zero.\n\nSee Also\nCreating Options\ninit<S>(S)\nCreates a new set from a finite sequence of items.\ninit(arrayLiteral: HKQuantitySeriesSampleQueryDescriptor.Options...)\nCreates a set containing the elements of the given array literal.\ninit(rawValue: Int)\nCreates a set that includes an option that corresponds to the provided raw value.\ntypealias HKQuantitySeriesSampleQueryDescriptor.Options.RawValue\nThe raw value for an option.\nlet rawValue: Int\nThe raw value for the options."
  },
  {
    "title": "reduce(into:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkanchoredobjectquerydescriptor/results/3916300-reduce",
    "html": "Parameters\ninitialResult\n\nThe value to use as the initial accumulating value. The nextPartialResult closure receives initialResult the first time the closure executes.\n\nnextPartialResult\n\nA closure that combines an accumulating value and an element of the asynchronous sequence into a new accumulating value, for use in the next call of the nextPartialResult closure or returned to the caller.\n\nReturn Value\n\nThe final accumulated value. If the sequence has no elements, the result is initialResult.\n\nDiscussion\n\nUse the reduce(into:_:) method to produce a single value from the elements of an entire sequence. For example, you can use this method on a sequence of numbers to find their sum or product.\n\nThe nextPartialResult closure executes sequentially with an accumulating value initialized to initialResult and each element of the sequence.\n\nPrefer this method over reduce(_:_:) for efficiency when the result is a copy-on-write type, for example an Array or Dictionary.\n\nSee Also\nTransforming a Sequence\nfunc map<Transformed>((HKAnchoredObjectQueryDescriptor<Sample>.Result) -> Transformed) -> AsyncMapSequence<HKAnchoredObjectQueryDescriptor<Sample>.Results, Transformed>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements.\nfunc map<Transformed>((HKAnchoredObjectQueryDescriptor<Sample>.Result) -> Transformed) -> AsyncThrowingMapSequence<HKAnchoredObjectQueryDescriptor<Sample>.Results, Transformed>\nCreates an asynchronous sequence that maps the given error-throwing closure over the asynchronous sequence’s elements.\nfunc reduce<Result>(Result, (Result, HKAnchoredObjectQueryDescriptor<Sample>.Result) -> Result) -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure.\nfunc compactMap<ElementOfResult>((HKAnchoredObjectQueryDescriptor<Sample>.Result) -> ElementOfResult?) -> AsyncCompactMapSequence<HKAnchoredObjectQueryDescriptor<Sample>.Results, ElementOfResult>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements, omitting results that don’t return a value.\nfunc compactMap<ElementOfResult>((HKAnchoredObjectQueryDescriptor<Sample>.Result) -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<HKAnchoredObjectQueryDescriptor<Sample>.Results, ElementOfResult>\nCreates an asynchronous sequence that maps an error-throwing closure over the base sequence’s elements, omitting results that don’t return a value.\nfunc flatMap<SegmentOfResult>((HKAnchoredObjectQueryDescriptor<Sample>.Result) -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<HKAnchoredObjectQueryDescriptor<Sample>.Results, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given error-throwing transformation with each element of this sequence.\nfunc flatMap<SegmentOfResult>((HKAnchoredObjectQueryDescriptor<Sample>.Result) -> SegmentOfResult) -> AsyncFlatMapSequence<HKAnchoredObjectQueryDescriptor<Sample>.Results, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given transformation with each element of this sequence."
  },
  {
    "title": "flatMap(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkanchoredobjectquerydescriptor/results/3916281-flatmap",
    "html": "Parameters\ntransform\n\nAn error-throwing mapping closure. transform accepts an element of this sequence as its parameter and returns an AsyncSequence. If transform throws an error, the sequence ends.\n\nReturn Value\n\nA single, flattened asynchronous sequence that contains all elements in all the asynchronous sequences produced by transform. The sequence ends either when the last sequence created from the last element from base sequence ends, or when transform throws an error.\n\nDiscussion\n\nUse this method to receive a single-level asynchronous sequence when your transformation produces an asynchronous sequence for each element.\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 5. The transforming closure takes the received Int and returns a new Counter that counts that high. For example, when the transform receives 3 from the base sequence, it creates a new Counter that produces the values 1, 2, and 3. The flatMap(_:) method “flattens” the resulting sequence-of-sequences into a single AsyncSequence. However, when the closure receives 4, it throws an error, terminating the sequence.\n\ndo {\n    let stream = Counter(howHigh: 5)\n        .flatMap { (value) -> Counter in\n            if value == 4 {\n                throw MyError()\n            }\n            return Counter(howHigh: value)\n        }\n    for try await number in stream {\n        print(number, terminator: \" \")\n    }\n} catch {\n    print(error)\n}\n// Prints \"1 1 2 1 2 3 MyError() \"\n\nSee Also\nTransforming a Sequence\nfunc map<Transformed>((HKAnchoredObjectQueryDescriptor<Sample>.Result) -> Transformed) -> AsyncMapSequence<HKAnchoredObjectQueryDescriptor<Sample>.Results, Transformed>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements.\nfunc map<Transformed>((HKAnchoredObjectQueryDescriptor<Sample>.Result) -> Transformed) -> AsyncThrowingMapSequence<HKAnchoredObjectQueryDescriptor<Sample>.Results, Transformed>\nCreates an asynchronous sequence that maps the given error-throwing closure over the asynchronous sequence’s elements.\nfunc reduce<Result>(Result, (Result, HKAnchoredObjectQueryDescriptor<Sample>.Result) -> Result) -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure.\nfunc reduce<Result>(into: Result, (inout Result, HKAnchoredObjectQueryDescriptor<Sample>.Result) -> Void) -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure, given a mutable initial value.\nfunc compactMap<ElementOfResult>((HKAnchoredObjectQueryDescriptor<Sample>.Result) -> ElementOfResult?) -> AsyncCompactMapSequence<HKAnchoredObjectQueryDescriptor<Sample>.Results, ElementOfResult>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements, omitting results that don’t return a value.\nfunc compactMap<ElementOfResult>((HKAnchoredObjectQueryDescriptor<Sample>.Result) -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<HKAnchoredObjectQueryDescriptor<Sample>.Results, ElementOfResult>\nCreates an asynchronous sequence that maps an error-throwing closure over the base sequence’s elements, omitting results that don’t return a value.\nfunc flatMap<SegmentOfResult>((HKAnchoredObjectQueryDescriptor<Sample>.Result) -> SegmentOfResult) -> AsyncFlatMapSequence<HKAnchoredObjectQueryDescriptor<Sample>.Results, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given transformation with each element of this sequence."
  },
  {
    "title": "compactMap(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkanchoredobjectquerydescriptor/results/3916267-compactmap",
    "html": "Parameters\ntransform\n\nA mapping closure. transform accepts an element of this sequence as its parameter and returns a transformed value of the same or of a different type.\n\nReturn Value\n\nAn asynchronous sequence that contains, in order, the non-nil elements produced by the transform closure.\n\nDiscussion\n\nUse the compactMap(_:) method to transform every element received from a base asynchronous sequence, while also discarding any nil results from the closure. Typically, you use this to transform from one type of element to another.\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 5. The closure provided to the compactMap(_:) method takes each Int and looks up a corresponding String from a romanNumeralDict dictionary. Because there is no key for 4, the closure returns nil in this case, which compactMap(_:) omits from the transformed asynchronous sequence.\n\nlet romanNumeralDict: [Int: String] =\n    [1: \"I\", 2: \"II\", 3: \"III\", 5: \"V\"]\n    \nlet stream = Counter(howHigh: 5)\n    .compactMap { romanNumeralDict[$0] }\nfor await numeral in stream {\n    print(numeral, terminator: \" \")\n}\n// Prints \"I II III V \"\n\nSee Also\nTransforming a Sequence\nfunc map<Transformed>((HKAnchoredObjectQueryDescriptor<Sample>.Result) -> Transformed) -> AsyncMapSequence<HKAnchoredObjectQueryDescriptor<Sample>.Results, Transformed>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements.\nfunc map<Transformed>((HKAnchoredObjectQueryDescriptor<Sample>.Result) -> Transformed) -> AsyncThrowingMapSequence<HKAnchoredObjectQueryDescriptor<Sample>.Results, Transformed>\nCreates an asynchronous sequence that maps the given error-throwing closure over the asynchronous sequence’s elements.\nfunc reduce<Result>(Result, (Result, HKAnchoredObjectQueryDescriptor<Sample>.Result) -> Result) -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure.\nfunc reduce<Result>(into: Result, (inout Result, HKAnchoredObjectQueryDescriptor<Sample>.Result) -> Void) -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure, given a mutable initial value.\nfunc compactMap<ElementOfResult>((HKAnchoredObjectQueryDescriptor<Sample>.Result) -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<HKAnchoredObjectQueryDescriptor<Sample>.Results, ElementOfResult>\nCreates an asynchronous sequence that maps an error-throwing closure over the base sequence’s elements, omitting results that don’t return a value.\nfunc flatMap<SegmentOfResult>((HKAnchoredObjectQueryDescriptor<Sample>.Result) -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<HKAnchoredObjectQueryDescriptor<Sample>.Results, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given error-throwing transformation with each element of this sequence.\nfunc flatMap<SegmentOfResult>((HKAnchoredObjectQueryDescriptor<Sample>.Result) -> SegmentOfResult) -> AsyncFlatMapSequence<HKAnchoredObjectQueryDescriptor<Sample>.Results, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given transformation with each element of this sequence."
  },
  {
    "title": "map(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkanchoredobjectquerydescriptor/results/3916288-map",
    "html": "Parameters\ntransform\n\nA mapping closure. transform accepts an element of this sequence as its parameter and returns a transformed value of the same or of a different type. transform can also throw an error, which ends the transformed sequence.\n\nReturn Value\n\nAn asynchronous sequence that contains, in order, the elements produced by the transform closure.\n\nDiscussion\n\nUse the map(_:) method to transform every element received from a base asynchronous sequence. Typically, you use this to transform from one type of element to another.\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 5. The closure provided to the map(_:) method takes each Int and looks up a corresponding String from a romanNumeralDict dictionary. This means the outer for await in loop iterates over String instances instead of the underlying Int values that Counter produces. Also, the dictionary doesn’t provide a key for 4, and the closure throws an error for any key it can’t look up, so receiving this value from Counter ends the modified sequence with an error.\n\nlet romanNumeralDict: [Int: String] =\n    [1: \"I\", 2: \"II\", 3: \"III\", 5: \"V\"]\n\n\ndo {\n    let stream = Counter(howHigh: 5)\n        .map { (value) throws -> String in\n            guard let roman = romanNumeralDict[value] else {\n                throw MyError()\n            }\n            return roman\n        }\n    for try await numeral in stream {\n        print(numeral, terminator: \" \")\n    }\n} catch {\n    print(\"Error: \\(error)\")\n}\n// Prints \"I II III Error: MyError() \"\n\nSee Also\nTransforming a Sequence\nfunc map<Transformed>((HKAnchoredObjectQueryDescriptor<Sample>.Result) -> Transformed) -> AsyncMapSequence<HKAnchoredObjectQueryDescriptor<Sample>.Results, Transformed>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements.\nfunc reduce<Result>(Result, (Result, HKAnchoredObjectQueryDescriptor<Sample>.Result) -> Result) -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure.\nfunc reduce<Result>(into: Result, (inout Result, HKAnchoredObjectQueryDescriptor<Sample>.Result) -> Void) -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure, given a mutable initial value.\nfunc compactMap<ElementOfResult>((HKAnchoredObjectQueryDescriptor<Sample>.Result) -> ElementOfResult?) -> AsyncCompactMapSequence<HKAnchoredObjectQueryDescriptor<Sample>.Results, ElementOfResult>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements, omitting results that don’t return a value.\nfunc compactMap<ElementOfResult>((HKAnchoredObjectQueryDescriptor<Sample>.Result) -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<HKAnchoredObjectQueryDescriptor<Sample>.Results, ElementOfResult>\nCreates an asynchronous sequence that maps an error-throwing closure over the base sequence’s elements, omitting results that don’t return a value.\nfunc flatMap<SegmentOfResult>((HKAnchoredObjectQueryDescriptor<Sample>.Result) -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<HKAnchoredObjectQueryDescriptor<Sample>.Results, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given error-throwing transformation with each element of this sequence.\nfunc flatMap<SegmentOfResult>((HKAnchoredObjectQueryDescriptor<Sample>.Result) -> SegmentOfResult) -> AsyncFlatMapSequence<HKAnchoredObjectQueryDescriptor<Sample>.Results, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given transformation with each element of this sequence."
  },
  {
    "title": "flatMap(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkanchoredobjectquerydescriptor/results/3916283-flatmap",
    "html": "Parameters\ntransform\n\nA mapping closure. transform accepts an element of this sequence as its parameter and returns an AsyncSequence.\n\nReturn Value\n\nA single, flattened asynchronous sequence that contains all elements in all the asynchronous sequences produced by transform.\n\nDiscussion\n\nUse this method to receive a single-level asynchronous sequence when your transformation produces an asynchronous sequence for each element.\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 5. The transforming closure takes the received Int and returns a new Counter that counts that high. For example, when the transform receives 3 from the base sequence, it creates a new Counter that produces the values 1, 2, and 3. The flatMap(_:) method “flattens” the resulting sequence-of-sequences into a single AsyncSequence.\n\nlet stream = Counter(howHigh: 5)\n    .flatMap { Counter(howHigh: $0) }\nfor await number in stream {\n    print(number, terminator: \" \")\n}\n// Prints \"1 1 2 1 2 3 1 2 3 4 1 2 3 4 5 \"\n\nSee Also\nTransforming a Sequence\nfunc map<Transformed>((HKAnchoredObjectQueryDescriptor<Sample>.Result) -> Transformed) -> AsyncMapSequence<HKAnchoredObjectQueryDescriptor<Sample>.Results, Transformed>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements.\nfunc map<Transformed>((HKAnchoredObjectQueryDescriptor<Sample>.Result) -> Transformed) -> AsyncThrowingMapSequence<HKAnchoredObjectQueryDescriptor<Sample>.Results, Transformed>\nCreates an asynchronous sequence that maps the given error-throwing closure over the asynchronous sequence’s elements.\nfunc reduce<Result>(Result, (Result, HKAnchoredObjectQueryDescriptor<Sample>.Result) -> Result) -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure.\nfunc reduce<Result>(into: Result, (inout Result, HKAnchoredObjectQueryDescriptor<Sample>.Result) -> Void) -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure, given a mutable initial value.\nfunc compactMap<ElementOfResult>((HKAnchoredObjectQueryDescriptor<Sample>.Result) -> ElementOfResult?) -> AsyncCompactMapSequence<HKAnchoredObjectQueryDescriptor<Sample>.Results, ElementOfResult>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements, omitting results that don’t return a value.\nfunc compactMap<ElementOfResult>((HKAnchoredObjectQueryDescriptor<Sample>.Result) -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<HKAnchoredObjectQueryDescriptor<Sample>.Results, ElementOfResult>\nCreates an asynchronous sequence that maps an error-throwing closure over the base sequence’s elements, omitting results that don’t return a value.\nfunc flatMap<SegmentOfResult>((HKAnchoredObjectQueryDescriptor<Sample>.Result) -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<HKAnchoredObjectQueryDescriptor<Sample>.Results, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given error-throwing transformation with each element of this sequence."
  },
  {
    "title": "reduce(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkanchoredobjectquerydescriptor/results/3916298-reduce",
    "html": "Parameters\ninitialResult\n\nThe value to use as the initial accumulating value. The nextPartialResult closure receives initialResult the first time the closure runs.\n\nnextPartialResult\n\nA closure that combines an accumulating value and an element of the asynchronous sequence into a new accumulating value, for use in the next call of the nextPartialResult closure or returned to the caller.\n\nReturn Value\n\nThe final accumulated value. If the sequence has no elements, the result is initialResult.\n\nDiscussion\n\nUse the reduce(_:_:) method to produce a single value from the elements of an entire sequence. For example, you can use this method on an sequence of numbers to find their sum or product.\n\nThe nextPartialResult closure executes sequentially with an accumulating value initialized to initialResult and each element of the sequence.\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 4. The reduce(_:_:) method sums the values received from the asynchronous sequence.\n\nlet sum = await Counter(howHigh: 4)\n    .reduce(0) {\n        $0 + $1\n    }\nprint(sum)\n// Prints \"10\"\n\nSee Also\nTransforming a Sequence\nfunc map<Transformed>((HKAnchoredObjectQueryDescriptor<Sample>.Result) -> Transformed) -> AsyncMapSequence<HKAnchoredObjectQueryDescriptor<Sample>.Results, Transformed>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements.\nfunc map<Transformed>((HKAnchoredObjectQueryDescriptor<Sample>.Result) -> Transformed) -> AsyncThrowingMapSequence<HKAnchoredObjectQueryDescriptor<Sample>.Results, Transformed>\nCreates an asynchronous sequence that maps the given error-throwing closure over the asynchronous sequence’s elements.\nfunc reduce<Result>(into: Result, (inout Result, HKAnchoredObjectQueryDescriptor<Sample>.Result) -> Void) -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure, given a mutable initial value.\nfunc compactMap<ElementOfResult>((HKAnchoredObjectQueryDescriptor<Sample>.Result) -> ElementOfResult?) -> AsyncCompactMapSequence<HKAnchoredObjectQueryDescriptor<Sample>.Results, ElementOfResult>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements, omitting results that don’t return a value.\nfunc compactMap<ElementOfResult>((HKAnchoredObjectQueryDescriptor<Sample>.Result) -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<HKAnchoredObjectQueryDescriptor<Sample>.Results, ElementOfResult>\nCreates an asynchronous sequence that maps an error-throwing closure over the base sequence’s elements, omitting results that don’t return a value.\nfunc flatMap<SegmentOfResult>((HKAnchoredObjectQueryDescriptor<Sample>.Result) -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<HKAnchoredObjectQueryDescriptor<Sample>.Results, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given error-throwing transformation with each element of this sequence.\nfunc flatMap<SegmentOfResult>((HKAnchoredObjectQueryDescriptor<Sample>.Result) -> SegmentOfResult) -> AsyncFlatMapSequence<HKAnchoredObjectQueryDescriptor<Sample>.Results, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given transformation with each element of this sequence."
  },
  {
    "title": "deletedObjects | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkanchoredobjectquerydescriptor/result/3916257-deletedobjects",
    "html": "See Also\nAccessing the Results\nlet addedSamples: [Sample]\nAn array containing the matching samples added to the HealthKit store.\nlet newAnchor: HKQueryAnchor\nA value corresponding to the last sample that the anchor query has returned."
  },
  {
    "title": "addedSamples | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkanchoredobjectquerydescriptor/result/3916256-addedsamples",
    "html": "See Also\nAccessing the Results\nlet deletedObjects: [HKDeletedObject]\nAn array of objects deleted from the HealthKit store.\nlet newAnchor: HKQueryAnchor\nA value corresponding to the last sample that the anchor query has returned."
  },
  {
    "title": "HKWorkoutRouteQueryDescriptor.Results.Element | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkoutroutequerydescriptor/results/element",
    "html": "See Also\nCreating an Iterator\nfunc makeAsyncIterator() -> HKWorkoutRouteQueryDescriptor.Results.Iterator\nCreates the asynchronous iterator that produces results from this asynchronous sequence.\nstruct HKWorkoutRouteQueryDescriptor.Results.Iterator\nAn iterator for accessing individual locations from the workout route.\ntypealias HKWorkoutRouteQueryDescriptor.Results.AsyncIterator\nAn iterator for accessing individual locations from a workout route."
  },
  {
    "title": "newAnchor | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkanchoredobjectquerydescriptor/result/3916258-newanchor",
    "html": "Discussion\n\nSubsequent anchor object queries can use this anchor to receive only the samples saved and objects deleted after this query completed.\n\nSee Also\nAccessing the Results\nlet addedSamples: [Sample]\nAn array containing the matching samples added to the HealthKit store.\nlet deletedObjects: [HKDeletedObject]\nAn array of objects deleted from the HealthKit store."
  },
  {
    "title": "HKQuantitySeriesSampleQueryDescriptor.Results.Iterator | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquantityseriessamplequerydescriptor/results/iterator",
    "html": "Topics\nAccessing the Results\ntypealias HKQuantitySeriesSampleQueryDescriptor.Results.Iterator.Element\nThe type for results returned by the series sample query iterator.\nfunc next() -> HKQuantitySeriesSampleQueryDescriptor.Results.Element?\nAsynchronously waits for the next element and returns it.\nRelationships\nConforms To\nAsyncIteratorProtocol\nSee Also\nCreating an Iterator\nfunc makeAsyncIterator() -> HKQuantitySeriesSampleQueryDescriptor.Results.Iterator\nCreates the asynchronous iterator that produces results from this asynchronous sequence.\ntypealias HKQuantitySeriesSampleQueryDescriptor.Results.AsyncIterator\nAn iterator for accessing individual data entries from the series.\ntypealias HKQuantitySeriesSampleQueryDescriptor.Results.Element\nA structure that represents a single data entry from a series."
  },
  {
    "title": "contains(where:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquantityseriessamplequerydescriptor/results/3916488-contains",
    "html": "Parameters\npredicate\n\nA closure that takes an element of the asynchronous sequence as its argument and returns a Boolean value that indicates whether the passed element represents a match.\n\nReturn Value\n\ntrue if the sequence contains an element that satisfies predicate; otherwise, false.\n\nDiscussion\n\nYou can use the predicate to check for an element of a type that doesn’t conform to the Equatable protocol, or to find an element that satisfies a general condition.\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 10. The contains(where:) method checks to see whether the sequence produces a value divisible by 3:\n\nlet containsDivisibleByThree = await Counter(howHigh: 10)\n    .contains { $0 % 3 == 0 }\nprint(containsDivisibleByThree)\n// Prints \"true\"\n\n\nThe predicate executes each time the asynchronous sequence produces an element, until either the predicate finds a match or the sequence ends.\n\nSee Also\nFinding Elements\nfunc contains(HKQuantitySeriesSampleQueryDescriptor.Result) -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains the given element.\nfunc allSatisfy((HKQuantitySeriesSampleQueryDescriptor.Result) -> Bool) -> Bool\nReturns a Boolean value that indicates whether all elements produced by the asynchronous sequence satisfy the given predicate.\nfunc first(where: (HKQuantitySeriesSampleQueryDescriptor.Result) -> Bool) -> HKQuantitySeriesSampleQueryDescriptor.Result?\nReturns the first element of the sequence that satisfies the given predicate.\nfunc max(by: (HKQuantitySeriesSampleQueryDescriptor.Result, HKQuantitySeriesSampleQueryDescriptor.Result) -> Bool) -> HKQuantitySeriesSampleQueryDescriptor.Result?\nReturns the maximum element in the asynchronous sequence, using the given predicate as the comparison between elements.\nfunc min(by: (HKQuantitySeriesSampleQueryDescriptor.Result, HKQuantitySeriesSampleQueryDescriptor.Result) -> Bool) -> HKQuantitySeriesSampleQueryDescriptor.Result?\nReturns the minimum element in the asynchronous sequence, using the given predicate as the comparison between elements."
  },
  {
    "title": "min(by:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquantityseriessamplequerydescriptor/results/3916509-min",
    "html": "Parameters\nareInIncreasingOrder\n\nA predicate that returns true if its first argument should be ordered before its second argument; otherwise, false.\n\nReturn Value\n\nThe sequence’s minimum element, according to areInIncreasingOrder. If the sequence has no elements, returns nil.\n\nDiscussion\n\nUse this method when the asynchronous sequence’s values don’t conform to Comparable, or when you want to apply a custom ordering to the sequence.\n\nThe predicate must be a strict weak ordering over the elements. That is, for any elements a, b, and c, the following conditions must hold:\n\nareInIncreasingOrder(a, a) is always false. (Irreflexivity)\n\nIf areInIncreasingOrder(a, b) and areInIncreasingOrder(b, c) are both true, then areInIncreasingOrder(a, c) is also true. (Transitive comparability)\n\nTwo elements are incomparable if neither is ordered before the other according to the predicate. If a and b are incomparable, and b and c are incomparable, then a and c are also incomparable. (Transitive incomparability)\n\nThe following example uses an enumeration of playing cards ranks, Rank, which ranges from ace (low) to king (high). An asynchronous sequence called RankCounter produces all elements of the array. The predicate provided to the min(by:) method sorts ranks based on their rawValue:\n\nenum Rank: Int {\n    case ace = 1, two, three, four, five, six, seven, eight, nine, ten, jack, queen, king\n}\n\n\nlet min = await RankCounter()\n    .min { $0.rawValue < $1.rawValue }\nprint(min ?? \"none\")\n// Prints \"ace\"\n\nSee Also\nFinding Elements\nfunc contains(HKQuantitySeriesSampleQueryDescriptor.Result) -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains the given element.\nfunc contains(where: (HKQuantitySeriesSampleQueryDescriptor.Result) -> Bool) -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains an element that satisfies the given predicate.\nfunc allSatisfy((HKQuantitySeriesSampleQueryDescriptor.Result) -> Bool) -> Bool\nReturns a Boolean value that indicates whether all elements produced by the asynchronous sequence satisfy the given predicate.\nfunc first(where: (HKQuantitySeriesSampleQueryDescriptor.Result) -> Bool) -> HKQuantitySeriesSampleQueryDescriptor.Result?\nReturns the first element of the sequence that satisfies the given predicate.\nfunc max(by: (HKQuantitySeriesSampleQueryDescriptor.Result, HKQuantitySeriesSampleQueryDescriptor.Result) -> Bool) -> HKQuantitySeriesSampleQueryDescriptor.Result?\nReturns the maximum element in the asynchronous sequence, using the given predicate as the comparison between elements."
  },
  {
    "title": "prefix(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquantityseriessamplequerydescriptor/results/3916511-prefix",
    "html": "Parameters\ncount\n\nThe maximum number of elements to return. The value of count must be greater than or equal to zero.\n\nReturn Value\n\nAn asynchronous sequence starting at the beginning of the base sequence with at most count elements.\n\nDiscussion\n\nUse prefix(_:) to reduce the number of elements produced by the asynchronous sequence.\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 10. The prefix(_:) method causes the modified sequence to pass through the first six values, then end.\n\nfor await number in Counter(howHigh: 10).prefix(6) {\n    print(number, terminator: \" \")\n}\n// Prints \"1 2 3 4 5 6 \"\n\n\nIf the count passed to prefix(_:) exceeds the number of elements in the base sequence, the result contains all of the elements in the sequence.\n\nSee Also\nSelecting Elements\nfunc prefix(while: (HKQuantitySeriesSampleQueryDescriptor.Result) -> Bool) -> AsyncPrefixWhileSequence<HKQuantitySeriesSampleQueryDescriptor.Results>\nReturns an asynchronous sequence, containing the initial, consecutive elements of the base sequence that satisfy the given predicate."
  },
  {
    "title": "prefix(while:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquantityseriessamplequerydescriptor/results/3916513-prefix",
    "html": "Parameters\npredicate\n\nA closure that takes an element as a parameter and returns a Boolean value indicating whether the element should be included in the modified sequence.\n\nReturn Value\n\nAn asynchronous sequence of the initial, consecutive elements that satisfy predicate.\n\nDiscussion\n\nUse prefix(while:) to produce values while elements from the base sequence meet a condition you specify. The modified sequence ends when the predicate closure returns false.\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 10. The prefix(while:) method causes the modified sequence to pass along values so long as they aren’t divisible by 2 and 3. Upon reaching 6, the sequence ends:\n\nlet stream = Counter(howHigh: 10)\n    .prefix { $0 % 2 != 0 || $0 % 3 != 0 }\nfor try await number in stream {\n    print(number, terminator: \" \")\n}\n// Prints \"1 2 3 4 5 \"\n\nSee Also\nSelecting Elements\nfunc prefix(Int) -> AsyncPrefixSequence<HKQuantitySeriesSampleQueryDescriptor.Results>\nReturns an asynchronous sequence, up to the specified maximum length, containing the initial elements of the base asynchronous sequence."
  },
  {
    "title": "reduce(into:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquantityseriessamplequerydescriptor/results/3916517-reduce",
    "html": "Parameters\ninitialResult\n\nThe value to use as the initial accumulating value. The nextPartialResult closure receives initialResult the first time the closure executes.\n\nnextPartialResult\n\nA closure that combines an accumulating value and an element of the asynchronous sequence into a new accumulating value, for use in the next call of the nextPartialResult closure or returned to the caller.\n\nReturn Value\n\nThe final accumulated value. If the sequence has no elements, the result is initialResult.\n\nDiscussion\n\nUse the reduce(into:_:) method to produce a single value from the elements of an entire sequence. For example, you can use this method on a sequence of numbers to find their sum or product.\n\nThe nextPartialResult closure executes sequentially with an accumulating value initialized to initialResult and each element of the sequence.\n\nPrefer this method over reduce(_:_:) for efficiency when the result is a copy-on-write type, for example an Array or Dictionary.\n\nSee Also\nTransforming a Sequence\nfunc map<Transformed>((HKQuantitySeriesSampleQueryDescriptor.Result) -> Transformed) -> AsyncMapSequence<HKQuantitySeriesSampleQueryDescriptor.Results, Transformed>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements.\nfunc map<Transformed>((HKQuantitySeriesSampleQueryDescriptor.Result) -> Transformed) -> AsyncThrowingMapSequence<HKQuantitySeriesSampleQueryDescriptor.Results, Transformed>\nCreates an asynchronous sequence that maps the given error-throwing closure over the asynchronous sequence’s elements.\nfunc reduce<Result>(Result, (Result, HKQuantitySeriesSampleQueryDescriptor.Result) -> Result) -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure.\nfunc compactMap<ElementOfResult>((HKQuantitySeriesSampleQueryDescriptor.Result) -> ElementOfResult?) -> AsyncCompactMapSequence<HKQuantitySeriesSampleQueryDescriptor.Results, ElementOfResult>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements, omitting results that don’t return a value.\nfunc compactMap<ElementOfResult>((HKQuantitySeriesSampleQueryDescriptor.Result) -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<HKQuantitySeriesSampleQueryDescriptor.Results, ElementOfResult>\nCreates an asynchronous sequence that maps an error-throwing closure over the base sequence’s elements, omitting results that don’t return a value.\nfunc flatMap<SegmentOfResult>((HKQuantitySeriesSampleQueryDescriptor.Result) -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<HKQuantitySeriesSampleQueryDescriptor.Results, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given error-throwing transformation with each element of this sequence.\nfunc flatMap<SegmentOfResult>((HKQuantitySeriesSampleQueryDescriptor.Result) -> SegmentOfResult) -> AsyncFlatMapSequence<HKQuantitySeriesSampleQueryDescriptor.Results, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given transformation with each element of this sequence."
  },
  {
    "title": "dropFirst(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquantityseriessamplequerydescriptor/results/3916492-dropfirst",
    "html": "Parameters\ncount\n\nThe number of elements to drop from the beginning of the sequence. count must be greater than or equal to zero.\n\nReturn Value\n\nAn asynchronous sequence that drops the first count elements from the base sequence.\n\nDiscussion\n\nUse dropFirst(_:) when you want to drop the first n elements from the base sequence and pass through the remaining elements.\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 10. The dropFirst(_:) method causes the modified sequence to ignore the values 1 through 3, and instead emit 4 through 10:\n\nfor await number in Counter(howHigh: 10).dropFirst(3) {\n    print(number, terminator: \" \")\n}\n// Prints \"4 5 6 7 8 9 10 \"\n\n\nIf the number of elements to drop exceeds the number of elements in the sequence, the result is an empty sequence.\n\nSee Also\nExcluding Elements\nfunc drop(while: (HKQuantitySeriesSampleQueryDescriptor.Result) -> Bool) -> AsyncDropWhileSequence<HKQuantitySeriesSampleQueryDescriptor.Results>\nOmits elements from the base asynchronous sequence until a given closure returns false, after which it passes through all remaining elements.\nfunc filter((HKQuantitySeriesSampleQueryDescriptor.Result) -> Bool) -> AsyncFilterSequence<HKQuantitySeriesSampleQueryDescriptor.Results>\nCreates an asynchronous sequence that contains, in order, the elements of the base sequence that satisfy the given predicate."
  },
  {
    "title": "drop(while:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquantityseriessamplequerydescriptor/results/3916490-drop",
    "html": "Parameters\npredicate\n\nA closure that takes an element as a parameter and returns a Boolean value indicating whether to drop the element from the modified sequence.\n\nReturn Value\n\nAn asynchronous sequence that skips over values from the base sequence until the provided closure returns false.\n\nDiscussion\n\nUse drop(while:) to omit elements from an asynchronous sequence until the element received meets a condition you specify.\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 10. The drop(while:) method causes the modified sequence to ignore received values until it encounters one that is divisible by 3:\n\nlet stream = Counter(howHigh: 10)\n    .drop { $0 % 3 != 0 }\nfor await number in stream {\n    print(number, terminator: \" \")\n}\n// Prints \"3 4 5 6 7 8 9 10 \"\n\n\nAfter the predicate returns false, the sequence never executes it again, and from then on the sequence passes through elements from its underlying sequence as-is.\n\nSee Also\nExcluding Elements\nfunc dropFirst(Int) -> AsyncDropFirstSequence<HKQuantitySeriesSampleQueryDescriptor.Results>\nOmits a specified number of elements from the base asynchronous sequence, then passes through all remaining elements.\nfunc filter((HKQuantitySeriesSampleQueryDescriptor.Result) -> Bool) -> AsyncFilterSequence<HKQuantitySeriesSampleQueryDescriptor.Results>\nCreates an asynchronous sequence that contains, in order, the elements of the base sequence that satisfy the given predicate."
  },
  {
    "title": "map(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquantityseriessamplequerydescriptor/results/3916503-map",
    "html": "Parameters\ntransform\n\nA mapping closure. transform accepts an element of this sequence as its parameter and returns a transformed value of the same or of a different type.\n\nReturn Value\n\nAn asynchronous sequence that contains, in order, the elements produced by the transform closure.\n\nDiscussion\n\nUse the map(_:) method to transform every element received from a base asynchronous sequence. Typically, you use this to transform from one type of element to another.\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 5. The closure provided to the map(_:) method takes each Int and looks up a corresponding String from a romanNumeralDict dictionary. This means the outer for await in loop iterates over String instances instead of the underlying Int values that Counter produces:\n\nlet romanNumeralDict: [Int: String] =\n    [1: \"I\", 2: \"II\", 3: \"III\", 5: \"V\"]\n\n\nlet stream = Counter(howHigh: 5)\n    .map { romanNumeralDict[$0] ?? \"(unknown)\" }\nfor await numeral in stream {\n    print(numeral, terminator: \" \")\n}\n// Prints \"I II III (unknown) V \"\n\nSee Also\nTransforming a Sequence\nfunc map<Transformed>((HKQuantitySeriesSampleQueryDescriptor.Result) -> Transformed) -> AsyncThrowingMapSequence<HKQuantitySeriesSampleQueryDescriptor.Results, Transformed>\nCreates an asynchronous sequence that maps the given error-throwing closure over the asynchronous sequence’s elements.\nfunc reduce<Result>(Result, (Result, HKQuantitySeriesSampleQueryDescriptor.Result) -> Result) -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure.\nfunc reduce<Result>(into: Result, (inout Result, HKQuantitySeriesSampleQueryDescriptor.Result) -> Void) -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure, given a mutable initial value.\nfunc compactMap<ElementOfResult>((HKQuantitySeriesSampleQueryDescriptor.Result) -> ElementOfResult?) -> AsyncCompactMapSequence<HKQuantitySeriesSampleQueryDescriptor.Results, ElementOfResult>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements, omitting results that don’t return a value.\nfunc compactMap<ElementOfResult>((HKQuantitySeriesSampleQueryDescriptor.Result) -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<HKQuantitySeriesSampleQueryDescriptor.Results, ElementOfResult>\nCreates an asynchronous sequence that maps an error-throwing closure over the base sequence’s elements, omitting results that don’t return a value.\nfunc flatMap<SegmentOfResult>((HKQuantitySeriesSampleQueryDescriptor.Result) -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<HKQuantitySeriesSampleQueryDescriptor.Results, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given error-throwing transformation with each element of this sequence.\nfunc flatMap<SegmentOfResult>((HKQuantitySeriesSampleQueryDescriptor.Result) -> SegmentOfResult) -> AsyncFlatMapSequence<HKQuantitySeriesSampleQueryDescriptor.Results, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given transformation with each element of this sequence."
  },
  {
    "title": "reduce(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquantityseriessamplequerydescriptor/results/3916515-reduce",
    "html": "Parameters\ninitialResult\n\nThe value to use as the initial accumulating value. The nextPartialResult closure receives initialResult the first time the closure runs.\n\nnextPartialResult\n\nA closure that combines an accumulating value and an element of the asynchronous sequence into a new accumulating value, for use in the next call of the nextPartialResult closure or returned to the caller.\n\nReturn Value\n\nThe final accumulated value. If the sequence has no elements, the result is initialResult.\n\nDiscussion\n\nUse the reduce(_:_:) method to produce a single value from the elements of an entire sequence. For example, you can use this method on an sequence of numbers to find their sum or product.\n\nThe nextPartialResult closure executes sequentially with an accumulating value initialized to initialResult and each element of the sequence.\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 4. The reduce(_:_:) method sums the values received from the asynchronous sequence.\n\nlet sum = await Counter(howHigh: 4)\n    .reduce(0) {\n        $0 + $1\n    }\nprint(sum)\n// Prints \"10\"\n\nSee Also\nTransforming a Sequence\nfunc map<Transformed>((HKQuantitySeriesSampleQueryDescriptor.Result) -> Transformed) -> AsyncMapSequence<HKQuantitySeriesSampleQueryDescriptor.Results, Transformed>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements.\nfunc map<Transformed>((HKQuantitySeriesSampleQueryDescriptor.Result) -> Transformed) -> AsyncThrowingMapSequence<HKQuantitySeriesSampleQueryDescriptor.Results, Transformed>\nCreates an asynchronous sequence that maps the given error-throwing closure over the asynchronous sequence’s elements.\nfunc reduce<Result>(into: Result, (inout Result, HKQuantitySeriesSampleQueryDescriptor.Result) -> Void) -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure, given a mutable initial value.\nfunc compactMap<ElementOfResult>((HKQuantitySeriesSampleQueryDescriptor.Result) -> ElementOfResult?) -> AsyncCompactMapSequence<HKQuantitySeriesSampleQueryDescriptor.Results, ElementOfResult>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements, omitting results that don’t return a value.\nfunc compactMap<ElementOfResult>((HKQuantitySeriesSampleQueryDescriptor.Result) -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<HKQuantitySeriesSampleQueryDescriptor.Results, ElementOfResult>\nCreates an asynchronous sequence that maps an error-throwing closure over the base sequence’s elements, omitting results that don’t return a value.\nfunc flatMap<SegmentOfResult>((HKQuantitySeriesSampleQueryDescriptor.Result) -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<HKQuantitySeriesSampleQueryDescriptor.Results, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given error-throwing transformation with each element of this sequence.\nfunc flatMap<SegmentOfResult>((HKQuantitySeriesSampleQueryDescriptor.Result) -> SegmentOfResult) -> AsyncFlatMapSequence<HKQuantitySeriesSampleQueryDescriptor.Results, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given transformation with each element of this sequence."
  },
  {
    "title": "map(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquantityseriessamplequerydescriptor/results/3916505-map",
    "html": "Parameters\ntransform\n\nA mapping closure. transform accepts an element of this sequence as its parameter and returns a transformed value of the same or of a different type. transform can also throw an error, which ends the transformed sequence.\n\nReturn Value\n\nAn asynchronous sequence that contains, in order, the elements produced by the transform closure.\n\nDiscussion\n\nUse the map(_:) method to transform every element received from a base asynchronous sequence. Typically, you use this to transform from one type of element to another.\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 5. The closure provided to the map(_:) method takes each Int and looks up a corresponding String from a romanNumeralDict dictionary. This means the outer for await in loop iterates over String instances instead of the underlying Int values that Counter produces. Also, the dictionary doesn’t provide a key for 4, and the closure throws an error for any key it can’t look up, so receiving this value from Counter ends the modified sequence with an error.\n\nlet romanNumeralDict: [Int: String] =\n    [1: \"I\", 2: \"II\", 3: \"III\", 5: \"V\"]\n\n\ndo {\n    let stream = Counter(howHigh: 5)\n        .map { (value) throws -> String in\n            guard let roman = romanNumeralDict[value] else {\n                throw MyError()\n            }\n            return roman\n        }\n    for try await numeral in stream {\n        print(numeral, terminator: \" \")\n    }\n} catch {\n    print(\"Error: \\(error)\")\n}\n// Prints \"I II III Error: MyError() \"\n\nSee Also\nTransforming a Sequence\nfunc map<Transformed>((HKQuantitySeriesSampleQueryDescriptor.Result) -> Transformed) -> AsyncMapSequence<HKQuantitySeriesSampleQueryDescriptor.Results, Transformed>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements.\nfunc reduce<Result>(Result, (Result, HKQuantitySeriesSampleQueryDescriptor.Result) -> Result) -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure.\nfunc reduce<Result>(into: Result, (inout Result, HKQuantitySeriesSampleQueryDescriptor.Result) -> Void) -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure, given a mutable initial value.\nfunc compactMap<ElementOfResult>((HKQuantitySeriesSampleQueryDescriptor.Result) -> ElementOfResult?) -> AsyncCompactMapSequence<HKQuantitySeriesSampleQueryDescriptor.Results, ElementOfResult>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements, omitting results that don’t return a value.\nfunc compactMap<ElementOfResult>((HKQuantitySeriesSampleQueryDescriptor.Result) -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<HKQuantitySeriesSampleQueryDescriptor.Results, ElementOfResult>\nCreates an asynchronous sequence that maps an error-throwing closure over the base sequence’s elements, omitting results that don’t return a value.\nfunc flatMap<SegmentOfResult>((HKQuantitySeriesSampleQueryDescriptor.Result) -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<HKQuantitySeriesSampleQueryDescriptor.Results, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given error-throwing transformation with each element of this sequence.\nfunc flatMap<SegmentOfResult>((HKQuantitySeriesSampleQueryDescriptor.Result) -> SegmentOfResult) -> AsyncFlatMapSequence<HKQuantitySeriesSampleQueryDescriptor.Results, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given transformation with each element of this sequence."
  },
  {
    "title": "HKCategoryValueContraceptive.implant | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkcategoryvaluecontraceptive/implant",
    "html": "See Also\nContraceptive Types\ncase unspecified\nAn unspecified type of contraceptive.\ncase injection\nAn injectable contraceptive.\ncase intrauterineDevice\nAn intrauterine device (IUD).\ncase intravaginalRing\nA contraceptive intravaginal ring.\ncase oral\nAn oral contraceptive.\ncase patch\nA contraceptive patch."
  },
  {
    "title": "formSymmetricDifference(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquantityseriessamplequerydescriptor/options/3916428-formsymmetricdifference",
    "html": "Parameters\nother\n\nAn option set.\n\nDiscussion\n\nThis method is implemented as a ^ (bitwise XOR) operation on the two sets’ raw values.\n\nSee Also\nCombining Sets\nfunc union(HKQuantitySeriesSampleQueryDescriptor.Options) -> HKQuantitySeriesSampleQueryDescriptor.Options\nReturns a new option set of the elements contained in this set, in the given set, or in both.\nfunc formUnion(HKQuantitySeriesSampleQueryDescriptor.Options)\nInserts the elements of another set into this option set.\nfunc intersection(HKQuantitySeriesSampleQueryDescriptor.Options) -> HKQuantitySeriesSampleQueryDescriptor.Options\nReturns a new option set with only the elements contained in both this set and the given set.\nfunc formIntersection(HKQuantitySeriesSampleQueryDescriptor.Options)\nRemoves all elements of this option set that are not also present in the given set.\nfunc symmetricDifference(HKQuantitySeriesSampleQueryDescriptor.Options) -> HKQuantitySeriesSampleQueryDescriptor.Options\nReturns a new option set with the elements contained in this set or in the given set, but not in both.\nfunc subtract(HKQuantitySeriesSampleQueryDescriptor.Options)\nRemoves the elements of the given set from this set.\nfunc subtracting(HKQuantitySeriesSampleQueryDescriptor.Options) -> HKQuantitySeriesSampleQueryDescriptor.Options\nReturns a new set containing the elements of this set that do not occur in the given set."
  },
  {
    "title": "intersection(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquantityseriessamplequerydescriptor/options/3916439-intersection",
    "html": "Parameters\nother\n\nAn option set.\n\nReturn Value\n\nA new option set with only the elements contained in both this set and other.\n\nDiscussion\n\nThis example uses the intersection(_:) method to limit the available shipping options to what can be used with a PO Box destination.\n\n// Can only ship standard or priority to PO Boxes\nlet poboxShipping: ShippingOptions = [.standard, .priority]\nlet memberShipping: ShippingOptions =\n        [.standard, .priority, .secondDay]\n\n\nlet availableOptions = memberShipping.intersection(poboxShipping)\nprint(availableOptions.contains(.priority))\n// Prints \"true\"\nprint(availableOptions.contains(.secondDay))\n// Prints \"false\"\n\nSee Also\nCombining Sets\nfunc union(HKQuantitySeriesSampleQueryDescriptor.Options) -> HKQuantitySeriesSampleQueryDescriptor.Options\nReturns a new option set of the elements contained in this set, in the given set, or in both.\nfunc formUnion(HKQuantitySeriesSampleQueryDescriptor.Options)\nInserts the elements of another set into this option set.\nfunc formIntersection(HKQuantitySeriesSampleQueryDescriptor.Options)\nRemoves all elements of this option set that are not also present in the given set.\nfunc symmetricDifference(HKQuantitySeriesSampleQueryDescriptor.Options) -> HKQuantitySeriesSampleQueryDescriptor.Options\nReturns a new option set with the elements contained in this set or in the given set, but not in both.\nfunc formSymmetricDifference(HKQuantitySeriesSampleQueryDescriptor.Options)\nReplaces this set with a new set containing all elements contained in either this set or the given set, but not in both.\nfunc subtract(HKQuantitySeriesSampleQueryDescriptor.Options)\nRemoves the elements of the given set from this set.\nfunc subtracting(HKQuantitySeriesSampleQueryDescriptor.Options) -> HKQuantitySeriesSampleQueryDescriptor.Options\nReturns a new set containing the elements of this set that do not occur in the given set."
  },
  {
    "title": "HKCategoryValueSeverity.moderate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkcategoryvalueseverity/moderate",
    "html": "See Also\nSeverity Categories\ncase notPresent\nThe symptom is not present.\ncase mild\nThe symptom is mild.\ncase severe\nThe symptom is severe.\ncase unspecified\nThe symptom’s severity is not specified."
  },
  {
    "title": "formIntersection(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquantityseriessamplequerydescriptor/options/3916427-formintersection",
    "html": "Parameters\nother\n\nAn option set.\n\nDiscussion\n\nThis method is implemented as a & (bitwise AND) operation on the two sets’ raw values.\n\nSee Also\nCombining Sets\nfunc union(HKQuantitySeriesSampleQueryDescriptor.Options) -> HKQuantitySeriesSampleQueryDescriptor.Options\nReturns a new option set of the elements contained in this set, in the given set, or in both.\nfunc formUnion(HKQuantitySeriesSampleQueryDescriptor.Options)\nInserts the elements of another set into this option set.\nfunc intersection(HKQuantitySeriesSampleQueryDescriptor.Options) -> HKQuantitySeriesSampleQueryDescriptor.Options\nReturns a new option set with only the elements contained in both this set and the given set.\nfunc symmetricDifference(HKQuantitySeriesSampleQueryDescriptor.Options) -> HKQuantitySeriesSampleQueryDescriptor.Options\nReturns a new option set with the elements contained in this set or in the given set, but not in both.\nfunc formSymmetricDifference(HKQuantitySeriesSampleQueryDescriptor.Options)\nReplaces this set with a new set containing all elements contained in either this set or the given set, but not in both.\nfunc subtract(HKQuantitySeriesSampleQueryDescriptor.Options)\nRemoves the elements of the given set from this set.\nfunc subtracting(HKQuantitySeriesSampleQueryDescriptor.Options) -> HKQuantitySeriesSampleQueryDescriptor.Options\nReturns a new set containing the elements of this set that do not occur in the given set."
  },
  {
    "title": "subtract(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquantityseriessamplequerydescriptor/options/3916457-subtract",
    "html": "Parameters\nother\n\nA set of the same type as the current set.\n\nDiscussion\n\nIn the following example, the elements of the employees set that are also members of the neighbors set are removed. In particular, the names \"Bethany\" and \"Eric\" are removed from employees.\n\nvar employees: Set = [\"Alicia\", \"Bethany\", \"Chris\", \"Diana\", \"Eric\"]\nlet neighbors: Set = [\"Bethany\", \"Eric\", \"Forlani\", \"Greta\"]\nemployees.subtract(neighbors)\nprint(employees)\n// Prints \"[\"Diana\", \"Chris\", \"Alicia\"]\"\n\nSee Also\nCombining Sets\nfunc union(HKQuantitySeriesSampleQueryDescriptor.Options) -> HKQuantitySeriesSampleQueryDescriptor.Options\nReturns a new option set of the elements contained in this set, in the given set, or in both.\nfunc formUnion(HKQuantitySeriesSampleQueryDescriptor.Options)\nInserts the elements of another set into this option set.\nfunc intersection(HKQuantitySeriesSampleQueryDescriptor.Options) -> HKQuantitySeriesSampleQueryDescriptor.Options\nReturns a new option set with only the elements contained in both this set and the given set.\nfunc formIntersection(HKQuantitySeriesSampleQueryDescriptor.Options)\nRemoves all elements of this option set that are not also present in the given set.\nfunc symmetricDifference(HKQuantitySeriesSampleQueryDescriptor.Options) -> HKQuantitySeriesSampleQueryDescriptor.Options\nReturns a new option set with the elements contained in this set or in the given set, but not in both.\nfunc formSymmetricDifference(HKQuantitySeriesSampleQueryDescriptor.Options)\nReplaces this set with a new set containing all elements contained in either this set or the given set, but not in both.\nfunc subtracting(HKQuantitySeriesSampleQueryDescriptor.Options) -> HKQuantitySeriesSampleQueryDescriptor.Options\nReturns a new set containing the elements of this set that do not occur in the given set."
  },
  {
    "title": "symmetricDifference(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquantityseriessamplequerydescriptor/options/3916461-symmetricdifference",
    "html": "Parameters\nother\n\nAn option set.\n\nReturn Value\n\nA new option set with only the elements contained in either this set or other, but not in both.\n\nSee Also\nCombining Sets\nfunc union(HKQuantitySeriesSampleQueryDescriptor.Options) -> HKQuantitySeriesSampleQueryDescriptor.Options\nReturns a new option set of the elements contained in this set, in the given set, or in both.\nfunc formUnion(HKQuantitySeriesSampleQueryDescriptor.Options)\nInserts the elements of another set into this option set.\nfunc intersection(HKQuantitySeriesSampleQueryDescriptor.Options) -> HKQuantitySeriesSampleQueryDescriptor.Options\nReturns a new option set with only the elements contained in both this set and the given set.\nfunc formIntersection(HKQuantitySeriesSampleQueryDescriptor.Options)\nRemoves all elements of this option set that are not also present in the given set.\nfunc formSymmetricDifference(HKQuantitySeriesSampleQueryDescriptor.Options)\nReplaces this set with a new set containing all elements contained in either this set or the given set, but not in both.\nfunc subtract(HKQuantitySeriesSampleQueryDescriptor.Options)\nRemoves the elements of the given set from this set.\nfunc subtracting(HKQuantitySeriesSampleQueryDescriptor.Options) -> HKQuantitySeriesSampleQueryDescriptor.Options\nReturns a new set containing the elements of this set that do not occur in the given set."
  },
  {
    "title": "subtracting(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquantityseriessamplequerydescriptor/options/3916459-subtracting",
    "html": "Parameters\nother\n\nA set of the same type as the current set.\n\nReturn Value\n\nA new set.\n\nDiscussion\n\nIn the following example, the nonNeighbors set is made up of the elements of the employees set that are not elements of neighbors:\n\nlet employees: Set = [\"Alicia\", \"Bethany\", \"Chris\", \"Diana\", \"Eric\"]\nlet neighbors: Set = [\"Bethany\", \"Eric\", \"Forlani\", \"Greta\"]\nlet nonNeighbors = employees.subtracting(neighbors)\nprint(nonNeighbors)\n// Prints \"[\"Diana\", \"Chris\", \"Alicia\"]\"\n\nSee Also\nCombining Sets\nfunc union(HKQuantitySeriesSampleQueryDescriptor.Options) -> HKQuantitySeriesSampleQueryDescriptor.Options\nReturns a new option set of the elements contained in this set, in the given set, or in both.\nfunc formUnion(HKQuantitySeriesSampleQueryDescriptor.Options)\nInserts the elements of another set into this option set.\nfunc intersection(HKQuantitySeriesSampleQueryDescriptor.Options) -> HKQuantitySeriesSampleQueryDescriptor.Options\nReturns a new option set with only the elements contained in both this set and the given set.\nfunc formIntersection(HKQuantitySeriesSampleQueryDescriptor.Options)\nRemoves all elements of this option set that are not also present in the given set.\nfunc symmetricDifference(HKQuantitySeriesSampleQueryDescriptor.Options) -> HKQuantitySeriesSampleQueryDescriptor.Options\nReturns a new option set with the elements contained in this set or in the given set, but not in both.\nfunc formSymmetricDifference(HKQuantitySeriesSampleQueryDescriptor.Options)\nReplaces this set with a new set containing all elements contained in either this set or the given set, but not in both.\nfunc subtract(HKQuantitySeriesSampleQueryDescriptor.Options)\nRemoves the elements of the given set from this set."
  },
  {
    "title": "HKPrismBase.down | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkprismbase/down",
    "html": "Discussion\n\nYou can only use this value for the prism’s verticalBase.\n\nSee Also\nPrism Base\ncase none\nNo prism correction.\ncase up\nThe prism’s base is at the top of the lens.\ncase `in`\nThe prism base is on the inside edge of the lens.\ncase out\nThe prism base is on the outside edge of the lens."
  },
  {
    "title": "isDisjoint(with:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquantityseriessamplequerydescriptor/options/3916441-isdisjoint",
    "html": "Parameters\nother\n\nA set of the same type as the current set.\n\nReturn Value\n\ntrue if the set has no elements in common with other; otherwise, false.\n\nDiscussion\n\nIn the following example, the employees set is disjoint with the visitors set because no name appears in both sets.\n\nlet employees: Set = [\"Alicia\", \"Bethany\", \"Chris\", \"Diana\", \"Eric\"]\nlet visitors: Set = [\"Marcia\", \"Nathaniel\", \"Olivia\"]\nprint(employees.isDisjoint(with: visitors))\n// Prints \"true\"\n\nSee Also\nComparing Sets\nfunc isSubset(of: HKQuantitySeriesSampleQueryDescriptor.Options) -> Bool\nReturns a Boolean value that indicates whether the set is a subset of another set.\nfunc isStrictSubset(of: HKQuantitySeriesSampleQueryDescriptor.Options) -> Bool\nReturns a Boolean value that indicates whether this set is a strict subset of the given set.\nfunc isSuperset(of: HKQuantitySeriesSampleQueryDescriptor.Options) -> Bool\nReturns a Boolean value that indicates whether the set is a superset of the given set.\nfunc isStrictSuperset(of: HKQuantitySeriesSampleQueryDescriptor.Options) -> Bool\nReturns a Boolean value that indicates whether this set is a strict superset of the given set.\nstatic func != (HKQuantitySeriesSampleQueryDescriptor.Options, HKQuantitySeriesSampleQueryDescriptor.Options) -> Bool\nReturns a Boolean value indicating whether two option sets aren’t equal."
  },
  {
    "title": "HKPrismBase.up | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkprismbase/up",
    "html": "Discussion\n\nYou can only use this value for the prism’s verticalBase.\n\nSee Also\nPrism Base\ncase none\nNo prism correction.\ncase down\nThe prism’s base is at the bottom of the lens.\ncase `in`\nThe prism base is on the inside edge of the lens.\ncase out\nThe prism base is on the outside edge of the lens."
  },
  {
    "title": "HKPrismBase.none | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkprismbase/none",
    "html": "See Also\nPrism Base\ncase up\nThe prism’s base is at the top of the lens.\ncase down\nThe prism’s base is at the bottom of the lens.\ncase `in`\nThe prism base is on the inside edge of the lens.\ncase out\nThe prism base is on the outside edge of the lens."
  },
  {
    "title": "title | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkcdadocument/1779387-title",
    "html": "Discussion\n\nHealthKit automatically extracts the document’s title from the CDA’s XML data.\n\nSee Also\nAccessing the Document’s Data\nvar authorName: String\nThe document’s author.\nvar custodianName: String\nThe name of the organization responsible for the document.\nvar documentData: Data?\nThe CDA document stored as XML data.\nvar patientName: String\nThe patient’s name."
  },
  {
    "title": "documentData | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkcdadocument/1779391-documentdata",
    "html": "Discussion\n\nThe CDA document’s XML format is specified by the Clinical Document Architecture, R2 standard. .\n\nWhen using an HKDocumentQuery object to retrieve documents from the HealthKit store, if the query’s includeDocumentData property is set to false, the retrieved documents will have nil-valued documentData properties.\n\nSee Also\nAccessing the Document’s Data\nvar authorName: String\nThe document’s author.\nvar custodianName: String\nThe name of the organization responsible for the document.\nvar patientName: String\nThe patient’s name.\nvar title: String\nThe document’s title."
  },
  {
    "title": "custodianName | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkcdadocument/1779390-custodianname",
    "html": "Discussion\n\nUsually, this is the treating institution’s name.\n\nHealthKit automatically extracts the custodian’s name from the CDA’s XML data.\n\nSee Also\nAccessing the Document’s Data\nvar authorName: String\nThe document’s author.\nvar documentData: Data?\nThe CDA document stored as XML data.\nvar patientName: String\nThe patient’s name.\nvar title: String\nThe document’s title."
  },
  {
    "title": "authorName | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkcdadocument/1779381-authorname",
    "html": "Discussion\n\nUsually, this is the treating physician’s name.\n\nHealthKit automatically extracts the author’s name from the CDA’s XML data.\n\nSee Also\nAccessing the Document’s Data\nvar custodianName: String\nThe name of the organization responsible for the document.\nvar documentData: Data?\nThe CDA document stored as XML data.\nvar patientName: String\nThe patient’s name.\nvar title: String\nThe document’s title."
  },
  {
    "title": "HKPrismBase.out | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkprismbase/out",
    "html": "Discussion\n\nYou can only use this value for the prism’s horizontalBase.\n\nSee Also\nPrism Base\ncase none\nNo prism correction.\ncase up\nThe prism’s base is at the top of the lens.\ncase down\nThe prism’s base is at the bottom of the lens.\ncase `in`\nThe prism base is on the inside edge of the lens."
  },
  {
    "title": "patientName | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkcdadocument/1779384-patientname",
    "html": "Discussion\n\nHealthKit automatically extracts the patient’s name from the CDA’s XML data.\n\nSee Also\nAccessing the Document’s Data\nvar authorName: String\nThe document’s author.\nvar custodianName: String\nThe name of the organization responsible for the document.\nvar documentData: Data?\nThe CDA document stored as XML data.\nvar title: String\nThe document’s title."
  },
  {
    "title": "init(fromVersionString:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkfhirversion/3552023-init",
    "html": "Parameters\nversionString\n\nA string representing the version.\n\nDiscussion\n\nThe string must be in the following format: <major>.<minor>.<patch>.\n\nSee Also\nCreating Version Objects\nclass func primaryDSTU2() -> Self\nReturns the primary Second Draft Standard for Trial Use (DSTU2) version.\nclass func primaryR4() -> Self\nReturns the primary Release 4 (R4) version."
  },
  {
    "title": "primaryDSTU2() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkfhirversion/3552020-primarydstu2",
    "html": "See Also\nCreating Version Objects\ninit(fromVersionString: String)\nCreates an FHIR version object from a string representation of the version.\nclass func primaryR4() -> Self\nReturns the primary Release 4 (R4) version."
  },
  {
    "title": "HKFHIRRelease | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkfhirrelease",
    "html": "Overview\n\nEach release can have multiple versions.\n\nTopics\nReleases\nstatic let dstu2: HKFHIRRelease\nThe Second Draft Standard for Trial Use (DSTU2) release.\nstatic let r4: HKFHIRRelease\nThe Release 4 (R4) release.\nstatic let unknown: HKFHIRRelease\nAn unknown release.\nInitializers\ninit(rawValue: String)\nCreates a new release from the provided string.\nRelationships\nConforms To\nHashable\nRawRepresentable\nSendable\nSee Also\nAccessing the Release\nvar fhirRelease: HKFHIRRelease\nAn official release of the FHIR specification."
  },
  {
    "title": "majorVersion | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkfhirversion/3552017-majorversion",
    "html": "See Also\nAccessing Version Data\nvar minorVersion: Int\nThe standard’s minor version number.\nvar patchVersion: Int\nThe standard’s patch version number.\nvar stringRepresentation: String\nA string representation of the version."
  },
  {
    "title": "minorVersion | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkfhirversion/3552018-minorversion",
    "html": "See Also\nAccessing Version Data\nvar majorVersion: Int\nThe standard’s major version number.\nvar patchVersion: Int\nThe standard’s patch version number.\nvar stringRepresentation: String\nA string representation of the version."
  },
  {
    "title": "HKSourceRevisionAnyVersion | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hksourcerevisionanyversion",
    "html": "Discussion\n\nWhen creating a predicate, use this constant to create a source revision object that matches all possible versions of the specified source."
  },
  {
    "title": "HKSourceRevisionAnyOperatingSystem | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hksourcerevisionanyoperatingsystem",
    "html": "Discussion\n\nWhen creating a predicate, use this constant to create a source revision object that matches all operating systems."
  },
  {
    "title": "HKVO2MaxTestType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkvo2maxtesttype",
    "html": "Overview\n\nVO2 max represents the maximal oxygen consumption during incremental exercise. VO2 max is an important indicator of fitness and endurance.\n\nTopics\nTest Types\ncase maxExercise\nA test that measures VO2 max rate by monitoring exercise to the user’s physical limit.\ncase predictionSubMaxExercise\nA calculation that estimates VO2 max rate based on low-intensity exercise.\ncase predictionNonExercise\nA calculation that estimates VO2 max rate without any exercise.\nRelationships\nConforms To\nSendable"
  },
  {
    "title": "HKHeartRateSensorLocation | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkheartratesensorlocation",
    "html": "Topics\nLocations\ncase other\nThe heart rate sensor’s location is not otherwise on this list.\ncase chest\nThe heart rate sensor is located on the user’s chest.\ncase wrist\nThe heart rate sensor is located on the user’s wrist.\ncase finger\nThe heart rate sensor is located on the user’s finger.\ncase hand\nThe heart rate sensor is located on the user’s hand.\ncase earLobe\nThe heart rate sensor is located on the user’s earlobe.\ncase foot\nThe heart rate sensor is located on the user’s foot.\nRelationships\nConforms To\nSendable"
  },
  {
    "title": "HKBodyTemperatureSensorLocation | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkbodytemperaturesensorlocation",
    "html": "Topics\nLocations\ncase other\nThe temperature was taken at a location that is not otherwise in this list.\ncase armpit\nThe temperature was taken in the armpit.\ncase body\nThe temperature was taken on the body.\ncase ear\nThe temperature was taken in the ear.\ncase finger\nThe temperature was taken at the finger.\ncase gastroIntestinal\nThe temperature was taken inside the gastrointestinal tract.\ncase mouth\nThe temperature was taken in the mouth.\ncase rectum\nThe temperature was taken in the rectum.\ncase toe\nThe temperature was taken at the toe.\ncase earDrum\nThe temperature was taken on the eardrum.\ncase temporalArtery\nThe temperature was taken at the temporal artery.\ncase forehead\nThe temperature was taken on the forehead.\nRelationships\nConforms To\nSendable"
  },
  {
    "title": "HKInsulinDeliveryReason | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkinsulindeliveryreason",
    "html": "Topics\nDelivery Reasons\ncase basal\nInsulin administered to meet the user’s basic metabolic needs.\ncase bolus\nInsulin administered to meet the user’s episodic requirements.\nRelationships\nConforms To\nSendable"
  },
  {
    "title": "coverage | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkfhirresourcetype/3552012-coverage",
    "html": "See Also\nResource Types\nstatic let allergyIntolerance: HKFHIRResourceType\nA type that identifies FHIR resources for allergies and intolerances.\nstatic let condition: HKFHIRResourceType\nA type that identifies FHIR resources for a condition, problem, diagnosis, or other event.\nstatic let diagnosticReport: HKFHIRResourceType\nA type that identifies FHIR resources for findings and interpretation of diagnostic tests.\nstatic let documentReference: HKFHIRResourceType\nA type that identifies FHIR resources for document references.\nstatic let immunization: HKFHIRResourceType\nA type that identifies FHIR resources for the administration of vaccines.\nstatic let medicationOrder: HKFHIRResourceType\nA type that identifies FHIR resources for prescriptions or other orders for medication.\nstatic let medicationDispense: HKFHIRResourceType\nA type that identifies FHIR resources for the delivery of medication (usually in response to a prescription).\nstatic let medicationStatement: HKFHIRResourceType\nA type that identifies FHIR resources for statements about medication taken by the patient.\nstatic let medicationRequest: HKFHIRResourceType\nA type that identifies FHIR resources for prescriptions or other orders or requests for medication.\nstatic let observation: HKFHIRResourceType\nA type that identifies FHIR resources for medical observations, including lab results and vital signs.\nstatic let procedure: HKFHIRResourceType\nA type that identifies FHIR resources for procedures performed on the patient.\nRelated Documentation\nstatic let coverageRecord: HKClinicalTypeIdentifier\nA type identifier for records containing information about the user’s insurance coverage."
  },
  {
    "title": "HKWeatherCondition | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkweathercondition",
    "html": "Topics\nWeather Conditions\ncase none\nThe weather condition is unknown or irrelevant.\ncase clear\nThe weather condition is clear.\ncase fair\nThe weather condition is fair.\ncase partlyCloudy\nThe weather condition is partly cloudy.\ncase mostlyCloudy\nThe weather condition is mostly cloudy.\ncase cloudy\nThe weather condition is cloudy.\ncase foggy\nThe weather condition is foggy.\ncase haze\nThe weather condition is hazy.\ncase windy\nThe weather condition is windy.\ncase blustery\nThe weather condition is blustery.\ncase smoky\nThe weather condition is smoky.\ncase dust\nThe weather condition is dust.\ncase snow\nThe weather condition is snow.\ncase hail\nThe weather condition is hail.\ncase sleet\nThe weather condition is sleet.\ncase freezingDrizzle\nThe weather condition is freezing drizzle.\ncase freezingRain\nThe weather condition is freezing rain.\ncase mixedRainAndHail\nThe weather condition is mixed rain and hail.\ncase mixedRainAndSnow\nThe weather condition is mixed rain and snow.\ncase mixedRainAndSleet\nThe weather condition is mixed rain and sleet.\ncase mixedSnowAndSleet\nThe weather condition is mixed snow and sleet.\ncase drizzle\nThe weather condition is drizzle.\ncase scatteredShowers\nThe weather condition is scattered showers.\ncase showers\nThe weather condition is showers.\ncase thunderstorms\nThe weather condition is thunderstorms.\ncase tropicalStorm\nThe weather condition is tropical storm.\ncase hurricane\nThe weather condition is hurricane.\ncase tornado\nThe weather condition is tornado.\nRelationships\nConforms To\nSendable"
  },
  {
    "title": "HKCategoryValuePresence.notPresent | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkcategoryvaluepresence/notpresent",
    "html": "See Also\nPresence of Symptoms\ncase present\nThe symptom is present."
  },
  {
    "title": "HKDevicePlacementSide.central | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkdeviceplacementside/central",
    "html": "See Also\nPlacements\ncase left\nA device predominately located on the left side.\ncase right\nA device predominately located on the right side.\ncase unknown\nThe system couldn’t determine the device’s placement."
  },
  {
    "title": "HKDevicePlacementSide.left | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkdeviceplacementside/left",
    "html": "See Also\nPlacements\ncase central\nA device predominately located near the center of the body.\ncase right\nA device predominately located on the right side.\ncase unknown\nThe system couldn’t determine the device’s placement."
  },
  {
    "title": "HKCategoryValueContraceptive.oral | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkcategoryvaluecontraceptive/oral",
    "html": "See Also\nContraceptive Types\ncase unspecified\nAn unspecified type of contraceptive.\ncase implant\nA contraceptive implant.\ncase injection\nAn injectable contraceptive.\ncase intrauterineDevice\nAn intrauterine device (IUD).\ncase intravaginalRing\nA contraceptive intravaginal ring.\ncase patch\nA contraceptive patch."
  },
  {
    "title": "HKDevicePlacementSide.right | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkdeviceplacementside/right",
    "html": "See Also\nPlacements\ncase central\nA device predominately located near the center of the body.\ncase left\nA device predominately located on the left side.\ncase unknown\nThe system couldn’t determine the device’s placement."
  },
  {
    "title": "HKDevicePlacementSide.unknown | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkdeviceplacementside/unknown",
    "html": "See Also\nPlacements\ncase central\nA device predominately located near the center of the body.\ncase left\nA device predominately located on the left side.\ncase right\nA device predominately located on the right side."
  },
  {
    "title": "HKCategoryValueContraceptive.intravaginalRing | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkcategoryvaluecontraceptive/intravaginalring",
    "html": "See Also\nContraceptive Types\ncase unspecified\nAn unspecified type of contraceptive.\ncase implant\nA contraceptive implant.\ncase injection\nAn injectable contraceptive.\ncase intrauterineDevice\nAn intrauterine device (IUD).\ncase oral\nAn oral contraceptive.\ncase patch\nA contraceptive patch."
  },
  {
    "title": "compactMap(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquantityseriessamplequerydescriptor/results/3916484-compactmap",
    "html": "Parameters\ntransform\n\nAn error-throwing mapping closure. transform accepts an element of this sequence as its parameter and returns a transformed value of the same or of a different type. If transform throws an error, the sequence ends.\n\nReturn Value\n\nAn asynchronous sequence that contains, in order, the non-nil elements produced by the transform closure. The sequence ends either when the base sequence ends or when transform throws an error.\n\nDiscussion\n\nUse the compactMap(_:) method to transform every element received from a base asynchronous sequence, while also discarding any nil results from the closure. Typically, you use this to transform from one type of element to another.\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 5. The closure provided to the compactMap(_:) method takes each Int and looks up a corresponding String from a romanNumeralDict dictionary. Since there is no key for 4, the closure returns nil in this case, which compactMap(_:) omits from the transformed asynchronous sequence. When the value is 5, the closure throws MyError, terminating the sequence.\n\nlet romanNumeralDict: [Int: String] =\n    [1: \"I\", 2: \"II\", 3: \"III\", 5: \"V\"]\n\n\ndo {\n    let stream = Counter(howHigh: 5)\n        .compactMap { (value) throws -> String? in\n            if value == 5 {\n                throw MyError()\n            }\n            return romanNumeralDict[value]\n        }\n    for try await numeral in stream {\n        print(numeral, terminator: \" \")\n    }\n} catch {\n    print(\"Error: \\(error)\")\n}\n// Prints \"I II III Error: MyError() \"\n\nSee Also\nTransforming a Sequence\nfunc map<Transformed>((HKQuantitySeriesSampleQueryDescriptor.Result) -> Transformed) -> AsyncMapSequence<HKQuantitySeriesSampleQueryDescriptor.Results, Transformed>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements.\nfunc map<Transformed>((HKQuantitySeriesSampleQueryDescriptor.Result) -> Transformed) -> AsyncThrowingMapSequence<HKQuantitySeriesSampleQueryDescriptor.Results, Transformed>\nCreates an asynchronous sequence that maps the given error-throwing closure over the asynchronous sequence’s elements.\nfunc reduce<Result>(Result, (Result, HKQuantitySeriesSampleQueryDescriptor.Result) -> Result) -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure.\nfunc reduce<Result>(into: Result, (inout Result, HKQuantitySeriesSampleQueryDescriptor.Result) -> Void) -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure, given a mutable initial value.\nfunc compactMap<ElementOfResult>((HKQuantitySeriesSampleQueryDescriptor.Result) -> ElementOfResult?) -> AsyncCompactMapSequence<HKQuantitySeriesSampleQueryDescriptor.Results, ElementOfResult>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements, omitting results that don’t return a value.\nfunc flatMap<SegmentOfResult>((HKQuantitySeriesSampleQueryDescriptor.Result) -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<HKQuantitySeriesSampleQueryDescriptor.Results, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given error-throwing transformation with each element of this sequence.\nfunc flatMap<SegmentOfResult>((HKQuantitySeriesSampleQueryDescriptor.Result) -> SegmentOfResult) -> AsyncFlatMapSequence<HKQuantitySeriesSampleQueryDescriptor.Results, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given transformation with each element of this sequence."
  },
  {
    "title": "quantity | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquantityseriessamplequerydescriptor/result/3916472-quantity",
    "html": "See Also\nAccessing Sample Data\nlet sample: HKQuantitySample?\nThe quantity sample that owns the series of data entries.\nlet dateInterval: DateInterval\nThe date interval for the entry."
  },
  {
    "title": "==(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquantityseriessamplequerydescriptor/result/3916468",
    "html": "Parameters\na\n\nThe first entry to compare.\n\nb\n\nThe second entry to compare.\n\nSee Also\nComparing Results\nfunc hash(into: inout Hasher)\nHashes the essential components of the entry by passing them into the given hash function.\nvar hashValue: Int\nThe hashed value for the entry.\nstatic func != (HKQuantitySeriesSampleQueryDescriptor.Result, HKQuantitySeriesSampleQueryDescriptor.Result) -> Bool\nIndicates whether two data entries are unequal."
  },
  {
    "title": "includeSample | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquantityseriessamplequerydescriptor/options/3916430-includesample",
    "html": "See Also\nSetting Options\nstatic let orderByQuantitySampleStartDate: HKQuantitySeriesSampleQueryDescriptor.Options\nAn option indicating that the results are grouped by the containing quantity sample’s start date."
  },
  {
    "title": "insert(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquantityseriessamplequerydescriptor/options/3916437-insert",
    "html": "Parameters\nnewMember\n\nThe element to insert.\n\nReturn Value\n\n(true, newMember) if newMember was not contained in self. Otherwise, returns (false, oldMember), where oldMember is the member of the set equal to newMember.\n\nDiscussion\n\nIn the following example, the .secondDay shipping option is added to the freeOptions option set if purchasePrice is greater than 50.0. For the ShippingOptions declaration, see the OptionSet protocol discussion.\n\nlet purchasePrice = 87.55\n\n\nvar freeOptions: ShippingOptions = [.standard, .priority]\nif purchasePrice > 50 {\n    freeOptions.insert(.secondDay)\n}\nprint(freeOptions.contains(.secondDay))\n// Prints \"true\"\n\nSee Also\nAdding and Removing Options\nfunc update(with: HKQuantitySeriesSampleQueryDescriptor.Options) -> HKQuantitySeriesSampleQueryDescriptor.Options?\nInserts the given element into the set.\nfunc remove(HKQuantitySeriesSampleQueryDescriptor.Options) -> HKQuantitySeriesSampleQueryDescriptor.Options?\nRemoves the given element and all elements subsumed by it."
  },
  {
    "title": "remove(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquantityseriessamplequerydescriptor/options/3916454-remove",
    "html": "Parameters\nmember\n\nThe element of the set to remove.\n\nReturn Value\n\nThe intersection of [member] and the set, if the intersection was nonempty; otherwise, nil.\n\nDiscussion\n\nIn the following example, the .priority shipping option is removed from the options option set. Attempting to remove the same shipping option a second time results in nil, because options no longer contains .priority as a member.\n\nvar options: ShippingOptions = [.secondDay, .priority]\nlet priorityOption = options.remove(.priority)\nprint(priorityOption == .priority)\n// Prints \"true\"\n\n\nprint(options.remove(.priority))\n// Prints \"nil\"\n\n\nIn the next example, the .express element is passed to remove(_:). Although .express is not a member of options, .express subsumes the remaining .secondDay element of the option set. Therefore, options is emptied and the intersection between .express and options is returned.\n\nlet expressOption = options.remove(.express)\nprint(expressOption == .express)\n// Prints \"false\"\nprint(expressOption == .secondDay)\n// Prints \"true\"\n\nSee Also\nAdding and Removing Options\nfunc insert(HKQuantitySeriesSampleQueryDescriptor.Options) -> (inserted: Bool, memberAfterInsert: HKQuantitySeriesSampleQueryDescriptor.Options)\nAdds the given element to the option set if it is not already a member.\nfunc update(with: HKQuantitySeriesSampleQueryDescriptor.Options) -> HKQuantitySeriesSampleQueryDescriptor.Options?\nInserts the given element into the set."
  },
  {
    "title": "init(arrayLiteral:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquantityseriessamplequerydescriptor/options/3916434-init",
    "html": "Parameters\narrayLiteral\n\nA list of elements of the new set.\n\nDiscussion\n\nDo not call this initializer directly. It is used by the compiler when you use an array literal. Instead, create a new set using an array literal as its value by enclosing a comma-separated list of values in square brackets. You can use an array literal anywhere a set is expected by the type context.\n\nHere, a set of strings is created from an array literal holding only strings:\n\nlet ingredients: Set = [\"cocoa beans\", \"sugar\", \"cocoa butter\", \"salt\"]\nif ingredients.isSuperset(of: [\"sugar\", \"salt\"]) {\n    print(\"Whatever it is, it's bound to be delicious!\")\n}\n// Prints \"Whatever it is, it's bound to be delicious!\"\n\nSee Also\nCreating Options\ninit()\nCreates an empty option set.\ninit<S>(S)\nCreates a new set from a finite sequence of items.\ninit(rawValue: Int)\nCreates a set that includes an option that corresponds to the provided raw value.\ntypealias HKQuantitySeriesSampleQueryDescriptor.Options.RawValue\nThe raw value for an option.\nlet rawValue: Int\nThe raw value for the options."
  },
  {
    "title": "rawValue | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquantityseriessamplequerydescriptor/options/3916453-rawvalue",
    "html": "Relationships\nFrom Protocol\nRawRepresentable\nSee Also\nCreating Options\ninit()\nCreates an empty option set.\ninit<S>(S)\nCreates a new set from a finite sequence of items.\ninit(arrayLiteral: HKQuantitySeriesSampleQueryDescriptor.Options...)\nCreates a set containing the elements of the given array literal.\ninit(rawValue: Int)\nCreates a set that includes an option that corresponds to the provided raw value.\ntypealias HKQuantitySeriesSampleQueryDescriptor.Options.RawValue\nThe raw value for an option."
  },
  {
    "title": "contains(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquantityseriessamplequerydescriptor/options/3916425-contains",
    "html": "Parameters\nmember\n\nThe element to look for in the option set.\n\nReturn Value\n\ntrue if the option set contains member; otherwise, false.\n\nDiscussion\n\nThis example uses the contains(_:) method to check whether next-day shipping is in the availableOptions instance.\n\nlet availableOptions = ShippingOptions.express\nif availableOptions.contains(.nextDay) {\n    print(\"Next day shipping available\")\n}\n// Prints \"Next day shipping available\"\n\nSee Also\nTesting for Membership\nvar isEmpty: Bool\nA Boolean value that indicates whether the set has no elements.\ntypealias HKQuantitySeriesSampleQueryDescriptor.Options.Element\nAn option in the series sample query option set.\ntypealias HKQuantitySeriesSampleQueryDescriptor.Options.ArrayLiteralElement\nAn option in the series sample query option set."
  },
  {
    "title": "isEmpty | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquantityseriessamplequerydescriptor/options/3916443-isempty",
    "html": "See Also\nTesting for Membership\nfunc contains(HKQuantitySeriesSampleQueryDescriptor.Options) -> Bool\nReturns a Boolean value that indicates whether a given element is a member of the option set.\ntypealias HKQuantitySeriesSampleQueryDescriptor.Options.Element\nAn option in the series sample query option set.\ntypealias HKQuantitySeriesSampleQueryDescriptor.Options.ArrayLiteralElement\nAn option in the series sample query option set."
  },
  {
    "title": "init(rawValue:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquantityseriessamplequerydescriptor/options/3916436-init",
    "html": "Parameters\nrawValue\n\nThe raw value for the desired options.\n\nRelationships\nFrom Protocol\nOptionSet\nRawRepresentable\nSee Also\nCreating Options\ninit()\nCreates an empty option set.\ninit<S>(S)\nCreates a new set from a finite sequence of items.\ninit(arrayLiteral: HKQuantitySeriesSampleQueryDescriptor.Options...)\nCreates a set containing the elements of the given array literal.\ntypealias HKQuantitySeriesSampleQueryDescriptor.Options.RawValue\nThe raw value for an option.\nlet rawValue: Int\nThe raw value for the options."
  },
  {
    "title": "HKQuantitySeriesSampleQueryDescriptor.Options.Element | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquantityseriessamplequerydescriptor/options/element",
    "html": "See Also\nTesting for Membership\nvar isEmpty: Bool\nA Boolean value that indicates whether the set has no elements.\nfunc contains(HKQuantitySeriesSampleQueryDescriptor.Options) -> Bool\nReturns a Boolean value that indicates whether a given element is a member of the option set.\ntypealias HKQuantitySeriesSampleQueryDescriptor.Options.ArrayLiteralElement\nAn option in the series sample query option set."
  },
  {
    "title": "HKQuantitySeriesSampleQueryDescriptor.Options.ArrayLiteralElement | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquantityseriessamplequerydescriptor/options/arrayliteralelement",
    "html": "See Also\nTesting for Membership\nvar isEmpty: Bool\nA Boolean value that indicates whether the set has no elements.\nfunc contains(HKQuantitySeriesSampleQueryDescriptor.Options) -> Bool\nReturns a Boolean value that indicates whether a given element is a member of the option set.\ntypealias HKQuantitySeriesSampleQueryDescriptor.Options.Element\nAn option in the series sample query option set."
  },
  {
    "title": "update(with:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquantityseriessamplequerydescriptor/options/3916464-update",
    "html": "Return Value\n\nThe intersection of [newMember] and the set if the intersection was nonempty; otherwise, nil.\n\nDiscussion\n\nIf newMember is not contained in the set but subsumes current members of the set, the subsumed members are returned.\n\nvar options: ShippingOptions = [.secondDay, .priority]\nlet replaced = options.update(with: .express)\nprint(replaced == .secondDay)\n// Prints \"true\"\n\nSee Also\nAdding and Removing Options\nfunc insert(HKQuantitySeriesSampleQueryDescriptor.Options) -> (inserted: Bool, memberAfterInsert: HKQuantitySeriesSampleQueryDescriptor.Options)\nAdds the given element to the option set if it is not already a member.\nfunc remove(HKQuantitySeriesSampleQueryDescriptor.Options) -> HKQuantitySeriesSampleQueryDescriptor.Options?\nRemoves the given element and all elements subsumed by it."
  },
  {
    "title": "union(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquantityseriessamplequerydescriptor/options/3916462-union",
    "html": "Parameters\nother\n\nAn option set.\n\nReturn Value\n\nA new option set made up of the elements contained in this set, in other, or in both.\n\nDiscussion\n\nThis example uses the union(_:) method to add two more shipping options to the default set.\n\nlet defaultShipping = ShippingOptions.standard\nlet memberShipping = defaultShipping.union([.secondDay, .priority])\nprint(memberShipping.contains(.priority))\n// Prints \"true\"\n\nSee Also\nCombining Sets\nfunc formUnion(HKQuantitySeriesSampleQueryDescriptor.Options)\nInserts the elements of another set into this option set.\nfunc intersection(HKQuantitySeriesSampleQueryDescriptor.Options) -> HKQuantitySeriesSampleQueryDescriptor.Options\nReturns a new option set with only the elements contained in both this set and the given set.\nfunc formIntersection(HKQuantitySeriesSampleQueryDescriptor.Options)\nRemoves all elements of this option set that are not also present in the given set.\nfunc symmetricDifference(HKQuantitySeriesSampleQueryDescriptor.Options) -> HKQuantitySeriesSampleQueryDescriptor.Options\nReturns a new option set with the elements contained in this set or in the given set, but not in both.\nfunc formSymmetricDifference(HKQuantitySeriesSampleQueryDescriptor.Options)\nReplaces this set with a new set containing all elements contained in either this set or the given set, but not in both.\nfunc subtract(HKQuantitySeriesSampleQueryDescriptor.Options)\nRemoves the elements of the given set from this set.\nfunc subtracting(HKQuantitySeriesSampleQueryDescriptor.Options) -> HKQuantitySeriesSampleQueryDescriptor.Options\nReturns a new set containing the elements of this set that do not occur in the given set."
  },
  {
    "title": "HKQuantitySeriesSampleQueryDescriptor.Options.RawValue | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquantityseriessamplequerydescriptor/options/rawvalue",
    "html": "See Also\nCreating Options\ninit()\nCreates an empty option set.\ninit<S>(S)\nCreates a new set from a finite sequence of items.\ninit(arrayLiteral: HKQuantitySeriesSampleQueryDescriptor.Options...)\nCreates a set containing the elements of the given array literal.\ninit(rawValue: Int)\nCreates a set that includes an option that corresponds to the provided raw value.\nlet rawValue: Int\nThe raw value for the options."
  },
  {
    "title": "formUnion(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquantityseriessamplequerydescriptor/options/3916429-formunion",
    "html": "Parameters\nother\n\nAn option set.\n\nDiscussion\n\nThis method is implemented as a | (bitwise OR) operation on the two sets’ raw values.\n\nSee Also\nCombining Sets\nfunc union(HKQuantitySeriesSampleQueryDescriptor.Options) -> HKQuantitySeriesSampleQueryDescriptor.Options\nReturns a new option set of the elements contained in this set, in the given set, or in both.\nfunc intersection(HKQuantitySeriesSampleQueryDescriptor.Options) -> HKQuantitySeriesSampleQueryDescriptor.Options\nReturns a new option set with only the elements contained in both this set and the given set.\nfunc formIntersection(HKQuantitySeriesSampleQueryDescriptor.Options)\nRemoves all elements of this option set that are not also present in the given set.\nfunc symmetricDifference(HKQuantitySeriesSampleQueryDescriptor.Options) -> HKQuantitySeriesSampleQueryDescriptor.Options\nReturns a new option set with the elements contained in this set or in the given set, but not in both.\nfunc formSymmetricDifference(HKQuantitySeriesSampleQueryDescriptor.Options)\nReplaces this set with a new set containing all elements contained in either this set or the given set, but not in both.\nfunc subtract(HKQuantitySeriesSampleQueryDescriptor.Options)\nRemoves the elements of the given set from this set.\nfunc subtracting(HKQuantitySeriesSampleQueryDescriptor.Options) -> HKQuantitySeriesSampleQueryDescriptor.Options\nReturns a new set containing the elements of this set that do not occur in the given set."
  },
  {
    "title": "max(by:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkstatisticscollectionquerydescriptor/results/3916589-max",
    "html": "Parameters\nareInIncreasingOrder\n\nA predicate that returns true if its first argument should be ordered before its second argument; otherwise, false.\n\nReturn Value\n\nThe sequence’s minimum element, according to areInIncreasingOrder. If the sequence has no elements, returns nil.\n\nDiscussion\n\nUse this method when the asynchronous sequence’s values don’t conform to Comparable, or when you want to apply a custom ordering to the sequence.\n\nThe predicate must be a strict weak ordering over the elements. That is, for any elements a, b, and c, the following conditions must hold:\n\nareInIncreasingOrder(a, a) is always false. (Irreflexivity)\n\nIf areInIncreasingOrder(a, b) and areInIncreasingOrder(b, c) are both true, then areInIncreasingOrder(a, c) is also true. (Transitive comparability)\n\nTwo elements are incomparable if neither is ordered before the other according to the predicate. If a and b are incomparable, and b and c are incomparable, then a and c are also incomparable. (Transitive incomparability)\n\nThe following example uses an enumeration of playing cards ranks, Rank, which ranges from ace (low) to king (high). An asynchronous sequence called RankCounter produces all elements of the array. The predicate provided to the max(by:) method sorts ranks based on their rawValue:\n\nenum Rank: Int {\n    case ace = 1, two, three, four, five, six, seven, eight, nine, ten, jack, queen, king\n}\n\n\nlet max = await RankCounter()\n    .max { $0.rawValue < $1.rawValue }\nprint(max ?? \"none\")\n// Prints \"king\"\n\nSee Also\nFinding Elements\nfunc contains(where: (HKStatisticsCollectionQueryDescriptor.Result) -> Bool) -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains an element that satisfies the given predicate.\nfunc allSatisfy((HKStatisticsCollectionQueryDescriptor.Result) -> Bool) -> Bool\nReturns a Boolean value that indicates whether all elements produced by the asynchronous sequence satisfy the given predicate.\nfunc first(where: (HKStatisticsCollectionQueryDescriptor.Result) -> Bool) -> HKStatisticsCollectionQueryDescriptor.Result?\nReturns the first element of the sequence that satisfies the given predicate.\nfunc min(by: (HKStatisticsCollectionQueryDescriptor.Result, HKStatisticsCollectionQueryDescriptor.Result) -> Bool) -> HKStatisticsCollectionQueryDescriptor.Result?\nReturns the minimum element in the asynchronous sequence, using the given predicate as the comparison between elements."
  },
  {
    "title": "compactMap(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkactivitysummaryquerydescriptor/results/3916212-compactmap",
    "html": "Parameters\ntransform\n\nA mapping closure. transform accepts an element of this sequence as its parameter and returns a transformed value of the same or of a different type.\n\nReturn Value\n\nAn asynchronous sequence that contains, in order, the non-nil elements produced by the transform closure.\n\nDiscussion\n\nUse the compactMap(_:) method to transform every element received from a base asynchronous sequence, while also discarding any nil results from the closure. Typically, you use this to transform from one type of element to another.\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 5. The closure provided to the compactMap(_:) method takes each Int and looks up a corresponding String from a romanNumeralDict dictionary. Because there is no key for 4, the closure returns nil in this case, which compactMap(_:) omits from the transformed asynchronous sequence.\n\nlet romanNumeralDict: [Int: String] =\n    [1: \"I\", 2: \"II\", 3: \"III\", 5: \"V\"]\n    \nlet stream = Counter(howHigh: 5)\n    .compactMap { romanNumeralDict[$0] }\nfor await numeral in stream {\n    print(numeral, terminator: \" \")\n}\n// Prints \"I II III V \"\n\nSee Also\nTransforming a Sequence\nfunc map<Transformed>(([HKActivitySummary]) -> Transformed) -> AsyncMapSequence<HKActivitySummaryQueryDescriptor.Results, Transformed>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements.\nfunc map<Transformed>(([HKActivitySummary]) -> Transformed) -> AsyncThrowingMapSequence<HKActivitySummaryQueryDescriptor.Results, Transformed>\nCreates an asynchronous sequence that maps the given error-throwing closure over the asynchronous sequence’s elements.\nfunc reduce<Result>(Result, (Result, [HKActivitySummary]) -> Result) -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure.\nfunc reduce<Result>(into: Result, (inout Result, [HKActivitySummary]) -> Void) -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure, given a mutable initial value.\nfunc compactMap<ElementOfResult>(([HKActivitySummary]) -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<HKActivitySummaryQueryDescriptor.Results, ElementOfResult>\nCreates an asynchronous sequence that maps an error-throwing closure over the base sequence’s elements, omitting results that don’t return a value.\nfunc flatMap<SegmentOfResult>(([HKActivitySummary]) -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<HKActivitySummaryQueryDescriptor.Results, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given error-throwing transformation with each element of this sequence.\nfunc flatMap<SegmentOfResult>(([HKActivitySummary]) -> SegmentOfResult) -> AsyncFlatMapSequence<HKActivitySummaryQueryDescriptor.Results, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given transformation with each element of this sequence."
  },
  {
    "title": "HKAppleECGAlgorithmVersion.version1 | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkappleecgalgorithmversion/version1",
    "html": "See Also\nVersions\ncase version2\nThe version 2 algorithm."
  },
  {
    "title": "HKActivitySummaryQueryDescriptor.Results.Iterator | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkactivitysummaryquerydescriptor/results/iterator",
    "html": "Topics\nIterating Over Results\ntypealias HKActivitySummaryQueryDescriptor.Results.Iterator.Element\nThe type for results that the active summary iterator returns.\nfunc next() -> HKActivitySummaryQueryDescriptor.Results.Element?\nAsynchronously waits for the next element and returns it.\nRelationships\nConforms To\nAsyncIteratorProtocol\nSee Also\nCreating an Iterator\nfunc makeAsyncIterator() -> HKActivitySummaryQueryDescriptor.Results.Iterator\nCreates the asynchronous iterator that produces results from this asynchronous sequence.\ntypealias HKActivitySummaryQueryDescriptor.Results.AsyncIterator\nAn iterator that returns results from an asynchronous sequence.\ntypealias HKActivitySummaryQueryDescriptor.Results.Element\nA set of results that the active summary query returns."
  },
  {
    "title": "HKHeartRateRecoveryTestType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkheartraterecoverytesttype",
    "html": "Topics\nHeart-rate recovery tests\ncase maxExercise\nMeasures a person’s actual heart-rate recovery.\ncase predictionNonExercise\nA test that estimates a person’s heart-rate recovery without using exercise.\ncase predictionSubMaxExercise\nA test that estimates a person’s heart-rate recovery using lower-intensity exercise.\nRelationships\nConforms To\nSendable"
  },
  {
    "title": "HKActivitySummaryQueryDescriptor.Results.AsyncIterator | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkactivitysummaryquerydescriptor/results/asynciterator",
    "html": "See Also\nCreating an Iterator\nfunc makeAsyncIterator() -> HKActivitySummaryQueryDescriptor.Results.Iterator\nCreates the asynchronous iterator that produces results from this asynchronous sequence.\nstruct HKActivitySummaryQueryDescriptor.Results.Iterator\nAn iterator for accessing active summary results.\ntypealias HKActivitySummaryQueryDescriptor.Results.Element\nA set of results that the active summary query returns."
  },
  {
    "title": "HKCategoryValueAppetiteChanges.increased | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkcategoryvalueappetitechanges/increased",
    "html": "See Also\nAppetite Changes\ncase decreased\nThe user’s appetite decreased.\ncase noChange\nNo change in the user’s appetite.\ncase unspecified\nAn unspecified change in appetite."
  },
  {
    "title": "HKCategoryValueContraceptive.unspecified | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkcategoryvaluecontraceptive/unspecified",
    "html": "See Also\nContraceptive Types\ncase implant\nA contraceptive implant.\ncase injection\nAn injectable contraceptive.\ncase intrauterineDevice\nAn intrauterine device (IUD).\ncase intravaginalRing\nA contraceptive intravaginal ring.\ncase oral\nAn oral contraceptive.\ncase patch\nA contraceptive patch."
  },
  {
    "title": "HKActivitySummaryQueryDescriptor.Results.Element | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkactivitysummaryquerydescriptor/results/element",
    "html": "See Also\nCreating an Iterator\nfunc makeAsyncIterator() -> HKActivitySummaryQueryDescriptor.Results.Iterator\nCreates the asynchronous iterator that produces results from this asynchronous sequence.\nstruct HKActivitySummaryQueryDescriptor.Results.Iterator\nAn iterator for accessing active summary results.\ntypealias HKActivitySummaryQueryDescriptor.Results.AsyncIterator\nAn iterator that returns results from an asynchronous sequence."
  },
  {
    "title": "contains(where:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkactivitysummaryquerydescriptor/results/3916218-contains",
    "html": "Parameters\npredicate\n\nA closure that takes an element of the asynchronous sequence as its argument and returns a Boolean value that indicates whether the passed element represents a match.\n\nReturn Value\n\ntrue if the sequence contains an element that satisfies predicate; otherwise, false.\n\nDiscussion\n\nYou can use the predicate to check for an element of a type that doesn’t conform to the Equatable protocol, or to find an element that satisfies a general condition.\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 10. The contains(where:) method checks to see whether the sequence produces a value divisible by 3:\n\nlet containsDivisibleByThree = await Counter(howHigh: 10)\n    .contains { $0 % 3 == 0 }\nprint(containsDivisibleByThree)\n// Prints \"true\"\n\n\nThe predicate executes each time the asynchronous sequence produces an element, until either the predicate finds a match or the sequence ends.\n\nSee Also\nFinding Elements\nfunc contains([HKActivitySummary]) -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains the given element.\nfunc allSatisfy(([HKActivitySummary]) -> Bool) -> Bool\nReturns a Boolean value that indicates whether all elements produced by the asynchronous sequence satisfy the given predicate.\nfunc first(where: ([HKActivitySummary]) -> Bool) -> [HKActivitySummary]?\nReturns the first element of the sequence that satisfies the given predicate.\nfunc max(by: ([HKActivitySummary], [HKActivitySummary]) -> Bool) -> [HKActivitySummary]?\nReturns the maximum element in the asynchronous sequence, using the given predicate as the comparison between elements.\nfunc min(by: ([HKActivitySummary], [HKActivitySummary]) -> Bool) -> [HKActivitySummary]?\nReturns the minimum element in the asynchronous sequence, using the given predicate as the comparison between elements."
  },
  {
    "title": "allSatisfy(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkactivitysummaryquerydescriptor/results/3916210-allsatisfy",
    "html": "Parameters\npredicate\n\nA closure that takes an element of the asynchronous sequence as its argument and returns a Boolean value that indicates whether the passed element satisfies a condition.\n\nReturn Value\n\ntrue if the sequence contains only elements that satisfy predicate; otherwise, false.\n\nDiscussion\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 10. The allSatisfy(_:) method checks to see whether all elements produced by the sequence are less than 10.\n\nlet allLessThanTen = await Counter(howHigh: 10)\n    .allSatisfy { $0 < 10 }\nprint(allLessThanTen)\n// Prints \"false\"\n\n\nThe predicate executes each time the asynchronous sequence produces an element, until either the predicate returns false or the sequence ends.\n\nIf the asynchronous sequence is empty, this method returns true.\n\nSee Also\nFinding Elements\nfunc contains(where: ([HKActivitySummary]) -> Bool) -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains an element that satisfies the given predicate.\nfunc contains([HKActivitySummary]) -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains the given element.\nfunc first(where: ([HKActivitySummary]) -> Bool) -> [HKActivitySummary]?\nReturns the first element of the sequence that satisfies the given predicate.\nfunc max(by: ([HKActivitySummary], [HKActivitySummary]) -> Bool) -> [HKActivitySummary]?\nReturns the maximum element in the asynchronous sequence, using the given predicate as the comparison between elements.\nfunc min(by: ([HKActivitySummary], [HKActivitySummary]) -> Bool) -> [HKActivitySummary]?\nReturns the minimum element in the asynchronous sequence, using the given predicate as the comparison between elements."
  },
  {
    "title": "first(where:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkactivitysummaryquerydescriptor/results/3916226-first",
    "html": "Parameters\npredicate\n\nA closure that takes an element of the asynchronous sequence as its argument and returns a Boolean value that indicates whether the element is a match.\n\nReturn Value\n\nThe first element of the sequence that satisfies predicate, or nil if there is no element that satisfies predicate.\n\nDiscussion\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 10. The first(where:) method returns the first member of the sequence that’s evenly divisible by both 2 and 3.\n\nlet divisibleBy2And3 = await Counter(howHigh: 10)\n    .first { $0 % 2 == 0 && $0 % 3 == 0 }\nprint(divisibleBy2And3 ?? \"none\")\n// Prints \"6\"\n\n\nThe predicate executes each time the asynchronous sequence produces an element, until either the predicate finds a match or the sequence ends.\n\nSee Also\nFinding Elements\nfunc contains(where: ([HKActivitySummary]) -> Bool) -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains an element that satisfies the given predicate.\nfunc contains([HKActivitySummary]) -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains the given element.\nfunc allSatisfy(([HKActivitySummary]) -> Bool) -> Bool\nReturns a Boolean value that indicates whether all elements produced by the asynchronous sequence satisfy the given predicate.\nfunc max(by: ([HKActivitySummary], [HKActivitySummary]) -> Bool) -> [HKActivitySummary]?\nReturns the maximum element in the asynchronous sequence, using the given predicate as the comparison between elements.\nfunc min(by: ([HKActivitySummary], [HKActivitySummary]) -> Bool) -> [HKActivitySummary]?\nReturns the minimum element in the asynchronous sequence, using the given predicate as the comparison between elements."
  },
  {
    "title": "contains(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkactivitysummaryquerydescriptor/results/3916216-contains",
    "html": "Parameters\nsearch\n\nThe element to find in the asynchronous sequence.\n\nReturn Value\n\ntrue if the method found the element in the asynchronous sequence; otherwise, false.\n\nDiscussion\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 10. The contains(_:) method checks to see whether the sequence produces the value 5:\n\nlet containsFive = await Counter(howHigh: 10)\n    .contains(5)\nprint(containsFive)\n// Prints \"true\"\n\nSee Also\nFinding Elements\nfunc contains(where: ([HKActivitySummary]) -> Bool) -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains an element that satisfies the given predicate.\nfunc allSatisfy(([HKActivitySummary]) -> Bool) -> Bool\nReturns a Boolean value that indicates whether all elements produced by the asynchronous sequence satisfy the given predicate.\nfunc first(where: ([HKActivitySummary]) -> Bool) -> [HKActivitySummary]?\nReturns the first element of the sequence that satisfies the given predicate.\nfunc max(by: ([HKActivitySummary], [HKActivitySummary]) -> Bool) -> [HKActivitySummary]?\nReturns the maximum element in the asynchronous sequence, using the given predicate as the comparison between elements.\nfunc min(by: ([HKActivitySummary], [HKActivitySummary]) -> Bool) -> [HKActivitySummary]?\nReturns the minimum element in the asynchronous sequence, using the given predicate as the comparison between elements."
  },
  {
    "title": "max(by:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkactivitysummaryquerydescriptor/results/3916237-max",
    "html": "Parameters\nareInIncreasingOrder\n\nA predicate that returns true if its first argument should be ordered before its second argument; otherwise, false.\n\nReturn Value\n\nThe sequence’s minimum element, according to areInIncreasingOrder. If the sequence has no elements, returns nil.\n\nDiscussion\n\nUse this method when the asynchronous sequence’s values don’t conform to Comparable, or when you want to apply a custom ordering to the sequence.\n\nThe predicate must be a strict weak ordering over the elements. That is, for any elements a, b, and c, the following conditions must hold:\n\nareInIncreasingOrder(a, a) is always false. (Irreflexivity)\n\nIf areInIncreasingOrder(a, b) and areInIncreasingOrder(b, c) are both true, then areInIncreasingOrder(a, c) is also true. (Transitive comparability)\n\nTwo elements are incomparable if neither is ordered before the other according to the predicate. If a and b are incomparable, and b and c are incomparable, then a and c are also incomparable. (Transitive incomparability)\n\nThe following example uses an enumeration of playing cards ranks, Rank, which ranges from ace (low) to king (high). An asynchronous sequence called RankCounter produces all elements of the array. The predicate provided to the max(by:) method sorts ranks based on their rawValue:\n\nenum Rank: Int {\n    case ace = 1, two, three, four, five, six, seven, eight, nine, ten, jack, queen, king\n}\n\n\nlet max = await RankCounter()\n    .max { $0.rawValue < $1.rawValue }\nprint(max ?? \"none\")\n// Prints \"king\"\n\nSee Also\nFinding Elements\nfunc contains(where: ([HKActivitySummary]) -> Bool) -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains an element that satisfies the given predicate.\nfunc contains([HKActivitySummary]) -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains the given element.\nfunc allSatisfy(([HKActivitySummary]) -> Bool) -> Bool\nReturns a Boolean value that indicates whether all elements produced by the asynchronous sequence satisfy the given predicate.\nfunc first(where: ([HKActivitySummary]) -> Bool) -> [HKActivitySummary]?\nReturns the first element of the sequence that satisfies the given predicate.\nfunc min(by: ([HKActivitySummary], [HKActivitySummary]) -> Bool) -> [HKActivitySummary]?\nReturns the minimum element in the asynchronous sequence, using the given predicate as the comparison between elements."
  },
  {
    "title": "dropFirst(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkactivitysummaryquerydescriptor/results/3916222-dropfirst",
    "html": "Parameters\ncount\n\nThe number of elements to drop from the beginning of the sequence. count must be greater than or equal to zero.\n\nReturn Value\n\nAn asynchronous sequence that drops the first count elements from the base sequence.\n\nDiscussion\n\nUse dropFirst(_:) when you want to drop the first n elements from the base sequence and pass through the remaining elements.\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 10. The dropFirst(_:) method causes the modified sequence to ignore the values 1 through 3, and instead emit 4 through 10:\n\nfor await number in Counter(howHigh: 10).dropFirst(3) {\n    print(number, terminator: \" \")\n}\n// Prints \"4 5 6 7 8 9 10 \"\n\n\nIf the number of elements to drop exceeds the number of elements in the sequence, the result is an empty sequence.\n\nSee Also\nExcluding Elements\nfunc drop(while: ([HKActivitySummary]) -> Bool) -> AsyncDropWhileSequence<HKActivitySummaryQueryDescriptor.Results>\nOmits elements from the base asynchronous sequence until a given closure returns false, after which it passes through all remaining elements.\nfunc filter(([HKActivitySummary]) -> Bool) -> AsyncFilterSequence<HKActivitySummaryQueryDescriptor.Results>\nCreates an asynchronous sequence that contains, in order, the elements of the base sequence that satisfy the given predicate."
  },
  {
    "title": "flatMap(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkactivitysummaryquerydescriptor/results/3916230-flatmap",
    "html": "Parameters\ntransform\n\nA mapping closure. transform accepts an element of this sequence as its parameter and returns an AsyncSequence.\n\nReturn Value\n\nA single, flattened asynchronous sequence that contains all elements in all the asynchronous sequences produced by transform.\n\nDiscussion\n\nUse this method to receive a single-level asynchronous sequence when your transformation produces an asynchronous sequence for each element.\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 5. The transforming closure takes the received Int and returns a new Counter that counts that high. For example, when the transform receives 3 from the base sequence, it creates a new Counter that produces the values 1, 2, and 3. The flatMap(_:) method “flattens” the resulting sequence-of-sequences into a single AsyncSequence.\n\nlet stream = Counter(howHigh: 5)\n    .flatMap { Counter(howHigh: $0) }\nfor await number in stream {\n    print(number, terminator: \" \")\n}\n// Prints \"1 1 2 1 2 3 1 2 3 4 1 2 3 4 5 \"\n\nSee Also\nTransforming a Sequence\nfunc map<Transformed>(([HKActivitySummary]) -> Transformed) -> AsyncMapSequence<HKActivitySummaryQueryDescriptor.Results, Transformed>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements.\nfunc map<Transformed>(([HKActivitySummary]) -> Transformed) -> AsyncThrowingMapSequence<HKActivitySummaryQueryDescriptor.Results, Transformed>\nCreates an asynchronous sequence that maps the given error-throwing closure over the asynchronous sequence’s elements.\nfunc reduce<Result>(Result, (Result, [HKActivitySummary]) -> Result) -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure.\nfunc reduce<Result>(into: Result, (inout Result, [HKActivitySummary]) -> Void) -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure, given a mutable initial value.\nfunc compactMap<ElementOfResult>(([HKActivitySummary]) -> ElementOfResult?) -> AsyncCompactMapSequence<HKActivitySummaryQueryDescriptor.Results, ElementOfResult>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements, omitting results that don’t return a value.\nfunc compactMap<ElementOfResult>(([HKActivitySummary]) -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<HKActivitySummaryQueryDescriptor.Results, ElementOfResult>\nCreates an asynchronous sequence that maps an error-throwing closure over the base sequence’s elements, omitting results that don’t return a value.\nfunc flatMap<SegmentOfResult>(([HKActivitySummary]) -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<HKActivitySummaryQueryDescriptor.Results, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given error-throwing transformation with each element of this sequence."
  },
  {
    "title": "HKCategoryValueProgesteroneTestResult.negative | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkcategoryvalueprogesteronetestresult/negative",
    "html": "See Also\nTest Results\ncase positive\nThe test returned a positive result.\ncase indeterminate\nThe test was inconclusive."
  },
  {
    "title": "HKCategoryValueProgesteroneTestResult.positive | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkcategoryvalueprogesteronetestresult/positive",
    "html": "See Also\nTest Results\ncase negative\nThe test returned a negative result.\ncase indeterminate\nThe test was inconclusive."
  },
  {
    "title": "HKCategoryValueProgesteroneTestResult.indeterminate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkcategoryvalueprogesteronetestresult/indeterminate",
    "html": "See Also\nTest Results\ncase positive\nThe test returned a positive result.\ncase negative\nThe test returned a negative result."
  },
  {
    "title": "HKCategoryValueAudioExposureEvent.loudEnvironment | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkcategoryvalueaudioexposureevent/loudenvironment",
    "html": "Deprecated\n\nUse HKCategoryValueEnvironmentalAudioExposureEvent.momentaryLimit instead."
  },
  {
    "title": "HKAppleWalkingSteadinessClassification.AllCases | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkapplewalkingsteadinessclassification/allcases",
    "html": "See Also\nAccessing Classifications\ncase ok\nA classification indicating that the stability of the user’s gait is within the normal range.\ncase low\nA classification indicating that the stability of the user’s gate is below normal.\ncase veryLow\nA classification indicating that the stability of the user’s gate is considerably below normal.\nstatic var allCases: [HKAppleWalkingSteadinessClassification]\nAn array that contains all valid walking steadiness classifications."
  },
  {
    "title": "maximum | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkapplewalkingsteadinessclassification/3749131-maximum",
    "html": "Discussion\n\nThis property contains the minimum walking steadiness value for the classification. It contains an HKQuantity instance with a percentage value between 0.0 and 1.0.\n\nSee Also\nAccessing Values\nvar minimum: HKQuantity\nThe maximum walking steadiness percentage for the classification."
  },
  {
    "title": "HKAppleWalkingSteadinessClassification.ok | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkapplewalkingsteadinessclassification/ok",
    "html": "See Also\nAccessing Classifications\ncase low\nA classification indicating that the stability of the user’s gate is below normal.\ncase veryLow\nA classification indicating that the stability of the user’s gate is considerably below normal.\ntypealias HKAppleWalkingSteadinessClassification.AllCases\nA type representing an array of classifications.\nstatic var allCases: [HKAppleWalkingSteadinessClassification]\nAn array that contains all valid walking steadiness classifications."
  },
  {
    "title": "HKAppleWalkingSteadinessClassification.veryLow | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkapplewalkingsteadinessclassification/verylow",
    "html": "See Also\nAccessing Classifications\ncase ok\nA classification indicating that the stability of the user’s gait is within the normal range.\ncase low\nA classification indicating that the stability of the user’s gate is below normal.\ntypealias HKAppleWalkingSteadinessClassification.AllCases\nA type representing an array of classifications.\nstatic var allCases: [HKAppleWalkingSteadinessClassification]\nAn array that contains all valid walking steadiness classifications."
  },
  {
    "title": "allCases | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkapplewalkingsteadinessclassification/3749129-allcases",
    "html": "Relationships\nFrom Protocol\nCaseIterable\nSee Also\nAccessing Classifications\ncase ok\nA classification indicating that the stability of the user’s gait is within the normal range.\ncase low\nA classification indicating that the stability of the user’s gate is below normal.\ncase veryLow\nA classification indicating that the stability of the user’s gate is considerably below normal.\ntypealias HKAppleWalkingSteadinessClassification.AllCases\nA type representing an array of classifications."
  },
  {
    "title": "minimum | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkapplewalkingsteadinessclassification/3749132-minimum",
    "html": "Discussion\n\nThis property contains the maximum walking steadiness value for the classification. It contains an HKQuantity instance with a percentage value between 0.0 and 1.0.\n\nSee Also\nAccessing Values\nvar maximum: HKQuantity\nThe minimum walking steadiness percentage for the classification."
  },
  {
    "title": "HKCategoryValuePregnancyTestResult.positive | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkcategoryvaluepregnancytestresult/positive",
    "html": "See Also\nTest Results\ncase negative\nThe test returned a negative result.\ncase indeterminate\nThe test was inconclusive."
  },
  {
    "title": "HKCategoryValuePregnancyTestResult.indeterminate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkcategoryvaluepregnancytestresult/indeterminate",
    "html": "See Also\nTest Results\ncase positive\nThe test returned a positive result.\ncase negative\nThe test returned a negative result."
  },
  {
    "title": "HKCategoryValueSeverity.mild | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkcategoryvalueseverity/mild",
    "html": "See Also\nSeverity Categories\ncase notPresent\nThe symptom is not present.\ncase moderate\nThe symptom is moderate.\ncase severe\nThe symptom is severe.\ncase unspecified\nThe symptom’s severity is not specified."
  },
  {
    "title": "HKCategoryValueSeverity.notPresent | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkcategoryvalueseverity/notpresent",
    "html": "See Also\nSeverity Categories\ncase mild\nThe symptom is mild.\ncase moderate\nThe symptom is moderate.\ncase severe\nThe symptom is severe.\ncase unspecified\nThe symptom’s severity is not specified."
  },
  {
    "title": "HKPrismBase.in | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkprismbase/in",
    "html": "Discussion\n\nYou can only use this value for the prism’s horizontalBase.\n\nSee Also\nPrism Base\ncase none\nNo prism correction.\ncase up\nThe prism’s base is at the top of the lens.\ncase down\nThe prism’s base is at the bottom of the lens.\ncase out\nThe prism base is on the outside edge of the lens."
  },
  {
    "title": "patchVersion | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkfhirversion/3552019-patchversion",
    "html": "See Also\nAccessing Version Data\nvar majorVersion: Int\nThe standard’s major version number.\nvar minorVersion: Int\nThe standard’s minor version number.\nvar stringRepresentation: String\nA string representation of the version."
  },
  {
    "title": "stringRepresentation | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkfhirversion/3552022-stringrepresentation",
    "html": "Discussion\n\nThe string representation uses the following format: <major>.<minor>.<patch>.\n\nSee Also\nAccessing Version Data\nvar majorVersion: Int\nThe standard’s major version number.\nvar minorVersion: Int\nThe standard’s minor version number.\nvar patchVersion: Int\nThe standard’s patch version number."
  },
  {
    "title": "primaryR4() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkfhirversion/3552021-primaryr4",
    "html": "See Also\nCreating Version Objects\ninit(fromVersionString: String)\nCreates an FHIR version object from a string representation of the version.\nclass func primaryDSTU2() -> Self\nReturns the primary Second Draft Standard for Trial Use (DSTU2) version."
  },
  {
    "title": "fhirRelease | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkfhirversion/3552016-fhirrelease",
    "html": "See Also\nAccessing the Release\nstruct HKFHIRRelease\nOfficial releases of the FHIR specification."
  },
  {
    "title": "HKVisionEye.right | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkvisioneye/right",
    "html": "See Also\nEyes\ncase left\nThe left eye."
  },
  {
    "title": "HKVisionEye.left | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkvisioneye/left",
    "html": "See Also\nEyes\ncase right\nThe right eye."
  },
  {
    "title": "HKSourceRevisionAnyProductType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hksourcerevisionanyproducttype",
    "html": "Discussion\n\nWhen creating a predicate, use this constant to create a source revision object that matches all product types."
  },
  {
    "title": "HKUserMotionContext | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkusermotioncontext",
    "html": "Topics\nMotion contexts\ncase notSet\nThe person’s motion was not specified.\ncase active\nThe person was active during the sample.\ncase stationary\nThe person was stationary during the sample.\nRelationships\nConforms To\nSendable"
  },
  {
    "title": "HKCategoryValueContraceptive.patch | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkcategoryvaluecontraceptive/patch",
    "html": "See Also\nContraceptive Types\ncase unspecified\nAn unspecified type of contraceptive.\ncase implant\nA contraceptive implant.\ncase injection\nAn injectable contraceptive.\ncase intrauterineDevice\nAn intrauterine device (IUD).\ncase intravaginalRing\nA contraceptive intravaginal ring.\ncase oral\nAn oral contraceptive."
  },
  {
    "title": "HKPredicateKeyPathClinicalRecordFHIRResourceType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkpredicatekeypathclinicalrecordfhirresourcetype",
    "html": "See Also\nClinical record keys\nlet HKPredicateKeyPathClinicalRecordFHIRResourceIdentifier: String\nThe key path for accessing the clinical record’s Fast Healthcare Interoperability Resources (FHIR) identifier."
  },
  {
    "title": "HKCategoryValueSeverity.severe | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkcategoryvalueseverity/severe",
    "html": "See Also\nSeverity Categories\ncase notPresent\nThe symptom is not present.\ncase mild\nThe symptom is mild.\ncase moderate\nThe symptom is moderate.\ncase unspecified\nThe symptom’s severity is not specified."
  },
  {
    "title": "drop(while:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkstatisticscollectionquerydescriptor/results/3916572-drop",
    "html": "Parameters\npredicate\n\nA closure that takes an element as a parameter and returns a Boolean value indicating whether to drop the element from the modified sequence.\n\nReturn Value\n\nAn asynchronous sequence that skips over values from the base sequence until the provided closure returns false.\n\nDiscussion\n\nUse drop(while:) to omit elements from an asynchronous sequence until the element received meets a condition you specify.\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 10. The drop(while:) method causes the modified sequence to ignore received values until it encounters one that is divisible by 3:\n\nlet stream = Counter(howHigh: 10)\n    .drop { $0 % 3 != 0 }\nfor await number in stream {\n    print(number, terminator: \" \")\n}\n// Prints \"3 4 5 6 7 8 9 10 \"\n\n\nAfter the predicate returns false, the sequence never executes it again, and from then on the sequence passes through elements from its underlying sequence as-is.\n\nSee Also\nExcluding Elements\nfunc dropFirst(Int) -> AsyncDropFirstSequence<HKStatisticsCollectionQueryDescriptor.Results>\nOmits a specified number of elements from the base asynchronous sequence, then passes through all remaining elements.\nfunc filter((HKStatisticsCollectionQueryDescriptor.Result) -> Bool) -> AsyncFilterSequence<HKStatisticsCollectionQueryDescriptor.Results>\nCreates an asynchronous sequence that contains, in order, the elements of the base sequence that satisfy the given predicate."
  },
  {
    "title": "HKStatisticsCollectionQueryDescriptor.Results.Iterator | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkstatisticscollectionquerydescriptor/results/iterator",
    "html": "Topics\nIterating Over Results\ntypealias HKStatisticsCollectionQueryDescriptor.Results.Iterator.Element\nThe type for results returned by the active summary iterator.\nfunc next() -> HKStatisticsCollectionQueryDescriptor.Results.Element?\nAsynchronously waits for the next element and returns it.\nRelationships\nConforms To\nAsyncIteratorProtocol\nSee Also\nCreating an Iterator\nfunc makeAsyncIterator() -> HKStatisticsCollectionQueryDescriptor.Results.Iterator\nCreates the asynchronous iterator that produces results from this asynchronous sequence.\nstruct HKStatisticsCollectionQueryDescriptor.Result\nA collection of results.\ntypealias HKStatisticsCollectionQueryDescriptor.Results.AsyncIterator\nAn iterator that returns results from an asynchronous sequence.\ntypealias HKStatisticsCollectionQueryDescriptor.Results.Element\nA set of results returned by an active summary query."
  },
  {
    "title": "HKCategoryValueSeverity.unspecified | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkcategoryvalueseverity/unspecified",
    "html": "See Also\nSeverity Categories\ncase notPresent\nThe symptom is not present.\ncase mild\nThe symptom is mild.\ncase moderate\nThe symptom is moderate.\ncase severe\nThe symptom is severe."
  },
  {
    "title": "makeAsyncIterator() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkstatisticscollectionquerydescriptor/results/3916584-makeasynciterator",
    "html": "Relationships\nFrom Protocol\nAsyncSequence\nSee Also\nCreating an Iterator\nstruct HKStatisticsCollectionQueryDescriptor.Results.Iterator\nAn iterator for statistics collection query results.\nstruct HKStatisticsCollectionQueryDescriptor.Result\nA collection of results.\ntypealias HKStatisticsCollectionQueryDescriptor.Results.AsyncIterator\nAn iterator that returns results from an asynchronous sequence.\ntypealias HKStatisticsCollectionQueryDescriptor.Results.Element\nA set of results returned by an active summary query."
  },
  {
    "title": "HKStatisticsCollectionQueryDescriptor.Result | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkstatisticscollectionquerydescriptor/result",
    "html": "Overview\n\nThe first set of results reflects the current state of the statistics collection. Additional results represent updates to the collection. When possible, HealthKit populates the updateStatistics property to indicate which statistics have changed.\n\nTopics\nAccessing Statistical Data\nlet statisticsCollection: HKStatisticsCollection\nA collection of statistics, representing the results calculated over separate time intervals.\nlet updatedStatistics: [HKStatistics]?\nA collection of statistics that have changed.\nSee Also\nCreating an Iterator\nfunc makeAsyncIterator() -> HKStatisticsCollectionQueryDescriptor.Results.Iterator\nCreates the asynchronous iterator that produces results from this asynchronous sequence.\nstruct HKStatisticsCollectionQueryDescriptor.Results.Iterator\nAn iterator for statistics collection query results.\ntypealias HKStatisticsCollectionQueryDescriptor.Results.AsyncIterator\nAn iterator that returns results from an asynchronous sequence.\ntypealias HKStatisticsCollectionQueryDescriptor.Results.Element\nA set of results returned by an active summary query."
  },
  {
    "title": "HKStatisticsCollectionQueryDescriptor.Results.Element | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkstatisticscollectionquerydescriptor/results/element",
    "html": "See Also\nCreating an Iterator\nfunc makeAsyncIterator() -> HKStatisticsCollectionQueryDescriptor.Results.Iterator\nCreates the asynchronous iterator that produces results from this asynchronous sequence.\nstruct HKStatisticsCollectionQueryDescriptor.Results.Iterator\nAn iterator for statistics collection query results.\nstruct HKStatisticsCollectionQueryDescriptor.Result\nA collection of results.\ntypealias HKStatisticsCollectionQueryDescriptor.Results.AsyncIterator\nAn iterator that returns results from an asynchronous sequence."
  },
  {
    "title": "contains(where:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkstatisticscollectionquerydescriptor/results/3916570-contains",
    "html": "Parameters\npredicate\n\nA closure that takes an element of the asynchronous sequence as its argument and returns a Boolean value that indicates whether the passed element represents a match.\n\nReturn Value\n\ntrue if the sequence contains an element that satisfies predicate; otherwise, false.\n\nDiscussion\n\nYou can use the predicate to check for an element of a type that doesn’t conform to the Equatable protocol, or to find an element that satisfies a general condition.\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 10. The contains(where:) method checks to see whether the sequence produces a value divisible by 3:\n\nlet containsDivisibleByThree = await Counter(howHigh: 10)\n    .contains { $0 % 3 == 0 }\nprint(containsDivisibleByThree)\n// Prints \"true\"\n\n\nThe predicate executes each time the asynchronous sequence produces an element, until either the predicate finds a match or the sequence ends.\n\nSee Also\nFinding Elements\nfunc allSatisfy((HKStatisticsCollectionQueryDescriptor.Result) -> Bool) -> Bool\nReturns a Boolean value that indicates whether all elements produced by the asynchronous sequence satisfy the given predicate.\nfunc first(where: (HKStatisticsCollectionQueryDescriptor.Result) -> Bool) -> HKStatisticsCollectionQueryDescriptor.Result?\nReturns the first element of the sequence that satisfies the given predicate.\nfunc max(by: (HKStatisticsCollectionQueryDescriptor.Result, HKStatisticsCollectionQueryDescriptor.Result) -> Bool) -> HKStatisticsCollectionQueryDescriptor.Result?\nReturns the maximum element in the asynchronous sequence, using the given predicate as the comparison between elements.\nfunc min(by: (HKStatisticsCollectionQueryDescriptor.Result, HKStatisticsCollectionQueryDescriptor.Result) -> Bool) -> HKStatisticsCollectionQueryDescriptor.Result?\nReturns the minimum element in the asynchronous sequence, using the given predicate as the comparison between elements."
  },
  {
    "title": "HKStatisticsCollectionQueryDescriptor.Results.AsyncIterator | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkstatisticscollectionquerydescriptor/results/asynciterator",
    "html": "See Also\nCreating an Iterator\nfunc makeAsyncIterator() -> HKStatisticsCollectionQueryDescriptor.Results.Iterator\nCreates the asynchronous iterator that produces results from this asynchronous sequence.\nstruct HKStatisticsCollectionQueryDescriptor.Results.Iterator\nAn iterator for statistics collection query results.\nstruct HKStatisticsCollectionQueryDescriptor.Result\nA collection of results.\ntypealias HKStatisticsCollectionQueryDescriptor.Results.Element\nA set of results returned by an active summary query."
  },
  {
    "title": "first(where:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkstatisticscollectionquerydescriptor/results/3916578-first",
    "html": "Parameters\npredicate\n\nA closure that takes an element of the asynchronous sequence as its argument and returns a Boolean value that indicates whether the element is a match.\n\nReturn Value\n\nThe first element of the sequence that satisfies predicate, or nil if there is no element that satisfies predicate.\n\nDiscussion\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 10. The first(where:) method returns the first member of the sequence that’s evenly divisible by both 2 and 3.\n\nlet divisibleBy2And3 = await Counter(howHigh: 10)\n    .first { $0 % 2 == 0 && $0 % 3 == 0 }\nprint(divisibleBy2And3 ?? \"none\")\n// Prints \"6\"\n\n\nThe predicate executes each time the asynchronous sequence produces an element, until either the predicate finds a match or the sequence ends.\n\nSee Also\nFinding Elements\nfunc contains(where: (HKStatisticsCollectionQueryDescriptor.Result) -> Bool) -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains an element that satisfies the given predicate.\nfunc allSatisfy((HKStatisticsCollectionQueryDescriptor.Result) -> Bool) -> Bool\nReturns a Boolean value that indicates whether all elements produced by the asynchronous sequence satisfy the given predicate.\nfunc max(by: (HKStatisticsCollectionQueryDescriptor.Result, HKStatisticsCollectionQueryDescriptor.Result) -> Bool) -> HKStatisticsCollectionQueryDescriptor.Result?\nReturns the maximum element in the asynchronous sequence, using the given predicate as the comparison between elements.\nfunc min(by: (HKStatisticsCollectionQueryDescriptor.Result, HKStatisticsCollectionQueryDescriptor.Result) -> Bool) -> HKStatisticsCollectionQueryDescriptor.Result?\nReturns the minimum element in the asynchronous sequence, using the given predicate as the comparison between elements."
  },
  {
    "title": "allSatisfy(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkstatisticscollectionquerydescriptor/results/3916564-allsatisfy",
    "html": "Parameters\npredicate\n\nA closure that takes an element of the asynchronous sequence as its argument and returns a Boolean value that indicates whether the passed element satisfies a condition.\n\nReturn Value\n\ntrue if the sequence contains only elements that satisfy predicate; otherwise, false.\n\nDiscussion\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 10. The allSatisfy(_:) method checks to see whether all elements produced by the sequence are less than 10.\n\nlet allLessThanTen = await Counter(howHigh: 10)\n    .allSatisfy { $0 < 10 }\nprint(allLessThanTen)\n// Prints \"false\"\n\n\nThe predicate executes each time the asynchronous sequence produces an element, until either the predicate returns false or the sequence ends.\n\nIf the asynchronous sequence is empty, this method returns true.\n\nSee Also\nFinding Elements\nfunc contains(where: (HKStatisticsCollectionQueryDescriptor.Result) -> Bool) -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains an element that satisfies the given predicate.\nfunc first(where: (HKStatisticsCollectionQueryDescriptor.Result) -> Bool) -> HKStatisticsCollectionQueryDescriptor.Result?\nReturns the first element of the sequence that satisfies the given predicate.\nfunc max(by: (HKStatisticsCollectionQueryDescriptor.Result, HKStatisticsCollectionQueryDescriptor.Result) -> Bool) -> HKStatisticsCollectionQueryDescriptor.Result?\nReturns the maximum element in the asynchronous sequence, using the given predicate as the comparison between elements.\nfunc min(by: (HKStatisticsCollectionQueryDescriptor.Result, HKStatisticsCollectionQueryDescriptor.Result) -> Bool) -> HKStatisticsCollectionQueryDescriptor.Result?\nReturns the minimum element in the asynchronous sequence, using the given predicate as the comparison between elements."
  },
  {
    "title": "min(by:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkstatisticscollectionquerydescriptor/results/3916591-min",
    "html": "Parameters\nareInIncreasingOrder\n\nA predicate that returns true if its first argument should be ordered before its second argument; otherwise, false.\n\nReturn Value\n\nThe sequence’s minimum element, according to areInIncreasingOrder. If the sequence has no elements, returns nil.\n\nDiscussion\n\nUse this method when the asynchronous sequence’s values don’t conform to Comparable, or when you want to apply a custom ordering to the sequence.\n\nThe predicate must be a strict weak ordering over the elements. That is, for any elements a, b, and c, the following conditions must hold:\n\nareInIncreasingOrder(a, a) is always false. (Irreflexivity)\n\nIf areInIncreasingOrder(a, b) and areInIncreasingOrder(b, c) are both true, then areInIncreasingOrder(a, c) is also true. (Transitive comparability)\n\nTwo elements are incomparable if neither is ordered before the other according to the predicate. If a and b are incomparable, and b and c are incomparable, then a and c are also incomparable. (Transitive incomparability)\n\nThe following example uses an enumeration of playing cards ranks, Rank, which ranges from ace (low) to king (high). An asynchronous sequence called RankCounter produces all elements of the array. The predicate provided to the min(by:) method sorts ranks based on their rawValue:\n\nenum Rank: Int {\n    case ace = 1, two, three, four, five, six, seven, eight, nine, ten, jack, queen, king\n}\n\n\nlet min = await RankCounter()\n    .min { $0.rawValue < $1.rawValue }\nprint(min ?? \"none\")\n// Prints \"ace\"\n\nSee Also\nFinding Elements\nfunc contains(where: (HKStatisticsCollectionQueryDescriptor.Result) -> Bool) -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains an element that satisfies the given predicate.\nfunc allSatisfy((HKStatisticsCollectionQueryDescriptor.Result) -> Bool) -> Bool\nReturns a Boolean value that indicates whether all elements produced by the asynchronous sequence satisfy the given predicate.\nfunc first(where: (HKStatisticsCollectionQueryDescriptor.Result) -> Bool) -> HKStatisticsCollectionQueryDescriptor.Result?\nReturns the first element of the sequence that satisfies the given predicate.\nfunc max(by: (HKStatisticsCollectionQueryDescriptor.Result, HKStatisticsCollectionQueryDescriptor.Result) -> Bool) -> HKStatisticsCollectionQueryDescriptor.Result?\nReturns the maximum element in the asynchronous sequence, using the given predicate as the comparison between elements."
  },
  {
    "title": "dropFirst(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkstatisticscollectionquerydescriptor/results/3916574-dropfirst",
    "html": "Parameters\ncount\n\nThe number of elements to drop from the beginning of the sequence. count must be greater than or equal to zero.\n\nReturn Value\n\nAn asynchronous sequence that drops the first count elements from the base sequence.\n\nDiscussion\n\nUse dropFirst(_:) when you want to drop the first n elements from the base sequence and pass through the remaining elements.\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 10. The dropFirst(_:) method causes the modified sequence to ignore the values 1 through 3, and instead emit 4 through 10:\n\nfor await number in Counter(howHigh: 10).dropFirst(3) {\n    print(number, terminator: \" \")\n}\n// Prints \"4 5 6 7 8 9 10 \"\n\n\nIf the number of elements to drop exceeds the number of elements in the sequence, the result is an empty sequence.\n\nSee Also\nExcluding Elements\nfunc drop(while: (HKStatisticsCollectionQueryDescriptor.Result) -> Bool) -> AsyncDropWhileSequence<HKStatisticsCollectionQueryDescriptor.Results>\nOmits elements from the base asynchronous sequence until a given closure returns false, after which it passes through all remaining elements.\nfunc filter((HKStatisticsCollectionQueryDescriptor.Result) -> Bool) -> AsyncFilterSequence<HKStatisticsCollectionQueryDescriptor.Results>\nCreates an asynchronous sequence that contains, in order, the elements of the base sequence that satisfy the given predicate."
  },
  {
    "title": "map(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkstatisticscollectionquerydescriptor/results/3916585-map",
    "html": "Parameters\ntransform\n\nA mapping closure. transform accepts an element of this sequence as its parameter and returns a transformed value of the same or of a different type.\n\nReturn Value\n\nAn asynchronous sequence that contains, in order, the elements produced by the transform closure.\n\nDiscussion\n\nUse the map(_:) method to transform every element received from a base asynchronous sequence. Typically, you use this to transform from one type of element to another.\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 5. The closure provided to the map(_:) method takes each Int and looks up a corresponding String from a romanNumeralDict dictionary. This means the outer for await in loop iterates over String instances instead of the underlying Int values that Counter produces:\n\nlet romanNumeralDict: [Int: String] =\n    [1: \"I\", 2: \"II\", 3: \"III\", 5: \"V\"]\n\n\nlet stream = Counter(howHigh: 5)\n    .map { romanNumeralDict[$0] ?? \"(unknown)\" }\nfor await numeral in stream {\n    print(numeral, terminator: \" \")\n}\n// Prints \"I II III (unknown) V \"\n\nSee Also\nTransforming a Sequence\nfunc map<Transformed>((HKStatisticsCollectionQueryDescriptor.Result) -> Transformed) -> AsyncThrowingMapSequence<HKStatisticsCollectionQueryDescriptor.Results, Transformed>\nCreates an asynchronous sequence that maps the given error-throwing closure over the asynchronous sequence’s elements.\nfunc reduce<Result>(Result, (Result, HKStatisticsCollectionQueryDescriptor.Result) -> Result) -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure.\nfunc reduce<Result>(into: Result, (inout Result, HKStatisticsCollectionQueryDescriptor.Result) -> Void) -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure, given a mutable initial value.\nfunc compactMap<ElementOfResult>((HKStatisticsCollectionQueryDescriptor.Result) -> ElementOfResult?) -> AsyncCompactMapSequence<HKStatisticsCollectionQueryDescriptor.Results, ElementOfResult>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements, omitting results that don’t return a value.\nfunc compactMap<ElementOfResult>((HKStatisticsCollectionQueryDescriptor.Result) -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<HKStatisticsCollectionQueryDescriptor.Results, ElementOfResult>\nCreates an asynchronous sequence that maps an error-throwing closure over the base sequence’s elements, omitting results that don’t return a value.\nfunc flatMap<SegmentOfResult>((HKStatisticsCollectionQueryDescriptor.Result) -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<HKStatisticsCollectionQueryDescriptor.Results, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given error-throwing transformation with each element of this sequence.\nfunc flatMap<SegmentOfResult>((HKStatisticsCollectionQueryDescriptor.Result) -> SegmentOfResult) -> AsyncFlatMapSequence<HKStatisticsCollectionQueryDescriptor.Results, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given transformation with each element of this sequence."
  },
  {
    "title": "prefix(while:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkstatisticscollectionquerydescriptor/results/3916595-prefix",
    "html": "Parameters\npredicate\n\nA closure that takes an element as a parameter and returns a Boolean value indicating whether the element should be included in the modified sequence.\n\nReturn Value\n\nAn asynchronous sequence of the initial, consecutive elements that satisfy predicate.\n\nDiscussion\n\nUse prefix(while:) to produce values while elements from the base sequence meet a condition you specify. The modified sequence ends when the predicate closure returns false.\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 10. The prefix(while:) method causes the modified sequence to pass along values so long as they aren’t divisible by 2 and 3. Upon reaching 6, the sequence ends:\n\nlet stream = Counter(howHigh: 10)\n    .prefix { $0 % 2 != 0 || $0 % 3 != 0 }\nfor try await number in stream {\n    print(number, terminator: \" \")\n}\n// Prints \"1 2 3 4 5 \"\n\nSee Also\nSelecting Elements\nfunc prefix(Int) -> AsyncPrefixSequence<HKStatisticsCollectionQueryDescriptor.Results>\nReturns an asynchronous sequence, up to the specified maximum length, containing the initial elements of the base asynchronous sequence."
  },
  {
    "title": "map(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkstatisticscollectionquerydescriptor/results/3916587-map",
    "html": "Parameters\ntransform\n\nA mapping closure. transform accepts an element of this sequence as its parameter and returns a transformed value of the same or of a different type. transform can also throw an error, which ends the transformed sequence.\n\nReturn Value\n\nAn asynchronous sequence that contains, in order, the elements produced by the transform closure.\n\nDiscussion\n\nUse the map(_:) method to transform every element received from a base asynchronous sequence. Typically, you use this to transform from one type of element to another.\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 5. The closure provided to the map(_:) method takes each Int and looks up a corresponding String from a romanNumeralDict dictionary. This means the outer for await in loop iterates over String instances instead of the underlying Int values that Counter produces. Also, the dictionary doesn’t provide a key for 4, and the closure throws an error for any key it can’t look up, so receiving this value from Counter ends the modified sequence with an error.\n\nlet romanNumeralDict: [Int: String] =\n    [1: \"I\", 2: \"II\", 3: \"III\", 5: \"V\"]\n\n\ndo {\n    let stream = Counter(howHigh: 5)\n        .map { (value) throws -> String in\n            guard let roman = romanNumeralDict[value] else {\n                throw MyError()\n            }\n            return roman\n        }\n    for try await numeral in stream {\n        print(numeral, terminator: \" \")\n    }\n} catch {\n    print(\"Error: \\(error)\")\n}\n// Prints \"I II III Error: MyError() \"\n\nSee Also\nTransforming a Sequence\nfunc map<Transformed>((HKStatisticsCollectionQueryDescriptor.Result) -> Transformed) -> AsyncMapSequence<HKStatisticsCollectionQueryDescriptor.Results, Transformed>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements.\nfunc reduce<Result>(Result, (Result, HKStatisticsCollectionQueryDescriptor.Result) -> Result) -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure.\nfunc reduce<Result>(into: Result, (inout Result, HKStatisticsCollectionQueryDescriptor.Result) -> Void) -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure, given a mutable initial value.\nfunc compactMap<ElementOfResult>((HKStatisticsCollectionQueryDescriptor.Result) -> ElementOfResult?) -> AsyncCompactMapSequence<HKStatisticsCollectionQueryDescriptor.Results, ElementOfResult>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements, omitting results that don’t return a value.\nfunc compactMap<ElementOfResult>((HKStatisticsCollectionQueryDescriptor.Result) -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<HKStatisticsCollectionQueryDescriptor.Results, ElementOfResult>\nCreates an asynchronous sequence that maps an error-throwing closure over the base sequence’s elements, omitting results that don’t return a value.\nfunc flatMap<SegmentOfResult>((HKStatisticsCollectionQueryDescriptor.Result) -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<HKStatisticsCollectionQueryDescriptor.Results, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given error-throwing transformation with each element of this sequence.\nfunc flatMap<SegmentOfResult>((HKStatisticsCollectionQueryDescriptor.Result) -> SegmentOfResult) -> AsyncFlatMapSequence<HKStatisticsCollectionQueryDescriptor.Results, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given transformation with each element of this sequence."
  },
  {
    "title": "filter(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkstatisticscollectionquerydescriptor/results/3916576-filter",
    "html": "Parameters\nisIncluded\n\nA closure that takes an element of the asynchronous sequence as its argument and returns a Boolean value that indicates whether to include the element in the filtered sequence.\n\nReturn Value\n\nAn asynchronous sequence that contains, in order, the elements of the base sequence that satisfy the given predicate.\n\nDiscussion\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 10. The filter(_:) method returns true for even values and false for odd values, thereby filtering out the odd values:\n\nlet stream = Counter(howHigh: 10)\n    .filter { $0 % 2 == 0 }\nfor await number in stream {\n    print(number, terminator: \" \")\n}\n// Prints \"2 4 6 8 10 \"\n\nSee Also\nExcluding Elements\nfunc drop(while: (HKStatisticsCollectionQueryDescriptor.Result) -> Bool) -> AsyncDropWhileSequence<HKStatisticsCollectionQueryDescriptor.Results>\nOmits elements from the base asynchronous sequence until a given closure returns false, after which it passes through all remaining elements.\nfunc dropFirst(Int) -> AsyncDropFirstSequence<HKStatisticsCollectionQueryDescriptor.Results>\nOmits a specified number of elements from the base asynchronous sequence, then passes through all remaining elements."
  },
  {
    "title": "HKCategoryValueOvulationTestResult.negative | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkcategoryvalueovulationtestresult/negative",
    "html": "See Also\nOvulation Test Results\ncase luteinizingHormoneSurge\nThe ovulation test detected a surge in the luteinizing hormone.\ncase indeterminate\nThe ovulation test is inconclusive.\ncase estrogenSurge\nThe ovulation test detected a surge in estrogen.\nstatic var positive: HKCategoryValueOvulationTestResult\nThe ovulation test is positive."
  },
  {
    "title": "HKCategoryValueAppleWalkingSteadinessEvent.repeatLow | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkcategoryvalueapplewalkingsteadinessevent/repeatlow",
    "html": "See Also\nSteadiness Values\ncase initialLow\nThe user received a below-normal steadiness score for their gait while walking.\ncase initialVeryLow\nThe user received a steadiness score for their gait while walking that was considerably below normal.\ncase repeatVeryLow\nThe user’s considerably below-normal score persists over a significant period of time."
  },
  {
    "title": "HKCategoryValueAppleWalkingSteadinessEvent.repeatVeryLow | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkcategoryvalueapplewalkingsteadinessevent/repeatverylow",
    "html": "See Also\nSteadiness Values\ncase initialLow\nThe user received a below-normal steadiness score for their gait while walking.\ncase initialVeryLow\nThe user received a steadiness score for their gait while walking that was considerably below normal.\ncase repeatLow\nThe user’s below-normal score persists over a significant period of time."
  },
  {
    "title": "HKCategoryValueOvulationTestResult.luteinizingHormoneSurge | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkcategoryvalueovulationtestresult/luteinizinghormonesurge",
    "html": "See Also\nOvulation Test Results\ncase negative\nThe ovulation test is negative.\ncase indeterminate\nThe ovulation test is inconclusive.\ncase estrogenSurge\nThe ovulation test detected a surge in estrogen.\nstatic var positive: HKCategoryValueOvulationTestResult\nThe ovulation test is positive."
  },
  {
    "title": "HKCategoryValueAppetiteChanges.unspecified | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkcategoryvalueappetitechanges/unspecified",
    "html": "See Also\nAppetite Changes\ncase decreased\nThe user’s appetite decreased.\ncase increased\nThe user’s appetite increased.\ncase noChange\nNo change in the user’s appetite."
  },
  {
    "title": "HKCategoryValueOvulationTestResult.indeterminate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkcategoryvalueovulationtestresult/indeterminate",
    "html": "See Also\nOvulation Test Results\ncase negative\nThe ovulation test is negative.\ncase luteinizingHormoneSurge\nThe ovulation test detected a surge in the luteinizing hormone.\ncase estrogenSurge\nThe ovulation test detected a surge in estrogen.\nstatic var positive: HKCategoryValueOvulationTestResult\nThe ovulation test is positive."
  },
  {
    "title": "HKCategoryValueAppleWalkingSteadinessEvent.initialLow | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkcategoryvalueapplewalkingsteadinessevent/initiallow",
    "html": "See Also\nSteadiness Values\ncase initialVeryLow\nThe user received a steadiness score for their gait while walking that was considerably below normal.\ncase repeatLow\nThe user’s below-normal score persists over a significant period of time.\ncase repeatVeryLow\nThe user’s considerably below-normal score persists over a significant period of time."
  },
  {
    "title": "HKCategoryValueOvulationTestResult.estrogenSurge | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkcategoryvalueovulationtestresult/estrogensurge",
    "html": "See Also\nOvulation Test Results\ncase negative\nThe ovulation test is negative.\ncase luteinizingHormoneSurge\nThe ovulation test detected a surge in the luteinizing hormone.\ncase indeterminate\nThe ovulation test is inconclusive.\nstatic var positive: HKCategoryValueOvulationTestResult\nThe ovulation test is positive."
  },
  {
    "title": "HKPredicateKeyPathDevice | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkpredicatekeypathdevice",
    "html": "See Also\nDevice and source keys\nlet HKPredicateKeyPathSource: String\nThe key path for accessing the object’s source inside a predicate format string.\nlet HKPredicateKeyPathSourceRevision: String\nThe key path for accessing the object’s source revision inside a predicate format string."
  },
  {
    "title": "positive | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkcategoryvalueovulationtestresult/1615413-positive",
    "html": "Deprecated\n\nUse HKCategoryValueOvulationTestResult.luteinizingHormoneSurge instead.\n\nSee Also\nOvulation Test Results\ncase negative\nThe ovulation test is negative.\ncase luteinizingHormoneSurge\nThe ovulation test detected a surge in the luteinizing hormone.\ncase indeterminate\nThe ovulation test is inconclusive.\ncase estrogenSurge\nThe ovulation test detected a surge in estrogen."
  },
  {
    "title": "HKBloodGlucoseMealTime | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkbloodglucosemealtime",
    "html": "Topics\nRelative Meal Times\ncase postprandial\nA blood glucose sample taken just after eating a meal.\ncase preprandial\nA blood glucose sample taken just before eating a meal.\nRelationships\nConforms To\nSendable"
  },
  {
    "title": "HKCategoryValueAppetiteChanges.decreased | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkcategoryvalueappetitechanges/decreased",
    "html": "See Also\nAppetite Changes\ncase increased\nThe user’s appetite increased.\ncase noChange\nNo change in the user’s appetite.\ncase unspecified\nAn unspecified change in appetite."
  },
  {
    "title": "HKCategoryValueAppetiteChanges.noChange | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkcategoryvalueappetitechanges/nochange",
    "html": "See Also\nAppetite Changes\ncase decreased\nThe user’s appetite decreased.\ncase increased\nThe user’s appetite increased.\ncase unspecified\nAn unspecified change in appetite."
  },
  {
    "title": "HKCategoryValueContraceptive.injection | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkcategoryvaluecontraceptive/injection",
    "html": "See Also\nContraceptive Types\ncase unspecified\nAn unspecified type of contraceptive.\ncase implant\nA contraceptive implant.\ncase intrauterineDevice\nAn intrauterine device (IUD).\ncase intravaginalRing\nA contraceptive intravaginal ring.\ncase oral\nAn oral contraceptive.\ncase patch\nA contraceptive patch."
  },
  {
    "title": "makeAsyncIterator() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkactivitysummaryquerydescriptor/results/3916232-makeasynciterator",
    "html": "Relationships\nFrom Protocol\nAsyncSequence\nSee Also\nCreating an Iterator\nstruct HKActivitySummaryQueryDescriptor.Results.Iterator\nAn iterator for accessing active summary results.\ntypealias HKActivitySummaryQueryDescriptor.Results.AsyncIterator\nAn iterator that returns results from an asynchronous sequence.\ntypealias HKActivitySummaryQueryDescriptor.Results.Element\nA set of results that the active summary query returns."
  },
  {
    "title": "HKAppleECGAlgorithmVersion.version2 | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkappleecgalgorithmversion/version2",
    "html": "Discussion\n\nVersion 2 of the ECG algorithm includes the following changes:\n\nThe ECG app can check for atrial fibrillation for heart rates up to 150 BPM.\n\nThe ECG app now distinguishes between poor recordings and inconclusive results.\n\nApple Watch reports a poor recording when circumstances cause the watch to collect insufficient or inaccurate data, such as when the user wears the watch too loosely on their wrist, or if the user’s arm isn’t resting on a firm surface. The user can make another attempt at measuring their ECG after fixing the issue. An inconclusive reading indicates the system can’t interpret the data, for instance if the user wears a pacemaker, or if they exhibit an arrhythmia the app doesn’t recognize.\n\nSee Also\nVersions\ncase version1\nThe version 1 algorithm."
  },
  {
    "title": "reduce(into:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkactivitysummaryquerydescriptor/results/3916247-reduce",
    "html": "Parameters\ninitialResult\n\nThe value to use as the initial accumulating value. The nextPartialResult closure receives initialResult the first time the closure executes.\n\nnextPartialResult\n\nA closure that combines an accumulating value and an element of the asynchronous sequence into a new accumulating value, for use in the next call of the nextPartialResult closure or returned to the caller.\n\nReturn Value\n\nThe final accumulated value. If the sequence has no elements, the result is initialResult.\n\nDiscussion\n\nUse the reduce(into:_:) method to produce a single value from the elements of an entire sequence. For example, you can use this method on a sequence of numbers to find their sum or product.\n\nThe nextPartialResult closure executes sequentially with an accumulating value initialized to initialResult and each element of the sequence.\n\nPrefer this method over reduce(_:_:) for efficiency when the result is a copy-on-write type, for example an Array or Dictionary.\n\nSee Also\nTransforming a Sequence\nfunc map<Transformed>(([HKActivitySummary]) -> Transformed) -> AsyncMapSequence<HKActivitySummaryQueryDescriptor.Results, Transformed>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements.\nfunc map<Transformed>(([HKActivitySummary]) -> Transformed) -> AsyncThrowingMapSequence<HKActivitySummaryQueryDescriptor.Results, Transformed>\nCreates an asynchronous sequence that maps the given error-throwing closure over the asynchronous sequence’s elements.\nfunc reduce<Result>(Result, (Result, [HKActivitySummary]) -> Result) -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure.\nfunc compactMap<ElementOfResult>(([HKActivitySummary]) -> ElementOfResult?) -> AsyncCompactMapSequence<HKActivitySummaryQueryDescriptor.Results, ElementOfResult>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements, omitting results that don’t return a value.\nfunc compactMap<ElementOfResult>(([HKActivitySummary]) -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<HKActivitySummaryQueryDescriptor.Results, ElementOfResult>\nCreates an asynchronous sequence that maps an error-throwing closure over the base sequence’s elements, omitting results that don’t return a value.\nfunc flatMap<SegmentOfResult>(([HKActivitySummary]) -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<HKActivitySummaryQueryDescriptor.Results, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given error-throwing transformation with each element of this sequence.\nfunc flatMap<SegmentOfResult>(([HKActivitySummary]) -> SegmentOfResult) -> AsyncFlatMapSequence<HKActivitySummaryQueryDescriptor.Results, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given transformation with each element of this sequence."
  },
  {
    "title": "min(by:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkactivitysummaryquerydescriptor/results/3916239-min",
    "html": "Parameters\nareInIncreasingOrder\n\nA predicate that returns true if its first argument should be ordered before its second argument; otherwise, false.\n\nReturn Value\n\nThe sequence’s minimum element, according to areInIncreasingOrder. If the sequence has no elements, returns nil.\n\nDiscussion\n\nUse this method when the asynchronous sequence’s values don’t conform to Comparable, or when you want to apply a custom ordering to the sequence.\n\nThe predicate must be a strict weak ordering over the elements. That is, for any elements a, b, and c, the following conditions must hold:\n\nareInIncreasingOrder(a, a) is always false. (Irreflexivity)\n\nIf areInIncreasingOrder(a, b) and areInIncreasingOrder(b, c) are both true, then areInIncreasingOrder(a, c) is also true. (Transitive comparability)\n\nTwo elements are incomparable if neither is ordered before the other according to the predicate. If a and b are incomparable, and b and c are incomparable, then a and c are also incomparable. (Transitive incomparability)\n\nThe following example uses an enumeration of playing cards ranks, Rank, which ranges from ace (low) to king (high). An asynchronous sequence called RankCounter produces all elements of the array. The predicate provided to the min(by:) method sorts ranks based on their rawValue:\n\nenum Rank: Int {\n    case ace = 1, two, three, four, five, six, seven, eight, nine, ten, jack, queen, king\n}\n\n\nlet min = await RankCounter()\n    .min { $0.rawValue < $1.rawValue }\nprint(min ?? \"none\")\n// Prints \"ace\"\n\nSee Also\nFinding Elements\nfunc contains(where: ([HKActivitySummary]) -> Bool) -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains an element that satisfies the given predicate.\nfunc contains([HKActivitySummary]) -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains the given element.\nfunc allSatisfy(([HKActivitySummary]) -> Bool) -> Bool\nReturns a Boolean value that indicates whether all elements produced by the asynchronous sequence satisfy the given predicate.\nfunc first(where: ([HKActivitySummary]) -> Bool) -> [HKActivitySummary]?\nReturns the first element of the sequence that satisfies the given predicate.\nfunc max(by: ([HKActivitySummary], [HKActivitySummary]) -> Bool) -> [HKActivitySummary]?\nReturns the maximum element in the asynchronous sequence, using the given predicate as the comparison between elements."
  },
  {
    "title": "flatMap(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkactivitysummaryquerydescriptor/results/3916228-flatmap",
    "html": "Parameters\ntransform\n\nAn error-throwing mapping closure. transform accepts an element of this sequence as its parameter and returns an AsyncSequence. If transform throws an error, the sequence ends.\n\nReturn Value\n\nA single, flattened asynchronous sequence that contains all elements in all the asynchronous sequences produced by transform. The sequence ends either when the last sequence created from the last element from base sequence ends, or when transform throws an error.\n\nDiscussion\n\nUse this method to receive a single-level asynchronous sequence when your transformation produces an asynchronous sequence for each element.\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 5. The transforming closure takes the received Int and returns a new Counter that counts that high. For example, when the transform receives 3 from the base sequence, it creates a new Counter that produces the values 1, 2, and 3. The flatMap(_:) method “flattens” the resulting sequence-of-sequences into a single AsyncSequence. However, when the closure receives 4, it throws an error, terminating the sequence.\n\ndo {\n    let stream = Counter(howHigh: 5)\n        .flatMap { (value) -> Counter in\n            if value == 4 {\n                throw MyError()\n            }\n            return Counter(howHigh: value)\n        }\n    for try await number in stream {\n        print(number, terminator: \" \")\n    }\n} catch {\n    print(error)\n}\n// Prints \"1 1 2 1 2 3 MyError() \"\n\nSee Also\nTransforming a Sequence\nfunc map<Transformed>(([HKActivitySummary]) -> Transformed) -> AsyncMapSequence<HKActivitySummaryQueryDescriptor.Results, Transformed>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements.\nfunc map<Transformed>(([HKActivitySummary]) -> Transformed) -> AsyncThrowingMapSequence<HKActivitySummaryQueryDescriptor.Results, Transformed>\nCreates an asynchronous sequence that maps the given error-throwing closure over the asynchronous sequence’s elements.\nfunc reduce<Result>(Result, (Result, [HKActivitySummary]) -> Result) -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure.\nfunc reduce<Result>(into: Result, (inout Result, [HKActivitySummary]) -> Void) -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure, given a mutable initial value.\nfunc compactMap<ElementOfResult>(([HKActivitySummary]) -> ElementOfResult?) -> AsyncCompactMapSequence<HKActivitySummaryQueryDescriptor.Results, ElementOfResult>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements, omitting results that don’t return a value.\nfunc compactMap<ElementOfResult>(([HKActivitySummary]) -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<HKActivitySummaryQueryDescriptor.Results, ElementOfResult>\nCreates an asynchronous sequence that maps an error-throwing closure over the base sequence’s elements, omitting results that don’t return a value.\nfunc flatMap<SegmentOfResult>(([HKActivitySummary]) -> SegmentOfResult) -> AsyncFlatMapSequence<HKActivitySummaryQueryDescriptor.Results, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given transformation with each element of this sequence."
  },
  {
    "title": "prefix(while:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkactivitysummaryquerydescriptor/results/3916243-prefix",
    "html": "Parameters\npredicate\n\nA closure that takes an element as a parameter and returns a Boolean value indicating whether the element should be included in the modified sequence.\n\nReturn Value\n\nAn asynchronous sequence of the initial, consecutive elements that satisfy predicate.\n\nDiscussion\n\nUse prefix(while:) to produce values while elements from the base sequence meet a condition you specify. The modified sequence ends when the predicate closure returns false.\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 10. The prefix(while:) method causes the modified sequence to pass along values so long as they aren’t divisible by 2 and 3. Upon reaching 6, the sequence ends:\n\nlet stream = Counter(howHigh: 10)\n    .prefix { $0 % 2 != 0 || $0 % 3 != 0 }\nfor try await number in stream {\n    print(number, terminator: \" \")\n}\n// Prints \"1 2 3 4 5 \"\n\nSee Also\nSelecting Elements\nfunc prefix(Int) -> AsyncPrefixSequence<HKActivitySummaryQueryDescriptor.Results>\nReturns an asynchronous sequence, up to the specified maximum length, containing the initial elements of the base asynchronous sequence."
  },
  {
    "title": "drop(while:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkactivitysummaryquerydescriptor/results/3916220-drop",
    "html": "Parameters\npredicate\n\nA closure that takes an element as a parameter and returns a Boolean value indicating whether to drop the element from the modified sequence.\n\nReturn Value\n\nAn asynchronous sequence that skips over values from the base sequence until the provided closure returns false.\n\nDiscussion\n\nUse drop(while:) to omit elements from an asynchronous sequence until the element received meets a condition you specify.\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 10. The drop(while:) method causes the modified sequence to ignore received values until it encounters one that is divisible by 3:\n\nlet stream = Counter(howHigh: 10)\n    .drop { $0 % 3 != 0 }\nfor await number in stream {\n    print(number, terminator: \" \")\n}\n// Prints \"3 4 5 6 7 8 9 10 \"\n\n\nAfter the predicate returns false, the sequence never executes it again, and from then on the sequence passes through elements from its underlying sequence as-is.\n\nSee Also\nExcluding Elements\nfunc dropFirst(Int) -> AsyncDropFirstSequence<HKActivitySummaryQueryDescriptor.Results>\nOmits a specified number of elements from the base asynchronous sequence, then passes through all remaining elements.\nfunc filter(([HKActivitySummary]) -> Bool) -> AsyncFilterSequence<HKActivitySummaryQueryDescriptor.Results>\nCreates an asynchronous sequence that contains, in order, the elements of the base sequence that satisfy the given predicate."
  },
  {
    "title": "map(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkactivitysummaryquerydescriptor/results/3916233-map",
    "html": "Parameters\ntransform\n\nA mapping closure. transform accepts an element of this sequence as its parameter and returns a transformed value of the same or of a different type.\n\nReturn Value\n\nAn asynchronous sequence that contains, in order, the elements produced by the transform closure.\n\nDiscussion\n\nUse the map(_:) method to transform every element received from a base asynchronous sequence. Typically, you use this to transform from one type of element to another.\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 5. The closure provided to the map(_:) method takes each Int and looks up a corresponding String from a romanNumeralDict dictionary. This means the outer for await in loop iterates over String instances instead of the underlying Int values that Counter produces:\n\nlet romanNumeralDict: [Int: String] =\n    [1: \"I\", 2: \"II\", 3: \"III\", 5: \"V\"]\n\n\nlet stream = Counter(howHigh: 5)\n    .map { romanNumeralDict[$0] ?? \"(unknown)\" }\nfor await numeral in stream {\n    print(numeral, terminator: \" \")\n}\n// Prints \"I II III (unknown) V \"\n\nSee Also\nTransforming a Sequence\nfunc map<Transformed>(([HKActivitySummary]) -> Transformed) -> AsyncThrowingMapSequence<HKActivitySummaryQueryDescriptor.Results, Transformed>\nCreates an asynchronous sequence that maps the given error-throwing closure over the asynchronous sequence’s elements.\nfunc reduce<Result>(Result, (Result, [HKActivitySummary]) -> Result) -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure.\nfunc reduce<Result>(into: Result, (inout Result, [HKActivitySummary]) -> Void) -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure, given a mutable initial value.\nfunc compactMap<ElementOfResult>(([HKActivitySummary]) -> ElementOfResult?) -> AsyncCompactMapSequence<HKActivitySummaryQueryDescriptor.Results, ElementOfResult>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements, omitting results that don’t return a value.\nfunc compactMap<ElementOfResult>(([HKActivitySummary]) -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<HKActivitySummaryQueryDescriptor.Results, ElementOfResult>\nCreates an asynchronous sequence that maps an error-throwing closure over the base sequence’s elements, omitting results that don’t return a value.\nfunc flatMap<SegmentOfResult>(([HKActivitySummary]) -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<HKActivitySummaryQueryDescriptor.Results, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given error-throwing transformation with each element of this sequence.\nfunc flatMap<SegmentOfResult>(([HKActivitySummary]) -> SegmentOfResult) -> AsyncFlatMapSequence<HKActivitySummaryQueryDescriptor.Results, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given transformation with each element of this sequence."
  },
  {
    "title": "filter(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkactivitysummaryquerydescriptor/results/3916224-filter",
    "html": "Parameters\nisIncluded\n\nA closure that takes an element of the asynchronous sequence as its argument and returns a Boolean value that indicates whether to include the element in the filtered sequence.\n\nReturn Value\n\nAn asynchronous sequence that contains, in order, the elements of the base sequence that satisfy the given predicate.\n\nDiscussion\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 10. The filter(_:) method returns true for even values and false for odd values, thereby filtering out the odd values:\n\nlet stream = Counter(howHigh: 10)\n    .filter { $0 % 2 == 0 }\nfor await number in stream {\n    print(number, terminator: \" \")\n}\n// Prints \"2 4 6 8 10 \"\n\nSee Also\nExcluding Elements\nfunc dropFirst(Int) -> AsyncDropFirstSequence<HKActivitySummaryQueryDescriptor.Results>\nOmits a specified number of elements from the base asynchronous sequence, then passes through all remaining elements.\nfunc drop(while: ([HKActivitySummary]) -> Bool) -> AsyncDropWhileSequence<HKActivitySummaryQueryDescriptor.Results>\nOmits elements from the base asynchronous sequence until a given closure returns false, after which it passes through all remaining elements."
  },
  {
    "title": "reduce(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkactivitysummaryquerydescriptor/results/3916245-reduce",
    "html": "Parameters\ninitialResult\n\nThe value to use as the initial accumulating value. The nextPartialResult closure receives initialResult the first time the closure runs.\n\nnextPartialResult\n\nA closure that combines an accumulating value and an element of the asynchronous sequence into a new accumulating value, for use in the next call of the nextPartialResult closure or returned to the caller.\n\nReturn Value\n\nThe final accumulated value. If the sequence has no elements, the result is initialResult.\n\nDiscussion\n\nUse the reduce(_:_:) method to produce a single value from the elements of an entire sequence. For example, you can use this method on an sequence of numbers to find their sum or product.\n\nThe nextPartialResult closure executes sequentially with an accumulating value initialized to initialResult and each element of the sequence.\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 4. The reduce(_:_:) method sums the values received from the asynchronous sequence.\n\nlet sum = await Counter(howHigh: 4)\n    .reduce(0) {\n        $0 + $1\n    }\nprint(sum)\n// Prints \"10\"\n\nSee Also\nTransforming a Sequence\nfunc map<Transformed>(([HKActivitySummary]) -> Transformed) -> AsyncMapSequence<HKActivitySummaryQueryDescriptor.Results, Transformed>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements.\nfunc map<Transformed>(([HKActivitySummary]) -> Transformed) -> AsyncThrowingMapSequence<HKActivitySummaryQueryDescriptor.Results, Transformed>\nCreates an asynchronous sequence that maps the given error-throwing closure over the asynchronous sequence’s elements.\nfunc reduce<Result>(into: Result, (inout Result, [HKActivitySummary]) -> Void) -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure, given a mutable initial value.\nfunc compactMap<ElementOfResult>(([HKActivitySummary]) -> ElementOfResult?) -> AsyncCompactMapSequence<HKActivitySummaryQueryDescriptor.Results, ElementOfResult>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements, omitting results that don’t return a value.\nfunc compactMap<ElementOfResult>(([HKActivitySummary]) -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<HKActivitySummaryQueryDescriptor.Results, ElementOfResult>\nCreates an asynchronous sequence that maps an error-throwing closure over the base sequence’s elements, omitting results that don’t return a value.\nfunc flatMap<SegmentOfResult>(([HKActivitySummary]) -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<HKActivitySummaryQueryDescriptor.Results, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given error-throwing transformation with each element of this sequence.\nfunc flatMap<SegmentOfResult>(([HKActivitySummary]) -> SegmentOfResult) -> AsyncFlatMapSequence<HKActivitySummaryQueryDescriptor.Results, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given transformation with each element of this sequence."
  },
  {
    "title": "prefix(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkactivitysummaryquerydescriptor/results/3916241-prefix",
    "html": "Parameters\ncount\n\nThe maximum number of elements to return. The value of count must be greater than or equal to zero.\n\nReturn Value\n\nAn asynchronous sequence starting at the beginning of the base sequence with at most count elements.\n\nDiscussion\n\nUse prefix(_:) to reduce the number of elements produced by the asynchronous sequence.\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 10. The prefix(_:) method causes the modified sequence to pass through the first six values, then end.\n\nfor await number in Counter(howHigh: 10).prefix(6) {\n    print(number, terminator: \" \")\n}\n// Prints \"1 2 3 4 5 6 \"\n\n\nIf the count passed to prefix(_:) exceeds the number of elements in the base sequence, the result contains all of the elements in the sequence.\n\nSee Also\nSelecting Elements\nfunc prefix(while: ([HKActivitySummary]) -> Bool) -> AsyncPrefixWhileSequence<HKActivitySummaryQueryDescriptor.Results>\nReturns an asynchronous sequence, containing the initial, consecutive elements of the base sequence that satisfy the given predicate."
  },
  {
    "title": "map(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkactivitysummaryquerydescriptor/results/3916235-map",
    "html": "Parameters\ntransform\n\nA mapping closure. transform accepts an element of this sequence as its parameter and returns a transformed value of the same or of a different type. transform can also throw an error, which ends the transformed sequence.\n\nReturn Value\n\nAn asynchronous sequence that contains, in order, the elements produced by the transform closure.\n\nDiscussion\n\nUse the map(_:) method to transform every element received from a base asynchronous sequence. Typically, you use this to transform from one type of element to another.\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 5. The closure provided to the map(_:) method takes each Int and looks up a corresponding String from a romanNumeralDict dictionary. This means the outer for await in loop iterates over String instances instead of the underlying Int values that Counter produces. Also, the dictionary doesn’t provide a key for 4, and the closure throws an error for any key it can’t look up, so receiving this value from Counter ends the modified sequence with an error.\n\nlet romanNumeralDict: [Int: String] =\n    [1: \"I\", 2: \"II\", 3: \"III\", 5: \"V\"]\n\n\ndo {\n    let stream = Counter(howHigh: 5)\n        .map { (value) throws -> String in\n            guard let roman = romanNumeralDict[value] else {\n                throw MyError()\n            }\n            return roman\n        }\n    for try await numeral in stream {\n        print(numeral, terminator: \" \")\n    }\n} catch {\n    print(\"Error: \\(error)\")\n}\n// Prints \"I II III Error: MyError() \"\n\nSee Also\nTransforming a Sequence\nfunc map<Transformed>(([HKActivitySummary]) -> Transformed) -> AsyncMapSequence<HKActivitySummaryQueryDescriptor.Results, Transformed>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements.\nfunc reduce<Result>(Result, (Result, [HKActivitySummary]) -> Result) -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure.\nfunc reduce<Result>(into: Result, (inout Result, [HKActivitySummary]) -> Void) -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure, given a mutable initial value.\nfunc compactMap<ElementOfResult>(([HKActivitySummary]) -> ElementOfResult?) -> AsyncCompactMapSequence<HKActivitySummaryQueryDescriptor.Results, ElementOfResult>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements, omitting results that don’t return a value.\nfunc compactMap<ElementOfResult>(([HKActivitySummary]) -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<HKActivitySummaryQueryDescriptor.Results, ElementOfResult>\nCreates an asynchronous sequence that maps an error-throwing closure over the base sequence’s elements, omitting results that don’t return a value.\nfunc flatMap<SegmentOfResult>(([HKActivitySummary]) -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<HKActivitySummaryQueryDescriptor.Results, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given error-throwing transformation with each element of this sequence.\nfunc flatMap<SegmentOfResult>(([HKActivitySummary]) -> SegmentOfResult) -> AsyncFlatMapSequence<HKActivitySummaryQueryDescriptor.Results, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given transformation with each element of this sequence."
  },
  {
    "title": "compactMap(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkactivitysummaryquerydescriptor/results/3916214-compactmap",
    "html": "Parameters\ntransform\n\nAn error-throwing mapping closure. transform accepts an element of this sequence as its parameter and returns a transformed value of the same or of a different type. If transform throws an error, the sequence ends.\n\nReturn Value\n\nAn asynchronous sequence that contains, in order, the non-nil elements produced by the transform closure. The sequence ends either when the base sequence ends or when transform throws an error.\n\nDiscussion\n\nUse the compactMap(_:) method to transform every element received from a base asynchronous sequence, while also discarding any nil results from the closure. Typically, you use this to transform from one type of element to another.\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 5. The closure provided to the compactMap(_:) method takes each Int and looks up a corresponding String from a romanNumeralDict dictionary. Since there is no key for 4, the closure returns nil in this case, which compactMap(_:) omits from the transformed asynchronous sequence. When the value is 5, the closure throws MyError, terminating the sequence.\n\nlet romanNumeralDict: [Int: String] =\n    [1: \"I\", 2: \"II\", 3: \"III\", 5: \"V\"]\n\n\ndo {\n    let stream = Counter(howHigh: 5)\n        .compactMap { (value) throws -> String? in\n            if value == 5 {\n                throw MyError()\n            }\n            return romanNumeralDict[value]\n        }\n    for try await numeral in stream {\n        print(numeral, terminator: \" \")\n    }\n} catch {\n    print(\"Error: \\(error)\")\n}\n// Prints \"I II III Error: MyError() \"\n\nSee Also\nTransforming a Sequence\nfunc map<Transformed>(([HKActivitySummary]) -> Transformed) -> AsyncMapSequence<HKActivitySummaryQueryDescriptor.Results, Transformed>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements.\nfunc map<Transformed>(([HKActivitySummary]) -> Transformed) -> AsyncThrowingMapSequence<HKActivitySummaryQueryDescriptor.Results, Transformed>\nCreates an asynchronous sequence that maps the given error-throwing closure over the asynchronous sequence’s elements.\nfunc reduce<Result>(Result, (Result, [HKActivitySummary]) -> Result) -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure.\nfunc reduce<Result>(into: Result, (inout Result, [HKActivitySummary]) -> Void) -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure, given a mutable initial value.\nfunc compactMap<ElementOfResult>(([HKActivitySummary]) -> ElementOfResult?) -> AsyncCompactMapSequence<HKActivitySummaryQueryDescriptor.Results, ElementOfResult>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements, omitting results that don’t return a value.\nfunc flatMap<SegmentOfResult>(([HKActivitySummary]) -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<HKActivitySummaryQueryDescriptor.Results, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given error-throwing transformation with each element of this sequence.\nfunc flatMap<SegmentOfResult>(([HKActivitySummary]) -> SegmentOfResult) -> AsyncFlatMapSequence<HKActivitySummaryQueryDescriptor.Results, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given transformation with each element of this sequence."
  },
  {
    "title": "HKAppleWalkingSteadinessClassification.low | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkapplewalkingsteadinessclassification/low",
    "html": "See Also\nAccessing Classifications\ncase ok\nA classification indicating that the stability of the user’s gait is within the normal range.\ncase veryLow\nA classification indicating that the stability of the user’s gate is considerably below normal.\ntypealias HKAppleWalkingSteadinessClassification.AllCases\nA type representing an array of classifications.\nstatic var allCases: [HKAppleWalkingSteadinessClassification]\nAn array that contains all valid walking steadiness classifications."
  },
  {
    "title": "HKCategoryValuePregnancyTestResult.negative | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkcategoryvaluepregnancytestresult/negative",
    "html": "See Also\nTest Results\ncase positive\nThe test returned a positive result.\ncase indeterminate\nThe test was inconclusive."
  },
  {
    "title": "HKPredicateKeyPathSourceRevision | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkpredicatekeypathsourcerevision",
    "html": "See Also\nDevice and source keys\nlet HKPredicateKeyPathDevice: String\nThe key path for accessing the object’s device inside a predicate format string.\nlet HKPredicateKeyPathSource: String\nThe key path for accessing the object’s source inside a predicate format string."
  },
  {
    "title": "HKPredicateKeyPathWorkoutTotalFlightsClimbed | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkpredicatekeypathworkouttotalflightsclimbed",
    "html": "See Also\nWorkout keys\nlet HKPredicateKeyPathWorkout: String\nThe key path for accessing the object’s workout inside a predicate format string.\nlet HKPredicateKeyPathWorkoutType: String\nThe key path for accessing the workout’s type.\nlet HKPredicateKeyPathWorkoutDuration: String\nThe key path for accessing the workout’s duration.\nlet HKPredicateKeyPathWorkoutAverageQuantity: String\nThe key path for accessing workouts with a matching average quantity.\nlet HKPredicateKeyPathWorkoutMaximumQuantity: String\nThe key path for accessing workouts with a matching maximum quantity.\nlet HKPredicateKeyPathWorkoutMinimumQuantity: String\nThe key path for accessing workouts with a matching minimum quantity.\nlet HKPredicateKeyPathWorkoutSumQuantity: String\nThe key path for accessing workouts with a matching sum.\nlet HKPredicateKeyPathWorkoutTotalDistance: String\nThe key path for accessing the workout’s total distance.\nlet HKPredicateKeyPathWorkoutTotalEnergyBurned: String\nThe key path for accessing the workout’s total energy burned.\nlet HKPredicateKeyPathWorkoutTotalSwimmingStrokeCount: String\nThe key path for accessing the number of strokes during a swimming workout."
  },
  {
    "title": "HKPredicateKeyPathWorkoutTotalSwimmingStrokeCount | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkpredicatekeypathworkouttotalswimmingstrokecount",
    "html": "See Also\nWorkout keys\nlet HKPredicateKeyPathWorkout: String\nThe key path for accessing the object’s workout inside a predicate format string.\nlet HKPredicateKeyPathWorkoutType: String\nThe key path for accessing the workout’s type.\nlet HKPredicateKeyPathWorkoutDuration: String\nThe key path for accessing the workout’s duration.\nlet HKPredicateKeyPathWorkoutAverageQuantity: String\nThe key path for accessing workouts with a matching average quantity.\nlet HKPredicateKeyPathWorkoutMaximumQuantity: String\nThe key path for accessing workouts with a matching maximum quantity.\nlet HKPredicateKeyPathWorkoutMinimumQuantity: String\nThe key path for accessing workouts with a matching minimum quantity.\nlet HKPredicateKeyPathWorkoutSumQuantity: String\nThe key path for accessing workouts with a matching sum.\nlet HKPredicateKeyPathWorkoutTotalDistance: String\nThe key path for accessing the workout’s total distance.\nlet HKPredicateKeyPathWorkoutTotalEnergyBurned: String\nThe key path for accessing the workout’s total energy burned.\nlet HKPredicateKeyPathWorkoutTotalFlightsClimbed: String\nThe key path for accessing the total number of flights of stairs climbed during the workout."
  },
  {
    "title": "strictStartDate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkqueryoptions/1614766-strictstartdate",
    "html": "Discussion\n\nThe sample’s start time must be equal to or later than the target’s start time, and the sample’s start time must also be earlier than the target’s end time."
  },
  {
    "title": "HKElectrocardiogram.SymptomsStatus.present | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkelectrocardiogram/symptomsstatus/present",
    "html": "Discussion\n\nTo access the symptoms, query for the HKCategorySample samples associated with the electrocardiogram sample.\n\nSee Also\nStatus\ncase none\nThe user didn’t enter a symptom when they recorded the ECG.\ncase notSet"
  },
  {
    "title": "HKWorkoutSortIdentifierTotalFlightsClimbed | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkoutsortidentifiertotalflightsclimbed",
    "html": "See Also\nWorkout sort identifiers\nlet HKWorkoutSortIdentifierDuration: String\nA constant for sorting workouts based on their duration.\nlet HKWorkoutSortIdentifierTotalDistance: String\nA constant for sorting workouts based on their total distance.\nlet HKWorkoutSortIdentifierTotalEnergyBurned: String\nA constant for sorting workouts based on the total energy burned.\nlet HKWorkoutSortIdentifierTotalSwimmingStrokeCount: String\nA constant for sorting workouts based on the number of swimming strokes."
  },
  {
    "title": "strictEndDate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkqueryoptions/1614770-strictenddate",
    "html": "Discussion\n\nThe sample’s end time must be equal to or later than the target’s start time, and the sample’s end time must also be earlier than the target’s end time."
  },
  {
    "title": "HKVisionPrescriptionType.glasses | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkvisionprescriptiontype/glasses",
    "html": "See Also\nPrescription types\ncase contacts\nA prescription for contacts."
  },
  {
    "title": "HKWorkoutSortIdentifierTotalSwimmingStrokeCount | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkoutsortidentifiertotalswimmingstrokecount",
    "html": "See Also\nWorkout sort identifiers\nlet HKWorkoutSortIdentifierDuration: String\nA constant for sorting workouts based on their duration.\nlet HKWorkoutSortIdentifierTotalDistance: String\nA constant for sorting workouts based on their total distance.\nlet HKWorkoutSortIdentifierTotalFlightsClimbed: String\nA constant for sorting workouts based on the number of flights of steps climbed.\nlet HKWorkoutSortIdentifierTotalEnergyBurned: String\nA constant for sorting workouts based on the total energy burned."
  },
  {
    "title": "HKVisionPrescriptionType.contacts | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkvisionprescriptiontype/contacts",
    "html": "See Also\nPrescription types\ncase glasses\nA prescription for glasses."
  },
  {
    "title": "HKMetricPrefix.femto | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkmetricprefix/femto",
    "html": "See Also\nPrefixes\ncase none\nA prefix that does not modify the base unit.\ncase pico\nA prefix that multiplies the base unit by 1e-12.\ncase nano\nA prefix that multiplies the base unit by 1e-9.\ncase micro\nA prefix that multiplies the base unit by 1e-6.\ncase milli\nA prefix that multiplies the base unit by 0.001.\ncase centi\nA prefix that multiplies the base unit by 0.01.\ncase deci\nA prefix that multiplies the base unit by 0.1.\ncase deca\nA prefix that multiplies the base unit by 10.\ncase hecto\nA prefix that multiplies the base unit by 100.\ncase kilo\nA prefix that multiplies the base unit by 1000.\ncase mega\nA prefix that multiplies the base unit by 1e6.\ncase giga\nA prefix that multiplies the base unit by 1e9.\ncase tera\nA prefix that multiplies the base unit by 1e12."
  },
  {
    "title": "HKMetricPrefix.none | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkmetricprefix/none",
    "html": "See Also\nPrefixes\ncase femto\nA prefix that multiplies the base unit by 1e-15.\ncase pico\nA prefix that multiplies the base unit by 1e-12.\ncase nano\nA prefix that multiplies the base unit by 1e-9.\ncase micro\nA prefix that multiplies the base unit by 1e-6.\ncase milli\nA prefix that multiplies the base unit by 0.001.\ncase centi\nA prefix that multiplies the base unit by 0.01.\ncase deci\nA prefix that multiplies the base unit by 0.1.\ncase deca\nA prefix that multiplies the base unit by 10.\ncase hecto\nA prefix that multiplies the base unit by 100.\ncase kilo\nA prefix that multiplies the base unit by 1000.\ncase mega\nA prefix that multiplies the base unit by 1e6.\ncase giga\nA prefix that multiplies the base unit by 1e9.\ncase tera\nA prefix that multiplies the base unit by 1e12."
  },
  {
    "title": "HKMetricPrefix.micro | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkmetricprefix/micro",
    "html": "See Also\nPrefixes\ncase none\nA prefix that does not modify the base unit.\ncase femto\nA prefix that multiplies the base unit by 1e-15.\ncase pico\nA prefix that multiplies the base unit by 1e-12.\ncase nano\nA prefix that multiplies the base unit by 1e-9.\ncase milli\nA prefix that multiplies the base unit by 0.001.\ncase centi\nA prefix that multiplies the base unit by 0.01.\ncase deci\nA prefix that multiplies the base unit by 0.1.\ncase deca\nA prefix that multiplies the base unit by 10.\ncase hecto\nA prefix that multiplies the base unit by 100.\ncase kilo\nA prefix that multiplies the base unit by 1000.\ncase mega\nA prefix that multiplies the base unit by 1e6.\ncase giga\nA prefix that multiplies the base unit by 1e9.\ncase tera\nA prefix that multiplies the base unit by 1e12."
  },
  {
    "title": "HKMetricPrefix.nano | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkmetricprefix/nano",
    "html": "See Also\nPrefixes\ncase none\nA prefix that does not modify the base unit.\ncase femto\nA prefix that multiplies the base unit by 1e-15.\ncase pico\nA prefix that multiplies the base unit by 1e-12.\ncase micro\nA prefix that multiplies the base unit by 1e-6.\ncase milli\nA prefix that multiplies the base unit by 0.001.\ncase centi\nA prefix that multiplies the base unit by 0.01.\ncase deci\nA prefix that multiplies the base unit by 0.1.\ncase deca\nA prefix that multiplies the base unit by 10.\ncase hecto\nA prefix that multiplies the base unit by 100.\ncase kilo\nA prefix that multiplies the base unit by 1000.\ncase mega\nA prefix that multiplies the base unit by 1e6.\ncase giga\nA prefix that multiplies the base unit by 1e9.\ncase tera\nA prefix that multiplies the base unit by 1e12."
  },
  {
    "title": "HKMetricPrefix.milli | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkmetricprefix/milli",
    "html": "See Also\nPrefixes\ncase none\nA prefix that does not modify the base unit.\ncase femto\nA prefix that multiplies the base unit by 1e-15.\ncase pico\nA prefix that multiplies the base unit by 1e-12.\ncase nano\nA prefix that multiplies the base unit by 1e-9.\ncase micro\nA prefix that multiplies the base unit by 1e-6.\ncase centi\nA prefix that multiplies the base unit by 0.01.\ncase deci\nA prefix that multiplies the base unit by 0.1.\ncase deca\nA prefix that multiplies the base unit by 10.\ncase hecto\nA prefix that multiplies the base unit by 100.\ncase kilo\nA prefix that multiplies the base unit by 1000.\ncase mega\nA prefix that multiplies the base unit by 1e6.\ncase giga\nA prefix that multiplies the base unit by 1e9.\ncase tera\nA prefix that multiplies the base unit by 1e12."
  },
  {
    "title": "HKMetricPrefix.pico | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkmetricprefix/pico",
    "html": "See Also\nPrefixes\ncase none\nA prefix that does not modify the base unit.\ncase femto\nA prefix that multiplies the base unit by 1e-15.\ncase nano\nA prefix that multiplies the base unit by 1e-9.\ncase micro\nA prefix that multiplies the base unit by 1e-6.\ncase milli\nA prefix that multiplies the base unit by 0.001.\ncase centi\nA prefix that multiplies the base unit by 0.01.\ncase deci\nA prefix that multiplies the base unit by 0.1.\ncase deca\nA prefix that multiplies the base unit by 10.\ncase hecto\nA prefix that multiplies the base unit by 100.\ncase kilo\nA prefix that multiplies the base unit by 1000.\ncase mega\nA prefix that multiplies the base unit by 1e6.\ncase giga\nA prefix that multiplies the base unit by 1e9.\ncase tera\nA prefix that multiplies the base unit by 1e12."
  },
  {
    "title": "HKMetricPrefix.centi | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkmetricprefix/centi",
    "html": "See Also\nPrefixes\ncase none\nA prefix that does not modify the base unit.\ncase femto\nA prefix that multiplies the base unit by 1e-15.\ncase pico\nA prefix that multiplies the base unit by 1e-12.\ncase nano\nA prefix that multiplies the base unit by 1e-9.\ncase micro\nA prefix that multiplies the base unit by 1e-6.\ncase milli\nA prefix that multiplies the base unit by 0.001.\ncase deci\nA prefix that multiplies the base unit by 0.1.\ncase deca\nA prefix that multiplies the base unit by 10.\ncase hecto\nA prefix that multiplies the base unit by 100.\ncase kilo\nA prefix that multiplies the base unit by 1000.\ncase mega\nA prefix that multiplies the base unit by 1e6.\ncase giga\nA prefix that multiplies the base unit by 1e9.\ncase tera\nA prefix that multiplies the base unit by 1e12."
  },
  {
    "title": "HKMetricPrefix.deci | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkmetricprefix/deci",
    "html": "See Also\nPrefixes\ncase none\nA prefix that does not modify the base unit.\ncase femto\nA prefix that multiplies the base unit by 1e-15.\ncase pico\nA prefix that multiplies the base unit by 1e-12.\ncase nano\nA prefix that multiplies the base unit by 1e-9.\ncase micro\nA prefix that multiplies the base unit by 1e-6.\ncase milli\nA prefix that multiplies the base unit by 0.001.\ncase centi\nA prefix that multiplies the base unit by 0.01.\ncase deca\nA prefix that multiplies the base unit by 10.\ncase hecto\nA prefix that multiplies the base unit by 100.\ncase kilo\nA prefix that multiplies the base unit by 1000.\ncase mega\nA prefix that multiplies the base unit by 1e6.\ncase giga\nA prefix that multiplies the base unit by 1e9.\ncase tera\nA prefix that multiplies the base unit by 1e12."
  },
  {
    "title": "HKMetricPrefix.deca | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkmetricprefix/deca",
    "html": "See Also\nPrefixes\ncase none\nA prefix that does not modify the base unit.\ncase femto\nA prefix that multiplies the base unit by 1e-15.\ncase pico\nA prefix that multiplies the base unit by 1e-12.\ncase nano\nA prefix that multiplies the base unit by 1e-9.\ncase micro\nA prefix that multiplies the base unit by 1e-6.\ncase milli\nA prefix that multiplies the base unit by 0.001.\ncase centi\nA prefix that multiplies the base unit by 0.01.\ncase deci\nA prefix that multiplies the base unit by 0.1.\ncase hecto\nA prefix that multiplies the base unit by 100.\ncase kilo\nA prefix that multiplies the base unit by 1000.\ncase mega\nA prefix that multiplies the base unit by 1e6.\ncase giga\nA prefix that multiplies the base unit by 1e9.\ncase tera\nA prefix that multiplies the base unit by 1e12."
  },
  {
    "title": "HKMetricPrefix.giga | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkmetricprefix/giga",
    "html": "See Also\nPrefixes\ncase none\nA prefix that does not modify the base unit.\ncase femto\nA prefix that multiplies the base unit by 1e-15.\ncase pico\nA prefix that multiplies the base unit by 1e-12.\ncase nano\nA prefix that multiplies the base unit by 1e-9.\ncase micro\nA prefix that multiplies the base unit by 1e-6.\ncase milli\nA prefix that multiplies the base unit by 0.001.\ncase centi\nA prefix that multiplies the base unit by 0.01.\ncase deci\nA prefix that multiplies the base unit by 0.1.\ncase deca\nA prefix that multiplies the base unit by 10.\ncase hecto\nA prefix that multiplies the base unit by 100.\ncase kilo\nA prefix that multiplies the base unit by 1000.\ncase mega\nA prefix that multiplies the base unit by 1e6.\ncase tera\nA prefix that multiplies the base unit by 1e12."
  },
  {
    "title": "HKMetricPrefix.hecto | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkmetricprefix/hecto",
    "html": "See Also\nPrefixes\ncase none\nA prefix that does not modify the base unit.\ncase femto\nA prefix that multiplies the base unit by 1e-15.\ncase pico\nA prefix that multiplies the base unit by 1e-12.\ncase nano\nA prefix that multiplies the base unit by 1e-9.\ncase micro\nA prefix that multiplies the base unit by 1e-6.\ncase milli\nA prefix that multiplies the base unit by 0.001.\ncase centi\nA prefix that multiplies the base unit by 0.01.\ncase deci\nA prefix that multiplies the base unit by 0.1.\ncase deca\nA prefix that multiplies the base unit by 10.\ncase kilo\nA prefix that multiplies the base unit by 1000.\ncase mega\nA prefix that multiplies the base unit by 1e6.\ncase giga\nA prefix that multiplies the base unit by 1e9.\ncase tera\nA prefix that multiplies the base unit by 1e12."
  },
  {
    "title": "HKMetricPrefix.mega | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkmetricprefix/mega",
    "html": "See Also\nPrefixes\ncase none\nA prefix that does not modify the base unit.\ncase femto\nA prefix that multiplies the base unit by 1e-15.\ncase pico\nA prefix that multiplies the base unit by 1e-12.\ncase nano\nA prefix that multiplies the base unit by 1e-9.\ncase micro\nA prefix that multiplies the base unit by 1e-6.\ncase milli\nA prefix that multiplies the base unit by 0.001.\ncase centi\nA prefix that multiplies the base unit by 0.01.\ncase deci\nA prefix that multiplies the base unit by 0.1.\ncase deca\nA prefix that multiplies the base unit by 10.\ncase hecto\nA prefix that multiplies the base unit by 100.\ncase kilo\nA prefix that multiplies the base unit by 1000.\ncase giga\nA prefix that multiplies the base unit by 1e9.\ncase tera\nA prefix that multiplies the base unit by 1e12."
  },
  {
    "title": "HKMetricPrefix.tera | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkmetricprefix/tera",
    "html": "See Also\nPrefixes\ncase none\nA prefix that does not modify the base unit.\ncase femto\nA prefix that multiplies the base unit by 1e-15.\ncase pico\nA prefix that multiplies the base unit by 1e-12.\ncase nano\nA prefix that multiplies the base unit by 1e-9.\ncase micro\nA prefix that multiplies the base unit by 1e-6.\ncase milli\nA prefix that multiplies the base unit by 0.001.\ncase centi\nA prefix that multiplies the base unit by 0.01.\ncase deci\nA prefix that multiplies the base unit by 0.1.\ncase deca\nA prefix that multiplies the base unit by 10.\ncase hecto\nA prefix that multiplies the base unit by 100.\ncase kilo\nA prefix that multiplies the base unit by 1000.\ncase mega\nA prefix that multiplies the base unit by 1e6.\ncase giga\nA prefix that multiplies the base unit by 1e9."
  },
  {
    "title": "predicateForSamples(equalTo:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkcategoryvaluepredicateproviding/3931474-predicateforsamples",
    "html": "Parameters\nvalues\n\nThe target set of values.\n\nSee Also\nCreating predicates\nstatic func predicateForSamples(NSComparisonPredicate.Operator, value: Self) -> NSPredicate\nReturns a predicate that checks a category sample’s value.\nAvailable when RawValue is Int."
  },
  {
    "title": "HKDevicePropertyKeyUDIDeviceIdentifier | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkdevicepropertykeyudideviceidentifier",
    "html": "See Also\nValid Device Property Keys\nlet HKDevicePropertyKeyName: String\nThe device’s name.\nlet HKDevicePropertyKeyManufacturer: String\nThe device’s manufacturer.\nlet HKDevicePropertyKeyModel: String\nThe device’s model.\nlet HKDevicePropertyKeyHardwareVersion: String\nThe device’s hardware version.\nlet HKDevicePropertyKeyFirmwareVersion: String\nThe device’s firmware version.\nlet HKDevicePropertyKeySoftwareVersion: String\nThe device’s software version.\nlet HKDevicePropertyKeyLocalIdentifier: String\nA unique identifier for the device on the hardware running the app. For more information, see localIdentifier."
  },
  {
    "title": "predicateForSamples(_:value:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkcategoryvaluepredicateproviding/3931473-predicateforsamples",
    "html": "Parameters\noperatorType\n\nThe type of operation to perform when matching the category sample’s value against the target value. For a list of possible operators, see NSComparisonPredicate.Operator.contains.\n\nvalue\n\nThe category sample’s target value. Use an enumeration value appropriate for the type of category samples you’re working with. For example, a predicate for sleep analysis samples use values from the HKCategoryValueSleepAnalysis enumeration.\n\nSee Also\nCreating predicates\nstatic func predicateForSamples(equalTo: Set<Self>) -> NSPredicate\nReturns a predicate that checks whether a category sample is equal to the provided set of values.\nAvailable when RawValue is Int."
  },
  {
    "title": "HKWorkoutEventType.marker | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkouteventtype/marker",
    "html": "Discussion\n\nUse markers to indicate arbitrary points during a workout (for example, when the user reaches the top of a hill during a run).\n\nSee Also\nEvents\ncase pause\nA constant indicating that the workout has paused.\ncase resume\nA constant indicating that the workout has resumed.\ncase motionPaused\nA constant indicating that the system has automatically paused a workout session.\ncase motionResumed\nA constant indicating that the system has automatically resumed a workout session.\ncase pauseOrResumeRequest\nA constant indicating that the user has requested a pause or resume.\ncase lap\nA constant indicating a lap.\ncase segment\nA constant indicating a period of time of interest during a workout."
  },
  {
    "title": "skinType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkfitzpatrickskintypeobject/1614174-skintype",
    "html": "Discussion\n\nFor a list of possible skin types, see HKFitzpatrickSkinType.\n\nTopics\nValid Skin Types\nenum HKFitzpatrickSkinType\nCategories representing the user’s skin type based on the Fitzpatrick scale."
  },
  {
    "title": "HKDevicePropertyKeyHardwareVersion | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkdevicepropertykeyhardwareversion",
    "html": "See Also\nValid Device Property Keys\nlet HKDevicePropertyKeyName: String\nThe device’s name.\nlet HKDevicePropertyKeyManufacturer: String\nThe device’s manufacturer.\nlet HKDevicePropertyKeyModel: String\nThe device’s model.\nlet HKDevicePropertyKeyFirmwareVersion: String\nThe device’s firmware version.\nlet HKDevicePropertyKeySoftwareVersion: String\nThe device’s software version.\nlet HKDevicePropertyKeyLocalIdentifier: String\nA unique identifier for the device on the hardware running the app. For more information, see localIdentifier.\nlet HKDevicePropertyKeyUDIDeviceIdentifier: String\nThe device’s UDI Device Identifier."
  },
  {
    "title": "HKDevicePropertyKeyModel | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkdevicepropertykeymodel",
    "html": "See Also\nValid Device Property Keys\nlet HKDevicePropertyKeyName: String\nThe device’s name.\nlet HKDevicePropertyKeyManufacturer: String\nThe device’s manufacturer.\nlet HKDevicePropertyKeyHardwareVersion: String\nThe device’s hardware version.\nlet HKDevicePropertyKeyFirmwareVersion: String\nThe device’s firmware version.\nlet HKDevicePropertyKeySoftwareVersion: String\nThe device’s software version.\nlet HKDevicePropertyKeyLocalIdentifier: String\nA unique identifier for the device on the hardware running the app. For more information, see localIdentifier.\nlet HKDevicePropertyKeyUDIDeviceIdentifier: String\nThe device’s UDI Device Identifier."
  },
  {
    "title": "HKDevicePropertyKeyManufacturer | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkdevicepropertykeymanufacturer",
    "html": "See Also\nValid Device Property Keys\nlet HKDevicePropertyKeyName: String\nThe device’s name.\nlet HKDevicePropertyKeyModel: String\nThe device’s model.\nlet HKDevicePropertyKeyHardwareVersion: String\nThe device’s hardware version.\nlet HKDevicePropertyKeyFirmwareVersion: String\nThe device’s firmware version.\nlet HKDevicePropertyKeySoftwareVersion: String\nThe device’s software version.\nlet HKDevicePropertyKeyLocalIdentifier: String\nA unique identifier for the device on the hardware running the app. For more information, see localIdentifier.\nlet HKDevicePropertyKeyUDIDeviceIdentifier: String\nThe device’s UDI Device Identifier."
  },
  {
    "title": "HKDevicePropertyKeyFirmwareVersion | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkdevicepropertykeyfirmwareversion",
    "html": "See Also\nValid Device Property Keys\nlet HKDevicePropertyKeyName: String\nThe device’s name.\nlet HKDevicePropertyKeyManufacturer: String\nThe device’s manufacturer.\nlet HKDevicePropertyKeyModel: String\nThe device’s model.\nlet HKDevicePropertyKeyHardwareVersion: String\nThe device’s hardware version.\nlet HKDevicePropertyKeySoftwareVersion: String\nThe device’s software version.\nlet HKDevicePropertyKeyLocalIdentifier: String\nA unique identifier for the device on the hardware running the app. For more information, see localIdentifier.\nlet HKDevicePropertyKeyUDIDeviceIdentifier: String\nThe device’s UDI Device Identifier."
  },
  {
    "title": "HKDevicePropertyKeyLocalIdentifier | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkdevicepropertykeylocalidentifier",
    "html": "See Also\nValid Device Property Keys\nlet HKDevicePropertyKeyName: String\nThe device’s name.\nlet HKDevicePropertyKeyManufacturer: String\nThe device’s manufacturer.\nlet HKDevicePropertyKeyModel: String\nThe device’s model.\nlet HKDevicePropertyKeyHardwareVersion: String\nThe device’s hardware version.\nlet HKDevicePropertyKeyFirmwareVersion: String\nThe device’s firmware version.\nlet HKDevicePropertyKeySoftwareVersion: String\nThe device’s software version.\nlet HKDevicePropertyKeyUDIDeviceIdentifier: String\nThe device’s UDI Device Identifier."
  },
  {
    "title": "HKDevicePropertyKeySoftwareVersion | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkdevicepropertykeysoftwareversion",
    "html": "See Also\nValid Device Property Keys\nlet HKDevicePropertyKeyName: String\nThe device’s name.\nlet HKDevicePropertyKeyManufacturer: String\nThe device’s manufacturer.\nlet HKDevicePropertyKeyModel: String\nThe device’s model.\nlet HKDevicePropertyKeyHardwareVersion: String\nThe device’s hardware version.\nlet HKDevicePropertyKeyFirmwareVersion: String\nThe device’s firmware version.\nlet HKDevicePropertyKeyLocalIdentifier: String\nA unique identifier for the device on the hardware running the app. For more information, see localIdentifier.\nlet HKDevicePropertyKeyUDIDeviceIdentifier: String\nThe device’s UDI Device Identifier."
  },
  {
    "title": "init(healthStore:device:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkoutroutebuilder/2874114-init",
    "html": "Parameters\nhealthStore\n\nThe HealthKit store.\n\ndevice\n\nAn object representing the device that provided the location data. Pass nil if the app is generating its own location data (for example, using Core Location).\n\nReturn Value\n\nA newly initialized workout route builder."
  },
  {
    "title": "addMetadata(_:completion:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkoutroutebuilder/2962930-addmetadata",
    "html": "Discussion\n\nConcurrency Note\n\nYou can call this method from synchronous code using a completion handler, as shown on this page, or you can call it as an asynchronous method that has the following declaration:\n\nfunc addMetadata(_ metadata: [String : Any]) async throws\n\n\nFor information about concurrency and asynchronous code in Swift, see Calling Objective-C APIs Asynchronously.\n\nSee Also\nBuilding the route\nfunc finishRoute(with: HKWorkout, metadata: [String : Any]?, completion: (HKWorkoutRoute?, Error?) -> Void)\nCreates, saves, and associates the route with the provided workout.\nfunc insertRouteData([CLLocation], completion: (Bool, Error?) -> Void)\nAdds route data to the builder."
  },
  {
    "title": "prefix(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkstatisticscollectionquerydescriptor/results/3916593-prefix",
    "html": "Parameters\ncount\n\nThe maximum number of elements to return. The value of count must be greater than or equal to zero.\n\nReturn Value\n\nAn asynchronous sequence starting at the beginning of the base sequence with at most count elements.\n\nDiscussion\n\nUse prefix(_:) to reduce the number of elements produced by the asynchronous sequence.\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 10. The prefix(_:) method causes the modified sequence to pass through the first six values, then end.\n\nfor await number in Counter(howHigh: 10).prefix(6) {\n    print(number, terminator: \" \")\n}\n// Prints \"1 2 3 4 5 6 \"\n\n\nIf the count passed to prefix(_:) exceeds the number of elements in the base sequence, the result contains all of the elements in the sequence.\n\nSee Also\nSelecting Elements\nfunc prefix(while: (HKStatisticsCollectionQueryDescriptor.Result) -> Bool) -> AsyncPrefixWhileSequence<HKStatisticsCollectionQueryDescriptor.Results>\nReturns an asynchronous sequence, containing the initial, consecutive elements of the base sequence that satisfy the given predicate."
  },
  {
    "title": "flatMap(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkstatisticscollectionquerydescriptor/results/3916580-flatmap",
    "html": "Parameters\ntransform\n\nAn error-throwing mapping closure. transform accepts an element of this sequence as its parameter and returns an AsyncSequence. If transform throws an error, the sequence ends.\n\nReturn Value\n\nA single, flattened asynchronous sequence that contains all elements in all the asynchronous sequences produced by transform. The sequence ends either when the last sequence created from the last element from base sequence ends, or when transform throws an error.\n\nDiscussion\n\nUse this method to receive a single-level asynchronous sequence when your transformation produces an asynchronous sequence for each element.\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 5. The transforming closure takes the received Int and returns a new Counter that counts that high. For example, when the transform receives 3 from the base sequence, it creates a new Counter that produces the values 1, 2, and 3. The flatMap(_:) method “flattens” the resulting sequence-of-sequences into a single AsyncSequence. However, when the closure receives 4, it throws an error, terminating the sequence.\n\ndo {\n    let stream = Counter(howHigh: 5)\n        .flatMap { (value) -> Counter in\n            if value == 4 {\n                throw MyError()\n            }\n            return Counter(howHigh: value)\n        }\n    for try await number in stream {\n        print(number, terminator: \" \")\n    }\n} catch {\n    print(error)\n}\n// Prints \"1 1 2 1 2 3 MyError() \"\n\nSee Also\nTransforming a Sequence\nfunc map<Transformed>((HKStatisticsCollectionQueryDescriptor.Result) -> Transformed) -> AsyncMapSequence<HKStatisticsCollectionQueryDescriptor.Results, Transformed>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements.\nfunc map<Transformed>((HKStatisticsCollectionQueryDescriptor.Result) -> Transformed) -> AsyncThrowingMapSequence<HKStatisticsCollectionQueryDescriptor.Results, Transformed>\nCreates an asynchronous sequence that maps the given error-throwing closure over the asynchronous sequence’s elements.\nfunc reduce<Result>(Result, (Result, HKStatisticsCollectionQueryDescriptor.Result) -> Result) -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure.\nfunc reduce<Result>(into: Result, (inout Result, HKStatisticsCollectionQueryDescriptor.Result) -> Void) -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure, given a mutable initial value.\nfunc compactMap<ElementOfResult>((HKStatisticsCollectionQueryDescriptor.Result) -> ElementOfResult?) -> AsyncCompactMapSequence<HKStatisticsCollectionQueryDescriptor.Results, ElementOfResult>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements, omitting results that don’t return a value.\nfunc compactMap<ElementOfResult>((HKStatisticsCollectionQueryDescriptor.Result) -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<HKStatisticsCollectionQueryDescriptor.Results, ElementOfResult>\nCreates an asynchronous sequence that maps an error-throwing closure over the base sequence’s elements, omitting results that don’t return a value.\nfunc flatMap<SegmentOfResult>((HKStatisticsCollectionQueryDescriptor.Result) -> SegmentOfResult) -> AsyncFlatMapSequence<HKStatisticsCollectionQueryDescriptor.Results, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given transformation with each element of this sequence."
  },
  {
    "title": "reduce(into:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkstatisticscollectionquerydescriptor/results/3916599-reduce",
    "html": "Parameters\ninitialResult\n\nThe value to use as the initial accumulating value. The nextPartialResult closure receives initialResult the first time the closure executes.\n\nnextPartialResult\n\nA closure that combines an accumulating value and an element of the asynchronous sequence into a new accumulating value, for use in the next call of the nextPartialResult closure or returned to the caller.\n\nReturn Value\n\nThe final accumulated value. If the sequence has no elements, the result is initialResult.\n\nDiscussion\n\nUse the reduce(into:_:) method to produce a single value from the elements of an entire sequence. For example, you can use this method on a sequence of numbers to find their sum or product.\n\nThe nextPartialResult closure executes sequentially with an accumulating value initialized to initialResult and each element of the sequence.\n\nPrefer this method over reduce(_:_:) for efficiency when the result is a copy-on-write type, for example an Array or Dictionary.\n\nSee Also\nTransforming a Sequence\nfunc map<Transformed>((HKStatisticsCollectionQueryDescriptor.Result) -> Transformed) -> AsyncMapSequence<HKStatisticsCollectionQueryDescriptor.Results, Transformed>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements.\nfunc map<Transformed>((HKStatisticsCollectionQueryDescriptor.Result) -> Transformed) -> AsyncThrowingMapSequence<HKStatisticsCollectionQueryDescriptor.Results, Transformed>\nCreates an asynchronous sequence that maps the given error-throwing closure over the asynchronous sequence’s elements.\nfunc reduce<Result>(Result, (Result, HKStatisticsCollectionQueryDescriptor.Result) -> Result) -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure.\nfunc compactMap<ElementOfResult>((HKStatisticsCollectionQueryDescriptor.Result) -> ElementOfResult?) -> AsyncCompactMapSequence<HKStatisticsCollectionQueryDescriptor.Results, ElementOfResult>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements, omitting results that don’t return a value.\nfunc compactMap<ElementOfResult>((HKStatisticsCollectionQueryDescriptor.Result) -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<HKStatisticsCollectionQueryDescriptor.Results, ElementOfResult>\nCreates an asynchronous sequence that maps an error-throwing closure over the base sequence’s elements, omitting results that don’t return a value.\nfunc flatMap<SegmentOfResult>((HKStatisticsCollectionQueryDescriptor.Result) -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<HKStatisticsCollectionQueryDescriptor.Results, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given error-throwing transformation with each element of this sequence.\nfunc flatMap<SegmentOfResult>((HKStatisticsCollectionQueryDescriptor.Result) -> SegmentOfResult) -> AsyncFlatMapSequence<HKStatisticsCollectionQueryDescriptor.Results, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given transformation with each element of this sequence."
  },
  {
    "title": "reduce(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkstatisticscollectionquerydescriptor/results/3916597-reduce",
    "html": "Parameters\ninitialResult\n\nThe value to use as the initial accumulating value. The nextPartialResult closure receives initialResult the first time the closure runs.\n\nnextPartialResult\n\nA closure that combines an accumulating value and an element of the asynchronous sequence into a new accumulating value, for use in the next call of the nextPartialResult closure or returned to the caller.\n\nReturn Value\n\nThe final accumulated value. If the sequence has no elements, the result is initialResult.\n\nDiscussion\n\nUse the reduce(_:_:) method to produce a single value from the elements of an entire sequence. For example, you can use this method on an sequence of numbers to find their sum or product.\n\nThe nextPartialResult closure executes sequentially with an accumulating value initialized to initialResult and each element of the sequence.\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 4. The reduce(_:_:) method sums the values received from the asynchronous sequence.\n\nlet sum = await Counter(howHigh: 4)\n    .reduce(0) {\n        $0 + $1\n    }\nprint(sum)\n// Prints \"10\"\n\nSee Also\nTransforming a Sequence\nfunc map<Transformed>((HKStatisticsCollectionQueryDescriptor.Result) -> Transformed) -> AsyncMapSequence<HKStatisticsCollectionQueryDescriptor.Results, Transformed>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements.\nfunc map<Transformed>((HKStatisticsCollectionQueryDescriptor.Result) -> Transformed) -> AsyncThrowingMapSequence<HKStatisticsCollectionQueryDescriptor.Results, Transformed>\nCreates an asynchronous sequence that maps the given error-throwing closure over the asynchronous sequence’s elements.\nfunc reduce<Result>(into: Result, (inout Result, HKStatisticsCollectionQueryDescriptor.Result) -> Void) -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure, given a mutable initial value.\nfunc compactMap<ElementOfResult>((HKStatisticsCollectionQueryDescriptor.Result) -> ElementOfResult?) -> AsyncCompactMapSequence<HKStatisticsCollectionQueryDescriptor.Results, ElementOfResult>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements, omitting results that don’t return a value.\nfunc compactMap<ElementOfResult>((HKStatisticsCollectionQueryDescriptor.Result) -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<HKStatisticsCollectionQueryDescriptor.Results, ElementOfResult>\nCreates an asynchronous sequence that maps an error-throwing closure over the base sequence’s elements, omitting results that don’t return a value.\nfunc flatMap<SegmentOfResult>((HKStatisticsCollectionQueryDescriptor.Result) -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<HKStatisticsCollectionQueryDescriptor.Results, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given error-throwing transformation with each element of this sequence.\nfunc flatMap<SegmentOfResult>((HKStatisticsCollectionQueryDescriptor.Result) -> SegmentOfResult) -> AsyncFlatMapSequence<HKStatisticsCollectionQueryDescriptor.Results, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given transformation with each element of this sequence."
  },
  {
    "title": "flatMap(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkstatisticscollectionquerydescriptor/results/3916582-flatmap",
    "html": "Parameters\ntransform\n\nA mapping closure. transform accepts an element of this sequence as its parameter and returns an AsyncSequence.\n\nReturn Value\n\nA single, flattened asynchronous sequence that contains all elements in all the asynchronous sequences produced by transform.\n\nDiscussion\n\nUse this method to receive a single-level asynchronous sequence when your transformation produces an asynchronous sequence for each element.\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 5. The transforming closure takes the received Int and returns a new Counter that counts that high. For example, when the transform receives 3 from the base sequence, it creates a new Counter that produces the values 1, 2, and 3. The flatMap(_:) method “flattens” the resulting sequence-of-sequences into a single AsyncSequence.\n\nlet stream = Counter(howHigh: 5)\n    .flatMap { Counter(howHigh: $0) }\nfor await number in stream {\n    print(number, terminator: \" \")\n}\n// Prints \"1 1 2 1 2 3 1 2 3 4 1 2 3 4 5 \"\n\nSee Also\nTransforming a Sequence\nfunc map<Transformed>((HKStatisticsCollectionQueryDescriptor.Result) -> Transformed) -> AsyncMapSequence<HKStatisticsCollectionQueryDescriptor.Results, Transformed>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements.\nfunc map<Transformed>((HKStatisticsCollectionQueryDescriptor.Result) -> Transformed) -> AsyncThrowingMapSequence<HKStatisticsCollectionQueryDescriptor.Results, Transformed>\nCreates an asynchronous sequence that maps the given error-throwing closure over the asynchronous sequence’s elements.\nfunc reduce<Result>(Result, (Result, HKStatisticsCollectionQueryDescriptor.Result) -> Result) -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure.\nfunc reduce<Result>(into: Result, (inout Result, HKStatisticsCollectionQueryDescriptor.Result) -> Void) -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure, given a mutable initial value.\nfunc compactMap<ElementOfResult>((HKStatisticsCollectionQueryDescriptor.Result) -> ElementOfResult?) -> AsyncCompactMapSequence<HKStatisticsCollectionQueryDescriptor.Results, ElementOfResult>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements, omitting results that don’t return a value.\nfunc compactMap<ElementOfResult>((HKStatisticsCollectionQueryDescriptor.Result) -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<HKStatisticsCollectionQueryDescriptor.Results, ElementOfResult>\nCreates an asynchronous sequence that maps an error-throwing closure over the base sequence’s elements, omitting results that don’t return a value.\nfunc flatMap<SegmentOfResult>((HKStatisticsCollectionQueryDescriptor.Result) -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<HKStatisticsCollectionQueryDescriptor.Results, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given error-throwing transformation with each element of this sequence."
  },
  {
    "title": "compactMap(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkstatisticscollectionquerydescriptor/results/3916566-compactmap",
    "html": "Parameters\ntransform\n\nA mapping closure. transform accepts an element of this sequence as its parameter and returns a transformed value of the same or of a different type.\n\nReturn Value\n\nAn asynchronous sequence that contains, in order, the non-nil elements produced by the transform closure.\n\nDiscussion\n\nUse the compactMap(_:) method to transform every element received from a base asynchronous sequence, while also discarding any nil results from the closure. Typically, you use this to transform from one type of element to another.\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 5. The closure provided to the compactMap(_:) method takes each Int and looks up a corresponding String from a romanNumeralDict dictionary. Because there is no key for 4, the closure returns nil in this case, which compactMap(_:) omits from the transformed asynchronous sequence.\n\nlet romanNumeralDict: [Int: String] =\n    [1: \"I\", 2: \"II\", 3: \"III\", 5: \"V\"]\n    \nlet stream = Counter(howHigh: 5)\n    .compactMap { romanNumeralDict[$0] }\nfor await numeral in stream {\n    print(numeral, terminator: \" \")\n}\n// Prints \"I II III V \"\n\nSee Also\nTransforming a Sequence\nfunc map<Transformed>((HKStatisticsCollectionQueryDescriptor.Result) -> Transformed) -> AsyncMapSequence<HKStatisticsCollectionQueryDescriptor.Results, Transformed>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements.\nfunc map<Transformed>((HKStatisticsCollectionQueryDescriptor.Result) -> Transformed) -> AsyncThrowingMapSequence<HKStatisticsCollectionQueryDescriptor.Results, Transformed>\nCreates an asynchronous sequence that maps the given error-throwing closure over the asynchronous sequence’s elements.\nfunc reduce<Result>(Result, (Result, HKStatisticsCollectionQueryDescriptor.Result) -> Result) -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure.\nfunc reduce<Result>(into: Result, (inout Result, HKStatisticsCollectionQueryDescriptor.Result) -> Void) -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure, given a mutable initial value.\nfunc compactMap<ElementOfResult>((HKStatisticsCollectionQueryDescriptor.Result) -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<HKStatisticsCollectionQueryDescriptor.Results, ElementOfResult>\nCreates an asynchronous sequence that maps an error-throwing closure over the base sequence’s elements, omitting results that don’t return a value.\nfunc flatMap<SegmentOfResult>((HKStatisticsCollectionQueryDescriptor.Result) -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<HKStatisticsCollectionQueryDescriptor.Results, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given error-throwing transformation with each element of this sequence.\nfunc flatMap<SegmentOfResult>((HKStatisticsCollectionQueryDescriptor.Result) -> SegmentOfResult) -> AsyncFlatMapSequence<HKStatisticsCollectionQueryDescriptor.Results, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given transformation with each element of this sequence."
  },
  {
    "title": "compactMap(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkstatisticscollectionquerydescriptor/results/3916568-compactmap",
    "html": "Parameters\ntransform\n\nAn error-throwing mapping closure. transform accepts an element of this sequence as its parameter and returns a transformed value of the same or of a different type. If transform throws an error, the sequence ends.\n\nReturn Value\n\nAn asynchronous sequence that contains, in order, the non-nil elements produced by the transform closure. The sequence ends either when the base sequence ends or when transform throws an error.\n\nDiscussion\n\nUse the compactMap(_:) method to transform every element received from a base asynchronous sequence, while also discarding any nil results from the closure. Typically, you use this to transform from one type of element to another.\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 5. The closure provided to the compactMap(_:) method takes each Int and looks up a corresponding String from a romanNumeralDict dictionary. Since there is no key for 4, the closure returns nil in this case, which compactMap(_:) omits from the transformed asynchronous sequence. When the value is 5, the closure throws MyError, terminating the sequence.\n\nlet romanNumeralDict: [Int: String] =\n    [1: \"I\", 2: \"II\", 3: \"III\", 5: \"V\"]\n\n\ndo {\n    let stream = Counter(howHigh: 5)\n        .compactMap { (value) throws -> String? in\n            if value == 5 {\n                throw MyError()\n            }\n            return romanNumeralDict[value]\n        }\n    for try await numeral in stream {\n        print(numeral, terminator: \" \")\n    }\n} catch {\n    print(\"Error: \\(error)\")\n}\n// Prints \"I II III Error: MyError() \"\n\nSee Also\nTransforming a Sequence\nfunc map<Transformed>((HKStatisticsCollectionQueryDescriptor.Result) -> Transformed) -> AsyncMapSequence<HKStatisticsCollectionQueryDescriptor.Results, Transformed>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements.\nfunc map<Transformed>((HKStatisticsCollectionQueryDescriptor.Result) -> Transformed) -> AsyncThrowingMapSequence<HKStatisticsCollectionQueryDescriptor.Results, Transformed>\nCreates an asynchronous sequence that maps the given error-throwing closure over the asynchronous sequence’s elements.\nfunc reduce<Result>(Result, (Result, HKStatisticsCollectionQueryDescriptor.Result) -> Result) -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure.\nfunc reduce<Result>(into: Result, (inout Result, HKStatisticsCollectionQueryDescriptor.Result) -> Void) -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure, given a mutable initial value.\nfunc compactMap<ElementOfResult>((HKStatisticsCollectionQueryDescriptor.Result) -> ElementOfResult?) -> AsyncCompactMapSequence<HKStatisticsCollectionQueryDescriptor.Results, ElementOfResult>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements, omitting results that don’t return a value.\nfunc flatMap<SegmentOfResult>((HKStatisticsCollectionQueryDescriptor.Result) -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<HKStatisticsCollectionQueryDescriptor.Results, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given error-throwing transformation with each element of this sequence.\nfunc flatMap<SegmentOfResult>((HKStatisticsCollectionQueryDescriptor.Result) -> SegmentOfResult) -> AsyncFlatMapSequence<HKStatisticsCollectionQueryDescriptor.Results, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given transformation with each element of this sequence."
  },
  {
    "title": "workoutBuilder(_:didBegin:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkliveworkoutbuilderdelegate/3943311-workoutbuilder",
    "html": "Parameters\nworkoutBuilder\n\nThe workout builder that received the new activity.\n\nworkoutActivity\n\nA new workout activity, currently in progress.\n\nSee Also\nTracking Live Data\nfunc workoutBuilder(HKLiveWorkoutBuilder, didCollectDataOf: Set<HKSampleType>)\nTells the delegate that new data has been added to the builder.\n\nRequired\n\nfunc workoutBuilderDidCollectEvent(HKLiveWorkoutBuilder)\nTells the delegate that a new event has been added to the builder.\n\nRequired\n\nfunc workoutBuilder(HKLiveWorkoutBuilder, didEnd: HKWorkoutActivity)\nTells the delegate that the current workout activity has ended."
  },
  {
    "title": "workoutBuilder(_:didEnd:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkliveworkoutbuilderdelegate/3943312-workoutbuilder",
    "html": "Parameters\nworkoutBuilder\n\nThe workout builder that received the new activity.\n\nworkoutActivity\n\nThe workout activity that just ended.\n\nSee Also\nTracking Live Data\nfunc workoutBuilder(HKLiveWorkoutBuilder, didCollectDataOf: Set<HKSampleType>)\nTells the delegate that new data has been added to the builder.\n\nRequired\n\nfunc workoutBuilderDidCollectEvent(HKLiveWorkoutBuilder)\nTells the delegate that a new event has been added to the builder.\n\nRequired\n\nfunc workoutBuilder(HKLiveWorkoutBuilder, didBegin: HKWorkoutActivity)\nTells the delegate that a new workout activity has started."
  },
  {
    "title": "HKCategoryValueAppleWalkingSteadinessEvent.initialVeryLow | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkcategoryvalueapplewalkingsteadinessevent/initialverylow",
    "html": "See Also\nSteadiness Values\ncase initialLow\nThe user received a below-normal steadiness score for their gait while walking.\ncase repeatLow\nThe user’s below-normal score persists over a significant period of time.\ncase repeatVeryLow\nThe user’s considerably below-normal score persists over a significant period of time."
  },
  {
    "title": "init(type:date:metadata:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkoutevent/1649819-init",
    "html": "Deprecated\n\nUse init(type:dateInterval:metadata:) instead.\n\nParameters\ntype\n\nThe type of workout event. For a description of possible events, see HKWorkoutEventType.\n\ndate\n\nThe time when the transition occurred. For a pause event, this date indicates the start of the break. For a resume event, this date indicates the end of the break. You must use a date between the starting and ending dates of the workout that you intend to modify.\n\nmetadata\n\nThe metadata associated with the workout event.\n\nSee Also\nDeprecated\ninit(type: HKWorkoutEventType, date: Date)\nInstantiates and returns a new workout event with the specified type and date.\nvar date: Date\nThe time when the transition occurred."
  },
  {
    "title": "init(workoutConfiguration:start:end:metadata:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkoutactivity/3929763-init",
    "html": "Parameters\nworkoutConfiguration\n\nThe configuration information for this part of the workout. For HKWorkoutActivityType.swimBikeRun workouts, the activity’s configuration must use the HKWorkoutActivityType.swimming, HKWorkoutActivityType.cycling, or HKWorkoutActivityType.running activity types. For interval training, the activity’s configuration must use the same activity type as the containing workout.\n\nstartDate\n\nThe activity’s start date and time.\n\nendDate\n\nThe activity’s end date and time. Set this value to nil if the activity is still in progress. When set to a non-nil value, the end date must be equal to or later than its start date. A workout can’t have overlapping activities.\n\nmetadata\n\nMetadata that provides additional information about the activity.\n\nDiscussion"
  },
  {
    "title": "HKMetadataKeyGroupFitness | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkmetadatakeygroupfitness",
    "html": "Discussion\n\nSet this key’s value to true if the workout was part of a group fitness class; otherwise, set it tofalse.\n\nSee Also\nWorkout Type\nlet HKMetadataKeyActivityType: String\nlet HKMetadataKeyAppleFitnessPlusSession: String\nlet HKMetadataKeyCoachedWorkout: String\nA key that indicates whether the workout was performed with a coach or personal trainer.\nlet HKMetadataKeyIndoorWorkout: String\nA key that indicates whether the workout was performed indoors.\nlet HKMetadataKeyWorkoutBrandName: String\nThe brand name of a particular workout."
  },
  {
    "title": "HKMetadataKeyCoachedWorkout | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkmetadatakeycoachedworkout",
    "html": "Discussion\n\nSet this key’s value to true if the workout was performed with a coach or personal trainer; otherwise, set it to false.\n\nSee Also\nWorkout Type\nlet HKMetadataKeyActivityType: String\nlet HKMetadataKeyAppleFitnessPlusSession: String\nlet HKMetadataKeyGroupFitness: String\nA key that indicates whether the workout was performed as part of a group fitness class.\nlet HKMetadataKeyIndoorWorkout: String\nA key that indicates whether the workout was performed indoors.\nlet HKMetadataKeyWorkoutBrandName: String\nThe brand name of a particular workout."
  },
  {
    "title": "HKMetadataKeyIndoorWorkout | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkmetadatakeyindoorworkout",
    "html": "Discussion\n\nSet this key’s value to true if the workout was performed indoors; otherwise, set it to false.\n\nSee Also\nWorkout Type\nlet HKMetadataKeyActivityType: String\nlet HKMetadataKeyAppleFitnessPlusSession: String\nlet HKMetadataKeyCoachedWorkout: String\nA key that indicates whether the workout was performed with a coach or personal trainer.\nlet HKMetadataKeyGroupFitness: String\nA key that indicates whether the workout was performed as part of a group fitness class.\nlet HKMetadataKeyWorkoutBrandName: String\nThe brand name of a particular workout."
  },
  {
    "title": "HKMetadataKeyAverageMETs | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkmetadatakeyaveragemets",
    "html": "Discussion\n\nSet this key on a workout. Set its value to an HKQuantity object with a METs unit (for example, kcal/(kg*hr)). For more information on creating complex units, see Performing unit math.\n\nThe value represents the average intensity over the entire workout’s duration.\n\nSee Also\nIntensity\nlet HKMetadataKeyPhysicalEffortEstimationType: String"
  },
  {
    "title": "HKMetadataKeyPhysicalEffortEstimationType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkmetadatakeyphysicaleffortestimationtype",
    "html": "Topics\nValid estimation types\nenum HKPhysicalEffortEstimationType\nSee Also\nIntensity\nlet HKMetadataKeyAverageMETs: String\nA key that indicates the average Metabolic Equivalent of Task (METs) during a workout."
  },
  {
    "title": "HKMetadataKeySwimmingLocationType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkmetadatakeyswimminglocationtype",
    "html": "Discussion\n\nSet this key on a workout object that represents swimming. Set its value to an NSNumber object that contains a valid value from the HKWorkoutSwimmingLocationType enumeration.\n\nTopics\nValid Swimming Locations\nenum HKWorkoutSwimmingLocationType\nThe possible locations for swimming.\nSee Also\nSwimming\nlet HKMetadataKeySwimmingStrokeStyle: String\nA key that indicates the predominant stroke style for a lap of swimming.\nlet HKMetadataKeyLapLength: String\nA key that indicates the length of a lap during a workout.\nlet HKMetadataKeySWOLFScore: String\nlet HKMetadataKeyWaterSalinity: String"
  },
  {
    "title": "HKMetadataKeyElevationDescended | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkmetadatakeyelevationdescended",
    "html": "Discussion\n\nSet this key on a workout, workout segment, or a quantity sample that represents distance. Set its value to an HKQuantity object with a length unit.\n\nHealthKit assigns this metadata key to the segments it automatically creates for HKWorkoutActivityType.downhillSkiing and HKWorkoutActivityType.snowboarding workout sessions (Apple Watch Series 3 only).\n\nSee Also\nSkiing and Snowboarding\nlet HKMetadataKeyAlpineSlopeGrade: String\nA key that indicates the percent slope of a ski run.\nlet HKMetadataKeyElevationAscended: String\nA key that indicates the cumulative elevation ascended during a workout."
  },
  {
    "title": "HKMetadataKeyAlpineSlopeGrade | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkmetadatakeyalpineslopegrade",
    "html": "Discussion\n\nSet this key on quantity samples that represent distance, or on workout segments. Set its value to an HKQuantity object with a percent unit, where 100% indicates a 45 degree slope.\n\nHealthKit assigns this metadata key to the segments it automatically creates for HKWorkoutActivityType.downhillSkiing and HKWorkoutActivityType.snowboarding workout sessions (Apple Watch Series 3 only).\n\nSee Also\nSkiing and Snowboarding\nlet HKMetadataKeyElevationAscended: String\nA key that indicates the cumulative elevation ascended during a workout.\nlet HKMetadataKeyElevationDescended: String\nA key that indicates the cumulative elevation descended during a workout."
  },
  {
    "title": "HKMetadataKeyMaximumSpeed | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkmetadatakeymaximumspeed",
    "html": "Discussion\n\nSet this key on a workout, workout segment, or a quantity sample that represents distance. Set its value to an HKQuantity object with a length/time unit (for example, m/s). For more information on creating complex units, see Performing unit math.\n\nHealthKit assigns this metadata key to the segments it automatically creates for HKWorkoutActivityType.downhillSkiing and HKWorkoutActivityType.snowboarding workout sessions (Apple Watch Series 3 only).\n\nSee Also\nSpeed\nlet HKMetadataKeyAverageSpeed: String\nA key that indicates the average speed during a workout."
  },
  {
    "title": "HKMetadataKeyAverageSpeed | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkmetadatakeyaveragespeed",
    "html": "Discussion\n\nSet this key on a workout, workout segment, or a quantity sample that represents distance. Set its value to an HKQuantity object with a length/time unit (for example, m/s). For more information on creating complex units, see Performing unit math.\n\nHealthKit assigns this metadata key to the segments it automatically creates for HKWorkoutActivityType.downhillSkiing and HKWorkoutActivityType.snowboarding workout sessions (Apple Watch Series 3 only).\n\nNote\n\nThis value represents the average speed while moving. It may not be the same as the value you get when dividing a distance sample’s distance by its duration.\n\nSee Also\nSpeed\nlet HKMetadataKeyMaximumSpeed: String\nA key that indicates the maximum speed during a workout."
  },
  {
    "title": "HKMetadataKeySwimmingStrokeStyle | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkmetadatakeyswimmingstrokestyle",
    "html": "Discussion\n\nSet this key on workout lap events. Set its value to an NSNumber object that contains a valid value from the HKSwimmingStrokeStyle enumeration.\n\nTopics\nValid Stroke Styles\nenum HKSwimmingStrokeStyle\nThe style of stroke while swimming.\nSee Also\nSwimming\nlet HKMetadataKeySwimmingLocationType: String\nA key that indicates the location for a swimming workout.\nlet HKMetadataKeyLapLength: String\nA key that indicates the length of a lap during a workout.\nlet HKMetadataKeySWOLFScore: String\nlet HKMetadataKeyWaterSalinity: String"
  },
  {
    "title": "HKMetadataKeySWOLFScore | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkmetadatakeyswolfscore",
    "html": "See Also\nSwimming\nlet HKMetadataKeySwimmingLocationType: String\nA key that indicates the location for a swimming workout.\nlet HKMetadataKeySwimmingStrokeStyle: String\nA key that indicates the predominant stroke style for a lap of swimming.\nlet HKMetadataKeyLapLength: String\nA key that indicates the length of a lap during a workout.\nlet HKMetadataKeyWaterSalinity: String"
  },
  {
    "title": "uuid | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkdeletedobject/1615423-uuid",
    "html": "Discussion\n\nUse this UUID to identify and remove the deleted objects from any copies of the HealthKit data that you have stored outside of HealthKit. For example, if you upload sample data to your server, use the deleted object’s UUID to find and remove it from your server.\n\nSee Also\nIdentifying Deleted Objects\nvar metadata: [String : Any]?\nThe metadata associated with the deleted object."
  },
  {
    "title": "HKMetadataKeyWaterSalinity | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkmetadatakeywatersalinity",
    "html": "Topics\nValid water salinity\nenum HKWaterSalinity\nSee Also\nSwimming\nlet HKMetadataKeySwimmingLocationType: String\nA key that indicates the location for a swimming workout.\nlet HKMetadataKeySwimmingStrokeStyle: String\nA key that indicates the predominant stroke style for a lap of swimming.\nlet HKMetadataKeyLapLength: String\nA key that indicates the length of a lap during a workout.\nlet HKMetadataKeySWOLFScore: String"
  },
  {
    "title": "HKActivityMoveMode | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkactivitymovemode",
    "html": "Overview\n\nFor younger users, HealthKit’s activity summary can track move time instead of active energy burned:\n\nHealthKit encourages users under 13 years old to track move time.\n\nUsers 13 to 18 years old can choose to track move time or active energy burned.\n\nAll users over 18 years old track active energy burned.\n\nTopics\nMove Modes\ncase activeEnergy\nA value that indicates the Move ring measures active energy burned.\ncase appleMoveTime\nA value that indicates the Activity app’s Move ring measures Apple Move Time.\nRelationships\nConforms To\nSendable\nSee Also\nAccessing the summary’s data\nvar activityMoveMode: HKActivityMoveMode\nThe move mode that they system used for this activity summary.\nvar activeEnergyBurned: HKQuantity\nThe amount of active energy the user burned during the specified day.\nvar activeEnergyBurnedGoal: HKQuantity\nThe user’s daily goal for active energy burned.\nvar appleMoveTime: HKQuantity\nThe amount of time the user spent performing activities that involve full-body movements during the specified day.\nvar appleMoveTimeGoal: HKQuantity\nThe user’s daily goal for move time.\nvar appleExerciseTime: HKQuantity\nThe amount of time that the user has spent exercising during the specified day.\nvar appleExerciseTimeGoal: HKQuantity\nThe user’s daily exercise goal.\nvar exerciseTimeGoal: HKQuantity?\nThe user’s daily goal for exercise time.\nvar appleStandHours: HKQuantity\nThe number hours in the specified day during which the user has stood and moved for at least a minute per hour.\nvar standHoursGoal: HKQuantity?\nThe user’s daily goal for stand hours.\nvar appleStandHoursGoal: HKQuantity\nThe user’s daily goal for stand hours.\nenum HKCategoryValueAppleStandHour\nCategories that the system used to indicate whether the user stood during the sample’s duration.\nfunc dateComponents(for: Calendar) -> DateComponents\nDate components that uniquely identify the day represented by the summary object."
  },
  {
    "title": "metadata | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkdeletedobject/2868208-metadata",
    "html": "Discussion\n\nThe system only copies the HKMetadataKeySyncIdentifier and HKMetadataKeySyncVersion keys from the original object. All other metadata is lost.\n\nFor more information about the metadata’s format and content, see the HKObject class’s metadata property.\n\nSee Also\nIdentifying Deleted Objects\nvar uuid: UUID\nThe universally unique identifier (UUID) for the HealthKit object that was deleted from the store."
  },
  {
    "title": "appleMoveTime | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkactivitysummary/3197591-applemovetime",
    "html": "Discussion\n\nMove time measures every full minute where the watch detects active, full-body movements, like walking, running, or playing in the playground. For younger users, HealthKit’s activity summary can track move time instead of active energy burned. For more information, see HKActivityMoveMode.appleMoveTime.\n\nThe HKQuantity object for this property must use units of time, such as hour(), minute(), or second().\n\nSee Also\nAccessing the summary’s data\nvar activityMoveMode: HKActivityMoveMode\nThe move mode that they system used for this activity summary.\nenum HKActivityMoveMode\nConstants that specify the value measured by the Move ring on the user’s device.\nvar activeEnergyBurned: HKQuantity\nThe amount of active energy the user burned during the specified day.\nvar activeEnergyBurnedGoal: HKQuantity\nThe user’s daily goal for active energy burned.\nvar appleMoveTimeGoal: HKQuantity\nThe user’s daily goal for move time.\nvar appleExerciseTime: HKQuantity\nThe amount of time that the user has spent exercising during the specified day.\nvar appleExerciseTimeGoal: HKQuantity\nThe user’s daily exercise goal.\nvar exerciseTimeGoal: HKQuantity?\nThe user’s daily goal for exercise time.\nvar appleStandHours: HKQuantity\nThe number hours in the specified day during which the user has stood and moved for at least a minute per hour.\nvar standHoursGoal: HKQuantity?\nThe user’s daily goal for stand hours.\nvar appleStandHoursGoal: HKQuantity\nThe user’s daily goal for stand hours.\nenum HKCategoryValueAppleStandHour\nCategories that the system used to indicate whether the user stood during the sample’s duration.\nfunc dateComponents(for: Calendar) -> DateComponents\nDate components that uniquely identify the day represented by the summary object."
  },
  {
    "title": "discrete | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquantityaggregationstyle/1615543-discrete",
    "html": "Deprecated\n\nUse HKQuantityAggregationStyle.discreteArithmetic instead.\n\nDiscussion\n\nYou typically use discrete types to monitor the change in the value over time. For example, body mass, heart rate, temperature, and respiratory rate are all discrete quantity types. You can also query for the minimum or maximum value in a given time period."
  },
  {
    "title": "exerciseTimeGoal | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkactivitysummary/3929683-exercisetimegoal",
    "html": "Discussion\n\nThe HKQuantity object for this property must use time units.\n\nSee Also\nAccessing the summary’s data\nvar activityMoveMode: HKActivityMoveMode\nThe move mode that they system used for this activity summary.\nenum HKActivityMoveMode\nConstants that specify the value measured by the Move ring on the user’s device.\nvar activeEnergyBurned: HKQuantity\nThe amount of active energy the user burned during the specified day.\nvar activeEnergyBurnedGoal: HKQuantity\nThe user’s daily goal for active energy burned.\nvar appleMoveTime: HKQuantity\nThe amount of time the user spent performing activities that involve full-body movements during the specified day.\nvar appleMoveTimeGoal: HKQuantity\nThe user’s daily goal for move time.\nvar appleExerciseTime: HKQuantity\nThe amount of time that the user has spent exercising during the specified day.\nvar appleExerciseTimeGoal: HKQuantity\nThe user’s daily exercise goal.\nvar appleStandHours: HKQuantity\nThe number hours in the specified day during which the user has stood and moved for at least a minute per hour.\nvar standHoursGoal: HKQuantity?\nThe user’s daily goal for stand hours.\nvar appleStandHoursGoal: HKQuantity\nThe user’s daily goal for stand hours.\nenum HKCategoryValueAppleStandHour\nCategories that the system used to indicate whether the user stood during the sample’s duration.\nfunc dateComponents(for: Calendar) -> DateComponents\nDate components that uniquely identify the day represented by the summary object."
  },
  {
    "title": "HKWorkoutActivityType.tableTennis | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkoutactivitytype/tabletennis",
    "html": "See Also\nRacket sports\ncase badminton\nThe constant for playing badminton.\ncase pickleball\nThe constant for playing pickleball.\ncase racquetball\nThe constant for playing racquetball.\ncase squash\nThe constant for playing squash.\ncase tennis\nThe constant for playing tennis."
  },
  {
    "title": "HKPredicateKeyPathWorkout | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkpredicatekeypathworkout",
    "html": "See Also\nWorkout keys\nlet HKPredicateKeyPathWorkoutType: String\nThe key path for accessing the workout’s type.\nlet HKPredicateKeyPathWorkoutDuration: String\nThe key path for accessing the workout’s duration.\nlet HKPredicateKeyPathWorkoutAverageQuantity: String\nThe key path for accessing workouts with a matching average quantity.\nlet HKPredicateKeyPathWorkoutMaximumQuantity: String\nThe key path for accessing workouts with a matching maximum quantity.\nlet HKPredicateKeyPathWorkoutMinimumQuantity: String\nThe key path for accessing workouts with a matching minimum quantity.\nlet HKPredicateKeyPathWorkoutSumQuantity: String\nThe key path for accessing workouts with a matching sum.\nlet HKPredicateKeyPathWorkoutTotalDistance: String\nThe key path for accessing the workout’s total distance.\nlet HKPredicateKeyPathWorkoutTotalEnergyBurned: String\nThe key path for accessing the workout’s total energy burned.\nlet HKPredicateKeyPathWorkoutTotalFlightsClimbed: String\nThe key path for accessing the total number of flights of stairs climbed during the workout.\nlet HKPredicateKeyPathWorkoutTotalSwimmingStrokeCount: String\nThe key path for accessing the number of strokes during a swimming workout."
  },
  {
    "title": "appleMoveTimeGoal | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkactivitysummary/3197592-applemovetimegoal",
    "html": "Discussion\n\nThe HKQuantity object for this property must use units of time, such as hour(), minute(), or second(). Apple Watch automatically calculates move time based on readings from the watch’s sensors.\n\nSee Also\nAccessing the summary’s data\nvar activityMoveMode: HKActivityMoveMode\nThe move mode that they system used for this activity summary.\nenum HKActivityMoveMode\nConstants that specify the value measured by the Move ring on the user’s device.\nvar activeEnergyBurned: HKQuantity\nThe amount of active energy the user burned during the specified day.\nvar activeEnergyBurnedGoal: HKQuantity\nThe user’s daily goal for active energy burned.\nvar appleMoveTime: HKQuantity\nThe amount of time the user spent performing activities that involve full-body movements during the specified day.\nvar appleExerciseTime: HKQuantity\nThe amount of time that the user has spent exercising during the specified day.\nvar appleExerciseTimeGoal: HKQuantity\nThe user’s daily exercise goal.\nvar exerciseTimeGoal: HKQuantity?\nThe user’s daily goal for exercise time.\nvar appleStandHours: HKQuantity\nThe number hours in the specified day during which the user has stood and moved for at least a minute per hour.\nvar standHoursGoal: HKQuantity?\nThe user’s daily goal for stand hours.\nvar appleStandHoursGoal: HKQuantity\nThe user’s daily goal for stand hours.\nenum HKCategoryValueAppleStandHour\nCategories that the system used to indicate whether the user stood during the sample’s duration.\nfunc dateComponents(for: Calendar) -> DateComponents\nDate components that uniquely identify the day represented by the summary object.\nRelated Documentation\nstatic let activeEnergyBurned: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of active energy the user has burned."
  },
  {
    "title": "HKPredicateKeyPathClinicalRecordFHIRResourceIdentifier | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkpredicatekeypathclinicalrecordfhirresourceidentifier",
    "html": "Discussion\n\nThe FHIR resource identifier is only unique for a particular resource type from a given source. To uniquely identify a FHIR resource, you must compare the identifier, the resource type, and the source.\n\nSee Also\nClinical record keys\nlet HKPredicateKeyPathClinicalRecordFHIRResourceType: String\nThe key path for accessing the resource type of a Fast Healthcare Interoperability Resources (FHIR) record."
  },
  {
    "title": "standHoursGoal | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkactivitysummary/3929684-standhoursgoal",
    "html": "Discussion\n\nThe HKQuantity object for this property must use count() units.\n\nSee Also\nAccessing the summary’s data\nvar activityMoveMode: HKActivityMoveMode\nThe move mode that they system used for this activity summary.\nenum HKActivityMoveMode\nConstants that specify the value measured by the Move ring on the user’s device.\nvar activeEnergyBurned: HKQuantity\nThe amount of active energy the user burned during the specified day.\nvar activeEnergyBurnedGoal: HKQuantity\nThe user’s daily goal for active energy burned.\nvar appleMoveTime: HKQuantity\nThe amount of time the user spent performing activities that involve full-body movements during the specified day.\nvar appleMoveTimeGoal: HKQuantity\nThe user’s daily goal for move time.\nvar appleExerciseTime: HKQuantity\nThe amount of time that the user has spent exercising during the specified day.\nvar appleExerciseTimeGoal: HKQuantity\nThe user’s daily exercise goal.\nvar exerciseTimeGoal: HKQuantity?\nThe user’s daily goal for exercise time.\nvar appleStandHours: HKQuantity\nThe number hours in the specified day during which the user has stood and moved for at least a minute per hour.\nvar appleStandHoursGoal: HKQuantity\nThe user’s daily goal for stand hours.\nenum HKCategoryValueAppleStandHour\nCategories that the system used to indicate whether the user stood during the sample’s duration.\nfunc dateComponents(for: Calendar) -> DateComponents\nDate components that uniquely identify the day represented by the summary object."
  },
  {
    "title": "dateComponents(for:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkactivitysummary/1615628-datecomponents",
    "html": "Parameters\ncalendar\n\nThe calendar used to calculate the date components.\n\nReturn Value\n\nDate components that uniquely specify a day. For example, for the Gregorian calendar, the date components consist of only the era, year, month, and day.\n\nDiscussion\n\nEach activity summary covers a single day. The day always begins and ends at midnight; however, the day may be longer or shorter than 24 hours (for example, if the user traveled across time zones).\n\nSee Also\nAccessing the summary’s data\nvar activityMoveMode: HKActivityMoveMode\nThe move mode that they system used for this activity summary.\nenum HKActivityMoveMode\nConstants that specify the value measured by the Move ring on the user’s device.\nvar activeEnergyBurned: HKQuantity\nThe amount of active energy the user burned during the specified day.\nvar activeEnergyBurnedGoal: HKQuantity\nThe user’s daily goal for active energy burned.\nvar appleMoveTime: HKQuantity\nThe amount of time the user spent performing activities that involve full-body movements during the specified day.\nvar appleMoveTimeGoal: HKQuantity\nThe user’s daily goal for move time.\nvar appleExerciseTime: HKQuantity\nThe amount of time that the user has spent exercising during the specified day.\nvar appleExerciseTimeGoal: HKQuantity\nThe user’s daily exercise goal.\nvar exerciseTimeGoal: HKQuantity?\nThe user’s daily goal for exercise time.\nvar appleStandHours: HKQuantity\nThe number hours in the specified day during which the user has stood and moved for at least a minute per hour.\nvar standHoursGoal: HKQuantity?\nThe user’s daily goal for stand hours.\nvar appleStandHoursGoal: HKQuantity\nThe user’s daily goal for stand hours.\nenum HKCategoryValueAppleStandHour\nCategories that the system used to indicate whether the user stood during the sample’s duration."
  },
  {
    "title": "delegate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkliveworkoutbuilder/2962892-delegate",
    "html": "See Also\nMonitoring and controlling the workout\nprotocol HKLiveWorkoutBuilderDelegate\nA protocol for monitoring live workout builders.\nvar currentWorkoutActivity: HKWorkoutActivity?\nThe current workout activity.\nvar shouldCollectWorkoutEvents: Bool\nA Boolean value that determines whether the workout builder automatically adds events generated by the workout session."
  },
  {
    "title": "HKPredicateKeyPathSource | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkpredicatekeypathsource",
    "html": "See Also\nDevice and source keys\nlet HKPredicateKeyPathDevice: String\nThe key path for accessing the object’s device inside a predicate format string.\nlet HKPredicateKeyPathSourceRevision: String\nThe key path for accessing the object’s source revision inside a predicate format string."
  },
  {
    "title": "locationType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkoutconfiguration/1649491-locationtype",
    "html": "Discussion\n\nFor a list of possible values, see HKWorkoutSessionLocationType.\n\nSee Also\nSession settings\nvar activityType: HKWorkoutActivityType\nThe workout session’s activity type.\nenum HKWorkoutSessionLocationType\nA constant indicating whether the workout session takes place indoors or outdoors.\nvar swimmingLocationType: HKWorkoutSwimmingLocationType\nThe workout session’s swimming location.\nenum HKWorkoutSwimmingLocationType\nThe possible locations for swimming.\nvar lapLength: HKQuantity?\nThe length of the lap for a workout session."
  },
  {
    "title": "currentWorkoutActivity | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkliveworkoutbuilder/3955293-currentworkoutactivity",
    "html": "Discussion\n\nThis property contains a workout activity that’s currently in progress, an activity with an endDate property set to nil. If you end the activity — for example, by calling endCurrentActivity(on:) or updateActivity(uuid:end:completion:) — the system sets this property to nil until you begin a new activity.\n\nSee Also\nMonitoring and controlling the workout\nvar delegate: HKLiveWorkoutBuilderDelegate?\nThe live builder’s delegate.\nprotocol HKLiveWorkoutBuilderDelegate\nA protocol for monitoring live workout builders.\nvar shouldCollectWorkoutEvents: Bool\nA Boolean value that determines whether the workout builder automatically adds events generated by the workout session."
  },
  {
    "title": "workoutSession | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkliveworkoutbuilder/2962895-workoutsession",
    "html": "See Also\nConfiguring a live workout builder\nvar dataSource: HKLiveWorkoutDataSource?\nA data source that provides live data from a workout session automatically."
  },
  {
    "title": "activityType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkoutconfiguration/1649492-activitytype",
    "html": "Discussion\n\nFor a list of possible values, see HKWorkoutActivityType.\n\nSee Also\nSession settings\nvar locationType: HKWorkoutSessionLocationType\nThe workout session’s location.\nenum HKWorkoutSessionLocationType\nA constant indicating whether the workout session takes place indoors or outdoors.\nvar swimmingLocationType: HKWorkoutSwimmingLocationType\nThe workout session’s swimming location.\nenum HKWorkoutSwimmingLocationType\nThe possible locations for swimming.\nvar lapLength: HKQuantity?\nThe length of the lap for a workout session."
  },
  {
    "title": "dataSource | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkliveworkoutbuilder/2962891-datasource",
    "html": "See Also\nConfiguring a live workout builder\nvar workoutSession: HKWorkoutSession?\nThe workout session created by the data source and associated with this builder."
  },
  {
    "title": "discard() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkseriesbuilder/2873522-discard",
    "html": "Discussion\n\nAny further calls to the builder raise an exception."
  },
  {
    "title": "HKMetricPrefix.kilo | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkmetricprefix/kilo",
    "html": "See Also\nPrefixes\ncase none\nA prefix that does not modify the base unit.\ncase femto\nA prefix that multiplies the base unit by 1e-15.\ncase pico\nA prefix that multiplies the base unit by 1e-12.\ncase nano\nA prefix that multiplies the base unit by 1e-9.\ncase micro\nA prefix that multiplies the base unit by 1e-6.\ncase milli\nA prefix that multiplies the base unit by 0.001.\ncase centi\nA prefix that multiplies the base unit by 0.01.\ncase deci\nA prefix that multiplies the base unit by 0.1.\ncase deca\nA prefix that multiplies the base unit by 10.\ncase hecto\nA prefix that multiplies the base unit by 100.\ncase mega\nA prefix that multiplies the base unit by 1e6.\ncase giga\nA prefix that multiplies the base unit by 1e9.\ncase tera\nA prefix that multiplies the base unit by 1e12."
  },
  {
    "title": "workoutSession(_:didFailWithError:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkoutsessiondelegate/1627951-workoutsession",
    "html": "Required\n\nParameters\nworkoutSession\n\nThe workout session that failed.\n\nerror\n\nAn error object describing the failure.\n\nDiscussion\n\nWhen the state of the workout session changes due to an error, HealthKit always calls this method before calling the workoutSession(_:didChangeTo:from:date:) method.\n\nFor example, if a second app starts a workout session, HealthKit calls the current session’s workoutSession(_:didFailWithError:) method. Next, it changes current session’s state to the HKWorkoutSessionState.ended value. Finally, HealthKit calls the current session’s workoutSession(_:didChangeTo:from:date:) method.\n\nSee Also\nTracking workout sessions\nfunc workoutSession(HKWorkoutSession, didChangeTo: HKWorkoutSessionState, from: HKWorkoutSessionState, date: Date)\nTells the delegate that the session’s state changed.\n\nRequired\n\nfunc workoutSession(HKWorkoutSession, didGenerate: HKWorkoutEvent)\nTells the delegate that the system generated a workout event.\nfunc workoutSession(HKWorkoutSession, didBeginActivityWith: HKWorkoutConfiguration, date: Date)\nTells the delegate that a new workout session began.\nfunc workoutSession(HKWorkoutSession, didEndActivityWith: HKWorkoutConfiguration, date: Date)\nTells the session that the current workout activity ended."
  },
  {
    "title": "workoutSession(_:didEndActivityWith:date:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkoutsessiondelegate/3943317-workoutsession",
    "html": "Parameters\nworkoutSession\n\nThe workout session for the activity that just ended.\n\nworkoutConfiguration\n\nThe workout configuration object for the activity.\n\ndate\n\nThe end date and time for the activity.\n\nSee Also\nTracking workout sessions\nfunc workoutSession(HKWorkoutSession, didChangeTo: HKWorkoutSessionState, from: HKWorkoutSessionState, date: Date)\nTells the delegate that the session’s state changed.\n\nRequired\n\nfunc workoutSession(HKWorkoutSession, didFailWithError: Error)\nTells the delegate that the session failed with an error.\n\nRequired\n\nfunc workoutSession(HKWorkoutSession, didGenerate: HKWorkoutEvent)\nTells the delegate that the system generated a workout event.\nfunc workoutSession(HKWorkoutSession, didBeginActivityWith: HKWorkoutConfiguration, date: Date)\nTells the delegate that a new workout session began."
  },
  {
    "title": "workoutSession(_:didBeginActivityWith:date:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkoutsessiondelegate/3943316-workoutsession",
    "html": "Parameters\nworkoutSession\n\nThe workout session that receives the new activity.\n\nworkoutConfiguration\n\nThe workout configuration object for the new activity.\n\ndate\n\nThe activity’s start date and time.\n\nSee Also\nTracking workout sessions\nfunc workoutSession(HKWorkoutSession, didChangeTo: HKWorkoutSessionState, from: HKWorkoutSessionState, date: Date)\nTells the delegate that the session’s state changed.\n\nRequired\n\nfunc workoutSession(HKWorkoutSession, didFailWithError: Error)\nTells the delegate that the session failed with an error.\n\nRequired\n\nfunc workoutSession(HKWorkoutSession, didGenerate: HKWorkoutEvent)\nTells the delegate that the system generated a workout event.\nfunc workoutSession(HKWorkoutSession, didEndActivityWith: HKWorkoutConfiguration, date: Date)\nTells the session that the current workout activity ended."
  },
  {
    "title": "workoutSession(_:didDisconnectFromRemoteDeviceWithError:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkoutsessiondelegate/4160749-workoutsession",
    "html": "Parameters\nworkoutSession\n\nThe mirrored workout session that disconnected.\n\nerror\n\nIf an error caused the disconnection, then this parameter contains the error value. Otherwise, it’s nil.\n\nDiscussion\n\nAfter the system calls this method, the provided workout session is no longer valid, and you can no longer use it.\n\nfunc clearWorkoutSession() {\n    state = .notRunning\n    session = nil\n}\n\n\nnonisolated func workoutSession(_ workoutSession: HKWorkoutSession, didDisconnectFromRemoteDeviceWithError error: Error?) {\n    Task {\n        // Clear the old session.\n        await clearWorkoutSession()\n    }\n\n\n    logger.debug(\"*** Remote workout session disconnected. ***\")\n    if let error {\n        fatalError(\"*** Disconnected with an error: \\(error.localizedDescription) ***\")\n    }\n}\n\n\nIf the primary workout session is still running, it automatically tries to reconnect. If successful, the companion iOS device calls the workoutSessionMirroringStartHandler block again, passing in a new, valid HKWorkoutSession instance.\n\nSee Also\nWorking with mirrored sessions\nfunc workoutSession(HKWorkoutSession, didReceiveDataFromRemoteWorkoutSession: [Data])\nPasses data from the remote workout session to the session delegate."
  },
  {
    "title": "workoutSession(_:didReceiveDataFromRemoteWorkoutSession:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkoutsessiondelegate/4266951-workoutsession",
    "html": "Parameters\nworkoutSession\n\nThe workout session that received the data.\n\ndata\n\nAn array of data objects sent from the remote session. The array contains the data objects in the order the system received them.\n\nDiscussion\n\nImplement this method to decode and use the data sent from the remote workout session. Your app can send data from either the HKWorkoutSessionType.mirrored or HKWorkoutSessionType.primary workout session.\n\nnonisolated func workoutSession(_ workoutSession: HKWorkoutSession, didReceiveDataFromRemoteWorkoutSession data: [Data]) {\n    for archivedData in data {\n        do {\n            let decoder = try NSKeyedUnarchiver(forReadingFrom: archivedData)\n            if let healthData = decoder.decodeObject() as? HealthData {\n                Task {\n                    await set(data: healthData)\n                }\n            }\n        }\n        catch {\n            // Handle the error here.\n            fatalError(\"*** An error occurred when trying to decode the incoming data: \\(archivedData) ***\")\n        }\n    }\n}\n\n\nIn iOS, your app can go into the background and become suspended. When suspended, HealthKit gathers the data coming from the remote session. When the app resumes, HealthKit sends an array containing all the  data objects it has accumulated to this delegate method. The data objects in the array appear in the order that the local system received them. During the workout session, HealthKit wakes the iOS app periodically to deliver any cached data objects, but there might be several minutes between delegate calls.\n\nOn watchOS, the workout session keeps the app running even if it’s in the background; however, the system can temporarily suspend the app — for example, if the app uses an excessive amount of CPU in the background. See Running workout sessions. While suspended, HealthKit caches the incoming data objects and delivers an array of data objects when the app resumes, just like in the iOS app.\n\nSee Also\nWorking with mirrored sessions\nfunc workoutSession(HKWorkoutSession, didDisconnectFromRemoteDeviceWithError: Error?)\nTells the delegate that the mirrored workout session disconnected from the primary session."
  },
  {
    "title": "workoutSession(_:didGenerate:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkoutsessiondelegate/1650688-workoutsession",
    "html": "Parameters\nworkoutSession\n\nThe workout session associated with the event.\n\nevent\n\nThe event that the system generated. For a list of possible values, see HKWorkoutEvent.\n\nDiscussion\n\nYou can save the generated events and use them when creating a HKWorkout object for the session.\n\nSee Also\nTracking workout sessions\nfunc workoutSession(HKWorkoutSession, didChangeTo: HKWorkoutSessionState, from: HKWorkoutSessionState, date: Date)\nTells the delegate that the session’s state changed.\n\nRequired\n\nfunc workoutSession(HKWorkoutSession, didFailWithError: Error)\nTells the delegate that the session failed with an error.\n\nRequired\n\nfunc workoutSession(HKWorkoutSession, didBeginActivityWith: HKWorkoutConfiguration, date: Date)\nTells the delegate that a new workout session began.\nfunc workoutSession(HKWorkoutSession, didEndActivityWith: HKWorkoutConfiguration, date: Date)\nTells the session that the current workout activity ended."
  },
  {
    "title": "HKWorkoutEventType.motionPaused | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkouteventtype/motionpaused",
    "html": "Discussion\n\nDuring running workout sessions, Apple Watch can automatically generate motion pause events when the user stops moving. Users can enable or disable this feature using the watch’s Settings > General > Workout > Autopause setting.\n\nSee Also\nEvents\ncase pause\nA constant indicating that the workout has paused.\ncase resume\nA constant indicating that the workout has resumed.\ncase motionResumed\nA constant indicating that the system has automatically resumed a workout session.\ncase pauseOrResumeRequest\nA constant indicating that the user has requested a pause or resume.\ncase lap\nA constant indicating a lap.\ncase segment\nA constant indicating a period of time of interest during a workout.\ncase marker\nA constant indicating a point of interest during a workout session."
  },
  {
    "title": "HKWorkoutEventType.pauseOrResumeRequest | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkouteventtype/pauseorresumerequest",
    "html": "Discussion\n\nDuring a workout session, the user can request a pause or resume by pressing both watch buttons. When you receive this event, pause or resume your app’s current workout session.\n\nSee Also\nEvents\ncase pause\nA constant indicating that the workout has paused.\ncase resume\nA constant indicating that the workout has resumed.\ncase motionPaused\nA constant indicating that the system has automatically paused a workout session.\ncase motionResumed\nA constant indicating that the system has automatically resumed a workout session.\ncase lap\nA constant indicating a lap.\ncase segment\nA constant indicating a period of time of interest during a workout.\ncase marker\nA constant indicating a point of interest during a workout session."
  },
  {
    "title": "HKWorkoutEventType.motionResumed | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkouteventtype/motionresumed",
    "html": "Discussion\n\nIf the system has automatically paused a running workout session, it also generates a motion resumed event when the user starts moving again.\n\nSee Also\nEvents\ncase pause\nA constant indicating that the workout has paused.\ncase resume\nA constant indicating that the workout has resumed.\ncase motionPaused\nA constant indicating that the system has automatically paused a workout session.\ncase pauseOrResumeRequest\nA constant indicating that the user has requested a pause or resume.\ncase lap\nA constant indicating a lap.\ncase segment\nA constant indicating a period of time of interest during a workout.\ncase marker\nA constant indicating a point of interest during a workout session."
  },
  {
    "title": "HKWorkoutEventType.segment | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkouteventtype/segment",
    "html": "Discussion\n\nUse segments to highlight important time periods during a workout. For example, you could use different segments to mark when a runner is going up or downhill. Similarly, when swimming, you can use segments to group consecutive laps with the same style of stroke.\n\nUnlike laps, segments can freely overlap.\n\nSee Also\nEvents\ncase pause\nA constant indicating that the workout has paused.\ncase resume\nA constant indicating that the workout has resumed.\ncase motionPaused\nA constant indicating that the system has automatically paused a workout session.\ncase motionResumed\nA constant indicating that the system has automatically resumed a workout session.\ncase pauseOrResumeRequest\nA constant indicating that the user has requested a pause or resume.\ncase lap\nA constant indicating a lap.\ncase marker\nA constant indicating a point of interest during a workout session."
  },
  {
    "title": "HKDevicePropertyKeyName | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkdevicepropertykeyname",
    "html": "See Also\nValid Device Property Keys\nlet HKDevicePropertyKeyManufacturer: String\nThe device’s manufacturer.\nlet HKDevicePropertyKeyModel: String\nThe device’s model.\nlet HKDevicePropertyKeyHardwareVersion: String\nThe device’s hardware version.\nlet HKDevicePropertyKeyFirmwareVersion: String\nThe device’s firmware version.\nlet HKDevicePropertyKeySoftwareVersion: String\nThe device’s software version.\nlet HKDevicePropertyKeyLocalIdentifier: String\nA unique identifier for the device on the hardware running the app. For more information, see localIdentifier.\nlet HKDevicePropertyKeyUDIDeviceIdentifier: String\nThe device’s UDI Device Identifier."
  },
  {
    "title": "HKWorkoutSessionType.mirrored | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkoutsessiontype/mirrored",
    "html": "See Also\nTypes\ncase primary\nA primary session running on watchOS."
  },
  {
    "title": "HKWorkoutActivityType.transition | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkoutactivitytype/transition",
    "html": "Discussion\n\nUse this constant to create an HKWorkoutActivity instance that represents the transition between sports in a HKWorkoutActivityType.swimBikeRun workout.\n\nSee Also\nMultisport activities\ncase swimBikeRun\nThe constant for multisport activities like triathlons."
  },
  {
    "title": "HKWorkoutActivityType.waterFitness | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkoutactivitytype/waterfitness",
    "html": "See Also\nWater activities\ncase paddleSports\nThe constant for canoeing, kayaking, paddling an outrigger, paddling a stand-up paddle board, and related sports.\ncase rowing\nThe constant for rowing.\ncase sailing\nThe constant for sailing.\ncase surfingSports\nThe constant for a variety of surf sports, including surfing, kite surfing, and wind surfing.\ncase swimming\nThe constant for swimming.\ncase waterPolo\nThe constant for playing water polo.\ncase waterSports\nThe constant for a variety of water sports, including water skiing, wake boarding, and related activities."
  },
  {
    "title": "HKWorkoutActivityType.kickboxing | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkoutactivitytype/kickboxing",
    "html": "See Also\nMartial arts\ncase boxing\nThe constant for boxing.\ncase martialArts\nThe constant for practicing martial arts.\ncase taiChi\nThe constant for tai chi.\ncase wrestling\nThe constant for wrestling."
  },
  {
    "title": "HKWorkoutSessionLocationType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkoutsessionlocationtype",
    "html": "Topics\nConstants\ncase unknown\nIt is not known whether the workout session is taking place indoors or outdoors.\ncase indoor\nThe workout session is indoors.\ncase outdoor\nThe workout session is outdoors.\nRelationships\nConforms To\nSendable\nSee Also\nSession settings\nvar activityType: HKWorkoutActivityType\nThe workout session’s activity type.\nvar locationType: HKWorkoutSessionLocationType\nThe workout session’s location.\nvar swimmingLocationType: HKWorkoutSwimmingLocationType\nThe workout session’s swimming location.\nenum HKWorkoutSwimmingLocationType\nThe possible locations for swimming.\nvar lapLength: HKQuantity?\nThe length of the lap for a workout session."
  },
  {
    "title": "swimmingLocationType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkoutconfiguration/2342785-swimminglocationtype",
    "html": "See Also\nSession settings\nvar activityType: HKWorkoutActivityType\nThe workout session’s activity type.\nvar locationType: HKWorkoutSessionLocationType\nThe workout session’s location.\nenum HKWorkoutSessionLocationType\nA constant indicating whether the workout session takes place indoors or outdoors.\nenum HKWorkoutSwimmingLocationType\nThe possible locations for swimming.\nvar lapLength: HKQuantity?\nThe length of the lap for a workout session."
  },
  {
    "title": "lapLength | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkoutconfiguration/2342795-laplength",
    "html": "See Also\nSession settings\nvar activityType: HKWorkoutActivityType\nThe workout session’s activity type.\nvar locationType: HKWorkoutSessionLocationType\nThe workout session’s location.\nenum HKWorkoutSessionLocationType\nA constant indicating whether the workout session takes place indoors or outdoors.\nvar swimmingLocationType: HKWorkoutSwimmingLocationType\nThe workout session’s swimming location.\nenum HKWorkoutSwimmingLocationType\nThe possible locations for swimming."
  },
  {
    "title": "count | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkseriessample/2873675-count",
    "html": "Discussion\n\nYou can access the items in the series using the corresponding query. For example, to access route data, use a HKWorkoutRouteQuery object."
  },
  {
    "title": "HKWorkoutEventType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkouteventtype",
    "html": "Topics\nEvents\ncase pause\nA constant indicating that the workout has paused.\ncase resume\nA constant indicating that the workout has resumed.\ncase motionPaused\nA constant indicating that the system has automatically paused a workout session.\ncase motionResumed\nA constant indicating that the system has automatically resumed a workout session.\ncase pauseOrResumeRequest\nA constant indicating that the user has requested a pause or resume.\ncase lap\nA constant indicating a lap.\ncase segment\nA constant indicating a period of time of interest during a workout.\ncase marker\nA constant indicating a point of interest during a workout session.\nRelationships\nConforms To\nSendable"
  },
  {
    "title": "dateInterval | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkoutevent/2867033-dateinterval",
    "html": "Discussion\n\nMost event types support only date intervals with a zero-length duration. These intervals indicate a single point in time, represented by the interval’s startDate property. Only HKWorkoutEventType.lap and HKWorkoutEventType.segment event types support intervals with nonzero durations.\n\nSee Also\nGetting property data\nvar type: HKWorkoutEventType\nThe type of workout event.\nvar metadata: [String : Any]?\nThe metadata associated with the workout event."
  },
  {
    "title": "type | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkoutevent/1615767-type",
    "html": "Discussion\n\nFor a description of possible events, see HKWorkoutEventType.\n\nSee Also\nGetting property data\nvar dateInterval: DateInterval\nThe time and duration of the event.\nvar metadata: [String : Any]?\nThe metadata associated with the workout event."
  },
  {
    "title": "metadata | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkoutevent/1649817-metadata",
    "html": "See Also\nGetting property data\nvar dateInterval: DateInterval\nThe time and duration of the event.\nvar type: HKWorkoutEventType\nThe type of workout event."
  },
  {
    "title": "init(type:dateInterval:metadata:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkoutevent/2867038-init",
    "html": "Parameters\ntype\n\nThe type of workout event. For a description of possible events, see HKWorkoutEventType.\n\ndateInterval\n\nMost event types support only date intervals with a zero-length duration. These intervals indicate a single point in time, represented by the interval’s startDate property. Only HKWorkoutEventType.lap and HKWorkoutEventType.segment event types support intervals with nonzero durations.\n\nmetadata\n\nThe metadata associated with the workout event.\n\nReturn Value\n\nA new workout event."
  },
  {
    "title": "allStatistics | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkoutbuilder/3979256-allstatistics",
    "html": "Discussion\n\nHealthKit calculates an HKStatistics object for each HKQuantityType, based on the HKQuantitySample objects collected by the workout builder."
  },
  {
    "title": "disableCollection(for:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkliveworkoutdatasource/2994349-disablecollection",
    "html": "See Also\nCalculating statistics\nfunc enableCollection(for: HKQuantityType, predicate: NSPredicate?)\nBegins automatically calculating statistics for samples that match the quantity type and predicate."
  },
  {
    "title": "discardWorkout() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkoutbuilder/2962915-discardworkout",
    "html": "See Also\nEnding the workout\nfunc endCollection(withEnd: Date, completion: (Bool, Error?) -> Void)\nStops the collection of data, sets the workout’s end date, and deactivates the workout builder.\nvar endDate: Date?\nThe workout’s end date and time.\nfunc finishWorkout(completion: (HKWorkout?, Error?) -> Void)\nCreates the workout, using the samples and events added to the builder, and saves it to the HealthKit store."
  },
  {
    "title": "updateActivity(uuid:end:completion:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkoutbuilder/3951081-updateactivity",
    "html": "Parameters\nUUID\n\nThe workout activity’s universally unique identifier (UUID).\n\nendDate\n\nThe end date and time for the workout activity.\n\ncompletion\n\nA callback handler that the system calls after updating the workout activity. The system calls the callback handler on an anonymous background queue.\n\nThe callback handler takes the following parameters:\n\nsuccess\n\nContains true if the builder successfully updates the activity.\n\nerror\n\nIf the success parameter is false, this parameter contains information about the error; otherwise, it’s nil.\n\nDiscussion\n\nConcurrency Note\n\nYou can call this method from synchronous code using a completion handler, as shown on this page, or you can call it as an asynchronous method that has the following declaration:\n\nfunc updateActivity(uuid UUID: UUID, end endDate: Date) async throws\n\n\nFor information about concurrency and asynchronous code in Swift, see Calling Objective-C APIs Asynchronously.\n\nCalling this method after calling finishWorkout(completion:) fails with an error.\n\nSee Also\nManaging workout activities\nfunc addWorkoutActivity(HKWorkoutActivity, completion: (Bool, Error?) -> Void)\nAdds a workout activity to the workout builder.\nfunc updateActivity(uuid: UUID, adding: [String : Any], completion: (Bool, Error?) -> Void)\nAdds metadata to a workout activity that you’ve already added to the workout builder.\nvar workoutActivities: [HKWorkoutActivity]"
  },
  {
    "title": "HKMetadataKeyAppleFitnessPlusSession | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkmetadatakeyapplefitnessplussession",
    "html": "See Also\nWorkout Type\nlet HKMetadataKeyActivityType: String\nlet HKMetadataKeyCoachedWorkout: String\nA key that indicates whether the workout was performed with a coach or personal trainer.\nlet HKMetadataKeyGroupFitness: String\nA key that indicates whether the workout was performed as part of a group fitness class.\nlet HKMetadataKeyIndoorWorkout: String\nA key that indicates whether the workout was performed indoors.\nlet HKMetadataKeyWorkoutBrandName: String\nThe brand name of a particular workout."
  },
  {
    "title": "BufferedAsyncByteIterator.Element | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/bufferedasyncbyteiterator/element",
    "html": "See Also\nAccessing byte data\nfunc next() -> UInt8?\nAsynchronously returns the next byte of data."
  },
  {
    "title": "HKPredicateKeyPathWorkoutActivityAverageQuantity | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkpredicatekeypathworkoutactivityaveragequantity",
    "html": "See Also\nSpecifying predicate key paths\nlet HKPredicateKeyPathWorkoutActivity: String\nThe key path for accessing a specific workout activity.\nlet HKPredicateKeyPathWorkoutActivityType: String\nThe key path for accessing activities that match a workout activity type.\nlet HKPredicateKeyPathWorkoutActivityStartDate: String\nThe key path for accessing activities with a matching start date.\nlet HKPredicateKeyPathWorkoutActivityEndDate: String\nThe key path for accessing activities with a matching end date.\nlet HKPredicateKeyPathWorkoutActivityDuration: String\nThe key path for accessing activities with a matching duration.\nlet HKPredicateKeyPathWorkoutActivityMaximumQuantity: String\nThe key path for accessing activities with a matching maximum quantity.\nlet HKPredicateKeyPathWorkoutActivityMinimumQuantity: String\nThe key path for accessing activities with a matching minimum quantity.\nlet HKPredicateKeyPathWorkoutActivitySumQuantity: String\nThe key path for accessing activities with a matching sum."
  },
  {
    "title": "HKPredicateKeyPathWorkoutActivitySumQuantity | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkpredicatekeypathworkoutactivitysumquantity",
    "html": "See Also\nSpecifying predicate key paths\nlet HKPredicateKeyPathWorkoutActivity: String\nThe key path for accessing a specific workout activity.\nlet HKPredicateKeyPathWorkoutActivityType: String\nThe key path for accessing activities that match a workout activity type.\nlet HKPredicateKeyPathWorkoutActivityStartDate: String\nThe key path for accessing activities with a matching start date.\nlet HKPredicateKeyPathWorkoutActivityEndDate: String\nThe key path for accessing activities with a matching end date.\nlet HKPredicateKeyPathWorkoutActivityDuration: String\nThe key path for accessing activities with a matching duration.\nlet HKPredicateKeyPathWorkoutActivityAverageQuantity: String\nThe key path for accessing activities with a matching average quantity.\nlet HKPredicateKeyPathWorkoutActivityMaximumQuantity: String\nThe key path for accessing activities with a matching maximum quantity.\nlet HKPredicateKeyPathWorkoutActivityMinimumQuantity: String\nThe key path for accessing activities with a matching minimum quantity."
  },
  {
    "title": "enableCollection(for:predicate:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkliveworkoutdatasource/2994350-enablecollection",
    "html": "See Also\nCalculating statistics\nfunc disableCollection(for: HKQuantityType)\nStops automatically calculating statistics for the quantity type."
  },
  {
    "title": "next() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/bufferedasyncbyteiterator/3952534-next",
    "html": "Relationships\nFrom Protocol\nAsyncIteratorProtocol\nSee Also\nAccessing byte data\ntypealias BufferedAsyncByteIterator.Element\nThe type of element returned by the iterator."
  },
  {
    "title": "HKPredicateKeyPathWorkoutActivityMaximumQuantity | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkpredicatekeypathworkoutactivitymaximumquantity",
    "html": "See Also\nSpecifying predicate key paths\nlet HKPredicateKeyPathWorkoutActivity: String\nThe key path for accessing a specific workout activity.\nlet HKPredicateKeyPathWorkoutActivityType: String\nThe key path for accessing activities that match a workout activity type.\nlet HKPredicateKeyPathWorkoutActivityStartDate: String\nThe key path for accessing activities with a matching start date.\nlet HKPredicateKeyPathWorkoutActivityEndDate: String\nThe key path for accessing activities with a matching end date.\nlet HKPredicateKeyPathWorkoutActivityDuration: String\nThe key path for accessing activities with a matching duration.\nlet HKPredicateKeyPathWorkoutActivityAverageQuantity: String\nThe key path for accessing activities with a matching average quantity.\nlet HKPredicateKeyPathWorkoutActivityMinimumQuantity: String\nThe key path for accessing activities with a matching minimum quantity.\nlet HKPredicateKeyPathWorkoutActivitySumQuantity: String\nThe key path for accessing activities with a matching sum."
  },
  {
    "title": "HKPredicateKeyPathWorkoutActivityDuration | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkpredicatekeypathworkoutactivityduration",
    "html": "See Also\nSpecifying predicate key paths\nlet HKPredicateKeyPathWorkoutActivity: String\nThe key path for accessing a specific workout activity.\nlet HKPredicateKeyPathWorkoutActivityType: String\nThe key path for accessing activities that match a workout activity type.\nlet HKPredicateKeyPathWorkoutActivityStartDate: String\nThe key path for accessing activities with a matching start date.\nlet HKPredicateKeyPathWorkoutActivityEndDate: String\nThe key path for accessing activities with a matching end date.\nlet HKPredicateKeyPathWorkoutActivityAverageQuantity: String\nThe key path for accessing activities with a matching average quantity.\nlet HKPredicateKeyPathWorkoutActivityMaximumQuantity: String\nThe key path for accessing activities with a matching maximum quantity.\nlet HKPredicateKeyPathWorkoutActivityMinimumQuantity: String\nThe key path for accessing activities with a matching minimum quantity.\nlet HKPredicateKeyPathWorkoutActivitySumQuantity: String\nThe key path for accessing activities with a matching sum."
  },
  {
    "title": "workoutConfiguration | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkoutbuilder/2962923-workoutconfiguration",
    "html": "See Also\nCreating the builder\ninit(healthStore: HKHealthStore, configuration: HKWorkoutConfiguration, device: HKDevice?)\nReturns a new workout builder object that is not connected to a workout session or other data source.\nvar device: HKDevice?\nThe device associated with the workout."
  },
  {
    "title": "device | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkoutbuilder/2962914-device",
    "html": "See Also\nCreating the builder\ninit(healthStore: HKHealthStore, configuration: HKWorkoutConfiguration, device: HKDevice?)\nReturns a new workout builder object that is not connected to a workout session or other data source.\nvar workoutConfiguration: HKWorkoutConfiguration\nThe configuration information for the workout."
  },
  {
    "title": "HKPredicateKeyPathWorkoutActivityType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkpredicatekeypathworkoutactivitytype",
    "html": "See Also\nSpecifying predicate key paths\nlet HKPredicateKeyPathWorkoutActivity: String\nThe key path for accessing a specific workout activity.\nlet HKPredicateKeyPathWorkoutActivityStartDate: String\nThe key path for accessing activities with a matching start date.\nlet HKPredicateKeyPathWorkoutActivityEndDate: String\nThe key path for accessing activities with a matching end date.\nlet HKPredicateKeyPathWorkoutActivityDuration: String\nThe key path for accessing activities with a matching duration.\nlet HKPredicateKeyPathWorkoutActivityAverageQuantity: String\nThe key path for accessing activities with a matching average quantity.\nlet HKPredicateKeyPathWorkoutActivityMaximumQuantity: String\nThe key path for accessing activities with a matching maximum quantity.\nlet HKPredicateKeyPathWorkoutActivityMinimumQuantity: String\nThe key path for accessing activities with a matching minimum quantity.\nlet HKPredicateKeyPathWorkoutActivitySumQuantity: String\nThe key path for accessing activities with a matching sum."
  },
  {
    "title": "HKPredicateKeyPathWorkoutActivityStartDate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkpredicatekeypathworkoutactivitystartdate",
    "html": "See Also\nSpecifying predicate key paths\nlet HKPredicateKeyPathWorkoutActivity: String\nThe key path for accessing a specific workout activity.\nlet HKPredicateKeyPathWorkoutActivityType: String\nThe key path for accessing activities that match a workout activity type.\nlet HKPredicateKeyPathWorkoutActivityEndDate: String\nThe key path for accessing activities with a matching end date.\nlet HKPredicateKeyPathWorkoutActivityDuration: String\nThe key path for accessing activities with a matching duration.\nlet HKPredicateKeyPathWorkoutActivityAverageQuantity: String\nThe key path for accessing activities with a matching average quantity.\nlet HKPredicateKeyPathWorkoutActivityMaximumQuantity: String\nThe key path for accessing activities with a matching maximum quantity.\nlet HKPredicateKeyPathWorkoutActivityMinimumQuantity: String\nThe key path for accessing activities with a matching minimum quantity.\nlet HKPredicateKeyPathWorkoutActivitySumQuantity: String\nThe key path for accessing activities with a matching sum."
  },
  {
    "title": "HKPredicateKeyPathWorkoutActivityEndDate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkpredicatekeypathworkoutactivityenddate",
    "html": "See Also\nSpecifying predicate key paths\nlet HKPredicateKeyPathWorkoutActivity: String\nThe key path for accessing a specific workout activity.\nlet HKPredicateKeyPathWorkoutActivityType: String\nThe key path for accessing activities that match a workout activity type.\nlet HKPredicateKeyPathWorkoutActivityStartDate: String\nThe key path for accessing activities with a matching start date.\nlet HKPredicateKeyPathWorkoutActivityDuration: String\nThe key path for accessing activities with a matching duration.\nlet HKPredicateKeyPathWorkoutActivityAverageQuantity: String\nThe key path for accessing activities with a matching average quantity.\nlet HKPredicateKeyPathWorkoutActivityMaximumQuantity: String\nThe key path for accessing activities with a matching maximum quantity.\nlet HKPredicateKeyPathWorkoutActivityMinimumQuantity: String\nThe key path for accessing activities with a matching minimum quantity.\nlet HKPredicateKeyPathWorkoutActivitySumQuantity: String\nThe key path for accessing activities with a matching sum."
  },
  {
    "title": "HKPredicateKeyPathWorkoutActivity | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkpredicatekeypathworkoutactivity",
    "html": "See Also\nSpecifying predicate key paths\nlet HKPredicateKeyPathWorkoutActivityType: String\nThe key path for accessing activities that match a workout activity type.\nlet HKPredicateKeyPathWorkoutActivityStartDate: String\nThe key path for accessing activities with a matching start date.\nlet HKPredicateKeyPathWorkoutActivityEndDate: String\nThe key path for accessing activities with a matching end date.\nlet HKPredicateKeyPathWorkoutActivityDuration: String\nThe key path for accessing activities with a matching duration.\nlet HKPredicateKeyPathWorkoutActivityAverageQuantity: String\nThe key path for accessing activities with a matching average quantity.\nlet HKPredicateKeyPathWorkoutActivityMaximumQuantity: String\nThe key path for accessing activities with a matching maximum quantity.\nlet HKPredicateKeyPathWorkoutActivityMinimumQuantity: String\nThe key path for accessing activities with a matching minimum quantity.\nlet HKPredicateKeyPathWorkoutActivitySumQuantity: String\nThe key path for accessing activities with a matching sum."
  },
  {
    "title": "workoutEvents | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkoutactivity/3951080-workoutevents",
    "html": "Discussion\n\nHealthKit sorts the events in ascending order. These events are a subset of the containing workout’s events, that take place between the activity’s startDate and endDate. This includes any event that partially overlaps the activity. As a result, these events may appear in more than one activity.\n\nSee Also\nAccessing workout data\nvar uuid: UUID\nThe activity’s universally unique identifier (UUID).\nvar startDate: Date\nThe activitiy’s start date and time.\nvar endDate: Date?\nThe activity’s end date and time.\nvar duration: TimeInterval\nThe activity’s duration, measured in seconds.\nvar allStatistics: [HKQuantityType : HKStatistics]\nA dictionary that contains all the statistics for the activity.\nfunc statistics(for: HKQuantityType) -> HKStatistics?\nReturns the activity’s statistics for the provided quantity type.\nvar metadata: [String : Any]?\nMetadata that describes the activity.\nvar workoutConfiguration: HKWorkoutConfiguration\nThe configuration information for this part of the workout."
  },
  {
    "title": "duration | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkoutactivity/3951079-duration",
    "html": "Discussion\n\nHealthKit calculates the duration as the elapsed time between the activity’s startDate and endDate, ignoring any pause periods. If an activity is currently in progress, it has a nil-valued endDate. In this case, HealthKit calculates the duration as the time between the startDate and the current time, ignoring any pause periods.\n\nSee Also\nAccessing workout data\nvar uuid: UUID\nThe activity’s universally unique identifier (UUID).\nvar startDate: Date\nThe activitiy’s start date and time.\nvar endDate: Date?\nThe activity’s end date and time.\nvar allStatistics: [HKQuantityType : HKStatistics]\nA dictionary that contains all the statistics for the activity.\nfunc statistics(for: HKQuantityType) -> HKStatistics?\nReturns the activity’s statistics for the provided quantity type.\nvar metadata: [String : Any]?\nMetadata that describes the activity.\nvar workoutConfiguration: HKWorkoutConfiguration\nThe configuration information for this part of the workout.\nvar workoutEvents: [HKWorkoutEvent]\nAn array of events associated with the containing workout and occurring during the activity’s duration."
  },
  {
    "title": "workoutConfiguration | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkoutactivity/3929767-workoutconfiguration",
    "html": "See Also\nAccessing workout data\nvar uuid: UUID\nThe activity’s universally unique identifier (UUID).\nvar startDate: Date\nThe activitiy’s start date and time.\nvar endDate: Date?\nThe activity’s end date and time.\nvar duration: TimeInterval\nThe activity’s duration, measured in seconds.\nvar allStatistics: [HKQuantityType : HKStatistics]\nA dictionary that contains all the statistics for the activity.\nfunc statistics(for: HKQuantityType) -> HKStatistics?\nReturns the activity’s statistics for the provided quantity type.\nvar metadata: [String : Any]?\nMetadata that describes the activity.\nvar workoutEvents: [HKWorkoutEvent]\nAn array of events associated with the containing workout and occurring during the activity’s duration."
  },
  {
    "title": "metadata | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkoutactivity/3929764-metadata",
    "html": "Discussion\n\nThe metadata dictionary contains extra information describing this activity. The dictionary’s keys are all NSString objects. The values can be NSString objects, NSNumber objects or NSDate objects. For a complete list of predefined metadata keys, see Metadata Keys.\n\nUsing predefined keys helps facilitate sharing data between apps; however, you are also encouraged to create your own, custom keys as needed to extend the workout activity’s capabilities.\n\nSee Also\nAccessing workout data\nvar uuid: UUID\nThe activity’s universally unique identifier (UUID).\nvar startDate: Date\nThe activitiy’s start date and time.\nvar endDate: Date?\nThe activity’s end date and time.\nvar duration: TimeInterval\nThe activity’s duration, measured in seconds.\nvar allStatistics: [HKQuantityType : HKStatistics]\nA dictionary that contains all the statistics for the activity.\nfunc statistics(for: HKQuantityType) -> HKStatistics?\nReturns the activity’s statistics for the provided quantity type.\nvar workoutConfiguration: HKWorkoutConfiguration\nThe configuration information for this part of the workout.\nvar workoutEvents: [HKWorkoutEvent]\nAn array of events associated with the containing workout and occurring during the activity’s duration."
  },
  {
    "title": "allStatistics | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkoutactivity/3979255-allstatistics",
    "html": "Discussion\n\nHealthKit calculates an HKStatistics object for each HKQuantityType, based on the HKQuantitySample objects associated with the containing workout, and falling within the workout activity’s time frame.\n\nFurthermore, if a quantity sample extends beyond the activity’s time frame, HealthKit interpolates a quantity value to represent the portion within the time frame, and uses that value instead.\n\nSee Also\nAccessing workout data\nvar uuid: UUID\nThe activity’s universally unique identifier (UUID).\nvar startDate: Date\nThe activitiy’s start date and time.\nvar endDate: Date?\nThe activity’s end date and time.\nvar duration: TimeInterval\nThe activity’s duration, measured in seconds.\nfunc statistics(for: HKQuantityType) -> HKStatistics?\nReturns the activity’s statistics for the provided quantity type.\nvar metadata: [String : Any]?\nMetadata that describes the activity.\nvar workoutConfiguration: HKWorkoutConfiguration\nThe configuration information for this part of the workout.\nvar workoutEvents: [HKWorkoutEvent]\nAn array of events associated with the containing workout and occurring during the activity’s duration."
  },
  {
    "title": "HKMetadataKeyActivityType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkmetadatakeyactivitytype",
    "html": "See Also\nWorkout Type\nlet HKMetadataKeyAppleFitnessPlusSession: String\nlet HKMetadataKeyCoachedWorkout: String\nA key that indicates whether the workout was performed with a coach or personal trainer.\nlet HKMetadataKeyGroupFitness: String\nA key that indicates whether the workout was performed as part of a group fitness class.\nlet HKMetadataKeyIndoorWorkout: String\nA key that indicates whether the workout was performed indoors.\nlet HKMetadataKeyWorkoutBrandName: String\nThe brand name of a particular workout."
  },
  {
    "title": "HKMetadataKeyFitnessMachineDuration | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkmetadatakeyfitnessmachineduration",
    "html": "Discussion\n\nSet this key on a workout sample representing exercise on a GymKit fitness machine. Set its value to an HKQuantity object with a time unit.\n\nSee Also\nGymKit Fitness Equipment\nlet HKMetadataKeyCrossTrainerDistance: String\nThe workout distance displayed by a connected GymKit cross-trainer machine.\nlet HKMetadataKeyIndoorBikeDistance: String\nThe workout distance displayed by a connected GymKit exercise bike."
  },
  {
    "title": "endDate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkoutactivity/3929762-enddate",
    "html": "Discussion\n\nWhile a workout activity is in progress, this value is nil. When set to a non-nil value, the end date must be equal to or later than its start date.\n\nSee Also\nAccessing workout data\nvar uuid: UUID\nThe activity’s universally unique identifier (UUID).\nvar startDate: Date\nThe activitiy’s start date and time.\nvar duration: TimeInterval\nThe activity’s duration, measured in seconds.\nvar allStatistics: [HKQuantityType : HKStatistics]\nA dictionary that contains all the statistics for the activity.\nfunc statistics(for: HKQuantityType) -> HKStatistics?\nReturns the activity’s statistics for the provided quantity type.\nvar metadata: [String : Any]?\nMetadata that describes the activity.\nvar workoutConfiguration: HKWorkoutConfiguration\nThe configuration information for this part of the workout.\nvar workoutEvents: [HKWorkoutEvent]\nAn array of events associated with the containing workout and occurring during the activity’s duration."
  },
  {
    "title": "HKMetadataKeyCrossTrainerDistance | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkmetadatakeycrosstrainerdistance",
    "html": "Discussion\n\nSet this key on a workout sample representing exercise on a GymKit cross-trainer machine (such as an elliptical cross-trainer). Set its value to an HKQuantity object with a length unit.\n\nSee Also\nGymKit Fitness Equipment\nlet HKMetadataKeyFitnessMachineDuration: String\nThe workout duration displayed by a connected GymKit fitness machine.\nlet HKMetadataKeyIndoorBikeDistance: String\nThe workout distance displayed by a connected GymKit exercise bike."
  },
  {
    "title": "startDate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkoutactivity/3929765-startdate",
    "html": "Discussion\n\nIf the endDate property is non-nil, the activity’s start date must be equal to or earlier than its end date.\n\nSee Also\nAccessing workout data\nvar uuid: UUID\nThe activity’s universally unique identifier (UUID).\nvar endDate: Date?\nThe activity’s end date and time.\nvar duration: TimeInterval\nThe activity’s duration, measured in seconds.\nvar allStatistics: [HKQuantityType : HKStatistics]\nA dictionary that contains all the statistics for the activity.\nfunc statistics(for: HKQuantityType) -> HKStatistics?\nReturns the activity’s statistics for the provided quantity type.\nvar metadata: [String : Any]?\nMetadata that describes the activity.\nvar workoutConfiguration: HKWorkoutConfiguration\nThe configuration information for this part of the workout.\nvar workoutEvents: [HKWorkoutEvent]\nAn array of events associated with the containing workout and occurring during the activity’s duration."
  },
  {
    "title": "HKMetadataKeyWorkoutBrandName | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkmetadatakeyworkoutbrandname",
    "html": "Discussion\n\nThis key takes a string value.\n\nSee Also\nWorkout Type\nlet HKMetadataKeyActivityType: String\nlet HKMetadataKeyAppleFitnessPlusSession: String\nlet HKMetadataKeyCoachedWorkout: String\nA key that indicates whether the workout was performed with a coach or personal trainer.\nlet HKMetadataKeyGroupFitness: String\nA key that indicates whether the workout was performed as part of a group fitness class.\nlet HKMetadataKeyIndoorWorkout: String\nA key that indicates whether the workout was performed indoors."
  },
  {
    "title": "HKMetadataKeyCyclingFunctionalThresholdPowerTestType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkmetadatakeycyclingfunctionalthresholdpowertesttype",
    "html": "Topics\nValid test types\nenum HKCyclingFunctionalThresholdPowerTestType"
  },
  {
    "title": "HKMetadataKeyIndoorBikeDistance | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkmetadatakeyindoorbikedistance",
    "html": "Discussion\n\nSet this key on a workout sample representing exercise on a GymKit exercise bike. Set its value to an HKQuantity object with a length unit.\n\nSee Also\nGymKit Fitness Equipment\nlet HKMetadataKeyFitnessMachineDuration: String\nThe workout duration displayed by a connected GymKit fitness machine.\nlet HKMetadataKeyCrossTrainerDistance: String\nThe workout distance displayed by a connected GymKit cross-trainer machine."
  },
  {
    "title": "uuid | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkoutactivity/3929761-uuid",
    "html": "Discussion\n\nHealthKit assigns a UUID to the workout activity when you create it. If you want to add your own unique ID, add it to the activity’s metadata using the HKMetadataKeyExternalUUID key.\n\nSee Also\nAccessing workout data\nvar startDate: Date\nThe activitiy’s start date and time.\nvar endDate: Date?\nThe activity’s end date and time.\nvar duration: TimeInterval\nThe activity’s duration, measured in seconds.\nvar allStatistics: [HKQuantityType : HKStatistics]\nA dictionary that contains all the statistics for the activity.\nfunc statistics(for: HKQuantityType) -> HKStatistics?\nReturns the activity’s statistics for the provided quantity type.\nvar metadata: [String : Any]?\nMetadata that describes the activity.\nvar workoutConfiguration: HKWorkoutConfiguration\nThe configuration information for this part of the workout.\nvar workoutEvents: [HKWorkoutEvent]\nAn array of events associated with the containing workout and occurring during the activity’s duration."
  },
  {
    "title": "HKMetadataKeyElevationAscended | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkmetadatakeyelevationascended",
    "html": "Discussion\n\nSet this key on a workout, workout segment, or a quantity sample that represents distance. Set its value to an HKQuantity object with a length unit.\n\nHealthKit assigns this metadata key to the segments it automatically creates for HKWorkoutActivityType.downhillSkiing and HKWorkoutActivityType.snowboarding workout sessions (Apple Watch Series 3 only).\n\nSee Also\nSkiing and Snowboarding\nlet HKMetadataKeyAlpineSlopeGrade: String\nA key that indicates the percent slope of a ski run.\nlet HKMetadataKeyElevationDescended: String\nA key that indicates the cumulative elevation descended during a workout."
  },
  {
    "title": "typesToCollect | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkliveworkoutdatasource/2994352-typestocollect",
    "html": "Discussion\n\nApple Watch automatically collects the listed data types and sends the data to the workout builder. The available data types vary depending on the user’s settings and the workout configuration, and can include types like basalEnergyBurned, activeEnergyBurned, heartRate, distanceWalkingRunning, distanceCycling, distanceSwimming, or distanceWheelchair.\n\nTo monitor this data, add a delegate to the session’s HKLiveWorkoutBuilder object, and implement its workoutBuilder(_:didCollectDataOf:) method.\n\nSee Also\nCreating a live data source\ninit(healthStore: HKHealthStore, workoutConfiguration: HKWorkoutConfiguration?)\nCreates a new data source based on the provided workout configuration."
  },
  {
    "title": "init(healthStore:workoutConfiguration:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkliveworkoutdatasource/2994351-init",
    "html": "See Also\nCreating a live data source\nvar typesToCollect: Set<HKQuantityType>\nThe quantity type samples that the data source automatically sends to the workout builder."
  },
  {
    "title": "HKMetadataKeyLapLength | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkmetadatakeylaplength",
    "html": "Discussion\n\nSet this key on a workout, workout segment, or a quantity sample that represents distance. Set its value to an HKQuantity object that uses length units (described in HKUnit).\n\nSee Also\nSwimming\nlet HKMetadataKeySwimmingLocationType: String\nA key that indicates the location for a swimming workout.\nlet HKMetadataKeySwimmingStrokeStyle: String\nA key that indicates the predominant stroke style for a lap of swimming.\nlet HKMetadataKeySWOLFScore: String\nlet HKMetadataKeyWaterSalinity: String"
  },
  {
    "title": "allergyIntolerance | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkfhirresourcetype/2980679-allergyintolerance",
    "html": "See Also\nResource Types\nstatic let condition: HKFHIRResourceType\nA type that identifies FHIR resources for a condition, problem, diagnosis, or other event.\nstatic let diagnosticReport: HKFHIRResourceType\nA type that identifies FHIR resources for findings and interpretation of diagnostic tests.\nstatic let documentReference: HKFHIRResourceType\nA type that identifies FHIR resources for document references.\nstatic let immunization: HKFHIRResourceType\nA type that identifies FHIR resources for the administration of vaccines.\nstatic let medicationOrder: HKFHIRResourceType\nA type that identifies FHIR resources for prescriptions or other orders for medication.\nstatic let medicationDispense: HKFHIRResourceType\nA type that identifies FHIR resources for the delivery of medication (usually in response to a prescription).\nstatic let medicationStatement: HKFHIRResourceType\nA type that identifies FHIR resources for statements about medication taken by the patient.\nstatic let medicationRequest: HKFHIRResourceType\nA type that identifies FHIR resources for prescriptions or other orders or requests for medication.\nstatic let observation: HKFHIRResourceType\nA type that identifies FHIR resources for medical observations, including lab results and vital signs.\nstatic let procedure: HKFHIRResourceType\nA type that identifies FHIR resources for procedures performed on the patient.\nstatic let coverage: HKFHIRResourceType\nA type that identifies FHIR resources containing information about the user’s insurance coverage.\nRelated Documentation\nstatic let allergyRecord: HKClinicalTypeIdentifier\nA type identifier for records of allergic or intolerant reactions."
  },
  {
    "title": "diagnosticReport | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkfhirresourcetype/4111143-diagnosticreport",
    "html": "See Also\nResource Types\nstatic let allergyIntolerance: HKFHIRResourceType\nA type that identifies FHIR resources for allergies and intolerances.\nstatic let condition: HKFHIRResourceType\nA type that identifies FHIR resources for a condition, problem, diagnosis, or other event.\nstatic let documentReference: HKFHIRResourceType\nA type that identifies FHIR resources for document references.\nstatic let immunization: HKFHIRResourceType\nA type that identifies FHIR resources for the administration of vaccines.\nstatic let medicationOrder: HKFHIRResourceType\nA type that identifies FHIR resources for prescriptions or other orders for medication.\nstatic let medicationDispense: HKFHIRResourceType\nA type that identifies FHIR resources for the delivery of medication (usually in response to a prescription).\nstatic let medicationStatement: HKFHIRResourceType\nA type that identifies FHIR resources for statements about medication taken by the patient.\nstatic let medicationRequest: HKFHIRResourceType\nA type that identifies FHIR resources for prescriptions or other orders or requests for medication.\nstatic let observation: HKFHIRResourceType\nA type that identifies FHIR resources for medical observations, including lab results and vital signs.\nstatic let procedure: HKFHIRResourceType\nA type that identifies FHIR resources for procedures performed on the patient.\nstatic let coverage: HKFHIRResourceType\nA type that identifies FHIR resources containing information about the user’s insurance coverage.\nRelated Documentation\nstruct HKClinicalTypeIdentifier\nA type identifier for the different categories of clinical records."
  },
  {
    "title": "documentReference | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkfhirresourcetype/4111144-documentreference",
    "html": "See Also\nResource Types\nstatic let allergyIntolerance: HKFHIRResourceType\nA type that identifies FHIR resources for allergies and intolerances.\nstatic let condition: HKFHIRResourceType\nA type that identifies FHIR resources for a condition, problem, diagnosis, or other event.\nstatic let diagnosticReport: HKFHIRResourceType\nA type that identifies FHIR resources for findings and interpretation of diagnostic tests.\nstatic let immunization: HKFHIRResourceType\nA type that identifies FHIR resources for the administration of vaccines.\nstatic let medicationOrder: HKFHIRResourceType\nA type that identifies FHIR resources for prescriptions or other orders for medication.\nstatic let medicationDispense: HKFHIRResourceType\nA type that identifies FHIR resources for the delivery of medication (usually in response to a prescription).\nstatic let medicationStatement: HKFHIRResourceType\nA type that identifies FHIR resources for statements about medication taken by the patient.\nstatic let medicationRequest: HKFHIRResourceType\nA type that identifies FHIR resources for prescriptions or other orders or requests for medication.\nstatic let observation: HKFHIRResourceType\nA type that identifies FHIR resources for medical observations, including lab results and vital signs.\nstatic let procedure: HKFHIRResourceType\nA type that identifies FHIR resources for procedures performed on the patient.\nstatic let coverage: HKFHIRResourceType\nA type that identifies FHIR resources containing information about the user’s insurance coverage.\nRelated Documentation\nstruct HKClinicalTypeIdentifier\nA type identifier for the different categories of clinical records."
  },
  {
    "title": "wheelchairUse | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkwheelchairuseobject/1649241-wheelchairuse",
    "html": "Discussion\n\nFor a list of possible values, see HKWheelchairUse.\n\nTopics\nValid Wheelchair Use Values\nenum HKWheelchairUse\nConstants indicating the user’s wheelchair use."
  },
  {
    "title": "HKQuantityAggregationStyle.discreteTemporallyWeighted | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquantityaggregationstyle/discretetemporallyweighted",
    "html": "See Also\nAggregation Styles\ncase cumulative\nCumulative samples that can be summed over time.\ncase discreteArithmetic\nDiscrete samples that can be averaged over time using an arithmetic mean.\ncase discreteEquivalentContinuousLevel\nDiscrete samples that can be combined over a time interval by computing the equivalent continuous sound level."
  },
  {
    "title": "HKQuantityAggregationStyle.discreteArithmetic | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquantityaggregationstyle/discretearithmetic",
    "html": "Discussion\n\nUse discrete types to monitor changes in a value over time. Body mass, heart rate, temperature, and respiratory rate are all discrete quantity types. You can also query for the minimum or maximum value in a given time period.\n\nSee Also\nAggregation Styles\ncase cumulative\nCumulative samples that can be summed over time.\ncase discreteTemporallyWeighted\nDiscrete samples that can be averaged over a time interval using a temporally weighted integration function.\ncase discreteEquivalentContinuousLevel\nDiscrete samples that can be combined over a time interval by computing the equivalent continuous sound level."
  },
  {
    "title": "HKQuantityAggregationStyle.cumulative | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquantityaggregationstyle/cumulative",
    "html": "Discussion\n\nUse cumulative types to measure a total value over a given time period. Step count, distance, inhaler usage, nutritional information, and energy burned are all cumulative quantity types.\n\nSee Also\nAggregation Styles\ncase discreteArithmetic\nDiscrete samples that can be averaged over time using an arithmetic mean.\ncase discreteTemporallyWeighted\nDiscrete samples that can be averaged over a time interval using a temporally weighted integration function.\ncase discreteEquivalentContinuousLevel\nDiscrete samples that can be combined over a time interval by computing the equivalent continuous sound level."
  },
  {
    "title": "HKHeartRateMotionContext.notSet | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkheartratemotioncontext/notset",
    "html": "Discussion\n\nThis value is identical to the sample’s metadata not containing a HKMetadataKeyHeartRateMotionContext key.\n\nSee Also\nMotion Contextes\ncase active\nA value indicating that the user was in motion during the heart rate sample.\ncase sedentary\nA value indicating that the user has been still for at least 5 minutes prior to the heart rate sample."
  },
  {
    "title": "HKWorkoutSessionType.primary | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkoutsessiontype/primary",
    "html": "See Also\nTypes\ncase mirrored\nA mirrored session, running on the companion iOS device."
  },
  {
    "title": "HKHeartRateMotionContext.active | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkheartratemotioncontext/active",
    "html": "See Also\nMotion Contextes\ncase notSet\nA value indicating that the user’s activity level could not be determined.\ncase sedentary\nA value indicating that the user has been still for at least 5 minutes prior to the heart rate sample."
  },
  {
    "title": "HKHeartRateMotionContext.sedentary | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkheartratemotioncontext/sedentary",
    "html": "See Also\nMotion Contextes\ncase active\nA value indicating that the user was in motion during the heart rate sample.\ncase notSet\nA value indicating that the user’s activity level could not be determined."
  },
  {
    "title": "HKHeartRateMotionContext | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkheartratemotioncontext",
    "html": "Topics\nMotion Contextes\ncase active\nA value indicating that the user was in motion during the heart rate sample.\ncase notSet\nA value indicating that the user’s activity level could not be determined.\ncase sedentary\nA value indicating that the user has been still for at least 5 minutes prior to the heart rate sample.\nRelationships\nConforms To\nSendable\nSee Also\nRelated Documentation\nstatic let heartRate: HKQuantityTypeIdentifier\nA quantity sample type that measures the user’s heart rate."
  },
  {
    "title": "condition | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkfhirresourcetype/2980680-condition",
    "html": "See Also\nResource Types\nstatic let allergyIntolerance: HKFHIRResourceType\nA type that identifies FHIR resources for allergies and intolerances.\nstatic let diagnosticReport: HKFHIRResourceType\nA type that identifies FHIR resources for findings and interpretation of diagnostic tests.\nstatic let documentReference: HKFHIRResourceType\nA type that identifies FHIR resources for document references.\nstatic let immunization: HKFHIRResourceType\nA type that identifies FHIR resources for the administration of vaccines.\nstatic let medicationOrder: HKFHIRResourceType\nA type that identifies FHIR resources for prescriptions or other orders for medication.\nstatic let medicationDispense: HKFHIRResourceType\nA type that identifies FHIR resources for the delivery of medication (usually in response to a prescription).\nstatic let medicationStatement: HKFHIRResourceType\nA type that identifies FHIR resources for statements about medication taken by the patient.\nstatic let medicationRequest: HKFHIRResourceType\nA type that identifies FHIR resources for prescriptions or other orders or requests for medication.\nstatic let observation: HKFHIRResourceType\nA type that identifies FHIR resources for medical observations, including lab results and vital signs.\nstatic let procedure: HKFHIRResourceType\nA type that identifies FHIR resources for procedures performed on the patient.\nstatic let coverage: HKFHIRResourceType\nA type that identifies FHIR resources containing information about the user’s insurance coverage.\nRelated Documentation\nstatic let conditionRecord: HKClinicalTypeIdentifier\nA type identifier for records of a condition, problem, diagnosis, or other event."
  },
  {
    "title": "procedure | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkfhirresourcetype/2980686-procedure",
    "html": "See Also\nResource Types\nstatic let allergyIntolerance: HKFHIRResourceType\nA type that identifies FHIR resources for allergies and intolerances.\nstatic let condition: HKFHIRResourceType\nA type that identifies FHIR resources for a condition, problem, diagnosis, or other event.\nstatic let diagnosticReport: HKFHIRResourceType\nA type that identifies FHIR resources for findings and interpretation of diagnostic tests.\nstatic let documentReference: HKFHIRResourceType\nA type that identifies FHIR resources for document references.\nstatic let immunization: HKFHIRResourceType\nA type that identifies FHIR resources for the administration of vaccines.\nstatic let medicationOrder: HKFHIRResourceType\nA type that identifies FHIR resources for prescriptions or other orders for medication.\nstatic let medicationDispense: HKFHIRResourceType\nA type that identifies FHIR resources for the delivery of medication (usually in response to a prescription).\nstatic let medicationStatement: HKFHIRResourceType\nA type that identifies FHIR resources for statements about medication taken by the patient.\nstatic let medicationRequest: HKFHIRResourceType\nA type that identifies FHIR resources for prescriptions or other orders or requests for medication.\nstatic let observation: HKFHIRResourceType\nA type that identifies FHIR resources for medical observations, including lab results and vital signs.\nstatic let coverage: HKFHIRResourceType\nA type that identifies FHIR resources containing information about the user’s insurance coverage.\nRelated Documentation\nstatic let procedureRecord: HKClinicalTypeIdentifier\nA type identifier for records of procedures."
  },
  {
    "title": "HKQuantityAggregationStyle.discreteEquivalentContinuousLevel | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquantityaggregationstyle/discreteequivalentcontinuouslevel",
    "html": "Discussion\n\nFor more information on sound level meters, see IEC 61672-1.\n\nSee Also\nAggregation Styles\ncase cumulative\nCumulative samples that can be summed over time.\ncase discreteArithmetic\nDiscrete samples that can be averaged over time using an arithmetic mean.\ncase discreteTemporallyWeighted\nDiscrete samples that can be averaged over a time interval using a temporally weighted integration function."
  },
  {
    "title": "HKWorkoutActivityType.swimBikeRun | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkoutactivitytype/swimbikerun",
    "html": "Discussion\n\nUse this constant to create workouts that contain the HKWorkoutActivityType.swimming, HKWorkoutActivityType.cycling, and HKWorkoutActivityType.running activities. For more information, see HKWorkoutActivity.\n\nSee Also\nMultisport activities\ncase transition\nA constant for the transition time between activities in a multisport workout."
  },
  {
    "title": "HKWorkoutActivityType.mixedMetabolicCardioTraining | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkoutactivitytype/mixedmetaboliccardiotraining",
    "html": "Deprecated\n\nUse HKWorkoutActivityType.mixedCardio or HKWorkoutActivityType.highIntensityIntervalTraining instead.\n\nSee Also\nDeprecated activity types\ncase dance\nThe constant for dancing.\ncase danceInspiredTraining\nThe constant for workouts inspired by dance, including Pilates, Barre, and Feldenkrais."
  },
  {
    "title": "HKWorkoutActivityType.danceInspiredTraining | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkoutactivitytype/danceinspiredtraining",
    "html": "Deprecated\n\nUse HKWorkoutActivityType.dance, HKWorkoutActivityType.barre, or HKWorkoutActivityType.pilates instead.\n\nSee Also\nDeprecated activity types\ncase dance\nThe constant for dancing.\ncase mixedMetabolicCardioTraining\nThe constant for performing any mix of cardio-focused exercises."
  },
  {
    "title": "HKWorkoutActivityType.other | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkoutactivitytype/other",
    "html": "Discussion\n\nIf your app uses the HKWorkoutActivityType.swimming or HKWorkoutActivityType.other activity type, you must explain how your app calculates workout data when sensor information is not available. For more information, see the Human Interface Guidelines."
  },
  {
    "title": "HKWorkoutSessionState.stopped | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkoutsessionstate/stopped",
    "html": "Discussion\n\nAs soon as the session stops, the watch’s sensors return to normal, and it no longer generates workout data; however, the app can continue to run in the background, even after the user lowers their wrist.\n\nYou can’t restart or reuse the workout session.\n\nSee Also\nSession states\ncase notStarted\nThe workout session has not started.\ncase prepared\nThe session is ready but not yet running.\ncase running\nThe workout session is running.\ncase paused\nThe workout session has paused.\ncase ended\nThe workout session has ended.\nRelated Documentation"
  },
  {
    "title": "HKWorkoutActivityType.taiChi | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkoutactivitytype/taichi",
    "html": "See Also\nMartial arts\ncase boxing\nThe constant for boxing.\ncase kickboxing\nThe constant for kickboxing.\ncase martialArts\nThe constant for practicing martial arts.\ncase wrestling\nThe constant for wrestling."
  },
  {
    "title": "HKWorkoutActivityType.waterPolo | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkoutactivitytype/waterpolo",
    "html": "See Also\nWater activities\ncase paddleSports\nThe constant for canoeing, kayaking, paddling an outrigger, paddling a stand-up paddle board, and related sports.\ncase rowing\nThe constant for rowing.\ncase sailing\nThe constant for sailing.\ncase surfingSports\nThe constant for a variety of surf sports, including surfing, kite surfing, and wind surfing.\ncase swimming\nThe constant for swimming.\ncase waterFitness\nThe constant for aerobic exercise performed in shallow water.\ncase waterSports\nThe constant for a variety of water sports, including water skiing, wake boarding, and related activities."
  },
  {
    "title": "HKWorkoutActivityType.wrestling | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkoutactivitytype/wrestling",
    "html": "See Also\nMartial arts\ncase boxing\nThe constant for boxing.\ncase kickboxing\nThe constant for kickboxing.\ncase martialArts\nThe constant for practicing martial arts.\ncase taiChi\nThe constant for tai chi."
  },
  {
    "title": "HKWorkoutActivityType.boxing | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkoutactivitytype/boxing",
    "html": "See Also\nMartial arts\ncase kickboxing\nThe constant for kickboxing.\ncase martialArts\nThe constant for practicing martial arts.\ncase taiChi\nThe constant for tai chi.\ncase wrestling\nThe constant for wrestling."
  },
  {
    "title": "HKWorkoutActivityType.waterSports | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkoutactivitytype/watersports",
    "html": "See Also\nWater activities\ncase paddleSports\nThe constant for canoeing, kayaking, paddling an outrigger, paddling a stand-up paddle board, and related sports.\ncase rowing\nThe constant for rowing.\ncase sailing\nThe constant for sailing.\ncase surfingSports\nThe constant for a variety of surf sports, including surfing, kite surfing, and wind surfing.\ncase swimming\nThe constant for swimming.\ncase waterFitness\nThe constant for aerobic exercise performed in shallow water.\ncase waterPolo\nThe constant for playing water polo."
  },
  {
    "title": "HKWorkoutSessionState.paused | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkoutsessionstate/paused",
    "html": "See Also\nSession states\ncase notStarted\nThe workout session has not started.\ncase prepared\nThe session is ready but not yet running.\ncase running\nThe workout session is running.\ncase stopped\nThe session has stopped.\ncase ended\nThe workout session has ended.\nRelated Documentation\nfunc pause()\nPauses the workout session."
  },
  {
    "title": "HKWorkoutActivityType.sailing | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkoutactivitytype/sailing",
    "html": "See Also\nWater activities\ncase paddleSports\nThe constant for canoeing, kayaking, paddling an outrigger, paddling a stand-up paddle board, and related sports.\ncase rowing\nThe constant for rowing.\ncase surfingSports\nThe constant for a variety of surf sports, including surfing, kite surfing, and wind surfing.\ncase swimming\nThe constant for swimming.\ncase waterFitness\nThe constant for aerobic exercise performed in shallow water.\ncase waterPolo\nThe constant for playing water polo.\ncase waterSports\nThe constant for a variety of water sports, including water skiing, wake boarding, and related activities."
  },
  {
    "title": "HKWorkoutActivityType.swimming | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkoutactivitytype/swimming",
    "html": "Discussion\n\nIf your app uses the HKWorkoutActivityType.swimming or HKWorkoutActivityType.other activity type, you must explain how your app calculates workout data when sensor information is not available. For more information, see the Human Interface Guidelines.\n\nSee Also\nWater activities\ncase paddleSports\nThe constant for canoeing, kayaking, paddling an outrigger, paddling a stand-up paddle board, and related sports.\ncase rowing\nThe constant for rowing.\ncase sailing\nThe constant for sailing.\ncase surfingSports\nThe constant for a variety of surf sports, including surfing, kite surfing, and wind surfing.\ncase waterFitness\nThe constant for aerobic exercise performed in shallow water.\ncase waterPolo\nThe constant for playing water polo.\ncase waterSports\nThe constant for a variety of water sports, including water skiing, wake boarding, and related activities."
  },
  {
    "title": "HKWorkoutActivityType.rowing | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkoutactivitytype/rowing",
    "html": "See Also\nWater activities\ncase paddleSports\nThe constant for canoeing, kayaking, paddling an outrigger, paddling a stand-up paddle board, and related sports.\ncase sailing\nThe constant for sailing.\ncase surfingSports\nThe constant for a variety of surf sports, including surfing, kite surfing, and wind surfing.\ncase swimming\nThe constant for swimming.\ncase waterFitness\nThe constant for aerobic exercise performed in shallow water.\ncase waterPolo\nThe constant for playing water polo.\ncase waterSports\nThe constant for a variety of water sports, including water skiing, wake boarding, and related activities."
  },
  {
    "title": "HKWorkoutActivityType.paddleSports | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkoutactivitytype/paddlesports",
    "html": "See Also\nWater activities\ncase rowing\nThe constant for rowing.\ncase sailing\nThe constant for sailing.\ncase surfingSports\nThe constant for a variety of surf sports, including surfing, kite surfing, and wind surfing.\ncase swimming\nThe constant for swimming.\ncase waterFitness\nThe constant for aerobic exercise performed in shallow water.\ncase waterPolo\nThe constant for playing water polo.\ncase waterSports\nThe constant for a variety of water sports, including water skiing, wake boarding, and related activities."
  },
  {
    "title": "HKWorkoutSwimmingLocationType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkoutswimminglocationtype",
    "html": "Topics\nSwimming Locations\ncase openWater\nThe user swam in open water like a lake or ocean.\ncase pool\nThe user swam in a pool.\ncase unknown\nThe swimming location could not be determined.\nRelationships\nConforms To\nSendable\nSee Also\nSession settings\nvar activityType: HKWorkoutActivityType\nThe workout session’s activity type.\nvar locationType: HKWorkoutSessionLocationType\nThe workout session’s location.\nenum HKWorkoutSessionLocationType\nA constant indicating whether the workout session takes place indoors or outdoors.\nvar swimmingLocationType: HKWorkoutSwimmingLocationType\nThe workout session’s swimming location.\nvar lapLength: HKQuantity?\nThe length of the lap for a workout session."
  },
  {
    "title": "insertRouteData(_:completion:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkoutroutebuilder/2874113-insertroutedata",
    "html": "Parameters\nrouteData\n\nAn array containing one or more location objects.\n\ncompletion\n\nA block called after the system adds the collection data to the builder. The system passes the block the following parameters:\n\nsuccess\n\nA Boolean value that indicates whether the builder successfully received the route data.\n\nerror\n\nAn object that describes the error, if an error has occurred; otherwise, nil.\n\nDiscussion\n\nConcurrency Note\n\nYou can call this method from synchronous code using a completion handler, as shown on this page, or you can call it as an asynchronous method that has the following declaration:\n\nfunc insertRouteData(_ routeData: [CLLocation]) async throws\n\n\nFor information about concurrency and asynchronous code in Swift, see Calling Objective-C APIs Asynchronously.\n\nUse this method to asynchronously add one or more CLLocation objects to the series. The CLLocation objects may be inserted in any order; the builder sorts them by date when finalizing the route.\n\nSee Also\nBuilding the route\nfunc finishRoute(with: HKWorkout, metadata: [String : Any]?, completion: (HKWorkoutRoute?, Error?) -> Void)\nCreates, saves, and associates the route with the provided workout.\nfunc addMetadata([String : Any], completion: (Bool, Error?) -> Void)\nAdds metadata to the builder."
  },
  {
    "title": "date | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkoutevent/1615392-date",
    "html": "Deprecated\n\nUse dateInterval instead.\n\nDiscussion\n\nFor a pause event, this date indicates the start of the break. For a resume event, this date indicates the end of the break. You must use a date between the starting and ending dates of the workout that you intend to modify.\n\nSee Also\nDeprecated\ninit(type: HKWorkoutEventType, date: Date)\nInstantiates and returns a new workout event with the specified type and date.\ninit(type: HKWorkoutEventType, date: Date, metadata: [String : Any])\nInstantiates and returns a new workout event with the specified type, date, and metadata."
  },
  {
    "title": "init(type:date:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkoutevent/1615600-init",
    "html": "Deprecated\n\nUse init(type:dateInterval:metadata:) instead.\n\nParameters\ntype\n\nThe type of workout event. For a description of possible events, see HKWorkoutEventType.\n\ndate\n\nThe time when the transition occurred. For a pause event, this date indicates the start of the break. For a resume event, this date indicates the end of the break. You must use a date between the starting and ending dates of the workout that you intend to modify.\n\nReturn Value\n\nA new workout event.\n\nSee Also\nDeprecated\ninit(type: HKWorkoutEventType, date: Date, metadata: [String : Any])\nInstantiates and returns a new workout event with the specified type, date, and metadata.\nvar date: Date\nThe time when the transition occurred."
  },
  {
    "title": "endDate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkoutbuilder/3000763-enddate",
    "html": "See Also\nEnding the workout\nfunc endCollection(withEnd: Date, completion: (Bool, Error?) -> Void)\nStops the collection of data, sets the workout’s end date, and deactivates the workout builder.\nfunc finishWorkout(completion: (HKWorkout?, Error?) -> Void)\nCreates the workout, using the samples and events added to the builder, and saves it to the HealthKit store.\nfunc discardWorkout()\nStops the collection of data and discards the current results without saving the workout."
  },
  {
    "title": "workoutActivities | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkoutbuilder/3929769-workoutactivities",
    "html": "See Also\nManaging workout activities\nfunc addWorkoutActivity(HKWorkoutActivity, completion: (Bool, Error?) -> Void)\nAdds a workout activity to the workout builder.\nfunc updateActivity(uuid: UUID, adding: [String : Any], completion: (Bool, Error?) -> Void)\nAdds metadata to a workout activity that you’ve already added to the workout builder.\nfunc updateActivity(uuid: UUID, end: Date, completion: (Bool, Error?) -> Void)\nSets the end date for a workout activity that you’ve already added to the workout builder."
  },
  {
    "title": "updateActivity(uuid:adding:completion:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkoutbuilder/3958705-updateactivity",
    "html": "Parameters\nUUID\n\nThe workout activity’s universally unique identifier (UUID).\n\nmetadata\n\nA dictionary containing the metadata keys and values to add to the workout activity.\n\ncompletion\n\nA callback handler that the system calls after updating the workout activity. The system calls the callback handler on an anonymous background queue.\n\nThe callback handler takes the following parameters:\n\nsuccess\n\nContains true if the builder successfully updates the activity.\n\nerror\n\nIf the success parameter is false, this parameter contains information about the error; otherwise, it’s nil.\n\nDiscussion\n\nConcurrency Note\n\nYou can call this method from synchronous code using a completion handler, as shown on this page, or you can call it as an asynchronous method that has the following declaration:\n\nfunc updateActivity(uuid UUID: UUID, adding metadata: [String : Any]) async throws\n\n\nFor information about concurrency and asynchronous code in Swift, see Calling Objective-C APIs Asynchronously.\n\nYou can call this method multiple times to incrementally add metadata to the workout activity. The system merges the new metadata with any existing metadata using addEntries(from:). Calling this method after calling finishWorkout(completion:) fails with an error.\n\nSee Also\nManaging workout activities\nfunc addWorkoutActivity(HKWorkoutActivity, completion: (Bool, Error?) -> Void)\nAdds a workout activity to the workout builder.\nfunc updateActivity(uuid: UUID, end: Date, completion: (Bool, Error?) -> Void)\nSets the end date for a workout activity that you’ve already added to the workout builder.\nvar workoutActivities: [HKWorkoutActivity]"
  },
  {
    "title": "addWorkoutActivity(_:completion:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkoutbuilder/3929768-addworkoutactivity",
    "html": "Parameters\nworkoutActivity\n\nThe workout activity to add.\n\ncompletion\n\nA callback handler that the system calls after adding the workout activity. The system calls the callback handler on an anonymous background queue.\n\nThe callback handler takes the following parameters:\n\nsuccess\n\nContains true if the builder successfully added the activity.\n\nerror\n\nIf the success parameter is false, this parameter contains information about the error; otherwise, it’s nil.\n\nDiscussion\n\nConcurrency Note\n\nYou can call this method from synchronous code using a completion handler, as shown on this page, or you can call it as an asynchronous method that has the following declaration:\n\nfunc addWorkoutActivity(_ workoutActivity: HKWorkoutActivity) async throws\n\n\nFor information about concurrency and asynchronous code in Swift, see Calling Objective-C APIs Asynchronously.\n\nYou can call this method repeatedly to incrementally add activities to the builder. Calling this method after calling finishWorkout(completion:) fails with an error.\n\nIf you add an HKWorkoutActivity object that doesn’t have an endDate, you can set the end date by calling updateActivity(uuid:end:completion:).\n\nSee Also\nManaging workout activities\nfunc updateActivity(uuid: UUID, adding: [String : Any], completion: (Bool, Error?) -> Void)\nAdds metadata to a workout activity that you’ve already added to the workout builder.\nfunc updateActivity(uuid: UUID, end: Date, completion: (Bool, Error?) -> Void)\nSets the end date for a workout activity that you’ve already added to the workout builder.\nvar workoutActivities: [HKWorkoutActivity]"
  },
  {
    "title": "HKPredicateKeyPathWorkoutActivityMinimumQuantity | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkpredicatekeypathworkoutactivityminimumquantity",
    "html": "See Also\nSpecifying predicate key paths\nlet HKPredicateKeyPathWorkoutActivity: String\nThe key path for accessing a specific workout activity.\nlet HKPredicateKeyPathWorkoutActivityType: String\nThe key path for accessing activities that match a workout activity type.\nlet HKPredicateKeyPathWorkoutActivityStartDate: String\nThe key path for accessing activities with a matching start date.\nlet HKPredicateKeyPathWorkoutActivityEndDate: String\nThe key path for accessing activities with a matching end date.\nlet HKPredicateKeyPathWorkoutActivityDuration: String\nThe key path for accessing activities with a matching duration.\nlet HKPredicateKeyPathWorkoutActivityAverageQuantity: String\nThe key path for accessing activities with a matching average quantity.\nlet HKPredicateKeyPathWorkoutActivityMaximumQuantity: String\nThe key path for accessing activities with a matching maximum quantity.\nlet HKPredicateKeyPathWorkoutActivitySumQuantity: String\nThe key path for accessing activities with a matching sum."
  },
  {
    "title": "metadata | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkoutbuilder/2962919-metadata",
    "html": "See Also\nAdding metadata to the workout\nfunc addMetadata([String : Any], completion: (Bool, Error?) -> Void)\nAdds metadata to be saved with the workout."
  },
  {
    "title": "addMetadata(_:completion:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkoutbuilder/2962910-addmetadata",
    "html": "Discussion\n\nConcurrency Note\n\nYou can call this method from synchronous code using a completion handler, as shown on this page, or you can call it as an asynchronous method that has the following declaration:\n\nfunc addMetadata(_ metadata: [String : Any]) async throws\n\n\nFor information about concurrency and asynchronous code in Swift, see Calling Objective-C APIs Asynchronously.\n\nSee Also\nAdding metadata to the workout\nvar metadata: [String : Any]\nThe metadata the builder saves with the workout."
  },
  {
    "title": "beginCollection(withStart:completion:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkoutbuilder/2962913-begincollection",
    "html": "Discussion\n\nConcurrency Note\n\nYou can call this method from synchronous code using a completion handler, as shown on this page, or you can call it as an asynchronous method that has the following declaration:\n\nfunc beginCollection(at startDate: Date) async throws\n\n\nFor information about concurrency and asynchronous code in Swift, see Calling Objective-C APIs Asynchronously.\n\nSee Also\nStarting the workout\nvar startDate: Date?\nThe workout’s start date and time.\nfunc elapsedTime(at: Date) -> TimeInterval\nCalculates the duration of the workout at the specified time."
  },
  {
    "title": "elapsedTime(at:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkoutbuilder/2962916-elapsedtime",
    "html": "Parameters\ndate\n\nThe end date to use to calculate the duration.\n\nDiscussion\n\nThe duration of a workout doesn’t include intervals between pause and resume events.\n\nNote\n\nThe duration of a workout can decrease when you add past occurrences of pause events.\n\nSee Also\nStarting the workout\nfunc beginCollection(withStart: Date, completion: (Bool, Error?) -> Void)\nSets the workout’s start date and begins building the workout.\nvar startDate: Date?\nThe workout’s start date and time."
  },
  {
    "title": "seriesBuilder(for:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkoutbuilder/2962920-seriesbuilder",
    "html": "See Also\nAssociating samples with the workout\nfunc add([HKSample], completion: (Bool, Error?) -> Void)\nAdds a sample to be associated with the workout.\nfunc statistics(for: HKQuantityType) -> HKStatistics?\nReturns the statistics calculated for matching samples added to the workout."
  },
  {
    "title": "startDate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkoutbuilder/2962921-startdate",
    "html": "See Also\nStarting the workout\nfunc beginCollection(withStart: Date, completion: (Bool, Error?) -> Void)\nSets the workout’s start date and begins building the workout.\nfunc elapsedTime(at: Date) -> TimeInterval\nCalculates the duration of the workout at the specified time."
  },
  {
    "title": "HKWorkoutActivityType.softball | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkoutactivitytype/softball",
    "html": "See Also\nTeam sports\ncase americanFootball\nThe constant for playing American football.\ncase australianFootball\nThe constant for playing Australian football.\ncase baseball\nThe constant for playing baseball.\ncase basketball\nThe constant for playing basketball.\ncase cricket\nThe constant for playing cricket.\ncase discSports\nThe constant for playing disc sports such as Ultimate and Disc Golf.\ncase handball\nThe constant for playing handball.\ncase hockey\nThe constant for playing hockey, including ice hockey, field hockey, and related sports.\ncase lacrosse\nThe constant for playing lacrosse.\ncase rugby\nThe constant for playing rugby.\ncase soccer\nThe constant for playing soccer.\ncase volleyball\nThe constant for playing volleyball."
  },
  {
    "title": "init(healthStore:configuration:device:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkoutbuilder/2962918-init",
    "html": "See Also\nCreating the builder\nvar device: HKDevice?\nThe device associated with the workout.\nvar workoutConfiguration: HKWorkoutConfiguration\nThe configuration information for the workout."
  },
  {
    "title": "HKWorkoutActivityType.walking | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkoutactivitytype/walking",
    "html": "See Also\nExercise and fitness\ncase preparationAndRecovery\nThe constant for warm-up and therapeutic activities like foam rolling and stretching.\ncase flexibility\nThe constant for a flexibility workout.\ncase cooldown\nThe constant for low intensity stretching and mobility exercises following a more vigorous workout.\ncase running\nThe constant for running and jogging.\ncase wheelchairWalkPace\nThe constant for a wheelchair workout at walking pace.\ncase wheelchairRunPace\nThe constant for wheelchair workout at running pace.\ncase cycling\nThe constant for cycling.\ncase handCycling\nThe constant for hand cycling.\ncase coreTraining\nThe constant for core training.\ncase elliptical\nThe constant for workouts on an elliptical machine.\ncase functionalStrengthTraining\nThe constant for strength training, primarily with free weights and body weight.\ncase traditionalStrengthTraining\nThe constant for strength training exercises primarily using machines or free weights.\ncase crossTraining\nThe constant for exercise that includes any mixture of cardio, strength, and/or flexibility training.\ncase mixedCardio\nThe constant for workouts that mix a variety of cardio exercise machines or modalities.\ncase highIntensityIntervalTraining\nThe constant for high intensity interval training.\ncase jumpRope\nThe constant for jumping rope.\ncase stairClimbing\nThe constant for workouts using a stair climbing machine.\ncase stairs\nThe constant for running, walking, or other drills using stairs (for example, in a stadium or inside a multilevel building).\ncase stepTraining\nThe constant for training using a step bench.\ncase fitnessGaming\nThe constant for playing fitness-based video games."
  },
  {
    "title": "HKWorkoutActivityType.wheelchairRunPace | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkoutactivitytype/wheelchairrunpace",
    "html": "See Also\nExercise and fitness\ncase preparationAndRecovery\nThe constant for warm-up and therapeutic activities like foam rolling and stretching.\ncase flexibility\nThe constant for a flexibility workout.\ncase cooldown\nThe constant for low intensity stretching and mobility exercises following a more vigorous workout.\ncase walking\nThe constant for walking.\ncase running\nThe constant for running and jogging.\ncase wheelchairWalkPace\nThe constant for a wheelchair workout at walking pace.\ncase cycling\nThe constant for cycling.\ncase handCycling\nThe constant for hand cycling.\ncase coreTraining\nThe constant for core training.\ncase elliptical\nThe constant for workouts on an elliptical machine.\ncase functionalStrengthTraining\nThe constant for strength training, primarily with free weights and body weight.\ncase traditionalStrengthTraining\nThe constant for strength training exercises primarily using machines or free weights.\ncase crossTraining\nThe constant for exercise that includes any mixture of cardio, strength, and/or flexibility training.\ncase mixedCardio\nThe constant for workouts that mix a variety of cardio exercise machines or modalities.\ncase highIntensityIntervalTraining\nThe constant for high intensity interval training.\ncase jumpRope\nThe constant for jumping rope.\ncase stairClimbing\nThe constant for workouts using a stair climbing machine.\ncase stairs\nThe constant for running, walking, or other drills using stairs (for example, in a stadium or inside a multilevel building).\ncase stepTraining\nThe constant for training using a step bench.\ncase fitnessGaming\nThe constant for playing fitness-based video games."
  },
  {
    "title": "HKWorkoutActivityType.discSports | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkoutactivitytype/discsports",
    "html": "See Also\nTeam sports\ncase americanFootball\nThe constant for playing American football.\ncase australianFootball\nThe constant for playing Australian football.\ncase baseball\nThe constant for playing baseball.\ncase basketball\nThe constant for playing basketball.\ncase cricket\nThe constant for playing cricket.\ncase handball\nThe constant for playing handball.\ncase hockey\nThe constant for playing hockey, including ice hockey, field hockey, and related sports.\ncase lacrosse\nThe constant for playing lacrosse.\ncase rugby\nThe constant for playing rugby.\ncase soccer\nThe constant for playing soccer.\ncase softball\nThe constant for playing softball.\ncase volleyball\nThe constant for playing volleyball."
  },
  {
    "title": "HKWorkoutActivityType.handball | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkoutactivitytype/handball",
    "html": "See Also\nTeam sports\ncase americanFootball\nThe constant for playing American football.\ncase australianFootball\nThe constant for playing Australian football.\ncase baseball\nThe constant for playing baseball.\ncase basketball\nThe constant for playing basketball.\ncase cricket\nThe constant for playing cricket.\ncase discSports\nThe constant for playing disc sports such as Ultimate and Disc Golf.\ncase hockey\nThe constant for playing hockey, including ice hockey, field hockey, and related sports.\ncase lacrosse\nThe constant for playing lacrosse.\ncase rugby\nThe constant for playing rugby.\ncase soccer\nThe constant for playing soccer.\ncase softball\nThe constant for playing softball.\ncase volleyball\nThe constant for playing volleyball."
  },
  {
    "title": "HKWorkoutActivityType.snowboarding | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkoutactivitytype/snowboarding",
    "html": "Topics\nMonitoring Downhill Skiing Workout Sessions\nReceiving Downhill Skiing and Snowboarding Data\nReceive segments and distance samples during downhill skiing and snowboarding workout sessions.\nSee Also\nSnow and ice sports\ncase crossCountrySkiing\nThe constant for cross country skiing.\ncase curling\nThe constant for curling.\ncase downhillSkiing\nThe constant for downhill skiing.\ncase snowSports\nThe constant for a variety of snow sports, including sledding, snowmobiling, or building a snowman.\ncase skatingSports\nThe constant for skating activities, including ice skating, speed skating, inline skating, and skateboarding."
  },
  {
    "title": "startDate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkstatistics/1615351-startdate",
    "html": "Discussion\n\nThis property contains the start date for the statistics. If you calculated these statistics using a statistics query, this is the earliest start date from all the samples that match the query. If you calculated these statistics using a statistics collection query, this is the start of the time interval for that particular collection of statistics.\n\nSee Also\nGetting Property Data\nvar endDate: Date\nThe end of the time period included in these statistics.\nvar quantityType: HKQuantityType\nThe quantity type of the samples used to calculate these statistics.\nvar sources: [HKSource]?\nAn array containing all the sources contributing to these statistics."
  },
  {
    "title": "maximumQuantity(for:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkstatistics/1615630-maximumquantity",
    "html": "Parameters\nsource\n\nA data source from the statistics object’s sources array.\n\nReturn Value\n\nIf both the discreteMax option and the separateBySource option were set, this method returns a quantity object. This object contains the maximum value from all the samples that match the query and were created by the specified source. If the statistics options were not both set, this method returns nil.\n\nSee Also\nGetting Statistics Data\nfunc averageQuantity() -> HKQuantity?\nReturns the average value from all the samples that match the query.\nfunc averageQuantity(for: HKSource) -> HKQuantity?\nReturns the average value from all the samples that match the query and that were created by the specified source.\nfunc maximumQuantity() -> HKQuantity?\nReturns the maximum value from all the samples that match the query.\nfunc minimumQuantity() -> HKQuantity?\nReturns the minimum value from all the samples that match the query.\nfunc minimumQuantity(for: HKSource) -> HKQuantity?\nReturns the minimum value from all the samples that match the query and that were created by the specified source.\nfunc sumQuantity() -> HKQuantity?\nReturns the sum of all the samples that match the query.\nfunc sumQuantity(for: HKSource) -> HKQuantity?\nReturns the sum of all the samples that match the query and that were created by the specified source.\nfunc duration() -> HKQuantity?\nReturns the total duration covering all the samples that match the query.\nfunc duration(for: HKSource) -> HKQuantity?\nReturns the total duration covering all the samples created by the specified source that also match the query.\nRelated Documentation\nvar endDate: Date\nThe end of the time period included in these statistics.\nvar sources: [HKSource]?\nAn array containing all the sources contributing to these statistics.\nvar startDate: Date\nThe start of the time period included in these statistics."
  },
  {
    "title": "HKWorkoutActivityType.lacrosse | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkoutactivitytype/lacrosse",
    "html": "See Also\nTeam sports\ncase americanFootball\nThe constant for playing American football.\ncase australianFootball\nThe constant for playing Australian football.\ncase baseball\nThe constant for playing baseball.\ncase basketball\nThe constant for playing basketball.\ncase cricket\nThe constant for playing cricket.\ncase discSports\nThe constant for playing disc sports such as Ultimate and Disc Golf.\ncase handball\nThe constant for playing handball.\ncase hockey\nThe constant for playing hockey, including ice hockey, field hockey, and related sports.\ncase rugby\nThe constant for playing rugby.\ncase soccer\nThe constant for playing soccer.\ncase softball\nThe constant for playing softball.\ncase volleyball\nThe constant for playing volleyball."
  },
  {
    "title": "HKWorkoutActivityType.snowSports | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkoutactivitytype/snowsports",
    "html": "See Also\nSnow and ice sports\ncase crossCountrySkiing\nThe constant for cross country skiing.\ncase curling\nThe constant for curling.\ncase downhillSkiing\nThe constant for downhill skiing.\ncase snowboarding\nThe constant for snowboarding.\ncase skatingSports\nThe constant for skating activities, including ice skating, speed skating, inline skating, and skateboarding."
  },
  {
    "title": "HKWorkoutActivityType.basketball | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkoutactivitytype/basketball",
    "html": "See Also\nTeam sports\ncase americanFootball\nThe constant for playing American football.\ncase australianFootball\nThe constant for playing Australian football.\ncase baseball\nThe constant for playing baseball.\ncase cricket\nThe constant for playing cricket.\ncase discSports\nThe constant for playing disc sports such as Ultimate and Disc Golf.\ncase handball\nThe constant for playing handball.\ncase hockey\nThe constant for playing hockey, including ice hockey, field hockey, and related sports.\ncase lacrosse\nThe constant for playing lacrosse.\ncase rugby\nThe constant for playing rugby.\ncase soccer\nThe constant for playing soccer.\ncase softball\nThe constant for playing softball.\ncase volleyball\nThe constant for playing volleyball."
  },
  {
    "title": "HKWorkoutActivityType.downhillSkiing | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkoutactivitytype/downhillskiing",
    "html": "Topics\nMonitoring Downhill Skiing Workout Sessions\nReceiving Downhill Skiing and Snowboarding Data\nReceive segments and distance samples during downhill skiing and snowboarding workout sessions.\nSee Also\nSnow and ice sports\ncase crossCountrySkiing\nThe constant for cross country skiing.\ncase curling\nThe constant for curling.\ncase snowSports\nThe constant for a variety of snow sports, including sledding, snowmobiling, or building a snowman.\ncase snowboarding\nThe constant for snowboarding.\ncase skatingSports\nThe constant for skating activities, including ice skating, speed skating, inline skating, and skateboarding."
  },
  {
    "title": "HKWorkoutActivityType.fencing | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkoutactivitytype/fencing",
    "html": "See Also\nIndividual sports\ncase archery\nThe constant for shooting archery.\ncase bowling\nThe constant for bowling.\ncase gymnastics\nPerforming gymnastics.\ncase trackAndField\nParticipating in track and field events, including shot put, javelin, pole vaulting, and related sports."
  },
  {
    "title": "HKWorkoutActivityType.curling | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkoutactivitytype/curling",
    "html": "See Also\nSnow and ice sports\ncase crossCountrySkiing\nThe constant for cross country skiing.\ncase downhillSkiing\nThe constant for downhill skiing.\ncase snowSports\nThe constant for a variety of snow sports, including sledding, snowmobiling, or building a snowman.\ncase snowboarding\nThe constant for snowboarding.\ncase skatingSports\nThe constant for skating activities, including ice skating, speed skating, inline skating, and skateboarding."
  },
  {
    "title": "HKWorkoutActivityType.golf | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkoutactivitytype/golf",
    "html": "See Also\nOutdoor activities\ncase climbing\nThe constant for climbing.\ncase equestrianSports\nThe constant for activities that involve riding a horse, including polo, horse racing, and horse riding.\ncase fishing\nThe constant for fishing.\ncase hiking\nThe constant for hiking.\ncase hunting\nThe constant for hunting.\ncase play\nThe constant for play-based activities like tag, dodgeball, hopscotch, tetherball, and playing on a jungle gym."
  },
  {
    "title": "HKWorkoutActivityType.hiking | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkoutactivitytype/hiking",
    "html": "See Also\nOutdoor activities\ncase climbing\nThe constant for climbing.\ncase equestrianSports\nThe constant for activities that involve riding a horse, including polo, horse racing, and horse riding.\ncase fishing\nThe constant for fishing.\ncase golf\nThe constant for playing golf.\ncase hunting\nThe constant for hunting.\ncase play\nThe constant for play-based activities like tag, dodgeball, hopscotch, tetherball, and playing on a jungle gym."
  },
  {
    "title": "HKWorkoutActivityType.equestrianSports | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkoutactivitytype/equestriansports",
    "html": "See Also\nOutdoor activities\ncase climbing\nThe constant for climbing.\ncase fishing\nThe constant for fishing.\ncase golf\nThe constant for playing golf.\ncase hiking\nThe constant for hiking.\ncase hunting\nThe constant for hunting.\ncase play\nThe constant for play-based activities like tag, dodgeball, hopscotch, tetherball, and playing on a jungle gym."
  },
  {
    "title": "HKWorkoutActivityType.fishing | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkoutactivitytype/fishing",
    "html": "See Also\nOutdoor activities\ncase climbing\nThe constant for climbing.\ncase equestrianSports\nThe constant for activities that involve riding a horse, including polo, horse racing, and horse riding.\ncase golf\nThe constant for playing golf.\ncase hiking\nThe constant for hiking.\ncase hunting\nThe constant for hunting.\ncase play\nThe constant for play-based activities like tag, dodgeball, hopscotch, tetherball, and playing on a jungle gym."
  },
  {
    "title": "HKWorkoutActivityType.hunting | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkoutactivitytype/hunting",
    "html": "See Also\nOutdoor activities\ncase climbing\nThe constant for climbing.\ncase equestrianSports\nThe constant for activities that involve riding a horse, including polo, horse racing, and horse riding.\ncase fishing\nThe constant for fishing.\ncase golf\nThe constant for playing golf.\ncase hiking\nThe constant for hiking.\ncase play\nThe constant for play-based activities like tag, dodgeball, hopscotch, tetherball, and playing on a jungle gym."
  },
  {
    "title": "HKWorkoutActivityType.play | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkoutactivitytype/play",
    "html": "See Also\nOutdoor activities\ncase climbing\nThe constant for climbing.\ncase equestrianSports\nThe constant for activities that involve riding a horse, including polo, horse racing, and horse riding.\ncase fishing\nThe constant for fishing.\ncase golf\nThe constant for playing golf.\ncase hiking\nThe constant for hiking.\ncase hunting\nThe constant for hunting."
  },
  {
    "title": "HKWorkoutActivityType.crossCountrySkiing | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkoutactivitytype/crosscountryskiing",
    "html": "See Also\nSnow and ice sports\ncase curling\nThe constant for curling.\ncase downhillSkiing\nThe constant for downhill skiing.\ncase snowSports\nThe constant for a variety of snow sports, including sledding, snowmobiling, or building a snowman.\ncase snowboarding\nThe constant for snowboarding.\ncase skatingSports\nThe constant for skating activities, including ice skating, speed skating, inline skating, and skateboarding."
  },
  {
    "title": "HKWorkoutActivityType.fitnessGaming | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkoutactivitytype/fitnessgaming",
    "html": "See Also\nExercise and fitness\ncase preparationAndRecovery\nThe constant for warm-up and therapeutic activities like foam rolling and stretching.\ncase flexibility\nThe constant for a flexibility workout.\ncase cooldown\nThe constant for low intensity stretching and mobility exercises following a more vigorous workout.\ncase walking\nThe constant for walking.\ncase running\nThe constant for running and jogging.\ncase wheelchairWalkPace\nThe constant for a wheelchair workout at walking pace.\ncase wheelchairRunPace\nThe constant for wheelchair workout at running pace.\ncase cycling\nThe constant for cycling.\ncase handCycling\nThe constant for hand cycling.\ncase coreTraining\nThe constant for core training.\ncase elliptical\nThe constant for workouts on an elliptical machine.\ncase functionalStrengthTraining\nThe constant for strength training, primarily with free weights and body weight.\ncase traditionalStrengthTraining\nThe constant for strength training exercises primarily using machines or free weights.\ncase crossTraining\nThe constant for exercise that includes any mixture of cardio, strength, and/or flexibility training.\ncase mixedCardio\nThe constant for workouts that mix a variety of cardio exercise machines or modalities.\ncase highIntensityIntervalTraining\nThe constant for high intensity interval training.\ncase jumpRope\nThe constant for jumping rope.\ncase stairClimbing\nThe constant for workouts using a stair climbing machine.\ncase stairs\nThe constant for running, walking, or other drills using stairs (for example, in a stadium or inside a multilevel building).\ncase stepTraining\nThe constant for training using a step bench."
  },
  {
    "title": "HKWorkoutActivityType.stepTraining | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkoutactivitytype/steptraining",
    "html": "See Also\nExercise and fitness\ncase preparationAndRecovery\nThe constant for warm-up and therapeutic activities like foam rolling and stretching.\ncase flexibility\nThe constant for a flexibility workout.\ncase cooldown\nThe constant for low intensity stretching and mobility exercises following a more vigorous workout.\ncase walking\nThe constant for walking.\ncase running\nThe constant for running and jogging.\ncase wheelchairWalkPace\nThe constant for a wheelchair workout at walking pace.\ncase wheelchairRunPace\nThe constant for wheelchair workout at running pace.\ncase cycling\nThe constant for cycling.\ncase handCycling\nThe constant for hand cycling.\ncase coreTraining\nThe constant for core training.\ncase elliptical\nThe constant for workouts on an elliptical machine.\ncase functionalStrengthTraining\nThe constant for strength training, primarily with free weights and body weight.\ncase traditionalStrengthTraining\nThe constant for strength training exercises primarily using machines or free weights.\ncase crossTraining\nThe constant for exercise that includes any mixture of cardio, strength, and/or flexibility training.\ncase mixedCardio\nThe constant for workouts that mix a variety of cardio exercise machines or modalities.\ncase highIntensityIntervalTraining\nThe constant for high intensity interval training.\ncase jumpRope\nThe constant for jumping rope.\ncase stairClimbing\nThe constant for workouts using a stair climbing machine.\ncase stairs\nThe constant for running, walking, or other drills using stairs (for example, in a stadium or inside a multilevel building).\ncase fitnessGaming\nThe constant for playing fitness-based video games."
  },
  {
    "title": "HKWorkoutActivityType.badminton | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkoutactivitytype/badminton",
    "html": "See Also\nRacket sports\ncase pickleball\nThe constant for playing pickleball.\ncase racquetball\nThe constant for playing racquetball.\ncase squash\nThe constant for playing squash.\ncase tableTennis\nThe constant for playing table tennis.\ncase tennis\nThe constant for playing tennis."
  },
  {
    "title": "HKWorkoutActivityType.socialDance | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkoutactivitytype/socialdance",
    "html": "See Also\nStudio activities\ncase barre\nThe constant for barre workout.\ncase cardioDance\nThe constant for cardiovascular dance workouts.\ncase yoga\nThe constant for practicing yoga.\ncase mindAndBody\nThe constant for performing activities like walking meditation, Gyrotonic exercise, and Qigong.\ncase pilates\nThe constant for a pilates workout."
  },
  {
    "title": "HKWorkoutActivityType.cardioDance | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkoutactivitytype/cardiodance",
    "html": "See Also\nStudio activities\ncase barre\nThe constant for barre workout.\ncase socialDance\nThe constant for dancing with a partner or partners, such as swing, salsa, or folk dances.\ncase yoga\nThe constant for practicing yoga.\ncase mindAndBody\nThe constant for performing activities like walking meditation, Gyrotonic exercise, and Qigong.\ncase pilates\nThe constant for a pilates workout."
  },
  {
    "title": "HKWorkoutActivityType.barre | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkoutactivitytype/barre",
    "html": "See Also\nStudio activities\ncase cardioDance\nThe constant for cardiovascular dance workouts.\ncase socialDance\nThe constant for dancing with a partner or partners, such as swing, salsa, or folk dances.\ncase yoga\nThe constant for practicing yoga.\ncase mindAndBody\nThe constant for performing activities like walking meditation, Gyrotonic exercise, and Qigong.\ncase pilates\nThe constant for a pilates workout."
  },
  {
    "title": "HKWorkoutActivityType.mixedCardio | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkoutactivitytype/mixedcardio",
    "html": "See Also\nExercise and fitness\ncase preparationAndRecovery\nThe constant for warm-up and therapeutic activities like foam rolling and stretching.\ncase flexibility\nThe constant for a flexibility workout.\ncase cooldown\nThe constant for low intensity stretching and mobility exercises following a more vigorous workout.\ncase walking\nThe constant for walking.\ncase running\nThe constant for running and jogging.\ncase wheelchairWalkPace\nThe constant for a wheelchair workout at walking pace.\ncase wheelchairRunPace\nThe constant for wheelchair workout at running pace.\ncase cycling\nThe constant for cycling.\ncase handCycling\nThe constant for hand cycling.\ncase coreTraining\nThe constant for core training.\ncase elliptical\nThe constant for workouts on an elliptical machine.\ncase functionalStrengthTraining\nThe constant for strength training, primarily with free weights and body weight.\ncase traditionalStrengthTraining\nThe constant for strength training exercises primarily using machines or free weights.\ncase crossTraining\nThe constant for exercise that includes any mixture of cardio, strength, and/or flexibility training.\ncase highIntensityIntervalTraining\nThe constant for high intensity interval training.\ncase jumpRope\nThe constant for jumping rope.\ncase stairClimbing\nThe constant for workouts using a stair climbing machine.\ncase stairs\nThe constant for running, walking, or other drills using stairs (for example, in a stadium or inside a multilevel building).\ncase stepTraining\nThe constant for training using a step bench.\ncase fitnessGaming\nThe constant for playing fitness-based video games."
  },
  {
    "title": "HKWorkoutActivityType.jumpRope | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkoutactivitytype/jumprope",
    "html": "See Also\nExercise and fitness\ncase preparationAndRecovery\nThe constant for warm-up and therapeutic activities like foam rolling and stretching.\ncase flexibility\nThe constant for a flexibility workout.\ncase cooldown\nThe constant for low intensity stretching and mobility exercises following a more vigorous workout.\ncase walking\nThe constant for walking.\ncase running\nThe constant for running and jogging.\ncase wheelchairWalkPace\nThe constant for a wheelchair workout at walking pace.\ncase wheelchairRunPace\nThe constant for wheelchair workout at running pace.\ncase cycling\nThe constant for cycling.\ncase handCycling\nThe constant for hand cycling.\ncase coreTraining\nThe constant for core training.\ncase elliptical\nThe constant for workouts on an elliptical machine.\ncase functionalStrengthTraining\nThe constant for strength training, primarily with free weights and body weight.\ncase traditionalStrengthTraining\nThe constant for strength training exercises primarily using machines or free weights.\ncase crossTraining\nThe constant for exercise that includes any mixture of cardio, strength, and/or flexibility training.\ncase mixedCardio\nThe constant for workouts that mix a variety of cardio exercise machines or modalities.\ncase highIntensityIntervalTraining\nThe constant for high intensity interval training.\ncase stairClimbing\nThe constant for workouts using a stair climbing machine.\ncase stairs\nThe constant for running, walking, or other drills using stairs (for example, in a stadium or inside a multilevel building).\ncase stepTraining\nThe constant for training using a step bench.\ncase fitnessGaming\nThe constant for playing fitness-based video games."
  },
  {
    "title": "activeEnergyBurned | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkactivitysummary/1615772-activeenergyburned",
    "html": "Discussion\n\nThe HKQuantity object for this property must use energy units.\n\nSee Also\nAccessing the summary’s data\nvar activityMoveMode: HKActivityMoveMode\nThe move mode that they system used for this activity summary.\nenum HKActivityMoveMode\nConstants that specify the value measured by the Move ring on the user’s device.\nvar activeEnergyBurnedGoal: HKQuantity\nThe user’s daily goal for active energy burned.\nvar appleMoveTime: HKQuantity\nThe amount of time the user spent performing activities that involve full-body movements during the specified day.\nvar appleMoveTimeGoal: HKQuantity\nThe user’s daily goal for move time.\nvar appleExerciseTime: HKQuantity\nThe amount of time that the user has spent exercising during the specified day.\nvar appleExerciseTimeGoal: HKQuantity\nThe user’s daily exercise goal.\nvar exerciseTimeGoal: HKQuantity?\nThe user’s daily goal for exercise time.\nvar appleStandHours: HKQuantity\nThe number hours in the specified day during which the user has stood and moved for at least a minute per hour.\nvar standHoursGoal: HKQuantity?\nThe user’s daily goal for stand hours.\nvar appleStandHoursGoal: HKQuantity\nThe user’s daily goal for stand hours.\nenum HKCategoryValueAppleStandHour\nCategories that the system used to indicate whether the user stood during the sample’s duration.\nfunc dateComponents(for: Calendar) -> DateComponents\nDate components that uniquely identify the day represented by the summary object.\nRelated Documentation\nstatic let activeEnergyBurned: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of active energy the user has burned."
  },
  {
    "title": "immunization | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkfhirresourcetype/2980681-immunization",
    "html": "See Also\nResource Types\nstatic let allergyIntolerance: HKFHIRResourceType\nA type that identifies FHIR resources for allergies and intolerances.\nstatic let condition: HKFHIRResourceType\nA type that identifies FHIR resources for a condition, problem, diagnosis, or other event.\nstatic let diagnosticReport: HKFHIRResourceType\nA type that identifies FHIR resources for findings and interpretation of diagnostic tests.\nstatic let documentReference: HKFHIRResourceType\nA type that identifies FHIR resources for document references.\nstatic let medicationOrder: HKFHIRResourceType\nA type that identifies FHIR resources for prescriptions or other orders for medication.\nstatic let medicationDispense: HKFHIRResourceType\nA type that identifies FHIR resources for the delivery of medication (usually in response to a prescription).\nstatic let medicationStatement: HKFHIRResourceType\nA type that identifies FHIR resources for statements about medication taken by the patient.\nstatic let medicationRequest: HKFHIRResourceType\nA type that identifies FHIR resources for prescriptions or other orders or requests for medication.\nstatic let observation: HKFHIRResourceType\nA type that identifies FHIR resources for medical observations, including lab results and vital signs.\nstatic let procedure: HKFHIRResourceType\nA type that identifies FHIR resources for procedures performed on the patient.\nstatic let coverage: HKFHIRResourceType\nA type that identifies FHIR resources containing information about the user’s insurance coverage.\nRelated Documentation\nstatic let immunizationRecord: HKClinicalTypeIdentifier\nA type identifier for records of the current or historical administration of vaccines."
  },
  {
    "title": "appleStandHoursGoal | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkactivitysummary/1615113-applestandhoursgoal",
    "html": "Discussion\n\nThe HKQuantity object for this property must use count units.\n\nSee Also\nAccessing the summary’s data\nvar activityMoveMode: HKActivityMoveMode\nThe move mode that they system used for this activity summary.\nenum HKActivityMoveMode\nConstants that specify the value measured by the Move ring on the user’s device.\nvar activeEnergyBurned: HKQuantity\nThe amount of active energy the user burned during the specified day.\nvar activeEnergyBurnedGoal: HKQuantity\nThe user’s daily goal for active energy burned.\nvar appleMoveTime: HKQuantity\nThe amount of time the user spent performing activities that involve full-body movements during the specified day.\nvar appleMoveTimeGoal: HKQuantity\nThe user’s daily goal for move time.\nvar appleExerciseTime: HKQuantity\nThe amount of time that the user has spent exercising during the specified day.\nvar appleExerciseTimeGoal: HKQuantity\nThe user’s daily exercise goal.\nvar exerciseTimeGoal: HKQuantity?\nThe user’s daily goal for exercise time.\nvar appleStandHours: HKQuantity\nThe number hours in the specified day during which the user has stood and moved for at least a minute per hour.\nvar standHoursGoal: HKQuantity?\nThe user’s daily goal for stand hours.\nenum HKCategoryValueAppleStandHour\nCategories that the system used to indicate whether the user stood during the sample’s duration.\nfunc dateComponents(for: Calendar) -> DateComponents\nDate components that uniquely identify the day represented by the summary object.\nRelated Documentation\nstatic let appleStandHour: HKCategoryTypeIdentifier\nA category sample type that counts the number of hours in the day during which the user has stood and moved for at least one minute per hour."
  },
  {
    "title": "appleExerciseTimeGoal | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkactivitysummary/1615409-appleexercisetimegoal",
    "html": "Discussion\n\nThe HKQuantity object for this property must use time units.\n\nSee Also\nAccessing the summary’s data\nvar activityMoveMode: HKActivityMoveMode\nThe move mode that they system used for this activity summary.\nenum HKActivityMoveMode\nConstants that specify the value measured by the Move ring on the user’s device.\nvar activeEnergyBurned: HKQuantity\nThe amount of active energy the user burned during the specified day.\nvar activeEnergyBurnedGoal: HKQuantity\nThe user’s daily goal for active energy burned.\nvar appleMoveTime: HKQuantity\nThe amount of time the user spent performing activities that involve full-body movements during the specified day.\nvar appleMoveTimeGoal: HKQuantity\nThe user’s daily goal for move time.\nvar appleExerciseTime: HKQuantity\nThe amount of time that the user has spent exercising during the specified day.\nvar exerciseTimeGoal: HKQuantity?\nThe user’s daily goal for exercise time.\nvar appleStandHours: HKQuantity\nThe number hours in the specified day during which the user has stood and moved for at least a minute per hour.\nvar standHoursGoal: HKQuantity?\nThe user’s daily goal for stand hours.\nvar appleStandHoursGoal: HKQuantity\nThe user’s daily goal for stand hours.\nenum HKCategoryValueAppleStandHour\nCategories that the system used to indicate whether the user stood during the sample’s duration.\nfunc dateComponents(for: Calendar) -> DateComponents\nDate components that uniquely identify the day represented by the summary object.\nRelated Documentation\nstatic let appleExerciseTime: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of time the user spent exercising."
  },
  {
    "title": "activeEnergyBurnedGoal | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkactivitysummary/1615291-activeenergyburnedgoal",
    "html": "Discussion\n\nThe HKQuantity object for this property must use energy units.\n\nSee Also\nAccessing the summary’s data\nvar activityMoveMode: HKActivityMoveMode\nThe move mode that they system used for this activity summary.\nenum HKActivityMoveMode\nConstants that specify the value measured by the Move ring on the user’s device.\nvar activeEnergyBurned: HKQuantity\nThe amount of active energy the user burned during the specified day.\nvar appleMoveTime: HKQuantity\nThe amount of time the user spent performing activities that involve full-body movements during the specified day.\nvar appleMoveTimeGoal: HKQuantity\nThe user’s daily goal for move time.\nvar appleExerciseTime: HKQuantity\nThe amount of time that the user has spent exercising during the specified day.\nvar appleExerciseTimeGoal: HKQuantity\nThe user’s daily exercise goal.\nvar exerciseTimeGoal: HKQuantity?\nThe user’s daily goal for exercise time.\nvar appleStandHours: HKQuantity\nThe number hours in the specified day during which the user has stood and moved for at least a minute per hour.\nvar standHoursGoal: HKQuantity?\nThe user’s daily goal for stand hours.\nvar appleStandHoursGoal: HKQuantity\nThe user’s daily goal for stand hours.\nenum HKCategoryValueAppleStandHour\nCategories that the system used to indicate whether the user stood during the sample’s duration.\nfunc dateComponents(for: Calendar) -> DateComponents\nDate components that uniquely identify the day represented by the summary object.\nRelated Documentation\nstatic let activeEnergyBurned: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of active energy the user has burned."
  },
  {
    "title": "appleStandHours | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkactivitysummary/1615636-applestandhours",
    "html": "Discussion\n\nThe HKQuantity object for this property must use count() units.\n\nSee Also\nAccessing the summary’s data\nvar activityMoveMode: HKActivityMoveMode\nThe move mode that they system used for this activity summary.\nenum HKActivityMoveMode\nConstants that specify the value measured by the Move ring on the user’s device.\nvar activeEnergyBurned: HKQuantity\nThe amount of active energy the user burned during the specified day.\nvar activeEnergyBurnedGoal: HKQuantity\nThe user’s daily goal for active energy burned.\nvar appleMoveTime: HKQuantity\nThe amount of time the user spent performing activities that involve full-body movements during the specified day.\nvar appleMoveTimeGoal: HKQuantity\nThe user’s daily goal for move time.\nvar appleExerciseTime: HKQuantity\nThe amount of time that the user has spent exercising during the specified day.\nvar appleExerciseTimeGoal: HKQuantity\nThe user’s daily exercise goal.\nvar exerciseTimeGoal: HKQuantity?\nThe user’s daily goal for exercise time.\nvar standHoursGoal: HKQuantity?\nThe user’s daily goal for stand hours.\nvar appleStandHoursGoal: HKQuantity\nThe user’s daily goal for stand hours.\nenum HKCategoryValueAppleStandHour\nCategories that the system used to indicate whether the user stood during the sample’s duration.\nfunc dateComponents(for: Calendar) -> DateComponents\nDate components that uniquely identify the day represented by the summary object.\nRelated Documentation\nstatic let appleStandHour: HKCategoryTypeIdentifier\nA category sample type that counts the number of hours in the day during which the user has stood and moved for at least one minute per hour."
  },
  {
    "title": "appleExerciseTime | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkactivitysummary/1615266-appleexercisetime",
    "html": "Discussion\n\nExercise time measures every full minute of movement that equals or exceeds the intensity of a brisk walk.\n\nApple watch automatically records exercise time. By default, the watch uses the accelerometer to estimate the intensity of the user’s movement. However, during workout sessions, the watch uses additional sensors, like the heart rate sensor and GPS, to generate estimates. HKWorkoutSession sessions also contribute to the exercise time. For more information, see Fill the Activity rings.\n\nThe HKQuantity object for this property must use units of time, such as hour(), minute(), or second().\n\nSee Also\nAccessing the summary’s data\nvar activityMoveMode: HKActivityMoveMode\nThe move mode that they system used for this activity summary.\nenum HKActivityMoveMode\nConstants that specify the value measured by the Move ring on the user’s device.\nvar activeEnergyBurned: HKQuantity\nThe amount of active energy the user burned during the specified day.\nvar activeEnergyBurnedGoal: HKQuantity\nThe user’s daily goal for active energy burned.\nvar appleMoveTime: HKQuantity\nThe amount of time the user spent performing activities that involve full-body movements during the specified day.\nvar appleMoveTimeGoal: HKQuantity\nThe user’s daily goal for move time.\nvar appleExerciseTimeGoal: HKQuantity\nThe user’s daily exercise goal.\nvar exerciseTimeGoal: HKQuantity?\nThe user’s daily goal for exercise time.\nvar appleStandHours: HKQuantity\nThe number hours in the specified day during which the user has stood and moved for at least a minute per hour.\nvar standHoursGoal: HKQuantity?\nThe user’s daily goal for stand hours.\nvar appleStandHoursGoal: HKQuantity\nThe user’s daily goal for stand hours.\nenum HKCategoryValueAppleStandHour\nCategories that the system used to indicate whether the user stood during the sample’s duration.\nfunc dateComponents(for: Calendar) -> DateComponents\nDate components that uniquely identify the day represented by the summary object.\nRelated Documentation\nstatic let appleExerciseTime: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of time the user spent exercising."
  },
  {
    "title": "activitySummary | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkactivityringview/1615405-activitysummary",
    "html": "Discussion\n\nAny changes made directly to this property are not animated. To animate changes, use setActivitySummary(_:animated:) instead.\n\nSee Also\nSetting the activity summary\nfunc setActivitySummary(HKActivitySummary?, animated: Bool)\nSets the activity summary displayed by the activity ring view."
  },
  {
    "title": "HKWorkoutSessionState.prepared | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkoutsessionstate/prepared",
    "html": "Discussion\n\nThe app can continue to run in the background, even after the user lowers their wrist, but it doesn’t yet generate workout data.\n\nSee Also\nSession states\ncase notStarted\nThe workout session has not started.\ncase running\nThe workout session is running.\ncase paused\nThe workout session has paused.\ncase stopped\nThe session has stopped.\ncase ended\nThe workout session has ended.\nRelated Documentation\nfunc prepare()\nPrepares the workout session."
  },
  {
    "title": "setActivitySummary(_:animated:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkactivityringview/1615407-setactivitysummary",
    "html": "Parameters\nactivitySummary\n\nThe new activity summary.\n\nanimated\n\nIf true, the change is animated.\n\nSee Also\nSetting the activity summary\nvar activitySummary: HKActivitySummary?\nThe active summary displayed by the activity ring view."
  },
  {
    "title": "HKWorkoutSessionState.notStarted | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkoutsessionstate/notstarted",
    "html": "See Also\nSession states\ncase prepared\nThe session is ready but not yet running.\ncase running\nThe workout session is running.\ncase paused\nThe workout session has paused.\ncase stopped\nThe session has stopped.\ncase ended\nThe workout session has ended."
  },
  {
    "title": "HKWorkoutActivityType.dance | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkoutactivitytype/dance",
    "html": "Deprecated\n\nUse HKWorkoutActivityType.cardioDance or HKWorkoutActivityType.socialDance instead.\n\nSee Also\nDeprecated activity types\ncase danceInspiredTraining\nThe constant for workouts inspired by dance, including Pilates, Barre, and Feldenkrais.\ncase mixedMetabolicCardioTraining\nThe constant for performing any mix of cardio-focused exercises."
  },
  {
    "title": "HKWorkoutActivityType.martialArts | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkoutactivitytype/martialarts",
    "html": "See Also\nMartial arts\ncase boxing\nThe constant for boxing.\ncase kickboxing\nThe constant for kickboxing.\ncase taiChi\nThe constant for tai chi.\ncase wrestling\nThe constant for wrestling."
  },
  {
    "title": "HKWorkoutActivityType.surfingSports | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkoutactivitytype/surfingsports",
    "html": "See Also\nWater activities\ncase paddleSports\nThe constant for canoeing, kayaking, paddling an outrigger, paddling a stand-up paddle board, and related sports.\ncase rowing\nThe constant for rowing.\ncase sailing\nThe constant for sailing.\ncase swimming\nThe constant for swimming.\ncase waterFitness\nThe constant for aerobic exercise performed in shallow water.\ncase waterPolo\nThe constant for playing water polo.\ncase waterSports\nThe constant for a variety of water sports, including water skiing, wake boarding, and related activities."
  },
  {
    "title": "HKWorkoutActivityType.skatingSports | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkoutactivitytype/skatingsports",
    "html": "See Also\nSnow and ice sports\ncase crossCountrySkiing\nThe constant for cross country skiing.\ncase curling\nThe constant for curling.\ncase downhillSkiing\nThe constant for downhill skiing.\ncase snowSports\nThe constant for a variety of snow sports, including sledding, snowmobiling, or building a snowman.\ncase snowboarding\nThe constant for snowboarding."
  },
  {
    "title": "updateHandler | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkanchoredobjectquery/1615691-updatehandler",
    "html": "Discussion\n\nIf this property is set to nil, the anchor query automatically stops as soon as it finishes calculating the initial results. If this property is not nil, the query behaves similarly to the observer query: it continues to run, monitoring the HealthKit store. The system executes the update handler on a background queue whenever matching samples are saved to or deleted from the HealthKit store."
  },
  {
    "title": "nightSweats | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkcategorytypeidentifier/3552069-nightsweats",
    "html": "Discussion\n\nThese samples use values from the HKCategoryValueSeverity enumeration.\n\nSee Also\nSleep\nstatic let sleepChanges: HKCategoryTypeIdentifier\nA category type that records sleep changes as a symptom."
  },
  {
    "title": "heartbeatSeries(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hksamplepredicate/3916533-heartbeatseries",
    "html": "Parameters\npredicate\n\nAn optional predicate that further restricts the results that the query returns.\n\nDiscussion\n\nUse this method to create an HKSamplePredicate instance that you can use to query for HKHeartbeatSeriesSample objects.\n\nSee Also\nCreating Sample Predicates\nstatic func audiogram(NSPredicate?) -> HKSamplePredicate<HKAudiogramSample>\nReturns a sample predicate that matches audiogram samples.\nstatic func categorySample(type: HKCategoryType, predicate: NSPredicate?) -> HKSamplePredicate<HKCategorySample>\nReturns a sample predicate that matches category samples.\nstatic func clinicalRecord(type: HKClinicalType, predicate: NSPredicate?) -> HKSamplePredicate<HKClinicalRecord>\nReturns a sample predicate that matches clinical record samples.\nstatic func correlation(type: HKCorrelationType, predicate: NSPredicate?) -> HKSamplePredicate<HKCorrelation>\nReturns a sample predicate that matches samples that contain correlated data.\nstatic func electrocardiogram(NSPredicate?) -> HKSamplePredicate<HKElectrocardiogram>\nReturns a sample predicate that matches electrocardiogram samples.\nstatic func quantitySample(type: HKQuantityType, predicate: NSPredicate?) -> HKSamplePredicate<HKQuantitySample>\nReturns a sample predicate that matches quantity samples.\nstatic func sample(type: HKSampleType, predicate: NSPredicate?) -> HKSamplePredicate<HKSample>\nReturns a sample predicate that matches samples.\nstatic func visionPrescription(NSPredicate?) -> HKSamplePredicate<HKVisionPrescription>\nReturns a predicate that matches prescription samples.\nstatic func workout(NSPredicate?) -> HKSamplePredicate<HKWorkout>\nReturns a sample predicate that matches workout samples.\nstatic func workoutRoute(NSPredicate?) -> HKSamplePredicate<HKWorkoutRoute>\nReturns a sample predicate that matches samples containing workout route data."
  },
  {
    "title": "HKWorkoutActivityType.handCycling | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkoutactivitytype/handcycling",
    "html": "See Also\nExercise and fitness\ncase preparationAndRecovery\nThe constant for warm-up and therapeutic activities like foam rolling and stretching.\ncase flexibility\nThe constant for a flexibility workout.\ncase cooldown\nThe constant for low intensity stretching and mobility exercises following a more vigorous workout.\ncase walking\nThe constant for walking.\ncase running\nThe constant for running and jogging.\ncase wheelchairWalkPace\nThe constant for a wheelchair workout at walking pace.\ncase wheelchairRunPace\nThe constant for wheelchair workout at running pace.\ncase cycling\nThe constant for cycling.\ncase coreTraining\nThe constant for core training.\ncase elliptical\nThe constant for workouts on an elliptical machine.\ncase functionalStrengthTraining\nThe constant for strength training, primarily with free weights and body weight.\ncase traditionalStrengthTraining\nThe constant for strength training exercises primarily using machines or free weights.\ncase crossTraining\nThe constant for exercise that includes any mixture of cardio, strength, and/or flexibility training.\ncase mixedCardio\nThe constant for workouts that mix a variety of cardio exercise machines or modalities.\ncase highIntensityIntervalTraining\nThe constant for high intensity interval training.\ncase jumpRope\nThe constant for jumping rope.\ncase stairClimbing\nThe constant for workouts using a stair climbing machine.\ncase stairs\nThe constant for running, walking, or other drills using stairs (for example, in a stadium or inside a multilevel building).\ncase stepTraining\nThe constant for training using a step bench.\ncase fitnessGaming\nThe constant for playing fitness-based video games."
  },
  {
    "title": "HKWorkoutActivityType.crossTraining | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkoutactivitytype/crosstraining",
    "html": "See Also\nExercise and fitness\ncase preparationAndRecovery\nThe constant for warm-up and therapeutic activities like foam rolling and stretching.\ncase flexibility\nThe constant for a flexibility workout.\ncase cooldown\nThe constant for low intensity stretching and mobility exercises following a more vigorous workout.\ncase walking\nThe constant for walking.\ncase running\nThe constant for running and jogging.\ncase wheelchairWalkPace\nThe constant for a wheelchair workout at walking pace.\ncase wheelchairRunPace\nThe constant for wheelchair workout at running pace.\ncase cycling\nThe constant for cycling.\ncase handCycling\nThe constant for hand cycling.\ncase coreTraining\nThe constant for core training.\ncase elliptical\nThe constant for workouts on an elliptical machine.\ncase functionalStrengthTraining\nThe constant for strength training, primarily with free weights and body weight.\ncase traditionalStrengthTraining\nThe constant for strength training exercises primarily using machines or free weights.\ncase mixedCardio\nThe constant for workouts that mix a variety of cardio exercise machines or modalities.\ncase highIntensityIntervalTraining\nThe constant for high intensity interval training.\ncase jumpRope\nThe constant for jumping rope.\ncase stairClimbing\nThe constant for workouts using a stair climbing machine.\ncase stairs\nThe constant for running, walking, or other drills using stairs (for example, in a stadium or inside a multilevel building).\ncase stepTraining\nThe constant for training using a step bench.\ncase fitnessGaming\nThe constant for playing fitness-based video games."
  },
  {
    "title": "HKWorkoutActivityType.traditionalStrengthTraining | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkoutactivitytype/traditionalstrengthtraining",
    "html": "See Also\nExercise and fitness\ncase preparationAndRecovery\nThe constant for warm-up and therapeutic activities like foam rolling and stretching.\ncase flexibility\nThe constant for a flexibility workout.\ncase cooldown\nThe constant for low intensity stretching and mobility exercises following a more vigorous workout.\ncase walking\nThe constant for walking.\ncase running\nThe constant for running and jogging.\ncase wheelchairWalkPace\nThe constant for a wheelchair workout at walking pace.\ncase wheelchairRunPace\nThe constant for wheelchair workout at running pace.\ncase cycling\nThe constant for cycling.\ncase handCycling\nThe constant for hand cycling.\ncase coreTraining\nThe constant for core training.\ncase elliptical\nThe constant for workouts on an elliptical machine.\ncase functionalStrengthTraining\nThe constant for strength training, primarily with free weights and body weight.\ncase crossTraining\nThe constant for exercise that includes any mixture of cardio, strength, and/or flexibility training.\ncase mixedCardio\nThe constant for workouts that mix a variety of cardio exercise machines or modalities.\ncase highIntensityIntervalTraining\nThe constant for high intensity interval training.\ncase jumpRope\nThe constant for jumping rope.\ncase stairClimbing\nThe constant for workouts using a stair climbing machine.\ncase stairs\nThe constant for running, walking, or other drills using stairs (for example, in a stadium or inside a multilevel building).\ncase stepTraining\nThe constant for training using a step bench.\ncase fitnessGaming\nThe constant for playing fitness-based video games."
  },
  {
    "title": "categorySample(type:predicate:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hksamplepredicate/3916527-categorysample",
    "html": "Parameters\ncategoryType\n\nA type that identifies samples that contain a value from a small set of possible values.\n\npredicate\n\nAn optional predicate that further restricts the results that the query returns.\n\nDiscussion\n\nUse this method to create an HKSamplePredicate instance that you can use to query for HKCategorySample objects.\n\nSee Also\nCreating Sample Predicates\nstatic func audiogram(NSPredicate?) -> HKSamplePredicate<HKAudiogramSample>\nReturns a sample predicate that matches audiogram samples.\nstatic func clinicalRecord(type: HKClinicalType, predicate: NSPredicate?) -> HKSamplePredicate<HKClinicalRecord>\nReturns a sample predicate that matches clinical record samples.\nstatic func correlation(type: HKCorrelationType, predicate: NSPredicate?) -> HKSamplePredicate<HKCorrelation>\nReturns a sample predicate that matches samples that contain correlated data.\nstatic func electrocardiogram(NSPredicate?) -> HKSamplePredicate<HKElectrocardiogram>\nReturns a sample predicate that matches electrocardiogram samples.\nstatic func heartbeatSeries(NSPredicate?) -> HKSamplePredicate<HKHeartbeatSeriesSample>\nReturns a sample predicate that matches heartbeat series samples.\nstatic func quantitySample(type: HKQuantityType, predicate: NSPredicate?) -> HKSamplePredicate<HKQuantitySample>\nReturns a sample predicate that matches quantity samples.\nstatic func sample(type: HKSampleType, predicate: NSPredicate?) -> HKSamplePredicate<HKSample>\nReturns a sample predicate that matches samples.\nstatic func visionPrescription(NSPredicate?) -> HKSamplePredicate<HKVisionPrescription>\nReturns a predicate that matches prescription samples.\nstatic func workout(NSPredicate?) -> HKSamplePredicate<HKWorkout>\nReturns a sample predicate that matches workout samples.\nstatic func workoutRoute(NSPredicate?) -> HKSamplePredicate<HKWorkoutRoute>\nReturns a sample predicate that matches samples containing workout route data."
  },
  {
    "title": "HKWorkoutActivityType.running | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkoutactivitytype/running",
    "html": "See Also\nExercise and fitness\ncase preparationAndRecovery\nThe constant for warm-up and therapeutic activities like foam rolling and stretching.\ncase flexibility\nThe constant for a flexibility workout.\ncase cooldown\nThe constant for low intensity stretching and mobility exercises following a more vigorous workout.\ncase walking\nThe constant for walking.\ncase wheelchairWalkPace\nThe constant for a wheelchair workout at walking pace.\ncase wheelchairRunPace\nThe constant for wheelchair workout at running pace.\ncase cycling\nThe constant for cycling.\ncase handCycling\nThe constant for hand cycling.\ncase coreTraining\nThe constant for core training.\ncase elliptical\nThe constant for workouts on an elliptical machine.\ncase functionalStrengthTraining\nThe constant for strength training, primarily with free weights and body weight.\ncase traditionalStrengthTraining\nThe constant for strength training exercises primarily using machines or free weights.\ncase crossTraining\nThe constant for exercise that includes any mixture of cardio, strength, and/or flexibility training.\ncase mixedCardio\nThe constant for workouts that mix a variety of cardio exercise machines or modalities.\ncase highIntensityIntervalTraining\nThe constant for high intensity interval training.\ncase jumpRope\nThe constant for jumping rope.\ncase stairClimbing\nThe constant for workouts using a stair climbing machine.\ncase stairs\nThe constant for running, walking, or other drills using stairs (for example, in a stadium or inside a multilevel building).\ncase stepTraining\nThe constant for training using a step bench.\ncase fitnessGaming\nThe constant for playing fitness-based video games."
  },
  {
    "title": "HKWorkoutActivityType.functionalStrengthTraining | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkoutactivitytype/functionalstrengthtraining",
    "html": "See Also\nExercise and fitness\ncase preparationAndRecovery\nThe constant for warm-up and therapeutic activities like foam rolling and stretching.\ncase flexibility\nThe constant for a flexibility workout.\ncase cooldown\nThe constant for low intensity stretching and mobility exercises following a more vigorous workout.\ncase walking\nThe constant for walking.\ncase running\nThe constant for running and jogging.\ncase wheelchairWalkPace\nThe constant for a wheelchair workout at walking pace.\ncase wheelchairRunPace\nThe constant for wheelchair workout at running pace.\ncase cycling\nThe constant for cycling.\ncase handCycling\nThe constant for hand cycling.\ncase coreTraining\nThe constant for core training.\ncase elliptical\nThe constant for workouts on an elliptical machine.\ncase traditionalStrengthTraining\nThe constant for strength training exercises primarily using machines or free weights.\ncase crossTraining\nThe constant for exercise that includes any mixture of cardio, strength, and/or flexibility training.\ncase mixedCardio\nThe constant for workouts that mix a variety of cardio exercise machines or modalities.\ncase highIntensityIntervalTraining\nThe constant for high intensity interval training.\ncase jumpRope\nThe constant for jumping rope.\ncase stairClimbing\nThe constant for workouts using a stair climbing machine.\ncase stairs\nThe constant for running, walking, or other drills using stairs (for example, in a stadium or inside a multilevel building).\ncase stepTraining\nThe constant for training using a step bench.\ncase fitnessGaming\nThe constant for playing fitness-based video games."
  },
  {
    "title": "HKWorkoutActivityType.elliptical | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkoutactivitytype/elliptical",
    "html": "See Also\nExercise and fitness\ncase preparationAndRecovery\nThe constant for warm-up and therapeutic activities like foam rolling and stretching.\ncase flexibility\nThe constant for a flexibility workout.\ncase cooldown\nThe constant for low intensity stretching and mobility exercises following a more vigorous workout.\ncase walking\nThe constant for walking.\ncase running\nThe constant for running and jogging.\ncase wheelchairWalkPace\nThe constant for a wheelchair workout at walking pace.\ncase wheelchairRunPace\nThe constant for wheelchair workout at running pace.\ncase cycling\nThe constant for cycling.\ncase handCycling\nThe constant for hand cycling.\ncase coreTraining\nThe constant for core training.\ncase functionalStrengthTraining\nThe constant for strength training, primarily with free weights and body weight.\ncase traditionalStrengthTraining\nThe constant for strength training exercises primarily using machines or free weights.\ncase crossTraining\nThe constant for exercise that includes any mixture of cardio, strength, and/or flexibility training.\ncase mixedCardio\nThe constant for workouts that mix a variety of cardio exercise machines or modalities.\ncase highIntensityIntervalTraining\nThe constant for high intensity interval training.\ncase jumpRope\nThe constant for jumping rope.\ncase stairClimbing\nThe constant for workouts using a stair climbing machine.\ncase stairs\nThe constant for running, walking, or other drills using stairs (for example, in a stadium or inside a multilevel building).\ncase stepTraining\nThe constant for training using a step bench.\ncase fitnessGaming\nThe constant for playing fitness-based video games."
  },
  {
    "title": "HKWorkoutActivityType.coreTraining | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkoutactivitytype/coretraining",
    "html": "See Also\nExercise and fitness\ncase preparationAndRecovery\nThe constant for warm-up and therapeutic activities like foam rolling and stretching.\ncase flexibility\nThe constant for a flexibility workout.\ncase cooldown\nThe constant for low intensity stretching and mobility exercises following a more vigorous workout.\ncase walking\nThe constant for walking.\ncase running\nThe constant for running and jogging.\ncase wheelchairWalkPace\nThe constant for a wheelchair workout at walking pace.\ncase wheelchairRunPace\nThe constant for wheelchair workout at running pace.\ncase cycling\nThe constant for cycling.\ncase handCycling\nThe constant for hand cycling.\ncase elliptical\nThe constant for workouts on an elliptical machine.\ncase functionalStrengthTraining\nThe constant for strength training, primarily with free weights and body weight.\ncase traditionalStrengthTraining\nThe constant for strength training exercises primarily using machines or free weights.\ncase crossTraining\nThe constant for exercise that includes any mixture of cardio, strength, and/or flexibility training.\ncase mixedCardio\nThe constant for workouts that mix a variety of cardio exercise machines or modalities.\ncase highIntensityIntervalTraining\nThe constant for high intensity interval training.\ncase jumpRope\nThe constant for jumping rope.\ncase stairClimbing\nThe constant for workouts using a stair climbing machine.\ncase stairs\nThe constant for running, walking, or other drills using stairs (for example, in a stadium or inside a multilevel building).\ncase stepTraining\nThe constant for training using a step bench.\ncase fitnessGaming\nThe constant for playing fitness-based video games."
  },
  {
    "title": "HKWorkoutActivityType.cycling | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkoutactivitytype/cycling",
    "html": "See Also\nExercise and fitness\ncase preparationAndRecovery\nThe constant for warm-up and therapeutic activities like foam rolling and stretching.\ncase flexibility\nThe constant for a flexibility workout.\ncase cooldown\nThe constant for low intensity stretching and mobility exercises following a more vigorous workout.\ncase walking\nThe constant for walking.\ncase running\nThe constant for running and jogging.\ncase wheelchairWalkPace\nThe constant for a wheelchair workout at walking pace.\ncase wheelchairRunPace\nThe constant for wheelchair workout at running pace.\ncase handCycling\nThe constant for hand cycling.\ncase coreTraining\nThe constant for core training.\ncase elliptical\nThe constant for workouts on an elliptical machine.\ncase functionalStrengthTraining\nThe constant for strength training, primarily with free weights and body weight.\ncase traditionalStrengthTraining\nThe constant for strength training exercises primarily using machines or free weights.\ncase crossTraining\nThe constant for exercise that includes any mixture of cardio, strength, and/or flexibility training.\ncase mixedCardio\nThe constant for workouts that mix a variety of cardio exercise machines or modalities.\ncase highIntensityIntervalTraining\nThe constant for high intensity interval training.\ncase jumpRope\nThe constant for jumping rope.\ncase stairClimbing\nThe constant for workouts using a stair climbing machine.\ncase stairs\nThe constant for running, walking, or other drills using stairs (for example, in a stadium or inside a multilevel building).\ncase stepTraining\nThe constant for training using a step bench.\ncase fitnessGaming\nThe constant for playing fitness-based video games."
  },
  {
    "title": "HKWorkoutActivityType.wheelchairWalkPace | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkoutactivitytype/wheelchairwalkpace",
    "html": "See Also\nExercise and fitness\ncase preparationAndRecovery\nThe constant for warm-up and therapeutic activities like foam rolling and stretching.\ncase flexibility\nThe constant for a flexibility workout.\ncase cooldown\nThe constant for low intensity stretching and mobility exercises following a more vigorous workout.\ncase walking\nThe constant for walking.\ncase running\nThe constant for running and jogging.\ncase wheelchairRunPace\nThe constant for wheelchair workout at running pace.\ncase cycling\nThe constant for cycling.\ncase handCycling\nThe constant for hand cycling.\ncase coreTraining\nThe constant for core training.\ncase elliptical\nThe constant for workouts on an elliptical machine.\ncase functionalStrengthTraining\nThe constant for strength training, primarily with free weights and body weight.\ncase traditionalStrengthTraining\nThe constant for strength training exercises primarily using machines or free weights.\ncase crossTraining\nThe constant for exercise that includes any mixture of cardio, strength, and/or flexibility training.\ncase mixedCardio\nThe constant for workouts that mix a variety of cardio exercise machines or modalities.\ncase highIntensityIntervalTraining\nThe constant for high intensity interval training.\ncase jumpRope\nThe constant for jumping rope.\ncase stairClimbing\nThe constant for workouts using a stair climbing machine.\ncase stairs\nThe constant for running, walking, or other drills using stairs (for example, in a stadium or inside a multilevel building).\ncase stepTraining\nThe constant for training using a step bench.\ncase fitnessGaming\nThe constant for playing fitness-based video games."
  },
  {
    "title": "HKWorkoutActivityType.preparationAndRecovery | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkoutactivitytype/preparationandrecovery",
    "html": "See Also\nExercise and fitness\ncase flexibility\nThe constant for a flexibility workout.\ncase cooldown\nThe constant for low intensity stretching and mobility exercises following a more vigorous workout.\ncase walking\nThe constant for walking.\ncase running\nThe constant for running and jogging.\ncase wheelchairWalkPace\nThe constant for a wheelchair workout at walking pace.\ncase wheelchairRunPace\nThe constant for wheelchair workout at running pace.\ncase cycling\nThe constant for cycling.\ncase handCycling\nThe constant for hand cycling.\ncase coreTraining\nThe constant for core training.\ncase elliptical\nThe constant for workouts on an elliptical machine.\ncase functionalStrengthTraining\nThe constant for strength training, primarily with free weights and body weight.\ncase traditionalStrengthTraining\nThe constant for strength training exercises primarily using machines or free weights.\ncase crossTraining\nThe constant for exercise that includes any mixture of cardio, strength, and/or flexibility training.\ncase mixedCardio\nThe constant for workouts that mix a variety of cardio exercise machines or modalities.\ncase highIntensityIntervalTraining\nThe constant for high intensity interval training.\ncase jumpRope\nThe constant for jumping rope.\ncase stairClimbing\nThe constant for workouts using a stair climbing machine.\ncase stairs\nThe constant for running, walking, or other drills using stairs (for example, in a stadium or inside a multilevel building).\ncase stepTraining\nThe constant for training using a step bench.\ncase fitnessGaming\nThe constant for playing fitness-based video games."
  },
  {
    "title": "HKWorkoutActivityType.flexibility | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkoutactivitytype/flexibility",
    "html": "See Also\nExercise and fitness\ncase preparationAndRecovery\nThe constant for warm-up and therapeutic activities like foam rolling and stretching.\ncase cooldown\nThe constant for low intensity stretching and mobility exercises following a more vigorous workout.\ncase walking\nThe constant for walking.\ncase running\nThe constant for running and jogging.\ncase wheelchairWalkPace\nThe constant for a wheelchair workout at walking pace.\ncase wheelchairRunPace\nThe constant for wheelchair workout at running pace.\ncase cycling\nThe constant for cycling.\ncase handCycling\nThe constant for hand cycling.\ncase coreTraining\nThe constant for core training.\ncase elliptical\nThe constant for workouts on an elliptical machine.\ncase functionalStrengthTraining\nThe constant for strength training, primarily with free weights and body weight.\ncase traditionalStrengthTraining\nThe constant for strength training exercises primarily using machines or free weights.\ncase crossTraining\nThe constant for exercise that includes any mixture of cardio, strength, and/or flexibility training.\ncase mixedCardio\nThe constant for workouts that mix a variety of cardio exercise machines or modalities.\ncase highIntensityIntervalTraining\nThe constant for high intensity interval training.\ncase jumpRope\nThe constant for jumping rope.\ncase stairClimbing\nThe constant for workouts using a stair climbing machine.\ncase stairs\nThe constant for running, walking, or other drills using stairs (for example, in a stadium or inside a multilevel building).\ncase stepTraining\nThe constant for training using a step bench.\ncase fitnessGaming\nThe constant for playing fitness-based video games."
  },
  {
    "title": "HKWorkoutActivityType.volleyball | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkoutactivitytype/volleyball",
    "html": "See Also\nTeam sports\ncase americanFootball\nThe constant for playing American football.\ncase australianFootball\nThe constant for playing Australian football.\ncase baseball\nThe constant for playing baseball.\ncase basketball\nThe constant for playing basketball.\ncase cricket\nThe constant for playing cricket.\ncase discSports\nThe constant for playing disc sports such as Ultimate and Disc Golf.\ncase handball\nThe constant for playing handball.\ncase hockey\nThe constant for playing hockey, including ice hockey, field hockey, and related sports.\ncase lacrosse\nThe constant for playing lacrosse.\ncase rugby\nThe constant for playing rugby.\ncase soccer\nThe constant for playing soccer.\ncase softball\nThe constant for playing softball."
  },
  {
    "title": "HKWorkoutActivityType.soccer | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkoutactivitytype/soccer",
    "html": "See Also\nTeam sports\ncase americanFootball\nThe constant for playing American football.\ncase australianFootball\nThe constant for playing Australian football.\ncase baseball\nThe constant for playing baseball.\ncase basketball\nThe constant for playing basketball.\ncase cricket\nThe constant for playing cricket.\ncase discSports\nThe constant for playing disc sports such as Ultimate and Disc Golf.\ncase handball\nThe constant for playing handball.\ncase hockey\nThe constant for playing hockey, including ice hockey, field hockey, and related sports.\ncase lacrosse\nThe constant for playing lacrosse.\ncase rugby\nThe constant for playing rugby.\ncase softball\nThe constant for playing softball.\ncase volleyball\nThe constant for playing volleyball."
  },
  {
    "title": "HKWorkoutActivityType.rugby | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkoutactivitytype/rugby",
    "html": "See Also\nTeam sports\ncase americanFootball\nThe constant for playing American football.\ncase australianFootball\nThe constant for playing Australian football.\ncase baseball\nThe constant for playing baseball.\ncase basketball\nThe constant for playing basketball.\ncase cricket\nThe constant for playing cricket.\ncase discSports\nThe constant for playing disc sports such as Ultimate and Disc Golf.\ncase handball\nThe constant for playing handball.\ncase hockey\nThe constant for playing hockey, including ice hockey, field hockey, and related sports.\ncase lacrosse\nThe constant for playing lacrosse.\ncase soccer\nThe constant for playing soccer.\ncase softball\nThe constant for playing softball.\ncase volleyball\nThe constant for playing volleyball."
  },
  {
    "title": "quantityType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkstatistics/1615476-quantitytype",
    "html": "Discussion\n\nThe quantity type from the statistics query used to generate these statistics.\n\nSee Also\nGetting Property Data\nvar startDate: Date\nThe start of the time period included in these statistics.\nvar endDate: Date\nThe end of the time period included in these statistics.\nvar sources: [HKSource]?\nAn array containing all the sources contributing to these statistics."
  },
  {
    "title": "HKWorkoutActivityType.hockey | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkoutactivitytype/hockey",
    "html": "See Also\nTeam sports\ncase americanFootball\nThe constant for playing American football.\ncase australianFootball\nThe constant for playing Australian football.\ncase baseball\nThe constant for playing baseball.\ncase basketball\nThe constant for playing basketball.\ncase cricket\nThe constant for playing cricket.\ncase discSports\nThe constant for playing disc sports such as Ultimate and Disc Golf.\ncase handball\nThe constant for playing handball.\ncase lacrosse\nThe constant for playing lacrosse.\ncase rugby\nThe constant for playing rugby.\ncase soccer\nThe constant for playing soccer.\ncase softball\nThe constant for playing softball.\ncase volleyball\nThe constant for playing volleyball."
  },
  {
    "title": "HKWorkoutActivityType.cricket | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkoutactivitytype/cricket",
    "html": "See Also\nTeam sports\ncase americanFootball\nThe constant for playing American football.\ncase australianFootball\nThe constant for playing Australian football.\ncase baseball\nThe constant for playing baseball.\ncase basketball\nThe constant for playing basketball.\ncase discSports\nThe constant for playing disc sports such as Ultimate and Disc Golf.\ncase handball\nThe constant for playing handball.\ncase hockey\nThe constant for playing hockey, including ice hockey, field hockey, and related sports.\ncase lacrosse\nThe constant for playing lacrosse.\ncase rugby\nThe constant for playing rugby.\ncase soccer\nThe constant for playing soccer.\ncase softball\nThe constant for playing softball.\ncase volleyball\nThe constant for playing volleyball."
  },
  {
    "title": "HKWorkoutActivityType.australianFootball | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkoutactivitytype/australianfootball",
    "html": "See Also\nTeam sports\ncase americanFootball\nThe constant for playing American football.\ncase baseball\nThe constant for playing baseball.\ncase basketball\nThe constant for playing basketball.\ncase cricket\nThe constant for playing cricket.\ncase discSports\nThe constant for playing disc sports such as Ultimate and Disc Golf.\ncase handball\nThe constant for playing handball.\ncase hockey\nThe constant for playing hockey, including ice hockey, field hockey, and related sports.\ncase lacrosse\nThe constant for playing lacrosse.\ncase rugby\nThe constant for playing rugby.\ncase soccer\nThe constant for playing soccer.\ncase softball\nThe constant for playing softball.\ncase volleyball\nThe constant for playing volleyball."
  },
  {
    "title": "HKWorkoutActivityType.americanFootball | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkoutactivitytype/americanfootball",
    "html": "See Also\nTeam sports\ncase australianFootball\nThe constant for playing Australian football.\ncase baseball\nThe constant for playing baseball.\ncase basketball\nThe constant for playing basketball.\ncase cricket\nThe constant for playing cricket.\ncase discSports\nThe constant for playing disc sports such as Ultimate and Disc Golf.\ncase handball\nThe constant for playing handball.\ncase hockey\nThe constant for playing hockey, including ice hockey, field hockey, and related sports.\ncase lacrosse\nThe constant for playing lacrosse.\ncase rugby\nThe constant for playing rugby.\ncase soccer\nThe constant for playing soccer.\ncase softball\nThe constant for playing softball.\ncase volleyball\nThe constant for playing volleyball."
  },
  {
    "title": "HKWorkoutActivityType.trackAndField | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkoutactivitytype/trackandfield",
    "html": "See Also\nIndividual sports\ncase archery\nThe constant for shooting archery.\ncase bowling\nThe constant for bowling.\ncase fencing\nThe constant for fencing.\ncase gymnastics\nPerforming gymnastics."
  },
  {
    "title": "HKWorkoutActivityType.bowling | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkoutactivitytype/bowling",
    "html": "See Also\nIndividual sports\ncase archery\nThe constant for shooting archery.\ncase fencing\nThe constant for fencing.\ncase gymnastics\nPerforming gymnastics.\ncase trackAndField\nParticipating in track and field events, including shot put, javelin, pole vaulting, and related sports."
  },
  {
    "title": "HKWorkoutActivityType.gymnastics | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkoutactivitytype/gymnastics",
    "html": "See Also\nIndividual sports\ncase archery\nThe constant for shooting archery.\ncase bowling\nThe constant for bowling.\ncase fencing\nThe constant for fencing.\ncase trackAndField\nParticipating in track and field events, including shot put, javelin, pole vaulting, and related sports."
  },
  {
    "title": "sources | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkstatistics/1615222-sources",
    "html": "Discussion\n\nIf the separateBySource option was specified, this property holds an array of all the sources included in the calculations. If the separateBySource option was not specified, the property contains nil.\n\nSee Also\nGetting Property Data\nvar startDate: Date\nThe start of the time period included in these statistics.\nvar endDate: Date\nThe end of the time period included in these statistics.\nvar quantityType: HKQuantityType\nThe quantity type of the samples used to calculate these statistics."
  },
  {
    "title": "HKWorkoutActivityType.archery | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkoutactivitytype/archery",
    "html": "See Also\nIndividual sports\ncase bowling\nThe constant for bowling.\ncase fencing\nThe constant for fencing.\ncase gymnastics\nPerforming gymnastics.\ncase trackAndField\nParticipating in track and field events, including shot put, javelin, pole vaulting, and related sports."
  },
  {
    "title": "averageQuantity() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkstatistics/1615386-averagequantity",
    "html": "Return Value\n\nIf the discreteAverage option was set, this method returns a quantity object containing the average value of all samples matching the query; otherwise, it returns nil.\n\nSee Also\nGetting Statistics Data\nfunc averageQuantity(for: HKSource) -> HKQuantity?\nReturns the average value from all the samples that match the query and that were created by the specified source.\nfunc maximumQuantity() -> HKQuantity?\nReturns the maximum value from all the samples that match the query.\nfunc maximumQuantity(for: HKSource) -> HKQuantity?\nReturns the maximum value from all the samples that match the query and that were created by the specified source.\nfunc minimumQuantity() -> HKQuantity?\nReturns the minimum value from all the samples that match the query.\nfunc minimumQuantity(for: HKSource) -> HKQuantity?\nReturns the minimum value from all the samples that match the query and that were created by the specified source.\nfunc sumQuantity() -> HKQuantity?\nReturns the sum of all the samples that match the query.\nfunc sumQuantity(for: HKSource) -> HKQuantity?\nReturns the sum of all the samples that match the query and that were created by the specified source.\nfunc duration() -> HKQuantity?\nReturns the total duration covering all the samples that match the query.\nfunc duration(for: HKSource) -> HKQuantity?\nReturns the total duration covering all the samples created by the specified source that also match the query.\nRelated Documentation\nvar endDate: Date\nThe end of the time period included in these statistics.\nvar startDate: Date\nThe start of the time period included in these statistics."
  },
  {
    "title": "averageQuantity(for:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkstatistics/1615307-averagequantity",
    "html": "Parameters\nsource\n\nA data source from the statistics object’s sources array.\n\nReturn Value\n\nIf both the discreteAverage option and the separateBySource option were set, this method returns a quantity object. This object contains the average value from all the samples that match the query and that were created by the specified source. If the statistics options were not both set, this method returns nil\n\nSee Also\nGetting Statistics Data\nfunc averageQuantity() -> HKQuantity?\nReturns the average value from all the samples that match the query.\nfunc maximumQuantity() -> HKQuantity?\nReturns the maximum value from all the samples that match the query.\nfunc maximumQuantity(for: HKSource) -> HKQuantity?\nReturns the maximum value from all the samples that match the query and that were created by the specified source.\nfunc minimumQuantity() -> HKQuantity?\nReturns the minimum value from all the samples that match the query.\nfunc minimumQuantity(for: HKSource) -> HKQuantity?\nReturns the minimum value from all the samples that match the query and that were created by the specified source.\nfunc sumQuantity() -> HKQuantity?\nReturns the sum of all the samples that match the query.\nfunc sumQuantity(for: HKSource) -> HKQuantity?\nReturns the sum of all the samples that match the query and that were created by the specified source.\nfunc duration() -> HKQuantity?\nReturns the total duration covering all the samples that match the query.\nfunc duration(for: HKSource) -> HKQuantity?\nReturns the total duration covering all the samples created by the specified source that also match the query.\nRelated Documentation\nvar endDate: Date\nThe end of the time period included in these statistics.\nvar sources: [HKSource]?\nAn array containing all the sources contributing to these statistics.\nvar startDate: Date\nThe start of the time period included in these statistics."
  },
  {
    "title": "minimumQuantity(for:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkstatistics/1615065-minimumquantity",
    "html": "Parameters\nsource\n\nA data source from the statistics object’s sources array.\n\nReturn Value\n\nIf both the discreteMin option and the separateBySource option were set, this method returns a quantity object. This object contains the minimum value from all the samples that match the query and were created by the specified source. If the statistics options were not both set, this method returns nil.\n\nSee Also\nGetting Statistics Data\nfunc averageQuantity() -> HKQuantity?\nReturns the average value from all the samples that match the query.\nfunc averageQuantity(for: HKSource) -> HKQuantity?\nReturns the average value from all the samples that match the query and that were created by the specified source.\nfunc maximumQuantity() -> HKQuantity?\nReturns the maximum value from all the samples that match the query.\nfunc maximumQuantity(for: HKSource) -> HKQuantity?\nReturns the maximum value from all the samples that match the query and that were created by the specified source.\nfunc minimumQuantity() -> HKQuantity?\nReturns the minimum value from all the samples that match the query.\nfunc sumQuantity() -> HKQuantity?\nReturns the sum of all the samples that match the query.\nfunc sumQuantity(for: HKSource) -> HKQuantity?\nReturns the sum of all the samples that match the query and that were created by the specified source.\nfunc duration() -> HKQuantity?\nReturns the total duration covering all the samples that match the query.\nfunc duration(for: HKSource) -> HKQuantity?\nReturns the total duration covering all the samples created by the specified source that also match the query.\nRelated Documentation\nvar endDate: Date\nThe end of the time period included in these statistics.\nvar sources: [HKSource]?\nAn array containing all the sources contributing to these statistics.\nvar startDate: Date\nThe start of the time period included in these statistics."
  },
  {
    "title": "minimumQuantity() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkstatistics/1615638-minimumquantity",
    "html": "Return Value\n\nIf the discreteMin option was set, this method returns a quantity object containing the minimum value from all the samples matching the query; otherwise, it returns nil.\n\nSee Also\nGetting Statistics Data\nfunc averageQuantity() -> HKQuantity?\nReturns the average value from all the samples that match the query.\nfunc averageQuantity(for: HKSource) -> HKQuantity?\nReturns the average value from all the samples that match the query and that were created by the specified source.\nfunc maximumQuantity() -> HKQuantity?\nReturns the maximum value from all the samples that match the query.\nfunc maximumQuantity(for: HKSource) -> HKQuantity?\nReturns the maximum value from all the samples that match the query and that were created by the specified source.\nfunc minimumQuantity(for: HKSource) -> HKQuantity?\nReturns the minimum value from all the samples that match the query and that were created by the specified source.\nfunc sumQuantity() -> HKQuantity?\nReturns the sum of all the samples that match the query.\nfunc sumQuantity(for: HKSource) -> HKQuantity?\nReturns the sum of all the samples that match the query and that were created by the specified source.\nfunc duration() -> HKQuantity?\nReturns the total duration covering all the samples that match the query.\nfunc duration(for: HKSource) -> HKQuantity?\nReturns the total duration covering all the samples created by the specified source that also match the query.\nRelated Documentation\nvar endDate: Date\nThe end of the time period included in these statistics.\nvar startDate: Date\nThe start of the time period included in these statistics."
  },
  {
    "title": "sumQuantity(for:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkstatistics/1615502-sumquantity",
    "html": "Parameters\nsource\n\nA data source from the statistics object’s sources array.\n\nReturn Value\n\nIf both the cumulativeSum option and the separateBySource option were set, this method returns a quantity object. This object contains the sum of all the samples that match the query and were created by the specified source. If the statistics options were not both set, this method returns nil.\n\nSee Also\nGetting Statistics Data\nfunc averageQuantity() -> HKQuantity?\nReturns the average value from all the samples that match the query.\nfunc averageQuantity(for: HKSource) -> HKQuantity?\nReturns the average value from all the samples that match the query and that were created by the specified source.\nfunc maximumQuantity() -> HKQuantity?\nReturns the maximum value from all the samples that match the query.\nfunc maximumQuantity(for: HKSource) -> HKQuantity?\nReturns the maximum value from all the samples that match the query and that were created by the specified source.\nfunc minimumQuantity() -> HKQuantity?\nReturns the minimum value from all the samples that match the query.\nfunc minimumQuantity(for: HKSource) -> HKQuantity?\nReturns the minimum value from all the samples that match the query and that were created by the specified source.\nfunc sumQuantity() -> HKQuantity?\nReturns the sum of all the samples that match the query.\nfunc duration() -> HKQuantity?\nReturns the total duration covering all the samples that match the query.\nfunc duration(for: HKSource) -> HKQuantity?\nReturns the total duration covering all the samples created by the specified source that also match the query.\nRelated Documentation\nvar endDate: Date\nThe end of the time period included in these statistics.\nvar sources: [HKSource]?\nAn array containing all the sources contributing to these statistics.\nvar startDate: Date\nThe start of the time period included in these statistics."
  },
  {
    "title": "HKWorkoutActivityType.tennis | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkoutactivitytype/tennis",
    "html": "See Also\nRacket sports\ncase badminton\nThe constant for playing badminton.\ncase pickleball\nThe constant for playing pickleball.\ncase racquetball\nThe constant for playing racquetball.\ncase squash\nThe constant for playing squash.\ncase tableTennis\nThe constant for playing table tennis."
  },
  {
    "title": "HKWorkoutActivityType.climbing | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkoutactivitytype/climbing",
    "html": "See Also\nOutdoor activities\ncase equestrianSports\nThe constant for activities that involve riding a horse, including polo, horse racing, and horse riding.\ncase fishing\nThe constant for fishing.\ncase golf\nThe constant for playing golf.\ncase hiking\nThe constant for hiking.\ncase hunting\nThe constant for hunting.\ncase play\nThe constant for play-based activities like tag, dodgeball, hopscotch, tetherball, and playing on a jungle gym."
  },
  {
    "title": "HKWorkoutActivityType.pickleball | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkoutactivitytype/pickleball",
    "html": "See Also\nRacket sports\ncase badminton\nThe constant for playing badminton.\ncase racquetball\nThe constant for playing racquetball.\ncase squash\nThe constant for playing squash.\ncase tableTennis\nThe constant for playing table tennis.\ncase tennis\nThe constant for playing tennis."
  },
  {
    "title": "HKWorkoutActivityType.pilates | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkoutactivitytype/pilates",
    "html": "See Also\nStudio activities\ncase barre\nThe constant for barre workout.\ncase cardioDance\nThe constant for cardiovascular dance workouts.\ncase socialDance\nThe constant for dancing with a partner or partners, such as swing, salsa, or folk dances.\ncase yoga\nThe constant for practicing yoga.\ncase mindAndBody\nThe constant for performing activities like walking meditation, Gyrotonic exercise, and Qigong."
  },
  {
    "title": "HKWorkoutActivityType.squash | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkoutactivitytype/squash",
    "html": "See Also\nRacket sports\ncase badminton\nThe constant for playing badminton.\ncase pickleball\nThe constant for playing pickleball.\ncase racquetball\nThe constant for playing racquetball.\ncase tableTennis\nThe constant for playing table tennis.\ncase tennis\nThe constant for playing tennis."
  },
  {
    "title": "HKWorkoutActivityType.racquetball | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkoutactivitytype/racquetball",
    "html": "See Also\nRacket sports\ncase badminton\nThe constant for playing badminton.\ncase pickleball\nThe constant for playing pickleball.\ncase squash\nThe constant for playing squash.\ncase tableTennis\nThe constant for playing table tennis.\ncase tennis\nThe constant for playing tennis."
  },
  {
    "title": "HKWorkoutActivityType.stairClimbing | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkoutactivitytype/stairclimbing",
    "html": "See Also\nExercise and fitness\ncase preparationAndRecovery\nThe constant for warm-up and therapeutic activities like foam rolling and stretching.\ncase flexibility\nThe constant for a flexibility workout.\ncase cooldown\nThe constant for low intensity stretching and mobility exercises following a more vigorous workout.\ncase walking\nThe constant for walking.\ncase running\nThe constant for running and jogging.\ncase wheelchairWalkPace\nThe constant for a wheelchair workout at walking pace.\ncase wheelchairRunPace\nThe constant for wheelchair workout at running pace.\ncase cycling\nThe constant for cycling.\ncase handCycling\nThe constant for hand cycling.\ncase coreTraining\nThe constant for core training.\ncase elliptical\nThe constant for workouts on an elliptical machine.\ncase functionalStrengthTraining\nThe constant for strength training, primarily with free weights and body weight.\ncase traditionalStrengthTraining\nThe constant for strength training exercises primarily using machines or free weights.\ncase crossTraining\nThe constant for exercise that includes any mixture of cardio, strength, and/or flexibility training.\ncase mixedCardio\nThe constant for workouts that mix a variety of cardio exercise machines or modalities.\ncase highIntensityIntervalTraining\nThe constant for high intensity interval training.\ncase jumpRope\nThe constant for jumping rope.\ncase stairs\nThe constant for running, walking, or other drills using stairs (for example, in a stadium or inside a multilevel building).\ncase stepTraining\nThe constant for training using a step bench.\ncase fitnessGaming\nThe constant for playing fitness-based video games."
  },
  {
    "title": "HKWorkoutActivityType.highIntensityIntervalTraining | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkoutactivitytype/highintensityintervaltraining",
    "html": "See Also\nExercise and fitness\ncase preparationAndRecovery\nThe constant for warm-up and therapeutic activities like foam rolling and stretching.\ncase flexibility\nThe constant for a flexibility workout.\ncase cooldown\nThe constant for low intensity stretching and mobility exercises following a more vigorous workout.\ncase walking\nThe constant for walking.\ncase running\nThe constant for running and jogging.\ncase wheelchairWalkPace\nThe constant for a wheelchair workout at walking pace.\ncase wheelchairRunPace\nThe constant for wheelchair workout at running pace.\ncase cycling\nThe constant for cycling.\ncase handCycling\nThe constant for hand cycling.\ncase coreTraining\nThe constant for core training.\ncase elliptical\nThe constant for workouts on an elliptical machine.\ncase functionalStrengthTraining\nThe constant for strength training, primarily with free weights and body weight.\ncase traditionalStrengthTraining\nThe constant for strength training exercises primarily using machines or free weights.\ncase crossTraining\nThe constant for exercise that includes any mixture of cardio, strength, and/or flexibility training.\ncase mixedCardio\nThe constant for workouts that mix a variety of cardio exercise machines or modalities.\ncase jumpRope\nThe constant for jumping rope.\ncase stairClimbing\nThe constant for workouts using a stair climbing machine.\ncase stairs\nThe constant for running, walking, or other drills using stairs (for example, in a stadium or inside a multilevel building).\ncase stepTraining\nThe constant for training using a step bench.\ncase fitnessGaming\nThe constant for playing fitness-based video games."
  },
  {
    "title": "HKWorkoutActivityType.stairs | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkoutactivitytype/stairs",
    "html": "See Also\nExercise and fitness\ncase preparationAndRecovery\nThe constant for warm-up and therapeutic activities like foam rolling and stretching.\ncase flexibility\nThe constant for a flexibility workout.\ncase cooldown\nThe constant for low intensity stretching and mobility exercises following a more vigorous workout.\ncase walking\nThe constant for walking.\ncase running\nThe constant for running and jogging.\ncase wheelchairWalkPace\nThe constant for a wheelchair workout at walking pace.\ncase wheelchairRunPace\nThe constant for wheelchair workout at running pace.\ncase cycling\nThe constant for cycling.\ncase handCycling\nThe constant for hand cycling.\ncase coreTraining\nThe constant for core training.\ncase elliptical\nThe constant for workouts on an elliptical machine.\ncase functionalStrengthTraining\nThe constant for strength training, primarily with free weights and body weight.\ncase traditionalStrengthTraining\nThe constant for strength training exercises primarily using machines or free weights.\ncase crossTraining\nThe constant for exercise that includes any mixture of cardio, strength, and/or flexibility training.\ncase mixedCardio\nThe constant for workouts that mix a variety of cardio exercise machines or modalities.\ncase highIntensityIntervalTraining\nThe constant for high intensity interval training.\ncase jumpRope\nThe constant for jumping rope.\ncase stairClimbing\nThe constant for workouts using a stair climbing machine.\ncase stepTraining\nThe constant for training using a step bench.\ncase fitnessGaming\nThe constant for playing fitness-based video games."
  },
  {
    "title": "HKWorkoutActivityType.yoga | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkoutactivitytype/yoga",
    "html": "See Also\nStudio activities\ncase barre\nThe constant for barre workout.\ncase cardioDance\nThe constant for cardiovascular dance workouts.\ncase socialDance\nThe constant for dancing with a partner or partners, such as swing, salsa, or folk dances.\ncase mindAndBody\nThe constant for performing activities like walking meditation, Gyrotonic exercise, and Qigong.\ncase pilates\nThe constant for a pilates workout."
  },
  {
    "title": "HKWorkoutActivityType.mindAndBody | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkoutactivitytype/mindandbody",
    "html": "See Also\nStudio activities\ncase barre\nThe constant for barre workout.\ncase cardioDance\nThe constant for cardiovascular dance workouts.\ncase socialDance\nThe constant for dancing with a partner or partners, such as swing, salsa, or folk dances.\ncase yoga\nThe constant for practicing yoga.\ncase pilates\nThe constant for a pilates workout."
  },
  {
    "title": "lowerBackPain | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkcategorytypeidentifier/3552064-lowerbackpain",
    "html": "Discussion\n\nThese samples use values from the HKCategoryValueSeverity enumeration."
  },
  {
    "title": "duration(for:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkstatistics/3172589-duration",
    "html": "Discussion\n\nIf you set both the duration and separateBySource options, this method returns a quantity object. This object contains the total duration covering all the samples created by the specified source that also match the query. If the statistics options were not both set, this method returns nil.\n\nSee Also\nGetting Statistics Data\nfunc averageQuantity() -> HKQuantity?\nReturns the average value from all the samples that match the query.\nfunc averageQuantity(for: HKSource) -> HKQuantity?\nReturns the average value from all the samples that match the query and that were created by the specified source.\nfunc maximumQuantity() -> HKQuantity?\nReturns the maximum value from all the samples that match the query.\nfunc maximumQuantity(for: HKSource) -> HKQuantity?\nReturns the maximum value from all the samples that match the query and that were created by the specified source.\nfunc minimumQuantity() -> HKQuantity?\nReturns the minimum value from all the samples that match the query.\nfunc minimumQuantity(for: HKSource) -> HKQuantity?\nReturns the minimum value from all the samples that match the query and that were created by the specified source.\nfunc sumQuantity() -> HKQuantity?\nReturns the sum of all the samples that match the query.\nfunc sumQuantity(for: HKSource) -> HKQuantity?\nReturns the sum of all the samples that match the query and that were created by the specified source.\nfunc duration() -> HKQuantity?\nReturns the total duration covering all the samples that match the query."
  },
  {
    "title": "init(recordTypes:sourceTypes:predicate:resultsHandler:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkverifiableclinicalrecordquery/3922622-init",
    "html": "Parameters\nrecordTypes\n\nThe types of records that this query returns. For a list of valid record types, see HKVerifiableClinicalRecordCredentialType.\n\nsourceTypes\n\nThe format of the verifiable clinical records. For a list of valid sources, see HKVerifiableClinicalRecordSourceType.\n\npredicate\n\nA predicate that limits the results that this query returns. Pass nil to receive all records of the specified source and record type.\n\nresultsHandler\n\nA block that the HealthKit store calls after it finishes executing the query.\n\nThis block takes the following parameters:\n\nquery\n\nA reference to the query that called this block.\n\nrecords\n\nAn array containing the verifiable health records found by the query, or nil if an error occurs.\n\nerror\n\nIf an error occurs, an object describing the error; otherwise, it’s nil.\n\nSee Also\nCreating Queries\ninit(recordTypes: [String], predicate: NSPredicate?, resultsHandler: (HKVerifiableClinicalRecordQuery, [HKVerifiableClinicalRecord]?, Error?) -> Void)\nCreates a query for one-time access to a SMART Health Card."
  },
  {
    "title": "hashValue | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hksamplepredicate/3916532-hashvalue",
    "html": "Discussion\n\nHash values aren’t guaranteed to be equal across different executions of your program. Don’t save hash values to use during a future execution.\n\nImportant\n\nhashValue is deprecated as a Hashable requirement. Use the hash(into:) method instead.\n\nRelationships\nFrom Protocol\nHashable\nSee Also\nComparing Sample Predicates\nstatic func == (HKSamplePredicate<Sample>, HKSamplePredicate<Sample>) -> Bool\nReturns a Boolean value indicating whether two values are equal.\nstatic func != (HKSamplePredicate<Sample>, HKSamplePredicate<Sample>) -> Bool\nReturns a Boolean value indicating that two values aren’t equal.\nfunc hash(into: inout Hasher)\nRetrurns a hash value for the sample predicate."
  },
  {
    "title": "hash(into:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hksamplepredicate/3916531-hash",
    "html": "Parameters\nhasher\n\nThe hasher to use when combining the components of this instance.\n\nDiscussion\n\nHashes the essential components of this value by feeding them into the given hasher.\n\nImportant\n\nNever call finalize() on hasher. Doing so may cause a compile-time error in the future.\n\nRelationships\nFrom Protocol\nHashable\nSee Also\nComparing Sample Predicates\nstatic func == (HKSamplePredicate<Sample>, HKSamplePredicate<Sample>) -> Bool\nReturns a Boolean value indicating whether two values are equal.\nstatic func != (HKSamplePredicate<Sample>, HKSamplePredicate<Sample>) -> Bool\nReturns a Boolean value indicating that two values aren’t equal.\nvar hashValue: Int\nThe hash value."
  },
  {
    "title": "!=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hksamplepredicate/3916524",
    "html": "Parameters\na\n\nA value to compare.\n\nb\n\nAnother value to compare.\n\nSee Also\nComparing Sample Predicates\nstatic func == (HKSamplePredicate<Sample>, HKSamplePredicate<Sample>) -> Bool\nReturns a Boolean value indicating whether two values are equal.\nfunc hash(into: inout Hasher)\nRetrurns a hash value for the sample predicate.\nvar hashValue: Int\nThe hash value."
  },
  {
    "title": "==(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hksamplepredicate/3916525",
    "html": "Parameters\na\n\nA value to compare.\n\nb\n\nAnother value to compare.\n\nSee Also\nComparing Sample Predicates\nstatic func != (HKSamplePredicate<Sample>, HKSamplePredicate<Sample>) -> Bool\nReturns a Boolean value indicating that two values aren’t equal.\nfunc hash(into: inout Hasher)\nRetrurns a hash value for the sample predicate.\nvar hashValue: Int\nThe hash value."
  },
  {
    "title": "workoutRoute(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hksamplepredicate/3916540-workoutroute",
    "html": "Parameters\npredicate\n\nAn optional predicate that further restricts the results that the query returns.\n\nDiscussion\n\nUse this method to create an HKSamplePredicate instance that you can use to query for HKWorkoutRoute objects.\n\nSee Also\nCreating Sample Predicates\nstatic func audiogram(NSPredicate?) -> HKSamplePredicate<HKAudiogramSample>\nReturns a sample predicate that matches audiogram samples.\nstatic func categorySample(type: HKCategoryType, predicate: NSPredicate?) -> HKSamplePredicate<HKCategorySample>\nReturns a sample predicate that matches category samples.\nstatic func clinicalRecord(type: HKClinicalType, predicate: NSPredicate?) -> HKSamplePredicate<HKClinicalRecord>\nReturns a sample predicate that matches clinical record samples.\nstatic func correlation(type: HKCorrelationType, predicate: NSPredicate?) -> HKSamplePredicate<HKCorrelation>\nReturns a sample predicate that matches samples that contain correlated data.\nstatic func electrocardiogram(NSPredicate?) -> HKSamplePredicate<HKElectrocardiogram>\nReturns a sample predicate that matches electrocardiogram samples.\nstatic func heartbeatSeries(NSPredicate?) -> HKSamplePredicate<HKHeartbeatSeriesSample>\nReturns a sample predicate that matches heartbeat series samples.\nstatic func quantitySample(type: HKQuantityType, predicate: NSPredicate?) -> HKSamplePredicate<HKQuantitySample>\nReturns a sample predicate that matches quantity samples.\nstatic func sample(type: HKSampleType, predicate: NSPredicate?) -> HKSamplePredicate<HKSample>\nReturns a sample predicate that matches samples.\nstatic func visionPrescription(NSPredicate?) -> HKSamplePredicate<HKVisionPrescription>\nReturns a predicate that matches prescription samples.\nstatic func workout(NSPredicate?) -> HKSamplePredicate<HKWorkout>\nReturns a sample predicate that matches workout samples."
  },
  {
    "title": "workout(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hksamplepredicate/3916539-workout",
    "html": "Parameters\npredicate\n\nAn optional predicate that further restricts the results that the query returns.\n\nDiscussion\n\nUse this method to create an HKSamplePredicate instance that you can use to query for HKWorkout objects.\n\nSee Also\nCreating Sample Predicates\nstatic func audiogram(NSPredicate?) -> HKSamplePredicate<HKAudiogramSample>\nReturns a sample predicate that matches audiogram samples.\nstatic func categorySample(type: HKCategoryType, predicate: NSPredicate?) -> HKSamplePredicate<HKCategorySample>\nReturns a sample predicate that matches category samples.\nstatic func clinicalRecord(type: HKClinicalType, predicate: NSPredicate?) -> HKSamplePredicate<HKClinicalRecord>\nReturns a sample predicate that matches clinical record samples.\nstatic func correlation(type: HKCorrelationType, predicate: NSPredicate?) -> HKSamplePredicate<HKCorrelation>\nReturns a sample predicate that matches samples that contain correlated data.\nstatic func electrocardiogram(NSPredicate?) -> HKSamplePredicate<HKElectrocardiogram>\nReturns a sample predicate that matches electrocardiogram samples.\nstatic func heartbeatSeries(NSPredicate?) -> HKSamplePredicate<HKHeartbeatSeriesSample>\nReturns a sample predicate that matches heartbeat series samples.\nstatic func quantitySample(type: HKQuantityType, predicate: NSPredicate?) -> HKSamplePredicate<HKQuantitySample>\nReturns a sample predicate that matches quantity samples.\nstatic func sample(type: HKSampleType, predicate: NSPredicate?) -> HKSamplePredicate<HKSample>\nReturns a sample predicate that matches samples.\nstatic func visionPrescription(NSPredicate?) -> HKSamplePredicate<HKVisionPrescription>\nReturns a predicate that matches prescription samples.\nstatic func workoutRoute(NSPredicate?) -> HKSamplePredicate<HKWorkoutRoute>\nReturns a sample predicate that matches samples containing workout route data."
  },
  {
    "title": "sample(type:predicate:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hksamplepredicate/3916536-sample",
    "html": "Parameters\nsampleType\n\nA type that matches samples.\n\npredicate\n\nAn optional predicate that further restricts the results that the query returns.\n\nDiscussion\n\nUse this method to create an HKSamplePredicate instance that you can use to query for a heterogenous set of sample types.\n\nlet stepType = HKQuantityType(.stepCount)\n// Normally, you'd create a quantity predicate for step counts.\nlet stepPredicate = HKSamplePredicate.sample(type: stepType)\n\n\nlet highHeartRateType = HKCategoryType(.highHeartRateEvent)\n// Normally, you'd create a category predicate for high heart rate events.\nlet highHeartRatePredicate = HKSamplePredicate.sample(type: highHeartRateType)\n\n\n// By using sample predicates, you can query for different sample types.\nlet descriptor = HKSampleQueryDescriptor(\n    predicates: [stepPredicate, highHeartRatePredicate],\n    sortDescriptors: [],\n    limit: 10)\n\n\n// However, the results are an array of HKSample objects.\n// You'll need to downcast them to access the data.\nlet results = try await descriptor.result(for: store)\n\n\nSee Also\nCreating Sample Predicates\nstatic func audiogram(NSPredicate?) -> HKSamplePredicate<HKAudiogramSample>\nReturns a sample predicate that matches audiogram samples.\nstatic func categorySample(type: HKCategoryType, predicate: NSPredicate?) -> HKSamplePredicate<HKCategorySample>\nReturns a sample predicate that matches category samples.\nstatic func clinicalRecord(type: HKClinicalType, predicate: NSPredicate?) -> HKSamplePredicate<HKClinicalRecord>\nReturns a sample predicate that matches clinical record samples.\nstatic func correlation(type: HKCorrelationType, predicate: NSPredicate?) -> HKSamplePredicate<HKCorrelation>\nReturns a sample predicate that matches samples that contain correlated data.\nstatic func electrocardiogram(NSPredicate?) -> HKSamplePredicate<HKElectrocardiogram>\nReturns a sample predicate that matches electrocardiogram samples.\nstatic func heartbeatSeries(NSPredicate?) -> HKSamplePredicate<HKHeartbeatSeriesSample>\nReturns a sample predicate that matches heartbeat series samples.\nstatic func quantitySample(type: HKQuantityType, predicate: NSPredicate?) -> HKSamplePredicate<HKQuantitySample>\nReturns a sample predicate that matches quantity samples.\nstatic func visionPrescription(NSPredicate?) -> HKSamplePredicate<HKVisionPrescription>\nReturns a predicate that matches prescription samples.\nstatic func workout(NSPredicate?) -> HKSamplePredicate<HKWorkout>\nReturns a sample predicate that matches workout samples.\nstatic func workoutRoute(NSPredicate?) -> HKSamplePredicate<HKWorkoutRoute>\nReturns a sample predicate that matches samples containing workout route data."
  },
  {
    "title": "quantitySample(type:predicate:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hksamplepredicate/3916535-quantitysample",
    "html": "Parameters\nquantityType\n\nA type that matches samples that store numerical values.\n\npredicate\n\nAn optional predicate that further restricts the results that the query returns.\n\nDiscussion\n\nUse this method to create an HKSamplePredicate instance that you can use to query for HKQuantitySample objects.\n\nSee Also\nCreating Sample Predicates\nstatic func audiogram(NSPredicate?) -> HKSamplePredicate<HKAudiogramSample>\nReturns a sample predicate that matches audiogram samples.\nstatic func categorySample(type: HKCategoryType, predicate: NSPredicate?) -> HKSamplePredicate<HKCategorySample>\nReturns a sample predicate that matches category samples.\nstatic func clinicalRecord(type: HKClinicalType, predicate: NSPredicate?) -> HKSamplePredicate<HKClinicalRecord>\nReturns a sample predicate that matches clinical record samples.\nstatic func correlation(type: HKCorrelationType, predicate: NSPredicate?) -> HKSamplePredicate<HKCorrelation>\nReturns a sample predicate that matches samples that contain correlated data.\nstatic func electrocardiogram(NSPredicate?) -> HKSamplePredicate<HKElectrocardiogram>\nReturns a sample predicate that matches electrocardiogram samples.\nstatic func heartbeatSeries(NSPredicate?) -> HKSamplePredicate<HKHeartbeatSeriesSample>\nReturns a sample predicate that matches heartbeat series samples.\nstatic func sample(type: HKSampleType, predicate: NSPredicate?) -> HKSamplePredicate<HKSample>\nReturns a sample predicate that matches samples.\nstatic func visionPrescription(NSPredicate?) -> HKSamplePredicate<HKVisionPrescription>\nReturns a predicate that matches prescription samples.\nstatic func workout(NSPredicate?) -> HKSamplePredicate<HKWorkout>\nReturns a sample predicate that matches workout samples.\nstatic func workoutRoute(NSPredicate?) -> HKSamplePredicate<HKWorkoutRoute>\nReturns a sample predicate that matches samples containing workout route data."
  },
  {
    "title": "sampleType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hksamplepredicate/3916537-sampletype",
    "html": "See Also\nAccessing Sample Predicate Data\nlet nsPredicate: NSPredicate?\nAn optional predicate that further restricts the results that the query returns."
  },
  {
    "title": "nsPredicate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hksamplepredicate/3916534-nspredicate",
    "html": "See Also\nAccessing Sample Predicate Data\nlet sampleType: HKSampleType\nThe type of samples that the query returns."
  },
  {
    "title": "electrocardiogram(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hksamplepredicate/3916530-electrocardiogram",
    "html": "Parameters\npredicate\n\nAn optional predicate that further restricts the results that the query returns.\n\nDiscussion\n\nUse this method to create an HKSamplePredicate instance that you can use to query for HKElectrocardiogram objects.\n\nSee Also\nCreating Sample Predicates\nstatic func audiogram(NSPredicate?) -> HKSamplePredicate<HKAudiogramSample>\nReturns a sample predicate that matches audiogram samples.\nstatic func categorySample(type: HKCategoryType, predicate: NSPredicate?) -> HKSamplePredicate<HKCategorySample>\nReturns a sample predicate that matches category samples.\nstatic func clinicalRecord(type: HKClinicalType, predicate: NSPredicate?) -> HKSamplePredicate<HKClinicalRecord>\nReturns a sample predicate that matches clinical record samples.\nstatic func correlation(type: HKCorrelationType, predicate: NSPredicate?) -> HKSamplePredicate<HKCorrelation>\nReturns a sample predicate that matches samples that contain correlated data.\nstatic func heartbeatSeries(NSPredicate?) -> HKSamplePredicate<HKHeartbeatSeriesSample>\nReturns a sample predicate that matches heartbeat series samples.\nstatic func quantitySample(type: HKQuantityType, predicate: NSPredicate?) -> HKSamplePredicate<HKQuantitySample>\nReturns a sample predicate that matches quantity samples.\nstatic func sample(type: HKSampleType, predicate: NSPredicate?) -> HKSamplePredicate<HKSample>\nReturns a sample predicate that matches samples.\nstatic func visionPrescription(NSPredicate?) -> HKSamplePredicate<HKVisionPrescription>\nReturns a predicate that matches prescription samples.\nstatic func workout(NSPredicate?) -> HKSamplePredicate<HKWorkout>\nReturns a sample predicate that matches workout samples.\nstatic func workoutRoute(NSPredicate?) -> HKSamplePredicate<HKWorkoutRoute>\nReturns a sample predicate that matches samples containing workout route data."
  },
  {
    "title": "bladderIncontinence | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkcategorytypeidentifier/3552042-bladderincontinence",
    "html": "Discussion\n\nThese samples use values from the HKCategoryValueSeverity enumeration."
  },
  {
    "title": "bundleIdentifier | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hksource/1615704-bundleidentifier",
    "html": "Discussion\n\nFor apps, this property holds the app’s bundle identifier. For supported Bluetooth LE devices, this property holds a UUID for the device.\n\nSee Also\nGetting Property Data\nvar name: String\nThe source’s name."
  },
  {
    "title": "default() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hksource/1615046-default",
    "html": "Return Value\n\nA source object for the current app.\n\nDiscussion\n\nYou can access the source object for the current app directly using this methods. To access other sources, use a source query or similar approach."
  },
  {
    "title": "correlation(type:predicate:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hksamplepredicate/3916529-correlation",
    "html": "Parameters\ncorrelationType\n\nA type that matches samples that contain a set of subsamples.\n\npredicate\n\nAn optional predicate that further restricts the results that the query returns.\n\nDiscussion\n\nUse this method to create an HKSamplePredicate instance that you can use to query for HKCorrelation objects.\n\nSee Also\nCreating Sample Predicates\nstatic func audiogram(NSPredicate?) -> HKSamplePredicate<HKAudiogramSample>\nReturns a sample predicate that matches audiogram samples.\nstatic func categorySample(type: HKCategoryType, predicate: NSPredicate?) -> HKSamplePredicate<HKCategorySample>\nReturns a sample predicate that matches category samples.\nstatic func clinicalRecord(type: HKClinicalType, predicate: NSPredicate?) -> HKSamplePredicate<HKClinicalRecord>\nReturns a sample predicate that matches clinical record samples.\nstatic func electrocardiogram(NSPredicate?) -> HKSamplePredicate<HKElectrocardiogram>\nReturns a sample predicate that matches electrocardiogram samples.\nstatic func heartbeatSeries(NSPredicate?) -> HKSamplePredicate<HKHeartbeatSeriesSample>\nReturns a sample predicate that matches heartbeat series samples.\nstatic func quantitySample(type: HKQuantityType, predicate: NSPredicate?) -> HKSamplePredicate<HKQuantitySample>\nReturns a sample predicate that matches quantity samples.\nstatic func sample(type: HKSampleType, predicate: NSPredicate?) -> HKSamplePredicate<HKSample>\nReturns a sample predicate that matches samples.\nstatic func visionPrescription(NSPredicate?) -> HKSamplePredicate<HKVisionPrescription>\nReturns a predicate that matches prescription samples.\nstatic func workout(NSPredicate?) -> HKSamplePredicate<HKWorkout>\nReturns a sample predicate that matches workout samples.\nstatic func workoutRoute(NSPredicate?) -> HKSamplePredicate<HKWorkoutRoute>\nReturns a sample predicate that matches samples containing workout route data."
  },
  {
    "title": "name | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hksource/1615115-name",
    "html": "Discussion\n\nFor apps, this property holds a localized name for the app. For supported Bluetooth LE devices, this property holds whatever string the device reports as its name.\n\nSee Also\nGetting Property Data\nvar bundleIdentifier: String\nThe source’s bundle identifier."
  },
  {
    "title": "clinicalRecord(type:predicate:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hksamplepredicate/3916528-clinicalrecord",
    "html": "Parameters\nclinicalType\n\nA type that matches samples that contain clinical record data.\n\npredicate\n\nAn optional predicate that further restricts the results that the query returns.\n\nDiscussion\n\nUse this method to create an HKSamplePredicate instance that you can use to query for HKClinicalRecord objects.\n\nSee Also\nCreating Sample Predicates\nstatic func audiogram(NSPredicate?) -> HKSamplePredicate<HKAudiogramSample>\nReturns a sample predicate that matches audiogram samples.\nstatic func categorySample(type: HKCategoryType, predicate: NSPredicate?) -> HKSamplePredicate<HKCategorySample>\nReturns a sample predicate that matches category samples.\nstatic func correlation(type: HKCorrelationType, predicate: NSPredicate?) -> HKSamplePredicate<HKCorrelation>\nReturns a sample predicate that matches samples that contain correlated data.\nstatic func electrocardiogram(NSPredicate?) -> HKSamplePredicate<HKElectrocardiogram>\nReturns a sample predicate that matches electrocardiogram samples.\nstatic func heartbeatSeries(NSPredicate?) -> HKSamplePredicate<HKHeartbeatSeriesSample>\nReturns a sample predicate that matches heartbeat series samples.\nstatic func quantitySample(type: HKQuantityType, predicate: NSPredicate?) -> HKSamplePredicate<HKQuantitySample>\nReturns a sample predicate that matches quantity samples.\nstatic func sample(type: HKSampleType, predicate: NSPredicate?) -> HKSamplePredicate<HKSample>\nReturns a sample predicate that matches samples.\nstatic func visionPrescription(NSPredicate?) -> HKSamplePredicate<HKVisionPrescription>\nReturns a predicate that matches prescription samples.\nstatic func workout(NSPredicate?) -> HKSamplePredicate<HKWorkout>\nReturns a sample predicate that matches workout samples.\nstatic func workoutRoute(NSPredicate?) -> HKSamplePredicate<HKWorkoutRoute>\nReturns a sample predicate that matches samples containing workout route data."
  },
  {
    "title": "audiogram(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hksamplepredicate/3916526-audiogram",
    "html": "Parameters\npredicate\n\nAn optional predicate that further restricts the results that the query returns.\n\nDiscussion\n\nUse this method to create an HKSamplePredicate instance that you can use to query for HKAudiogramSample objects.\n\nSee Also\nCreating Sample Predicates\nstatic func categorySample(type: HKCategoryType, predicate: NSPredicate?) -> HKSamplePredicate<HKCategorySample>\nReturns a sample predicate that matches category samples.\nstatic func clinicalRecord(type: HKClinicalType, predicate: NSPredicate?) -> HKSamplePredicate<HKClinicalRecord>\nReturns a sample predicate that matches clinical record samples.\nstatic func correlation(type: HKCorrelationType, predicate: NSPredicate?) -> HKSamplePredicate<HKCorrelation>\nReturns a sample predicate that matches samples that contain correlated data.\nstatic func electrocardiogram(NSPredicate?) -> HKSamplePredicate<HKElectrocardiogram>\nReturns a sample predicate that matches electrocardiogram samples.\nstatic func heartbeatSeries(NSPredicate?) -> HKSamplePredicate<HKHeartbeatSeriesSample>\nReturns a sample predicate that matches heartbeat series samples.\nstatic func quantitySample(type: HKQuantityType, predicate: NSPredicate?) -> HKSamplePredicate<HKQuantitySample>\nReturns a sample predicate that matches quantity samples.\nstatic func sample(type: HKSampleType, predicate: NSPredicate?) -> HKSamplePredicate<HKSample>\nReturns a sample predicate that matches samples.\nstatic func visionPrescription(NSPredicate?) -> HKSamplePredicate<HKVisionPrescription>\nReturns a predicate that matches prescription samples.\nstatic func workout(NSPredicate?) -> HKSamplePredicate<HKWorkout>\nReturns a sample predicate that matches workout samples.\nstatic func workoutRoute(NSPredicate?) -> HKSamplePredicate<HKWorkoutRoute>\nReturns a sample predicate that matches samples containing workout route data."
  },
  {
    "title": "sleepChanges | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkcategorytypeidentifier/3552077-sleepchanges",
    "html": "Discussion\n\nThese samples use values from the HKCategoryValuePresence enumeration.\n\nSee Also\nSleep\nstatic let nightSweats: HKCategoryTypeIdentifier\nA category type that records night sweats as a symptom."
  },
  {
    "title": "drySkin | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkcategorytypeidentifier/3552052-dryskin",
    "html": "Discussion\n\nThese samples use values from the HKCategoryValueSeverity enumeration.\n\nSee Also\nSkin and Hair\nstatic let acne: HKCategoryTypeIdentifier\nA category type that records acne as a symptom.\nstatic let hairLoss: HKCategoryTypeIdentifier\nA category type that records hair loss as a symptom."
  },
  {
    "title": "acne | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkcategorytypeidentifier/3552040-acne",
    "html": "Discussion\n\nThese samples use values from the HKCategoryValueSeverity enumeration.\n\nSee Also\nSkin and Hair\nstatic let drySkin: HKCategoryTypeIdentifier\nA category type that records dry skin as a symptom.\nstatic let hairLoss: HKCategoryTypeIdentifier\nA category type that records hair loss as a symptom."
  },
  {
    "title": "softwareVersion | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkdevice/1615262-softwareversion",
    "html": "See Also\nAccessing Data About a Device\nvar udiDeviceIdentifier: String?\nThe device identifier portion of the US Food and Drug Administration’s Unique Device Identifier (UDI).\nvar firmwareVersion: String?\nAn arbitrary string representing the current version of the firmware running on the device.\nvar hardwareVersion: String?\nAn arbitrary string representing the hardware version of the device.\nvar localIdentifier: String?\nAn identifier that uniquely identifies the device object on the hardware running this code.\nvar manufacturer: String?\nA string representing the device’s manufacturer.\nvar model: String?\nA string representing the device’s model.\nvar name: String?\nThe user-facing name for the device."
  },
  {
    "title": "HKWorkoutActivityType.cooldown | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkoutactivitytype/cooldown",
    "html": "See Also\nExercise and fitness\ncase preparationAndRecovery\nThe constant for warm-up and therapeutic activities like foam rolling and stretching.\ncase flexibility\nThe constant for a flexibility workout.\ncase walking\nThe constant for walking.\ncase running\nThe constant for running and jogging.\ncase wheelchairWalkPace\nThe constant for a wheelchair workout at walking pace.\ncase wheelchairRunPace\nThe constant for wheelchair workout at running pace.\ncase cycling\nThe constant for cycling.\ncase handCycling\nThe constant for hand cycling.\ncase coreTraining\nThe constant for core training.\ncase elliptical\nThe constant for workouts on an elliptical machine.\ncase functionalStrengthTraining\nThe constant for strength training, primarily with free weights and body weight.\ncase traditionalStrengthTraining\nThe constant for strength training exercises primarily using machines or free weights.\ncase crossTraining\nThe constant for exercise that includes any mixture of cardio, strength, and/or flexibility training.\ncase mixedCardio\nThe constant for workouts that mix a variety of cardio exercise machines or modalities.\ncase highIntensityIntervalTraining\nThe constant for high intensity interval training.\ncase jumpRope\nThe constant for jumping rope.\ncase stairClimbing\nThe constant for workouts using a stair climbing machine.\ncase stairs\nThe constant for running, walking, or other drills using stairs (for example, in a stadium or inside a multilevel building).\ncase stepTraining\nThe constant for training using a step bench.\ncase fitnessGaming\nThe constant for playing fitness-based video games."
  },
  {
    "title": "sampleType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquerydescriptor/3747009-sampletype",
    "html": "Discussion\n\nFor more information, see Data types.\n\nSee Also\nAccessing Descriptor Data\nvar predicate: NSPredicate?\nThe predicate that filters samples matching this descriptor."
  },
  {
    "title": "init(sampleType:predicate:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquerydescriptor/3747007-init",
    "html": "Parameters\nsampleType\n\nThe data type of samples that match this descriptor. For more information, see Data types.\n\npredicate\n\nThe predicate used to filter samples that match this descriptor. If the predicate is nil, the descriptor matches all samples of the specified data type."
  },
  {
    "title": "predicate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquerydescriptor/3747008-predicate",
    "html": "Discussion\n\nIf the predicate is nil, the descriptor matches all samples of the data type specified by the sampleType property.\n\nSee Also\nAccessing Descriptor Data\nvar sampleType: HKSampleType\nThe data type of samples that match this descriptor."
  },
  {
    "title": "endDate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkstatistics/1615067-enddate",
    "html": "Discussion\n\nThis property contains the end date for the statistics. If you calculated these statistics using a statistics query, this is the latest end date from all the samples that match the query. If you calculated these statistics using a statistics collection query, this is the end of the time interval for that particular collection of statistics.\n\nSee Also\nGetting Property Data\nvar startDate: Date\nThe start of the time period included in these statistics.\nvar quantityType: HKQuantityType\nThe quantity type of the samples used to calculate these statistics.\nvar sources: [HKSource]?\nAn array containing all the sources contributing to these statistics."
  },
  {
    "title": "maximumQuantity() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkstatistics/1615519-maximumquantity",
    "html": "Return Value\n\nIf the discreteMax option was set, this method returns a quantity object containing the maximum value from all the samples matching the query; otherwise, it returns nil.\n\nSee Also\nGetting Statistics Data\nfunc averageQuantity() -> HKQuantity?\nReturns the average value from all the samples that match the query.\nfunc averageQuantity(for: HKSource) -> HKQuantity?\nReturns the average value from all the samples that match the query and that were created by the specified source.\nfunc maximumQuantity(for: HKSource) -> HKQuantity?\nReturns the maximum value from all the samples that match the query and that were created by the specified source.\nfunc minimumQuantity() -> HKQuantity?\nReturns the minimum value from all the samples that match the query.\nfunc minimumQuantity(for: HKSource) -> HKQuantity?\nReturns the minimum value from all the samples that match the query and that were created by the specified source.\nfunc sumQuantity() -> HKQuantity?\nReturns the sum of all the samples that match the query.\nfunc sumQuantity(for: HKSource) -> HKQuantity?\nReturns the sum of all the samples that match the query and that were created by the specified source.\nfunc duration() -> HKQuantity?\nReturns the total duration covering all the samples that match the query.\nfunc duration(for: HKSource) -> HKQuantity?\nReturns the total duration covering all the samples created by the specified source that also match the query.\nRelated Documentation\nvar endDate: Date\nThe end of the time period included in these statistics.\nvar startDate: Date\nThe start of the time period included in these statistics."
  },
  {
    "title": "breastPain | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkcategorytypeidentifier/3592865-breastpain",
    "html": "Discussion\n\nThese samples use values from the HKCategoryValueSeverity enumeration.\n\nSee Also\nReproduction\nstatic let pelvicPain: HKCategoryTypeIdentifier\nA category type that records pelvic pain as a symptom.\nstatic let vaginalDryness: HKCategoryTypeIdentifier\nA category type that records vaginal dryness as a symptom."
  },
  {
    "title": "pelvicPain | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkcategorytypeidentifier/3566518-pelvicpain",
    "html": "Discussion\n\nThese samples use values from the HKCategoryValueSeverity enumeration.\n\nSee Also\nReproduction\nstatic let breastPain: HKCategoryTypeIdentifier\nA category type that records breast pain as a symptom.\nstatic let vaginalDryness: HKCategoryTypeIdentifier\nA category type that records vaginal dryness as a symptom."
  },
  {
    "title": "vaginalDryness | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkcategorytypeidentifier/3552080-vaginaldryness",
    "html": "Discussion\n\nThese samples use values from the HKCategoryValueSeverity enumeration.\n\nSee Also\nReproduction\nstatic let breastPain: HKCategoryTypeIdentifier\nA category type that records breast pain as a symptom.\nstatic let pelvicPain: HKCategoryTypeIdentifier\nA category type that records pelvic pain as a symptom."
  },
  {
    "title": "HKPredicateKeyPathMostRecentDuration | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkpredicatekeypathmostrecentduration",
    "html": "Discussion\n\nUse this constant whenever you want to include a sample’s quantity in a predicate format string. Add a %K placeholder to the format string, and then pass this constant as an argument.\n\nSee Also\nSpecifying Predicate Key Paths\nlet HKPredicateKeyPathMin: String\nThe key path for the sample’s minimum quantity.\nlet HKPredicateKeyPathAverage: String\nThe key path for the sample’s average quantity.\nlet HKPredicateKeyPathMax: String\nThe key path for the sample’s maximum quantity.\nlet HKPredicateKeyPathMostRecent: String\nThe key path for the sample’s most recent quantity.\nlet HKPredicateKeyPathMostRecentStartDate: String\nThe key path for the start date of the sample’s most recent quantity.\nlet HKPredicateKeyPathMostRecentEndDate: String\nThe key path for the end date of the sample’s most recent quantity."
  },
  {
    "title": "averageQuantity | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkdiscretequantitysample/3172585-averagequantity",
    "html": "See Also\nAccessing Calculated Values\nvar maximumQuantity: HKQuantity\nThe maximum quantity contained by the sample.\nvar minimumQuantity: HKQuantity\nThe minimum value contained by the sample.\nvar mostRecentQuantity: HKQuantity\nThe most recent quantity contained by the sample.\nvar mostRecentQuantityDateInterval: DateInterval\nThe date interval for the most recent quantity contained by the sample."
  },
  {
    "title": "sinusCongestion | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkcategorytypeidentifier/3552075-sinuscongestion",
    "html": "Discussion\n\nThese samples use values from the HKCategoryValueSeverity enumeration.\n\nSee Also\nNose and Throat\nstatic let lossOfSmell: HKCategoryTypeIdentifier\nA category type that records loss of smell as a symptom.\nstatic let lossOfTaste: HKCategoryTypeIdentifier\nA category type that records loss of taste as a symptom.\nstatic let runnyNose: HKCategoryTypeIdentifier\nA category type that records runny nose as a symptom.\nstatic let soreThroat: HKCategoryTypeIdentifier\nA category type that records sore throat as a symptom."
  },
  {
    "title": "nausea | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkcategorytypeidentifier/3552068-nausea",
    "html": "Discussion\n\nThese samples use values from the HKCategoryValueSeverity enumeration.\n\nSee Also\nAbdominal and Gastrointestinal\nstatic let abdominalCramps: HKCategoryTypeIdentifier\nA category type that records abdominal cramps as a symptom.\nstatic let bloating: HKCategoryTypeIdentifier\nA category type that records bloating as a symptom.\nstatic let constipation: HKCategoryTypeIdentifier\nA category type that records constipation as a symptom.\nstatic let diarrhea: HKCategoryTypeIdentifier\nA category type that records diarrhea as a symptom.\nstatic let heartburn: HKCategoryTypeIdentifier\nA category type that records heartburn as a symptom.\nstatic let vomiting: HKCategoryTypeIdentifier\nA category type that records vomiting as a symptom."
  },
  {
    "title": "vomiting | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkcategorytypeidentifier/3552081-vomiting",
    "html": "Discussion\n\nThese samples use values from the HKCategoryValueSeverity enumeration.\n\nSee Also\nAbdominal and Gastrointestinal\nstatic let abdominalCramps: HKCategoryTypeIdentifier\nA category type that records abdominal cramps as a symptom.\nstatic let bloating: HKCategoryTypeIdentifier\nA category type that records bloating as a symptom.\nstatic let constipation: HKCategoryTypeIdentifier\nA category type that records constipation as a symptom.\nstatic let diarrhea: HKCategoryTypeIdentifier\nA category type that records diarrhea as a symptom.\nstatic let heartburn: HKCategoryTypeIdentifier\nA category type that records heartburn as a symptom.\nstatic let nausea: HKCategoryTypeIdentifier\nA category type that records nausea as a symptom."
  },
  {
    "title": "chills | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkcategorytypeidentifier/3552046-chills",
    "html": "Discussion\n\nThese samples use values from the HKCategoryValueSeverity enumeration.\n\nSee Also\nConstitutional\nstatic let appetiteChanges: HKCategoryTypeIdentifier\nA category type that records changes in appetite as a symptom.\nstatic let dizziness: HKCategoryTypeIdentifier\nA category type that records dizziness as a symptom.\nstatic let fainting: HKCategoryTypeIdentifier\nA category type that records fainting as a symptom.\nstatic let fatigue: HKCategoryTypeIdentifier\nA category type that records fatigue as a symptom.\nstatic let fever: HKCategoryTypeIdentifier\nA category type that records fever as a symptom.\nstatic let generalizedBodyAche: HKCategoryTypeIdentifier\nA category type that records body ache as a symptom.\nstatic let hotFlashes: HKCategoryTypeIdentifier\nA category type that records hot flashes as a symptom."
  },
  {
    "title": "shortnessOfBreath | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkcategorytypeidentifier/3552074-shortnessofbreath",
    "html": "Discussion\n\nThese samples use values from the HKCategoryValueSeverity enumeration.\n\nSee Also\nHeart and Lung\nstatic let chestTightnessOrPain: HKCategoryTypeIdentifier\nA category type that records chest tightness or pain as a symptom.\nstatic let coughing: HKCategoryTypeIdentifier\nA category type that records coughing as a symptom.\nstatic let rapidPoundingOrFlutteringHeartbeat: HKCategoryTypeIdentifier\nA category type that records a rapid, pounding, or fluttering heartbeat as a symptom.\nstatic let skippedHeartbeat: HKCategoryTypeIdentifier\nA category type that records skipped heartbeat as a symptom.\nstatic let wheezing: HKCategoryTypeIdentifier\nA category type that records wheezing as a symptom."
  },
  {
    "title": "fainting | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkcategorytypeidentifier/3552054-fainting",
    "html": "Discussion\n\nThese samples use values from the HKCategoryValueSeverity enumeration.\n\nSee Also\nConstitutional\nstatic let appetiteChanges: HKCategoryTypeIdentifier\nA category type that records changes in appetite as a symptom.\nstatic let chills: HKCategoryTypeIdentifier\nA category type that records chills as a symptom.\nstatic let dizziness: HKCategoryTypeIdentifier\nA category type that records dizziness as a symptom.\nstatic let fatigue: HKCategoryTypeIdentifier\nA category type that records fatigue as a symptom.\nstatic let fever: HKCategoryTypeIdentifier\nA category type that records fever as a symptom.\nstatic let generalizedBodyAche: HKCategoryTypeIdentifier\nA category type that records body ache as a symptom.\nstatic let hotFlashes: HKCategoryTypeIdentifier\nA category type that records hot flashes as a symptom."
  },
  {
    "title": "memoryLapse | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkcategorytypeidentifier/3552065-memorylapse",
    "html": "Discussion\n\nThese samples use values from the HKCategoryValueSeverity enumeration.\n\nSee Also\nNeurological\nstatic let headache: HKCategoryTypeIdentifier\nA category type that records headache as a symptom.\nstatic let moodChanges: HKCategoryTypeIdentifier\nA category type that records mood changes as a symptom."
  },
  {
    "title": "wheezing | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkcategorytypeidentifier/3552082-wheezing",
    "html": "Discussion\n\nThese samples use values from the HKCategoryValueSeverity enumeration.\n\nSee Also\nHeart and Lung\nstatic let chestTightnessOrPain: HKCategoryTypeIdentifier\nA category type that records chest tightness or pain as a symptom.\nstatic let coughing: HKCategoryTypeIdentifier\nA category type that records coughing as a symptom.\nstatic let rapidPoundingOrFlutteringHeartbeat: HKCategoryTypeIdentifier\nA category type that records a rapid, pounding, or fluttering heartbeat as a symptom.\nstatic let shortnessOfBreath: HKCategoryTypeIdentifier\nA category type that records shortness of breath as a symptom.\nstatic let skippedHeartbeat: HKCategoryTypeIdentifier\nA category type that records skipped heartbeat as a symptom."
  },
  {
    "title": "moodChanges | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkcategorytypeidentifier/3552066-moodchanges",
    "html": "Discussion\n\nThese samples use values from the HKCategoryValuePresence enumeration.\n\nSee Also\nNeurological\nstatic let headache: HKCategoryTypeIdentifier\nA category type that records headache as a symptom.\nstatic let memoryLapse: HKCategoryTypeIdentifier\nA category type that records memory lapse as a symptom."
  },
  {
    "title": "lossOfSmell | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkcategorytypeidentifier/3621858-lossofsmell",
    "html": "Discussion\n\nThese samples use values from the HKCategoryValueSeverity enumeration.\n\nSee Also\nNose and Throat\nstatic let lossOfTaste: HKCategoryTypeIdentifier\nA category type that records loss of taste as a symptom.\nstatic let runnyNose: HKCategoryTypeIdentifier\nA category type that records runny nose as a symptom.\nstatic let soreThroat: HKCategoryTypeIdentifier\nA category type that records sore throat as a symptom.\nstatic let sinusCongestion: HKCategoryTypeIdentifier\nA category type that records sinus congestion as a symptom."
  },
  {
    "title": "lossOfTaste | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkcategorytypeidentifier/3621859-lossoftaste",
    "html": "Discussion\n\nThese samples use values from the HKCategoryValueSeverity enumeration.\n\nSee Also\nNose and Throat\nstatic let lossOfSmell: HKCategoryTypeIdentifier\nA category type that records loss of smell as a symptom.\nstatic let runnyNose: HKCategoryTypeIdentifier\nA category type that records runny nose as a symptom.\nstatic let soreThroat: HKCategoryTypeIdentifier\nA category type that records sore throat as a symptom.\nstatic let sinusCongestion: HKCategoryTypeIdentifier\nA category type that records sinus congestion as a symptom."
  },
  {
    "title": "issuedDate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkverifiableclinicalrecord/3798779-issueddate",
    "html": "See Also\nReading Metadata\nvar relevantDate: Date\nA date relevant to this record, such as when the issuer administered a vaccine or performed a test.\nvar expirationDate: Date?\nThe date when the card expires.\nvar recordTypes: [String]\nAn array of strings representing the types of records contained in the card.\nvar sourceType: HKVerifiableClinicalRecordSourceType?\nThe source for the verifiable clinical record\nstruct HKVerifiableClinicalRecordSourceType\nThe source type for the verifiable clinical record.\nvar itemNames: [String]\nA human-readable description of the card’s contents."
  },
  {
    "title": "expirationDate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkverifiableclinicalrecord/3798778-expirationdate",
    "html": "See Also\nReading Metadata\nvar issuedDate: Date\nThe date when the issuer created the card.\nvar relevantDate: Date\nA date relevant to this record, such as when the issuer administered a vaccine or performed a test.\nvar recordTypes: [String]\nAn array of strings representing the types of records contained in the card.\nvar sourceType: HKVerifiableClinicalRecordSourceType?\nThe source for the verifiable clinical record\nstruct HKVerifiableClinicalRecordSourceType\nThe source type for the verifiable clinical record.\nvar itemNames: [String]\nA human-readable description of the card’s contents."
  },
  {
    "title": "recordTypes | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkverifiableclinicalrecord/3798782-recordtypes",
    "html": "See Also\nReading Metadata\nvar issuedDate: Date\nThe date when the issuer created the card.\nvar relevantDate: Date\nA date relevant to this record, such as when the issuer administered a vaccine or performed a test.\nvar expirationDate: Date?\nThe date when the card expires.\nvar sourceType: HKVerifiableClinicalRecordSourceType?\nThe source for the verifiable clinical record\nstruct HKVerifiableClinicalRecordSourceType\nThe source type for the verifiable clinical record.\nvar itemNames: [String]\nA human-readable description of the card’s contents."
  },
  {
    "title": "HKAnchoredObjectQueryDescriptor.Results.Element | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkanchoredobjectquerydescriptor/results/element",
    "html": "See Also\nCreating an Iterator\nfunc makeAsyncIterator() -> HKAnchoredObjectQueryDescriptor<Sample>.Results.Iterator\nCreates the asynchronous iterator that produces results from this asynchronous sequence.\nstruct HKAnchoredObjectQueryDescriptor.Results.Iterator\nAn iterator for accessing anchored object results.\ntypealias HKAnchoredObjectQueryDescriptor.Results.AsyncIterator\nAn iterator that returns results from an asynchronous sequence."
  },
  {
    "title": "manufacturer | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkdevice/1615305-manufacturer",
    "html": "See Also\nAccessing Data About a Device\nvar udiDeviceIdentifier: String?\nThe device identifier portion of the US Food and Drug Administration’s Unique Device Identifier (UDI).\nvar firmwareVersion: String?\nAn arbitrary string representing the current version of the firmware running on the device.\nvar hardwareVersion: String?\nAn arbitrary string representing the hardware version of the device.\nvar localIdentifier: String?\nAn identifier that uniquely identifies the device object on the hardware running this code.\nvar model: String?\nA string representing the device’s model.\nvar name: String?\nThe user-facing name for the device.\nvar softwareVersion: String?\nAn arbitrary string representing the version of the software running on the device."
  },
  {
    "title": "duration() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkstatistics/3172588-duration",
    "html": "Discussion\n\nIf you set the duration option, this method returns a quantity object containing total duration covering all the samples that match the query; otherwise, it returns nil.\n\nSee Also\nGetting Statistics Data\nfunc averageQuantity() -> HKQuantity?\nReturns the average value from all the samples that match the query.\nfunc averageQuantity(for: HKSource) -> HKQuantity?\nReturns the average value from all the samples that match the query and that were created by the specified source.\nfunc maximumQuantity() -> HKQuantity?\nReturns the maximum value from all the samples that match the query.\nfunc maximumQuantity(for: HKSource) -> HKQuantity?\nReturns the maximum value from all the samples that match the query and that were created by the specified source.\nfunc minimumQuantity() -> HKQuantity?\nReturns the minimum value from all the samples that match the query.\nfunc minimumQuantity(for: HKSource) -> HKQuantity?\nReturns the minimum value from all the samples that match the query and that were created by the specified source.\nfunc sumQuantity() -> HKQuantity?\nReturns the sum of all the samples that match the query.\nfunc sumQuantity(for: HKSource) -> HKQuantity?\nReturns the sum of all the samples that match the query and that were created by the specified source.\nfunc duration(for: HKSource) -> HKQuantity?\nReturns the total duration covering all the samples created by the specified source that also match the query."
  },
  {
    "title": "statistics(for:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkstatisticscollection/1615300-statistics",
    "html": "Parameters\ndate\n\nThe target date.\n\nReturn Value\n\nA statistics object for the time interval containing the provided date. If there are no samples for the selected time interval, the statistics object has a nil-valued quantity.\n\nSee Also\nAccessing Statistics Collections\nfunc statistics() -> [HKStatistics]\nReturns an array of statistics objects representing the populated time intervals covered by the statistics collection query.\nfunc enumerateStatistics(from: Date, to: Date, with: (HKStatistics, UnsafeMutablePointer<ObjCBool>) -> Void)\nEnumerates the statistics objects for all the time intervals from the start date until the end date."
  },
  {
    "title": "mostRecentQuantity() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkstatistics/2962900-mostrecentquantity",
    "html": "See Also\nGetting the Most Recent Quantity\nfunc mostRecentQuantity(for: HKSource) -> HKQuantity?\nReturns the most recent value from all the samples that match the query and were created by the specified source.\nfunc mostRecentQuantityDateInterval() -> DateInterval?\nReturns the date interval of the most recent sample that matches the query.\nfunc mostRecentQuantityDateInterval(for: HKSource) -> DateInterval?\nReturns the date interval of the most recent sample that matches the query and was created by the specified source.\nRelated Documentation\nstatic var discreteMostRecent: HKStatisticsOptions\nAn option indicating that the system returns the most recent quantity from the matching samples."
  },
  {
    "title": "init(queryDescriptors:anchor:limit:resultsHandler:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkanchoredobjectquery/3746980-init",
    "html": "Parameters\nqueryDescriptors\n\nAn array of descriptors that specify the types of samples that the query returns.\n\nanchor\n\nThe anchor that the previous anchored object query returned. The anchor object corresponds to the last object that the previous anchored object query returned. The new query returns only samples and deleted objects that are newer than that object.\n\nPass nil to receive all the matching samples and recently deleted objects currently in the HealthKit store.\n\nlimit\n\nThe maximum number of samples that the query returned. If you want to return all matching samples, use HKObjectQueryNoLimit.\n\nhandler\n\nA block that the HealthKit store calls after gathering the initial results. This block takes the following parameters:\n\nquery\n\nA reference to the query calling this block.\n\nsampleObjects\n\nAn array containing the samples this query returned, or nil if an error occurred.\n\ndeletedObjects\n\nAn array containing the deleted objects this query returned, or nil if an error occurred.\n\nnewAnchor\n\nAn anchor object corresponding to the last object this query returned. Subsequent anchor queries use this value to receive new samples and deleted objects created after the query returned its initial results.\n\nerror\n\nIf an error occurs, an object describing the error; otherwise, it’s nil.\n\nDiscussion\n\nUse this initializer to create an anchored object query for data that matches any of the HKQueryDescriptor objects. Each descriptor can specify a different data type.\n\nAfter instantiating the query, call the HKHealthStore class’s execute(_:) method to run it. Queries run on an anonymous background queue. As soon as the query is complete, the system executes the results handler on the background queue, returning samples that match any of the descriptors. You typically dispatch these results to the main queue to update the user interface.\n\nThe first time you call this method, pass nil as the anchor parameter. This method returns all matching objects currently in the HealthKit store. Additionally, save the returned anchor object and pass it to the next query.\n\nAnchor queries can also act as long-running queries. If you assign an update handler before executing the query, the query continues to monitor the HealthKit store after gathering the initial results. The system calls the update handler on a background queue whenever a matching sample is saved to or deleted from the HealthKit store. To cancel this query, call the store’s stop(_:) method.\n\nFor example, the following code gathers and returns all step count and push count samples currently in the HeathKit store. It then continues to monitor the store and calls the handler again after any relevant changes.\n\n// Create the data types.\nlet stepCountType = HKQuantityType(.stepCount)\nlet pushCountType = HKQuantityType(.pushCount)\n\n\n// Specify the desired sample types.\nlet stepDescriptor = HKQueryDescriptor(sampleType: stepCountType, predicate: nil)\nlet pushDescriptor = HKQueryDescriptor(sampleType: pushCountType, predicate: nil)\n\n\n// Create a handler to process results from the query.\nlet handler: (HKAnchoredObjectQuery,\n              [HKSample]?,\n              [HKDeletedObject]?,\n              HKQueryAnchor?,\n              Error?) -> Void = { (query, samples, deleted, newAnchor, error) in\n    \n    if let error = error {\n        // Handle errors here.\n    }\n    \n    DispatchQueue.main.async {\n        // Update the anchor.\n        anchor = newAnchor\n        \n        // Process the samples and deleted objects here.\n    }\n}\n\n\n// Create the query.\nlet anchorQuery = HKAnchoredObjectQuery(queryDescriptors: [stepDescriptor, pushDescriptor],\n                                        anchor: anchor,\n                                        limit: HKObjectQueryNoLimit,\n                                        resultsHandler: handler)\n\n\n// To continue monitoring the HealthKit store in the background, set the\n// update handler.\nanchorQuery.updateHandler = handler\n\n\n// Run the query.\nstore.execute(anchorQuery)\n\n\nSee Also\nCreating Anchored Object Queries\nExecuting Anchored Object Queries\nCreate and run an anchored object query.\ninit(type: HKSampleType, predicate: NSPredicate?, anchor: HKQueryAnchor?, limit: Int, resultsHandler: (HKAnchoredObjectQuery, [HKSample]?, [HKDeletedObject]?, HKQueryAnchor?, Error?) -> Void)\nInitializes a new anchored object query.\nlet HKObjectQueryNoLimit: Int\nA value indicating that the query returns all the matching samples in the HealthKit store.\ninit(type: HKSampleType, predicate: NSPredicate?, anchor: Int, limit: Int, completionHandler: (HKAnchoredObjectQuery, [HKSample]?, Int, Error?) -> Void)\nInitializes a new anchored object query."
  },
  {
    "title": "init(recordTypes:sourceTypes:predicate:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkverifiableclinicalrecordquerydescriptor/3925480-init",
    "html": "Parameters\nrecordTypes\n\nThe types of records that this query returns. For a list of valid record types, see HKVerifiableClinicalRecordCredentialType.\n\nsourceTypes\n\nThe format of the verifiable clinical records. For a list of valid sources, see HKVerifiableClinicalRecordSourceType.\n\npredicate\n\nA predicate that limits the results that this query returns. Pass nil to receive all records of the specified source and record type.\n\nSee Also\nCreating Query Descriptors\ntypealias HKVerifiableClinicalRecordQueryDescriptor.Output\nThe type of data that the query returns."
  },
  {
    "title": "sourceTypes | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkverifiableclinicalrecordquery/3922623-sourcetypes",
    "html": "Discussion\n\nFor a list of valid formats, see HKVerifiableClinicalRecordSourceType.\n\nSee Also\nAccessing the Metadata\nvar recordTypes: [String]\nThe type of records that this query returns."
  },
  {
    "title": "mostRecentQuantity(for:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkstatistics/2962903-mostrecentquantity",
    "html": "See Also\nGetting the Most Recent Quantity\nfunc mostRecentQuantity() -> HKQuantity?\nReturns the most recent value from all the samples that match the query.\nfunc mostRecentQuantityDateInterval() -> DateInterval?\nReturns the date interval of the most recent sample that matches the query.\nfunc mostRecentQuantityDateInterval(for: HKSource) -> DateInterval?\nReturns the date interval of the most recent sample that matches the query and was created by the specified source.\nRelated Documentation\nstatic var discreteMostRecent: HKStatisticsOptions\nAn option indicating that the system returns the most recent quantity from the matching samples."
  },
  {
    "title": "mostRecentQuantityDateInterval(for:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkstatistics/2962902-mostrecentquantitydateinterval",
    "html": "See Also\nGetting the Most Recent Quantity\nfunc mostRecentQuantity() -> HKQuantity?\nReturns the most recent value from all the samples that match the query.\nfunc mostRecentQuantity(for: HKSource) -> HKQuantity?\nReturns the most recent value from all the samples that match the query and were created by the specified source.\nfunc mostRecentQuantityDateInterval() -> DateInterval?\nReturns the date interval of the most recent sample that matches the query.\nRelated Documentation\nstatic var discreteMostRecent: HKStatisticsOptions\nAn option indicating that the system returns the most recent quantity from the matching samples."
  },
  {
    "title": "recordTypes | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkverifiableclinicalrecordquery/3801682-recordtypes",
    "html": "Discussion\n\nFor a list of the most common record types, see HKVerifiableClinicalRecordCredentialType.\n\nSee Also\nAccessing the Metadata\nvar sourceTypes: [HKVerifiableClinicalRecordSourceType]\nThe format of the verifiable clinical record."
  },
  {
    "title": "init(recordTypes:predicate:resultsHandler:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkverifiableclinicalrecordquery/3801681-init",
    "html": "Parameters\nrecordTypes\n\nThe types of records that the query returns.\n\npredicate\n\nA predicate that limits the results that they query returns. Pass nil to receive all records of the specified type.\n\nresultsHandler\n\nA block that the HealthKit store calls after it finishes executing the query.\n\nThis block takes the following parameters:\n\nquery\n\nA reference to the query that called this block.\n\nrecords\n\nAn array containing the verifiable health records found by the query, or nil if an error occurs.\n\nerror\n\nIf an error occurs, an object describing the error; otherwise, it’s nil.\n\nSee Also\nCreating Queries\ninit(recordTypes: [String], sourceTypes: [HKVerifiableClinicalRecordSourceType], predicate: NSPredicate?, resultsHandler: (HKVerifiableClinicalRecordQuery, [HKVerifiableClinicalRecord]?, Error?) -> Void)\nCreates a query for one-time access to a verifiable clinical record."
  },
  {
    "title": "Executing Anchored Object Queries | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkanchoredobjectquery/executing_anchored_object_queries",
    "html": "Overview\n\nAnchored object queries return changes that occurred since the previous query. These queries can also continue running in a background queue, notifying your app about any updates to the specified samples.\n\nCreate an Anchored Object Query\n\nYou create an anchored object query by calling the init(type:predicate:anchor:limit:resultsHandler:) initializer. Start by creating the type object for the desired samples. The following example creates a type object for step counts.\n\nguard let stepCountType = HKObjectType.quantityType(forIdentifier: .stepCount) else {\n    // This should never fail when using a defined constant.\n    fatalError(\"*** Unable to get the step count type ***\")\n}\n\n\nNext, use the type object to build an anchored object query. The following example queries for all step count samples; it doesn’t use a predicate or limit to filter the results.\n\nlet query = HKAnchoredObjectQuery(type: stepCountType,\n                                  predicate: nil,\n                                  anchor: myAnchor,\n                                  limit: HKObjectQueryNoLimit)\n{ (query, samplesOrNil, deletedObjectsOrNil, newAnchor, errorOrNil) in\n    \n    guard let samples = samplesOrNil, let deletedObjects = deletedObjectsOrNil else {\n        // Properly handle the error.\n        return\n    }\n    \n    myAnchor = newAnchor\n    \n    for stepCountSample in samples {\n        // Process the new step count samples.\n    }\n    \n    for deletedStepCountSamples in deletedObjects {\n        // Process the deleted step count samples.\n    }\n\n\n    // The results come back on an anonymous background queue.\n    // Dispatch to the main queue before modifying the UI.\n    \n    DispatchQueue.main.async {\n        // Update the UI here.\n    }\n}\n\n\nAfter the query is instantiated, call the HealthKit store’s execute(_:) method. This runs the query on an anonymous background queue. When the query is complete, it executes the results handler on the same background queue (but not necessarily the same thread).\n\nstore.execute(query)\n\n\nWhen you run the query, the system passes the current results to the results handler. If the myAnchor property is nil, the query returns all the step count data currently available in the HealthKit store. On subsequent runs, the code uses the anchor returned by the previous query. These queries return only the changes since the previous run.\n\nCreate a Long-Running Query\n\nOptionally, add an update handler to create a long-running query.\n\nquery.updateHandler = { (query, samplesOrNil, deletedObjectsOrNil, newAnchor, errorOrNil) in\n    guard let samples = samplesOrNil, let deletedObjects = deletedObjectsOrNil else {\n        // Properly handle the error.\n        return\n    }\n    \n    myAnchor = newAnchor\n    \n    for stepCountSample in samples {\n        // Process the step counts from the update.\n    }\n    \n    for deletedStepCountSamples in deletedObjects {\n        // Process the deleted step count samples from the update.\n    }\n}\n\n\nNow, when you run the query, it continues to monitor the HealthKit store after returning the initial results. The system calls the update handler whenever it detects a change to the affected objects. Often, it’s more efficient to set up and run a single anchored object query than to run separate sample and observer queries. As a result, you may want to use anchored object queries, even when you aren’t using anchors to limit the results. In this case, set the anchor parameter to nil.\n\nSee Also\nCreating Anchored Object Queries\ninit(type: HKSampleType, predicate: NSPredicate?, anchor: HKQueryAnchor?, limit: Int, resultsHandler: (HKAnchoredObjectQuery, [HKSample]?, [HKDeletedObject]?, HKQueryAnchor?, Error?) -> Void)\nInitializes a new anchored object query.\ninit(queryDescriptors: [HKQueryDescriptor], anchor: HKQueryAnchor?, limit: Int, resultsHandler: (HKAnchoredObjectQuery, [HKSample]?, [HKDeletedObject]?, HKQueryAnchor?, Error?) -> Void)\nCreates an anchored object query that matches any of the query descriptors you provided.\nlet HKObjectQueryNoLimit: Int\nA value indicating that the query returns all the matching samples in the HealthKit store.\ninit(type: HKSampleType, predicate: NSPredicate?, anchor: Int, limit: Int, completionHandler: (HKAnchoredObjectQuery, [HKSample]?, Int, Error?) -> Void)\nInitializes a new anchored object query."
  },
  {
    "title": "mostRecentQuantityDateInterval() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkstatistics/2962901-mostrecentquantitydateinterval",
    "html": "See Also\nGetting the Most Recent Quantity\nfunc mostRecentQuantity() -> HKQuantity?\nReturns the most recent value from all the samples that match the query.\nfunc mostRecentQuantity(for: HKSource) -> HKQuantity?\nReturns the most recent value from all the samples that match the query and were created by the specified source.\nfunc mostRecentQuantityDateInterval(for: HKSource) -> DateInterval?\nReturns the date interval of the most recent sample that matches the query and was created by the specified source.\nRelated Documentation\nstatic var discreteMostRecent: HKStatisticsOptions\nAn option indicating that the system returns the most recent quantity from the matching samples."
  },
  {
    "title": "init(type:predicate:anchor:limit:resultsHandler:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkanchoredobjectquery/1615071-init",
    "html": "Parameters\ntype\n\nThe type of sample to search for. This query supports all subclasses of HKSampleType, such as HKQuantityType, HKCategoryType, HKWorkoutType, and HKCorrelationType.\n\npredicate\n\nA predicate that filters both the samples and the deleted objects returned by the query. Pass nil to receive all the newly added samples and recently deleted objects of the specified type.\n\nanchor\n\nThe anchor returned by the previous anchored object query. The anchor object corresponds to the last object that was returned by the previous anchored object query. The new query returns only samples and deleted objects that are newer than that object.\n\nPass nil to receive all the matching samples and recently deleted objects currently in the HealthKit store.\n\nlimit\n\nThe maximum number of samples received by the query. To receive all of the new samples, pass HKObjectQueryNoLimit.\n\nhandler\n\nA block that the system calls after gathering the initial results. This block takes the following parameters:\n\nquery\n\nA reference to the query calling this block.\n\nsampleObjects\n\nAn array containing the samples returned by this query, or nil if an error occurred.\n\ndeletedObjects\n\nAn array containing the deleted objects returned by this query, or nil if an error occurred.\n\nnewAnchor\n\nAn anchor object corresponding to the last object returned by this query. Subsequent anchor queries use this value to receive new samples and deleted objects created after the query returned its initial results.\n\nerror\n\nIf an error occurs, this parameter contains an object describing the error; otherwise, it is nil.\n\nReturn Value\n\nA newly initialized anchor query object.\n\nDiscussion\n\nAfter instantiating the query, call the HKHealthStore class’s execute(_:) method to run it. The queries run on an anonymous background queue. As soon as the query is complete, the results handler block is executed on the same background queue (but not necessarily the same thread). Be sure to dispatch these results to the main queue before updating the user interface.\n\nThe first time you call this method, pass nil as the anchor parameter. This method returns all matching objects currently in the HealthKit store. Additionally, save the returned anchor object and pass it to the next query.\n\nAnchor queries can also act as long-running queries. If you assign an update handler before executing the query, the query continues to monitor the HealthKit store after gathering the initial results. The system calls the update handler on a background queue whenever a matching sample is saved to or deleted from the HealthKit store. To cancel this query, call the store’s stop(_:) method.\n\nSee Also\nCreating Anchored Object Queries\nExecuting Anchored Object Queries\nCreate and run an anchored object query.\ninit(queryDescriptors: [HKQueryDescriptor], anchor: HKQueryAnchor?, limit: Int, resultsHandler: (HKAnchoredObjectQuery, [HKSample]?, [HKDeletedObject]?, HKQueryAnchor?, Error?) -> Void)\nCreates an anchored object query that matches any of the query descriptors you provided.\nlet HKObjectQueryNoLimit: Int\nA value indicating that the query returns all the matching samples in the HealthKit store.\ninit(type: HKSampleType, predicate: NSPredicate?, anchor: Int, limit: Int, completionHandler: (HKAnchoredObjectQuery, [HKSample]?, Int, Error?) -> Void)\nInitializes a new anchored object query."
  },
  {
    "title": "visionPrescription(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hksamplepredicate/3916538-visionprescription",
    "html": "Parameters\npredicate\n\nA predicate that further filters the matching prescriptions.\n\nDiscussion\n\nUse this method to create a predicate that matches vision prescriptions.\n\n// Create a predicate that matches samples stored today.\nlet end = Date()\nlet start = Calendar.current.startOfDay(for: Date())\nlet datePredicate = HKQuery.predicateForSamples(withStart: start, end: end)\n\n\n// Create a predicate that matches vision prescriptions samples stored today.\nlet predicate = HKSamplePredicate.visionPrescription(datePredicate)\n\n\nSee Also\nCreating Sample Predicates\nstatic func audiogram(NSPredicate?) -> HKSamplePredicate<HKAudiogramSample>\nReturns a sample predicate that matches audiogram samples.\nstatic func categorySample(type: HKCategoryType, predicate: NSPredicate?) -> HKSamplePredicate<HKCategorySample>\nReturns a sample predicate that matches category samples.\nstatic func clinicalRecord(type: HKClinicalType, predicate: NSPredicate?) -> HKSamplePredicate<HKClinicalRecord>\nReturns a sample predicate that matches clinical record samples.\nstatic func correlation(type: HKCorrelationType, predicate: NSPredicate?) -> HKSamplePredicate<HKCorrelation>\nReturns a sample predicate that matches samples that contain correlated data.\nstatic func electrocardiogram(NSPredicate?) -> HKSamplePredicate<HKElectrocardiogram>\nReturns a sample predicate that matches electrocardiogram samples.\nstatic func heartbeatSeries(NSPredicate?) -> HKSamplePredicate<HKHeartbeatSeriesSample>\nReturns a sample predicate that matches heartbeat series samples.\nstatic func quantitySample(type: HKQuantityType, predicate: NSPredicate?) -> HKSamplePredicate<HKQuantitySample>\nReturns a sample predicate that matches quantity samples.\nstatic func sample(type: HKSampleType, predicate: NSPredicate?) -> HKSamplePredicate<HKSample>\nReturns a sample predicate that matches samples.\nstatic func workout(NSPredicate?) -> HKSamplePredicate<HKWorkout>\nReturns a sample predicate that matches workout samples.\nstatic func workoutRoute(NSPredicate?) -> HKSamplePredicate<HKWorkoutRoute>\nReturns a sample predicate that matches samples containing workout route data."
  },
  {
    "title": "hairLoss | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkcategorytypeidentifier/3552057-hairloss",
    "html": "Discussion\n\nThese samples use values from the HKCategoryValueSeverity enumeration.\n\nSee Also\nSkin and Hair\nstatic let acne: HKCategoryTypeIdentifier\nA category type that records acne as a symptom.\nstatic let drySkin: HKCategoryTypeIdentifier\nA category type that records dry skin as a symptom."
  },
  {
    "title": "Output | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkasyncquery/3916309-output",
    "html": "Required\n\nSee Also\nRunning Queries\nfunc result(for: HKHealthStore) -> Self.Output\nRuns a one-shot query and asynchronously returns a snapshot of the current matching results.\n\nRequired"
  },
  {
    "title": "HKHeartbeatSeriesQueryDescriptor.Heartbeat | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkheartbeatseriesquerydescriptor/heartbeat",
    "html": "Topics\nAccessing Heartbeat Data\nlet precededByGap: Bool\nlet timeIntervalSinceStart: TimeInterval\nComparing Heartbeats\nfunc hash(into: inout Hasher)\nHashes the essential components of the heartbeat by passing them into the given hash function.\nvar hashValue: Int\nThe hashed value for the heartbeat.\nstatic func == (HKHeartbeatSeriesQueryDescriptor.Heartbeat, HKHeartbeatSeriesQueryDescriptor.Heartbeat) -> Bool\nIndicates whether two heartbeats are equal.\nstatic func != (HKHeartbeatSeriesQueryDescriptor.Heartbeat, HKHeartbeatSeriesQueryDescriptor.Heartbeat) -> Bool\nIndicates whether two heartbeats are unequal.\nRelationships\nConforms To\nHashable\nSee Also\nRunning Queries\nfunc results(for: HKHealthStore) -> HKHeartbeatSeriesQueryDescriptor.Results\nRuns a one-shot query that returns an asynchronous sequence of data representing individual heartbeats.\nstruct HKHeartbeatSeriesQueryDescriptor.Results\nAn asynchronous sequence that emits data about individual heartbeats from a heartbeat series sample."
  },
  {
    "title": "init(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkclinicaltype/3778605-init",
    "html": "Parameters\nidentifier\n\nAn identifier that specifies the type of data to store in the sample. For a complete list of clinical type identifiers, see HKClinicalTypeIdentifier."
  },
  {
    "title": "heartbeat() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkseriestype/3113769-heartbeat",
    "html": "See Also\nAccessing Series Types\nclass func workoutRoute() -> Self\nReturns a series type object for workout routes."
  },
  {
    "title": "init(predicates:anchor:limit:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkanchoredobjectquerydescriptor/3916303-init",
    "html": "Parameters\npredicates\n\nAn array of sample predicates that define the type of data that the query returns. To query for multiple types of data, provide a sample predicate for each type.\n\nanchor\n\nAn anchor that a previous anchored object query returned. The anchor object corresponds to the last object that the previous query returned. The current query returns only samples and deleted objects newer than the anchor. Pass nil to receive all the matching samples and recently deleted objects currently in the HealthKit store.\n\nlimit\n\nAn optional value that specifies the maximum number of samples that the query returns. If you don’t specify the limit, the system returns all matching samples in the HealthKit store.\n\nDiscussion\n\nThe system sets the descriptor’s HKAnchoredObjectQueryDescriptor.Output type based on the predicates parameter.\n\nSee Also\nCreating Query Descriptors\ntypealias HKAnchoredObjectQueryDescriptor.Output\nThe type of data that the anchored object query returns.\ntypealias HKAnchoredObjectQueryDescriptor.Sequence\nThe asynchronous sequence that the anchored object query returns."
  },
  {
    "title": "firmwareVersion | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkdevice/1615749-firmwareversion",
    "html": "See Also\nAccessing Data About a Device\nvar udiDeviceIdentifier: String?\nThe device identifier portion of the US Food and Drug Administration’s Unique Device Identifier (UDI).\nvar hardwareVersion: String?\nAn arbitrary string representing the hardware version of the device.\nvar localIdentifier: String?\nAn identifier that uniquely identifies the device object on the hardware running this code.\nvar manufacturer: String?\nA string representing the device’s manufacturer.\nvar model: String?\nA string representing the device’s model.\nvar name: String?\nThe user-facing name for the device.\nvar softwareVersion: String?\nAn arbitrary string representing the version of the software running on the device."
  },
  {
    "title": "dataRepresentation | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkverifiableclinicalrecord/3925419-datarepresentation",
    "html": "Discussion\n\nThe data’s format varies based on its sourceType:\n\nSMART Health Card\n\nThe raw representation corresponds to the compact JSON Web Signatures (JWS) serialization. For more information, see SMART Health Card Framework.\n\nEU-DCC Records\n\nThe raw representation corresponds to the CBOR Web Tokens (CWT) of the Electronic Health Certificate (HCERT). For more information, see Electronic Health Certificates.\n\nImportant\n\nTo ensure that the data is authentic and that no one has tampered with it, decompress the data and then use a public key from the issuer to verify their signature.\n\nSee Also\nAccessing the Raw Payload\nvar jwsRepresentation: Data\nA raw representation of the SMART Health Card’s contents."
  },
  {
    "title": "workoutRoute() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkseriestype/2866710-workoutroute",
    "html": "See Also\nAccessing Series Types\nclass func heartbeat() -> Self\nReturns a series type object for heartbeat data."
  },
  {
    "title": "init(heartbeatSeries:dataHandler:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkheartbeatseriesquery/3113764-init",
    "html": "Parameters\nheartbeatSeries\n\nThe series sample containing the heartbeat data.\n\ndataHandler\n\nThe handler called by the query. The handler takes the following parameters:\n\nquery\n\nThe query that returned the heartbeat data.\n\ntimeSinceSeriesStart\n\nThe time of the heartbeat, measured from the series builder’s start date. This must be a positive value.\n\nprecededByGap\n\nA Boolean value that indicates whether this heartbeat was immediately preceded by a gap in the data, indicating that one or more heartbeats may be missing.\n\ndone\n\nA Boolean value that indicates whether the query is complete.\n\nerror\n\nIf an error occurred, this contains an object that describes the error; otherwise, nil.\n\nDiscussion\n\nThe system calls the dataHandler once for each heartbeat until either the done parameter is true, or you call stop(_:)."
  },
  {
    "title": "results(for:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkheartbeatseriesquerydescriptor/3916417-results",
    "html": "Parameters\nhealthStore\n\nThe access point for HealthKit data.\n\nRelationships\nFrom Protocol\nHKAsyncSequenceQuery\nSee Also\nRunning Queries\nstruct HKHeartbeatSeriesQueryDescriptor.Results\nAn asynchronous sequence that emits data about individual heartbeats from a heartbeat series sample.\nstruct HKHeartbeatSeriesQueryDescriptor.Heartbeat\nData about an individual heartbeat."
  },
  {
    "title": "HKElectrocardiogram.Lead | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkelectrocardiogram/lead",
    "html": "Topics\nLeads\ncase appleWatchSimilarToLeadI\nApple Watch Series 4 or later.\nRelationships\nConforms To\nSendable\nSee Also\nAccessing Voltage Measurements\nvar numberOfVoltageMeasurements: Int\nThe number of voltage measurements associated with this sample.\nvar samplingFrequency: HKQuantity?\nThe frequency at which the Apple Watch sampled the voltage.\nclass HKElectrocardiogram.VoltageMeasurement\nThe voltage for all leads at a single point in time."
  },
  {
    "title": "jwsRepresentation | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkverifiableclinicalrecord/3798777-jwsrepresentation",
    "html": "Deprecated\n\nUse dataRepresentation instead.\n\nDiscussion\n\nThis property contains a JSON Web Signature (JWS) Compact Serialization of the card. The data is cryptographically signed by the issuer, and compressed.\n\nImportant\n\nTo ensure that the data is authentic and that no one has tampered with it, decompress the data and then use a public key from the issuer to verify their signature.\n\nSee Also\nAccessing the Raw Payload\nvar dataRepresentation: Data\nA raw representation of the record’s data."
  },
  {
    "title": "finishRoute(with:metadata:completion:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkoutroutebuilder/2874115-finishroute",
    "html": "Parameters\nworkout\n\nThe workout to associate with the route. You must have already saved this workout to the HealthKit store.\n\nmetadata\n\nThe metadata dictionary can contain extra information describing this sample. The dictionary’s keys are all NSString objects. The values may be HKQuantity, NSString, NSNumber, or NSDate objects. For a complete list of predefined metadata keys, see Metadata Keys.\n\nUsing predefined keys helps facilitate sharing data between apps; however, you are also encouraged to create your own custom keys as needed to extend the HealthKit quantity sample’s capabilities.\n\ncompletion\n\nA block called after the system has saved the route data. The system passes the block the following parameters:\n\nworkoutRoute\n\nThe workout route, or nil if an error occurred. If successful, the system has already associated the route with the provided workout and saved it to the HealthKit store.\n\nerror\n\nAn object that describes the error, if an error has occurred; otherwise, nil.\n\nDiscussion\n\nConcurrency Note\n\nYou can call this method from synchronous code using a completion handler, as shown on this page, or you can call it as an asynchronous method that has the following declaration:\n\nfunc finishRoute(with workout: HKWorkout, metadata: [String : Any]?) async throws -> HKWorkoutRoute\n\n\nFor information about concurrency and asynchronous code in Swift, see Calling Objective-C APIs Asynchronously.\n\nCall this method after adding all the route data to the builder. The builder creates the route and saves it to the HealthKit store. It also associates the route with the provided workout. You cannot associate the route with another workout.\n\nNote\n\nYou must call finishRoute(with:metadata:completion:) before the system deallocates the builder. Failure to do so results in a loss of all route data added to the builder.\n\nThis method fails if you haven’t added any location data to the builder. The completion handler returns an error and nil for the route.\n\nAdditionally, this method invalidates the builder. Any further calls to the builder returns an error. To subsequently access the workout route, use a query (for example, an HKSampleQuery object).\n\nSee Also\nBuilding the route\nfunc insertRouteData([CLLocation], completion: (Bool, Error?) -> Void)\nAdds route data to the builder.\nfunc addMetadata([String : Any], completion: (Bool, Error?) -> Void)\nAdds metadata to the builder."
  },
  {
    "title": "quantity(for:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkelectrocardiogram/voltagemeasurement/3552004-quantity",
    "html": "Parameters\nlead\n\nThe lead whose voltage you want to read.\n\nReturn Value\n\nA quantity object containing a value in volt units. These values are compatible with any units created using voltUnit(with:).\n\nSee Also\nAccessing Data\nvar timeSinceSampleStart: TimeInterval\nThe time of the measurement relative to the sample’s start time."
  },
  {
    "title": "classification | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkelectrocardiogram/3551981-classification",
    "html": "See Also\nAccessing Overview Information\nenum HKElectrocardiogram.Classification\nClassifications returned by Apple Watch’s ECG algorithm.\nvar averageHeartRate: HKQuantity?\nThe user’s average heart rate during the ECG.\nvar symptomsStatus: HKElectrocardiogram.SymptomsStatus\nA value that indicates whether the user entered a symptom when they recorded the ECG.\nenum HKElectrocardiogram.SymptomsStatus\nValues indicating whether the user entered a symptom when they recorded the ECG."
  },
  {
    "title": "averageHeartRate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkelectrocardiogram/3551980-averageheartrate",
    "html": "See Also\nAccessing Overview Information\nvar classification: HKElectrocardiogram.Classification\nThe ECG’s classification.\nenum HKElectrocardiogram.Classification\nClassifications returned by Apple Watch’s ECG algorithm.\nvar symptomsStatus: HKElectrocardiogram.SymptomsStatus\nA value that indicates whether the user entered a symptom when they recorded the ECG.\nenum HKElectrocardiogram.SymptomsStatus\nValues indicating whether the user entered a symptom when they recorded the ECG."
  },
  {
    "title": "symptomsStatus | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkelectrocardiogram/3551984-symptomsstatus",
    "html": "Discussion\n\nIf the value is HKElectrocardiogram.SymptomsStatus.present, you can access the symptoms by querying for the HKCategorySample samples associated with the electrocardiogram sample. Use predicateForObjectsAssociated(electrocardiogram:) to create the predicate for the associated symptoms.\n\nSee Also\nAccessing Overview Information\nvar classification: HKElectrocardiogram.Classification\nThe ECG’s classification.\nenum HKElectrocardiogram.Classification\nClassifications returned by Apple Watch’s ECG algorithm.\nvar averageHeartRate: HKQuantity?\nThe user’s average heart rate during the ECG.\nenum HKElectrocardiogram.SymptomsStatus\nValues indicating whether the user entered a symptom when they recorded the ECG."
  },
  {
    "title": "HKElectrocardiogram.SymptomsStatus | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkelectrocardiogram/symptomsstatus",
    "html": "Topics\nStatus\ncase none\nThe user didn’t enter a symptom when they recorded the ECG.\ncase present\nThe user added a symptom when they recorded the ECG.\ncase notSet\nRelationships\nConforms To\nSendable\nSee Also\nAccessing Overview Information\nvar classification: HKElectrocardiogram.Classification\nThe ECG’s classification.\nenum HKElectrocardiogram.Classification\nClassifications returned by Apple Watch’s ECG algorithm.\nvar averageHeartRate: HKQuantity?\nThe user’s average heart rate during the ECG.\nvar symptomsStatus: HKElectrocardiogram.SymptomsStatus\nA value that indicates whether the user entered a symptom when they recorded the ECG."
  },
  {
    "title": "timeSinceSampleStart | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkelectrocardiogram/voltagemeasurement/3552005-timesincesamplestart",
    "html": "See Also\nAccessing Data\nfunc quantity(for: HKElectrocardiogram.Lead) -> HKQuantity?\nReturns the voltage for the specified lead."
  },
  {
    "title": "numberOfVoltageMeasurements | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkelectrocardiogram/3551982-numberofvoltagemeasurements",
    "html": "See Also\nAccessing Voltage Measurements\nvar samplingFrequency: HKQuantity?\nThe frequency at which the Apple Watch sampled the voltage.\nclass HKElectrocardiogram.VoltageMeasurement\nThe voltage for all leads at a single point in time.\nenum HKElectrocardiogram.Lead\nThe lead used to record a voltage measurement."
  },
  {
    "title": "samplingFrequency | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkelectrocardiogram/3551983-samplingfrequency",
    "html": "Discussion\n\nThe system records the frequency in hertz() units.\n\nSee Also\nAccessing Voltage Measurements\nvar numberOfVoltageMeasurements: Int\nThe number of voltage measurements associated with this sample.\nclass HKElectrocardiogram.VoltageMeasurement\nThe voltage for all leads at a single point in time.\nenum HKElectrocardiogram.Lead\nThe lead used to record a voltage measurement."
  },
  {
    "title": "HKPredicateKeyPathMostRecentEndDate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkpredicatekeypathmostrecentenddate",
    "html": "Discussion\n\nUse this constant whenever you want to include a sample’s quantity in a predicate format string. Add a %K placeholder to the format string, and then pass this constant as an argument.\n\nSee Also\nSpecifying Predicate Key Paths\nlet HKPredicateKeyPathMin: String\nThe key path for the sample’s minimum quantity.\nlet HKPredicateKeyPathAverage: String\nThe key path for the sample’s average quantity.\nlet HKPredicateKeyPathMax: String\nThe key path for the sample’s maximum quantity.\nlet HKPredicateKeyPathMostRecent: String\nThe key path for the sample’s most recent quantity.\nlet HKPredicateKeyPathMostRecentStartDate: String\nThe key path for the start date of the sample’s most recent quantity.\nlet HKPredicateKeyPathMostRecentDuration: String\nA key path for the duration of the sample’s most recent quantity."
  },
  {
    "title": "HKElectrocardiogram.Classification | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkelectrocardiogram/classification",
    "html": "Topics\nClassifications\ncase sinusRhythm\nThe sample exhibits no signs of atrial fibrillation.\ncase atrialFibrillation\nThe sample exhibits signs of atrial fibrillation.\ncase inconclusiveHighHeartRate\nAn unclassifiable sample caused by a rapid heart rate.\ncase inconclusiveLowHeartRate\nAn unclassifiable sample caused by a heart rate below 50 bpm.\ncase inconclusivePoorReading\nAn unclassifiable sample caused by an unclear signal.\ncase inconclusiveOther\nAn unclassifiable sample caused by an unknown issue.\ncase unrecognized\nA sample classification that this version of HealthKit doesn’t recognize.\ncase notSet\nA sample that doesn’t have an assigned classification.\nRelationships\nConforms To\nSendable\nSee Also\nAccessing Overview Information\nvar classification: HKElectrocardiogram.Classification\nThe ECG’s classification.\nvar averageHeartRate: HKQuantity?\nThe user’s average heart rate during the ECG.\nvar symptomsStatus: HKElectrocardiogram.SymptomsStatus\nA value that indicates whether the user entered a symptom when they recorded the ECG.\nenum HKElectrocardiogram.SymptomsStatus\nValues indicating whether the user entered a symptom when they recorded the ECG."
  },
  {
    "title": "HKPredicateKeyPathMostRecent | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkpredicatekeypathmostrecent",
    "html": "Discussion\n\nUse this constant whenever you want to include a sample’s quantity in a predicate format string. Add a %K placeholder to the format string, and then pass this constant as an argument.\n\nSee Also\nSpecifying Predicate Key Paths\nlet HKPredicateKeyPathMin: String\nThe key path for the sample’s minimum quantity.\nlet HKPredicateKeyPathAverage: String\nThe key path for the sample’s average quantity.\nlet HKPredicateKeyPathMax: String\nThe key path for the sample’s maximum quantity.\nlet HKPredicateKeyPathMostRecentStartDate: String\nThe key path for the start date of the sample’s most recent quantity.\nlet HKPredicateKeyPathMostRecentEndDate: String\nThe key path for the end date of the sample’s most recent quantity.\nlet HKPredicateKeyPathMostRecentDuration: String\nA key path for the duration of the sample’s most recent quantity."
  },
  {
    "title": "mostRecentQuantityDateInterval | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkdiscretequantitysample/3131021-mostrecentquantitydateinterval",
    "html": "See Also\nAccessing Calculated Values\nvar averageQuantity: HKQuantity\nThe average of all quantities contained by the sample.\nvar maximumQuantity: HKQuantity\nThe maximum quantity contained by the sample.\nvar minimumQuantity: HKQuantity\nThe minimum value contained by the sample.\nvar mostRecentQuantity: HKQuantity\nThe most recent quantity contained by the sample."
  },
  {
    "title": "soreThroat | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkcategorytypeidentifier/3552078-sorethroat",
    "html": "Discussion\n\nThese samples use values from the HKCategoryValueSeverity enumeration.\n\nSee Also\nNose and Throat\nstatic let lossOfSmell: HKCategoryTypeIdentifier\nA category type that records loss of smell as a symptom.\nstatic let lossOfTaste: HKCategoryTypeIdentifier\nA category type that records loss of taste as a symptom.\nstatic let runnyNose: HKCategoryTypeIdentifier\nA category type that records runny nose as a symptom.\nstatic let sinusCongestion: HKCategoryTypeIdentifier\nA category type that records sinus congestion as a symptom."
  },
  {
    "title": "runnyNose | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkcategorytypeidentifier/3552073-runnynose",
    "html": "Discussion\n\nThese samples use values from the HKCategoryValueSeverity enumeration.\n\nSee Also\nNose and Throat\nstatic let lossOfSmell: HKCategoryTypeIdentifier\nA category type that records loss of smell as a symptom.\nstatic let lossOfTaste: HKCategoryTypeIdentifier\nA category type that records loss of taste as a symptom.\nstatic let soreThroat: HKCategoryTypeIdentifier\nA category type that records sore throat as a symptom.\nstatic let sinusCongestion: HKCategoryTypeIdentifier\nA category type that records sinus congestion as a symptom."
  },
  {
    "title": "abdominalCramps | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkcategorytypeidentifier/3552039-abdominalcramps",
    "html": "Discussion\n\nThese samples use values from the HKCategoryValueSeverity enumeration.\n\nSee Also\nAbdominal and Gastrointestinal\nstatic let bloating: HKCategoryTypeIdentifier\nA category type that records bloating as a symptom.\nstatic let constipation: HKCategoryTypeIdentifier\nA category type that records constipation as a symptom.\nstatic let diarrhea: HKCategoryTypeIdentifier\nA category type that records diarrhea as a symptom.\nstatic let heartburn: HKCategoryTypeIdentifier\nA category type that records heartburn as a symptom.\nstatic let nausea: HKCategoryTypeIdentifier\nA category type that records nausea as a symptom.\nstatic let vomiting: HKCategoryTypeIdentifier\nA category type that records vomiting as a symptom."
  },
  {
    "title": "constipation | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkcategorytypeidentifier/3552047-constipation",
    "html": "Discussion\n\nThese samples use values from the HKCategoryValueSeverity enumeration.\n\nSee Also\nAbdominal and Gastrointestinal\nstatic let abdominalCramps: HKCategoryTypeIdentifier\nA category type that records abdominal cramps as a symptom.\nstatic let bloating: HKCategoryTypeIdentifier\nA category type that records bloating as a symptom.\nstatic let diarrhea: HKCategoryTypeIdentifier\nA category type that records diarrhea as a symptom.\nstatic let heartburn: HKCategoryTypeIdentifier\nA category type that records heartburn as a symptom.\nstatic let nausea: HKCategoryTypeIdentifier\nA category type that records nausea as a symptom.\nstatic let vomiting: HKCategoryTypeIdentifier\nA category type that records vomiting as a symptom."
  },
  {
    "title": "bloating | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkcategorytypeidentifier/3552043-bloating",
    "html": "Discussion\n\nThese samples use values from the HKCategoryValueSeverity enumeration.\n\nSee Also\nAbdominal and Gastrointestinal\nstatic let abdominalCramps: HKCategoryTypeIdentifier\nA category type that records abdominal cramps as a symptom.\nstatic let constipation: HKCategoryTypeIdentifier\nA category type that records constipation as a symptom.\nstatic let diarrhea: HKCategoryTypeIdentifier\nA category type that records diarrhea as a symptom.\nstatic let heartburn: HKCategoryTypeIdentifier\nA category type that records heartburn as a symptom.\nstatic let nausea: HKCategoryTypeIdentifier\nA category type that records nausea as a symptom.\nstatic let vomiting: HKCategoryTypeIdentifier\nA category type that records vomiting as a symptom."
  },
  {
    "title": "diarrhea | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkcategorytypeidentifier/3552050-diarrhea",
    "html": "Discussion\n\nThese samples use values from the HKCategoryValueSeverity enumeration.\n\nSee Also\nAbdominal and Gastrointestinal\nstatic let abdominalCramps: HKCategoryTypeIdentifier\nA category type that records abdominal cramps as a symptom.\nstatic let bloating: HKCategoryTypeIdentifier\nA category type that records bloating as a symptom.\nstatic let constipation: HKCategoryTypeIdentifier\nA category type that records constipation as a symptom.\nstatic let heartburn: HKCategoryTypeIdentifier\nA category type that records heartburn as a symptom.\nstatic let nausea: HKCategoryTypeIdentifier\nA category type that records nausea as a symptom.\nstatic let vomiting: HKCategoryTypeIdentifier\nA category type that records vomiting as a symptom."
  },
  {
    "title": "heartburn | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkcategorytypeidentifier/3552060-heartburn",
    "html": "Discussion\n\nThese samples use values from the HKCategoryValueSeverity enumeration.\n\nSee Also\nAbdominal and Gastrointestinal\nstatic let abdominalCramps: HKCategoryTypeIdentifier\nA category type that records abdominal cramps as a symptom.\nstatic let bloating: HKCategoryTypeIdentifier\nA category type that records bloating as a symptom.\nstatic let constipation: HKCategoryTypeIdentifier\nA category type that records constipation as a symptom.\nstatic let diarrhea: HKCategoryTypeIdentifier\nA category type that records diarrhea as a symptom.\nstatic let nausea: HKCategoryTypeIdentifier\nA category type that records nausea as a symptom.\nstatic let vomiting: HKCategoryTypeIdentifier\nA category type that records vomiting as a symptom."
  },
  {
    "title": "appetiteChanges | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkcategorytypeidentifier/3552041-appetitechanges",
    "html": "Discussion\n\nThese samples use values from the HKCategoryValueAppetiteChanges enumeration.\n\nSee Also\nConstitutional\nstatic let chills: HKCategoryTypeIdentifier\nA category type that records chills as a symptom.\nstatic let dizziness: HKCategoryTypeIdentifier\nA category type that records dizziness as a symptom.\nstatic let fainting: HKCategoryTypeIdentifier\nA category type that records fainting as a symptom.\nstatic let fatigue: HKCategoryTypeIdentifier\nA category type that records fatigue as a symptom.\nstatic let fever: HKCategoryTypeIdentifier\nA category type that records fever as a symptom.\nstatic let generalizedBodyAche: HKCategoryTypeIdentifier\nA category type that records body ache as a symptom.\nstatic let hotFlashes: HKCategoryTypeIdentifier\nA category type that records hot flashes as a symptom."
  },
  {
    "title": "headache | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkcategorytypeidentifier/3552058-headache",
    "html": "Discussion\n\nThese samples use values from the HKCategoryValueSeverity enumeration.\n\nSee Also\nNeurological\nstatic let memoryLapse: HKCategoryTypeIdentifier\nA category type that records memory lapse as a symptom.\nstatic let moodChanges: HKCategoryTypeIdentifier\nA category type that records mood changes as a symptom."
  },
  {
    "title": "dizziness | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkcategorytypeidentifier/3552051-dizziness",
    "html": "Discussion\n\nThese samples use values from the HKCategoryValueSeverity enumeration.\n\nSee Also\nConstitutional\nstatic let appetiteChanges: HKCategoryTypeIdentifier\nA category type that records changes in appetite as a symptom.\nstatic let chills: HKCategoryTypeIdentifier\nA category type that records chills as a symptom.\nstatic let fainting: HKCategoryTypeIdentifier\nA category type that records fainting as a symptom.\nstatic let fatigue: HKCategoryTypeIdentifier\nA category type that records fatigue as a symptom.\nstatic let fever: HKCategoryTypeIdentifier\nA category type that records fever as a symptom.\nstatic let generalizedBodyAche: HKCategoryTypeIdentifier\nA category type that records body ache as a symptom.\nstatic let hotFlashes: HKCategoryTypeIdentifier\nA category type that records hot flashes as a symptom."
  },
  {
    "title": "fatigue | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkcategorytypeidentifier/3552055-fatigue",
    "html": "Discussion\n\nThese samples use values from the HKCategoryValueSeverity enumeration.\n\nSee Also\nConstitutional\nstatic let appetiteChanges: HKCategoryTypeIdentifier\nA category type that records changes in appetite as a symptom.\nstatic let chills: HKCategoryTypeIdentifier\nA category type that records chills as a symptom.\nstatic let dizziness: HKCategoryTypeIdentifier\nA category type that records dizziness as a symptom.\nstatic let fainting: HKCategoryTypeIdentifier\nA category type that records fainting as a symptom.\nstatic let fever: HKCategoryTypeIdentifier\nA category type that records fever as a symptom.\nstatic let generalizedBodyAche: HKCategoryTypeIdentifier\nA category type that records body ache as a symptom.\nstatic let hotFlashes: HKCategoryTypeIdentifier\nA category type that records hot flashes as a symptom."
  },
  {
    "title": "hotFlashes | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkcategorytypeidentifier/3552061-hotflashes",
    "html": "Discussion\n\nThese samples use values from the HKCategoryValueSeverity enumeration.\n\nSee Also\nConstitutional\nstatic let appetiteChanges: HKCategoryTypeIdentifier\nA category type that records changes in appetite as a symptom.\nstatic let chills: HKCategoryTypeIdentifier\nA category type that records chills as a symptom.\nstatic let dizziness: HKCategoryTypeIdentifier\nA category type that records dizziness as a symptom.\nstatic let fainting: HKCategoryTypeIdentifier\nA category type that records fainting as a symptom.\nstatic let fatigue: HKCategoryTypeIdentifier\nA category type that records fatigue as a symptom.\nstatic let fever: HKCategoryTypeIdentifier\nA category type that records fever as a symptom.\nstatic let generalizedBodyAche: HKCategoryTypeIdentifier\nA category type that records body ache as a symptom."
  },
  {
    "title": "fever | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkcategorytypeidentifier/3552056-fever",
    "html": "Discussion\n\nThese samples use values from the HKCategoryValueSeverity enumeration.\n\nSee Also\nConstitutional\nstatic let appetiteChanges: HKCategoryTypeIdentifier\nA category type that records changes in appetite as a symptom.\nstatic let chills: HKCategoryTypeIdentifier\nA category type that records chills as a symptom.\nstatic let dizziness: HKCategoryTypeIdentifier\nA category type that records dizziness as a symptom.\nstatic let fainting: HKCategoryTypeIdentifier\nA category type that records fainting as a symptom.\nstatic let fatigue: HKCategoryTypeIdentifier\nA category type that records fatigue as a symptom.\nstatic let generalizedBodyAche: HKCategoryTypeIdentifier\nA category type that records body ache as a symptom.\nstatic let hotFlashes: HKCategoryTypeIdentifier\nA category type that records hot flashes as a symptom."
  },
  {
    "title": "chestTightnessOrPain | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkcategorytypeidentifier/3552045-chesttightnessorpain",
    "html": "Discussion\n\nThese samples use values from the HKCategoryValueSeverity enumeration.\n\nSee Also\nHeart and Lung\nstatic let coughing: HKCategoryTypeIdentifier\nA category type that records coughing as a symptom.\nstatic let rapidPoundingOrFlutteringHeartbeat: HKCategoryTypeIdentifier\nA category type that records a rapid, pounding, or fluttering heartbeat as a symptom.\nstatic let shortnessOfBreath: HKCategoryTypeIdentifier\nA category type that records shortness of breath as a symptom.\nstatic let skippedHeartbeat: HKCategoryTypeIdentifier\nA category type that records skipped heartbeat as a symptom.\nstatic let wheezing: HKCategoryTypeIdentifier\nA category type that records wheezing as a symptom."
  },
  {
    "title": "generalizedBodyAche | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkcategorytypeidentifier/3621857-generalizedbodyache",
    "html": "Discussion\n\nThese samples use values from the HKCategoryValueSeverity enumeration.\n\nSee Also\nConstitutional\nstatic let appetiteChanges: HKCategoryTypeIdentifier\nA category type that records changes in appetite as a symptom.\nstatic let chills: HKCategoryTypeIdentifier\nA category type that records chills as a symptom.\nstatic let dizziness: HKCategoryTypeIdentifier\nA category type that records dizziness as a symptom.\nstatic let fainting: HKCategoryTypeIdentifier\nA category type that records fainting as a symptom.\nstatic let fatigue: HKCategoryTypeIdentifier\nA category type that records fatigue as a symptom.\nstatic let fever: HKCategoryTypeIdentifier\nA category type that records fever as a symptom.\nstatic let hotFlashes: HKCategoryTypeIdentifier\nA category type that records hot flashes as a symptom."
  },
  {
    "title": "skippedHeartbeat | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkcategorytypeidentifier/3552076-skippedheartbeat",
    "html": "Discussion\n\nThese samples use values from the HKCategoryValueSeverity enumeration.\n\nSee Also\nHeart and Lung\nstatic let chestTightnessOrPain: HKCategoryTypeIdentifier\nA category type that records chest tightness or pain as a symptom.\nstatic let coughing: HKCategoryTypeIdentifier\nA category type that records coughing as a symptom.\nstatic let rapidPoundingOrFlutteringHeartbeat: HKCategoryTypeIdentifier\nA category type that records a rapid, pounding, or fluttering heartbeat as a symptom.\nstatic let shortnessOfBreath: HKCategoryTypeIdentifier\nA category type that records shortness of breath as a symptom.\nstatic let wheezing: HKCategoryTypeIdentifier\nA category type that records wheezing as a symptom."
  },
  {
    "title": "coughing | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkcategorytypeidentifier/3552049-coughing",
    "html": "Discussion\n\nThese samples use values from the HKCategoryValueSeverity enumeration.\n\nSee Also\nHeart and Lung\nstatic let chestTightnessOrPain: HKCategoryTypeIdentifier\nA category type that records chest tightness or pain as a symptom.\nstatic let rapidPoundingOrFlutteringHeartbeat: HKCategoryTypeIdentifier\nA category type that records a rapid, pounding, or fluttering heartbeat as a symptom.\nstatic let shortnessOfBreath: HKCategoryTypeIdentifier\nA category type that records shortness of breath as a symptom.\nstatic let skippedHeartbeat: HKCategoryTypeIdentifier\nA category type that records skipped heartbeat as a symptom.\nstatic let wheezing: HKCategoryTypeIdentifier\nA category type that records wheezing as a symptom."
  },
  {
    "title": "rapidPoundingOrFlutteringHeartbeat | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkcategorytypeidentifier/3552072-rapidpoundingorflutteringheartbe",
    "html": "Discussion\n\nThese samples use values from the HKCategoryValueSeverity enumeration.\n\nSee Also\nHeart and Lung\nstatic let chestTightnessOrPain: HKCategoryTypeIdentifier\nA category type that records chest tightness or pain as a symptom.\nstatic let coughing: HKCategoryTypeIdentifier\nA category type that records coughing as a symptom.\nstatic let shortnessOfBreath: HKCategoryTypeIdentifier\nA category type that records shortness of breath as a symptom.\nstatic let skippedHeartbeat: HKCategoryTypeIdentifier\nA category type that records skipped heartbeat as a symptom.\nstatic let wheezing: HKCategoryTypeIdentifier\nA category type that records wheezing as a symptom."
  },
  {
    "title": "itemNames | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkverifiableclinicalrecord/3798781-itemnames",
    "html": "See Also\nReading Metadata\nvar issuedDate: Date\nThe date when the issuer created the card.\nvar relevantDate: Date\nA date relevant to this record, such as when the issuer administered a vaccine or performed a test.\nvar expirationDate: Date?\nThe date when the card expires.\nvar recordTypes: [String]\nAn array of strings representing the types of records contained in the card.\nvar sourceType: HKVerifiableClinicalRecordSourceType?\nThe source for the verifiable clinical record\nstruct HKVerifiableClinicalRecordSourceType\nThe source type for the verifiable clinical record."
  },
  {
    "title": "relevantDate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkverifiableclinicalrecord/3798783-relevantdate",
    "html": "See Also\nReading Metadata\nvar issuedDate: Date\nThe date when the issuer created the card.\nvar expirationDate: Date?\nThe date when the card expires.\nvar recordTypes: [String]\nAn array of strings representing the types of records contained in the card.\nvar sourceType: HKVerifiableClinicalRecordSourceType?\nThe source for the verifiable clinical record\nstruct HKVerifiableClinicalRecordSourceType\nThe source type for the verifiable clinical record.\nvar itemNames: [String]\nA human-readable description of the card’s contents."
  },
  {
    "title": "udiDeviceIdentifier | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkdevice/1615296-udideviceidentifier",
    "html": "Discussion\n\nThe UDI identifies medical devices. You can look up additional information about the device at AccessGUDID. For more information, see FDA Unique Device Identification.\n\nSee Also\nAccessing Data About a Device\nvar firmwareVersion: String?\nAn arbitrary string representing the current version of the firmware running on the device.\nvar hardwareVersion: String?\nAn arbitrary string representing the hardware version of the device.\nvar localIdentifier: String?\nAn identifier that uniquely identifies the device object on the hardware running this code.\nvar manufacturer: String?\nA string representing the device’s manufacturer.\nvar model: String?\nA string representing the device’s model.\nvar name: String?\nThe user-facing name for the device.\nvar softwareVersion: String?\nAn arbitrary string representing the version of the software running on the device."
  },
  {
    "title": "sourceType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkverifiableclinicalrecord/3916022-sourcetype",
    "html": "Discussion\n\nFor a list of valid sources, see HKVerifiableClinicalRecordSourceType.\n\nSee Also\nReading Metadata\nvar issuedDate: Date\nThe date when the issuer created the card.\nvar relevantDate: Date\nA date relevant to this record, such as when the issuer administered a vaccine or performed a test.\nvar expirationDate: Date?\nThe date when the card expires.\nvar recordTypes: [String]\nAn array of strings representing the types of records contained in the card.\nstruct HKVerifiableClinicalRecordSourceType\nThe source type for the verifiable clinical record.\nvar itemNames: [String]\nA human-readable description of the card’s contents."
  },
  {
    "title": "statistics() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkstatisticscollection/1615550-statistics",
    "html": "Return Value\n\nAn array of statistics objects. The statistics objects are sorted in chronological order.\n\nDiscussion\n\nThe resulting array contains a statistics object for each time interval that has at least one sample that matches the query. The statistics objects are returned in chronological order, but they are not necessarily contiguous. This method ignores time intervals that do not have any samples. As a result, there may be arbitrarily large gaps in time between adjacent statistics objects in the array.\n\nSee Also\nAccessing Statistics Collections\nfunc statistics(for: Date) -> HKStatistics?\nReturns the statistics object for the time interval that contains the provided date.\nfunc enumerateStatistics(from: Date, to: Date, with: (HKStatistics, UnsafeMutablePointer<ObjCBool>) -> Void)\nEnumerates the statistics objects for all the time intervals from the start date until the end date."
  },
  {
    "title": "food | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkcorrelationtypeidentifier/1615420-food",
    "html": "Discussion\n\nWhen creating food samples, specify the type of food using the HKMetadataKeyFoodType metadata key.\n\nSee Also\nCorrelation Types\nstatic let bloodPressure: HKCorrelationTypeIdentifier\nA correlation sample that combines a systolic sample and a diastolic sample into a single blood pressure reading.\nRelated Documentation\nstruct HKCorrelationTypeIdentifier\nThe identifiers that create correlation type objects.\nclass HKCorrelationType\nA type that identifies samples that group multiple subsamples.\nclass HKCorrelation\nA sample that groups multiple related samples into a single entry."
  },
  {
    "title": "local() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkdevice/1615276-local",
    "html": "Return Value\n\nA device object representing the hardware (iPhone, iPod Touch, or Apple Watch) that is running the app.\n\nSee Also\nCreating Device Objects\ninit(name: String?, manufacturer: String?, model: String?, hardwareVersion: String?, firmwareVersion: String?, softwareVersion: String?, localIdentifier: String?, udiDeviceIdentifier: String?)\nInitializes a new device object."
  },
  {
    "title": "discreteMostRecent | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkstatisticsoptions/2962904-discretemostrecent",
    "html": "Deprecated\n\nUse mostRecent instead.\n\nSee Also\nRelated Documentation\nfunc mostRecentQuantity() -> HKQuantity?\nReturns the most recent value from all the samples that match the query.\nfunc mostRecentQuantity(for: HKSource) -> HKQuantity?\nReturns the most recent value from all the samples that match the query and were created by the specified source.\nfunc mostRecentQuantityDateInterval() -> DateInterval?\nReturns the date interval of the most recent sample that matches the query.\nfunc mostRecentQuantityDateInterval(for: HKSource) -> DateInterval?\nReturns the date interval of the most recent sample that matches the query and was created by the specified source."
  },
  {
    "title": "sourceTypes | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkverifiableclinicalrecordquerydescriptor/3922631-sourcetypes",
    "html": "Discussion\n\nFor a list of valid sources, see HKVerifiableClinicalRecordSourceType.\n\nSee Also\nAccessing Query Properties\nvar recordTypes: [HKVerifiableClinicalRecordCredentialType]\nThe types of records returned by this query.\nvar predicate: NSPredicate?\nA predicate that limits the results returned by the query."
  },
  {
    "title": "HKVerifiableClinicalRecordQueryDescriptor.Output | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkverifiableclinicalrecordquerydescriptor/output",
    "html": "See Also\nCreating Query Descriptors\ninit(recordTypes: [HKVerifiableClinicalRecordCredentialType], sourceTypes: [HKVerifiableClinicalRecordSourceType], predicate: NSPredicate?)\nCreates a query descriptor for reading verifiable clinical records."
  },
  {
    "title": "hardwareVersion | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkdevice/1615540-hardwareversion",
    "html": "See Also\nAccessing Data About a Device\nvar udiDeviceIdentifier: String?\nThe device identifier portion of the US Food and Drug Administration’s Unique Device Identifier (UDI).\nvar firmwareVersion: String?\nAn arbitrary string representing the current version of the firmware running on the device.\nvar localIdentifier: String?\nAn identifier that uniquely identifies the device object on the hardware running this code.\nvar manufacturer: String?\nA string representing the device’s manufacturer.\nvar model: String?\nA string representing the device’s model.\nvar name: String?\nThe user-facing name for the device.\nvar softwareVersion: String?\nAn arbitrary string representing the version of the software running on the device."
  },
  {
    "title": "localIdentifier | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkdevice/1615785-localidentifier",
    "html": "Discussion\n\nFor example, Bluetooth peripherals that store data directly into HealthKit use the peripheral’s CoreBluetooth UUID. This ID is only valid on the current hardware running the app. For example, connecting the same Bluetooth device to an iPhone and an Apple Watch produces two different local identifiers. Similarly, updating a device changes the local identifier. Device objects with different local identifiers appear as separate devices in the HealthKit Store.\n\nSee Also\nAccessing Data About a Device\nvar udiDeviceIdentifier: String?\nThe device identifier portion of the US Food and Drug Administration’s Unique Device Identifier (UDI).\nvar firmwareVersion: String?\nAn arbitrary string representing the current version of the firmware running on the device.\nvar hardwareVersion: String?\nAn arbitrary string representing the hardware version of the device.\nvar manufacturer: String?\nA string representing the device’s manufacturer.\nvar model: String?\nA string representing the device’s model.\nvar name: String?\nThe user-facing name for the device.\nvar softwareVersion: String?\nAn arbitrary string representing the version of the software running on the device."
  },
  {
    "title": "name | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkdevice/1615731-name",
    "html": "See Also\nAccessing Data About a Device\nvar udiDeviceIdentifier: String?\nThe device identifier portion of the US Food and Drug Administration’s Unique Device Identifier (UDI).\nvar firmwareVersion: String?\nAn arbitrary string representing the current version of the firmware running on the device.\nvar hardwareVersion: String?\nAn arbitrary string representing the hardware version of the device.\nvar localIdentifier: String?\nAn identifier that uniquely identifies the device object on the hardware running this code.\nvar manufacturer: String?\nA string representing the device’s manufacturer.\nvar model: String?\nA string representing the device’s model.\nvar softwareVersion: String?\nAn arbitrary string representing the version of the software running on the device."
  },
  {
    "title": "HKQueryAnchor | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkqueryanchor",
    "html": "Overview\n\nThe system returns HKQueryAnchor objects in both the anchored object query’s results handler and it’s update handler. Use the anchors to query for samples added or deleted after the result or update.\n\nTopics\nCreating Anchor Objects\ninit(fromValue: Int)\nReturns an anchor object from the provided anchor value.\nRelationships\nInherits From\nNSObject\nConforms To\nNSCopying\nNSSecureCoding"
  },
  {
    "title": "model | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkdevice/1615761-model",
    "html": "See Also\nAccessing Data About a Device\nvar udiDeviceIdentifier: String?\nThe device identifier portion of the US Food and Drug Administration’s Unique Device Identifier (UDI).\nvar firmwareVersion: String?\nAn arbitrary string representing the current version of the firmware running on the device.\nvar hardwareVersion: String?\nAn arbitrary string representing the hardware version of the device.\nvar localIdentifier: String?\nAn identifier that uniquely identifies the device object on the hardware running this code.\nvar manufacturer: String?\nA string representing the device’s manufacturer.\nvar name: String?\nThe user-facing name for the device.\nvar softwareVersion: String?\nAn arbitrary string representing the version of the software running on the device."
  },
  {
    "title": "init(predicate:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hksourcequerydescriptor/3916550-init",
    "html": "Parameters\npredicate\n\nA predicate that defines the set of data used to identify sources. For a list of convenience methods for building predicates, see HKQuery.\n\nSee Also\nCreating Source Query Descriptors\ntypealias HKSourceQueryDescriptor.Output\nThe type of data that the query returns."
  },
  {
    "title": "result(for:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkanchoredobjectquerydescriptor/3916306-result",
    "html": "Parameters\nhealthStore\n\nThe access point for HealthKit data.\n\nRelationships\nFrom Protocol\nHKAsyncQuery\nSee Also\nRunning Queries\nfunc results(for: HKHealthStore) -> HKAnchoredObjectQueryDescriptor<Sample>.Results\nInitiates a long-running query that returns its results using an asynchronous sequence.\nstruct HKAnchoredObjectQueryDescriptor.Result\nA set of results from an anchored object query.\nstruct HKAnchoredObjectQueryDescriptor.Results\nAn asynchronous sequence that emits updates from an anchored object query."
  },
  {
    "title": "HKAnchoredObjectQueryDescriptor.Sequence | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkanchoredobjectquerydescriptor/sequence",
    "html": "See Also\nCreating Query Descriptors\ntypealias HKAnchoredObjectQueryDescriptor.Output\nThe type of data that the anchored object query returns.\ninit(predicates: [HKSamplePredicate<Sample>], anchor: HKQueryAnchor?, limit: Int?)\nCreates an anchored object query descriptor."
  },
  {
    "title": "results(for:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkanchoredobjectquerydescriptor/3916307-results",
    "html": "Parameters\nhealthStore\n\nThe access point for HealthKit data.\n\nRelationships\nFrom Protocol\nHKAsyncSequenceQuery\nSee Also\nRunning Queries\nfunc result(for: HKHealthStore) -> HKAnchoredObjectQueryDescriptor<Sample>.Result\nRuns a one-shot query and asynchronously returns a snapshot of the current matching results.\nstruct HKAnchoredObjectQueryDescriptor.Result\nA set of results from an anchored object query.\nstruct HKAnchoredObjectQueryDescriptor.Results\nAn asynchronous sequence that emits updates from an anchored object query."
  },
  {
    "title": "HKAnchoredObjectQueryDescriptor.Output | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkanchoredobjectquerydescriptor/output",
    "html": "See Also\nCreating Query Descriptors\ntypealias HKAnchoredObjectQueryDescriptor.Sequence\nThe asynchronous sequence that the anchored object query returns.\ninit(predicates: [HKSamplePredicate<Sample>], anchor: HKQueryAnchor?, limit: Int?)\nCreates an anchored object query descriptor."
  },
  {
    "title": "Executing Source Queries | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hksourcequery/executing_source_queries",
    "html": "Overview\n\nSource queries return a list of apps and devices that have saved data to the HealthKit store. The query returns all sources for the specified sample type.\n\nCreate Source Queries\n\nYou create a source query by calling the init(sampleType:samplePredicate:completionHandler:) initializer. Start by creating the type object for the desired samples. The following example creates a type object for step counts.\n\nguard let stepCountType = HKObjectType.quantityType(forIdentifier: .stepCount) else {\n    // This should never fail when using a defined constant.\n    fatalError(\"*** Unable to get the step count type ***\")\n}\n\n\nThen use the type object to create the query. Source queries return a list of sources (apps and devices) that have saved queries matching the sample type. The callback handler should check for errors before processing the sources. It should also dispatch updates to the user interface back to the main thread.\n\nlet query = HKSourceQuery(sampleType: stepCountType, samplePredicate: nil) { (query, sourcesOrNil, errorOrNil) in\n    \n    guard let sources = sourcesOrNil else {\n        // Properly handle the error.\n        return\n    }\n    \n    for source in sources {\n        // Process sources here.\n    }\n    \n    DispatchQueue.main.async {\n        // Update the UI here.\n    }\n}\n\n\nRun the Query\n\nAfter the query is instantiated, you run it by calling the HealthKit store’s execute(_:) method.\n\nstore.execute(query)\n\n\nThis runs the query on an anonymous background queue. When the query is complete, it executes the results handler on the same background queue (but not necessarily the same thread).\n\nSee Also\nCreating Source Queries\ninit(sampleType: HKSampleType, samplePredicate: NSPredicate?, completionHandler: (HKSourceQuery, Set<HKSource>?, Error?) -> Void)\nInstantiates and returns a source query."
  },
  {
    "title": "anchor | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkanchoredobjectquerydescriptor/3916302-anchor",
    "html": "Discussion\n\nThe anchor object corresponds to the last object that the previous query returned. The current query returns only samples and deleted objects newer than the anchor. Pass nil to receive all the matching samples and recently deleted objects currently in the HealthKit store.\n\nSee Also\nAccessing Query Properties\nvar predicates: [HKSamplePredicate<Sample>]\nA predicate that limits the results that the query returns.\nvar limit: Int?\nThe maximum number of samples that the query returns."
  },
  {
    "title": "results(for:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkelectrocardiogramquerydescriptor/3916362-results",
    "html": "Parameters\nhealthStore\n\nThe access point for HealthKit data.\n\nRelationships\nFrom Protocol\nHKAsyncSequenceQuery\nSee Also\nRunning Queries\nstruct HKElectrocardiogramQueryDescriptor.Results\nAn asynchronous sequence that emits data about individual voltage measurements from an electrocardiogram sample."
  },
  {
    "title": "limit | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkanchoredobjectquerydescriptor/3916304-limit",
    "html": "Discussion\n\nIf the limit is nil, the system returns all matching samples in the HealthKit store.\n\nSee Also\nAccessing Query Properties\nvar predicates: [HKSamplePredicate<Sample>]\nA predicate that limits the results that the query returns.\nvar anchor: HKQueryAnchor?\nAn anchor that a previous anchored object query returned."
  },
  {
    "title": "HKElectrocardiogramQueryDescriptor.Results | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkelectrocardiogramquerydescriptor/results",
    "html": "Topics\nCreating an Iterator\nfunc makeAsyncIterator() -> HKElectrocardiogramQueryDescriptor.Results.Iterator\nCreates the asynchronous iterator that produces results from this asynchronous sequence.\nstruct HKElectrocardiogramQueryDescriptor.Results.Iterator\nAn iterator for accessing individual voltage measurements from the series.\ntypealias HKElectrocardiogramQueryDescriptor.Results.AsyncIterator\nAn iterator for accessing individual voltage measurements from an electrocardiogram sample.\ntypealias HKElectrocardiogramQueryDescriptor.Results.Element\nA structure that represents a single voltage measurement.\nFinding Elements\nfunc contains(HKElectrocardiogram.VoltageMeasurement) -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains the given element.\nfunc contains(where: (HKElectrocardiogram.VoltageMeasurement) -> Bool) -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains an element that satisfies the given predicate.\nfunc allSatisfy((HKElectrocardiogram.VoltageMeasurement) -> Bool) -> Bool\nReturns a Boolean value that indicates whether all elements produced by the asynchronous sequence satisfy the given predicate.\nfunc first(where: (HKElectrocardiogram.VoltageMeasurement) -> Bool) -> HKElectrocardiogram.VoltageMeasurement?\nReturns the first element of the sequence that satisfies the given predicate.\nfunc max(by: (HKElectrocardiogram.VoltageMeasurement, HKElectrocardiogram.VoltageMeasurement) -> Bool) -> HKElectrocardiogram.VoltageMeasurement?\nReturns the maximum element in the asynchronous sequence, using the given predicate as the comparison between elements.\nfunc min(by: (HKElectrocardiogram.VoltageMeasurement, HKElectrocardiogram.VoltageMeasurement) -> Bool) -> HKElectrocardiogram.VoltageMeasurement?\nReturns the minimum element in the asynchronous sequence, using the given predicate as the comparison between elements.\nSelecting Elements\nfunc prefix(Int) -> AsyncPrefixSequence<HKElectrocardiogramQueryDescriptor.Results>\nReturns an asynchronous sequence, up to the specified maximum length, containing the initial elements of the base asynchronous sequence.\nfunc prefix(while: (HKElectrocardiogram.VoltageMeasurement) -> Bool) -> AsyncPrefixWhileSequence<HKElectrocardiogramQueryDescriptor.Results>\nReturns an asynchronous sequence, containing the initial, consecutive elements of the base sequence that satisfy the given predicate.\nExcluding Elements\nfunc drop(while: (HKElectrocardiogram.VoltageMeasurement) -> Bool) -> AsyncDropWhileSequence<HKElectrocardiogramQueryDescriptor.Results>\nOmits elements from the base asynchronous sequence until a given closure returns false, after which it passes through all remaining elements.\nfunc dropFirst(Int) -> AsyncDropFirstSequence<HKElectrocardiogramQueryDescriptor.Results>\nOmits a specified number of elements from the base asynchronous sequence, then passes through all remaining elements.\nfunc filter((HKElectrocardiogram.VoltageMeasurement) -> Bool) -> AsyncFilterSequence<HKElectrocardiogramQueryDescriptor.Results>\nCreates an asynchronous sequence that contains, in order, the elements of the base sequence that satisfy the given predicate.\nTransforming a Series\nfunc map<Transformed>((HKElectrocardiogram.VoltageMeasurement) -> Transformed) -> AsyncMapSequence<HKElectrocardiogramQueryDescriptor.Results, Transformed>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements.\nfunc map<Transformed>((HKElectrocardiogram.VoltageMeasurement) -> Transformed) -> AsyncThrowingMapSequence<HKElectrocardiogramQueryDescriptor.Results, Transformed>\nCreates an asynchronous sequence that maps the given error-throwing closure over the asynchronous sequence’s elements.\nfunc reduce<Result>(Result, (Result, HKElectrocardiogram.VoltageMeasurement) -> Result) -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure.\nfunc reduce<Result>(into: Result, (inout Result, HKElectrocardiogram.VoltageMeasurement) -> Void) -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure, given a mutable initial value.\nfunc compactMap<ElementOfResult>((HKElectrocardiogram.VoltageMeasurement) -> ElementOfResult?) -> AsyncCompactMapSequence<HKElectrocardiogramQueryDescriptor.Results, ElementOfResult>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements, omitting results that don’t return a value.\nfunc compactMap<ElementOfResult>((HKElectrocardiogram.VoltageMeasurement) -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<HKElectrocardiogramQueryDescriptor.Results, ElementOfResult>\nCreates an asynchronous sequence that maps an error-throwing closure over the base sequence’s elements, omitting results that don’t return a value.\nfunc flatMap<SegmentOfResult>((HKElectrocardiogram.VoltageMeasurement) -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<HKElectrocardiogramQueryDescriptor.Results, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given error-throwing transformation with each element of this sequence.\nfunc flatMap<SegmentOfResult>((HKElectrocardiogram.VoltageMeasurement) -> SegmentOfResult) -> AsyncFlatMapSequence<HKElectrocardiogramQueryDescriptor.Results, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given transformation with each element of this sequence.\nRelationships\nConforms To\nAsyncSequence\nSee Also\nRunning Queries\nfunc results(for: HKHealthStore) -> HKElectrocardiogramQueryDescriptor.Results\nRuns a one-shot query that returns an asynchronous sequence of data representing individual heartbeats."
  },
  {
    "title": "results(for:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquantityseriessamplequerydescriptor/3916522-results",
    "html": "Parameters\nhealthStore\n\nThe access point for HealthKit data.\n\nRelationships\nFrom Protocol\nHKAsyncSequenceQuery\nSee Also\nRunning Queries\nstruct HKQuantitySeriesSampleQueryDescriptor.Results\nAn asynchronous sequence that emits data from the quantity series query.\nstruct HKQuantitySeriesSampleQueryDescriptor.Result\nA set of results from a quantity series sample descriptor."
  },
  {
    "title": "HKElectrocardiogramQueryDescriptor.Sequence | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkelectrocardiogramquerydescriptor/sequence",
    "html": "See Also\nCreating Electrocardiogram Query Descriptors\ninit(HKElectrocardiogram)\nCreates a query descriptor that reads voltage measurements from the provided electrocardiogram sample."
  },
  {
    "title": "init(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkelectrocardiogramquerydescriptor/3916361-init",
    "html": "Parameters\nelectrocardiogram\n\nAn electrocardiogram sample that contains voltage measurements.\n\nSee Also\nCreating Electrocardiogram Query Descriptors\ntypealias HKElectrocardiogramQueryDescriptor.Sequence\nThe type of asynchronous sequence that the query returns."
  },
  {
    "title": "init(sample:quantityHandler:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquantityseriessamplequery/2990400-init",
    "html": "Deprecated\n\nUse init(quantityType:predicate:quantityHandler:) instead."
  },
  {
    "title": "init(predicate:options:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquantityseriessamplequerydescriptor/3916519-init",
    "html": "Parameters\npredicate\n\nA predicate that defines the set of series samples that the query returns. For a list of convenience methods for building predicates, see HKQuery.\n\noptions\n\nA set of options for the query. For a list of possible values, see HKQuantitySeriesSampleQueryDescriptor.Options.\n\nSee Also\nCreating Series Query Descriptors\ntypealias HKQuantitySeriesSampleQueryDescriptor.Sequence\nThe type of asynchronous sequence that the query returns.\nstruct HKQuantitySeriesSampleQueryDescriptor.Options\nOptions used when querying series data."
  },
  {
    "title": "orderByQuantitySampleStartDate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquantityseriessamplequery/3113772-orderbyquantitysamplestartdate",
    "html": "Discussion\n\nBy default the query returns all the quantities in ascending order based on their start date. If you set this property to true, HealthKit first sorts the matching HKQuantitySample objects by their startDate parameter. Then, for each sample, it returns all the quantity objects in ascending order. If the sample objects overlap, then the quantities may not appear in ascending order when switching from one sample to the next.\n\nSee Also\nCreating a Series Query\ninit(quantityType: HKQuantityType, predicate: NSPredicate?, quantityHandler: (HKQuantitySeriesSampleQuery, HKQuantity?, DateInterval?, HKQuantitySample?, Bool, Error?) -> Void)\nCreates a new query for a series of the specified quantity type.\nvar includeSample: Bool\nA Boolean value that determines whether the query should return the series sample."
  },
  {
    "title": "HKQuantitySeriesSampleQueryDescriptor.Sequence | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquantityseriessamplequerydescriptor/sequence",
    "html": "See Also\nCreating Series Query Descriptors\ninit(predicate: HKSamplePredicate<HKQuantitySample>, options: HKQuantitySeriesSampleQueryDescriptor.Options)\nCreates a quantity series query descriptor.\nstruct HKQuantitySeriesSampleQueryDescriptor.Options\nOptions used when querying series data."
  },
  {
    "title": "init(route:dateInterval:dataHandler:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkoutroutequery/3951082-init",
    "html": "Parameters\nworkoutRoute\n\nThe workout route that contains the location data.\n\ndateInterval\n\nThe date interval for the requested location data. If the date interval doesn’t overlap with the specified workout, this query returns an empty array.\n\nIf the date interval only partially overlaps the specified workout, the query only returns location data from the overlapping time period.\n\ndataHandler\n\nA block that the system calls each time it returns a batch of location data. The system may call this block more than once.\n\nThe system passes this block the following parameters:\n\nquery\n\nThe query that returns the location data.\n\nrouteData\n\nA batch of location data, or nil if an error has occurred.\n\ndone\n\nA Boolean value that indicates whether the query is complete. It is true if all the location data has been returned. If one or more additional batches of data are still pending, it is false.\n\nerror\n\nAn object that describes the error, if an error has occurred; otherwise, nil.\n\nSee Also\nCreating route queries\ninit(route: HKWorkoutRoute, dataHandler: (HKWorkoutRouteQuery, [CLLocation]?, Bool, Error?) -> Void)\nCreates a new query to access the location data associated with a workout route."
  },
  {
    "title": "includeSample | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquantityseriessamplequery/3113770-includesample",
    "html": "Discussion\n\nBy default, a quantity series sample only returns the individual quantity objects that make up the series—not the HKQuantitySample object that represents the entire series. Set this parameter to true to have the query also return the quantity sample object for the series.\n\nNote\n\nThis may introduce a performance cost for the query.\n\nSee Also\nCreating a Series Query\ninit(quantityType: HKQuantityType, predicate: NSPredicate?, quantityHandler: (HKQuantitySeriesSampleQuery, HKQuantity?, DateInterval?, HKQuantitySample?, Bool, Error?) -> Void)\nCreates a new query for a series of the specified quantity type.\nvar orderByQuantitySampleStartDate: Bool\nA Boolean value that determines whether the query groups the results based on the quantity sample’s start date."
  },
  {
    "title": "init(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkoutroutequerydescriptor/3916671-init",
    "html": "Parameters\nworkoutRoute\n\nA workout route sample that contains locations.\n\nSee Also\nCreating workout route query descriptors\ntypealias HKWorkoutRouteQueryDescriptor.Sequence\nThe type of asynchronous sequence that the query returns."
  },
  {
    "title": "init(quantityType:predicate:quantityHandler:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquantityseriessamplequery/3113771-init",
    "html": "Parameters\nquantityType\n\nThe quantity type.\n\npredicate\n\nA predicate used to filter the results. To query for all the quantity objects for a specific HKQuantitySample, see predicateForObject(with:).\n\nquantityHandler\n\nA handler called by the query with the results. The query calls the block multiple times until either the done parameter is true, or you call the HealthKit store’s stop(_:) method. The handler takes the following arguments:\n\nquery\n\nThe query that generated the results.\n\nquantity\n\nThe next quantity in the series.\n\ndateInterval\n\nThe quantity’s date interval.\n\nquantitySample\n\nThe quantity sample that owns the series. This parameter is set to nil unless includeSample is true.\n\ndone\n\nA Boolean value that indicates whether you have reached the end of the series.\n\nerror\n\nIf an error occurs, this parameter describes the error. Otherwise, it is set to nil.\n\nDiscussion\n\nHealthKit returns quantities in ascending order, based on their start date.\n\nSee Also\nCreating a Series Query\nvar includeSample: Bool\nA Boolean value that determines whether the query should return the series sample.\nvar orderByQuantitySampleStartDate: Bool\nA Boolean value that determines whether the query groups the results based on the quantity sample’s start date."
  },
  {
    "title": "HKHeartbeatSeriesQueryDescriptor.Results | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkheartbeatseriesquerydescriptor/results",
    "html": "Topics\nCreating an Iterator\nfunc makeAsyncIterator() -> HKHeartbeatSeriesQueryDescriptor.Results.Iterator\nCreates the asynchronous iterator that produces results from this asynchronous sequence.\nstruct HKHeartbeatSeriesQueryDescriptor.Results.Iterator\nAn iterator for accessing individual data entries from the series.\ntypealias HKHeartbeatSeriesQueryDescriptor.Results.AsyncIterator\nAn iterator for accessing data about individual heartbeats from a heartbeat series sample.\ntypealias HKHeartbeatSeriesQueryDescriptor.Results.Element\nA structure that represents a single heartbeat from the series.\nFinding Elements\nfunc contains(HKHeartbeatSeriesQueryDescriptor.Heartbeat) -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains the given element.\nfunc contains(where: (HKHeartbeatSeriesQueryDescriptor.Heartbeat) -> Bool) -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains an element that satisfies the given predicate.\nfunc allSatisfy((HKHeartbeatSeriesQueryDescriptor.Heartbeat) -> Bool) -> Bool\nReturns a Boolean value that indicates whether all elements produced by the asynchronous sequence satisfy the given predicate.\nfunc first(where: (HKHeartbeatSeriesQueryDescriptor.Heartbeat) -> Bool) -> HKHeartbeatSeriesQueryDescriptor.Heartbeat?\nReturns the first element of the sequence that satisfies the given predicate.\nfunc max(by: (HKHeartbeatSeriesQueryDescriptor.Heartbeat, HKHeartbeatSeriesQueryDescriptor.Heartbeat) -> Bool) -> HKHeartbeatSeriesQueryDescriptor.Heartbeat?\nReturns the maximum element in the asynchronous sequence, using the given predicate as the comparison between elements.\nfunc min(by: (HKHeartbeatSeriesQueryDescriptor.Heartbeat, HKHeartbeatSeriesQueryDescriptor.Heartbeat) -> Bool) -> HKHeartbeatSeriesQueryDescriptor.Heartbeat?\nReturns the minimum element in the asynchronous sequence, using the given predicate as the comparison between elements.\nSelecting Elements\nfunc prefix(Int) -> AsyncPrefixSequence<HKHeartbeatSeriesQueryDescriptor.Results>\nReturns an asynchronous sequence, up to the specified maximum length, containing the initial elements of the base asynchronous sequence.\nfunc prefix(while: (HKHeartbeatSeriesQueryDescriptor.Heartbeat) -> Bool) -> AsyncPrefixWhileSequence<HKHeartbeatSeriesQueryDescriptor.Results>\nReturns an asynchronous sequence, containing the initial, consecutive elements of the base sequence that satisfy the given predicate.\nExcluding Elements\nfunc drop(while: (HKHeartbeatSeriesQueryDescriptor.Heartbeat) -> Bool) -> AsyncDropWhileSequence<HKHeartbeatSeriesQueryDescriptor.Results>\nOmits elements from the base asynchronous sequence until a given closure returns false, after which it passes through all remaining elements.\nfunc dropFirst(Int) -> AsyncDropFirstSequence<HKHeartbeatSeriesQueryDescriptor.Results>\nOmits a specified number of elements from the base asynchronous sequence, then passes through all remaining elements.\nfunc filter((HKHeartbeatSeriesQueryDescriptor.Heartbeat) -> Bool) -> AsyncFilterSequence<HKHeartbeatSeriesQueryDescriptor.Results>\nCreates an asynchronous sequence that contains, in order, the elements of the base sequence that satisfy the given predicate.\nTransforming a Series\nfunc map<Transformed>((HKHeartbeatSeriesQueryDescriptor.Heartbeat) -> Transformed) -> AsyncMapSequence<HKHeartbeatSeriesQueryDescriptor.Results, Transformed>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements.\nfunc map<Transformed>((HKHeartbeatSeriesQueryDescriptor.Heartbeat) -> Transformed) -> AsyncThrowingMapSequence<HKHeartbeatSeriesQueryDescriptor.Results, Transformed>\nCreates an asynchronous sequence that maps the given error-throwing closure over the asynchronous sequence’s elements.\nfunc reduce<Result>(Result, (Result, HKHeartbeatSeriesQueryDescriptor.Heartbeat) -> Result) -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure.\nfunc reduce<Result>(into: Result, (inout Result, HKHeartbeatSeriesQueryDescriptor.Heartbeat) -> Void) -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure, given a mutable initial value.\nfunc compactMap<ElementOfResult>((HKHeartbeatSeriesQueryDescriptor.Heartbeat) -> ElementOfResult?) -> AsyncCompactMapSequence<HKHeartbeatSeriesQueryDescriptor.Results, ElementOfResult>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements, omitting results that don’t return a value.\nfunc compactMap<ElementOfResult>((HKHeartbeatSeriesQueryDescriptor.Heartbeat) -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<HKHeartbeatSeriesQueryDescriptor.Results, ElementOfResult>\nCreates an asynchronous sequence that maps an error-throwing closure over the base sequence’s elements, omitting results that don’t return a value.\nfunc flatMap<SegmentOfResult>((HKHeartbeatSeriesQueryDescriptor.Heartbeat) -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<HKHeartbeatSeriesQueryDescriptor.Results, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given error-throwing transformation with each element of this sequence.\nfunc flatMap<SegmentOfResult>((HKHeartbeatSeriesQueryDescriptor.Heartbeat) -> SegmentOfResult) -> AsyncFlatMapSequence<HKHeartbeatSeriesQueryDescriptor.Results, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given transformation with each element of this sequence.\nRelationships\nConforms To\nAsyncSequence\nSee Also\nRunning Queries\nfunc results(for: HKHealthStore) -> HKHeartbeatSeriesQueryDescriptor.Results\nRuns a one-shot query that returns an asynchronous sequence of data representing individual heartbeats.\nstruct HKHeartbeatSeriesQueryDescriptor.Heartbeat\nData about an individual heartbeat."
  },
  {
    "title": "HKPredicateKeyPathMostRecentStartDate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkpredicatekeypathmostrecentstartdate",
    "html": "Discussion\n\nUse this constant whenever you want to include a sample’s quantity in a predicate format string. Add a %K placeholder to the format string, and then pass this constant as an argument.\n\nSee Also\nSpecifying Predicate Key Paths\nlet HKPredicateKeyPathMin: String\nThe key path for the sample’s minimum quantity.\nlet HKPredicateKeyPathAverage: String\nThe key path for the sample’s average quantity.\nlet HKPredicateKeyPathMax: String\nThe key path for the sample’s maximum quantity.\nlet HKPredicateKeyPathMostRecent: String\nThe key path for the sample’s most recent quantity.\nlet HKPredicateKeyPathMostRecentEndDate: String\nThe key path for the end date of the sample’s most recent quantity.\nlet HKPredicateKeyPathMostRecentDuration: String\nA key path for the duration of the sample’s most recent quantity."
  },
  {
    "title": "HKPredicateKeyPathMax | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkpredicatekeypathmax",
    "html": "Discussion\n\nUse this constant whenever you want to include a sample’s quantity in a predicate format string. Add a %K placeholder to the format string, and then pass this constant as an argument.\n\nSee Also\nSpecifying Predicate Key Paths\nlet HKPredicateKeyPathMin: String\nThe key path for the sample’s minimum quantity.\nlet HKPredicateKeyPathAverage: String\nThe key path for the sample’s average quantity.\nlet HKPredicateKeyPathMostRecent: String\nThe key path for the sample’s most recent quantity.\nlet HKPredicateKeyPathMostRecentStartDate: String\nThe key path for the start date of the sample’s most recent quantity.\nlet HKPredicateKeyPathMostRecentEndDate: String\nThe key path for the end date of the sample’s most recent quantity.\nlet HKPredicateKeyPathMostRecentDuration: String\nA key path for the duration of the sample’s most recent quantity."
  },
  {
    "title": "HKVisionEye | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkvisioneye",
    "html": "Topics\nEyes\ncase left\nThe left eye.\ncase right\nThe right eye.\nRelationships\nConforms To\nSendable\nSee Also\nAccessing lens specification data\nvar eye: HKVisionEye\nA value indicating which eye the correction applies to.\nvar amount: HKQuantity\nThe strength of the correction.\nvar angle: HKQuantity\nThe orientation of the adjustment.\nvar horizontalAmount: HKQuantity\nThe strength of the horizontal correction.\nvar horizontalBase: HKPrismBase\nThe orientation of the horizontal portion of the correction.\nvar verticalAmount: HKQuantity\nThe strength of the vertical correction.\nvar verticalBase: HKPrismBase\nThe orientation of the vertical portion of the correction.\nenum HKPrismBase\nThe orientation of the prism correction, represented by the location of the prism’s base (the thickest part of the prism)."
  },
  {
    "title": "HKPredicateKeyPathAverage | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkpredicatekeypathaverage",
    "html": "Discussion\n\nUse this constant whenever you want to include a sample’s quantity in a predicate format string. Add a %K placeholder to the format string, and then pass this constant as an argument.\n\nSee Also\nSpecifying Predicate Key Paths\nlet HKPredicateKeyPathMin: String\nThe key path for the sample’s minimum quantity.\nlet HKPredicateKeyPathMax: String\nThe key path for the sample’s maximum quantity.\nlet HKPredicateKeyPathMostRecent: String\nThe key path for the sample’s most recent quantity.\nlet HKPredicateKeyPathMostRecentStartDate: String\nThe key path for the start date of the sample’s most recent quantity.\nlet HKPredicateKeyPathMostRecentEndDate: String\nThe key path for the end date of the sample’s most recent quantity.\nlet HKPredicateKeyPathMostRecentDuration: String\nA key path for the duration of the sample’s most recent quantity."
  },
  {
    "title": "HKPredicateKeyPathMin | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkpredicatekeypathmin",
    "html": "Discussion\n\nUse this constant whenever you want to include a sample’s quantity in a predicate format string. Add a %K placeholder to the format string, and then pass this constant as an argument.\n\nSee Also\nSpecifying Predicate Key Paths\nlet HKPredicateKeyPathAverage: String\nThe key path for the sample’s average quantity.\nlet HKPredicateKeyPathMax: String\nThe key path for the sample’s maximum quantity.\nlet HKPredicateKeyPathMostRecent: String\nThe key path for the sample’s most recent quantity.\nlet HKPredicateKeyPathMostRecentStartDate: String\nThe key path for the start date of the sample’s most recent quantity.\nlet HKPredicateKeyPathMostRecentEndDate: String\nThe key path for the end date of the sample’s most recent quantity.\nlet HKPredicateKeyPathMostRecentDuration: String\nA key path for the duration of the sample’s most recent quantity."
  },
  {
    "title": "mostRecentQuantity | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkdiscretequantitysample/3131020-mostrecentquantity",
    "html": "Discussion\n\nThe sample sorts its contained quantities based on the startDate property for the quantity’s date interval.\n\nSee Also\nAccessing Calculated Values\nvar averageQuantity: HKQuantity\nThe average of all quantities contained by the sample.\nvar maximumQuantity: HKQuantity\nThe maximum quantity contained by the sample.\nvar minimumQuantity: HKQuantity\nThe minimum value contained by the sample.\nvar mostRecentQuantityDateInterval: DateInterval\nThe date interval for the most recent quantity contained by the sample."
  },
  {
    "title": "minimumQuantity | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkdiscretequantitysample/3172587-minimumquantity",
    "html": "See Also\nAccessing Calculated Values\nvar averageQuantity: HKQuantity\nThe average of all quantities contained by the sample.\nvar maximumQuantity: HKQuantity\nThe maximum quantity contained by the sample.\nvar mostRecentQuantity: HKQuantity\nThe most recent quantity contained by the sample.\nvar mostRecentQuantityDateInterval: DateInterval\nThe date interval for the most recent quantity contained by the sample."
  },
  {
    "title": "maximumQuantity | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkdiscretequantitysample/3172586-maximumquantity",
    "html": "See Also\nAccessing Calculated Values\nvar averageQuantity: HKQuantity\nThe average of all quantities contained by the sample.\nvar minimumQuantity: HKQuantity\nThe minimum value contained by the sample.\nvar mostRecentQuantity: HKQuantity\nThe most recent quantity contained by the sample.\nvar mostRecentQuantityDateInterval: DateInterval\nThe date interval for the most recent quantity contained by the sample."
  },
  {
    "title": "init(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkheartbeatseriesquerydescriptor/3916416-init",
    "html": "Parameters\nsample\n\nThe sample containing the heartbeat series.\n\nSee Also\nCreating Heartbeat Series Query Descriptors\ntypealias HKHeartbeatSeriesQueryDescriptor.Sequence\nThe type of asynchronous sequence that the query returns."
  },
  {
    "title": "HKHeartbeatSeriesQueryDescriptor.Sequence | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkheartbeatseriesquerydescriptor/sequence",
    "html": "See Also\nCreating Heartbeat Series Query Descriptors\ninit(HKHeartbeatSeriesSample)\nCreates a heartbeat series query descriptor."
  },
  {
    "title": "init(queryDescriptors:limit:sortDescriptors:resultsHandler:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hksamplequery/3747011-init",
    "html": "Parameters\nqueryDescriptors\n\nAn array of descriptors that specify the types of samples that the query returns.\n\nlimit\n\nThe maximum number of samples that the query returns. If you want to return all matching samples, use HKObjectQueryNoLimit.\n\nsortDescriptors\n\nAn array of sort descriptors that specify the order of the results that the query returns.\n\nNote\n\nHealthKit defines a number of sort identifiers (for example, HKSampleSortIdentifierStartDate and HKWorkoutSortIdentifierDuration). Use the sort descriptors you create with these identifiers only in queries. You can’t use them to perform an in-memory sort of an array of samples.\n\nresultsHandler\n\nA block that the HealthKit store calls after it finishes executing the query.\n\nThis block takes the following parameters:\n\nquery\n\nA reference to the query that called this block.\n\nresults\n\nAn array containing the samples that the query found, or nil if an error occurs.\n\nerror\n\nIf an error occurs, an object describing the error; otherwise, it’s nil.\n\nDiscussion\n\nUse this initializer to create a sample query for data that matches any of the HKQueryDescriptor objects. Each descriptor can specify a different data type. The system sorts the results by the provided sort descriptors.\n\nAfter instantiating the query, call the HKHealthStore class’s execute(_:) method to run this query. Queries run on an anonymous background queue. As soon as the query is complete, the system executes the results handler on the background queue, returning samples that match any of the descriptors. You typically dispatch these results to the main queue to update the user interface.\n\nFor example, the following code returns all the step count and push count samples sorted based on their start dates:\n\n// Create the data types.\nlet stepCountType = HKQuantityType(.stepCount)\nlet pushCountType = HKQuantityType(.pushCount)\n\n\n// Specify the desired sample types.\nlet stepDescriptor = HKQueryDescriptor(sampleType: stepCountType, predicate: nil)\nlet pushDescriptor = HKQueryDescriptor(sampleType: pushCountType, predicate: nil)\n\n\n// Specify the sort descriptors.\nlet startDateDescriptor = NSSortDescriptor(key: HKSampleSortIdentifierStartDate,\n                                           ascending: true)\n\n\n// Create the query.\nlet query = HKSampleQuery(queryDescriptors: [stepDescriptor, pushDescriptor],\n                           limit: HKObjectQueryNoLimit,\n                           sortDescriptors: [startDateDescriptor])  { (query, samples, error) in\n    \n    if let error = error {\n        // Handle errors here.\n    }\n    \n    DispatchQueue.main.async {\n        // Process the samples here.\n    }\n}\n\n\n// Run the query.\nstore.execute(query)\n\n\nSee Also\nCreating Sample Queries\nExecuting Sample Queries\nCreate, run, and sort sample queries.\ninit(sampleType: HKSampleType, predicate: NSPredicate?, limit: Int, sortDescriptors: [NSSortDescriptor]?, resultsHandler: (HKSampleQuery, [HKSample]?, Error?) -> Void)\nInstantiates and returns a sample query.\ninit(queryDescriptors: [HKQueryDescriptor], limit: Int, resultsHandler: (HKSampleQuery, [HKSample]?, Error?) -> Void)\nCreates a query for samples that match any of the descriptors you provided.\nlet HKObjectQueryNoLimit: Int\nA value indicating that the query returns all the matching samples in the HealthKit store.\nHealthKit sort descriptors\nIdentifiers for sorting results."
  },
  {
    "title": "limit | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hksamplequery/1615758-limit",
    "html": "Discussion\n\nThis property's value sets the maximum number of samples that the query returns upon completion.\n\nIf you are specifically interested in retrieving only new samples (samples added since the last query), consider using an HKAnchoredObjectQuery query instead.\n\nSee Also\nGetting Property Data\nvar sortDescriptors: [NSSortDescriptor]?\nThe sort descriptors that specify the order of the results returned by this query."
  },
  {
    "title": "name | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkattachment/3951051-name",
    "html": "See Also\nAccessing attachment data\nvar identifier: UUID\nThe universally unique identifier for the attached file.\nvar contentType: UTType\nThe type of data stored in the attached file.\nvar size: Int\nThe attachment’s size (in bytes).\nvar creationDate: Date\nThe attachment’s creation date.\nvar metadata: [String : Any]?\nAdditional data associated with the attachment in the HealthKit store.\nstruct HKAttachment.AsyncBytes\nAn asynchronous sequence that returns the attached file as a series of bytes."
  },
  {
    "title": "contentType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkattachment/3974092-contenttype",
    "html": "See Also\nAccessing attachment data\nvar name: String\nThe name of the attached file.\nvar identifier: UUID\nThe universally unique identifier for the attached file.\nvar size: Int\nThe attachment’s size (in bytes).\nvar creationDate: Date\nThe attachment’s creation date.\nvar metadata: [String : Any]?\nAdditional data associated with the attachment in the HealthKit store.\nstruct HKAttachment.AsyncBytes\nAn asynchronous sequence that returns the attached file as a series of bytes."
  },
  {
    "title": "identifier | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkattachment/3951049-identifier",
    "html": "See Also\nAccessing attachment data\nvar name: String\nThe name of the attached file.\nvar contentType: UTType\nThe type of data stored in the attached file.\nvar size: Int\nThe attachment’s size (in bytes).\nvar creationDate: Date\nThe attachment’s creation date.\nvar metadata: [String : Any]?\nAdditional data associated with the attachment in the HealthKit store.\nstruct HKAttachment.AsyncBytes\nAn asynchronous sequence that returns the attached file as a series of bytes."
  },
  {
    "title": "size | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkattachment/3951052-size",
    "html": "See Also\nAccessing attachment data\nvar name: String\nThe name of the attached file.\nvar identifier: UUID\nThe universally unique identifier for the attached file.\nvar contentType: UTType\nThe type of data stored in the attached file.\nvar creationDate: Date\nThe attachment’s creation date.\nvar metadata: [String : Any]?\nAdditional data associated with the attachment in the HealthKit store.\nstruct HKAttachment.AsyncBytes\nAn asynchronous sequence that returns the attached file as a series of bytes."
  },
  {
    "title": "init(sampleType:predicate:limit:sortDescriptors:resultsHandler:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hksamplequery/1615055-init",
    "html": "Parameters\nsampleType\n\nThe type of sample to search for. This object can be an instance of the HKCategoryType, HKCorrelationType, HKQuantityType, or HKWorkoutType class.\n\npredicate\n\nA predicate that limits the results returned by the query. Pass nil to receive all the samples of the specified type.\n\nlimit\n\nThe maximum number of samples returned by the query. If you want to return all matching samples, use HKObjectQueryNoLimit.\n\nsortDescriptors\n\nAn array of sort descriptors that specify the order of the results returned by this query. Pass nil if you don’t need the results in a specific order.\n\nNote\n\nHealthKit defines a number of sort identifiers (for example, HKSampleSortIdentifierStartDate and HKWorkoutSortIdentifierDuration). Use the sort descriptors you create with these identifiers only in queries. You cannot use them to perform an in-memory sort of an array of samples.\n\nresultsHandler\n\nA block that is called when the query finishes executing.\n\nThis block takes the following parameters:\n\nquery\n\nA reference to the query that called this block.\n\nresults\n\nAn array containing the samples found by the query, or nil if an error occurs.\n\nerror\n\nIf an error occurs, this parameter contains an object describing the error. Otherwise, its value is nil.\n\nReturn Value\n\nA newly initialized sample query object.\n\nDiscussion\n\nAfter instantiating the query, call the HKHealthStore class’s execute(_:) method to run this query. Queries run on an anonymous background queue. As soon as the query is complete, the results handler is executed on the background queue. You typically dispatch these results to the main queue to update the user interface.\n\nSee Also\nCreating Sample Queries\nExecuting Sample Queries\nCreate, run, and sort sample queries.\ninit(queryDescriptors: [HKQueryDescriptor], limit: Int, resultsHandler: (HKSampleQuery, [HKSample]?, Error?) -> Void)\nCreates a query for samples that match any of the descriptors you provided.\ninit(queryDescriptors: [HKQueryDescriptor], limit: Int, sortDescriptors: [NSSortDescriptor], resultsHandler: (HKSampleQuery, [HKSample]?, Error?) -> Void)\nCreates a query for samples that match any of the query descriptors you provided, sorted by the sort descriptors you provided.\nlet HKObjectQueryNoLimit: Int\nA value indicating that the query returns all the matching samples in the HealthKit store.\nHealthKit sort descriptors\nIdentifiers for sorting results."
  },
  {
    "title": "init(queryDescriptors:limit:resultsHandler:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hksamplequery/3747010-init",
    "html": "Parameters\nqueryDescriptors\n\nAn array of descriptors that specify the types of samples that the query returns.\n\nlimit\n\nThe maximum number of samples that the query return. If you want to return all matching samples, use HKObjectQueryNoLimit.\n\nresultsHandler\n\nA block that the HealthKit store calls after it finishes executing the query.\n\nThis block takes the following parameters:\n\nquery\n\nA reference to the query that called this block.\n\nresults\n\nAn array containing the samples the query found, or nil if an error occurs.\n\nerror\n\nIf an error occurs, an object describing the error; otherwise, it’s nil.\n\nDiscussion\n\nUse this initializer to create a sample query for data that matches any of the HKQueryDescriptor objects. Each descriptor can specify a different data type.\n\nAfter instantiating the query, call the HKHealthStore class’s execute(_:) method to run this query. Queries run on an anonymous background queue. As soon as the query is complete, the system executes the results handler on the background queue, returning samples that match any of the descriptors. You typically dispatch these results to the main queue to update the user interface.\n\nFor example, the following code returns all the step count and push count samples:\n\n// Create the data types.\nlet stepCountType = HKQuantityType(.stepCount)\nlet pushCountType = HKQuantityType(.pushCount)\n\n\n// Specify the desired sample types.\nlet stepDescriptor = HKQueryDescriptor(sampleType: stepCountType, predicate: nil)\nlet pushDescriptor = HKQueryDescriptor(sampleType: pushCountType, predicate: nil)\n\n\n// Create the query.\nlet query = HKSampleQuery(queryDescriptors: [stepDescriptor, pushDescriptor],\n                          limit: HKObjectQueryNoLimit) { (query, samples, error) in\n    \n    if let error = error {\n        // Handle errors here.\n    }\n    \n    \n    DispatchQueue.main.async {\n        // Process the samples here.\n    }\n}\n\n\n// Run the query.\nstore.execute(query)\n\n\nSee Also\nCreating Sample Queries\nExecuting Sample Queries\nCreate, run, and sort sample queries.\ninit(sampleType: HKSampleType, predicate: NSPredicate?, limit: Int, sortDescriptors: [NSSortDescriptor]?, resultsHandler: (HKSampleQuery, [HKSample]?, Error?) -> Void)\nInstantiates and returns a sample query.\ninit(queryDescriptors: [HKQueryDescriptor], limit: Int, sortDescriptors: [NSSortDescriptor], resultsHandler: (HKSampleQuery, [HKSample]?, Error?) -> Void)\nCreates a query for samples that match any of the query descriptors you provided, sorted by the sort descriptors you provided.\nlet HKObjectQueryNoLimit: Int\nA value indicating that the query returns all the matching samples in the HealthKit store.\nHealthKit sort descriptors\nIdentifiers for sorting results."
  },
  {
    "title": "Executing Sample Queries | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hksamplequery/executing_sample_queries",
    "html": "Overview\n\nUse sample queries to read samples from the HealthKit store. Each query returns a single type of sample, such as step count or heart rate. You can filter results further with a predicate, or sort the results using sort descriptors.\n\nCreate and Run the Query\n\nYou create a sample query by calling the init(sampleType:predicate:limit:sortDescriptors:resultsHandler:) initializer. Start by creating the sample type.\n\nguard let sampleType = HKSampleType.quantityType(forIdentifier: HKQuantityTypeIdentifier.dietaryEnergyConsumed) else {\n    fatalError(\"*** This method should never fail ***\")\n}\n\n\nThen create the query itself. This query returns all dietary energy consumed samples. Its results handler checks for any errors before processing the samples, then dispatches updates to the user interface to the main queue.\n\nlet query = HKSampleQuery(sampleType: sampleType, predicate: nil, limit: Int(HKObjectQueryNoLimit), sortDescriptors: nil) {\n    query, results, error in\n    \n    guard let samples = results as? [HKQuantitySample] else {\n        // Handle any errors here.\n        return\n    }\n    \n    for sample in samples {\n        // Process each sample here.\n    }\n    \n    // The results come back on an anonymous background queue.\n    // Dispatch to the main queue before modifying the UI.\n    \n    DispatchQueue.main.async {\n        // Update the UI here.\n    }\n}\n\n\nAfter the query is instantiated, you run it by calling the HealthKit store’s execute(_:) method.\n\nstore.execute(query)\n\n\nThis method runs the query on an anonymous background queue. When the query is complete, it executes the results handler on the same background queue (but not necessarily the same thread).\n\nFilter and Sort Results\n\nBy default, a query returns all samples of the specified type. Often you want the HealthKit store to filter the results, and only return a specific subset of samples. You may also want the store to sort the results before returning them.\n\nTo filter the results, create a predicate for your samples. The following code limits the search results to samples with a start date between midnight last night and midnight tonight.\n\nlet calendar = NSCalendar.current\nlet now = Date()\nlet components = calendar.dateComponents([.year, .month, .day], from: now)\n    \nguard let startDate = calendar.date(from: components) else {\n    fatalError(\"*** Unable to create the start date ***\")\n}\n \nguard let endDate = calendar.date(byAdding: .day, value: 1, to: startDate) else {\n    fatalError(\"*** Unable to create the end date ***\")\n}\n\n\nlet today = HKQuery.predicateForSamples(withStart: startDate, end: endDate, options: [])\n\n\nTo sort the results, create one or more sort descriptors. The following code sorts the results by their start dates.\n\nlet sortByDate = NSSortDescriptor(key: HKSampleSortIdentifierStartDate, ascending: true)\n\n\nThen create a query using both the predicate and an array of sort descriptors.\n\nlet filteredAndSortedQuery = HKSampleQuery(sampleType: sampleType,\n                                           predicate: today,\n                                           limit: Int(HKObjectQueryNoLimit),\n                                           sortDescriptors: [sortByDate]) {\n    query, results, error in\n    // Process the results here.\n}\n\n\nSee Also\nCreating Sample Queries\ninit(sampleType: HKSampleType, predicate: NSPredicate?, limit: Int, sortDescriptors: [NSSortDescriptor]?, resultsHandler: (HKSampleQuery, [HKSample]?, Error?) -> Void)\nInstantiates and returns a sample query.\ninit(queryDescriptors: [HKQueryDescriptor], limit: Int, resultsHandler: (HKSampleQuery, [HKSample]?, Error?) -> Void)\nCreates a query for samples that match any of the descriptors you provided.\ninit(queryDescriptors: [HKQueryDescriptor], limit: Int, sortDescriptors: [NSSortDescriptor], resultsHandler: (HKSampleQuery, [HKSample]?, Error?) -> Void)\nCreates a query for samples that match any of the query descriptors you provided, sorted by the sort descriptors you provided.\nlet HKObjectQueryNoLimit: Int\nA value indicating that the query returns all the matching samples in the HealthKit store.\nHealthKit sort descriptors\nIdentifiers for sorting results."
  },
  {
    "title": "getData(for:completion:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkattachmentstore/3951057-getdata",
    "html": "Parameters\nattachment\n\nAn attachment associated with an object in the HealthKit store.\n\ncompletion\n\nA completion handler that the system calls to return the data. This handler takes the following parameters:\n\nattachmentData\n\nA Data object that contains the attachment’s contents. If an error occurs, the system sets this parameter to nil.\n\nerror\n\nIf an error occurred, this parameter contains information about the error. Otherwise, it’s nil.\n\nDiscussion\n\nCall this method to read the attachment’s contents directly from the attachment store.\n\nlet progress = attachmentStore.getData(for: myAttachment) { data, error in\n    if let error {\n        // Handle the error here.\n        fatalError(\"*** An error occurred while accessing the attachment's data. \\(error.localizedDescription) ***\")\n    }\n    \n    // Use the data here.\n}\n\n\n// Monitor the progress here.\n\n\nSee Also\nAccessing attachments\nfunc getAttachments(for: HKObject, completion: ([HKAttachment]?, Error?) -> Void)\nReturns all the attachments for the specified object.\nfunc dataReader(for: HKAttachment) -> HKAttachmentDataReader\nReturns a data reader for the attachment.\nfunc streamData(for: HKAttachment, dataHandler: (Data?, Error?, Bool) -> Void) -> Progress\nAsynchronously returns the attachment’s data."
  },
  {
    "title": "result(for:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkasyncquery/3916310-result",
    "html": "Required\n\nParameters\nhealthStore\n\nThe access point for HealthKit data.\n\nDiscussion\n\nThe adopting type’s Output associated type specifies the values that this method returns. For example, HKSampleQueryDescriptor returns an array of HKQuantitySample objects.\n\nlet stepType = HKQuantityType(.stepCount)\n\n\nlet descriptor = HKSampleQueryDescriptor(\n    predicates:[.quantitySample(type: stepType)],\n    sortDescriptors: [SortDescriptor(\\.endDate, order: .reverse)],\n    limit: 10)\n\n\nlet results = try await descriptor.result(for: store)\n\n\nSee Also\nRunning Queries\nassociatedtype Output\nThe type of data that the query returns.\n\nRequired"
  },
  {
    "title": "init(healthStore:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkattachmentstore/3951058-init",
    "html": "Parameters\nhealthStore\n\nThe interface to the HealthKit store."
  },
  {
    "title": "Sequence | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkasyncsequencequery/3916312-sequence",
    "html": "Required\n\nSee Also\nRunning Queries\nfunc results(for: HKHealthStore) -> Self.Sequence\nInitiates a query that returns its results using an asynchronous sequence.\n\nRequired"
  },
  {
    "title": "creationDate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkattachment/3951048-creationdate",
    "html": "See Also\nAccessing attachment data\nvar name: String\nThe name of the attached file.\nvar identifier: UUID\nThe universally unique identifier for the attached file.\nvar contentType: UTType\nThe type of data stored in the attached file.\nvar size: Int\nThe attachment’s size (in bytes).\nvar metadata: [String : Any]?\nAdditional data associated with the attachment in the HealthKit store.\nstruct HKAttachment.AsyncBytes\nAn asynchronous sequence that returns the attached file as a series of bytes."
  },
  {
    "title": "HKAttachment.AsyncBytes | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkattachment/asyncbytes",
    "html": "Overview\n\nTo access the attachment file as an asynchronous sequence of bytes, get a data reader from the attachment store, and then access its bytes using a for-await-in loop.\n\n// Get a data reader for the attachment.\nlet dataReader = attachmentStore.dataReader(for: myAttachment)\n\n\n// Asynchronously access the attachment's bytes.\nvar data = Data()\ndo {\n    for try await byte in dataReader.bytes {\n        data.append(byte)\n    }\n} catch {\n    // Handle the error here.\n    fatalError(\"*** An error occurred while reading the attachment's data: \\(error.localizedDescription) ***\")\n}\n\n\n// Use the data here.\n\n\nTopics\nCreating an iterator\nfunc makeAsyncIterator() -> BufferedAsyncByteIterator\nCreates the asynchronous iterator that produces elements of this asynchronous sequence.\ntypealias HKAttachment.AsyncBytes.AsyncIterator\nThe type of asynchronous iterator that produces elements of this asynchronous sequence.\ntypealias HKAttachment.AsyncBytes.Element\nThe type of element produced by this asynchronous sequence.\nFinding bytes\nfunc contains(UInt8) -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains the given element.\nfunc contains(where: (UInt8) -> Bool) -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains an element that satisfies the given predicate.\nfunc allSatisfy((UInt8) -> Bool) -> Bool\nReturns a Boolean value that indicates whether all elements produced by the asynchronous sequence satisfy the given predicate.\nfunc first(where: (UInt8) -> Bool) -> UInt8?\nReturns the first element of the sequence that satisfies the given predicate.\nfunc min() -> UInt8?\nReturns the minimum element in an asynchronous sequence of comparable elements.\nfunc min(by: (UInt8, UInt8) -> Bool) -> UInt8?\nReturns the minimum element in the asynchronous sequence, using the given predicate as the comparison between elements.\nfunc max() -> UInt8?\nReturns the maximum element in an asynchronous sequence of comparable elements.\nfunc max(by: (UInt8, UInt8) -> Bool) -> UInt8?\nReturns the maximum element in the asynchronous sequence, using the given predicate as the comparison between elements.\nSelecting bytes\nfunc prefix(Int) -> AsyncPrefixSequence<HKAttachment.AsyncBytes>\nReturns an asynchronous sequence, up to the specified maximum length, containing the initial elements of the base asynchronous sequence.\nfunc prefix(while: (UInt8) -> Bool) -> AsyncPrefixWhileSequence<HKAttachment.AsyncBytes>\nReturns an asynchronous sequence, containing the initial, consecutive elements of the base sequence that satisfy the given predicate.\nExcluding bytes\nfunc drop(while: (UInt8) -> Bool) -> AsyncDropWhileSequence<HKAttachment.AsyncBytes>\nOmits elements from the base asynchronous sequence until a given closure returns false, after which it passes through all remaining elements.\nfunc dropFirst(Int) -> AsyncDropFirstSequence<HKAttachment.AsyncBytes>\nOmits a specified number of elements from the base asynchronous sequence, then passes through all remaining elements.\nfunc filter((UInt8) -> Bool) -> AsyncFilterSequence<HKAttachment.AsyncBytes>\nCreates an asynchronous sequence that contains, in order, the elements of the base sequence that satisfy the given predicate.\nTransforming bytes\nfunc map<Transformed>((UInt8) -> Transformed) -> AsyncMapSequence<HKAttachment.AsyncBytes, Transformed>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements.\nfunc map<Transformed>((UInt8) -> Transformed) -> AsyncThrowingMapSequence<HKAttachment.AsyncBytes, Transformed>\nCreates an asynchronous sequence that maps the given error-throwing closure over the asynchronous sequence’s elements.\nfunc reduce<Result>(Result, (Result, UInt8) -> Result) -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure.\nfunc reduce<Result>(into: Result, (inout Result, UInt8) -> Void) -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure, given a mutable initial value.\nfunc compactMap<ElementOfResult>((UInt8) -> ElementOfResult?) -> AsyncCompactMapSequence<HKAttachment.AsyncBytes, ElementOfResult>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements, omitting results that don’t return a value.\nfunc compactMap<ElementOfResult>((UInt8) -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<HKAttachment.AsyncBytes, ElementOfResult>\nCreates an asynchronous sequence that maps an error-throwing closure over the base sequence’s elements, omitting results that don’t return a value.\nfunc flatMap<SegmentOfResult>((UInt8) -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<HKAttachment.AsyncBytes, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given error-throwing transformation with each element of this sequence.\nfunc flatMap<SegmentOfResult>((UInt8) -> SegmentOfResult) -> AsyncFlatMapSequence<HKAttachment.AsyncBytes, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given transformation with each element of this sequence.\nWorking with text data\nvar characters: AsyncCharacterSequence<HKAttachment.AsyncBytes>\nvar lines: AsyncLineSequence<HKAttachment.AsyncBytes>\nvar unicodeScalars: AsyncUnicodeScalarSequence<HKAttachment.AsyncBytes>\nRelationships\nConforms To\nAsyncSequence\nSee Also\nAccessing attachment data\nvar name: String\nThe name of the attached file.\nvar identifier: UUID\nThe universally unique identifier for the attached file.\nvar contentType: UTType\nThe type of data stored in the attached file.\nvar size: Int\nThe attachment’s size (in bytes).\nvar creationDate: Date\nThe attachment’s creation date.\nvar metadata: [String : Any]?\nAdditional data associated with the attachment in the HealthKit store."
  },
  {
    "title": "getAttachments(for:completion:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkattachmentstore/3951056-getattachments",
    "html": "Parameters\nobject\n\nAn object from the HealthKit store.\n\ncompletion\n\nA completion handler that the system calls to return the attachment. This handler takes the following parameters:\n\nattachments\n\nAn array of attachments. If an error occurs, the system sets this parameter to nil.\n\nerror\n\nIf an error occurred, this parameter contains information about the error. Otherwise, it’s nil.\n\nDiscussion\n\nConcurrency Note\n\nYou can call this method from synchronous code using a completion handler, as shown on this page, or you can call it as an asynchronous method that has the following declaration:\n\nfunc attachments(for object: HKObject) async throws -> [HKAttachment]\n\n\nFor information about concurrency and asynchronous code in Swift, see Calling Objective-C APIs Asynchronously.\n\nCall this method to get all the attachments for the specified object.\n\nlet attachments: [HKAttachment]\ndo {\n    attachments = try await attachmentStore.attachments(for: prescription)\n} catch {\n    // Handle the error here.\n    fatalError(\"*** An error occurred while accessing the attachments for a prescription: \\(error.localizedDescription) ***\")\n}\n\n\n// Use the attachments here.\n\n\nSee Also\nAccessing attachments\nfunc dataReader(for: HKAttachment) -> HKAttachmentDataReader\nReturns a data reader for the attachment.\nfunc getData(for: HKAttachment, completion: (Data?, Error?) -> Void) -> Progress\nReturns an attachment’s data.\nfunc streamData(for: HKAttachment, dataHandler: (Data?, Error?, Bool) -> Void) -> Progress\nAsynchronously returns the attachment’s data."
  },
  {
    "title": "addAttachment(to:name:contentType:url:metadata:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkattachmentstore/3974151-addattachment",
    "html": "Parameters\nobject\n\nAn object stored in the HealthKit store.\n\nname\n\nThe filename for the attachment.\n\ncontentType\n\nThe type of data stored in the attachment.\n\nurl\n\nThe url for the attachment. This must be a local file url.\n\nmetadata\n\nAdditional data associated with the attachment.\n\nDiscussion\n\nUse this method to add an attachment to an object in the HealthKit store. You can add more than one attachment to the specified object.\n\nTo add an attachment, start by creating an attachment store.\n\n// Get the attachment store.\nlet attachmentStore = HKAttachmentStore(healthStore: store)\n\n\nNext, add the attachment to an object that you’ve already saved to the HealthKit store.\n\n// Attach the image to the sample.\ndo {\n    _ = try await attachmentStore.addAttachment(to: prescription,\n                                                name: \"Glasses Prescription\",\n                                                contentType: type,\n                                                url: url)\n} catch {\n    // Handle the error.\n    fatalError(\"*** An error occurred while attaching the image: \\(error.localizedDescription) ***\")\n}\n\n\nYou can only add attachments to HKVisionPrescription, HKGlassesPrescription, and HKContactsPrescription samples. The attachment must be a static image or PDF (no videos or GIFs). HealthKit supports attaching Live Photos, however it automatically selects and attaches the key photo.\n\nSee Also\nAdding attachments\nfunc addAttachment(to: HKObject, name: String, contentType: UTType, url: URL, metadata: [String : Any], completion: (HKAttachment?, (Error)?) -> Void)\nAdds an attachment to the specified object."
  },
  {
    "title": "streamData(for:dataHandler:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkattachmentstore/3951060-streamdata",
    "html": "Parameters\nattachment\n\nAn attachment associated with an object in the HealthKit store.\n\ndataHandler\n\nA closure that the system calls repeatedly to return the attachment’s contents. This closure takes the following parameters:\n\ndataChunk\n\nA data object that contains the next chunk of the attachment’s contents. If an error occurred, the system sets this property to nil.\n\nerror\n\nIf an error occurred, this parameter contains information about the error. Otherwise, it’s nil.\n\ndone\n\nA Boolean value that indicates whether the transfer is complete. If this is the last dataChunk, the system sets this property to true.\n\nDiscussion\n\nCall this method to incrementally read the attachment’s contents directly from the attachment store.\n\nvar data = Data()\nattachmentStore.streamData(for: myAttachment) { dataChunk, error, done in\n    \n    if let error {\n        // Handle the error here.\n        fatalError(\"*** An error occurred while streaming the attachment's data. \\(error.localizedDescription) ***\")\n    }\n    \n    guard let dataChunk else { return }\n    \n    data.append(dataChunk)\n    \n    if done {\n        // Use the attachment's data here.\n        print(data)\n    }\n}\n\n\nSee Also\nAccessing attachments\nfunc getAttachments(for: HKObject, completion: ([HKAttachment]?, Error?) -> Void)\nReturns all the attachments for the specified object.\nfunc dataReader(for: HKAttachment) -> HKAttachmentDataReader\nReturns a data reader for the attachment.\nfunc getData(for: HKAttachment, completion: (Data?, Error?) -> Void) -> Progress\nReturns an attachment’s data."
  },
  {
    "title": "init(verticalAmount:verticalBase:horizontalAmount:horizontalBase:eye:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkvisionprism/3929751-init",
    "html": "Parameters\nverticalAmount\n\nThe vertical strength of the correction, measured in prismDiopter() units.\n\nverticalBase\n\nThe orientation of the vertical correction. This value can be either HKPrismBase.up or HKPrismBase.down.\n\nhorizontalAmount\n\nThe horizontal strength of the correction, measured in prismDiopter() units.\n\nhorizontalBase\n\nThe orientation of the horizontal correction. This value can be either HKPrismBase.in or HKPrismBase.out.\n\neye\n\nA value indicating which eye the correction applies to: HKVisionEye.left or HKVisionEye.right.\n\nSee Also\nCreating vision prism objects\ninit(amount: HKQuantity, angle: HKQuantity, eye: HKVisionEye)\nCreates a new vision prism object, using a single quantity and an alignment angle."
  },
  {
    "title": "enumerateStatistics(from:to:with:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkstatisticscollection/1615783-enumeratestatistics",
    "html": "Parameters\nstartDate\n\nThe start date for the calculation. The initial statistics come from the time interval that contains the start date.\n\nendDate\n\nThe end date for the calculation. The final statistics come from the time interval that contains the end date.\n\nblock\n\nA block that is called once for each time interval. This method passes the following parameters to the block:\n\nresult\n\nThe HKStatistics object containing the statistical data for this time interval.\n\nstop\n\nA reference to a Boolean value. The block can set the value to true to stop further processing of the collection. The stop argument is an out-only argument. Only set this Boolean to true within the block.\n\nDiscussion\n\nThis method enumerates the statistics in chronological order. It calls the block once for each time interval between the start and end dates. If there are no samples for a particular time interval, the corresponding statistic object has a nil-valued quantity.\n\nSee Also\nAccessing Statistics Collections\nfunc statistics() -> [HKStatistics]\nReturns an array of statistics objects representing the populated time intervals covered by the statistics collection query.\nfunc statistics(for: Date) -> HKStatistics?\nReturns the statistics object for the time interval that contains the provided date."
  },
  {
    "title": "sphere | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hklensspecification/3916013-sphere",
    "html": "Discussion\n\nThis quantity uses diopter() units. The range is -10.5 to +6.5.\n\nSee Also\nAccessing lens specification data\nvar cylinder: HKQuantity?\nPart of the correction for astigmatism that measures the strength of the correction.\nvar axis: HKQuantity?\nPart of the correction for astigmatism that measures the orientation fo the correction.\nvar addPower: HKQuantity?\nThe correction for nearsightedness."
  },
  {
    "title": "init(name:manufacturer:model:hardwareVersion:firmwareVersion:softwareVersion:localIdentifier:udiDeviceIdentifier:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkdevice/1615582-init",
    "html": "Parameters\nname\n\nA string containing the user-facing name for the device.\n\nmanufacturer\n\nA string containing the device manufacturer’s name.\n\nmodel\n\nA string containing the device’s model name.\n\nhardwareVersion\n\nA string identifying the hardware version for the device.\n\nfirmwareVersion\n\nA string identifying the version of the firmware that is installed on the device.\n\nsoftwareVersion\n\nA string identifying the version of the software that is running on the device.\n\nlocalIdentifier\n\nA string that uniquely identifies the device. Each health and fitness peripheral should have a separate local identifier for each iOS device it connects to. For example, a heart-rate monitor would have a different identifier when connected to Apple Watch than when connected to iPhone.\n\nUDIDeviceIdentifier\n\nIf the device object represents a medical device, use the device identifier portion of the Food and Drug Administration Unique Device Identifier (UDI). If the device does not have a UDI, pass nil.\n\nImportant\n\nTo protect the user’s privacy, this string must not contain the production identifier portion of the device UDI. If your app requires the production identifier, you must track it outside of HealthKit.\n\nReturn Value\n\nA newly initialized device object that encapsulates the provided data.\n\nDiscussion\n\nUse this method to create a device object representing an arbitrary piece of hardware. In general, the values for these parameters should match the information broadcasted by the hardware.\n\nWhen creating device objects for use in queries, only pass in values for the parameters you need for your search. When used in a predicate, HealthKit finds all devices that match the non-nil parameters. This gives you a great deal of control when it comes to fine-tuning your search. For example, setting the localIdentifier and the firmwareVersion parameters lets you query for all the samples generated by a specific device running a specific version of the firmware. Just setting the manufacturer and model casts a much broader net. For more information on querying for device-specific samples, see HKPredicateKeyPathDevice.\n\nWhen creating devices for new samples, it is best to provide values for as many parameters as you can. Even if you aren’t interest in a particular parameter, other apps may use it in their queries. More importantly, your app may need to use it in the future.\n\nNote\n\nWhen a sample is saved with a device, that sample is permanently associated with that device. You cannot edit either the sample or the device object. To change the information about the device, you must delete the old sample, and save a new sample with a new device object.\n\nSee Also\nCreating Device Objects\nclass func local() -> HKDevice\nreturns a device object that represents the current device."
  },
  {
    "title": "sources() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkstatisticscollection/1615456-sources",
    "html": "Return Value\n\nA set of sources if the separateBySource option was specified; otherwise, it returns nil.\n\nDiscussion\n\nIf the separateBySource option was set, each of the statistics objects returned by the statistics collection also has a sources array. The statistic object’s array should contain a subset of the sources returned by this method. Specifically, it contains only those sources that contributed samples to that particular statistics object. You can use the source objects in these arrays to request source-specific statistical data.\n\nSee Also\nRelated Documentation\nvar sources: [HKSource]?\nAn array containing all the sources contributing to these statistics.\nfunc averageQuantity(for: HKSource) -> HKQuantity?\nReturns the average value from all the samples that match the query and that were created by the specified source.\nfunc sumQuantity(for: HKSource) -> HKQuantity?\nReturns the sum of all the samples that match the query and that were created by the specified source.\nfunc minimumQuantity(for: HKSource) -> HKQuantity?\nReturns the minimum value from all the samples that match the query and that were created by the specified source.\nfunc maximumQuantity(for: HKSource) -> HKQuantity?\nReturns the maximum value from all the samples that match the query and that were created by the specified source."
  },
  {
    "title": "recordTypes | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkverifiableclinicalrecordquerydescriptor/3925481-recordtypes",
    "html": "Discussion\n\nFor a list of valid record types, see HKVerifiableClinicalRecordCredentialType.\n\nSee Also\nAccessing Query Properties\nvar sourceTypes: [HKVerifiableClinicalRecordSourceType]\nThe source for the verifiable clinical records, for example from a SMART Health Card or an EU Digital COVID Certificate.\nvar predicate: NSPredicate?\nA predicate that limits the results returned by the query."
  },
  {
    "title": "predicate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkverifiableclinicalrecordquerydescriptor/3916617-predicate",
    "html": "Discussion\n\nIf this property is nil, the query returns all records of the specified type.\n\nSee Also\nAccessing Query Properties\nvar recordTypes: [HKVerifiableClinicalRecordCredentialType]\nThe types of records returned by this query.\nvar sourceTypes: [HKVerifiableClinicalRecordSourceType]\nThe source for the verifiable clinical records, for example from a SMART Health Card or an EU Digital COVID Certificate."
  },
  {
    "title": "result(for:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkverifiableclinicalrecordquerydescriptor/3916619-result",
    "html": "Parameters\nhealthStore\n\nThe access point for HealthKit data.\n\nRelationships\nFrom Protocol\nHKAsyncQuery"
  },
  {
    "title": "init(sampleType:samplePredicate:completionHandler:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hksourcequery/1614367-init",
    "html": "Parameters\nsampleType\n\nThe type of sample to search for. This query supports all sample types. Specifically, you can pass any concrete subclass of the HKSampleType class (the HKQuantityType, HKCategoryType, HKWorkoutType, and HKCorrelationType classes).\n\nobjectPredicate\n\nA predicate that limits the samples matched by the query. Pass nil if you want to receive the sources for all the samples of the specified type.\n\ncompletionHandler\n\nA block that is called when the query finishes executing. This block takes the following parameters:\n\nquery\n\nA reference to the query calling this block.\n\nresults\n\nA set containing the sources for all the samples that match both the sample type and the object predicate, or nil if an error occurred.\n\nerror\n\nIf an error occurs, this parameter contains an object describing the error; otherwise, it is nil.\n\nReturn Value\n\nA newly initialized sample query object.\n\nDiscussion\n\nAfter instantiating the query, call the HKHealthStore class’s execute(_:) method to run this query. Queries run on an anonymous background queue. As soon as the query is complete, the results handler is executed on the same background queue (but not necessarily on the same thread).\n\nSee Also\nCreating Source Queries\nExecuting Source Queries\nCreate and run source queries."
  },
  {
    "title": "result(for:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hksourcequerydescriptor/3916552-result",
    "html": "Parameters\nhealthStore\n\nThe access point for HealthKit data.\n\nRelationships\nFrom Protocol\nHKAsyncQuery"
  },
  {
    "title": "HKSourceQueryDescriptor.Output | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hksourcequerydescriptor/output",
    "html": "See Also\nCreating Source Query Descriptors\ninit(predicate: HKSamplePredicate<Sample>)\nCreates a source query descriptor."
  },
  {
    "title": "HKAnchoredObjectQueryDescriptor.Results | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkanchoredobjectquerydescriptor/results",
    "html": "Topics\nCreating an Iterator\nfunc makeAsyncIterator() -> HKAnchoredObjectQueryDescriptor<Sample>.Results.Iterator\nCreates the asynchronous iterator that produces results from this asynchronous sequence.\nstruct HKAnchoredObjectQueryDescriptor.Results.Iterator\nAn iterator for accessing anchored object results.\ntypealias HKAnchoredObjectQueryDescriptor.Results.AsyncIterator\nAn iterator that returns results from an asynchronous sequence.\ntypealias HKAnchoredObjectQueryDescriptor.Results.Element\nA set of results that an anchored object query returns.\nFinding Elements\nfunc contains(where: (HKAnchoredObjectQueryDescriptor<Sample>.Result) -> Bool) -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains an element that satisfies the given predicate.\nfunc allSatisfy((HKAnchoredObjectQueryDescriptor<Sample>.Result) -> Bool) -> Bool\nReturns a Boolean value that indicates whether all elements produced by the asynchronous sequence satisfy the given predicate.\nfunc first(where: (HKAnchoredObjectQueryDescriptor<Sample>.Result) -> Bool) -> HKAnchoredObjectQueryDescriptor<Sample>.Result?\nReturns the first element of the sequence that satisfies the given predicate.\nfunc max(by: (HKAnchoredObjectQueryDescriptor<Sample>.Result, HKAnchoredObjectQueryDescriptor<Sample>.Result) -> Bool) -> HKAnchoredObjectQueryDescriptor<Sample>.Result?\nReturns the maximum element in the asynchronous sequence, using the given predicate as the comparison between elements.\nfunc min(by: (HKAnchoredObjectQueryDescriptor<Sample>.Result, HKAnchoredObjectQueryDescriptor<Sample>.Result) -> Bool) -> HKAnchoredObjectQueryDescriptor<Sample>.Result?\nReturns the minimum element in the asynchronous sequence, using the given predicate as the comparison between elements.\nSelecting Elements\nfunc prefix(Int) -> AsyncPrefixSequence<HKAnchoredObjectQueryDescriptor<Sample>.Results>\nReturns an asynchronous sequence, up to the specified maximum length, containing the initial elements of the base asynchronous sequence.\nfunc prefix(while: (HKAnchoredObjectQueryDescriptor<Sample>.Result) -> Bool) -> AsyncPrefixWhileSequence<HKAnchoredObjectQueryDescriptor<Sample>.Results>\nReturns an asynchronous sequence, containing the initial, consecutive elements of the base sequence that satisfy the given predicate.\nExcluding Elements\nfunc dropFirst(Int) -> AsyncDropFirstSequence<HKAnchoredObjectQueryDescriptor<Sample>.Results>\nOmits a specified number of elements from the base asynchronous sequence, then passes through all remaining elements.\nfunc drop(while: (HKAnchoredObjectQueryDescriptor<Sample>.Result) -> Bool) -> AsyncDropWhileSequence<HKAnchoredObjectQueryDescriptor<Sample>.Results>\nOmits elements from the base asynchronous sequence until a given closure returns false, after which it passes through all remaining elements.\nfunc filter((HKAnchoredObjectQueryDescriptor<Sample>.Result) -> Bool) -> AsyncFilterSequence<HKAnchoredObjectQueryDescriptor<Sample>.Results>\nCreates an asynchronous sequence that contains, in order, the elements of the base sequence that satisfy the given predicate.\nTransforming a Sequence\nfunc map<Transformed>((HKAnchoredObjectQueryDescriptor<Sample>.Result) -> Transformed) -> AsyncMapSequence<HKAnchoredObjectQueryDescriptor<Sample>.Results, Transformed>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements.\nfunc map<Transformed>((HKAnchoredObjectQueryDescriptor<Sample>.Result) -> Transformed) -> AsyncThrowingMapSequence<HKAnchoredObjectQueryDescriptor<Sample>.Results, Transformed>\nCreates an asynchronous sequence that maps the given error-throwing closure over the asynchronous sequence’s elements.\nfunc reduce<Result>(Result, (Result, HKAnchoredObjectQueryDescriptor<Sample>.Result) -> Result) -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure.\nfunc reduce<Result>(into: Result, (inout Result, HKAnchoredObjectQueryDescriptor<Sample>.Result) -> Void) -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure, given a mutable initial value.\nfunc compactMap<ElementOfResult>((HKAnchoredObjectQueryDescriptor<Sample>.Result) -> ElementOfResult?) -> AsyncCompactMapSequence<HKAnchoredObjectQueryDescriptor<Sample>.Results, ElementOfResult>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements, omitting results that don’t return a value.\nfunc compactMap<ElementOfResult>((HKAnchoredObjectQueryDescriptor<Sample>.Result) -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<HKAnchoredObjectQueryDescriptor<Sample>.Results, ElementOfResult>\nCreates an asynchronous sequence that maps an error-throwing closure over the base sequence’s elements, omitting results that don’t return a value.\nfunc flatMap<SegmentOfResult>((HKAnchoredObjectQueryDescriptor<Sample>.Result) -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<HKAnchoredObjectQueryDescriptor<Sample>.Results, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given error-throwing transformation with each element of this sequence.\nfunc flatMap<SegmentOfResult>((HKAnchoredObjectQueryDescriptor<Sample>.Result) -> SegmentOfResult) -> AsyncFlatMapSequence<HKAnchoredObjectQueryDescriptor<Sample>.Results, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given transformation with each element of this sequence.\nRelationships\nConforms To\nAsyncSequence\nSee Also\nRunning Queries\nfunc result(for: HKHealthStore) -> HKAnchoredObjectQueryDescriptor<Sample>.Result\nRuns a one-shot query and asynchronously returns a snapshot of the current matching results.\nfunc results(for: HKHealthStore) -> HKAnchoredObjectQueryDescriptor<Sample>.Results\nInitiates a long-running query that returns its results using an asynchronous sequence.\nstruct HKAnchoredObjectQueryDescriptor.Result\nA set of results from an anchored object query."
  },
  {
    "title": "HKAnchoredObjectQueryDescriptor.Result | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkanchoredobjectquerydescriptor/result",
    "html": "Topics\nAccessing the Results\nlet addedSamples: [Sample]\nAn array containing the matching samples added to the HealthKit store.\nlet deletedObjects: [HKDeletedObject]\nAn array of objects deleted from the HealthKit store.\nlet newAnchor: HKQueryAnchor\nA value corresponding to the last sample that the anchor query has returned.\nSee Also\nRunning Queries\nfunc result(for: HKHealthStore) -> HKAnchoredObjectQueryDescriptor<Sample>.Result\nRuns a one-shot query and asynchronously returns a snapshot of the current matching results.\nfunc results(for: HKHealthStore) -> HKAnchoredObjectQueryDescriptor<Sample>.Results\nInitiates a long-running query that returns its results using an asynchronous sequence.\nstruct HKAnchoredObjectQueryDescriptor.Results\nAn asynchronous sequence that emits updates from an anchored object query."
  },
  {
    "title": "predicates | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkanchoredobjectquerydescriptor/3916305-predicates",
    "html": "See Also\nAccessing Query Properties\nvar anchor: HKQueryAnchor?\nAn anchor that a previous anchored object query returned.\nvar limit: Int?\nThe maximum number of samples that the query returns."
  },
  {
    "title": "HKWorkoutRouteQueryDescriptor.Results | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkoutroutequerydescriptor/results",
    "html": "Topics\nCreating an Iterator\nfunc makeAsyncIterator() -> HKWorkoutRouteQueryDescriptor.Results.Iterator\nCreates the asynchronous iterator that produces results from this asynchronous sequence.\nstruct HKWorkoutRouteQueryDescriptor.Results.Iterator\nAn iterator for accessing individual locations from the workout route.\ntypealias HKWorkoutRouteQueryDescriptor.Results.AsyncIterator\nAn iterator for accessing individual locations from a workout route.\ntypealias HKWorkoutRouteQueryDescriptor.Results.Element\nA location with a timestamp.\nFinding Elements\nfunc contains(CLLocation) -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains the given element.\nfunc contains(where: (CLLocation) -> Bool) -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains an element that satisfies the given predicate.\nfunc allSatisfy((CLLocation) -> Bool) -> Bool\nReturns a Boolean value that indicates whether all elements produced by the asynchronous sequence satisfy the given predicate.\nfunc first(where: (CLLocation) -> Bool) -> CLLocation?\nReturns the first element of the sequence that satisfies the given predicate.\nfunc min(by: (CLLocation, CLLocation) -> Bool) -> CLLocation?\nReturns the minimum element in the asynchronous sequence, using the given predicate as the comparison between elements.\nfunc max(by: (CLLocation, CLLocation) -> Bool) -> CLLocation?\nReturns the maximum element in the asynchronous sequence, using the given predicate as the comparison between elements.\nSelecting Elements\nfunc prefix(Int) -> AsyncPrefixSequence<HKWorkoutRouteQueryDescriptor.Results>\nReturns an asynchronous sequence, up to the specified maximum length, containing the initial elements of the base asynchronous sequence.\nfunc prefix(while: (CLLocation) -> Bool) -> AsyncPrefixWhileSequence<HKWorkoutRouteQueryDescriptor.Results>\nReturns an asynchronous sequence, containing the initial, consecutive elements of the base sequence that satisfy the given predicate.\nExcluding Elements\nfunc drop(while: (CLLocation) -> Bool) -> AsyncDropWhileSequence<HKWorkoutRouteQueryDescriptor.Results>\nOmits elements from the base asynchronous sequence until a given closure returns false, after which it passes through all remaining elements.\nfunc dropFirst(Int) -> AsyncDropFirstSequence<HKWorkoutRouteQueryDescriptor.Results>\nOmits a specified number of elements from the base asynchronous sequence, then passes through all remaining elements.\nfunc filter((CLLocation) -> Bool) -> AsyncFilterSequence<HKWorkoutRouteQueryDescriptor.Results>\nCreates an asynchronous sequence that contains, in order, the elements of the base sequence that satisfy the given predicate.\nTransforming a Series\nfunc map<Transformed>((CLLocation) -> Transformed) -> AsyncMapSequence<HKWorkoutRouteQueryDescriptor.Results, Transformed>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements.\nfunc map<Transformed>((CLLocation) -> Transformed) -> AsyncThrowingMapSequence<HKWorkoutRouteQueryDescriptor.Results, Transformed>\nCreates an asynchronous sequence that maps the given error-throwing closure over the asynchronous sequence’s elements.\nfunc reduce<Result>(Result, (Result, CLLocation) -> Result) -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure.\nfunc reduce<Result>(into: Result, (inout Result, CLLocation) -> Void) -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure, given a mutable initial value.\nfunc compactMap<ElementOfResult>((CLLocation) -> ElementOfResult?) -> AsyncCompactMapSequence<HKWorkoutRouteQueryDescriptor.Results, ElementOfResult>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements, omitting results that don’t return a value.\nfunc compactMap<ElementOfResult>((CLLocation) -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<HKWorkoutRouteQueryDescriptor.Results, ElementOfResult>\nCreates an asynchronous sequence that maps an error-throwing closure over the base sequence’s elements, omitting results that don’t return a value.\nfunc flatMap<SegmentOfResult>((CLLocation) -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<HKWorkoutRouteQueryDescriptor.Results, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given error-throwing transformation with each element of this sequence.\nfunc flatMap<SegmentOfResult>((CLLocation) -> SegmentOfResult) -> AsyncFlatMapSequence<HKWorkoutRouteQueryDescriptor.Results, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given transformation with each element of this sequence.\nRelationships\nConforms To\nAsyncSequence\nSee Also\nRunning queries\nfunc results(for: HKHealthStore) -> HKWorkoutRouteQueryDescriptor.Results\nRuns a one-shot query that returns an asynchronous sequence of data representing individual locations."
  },
  {
    "title": "HKQuantitySeriesSampleQueryDescriptor.Results | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquantityseriessamplequerydescriptor/results",
    "html": "Topics\nCreating an Iterator\nfunc makeAsyncIterator() -> HKQuantitySeriesSampleQueryDescriptor.Results.Iterator\nCreates the asynchronous iterator that produces results from this asynchronous sequence.\nstruct HKQuantitySeriesSampleQueryDescriptor.Results.Iterator\nAn iterator for accessing individual data entries from the series.\ntypealias HKQuantitySeriesSampleQueryDescriptor.Results.AsyncIterator\nAn iterator for accessing individual data entries from the series.\ntypealias HKQuantitySeriesSampleQueryDescriptor.Results.Element\nA structure that represents a single data entry from a series.\nFinding Elements\nfunc contains(HKQuantitySeriesSampleQueryDescriptor.Result) -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains the given element.\nfunc contains(where: (HKQuantitySeriesSampleQueryDescriptor.Result) -> Bool) -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains an element that satisfies the given predicate.\nfunc allSatisfy((HKQuantitySeriesSampleQueryDescriptor.Result) -> Bool) -> Bool\nReturns a Boolean value that indicates whether all elements produced by the asynchronous sequence satisfy the given predicate.\nfunc first(where: (HKQuantitySeriesSampleQueryDescriptor.Result) -> Bool) -> HKQuantitySeriesSampleQueryDescriptor.Result?\nReturns the first element of the sequence that satisfies the given predicate.\nfunc max(by: (HKQuantitySeriesSampleQueryDescriptor.Result, HKQuantitySeriesSampleQueryDescriptor.Result) -> Bool) -> HKQuantitySeriesSampleQueryDescriptor.Result?\nReturns the maximum element in the asynchronous sequence, using the given predicate as the comparison between elements.\nfunc min(by: (HKQuantitySeriesSampleQueryDescriptor.Result, HKQuantitySeriesSampleQueryDescriptor.Result) -> Bool) -> HKQuantitySeriesSampleQueryDescriptor.Result?\nReturns the minimum element in the asynchronous sequence, using the given predicate as the comparison between elements.\nSelecting Elements\nfunc prefix(Int) -> AsyncPrefixSequence<HKQuantitySeriesSampleQueryDescriptor.Results>\nReturns an asynchronous sequence, up to the specified maximum length, containing the initial elements of the base asynchronous sequence.\nfunc prefix(while: (HKQuantitySeriesSampleQueryDescriptor.Result) -> Bool) -> AsyncPrefixWhileSequence<HKQuantitySeriesSampleQueryDescriptor.Results>\nReturns an asynchronous sequence, containing the initial, consecutive elements of the base sequence that satisfy the given predicate.\nExcluding Elements\nfunc dropFirst(Int) -> AsyncDropFirstSequence<HKQuantitySeriesSampleQueryDescriptor.Results>\nOmits a specified number of elements from the base asynchronous sequence, then passes through all remaining elements.\nfunc drop(while: (HKQuantitySeriesSampleQueryDescriptor.Result) -> Bool) -> AsyncDropWhileSequence<HKQuantitySeriesSampleQueryDescriptor.Results>\nOmits elements from the base asynchronous sequence until a given closure returns false, after which it passes through all remaining elements.\nfunc filter((HKQuantitySeriesSampleQueryDescriptor.Result) -> Bool) -> AsyncFilterSequence<HKQuantitySeriesSampleQueryDescriptor.Results>\nCreates an asynchronous sequence that contains, in order, the elements of the base sequence that satisfy the given predicate.\nTransforming a Sequence\nfunc map<Transformed>((HKQuantitySeriesSampleQueryDescriptor.Result) -> Transformed) -> AsyncMapSequence<HKQuantitySeriesSampleQueryDescriptor.Results, Transformed>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements.\nfunc map<Transformed>((HKQuantitySeriesSampleQueryDescriptor.Result) -> Transformed) -> AsyncThrowingMapSequence<HKQuantitySeriesSampleQueryDescriptor.Results, Transformed>\nCreates an asynchronous sequence that maps the given error-throwing closure over the asynchronous sequence’s elements.\nfunc reduce<Result>(Result, (Result, HKQuantitySeriesSampleQueryDescriptor.Result) -> Result) -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure.\nfunc reduce<Result>(into: Result, (inout Result, HKQuantitySeriesSampleQueryDescriptor.Result) -> Void) -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure, given a mutable initial value.\nfunc compactMap<ElementOfResult>((HKQuantitySeriesSampleQueryDescriptor.Result) -> ElementOfResult?) -> AsyncCompactMapSequence<HKQuantitySeriesSampleQueryDescriptor.Results, ElementOfResult>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements, omitting results that don’t return a value.\nfunc compactMap<ElementOfResult>((HKQuantitySeriesSampleQueryDescriptor.Result) -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<HKQuantitySeriesSampleQueryDescriptor.Results, ElementOfResult>\nCreates an asynchronous sequence that maps an error-throwing closure over the base sequence’s elements, omitting results that don’t return a value.\nfunc flatMap<SegmentOfResult>((HKQuantitySeriesSampleQueryDescriptor.Result) -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<HKQuantitySeriesSampleQueryDescriptor.Results, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given error-throwing transformation with each element of this sequence.\nfunc flatMap<SegmentOfResult>((HKQuantitySeriesSampleQueryDescriptor.Result) -> SegmentOfResult) -> AsyncFlatMapSequence<HKQuantitySeriesSampleQueryDescriptor.Results, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given transformation with each element of this sequence.\nRelationships\nConforms To\nAsyncSequence\nSee Also\nRunning Queries\nfunc results(for: HKHealthStore) -> HKQuantitySeriesSampleQueryDescriptor.Results\nRuns a one-shot query that returns an asynchronous sequence of matching series samples.\nstruct HKQuantitySeriesSampleQueryDescriptor.Result\nA set of results from a quantity series sample descriptor."
  },
  {
    "title": "predicate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquantityseriessamplequerydescriptor/3916521-predicate",
    "html": "See Also\nAccessing Query Properties\nvar options: HKQuantitySeriesSampleQueryDescriptor.Options\nA set of options for the query. For a list of possible values, see HKQuantitySeriesSampleQueryDescriptor.Options."
  },
  {
    "title": "HKQuantitySeriesSampleQueryDescriptor.Result | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquantityseriessamplequerydescriptor/result",
    "html": "Topics\nAccessing Sample Data\nlet sample: HKQuantitySample?\nThe quantity sample that owns the series of data entries.\nlet quantity: HKQuantity\nThe quantity stored by the data entry.\nlet dateInterval: DateInterval\nThe date interval for the entry.\nComparing Results\nfunc hash(into: inout Hasher)\nHashes the essential components of the entry by passing them into the given hash function.\nvar hashValue: Int\nThe hashed value for the entry.\nstatic func == (HKQuantitySeriesSampleQueryDescriptor.Result, HKQuantitySeriesSampleQueryDescriptor.Result) -> Bool\nIndicates whether two entries are equal.\nstatic func != (HKQuantitySeriesSampleQueryDescriptor.Result, HKQuantitySeriesSampleQueryDescriptor.Result) -> Bool\nIndicates whether two data entries are unequal.\nRelationships\nConforms To\nHashable\nSee Also\nRunning Queries\nfunc results(for: HKHealthStore) -> HKQuantitySeriesSampleQueryDescriptor.Results\nRuns a one-shot query that returns an asynchronous sequence of matching series samples.\nstruct HKQuantitySeriesSampleQueryDescriptor.Results\nAn asynchronous sequence that emits data from the quantity series query."
  },
  {
    "title": "init(route:dataHandler:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkoutroutequery/2873797-init",
    "html": "Parameters\nworkoutRoute\n\nThe workout route containing the location data.\n\ndataHandler\n\nA block called each time the system returns a batch of location data. This block may be called one or more times.\n\nThe block is passed the following parameters:\n\nquery\n\nThe query that returns the location data.\n\nrouteData\n\nA batch of location data, or nil if an error has occurred.\n\ndone\n\nA Boolean value that indicates whether the query is complete. It is true if all the location data has been returned. If one or more additional batches of data are still pending, it is false.\n\nerror\n\nAn object that describes the error, if an error has occurred; otherwise, nil.\n\nReturn Value\n\nA newly initialized route query.\n\nSee Also\nCreating route queries\ninit(route: HKWorkoutRoute, dateInterval: DateInterval, dataHandler: (HKWorkoutRouteQuery, [CLLocation]?, Bool, Error?) -> Void)\nCreates a new query to access the location data associated with a workout route during the specified date interval."
  },
  {
    "title": "options | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquantityseriessamplequerydescriptor/3916520-options",
    "html": "See Also\nAccessing Query Properties\nvar predicate: HKSamplePredicate<HKQuantitySample>\nA predicate that defines the set of series samples that the query returns."
  },
  {
    "title": "results(for:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkoutroutequerydescriptor/3916672-results",
    "html": "Parameters\nhealthStore\n\nThe access point for HealthKit data.\n\nRelationships\nFrom Protocol\nHKAsyncSequenceQuery\nSee Also\nRunning queries\nstruct HKWorkoutRouteQueryDescriptor.Results\nAn asynchronous sequence that emits data about individual locations from a workout route sample."
  },
  {
    "title": "HKWorkoutRouteQueryDescriptor.Sequence | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkoutroutequerydescriptor/sequence",
    "html": "See Also\nCreating workout route query descriptors\ninit(HKWorkoutRoute)\nCreates a query descriptor that reads locations from the provided workout route sample."
  },
  {
    "title": "HKQuantitySeriesSampleQueryDescriptor.Options | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquantityseriessamplequerydescriptor/options",
    "html": "Topics\nSetting Options\nstatic let includeSample: HKQuantitySeriesSampleQueryDescriptor.Options\nAn option indicating that the results should include a reference to the quantity sample that contains the series data.\nstatic let orderByQuantitySampleStartDate: HKQuantitySeriesSampleQueryDescriptor.Options\nAn option indicating that the results are grouped by the containing quantity sample’s start date.\nCreating Options\ninit()\nCreates an empty option set.\ninit<S>(S)\nCreates a new set from a finite sequence of items.\ninit(arrayLiteral: HKQuantitySeriesSampleQueryDescriptor.Options...)\nCreates a set containing the elements of the given array literal.\ninit(rawValue: Int)\nCreates a set that includes an option that corresponds to the provided raw value.\ntypealias HKQuantitySeriesSampleQueryDescriptor.Options.RawValue\nThe raw value for an option.\nlet rawValue: Int\nThe raw value for the options.\nTesting for Membership\nvar isEmpty: Bool\nA Boolean value that indicates whether the set has no elements.\nfunc contains(HKQuantitySeriesSampleQueryDescriptor.Options) -> Bool\nReturns a Boolean value that indicates whether a given element is a member of the option set.\ntypealias HKQuantitySeriesSampleQueryDescriptor.Options.Element\nAn option in the series sample query option set.\ntypealias HKQuantitySeriesSampleQueryDescriptor.Options.ArrayLiteralElement\nAn option in the series sample query option set.\nAdding and Removing Options\nfunc insert(HKQuantitySeriesSampleQueryDescriptor.Options) -> (inserted: Bool, memberAfterInsert: HKQuantitySeriesSampleQueryDescriptor.Options)\nAdds the given element to the option set if it is not already a member.\nfunc update(with: HKQuantitySeriesSampleQueryDescriptor.Options) -> HKQuantitySeriesSampleQueryDescriptor.Options?\nInserts the given element into the set.\nfunc remove(HKQuantitySeriesSampleQueryDescriptor.Options) -> HKQuantitySeriesSampleQueryDescriptor.Options?\nRemoves the given element and all elements subsumed by it.\nCombining Sets\nfunc union(HKQuantitySeriesSampleQueryDescriptor.Options) -> HKQuantitySeriesSampleQueryDescriptor.Options\nReturns a new option set of the elements contained in this set, in the given set, or in both.\nfunc formUnion(HKQuantitySeriesSampleQueryDescriptor.Options)\nInserts the elements of another set into this option set.\nfunc intersection(HKQuantitySeriesSampleQueryDescriptor.Options) -> HKQuantitySeriesSampleQueryDescriptor.Options\nReturns a new option set with only the elements contained in both this set and the given set.\nfunc formIntersection(HKQuantitySeriesSampleQueryDescriptor.Options)\nRemoves all elements of this option set that are not also present in the given set.\nfunc symmetricDifference(HKQuantitySeriesSampleQueryDescriptor.Options) -> HKQuantitySeriesSampleQueryDescriptor.Options\nReturns a new option set with the elements contained in this set or in the given set, but not in both.\nfunc formSymmetricDifference(HKQuantitySeriesSampleQueryDescriptor.Options)\nReplaces this set with a new set containing all elements contained in either this set or the given set, but not in both.\nfunc subtract(HKQuantitySeriesSampleQueryDescriptor.Options)\nRemoves the elements of the given set from this set.\nfunc subtracting(HKQuantitySeriesSampleQueryDescriptor.Options) -> HKQuantitySeriesSampleQueryDescriptor.Options\nReturns a new set containing the elements of this set that do not occur in the given set.\nComparing Sets\nfunc isDisjoint(with: HKQuantitySeriesSampleQueryDescriptor.Options) -> Bool\nReturns a Boolean value that indicates whether the set has no members in common with the given set.\nfunc isSubset(of: HKQuantitySeriesSampleQueryDescriptor.Options) -> Bool\nReturns a Boolean value that indicates whether the set is a subset of another set.\nfunc isStrictSubset(of: HKQuantitySeriesSampleQueryDescriptor.Options) -> Bool\nReturns a Boolean value that indicates whether this set is a strict subset of the given set.\nfunc isSuperset(of: HKQuantitySeriesSampleQueryDescriptor.Options) -> Bool\nReturns a Boolean value that indicates whether the set is a superset of the given set.\nfunc isStrictSuperset(of: HKQuantitySeriesSampleQueryDescriptor.Options) -> Bool\nReturns a Boolean value that indicates whether this set is a strict superset of the given set.\nstatic func != (HKQuantitySeriesSampleQueryDescriptor.Options, HKQuantitySeriesSampleQueryDescriptor.Options) -> Bool\nReturns a Boolean value indicating whether two option sets aren’t equal.\nRelationships\nConforms To\nOptionSet\nSee Also\nCreating Series Query Descriptors\ntypealias HKQuantitySeriesSampleQueryDescriptor.Sequence\nThe type of asynchronous sequence that the query returns.\ninit(predicate: HKSamplePredicate<HKQuantitySample>, options: HKQuantitySeriesSampleQueryDescriptor.Options)\nCreates a quantity series query descriptor."
  },
  {
    "title": "insert(_:for:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquantityseriessamplebuilder/3081263-insert",
    "html": "Parameters\nquantity\n\nThe quantity to insert.\n\ndateInterval\n\nThe date interval associated with the quantity. If the interval’s start parameter is the same as the start date for a previously provided quantity, this quantity replaces the previous one.\n\nFails with an HKError.Code.errorInvalidArgument error if the date parameter is earlier than the series builder’s startDate property.\n\nDiscussion\n\nUse this method to add a quantity to the series. The quantity must have a unit that is compatible with the series builder’s quantity type (see is(compatibleWith:)).\n\nNote\n\nYou can insert quantities in any order. The builder sorts them by the date interval’s startDate property when you finish the series.\n\nSee Also\nAdding Values\nfunc insert(HKQuantity, at: Date)\nAdds a new quantity to the series at the provided date and time."
  },
  {
    "title": "medicationStatement | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkfhirresourcetype/2980684-medicationstatement",
    "html": "See Also\nResource Types\nstatic let allergyIntolerance: HKFHIRResourceType\nA type that identifies FHIR resources for allergies and intolerances.\nstatic let condition: HKFHIRResourceType\nA type that identifies FHIR resources for a condition, problem, diagnosis, or other event.\nstatic let diagnosticReport: HKFHIRResourceType\nA type that identifies FHIR resources for findings and interpretation of diagnostic tests.\nstatic let documentReference: HKFHIRResourceType\nA type that identifies FHIR resources for document references.\nstatic let immunization: HKFHIRResourceType\nA type that identifies FHIR resources for the administration of vaccines.\nstatic let medicationOrder: HKFHIRResourceType\nA type that identifies FHIR resources for prescriptions or other orders for medication.\nstatic let medicationDispense: HKFHIRResourceType\nA type that identifies FHIR resources for the delivery of medication (usually in response to a prescription).\nstatic let medicationRequest: HKFHIRResourceType\nA type that identifies FHIR resources for prescriptions or other orders or requests for medication.\nstatic let observation: HKFHIRResourceType\nA type that identifies FHIR resources for medical observations, including lab results and vital signs.\nstatic let procedure: HKFHIRResourceType\nA type that identifies FHIR resources for procedures performed on the patient.\nstatic let coverage: HKFHIRResourceType\nA type that identifies FHIR resources containing information about the user’s insurance coverage.\nRelated Documentation\nstatic let medicationRecord: HKClinicalTypeIdentifier\nA type identifier for records of medication."
  },
  {
    "title": "medicationOrder | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkfhirresourcetype/2980683-medicationorder",
    "html": "Discussion\n\nFHIR renamed the resource type for medication requests and orders. FHIR DSTU2 uses the medicationOrder resource type, while FHIR R4 uses the medicationRequest resource type.\n\nSee Also\nResource Types\nstatic let allergyIntolerance: HKFHIRResourceType\nA type that identifies FHIR resources for allergies and intolerances.\nstatic let condition: HKFHIRResourceType\nA type that identifies FHIR resources for a condition, problem, diagnosis, or other event.\nstatic let diagnosticReport: HKFHIRResourceType\nA type that identifies FHIR resources for findings and interpretation of diagnostic tests.\nstatic let documentReference: HKFHIRResourceType\nA type that identifies FHIR resources for document references.\nstatic let immunization: HKFHIRResourceType\nA type that identifies FHIR resources for the administration of vaccines.\nstatic let medicationDispense: HKFHIRResourceType\nA type that identifies FHIR resources for the delivery of medication (usually in response to a prescription).\nstatic let medicationStatement: HKFHIRResourceType\nA type that identifies FHIR resources for statements about medication taken by the patient.\nstatic let medicationRequest: HKFHIRResourceType\nA type that identifies FHIR resources for prescriptions or other orders or requests for medication.\nstatic let observation: HKFHIRResourceType\nA type that identifies FHIR resources for medical observations, including lab results and vital signs.\nstatic let procedure: HKFHIRResourceType\nA type that identifies FHIR resources for procedures performed on the patient.\nstatic let coverage: HKFHIRResourceType\nA type that identifies FHIR resources containing information about the user’s insurance coverage.\nRelated Documentation\nstatic let medicationRecord: HKClinicalTypeIdentifier\nA type identifier for records of medication."
  },
  {
    "title": "discard() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquantityseriessamplebuilder/2990393-discard",
    "html": "See Also\nEnding the Collection\nfunc finishSeries(metadata: [String : Any]?, completion: ([HKQuantitySample]?, Error?) -> Void)\nFinalizes the series and returns the resulting quantity samples.\nfunc finishSeries(metadata: [String : Any]?, endDate: Date?, completion: ([HKQuantitySample]?, Error?) -> Void)\nFinalizes the series with the provided end date, and returns the resulting quantity samples."
  },
  {
    "title": "init(healthStore:device:start:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkheartbeatseriesbuilder/3113761-init",
    "html": "Parameters\nhealthStore\n\nThe HealthKit store.\n\ndevice\n\nAn object representing the device that provided the heartbeat data. Pass nil if the app is generating its own data.\n\nstart\n\nThe sample’s start date.\n\nSee Also\nCreating a Heartbeat Series Builder\nclass var maximumCount: Int\nThe maximum number of heartbeats you can add to the sample."
  },
  {
    "title": "finishSeries(completion:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkheartbeatseriesbuilder/3113760-finishseries",
    "html": "Parameters\ncompletion\n\nThe completion handler called by the builder after it attempts to create and save the heartbeat series sample. The completion handler takes the following parameters:\n\nheartbeatSeries\n\nIf successful it contains the resuting sample; otherwise, nil.\n\nerror\n\nIf an error occurs, this contains an object that describes the error; otherwise, nil.\n\nDiscussion\n\nConcurrency Note\n\nYou can call this method from synchronous code using a completion handler, as shown on this page, or you can call it as an asynchronous method that has the following declaration:\n\nfunc finishSeries() async throws -> HKHeartbeatSeriesSample\n\n\nFor information about concurrency and asynchronous code in Swift, see Calling Objective-C APIs Asynchronously.\n\nCall finishSeries(completion:) after inserting all the heartbeats for the series. The series builder creates the series sample, saves it to the HealthKit store, and passes it to the completion handler.\n\nCalling this method before inserting any heartbeats results in an error. Also, calling this method invalidates the series builder; you cannot call any other series builder methods after calling this method."
  },
  {
    "title": "associatedWorkoutBuilder() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkoutsession/2962931-associatedworkoutbuilder",
    "html": "See Also\nRelated Documentation\nclass HKLiveWorkoutBuilder\nA builder object that constructs a workout incrementally based on live data from an active workout session.\nprotocol HKLiveWorkoutBuilderDelegate\nA protocol for monitoring live workout builders."
  },
  {
    "title": "startActivity(with:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkoutsession/3017314-startactivity",
    "html": "Parameters\ndate\n\nThe start date for the workout session.\n\nSee Also\nManaging the workout\nfunc prepare()\nPrepares the workout session.\nfunc pause()\nPauses the workout session.\nfunc resume()\nResumes the workout session.\nfunc stopActivity(with: Date?)\nStops the workout session activity, and sets the end date.\nfunc end()\nEnds the workout session.\nRelated Documentation\ncase running\nThe workout session is running."
  },
  {
    "title": "prepare() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkoutsession/2994353-prepare",
    "html": "See Also\nManaging the workout\nfunc startActivity(with: Date?)\nStarts the workout session activity, and sets the start date.\nfunc pause()\nPauses the workout session.\nfunc resume()\nResumes the workout session.\nfunc stopActivity(with: Date?)\nStops the workout session activity, and sets the end date.\nfunc end()\nEnds the workout session.\nRelated Documentation\ncase prepared\nThe session is ready but not yet running."
  },
  {
    "title": "resume() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkoutsession/2962935-resume",
    "html": "See Also\nManaging the workout\nfunc prepare()\nPrepares the workout session.\nfunc startActivity(with: Date?)\nStarts the workout session activity, and sets the start date.\nfunc pause()\nPauses the workout session.\nfunc stopActivity(with: Date?)\nStops the workout session activity, and sets the end date.\nfunc end()\nEnds the workout session.\nRelated Documentation\ncase running\nThe workout session is running."
  },
  {
    "title": "amount | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkvisionprism/3916039-amount",
    "html": "Discussion\n\nThis is the total correction strength, measured in prismDiopter() units.\n\nSee Also\nAccessing lens specification data\nvar eye: HKVisionEye\nA value indicating which eye the correction applies to.\nenum HKVisionEye\nA value that specifies the eye for a vision prescription.\nvar angle: HKQuantity\nThe orientation of the adjustment.\nvar horizontalAmount: HKQuantity\nThe strength of the horizontal correction.\nvar horizontalBase: HKPrismBase\nThe orientation of the horizontal portion of the correction.\nvar verticalAmount: HKQuantity\nThe strength of the vertical correction.\nvar verticalBase: HKPrismBase\nThe orientation of the vertical portion of the correction.\nenum HKPrismBase\nThe orientation of the prism correction, represented by the location of the prism’s base (the thickest part of the prism)."
  },
  {
    "title": "angle | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkvisionprism/3929746-angle",
    "html": "Discussion\n\nThis is the orientation of the amount correction, measured in degreeAngle() units.\n\nSee Also\nAccessing lens specification data\nvar eye: HKVisionEye\nA value indicating which eye the correction applies to.\nenum HKVisionEye\nA value that specifies the eye for a vision prescription.\nvar amount: HKQuantity\nThe strength of the correction.\nvar horizontalAmount: HKQuantity\nThe strength of the horizontal correction.\nvar horizontalBase: HKPrismBase\nThe orientation of the horizontal portion of the correction.\nvar verticalAmount: HKQuantity\nThe strength of the vertical correction.\nvar verticalBase: HKPrismBase\nThe orientation of the vertical portion of the correction.\nenum HKPrismBase\nThe orientation of the prism correction, represented by the location of the prism’s base (the thickest part of the prism)."
  },
  {
    "title": "horizontalAmount | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkvisionprism/3929748-horizontalamount",
    "html": "Discussion\n\nThis parameter holds the horizontal component of the prescriptions correction, measured in prismDiopter() units.\n\nSee Also\nAccessing lens specification data\nvar eye: HKVisionEye\nA value indicating which eye the correction applies to.\nenum HKVisionEye\nA value that specifies the eye for a vision prescription.\nvar amount: HKQuantity\nThe strength of the correction.\nvar angle: HKQuantity\nThe orientation of the adjustment.\nvar horizontalBase: HKPrismBase\nThe orientation of the horizontal portion of the correction.\nvar verticalAmount: HKQuantity\nThe strength of the vertical correction.\nvar verticalBase: HKPrismBase\nThe orientation of the vertical portion of the correction.\nenum HKPrismBase\nThe orientation of the prism correction, represented by the location of the prism’s base (the thickest part of the prism)."
  },
  {
    "title": "horizontalBase | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkvisionprism/3929749-horizontalbase",
    "html": "Discussion\n\nThis value can be either HKPrismBase.in or HKPrismBase.out.\n\nSee Also\nAccessing lens specification data\nvar eye: HKVisionEye\nA value indicating which eye the correction applies to.\nenum HKVisionEye\nA value that specifies the eye for a vision prescription.\nvar amount: HKQuantity\nThe strength of the correction.\nvar angle: HKQuantity\nThe orientation of the adjustment.\nvar horizontalAmount: HKQuantity\nThe strength of the horizontal correction.\nvar verticalAmount: HKQuantity\nThe strength of the vertical correction.\nvar verticalBase: HKPrismBase\nThe orientation of the vertical portion of the correction.\nenum HKPrismBase\nThe orientation of the prism correction, represented by the location of the prism’s base (the thickest part of the prism)."
  },
  {
    "title": "HKPrismBase | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkprismbase",
    "html": "Topics\nPrism Base\ncase none\nNo prism correction.\ncase up\nThe prism’s base is at the top of the lens.\ncase down\nThe prism’s base is at the bottom of the lens.\ncase `in`\nThe prism base is on the inside edge of the lens.\ncase out\nThe prism base is on the outside edge of the lens.\nRelationships\nConforms To\nSendable\nSee Also\nAccessing lens specification data\nvar eye: HKVisionEye\nA value indicating which eye the correction applies to.\nenum HKVisionEye\nA value that specifies the eye for a vision prescription.\nvar amount: HKQuantity\nThe strength of the correction.\nvar angle: HKQuantity\nThe orientation of the adjustment.\nvar horizontalAmount: HKQuantity\nThe strength of the horizontal correction.\nvar horizontalBase: HKPrismBase\nThe orientation of the horizontal portion of the correction.\nvar verticalAmount: HKQuantity\nThe strength of the vertical correction.\nvar verticalBase: HKPrismBase\nThe orientation of the vertical portion of the correction."
  },
  {
    "title": "verticalAmount | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkvisionprism/3929752-verticalamount",
    "html": "Discussion\n\nThis parameter holds the vertical component of the prescriptions correction, measured in prismDiopter() units.\n\nSee Also\nAccessing lens specification data\nvar eye: HKVisionEye\nA value indicating which eye the correction applies to.\nenum HKVisionEye\nA value that specifies the eye for a vision prescription.\nvar amount: HKQuantity\nThe strength of the correction.\nvar angle: HKQuantity\nThe orientation of the adjustment.\nvar horizontalAmount: HKQuantity\nThe strength of the horizontal correction.\nvar horizontalBase: HKPrismBase\nThe orientation of the horizontal portion of the correction.\nvar verticalBase: HKPrismBase\nThe orientation of the vertical portion of the correction.\nenum HKPrismBase\nThe orientation of the prism correction, represented by the location of the prism’s base (the thickest part of the prism)."
  },
  {
    "title": "verticalBase | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkvisionprism/3929753-verticalbase",
    "html": "Discussion\n\nThis value can be either HKPrismBase.in or HKPrismBase.out.\n\nSee Also\nAccessing lens specification data\nvar eye: HKVisionEye\nA value indicating which eye the correction applies to.\nenum HKVisionEye\nA value that specifies the eye for a vision prescription.\nvar amount: HKQuantity\nThe strength of the correction.\nvar angle: HKQuantity\nThe orientation of the adjustment.\nvar horizontalAmount: HKQuantity\nThe strength of the horizontal correction.\nvar horizontalBase: HKPrismBase\nThe orientation of the horizontal portion of the correction.\nvar verticalAmount: HKQuantity\nThe strength of the vertical correction.\nenum HKPrismBase\nThe orientation of the prism correction, represented by the location of the prism’s base (the thickest part of the prism)."
  },
  {
    "title": "init(sphere:cylinder:axis:addPower:baseCurve:diameter:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkcontactslensspecification/3929691-init",
    "html": "Parameters\nsphere\n\nThe correction for farsightedness, measured in diopter() units. The range is -10.5 to +6.5.\n\ncylinder\n\nPart of the correction for astigmatism. This property measures the strength of the correction in diopter() units. The range is -3.0 to 3.0.\n\naxis\n\nPart of the correction for astigmatism. This property measures the orientation of the correction in degreeAngle() units.\n\naddPower\n\nThe correction for nearsightedness, measured in diopter() units. The range is from 0.25 to 2.5. The right and left eyes should have the same value.\n\nbaseCurve\n\nPart of the contact’s fit, it measures the curve of the back side of the contact, measured in mm. The range is 7.8 to 9.2 mm.\n\ndiameter\n\nPart of the contact’s fit, it measures the diameter of the lens, measured in mm. The range is 9 to 15 mm."
  },
  {
    "title": "prism | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkglasseslensspecification/3915996-prism",
    "html": "See Also\nAccessing the specification’s data\nvar farPupillaryDistance: HKQuantity?\nThe distance between the pupil and the center of the nose when looking at an object far away, measured in mm.\nvar nearPupillaryDistance: HKQuantity?\nThe distance between the pupil and the center of the nose when looking at a nearby object, measured in mm.\nvar vertexDistance: HKQuantity?\nThe distance between the back of the lens and the eye, measured in mm."
  },
  {
    "title": "activityMoveMode | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkactivitysummary/3197590-activitymovemode",
    "html": "Discussion\n\nIndicates whether the move ring measures the active energy burned, or the user’s move time.\n\nSee Also\nAccessing the summary’s data\nenum HKActivityMoveMode\nConstants that specify the value measured by the Move ring on the user’s device.\nvar activeEnergyBurned: HKQuantity\nThe amount of active energy the user burned during the specified day.\nvar activeEnergyBurnedGoal: HKQuantity\nThe user’s daily goal for active energy burned.\nvar appleMoveTime: HKQuantity\nThe amount of time the user spent performing activities that involve full-body movements during the specified day.\nvar appleMoveTimeGoal: HKQuantity\nThe user’s daily goal for move time.\nvar appleExerciseTime: HKQuantity\nThe amount of time that the user has spent exercising during the specified day.\nvar appleExerciseTimeGoal: HKQuantity\nThe user’s daily exercise goal.\nvar exerciseTimeGoal: HKQuantity?\nThe user’s daily goal for exercise time.\nvar appleStandHours: HKQuantity\nThe number hours in the specified day during which the user has stood and moved for at least a minute per hour.\nvar standHoursGoal: HKQuantity?\nThe user’s daily goal for stand hours.\nvar appleStandHoursGoal: HKQuantity\nThe user’s daily goal for stand hours.\nenum HKCategoryValueAppleStandHour\nCategories that the system used to indicate whether the user stood during the sample’s duration.\nfunc dateComponents(for: Calendar) -> DateComponents\nDate components that uniquely identify the day represented by the summary object."
  },
  {
    "title": "baseCurve | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkcontactslensspecification/3915984-basecurve",
    "html": "Discussion\n\nThe property’s range is 7.8 to 9.2 mm.\n\nSee Also\nAccessing the specification’s data\nvar diameter: HKQuantity?\nPart of the contact’s fit, it measures the diameter of the lens, measured in mm."
  },
  {
    "title": "nearPupillaryDistance | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkglasseslensspecification/3915995-nearpupillarydistance",
    "html": "See Also\nAccessing the specification’s data\nvar farPupillaryDistance: HKQuantity?\nThe distance between the pupil and the center of the nose when looking at an object far away, measured in mm.\nvar prism: HKVisionPrism?\nAn object that contains information about the eye alignment correction.\nvar vertexDistance: HKQuantity?\nThe distance between the back of the lens and the eye, measured in mm."
  },
  {
    "title": "diameter | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkcontactslensspecification/3915985-diameter",
    "html": "Discussion\n\nThe property’s range is 9 to 15 mm.\n\nSee Also\nAccessing the specification’s data\nvar baseCurve: HKQuantity?\nPart of the contact’s fit, it measures the curve of the back side of the contact, measured in mm."
  },
  {
    "title": "farPupillaryDistance | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkglasseslensspecification/3915993-farpupillarydistance",
    "html": "See Also\nAccessing the specification’s data\nvar nearPupillaryDistance: HKQuantity?\nThe distance between the pupil and the center of the nose when looking at a nearby object, measured in mm.\nvar prism: HKVisionPrism?\nAn object that contains information about the eye alignment correction.\nvar vertexDistance: HKQuantity?\nThe distance between the back of the lens and the eye, measured in mm."
  },
  {
    "title": "init(rightEyeSpecification:leftEyeSpecification:brand:dateIssued:expirationDate:device:metadata:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkcontactsprescription/3929692-init",
    "html": "Parameters\nrightEyeSpecification\n\nThe lens specification for the right eye.\n\nleftEyeSpecification\n\nThe lens specification for the left eye.\n\nbrand\n\nThe name of the prescribed brand, based on the contact lens fitting.\n\ndateIssued\n\nThe date when the doctor issued the prescription.\n\nexpirationDate\n\nThe date when the prescription expires.\n\ndevice\n\nThe device that generated the sample.\n\nmetadata\n\nAdditional metadata about the sample."
  },
  {
    "title": "vertexDistance | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkglasseslensspecification/3915997-vertexdistance",
    "html": "Discussion\n\nThis property’s range is from 12 to 14 mm.\n\nSee Also\nAccessing the specification’s data\nvar farPupillaryDistance: HKQuantity?\nThe distance between the pupil and the center of the nose when looking at an object far away, measured in mm.\nvar nearPupillaryDistance: HKQuantity?\nThe distance between the pupil and the center of the nose when looking at a nearby object, measured in mm.\nvar prism: HKVisionPrism?\nAn object that contains information about the eye alignment correction."
  },
  {
    "title": "productType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hksourcerevision/2865768-producttype",
    "html": "Discussion\n\nFor samples saved on Apple Watch Series 2, HealthKit sets the product type property to watch2,4.\n\nNote\n\nSamples saved using older versions of HealthKit may have a nil-valued product type, indicating that the product type is unknown.\n\nTopics\nConstants\nlet HKSourceRevisionAnyProductType: String\nA constant that matches any product type.\nSee Also\nAccessing Source and Version Information\nvar source: HKSource\nThe source for a sample.\nvar version: String?\nA string that identifies a particular version of the source.\nvar operatingSystemVersion: OperatingSystemVersion\nA string that identifies the operating system used to save a sample."
  },
  {
    "title": "brand | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkcontactsprescription/3915988-brand",
    "html": "See Also\nAccessing the contacts prescription data\nvar leftEye: HKContactsLensSpecification?\nThe lens specification for the left eye.\nvar rightEye: HKContactsLensSpecification?\nThe lens specification for the right eye."
  },
  {
    "title": "HKMetadataKeySessionEstimate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkmetadatakeysessionestimate",
    "html": "See Also\nEstimate Keys\nlet HKMetadataKeyDateOfEarliestDataUsedForEstimate: String\nThe earliest date of data used to calculate the sample’s estimated value."
  },
  {
    "title": "leftEye | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkcontactsprescription/3915990-lefteye",
    "html": "See Also\nAccessing the contacts prescription data\nvar brand: String\nThe name of the prescribed brand, based on the contact lens fitting.\nvar rightEye: HKContactsLensSpecification?\nThe lens specification for the right eye."
  },
  {
    "title": "rightEye | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkcontactsprescription/3915991-righteye",
    "html": "See Also\nAccessing the contacts prescription data\nvar brand: String\nThe name of the prescribed brand, based on the contact lens fitting.\nvar leftEye: HKContactsLensSpecification?\nThe lens specification for the left eye."
  },
  {
    "title": "init(type:value:start:end:device:metadata:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkcategorysample/1615287-init",
    "html": "Parameters\ntype\n\nThe category type for this sample. For a complete list, see HKCategoryTypeIdentifier.\n\nvalue\n\nThe value for this sample. This value must come from the appropriate category value enumeration. Each category type uses its own enumeration. For more information, see Category Type Identifiers in HealthKit Constants.\n\nstartDate\n\nThe start date for the sample. This must be equal to or earlier than the end date; otherwise, this method throws an exception (NSInvalidArgumentException).\n\nendDate\n\nThe end date for the sample. This must be equal to or later than the start date; otherwise, this method throws an exception (NSInvalidArgumentException).\n\ndevice\n\nAn HKDevice object representing the device that generated the data for this sample.\n\nmetadata\n\nThe metadata dictionary contains extra information describing this sample. The dictionary’s keys are all NSString objects. The values may be NSString objects, NSNumber objects or NSDate objects. For a complete list of predefined metadata keys, see Metadata Keys.\n\nUsing predefined keys helps facilitate sharing data between apps; however, you are also encouraged to create your own, custom keys as needed to extend the HealthKit category sample’s capabilities.\n\nDiscussion\n\nHealthKit uses category samples to represent data that can be classified into a finite set of categories. To create a category sample, you must first create the corresponding category type, and then set its start date, end dates, device, and metadata. This produces a new category sample with both a device and metadata information, as shown below.\n\nlet device = HKDevice(name: deviceName,\n                      manufacturer: manufacturerName,\n                      model: modelName,\n                      hardwareVersion: hardwareVersionNumber,\n                      firmwareVersion: firmwareVersionNumber,\n                      softwareVersion: softwareVersionNumber,\n                      localIdentifier: localIdentifier,\n                      UDIDeviceIdentifier: deviceIdentifier)\n \nlet metadata : [String : AnyObject] =\n    [HKMetadataKeyDigitalSignature:digitalSignature,\n     HKMetadataKeyTimeZone:timeZone]\n \nguard let categoryType =\n    HKObjectType.categoryTypeForIdentifier(HKCategoryTypeIdentifierSleepAnalysis) else {\n        fatalError(\"*** Unable to create a sleep analysis category type ***\")\n}\n \nlet categorySample = HKCategorySample(type: categoryType,\n                                      value: HKCategoryValueSleepAnalysis.Asleep.rawValue,\n                                      startDate: start,\n                                      endDate: end,\n                                      device: device,\n                                      metadata:metadata)\n\nSee Also\nCreating Category Samples\ninit(type: HKCategoryType, value: Int, start: Date, end: Date)\nCreates a newly instantiated category sample.\ninit(type: HKCategoryType, value: Int, start: Date, end: Date, metadata: [String : Any]?)\nCreates a newly instantiated category sample with the provided metadata.\nRelated Documentation\nvar value: Int\nThe category value for this sample.\nclass func categoryType(forIdentifier: HKCategoryTypeIdentifier) -> HKCategoryType?\nReturns the shared category type for the provided identifier.\nvar endDate: Date\nThe sample’s end date.\nvar categoryType: HKCategoryType\nThe category type for this sample.\nvar startDate: Date\nThe sample’s start date."
  },
  {
    "title": "init(type:value:start:end:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkcategorysample/1615063-init",
    "html": "Parameters\ntype\n\nThe category type for this sample. For a complete list, see Category Type Identifiers in HealthKit Constants.\n\nvalue\n\nThe value for this sample. This value must come from the appropriate category value enumeration. Each category type uses its own enumeration. For more information, see Category Type Identifiers in HealthKit Constants.\n\nstartDate\n\nThe start date for the sample. This must be equal to or earlier than the end date; otherwise, this method throws an exception (invalidArgumentException).\n\nendDate\n\nThe end date for the sample. This must be equal to or later than the start date; otherwise, this method throws an exception (invalidArgumentException).\n\nReturn Value\n\nA valid category sample.\n\nDiscussion\n\nHealthKit uses category samples to represent data that can be classified into a finite set of categories. To create a category sample, you must first create the corresponding category type, and then set its start and end dates, as shown below.\n\nguard let categoryType =\n    HKObjectType.categoryTypeForIdentifier(HKCategoryTypeIdentifierSleepAnalysis) else {\n        fatalError(\"*** Unable to create a sleep analysis category type ***\")\n}\n \nlet categorySample = HKCategorySample(type: categoryType,\n                                      value: HKCategoryValueSleepAnalysis.Asleep.rawValue,\n                                      startDate: start,\n                                      endDate: end)\n\nSee Also\nCreating Category Samples\ninit(type: HKCategoryType, value: Int, start: Date, end: Date, metadata: [String : Any]?)\nCreates a newly instantiated category sample with the provided metadata.\ninit(type: HKCategoryType, value: Int, start: Date, end: Date, device: HKDevice?, metadata: [String : Any]?)\nCreates a newly instantiated category sample including the provided device and metadata.\nRelated Documentation\nvar value: Int\nThe category value for this sample.\nclass func categoryType(forIdentifier: HKCategoryTypeIdentifier) -> HKCategoryType?\nReturns the shared category type for the provided identifier.\nvar endDate: Date\nThe sample’s end date.\nvar categoryType: HKCategoryType\nThe category type for this sample.\nvar startDate: Date\nThe sample’s start date."
  },
  {
    "title": "fhirVersion | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkfhirresource/3552010-fhirversion",
    "html": "See Also\nAccessing FHIR Data\nvar identifier: String\nThe value from the FHIR resource’s id field.\nclass HKFHIRVersion\nThe FHIR version.\nvar resourceType: HKFHIRResourceType\nThe value from the FHIR resource’s resourceType field.\nstruct HKFHIRResourceType\nThe FHIR resource types supported in HealthKit.\nvar sourceURL: URL?\nThe full URL for the source of the FHIR resource.\nvar data: Data\nThe JSON representation of the FHIR resource."
  },
  {
    "title": "init(type:value:start:end:metadata:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkcategorysample/1615596-init",
    "html": "Parameters\ntype\n\nThe category type for this sample. For a complete list, see Category Type Identifiers in HealthKit Constants.\n\nvalue\n\nThe value for this sample. This value must come from the appropriate category value enumeration. Each category type uses its own enumeration. For more information, see Category Type Identifiers in HealthKit Constants.\n\nstartDate\n\nThe start date for the sample. This must be equal to or earlier than the end date; otherwise, this method throws an exception (NSInvalidArgumentException).\n\nendDate\n\nThe end date for the sample. This must be equal to or later than the start date; otherwise, this method throws an exception (NSInvalidArgumentException).\n\nmetadata\n\nThe metadata dictionary contains extra information describing this sample. The dictionary’s keys are all NSString objects. The values may be NSString objects, NSNumber objects or NSDate objects. For a complete list of predefined metadata keys, see Metadata Keys in HealthKit Constants.\n\nUsing predefined keys helps facilitate sharing data between apps; however, you are also encouraged to create your own, custom keys as needed to extend the HealthKit category sample’s capabilities.\n\nReturn Value\n\nA valid category sample with metadata.\n\nDiscussion\n\nHealthKit uses category samples to represent data that can be classified into a finite set of categories. To create a category sample, you must first create the corresponding category type and then set its start date, end date, and metadata, as shown below.\n\nlet metadata : [String : AnyObject] =\n    [HKMetadataKeyDigitalSignature:digitalSignature,\n     HKMetadataKeyTimeZone:timeZone]\n \nguard let categoryType =\n    HKObjectType.categoryTypeForIdentifier(HKCategoryTypeIdentifierSleepAnalysis) else {\n        fatalError(\"*** Unable to create a sleep analysis category type ***\")\n}\n \nlet categorySample = HKCategorySample(type: categoryType,\n                                      value: HKCategoryValueSleepAnalysis.Asleep.rawValue,\n                                      startDate: start,\n                                      endDate: end,\n                                      metadata:metadata)\n\nSee Also\nCreating Category Samples\ninit(type: HKCategoryType, value: Int, start: Date, end: Date)\nCreates a newly instantiated category sample.\ninit(type: HKCategoryType, value: Int, start: Date, end: Date, device: HKDevice?, metadata: [String : Any]?)\nCreates a newly instantiated category sample including the provided device and metadata.\nRelated Documentation\nvar value: Int\nThe category value for this sample.\nclass func categoryType(forIdentifier: HKCategoryTypeIdentifier) -> HKCategoryType?\nReturns the shared category type for the provided identifier.\nvar endDate: Date\nThe sample’s end date.\nvar metadata: [String : Any]?\nThe metadata for this HealthKit object.\nvar categoryType: HKCategoryType\nThe category type for this sample.\nvar startDate: Date\nThe sample’s start date."
  },
  {
    "title": "displayName | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkclinicalrecord/2976202-displayname",
    "html": "See Also\nAccessing Clinical Record Data\nvar clinicalType: HKClinicalType\nAn identifier that indicates the type of record, such as an allergic reaction, a lab result, or a medical procedure.\nvar fhirResource: HKFHIRResource?\nThe Fast Healthcare Interoperability Resources (FHIR) data for this record."
  },
  {
    "title": "HKPredicateKeyPathCDAAuthorName | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkpredicatekeypathcdaauthorname",
    "html": "See Also\nSpecifying Predicate Key Paths\nlet HKPredicateKeyPathCDACustodianName: String\nThe key path for accessing the custodian’s name inside a predicate format string.\nlet HKPredicateKeyPathCDAPatientName: String\nThe key path for accessing the patient’s name inside a predicate format string.\nlet HKPredicateKeyPathCDATitle: String\nThe key path for accessing the document’s title inside a predicate format string."
  },
  {
    "title": "HKCDADocument | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkcdadocument",
    "html": "Overview\n\nCDA documents use XML to encode clinical documents so that they can be easily exchanged. For more information on the CDA document format, see the Clinical Document Architecture, R2 standard.\n\nDo not instantiate HKCDADocument objects directly. Instead, create a new HKCDADocumentSample object by calling the init(data:start:end:metadata:) method, and passing the CDA’s XML data. HealthKit creates a HKCDADocument object for the XML, and assigns it to the sample’s document property.\n\nHKCDADocument objects are immutable. When you create a new document sample, HealthKit parses the title, patient name, author name, and custodian name from the XML to populates the document object’s properties. These properties cannot be changed.\n\nLike many HealthKit classes, the HKCDADocument class should not be subclassed.\n\nTopics\nAccessing the Document’s Data\nvar authorName: String\nThe document’s author.\nvar custodianName: String\nThe name of the organization responsible for the document.\nvar documentData: Data?\nThe CDA document stored as XML data.\nvar patientName: String\nThe patient’s name.\nvar title: String\nThe document’s title.\nRelationships\nInherits From\nNSObject\nSee Also\nAccessing the Document\nvar document: HKCDADocument?\nThe CDA document."
  },
  {
    "title": "HKFHIRVersion | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkfhirversion",
    "html": "Overview\n\nUse an HKFHIRVersion instance to represent the version of the Fast Healthcare Interoperability Resources (FHIR) standard used to create a HKFHIRResource sample.\n\nTopics\nCreating Version Objects\ninit(fromVersionString: String)\nCreates an FHIR version object from a string representation of the version.\nclass func primaryDSTU2() -> Self\nReturns the primary Second Draft Standard for Trial Use (DSTU2) version.\nclass func primaryR4() -> Self\nReturns the primary Release 4 (R4) version.\nAccessing Version Data\nvar majorVersion: Int\nThe standard’s major version number.\nvar minorVersion: Int\nThe standard’s minor version number.\nvar patchVersion: Int\nThe standard’s patch version number.\nvar stringRepresentation: String\nA string representation of the version.\nAccessing the Release\nvar fhirRelease: HKFHIRRelease\nAn official release of the FHIR specification.\nstruct HKFHIRRelease\nOfficial releases of the FHIR specification.\nRelationships\nInherits From\nNSObject\nConforms To\nNSCopying\nNSSecureCoding\nSee Also\nAccessing FHIR Data\nvar identifier: String\nThe value from the FHIR resource’s id field.\nvar fhirVersion: HKFHIRVersion\nThe FHIR version used by this resource.\nvar resourceType: HKFHIRResourceType\nThe value from the FHIR resource’s resourceType field.\nstruct HKFHIRResourceType\nThe FHIR resource types supported in HealthKit.\nvar sourceURL: URL?\nThe full URL for the source of the FHIR resource.\nvar data: Data\nThe JSON representation of the FHIR resource."
  },
  {
    "title": "document | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkcdadocumentsample/1779383-document",
    "html": "Discussion\n\nIf the user is authorized to access the document’s data, this property contains an HKCDADocument object representing that data. Otherwise, it is set to nil.\n\nThe user is asked to authorize each CDA document the first time that document is returned by an HKDocumentQuery query. The user can change the access permissions in the Health app.\n\nFor samples returned by an HKSampleQuery or an HKAnchoredObjectQuery, this property is always set to nil. To access the document’s data from these samples, create a HKDocumentQuery query for the sample’s UUID.\n\nSee Also\nAccessing the Document\nclass HKCDADocument\nAn object representing a Clinical Document Architecture (CDA) document in HealthKit."
  },
  {
    "title": "HKDetailedCDAValidationErrorKey | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkdetailedcdavalidationerrorkey",
    "html": "See Also\nCreating CDA Samples\ninit(data: Data, start: Date, end: Date, metadata: [String : Any]?)\nReturns a CDA document sample containing the provided XML document and metadata."
  },
  {
    "title": "HKPredicateKeyPathCDACustodianName | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkpredicatekeypathcdacustodianname",
    "html": "See Also\nSpecifying Predicate Key Paths\nlet HKPredicateKeyPathCDAAuthorName: String\nThe key path for accessing the author’s name inside a predicate format string.\nlet HKPredicateKeyPathCDAPatientName: String\nThe key path for accessing the patient’s name inside a predicate format string.\nlet HKPredicateKeyPathCDATitle: String\nThe key path for accessing the document’s title inside a predicate format string."
  },
  {
    "title": "fullName | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkverifiableclinicalrecordsubject/3795589-fullname",
    "html": "See Also\nAccessing Patient Data\nvar dateOfBirthComponents: DateComponents?\nThe subject’s birthdate."
  },
  {
    "title": "clinicalType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkclinicalrecord/2976201-clinicaltype",
    "html": "See Also\nAccessing Clinical Record Data\nvar displayName: String\nThe primary display name as shown in the Health app.\nvar fhirResource: HKFHIRResource?\nThe Fast Healthcare Interoperability Resources (FHIR) data for this record."
  },
  {
    "title": "samplePredicates | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkcorrelationquery/1614147-samplepredicates",
    "html": "Discussion\n\nThe query uses this dictionary to perform complex tests against the correlation’s contents. For more information, see init(type:predicate:samplePredicates:completion:).\n\nSee Also\nGetting Property Data\nvar correlationType: HKCorrelationType\nThe type of correlation to search for."
  },
  {
    "title": "sortDescriptors | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hksamplequery/1615128-sortdescriptors",
    "html": "See Also\nGetting Property Data\nvar limit: Int\nThe maximum number of samples that this query returns."
  },
  {
    "title": "correlationType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkcorrelationquery/1614146-correlationtype",
    "html": "See Also\nGetting Property Data\nvar samplePredicates: [HKSampleType : NSPredicate]?\nA dictionary whose keys are HKSampleType instances and whose values are NSPredicate instances."
  },
  {
    "title": "init(type:predicate:samplePredicates:completion:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkcorrelationquery/1614145-init",
    "html": "Parameters\ncorrelationType\n\nThe type of correlation to search for.\n\npredicate\n\nA predicate that limits the results returned by the query. This predicate is compared with the correlation objects. Pass nil to receive all the correlations of the specified type.\n\nsamplePredicates\n\nA dictionary whose keys are HKSampleType instances, and whose values are NSPredicate instances. The query iterates over all the samples in the correlation. For each sample, it looks up the corresponding predicate based on the sample’s type and then evaluates that predicate against the sample. If the dictionary does not contain a matching sample type, the query treats it as a nil predicate, and accepts the sample.\n\nThree things must be true if this query is going to match a correlation:\n\nThe correlation object must match the provided predicate parameter.\n\nFor each key in the sample predicate dictionary, the correlation must contain a sample whose type matches the key. In other words, the keys from the sample predicate dictionary define the set of required samples for the correlation.\n\nFor each sample in the correlation, use the sample’s type to look up its predicate in the sample predicate dictionary. If the dictionary contains a matching predicate, the sample must match that predicate. If the dictionary does not contain a matching predicate, the sample is ignored (it can have any value).\n\ncompletion\n\nA block that is called when the query finishes executing. This block takes the following parameters:\n\nquery\n\nA reference to the query that called this block.\n\ncorrelations\n\nAn array containing the correlations found by the query, or nil if an error occurs.\n\nerror\n\nIf an error occurred, this parameter contains an object describing the error; otherwise, it is nil.\n\nReturn Value\n\nA newly initialized correlation object.\n\nDiscussion\n\nAfter instantiating the query, run it by calling the HKHealthStore class’s execute(_:) method. Queries run on a background thread. As soon as the query is complete, the results handler is executed on the background thread. You typically dispatch these results to the main thread to update the user interface."
  },
  {
    "title": "addAttachment(to:name:contentType:url:metadata:completion:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkattachmentstore/3974152-addattachment",
    "html": "Parameters\nobject\n\nAn object stored in the HealthKit store.\n\nname\n\nThe filename for the attachment.\n\ncontentType\n\nThe type of data stored in the attachment.\n\nurl\n\nThe url for the attachment. This must be a local file url.\n\nmetadata\n\nAdditional data associated with the attachment.\n\ncompletion\n\nA completion handler that the system calls after adding the attachment. This handler takes the following parameters:\n\nattachment\n\nAn object that represents the attachment. If an error occurred, the system sets this parameter to nil.\n\nerror\n\nIf an error occurred, this parameter contains information about the error. Otherwise, it’s nil.\n\nDiscussion\n\nUse this method to add an attachment to an object in the HealthKit store. You can add more than one attachment to the specified object.\n\nTo add an attachment, start by creating an attachment store.\n\n// Get the attachment store.\nlet attachmentStore = HKAttachmentStore(healthStore: store)\n\n\nNext, add the attachment to an object that you’ve already saved to the HealthKit store.\n\n// Get the attachment store.\nlet attachmentStore = HKAttachmentStore(healthStore: store)\n\n\n// Attach the image to the sample.\nattachmentStore.addAttachment(to: prescription,\n                              name: \"Glasses Prescription\",\n                              contentType: type,\n                              url: url) { attachment, error in\n    \n    if let error {\n        // Handle the error here.\n        fatalError(\"*** An error occurred while adding the attachment: \\(error.localizedDescription) ***\")\n    }\n}\n\n\nYou can only add attachments to HKVisionPrescription, HKGlassesPrescription, and HKContactsPrescription samples. The attachment must be a static image or PDF (no videos or GIFs). HealthKit supports attaching Live Photos, however it automatically selects and attaches the key photo.\n\nSee Also\nAdding attachments\nfunc addAttachment(to: HKObject, name: String, contentType: UTType, url: URL, metadata: [String : Any]) -> HKAttachment\nAsynchronously adds an attachment to the specified object."
  },
  {
    "title": "metadata | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkattachment/3951050-metadata",
    "html": "Discussion\n\nThe metadata dictionary contains extra information describing this object. The dictionary’s keys are all strings. The values can be strings, numbers, or dates. For a complete list of predefined metadata keys, see Metadata Keys.\n\nUsing predefined keys helps facilitate sharing data between apps; however, you’re also encouraged to create your own, custom keys as needed to extend a HealthKit object’s capabilities.\n\nSee Also\nAccessing attachment data\nvar name: String\nThe name of the attached file.\nvar identifier: UUID\nThe universally unique identifier for the attached file.\nvar contentType: UTType\nThe type of data stored in the attached file.\nvar size: Int\nThe attachment’s size (in bytes).\nvar creationDate: Date\nThe attachment’s creation date.\nstruct HKAttachment.AsyncBytes\nAn asynchronous sequence that returns the attached file as a series of bytes."
  },
  {
    "title": "dataReader(for:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkattachmentstore/3952591-datareader",
    "html": "Parameters\nattachment\n\nAn attachment associated with an object in the HealthKit store.\n\nDiscussion\n\nCall this method to access a data reader for the attachment’s contents.\n\n// Get a data reader for the attachment.\nlet dataReader = attachmentStore.dataReader(for: myAttachment)\n\n\nYou can then read the attachment’s contents from the data reader.\n\nlet data: Data\ndo {\n    data = try await dataReader.data\n} catch {\n    // Handle the error here.\n    fatalError(\"*** An error occurred while accessing the attachment's data. \\(error.localizedDescription) ***\")\n}\n\n\n// Use the data here.\n\n\nAlternatively, you can access the file’s contents as an asynchronous sequence of bytes.\n\n// Asynchronously access the attachment's bytes.\nvar data = Data()\ndo {\n    for try await byte in dataReader.bytes {\n        // Use the bytes here.\n        data.append(byte)\n    }\n} catch {\n    // Handle the error here.\n    fatalError(\"*** An error occurred while reading the attachment's data: \\(error.localizedDescription) ***\")\n}\n\n\nSee Also\nAccessing attachments\nfunc getAttachments(for: HKObject, completion: ([HKAttachment]?, Error?) -> Void)\nReturns all the attachments for the specified object.\nfunc getData(for: HKAttachment, completion: (Data?, Error?) -> Void) -> Progress\nReturns an attachment’s data.\nfunc streamData(for: HKAttachment, dataHandler: (Data?, Error?, Bool) -> Void) -> Progress\nAsynchronously returns the attachment’s data."
  },
  {
    "title": "removeAttachment(_:from:completion:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkattachmentstore/3951059-removeattachment",
    "html": "Parameters\nattachment\n\nAn attachment associated with the specified object.\n\nobject\n\nAn object from the HealthKit store.\n\ncompletion\n\nA completion handler that the system calls after removing the attachment. This handler takes the following parameters:\n\nsuccess\n\nA Boolean value that indicates whether the system successfully removed the attachment.\n\nerror\n\nIf an error occurred, this parameter contains information about the error. Otherwise, it’s nil.\n\nDiscussion\n\nConcurrency Note\n\nYou can call this method from synchronous code using a completion handler, as shown on this page, or you can call it as an asynchronous method that has the following declaration:\n\nfunc removeAttachment(_ attachment: HKAttachment, from object: HKObject) async throws\n\n\nFor information about concurrency and asynchronous code in Swift, see Calling Objective-C APIs Asynchronously.\n\nUse this method to remove an attachment from an object saved in the HealthKit store.\n\n// Remove the attachment from the specified object.\ndo {\n    try await attachmentStore.removeAttachment(myAttachment, from: myObject)\n} catch {\n    // Handle the error here.\n    fatalError(\"*** An error occurred while removing an attachment: \\(error.localizedDescription) ***\")\n}\n"
  },
  {
    "title": "init(amount:angle:eye:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkvisionprism/3929750-init",
    "html": "Parameters\namount\n\nThe strength of the correction, measured in prismDiopter() units.\n\nangle\n\nThe orientation of the adjustment, measured in degreeAngle() units.\n\neye\n\nA value indicating which eye the correction applies to: HKVisionEye.left or HKVisionEye.right.\n\nSee Also\nCreating vision prism objects\ninit(verticalAmount: HKQuantity, verticalBase: HKPrismBase, horizontalAmount: HKQuantity, horizontalBase: HKPrismBase, eye: HKVisionEye)\nCreates a new vision prism object that separates the correction strength into horizontal and vertical components."
  },
  {
    "title": "eye | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkvisionprism/3929747-eye",
    "html": "See Also\nAccessing lens specification data\nenum HKVisionEye\nA value that specifies the eye for a vision prescription.\nvar amount: HKQuantity\nThe strength of the correction.\nvar angle: HKQuantity\nThe orientation of the adjustment.\nvar horizontalAmount: HKQuantity\nThe strength of the horizontal correction.\nvar horizontalBase: HKPrismBase\nThe orientation of the horizontal portion of the correction.\nvar verticalAmount: HKQuantity\nThe strength of the vertical correction.\nvar verticalBase: HKPrismBase\nThe orientation of the vertical portion of the correction.\nenum HKPrismBase\nThe orientation of the prism correction, represented by the location of the prism’s base (the thickest part of the prism)."
  },
  {
    "title": "cylinder | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hklensspecification/3916011-cylinder",
    "html": "Discussion\n\nThis quantity measures the strength of the correction in diopter() units. The range is -3.0 to 3.0.\n\nSee Also\nAccessing lens specification data\nvar sphere: HKQuantity\nThe correction for farsightedness.\nvar axis: HKQuantity?\nPart of the correction for astigmatism that measures the orientation fo the correction.\nvar addPower: HKQuantity?\nThe correction for nearsightedness."
  },
  {
    "title": "init(activityType:locationType:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkoutsession/1627956-init",
    "html": "Deprecated\n\nUse init(healthStore:configuration:) instead.\n\nParameters\nactivityType\n\nThe type of activity being performed in the workout. For a list of possible activities, see HKWorkoutActivityType.\n\nlocationType\n\nA value indicating whether the workout was performed indoors or outdoors. For a list of possible location values, see HKWorkoutSessionLocationType.\n\nReturn Value\n\nA newly initialized workout session object for the specified activity type and location.\n\nDiscussion\n\nHealthKit uses the session’s workout activity and location type to fine tune Apple Watch’s sensors for the selected activity. All workout sessions generate higher-frequency heart rate samples; however, an outdoor cycling activity generates more accurate location data, while an indoor cycling activity does not.\n\nSee Also\nDeprecated methods\ninit(configuration: HKWorkoutConfiguration)\nReturns a newly instantiated workout session.\nDeprecated\nvar activityType: HKWorkoutActivityType\nThe workout activity performed during this session.\nvar locationType: HKWorkoutSessionLocationType\nA value that indicates whether the workout session occurred indoors or outdoors."
  },
  {
    "title": "axis | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hklensspecification/3916010-axis",
    "html": "Discussion\n\nThis quantity measures the orientation of the correction in degreeAngle() units.\n\nSee Also\nAccessing lens specification data\nvar sphere: HKQuantity\nThe correction for farsightedness.\nvar cylinder: HKQuantity?\nPart of the correction for astigmatism that measures the strength of the correction.\nvar addPower: HKQuantity?\nThe correction for nearsightedness."
  },
  {
    "title": "addPower | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hklensspecification/3929703-addpower",
    "html": "Discussion\n\nThis quantity uses diopter() units. The range is from 0.25 to 2.5. The right and left eyes should have the same value.\n\nSee Also\nAccessing lens specification data\nvar sphere: HKQuantity\nThe correction for farsightedness.\nvar cylinder: HKQuantity?\nPart of the correction for astigmatism that measures the strength of the correction.\nvar axis: HKQuantity?\nPart of the correction for astigmatism that measures the orientation fo the correction."
  },
  {
    "title": "endCurrentActivity(on:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkoutsession/3955296-endcurrentactivity",
    "html": "Parameters\ndate\n\nThe end date and time for the activity.\n\nDiscussion\n\nThis method asynchronously ends the current activity. HealthKit calls the session delegate’s workoutSession(_:didEndActivityWith:date:) method after the activity ends. HealthKit stops collecting data related to this activity.\n\nSee Also\nManaging workout activities\nvar currentActivity: HKWorkoutActivity\nThe current workout activity.\nfunc beginNewActivity(configuration: HKWorkoutConfiguration, date: Date, metadata: [String : Any]?)\nBegins a new workout activity in the workout session."
  },
  {
    "title": "HKMetadataKeySexualActivityProtectionUsed | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkmetadatakeysexualactivityprotectionused",
    "html": "Discussion\n\nSet this key’s value to true if protection was used during sexual activity; otherwise, set it to false.\n\nSee Also\nReproductive Health Keys\nlet HKMetadataKeyMenstrualCycleStart: String\nA key that indicates whether the sample represents the start of a menstrual cycle. This metadata key is required for menstrualFlow category samples."
  },
  {
    "title": "observation | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkfhirresourcetype/2980685-observation",
    "html": "See Also\nResource Types\nstatic let allergyIntolerance: HKFHIRResourceType\nA type that identifies FHIR resources for allergies and intolerances.\nstatic let condition: HKFHIRResourceType\nA type that identifies FHIR resources for a condition, problem, diagnosis, or other event.\nstatic let diagnosticReport: HKFHIRResourceType\nA type that identifies FHIR resources for findings and interpretation of diagnostic tests.\nstatic let documentReference: HKFHIRResourceType\nA type that identifies FHIR resources for document references.\nstatic let immunization: HKFHIRResourceType\nA type that identifies FHIR resources for the administration of vaccines.\nstatic let medicationOrder: HKFHIRResourceType\nA type that identifies FHIR resources for prescriptions or other orders for medication.\nstatic let medicationDispense: HKFHIRResourceType\nA type that identifies FHIR resources for the delivery of medication (usually in response to a prescription).\nstatic let medicationStatement: HKFHIRResourceType\nA type that identifies FHIR resources for statements about medication taken by the patient.\nstatic let medicationRequest: HKFHIRResourceType\nA type that identifies FHIR resources for prescriptions or other orders or requests for medication.\nstatic let procedure: HKFHIRResourceType\nA type that identifies FHIR resources for procedures performed on the patient.\nstatic let coverage: HKFHIRResourceType\nA type that identifies FHIR resources containing information about the user’s insurance coverage.\nRelated Documentation\nstatic let labResultRecord: HKClinicalTypeIdentifier\nA type identifier for records of lab results.\nstatic let vitalSignRecord: HKClinicalTypeIdentifier\nA type identifier for records of vital signs."
  },
  {
    "title": "HKPredicateKeyPathCDAPatientName | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkpredicatekeypathcdapatientname",
    "html": "See Also\nSpecifying Predicate Key Paths\nlet HKPredicateKeyPathCDAAuthorName: String\nThe key path for accessing the author’s name inside a predicate format string.\nlet HKPredicateKeyPathCDACustodianName: String\nThe key path for accessing the custodian’s name inside a predicate format string.\nlet HKPredicateKeyPathCDATitle: String\nThe key path for accessing the document’s title inside a predicate format string."
  },
  {
    "title": "fhirResource | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkclinicalrecord/2976199-fhirresource",
    "html": "See Also\nAccessing Clinical Record Data\nvar clinicalType: HKClinicalType\nAn identifier that indicates the type of record, such as an allergic reaction, a lab result, or a medical procedure.\nvar displayName: String\nThe primary display name as shown in the Health app."
  },
  {
    "title": "resourceType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkfhirresource/2976219-resourcetype",
    "html": "See Also\nAccessing FHIR Data\nvar identifier: String\nThe value from the FHIR resource’s id field.\nvar fhirVersion: HKFHIRVersion\nThe FHIR version used by this resource.\nclass HKFHIRVersion\nThe FHIR version.\nstruct HKFHIRResourceType\nThe FHIR resource types supported in HealthKit.\nvar sourceURL: URL?\nThe full URL for the source of the FHIR resource.\nvar data: Data\nThe JSON representation of the FHIR resource."
  },
  {
    "title": "init(sensitivityPoints:start:end:metadata:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkaudiogramsample/3043909-init",
    "html": "Parameters\nsensitivityPoints\n\nAn array of sensitivity points.\n\nstart\n\nThe start date for the sample. This date must be equal to or earlier than the end date; otherwise, this method throws an exception (invalidArgumentException).\n\nend\n\nThe end date for the sample. This date must be equal to or later than the start date; otherwise, this method throws an exception (invalidArgumentException).\n\nmetadata\n\nThe metadata dictionary contains extra information describing this sample. The dictionary’s keys are strings. The values may be strings, numbers, or dates. For a complete list of predefined metadata keys, see Metadata Keys.\n\nUsing predefined keys helps facilitate sharing data between apps; however, you are also encouraged to create your own, custom keys as needed to extend the HealthKit quantity sample’s capabilities."
  },
  {
    "title": "init(frequency:leftEarSensitivity:rightEarSensitivity:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkaudiogramsensitivitypoint/3042432-init",
    "html": "Parameters\nfrequency\n\nThe frequency tested. This object uses hertz() units.\n\nleftEarSensitivity\n\nThe sensitivity of the left ear, measured in attenuated dB from a baseline of 0 db. This object uses decibelHearingLevel() units.\n\nrightEarSensitivity\n\nThe sensitivity of the right ear, measured in attenuated dB from a baseline of 0 db. This object uses decibelHearingLevel() units."
  },
  {
    "title": "frequency | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkaudiogramsensitivitypoint/3042429-frequency",
    "html": "Discussion\n\nThis object uses hertz() units.\n\nSee Also\nAccessing Data\nvar leftEarSensitivity: HKQuantity?\nThe sensitivity of the left ear.\nvar rightEarSensitivity: HKQuantity?\nThe sensitivity of the right ear."
  },
  {
    "title": "insert(_:at:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquantityseriessamplebuilder/2990396-insert",
    "html": "Parameters\nquantity\n\nThe quantity to insert.\n\ndate\n\nThe start date associated with the quantity. If this is the same start date as a previously provided quantity, this quantity replaces the previous one.\n\nFails with an HKError.Code.errorInvalidArgument error if the date parameter is earlier than the series builder’s startDate property.\n\nDiscussion\n\nThis method calls insert(_:for:), passing a date interval with the provided start date, and a duration of 0.\n\nSee Also\nAdding Values\nfunc insert(HKQuantity, for: DateInterval)\nAdds a new quantity to the series with the provided date interval."
  },
  {
    "title": "leftEarSensitivity | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkaudiogramsensitivitypoint/3042430-leftearsensitivity",
    "html": "Discussion\n\nThis object uses decibelHearingLevel() units to measure sensitivity in attenuated dB from a baseline of 0 dB.\n\nSee Also\nAccessing Data\nvar frequency: HKQuantity\nThe frequency tested in the hearing test.\nvar rightEarSensitivity: HKQuantity?\nThe sensitivity of the right ear."
  },
  {
    "title": "device | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquantityseriessamplebuilder/2990392-device",
    "html": "See Also\nCreating a Quantity Series Builder\ninit(healthStore: HKHealthStore, quantityType: HKQuantityType, startDate: Date, device: HKDevice?)\nCreates a new quantity series builder.\nvar quantityType: HKQuantityType\nThe quantity type for the series.\nvar startDate: Date\nThe starting date and time for the sample."
  },
  {
    "title": "init(healthStore:quantityType:startDate:device:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquantityseriessamplebuilder/2990395-init",
    "html": "Parameters\nhealthStore\n\nThe HealthKit store.\n\nquantityType\n\nThe sample’s quantity type.\n\nstart\n\nThe sample’s start date.\n\ndevice\n\nAn object representing the device that provided the data. Pass nil if the app is generating its own data.\n\nSee Also\nCreating a Quantity Series Builder\nvar quantityType: HKQuantityType\nThe quantity type for the series.\nvar startDate: Date\nThe starting date and time for the sample.\nvar device: HKDevice?\nThe device providing the data."
  },
  {
    "title": "startDate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquantityseriessamplebuilder/2990398-startdate",
    "html": "See Also\nCreating a Quantity Series Builder\ninit(healthStore: HKHealthStore, quantityType: HKQuantityType, startDate: Date, device: HKDevice?)\nCreates a new quantity series builder.\nvar quantityType: HKQuantityType\nThe quantity type for the series.\nvar device: HKDevice?\nThe device providing the data."
  },
  {
    "title": "sensitivityPoints | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkaudiogramsample/3042427-sensitivitypoints",
    "html": "Discussion\n\nEach sensitivity point represents a single result from a hearing test."
  },
  {
    "title": "quantityType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquantityseriessamplebuilder/2990397-quantitytype",
    "html": "See Also\nCreating a Quantity Series Builder\ninit(healthStore: HKHealthStore, quantityType: HKQuantityType, startDate: Date, device: HKDevice?)\nCreates a new quantity series builder.\nvar startDate: Date\nThe starting date and time for the sample.\nvar device: HKDevice?\nThe device providing the data."
  },
  {
    "title": "addMetadata(_:completion:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkheartbeatseriesbuilder/3113759-addmetadata",
    "html": "Parameters\nmetadata\n\nThe metadata dictionary contains extra information describing all the samples created by the builder. The dictionary’s keys are all strings. The values may be strings, numbers, or date objects. For a complete list of predefined metadata keys, see Metadata Keys.\n\nUsing predefined keys helps facilitate sharing data between apps; however, you are also encouraged to create your own, custom keys as needed to extend the samples' capabilities.\n\ncompletion\n\nThe completion handler called by the builder after it attempts to add the metadata to the series. The completion handler takes the following parameters:\n\nsuccess\n\nA Boolean value that indicates whether the builder successfully added the heartbeat.\n\nerror\n\nIf the success parameter is false, this contains an object that describes the error; otherwise, nil.\n\nDiscussion\n\nConcurrency Note\n\nYou can call this method from synchronous code using a completion handler, as shown on this page, or you can call it as an asynchronous method that has the following declaration:\n\nfunc addMetadata(_ metadata: [String : Any]) async throws\n\n\nFor information about concurrency and asynchronous code in Swift, see Calling Objective-C APIs Asynchronously.\n\nThe builder adds the metadata to the resulting series sample. It incorporates new data using addEntries(from:).\n\nSee Also\nAdding Data\nfunc addHeartbeatWithTimeInterval(sinceSeriesStartDate: TimeInterval, precededByGap: Bool, completion: (Bool, Error?) -> Void)\nAdds a heartbeat to the series."
  },
  {
    "title": "init(healthStore:configuration:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkoutsession/2962933-init",
    "html": "See Also\nRelated Documentation\nfunc associatedWorkoutBuilder() -> HKLiveWorkoutBuilder\nReturns the live workout builder associated with the workout session."
  },
  {
    "title": "delegate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkoutsession/1627964-delegate",
    "html": "Discussion\n\nThe delegate receives notifications when a workout session’s state changes or when a workout session fails.\n\nSee Also\nMonitoring the session\nprotocol HKWorkoutSessionDelegate\nThe session delegate protocol that defines an interface for receiving notifications about errors and changes in the workout session’s state."
  },
  {
    "title": "pause() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkoutsession/2962934-pause",
    "html": "See Also\nManaging the workout\nfunc prepare()\nPrepares the workout session.\nfunc startActivity(with: Date?)\nStarts the workout session activity, and sets the start date.\nfunc resume()\nResumes the workout session.\nfunc stopActivity(with: Date?)\nStops the workout session activity, and sets the end date.\nfunc end()\nEnds the workout session.\nRelated Documentation\ncase paused\nThe workout session has paused."
  },
  {
    "title": "stopActivity(with:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkoutsession/3017315-stopactivity",
    "html": "Parameters\ndate\n\nThe end date for the workout session. This must be equal to or after the start date.\n\nSee Also\nManaging the workout\nfunc prepare()\nPrepares the workout session.\nfunc startActivity(with: Date?)\nStarts the workout session activity, and sets the start date.\nfunc pause()\nPauses the workout session.\nfunc resume()\nResumes the workout session.\nfunc end()\nEnds the workout session.\nRelated Documentation\ncase stopped\nThe session has stopped."
  },
  {
    "title": "init(rawValue:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkverifiableclinicalrecordsourcetype/3922618-init",
    "html": "Parameters\nrawValue\n\nThe raw string for the source type."
  },
  {
    "title": "init(source:version:productType:operatingSystemVersion:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hksourcerevision/2865763-init",
    "html": "Parameters\nsource\n\nThe source for a sample.\n\nversion\n\nA string that uniquely identifies the source’s version.\n\nproductType\n\nA string that identifies the device used to save the sample.\n\noperatingSystemVersion\n\nA string that identifies the operating system used to save the sample.\n\nReturn Value\n\nA newly initialized source revision object.\n\nDiscussion\n\nUse this method to create source revisions for use in queries. For more information, see HKPredicateKeyPathSourceRevision.\n\nSee Also\nCreating Source Revision Objects\ninit(source: HKSource, version: String?)\nInitializes a new source revision object with the provided source and version information.\nRelated Documentation\nlet HKSourceRevisionAnyVersion: String\nA constant that matches any version.\nlet HKSourceRevisionAnyProductType: String\nA constant that matches any product type.\nlet HKSourceRevisionAnyOperatingSystem: OperatingSystemVersion\nA constant that matches any operating system."
  },
  {
    "title": "init(sphere:cylinder:axis:addPower:vertexDistance:prism:farPupillaryDistance:nearPupillaryDistance:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkglasseslensspecification/3929701-init",
    "html": "Parameters\nsphere\n\nThe correction for farsightedness, measured in diopter() units. The range is -10.5 to +6.5.\n\ncylinder\n\nPart of the correction for astigmatism. This property measures the strength of the correction in diopter() units. The range is -3.0 to 3.0.\n\naxis\n\nPart of the correction for astigmatism. This property measures the orientation of the correction in degreeAngle() units.\n\naddPower\n\nThe correction for nearsightedness, measured in diopter() units. The range is from 0.25 to 2.5. The right and left eyes should have the same value.\n\nvertexDistance\n\nThe distance between the back of the lens and the eye, measured in mm. The range is 12 to 14 mm.\n\nprism\n\nAn object that contains information about the correction for eye alignment. For more information, see HKVisionPrism.\n\nfarPupillaryDistance\n\nThe distance between the pupil and the center of the nose when looking at an object far away, measured in mm.\n\nnearPupillaryDistance\n\nThe distance between the pupil and the center of the nose when looking at a nearby object, measured in mm."
  },
  {
    "title": "HKCategoryValueAppleStandHour | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkcategoryvalueapplestandhour",
    "html": "Topics\nConstants\ncase stood\nThe user stood up and moved for at least one continuous minute during the sample.\ncase idle\nThe user didn’t stand up and move for at least one continuous minute during the sample.\nRelationships\nConforms To\nHKCategoryValuePredicateProviding\nSendable\nSee Also\nAccessing the summary’s data\nvar activityMoveMode: HKActivityMoveMode\nThe move mode that they system used for this activity summary.\nenum HKActivityMoveMode\nConstants that specify the value measured by the Move ring on the user’s device.\nvar activeEnergyBurned: HKQuantity\nThe amount of active energy the user burned during the specified day.\nvar activeEnergyBurnedGoal: HKQuantity\nThe user’s daily goal for active energy burned.\nvar appleMoveTime: HKQuantity\nThe amount of time the user spent performing activities that involve full-body movements during the specified day.\nvar appleMoveTimeGoal: HKQuantity\nThe user’s daily goal for move time.\nvar appleExerciseTime: HKQuantity\nThe amount of time that the user has spent exercising during the specified day.\nvar appleExerciseTimeGoal: HKQuantity\nThe user’s daily exercise goal.\nvar exerciseTimeGoal: HKQuantity?\nThe user’s daily goal for exercise time.\nvar appleStandHours: HKQuantity\nThe number hours in the specified day during which the user has stood and moved for at least a minute per hour.\nvar standHoursGoal: HKQuantity?\nThe user’s daily goal for stand hours.\nvar appleStandHoursGoal: HKQuantity\nThe user’s daily goal for stand hours.\nfunc dateComponents(for: Calendar) -> DateComponents\nDate components that uniquely identify the day represented by the summary object."
  },
  {
    "title": "init(source:version:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hksourcerevision/1614799-init",
    "html": "Parameters\nsource\n\nThe source for a sample.\n\nversion\n\nA string that uniquely identifies the source’s version.\n\nReturn Value\n\nA newly initialized source revision object.\n\nDiscussion\n\nUse this method to create source revisions for use in queries. For more information, see HKPredicateKeyPathSourceRevision.\n\nOn iOS 9.0 or later, the system automatically creates a source revision for any samples saved to the HealthKit store. For earlier versions of iOS, the system only saves HKSource information. However, when these samples are retrieved on iOS 9.0 or later, the system creates a new source revision object for the sample. HealthKit uses the previously stored source information with a nil-valued version string.\n\nSee Also\nCreating Source Revision Objects\ninit(source: HKSource, version: String?, productType: String?, operatingSystemVersion: OperatingSystemVersion)\nInitializes a new source revision object with the provided source, version, product type, and operating system.\nRelated Documentation\nlet HKSourceRevisionAnyVersion: String\nA constant that matches any version."
  },
  {
    "title": "version | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hksourcerevision/1614798-version",
    "html": "Discussion\n\nThis property contains a string that identifies the version of the app or device used to save the sample. If the sample is saved by an app, the property contains the current version number of the app (for example, 1.4). If it is saved by an iOS device or an Apple Watch, the property contains the current version number of the device’s OS (for example, 9.0 or 2.0 respectively). If it is saved directly by a Bluetooth device, this property contains the version string provided by that device.\n\nNote\n\nFor samples saved prior to iOS 9.0 or watchOS 2.0, the version is set to nil.\n\nTopics\nConstants\nlet HKSourceRevisionAnyVersion: String\nA constant that matches any version.\nSee Also\nAccessing Source and Version Information\nvar source: HKSource\nThe source for a sample.\nvar operatingSystemVersion: OperatingSystemVersion\nA string that identifies the operating system used to save a sample.\nvar productType: String?\nA string that identifies the device used to save a sample."
  },
  {
    "title": "source | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hksourcerevision/1614797-source",
    "html": "Discussion\n\nThis property contains an HKSource object representing the app that saved the data into the HealthKit store. The source can also represent a hardware device that writes data directly to HealthKit (for example, an iPhone, Apple Watch, or Bluetooth LE heart rate monitor). Before iOS 9.0, the companion app for other peripherals also saved device information in the object’s source property.\n\nSee Also\nAccessing Source and Version Information\nvar version: String?\nA string that identifies a particular version of the source.\nvar operatingSystemVersion: OperatingSystemVersion\nA string that identifies the operating system used to save a sample.\nvar productType: String?\nA string that identifies the device used to save a sample."
  },
  {
    "title": "operatingSystemVersion | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hksourcerevision/2865764-operatingsystemversion",
    "html": "Discussion\n\nFor samples saved on watchOS 4.0, HealthKit sets the operating system property to {4, 0, 0}.\n\nNote\n\nFor samples saved using older versions of HealthKit, the system approximates the operating system. For instance, HealthKit marks samples saved after iOS 8.0 but before 8.2 as {8, 0, 0}. HealthKit marks samples saved after 8.2 but before 9.0 as {8, 2, 0}.\n\nTopics\nConstants\nlet HKSourceRevisionAnyOperatingSystem: OperatingSystemVersion\nA constant that matches any operating system.\nSee Also\nAccessing Source and Version Information\nvar source: HKSource\nThe source for a sample.\nvar version: String?\nA string that identifies a particular version of the source.\nvar productType: String?\nA string that identifies the device used to save a sample."
  },
  {
    "title": "HKMetadataKeyDateOfEarliestDataUsedForEstimate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkmetadatakeydateofearliestdatausedforestimate",
    "html": "Discussion\n\nThis key takes a Date value, indicating the earliest date from the data used by HealthKit to calculate the sample’s value."
  },
  {
    "title": "HKMetadataKeyBarometricPressure | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkmetadatakeybarometricpressure",
    "html": "Discussion\n\nThis key takes an HKQuantity value that measures the barometric pressure in units of pressure, such as atmosphere(), pascal(), or millimeterOfMercury().\n\nSee Also\nWeather Keys\nlet HKMetadataKeyWeatherCondition: String\nA key that represents the weather condition during the sample.\nlet HKMetadataKeyWeatherHumidity: String\nA key that represents the weather humidity during the sample.\nlet HKMetadataKeyWeatherTemperature: String\nA key that represents the weather temperature during the sample."
  },
  {
    "title": "init(data:start:end:metadata:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkcdadocumentsample/1779395-init",
    "html": "Parameters\ndocumentData\n\nThe CDA document in an XML format that meets the CDA standard. For more information on the CDA document format, see the Clinical Document Architecture, R2 standard.\n\nstartDate\n\nA fallback start date for the sample. This date is only used when the XML document does not include the document’s effective date.\n\nThis date must be equal to or earlier than the end date; otherwise, this method throws an exception (invalidArgumentException).\n\nendDate\n\nA fallback end date for the sample. This date is only used when the XML document does not include the document’s effective date.\n\nThis date must be equal to or later than the start date; otherwise, this method throws an exception (invalidArgumentException).\n\nmetadata\n\nThe metadata dictionary contains extra information describing this sample. The dictionary’s keys are all NSString objects. The values may be NSString objects, NSNumber objects, or NSDate objects. For a complete list of predefined metadata keys, see Metadata Keys in HealthKit Constants.\n\nUsing predefined keys helps facilitate sharing data between apps; however, you are also encouraged to create your own, custom keys as needed to extend the sample’s capabilities.\n\nvalidationError\n\nAn output parameter. Upon return, if an error occurred it contains an NSError object that describes the problem; otherwise it contains nil. If you are not interested in possible errors, pass in NULL.\n\nWhen this method is called, HealthKit validates the document data using the schema definition provided by the HL7 standard. For more information, see Clinical Document Architecture, R2. If the validation fails, then this parameter contains the relevant error object. You can access detailed information about the error from the validationError object’s userInfo dictionary using the HKDetailedCDAValidationErrorKey key.\n\nReturn Value\n\nA valid CDA document sample with the provided metadata.\n\nDiscussion\n\nTo create a CDA document sample:\n\nCreate NSDate objects to represent fallback start and end dates for the sample. Where possible, the system uses the effective date from the document’s XML data to set the sample’s start and end dates. The start and end date parameters are only used when the effective date is not available. Use the current date and time.\n\nCreate an NSData object that contains the CDA’s XML data.\n\n(optionally) Create an NSDictionary object containing any additional metadata for this sample.\n\nCall the HKCDADocumentSample class’s init(data:start:end:metadata:) method. Handle any errors that occur during XML validation.\n\nSave the sample to the HealthKit store. Handle any errors that occur while saving.\n\n// Creating a Health Document Using HKCDADocumentSample\nlet today = Date()\nlet documentData: Data = ... // Use XML data provided by a health organization\ndo {\n    let cdaSample = try HKCDADocumentSample.init(data: documentData, start: today, end:\n        today, metadata: nil)\n    healthStore.save(cdaSample) { success, error in\n        // Handle save error here...\n    }\n} catch {\n    // Handle validation error here...\n}\n\nSee Also\nCreating CDA Samples\nlet HKDetailedCDAValidationErrorKey: String\nA key for accessing validation error information from an error object’s user information dictionary."
  },
  {
    "title": "dateOfBirthComponents | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkverifiableclinicalrecordsubject/3801683-dateofbirthcomponents",
    "html": "See Also\nAccessing Patient Data\nvar fullName: String\nThe subject’s full name."
  },
  {
    "title": "HKMetadataKeyUDIDeviceIdentifier | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkmetadatakeyudideviceidentifier",
    "html": "Discussion\n\nThe device identifier can be used to reference the GUDID (Globally Unique Device Identification Database).\n\nThis key takes a string value.\n\nNote\n\nIn iOS 9.0 and later, the use of this key is discouraged. Use the HKDevice class instead.\n\nSee Also\nDevice Information Keys\nlet HKMetadataKeyDeviceSerialNumber: String\nThe key for the serial number of the device that generated the data.\nlet HKMetadataKeyUDIProductionIdentifier: String\nThe production identifier portion of a device’s UDI (unique device identifier).\nlet HKMetadataKeyDigitalSignature: String\nA digital signature that can be used to validate the origin of the HealthKit object.\nlet HKMetadataKeyDeviceName: String\nThe name of the device that took this reading.\nlet HKMetadataKeyDeviceManufacturerName: String\nThe name of the manufacturer of the device that took this reading.\nlet HKMetadataKeyDevicePlacementSide: String\nThe key for metadata indicating the placement of the device that measured a sample.\nenum HKDevicePlacementSide\nValues that indicate the placement of the device that measured a sample.\nlet HKMetadataKeyAppleDeviceCalibrated: String\nThe key for metadata indicating whether the system had data from a sufficient amount of calibrated sensors when recording the sample."
  },
  {
    "title": "HKMetadataKeyDeviceManufacturerName | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkmetadatakeydevicemanufacturername",
    "html": "Discussion\n\nThis key takes a string value.\n\nNote\n\nIn iOS 9.0 and later, the use of this key is discouraged. Use the HKDevice class instead.\n\nSee Also\nDevice Information Keys\nlet HKMetadataKeyDeviceSerialNumber: String\nThe key for the serial number of the device that generated the data.\nlet HKMetadataKeyUDIDeviceIdentifier: String\nThe device identifier portion of a device’s UDI (unique device identifier).\nlet HKMetadataKeyUDIProductionIdentifier: String\nThe production identifier portion of a device’s UDI (unique device identifier).\nlet HKMetadataKeyDigitalSignature: String\nA digital signature that can be used to validate the origin of the HealthKit object.\nlet HKMetadataKeyDeviceName: String\nThe name of the device that took this reading.\nlet HKMetadataKeyDevicePlacementSide: String\nThe key for metadata indicating the placement of the device that measured a sample.\nenum HKDevicePlacementSide\nValues that indicate the placement of the device that measured a sample.\nlet HKMetadataKeyAppleDeviceCalibrated: String\nThe key for metadata indicating whether the system had data from a sufficient amount of calibrated sensors when recording the sample."
  },
  {
    "title": "HKMetadataKeyQuantityClampedToLowerBound | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkmetadatakeyquantityclampedtolowerbound",
    "html": "See Also\nGeneral Keys\nlet HKMetadataKeyExternalUUID: String\nA unique identifier for an HKObject that is set by its source.\nlet HKMetadataKeyTimeZone: String\nThe user’s time zone when the HealthKit object was created.\nlet HKMetadataKeyWasUserEntered: String\nA key that indicates whether the sample was entered by the user.\nlet HKMetadataKeyQuantityClampedToUpperBound: String"
  },
  {
    "title": "HKCategoryValueCervicalMucusQuality | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkcategoryvaluecervicalmucusquality",
    "html": "Overview\n\nThese values are ordered from least-fertile (Dry) to most-fertile (EggWhite).\n\nTopics\nConstants\ncase dry\nLittle or no mucus.\ncase sticky\nSticky mucus.\ncase creamy\nCreamy mucus.\ncase watery\nWatery mucus.\ncase eggWhite\nMucus the color and consistency of egg whites.\nRelationships\nConforms To\nHKCategoryValuePredicateProviding\nSendable\nSee Also\nAssigning Values\nenum HKCategoryValue\nCategories that are undefined.\nenum HKCategoryValueMenstrualFlow\nCategories that indicate the amount of menstrual flow for a given sample.\nenum HKCategoryValueOvulationTestResult\nCategories that represent the result of an ovulation home test.\nenum HKCategoryValueContraceptive\nThe type of contraceptive.\nenum HKCategoryValueSleepAnalysis\nCategories that represent the result of a sleep analysis.\nenum HKCategoryValueAppetiteChanges\nCategories that represent change in appetite.\nenum HKCategoryValuePresence\nCategories that indicate whether a symptom is present.\nenum HKCategoryValueSeverity\nCategories that represent the severity of a symptom.\nenum HKCategoryValueEnvironmentalAudioExposureEvent\nExposure events for environmental audio.\nenum HKCategoryValueHeadphoneAudioExposureEvent\nExposure events for headphone audio.\nenum HKCategoryValueLowCardioFitnessEvent\nA value that indicates a low-level cardio fitness event.\nenum HKAppleWalkingSteadinessClassification\nA classification of a score based on the steadiness of the user’s gait.\nenum HKCategoryValueAppleWalkingSteadinessEvent\nThe value of an event triggered by a reduced score for the steadiness of the user’s gait.\nenum HKCategoryValuePregnancyTestResult\nCategory values that indicate the results of a home pregnancy test.\nenum HKCategoryValueProgesteroneTestResult\nA category value that indicates the result from a home progesterone test.\nenum HKCategoryValueAudioExposureEvent\nCategories that indicate audio exposure events."
  },
  {
    "title": "workoutEvents | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkoutbuilder/2962924-workoutevents",
    "html": "See Also\nAdding events to the workout\nfunc addWorkoutEvents([HKWorkoutEvent], completion: (Bool, Error?) -> Void)\nAdds a workout event to the builder."
  },
  {
    "title": "startMirroringToCompanionDevice(completion:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkoutsession/4165515-startmirroringtocompaniondevice",
    "html": "Parameters\ncompletion\n\nA block that the system calls when the start request is complete. The system sets the following parameters:\n\nsuccess\n\nA Boolean value that indicates whether the system successfully started mirroring the session.\n\nerror\n\nIf success is false, this contains an object that describes the error. Otherwise, it’s nil.\n\nDiscussion\n\nConcurrency Note\n\nYou can call this method from synchronous code using a completion handler, as shown on this page, or you can call it as an asynchronous method that has the following declaration:\n\nfunc startMirroringToCompanionDevice() async throws\n\n\nFor information on concurrency and asynchronous code in Swift, see Calling Objective-C APIs Asynchronously.\n\nCall this method in your watchOS app to start a mirrored workout session on the companion iOS app. If your iOS app isn’t running, the system launches it in the background. The iOS companion app must assign a completion handler to its HealthKit Store’s workoutSessionMirroringStartHandler property to process the incoming session.\n\nImportant\n\nThis method fails if you call it on a workout session that ended.\n\nlet configuration = HKWorkoutConfiguration()\nconfiguration.activityType = .running\nconfiguration.locationType = .outdoor\n\n\nlet session: HKWorkoutSession\ndo {\n    session = try HKWorkoutSession(healthStore: store,\n                                   configuration: configuration)\n} catch {\n    // Handle failure here.\n    fatalError(\"*** An error occurred: \\(error.localizedDescription) ***\")\n}\n\n\nlet builder = session.associatedWorkoutBuilder()\n\n\nlet source = HKLiveWorkoutDataSource(healthStore: store,\n                                     workoutConfiguration: configuration)\n\n\nsource.enableCollection(for: HKQuantityType(.stepCount), predicate: nil)\nbuilder.dataSource = source\n\n\nsession.delegate = self\nbuilder.delegate = self\n\n\nself.session = session\nself.builder = builder\n\n\nlet start = Date()\n\n\n// Start the mirrored session on the companion iPhone.\ndo {\n    try await session.startMirroringToCompanionDevice()\n}\ncatch {\n    fatalError(\"*** Unable to start the mirrored workout: \\(error.localizedDescription) ***\")\n}\n\n\n\n\n// Start the workout session.\nsession.startActivity(with: start)\n\n\ndo {\n    try await builder.beginCollection(at: start)\n} catch {\n    fatalError(\"*** An error occurred while starting the workout: \\(error.localizedDescription) ***\")\n}\n\n\nSee Also\nWorking with remote workout sessions\nfunc stopMirroringToCompanionDevice(completion: (Bool, Error?) -> Void)\nStops mirroring the workout session to the companion iOS device.\nfunc sendToRemoteWorkoutSession(data: Data, completion: (Bool, Error?) -> Void)\nSends the provided data to the remote workout session."
  },
  {
    "title": "end() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkoutsession/2962932-end",
    "html": "See Also\nManaging the workout\nfunc prepare()\nPrepares the workout session.\nfunc startActivity(with: Date?)\nStarts the workout session activity, and sets the start date.\nfunc pause()\nPauses the workout session.\nfunc resume()\nResumes the workout session.\nfunc stopActivity(with: Date?)\nStops the workout session activity, and sets the end date.\nRelated Documentation\ncase ended\nThe workout session has ended."
  },
  {
    "title": "stopMirroringToCompanionDevice(completion:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkoutsession/4165516-stopmirroringtocompaniondevice",
    "html": "Parameters\ncompletion\n\nA block that the system calls when the stop request is complete. The system sets the following parameters:\n\nsuccess\n\nA Boolean value that indicates whether the system successfully stopped mirroring the session.\n\nerror\n\nIf success is false, this contains an object that describes the error. Otherwise, it’s nil.\n\nDiscussion\n\nConcurrency Note\n\nYou can call this method from synchronous code using a completion handler, as shown on this page, or you can call it as an asynchronous method that has the following declaration:\n\nfunc stopMirroringToCompanionDevice() async throws\n\n\nFor information on concurrency and asynchronous code in Swift, see Calling Objective-C APIs Asynchronously.\n\nCall this method in your watchOS app to stop the mirrored workout session on the companion iOS app. After the mirroring stops, the system calls the workoutSession(_:didDisconnectFromRemoteDeviceWithError:) method on the iOS companion’s session delegate.\n\nsession.end()\n\n\n// Stop the workout builder and save the workout data.\ndo {\n    try await builder.endCollection(at: Date())\n    try await builder.finishWorkout()\n} catch {\n    // Handle the error here.\n    fatalError(\"*** An error occurred while stoping the workout: \\(error.localizedDescription) ***\")\n}\n\n\n// Stop the mirrored workout on the iOS companion.\ndo {\n    try await session.stopMirroringToCompanionDevice()\n} catch {\n    // Handle the error here.\n    fatalError(\"*** An error occurred while stoping the mirrored workout: \\(error.localizedDescription) ***\")\n}\n\n\nSee Also\nWorking with remote workout sessions\nfunc startMirroringToCompanionDevice(completion: (Bool, Error?) -> Void)\nStarts mirroring the workout session to the companion iOS device.\nfunc sendToRemoteWorkoutSession(data: Data, completion: (Bool, Error?) -> Void)\nSends the provided data to the remote workout session."
  },
  {
    "title": "startDate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkoutsession/1627955-startdate",
    "html": "Discussion\n\nThis property is set to nil when the workout session is initialized. The system assigns a start date when the session’s state changes to HKWorkoutSessionState.running.\n\nSee Also\nAccessing session data\nvar endDate: Date?\nThe ending time and date for this workout session.\nvar state: HKWorkoutSessionState\nThe workout session’s current state.\nvar type: HKWorkoutSessionType\nA value that indicates whether the session is a primary session or a mirrored session.\nvar workoutConfiguration: HKWorkoutConfiguration\nThe configuration object that describes this workout."
  },
  {
    "title": "type | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkoutsession/4165517-type",
    "html": "See Also\nAccessing session data\nvar endDate: Date?\nThe ending time and date for this workout session.\nvar startDate: Date?\nThe starting time and date for this workout session.\nvar state: HKWorkoutSessionState\nThe workout session’s current state.\nvar workoutConfiguration: HKWorkoutConfiguration\nThe configuration object that describes this workout."
  },
  {
    "title": "locationType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkoutsession/1627954-locationtype",
    "html": "Deprecated\n\nUse workoutConfiguration instead.\n\nDiscussion\n\nFor a list of possible location values, see HKWorkoutSessionLocationType.\n\nSee Also\nDeprecated methods\ninit(activityType: HKWorkoutActivityType, locationType: HKWorkoutSessionLocationType)\nReturns a newly instantiated workout session.\nDeprecated\ninit(configuration: HKWorkoutConfiguration)\nReturns a newly instantiated workout session.\nDeprecated\nvar activityType: HKWorkoutActivityType\nThe workout activity performed during this session."
  },
  {
    "title": "workoutConfiguration | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkoutsession/1650690-workoutconfiguration",
    "html": "Discussion\n\nReturns a copy of the configuration object passed to init(configuration:) when instantiating the workout session. Changes made to the returned value have no affect on the workout session.\n\nSee Also\nAccessing session data\nvar endDate: Date?\nThe ending time and date for this workout session.\nvar startDate: Date?\nThe starting time and date for this workout session.\nvar state: HKWorkoutSessionState\nThe workout session’s current state.\nvar type: HKWorkoutSessionType\nA value that indicates whether the session is a primary session or a mirrored session."
  },
  {
    "title": "state | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkoutsession/1627950-state",
    "html": "Discussion\n\nFor a list of possible session states, see HKWorkoutSessionState.\n\nSee Also\nAccessing session data\nvar endDate: Date?\nThe ending time and date for this workout session.\nvar startDate: Date?\nThe starting time and date for this workout session.\nvar type: HKWorkoutSessionType\nA value that indicates whether the session is a primary session or a mirrored session.\nvar workoutConfiguration: HKWorkoutConfiguration\nThe configuration object that describes this workout."
  },
  {
    "title": "beginNewActivity(configuration:date:metadata:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkoutsession/3955294-beginnewactivity",
    "html": "Parameters\nworkoutConfiguration\n\nThe configuration information for the activity. For HKWorkoutActivityType.swimBikeRun workouts, the activity’s configuration must use the HKWorkoutActivityType.swimming, HKWorkoutActivityType.cycling, or HKWorkoutActivityType.running activity types. For interval training, the activity’s configuration must use the same activity type as the containing workout.\n\ndate\n\nThe activity’s start date and time.\n\nmetadata\n\nMetadata that provides additional information about the activity.\n\nDiscussion\n\nThis method asynchronously creates a new workout activity. HealthKit calls the session delegate’s workoutSession(_:didBeginActivityWith:date:) method after the activity begins. If the workout already has a current activity, HealthKit also ends that activity.\n\nHealthKit may also set the data source’s typesToCollect value based on the new activity. If you’ve never modified the types that the data source collects (for example, by calling enableCollection(for:predicate:) or disableCollection(for:)), HealthKit automatically sets the typesToCollect property to a set of relevant data types based on the new actiity. However, if you’ve explicitly set the collected data types, HealthKit won’t modify them; therefore, you may need to update them for the new activity.\n\nSee Also\nManaging workout activities\nvar currentActivity: HKWorkoutActivity\nThe current workout activity.\nfunc endCurrentActivity(on: Date)\nEnds the current workout activity."
  },
  {
    "title": "HKMetadataKeyMenstrualCycleStart | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkmetadatakeymenstrualcyclestart",
    "html": "Discussion\n\nSet this key’s value to true if the sample represents the start of a menstrual cycle; otherwise, set it to false.\n\nSee Also\nReproductive Health Keys\nlet HKMetadataKeySexualActivityProtectionUsed: String\nA key that indicates whether protection was used during sexual activity. This metadata key can be used with sexualActivity category samples."
  },
  {
    "title": "HKPredicateKeyPathECGSymptomsStatus | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkpredicatekeypathecgsymptomsstatus",
    "html": "Discussion\n\nUse this constant whenever you want to include the ECG’s symptoms status in a predicate format string. Add a %K placeholder to the format string, and then pass this constant as an argument.\n\nSee Also\nSpecifying Predicate Key Paths\nlet HKPredicateKeyPathECGClassification: String\nThe key path for the sample’s classification.\nlet HKPredicateKeyPathAverageHeartRate: String\nThe key path for the sample’s average heart rate.\nRelated Documentation\nenum HKElectrocardiogram.SymptomsStatus\nValues indicating whether the user entered a symptom when they recorded the ECG."
  },
  {
    "title": "init(configuration:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkoutsession/1650689-init",
    "html": "Deprecated\n\nUse init(healthStore:configuration:) instead.\n\nParameters\nworkoutConfiguration\n\nA workout configuration object containing the configuration data for this workout session.\n\nerror\n\nOn input, a pointer to an error object. If an error occurs, this pointer is set to an actual error object containing information about the error. Specify nil for this parameter if you do not want to receive error information.\n\nReturn Value\n\nA newly initialized workout session object, or nil if an error occurred.\n\nDiscussion\n\nHealthKit uses the session’s configuration data to fine tune Apple Watch’s sensors for the selected activity. All workout sessions generate higher-frequency heart rate samples; however, an outdoor cycling activity generates more accurate location data, while an indoor cycling activity does not.\n\nSee Also\nDeprecated methods\ninit(activityType: HKWorkoutActivityType, locationType: HKWorkoutSessionLocationType)\nReturns a newly instantiated workout session.\nDeprecated\nvar activityType: HKWorkoutActivityType\nThe workout activity performed during this session.\nvar locationType: HKWorkoutSessionLocationType\nA value that indicates whether the workout session occurred indoors or outdoors."
  },
  {
    "title": "HKMetadataKeyAppleECGAlgorithmVersion | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkmetadatakeyappleecgalgorithmversion",
    "html": "Discussion\n\nApple Watch sets this key on the HKElectrocardiogram samples it creates. The key is read-only.\n\nSee Also\nSpecifying Metadata\nenum HKAppleECGAlgorithmVersion\nVersion numbers for the algorithm Apple Watch uses to generate an ECG reading."
  },
  {
    "title": "HKMetadataKeyInsulinDeliveryReason | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkmetadatakeyinsulindeliveryreason",
    "html": "Discussion\n\nThis key is required for insulinDelivery samples. It takes an NSNumber object containing a HKInsulinDeliveryReason value.\n\nTopics\nValid Delivery Reasons\nPossible reasons for administering insulin.\nenum HKInsulinDeliveryReason\nPossible reasons for administering insulin.\nSee Also\nBlood Glucose Keys\nlet HKMetadataKeyBloodGlucoseMealTime: String\nA key that indicates the relative timing of a blood glucose reading to a meal."
  },
  {
    "title": "HKMetadataKeyHeadphoneGain | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkmetadatakeyheadphonegain",
    "html": "See Also\nAudio Event Keys\nlet HKMetadataKeyAudioExposureLevel: String\nThe audio level associated with an audio event.\nlet HKMetadataKeyAudioExposureDuration: String\nThe audio exposure event’s duration."
  },
  {
    "title": "HKMetadataKeyBodyTemperatureSensorLocation | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkmetadatakeybodytemperaturesensorlocation",
    "html": "Discussion\n\nThis key takes an NSNumber object whose value is HKBodyTemperatureSensorLocation.\n\nTopics\nValid Locations\nenum HKBodyTemperatureSensorLocation\nConstants that indicate where on the body a temperature reading was taken.\nSee Also\nVitals Sensors Keys\nlet HKMetadataKeyHeartRateSensorLocation: String\nThe location where a specific heart rate reading was taken.\nlet HKMetadataKeyHeartRateMotionContext: String\nThe user’s activity level when the heart rate sample was measured.\nlet HKPredicateKeyPathAverageHeartRate: String\nThe key path for the sample’s average heart rate.\nlet HKMetadataKeyHeartRateRecoveryActivityDuration: String\nlet HKMetadataKeyHeartRateRecoveryActivityType: String\nlet HKMetadataKeyHeartRateRecoveryMaxObservedRecoveryHeartRate: String\nlet HKMetadataKeyHeartRateRecoveryTestType: String\nThe type of test that the source used to calculate a person’s heart-rate recovery.\nlet HKMetadataKeyVO2MaxTestType: String\nThe method used to calculate the user’s VO2 max rate."
  },
  {
    "title": "HKMetadataKeyVO2MaxTestType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkmetadatakeyvo2maxtesttype",
    "html": "Discussion\n\nThis key takes an NSNumber object containing a HKVO2MaxTestType value.\n\nTopics\nValid Test Types\nenum HKVO2MaxTestType\nMethods for calculating the user’s VO2 max rate.\nSee Also\nVitals Sensors Keys\nlet HKMetadataKeyBodyTemperatureSensorLocation: String\nThe location where a specific body temperature reading was taken.\nlet HKMetadataKeyHeartRateSensorLocation: String\nThe location where a specific heart rate reading was taken.\nlet HKMetadataKeyHeartRateMotionContext: String\nThe user’s activity level when the heart rate sample was measured.\nlet HKPredicateKeyPathAverageHeartRate: String\nThe key path for the sample’s average heart rate.\nlet HKMetadataKeyHeartRateRecoveryActivityDuration: String\nlet HKMetadataKeyHeartRateRecoveryActivityType: String\nlet HKMetadataKeyHeartRateRecoveryMaxObservedRecoveryHeartRate: String\nlet HKMetadataKeyHeartRateRecoveryTestType: String\nThe type of test that the source used to calculate a person’s heart-rate recovery."
  },
  {
    "title": "HKMetadataKeyHeartRateSensorLocation | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkmetadatakeyheartratesensorlocation",
    "html": "Discussion\n\nThis key takes an NSNumber containing an HKHeartRateSensorLocation as its value.\n\nTopics\nValid Locations\nenum HKHeartRateSensorLocation\nConstants that indicate where on the body the heart rate sensor is located.\nSee Also\nVitals Sensors Keys\nlet HKMetadataKeyBodyTemperatureSensorLocation: String\nThe location where a specific body temperature reading was taken.\nlet HKMetadataKeyHeartRateMotionContext: String\nThe user’s activity level when the heart rate sample was measured.\nlet HKPredicateKeyPathAverageHeartRate: String\nThe key path for the sample’s average heart rate.\nlet HKMetadataKeyHeartRateRecoveryActivityDuration: String\nlet HKMetadataKeyHeartRateRecoveryActivityType: String\nlet HKMetadataKeyHeartRateRecoveryMaxObservedRecoveryHeartRate: String\nlet HKMetadataKeyHeartRateRecoveryTestType: String\nThe type of test that the source used to calculate a person’s heart-rate recovery.\nlet HKMetadataKeyVO2MaxTestType: String\nThe method used to calculate the user’s VO2 max rate."
  },
  {
    "title": "HKMetadataKeyHeartRateRecoveryActivityType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkmetadatakeyheartraterecoveryactivitytype",
    "html": "See Also\nVitals Sensors Keys\nlet HKMetadataKeyBodyTemperatureSensorLocation: String\nThe location where a specific body temperature reading was taken.\nlet HKMetadataKeyHeartRateSensorLocation: String\nThe location where a specific heart rate reading was taken.\nlet HKMetadataKeyHeartRateMotionContext: String\nThe user’s activity level when the heart rate sample was measured.\nlet HKPredicateKeyPathAverageHeartRate: String\nThe key path for the sample’s average heart rate.\nlet HKMetadataKeyHeartRateRecoveryActivityDuration: String\nlet HKMetadataKeyHeartRateRecoveryMaxObservedRecoveryHeartRate: String\nlet HKMetadataKeyHeartRateRecoveryTestType: String\nThe type of test that the source used to calculate a person’s heart-rate recovery.\nlet HKMetadataKeyVO2MaxTestType: String\nThe method used to calculate the user’s VO2 max rate."
  },
  {
    "title": "HKMetadataKeyHeartRateRecoveryMaxObservedRecoveryHeartRate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkmetadatakeyheartraterecoverymaxobservedrecoveryheartrate",
    "html": "See Also\nVitals Sensors Keys\nlet HKMetadataKeyBodyTemperatureSensorLocation: String\nThe location where a specific body temperature reading was taken.\nlet HKMetadataKeyHeartRateSensorLocation: String\nThe location where a specific heart rate reading was taken.\nlet HKMetadataKeyHeartRateMotionContext: String\nThe user’s activity level when the heart rate sample was measured.\nlet HKPredicateKeyPathAverageHeartRate: String\nThe key path for the sample’s average heart rate.\nlet HKMetadataKeyHeartRateRecoveryActivityDuration: String\nlet HKMetadataKeyHeartRateRecoveryActivityType: String\nlet HKMetadataKeyHeartRateRecoveryTestType: String\nThe type of test that the source used to calculate a person’s heart-rate recovery.\nlet HKMetadataKeyVO2MaxTestType: String\nThe method used to calculate the user’s VO2 max rate."
  },
  {
    "title": "HKMetadataKeyHeartRateRecoveryActivityDuration | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkmetadatakeyheartraterecoveryactivityduration",
    "html": "See Also\nVitals Sensors Keys\nlet HKMetadataKeyBodyTemperatureSensorLocation: String\nThe location where a specific body temperature reading was taken.\nlet HKMetadataKeyHeartRateSensorLocation: String\nThe location where a specific heart rate reading was taken.\nlet HKMetadataKeyHeartRateMotionContext: String\nThe user’s activity level when the heart rate sample was measured.\nlet HKPredicateKeyPathAverageHeartRate: String\nThe key path for the sample’s average heart rate.\nlet HKMetadataKeyHeartRateRecoveryActivityType: String\nlet HKMetadataKeyHeartRateRecoveryMaxObservedRecoveryHeartRate: String\nlet HKMetadataKeyHeartRateRecoveryTestType: String\nThe type of test that the source used to calculate a person’s heart-rate recovery.\nlet HKMetadataKeyVO2MaxTestType: String\nThe method used to calculate the user’s VO2 max rate."
  },
  {
    "title": "HKPredicateKeyPathAverageHeartRate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkpredicatekeypathaverageheartrate",
    "html": "Discussion\n\nUse this constant whenever you want to include the ECG’s average heart rate in a predicate format string. Add a %K placeholder to the format string, and then pass this constant as an argument.\n\nSee Also\nVitals Sensors Keys\nlet HKMetadataKeyBodyTemperatureSensorLocation: String\nThe location where a specific body temperature reading was taken.\nlet HKMetadataKeyHeartRateSensorLocation: String\nThe location where a specific heart rate reading was taken.\nlet HKMetadataKeyHeartRateMotionContext: String\nThe user’s activity level when the heart rate sample was measured.\nlet HKMetadataKeyHeartRateRecoveryActivityDuration: String\nlet HKMetadataKeyHeartRateRecoveryActivityType: String\nlet HKMetadataKeyHeartRateRecoveryMaxObservedRecoveryHeartRate: String\nlet HKMetadataKeyHeartRateRecoveryTestType: String\nThe type of test that the source used to calculate a person’s heart-rate recovery.\nlet HKMetadataKeyVO2MaxTestType: String\nThe method used to calculate the user’s VO2 max rate."
  },
  {
    "title": "HKMetadataKeyUserMotionContext | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkmetadatakeyusermotioncontext",
    "html": "Topics\nValid motion contexts\nenum HKUserMotionContext\nThe type of motion performed during the sample."
  },
  {
    "title": "HKMetadataKeyHeartRateMotionContext | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkmetadatakeyheartratemotioncontext",
    "html": "Discussion\n\nThis key takes an NSNumber containing an HKHeartRateMotionContext as its value.\n\nTopics\nValid Motion Contexts\nenum HKHeartRateMotionContext\nValues that indicate the user’s level of activity when the heart rate sample was measured.\nSee Also\nVitals Sensors Keys\nlet HKMetadataKeyBodyTemperatureSensorLocation: String\nThe location where a specific body temperature reading was taken.\nlet HKMetadataKeyHeartRateSensorLocation: String\nThe location where a specific heart rate reading was taken.\nlet HKPredicateKeyPathAverageHeartRate: String\nThe key path for the sample’s average heart rate.\nlet HKMetadataKeyHeartRateRecoveryActivityDuration: String\nlet HKMetadataKeyHeartRateRecoveryActivityType: String\nlet HKMetadataKeyHeartRateRecoveryMaxObservedRecoveryHeartRate: String\nlet HKMetadataKeyHeartRateRecoveryTestType: String\nThe type of test that the source used to calculate a person’s heart-rate recovery.\nlet HKMetadataKeyVO2MaxTestType: String\nThe method used to calculate the user’s VO2 max rate.\nRelated Documentation\nstatic let heartRate: HKQuantityTypeIdentifier\nA quantity sample type that measures the user’s heart rate."
  },
  {
    "title": "HKFHIRResourceType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkfhirresourcetype",
    "html": "Topics\nResource Types\nstatic let allergyIntolerance: HKFHIRResourceType\nA type that identifies FHIR resources for allergies and intolerances.\nstatic let condition: HKFHIRResourceType\nA type that identifies FHIR resources for a condition, problem, diagnosis, or other event.\nstatic let diagnosticReport: HKFHIRResourceType\nA type that identifies FHIR resources for findings and interpretation of diagnostic tests.\nstatic let documentReference: HKFHIRResourceType\nA type that identifies FHIR resources for document references.\nstatic let immunization: HKFHIRResourceType\nA type that identifies FHIR resources for the administration of vaccines.\nstatic let medicationOrder: HKFHIRResourceType\nA type that identifies FHIR resources for prescriptions or other orders for medication.\nstatic let medicationDispense: HKFHIRResourceType\nA type that identifies FHIR resources for the delivery of medication (usually in response to a prescription).\nstatic let medicationStatement: HKFHIRResourceType\nA type that identifies FHIR resources for statements about medication taken by the patient.\nstatic let medicationRequest: HKFHIRResourceType\nA type that identifies FHIR resources for prescriptions or other orders or requests for medication.\nstatic let observation: HKFHIRResourceType\nA type that identifies FHIR resources for medical observations, including lab results and vital signs.\nstatic let procedure: HKFHIRResourceType\nA type that identifies FHIR resources for procedures performed on the patient.\nstatic let coverage: HKFHIRResourceType\nA type that identifies FHIR resources containing information about the user’s insurance coverage.\nInitializers\ninit(rawValue: String)\nReturns a new resource type for the provided string.\nRelationships\nConforms To\nHashable\nRawRepresentable\nSendable\nSee Also\nAccessing FHIR Data\nvar identifier: String\nThe value from the FHIR resource’s id field.\nvar fhirVersion: HKFHIRVersion\nThe FHIR version used by this resource.\nclass HKFHIRVersion\nThe FHIR version.\nvar resourceType: HKFHIRResourceType\nThe value from the FHIR resource’s resourceType field.\nvar sourceURL: URL?\nThe full URL for the source of the FHIR resource.\nvar data: Data\nThe JSON representation of the FHIR resource."
  },
  {
    "title": "data | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkfhirresource/2976216-data",
    "html": "See Also\nAccessing FHIR Data\nvar identifier: String\nThe value from the FHIR resource’s id field.\nvar fhirVersion: HKFHIRVersion\nThe FHIR version used by this resource.\nclass HKFHIRVersion\nThe FHIR version.\nvar resourceType: HKFHIRResourceType\nThe value from the FHIR resource’s resourceType field.\nstruct HKFHIRResourceType\nThe FHIR resource types supported in HealthKit.\nvar sourceURL: URL?\nThe full URL for the source of the FHIR resource."
  },
  {
    "title": "HKPredicateKeyPathCDATitle | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkpredicatekeypathcdatitle",
    "html": "See Also\nSpecifying Predicate Key Paths\nlet HKPredicateKeyPathCDAAuthorName: String\nThe key path for accessing the author’s name inside a predicate format string.\nlet HKPredicateKeyPathCDACustodianName: String\nThe key path for accessing the custodian’s name inside a predicate format string.\nlet HKPredicateKeyPathCDAPatientName: String\nThe key path for accessing the patient’s name inside a predicate format string."
  },
  {
    "title": "sourceURL | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkfhirresource/2976220-sourceurl",
    "html": "See Also\nAccessing FHIR Data\nvar identifier: String\nThe value from the FHIR resource’s id field.\nvar fhirVersion: HKFHIRVersion\nThe FHIR version used by this resource.\nclass HKFHIRVersion\nThe FHIR version.\nvar resourceType: HKFHIRResourceType\nThe value from the FHIR resource’s resourceType field.\nstruct HKFHIRResourceType\nThe FHIR resource types supported in HealthKit.\nvar data: Data\nThe JSON representation of the FHIR resource."
  },
  {
    "title": "identifier | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkfhirresource/2976217-identifier",
    "html": "Discussion\n\nThis identifier is only unique for a particular resource type from a given source. To uniquely identify a FHIR resource, you must compare the identifier and resourceType properties from the HKFHIRResource object and the bundleIdentifier property from the clinical record’s source.\n\nSee Also\nAccessing FHIR Data\nvar fhirVersion: HKFHIRVersion\nThe FHIR version used by this resource.\nclass HKFHIRVersion\nThe FHIR version.\nvar resourceType: HKFHIRResourceType\nThe value from the FHIR resource’s resourceType field.\nstruct HKFHIRResourceType\nThe FHIR resource types supported in HealthKit.\nvar sourceURL: URL?\nThe full URL for the source of the FHIR resource.\nvar data: Data\nThe JSON representation of the FHIR resource."
  },
  {
    "title": "HKMetadataKeyWeatherHumidity | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkmetadatakeyweatherhumidity",
    "html": "Discussion\n\nThis key takes an HKQuantity value expressed as a percentage. Set this key on an HKWorkout object to represent the overall humidity during the workout.\n\nSee Also\nWeather Keys\nlet HKMetadataKeyBarometricPressure: String\nThe metadata key for the barometric pressure associated with a sample.\nlet HKMetadataKeyWeatherCondition: String\nA key that represents the weather condition during the sample.\nlet HKMetadataKeyWeatherTemperature: String\nA key that represents the weather temperature during the sample."
  },
  {
    "title": "rightEarSensitivity | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkaudiogramsensitivitypoint/3042431-rightearsensitivity",
    "html": "Discussion\n\nThis object uses decibelHearingLevel() units to measure sensitivity in attenuated dB from a baseline of 0 dB.\n\nSee Also\nAccessing Data\nvar frequency: HKQuantity\nThe frequency tested in the hearing test.\nvar leftEarSensitivity: HKQuantity?\nThe sensitivity of the left ear."
  },
  {
    "title": "addHeartbeatWithTimeInterval(sinceSeriesStartDate:precededByGap:completion:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkheartbeatseriesbuilder/3113758-addheartbeatwithtimeinterval",
    "html": "Parameters\ntimeInterval\n\nThe time of the heartbeat, measured from the series builder’s start date. This must be a positive value.\n\nprecededByGap\n\nA Boolean value that indicates whether this heartbeat was immediately preceded by a gap in the data, indicating that one or more heartbeats may be missing.\n\ncompletion\n\nThe completion handler called by the builder after it attempts to add the heartbeat to the series. The completion handler takes the following parameters:\n\nsuccess\n\nA Boolean value that indicates whether the builder successfully added the heartbeat.\n\nerror\n\nIf the success parameter is false, this contains an object that describes the error; otherwise, nil.\n\nDiscussion\n\nConcurrency Note\n\nYou can call this method from synchronous code using a completion handler, as shown on this page, or you can call it as an asynchronous method that has the following declaration:\n\nfunc addHeartbeat(at timeIntervalSinceStart: TimeInterval, precededByGap: Bool) async throws\n\n\nFor information about concurrency and asynchronous code in Swift, see Calling Objective-C APIs Asynchronously.\n\nSee Also\nAdding Data\nfunc addMetadata([String : Any], completion: (Bool, Error?) -> Void)\nAdds metadata to the sample."
  },
  {
    "title": "finishSeries(metadata:endDate:completion:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquantityseriessamplebuilder/3081262-finishseries",
    "html": "Parameters\nmetadata\n\nThe metadata dictionary contains extra information describing all the samples created by the builder. The dictionary’s keys are all strings. The values may be strings, numbers, or date objects. For a complete list of predefined metadata keys, see Metadata Keys.\n\nUsing predefined keys helps facilitate sharing data between apps; however, you are also encouraged to create your own, custom keys as needed to extend the samples' capabilities.\n\nendDate\n\nThe date when the sample ends. If nil, the builder uses the latest end date from the contained quantities.\n\nThe sample builder returns an HKError.Code.errorInvalidArgument error if the endDate is earlier than the builder’s startDate parameter, or is earlier than the end date of any of the quantities inserted into the builder.\n\ncompletion\n\nA completion handler, called by the builder after it creates the samples.\n\nThe handler takes the following parameters:\n\nsamples\n\nThe samples returned by the builder, or nil if an error occurs.\n\nerror\n\nIf an error occurs, this contains an object that describes the error. Otherwise, it is nil.\n\nDiscussion\n\nConcurrency Note\n\nYou can call this method from synchronous code using a completion handler, as shown on this page, or you can call it as an asynchronous method that has the following declaration:\n\nfunc finishSeries(metadata: [String : Any]?, endDate: Date?) async throws -> [HKQuantitySample]\n\n\nFor information about concurrency and asynchronous code in Swift, see Calling Objective-C APIs Asynchronously.\n\nCall finishSeries(metadata:endDate:completion:) after inserting all the quantities for the series. The series builder then creates one or more samples to represent the series, saves the samples to the HealthKit store, and then passes them to the completion handler.\n\nNote\n\nThe series builder typically creates a single sample that contains all the inserted quantities; however, it may split the quantities up into multiple sample objects.\n\nCalling this method before inserting any samples results in an error. Also, calling this method invalidates the series builder; you cannot call any other series builder methods after calling this method.\n\nSee Also\nEnding the Collection\nfunc discard()\nDiscards all previously collected data and invalidates the builder.\nfunc finishSeries(metadata: [String : Any]?, completion: ([HKQuantitySample]?, Error?) -> Void)\nFinalizes the series and returns the resulting quantity samples."
  },
  {
    "title": "finishSeries(metadata:completion:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquantityseriessamplebuilder/2990394-finishseries",
    "html": "Parameters\nmetadata\n\nThe metadata dictionary contains extra information describing all the samples created by the builder. The dictionary’s keys are all strings. The values may be strings, numbers, or date objects. For a complete list of predefined metadata keys, see Metadata Keys.\n\nUsing predefined keys helps facilitate sharing data between apps; however, you are also encouraged to create your own, custom keys as needed to extend the samples' capabilities.\n\ncompletion\n\nA completion handler, called by the builder after it creates the samples. The handler takes the following parameters:\n\nsamples\n\nThe samples returned by the builder, or nil if an error occurs.\n\nerror\n\nIf an error occurs, this contains an object that describes the error. Otherwise, it is nil.\n\nDiscussion\n\nConcurrency Note\n\nYou can call this method from synchronous code using a completion handler, as shown on this page, or you can call it as an asynchronous method that has the following declaration:\n\nfunc finishSeries(metadata: [String : Any]?) async throws -> [HKQuantitySample]\n\n\nFor information about concurrency and asynchronous code in Swift, see Calling Objective-C APIs Asynchronously.\n\nCall finishSeries(metadata:completion:) after inserting all the quantities for the series. The series builder creates one or more samples to represent the series, saves the samples to the HealthKit store, and passes them to the completion handler.\n\nNote\n\nThe series builder typically creates a single sample that contains all the inserted quantities; however, it may split the quantities up into multiple sample objects.\n\nCalling this method before inserting any samples results in an error. Also, calling this method invalidates the series builder; you cannot call any other series builder methods after calling this method.\n\nThis method calls finishSeries(metadata:endDate:completion:), passing nil as the endDate parameter.\n\nSee Also\nEnding the Collection\nfunc discard()\nDiscards all previously collected data and invalidates the builder.\nfunc finishSeries(metadata: [String : Any]?, endDate: Date?, completion: ([HKQuantitySample]?, Error?) -> Void)\nFinalizes the series with the provided end date, and returns the resulting quantity samples."
  },
  {
    "title": "maximumCount | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkheartbeatseriesbuilder/3113762-maximumcount",
    "html": "Discussion\n\nAfter reaching the maximum count, any attempt to call the addHeartbeatWithTimeInterval(sinceSeriesStartDate:precededByGap:completion:) method fails.\n\nSee Also\nCreating a Heartbeat Series Builder\ninit(healthStore: HKHealthStore, device: HKDevice?, start: Date)\nCreates a new heartbeat series builder."
  },
  {
    "title": "smartHealthCard | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkverifiableclinicalrecordsourcetype/3922616-smarthealthcard",
    "html": "See Also\nIdentifying Source Types\nstatic let euDigitalCOVIDCertificate: HKVerifiableClinicalRecordSourceType\nA value indicating EU Digital COVID Certificates."
  },
  {
    "title": "HKCategoryValuePresence | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkcategoryvaluepresence",
    "html": "Topics\nPresence of Symptoms\ncase notPresent\nThe symptom isn’t present.\ncase present\nThe symptom is present.\nRelationships\nConforms To\nHKCategoryValuePredicateProviding\nSendable\nSee Also\nAssigning Values\nenum HKCategoryValue\nCategories that are undefined.\nenum HKCategoryValueCervicalMucusQuality\nCategories that represent the user’s cervical mucus quality.\nenum HKCategoryValueMenstrualFlow\nCategories that indicate the amount of menstrual flow for a given sample.\nenum HKCategoryValueOvulationTestResult\nCategories that represent the result of an ovulation home test.\nenum HKCategoryValueContraceptive\nThe type of contraceptive.\nenum HKCategoryValueSleepAnalysis\nCategories that represent the result of a sleep analysis.\nenum HKCategoryValueAppetiteChanges\nCategories that represent change in appetite.\nenum HKCategoryValueSeverity\nCategories that represent the severity of a symptom.\nenum HKCategoryValueEnvironmentalAudioExposureEvent\nExposure events for environmental audio.\nenum HKCategoryValueHeadphoneAudioExposureEvent\nExposure events for headphone audio.\nenum HKCategoryValueLowCardioFitnessEvent\nA value that indicates a low-level cardio fitness event.\nenum HKAppleWalkingSteadinessClassification\nA classification of a score based on the steadiness of the user’s gait.\nenum HKCategoryValueAppleWalkingSteadinessEvent\nThe value of an event triggered by a reduced score for the steadiness of the user’s gait.\nenum HKCategoryValuePregnancyTestResult\nCategory values that indicate the results of a home pregnancy test.\nenum HKCategoryValueProgesteroneTestResult\nA category value that indicates the result from a home progesterone test.\nenum HKCategoryValueAudioExposureEvent\nCategories that indicate audio exposure events."
  },
  {
    "title": "HKMetadataKeyAppleDeviceCalibrated | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkmetadatakeyappledevicecalibrated",
    "html": "Discussion\n\nThis key takes a Boolean value. If it’s true, the system has enough high-quality data to make an accurate estimate. If it’s false, the system provides an estimate based on data that may be less accurate.\n\nThe key is read-only.\n\nSee Also\nDevice Information Keys\nlet HKMetadataKeyDeviceSerialNumber: String\nThe key for the serial number of the device that generated the data.\nlet HKMetadataKeyUDIDeviceIdentifier: String\nThe device identifier portion of a device’s UDI (unique device identifier).\nlet HKMetadataKeyUDIProductionIdentifier: String\nThe production identifier portion of a device’s UDI (unique device identifier).\nlet HKMetadataKeyDigitalSignature: String\nA digital signature that can be used to validate the origin of the HealthKit object.\nlet HKMetadataKeyDeviceName: String\nThe name of the device that took this reading.\nlet HKMetadataKeyDeviceManufacturerName: String\nThe name of the manufacturer of the device that took this reading.\nlet HKMetadataKeyDevicePlacementSide: String\nThe key for metadata indicating the placement of the device that measured a sample.\nenum HKDevicePlacementSide\nValues that indicate the placement of the device that measured a sample."
  },
  {
    "title": "HKDevicePlacementSide | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkdeviceplacementside",
    "html": "Topics\nPlacements\ncase central\nA device predominately located near the center of the body.\ncase left\nA device predominately located on the left side.\ncase right\nA device predominately located on the right side.\ncase unknown\nThe system couldn’t determine the device’s placement.\nRelationships\nConforms To\nSendable\nSee Also\nDevice Information Keys\nlet HKMetadataKeyDeviceSerialNumber: String\nThe key for the serial number of the device that generated the data.\nlet HKMetadataKeyUDIDeviceIdentifier: String\nThe device identifier portion of a device’s UDI (unique device identifier).\nlet HKMetadataKeyUDIProductionIdentifier: String\nThe production identifier portion of a device’s UDI (unique device identifier).\nlet HKMetadataKeyDigitalSignature: String\nA digital signature that can be used to validate the origin of the HealthKit object.\nlet HKMetadataKeyDeviceName: String\nThe name of the device that took this reading.\nlet HKMetadataKeyDeviceManufacturerName: String\nThe name of the manufacturer of the device that took this reading.\nlet HKMetadataKeyDevicePlacementSide: String\nThe key for metadata indicating the placement of the device that measured a sample.\nlet HKMetadataKeyAppleDeviceCalibrated: String\nThe key for metadata indicating whether the system had data from a sufficient amount of calibrated sensors when recording the sample."
  },
  {
    "title": "HKMetadataKeyReferenceRangeUpperLimit | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkmetadatakeyreferencerangeupperlimit",
    "html": "Discussion\n\nThis key takes an NSNumber value.\n\nSee Also\nLab Keys\nlet HKMetadataKeyWasTakenInLab: String\nA key that indicates whether the sample was taken in a lab.\nlet HKMetadataKeyReferenceRangeLowerLimit: String\nA key that indicates the lower limit of the reference range for a lab result."
  },
  {
    "title": "HKMetadataKeyWeatherTemperature | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkmetadatakeyweathertemperature",
    "html": "Discussion\n\nThis key takes an HKQuantity value expressed in a unit of temperature. Set this key on an HKWorkout object to represent the overall temperature during the workout.\n\nSee Also\nWeather Keys\nlet HKMetadataKeyBarometricPressure: String\nThe metadata key for the barometric pressure associated with a sample.\nlet HKMetadataKeyWeatherCondition: String\nA key that represents the weather condition during the sample.\nlet HKMetadataKeyWeatherHumidity: String\nA key that represents the weather humidity during the sample."
  },
  {
    "title": "HKMetadataKeyWeatherCondition | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkmetadatakeyweathercondition",
    "html": "Discussion\n\nThis key takes an an NSNumber value that contains an HKWeatherCondition value. Set this key on an HKWorkout object to represent the overall weather condition during the workout.\n\nTopics\nValid Weather Conditions\nenum HKWeatherCondition\nConstants that indicate a type of weather.\nSee Also\nWeather Keys\nlet HKMetadataKeyBarometricPressure: String\nThe metadata key for the barometric pressure associated with a sample.\nlet HKMetadataKeyWeatherHumidity: String\nA key that represents the weather humidity during the sample.\nlet HKMetadataKeyWeatherTemperature: String\nA key that represents the weather temperature during the sample."
  },
  {
    "title": "HKMetadataKeyDevicePlacementSide | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkmetadatakeydeviceplacementside",
    "html": "Discussion\n\nThis key takes an NSNumber that contains a value from HKDevicePlacementSide.\n\nFor mobility samples, like walkingSpeed or walkingDoubleSupportPercentage, this metadata key records the placement of the device as determined by the system.\n\nSee Also\nDevice Information Keys\nlet HKMetadataKeyDeviceSerialNumber: String\nThe key for the serial number of the device that generated the data.\nlet HKMetadataKeyUDIDeviceIdentifier: String\nThe device identifier portion of a device’s UDI (unique device identifier).\nlet HKMetadataKeyUDIProductionIdentifier: String\nThe production identifier portion of a device’s UDI (unique device identifier).\nlet HKMetadataKeyDigitalSignature: String\nA digital signature that can be used to validate the origin of the HealthKit object.\nlet HKMetadataKeyDeviceName: String\nThe name of the device that took this reading.\nlet HKMetadataKeyDeviceManufacturerName: String\nThe name of the manufacturer of the device that took this reading.\nenum HKDevicePlacementSide\nValues that indicate the placement of the device that measured a sample.\nlet HKMetadataKeyAppleDeviceCalibrated: String\nThe key for metadata indicating whether the system had data from a sufficient amount of calibrated sensors when recording the sample."
  },
  {
    "title": "HKMetadataKeyWasTakenInLab | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkmetadatakeywastakeninlab",
    "html": "Discussion\n\nSet this key’s value to true if the sample was taken by a lab; otherwise, set it to false.\n\nSee Also\nLab Keys\nlet HKMetadataKeyReferenceRangeLowerLimit: String\nA key that indicates the lower limit of the reference range for a lab result.\nlet HKMetadataKeyReferenceRangeUpperLimit: String\nA key that indicates the upper limit of the reference range for a lab result."
  },
  {
    "title": "HKMetadataKeySyncVersion | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkmetadatakeysyncversion",
    "html": "Discussion\n\nThis key takes an NSNumber as its value. When you save an object to the HealthKit store, the new object replaces any matching objects (existing objects with a matching HKMetadataKeySyncIdentifier value) with a lower sync version.\n\nFor more information, see HKMetadataKeySyncIdentifier.\n\nSee Also\nSync Keys\nlet HKMetadataKeySyncIdentifier: String\nA unique string that identifies a piece of data so it can be updated and synced."
  },
  {
    "title": "HKMetadataKeyReferenceRangeLowerLimit | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkmetadatakeyreferencerangelowerlimit",
    "html": "Discussion\n\nThis key takes an NSNumber value.\n\nSee Also\nLab Keys\nlet HKMetadataKeyWasTakenInLab: String\nA key that indicates whether the sample was taken in a lab.\nlet HKMetadataKeyReferenceRangeUpperLimit: String\nA key that indicates the upper limit of the reference range for a lab result."
  },
  {
    "title": "HKMetadataKeyUDIProductionIdentifier | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkmetadatakeyudiproductionidentifier",
    "html": "Discussion\n\nAlthough the production identifier is part of a device's UDI, it is not saved in the FDA's GUDID (Globally Unique Device Identifier Database), and its use in HealthKit is now discouraged to protect user privacy. Apps that need this information should store it outside the HealthKit store.\n\nSee Also\nDevice Information Keys\nlet HKMetadataKeyDeviceSerialNumber: String\nThe key for the serial number of the device that generated the data.\nlet HKMetadataKeyUDIDeviceIdentifier: String\nThe device identifier portion of a device’s UDI (unique device identifier).\nlet HKMetadataKeyDigitalSignature: String\nA digital signature that can be used to validate the origin of the HealthKit object.\nlet HKMetadataKeyDeviceName: String\nThe name of the device that took this reading.\nlet HKMetadataKeyDeviceManufacturerName: String\nThe name of the manufacturer of the device that took this reading.\nlet HKMetadataKeyDevicePlacementSide: String\nThe key for metadata indicating the placement of the device that measured a sample.\nenum HKDevicePlacementSide\nValues that indicate the placement of the device that measured a sample.\nlet HKMetadataKeyAppleDeviceCalibrated: String\nThe key for metadata indicating whether the system had data from a sufficient amount of calibrated sensors when recording the sample."
  },
  {
    "title": "HKMetadataKeyDeviceName | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkmetadatakeydevicename",
    "html": "Discussion\n\nThis key takes a string value.\n\nNote\n\nIn iOS 9.0 and later, the use of this key is discouraged. Use the HKDevice class instead.\n\nSee Also\nDevice Information Keys\nlet HKMetadataKeyDeviceSerialNumber: String\nThe key for the serial number of the device that generated the data.\nlet HKMetadataKeyUDIDeviceIdentifier: String\nThe device identifier portion of a device’s UDI (unique device identifier).\nlet HKMetadataKeyUDIProductionIdentifier: String\nThe production identifier portion of a device’s UDI (unique device identifier).\nlet HKMetadataKeyDigitalSignature: String\nA digital signature that can be used to validate the origin of the HealthKit object.\nlet HKMetadataKeyDeviceManufacturerName: String\nThe name of the manufacturer of the device that took this reading.\nlet HKMetadataKeyDevicePlacementSide: String\nThe key for metadata indicating the placement of the device that measured a sample.\nenum HKDevicePlacementSide\nValues that indicate the placement of the device that measured a sample.\nlet HKMetadataKeyAppleDeviceCalibrated: String\nThe key for metadata indicating whether the system had data from a sufficient amount of calibrated sensors when recording the sample."
  },
  {
    "title": "HKMetadataKeyDeviceSerialNumber | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkmetadatakeydeviceserialnumber",
    "html": "Discussion\n\nThis key takes a string value.\n\nSee Also\nDevice Information Keys\nlet HKMetadataKeyUDIDeviceIdentifier: String\nThe device identifier portion of a device’s UDI (unique device identifier).\nlet HKMetadataKeyUDIProductionIdentifier: String\nThe production identifier portion of a device’s UDI (unique device identifier).\nlet HKMetadataKeyDigitalSignature: String\nA digital signature that can be used to validate the origin of the HealthKit object.\nlet HKMetadataKeyDeviceName: String\nThe name of the device that took this reading.\nlet HKMetadataKeyDeviceManufacturerName: String\nThe name of the manufacturer of the device that took this reading.\nlet HKMetadataKeyDevicePlacementSide: String\nThe key for metadata indicating the placement of the device that measured a sample.\nenum HKDevicePlacementSide\nValues that indicate the placement of the device that measured a sample.\nlet HKMetadataKeyAppleDeviceCalibrated: String\nThe key for metadata indicating whether the system had data from a sufficient amount of calibrated sensors when recording the sample."
  },
  {
    "title": "HKMetadataKeyQuantityClampedToUpperBound | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkmetadatakeyquantityclampedtoupperbound",
    "html": "See Also\nGeneral Keys\nlet HKMetadataKeyExternalUUID: String\nA unique identifier for an HKObject that is set by its source.\nlet HKMetadataKeyTimeZone: String\nThe user’s time zone when the HealthKit object was created.\nlet HKMetadataKeyWasUserEntered: String\nA key that indicates whether the sample was entered by the user.\nlet HKMetadataKeyQuantityClampedToLowerBound: String"
  },
  {
    "title": "HKMetadataKeyWasUserEntered | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkmetadatakeywasuserentered",
    "html": "Discussion\n\nSet this key’s value to true if the sample was entered by the user; otherwise, set it to false.\n\nSee Also\nGeneral Keys\nlet HKMetadataKeyExternalUUID: String\nA unique identifier for an HKObject that is set by its source.\nlet HKMetadataKeyTimeZone: String\nThe user’s time zone when the HealthKit object was created.\nlet HKMetadataKeyQuantityClampedToLowerBound: String\nlet HKMetadataKeyQuantityClampedToUpperBound: String"
  },
  {
    "title": "endCollection(withEnd:completion:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkoutbuilder/3000762-endcollection",
    "html": "Discussion\n\nConcurrency Note\n\nYou can call this method from synchronous code using a completion handler, as shown on this page, or you can call it as an asynchronous method that has the following declaration:\n\nfunc endCollection(at endDate: Date) async throws\n\n\nFor information about concurrency and asynchronous code in Swift, see Calling Objective-C APIs Asynchronously.\n\nSee Also\nEnding the workout\nvar endDate: Date?\nThe workout’s end date and time.\nfunc finishWorkout(completion: (HKWorkout?, Error?) -> Void)\nCreates the workout, using the samples and events added to the builder, and saves it to the HealthKit store.\nfunc discardWorkout()\nStops the collection of data and discards the current results without saving the workout."
  },
  {
    "title": "HKMetadataKeyExternalUUID | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkmetadatakeyexternaluuid",
    "html": "Discussion\n\nThis key takes a string value. This value is independent of the UUID assigned to the object by the HealthKit store. You can assign your own UUID to any HealthKit objects you create. Use these IDs to uniquely identify objects in your application. You typically use the UUID from the corresponding data entry on your server. This lets you create multiple copies of that data across multiple devices. Each copy shares the same external UUID.\n\nSee Also\nGeneral Keys\nlet HKMetadataKeyTimeZone: String\nThe user’s time zone when the HealthKit object was created.\nlet HKMetadataKeyWasUserEntered: String\nA key that indicates whether the sample was entered by the user.\nlet HKMetadataKeyQuantityClampedToLowerBound: String\nlet HKMetadataKeyQuantityClampedToUpperBound: String"
  },
  {
    "title": "finishWorkout(completion:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkoutbuilder/3000764-finishworkout",
    "html": "Discussion\n\nConcurrency Note\n\nYou can call this method from synchronous code using a completion handler, as shown on this page, or you can call it as an asynchronous method that has the following declaration:\n\nfunc finishWorkout() async throws -> HKWorkout?\n\n\nFor information about concurrency and asynchronous code in Swift, see Calling Objective-C APIs Asynchronously.\n\nYou must call endCollection(withEnd:completion:) before calling this method.\n\nSee Also\nEnding the workout\nfunc endCollection(withEnd: Date, completion: (Bool, Error?) -> Void)\nStops the collection of data, sets the workout’s end date, and deactivates the workout builder.\nvar endDate: Date?\nThe workout’s end date and time.\nfunc discardWorkout()\nStops the collection of data and discards the current results without saving the workout."
  },
  {
    "title": "HKWorkoutEventType.lap | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkouteventtype/lap",
    "html": "Discussion\n\nLap events partition a workout into segments of equal distance (for example, laps around a track or laps in a pool). The lap’s dateInterval property should mark the start and end of the lap. Lap events can’t overlap.\n\nWhen you receive lap events from the HealthKit store, examine the event’s dateInterval property to interpret the lap correctly:\n\nZero-duration intervals. Older lap events (created before iOS 11 and watchOS 4) have a zero-duration date interval that marks the end of the lap. Each lap is assumed to start when the previous lap ends, and laps fill the entire workout completely.\n\nNonzero-duration intervals. Newer lap events use the date interval to mark the start and the duration of the lap. These events have a nonzero duration, and they do not need to fill the workout; however, you should ideally mark any rest periods between laps using HKWorkoutEventType.pause and HKWorkoutEventType.resume events.\n\nSee Also\nEvents\ncase pause\nA constant indicating that the workout has paused.\ncase resume\nA constant indicating that the workout has resumed.\ncase motionPaused\nA constant indicating that the system has automatically paused a workout session.\ncase motionResumed\nA constant indicating that the system has automatically resumed a workout session.\ncase pauseOrResumeRequest\nA constant indicating that the user has requested a pause or resume.\ncase segment\nA constant indicating a period of time of interest during a workout.\ncase marker\nA constant indicating a point of interest during a workout session."
  },
  {
    "title": "workoutBuilderDidCollectEvent(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkliveworkoutbuilderdelegate/2994347-workoutbuilderdidcollectevent",
    "html": "Required\n\nSee Also\nTracking Live Data\nfunc workoutBuilder(HKLiveWorkoutBuilder, didCollectDataOf: Set<HKSampleType>)\nTells the delegate that new data has been added to the builder.\n\nRequired\n\nfunc workoutBuilder(HKLiveWorkoutBuilder, didBegin: HKWorkoutActivity)\nTells the delegate that a new workout activity has started.\nfunc workoutBuilder(HKLiveWorkoutBuilder, didEnd: HKWorkoutActivity)\nTells the delegate that the current workout activity has ended."
  },
  {
    "title": "HKCategoryValueContraceptive | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkcategoryvaluecontraceptive",
    "html": "Topics\nContraceptive Types\ncase unspecified\nAn unspecified type of contraceptive.\ncase implant\nA contraceptive implant.\ncase injection\nAn injectable contraceptive.\ncase intrauterineDevice\nAn intrauterine device (IUD).\ncase intravaginalRing\nA contraceptive intravaginal ring.\ncase oral\nAn oral contraceptive.\ncase patch\nA contraceptive patch.\nRelationships\nConforms To\nHKCategoryValuePredicateProviding\nSendable\nSee Also\nAssigning Values\nenum HKCategoryValue\nCategories that are undefined.\nenum HKCategoryValueCervicalMucusQuality\nCategories that represent the user’s cervical mucus quality.\nenum HKCategoryValueMenstrualFlow\nCategories that indicate the amount of menstrual flow for a given sample.\nenum HKCategoryValueOvulationTestResult\nCategories that represent the result of an ovulation home test.\nenum HKCategoryValueSleepAnalysis\nCategories that represent the result of a sleep analysis.\nenum HKCategoryValueAppetiteChanges\nCategories that represent change in appetite.\nenum HKCategoryValuePresence\nCategories that indicate whether a symptom is present.\nenum HKCategoryValueSeverity\nCategories that represent the severity of a symptom.\nenum HKCategoryValueEnvironmentalAudioExposureEvent\nExposure events for environmental audio.\nenum HKCategoryValueHeadphoneAudioExposureEvent\nExposure events for headphone audio.\nenum HKCategoryValueLowCardioFitnessEvent\nA value that indicates a low-level cardio fitness event.\nenum HKAppleWalkingSteadinessClassification\nA classification of a score based on the steadiness of the user’s gait.\nenum HKCategoryValueAppleWalkingSteadinessEvent\nThe value of an event triggered by a reduced score for the steadiness of the user’s gait.\nenum HKCategoryValuePregnancyTestResult\nCategory values that indicate the results of a home pregnancy test.\nenum HKCategoryValueProgesteroneTestResult\nA category value that indicates the result from a home progesterone test.\nenum HKCategoryValueAudioExposureEvent\nCategories that indicate audio exposure events."
  },
  {
    "title": "HKCategoryValueSleepAnalysis.awake | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkcategoryvaluesleepanalysis/awake",
    "html": "See Also\nValues for Tracking Sleep States\ncase asleepCore\nThe user is in light or intermediate sleep.\ncase asleepDeep\nThe user is in deep sleep.\ncase asleepREM\nThe user is in REM sleep.\ncase asleepUnspecified\nThe user is asleep, but the specific stage isn’t known.\nstatic var allAsleepValues: Set<HKCategoryValueSleepAnalysis>\nA set of values that represents the possible stages of sleep."
  },
  {
    "title": "sendToRemoteWorkoutSession(data:completion:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkoutsession/4126899-sendtoremoteworkoutsession",
    "html": "Parameters\ndata\n\nA data object that contains the data your app is sending to the remote workout session.\n\ncompletion\n\nA block that the system calls when the send attempt is complete. The system passes the following parameters:\n\nsuccess\n\nA Boolean value that indicates whether the system successfully sent the data.\n\nerror\n\nIf sucess is false, this contains an object that describes the error. Otherwise, it’s nil.\n\nDiscussion\n\nConcurrency Note\n\nYou can call this method from synchronous code using a completion handler, as shown on this page, or you can call it as an asynchronous method that has the following declaration:\n\nfunc sendToRemoteWorkoutSession(data: Data) async throws\n\n\nFor information about concurrency and asynchronous code in Swift, see Calling Objective-C APIs Asynchronously.\n\nCall this method to send data to your remote workout session. You can send data from either the HKWorkoutSessionType.mirrored or HKWorkoutSessionType.primary session.\n\nlet archivedData = try? NSKeyedArchiver.archivedData(withRootObject: data, requiringSecureCoding: true)\nguard let archivedData = archivedData, !archivedData.isEmpty else {\n    // Handle the error here.\n    fatalError(\"*** Encoded data is empty ***\")\n}\n\n\n// Send the data to the companion iPhone.\nTask {\n    do {\n        try await session.sendToRemoteWorkoutSession(data: archivedData)\n    }\n    catch {\n        // Handle the error here.\n        fatalError(\"*** An error occurred while sending the health data to the companion iPhone: \\(error.localizedDescription) ***\")\n    }\n}\n\n\nSee Also\nWorking with remote workout sessions\nfunc startMirroringToCompanionDevice(completion: (Bool, Error?) -> Void)\nStarts mirroring the workout session to the companion iOS device.\nfunc stopMirroringToCompanionDevice(completion: (Bool, Error?) -> Void)\nStops mirroring the workout session to the companion iOS device."
  },
  {
    "title": "HKCategoryValueSleepAnalysis.asleepREM | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkcategoryvaluesleepanalysis/asleeprem",
    "html": "Discussion\n\nThis value corresponds to the rapid eye movement (REM) stage of the American Academy of Sleep Medicine’s scoring model.\n\nSee Also\nValues for Tracking Sleep States\ncase awake\nThe user is awake.\ncase asleepCore\nThe user is in light or intermediate sleep.\ncase asleepDeep\nThe user is in deep sleep.\ncase asleepUnspecified\nThe user is asleep, but the specific stage isn’t known.\nstatic var allAsleepValues: Set<HKCategoryValueSleepAnalysis>\nA set of values that represents the possible stages of sleep."
  },
  {
    "title": "HKCategoryValueSleepAnalysis.asleepUnspecified | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkcategoryvaluesleepanalysis/asleepunspecified",
    "html": "See Also\nValues for Tracking Sleep States\ncase awake\nThe user is awake.\ncase asleepCore\nThe user is in light or intermediate sleep.\ncase asleepDeep\nThe user is in deep sleep.\ncase asleepREM\nThe user is in REM sleep.\nstatic var allAsleepValues: Set<HKCategoryValueSleepAnalysis>\nA set of values that represents the possible stages of sleep."
  },
  {
    "title": "HKCategoryValueSleepAnalysis.asleepCore | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkcategoryvaluesleepanalysis/asleepcore",
    "html": "Discussion\n\nThis value corresponds to stage N2 of the American Academy of Sleep Medicine’s scoring model. Stage N2 is also referred to as light or intermediate sleep. It accounts for a major part of the time spent asleep. The HKCategoryValueSleepAnalysis.asleepCore value also includes stage N1, which makes up only a small portion of the night.\n\nSee Also\nValues for Tracking Sleep States\ncase awake\nThe user is awake.\ncase asleepDeep\nThe user is in deep sleep.\ncase asleepREM\nThe user is in REM sleep.\ncase asleepUnspecified\nThe user is asleep, but the specific stage isn’t known.\nstatic var allAsleepValues: Set<HKCategoryValueSleepAnalysis>\nA set of values that represents the possible stages of sleep."
  },
  {
    "title": "HKCategoryValueSleepAnalysis.asleepDeep | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkcategoryvaluesleepanalysis/asleepdeep",
    "html": "Discussion\n\nThis value corresponds to stage N3 of the American Academy of Sleep Medicine’s scoring model.\n\nSee Also\nValues for Tracking Sleep States\ncase awake\nThe user is awake.\ncase asleepCore\nThe user is in light or intermediate sleep.\ncase asleepREM\nThe user is in REM sleep.\ncase asleepUnspecified\nThe user is asleep, but the specific stage isn’t known.\nstatic var allAsleepValues: Set<HKCategoryValueSleepAnalysis>\nA set of values that represents the possible stages of sleep."
  },
  {
    "title": "endDate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkoutsession/1627947-enddate",
    "html": "Discussion\n\nThis property is set to nil when the workout session is initialized. The system assigns an end date when the session’s state changes to HKWorkoutSessionState.ended.\n\nSee Also\nAccessing session data\nvar startDate: Date?\nThe starting time and date for this workout session.\nvar state: HKWorkoutSessionState\nThe workout session’s current state.\nvar type: HKWorkoutSessionType\nA value that indicates whether the session is a primary session or a mirrored session.\nvar workoutConfiguration: HKWorkoutConfiguration\nThe configuration object that describes this workout."
  },
  {
    "title": "currentActivity | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkoutsession/3955295-currentactivity",
    "html": "Discussion\n\nThis property contains a workout activity that’s currently in progress (an activity with an endDate property set to nil). If you end the activity — for example, by calling endCurrentActivity(on:) or updateActivity(uuid:end:completion:) — the system sets this property to nil until you begin a new activity.\n\nSee Also\nManaging workout activities\nfunc beginNewActivity(configuration: HKWorkoutConfiguration, date: Date, metadata: [String : Any]?)\nBegins a new workout activity in the workout session.\nfunc endCurrentActivity(on: Date)\nEnds the current workout activity."
  },
  {
    "title": "HKMetadataKeyAlgorithmVersion | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkmetadatakeyalgorithmversion",
    "html": "Discussion\n\nThis key takes an NSNumber containing an NSInteger.\n\nNote\n\nIn watchOS 8, the system uses this key for heartRateVariabilitySDNN and HKHeartbeatSeriesSample samples generated by Apple Watch.\n\nSee Also\nAlgorithm Keys\nlet HKMetadataKeyAppleECGAlgorithmVersion: String\nA key for metadata indicating the version number of the algorithm Apple Watch uses to generate an ECG reading.\nenum HKAppleECGAlgorithmVersion\nVersion numbers for the algorithm Apple Watch uses to generate an ECG reading.\nlet HKPredicateKeyPathECGClassification: String\nThe key path for the sample’s classification.\nlet HKPredicateKeyPathECGSymptomsStatus: String\nThe key path for the sample’s symptom status."
  },
  {
    "title": "HKMetadataKeyHeartRateRecoveryTestType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkmetadatakeyheartraterecoverytesttype",
    "html": "Discussion\n\nUse this metadata key to identify the type of test that the HKSource used to calculate the value for a heartRateRecoveryOneMinute sample.\n\nTopics\nHeart rate recovery tests\nenum HKHeartRateRecoveryTestType\nThe test that measured a person’s heart-rate recovery.\nSee Also\nVitals Sensors Keys\nlet HKMetadataKeyBodyTemperatureSensorLocation: String\nThe location where a specific body temperature reading was taken.\nlet HKMetadataKeyHeartRateSensorLocation: String\nThe location where a specific heart rate reading was taken.\nlet HKMetadataKeyHeartRateMotionContext: String\nThe user’s activity level when the heart rate sample was measured.\nlet HKPredicateKeyPathAverageHeartRate: String\nThe key path for the sample’s average heart rate.\nlet HKMetadataKeyHeartRateRecoveryActivityDuration: String\nlet HKMetadataKeyHeartRateRecoveryActivityType: String\nlet HKMetadataKeyHeartRateRecoveryMaxObservedRecoveryHeartRate: String\nlet HKMetadataKeyVO2MaxTestType: String\nThe method used to calculate the user’s VO2 max rate."
  },
  {
    "title": "activityType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkoutsession/1627962-activitytype",
    "html": "Deprecated\n\nUse workoutConfiguration instead.\n\nDiscussion\n\nFor a list of possible activity types, see HKWorkoutActivityType.\n\nSee Also\nDeprecated methods\ninit(activityType: HKWorkoutActivityType, locationType: HKWorkoutSessionLocationType)\nReturns a newly instantiated workout session.\nDeprecated\ninit(configuration: HKWorkoutConfiguration)\nReturns a newly instantiated workout session.\nDeprecated\nvar locationType: HKWorkoutSessionLocationType\nA value that indicates whether the workout session occurred indoors or outdoors."
  },
  {
    "title": "HKPredicateKeyPathECGClassification | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkpredicatekeypathecgclassification",
    "html": "Discussion\n\nUse this constant whenever you want to include the ECG’s classification in a predicate format string. Add a %K placeholder to the format string, and then pass this constant as an argument.\n\nSee Also\nSpecifying Predicate Key Paths\nlet HKPredicateKeyPathECGSymptomsStatus: String\nThe key path for the sample’s symptom status.\nlet HKPredicateKeyPathAverageHeartRate: String\nThe key path for the sample’s average heart rate.\nRelated Documentation\nenum HKElectrocardiogram.Classification\nClassifications returned by Apple Watch’s ECG algorithm."
  },
  {
    "title": "HKAppleECGAlgorithmVersion | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkappleecgalgorithmversion",
    "html": "Topics\nVersions\ncase version1\nThe version 1 algorithm.\ncase version2\nThe version 2 algorithm.\nRelationships\nConforms To\nSendable\nSee Also\nSpecifying Metadata\nlet HKMetadataKeyAppleECGAlgorithmVersion: String\nA key for metadata indicating the version number of the algorithm Apple Watch uses to generate an ECG reading."
  },
  {
    "title": "count | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquantitysample/2962899-count",
    "html": "Discussion\n\nSamples created using one of the init() methods have a count of 1. Samples created using an HKQuantitySeriesSampleBuilder may have a count greater than 1.\n\nSee Also\nGetting Property Data\nvar quantity: HKQuantity\nThe quantity for this sample.\nvar quantityType: HKQuantityType\nThe quantity type for this sample.\nRelated Documentation\nclass HKQuantitySeriesSampleQuery\nA query that accesses the series data associated with a quantity sample."
  },
  {
    "title": "HKActivitySummaryQueryDescriptor.Results | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkactivitysummaryquerydescriptor/results",
    "html": "Topics\nCreating an Iterator\nfunc makeAsyncIterator() -> HKActivitySummaryQueryDescriptor.Results.Iterator\nCreates the asynchronous iterator that produces results from this asynchronous sequence.\nstruct HKActivitySummaryQueryDescriptor.Results.Iterator\nAn iterator for accessing active summary results.\ntypealias HKActivitySummaryQueryDescriptor.Results.AsyncIterator\nAn iterator that returns results from an asynchronous sequence.\ntypealias HKActivitySummaryQueryDescriptor.Results.Element\nA set of results that the active summary query returns.\nFinding Elements\nfunc contains(where: ([HKActivitySummary]) -> Bool) -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains an element that satisfies the given predicate.\nfunc contains([HKActivitySummary]) -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains the given element.\nfunc allSatisfy(([HKActivitySummary]) -> Bool) -> Bool\nReturns a Boolean value that indicates whether all elements produced by the asynchronous sequence satisfy the given predicate.\nfunc first(where: ([HKActivitySummary]) -> Bool) -> [HKActivitySummary]?\nReturns the first element of the sequence that satisfies the given predicate.\nfunc max(by: ([HKActivitySummary], [HKActivitySummary]) -> Bool) -> [HKActivitySummary]?\nReturns the maximum element in the asynchronous sequence, using the given predicate as the comparison between elements.\nfunc min(by: ([HKActivitySummary], [HKActivitySummary]) -> Bool) -> [HKActivitySummary]?\nReturns the minimum element in the asynchronous sequence, using the given predicate as the comparison between elements.\nSelecting Elements\nfunc prefix(Int) -> AsyncPrefixSequence<HKActivitySummaryQueryDescriptor.Results>\nReturns an asynchronous sequence, up to the specified maximum length, containing the initial elements of the base asynchronous sequence.\nfunc prefix(while: ([HKActivitySummary]) -> Bool) -> AsyncPrefixWhileSequence<HKActivitySummaryQueryDescriptor.Results>\nReturns an asynchronous sequence, containing the initial, consecutive elements of the base sequence that satisfy the given predicate.\nExcluding Elements\nfunc dropFirst(Int) -> AsyncDropFirstSequence<HKActivitySummaryQueryDescriptor.Results>\nOmits a specified number of elements from the base asynchronous sequence, then passes through all remaining elements.\nfunc drop(while: ([HKActivitySummary]) -> Bool) -> AsyncDropWhileSequence<HKActivitySummaryQueryDescriptor.Results>\nOmits elements from the base asynchronous sequence until a given closure returns false, after which it passes through all remaining elements.\nfunc filter(([HKActivitySummary]) -> Bool) -> AsyncFilterSequence<HKActivitySummaryQueryDescriptor.Results>\nCreates an asynchronous sequence that contains, in order, the elements of the base sequence that satisfy the given predicate.\nTransforming a Sequence\nfunc map<Transformed>(([HKActivitySummary]) -> Transformed) -> AsyncMapSequence<HKActivitySummaryQueryDescriptor.Results, Transformed>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements.\nfunc map<Transformed>(([HKActivitySummary]) -> Transformed) -> AsyncThrowingMapSequence<HKActivitySummaryQueryDescriptor.Results, Transformed>\nCreates an asynchronous sequence that maps the given error-throwing closure over the asynchronous sequence’s elements.\nfunc reduce<Result>(Result, (Result, [HKActivitySummary]) -> Result) -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure.\nfunc reduce<Result>(into: Result, (inout Result, [HKActivitySummary]) -> Void) -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure, given a mutable initial value.\nfunc compactMap<ElementOfResult>(([HKActivitySummary]) -> ElementOfResult?) -> AsyncCompactMapSequence<HKActivitySummaryQueryDescriptor.Results, ElementOfResult>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements, omitting results that don’t return a value.\nfunc compactMap<ElementOfResult>(([HKActivitySummary]) -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<HKActivitySummaryQueryDescriptor.Results, ElementOfResult>\nCreates an asynchronous sequence that maps an error-throwing closure over the base sequence’s elements, omitting results that don’t return a value.\nfunc flatMap<SegmentOfResult>(([HKActivitySummary]) -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<HKActivitySummaryQueryDescriptor.Results, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given error-throwing transformation with each element of this sequence.\nfunc flatMap<SegmentOfResult>(([HKActivitySummary]) -> SegmentOfResult) -> AsyncFlatMapSequence<HKActivitySummaryQueryDescriptor.Results, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given transformation with each element of this sequence.\nRelationships\nConforms To\nAsyncSequence\nSee Also\nRunning queries\nfunc result(for: HKHealthStore) -> [HKActivitySummary]\nRuns a one-shot query and asynchronously returns a snapshot of the current matching results.\nfunc results(for: HKHealthStore) -> HKActivitySummaryQueryDescriptor.Results\nInitiates a long-running query that returns its results using an asynchronous sequence."
  },
  {
    "title": "dietaryVitaminK | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquantitytypeidentifier/1615475-dietaryvitamink",
    "html": "Discussion\n\nThese samples use mass units (described in HKUnit) and measure cumulative values (described in HKQuantityAggregationStyle).\n\nSee Also\nNutrition\nstatic let dietaryBiotin: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of biotin (vitamin B7) consumed.\nstatic let dietaryCaffeine: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of caffeine consumed.\nstatic let dietaryCalcium: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of calcium consumed.\nstatic let dietaryCarbohydrates: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of carbohydrates consumed.\nstatic let dietaryChloride: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of chloride consumed.\nstatic let dietaryCholesterol: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of cholesterol consumed.\nstatic let dietaryChromium: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of chromium consumed.\nstatic let dietaryCopper: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of copper consumed.\nstatic let dietaryEnergyConsumed: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of energy consumed.\nstatic let dietaryFatMonounsaturated: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of monounsaturated fat consumed.\nstatic let dietaryFatPolyunsaturated: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of polyunsaturated fat consumed.\nstatic let dietaryFatSaturated: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of saturated fat consumed.\nstatic let dietaryFatTotal: HKQuantityTypeIdentifier\nA quantity sample type that measures the total amount of fat consumed.\nstatic let dietaryFiber: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of fiber consumed.\nstatic let dietaryFolate: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of folate (folic acid) consumed.\nstatic let dietaryIodine: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of iodine consumed.\nstatic let dietaryIron: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of iron consumed.\nstatic let dietaryMagnesium: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of magnesium consumed.\nstatic let dietaryManganese: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of manganese consumed.\nstatic let dietaryMolybdenum: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of molybdenum consumed.\nstatic let dietaryNiacin: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of niacin (vitamin B3) consumed.\nstatic let dietaryPantothenicAcid: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of pantothenic acid (vitamin B5) consumed.\nstatic let dietaryPhosphorus: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of phosphorus consumed.\nstatic let dietaryPotassium: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of potassium consumed.\nstatic let dietaryProtein: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of protein consumed.\nstatic let dietaryRiboflavin: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of riboflavin (vitamin B2) consumed.\nstatic let dietarySelenium: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of selenium consumed.\nstatic let dietarySodium: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of sodium consumed.\nstatic let dietarySugar: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of sugar consumed.\nstatic let dietaryThiamin: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of thiamin (vitamin B1) consumed.\nstatic let dietaryVitaminA: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of vitamin A consumed.\nstatic let dietaryVitaminB12: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of cyanocobalamin (vitamin B12) consumed.\nstatic let dietaryVitaminB6: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of pyridoxine (vitamin B6) consumed.\nstatic let dietaryVitaminC: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of vitamin C consumed.\nstatic let dietaryVitaminD: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of vitamin D consumed.\nstatic let dietaryVitaminE: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of vitamin E consumed.\nstatic let dietaryWater: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of water consumed.\nstatic let dietaryZinc: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of zinc consumed.\nRelated Documentation\nstruct HKQuantityTypeIdentifier\nThe identifiers that create quantity type objects.\nclass HKQuantitySample\nA sample that represents a quantity, including the value and the units.\nclass HKQuantity\nAn object that stores a value for a given unit."
  },
  {
    "title": "HKCategoryValueProgesteroneTestResult | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkcategoryvalueprogesteronetestresult",
    "html": "Topics\nTest Results\ncase positive\nThe test returned a positive result.\ncase negative\nThe test returned a negative result.\ncase indeterminate\nThe test was inconclusive.\nRelationships\nConforms To\nHKCategoryValuePredicateProviding\nSendable\nSee Also\nAssigning Values\nenum HKCategoryValue\nCategories that are undefined.\nenum HKCategoryValueCervicalMucusQuality\nCategories that represent the user’s cervical mucus quality.\nenum HKCategoryValueMenstrualFlow\nCategories that indicate the amount of menstrual flow for a given sample.\nenum HKCategoryValueOvulationTestResult\nCategories that represent the result of an ovulation home test.\nenum HKCategoryValueContraceptive\nThe type of contraceptive.\nenum HKCategoryValueSleepAnalysis\nCategories that represent the result of a sleep analysis.\nenum HKCategoryValueAppetiteChanges\nCategories that represent change in appetite.\nenum HKCategoryValuePresence\nCategories that indicate whether a symptom is present.\nenum HKCategoryValueSeverity\nCategories that represent the severity of a symptom.\nenum HKCategoryValueEnvironmentalAudioExposureEvent\nExposure events for environmental audio.\nenum HKCategoryValueHeadphoneAudioExposureEvent\nExposure events for headphone audio.\nenum HKCategoryValueLowCardioFitnessEvent\nA value that indicates a low-level cardio fitness event.\nenum HKAppleWalkingSteadinessClassification\nA classification of a score based on the steadiness of the user’s gait.\nenum HKCategoryValueAppleWalkingSteadinessEvent\nThe value of an event triggered by a reduced score for the steadiness of the user’s gait.\nenum HKCategoryValuePregnancyTestResult\nCategory values that indicate the results of a home pregnancy test.\nenum HKCategoryValueAudioExposureEvent\nCategories that indicate audio exposure events."
  },
  {
    "title": "HKCategoryValueAudioExposureEvent | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkcategoryvalueaudioexposureevent",
    "html": "Deprecated\n\nUse HKCategoryValueEnvironmentalAudioExposureEvent instead.\n\nTopics\nExposure Events\ncase loudEnvironment\nExposure to a loud environment.\nRelationships\nConforms To\nSendable\nSee Also\nAssigning Values\nenum HKCategoryValue\nCategories that are undefined.\nenum HKCategoryValueCervicalMucusQuality\nCategories that represent the user’s cervical mucus quality.\nenum HKCategoryValueMenstrualFlow\nCategories that indicate the amount of menstrual flow for a given sample.\nenum HKCategoryValueOvulationTestResult\nCategories that represent the result of an ovulation home test.\nenum HKCategoryValueContraceptive\nThe type of contraceptive.\nenum HKCategoryValueSleepAnalysis\nCategories that represent the result of a sleep analysis.\nenum HKCategoryValueAppetiteChanges\nCategories that represent change in appetite.\nenum HKCategoryValuePresence\nCategories that indicate whether a symptom is present.\nenum HKCategoryValueSeverity\nCategories that represent the severity of a symptom.\nenum HKCategoryValueEnvironmentalAudioExposureEvent\nExposure events for environmental audio.\nenum HKCategoryValueHeadphoneAudioExposureEvent\nExposure events for headphone audio.\nenum HKCategoryValueLowCardioFitnessEvent\nA value that indicates a low-level cardio fitness event.\nenum HKAppleWalkingSteadinessClassification\nA classification of a score based on the steadiness of the user’s gait.\nenum HKCategoryValueAppleWalkingSteadinessEvent\nThe value of an event triggered by a reduced score for the steadiness of the user’s gait.\nenum HKCategoryValuePregnancyTestResult\nCategory values that indicate the results of a home pregnancy test.\nenum HKCategoryValueProgesteroneTestResult\nA category value that indicates the result from a home progesterone test."
  },
  {
    "title": "init(sampleType:predicate:updateHandler:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkobserverquery/1615317-init",
    "html": "Parameters\nsampleType\n\nThe type of sample to search for. This query supports all sample types. Specifically, you can pass any concrete subclass of the HKSampleType class (the HKQuantityType, HKCategoryType, HKWorkoutType, and HKCorrelationType classes)\n\npredicate\n\nA predicate that limits the samples matched by the query. Pass nil if you want to receive updates for every new sample of the specified type.\n\nupdateHandler\n\nA block that is called when a matching sample is saved to or deleted from the HealthKit store. This block takes the following parameters:\n\nquery\n\nA reference to the query calling this block.\n\ncompletionHandler\n\nIf you have registered for background updates, you must call this completion handler as soon as you are done processing the incoming data. This tells HealthKit that you have successfully received the background update. Additionally, you should only call the completion handler when you are using background updates. For more information on using this completion handler, see HKObserverQueryCompletionHandler.\n\nerror\n\nIf an error occurs, this parameter contains an object describing the error; otherwise, it is nil.\n\nReturn Value\n\nA newly initialized observer query object.\n\nDiscussion\n\nAfter instantiating the query, call the HKHealthStore class’s execute(_:) method to run this query. Observer queries are long-running tasks. They continue to run on an anonymous background thread and call their results handler whenever they detects relevant changes to the HealthKit store. To stop a query, call the HKHealthStore class’s stop(_:) method.\n\nThe provided update handler block is called every time samples matching this query are saved to or deleted from the HealthKit store. You often need to launch other queries from inside this block to get the updated data. In particular, you can use Anchored Object Queries to retrieve the list of new samples that have been added to the store. For more information, see HKAnchoredObjectQuery\n\nSee Also\nCreating Observer Queries\nExecuting Observer Queries\nCreate and run observer queries.\ninit(queryDescriptors: [HKQueryDescriptor], updateHandler: (HKObserverQuery, Set<HKSampleType>?, HKObserverQueryCompletionHandler, Error?) -> Void)\nCreates a query that monitors the HealthKit store and responds to any changes matching any of the query descriptors you provided.\ntypealias HKObserverQueryCompletionHandler\nThe completion handler for background deliveries."
  },
  {
    "title": "allAsleepValues | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkcategoryvaluesleepanalysis/3931475-allasleepvalues",
    "html": "Discussion\n\nThis value includes asleep, HKCategoryValueSleepAnalysis.asleepCore, HKCategoryValueSleepAnalysis.asleepDeep, HKCategoryValueSleepAnalysis.asleepREM, and HKCategoryValueSleepAnalysis.asleepUnspecified.\n\nSee Also\nValues for Tracking Sleep States\ncase awake\nThe user is awake.\ncase asleepCore\nThe user is in light or intermediate sleep.\ncase asleepDeep\nThe user is in deep sleep.\ncase asleepREM\nThe user is in REM sleep.\ncase asleepUnspecified\nThe user is asleep, but the specific stage isn’t known."
  },
  {
    "title": "HKAppleWalkingSteadinessClassification | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkapplewalkingsteadinessclassification",
    "html": "Overview\n\nWalking Steadiness classifications measure the ability of the user to move with a steady, even gait. To convert a Walking Steadiness score to a classification, use the init(for:) initializer to create a new HKAppleWalkingSteadinessClassification instance. You can also use the minimum and maximum properties to determine the minimum and maximum scores for a given classification.\n\nTopics\nCreating Classifications\ninit(for: HKQuantity)\nCreates a new classification for the provided percentage.\nAccessing Classifications\ncase ok\nA classification indicating that the stability of the user’s gait is within the normal range.\ncase low\nA classification indicating that the stability of the user’s gate is below normal.\ncase veryLow\nA classification indicating that the stability of the user’s gate is considerably below normal.\ntypealias HKAppleWalkingSteadinessClassification.AllCases\nA type representing an array of classifications.\nstatic var allCases: [HKAppleWalkingSteadinessClassification]\nAn array that contains all valid walking steadiness classifications.\nAccessing Values\nvar maximum: HKQuantity\nThe minimum walking steadiness percentage for the classification.\nvar minimum: HKQuantity\nThe maximum walking steadiness percentage for the classification.\nRelationships\nConforms To\nCaseIterable\nSendable\nSee Also\nAssigning Values\nenum HKCategoryValue\nCategories that are undefined.\nenum HKCategoryValueCervicalMucusQuality\nCategories that represent the user’s cervical mucus quality.\nenum HKCategoryValueMenstrualFlow\nCategories that indicate the amount of menstrual flow for a given sample.\nenum HKCategoryValueOvulationTestResult\nCategories that represent the result of an ovulation home test.\nenum HKCategoryValueContraceptive\nThe type of contraceptive.\nenum HKCategoryValueSleepAnalysis\nCategories that represent the result of a sleep analysis.\nenum HKCategoryValueAppetiteChanges\nCategories that represent change in appetite.\nenum HKCategoryValuePresence\nCategories that indicate whether a symptom is present.\nenum HKCategoryValueSeverity\nCategories that represent the severity of a symptom.\nenum HKCategoryValueEnvironmentalAudioExposureEvent\nExposure events for environmental audio.\nenum HKCategoryValueHeadphoneAudioExposureEvent\nExposure events for headphone audio.\nenum HKCategoryValueLowCardioFitnessEvent\nA value that indicates a low-level cardio fitness event.\nenum HKCategoryValueAppleWalkingSteadinessEvent\nThe value of an event triggered by a reduced score for the steadiness of the user’s gait.\nenum HKCategoryValuePregnancyTestResult\nCategory values that indicate the results of a home pregnancy test.\nenum HKCategoryValueProgesteroneTestResult\nA category value that indicates the result from a home progesterone test.\nenum HKCategoryValueAudioExposureEvent\nCategories that indicate audio exposure events."
  },
  {
    "title": "HKCategoryValuePregnancyTestResult | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkcategoryvaluepregnancytestresult",
    "html": "Topics\nTest Results\ncase positive\nThe test returned a positive result.\ncase negative\nThe test returned a negative result.\ncase indeterminate\nThe test was inconclusive.\nRelationships\nConforms To\nHKCategoryValuePredicateProviding\nSendable\nSee Also\nAssigning Values\nenum HKCategoryValue\nCategories that are undefined.\nenum HKCategoryValueCervicalMucusQuality\nCategories that represent the user’s cervical mucus quality.\nenum HKCategoryValueMenstrualFlow\nCategories that indicate the amount of menstrual flow for a given sample.\nenum HKCategoryValueOvulationTestResult\nCategories that represent the result of an ovulation home test.\nenum HKCategoryValueContraceptive\nThe type of contraceptive.\nenum HKCategoryValueSleepAnalysis\nCategories that represent the result of a sleep analysis.\nenum HKCategoryValueAppetiteChanges\nCategories that represent change in appetite.\nenum HKCategoryValuePresence\nCategories that indicate whether a symptom is present.\nenum HKCategoryValueSeverity\nCategories that represent the severity of a symptom.\nenum HKCategoryValueEnvironmentalAudioExposureEvent\nExposure events for environmental audio.\nenum HKCategoryValueHeadphoneAudioExposureEvent\nExposure events for headphone audio.\nenum HKCategoryValueLowCardioFitnessEvent\nA value that indicates a low-level cardio fitness event.\nenum HKAppleWalkingSteadinessClassification\nA classification of a score based on the steadiness of the user’s gait.\nenum HKCategoryValueAppleWalkingSteadinessEvent\nThe value of an event triggered by a reduced score for the steadiness of the user’s gait.\nenum HKCategoryValueProgesteroneTestResult\nA category value that indicates the result from a home progesterone test.\nenum HKCategoryValueAudioExposureEvent\nCategories that indicate audio exposure events."
  },
  {
    "title": "asleep | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkcategoryvaluesleepanalysis/1615586-asleep",
    "html": "Deprecated\n\nUse HKCategoryValueSleepAnalysis.asleepCore, HKCategoryValueSleepAnalysis.asleepDeep, HKCategoryValueSleepAnalysis.asleepREM, or HKCategoryValueSleepAnalysis.asleepUnspecified instead."
  },
  {
    "title": "Executing Observer Queries | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkobserverquery/executing_observer_queries",
    "html": "Overview\n\nObserver queries are long-running queries that monitor the HealthKit store on a background thread, and update your app when the HealthKit store saves or deletes a matching sample. By default, observer queries only return results while your app is in the foreground; however, you can configure your app to also receive update notifications in the background.\n\nCreate Observer Queries\n\nTo create an observer query, call the init(sampleType:predicate:updateHandler:) initializer. Start by creating a type object for the samples you want to observe. The following example creates a type object for step counts.\n\nguard let stepCountType = HKObjectType.quantityType(forIdentifier: .stepCount) else {\n    // This should never fail when using a defined constant.\n    fatalError(\"*** Unable to get the step count type ***\")\n}\n\n\nNext, create the observer query.\n\nlet query = HKObserverQuery(sampleType: stepCountType, predicate: nil) { (query, completionHandler, errorOrNil) in\n    \n    if let error = errorOrNil {\n        // Properly handle the error.\n        return\n    }\n        \n    // Take whatever steps are necessary to update your app.\n    // This often involves executing other queries to access the new data.\n    \n    // If you have subscribed for background updates you must call the completion handler here.\n    // completionHandler()\n}\n\n\nAfter the query is instantiated, call the HealthKit store’s execute(_:) method.\n\nstore.execute(query)\n\n\nThis runs the query on an anonymous background queue. Whenever a matching sample is added to or deleted from the HealthKit store, the system calls the query’s update handler on the same background queue (but not necessarily the same thread).\n\nNote\n\nThe observer query’s update handler does not receive any information about the change—just that a change occurred. You must execute another query, for example an HKSampleQuery or HKAnchoredObjectQuery, to access the changes.\n\nTo stop the query, call the HealthKit store’s stop(_:) method.\n\nReceive Background Deliveries\n\nApps can also register to receive updates while in the background by calling the HealthKit store’s enableBackgroundDelivery(for:frequency:withCompletion:) method. This method registers your app for background notifications. HealthKit wakes your app when the store receives new samples of the specified type. HealthKit notifies your app at most once per time period defined by the frequency you specified when registering.\n\nAs soon as your app launches, HealthKit calls the update handler for any observer queries that match the newly saved data. If you plan on supporting background delivery, set up all your observer queries in your app delegate’s application(_:didFinishLaunchingWithOptions:) method. By setting up the queries in application(_:didFinishLaunchingWithOptions:), you ensure that the queries are instantiated and ready to use before HealthKit delivers the updates.\n\nAfter your observer queries have finished processing the new data, you must call the update’s completion handler to notify HealthKit that you have successfully received the background delivery.\n\nFor more information on managing background deliveries, see Managing Background Deliveries in HKHealthStore. For more information on the background delivery completion handler, see HKObserverQueryCompletionHandler.\n\nSee Also\nCreating Observer Queries\ninit(sampleType: HKSampleType, predicate: NSPredicate?, updateHandler: (HKObserverQuery, HKObserverQueryCompletionHandler, Error?) -> Void)\nInstantiates and returns a query that monitors the HealthKit store and responds to changes.\ninit(queryDescriptors: [HKQueryDescriptor], updateHandler: (HKObserverQuery, Set<HKSampleType>?, HKObserverQueryCompletionHandler, Error?) -> Void)\nCreates a query that monitors the HealthKit store and responds to any changes matching any of the query descriptors you provided.\ntypealias HKObserverQueryCompletionHandler\nThe completion handler for background deliveries."
  },
  {
    "title": "HKCategoryValueSeverity | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkcategoryvalueseverity",
    "html": "Topics\nSeverity Categories\ncase notPresent\nThe symptom is not present.\ncase mild\nThe symptom is mild.\ncase moderate\nThe symptom is moderate.\ncase severe\nThe symptom is severe.\ncase unspecified\nThe symptom’s severity is not specified.\nRelationships\nConforms To\nHKCategoryValuePredicateProviding\nSendable\nSee Also\nAssigning Values\nenum HKCategoryValue\nCategories that are undefined.\nenum HKCategoryValueCervicalMucusQuality\nCategories that represent the user’s cervical mucus quality.\nenum HKCategoryValueMenstrualFlow\nCategories that indicate the amount of menstrual flow for a given sample.\nenum HKCategoryValueOvulationTestResult\nCategories that represent the result of an ovulation home test.\nenum HKCategoryValueContraceptive\nThe type of contraceptive.\nenum HKCategoryValueSleepAnalysis\nCategories that represent the result of a sleep analysis.\nenum HKCategoryValueAppetiteChanges\nCategories that represent change in appetite.\nenum HKCategoryValuePresence\nCategories that indicate whether a symptom is present.\nenum HKCategoryValueEnvironmentalAudioExposureEvent\nExposure events for environmental audio.\nenum HKCategoryValueHeadphoneAudioExposureEvent\nExposure events for headphone audio.\nenum HKCategoryValueLowCardioFitnessEvent\nA value that indicates a low-level cardio fitness event.\nenum HKAppleWalkingSteadinessClassification\nA classification of a score based on the steadiness of the user’s gait.\nenum HKCategoryValueAppleWalkingSteadinessEvent\nThe value of an event triggered by a reduced score for the steadiness of the user’s gait.\nenum HKCategoryValuePregnancyTestResult\nCategory values that indicate the results of a home pregnancy test.\nenum HKCategoryValueProgesteroneTestResult\nA category value that indicates the result from a home progesterone test.\nenum HKCategoryValueAudioExposureEvent\nCategories that indicate audio exposure events."
  },
  {
    "title": "euDigitalCOVIDCertificate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkverifiableclinicalrecordsourcetype/3922615-eudigitalcovidcertificate",
    "html": "See Also\nIdentifying Source Types\nstatic let smartHealthCard: HKVerifiableClinicalRecordSourceType\nA value indicating SMART health cards."
  },
  {
    "title": "init(documentType:predicate:limit:sortDescriptors:includeDocumentData:resultsHandler:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkdocumentquery/1779561-init",
    "html": "Parameters\ndocumentType\n\nThe type of document to search for. For a list of supported document types, see Document Type Identifier in HealthKit Constants.\n\npredicate\n\nA predicate that limits the results returned by the query. Pass nil to receive all the documents of the specified type.\n\nlimit\n\nThe maximum number of samples returned by the query. If you want to return all matching samples, use HKObjectQueryNoLimit.\n\nsortDescriptors\n\nAn array of sort descriptors that specify the order of the results returned by this query. Pass nil if you don’t need the results in a specific order.\n\nNote\n\nHealthKit defines a number of sort identifiers (for example, HKSampleSortIdentifierStartDate). Use the sort descriptors you create with these identifiers only in queries. You cannot use them to perform an in-memory sort of an array of samples.\n\nincludeDocumentData\n\nPass true to include the full document data. Pass false to just receive a summary of the document. For CDA documents, the summary includes the title, the patient’s name, the author’s name, and the custodian’s name.\n\nSince the full document data can be quite large, only pass true when you need to access the full document’s data.\n\nresultsHandler\n\nA block that is called each time a new batch of documents is available. The document query returns its results incrementally in batches. The results handler may be called multiple times each time the query is executed.\n\nThis block takes the following parameters:\n\nquery\n\nA reference to the query calling this block.\n\nresults\n\nAn array containing the samples returned by this query, or nil if an error occurred.\n\ndone\n\nA Boolean value that indicates whether the query is done. If true, the query is complete, and it will not call the results handler again. Otherwise, the query will call the results handler at least one more time, as soon as the next batch of documents is available.\n\nerror\n\nIf an error occurs, this parameter contains an object describing the error; otherwise, it is nil.\n\nReturn Value\n\nA newly initialized document query object.\n\nDiscussion\n\nAfter you instantiate the query, call the HKHealthStore class’s execute(_:) method to run it. Queries run on an anonymous background queue. As soon as the query is complete, the results handler is executed on the same background queue (but not necessarily on the same thread). You typically dispatch these results to the main queue to update the user interface.\n\nSee Also\nCreating Document Queries\nlet HKObjectQueryNoLimit: Int\nA value indicating that the query returns all the matching samples in the HealthKit store."
  },
  {
    "title": "HKStatisticsCollectionQueryDescriptor.Results | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkstatisticscollectionquerydescriptor/results",
    "html": "Topics\nCreating an Iterator\nfunc makeAsyncIterator() -> HKStatisticsCollectionQueryDescriptor.Results.Iterator\nCreates the asynchronous iterator that produces results from this asynchronous sequence.\nstruct HKStatisticsCollectionQueryDescriptor.Results.Iterator\nAn iterator for statistics collection query results.\nstruct HKStatisticsCollectionQueryDescriptor.Result\nA collection of results.\ntypealias HKStatisticsCollectionQueryDescriptor.Results.AsyncIterator\nAn iterator that returns results from an asynchronous sequence.\ntypealias HKStatisticsCollectionQueryDescriptor.Results.Element\nA set of results returned by an active summary query.\nFinding Elements\nfunc contains(where: (HKStatisticsCollectionQueryDescriptor.Result) -> Bool) -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains an element that satisfies the given predicate.\nfunc allSatisfy((HKStatisticsCollectionQueryDescriptor.Result) -> Bool) -> Bool\nReturns a Boolean value that indicates whether all elements produced by the asynchronous sequence satisfy the given predicate.\nfunc first(where: (HKStatisticsCollectionQueryDescriptor.Result) -> Bool) -> HKStatisticsCollectionQueryDescriptor.Result?\nReturns the first element of the sequence that satisfies the given predicate.\nfunc max(by: (HKStatisticsCollectionQueryDescriptor.Result, HKStatisticsCollectionQueryDescriptor.Result) -> Bool) -> HKStatisticsCollectionQueryDescriptor.Result?\nReturns the maximum element in the asynchronous sequence, using the given predicate as the comparison between elements.\nfunc min(by: (HKStatisticsCollectionQueryDescriptor.Result, HKStatisticsCollectionQueryDescriptor.Result) -> Bool) -> HKStatisticsCollectionQueryDescriptor.Result?\nReturns the minimum element in the asynchronous sequence, using the given predicate as the comparison between elements.\nSelecting Elements\nfunc prefix(Int) -> AsyncPrefixSequence<HKStatisticsCollectionQueryDescriptor.Results>\nReturns an asynchronous sequence, up to the specified maximum length, containing the initial elements of the base asynchronous sequence.\nfunc prefix(while: (HKStatisticsCollectionQueryDescriptor.Result) -> Bool) -> AsyncPrefixWhileSequence<HKStatisticsCollectionQueryDescriptor.Results>\nReturns an asynchronous sequence, containing the initial, consecutive elements of the base sequence that satisfy the given predicate.\nExcluding Elements\nfunc drop(while: (HKStatisticsCollectionQueryDescriptor.Result) -> Bool) -> AsyncDropWhileSequence<HKStatisticsCollectionQueryDescriptor.Results>\nOmits elements from the base asynchronous sequence until a given closure returns false, after which it passes through all remaining elements.\nfunc dropFirst(Int) -> AsyncDropFirstSequence<HKStatisticsCollectionQueryDescriptor.Results>\nOmits a specified number of elements from the base asynchronous sequence, then passes through all remaining elements.\nfunc filter((HKStatisticsCollectionQueryDescriptor.Result) -> Bool) -> AsyncFilterSequence<HKStatisticsCollectionQueryDescriptor.Results>\nCreates an asynchronous sequence that contains, in order, the elements of the base sequence that satisfy the given predicate.\nTransforming a Sequence\nfunc map<Transformed>((HKStatisticsCollectionQueryDescriptor.Result) -> Transformed) -> AsyncMapSequence<HKStatisticsCollectionQueryDescriptor.Results, Transformed>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements.\nfunc map<Transformed>((HKStatisticsCollectionQueryDescriptor.Result) -> Transformed) -> AsyncThrowingMapSequence<HKStatisticsCollectionQueryDescriptor.Results, Transformed>\nCreates an asynchronous sequence that maps the given error-throwing closure over the asynchronous sequence’s elements.\nfunc reduce<Result>(Result, (Result, HKStatisticsCollectionQueryDescriptor.Result) -> Result) -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure.\nfunc reduce<Result>(into: Result, (inout Result, HKStatisticsCollectionQueryDescriptor.Result) -> Void) -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure, given a mutable initial value.\nfunc compactMap<ElementOfResult>((HKStatisticsCollectionQueryDescriptor.Result) -> ElementOfResult?) -> AsyncCompactMapSequence<HKStatisticsCollectionQueryDescriptor.Results, ElementOfResult>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements, omitting results that don’t return a value.\nfunc compactMap<ElementOfResult>((HKStatisticsCollectionQueryDescriptor.Result) -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<HKStatisticsCollectionQueryDescriptor.Results, ElementOfResult>\nCreates an asynchronous sequence that maps an error-throwing closure over the base sequence’s elements, omitting results that don’t return a value.\nfunc flatMap<SegmentOfResult>((HKStatisticsCollectionQueryDescriptor.Result) -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<HKStatisticsCollectionQueryDescriptor.Results, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given error-throwing transformation with each element of this sequence.\nfunc flatMap<SegmentOfResult>((HKStatisticsCollectionQueryDescriptor.Result) -> SegmentOfResult) -> AsyncFlatMapSequence<HKStatisticsCollectionQueryDescriptor.Results, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given transformation with each element of this sequence.\nRelationships\nConforms To\nAsyncSequence\nSee Also\nRunning Queries\nfunc result(for: HKHealthStore) -> HKStatisticsCollection\nRuns a one-shot query and asynchronously returns statistics calculated from the current matching results.\nfunc results(for: HKHealthStore) -> HKStatisticsCollectionQueryDescriptor.Results\nInitiates a long-running query that returns statistics and updates using an asynchronous sequence."
  },
  {
    "title": "HKStatisticsQueryDescriptor.Output | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkstatisticsquerydescriptor/output",
    "html": "See Also\nCreating Query Descriptors\ninit(predicate: HKSamplePredicate<HKQuantitySample>, options: HKStatisticsOptions)\nCreates a statistics query descriptor."
  },
  {
    "title": "limit | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkdocumentquery/1779563-limit",
    "html": "Discussion\n\nThis property contains the value passed to the init(documentType:predicate:limit:sortDescriptors:includeDocumentData:resultsHandler:) method’s limit parameter.\n\nSee Also\nAccessing the Document Query’s Properties\nvar includeDocumentData: Bool\nA Boolean value that indicates whether the sample includes the full document’s data.\nvar sortDescriptors: [NSSortDescriptor]?\nAn array of sort descriptors that specify the order of the results returned by this query."
  },
  {
    "title": "result(for:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkstatisticscollectionquerydescriptor/3916606-result",
    "html": "Parameters\nhealthStore\n\nThe access point for HealthKit data.\n\nRelationships\nFrom Protocol\nHKAsyncQuery\nSee Also\nRunning Queries\nfunc results(for: HKHealthStore) -> HKStatisticsCollectionQueryDescriptor.Results\nInitiates a long-running query that returns statistics and updates using an asynchronous sequence.\nstruct HKStatisticsCollectionQueryDescriptor.Results\nAn asynchronous sequence that emits updates from a statistics collection query."
  },
  {
    "title": "results(for:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkstatisticscollectionquerydescriptor/3916607-results",
    "html": "Parameters\nhealthStore\n\nThe access point for HealthKit data.\n\nRelationships\nFrom Protocol\nHKAsyncSequenceQuery\nSee Also\nRunning Queries\nfunc result(for: HKHealthStore) -> HKStatisticsCollection\nRuns a one-shot query and asynchronously returns statistics calculated from the current matching results.\nstruct HKStatisticsCollectionQueryDescriptor.Results\nAn asynchronous sequence that emits updates from a statistics collection query."
  },
  {
    "title": "HKElectrocardiogramQuery.Result.error(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkelectrocardiogramquery/result/error",
    "html": "See Also\nResults\ncase measurement(HKElectrocardiogram.VoltageMeasurement)\nA single voltage measurement.\ncase done\nThe query has finished returning voltage measurements."
  },
  {
    "title": "sumQuantity() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkstatistics/1615680-sumquantity",
    "html": "Return Value\n\nIf the cumulativeSum option was set, this method returns a quantity object containing the sum of all the samples matching the query; otherwise, it returns nil.\n\nSee Also\nGetting Statistics Data\nfunc averageQuantity() -> HKQuantity?\nReturns the average value from all the samples that match the query.\nfunc averageQuantity(for: HKSource) -> HKQuantity?\nReturns the average value from all the samples that match the query and that were created by the specified source.\nfunc maximumQuantity() -> HKQuantity?\nReturns the maximum value from all the samples that match the query.\nfunc maximumQuantity(for: HKSource) -> HKQuantity?\nReturns the maximum value from all the samples that match the query and that were created by the specified source.\nfunc minimumQuantity() -> HKQuantity?\nReturns the minimum value from all the samples that match the query.\nfunc minimumQuantity(for: HKSource) -> HKQuantity?\nReturns the minimum value from all the samples that match the query and that were created by the specified source.\nfunc sumQuantity(for: HKSource) -> HKQuantity?\nReturns the sum of all the samples that match the query and that were created by the specified source.\nfunc duration() -> HKQuantity?\nReturns the total duration covering all the samples that match the query.\nfunc duration(for: HKSource) -> HKQuantity?\nReturns the total duration covering all the samples created by the specified source that also match the query.\nRelated Documentation\nvar endDate: Date\nThe end of the time period included in these statistics.\nvar startDate: Date\nThe start of the time period included in these statistics."
  },
  {
    "title": "init(quantityType:quantitySamplePredicate:options:completionHandler:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkstatisticsquery/1615536-init",
    "html": "Parameters\nquantityType\n\nThe type of sample to search for. This type must be an instance of the HKQuantityType class. You cannot perform statistics queries using other sample types.\n\nquantitySamplePredicate\n\nA predicate that limits the results returned by the query. You can pass nil if you want to perform the statistical calculation over all the samples of the specified type.\n\noptions\n\nA list of options that define the type of statistical calculations performed and the way in which data from multiple sources are merged. For a list of valid options, see HKStatisticsOptions.\n\nhandler\n\nA block that is called after the statistical calculations are complete. This block takes the following arguments:\n\nquery\n\nA reference to the query calling this block.\n\nresults\n\nA HealthKit statistics object that contains the requested statistical data, or nil if an error occurs.\n\nerror\n\nIf an error occurs, this parameter contains an object describing the error; otherwise, it is nil.\n\nReturn Value\n\nA newly initialized statistics query object.\n\nDiscussion\n\nAfter instantiating the query, call the HKHealthStore class’s executeQuery: method to run this query. Queries run on an anonymous background queue. As soon as the query is complete, the results handler is executed on the same background queue (but not necessarily on the same thread). You typically dispatch these results to the main queue to update the user interface.\n\nNote\n\nStatistical calculations can take a considerable amount of time, especially if there are a large number of samples involved.\n\nSee Also\nCreating Statistics Queries\nExecuting Statistical Queries\nCreate and run statistical queries."
  },
  {
    "title": "anchorDate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkstatisticscollectionquerydescriptor/3916601-anchordate",
    "html": "Discussion\n\nUse this parameter to set the start time for your time intervals. For example, if you’re using a day interval, you might create a date object with a time of 2:00 a.m. This value sets the start of the day for each of your time intervals.\n\nTechnically, the anchor sets the start time for a single time interval. All other time intervals must align with this interval. The time intervals can extend before or after the anchor date. Each time interval has the same length, and there’s no gap between adjacent intervals. Think of time as a number line: The anchor date represents its origin, and the intervals create tick marks that extend away from the origin in both directions.\n\nSee Also\nAccessing Query Properties\nvar predicate: HKSamplePredicate<HKQuantitySample>\nA predicate that defines the set of data that the query uses to calculate the statistics.\nvar options: HKStatisticsOptions\nA list of options that define the type of statistical calculations performed and the way in which HealthKit merges data from multiple sources.\nvar intervalComponents: DateComponents\nThe date components that define the time interval for each statistics object in the collection."
  },
  {
    "title": "init(predicate:options:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkstatisticsquerydescriptor/3916610-init",
    "html": "Parameters\npredicate\n\nA predicate that defines the set of data that the query uses to calculate the statistics.\n\noptions\n\nA list of options that define the type of statistical calculations performed and the way in which HealthKit merges data from multiple sources. For a list of valid options, see HKStatisticsOptions.\n\nSee Also\nCreating Query Descriptors\ntypealias HKStatisticsQueryDescriptor.Output\nThe type of data that the statistics query returns."
  },
  {
    "title": "predicate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkstatisticscollectionquerydescriptor/3916605-predicate",
    "html": "See Also\nAccessing Query Properties\nvar options: HKStatisticsOptions\nA list of options that define the type of statistical calculations performed and the way in which HealthKit merges data from multiple sources.\nvar anchorDate: Date\nThe date that anchors the collection’s time intervals.\nvar intervalComponents: DateComponents\nThe date components that define the time interval for each statistics object in the collection."
  },
  {
    "title": "options | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkstatisticscollectionquerydescriptor/3916604-options",
    "html": "See Also\nAccessing Query Properties\nvar predicate: HKSamplePredicate<HKQuantitySample>\nA predicate that defines the set of data that the query uses to calculate the statistics.\nvar anchorDate: Date\nThe date that anchors the collection’s time intervals.\nvar intervalComponents: DateComponents\nThe date components that define the time interval for each statistics object in the collection."
  },
  {
    "title": "predicate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkstatisticsquerydescriptor/3916612-predicate",
    "html": "See Also\nAccessing Query Properties\nvar options: HKStatisticsOptions\nA list of options that define the type of statistical calculations performed and the way in which HealthKit merges data from multiple sources."
  },
  {
    "title": "intervalComponents | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkstatisticscollectionquerydescriptor/3916603-intervalcomponents",
    "html": "See Also\nAccessing Query Properties\nvar predicate: HKSamplePredicate<HKQuantitySample>\nA predicate that defines the set of data that the query uses to calculate the statistics.\nvar options: HKStatisticsOptions\nA list of options that define the type of statistical calculations performed and the way in which HealthKit merges data from multiple sources.\nvar anchorDate: Date\nThe date that anchors the collection’s time intervals."
  },
  {
    "title": "HKMetadataKeySyncIdentifier | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkmetadatakeysyncidentifier",
    "html": "Discussion\n\nThis key takes a string value. If you add this key to an object’s metadata, you must also add the HKMetadataKeySyncVersion key.\n\nWhen you save an HKObject with a sync identifier, the system looks for any existing objects with the same sync identifier. If it finds a match, the system compares the objects' HKMetadataKeySyncVersion values. If the new object has a greater sync version, the system replaces the old object with the new one. If the old object is associated with a workout or part of a correlation, the system also replaces the old object in the workout or correlation.\n\nSee Also\nSync Keys\nlet HKMetadataKeySyncVersion: String\nThe version number for a piece of data, used when updating or syncing."
  },
  {
    "title": "options | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkstatisticsquerydescriptor/3916611-options",
    "html": "Discussion\n\nFor a list of valid options, see HKStatisticsOptions.\n\nSee Also\nAccessing Query Properties\nvar predicate: HKSamplePredicate<HKQuantitySample>\nA predicate that defines the set of data that the query uses to calculate the statistics."
  },
  {
    "title": "workoutBuilder(_:didCollectDataOf:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkliveworkoutbuilderdelegate/2962897-workoutbuilder",
    "html": "Required\n\nSee Also\nTracking Live Data\nfunc workoutBuilderDidCollectEvent(HKLiveWorkoutBuilder)\nTells the delegate that a new event has been added to the builder.\n\nRequired\n\nfunc workoutBuilder(HKLiveWorkoutBuilder, didBegin: HKWorkoutActivity)\nTells the delegate that a new workout activity has started.\nfunc workoutBuilder(HKLiveWorkoutBuilder, didEnd: HKWorkoutActivity)\nTells the delegate that the current workout activity has ended."
  },
  {
    "title": "addWorkoutEvents(_:completion:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkoutbuilder/2962912-addworkoutevents",
    "html": "Discussion\n\nConcurrency Note\n\nYou can call this method from synchronous code using a completion handler, as shown on this page, or you can call it as an asynchronous method that has the following declaration:\n\nfunc addWorkoutEvents(_ workoutEvents: [HKWorkoutEvent]) async throws\n\n\nFor information about concurrency and asynchronous code in Swift, see Calling Objective-C APIs Asynchronously.\n\nSee Also\nAdding events to the workout\nvar workoutEvents: [HKWorkoutEvent]\nThe list of events added to the workout."
  },
  {
    "title": "statistics(for:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkoutbuilder/2962922-statistics",
    "html": "See Also\nAssociating samples with the workout\nfunc add([HKSample], completion: (Bool, Error?) -> Void)\nAdds a sample to be associated with the workout.\nfunc seriesBuilder(for: HKSeriesType) -> HKSeriesBuilder?\nReturns the series builder for the specified type, creating a new builder, if necessary."
  },
  {
    "title": "add(_:completion:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkoutbuilder/2962911-add",
    "html": "Discussion\n\nConcurrency Note\n\nYou can call this method from synchronous code using a completion handler, as shown on this page, or you can call it as an asynchronous method that has the following declaration:\n\nfunc addSamples(_ samples: [HKSample]) async throws\n\n\nFor information about concurrency and asynchronous code in Swift, see Calling Objective-C APIs Asynchronously.\n\nSee Also\nAssociating samples with the workout\nfunc seriesBuilder(for: HKSeriesType) -> HKSeriesBuilder?\nReturns the series builder for the specified type, creating a new builder, if necessary.\nfunc statistics(for: HKQuantityType) -> HKStatistics?\nReturns the statistics calculated for matching samples added to the workout."
  },
  {
    "title": "HKLiveWorkoutBuilderDelegate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkliveworkoutbuilderdelegate",
    "html": "Topics\nTracking Live Data\nfunc workoutBuilder(HKLiveWorkoutBuilder, didCollectDataOf: Set<HKSampleType>)\nTells the delegate that new data has been added to the builder.\n\nRequired\n\nfunc workoutBuilderDidCollectEvent(HKLiveWorkoutBuilder)\nTells the delegate that a new event has been added to the builder.\n\nRequired\n\nfunc workoutBuilder(HKLiveWorkoutBuilder, didBegin: HKWorkoutActivity)\nTells the delegate that a new workout activity has started.\nfunc workoutBuilder(HKLiveWorkoutBuilder, didEnd: HKWorkoutActivity)\nTells the delegate that the current workout activity has ended.\nRelationships\nInherits From\nNSObjectProtocol\nSee Also\nMonitoring and controlling the workout\nvar delegate: HKLiveWorkoutBuilderDelegate?\nThe live builder’s delegate.\nvar currentWorkoutActivity: HKWorkoutActivity?\nThe current workout activity.\nvar shouldCollectWorkoutEvents: Bool\nA Boolean value that determines whether the workout builder automatically adds events generated by the workout session."
  },
  {
    "title": "HKCategoryValueMenstrualFlow | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkcategoryvaluemenstrualflow",
    "html": "Topics\nConstants\ncase unspecified\nAn unspecified amount of menstrual flow.\ncase none\nNo menstrual flow.\ncase light\nLight menstrual flow.\ncase medium\nMedium menstrual flow.\ncase heavy\nHeavy menstrual flow.\nRelationships\nConforms To\nHKCategoryValuePredicateProviding\nSendable\nSee Also\nAssigning Values\nenum HKCategoryValue\nCategories that are undefined.\nenum HKCategoryValueCervicalMucusQuality\nCategories that represent the user’s cervical mucus quality.\nenum HKCategoryValueOvulationTestResult\nCategories that represent the result of an ovulation home test.\nenum HKCategoryValueContraceptive\nThe type of contraceptive.\nenum HKCategoryValueSleepAnalysis\nCategories that represent the result of a sleep analysis.\nenum HKCategoryValueAppetiteChanges\nCategories that represent change in appetite.\nenum HKCategoryValuePresence\nCategories that indicate whether a symptom is present.\nenum HKCategoryValueSeverity\nCategories that represent the severity of a symptom.\nenum HKCategoryValueEnvironmentalAudioExposureEvent\nExposure events for environmental audio.\nenum HKCategoryValueHeadphoneAudioExposureEvent\nExposure events for headphone audio.\nenum HKCategoryValueLowCardioFitnessEvent\nA value that indicates a low-level cardio fitness event.\nenum HKAppleWalkingSteadinessClassification\nA classification of a score based on the steadiness of the user’s gait.\nenum HKCategoryValueAppleWalkingSteadinessEvent\nThe value of an event triggered by a reduced score for the steadiness of the user’s gait.\nenum HKCategoryValuePregnancyTestResult\nCategory values that indicate the results of a home pregnancy test.\nenum HKCategoryValueProgesteroneTestResult\nA category value that indicates the result from a home progesterone test.\nenum HKCategoryValueAudioExposureEvent\nCategories that indicate audio exposure events."
  },
  {
    "title": "HKCategoryValueOvulationTestResult | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkcategoryvalueovulationtestresult",
    "html": "Topics\nOvulation Test Results\ncase negative\nThe ovulation test is negative.\ncase luteinizingHormoneSurge\nThe ovulation test detected a surge in the luteinizing hormone.\ncase indeterminate\nThe ovulation test is inconclusive.\ncase estrogenSurge\nThe ovulation test detected a surge in estrogen.\nstatic var positive: HKCategoryValueOvulationTestResult\nThe ovulation test is positive.\nRelationships\nConforms To\nHKCategoryValuePredicateProviding\nSendable\nSee Also\nAssigning Values\nenum HKCategoryValue\nCategories that are undefined.\nenum HKCategoryValueCervicalMucusQuality\nCategories that represent the user’s cervical mucus quality.\nenum HKCategoryValueMenstrualFlow\nCategories that indicate the amount of menstrual flow for a given sample.\nenum HKCategoryValueContraceptive\nThe type of contraceptive.\nenum HKCategoryValueSleepAnalysis\nCategories that represent the result of a sleep analysis.\nenum HKCategoryValueAppetiteChanges\nCategories that represent change in appetite.\nenum HKCategoryValuePresence\nCategories that indicate whether a symptom is present.\nenum HKCategoryValueSeverity\nCategories that represent the severity of a symptom.\nenum HKCategoryValueEnvironmentalAudioExposureEvent\nExposure events for environmental audio.\nenum HKCategoryValueHeadphoneAudioExposureEvent\nExposure events for headphone audio.\nenum HKCategoryValueLowCardioFitnessEvent\nA value that indicates a low-level cardio fitness event.\nenum HKAppleWalkingSteadinessClassification\nA classification of a score based on the steadiness of the user’s gait.\nenum HKCategoryValueAppleWalkingSteadinessEvent\nThe value of an event triggered by a reduced score for the steadiness of the user’s gait.\nenum HKCategoryValuePregnancyTestResult\nCategory values that indicate the results of a home pregnancy test.\nenum HKCategoryValueProgesteroneTestResult\nA category value that indicates the result from a home progesterone test.\nenum HKCategoryValueAudioExposureEvent\nCategories that indicate audio exposure events."
  },
  {
    "title": "shouldCollectWorkoutEvents | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkliveworkoutbuilder/2962894-shouldcollectworkoutevents",
    "html": "Discussion\n\nBy default, this property is true. Set it to false if your app adds its own events to the workout builder, and you want to ignore events from the workout session.\n\nYou must set this property before calling the workout builder’s beginCollection(withStart:completion:) method.\n\nSee Also\nMonitoring and controlling the workout\nvar delegate: HKLiveWorkoutBuilderDelegate?\nThe live builder’s delegate.\nprotocol HKLiveWorkoutBuilderDelegate\nA protocol for monitoring live workout builders.\nvar currentWorkoutActivity: HKWorkoutActivity?\nThe current workout activity."
  },
  {
    "title": "HKCategoryValue | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkcategoryvalue",
    "html": "Topics\nConstants\ncase notApplicable\nA category value for types that don't have a defined value.\nRelationships\nConforms To\nHKCategoryValuePredicateProviding\nSendable\nSee Also\nAssigning Values\nenum HKCategoryValueCervicalMucusQuality\nCategories that represent the user’s cervical mucus quality.\nenum HKCategoryValueMenstrualFlow\nCategories that indicate the amount of menstrual flow for a given sample.\nenum HKCategoryValueOvulationTestResult\nCategories that represent the result of an ovulation home test.\nenum HKCategoryValueContraceptive\nThe type of contraceptive.\nenum HKCategoryValueSleepAnalysis\nCategories that represent the result of a sleep analysis.\nenum HKCategoryValueAppetiteChanges\nCategories that represent change in appetite.\nenum HKCategoryValuePresence\nCategories that indicate whether a symptom is present.\nenum HKCategoryValueSeverity\nCategories that represent the severity of a symptom.\nenum HKCategoryValueEnvironmentalAudioExposureEvent\nExposure events for environmental audio.\nenum HKCategoryValueHeadphoneAudioExposureEvent\nExposure events for headphone audio.\nenum HKCategoryValueLowCardioFitnessEvent\nA value that indicates a low-level cardio fitness event.\nenum HKAppleWalkingSteadinessClassification\nA classification of a score based on the steadiness of the user’s gait.\nenum HKCategoryValueAppleWalkingSteadinessEvent\nThe value of an event triggered by a reduced score for the steadiness of the user’s gait.\nenum HKCategoryValuePregnancyTestResult\nCategory values that indicate the results of a home pregnancy test.\nenum HKCategoryValueProgesteroneTestResult\nA category value that indicates the result from a home progesterone test.\nenum HKCategoryValueAudioExposureEvent\nCategories that indicate audio exposure events."
  },
  {
    "title": "HKMetadataKeyFoodType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkmetadatakeyfoodtype",
    "html": "Discussion\n\nThis key takes a string value. Food objects are usually food samples containing any number of Nutrition Identifiers samples.\n\nSee Also\nEssentials\nstatic let food: HKCorrelationTypeIdentifier\nFood correlation types combine any number of nutritional samples into a single food object."
  },
  {
    "title": "categoryType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkcategorysample/1615560-categorytype",
    "html": "Discussion\n\nThis property contains a reference to the sampleType property that is cast as an HKCategoryType object.\n\nSee Also\nGetting Property Data\nvar value: Int\nThe category value for this sample."
  },
  {
    "title": "value | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkcategorysample/1615090-value",
    "html": "Discussion\n\nThis value must come from the appropriate category value enumeration. Each category type uses its own enumeration. For more information, see Category Type Identifiers in HealthKit Constants.\n\nSee Also\nGetting Property Data\nvar categoryType: HKCategoryType\nThe category type for this sample."
  },
  {
    "title": "HKMetadataKeyTimeZone | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkmetadatakeytimezone",
    "html": "Discussion\n\nThis key takes a string value compatible with the NSTimeZone class’s timeZoneWithName: method. For best results when analyzing sleep samples, it's recommended that you store time zone metadata with your sleep sample data.\n\nSee Also\nGeneral Keys\nlet HKMetadataKeyExternalUUID: String\nA unique identifier for an HKObject that is set by its source.\nlet HKMetadataKeyWasUserEntered: String\nA key that indicates whether the sample was entered by the user.\nlet HKMetadataKeyQuantityClampedToLowerBound: String\nlet HKMetadataKeyQuantityClampedToUpperBound: String"
  },
  {
    "title": "init(type:quantity:start:end:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquantitysample/1615016-init",
    "html": "Parameters\nquantityType\n\nThe type of sample to be created. HealthKit defines a number of different quantity types, representing different types of health and fitness data. For the complete list of quantity type identifiers, see HKQuantityTypeIdentifier.\n\nquantity\n\nThe value to be stored in the sample. The quantity object must use units that are compatible with the provided quantity type. If the units are not compatible, this method throws an exception (invalidArgumentException).\n\nstartDate\n\nThe start date for the sample. This date must be equal to or earlier than the end date; otherwise, this method throws an exception (invalidArgumentException).\n\nendDate\n\nThe end date for the sample. This date must be equal to or later than the start date; otherwise, this method throws an exception (invalidArgumentException).\n\nReturn Value\n\nA valid quantity sample.\n\nDiscussion\n\nHealthKit uses quantity samples to represent sample data using a numeric value. To create a quantity sample, first create the corresponding quantity type and quantity, and then set its start and end dates. You produce a new quantity sample.\n\nguard let quantityType = HKObjectType.quantityTypeForIdentifier(HKQuantityTypeIdentifierHeartRate) else {\n    fatalError(\"*** Unable to create a heart rate quantity type ***\")\n}\n \nlet bpm = HKUnit(fromString: \"count/min\")\nlet quantity = HKQuantity(unit: bpm, doubleValue: 72.0)\n \nlet quantitySample = HKQuantitySample(type: quantityType,\n                                      quantity: quantity,\n                                      startDate: start,\n                                      endDate: end)\n\nSee Also\nCreating Quantity Samples\ninit(type: HKQuantityType, quantity: HKQuantity, start: Date, end: Date, metadata: [String : Any]?)\nReturns a sample containing a numeric measurement with the provided metadata.\ninit(type: HKQuantityType, quantity: HKQuantity, start: Date, end: Date, device: HKDevice?, metadata: [String : Any]?)\nReturns a sample containing a numeric measurement with the provided device and metadata.\nRelated Documentation\nvar quantityType: HKQuantityType\nThe quantity type for this sample.\nvar quantity: HKQuantity\nThe quantity for this sample.\nvar endDate: Date\nThe sample’s end date.\nclass func quantityType(forIdentifier: HKQuantityTypeIdentifier) -> HKQuantityType?\nReturns the shared quantity type for the provided identifier.\nvar startDate: Date\nThe sample’s start date."
  },
  {
    "title": "results(for:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkactivitysummaryquerydescriptor/3916252-results",
    "html": "Parameters\nhealthStore\n\nThe access point for HealthKit data.\n\nRelationships\nFrom Protocol\nHKAsyncSequenceQuery\nSee Also\nRunning queries\nfunc result(for: HKHealthStore) -> [HKActivitySummary]\nRuns a one-shot query and asynchronously returns a snapshot of the current matching results.\nstruct HKActivitySummaryQueryDescriptor.Results\nAn asynchronous sequence that emits updates from an activity summary query."
  },
  {
    "title": "HKElectrocardiogramQuery.Result.done | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkelectrocardiogramquery/result/done",
    "html": "See Also\nResults\ncase measurement(HKElectrocardiogram.VoltageMeasurement)\nA single voltage measurement.\ncase error(Error)\nAn error occurred while accessing the voltage measurements."
  },
  {
    "title": "updateHandler | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkactivitysummaryquery/1615203-updatehandler",
    "html": "Parameters\nquery\n\nA reference to the query calling this block.\n\nupdatedActivitySummaries\n\nAn array containing the new or modified summaries, or nil if an error occurred.\n\nerror\n\nIf an error occurs, this parameter contains an object describing the error; otherwise, it is nil.\n\nDiscussion\n\nIf this property is set to nil, the active summary query automatically stops as soon as it has finished calculating the initial results. If this property is not nil, the query behaves similarly to the observer query. It continues to run, monitoring the HealthKit store. If any new, matching summaries are saved to the store—or if any of the existing matching summaries are modified in the store—the query executes this update handler on a background queue.\n\nThis property cannot be modified once the query has been executed. If you assign a handler to this property, you must manually stop the query."
  },
  {
    "title": "data | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkattachmentdatareader/3952586-data",
    "html": "Discussion\n\nUse this property to asynchronously access the attachment’s data as a single data object.\n\nlet data: Data\ndo {\n    data = try await dataReader.data\n} catch {\n    // Handle the error here.\n    fatalError(\"*** An error occurred while accessing the attachment's data. \\(error.localizedDescription) ***\")\n}\n\n\nSee Also\nReading attachment data\nvar bytes: HKAttachment.AsyncBytes\nAn asynchronous sequence that provides the attachment’s data.\nvar progress: Progress\nAn object you can use to track the progress while reading an attachment’s data."
  },
  {
    "title": "bytes | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkattachmentdatareader/3952585-bytes",
    "html": "Discussion\n\nUse this property to access the file’s contents as an asynchronous sequence of bytes.\n\n// Asynchronously access the attachment's bytes.\nvar data = Data()\ndo {\n    for try await byte in dataReader.bytes {\n        // Use the bytes here.\n        data.append(byte)\n    }\n} catch {\n    // Handle the error here.\n    fatalError(\"*** An error occurred while reading the attachment's data: \\(error.localizedDescription) ***\")\n}\n\n\nSee Also\nReading attachment data\nvar data: Data\nThe abstract’s data.\nvar progress: Progress\nAn object you can use to track the progress while reading an attachment’s data."
  },
  {
    "title": "limit | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hksamplequerydescriptor/3916544-limit",
    "html": "Discussion\n\nIf the limit is nil, the system returns all matching samples in the HealthKit store.\n\nSee Also\nAccessing Query Properties\nvar predicates: [HKSamplePredicate<Sample>]\nAn array of sample predicates that define the type of data that the query returns.\nvar sortDescriptors: [SortDescriptor<Sample>]\nAn array that specifies the order of the results that the query returns."
  },
  {
    "title": "progress | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkattachmentdatareader/3952587-progress",
    "html": "See Also\nReading attachment data\nvar data: Data\nThe abstract’s data.\nvar bytes: HKAttachment.AsyncBytes\nAn asynchronous sequence that provides the attachment’s data."
  },
  {
    "title": "HKMetadataKeyDigitalSignature | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkmetadatakeydigitalsignature",
    "html": "Discussion\n\nThe digital signature is intended to provide data integrity for sample data produced by trusted (tamper resistant) measuring devices. Use the Cryptographic Message Syntax (CMS) to sign data returned by your device (such as timestamps, values, and so forth) using ASN.1 encoding with Distinguished Encoding Rules (DER). The entire signature should be further encoded using base64. Recommended digest is SHA256, and recommended cipher is FIPS PUB 186-4 Digital Signature Standard Elliptic Curve P-256. CMS is specified in IETF RFC 5652. For more information, see Adding Digital Signatures in HealthKit.\n\nSee Also\nDevice Information Keys\nlet HKMetadataKeyDeviceSerialNumber: String\nThe key for the serial number of the device that generated the data.\nlet HKMetadataKeyUDIDeviceIdentifier: String\nThe device identifier portion of a device’s UDI (unique device identifier).\nlet HKMetadataKeyUDIProductionIdentifier: String\nThe production identifier portion of a device’s UDI (unique device identifier).\nlet HKMetadataKeyDeviceName: String\nThe name of the device that took this reading.\nlet HKMetadataKeyDeviceManufacturerName: String\nThe name of the manufacturer of the device that took this reading.\nlet HKMetadataKeyDevicePlacementSide: String\nThe key for metadata indicating the placement of the device that measured a sample.\nenum HKDevicePlacementSide\nValues that indicate the placement of the device that measured a sample.\nlet HKMetadataKeyAppleDeviceCalibrated: String\nThe key for metadata indicating whether the system had data from a sufficient amount of calibrated sensors when recording the sample."
  },
  {
    "title": "predicates | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hksamplequerydescriptor/3916545-predicates",
    "html": "Discussion\n\nTo query for multiple types of data, provide a sample predicate for each type. If your HKSamplePredicate instances return different HKSample subclasses, use sample(type:predicate:) to create the sample predicates.\n\nSee Also\nAccessing Query Properties\nvar limit: Int?\nThe maximum number of samples that the query returns.\nvar sortDescriptors: [SortDescriptor<Sample>]\nAn array that specifies the order of the results that the query returns."
  },
  {
    "title": "result(for:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hksamplequerydescriptor/3916546-result",
    "html": "Parameters\nhealthStore\n\nThe access point for HealthKit data.\n\nDiscussion\n\nThe adopting type’s Output associated type specifies the values that this method returns. For example, HKSampleQueryDescriptor returns an array of HKQuantitySample objects.\n\nlet stepType = HKQuantityType(.stepCount)\n\n\nlet descriptor = HKSampleQueryDescriptor(\n    predicates:[.quantitySample(type: stepType)],\n    sortDescriptors: [SortDescriptor(\\.endDate, order: .reverse)],\n    limit: 10)\n\n\nlet results = try await descriptor.result(for: store)\n\n\nRelationships\nFrom Protocol\nHKAsyncQuery"
  },
  {
    "title": "init(predicates:sortDescriptors:limit:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hksamplequerydescriptor/3916543-init",
    "html": "Parameters\npredicates\n\nAn array of sample predicates that define the type of data that the query returns. To query for multiple types of data, provide a sample predicate for each type.\n\nsortDescriptors\n\nAn array of sort descriptors that specify the order of the results that the query returns. If you don’t need the results in a specific order, pass an empty array.\n\nlimit\n\nAn optional value that specifies the maximum number of samples that the query returns. If you don’t specify the limit, the system returns all matching samples in the HealthKit store.\n\nDiscussion\n\nThe system sets the descriptor’s HKSampleQueryDescriptor.Output type based on the predicates parameter.\n\nSee Also\nCreating Query Descriptors\ntypealias HKSampleQueryDescriptor.Output\nThe type of data that the query returns."
  },
  {
    "title": "dietaryWater | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquantitytypeidentifier/1615313-dietarywater",
    "html": "Discussion\n\nThese samples use volume units (described in HKUnit) and measure cumulative values (described in HKQuantityAggregationStyle).\n\nSee Also\nNutrition\nstatic let dietaryBiotin: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of biotin (vitamin B7) consumed.\nstatic let dietaryCaffeine: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of caffeine consumed.\nstatic let dietaryCalcium: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of calcium consumed.\nstatic let dietaryCarbohydrates: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of carbohydrates consumed.\nstatic let dietaryChloride: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of chloride consumed.\nstatic let dietaryCholesterol: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of cholesterol consumed.\nstatic let dietaryChromium: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of chromium consumed.\nstatic let dietaryCopper: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of copper consumed.\nstatic let dietaryEnergyConsumed: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of energy consumed.\nstatic let dietaryFatMonounsaturated: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of monounsaturated fat consumed.\nstatic let dietaryFatPolyunsaturated: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of polyunsaturated fat consumed.\nstatic let dietaryFatSaturated: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of saturated fat consumed.\nstatic let dietaryFatTotal: HKQuantityTypeIdentifier\nA quantity sample type that measures the total amount of fat consumed.\nstatic let dietaryFiber: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of fiber consumed.\nstatic let dietaryFolate: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of folate (folic acid) consumed.\nstatic let dietaryIodine: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of iodine consumed.\nstatic let dietaryIron: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of iron consumed.\nstatic let dietaryMagnesium: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of magnesium consumed.\nstatic let dietaryManganese: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of manganese consumed.\nstatic let dietaryMolybdenum: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of molybdenum consumed.\nstatic let dietaryNiacin: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of niacin (vitamin B3) consumed.\nstatic let dietaryPantothenicAcid: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of pantothenic acid (vitamin B5) consumed.\nstatic let dietaryPhosphorus: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of phosphorus consumed.\nstatic let dietaryPotassium: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of potassium consumed.\nstatic let dietaryProtein: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of protein consumed.\nstatic let dietaryRiboflavin: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of riboflavin (vitamin B2) consumed.\nstatic let dietarySelenium: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of selenium consumed.\nstatic let dietarySodium: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of sodium consumed.\nstatic let dietarySugar: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of sugar consumed.\nstatic let dietaryThiamin: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of thiamin (vitamin B1) consumed.\nstatic let dietaryVitaminA: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of vitamin A consumed.\nstatic let dietaryVitaminB12: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of cyanocobalamin (vitamin B12) consumed.\nstatic let dietaryVitaminB6: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of pyridoxine (vitamin B6) consumed.\nstatic let dietaryVitaminC: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of vitamin C consumed.\nstatic let dietaryVitaminD: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of vitamin D consumed.\nstatic let dietaryVitaminE: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of vitamin E consumed.\nstatic let dietaryVitaminK: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of vitamin K consumed.\nstatic let dietaryZinc: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of zinc consumed.\nRelated Documentation\nstruct HKQuantityTypeIdentifier\nThe identifiers that create quantity type objects.\nclass HKQuantitySample\nA sample that represents a quantity, including the value and the units.\nclass HKQuantity\nAn object that stores a value for a given unit."
  },
  {
    "title": "dietaryZinc | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquantitytypeidentifier/1615345-dietaryzinc",
    "html": "Discussion\n\nThese samples use mass units (described in HKUnit) and measure cumulative values (described in HKQuantityAggregationStyle).\n\nSee Also\nNutrition\nstatic let dietaryBiotin: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of biotin (vitamin B7) consumed.\nstatic let dietaryCaffeine: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of caffeine consumed.\nstatic let dietaryCalcium: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of calcium consumed.\nstatic let dietaryCarbohydrates: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of carbohydrates consumed.\nstatic let dietaryChloride: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of chloride consumed.\nstatic let dietaryCholesterol: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of cholesterol consumed.\nstatic let dietaryChromium: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of chromium consumed.\nstatic let dietaryCopper: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of copper consumed.\nstatic let dietaryEnergyConsumed: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of energy consumed.\nstatic let dietaryFatMonounsaturated: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of monounsaturated fat consumed.\nstatic let dietaryFatPolyunsaturated: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of polyunsaturated fat consumed.\nstatic let dietaryFatSaturated: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of saturated fat consumed.\nstatic let dietaryFatTotal: HKQuantityTypeIdentifier\nA quantity sample type that measures the total amount of fat consumed.\nstatic let dietaryFiber: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of fiber consumed.\nstatic let dietaryFolate: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of folate (folic acid) consumed.\nstatic let dietaryIodine: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of iodine consumed.\nstatic let dietaryIron: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of iron consumed.\nstatic let dietaryMagnesium: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of magnesium consumed.\nstatic let dietaryManganese: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of manganese consumed.\nstatic let dietaryMolybdenum: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of molybdenum consumed.\nstatic let dietaryNiacin: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of niacin (vitamin B3) consumed.\nstatic let dietaryPantothenicAcid: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of pantothenic acid (vitamin B5) consumed.\nstatic let dietaryPhosphorus: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of phosphorus consumed.\nstatic let dietaryPotassium: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of potassium consumed.\nstatic let dietaryProtein: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of protein consumed.\nstatic let dietaryRiboflavin: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of riboflavin (vitamin B2) consumed.\nstatic let dietarySelenium: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of selenium consumed.\nstatic let dietarySodium: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of sodium consumed.\nstatic let dietarySugar: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of sugar consumed.\nstatic let dietaryThiamin: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of thiamin (vitamin B1) consumed.\nstatic let dietaryVitaminA: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of vitamin A consumed.\nstatic let dietaryVitaminB12: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of cyanocobalamin (vitamin B12) consumed.\nstatic let dietaryVitaminB6: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of pyridoxine (vitamin B6) consumed.\nstatic let dietaryVitaminC: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of vitamin C consumed.\nstatic let dietaryVitaminD: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of vitamin D consumed.\nstatic let dietaryVitaminE: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of vitamin E consumed.\nstatic let dietaryVitaminK: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of vitamin K consumed.\nstatic let dietaryWater: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of water consumed.\nRelated Documentation\nstruct HKQuantityTypeIdentifier\nThe identifiers that create quantity type objects.\nclass HKQuantitySample\nA sample that represents a quantity, including the value and the units.\nclass HKQuantity\nAn object that stores a value for a given unit."
  },
  {
    "title": "HKMetadataKeyLowCardioFitnessEventThreshold | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkmetadatakeylowcardiofitnesseventthreshold",
    "html": "Discussion\n\nThe system sets this key on lowCardioFitnessEvent samples. It contains the threshold value for the user’s VO2 max measurements. The threshold value varies depending on certain parameters and physical characteristics, such as the user’s age.\n\nA low-cardio fitness event indicates a period of time when the user’s VO2 max measurements consistently fall below the defined value. The system triggers this event approximately once every four months.\n\nThe value of this key is an HKQuantity object with a unit of ml/(kg*min). For more information on working with complex units, see unitMultiplied(by:), unitDivided(by:), and init(from:).\n\nSee Also\nCardio Fitness Keys\nlet HKMetadataKeyVO2MaxValue: String\nThe maximum oxygen consumption rate during exercise of increasing intensity."
  },
  {
    "title": "HKMetadataKeyAudioExposureLevel | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkmetadatakeyaudioexposurelevel",
    "html": "Discussion\n\nUse this key on audio exposure events. It takes an HKQuantity containing the audio level measured in decibelAWeightedSoundPressureLevel() units."
  },
  {
    "title": "HKMetadataKeyVO2MaxValue | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkmetadatakeyvo2maxvalue",
    "html": "Discussion\n\nThe system sets this key on lowCardioFitnessEvent samples. It contains the value of the VO2 max measurement that triggered the event. The value of this key is an HKQuantity object with a unit of ml/(kg*min). For more information on working with complex units, see unitMultiplied(by:), unitDivided(by:), and init(from:).\n\nSee Also\nCardio Fitness Keys\nlet HKMetadataKeyLowCardioFitnessEventThreshold: String\nThe VO2 max threshold used to categorize low-level cardio fitness events."
  },
  {
    "title": "HKMetadataKeyAudioExposureDuration | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkmetadatakeyaudioexposureduration",
    "html": "Discussion\n\nUse this key on headphone audio exposure events. It takes an HKQuantity containing the audio level measured in units of time.\n\nSee Also\nAudio Event Keys\nlet HKMetadataKeyAudioExposureLevel: String\nThe audio level associated with an audio event.\nlet HKMetadataKeyHeadphoneGain: String"
  },
  {
    "title": "HKCategoryValueLowCardioFitnessEvent | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkcategoryvaluelowcardiofitnessevent",
    "html": "Topics\nEvents\ncase lowFitness\nAn event that indicates a low level of cardio fitness, based on the VO2 max readings from the user’s Apple Watch.\nRelationships\nConforms To\nHKCategoryValuePredicateProviding\nSendable\nSee Also\nAssigning Values\nenum HKCategoryValue\nCategories that are undefined.\nenum HKCategoryValueCervicalMucusQuality\nCategories that represent the user’s cervical mucus quality.\nenum HKCategoryValueMenstrualFlow\nCategories that indicate the amount of menstrual flow for a given sample.\nenum HKCategoryValueOvulationTestResult\nCategories that represent the result of an ovulation home test.\nenum HKCategoryValueContraceptive\nThe type of contraceptive.\nenum HKCategoryValueSleepAnalysis\nCategories that represent the result of a sleep analysis.\nenum HKCategoryValueAppetiteChanges\nCategories that represent change in appetite.\nenum HKCategoryValuePresence\nCategories that indicate whether a symptom is present.\nenum HKCategoryValueSeverity\nCategories that represent the severity of a symptom.\nenum HKCategoryValueEnvironmentalAudioExposureEvent\nExposure events for environmental audio.\nenum HKCategoryValueHeadphoneAudioExposureEvent\nExposure events for headphone audio.\nenum HKAppleWalkingSteadinessClassification\nA classification of a score based on the steadiness of the user’s gait.\nenum HKCategoryValueAppleWalkingSteadinessEvent\nThe value of an event triggered by a reduced score for the steadiness of the user’s gait.\nenum HKCategoryValuePregnancyTestResult\nCategory values that indicate the results of a home pregnancy test.\nenum HKCategoryValueProgesteroneTestResult\nA category value that indicates the result from a home progesterone test.\nenum HKCategoryValueAudioExposureEvent\nCategories that indicate audio exposure events."
  },
  {
    "title": "HKSampleQueryDescriptor.Output | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hksamplequerydescriptor/output",
    "html": "Discussion\n\nThe system sets the output type based on the HKSamplePredicate instances that you used to initialize the descriptor.\n\nSee Also\nCreating Query Descriptors\ninit(predicates: [HKSamplePredicate<Sample>], sortDescriptors: [SortDescriptor<Sample>], limit: Int?)\nCreates a sample query descriptor."
  },
  {
    "title": "HKWorkoutEventType.resume | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkouteventtype/resume",
    "html": "See Also\nEvents\ncase pause\nA constant indicating that the workout has paused.\ncase motionPaused\nA constant indicating that the system has automatically paused a workout session.\ncase motionResumed\nA constant indicating that the system has automatically resumed a workout session.\ncase pauseOrResumeRequest\nA constant indicating that the user has requested a pause or resume.\ncase lap\nA constant indicating a lap.\ncase segment\nA constant indicating a period of time of interest during a workout.\ncase marker\nA constant indicating a point of interest during a workout session."
  },
  {
    "title": "HKCategoryValueAppetiteChanges | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkcategoryvalueappetitechanges",
    "html": "Topics\nAppetite Changes\ncase decreased\nThe user’s appetite decreased.\ncase increased\nThe user’s appetite increased.\ncase noChange\nNo change in the user’s appetite.\ncase unspecified\nAn unspecified change in appetite.\nRelationships\nConforms To\nHKCategoryValuePredicateProviding\nSendable\nSee Also\nAssigning Values\nenum HKCategoryValue\nCategories that are undefined.\nenum HKCategoryValueCervicalMucusQuality\nCategories that represent the user’s cervical mucus quality.\nenum HKCategoryValueMenstrualFlow\nCategories that indicate the amount of menstrual flow for a given sample.\nenum HKCategoryValueOvulationTestResult\nCategories that represent the result of an ovulation home test.\nenum HKCategoryValueContraceptive\nThe type of contraceptive.\nenum HKCategoryValueSleepAnalysis\nCategories that represent the result of a sleep analysis.\nenum HKCategoryValuePresence\nCategories that indicate whether a symptom is present.\nenum HKCategoryValueSeverity\nCategories that represent the severity of a symptom.\nenum HKCategoryValueEnvironmentalAudioExposureEvent\nExposure events for environmental audio.\nenum HKCategoryValueHeadphoneAudioExposureEvent\nExposure events for headphone audio.\nenum HKCategoryValueLowCardioFitnessEvent\nA value that indicates a low-level cardio fitness event.\nenum HKAppleWalkingSteadinessClassification\nA classification of a score based on the steadiness of the user’s gait.\nenum HKCategoryValueAppleWalkingSteadinessEvent\nThe value of an event triggered by a reduced score for the steadiness of the user’s gait.\nenum HKCategoryValuePregnancyTestResult\nCategory values that indicate the results of a home pregnancy test.\nenum HKCategoryValueProgesteroneTestResult\nA category value that indicates the result from a home progesterone test.\nenum HKCategoryValueAudioExposureEvent\nCategories that indicate audio exposure events."
  },
  {
    "title": "HKCategoryValueAppleWalkingSteadinessEvent | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkcategoryvalueapplewalkingsteadinessevent",
    "html": "Overview\n\nThese values indicate that the user received a Low or Very Low score for their Walking Steadiness. The HKCategoryValueAppleWalkingSteadinessEvent.repeatLow and HKCategoryValueAppleWalkingSteadinessEvent.repeatVeryLow values indicate that the Low and Very Low scores persisted over a significant period of time.\n\nTopics\nSteadiness Values\ncase initialLow\nThe user received a below-normal steadiness score for their gait while walking.\ncase initialVeryLow\nThe user received a steadiness score for their gait while walking that was considerably below normal.\ncase repeatLow\nThe user’s below-normal score persists over a significant period of time.\ncase repeatVeryLow\nThe user’s considerably below-normal score persists over a significant period of time.\nRelationships\nConforms To\nHKCategoryValuePredicateProviding\nSendable\nSee Also\nAssigning Values\nenum HKCategoryValue\nCategories that are undefined.\nenum HKCategoryValueCervicalMucusQuality\nCategories that represent the user’s cervical mucus quality.\nenum HKCategoryValueMenstrualFlow\nCategories that indicate the amount of menstrual flow for a given sample.\nenum HKCategoryValueOvulationTestResult\nCategories that represent the result of an ovulation home test.\nenum HKCategoryValueContraceptive\nThe type of contraceptive.\nenum HKCategoryValueSleepAnalysis\nCategories that represent the result of a sleep analysis.\nenum HKCategoryValueAppetiteChanges\nCategories that represent change in appetite.\nenum HKCategoryValuePresence\nCategories that indicate whether a symptom is present.\nenum HKCategoryValueSeverity\nCategories that represent the severity of a symptom.\nenum HKCategoryValueEnvironmentalAudioExposureEvent\nExposure events for environmental audio.\nenum HKCategoryValueHeadphoneAudioExposureEvent\nExposure events for headphone audio.\nenum HKCategoryValueLowCardioFitnessEvent\nA value that indicates a low-level cardio fitness event.\nenum HKAppleWalkingSteadinessClassification\nA classification of a score based on the steadiness of the user’s gait.\nenum HKCategoryValuePregnancyTestResult\nCategory values that indicate the results of a home pregnancy test.\nenum HKCategoryValueProgesteroneTestResult\nA category value that indicates the result from a home progesterone test.\nenum HKCategoryValueAudioExposureEvent\nCategories that indicate audio exposure events."
  },
  {
    "title": "HKPredicateKeyPathCategoryValue | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkpredicatekeypathcategoryvalue",
    "html": "Discussion\n\nUse this constant whenever you want to include a sample’s quantity in a predicate format string. Add a %K placeholder to the format string, and then pass this constant as an argument."
  },
  {
    "title": "init(queryDescriptors:updateHandler:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkobserverquery/3747004-init",
    "html": "Parameters\nqueryDescriptors\n\nAn array of descriptors that specifies the types of samples the query returns.\n\nupdateHandler\n\nA block that the system calls when a matching sample is saved to or deleted from the HealthKit store. This block takes the following parameters:\n\nquery\n\nA reference to the query calling this block.\n\nsampleTypesAdded\n\nA list of data types for all of the changed objects.\n\ncompletionHandler\n\nIf you registered for background updates, call this completion handler as soon as you are done processing the incoming data. This handler tells HealthKit that you successfully received the background update. Additionally, call the completion handler only when you use background updates. For more information on using this completion handler, see HKObserverQueryCompletionHandler.\n\nerror\n\nIf an error occurs, an object describing the error; otherwise, it’s nil.\n\nDiscussion\n\nUse this initializer to create an observer query for changes that match any of the HKQueryDescriptor objects. Each descriptor can specify a different data type.\n\nAfter instantiating the query, call the HKHealthStore class’s execute(_:) method to run this query. Observer queries are long-running tasks. They continue to run on an anonymous background thread and call their results handler when the system, the user, or any app adds or deletes a matching sample from the HealthKit store. To stop a query, call the HKHealthStore class’s stop(_:) method. You can use Observer queries to receive updates in the background. For more information, see Executing Observer Queries.\n\nThe system calls the update handler block you provide every time something saves or deletes samples matching this query from the HealthKit store. You often need to launch other queries from inside this block to get the updated data. In particular, you can use anchored object queries to retrieve the list of new samples added to the store. For more information, see HKAnchoredObjectQuery.\n\nFor example, the following code monitors the store and calls the update handler after any relevant changes:\n\n// Create the data types.\nlet stepCountType = HKQuantityType(.stepCount)\nlet pushCountType = HKQuantityType(.pushCount)\n\n\n// Specify the desired sample types.\nlet stepDescriptor = HKQueryDescriptor(sampleType: stepCountType, predicate: nil)\nlet pushDescriptor = HKQueryDescriptor(sampleType: pushCountType, predicate: nil)\n\n\n// Create the query.\nlet observerQuery = HKObserverQuery(queryDescriptors: [stepDescriptor, pushDescriptor])\n{ query, updatedSampleTypes, completionHandler, error in\n    \n    if let error = error {\n        // Handle errors here.\n    }\n    \n    if let types = updatedSampleTypes {\n        let descriptors = types.map { type in\n            HKQueryDescriptor(sampleType: type, predicate: nil)\n        }\n        \n        // Create an inner query to access the changed data.\n        let anchorQuery = HKAnchoredObjectQuery(queryDescriptors: descriptors,\n                                                anchor: anchor,\n                                                limit: HKObjectQueryNoLimit)\n        {\n            anchorQuery, samples, deleted, newAnchor, error in\n            if let error = error {\n                // Handle errors here.\n            }\n            \n            DispatchQueue.main.async {\n                // Update the anchor.\n                anchor = newAnchor\n                \n                // Process the samples and deleted objects here.\n                \n                // Call the observer's completion handler.\n                completionHandler()\n            }\n        }\n        \n        // Run the inner query.\n        store.execute(anchorQuery)\n    }\n}\n\n\nSee Also\nCreating Observer Queries\nExecuting Observer Queries\nCreate and run observer queries.\ninit(sampleType: HKSampleType, predicate: NSPredicate?, updateHandler: (HKObserverQuery, HKObserverQueryCompletionHandler, Error?) -> Void)\nInstantiates and returns a query that monitors the HealthKit store and responds to changes.\ntypealias HKObserverQueryCompletionHandler\nThe completion handler for background deliveries."
  },
  {
    "title": "covid19 | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkverifiableclinicalrecordcredentialtype/3925421-covid19",
    "html": "See Also\nIdentifying Record Types\nstatic let immunization: HKVerifiableClinicalRecordCredentialType\nA value that represents immunizations.\nstatic let laboratory: HKVerifiableClinicalRecordCredentialType\nA value that represents laboratory results.\nstatic let recovery: HKVerifiableClinicalRecordCredentialType\nA value that represents recovery information."
  },
  {
    "title": "HKObjectQueryNoLimit | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkobjectquerynolimit",
    "html": "See Also\nCreating Anchored Object Queries\nExecuting Anchored Object Queries\nCreate and run an anchored object query.\ninit(type: HKSampleType, predicate: NSPredicate?, anchor: HKQueryAnchor?, limit: Int, resultsHandler: (HKAnchoredObjectQuery, [HKSample]?, [HKDeletedObject]?, HKQueryAnchor?, Error?) -> Void)\nInitializes a new anchored object query.\ninit(queryDescriptors: [HKQueryDescriptor], anchor: HKQueryAnchor?, limit: Int, resultsHandler: (HKAnchoredObjectQuery, [HKSample]?, [HKDeletedObject]?, HKQueryAnchor?, Error?) -> Void)\nCreates an anchored object query that matches any of the query descriptors you provided.\ninit(type: HKSampleType, predicate: NSPredicate?, anchor: Int, limit: Int, completionHandler: (HKAnchoredObjectQuery, [HKSample]?, Int, Error?) -> Void)\nInitializes a new anchored object query."
  },
  {
    "title": "HKStatisticsCollectionQueryDescriptor.Output | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkstatisticscollectionquerydescriptor/output",
    "html": "See Also\nCreating Query Descriptors\ntypealias HKStatisticsCollectionQueryDescriptor.Sequence\nThe asynchronous sequence that the statistics collection query returns.\ninit(predicate: HKSamplePredicate<HKQuantitySample>, options: HKStatisticsOptions, anchorDate: Date, intervalComponents: DateComponents)\nCreates a statistics collection query descriptor."
  },
  {
    "title": "HKStatisticsCollectionQueryDescriptor.Sequence | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkstatisticscollectionquerydescriptor/sequence",
    "html": "See Also\nCreating Query Descriptors\ntypealias HKStatisticsCollectionQueryDescriptor.Output\nThe type of data that the statistics collection query returns.\ninit(predicate: HKSamplePredicate<HKQuantitySample>, options: HKStatisticsOptions, anchorDate: Date, intervalComponents: DateComponents)\nCreates a statistics collection query descriptor."
  },
  {
    "title": "includeDocumentData | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkdocumentquery/1779564-includedocumentdata",
    "html": "Discussion\n\nThis property contains the value passed to the init(documentType:predicate:limit:sortDescriptors:includeDocumentData:resultsHandler:) method’s includeDocumentData parameter.\n\nSee Also\nAccessing the Document Query’s Properties\nvar limit: Int\nThe maximum number of documents the receiver will return upon completion.\nvar sortDescriptors: [NSSortDescriptor]?\nAn array of sort descriptors that specify the order of the results returned by this query."
  },
  {
    "title": "init(predicate:options:anchorDate:intervalComponents:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkstatisticscollectionquerydescriptor/3916602-init",
    "html": "Parameters\npredicate\n\nA predicate that defines the set of data that the query uses to calculate the statistics.\n\noptions\n\nA list of options that define the type of statistical calculations performed and the way in which HealthKit merges data from multiple sources. For a list of valid options, see HKStatisticsOptions.\n\nanchorDate\n\nThe date anchors the collection’s time intervals. Use this parameter to set the start time for your time intervals. For example, if you’re using a day interval, you might create a date object with a time of 2:00 a.m. This value sets the start of the day for each of your time intervals.\n\nTechnically, the anchor sets the start time for a single time interval. All other time intervals must align with this interval. The time intervals can extend before or after the anchor date. Each time interval has the same length, and there’s no gap between adjacent intervals. Think of time as a number line: The anchor date represents its origin, and the intervals create tick marks that extend away from the origin in both directions.\n\nintervalComponents\n\nThe date components that define the time interval for each statistics object in the collection.\n\nSee Also\nCreating Query Descriptors\ntypealias HKStatisticsCollectionQueryDescriptor.Output\nThe type of data that the statistics collection query returns.\ntypealias HKStatisticsCollectionQueryDescriptor.Sequence\nThe asynchronous sequence that the statistics collection query returns."
  },
  {
    "title": "laboratory | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkverifiableclinicalrecordcredentialtype/3925423-laboratory",
    "html": "See Also\nIdentifying Record Types\nstatic let covid19: HKVerifiableClinicalRecordCredentialType\nA value that represents records about COVID-19.\nstatic let immunization: HKVerifiableClinicalRecordCredentialType\nA value that represents immunizations.\nstatic let recovery: HKVerifiableClinicalRecordCredentialType\nA value that represents recovery information."
  },
  {
    "title": "sortDescriptors | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkdocumentquery/1779560-sortdescriptors",
    "html": "Discussion\n\nThis property contains the value passed to the init(documentType:predicate:limit:sortDescriptors:includeDocumentData:resultsHandler:) method’s sortDescriptors parameter.\n\nSee Also\nAccessing the Document Query’s Properties\nvar includeDocumentData: Bool\nA Boolean value that indicates whether the sample includes the full document’s data.\nvar limit: Int\nThe maximum number of documents the receiver will return upon completion."
  },
  {
    "title": "immunization | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkverifiableclinicalrecordcredentialtype/3925422-immunization",
    "html": "See Also\nIdentifying Record Types\nstatic let covid19: HKVerifiableClinicalRecordCredentialType\nA value that represents records about COVID-19.\nstatic let laboratory: HKVerifiableClinicalRecordCredentialType\nA value that represents laboratory results.\nstatic let recovery: HKVerifiableClinicalRecordCredentialType\nA value that represents recovery information."
  },
  {
    "title": "recovery | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkverifiableclinicalrecordcredentialtype/3925424-recovery",
    "html": "See Also\nIdentifying Record Types\nstatic let covid19: HKVerifiableClinicalRecordCredentialType\nA value that represents records about COVID-19.\nstatic let immunization: HKVerifiableClinicalRecordCredentialType\nA value that represents immunizations.\nstatic let laboratory: HKVerifiableClinicalRecordCredentialType\nA value that represents laboratory results."
  },
  {
    "title": "init(rawValue:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkverifiableclinicalrecordcredentialtype/3925479-init",
    "html": "Parameters\nrawValue\n\nThe raw string for the record type."
  },
  {
    "title": "unitDivided(by:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkunit/1615242-unitdivided",
    "html": "Parameters\nunit\n\nThe unit to be divided.\n\nReturn Value\n\nA new, complex unit.\n\nDiscussion\n\nThis method creates a new, complex unit by dividing one unit by another. For example, you can create a meters-per-second unit by dividing a meters unit by a seconds unit, as shown below.\n\nlet meters = HKUnit.meterUnit()\nlet seconds = HKUnit.secondUnit()\nlet metersPerSecond = meters.unitDividedByUnit(seconds)\n\nSee Also\nPerforming unit math\nfunc unitMultiplied(by: HKUnit) -> HKUnit\nCreates a complex unit by multiplying the receiving unit with another unit.\nfunc unitRaised(toPower: Int) -> HKUnit\nCreates a complex unit by raising the unit to the given power.\nfunc reciprocal() -> HKUnit\nReturns a complex unit representing the unit’s reciprocal.\nRelated Documentation\ninit(from: String)\nReturns the unit instance described by the provided string."
  },
  {
    "title": "result(for:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkstatisticsquerydescriptor/3916613-result",
    "html": "Parameters\nhealthStore\n\nThe access point for HealthKit data.\n\nRelationships\nFrom Protocol\nHKAsyncQuery"
  },
  {
    "title": "voltUnit(with:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkunit/3552090-voltunit",
    "html": "Parameters\nprefix\n\nA valid metric prefix value. For the complete list of prefix values, see HKMetricPrefix.\n\nSee Also\nElectrical potential difference\nclass func volt() -> Self\nReturns a HealthKit unit for measuring the difference in electrical potential using volts."
  },
  {
    "title": "percent() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkunit/1615517-percent",
    "html": "Return Value\n\nA HealthKit unit for measuring percentages.\n\nDiscussion\n\nPercent measures a value between 0.0 and 1.0. HealthKit uses percent units when measuring body fat percentage, oxygen saturation, blood alcohol content, and similar values. Even though count and percent units are both scalar units, you cannot convert between them.\n\nSee Also\nConstructing scalar units\nclass func count() -> Self\nReturns a HealthKit unit for measuring counts."
  },
  {
    "title": "radianAngle() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkunit/3916020-radianangle",
    "html": "See Also\nConstructing angle units\nclass func degreeAngle() -> Self\nReturns a HealthKit unit for measuring angles using degrees.\nclass func radianAngleUnit(with: HKMetricPrefix) -> Self\nReturns a HealthKit unit for measuring angles, using radian units with the provided prefix."
  },
  {
    "title": "reciprocal() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkunit/1615494-reciprocal",
    "html": "Return Value\n\nA complex unit that is the reciprocal of the unit the method was called on.\n\nDiscussion\n\nThis method creates a new, complex unit by dividing 1 by the unit the method was called on. This is often only one step in a series of operations. For example, you can use this method to create a meters-per-second unit, as shown below.\n\nlet meters = HKUnit.meterUnit()\nlet seconds = HKUnit.secondUnit()\nlet secondsInverse = seconds.reciprocalUnit()\nlet metersPerSecond = meters.unitMultipliedByUnit(secondsInverse)\n\nSee Also\nPerforming unit math\nfunc unitMultiplied(by: HKUnit) -> HKUnit\nCreates a complex unit by multiplying the receiving unit with another unit.\nfunc unitDivided(by: HKUnit) -> HKUnit\nCreates a complex unit by dividing the receiving unit by another unit.\nfunc unitRaised(toPower: Int) -> HKUnit\nCreates a complex unit by raising the unit to the given power.\nRelated Documentation\ninit(from: String)\nReturns the unit instance described by the provided string."
  },
  {
    "title": "HKPredicateKeyPathCount | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkpredicatekeypathcount",
    "html": "Discussion\n\nUse this constant whenever you want to include a sample’s quantity in a predicate format string. Add a %K placeholder to the format string, and then pass this constant as an argument.\n\nSee Also\nSpecifying Predicate Key Paths\nlet HKPredicateKeyPathQuantity: String\nThe key path for accessing the sample’s quantity."
  },
  {
    "title": "quantity | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquantitysample/1615015-quantity",
    "html": "Discussion\n\nIf the sample contains more than one quantity, this property returns the sum or average, depending on the sample’s aggregation style (sum for cumulative, average for discrete). To access the individual quantities, use an HKQuantitySeriesSampleQuery.\n\nTo see the type of units compatible with this quantity, look up the sample’s quantity type identifier in HKQuantityTypeIdentifier.\n\nSee Also\nGetting Property Data\nvar count: Int\nThe number of quantities contained in this sample.\nvar quantityType: HKQuantityType\nThe quantity type for this sample."
  },
  {
    "title": "init(type:quantity:start:end:device:metadata:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquantitysample/1615019-init",
    "html": "Parameters\nquantityType\n\nThe type of sample to be created. HealthKit defines a number of different quantity types, representing different types of health and fitness data. For the complete list of quantity type identifiers, see HKQuantityTypeIdentifier.\n\nquantity\n\nThe value to be stored in the sample. The quantity object must use units that are compatible with the provided quantity type. If the units are not compatible, this method throws an exception (invalidArgumentException).\n\nstartDate\n\nThe start date for the sample. This date must be equal to or earlier than the end date; otherwise, this method throws an exception (invalidArgumentException).\n\nendDate\n\nThe end date for the sample. This date must be equal to or later than the start date; otherwise, this method throws an exception (invalidArgumentException).\n\ndevice\n\nThe device that generated the data for this sample.\n\nmetadata\n\nThe metadata dictionary contains extra information describing this sample. The dictionary’s keys are all NSString objects. The values may be NSString objects, NSNumber objects, or NSDate objects. For a complete list of predefined metadata keys, see Metadata Keys.\n\nUsing predefined keys helps facilitate sharing data between apps; however, you are also encouraged to create your own, custom keys as needed to extend the HealthKit quantity sample’s capabilities.\n\nReturn Value\n\nA valid quantity sample with the device and metadata.\n\nDiscussion\n\nHealthKit uses quantity samples to represent sample data using a single numeric value. To create a quantity sample, first create the corresponding quantity type and quantity, and then set its start date, end date, device, and metadata. You produce a new quantity sample with the provided device and metadata.\n\nlet device = HKDevice(name: deviceName,\n                      manufacturer: manufacturerName,\n                      model: modelName,\n                      hardwareVersion: hardwareVersionNumber,\n                      firmwareVersion: firmwareVersionNumber,\n                      softwareVersion: softwareVersionNumber,\n                      localIdentifier: localIdentifier,\n                      UDIDeviceIdentifier: deviceIdentifier)\n \nlet metadata = [HKMetadataKeyDigitalSignature:digitalSignature,\n                HKMetadataKeyTimeZone:timeZone]\n \nguard let quantityType = HKObjectType.quantityTypeForIdentifier(HKQuantityTypeIdentifierHeartRate) else {\n    fatalError(\"*** Unable to create a heart rate quantity type ***\")\n}\n \nlet bpm = HKUnit(fromString: \"count/min\")\nlet quantity = HKQuantity(unit: bpm, doubleValue: 72.0)\n \nlet quantitySample = HKQuantitySample(type: quantityType,\n                                      quantity: quantity,\n                                      startDate: start,\n                                      endDate: end,\n                                      device: device,\n                                      metadata: metadata)\n\nSee Also\nCreating Quantity Samples\ninit(type: HKQuantityType, quantity: HKQuantity, start: Date, end: Date)\nReturns a sample containing a numeric measurement.\ninit(type: HKQuantityType, quantity: HKQuantity, start: Date, end: Date, metadata: [String : Any]?)\nReturns a sample containing a numeric measurement with the provided metadata.\nRelated Documentation\nvar quantityType: HKQuantityType\nThe quantity type for this sample.\nvar quantity: HKQuantity\nThe quantity for this sample.\nvar endDate: Date\nThe sample’s end date.\nvar metadata: [String : Any]?\nThe metadata for this HealthKit object.\nclass func quantityType(forIdentifier: HKQuantityTypeIdentifier) -> HKQuantityType?\nReturns the shared quantity type for the provided identifier.\nvar startDate: Date\nThe sample’s start date."
  },
  {
    "title": "correlationType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkcorrelation/1614365-correlationtype",
    "html": "Discussion\n\nFor a complete list of correlation types, see Correlation Identifiers in HealthKit Constants.\n\nSee Also\nGetting Correlation Data\nvar objects: Set<HKSample>\nThe set of sample objects that make up the correlation.\nfunc objects(for: HKObjectType) -> Set<HKSample>\nReturns a set containing all the objects of the specified type in the correlation."
  },
  {
    "title": "objects(for:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkcorrelation/1614360-objects",
    "html": "Parameters\nobjectType\n\nThe quantity or category type for the data stored inside the correlation. For example, to get all the samples measuring calories from inside a correlation, use an HKSampleType object created with the dietaryEnergyConsumed identifier.\n\nReturn Value\n\nA set containing all the objects of the specified type in the correlation.\n\nSee Also\nGetting Correlation Data\nvar correlationType: HKCorrelationType\nThe type for this correlation.\nvar objects: Set<HKSample>\nThe set of sample objects that make up the correlation."
  },
  {
    "title": "objects | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkcorrelation/1614364-objects",
    "html": "Discussion\n\nThis property contains the quantity and category samples that are grouped into this correlation. Blood pressure correlations always include two quantity samples that represent the systolic and diastolic values. In contrast, food correlations can contain a wide range of dietary information about the food, including information about the fat, protein, carbohydrates, energy, and vitamins consumed.\n\nSee Also\nGetting Correlation Data\nvar correlationType: HKCorrelationType\nThe type for this correlation.\nfunc objects(for: HKObjectType) -> Set<HKSample>\nReturns a set containing all the objects of the specified type in the correlation."
  },
  {
    "title": "dietaryMagnesium | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquantitytypeidentifier/1615184-dietarymagnesium",
    "html": "Discussion\n\nThese samples use mass units (described in HKUnit) and measure cumulative values (described in HKQuantityAggregationStyle).\n\nSee Also\nNutrition\nstatic let dietaryBiotin: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of biotin (vitamin B7) consumed.\nstatic let dietaryCaffeine: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of caffeine consumed.\nstatic let dietaryCalcium: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of calcium consumed.\nstatic let dietaryCarbohydrates: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of carbohydrates consumed.\nstatic let dietaryChloride: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of chloride consumed.\nstatic let dietaryCholesterol: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of cholesterol consumed.\nstatic let dietaryChromium: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of chromium consumed.\nstatic let dietaryCopper: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of copper consumed.\nstatic let dietaryEnergyConsumed: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of energy consumed.\nstatic let dietaryFatMonounsaturated: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of monounsaturated fat consumed.\nstatic let dietaryFatPolyunsaturated: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of polyunsaturated fat consumed.\nstatic let dietaryFatSaturated: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of saturated fat consumed.\nstatic let dietaryFatTotal: HKQuantityTypeIdentifier\nA quantity sample type that measures the total amount of fat consumed.\nstatic let dietaryFiber: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of fiber consumed.\nstatic let dietaryFolate: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of folate (folic acid) consumed.\nstatic let dietaryIodine: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of iodine consumed.\nstatic let dietaryIron: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of iron consumed.\nstatic let dietaryManganese: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of manganese consumed.\nstatic let dietaryMolybdenum: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of molybdenum consumed.\nstatic let dietaryNiacin: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of niacin (vitamin B3) consumed.\nstatic let dietaryPantothenicAcid: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of pantothenic acid (vitamin B5) consumed.\nstatic let dietaryPhosphorus: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of phosphorus consumed.\nstatic let dietaryPotassium: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of potassium consumed.\nstatic let dietaryProtein: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of protein consumed.\nstatic let dietaryRiboflavin: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of riboflavin (vitamin B2) consumed.\nstatic let dietarySelenium: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of selenium consumed.\nstatic let dietarySodium: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of sodium consumed.\nstatic let dietarySugar: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of sugar consumed.\nstatic let dietaryThiamin: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of thiamin (vitamin B1) consumed.\nstatic let dietaryVitaminA: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of vitamin A consumed.\nstatic let dietaryVitaminB12: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of cyanocobalamin (vitamin B12) consumed.\nstatic let dietaryVitaminB6: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of pyridoxine (vitamin B6) consumed.\nstatic let dietaryVitaminC: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of vitamin C consumed.\nstatic let dietaryVitaminD: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of vitamin D consumed.\nstatic let dietaryVitaminE: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of vitamin E consumed.\nstatic let dietaryVitaminK: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of vitamin K consumed.\nstatic let dietaryWater: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of water consumed.\nstatic let dietaryZinc: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of zinc consumed.\nRelated Documentation\nstruct HKQuantityTypeIdentifier\nThe identifiers that create quantity type objects.\nclass HKQuantitySample\nA sample that represents a quantity, including the value and the units.\nclass HKQuantity\nAn object that stores a value for a given unit."
  },
  {
    "title": "init(type:start:end:objects:device:metadata:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkcorrelation/1614363-init",
    "html": "Parameters\ncorrelationType\n\nThe type for this correlation. For a complete list of correlation types, see Correlation Identifiers in HealthKit Constants.\n\nstartDate\n\nThe start date for the sample. This date must be equal to or earlier than the end date; otherwise, this method throws an exception (invalidArgumentException).\n\nendDate\n\nThe end date for the sample. This date must be equal to or later than the start date; otherwise, this method throws an exception (invalidArgumentException).\n\nobjects\n\nA set of HKSample objects. Specifically, this set contains the quantity and category samples to be grouped into this correlation.\n\ndevice\n\nThe device that generated the data for this sample.\n\nmetadata\n\nThe metadata dictionary containing extra information that describes this correlation. The dictionary’s keys are all NSString objects . The values may be NSString, NSNumber, or NSDate objects. For a complete list of predefined metadata keys, see Metadata Keys.\n\nUsing predefined keys helps facilitate sharing data between apps; however, you are also encouraged to create custom keys as needed to extend the HealthKit sample’s capabilities.\n\nWhen creating correlations representing food, always use the HKMetadataKeyFoodType key to provide the food’s name.\n\nReturn Value\n\nA new correlation instance.\n\nDiscussion\n\nUse a correlation object to represent composite data—that is, a sample that requires more than a single value. To create a correlation sample, first create the quantity and category samples you intend to combine into the correlation. Next, create the correlation’s type. Finally, instantiate the correlation, passing in the type, start date, end date, samples, device, and metadata as shown below.\n\nUse this method when recording data using external hardware. If you do not need to include additional metadata, pass nil for the metadata parameter.\n\nlet date = NSDate()\n \n// Create systolic sample\n \nguard let systolicType = HKObjectType.quantityTypeForIdentifier(HKQuantityTypeIdentifierBloodPressureSystolic) else {\n    fatalError(\"*** Unable to create the systolic type ****\")\n}\n \nlet systolicQuantity =\n    HKQuantity(unit: HKUnit.millimeterOfMercuryUnit(), doubleValue: 120.0)\n \nlet systolicSample = HKQuantitySample(type: systolicType,\n                                      quantity: systolicQuantity, startDate: date, endDate: date)\n \n// Create diastolic sample\n \nguard let diastolicType = HKObjectType.quantityTypeForIdentifier(HKQuantityTypeIdentifierBloodPressureDiastolic) else {\n    fatalError(\"*** Unable to create the diastolic type ***\")\n}\n \nlet diastolicQuantity =\n    HKQuantity(unit: HKUnit.millimeterOfMercuryUnit(), doubleValue: 75.0)\n \nlet diastolicSample = HKQuantitySample(type: diastolicType,\n                                       quantity: diastolicQuantity, startDate: date, endDate: date)\n \n// Create blood pressure sample\n \nguard let bloodPressureType = HKObjectType.correlationTypeForIdentifier(HKCorrelationTypeIdentifierBloodPressure) else {\n    fatalError(\"*** Unable to create the blood pressure type ***\")\n}\n \nlet objects: Set = [systolicSample, diastolicSample]\n \nlet device = HKDevice(name: deviceName,\n                      manufacturer: manufacturerName,\n                      model: modelName,\n                      hardwareVersion: hardwareVersionNumber,\n                      firmwareVersion: firmwareVersionNumber,\n                      softwareVersion: softwareVersionNumber,\n                      localIdentifier: localIdentifier,\n                      UDIDeviceIdentifier: deviceIdentifier)\n \nlet metadata : [String : AnyObject] =\n    [HKMetadataKeyDigitalSignature:digitalSignature,\n     HKMetadataKeyTimeZone:timeZone]\n \nlet bloodpressure = HKCorrelation(type: bloodPressureType, startDate: date, endDate: date, objects:objects, device: device, metadata: metadata)\n\nSee Also\nCreating Correlations\ninit(type: HKCorrelationType, start: Date, end: Date, objects: Set<HKSample>)\nInstantiates and returns a new correlation instance.\ninit(type: HKCorrelationType, start: Date, end: Date, objects: Set<HKSample>, metadata: [String : Any]?)\nInstantiates and returns a new correlation instance with the provided metadata.\nRelated Documentation\nvar objects: Set<HKSample>\nThe set of sample objects that make up the correlation.\nclass func correlationType(forIdentifier: HKCorrelationTypeIdentifier) -> HKCorrelationType?\nReturns the shared correlation type for the provided identifier.\nvar endDate: Date\nThe sample’s end date.\nvar correlationType: HKCorrelationType\nThe type for this correlation.\nvar metadata: [String : Any]?\nThe metadata for this HealthKit object.\nvar startDate: Date\nThe sample’s start date."
  },
  {
    "title": "dietaryIron | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquantitytypeidentifier/1615227-dietaryiron",
    "html": "Discussion\n\nThese samples use mass units (described in HKUnit) and measure cumulative values (described in HKQuantityAggregationStyle).\n\nSee Also\nNutrition\nstatic let dietaryBiotin: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of biotin (vitamin B7) consumed.\nstatic let dietaryCaffeine: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of caffeine consumed.\nstatic let dietaryCalcium: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of calcium consumed.\nstatic let dietaryCarbohydrates: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of carbohydrates consumed.\nstatic let dietaryChloride: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of chloride consumed.\nstatic let dietaryCholesterol: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of cholesterol consumed.\nstatic let dietaryChromium: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of chromium consumed.\nstatic let dietaryCopper: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of copper consumed.\nstatic let dietaryEnergyConsumed: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of energy consumed.\nstatic let dietaryFatMonounsaturated: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of monounsaturated fat consumed.\nstatic let dietaryFatPolyunsaturated: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of polyunsaturated fat consumed.\nstatic let dietaryFatSaturated: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of saturated fat consumed.\nstatic let dietaryFatTotal: HKQuantityTypeIdentifier\nA quantity sample type that measures the total amount of fat consumed.\nstatic let dietaryFiber: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of fiber consumed.\nstatic let dietaryFolate: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of folate (folic acid) consumed.\nstatic let dietaryIodine: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of iodine consumed.\nstatic let dietaryMagnesium: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of magnesium consumed.\nstatic let dietaryManganese: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of manganese consumed.\nstatic let dietaryMolybdenum: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of molybdenum consumed.\nstatic let dietaryNiacin: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of niacin (vitamin B3) consumed.\nstatic let dietaryPantothenicAcid: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of pantothenic acid (vitamin B5) consumed.\nstatic let dietaryPhosphorus: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of phosphorus consumed.\nstatic let dietaryPotassium: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of potassium consumed.\nstatic let dietaryProtein: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of protein consumed.\nstatic let dietaryRiboflavin: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of riboflavin (vitamin B2) consumed.\nstatic let dietarySelenium: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of selenium consumed.\nstatic let dietarySodium: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of sodium consumed.\nstatic let dietarySugar: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of sugar consumed.\nstatic let dietaryThiamin: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of thiamin (vitamin B1) consumed.\nstatic let dietaryVitaminA: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of vitamin A consumed.\nstatic let dietaryVitaminB12: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of cyanocobalamin (vitamin B12) consumed.\nstatic let dietaryVitaminB6: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of pyridoxine (vitamin B6) consumed.\nstatic let dietaryVitaminC: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of vitamin C consumed.\nstatic let dietaryVitaminD: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of vitamin D consumed.\nstatic let dietaryVitaminE: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of vitamin E consumed.\nstatic let dietaryVitaminK: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of vitamin K consumed.\nstatic let dietaryWater: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of water consumed.\nstatic let dietaryZinc: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of zinc consumed.\nRelated Documentation\nstruct HKQuantityTypeIdentifier\nThe identifiers that create quantity type objects.\nclass HKQuantitySample\nA sample that represents a quantity, including the value and the units.\nclass HKQuantity\nAn object that stores a value for a given unit."
  },
  {
    "title": "dietaryIodine | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquantitytypeidentifier/1615151-dietaryiodine",
    "html": "Discussion\n\nThese samples use mass units (described in HKUnit) and measure cumulative values (described in HKQuantityAggregationStyle).\n\nSee Also\nNutrition\nstatic let dietaryBiotin: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of biotin (vitamin B7) consumed.\nstatic let dietaryCaffeine: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of caffeine consumed.\nstatic let dietaryCalcium: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of calcium consumed.\nstatic let dietaryCarbohydrates: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of carbohydrates consumed.\nstatic let dietaryChloride: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of chloride consumed.\nstatic let dietaryCholesterol: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of cholesterol consumed.\nstatic let dietaryChromium: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of chromium consumed.\nstatic let dietaryCopper: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of copper consumed.\nstatic let dietaryEnergyConsumed: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of energy consumed.\nstatic let dietaryFatMonounsaturated: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of monounsaturated fat consumed.\nstatic let dietaryFatPolyunsaturated: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of polyunsaturated fat consumed.\nstatic let dietaryFatSaturated: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of saturated fat consumed.\nstatic let dietaryFatTotal: HKQuantityTypeIdentifier\nA quantity sample type that measures the total amount of fat consumed.\nstatic let dietaryFiber: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of fiber consumed.\nstatic let dietaryFolate: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of folate (folic acid) consumed.\nstatic let dietaryIron: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of iron consumed.\nstatic let dietaryMagnesium: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of magnesium consumed.\nstatic let dietaryManganese: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of manganese consumed.\nstatic let dietaryMolybdenum: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of molybdenum consumed.\nstatic let dietaryNiacin: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of niacin (vitamin B3) consumed.\nstatic let dietaryPantothenicAcid: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of pantothenic acid (vitamin B5) consumed.\nstatic let dietaryPhosphorus: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of phosphorus consumed.\nstatic let dietaryPotassium: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of potassium consumed.\nstatic let dietaryProtein: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of protein consumed.\nstatic let dietaryRiboflavin: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of riboflavin (vitamin B2) consumed.\nstatic let dietarySelenium: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of selenium consumed.\nstatic let dietarySodium: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of sodium consumed.\nstatic let dietarySugar: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of sugar consumed.\nstatic let dietaryThiamin: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of thiamin (vitamin B1) consumed.\nstatic let dietaryVitaminA: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of vitamin A consumed.\nstatic let dietaryVitaminB12: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of cyanocobalamin (vitamin B12) consumed.\nstatic let dietaryVitaminB6: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of pyridoxine (vitamin B6) consumed.\nstatic let dietaryVitaminC: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of vitamin C consumed.\nstatic let dietaryVitaminD: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of vitamin D consumed.\nstatic let dietaryVitaminE: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of vitamin E consumed.\nstatic let dietaryVitaminK: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of vitamin K consumed.\nstatic let dietaryWater: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of water consumed.\nstatic let dietaryZinc: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of zinc consumed.\nRelated Documentation\nstruct HKQuantityTypeIdentifier\nThe identifiers that create quantity type objects.\nclass HKQuantitySample\nA sample that represents a quantity, including the value and the units.\nclass HKQuantity\nAn object that stores a value for a given unit."
  },
  {
    "title": "dietaryProtein | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquantitytypeidentifier/1615652-dietaryprotein",
    "html": "Discussion\n\nThese samples use mass units (described in HKUnit) and measure cumulative values (described in HKQuantityAggregationStyle).\n\nSee Also\nNutrition\nstatic let dietaryBiotin: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of biotin (vitamin B7) consumed.\nstatic let dietaryCaffeine: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of caffeine consumed.\nstatic let dietaryCalcium: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of calcium consumed.\nstatic let dietaryCarbohydrates: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of carbohydrates consumed.\nstatic let dietaryChloride: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of chloride consumed.\nstatic let dietaryCholesterol: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of cholesterol consumed.\nstatic let dietaryChromium: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of chromium consumed.\nstatic let dietaryCopper: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of copper consumed.\nstatic let dietaryEnergyConsumed: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of energy consumed.\nstatic let dietaryFatMonounsaturated: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of monounsaturated fat consumed.\nstatic let dietaryFatPolyunsaturated: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of polyunsaturated fat consumed.\nstatic let dietaryFatSaturated: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of saturated fat consumed.\nstatic let dietaryFatTotal: HKQuantityTypeIdentifier\nA quantity sample type that measures the total amount of fat consumed.\nstatic let dietaryFiber: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of fiber consumed.\nstatic let dietaryFolate: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of folate (folic acid) consumed.\nstatic let dietaryIodine: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of iodine consumed.\nstatic let dietaryIron: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of iron consumed.\nstatic let dietaryMagnesium: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of magnesium consumed.\nstatic let dietaryManganese: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of manganese consumed.\nstatic let dietaryMolybdenum: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of molybdenum consumed.\nstatic let dietaryNiacin: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of niacin (vitamin B3) consumed.\nstatic let dietaryPantothenicAcid: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of pantothenic acid (vitamin B5) consumed.\nstatic let dietaryPhosphorus: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of phosphorus consumed.\nstatic let dietaryPotassium: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of potassium consumed.\nstatic let dietaryRiboflavin: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of riboflavin (vitamin B2) consumed.\nstatic let dietarySelenium: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of selenium consumed.\nstatic let dietarySodium: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of sodium consumed.\nstatic let dietarySugar: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of sugar consumed.\nstatic let dietaryThiamin: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of thiamin (vitamin B1) consumed.\nstatic let dietaryVitaminA: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of vitamin A consumed.\nstatic let dietaryVitaminB12: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of cyanocobalamin (vitamin B12) consumed.\nstatic let dietaryVitaminB6: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of pyridoxine (vitamin B6) consumed.\nstatic let dietaryVitaminC: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of vitamin C consumed.\nstatic let dietaryVitaminD: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of vitamin D consumed.\nstatic let dietaryVitaminE: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of vitamin E consumed.\nstatic let dietaryVitaminK: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of vitamin K consumed.\nstatic let dietaryWater: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of water consumed.\nstatic let dietaryZinc: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of zinc consumed.\nRelated Documentation\nstruct HKQuantityTypeIdentifier\nThe identifiers that create quantity type objects.\nclass HKQuantitySample\nA sample that represents a quantity, including the value and the units.\nclass HKQuantity\nAn object that stores a value for a given unit."
  },
  {
    "title": "dietaryPhosphorus | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquantitytypeidentifier/1615448-dietaryphosphorus",
    "html": "Discussion\n\nThese samples use mass units (described in HKUnit) and measure cumulative values (described in HKQuantityAggregationStyle).\n\nSee Also\nNutrition\nstatic let dietaryBiotin: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of biotin (vitamin B7) consumed.\nstatic let dietaryCaffeine: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of caffeine consumed.\nstatic let dietaryCalcium: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of calcium consumed.\nstatic let dietaryCarbohydrates: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of carbohydrates consumed.\nstatic let dietaryChloride: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of chloride consumed.\nstatic let dietaryCholesterol: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of cholesterol consumed.\nstatic let dietaryChromium: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of chromium consumed.\nstatic let dietaryCopper: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of copper consumed.\nstatic let dietaryEnergyConsumed: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of energy consumed.\nstatic let dietaryFatMonounsaturated: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of monounsaturated fat consumed.\nstatic let dietaryFatPolyunsaturated: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of polyunsaturated fat consumed.\nstatic let dietaryFatSaturated: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of saturated fat consumed.\nstatic let dietaryFatTotal: HKQuantityTypeIdentifier\nA quantity sample type that measures the total amount of fat consumed.\nstatic let dietaryFiber: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of fiber consumed.\nstatic let dietaryFolate: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of folate (folic acid) consumed.\nstatic let dietaryIodine: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of iodine consumed.\nstatic let dietaryIron: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of iron consumed.\nstatic let dietaryMagnesium: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of magnesium consumed.\nstatic let dietaryManganese: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of manganese consumed.\nstatic let dietaryMolybdenum: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of molybdenum consumed.\nstatic let dietaryNiacin: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of niacin (vitamin B3) consumed.\nstatic let dietaryPantothenicAcid: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of pantothenic acid (vitamin B5) consumed.\nstatic let dietaryPotassium: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of potassium consumed.\nstatic let dietaryProtein: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of protein consumed.\nstatic let dietaryRiboflavin: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of riboflavin (vitamin B2) consumed.\nstatic let dietarySelenium: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of selenium consumed.\nstatic let dietarySodium: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of sodium consumed.\nstatic let dietarySugar: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of sugar consumed.\nstatic let dietaryThiamin: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of thiamin (vitamin B1) consumed.\nstatic let dietaryVitaminA: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of vitamin A consumed.\nstatic let dietaryVitaminB12: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of cyanocobalamin (vitamin B12) consumed.\nstatic let dietaryVitaminB6: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of pyridoxine (vitamin B6) consumed.\nstatic let dietaryVitaminC: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of vitamin C consumed.\nstatic let dietaryVitaminD: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of vitamin D consumed.\nstatic let dietaryVitaminE: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of vitamin E consumed.\nstatic let dietaryVitaminK: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of vitamin K consumed.\nstatic let dietaryWater: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of water consumed.\nstatic let dietaryZinc: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of zinc consumed.\nRelated Documentation\nstruct HKQuantityTypeIdentifier\nThe identifiers that create quantity type objects.\nclass HKQuantitySample\nA sample that represents a quantity, including the value and the units.\nclass HKQuantity\nAn object that stores a value for a given unit."
  },
  {
    "title": "dietaryNiacin | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquantitytypeidentifier/1615710-dietaryniacin",
    "html": "Discussion\n\nThese samples use mass units (described in HKUnit) and measure cumulative values (described in HKQuantityAggregationStyle).\n\nSee Also\nNutrition\nstatic let dietaryBiotin: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of biotin (vitamin B7) consumed.\nstatic let dietaryCaffeine: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of caffeine consumed.\nstatic let dietaryCalcium: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of calcium consumed.\nstatic let dietaryCarbohydrates: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of carbohydrates consumed.\nstatic let dietaryChloride: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of chloride consumed.\nstatic let dietaryCholesterol: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of cholesterol consumed.\nstatic let dietaryChromium: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of chromium consumed.\nstatic let dietaryCopper: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of copper consumed.\nstatic let dietaryEnergyConsumed: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of energy consumed.\nstatic let dietaryFatMonounsaturated: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of monounsaturated fat consumed.\nstatic let dietaryFatPolyunsaturated: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of polyunsaturated fat consumed.\nstatic let dietaryFatSaturated: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of saturated fat consumed.\nstatic let dietaryFatTotal: HKQuantityTypeIdentifier\nA quantity sample type that measures the total amount of fat consumed.\nstatic let dietaryFiber: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of fiber consumed.\nstatic let dietaryFolate: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of folate (folic acid) consumed.\nstatic let dietaryIodine: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of iodine consumed.\nstatic let dietaryIron: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of iron consumed.\nstatic let dietaryMagnesium: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of magnesium consumed.\nstatic let dietaryManganese: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of manganese consumed.\nstatic let dietaryMolybdenum: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of molybdenum consumed.\nstatic let dietaryPantothenicAcid: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of pantothenic acid (vitamin B5) consumed.\nstatic let dietaryPhosphorus: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of phosphorus consumed.\nstatic let dietaryPotassium: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of potassium consumed.\nstatic let dietaryProtein: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of protein consumed.\nstatic let dietaryRiboflavin: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of riboflavin (vitamin B2) consumed.\nstatic let dietarySelenium: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of selenium consumed.\nstatic let dietarySodium: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of sodium consumed.\nstatic let dietarySugar: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of sugar consumed.\nstatic let dietaryThiamin: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of thiamin (vitamin B1) consumed.\nstatic let dietaryVitaminA: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of vitamin A consumed.\nstatic let dietaryVitaminB12: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of cyanocobalamin (vitamin B12) consumed.\nstatic let dietaryVitaminB6: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of pyridoxine (vitamin B6) consumed.\nstatic let dietaryVitaminC: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of vitamin C consumed.\nstatic let dietaryVitaminD: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of vitamin D consumed.\nstatic let dietaryVitaminE: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of vitamin E consumed.\nstatic let dietaryVitaminK: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of vitamin K consumed.\nstatic let dietaryWater: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of water consumed.\nstatic let dietaryZinc: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of zinc consumed.\nRelated Documentation\nstruct HKQuantityTypeIdentifier\nThe identifiers that create quantity type objects.\nclass HKQuantitySample\nA sample that represents a quantity, including the value and the units.\nclass HKQuantity\nAn object that stores a value for a given unit."
  },
  {
    "title": "uuid | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkobject/1615721-uuid",
    "html": "Discussion\n\nHealthKit assigns a UUID to the object when you create it. If you want to add your own unique ID, add it to the object’s metadata using the HKMetadataKeyExternalUUID key.\n\nSee Also\nAccessing Properties\nvar metadata: [String : Any]?\nThe metadata for this HealthKit object.\nvar device: HKDevice?\nThe device that generated the data for this object.\nvar sourceRevision: HKSourceRevision\nThe app or device that created this object.\nvar source: HKSource\nA HealthKit source, representing the app or device that created this object."
  },
  {
    "title": "dietaryPotassium | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquantitytypeidentifier/1615594-dietarypotassium",
    "html": "Discussion\n\nThese samples use mass units (described in HKUnit) and measure cumulative values (described in HKQuantityAggregationStyle).\n\nSee Also\nNutrition\nstatic let dietaryBiotin: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of biotin (vitamin B7) consumed.\nstatic let dietaryCaffeine: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of caffeine consumed.\nstatic let dietaryCalcium: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of calcium consumed.\nstatic let dietaryCarbohydrates: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of carbohydrates consumed.\nstatic let dietaryChloride: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of chloride consumed.\nstatic let dietaryCholesterol: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of cholesterol consumed.\nstatic let dietaryChromium: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of chromium consumed.\nstatic let dietaryCopper: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of copper consumed.\nstatic let dietaryEnergyConsumed: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of energy consumed.\nstatic let dietaryFatMonounsaturated: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of monounsaturated fat consumed.\nstatic let dietaryFatPolyunsaturated: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of polyunsaturated fat consumed.\nstatic let dietaryFatSaturated: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of saturated fat consumed.\nstatic let dietaryFatTotal: HKQuantityTypeIdentifier\nA quantity sample type that measures the total amount of fat consumed.\nstatic let dietaryFiber: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of fiber consumed.\nstatic let dietaryFolate: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of folate (folic acid) consumed.\nstatic let dietaryIodine: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of iodine consumed.\nstatic let dietaryIron: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of iron consumed.\nstatic let dietaryMagnesium: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of magnesium consumed.\nstatic let dietaryManganese: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of manganese consumed.\nstatic let dietaryMolybdenum: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of molybdenum consumed.\nstatic let dietaryNiacin: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of niacin (vitamin B3) consumed.\nstatic let dietaryPantothenicAcid: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of pantothenic acid (vitamin B5) consumed.\nstatic let dietaryPhosphorus: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of phosphorus consumed.\nstatic let dietaryProtein: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of protein consumed.\nstatic let dietaryRiboflavin: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of riboflavin (vitamin B2) consumed.\nstatic let dietarySelenium: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of selenium consumed.\nstatic let dietarySodium: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of sodium consumed.\nstatic let dietarySugar: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of sugar consumed.\nstatic let dietaryThiamin: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of thiamin (vitamin B1) consumed.\nstatic let dietaryVitaminA: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of vitamin A consumed.\nstatic let dietaryVitaminB12: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of cyanocobalamin (vitamin B12) consumed.\nstatic let dietaryVitaminB6: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of pyridoxine (vitamin B6) consumed.\nstatic let dietaryVitaminC: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of vitamin C consumed.\nstatic let dietaryVitaminD: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of vitamin D consumed.\nstatic let dietaryVitaminE: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of vitamin E consumed.\nstatic let dietaryVitaminK: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of vitamin K consumed.\nstatic let dietaryWater: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of water consumed.\nstatic let dietaryZinc: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of zinc consumed.\nRelated Documentation\nstruct HKQuantityTypeIdentifier\nThe identifiers that create quantity type objects.\nclass HKQuantitySample\nA sample that represents a quantity, including the value and the units.\nclass HKQuantity\nAn object that stores a value for a given unit."
  },
  {
    "title": "device | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkobject/1615622-device",
    "html": "See Also\nAccessing Properties\nvar uuid: UUID\nThe universally unique identifier (UUID) for this HealthKit object.\nvar metadata: [String : Any]?\nThe metadata for this HealthKit object.\nvar sourceRevision: HKSourceRevision\nThe app or device that created this object.\nvar source: HKSource\nA HealthKit source, representing the app or device that created this object."
  },
  {
    "title": "dietaryRiboflavin | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquantitytypeidentifier/1615353-dietaryriboflavin",
    "html": "Discussion\n\nThese samples use mass units (described in HKUnit) and measure cumulative values (described in HKQuantityAggregationStyle).\n\nSee Also\nNutrition\nstatic let dietaryBiotin: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of biotin (vitamin B7) consumed.\nstatic let dietaryCaffeine: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of caffeine consumed.\nstatic let dietaryCalcium: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of calcium consumed.\nstatic let dietaryCarbohydrates: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of carbohydrates consumed.\nstatic let dietaryChloride: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of chloride consumed.\nstatic let dietaryCholesterol: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of cholesterol consumed.\nstatic let dietaryChromium: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of chromium consumed.\nstatic let dietaryCopper: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of copper consumed.\nstatic let dietaryEnergyConsumed: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of energy consumed.\nstatic let dietaryFatMonounsaturated: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of monounsaturated fat consumed.\nstatic let dietaryFatPolyunsaturated: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of polyunsaturated fat consumed.\nstatic let dietaryFatSaturated: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of saturated fat consumed.\nstatic let dietaryFatTotal: HKQuantityTypeIdentifier\nA quantity sample type that measures the total amount of fat consumed.\nstatic let dietaryFiber: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of fiber consumed.\nstatic let dietaryFolate: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of folate (folic acid) consumed.\nstatic let dietaryIodine: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of iodine consumed.\nstatic let dietaryIron: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of iron consumed.\nstatic let dietaryMagnesium: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of magnesium consumed.\nstatic let dietaryManganese: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of manganese consumed.\nstatic let dietaryMolybdenum: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of molybdenum consumed.\nstatic let dietaryNiacin: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of niacin (vitamin B3) consumed.\nstatic let dietaryPantothenicAcid: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of pantothenic acid (vitamin B5) consumed.\nstatic let dietaryPhosphorus: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of phosphorus consumed.\nstatic let dietaryPotassium: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of potassium consumed.\nstatic let dietaryProtein: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of protein consumed.\nstatic let dietarySelenium: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of selenium consumed.\nstatic let dietarySodium: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of sodium consumed.\nstatic let dietarySugar: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of sugar consumed.\nstatic let dietaryThiamin: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of thiamin (vitamin B1) consumed.\nstatic let dietaryVitaminA: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of vitamin A consumed.\nstatic let dietaryVitaminB12: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of cyanocobalamin (vitamin B12) consumed.\nstatic let dietaryVitaminB6: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of pyridoxine (vitamin B6) consumed.\nstatic let dietaryVitaminC: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of vitamin C consumed.\nstatic let dietaryVitaminD: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of vitamin D consumed.\nstatic let dietaryVitaminE: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of vitamin E consumed.\nstatic let dietaryVitaminK: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of vitamin K consumed.\nstatic let dietaryWater: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of water consumed.\nstatic let dietaryZinc: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of zinc consumed.\nRelated Documentation\nstruct HKQuantityTypeIdentifier\nThe identifiers that create quantity type objects.\nclass HKQuantitySample\nA sample that represents a quantity, including the value and the units.\nclass HKQuantity\nAn object that stores a value for a given unit."
  },
  {
    "title": "dietarySodium | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquantitytypeidentifier/1615402-dietarysodium",
    "html": "Discussion\n\nThese samples use mass units (described in HKUnit) and measure cumulative values (described in HKQuantityAggregationStyle).\n\nSee Also\nNutrition\nstatic let dietaryBiotin: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of biotin (vitamin B7) consumed.\nstatic let dietaryCaffeine: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of caffeine consumed.\nstatic let dietaryCalcium: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of calcium consumed.\nstatic let dietaryCarbohydrates: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of carbohydrates consumed.\nstatic let dietaryChloride: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of chloride consumed.\nstatic let dietaryCholesterol: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of cholesterol consumed.\nstatic let dietaryChromium: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of chromium consumed.\nstatic let dietaryCopper: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of copper consumed.\nstatic let dietaryEnergyConsumed: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of energy consumed.\nstatic let dietaryFatMonounsaturated: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of monounsaturated fat consumed.\nstatic let dietaryFatPolyunsaturated: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of polyunsaturated fat consumed.\nstatic let dietaryFatSaturated: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of saturated fat consumed.\nstatic let dietaryFatTotal: HKQuantityTypeIdentifier\nA quantity sample type that measures the total amount of fat consumed.\nstatic let dietaryFiber: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of fiber consumed.\nstatic let dietaryFolate: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of folate (folic acid) consumed.\nstatic let dietaryIodine: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of iodine consumed.\nstatic let dietaryIron: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of iron consumed.\nstatic let dietaryMagnesium: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of magnesium consumed.\nstatic let dietaryManganese: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of manganese consumed.\nstatic let dietaryMolybdenum: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of molybdenum consumed.\nstatic let dietaryNiacin: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of niacin (vitamin B3) consumed.\nstatic let dietaryPantothenicAcid: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of pantothenic acid (vitamin B5) consumed.\nstatic let dietaryPhosphorus: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of phosphorus consumed.\nstatic let dietaryPotassium: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of potassium consumed.\nstatic let dietaryProtein: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of protein consumed.\nstatic let dietaryRiboflavin: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of riboflavin (vitamin B2) consumed.\nstatic let dietarySelenium: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of selenium consumed.\nstatic let dietarySugar: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of sugar consumed.\nstatic let dietaryThiamin: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of thiamin (vitamin B1) consumed.\nstatic let dietaryVitaminA: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of vitamin A consumed.\nstatic let dietaryVitaminB12: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of cyanocobalamin (vitamin B12) consumed.\nstatic let dietaryVitaminB6: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of pyridoxine (vitamin B6) consumed.\nstatic let dietaryVitaminC: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of vitamin C consumed.\nstatic let dietaryVitaminD: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of vitamin D consumed.\nstatic let dietaryVitaminE: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of vitamin E consumed.\nstatic let dietaryVitaminK: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of vitamin K consumed.\nstatic let dietaryWater: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of water consumed.\nstatic let dietaryZinc: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of zinc consumed.\nRelated Documentation\nstruct HKQuantityTypeIdentifier\nThe identifiers that create quantity type objects.\nclass HKQuantitySample\nA sample that represents a quantity, including the value and the units.\nclass HKQuantity\nAn object that stores a value for a given unit."
  },
  {
    "title": "dietarySelenium | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquantitytypeidentifier/1615465-dietaryselenium",
    "html": "Discussion\n\nThese samples use mass units (described in HKUnit) and measure cumulative values (described in HKQuantityAggregationStyle).\n\nSee Also\nNutrition\nstatic let dietaryBiotin: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of biotin (vitamin B7) consumed.\nstatic let dietaryCaffeine: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of caffeine consumed.\nstatic let dietaryCalcium: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of calcium consumed.\nstatic let dietaryCarbohydrates: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of carbohydrates consumed.\nstatic let dietaryChloride: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of chloride consumed.\nstatic let dietaryCholesterol: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of cholesterol consumed.\nstatic let dietaryChromium: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of chromium consumed.\nstatic let dietaryCopper: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of copper consumed.\nstatic let dietaryEnergyConsumed: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of energy consumed.\nstatic let dietaryFatMonounsaturated: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of monounsaturated fat consumed.\nstatic let dietaryFatPolyunsaturated: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of polyunsaturated fat consumed.\nstatic let dietaryFatSaturated: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of saturated fat consumed.\nstatic let dietaryFatTotal: HKQuantityTypeIdentifier\nA quantity sample type that measures the total amount of fat consumed.\nstatic let dietaryFiber: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of fiber consumed.\nstatic let dietaryFolate: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of folate (folic acid) consumed.\nstatic let dietaryIodine: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of iodine consumed.\nstatic let dietaryIron: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of iron consumed.\nstatic let dietaryMagnesium: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of magnesium consumed.\nstatic let dietaryManganese: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of manganese consumed.\nstatic let dietaryMolybdenum: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of molybdenum consumed.\nstatic let dietaryNiacin: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of niacin (vitamin B3) consumed.\nstatic let dietaryPantothenicAcid: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of pantothenic acid (vitamin B5) consumed.\nstatic let dietaryPhosphorus: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of phosphorus consumed.\nstatic let dietaryPotassium: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of potassium consumed.\nstatic let dietaryProtein: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of protein consumed.\nstatic let dietaryRiboflavin: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of riboflavin (vitamin B2) consumed.\nstatic let dietarySodium: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of sodium consumed.\nstatic let dietarySugar: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of sugar consumed.\nstatic let dietaryThiamin: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of thiamin (vitamin B1) consumed.\nstatic let dietaryVitaminA: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of vitamin A consumed.\nstatic let dietaryVitaminB12: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of cyanocobalamin (vitamin B12) consumed.\nstatic let dietaryVitaminB6: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of pyridoxine (vitamin B6) consumed.\nstatic let dietaryVitaminC: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of vitamin C consumed.\nstatic let dietaryVitaminD: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of vitamin D consumed.\nstatic let dietaryVitaminE: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of vitamin E consumed.\nstatic let dietaryVitaminK: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of vitamin K consumed.\nstatic let dietaryWater: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of water consumed.\nstatic let dietaryZinc: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of zinc consumed.\nRelated Documentation\nstruct HKQuantityTypeIdentifier\nThe identifiers that create quantity type objects.\nclass HKQuantitySample\nA sample that represents a quantity, including the value and the units.\nclass HKQuantity\nAn object that stores a value for a given unit."
  },
  {
    "title": "init(type:start:end:objects:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkcorrelation/1614359-init",
    "html": "Parameters\ncorrelationType\n\nThe type for this correlation. For a complete list of correlation types, see Correlation Identifiers in HealthKit Constants.\n\nstartDate\n\nThe start date for the sample. This date must be equal to or earlier than the end date; otherwise, this method throws an exception (invalidArgumentException).\n\nendDate\n\nThe end date for the sample. This date must be equal to or later than the start date; otherwise, this method throws an exception (invalidArgumentException).\n\nobjects\n\nA set of HKSample objects. Specifically, this set contains the quantity and category samples to be grouped into this correlation.\n\nReturn Value\n\nA new correlation instance.\n\nDiscussion\n\nUse a correlation object to represent composite data—that is, a sample that requires more than a single value. To create a correlation sample, first create the quantity and category samples you intend to combine into the correlation. Next, create the correlation’s type. Finally, instantiate the correlation, passing in the type, start date, end date, and samples, as shown below.\n\nUse this method when you do not need to include additional metadata and the data was not recorded using external hardware.\n\nlet date = NSDate()\n \n// Create systolic sample\n \nguard let systolicType = HKObjectType.quantityTypeForIdentifier(HKQuantityTypeIdentifierBloodPressureSystolic) else {\n    fatalError(\"*** Unable to create the systolic type ****\")\n}\n \nlet systolicQuantity =\n    HKQuantity(unit: HKUnit.millimeterOfMercuryUnit(), doubleValue: 120.0)\n \nlet systolicSample = HKQuantitySample(type: systolicType,\n                                      quantity: systolicQuantity, startDate: date, endDate: date)\n \n// Create diastolic sample\n \nguard let diastolicType = HKObjectType.quantityTypeForIdentifier(HKQuantityTypeIdentifierBloodPressureDiastolic) else {\n    fatalError(\"*** Unable to create the diastolic type ***\")\n}\n \nlet diastolicQuantity =\n    HKQuantity(unit: HKUnit.millimeterOfMercuryUnit(), doubleValue: 75.0)\n \nlet diastolicSample = HKQuantitySample(type: diastolicType,\n                                       quantity: diastolicQuantity, startDate: date, endDate: date)\n \n// Create blood pressure sample\n \nguard let bloodPressureType = HKObjectType.correlationTypeForIdentifier(HKCorrelationTypeIdentifierBloodPressure) else {\n    fatalError(\"*** Unable to create the blood pressure type ***\")\n}\n \nlet objects: Set = [systolicSample, diastolicSample]\n \nlet bloodpressure = HKCorrelation(type: bloodPressureType,\n                                  startDate: date, endDate: date, objects:objects)\n\nSee Also\nCreating Correlations\ninit(type: HKCorrelationType, start: Date, end: Date, objects: Set<HKSample>, metadata: [String : Any]?)\nInstantiates and returns a new correlation instance with the provided metadata.\ninit(type: HKCorrelationType, start: Date, end: Date, objects: Set<HKSample>, device: HKDevice?, metadata: [String : Any]?)\nInstantiates and returns a new correlation instance with the provided device and metadata.\nRelated Documentation\nvar objects: Set<HKSample>\nThe set of sample objects that make up the correlation.\nclass func correlationType(forIdentifier: HKCorrelationTypeIdentifier) -> HKCorrelationType?\nReturns the shared correlation type for the provided identifier.\nvar endDate: Date\nThe sample’s end date.\nvar correlationType: HKCorrelationType\nThe type for this correlation.\nvar metadata: [String : Any]?\nThe metadata for this HealthKit object.\nvar startDate: Date\nThe sample’s start date."
  },
  {
    "title": "dietarySugar | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquantitytypeidentifier/1615674-dietarysugar",
    "html": "Discussion\n\nThese samples use mass units (described in HKUnit) and measure cumulative values (described in HKQuantityAggregationStyle).\n\nSee Also\nNutrition\nstatic let dietaryBiotin: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of biotin (vitamin B7) consumed.\nstatic let dietaryCaffeine: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of caffeine consumed.\nstatic let dietaryCalcium: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of calcium consumed.\nstatic let dietaryCarbohydrates: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of carbohydrates consumed.\nstatic let dietaryChloride: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of chloride consumed.\nstatic let dietaryCholesterol: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of cholesterol consumed.\nstatic let dietaryChromium: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of chromium consumed.\nstatic let dietaryCopper: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of copper consumed.\nstatic let dietaryEnergyConsumed: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of energy consumed.\nstatic let dietaryFatMonounsaturated: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of monounsaturated fat consumed.\nstatic let dietaryFatPolyunsaturated: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of polyunsaturated fat consumed.\nstatic let dietaryFatSaturated: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of saturated fat consumed.\nstatic let dietaryFatTotal: HKQuantityTypeIdentifier\nA quantity sample type that measures the total amount of fat consumed.\nstatic let dietaryFiber: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of fiber consumed.\nstatic let dietaryFolate: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of folate (folic acid) consumed.\nstatic let dietaryIodine: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of iodine consumed.\nstatic let dietaryIron: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of iron consumed.\nstatic let dietaryMagnesium: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of magnesium consumed.\nstatic let dietaryManganese: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of manganese consumed.\nstatic let dietaryMolybdenum: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of molybdenum consumed.\nstatic let dietaryNiacin: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of niacin (vitamin B3) consumed.\nstatic let dietaryPantothenicAcid: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of pantothenic acid (vitamin B5) consumed.\nstatic let dietaryPhosphorus: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of phosphorus consumed.\nstatic let dietaryPotassium: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of potassium consumed.\nstatic let dietaryProtein: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of protein consumed.\nstatic let dietaryRiboflavin: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of riboflavin (vitamin B2) consumed.\nstatic let dietarySelenium: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of selenium consumed.\nstatic let dietarySodium: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of sodium consumed.\nstatic let dietaryThiamin: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of thiamin (vitamin B1) consumed.\nstatic let dietaryVitaminA: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of vitamin A consumed.\nstatic let dietaryVitaminB12: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of cyanocobalamin (vitamin B12) consumed.\nstatic let dietaryVitaminB6: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of pyridoxine (vitamin B6) consumed.\nstatic let dietaryVitaminC: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of vitamin C consumed.\nstatic let dietaryVitaminD: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of vitamin D consumed.\nstatic let dietaryVitaminE: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of vitamin E consumed.\nstatic let dietaryVitaminK: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of vitamin K consumed.\nstatic let dietaryWater: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of water consumed.\nstatic let dietaryZinc: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of zinc consumed.\nRelated Documentation\nstruct HKQuantityTypeIdentifier\nThe identifiers that create quantity type objects.\nclass HKQuantitySample\nA sample that represents a quantity, including the value and the units.\nclass HKQuantity\nAn object that stores a value for a given unit."
  },
  {
    "title": "dietaryVitaminA | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquantitytypeidentifier/1615711-dietaryvitamina",
    "html": "Discussion\n\nThese samples use mass units (described in HKUnit) and measure cumulative values (described in HKQuantityAggregationStyle).\n\nSee Also\nNutrition\nstatic let dietaryBiotin: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of biotin (vitamin B7) consumed.\nstatic let dietaryCaffeine: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of caffeine consumed.\nstatic let dietaryCalcium: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of calcium consumed.\nstatic let dietaryCarbohydrates: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of carbohydrates consumed.\nstatic let dietaryChloride: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of chloride consumed.\nstatic let dietaryCholesterol: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of cholesterol consumed.\nstatic let dietaryChromium: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of chromium consumed.\nstatic let dietaryCopper: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of copper consumed.\nstatic let dietaryEnergyConsumed: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of energy consumed.\nstatic let dietaryFatMonounsaturated: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of monounsaturated fat consumed.\nstatic let dietaryFatPolyunsaturated: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of polyunsaturated fat consumed.\nstatic let dietaryFatSaturated: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of saturated fat consumed.\nstatic let dietaryFatTotal: HKQuantityTypeIdentifier\nA quantity sample type that measures the total amount of fat consumed.\nstatic let dietaryFiber: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of fiber consumed.\nstatic let dietaryFolate: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of folate (folic acid) consumed.\nstatic let dietaryIodine: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of iodine consumed.\nstatic let dietaryIron: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of iron consumed.\nstatic let dietaryMagnesium: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of magnesium consumed.\nstatic let dietaryManganese: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of manganese consumed.\nstatic let dietaryMolybdenum: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of molybdenum consumed.\nstatic let dietaryNiacin: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of niacin (vitamin B3) consumed.\nstatic let dietaryPantothenicAcid: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of pantothenic acid (vitamin B5) consumed.\nstatic let dietaryPhosphorus: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of phosphorus consumed.\nstatic let dietaryPotassium: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of potassium consumed.\nstatic let dietaryProtein: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of protein consumed.\nstatic let dietaryRiboflavin: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of riboflavin (vitamin B2) consumed.\nstatic let dietarySelenium: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of selenium consumed.\nstatic let dietarySodium: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of sodium consumed.\nstatic let dietarySugar: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of sugar consumed.\nstatic let dietaryThiamin: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of thiamin (vitamin B1) consumed.\nstatic let dietaryVitaminB12: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of cyanocobalamin (vitamin B12) consumed.\nstatic let dietaryVitaminB6: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of pyridoxine (vitamin B6) consumed.\nstatic let dietaryVitaminC: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of vitamin C consumed.\nstatic let dietaryVitaminD: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of vitamin D consumed.\nstatic let dietaryVitaminE: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of vitamin E consumed.\nstatic let dietaryVitaminK: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of vitamin K consumed.\nstatic let dietaryWater: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of water consumed.\nstatic let dietaryZinc: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of zinc consumed.\nRelated Documentation\nstruct HKQuantityTypeIdentifier\nThe identifiers that create quantity type objects.\nclass HKQuantitySample\nA sample that represents a quantity, including the value and the units.\nclass HKQuantity\nAn object that stores a value for a given unit."
  },
  {
    "title": "dietaryThiamin | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquantitytypeidentifier/1615776-dietarythiamin",
    "html": "Discussion\n\nThese samples use mass units (described in HKUnit) and measure cumulative values (described in HKQuantityAggregationStyle).\n\nSee Also\nNutrition\nstatic let dietaryBiotin: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of biotin (vitamin B7) consumed.\nstatic let dietaryCaffeine: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of caffeine consumed.\nstatic let dietaryCalcium: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of calcium consumed.\nstatic let dietaryCarbohydrates: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of carbohydrates consumed.\nstatic let dietaryChloride: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of chloride consumed.\nstatic let dietaryCholesterol: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of cholesterol consumed.\nstatic let dietaryChromium: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of chromium consumed.\nstatic let dietaryCopper: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of copper consumed.\nstatic let dietaryEnergyConsumed: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of energy consumed.\nstatic let dietaryFatMonounsaturated: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of monounsaturated fat consumed.\nstatic let dietaryFatPolyunsaturated: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of polyunsaturated fat consumed.\nstatic let dietaryFatSaturated: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of saturated fat consumed.\nstatic let dietaryFatTotal: HKQuantityTypeIdentifier\nA quantity sample type that measures the total amount of fat consumed.\nstatic let dietaryFiber: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of fiber consumed.\nstatic let dietaryFolate: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of folate (folic acid) consumed.\nstatic let dietaryIodine: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of iodine consumed.\nstatic let dietaryIron: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of iron consumed.\nstatic let dietaryMagnesium: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of magnesium consumed.\nstatic let dietaryManganese: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of manganese consumed.\nstatic let dietaryMolybdenum: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of molybdenum consumed.\nstatic let dietaryNiacin: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of niacin (vitamin B3) consumed.\nstatic let dietaryPantothenicAcid: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of pantothenic acid (vitamin B5) consumed.\nstatic let dietaryPhosphorus: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of phosphorus consumed.\nstatic let dietaryPotassium: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of potassium consumed.\nstatic let dietaryProtein: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of protein consumed.\nstatic let dietaryRiboflavin: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of riboflavin (vitamin B2) consumed.\nstatic let dietarySelenium: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of selenium consumed.\nstatic let dietarySodium: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of sodium consumed.\nstatic let dietarySugar: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of sugar consumed.\nstatic let dietaryVitaminA: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of vitamin A consumed.\nstatic let dietaryVitaminB12: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of cyanocobalamin (vitamin B12) consumed.\nstatic let dietaryVitaminB6: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of pyridoxine (vitamin B6) consumed.\nstatic let dietaryVitaminC: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of vitamin C consumed.\nstatic let dietaryVitaminD: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of vitamin D consumed.\nstatic let dietaryVitaminE: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of vitamin E consumed.\nstatic let dietaryVitaminK: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of vitamin K consumed.\nstatic let dietaryWater: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of water consumed.\nstatic let dietaryZinc: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of zinc consumed.\nRelated Documentation\nstruct HKQuantityTypeIdentifier\nThe identifiers that create quantity type objects.\nclass HKQuantitySample\nA sample that represents a quantity, including the value and the units.\nclass HKQuantity\nAn object that stores a value for a given unit."
  },
  {
    "title": "dietaryVitaminB12 | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquantitytypeidentifier/1615244-dietaryvitaminb12",
    "html": "Discussion\n\nThese samples use mass units (described in HKUnit) and measure cumulative values (described in HKQuantityAggregationStyle).\n\nSee Also\nNutrition\nstatic let dietaryBiotin: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of biotin (vitamin B7) consumed.\nstatic let dietaryCaffeine: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of caffeine consumed.\nstatic let dietaryCalcium: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of calcium consumed.\nstatic let dietaryCarbohydrates: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of carbohydrates consumed.\nstatic let dietaryChloride: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of chloride consumed.\nstatic let dietaryCholesterol: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of cholesterol consumed.\nstatic let dietaryChromium: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of chromium consumed.\nstatic let dietaryCopper: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of copper consumed.\nstatic let dietaryEnergyConsumed: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of energy consumed.\nstatic let dietaryFatMonounsaturated: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of monounsaturated fat consumed.\nstatic let dietaryFatPolyunsaturated: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of polyunsaturated fat consumed.\nstatic let dietaryFatSaturated: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of saturated fat consumed.\nstatic let dietaryFatTotal: HKQuantityTypeIdentifier\nA quantity sample type that measures the total amount of fat consumed.\nstatic let dietaryFiber: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of fiber consumed.\nstatic let dietaryFolate: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of folate (folic acid) consumed.\nstatic let dietaryIodine: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of iodine consumed.\nstatic let dietaryIron: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of iron consumed.\nstatic let dietaryMagnesium: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of magnesium consumed.\nstatic let dietaryManganese: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of manganese consumed.\nstatic let dietaryMolybdenum: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of molybdenum consumed.\nstatic let dietaryNiacin: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of niacin (vitamin B3) consumed.\nstatic let dietaryPantothenicAcid: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of pantothenic acid (vitamin B5) consumed.\nstatic let dietaryPhosphorus: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of phosphorus consumed.\nstatic let dietaryPotassium: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of potassium consumed.\nstatic let dietaryProtein: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of protein consumed.\nstatic let dietaryRiboflavin: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of riboflavin (vitamin B2) consumed.\nstatic let dietarySelenium: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of selenium consumed.\nstatic let dietarySodium: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of sodium consumed.\nstatic let dietarySugar: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of sugar consumed.\nstatic let dietaryThiamin: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of thiamin (vitamin B1) consumed.\nstatic let dietaryVitaminA: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of vitamin A consumed.\nstatic let dietaryVitaminB6: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of pyridoxine (vitamin B6) consumed.\nstatic let dietaryVitaminC: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of vitamin C consumed.\nstatic let dietaryVitaminD: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of vitamin D consumed.\nstatic let dietaryVitaminE: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of vitamin E consumed.\nstatic let dietaryVitaminK: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of vitamin K consumed.\nstatic let dietaryWater: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of water consumed.\nstatic let dietaryZinc: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of zinc consumed.\nRelated Documentation\nstruct HKQuantityTypeIdentifier\nThe identifiers that create quantity type objects.\nclass HKQuantitySample\nA sample that represents a quantity, including the value and the units.\nclass HKQuantity\nAn object that stores a value for a given unit."
  },
  {
    "title": "result(for:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkactivitysummaryquerydescriptor/3916251-result",
    "html": "Parameters\nhealthStore\n\nThe access point for HealthKit data.\n\nRelationships\nFrom Protocol\nHKAsyncQuery\nSee Also\nRunning queries\nfunc results(for: HKHealthStore) -> HKActivitySummaryQueryDescriptor.Results\nInitiates a long-running query that returns its results using an asynchronous sequence.\nstruct HKActivitySummaryQueryDescriptor.Results\nAn asynchronous sequence that emits updates from an activity summary query."
  },
  {
    "title": "init(predicate:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkactivitysummaryquerydescriptor/3916249-init",
    "html": "Parameters\npredicate\n\nA predicate that limits the results that the query returns. For a list of convenience methods for building predicates, see HKQuery.\n\nSee Also\nCreating query descriptors\ntypealias HKActivitySummaryQueryDescriptor.Output\nThe type of data that the active summary query returns.\ntypealias HKActivitySummaryQueryDescriptor.Sequence\nThe asynchronous sequence that the active summary query returns."
  },
  {
    "title": "init(_:dataHandler:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkelectrocardiogramquery/3573926-init",
    "html": "Parameters\necg\n\nThe electrocardiogram sample whose voltages you want to access.\n\ndataHandler\n\nA block that the query calls repeatedly to return the voltage data. The handler takes the following parameters:\n\nquery\n\nThe query that returned the results.\n\nresult\n\nAn enumeration that contains a result value.\n\nDiscussion\n\nWhen you run the query, it calls the data handler once for each voltage measurement, passing a HKElectrocardiogramQuery.Result.measurement(_:) instance that contains the voltage data. After it has sent all the voltage measurements, it calls the data handler one last time, passing HKElectrocardiogramQuery.Result.done. If an error occurs, it stops collecting voltage data and passes HKElectrocardiogramQuery.Result.error(_:) instead."
  },
  {
    "title": "HKElectrocardiogramQuery.Result.measurement(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkelectrocardiogramquery/result/measurement",
    "html": "See Also\nResults\ncase done\nThe query has finished returning voltage measurements.\ncase error(Error)\nAn error occurred while accessing the voltage measurements."
  },
  {
    "title": "HKElectrocardiogramQuery.Result | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkelectrocardiogramquery/result",
    "html": "Overview\n\nThe query returns a HKElectrocardiogramQuery.Result.measurement(_:) result for each voltage measurement, followed by a HKElectrocardiogramQuery.Result.done result.\n\nTopics\nResults\ncase measurement(HKElectrocardiogram.VoltageMeasurement)\nA single voltage measurement.\ncase done\nThe query has finished returning voltage measurements.\ncase error(Error)\nAn error occurred while accessing the voltage measurements."
  },
  {
    "title": "HKActivitySummaryQueryDescriptor.Output | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkactivitysummaryquerydescriptor/output",
    "html": "See Also\nCreating query descriptors\ntypealias HKActivitySummaryQueryDescriptor.Sequence\nThe asynchronous sequence that the active summary query returns.\ninit(predicate: NSPredicate?)\nInstantiates an activity summary query descriptor."
  },
  {
    "title": "Executing Activity Summary Queries | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkactivitysummaryquery/executing_activity_summary_queries",
    "html": "Overview\n\nUse activity summary queries to read HKActivitySummary objects from the HealthKit store. Apps can display summary information using an activity ring view (HKActivityRingView on iOS or WKInterfaceActivityRing on watchOS).\n\nCreate the Predicate\n\nStart by creating a predicate for summaries over the previous week.\n\nlet calendar = NSCalendar.current\nlet endDate = Date()\n \nguard let startDate = calendar.date(byAdding: .day, value: -7, to: endDate) else {\n    fatalError(\"*** Unable to create the start date ***\")\n}\n\n\nlet units: Set<Calendar.Component> = [.day, .month, .year, .era]\n\n\nvar startDateComponents = calendar.dateComponents(units, from: startDate)\nstartDateComponents.calendar = calendar\n\n\nvar endDateComponents = calendar.dateComponents(units, from: endDate)\nendDateComponents.calendar = calendar\n\n\n// Create the predicate for the query\nlet summariesWithinRange = HKQuery.predicate(forActivitySummariesBetweenStart: startDateComponents,\n                                             end: endDateComponents)\n\n\nCreate the Query\n\nThen create an activity summary query by calling the init(predicate:resultsHandler:) initializer.\n\nlet query = HKActivitySummaryQuery(predicate: summariesWithinRange) { (query, summariesOrNil, errorOrNil) -> Void in\n    \n    guard let summaries = summariesOrNil else {\n        // Handle any errors here.\n        return\n    }\n    \n    for summary in summaries {\n        // Process each summary here.\n    }\n    \n    // The results come back on an anonymous background queue.\n    // Dispatch to the main queue before modifying the UI.\n    \n    DispatchQueue.main.async {\n        // Update the UI here.\n    }\n}\n\n\nThe query returns an array of activity summary objects. The results handler should check for errors before processing the summaries. It should also dispatch updates to the user interface back to the main thread.\n\nRun the Query\n\nAfter instantiating the query, call the HealthKit store’s execute(_:) method.\n\nstore.execute(query)\n\n\nThis method runs the query on an anonymous background queue. When the query is complete, it executes the results handler on the same background queue (but not necessarily on the same thread).\n\nSee Also\nCreating activity summary queries\ninit(predicate: NSPredicate?, resultsHandler: (HKActivitySummaryQuery, [HKActivitySummary]?, Error?) -> Void)\nInitializes a new active summary query."
  },
  {
    "title": "HKActivitySummaryQueryDescriptor.Sequence | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkactivitysummaryquerydescriptor/sequence",
    "html": "See Also\nCreating query descriptors\ntypealias HKActivitySummaryQueryDescriptor.Output\nThe type of data that the active summary query returns.\ninit(predicate: NSPredicate?)\nInstantiates an activity summary query descriptor."
  },
  {
    "title": "init(predicate:resultsHandler:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkactivitysummaryquery/1615312-init",
    "html": "Parameters\npredicate\n\nA predicate that filters the activity summaries returned by the query. Pass nil to receive all activity samples.\n\nhandler\n\nA block that is called after the initial results have been gathered. This block takes the following parameters:\n\nquery\n\nA reference to the query calling this block.\n\nactivitySummaries\n\nAn array containing the summaries returned by this query, or nil if an error occurred.\n\nerror\n\nIf an error occurs, this parameter contains an object describing the error; otherwise, it is nil.\n\nReturn Value\n\nA newly initialized activity summary query.\n\nDiscussion\n\nAfter instantiating the query, call the HKHealthStore class’s execute(_:) method to run it. The queries run on an anonymous background queue. As soon as the query is complete, the results handler block is executed on the same background queue (but not necessarily the same thread). You typically dispatch these results to the main queue to update the user interface.\n\nActivity summary queries can also act as long-running queries. If you assign an update handler before you execute the query, the query continues to monitor the HealthKit store after gathering the initial results. The update handler is called on a background queue every time a matching sample is saved or updated in the HealthKit store. You can cancel this query by calling the store’s stop(_:) method.\n\nSee Also\nCreating activity summary queries\nExecuting Activity Summary Queries\nCreate and run activity summary queries."
  },
  {
    "title": "results(for:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkasyncsequencequery/3916313-results",
    "html": "Required\n\nParameters\nhealthStore\n\nThe access point for HealthKit data.\n\nDiscussion\n\nThe adopting type’s Sequence associated type specifies the type of AsyncSequence that this method returns. For example, the HKAnchoredObjectQueryDescriptor returns an HKAnchoredObjectQueryDescriptor.Sequence, where each element in this sequence is an HKAnchoredObjectQueryDescriptor.Result value.\n\nlet anchorDescriptor =\nHKAnchoredObjectQueryDescriptor(\n    predicates: [.workout()],\n    anchor: anchor)\n\n\nlet updateQueue = anchorDescriptor.results(for: store)\n\n\nupdateTask = Task {\n    for try await results in updateQueue {\n        // Process results here.\n    }\n}\n\n\nQuery descriptors for series data, like HKQuantitySeriesSampleQueryDescriptor, use an asynchronous sequence to return the high-frequency samples from a condensed sample, for example accessing individual heart rate samples from data recorded during a workout. These sequences have a finite size. When your app iterates over the sequence’s contents, the iteration automatically terminates after you receive all the data.\n\nOther query descriptors, like HKAnchoredObjectQueryDescriptor, use this method to set up long-running queries that monitor the HealthKit store in the background. These queries continue to send updates using the asynchronous sequence. In these cases, code that iterates over the sequence continues until you cancel the sequence.\n\nSee Also\nRunning Queries\nassociatedtype Sequence\nThe data type that the query returns.\n\nRequired"
  },
  {
    "title": "sortDescriptors | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hksamplequerydescriptor/3916547-sortdescriptors",
    "html": "Discussion\n\nThe system applies the sort descriptors in order. The later descriptors sort any items that the earlier sort descriptors considered equal. If you don’t need the results in a specific order, pass an empty array.\n\nSee Also\nAccessing Query Properties\nvar limit: Int?\nThe maximum number of samples that the query returns.\nvar predicates: [HKSamplePredicate<Sample>]\nAn array of sample predicates that define the type of data that the query returns."
  },
  {
    "title": "meterUnit(with:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkunit/1615489-meterunit",
    "html": "Parameters\nprefix\n\nA valid metric prefix value. For the complete list of prefix values, see HKMetricPrefix.\n\nReturn Value\n\nA HealthKit unit for measuring length based on meters and the provided prefix.\n\nDiscussion\n\nThis method is used to create prefixed versions of meters. Common uses include creating kilometer and centimeter units, as shown below.\n\nlet km = HKUnit.meterUnitWithMetricPrefix(.Kilo)\nlet cm = HKUnit.meterUnitWithMetricPrefix(.Centi)\n\nSee Also\nConstructing length units\nclass func meter() -> Self\nReturns a HealthKit unit for measuring length in meters.\nclass func inch() -> Self\nReturns a HealthKit unit for measuring length in inches.\nclass func foot() -> Self\nReturns a HealthKit unit for measuring length in feet.\nclass func yard() -> Self\nReturns a HealthKit unit for measuring length in yards.\nclass func mile() -> Self\nReturns a HealthKit unit for measuring length in miles."
  },
  {
    "title": "dietaryVitaminE | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquantitytypeidentifier/1615330-dietaryvitamine",
    "html": "Discussion\n\nThese samples use mass units (described in HKUnit) and measure cumulative values (described in HKQuantityAggregationStyle).\n\nSee Also\nNutrition\nstatic let dietaryBiotin: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of biotin (vitamin B7) consumed.\nstatic let dietaryCaffeine: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of caffeine consumed.\nstatic let dietaryCalcium: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of calcium consumed.\nstatic let dietaryCarbohydrates: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of carbohydrates consumed.\nstatic let dietaryChloride: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of chloride consumed.\nstatic let dietaryCholesterol: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of cholesterol consumed.\nstatic let dietaryChromium: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of chromium consumed.\nstatic let dietaryCopper: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of copper consumed.\nstatic let dietaryEnergyConsumed: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of energy consumed.\nstatic let dietaryFatMonounsaturated: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of monounsaturated fat consumed.\nstatic let dietaryFatPolyunsaturated: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of polyunsaturated fat consumed.\nstatic let dietaryFatSaturated: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of saturated fat consumed.\nstatic let dietaryFatTotal: HKQuantityTypeIdentifier\nA quantity sample type that measures the total amount of fat consumed.\nstatic let dietaryFiber: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of fiber consumed.\nstatic let dietaryFolate: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of folate (folic acid) consumed.\nstatic let dietaryIodine: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of iodine consumed.\nstatic let dietaryIron: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of iron consumed.\nstatic let dietaryMagnesium: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of magnesium consumed.\nstatic let dietaryManganese: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of manganese consumed.\nstatic let dietaryMolybdenum: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of molybdenum consumed.\nstatic let dietaryNiacin: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of niacin (vitamin B3) consumed.\nstatic let dietaryPantothenicAcid: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of pantothenic acid (vitamin B5) consumed.\nstatic let dietaryPhosphorus: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of phosphorus consumed.\nstatic let dietaryPotassium: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of potassium consumed.\nstatic let dietaryProtein: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of protein consumed.\nstatic let dietaryRiboflavin: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of riboflavin (vitamin B2) consumed.\nstatic let dietarySelenium: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of selenium consumed.\nstatic let dietarySodium: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of sodium consumed.\nstatic let dietarySugar: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of sugar consumed.\nstatic let dietaryThiamin: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of thiamin (vitamin B1) consumed.\nstatic let dietaryVitaminA: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of vitamin A consumed.\nstatic let dietaryVitaminB12: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of cyanocobalamin (vitamin B12) consumed.\nstatic let dietaryVitaminB6: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of pyridoxine (vitamin B6) consumed.\nstatic let dietaryVitaminC: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of vitamin C consumed.\nstatic let dietaryVitaminD: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of vitamin D consumed.\nstatic let dietaryVitaminK: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of vitamin K consumed.\nstatic let dietaryWater: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of water consumed.\nstatic let dietaryZinc: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of zinc consumed.\nRelated Documentation\nstruct HKQuantityTypeIdentifier\nThe identifiers that create quantity type objects.\nclass HKQuantitySample\nA sample that represents a quantity, including the value and the units.\nclass HKQuantity\nAn object that stores a value for a given unit."
  },
  {
    "title": "smallCalorie() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkunit/2902232-smallcalorie",
    "html": "Discussion\n\nThis unit represents the gram calorie, or the amount of energy needed to raise 1 gram of water by 1 degree Celsius (1 cal = 4.1840 J).\n\nThis unit is occasionally used in chemistry and other sciences, but it should not be confused with the kilocalorie, or large calorie, which is used for measuring food energy in many regions.\n\nSee Also\nConstructing energy units\nclass func joule() -> Self\nReturns a HealthKit unit for measuring energy in joules.\nclass func jouleUnit(with: HKMetricPrefix) -> Self\nReturns a HealthKit unit for measuring energy, using joule units with the provided prefix.\nclass func kilocalorie() -> Self\nReturns a HealthKit unit for measuring energy in kilocalories.\nclass func largeCalorie() -> Self\nReturns a HealthKit unit for measuring energy in large calories (Cal).\nclass func calorie() -> Self\nReturns a HealthKit unit for measuring energy in calories."
  },
  {
    "title": "dietaryVitaminB6 | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquantitytypeidentifier/1615239-dietaryvitaminb6",
    "html": "Discussion\n\nThese samples use mass units (described in HKUnit) and measure cumulative values (described in HKQuantityAggregationStyle).\n\nSee Also\nNutrition\nstatic let dietaryBiotin: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of biotin (vitamin B7) consumed.\nstatic let dietaryCaffeine: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of caffeine consumed.\nstatic let dietaryCalcium: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of calcium consumed.\nstatic let dietaryCarbohydrates: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of carbohydrates consumed.\nstatic let dietaryChloride: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of chloride consumed.\nstatic let dietaryCholesterol: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of cholesterol consumed.\nstatic let dietaryChromium: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of chromium consumed.\nstatic let dietaryCopper: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of copper consumed.\nstatic let dietaryEnergyConsumed: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of energy consumed.\nstatic let dietaryFatMonounsaturated: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of monounsaturated fat consumed.\nstatic let dietaryFatPolyunsaturated: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of polyunsaturated fat consumed.\nstatic let dietaryFatSaturated: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of saturated fat consumed.\nstatic let dietaryFatTotal: HKQuantityTypeIdentifier\nA quantity sample type that measures the total amount of fat consumed.\nstatic let dietaryFiber: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of fiber consumed.\nstatic let dietaryFolate: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of folate (folic acid) consumed.\nstatic let dietaryIodine: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of iodine consumed.\nstatic let dietaryIron: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of iron consumed.\nstatic let dietaryMagnesium: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of magnesium consumed.\nstatic let dietaryManganese: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of manganese consumed.\nstatic let dietaryMolybdenum: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of molybdenum consumed.\nstatic let dietaryNiacin: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of niacin (vitamin B3) consumed.\nstatic let dietaryPantothenicAcid: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of pantothenic acid (vitamin B5) consumed.\nstatic let dietaryPhosphorus: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of phosphorus consumed.\nstatic let dietaryPotassium: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of potassium consumed.\nstatic let dietaryProtein: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of protein consumed.\nstatic let dietaryRiboflavin: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of riboflavin (vitamin B2) consumed.\nstatic let dietarySelenium: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of selenium consumed.\nstatic let dietarySodium: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of sodium consumed.\nstatic let dietarySugar: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of sugar consumed.\nstatic let dietaryThiamin: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of thiamin (vitamin B1) consumed.\nstatic let dietaryVitaminA: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of vitamin A consumed.\nstatic let dietaryVitaminB12: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of cyanocobalamin (vitamin B12) consumed.\nstatic let dietaryVitaminC: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of vitamin C consumed.\nstatic let dietaryVitaminD: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of vitamin D consumed.\nstatic let dietaryVitaminE: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of vitamin E consumed.\nstatic let dietaryVitaminK: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of vitamin K consumed.\nstatic let dietaryWater: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of water consumed.\nstatic let dietaryZinc: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of zinc consumed.\nRelated Documentation\nstruct HKQuantityTypeIdentifier\nThe identifiers that create quantity type objects.\nclass HKQuantitySample\nA sample that represents a quantity, including the value and the units.\nclass HKQuantity\nAn object that stores a value for a given unit."
  },
  {
    "title": "dietaryBiotin | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquantitytypeidentifier/1615782-dietarybiotin",
    "html": "Discussion\n\nThese samples use mass units (described in HKUnit) and measure cumulative values (described in HKQuantityAggregationStyle).\n\nSee Also\nNutrition\nstatic let dietaryCaffeine: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of caffeine consumed.\nstatic let dietaryCalcium: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of calcium consumed.\nstatic let dietaryCarbohydrates: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of carbohydrates consumed.\nstatic let dietaryChloride: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of chloride consumed.\nstatic let dietaryCholesterol: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of cholesterol consumed.\nstatic let dietaryChromium: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of chromium consumed.\nstatic let dietaryCopper: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of copper consumed.\nstatic let dietaryEnergyConsumed: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of energy consumed.\nstatic let dietaryFatMonounsaturated: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of monounsaturated fat consumed.\nstatic let dietaryFatPolyunsaturated: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of polyunsaturated fat consumed.\nstatic let dietaryFatSaturated: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of saturated fat consumed.\nstatic let dietaryFatTotal: HKQuantityTypeIdentifier\nA quantity sample type that measures the total amount of fat consumed.\nstatic let dietaryFiber: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of fiber consumed.\nstatic let dietaryFolate: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of folate (folic acid) consumed.\nstatic let dietaryIodine: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of iodine consumed.\nstatic let dietaryIron: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of iron consumed.\nstatic let dietaryMagnesium: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of magnesium consumed.\nstatic let dietaryManganese: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of manganese consumed.\nstatic let dietaryMolybdenum: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of molybdenum consumed.\nstatic let dietaryNiacin: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of niacin (vitamin B3) consumed.\nstatic let dietaryPantothenicAcid: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of pantothenic acid (vitamin B5) consumed.\nstatic let dietaryPhosphorus: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of phosphorus consumed.\nstatic let dietaryPotassium: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of potassium consumed.\nstatic let dietaryProtein: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of protein consumed.\nstatic let dietaryRiboflavin: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of riboflavin (vitamin B2) consumed.\nstatic let dietarySelenium: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of selenium consumed.\nstatic let dietarySodium: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of sodium consumed.\nstatic let dietarySugar: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of sugar consumed.\nstatic let dietaryThiamin: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of thiamin (vitamin B1) consumed.\nstatic let dietaryVitaminA: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of vitamin A consumed.\nstatic let dietaryVitaminB12: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of cyanocobalamin (vitamin B12) consumed.\nstatic let dietaryVitaminB6: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of pyridoxine (vitamin B6) consumed.\nstatic let dietaryVitaminC: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of vitamin C consumed.\nstatic let dietaryVitaminD: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of vitamin D consumed.\nstatic let dietaryVitaminE: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of vitamin E consumed.\nstatic let dietaryVitaminK: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of vitamin K consumed.\nstatic let dietaryWater: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of water consumed.\nstatic let dietaryZinc: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of zinc consumed.\nRelated Documentation\nstruct HKQuantityTypeIdentifier\nThe identifiers that create quantity type objects.\nclass HKQuantitySample\nA sample that represents a quantity, including the value and the units.\nclass HKQuantity\nAn object that stores a value for a given unit."
  },
  {
    "title": "dietaryVitaminC | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquantitytypeidentifier/1615069-dietaryvitaminc",
    "html": "Discussion\n\nThese samples use mass units (described in HKUnit) and measure cumulative values (described in HKQuantityAggregationStyle).\n\nSee Also\nNutrition\nstatic let dietaryBiotin: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of biotin (vitamin B7) consumed.\nstatic let dietaryCaffeine: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of caffeine consumed.\nstatic let dietaryCalcium: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of calcium consumed.\nstatic let dietaryCarbohydrates: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of carbohydrates consumed.\nstatic let dietaryChloride: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of chloride consumed.\nstatic let dietaryCholesterol: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of cholesterol consumed.\nstatic let dietaryChromium: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of chromium consumed.\nstatic let dietaryCopper: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of copper consumed.\nstatic let dietaryEnergyConsumed: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of energy consumed.\nstatic let dietaryFatMonounsaturated: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of monounsaturated fat consumed.\nstatic let dietaryFatPolyunsaturated: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of polyunsaturated fat consumed.\nstatic let dietaryFatSaturated: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of saturated fat consumed.\nstatic let dietaryFatTotal: HKQuantityTypeIdentifier\nA quantity sample type that measures the total amount of fat consumed.\nstatic let dietaryFiber: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of fiber consumed.\nstatic let dietaryFolate: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of folate (folic acid) consumed.\nstatic let dietaryIodine: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of iodine consumed.\nstatic let dietaryIron: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of iron consumed.\nstatic let dietaryMagnesium: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of magnesium consumed.\nstatic let dietaryManganese: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of manganese consumed.\nstatic let dietaryMolybdenum: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of molybdenum consumed.\nstatic let dietaryNiacin: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of niacin (vitamin B3) consumed.\nstatic let dietaryPantothenicAcid: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of pantothenic acid (vitamin B5) consumed.\nstatic let dietaryPhosphorus: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of phosphorus consumed.\nstatic let dietaryPotassium: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of potassium consumed.\nstatic let dietaryProtein: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of protein consumed.\nstatic let dietaryRiboflavin: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of riboflavin (vitamin B2) consumed.\nstatic let dietarySelenium: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of selenium consumed.\nstatic let dietarySodium: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of sodium consumed.\nstatic let dietarySugar: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of sugar consumed.\nstatic let dietaryThiamin: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of thiamin (vitamin B1) consumed.\nstatic let dietaryVitaminA: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of vitamin A consumed.\nstatic let dietaryVitaminB12: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of cyanocobalamin (vitamin B12) consumed.\nstatic let dietaryVitaminB6: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of pyridoxine (vitamin B6) consumed.\nstatic let dietaryVitaminD: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of vitamin D consumed.\nstatic let dietaryVitaminE: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of vitamin E consumed.\nstatic let dietaryVitaminK: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of vitamin K consumed.\nstatic let dietaryWater: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of water consumed.\nstatic let dietaryZinc: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of zinc consumed.\nRelated Documentation\nstruct HKQuantityTypeIdentifier\nThe identifiers that create quantity type objects.\nclass HKQuantitySample\nA sample that represents a quantity, including the value and the units.\nclass HKQuantity\nAn object that stores a value for a given unit."
  },
  {
    "title": "dietaryCaffeine | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquantitytypeidentifier/1615498-dietarycaffeine",
    "html": "Discussion\n\nThese samples use mass units (described in HKUnit) and measure cumulative values (described in HKQuantityAggregationStyle).\n\nSee Also\nNutrition\nstatic let dietaryBiotin: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of biotin (vitamin B7) consumed.\nstatic let dietaryCalcium: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of calcium consumed.\nstatic let dietaryCarbohydrates: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of carbohydrates consumed.\nstatic let dietaryChloride: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of chloride consumed.\nstatic let dietaryCholesterol: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of cholesterol consumed.\nstatic let dietaryChromium: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of chromium consumed.\nstatic let dietaryCopper: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of copper consumed.\nstatic let dietaryEnergyConsumed: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of energy consumed.\nstatic let dietaryFatMonounsaturated: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of monounsaturated fat consumed.\nstatic let dietaryFatPolyunsaturated: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of polyunsaturated fat consumed.\nstatic let dietaryFatSaturated: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of saturated fat consumed.\nstatic let dietaryFatTotal: HKQuantityTypeIdentifier\nA quantity sample type that measures the total amount of fat consumed.\nstatic let dietaryFiber: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of fiber consumed.\nstatic let dietaryFolate: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of folate (folic acid) consumed.\nstatic let dietaryIodine: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of iodine consumed.\nstatic let dietaryIron: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of iron consumed.\nstatic let dietaryMagnesium: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of magnesium consumed.\nstatic let dietaryManganese: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of manganese consumed.\nstatic let dietaryMolybdenum: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of molybdenum consumed.\nstatic let dietaryNiacin: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of niacin (vitamin B3) consumed.\nstatic let dietaryPantothenicAcid: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of pantothenic acid (vitamin B5) consumed.\nstatic let dietaryPhosphorus: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of phosphorus consumed.\nstatic let dietaryPotassium: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of potassium consumed.\nstatic let dietaryProtein: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of protein consumed.\nstatic let dietaryRiboflavin: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of riboflavin (vitamin B2) consumed.\nstatic let dietarySelenium: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of selenium consumed.\nstatic let dietarySodium: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of sodium consumed.\nstatic let dietarySugar: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of sugar consumed.\nstatic let dietaryThiamin: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of thiamin (vitamin B1) consumed.\nstatic let dietaryVitaminA: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of vitamin A consumed.\nstatic let dietaryVitaminB12: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of cyanocobalamin (vitamin B12) consumed.\nstatic let dietaryVitaminB6: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of pyridoxine (vitamin B6) consumed.\nstatic let dietaryVitaminC: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of vitamin C consumed.\nstatic let dietaryVitaminD: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of vitamin D consumed.\nstatic let dietaryVitaminE: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of vitamin E consumed.\nstatic let dietaryVitaminK: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of vitamin K consumed.\nstatic let dietaryWater: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of water consumed.\nstatic let dietaryZinc: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of zinc consumed.\nRelated Documentation\nstruct HKQuantityTypeIdentifier\nThe identifiers that create quantity type objects.\nclass HKQuantitySample\nA sample that represents a quantity, including the value and the units.\nclass HKQuantity\nAn object that stores a value for a given unit."
  },
  {
    "title": "HKUnitMolarMassBloodGlucose | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkunitmolarmassbloodglucose",
    "html": "See Also\nConstructing mass units\nclass func gram() -> Self\nReturns a HealthKit unit for measuring mass in grams.\nclass func gramUnit(with: HKMetricPrefix) -> Self\nReturns a HealthKit unit for measuring mass, using gram units with the provided prefix.\nclass func ounce() -> Self\nReturns a HealthKit unit for measuring mass in ounces.\nclass func pound() -> Self\nReturns a HealthKit unit for measuring mass in pounds.\nclass func stone() -> Self\nReturns a HealthKit unit for measuring mass in stones.\nclass func moleUnit(withMolarMass: Double) -> Self\nReturns a HealthKit unit for measuring mass in moles for a given molar mass.\nclass func moleUnit(with: HKMetricPrefix, molarMass: Double) -> Self\nReturns a HealthKit unit for measuring mass in moles, with the given prefix and molar mass."
  },
  {
    "title": "dietaryVitaminD | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquantitytypeidentifier/1615034-dietaryvitamind",
    "html": "Discussion\n\nThese samples use mass units (described in HKUnit) and measure cumulative values (described in HKQuantityAggregationStyle).\n\nSee Also\nNutrition\nstatic let dietaryBiotin: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of biotin (vitamin B7) consumed.\nstatic let dietaryCaffeine: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of caffeine consumed.\nstatic let dietaryCalcium: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of calcium consumed.\nstatic let dietaryCarbohydrates: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of carbohydrates consumed.\nstatic let dietaryChloride: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of chloride consumed.\nstatic let dietaryCholesterol: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of cholesterol consumed.\nstatic let dietaryChromium: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of chromium consumed.\nstatic let dietaryCopper: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of copper consumed.\nstatic let dietaryEnergyConsumed: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of energy consumed.\nstatic let dietaryFatMonounsaturated: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of monounsaturated fat consumed.\nstatic let dietaryFatPolyunsaturated: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of polyunsaturated fat consumed.\nstatic let dietaryFatSaturated: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of saturated fat consumed.\nstatic let dietaryFatTotal: HKQuantityTypeIdentifier\nA quantity sample type that measures the total amount of fat consumed.\nstatic let dietaryFiber: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of fiber consumed.\nstatic let dietaryFolate: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of folate (folic acid) consumed.\nstatic let dietaryIodine: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of iodine consumed.\nstatic let dietaryIron: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of iron consumed.\nstatic let dietaryMagnesium: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of magnesium consumed.\nstatic let dietaryManganese: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of manganese consumed.\nstatic let dietaryMolybdenum: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of molybdenum consumed.\nstatic let dietaryNiacin: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of niacin (vitamin B3) consumed.\nstatic let dietaryPantothenicAcid: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of pantothenic acid (vitamin B5) consumed.\nstatic let dietaryPhosphorus: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of phosphorus consumed.\nstatic let dietaryPotassium: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of potassium consumed.\nstatic let dietaryProtein: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of protein consumed.\nstatic let dietaryRiboflavin: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of riboflavin (vitamin B2) consumed.\nstatic let dietarySelenium: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of selenium consumed.\nstatic let dietarySodium: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of sodium consumed.\nstatic let dietarySugar: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of sugar consumed.\nstatic let dietaryThiamin: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of thiamin (vitamin B1) consumed.\nstatic let dietaryVitaminA: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of vitamin A consumed.\nstatic let dietaryVitaminB12: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of cyanocobalamin (vitamin B12) consumed.\nstatic let dietaryVitaminB6: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of pyridoxine (vitamin B6) consumed.\nstatic let dietaryVitaminC: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of vitamin C consumed.\nstatic let dietaryVitaminE: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of vitamin E consumed.\nstatic let dietaryVitaminK: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of vitamin K consumed.\nstatic let dietaryWater: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of water consumed.\nstatic let dietaryZinc: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of zinc consumed.\nRelated Documentation\nstruct HKQuantityTypeIdentifier\nThe identifiers that create quantity type objects.\nclass HKQuantitySample\nA sample that represents a quantity, including the value and the units.\nclass HKQuantity\nAn object that stores a value for a given unit."
  },
  {
    "title": "dietaryCarbohydrates | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquantitytypeidentifier/1615699-dietarycarbohydrates",
    "html": "Discussion\n\nThese samples use mass units (described in HKUnit) and measure cumulative values (described in HKQuantityAggregationStyle).\n\nSee Also\nNutrition\nstatic let dietaryBiotin: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of biotin (vitamin B7) consumed.\nstatic let dietaryCaffeine: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of caffeine consumed.\nstatic let dietaryCalcium: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of calcium consumed.\nstatic let dietaryChloride: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of chloride consumed.\nstatic let dietaryCholesterol: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of cholesterol consumed.\nstatic let dietaryChromium: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of chromium consumed.\nstatic let dietaryCopper: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of copper consumed.\nstatic let dietaryEnergyConsumed: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of energy consumed.\nstatic let dietaryFatMonounsaturated: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of monounsaturated fat consumed.\nstatic let dietaryFatPolyunsaturated: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of polyunsaturated fat consumed.\nstatic let dietaryFatSaturated: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of saturated fat consumed.\nstatic let dietaryFatTotal: HKQuantityTypeIdentifier\nA quantity sample type that measures the total amount of fat consumed.\nstatic let dietaryFiber: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of fiber consumed.\nstatic let dietaryFolate: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of folate (folic acid) consumed.\nstatic let dietaryIodine: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of iodine consumed.\nstatic let dietaryIron: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of iron consumed.\nstatic let dietaryMagnesium: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of magnesium consumed.\nstatic let dietaryManganese: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of manganese consumed.\nstatic let dietaryMolybdenum: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of molybdenum consumed.\nstatic let dietaryNiacin: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of niacin (vitamin B3) consumed.\nstatic let dietaryPantothenicAcid: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of pantothenic acid (vitamin B5) consumed.\nstatic let dietaryPhosphorus: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of phosphorus consumed.\nstatic let dietaryPotassium: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of potassium consumed.\nstatic let dietaryProtein: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of protein consumed.\nstatic let dietaryRiboflavin: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of riboflavin (vitamin B2) consumed.\nstatic let dietarySelenium: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of selenium consumed.\nstatic let dietarySodium: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of sodium consumed.\nstatic let dietarySugar: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of sugar consumed.\nstatic let dietaryThiamin: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of thiamin (vitamin B1) consumed.\nstatic let dietaryVitaminA: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of vitamin A consumed.\nstatic let dietaryVitaminB12: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of cyanocobalamin (vitamin B12) consumed.\nstatic let dietaryVitaminB6: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of pyridoxine (vitamin B6) consumed.\nstatic let dietaryVitaminC: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of vitamin C consumed.\nstatic let dietaryVitaminD: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of vitamin D consumed.\nstatic let dietaryVitaminE: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of vitamin E consumed.\nstatic let dietaryVitaminK: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of vitamin K consumed.\nstatic let dietaryWater: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of water consumed.\nstatic let dietaryZinc: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of zinc consumed.\nRelated Documentation\nstruct HKQuantityTypeIdentifier\nThe identifiers that create quantity type objects.\nclass HKQuantitySample\nA sample that represents a quantity, including the value and the units.\nclass HKQuantity\nAn object that stores a value for a given unit."
  },
  {
    "title": "dietaryCholesterol | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquantitytypeidentifier/1615427-dietarycholesterol",
    "html": "Discussion\n\nThese samples use mass units (described in HKUnit) and measure cumulative values (described in HKQuantityAggregationStyle).\n\nSee Also\nNutrition\nstatic let dietaryBiotin: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of biotin (vitamin B7) consumed.\nstatic let dietaryCaffeine: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of caffeine consumed.\nstatic let dietaryCalcium: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of calcium consumed.\nstatic let dietaryCarbohydrates: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of carbohydrates consumed.\nstatic let dietaryChloride: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of chloride consumed.\nstatic let dietaryChromium: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of chromium consumed.\nstatic let dietaryCopper: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of copper consumed.\nstatic let dietaryEnergyConsumed: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of energy consumed.\nstatic let dietaryFatMonounsaturated: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of monounsaturated fat consumed.\nstatic let dietaryFatPolyunsaturated: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of polyunsaturated fat consumed.\nstatic let dietaryFatSaturated: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of saturated fat consumed.\nstatic let dietaryFatTotal: HKQuantityTypeIdentifier\nA quantity sample type that measures the total amount of fat consumed.\nstatic let dietaryFiber: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of fiber consumed.\nstatic let dietaryFolate: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of folate (folic acid) consumed.\nstatic let dietaryIodine: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of iodine consumed.\nstatic let dietaryIron: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of iron consumed.\nstatic let dietaryMagnesium: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of magnesium consumed.\nstatic let dietaryManganese: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of manganese consumed.\nstatic let dietaryMolybdenum: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of molybdenum consumed.\nstatic let dietaryNiacin: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of niacin (vitamin B3) consumed.\nstatic let dietaryPantothenicAcid: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of pantothenic acid (vitamin B5) consumed.\nstatic let dietaryPhosphorus: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of phosphorus consumed.\nstatic let dietaryPotassium: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of potassium consumed.\nstatic let dietaryProtein: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of protein consumed.\nstatic let dietaryRiboflavin: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of riboflavin (vitamin B2) consumed.\nstatic let dietarySelenium: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of selenium consumed.\nstatic let dietarySodium: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of sodium consumed.\nstatic let dietarySugar: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of sugar consumed.\nstatic let dietaryThiamin: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of thiamin (vitamin B1) consumed.\nstatic let dietaryVitaminA: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of vitamin A consumed.\nstatic let dietaryVitaminB12: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of cyanocobalamin (vitamin B12) consumed.\nstatic let dietaryVitaminB6: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of pyridoxine (vitamin B6) consumed.\nstatic let dietaryVitaminC: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of vitamin C consumed.\nstatic let dietaryVitaminD: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of vitamin D consumed.\nstatic let dietaryVitaminE: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of vitamin E consumed.\nstatic let dietaryVitaminK: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of vitamin K consumed.\nstatic let dietaryWater: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of water consumed.\nstatic let dietaryZinc: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of zinc consumed.\nRelated Documentation\nstruct HKQuantityTypeIdentifier\nThe identifiers that create quantity type objects.\nclass HKQuantitySample\nA sample that represents a quantity, including the value and the units.\nclass HKQuantity\nAn object that stores a value for a given unit."
  },
  {
    "title": "dietaryFatSaturated | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquantitytypeidentifier/1615685-dietaryfatsaturated",
    "html": "Discussion\n\nThese samples use mass units (described in HKUnit) and measure cumulative values (described in HKQuantityAggregationStyle).\n\nSee Also\nNutrition\nstatic let dietaryBiotin: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of biotin (vitamin B7) consumed.\nstatic let dietaryCaffeine: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of caffeine consumed.\nstatic let dietaryCalcium: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of calcium consumed.\nstatic let dietaryCarbohydrates: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of carbohydrates consumed.\nstatic let dietaryChloride: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of chloride consumed.\nstatic let dietaryCholesterol: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of cholesterol consumed.\nstatic let dietaryChromium: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of chromium consumed.\nstatic let dietaryCopper: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of copper consumed.\nstatic let dietaryEnergyConsumed: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of energy consumed.\nstatic let dietaryFatMonounsaturated: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of monounsaturated fat consumed.\nstatic let dietaryFatPolyunsaturated: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of polyunsaturated fat consumed.\nstatic let dietaryFatTotal: HKQuantityTypeIdentifier\nA quantity sample type that measures the total amount of fat consumed.\nstatic let dietaryFiber: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of fiber consumed.\nstatic let dietaryFolate: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of folate (folic acid) consumed.\nstatic let dietaryIodine: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of iodine consumed.\nstatic let dietaryIron: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of iron consumed.\nstatic let dietaryMagnesium: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of magnesium consumed.\nstatic let dietaryManganese: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of manganese consumed.\nstatic let dietaryMolybdenum: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of molybdenum consumed.\nstatic let dietaryNiacin: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of niacin (vitamin B3) consumed.\nstatic let dietaryPantothenicAcid: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of pantothenic acid (vitamin B5) consumed.\nstatic let dietaryPhosphorus: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of phosphorus consumed.\nstatic let dietaryPotassium: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of potassium consumed.\nstatic let dietaryProtein: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of protein consumed.\nstatic let dietaryRiboflavin: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of riboflavin (vitamin B2) consumed.\nstatic let dietarySelenium: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of selenium consumed.\nstatic let dietarySodium: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of sodium consumed.\nstatic let dietarySugar: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of sugar consumed.\nstatic let dietaryThiamin: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of thiamin (vitamin B1) consumed.\nstatic let dietaryVitaminA: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of vitamin A consumed.\nstatic let dietaryVitaminB12: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of cyanocobalamin (vitamin B12) consumed.\nstatic let dietaryVitaminB6: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of pyridoxine (vitamin B6) consumed.\nstatic let dietaryVitaminC: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of vitamin C consumed.\nstatic let dietaryVitaminD: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of vitamin D consumed.\nstatic let dietaryVitaminE: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of vitamin E consumed.\nstatic let dietaryVitaminK: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of vitamin K consumed.\nstatic let dietaryWater: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of water consumed.\nstatic let dietaryZinc: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of zinc consumed.\nRelated Documentation\nstruct HKQuantityTypeIdentifier\nThe identifiers that create quantity type objects.\nclass HKQuantitySample\nA sample that represents a quantity, including the value and the units.\nclass HKQuantity\nAn object that stores a value for a given unit."
  },
  {
    "title": "dietaryFatMonounsaturated | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquantitytypeidentifier/1615738-dietaryfatmonounsaturated",
    "html": "Discussion\n\nThese samples use mass units (described in HKUnit) and measure cumulative values (described in HKQuantityAggregationStyle).\n\nSee Also\nNutrition\nstatic let dietaryBiotin: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of biotin (vitamin B7) consumed.\nstatic let dietaryCaffeine: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of caffeine consumed.\nstatic let dietaryCalcium: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of calcium consumed.\nstatic let dietaryCarbohydrates: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of carbohydrates consumed.\nstatic let dietaryChloride: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of chloride consumed.\nstatic let dietaryCholesterol: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of cholesterol consumed.\nstatic let dietaryChromium: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of chromium consumed.\nstatic let dietaryCopper: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of copper consumed.\nstatic let dietaryEnergyConsumed: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of energy consumed.\nstatic let dietaryFatPolyunsaturated: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of polyunsaturated fat consumed.\nstatic let dietaryFatSaturated: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of saturated fat consumed.\nstatic let dietaryFatTotal: HKQuantityTypeIdentifier\nA quantity sample type that measures the total amount of fat consumed.\nstatic let dietaryFiber: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of fiber consumed.\nstatic let dietaryFolate: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of folate (folic acid) consumed.\nstatic let dietaryIodine: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of iodine consumed.\nstatic let dietaryIron: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of iron consumed.\nstatic let dietaryMagnesium: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of magnesium consumed.\nstatic let dietaryManganese: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of manganese consumed.\nstatic let dietaryMolybdenum: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of molybdenum consumed.\nstatic let dietaryNiacin: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of niacin (vitamin B3) consumed.\nstatic let dietaryPantothenicAcid: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of pantothenic acid (vitamin B5) consumed.\nstatic let dietaryPhosphorus: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of phosphorus consumed.\nstatic let dietaryPotassium: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of potassium consumed.\nstatic let dietaryProtein: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of protein consumed.\nstatic let dietaryRiboflavin: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of riboflavin (vitamin B2) consumed.\nstatic let dietarySelenium: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of selenium consumed.\nstatic let dietarySodium: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of sodium consumed.\nstatic let dietarySugar: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of sugar consumed.\nstatic let dietaryThiamin: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of thiamin (vitamin B1) consumed.\nstatic let dietaryVitaminA: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of vitamin A consumed.\nstatic let dietaryVitaminB12: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of cyanocobalamin (vitamin B12) consumed.\nstatic let dietaryVitaminB6: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of pyridoxine (vitamin B6) consumed.\nstatic let dietaryVitaminC: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of vitamin C consumed.\nstatic let dietaryVitaminD: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of vitamin D consumed.\nstatic let dietaryVitaminE: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of vitamin E consumed.\nstatic let dietaryVitaminK: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of vitamin K consumed.\nstatic let dietaryWater: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of water consumed.\nstatic let dietaryZinc: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of zinc consumed.\nRelated Documentation\nstruct HKQuantityTypeIdentifier\nThe identifiers that create quantity type objects.\nclass HKQuantitySample\nA sample that represents a quantity, including the value and the units.\nclass HKQuantity\nAn object that stores a value for a given unit."
  },
  {
    "title": "dietaryFatPolyunsaturated | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquantitytypeidentifier/1615098-dietaryfatpolyunsaturated",
    "html": "Discussion\n\nThese samples use mass units (described in HKUnit) and measure cumulative values (described in HKQuantityAggregationStyle).\n\nSee Also\nNutrition\nstatic let dietaryBiotin: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of biotin (vitamin B7) consumed.\nstatic let dietaryCaffeine: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of caffeine consumed.\nstatic let dietaryCalcium: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of calcium consumed.\nstatic let dietaryCarbohydrates: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of carbohydrates consumed.\nstatic let dietaryChloride: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of chloride consumed.\nstatic let dietaryCholesterol: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of cholesterol consumed.\nstatic let dietaryChromium: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of chromium consumed.\nstatic let dietaryCopper: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of copper consumed.\nstatic let dietaryEnergyConsumed: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of energy consumed.\nstatic let dietaryFatMonounsaturated: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of monounsaturated fat consumed.\nstatic let dietaryFatSaturated: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of saturated fat consumed.\nstatic let dietaryFatTotal: HKQuantityTypeIdentifier\nA quantity sample type that measures the total amount of fat consumed.\nstatic let dietaryFiber: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of fiber consumed.\nstatic let dietaryFolate: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of folate (folic acid) consumed.\nstatic let dietaryIodine: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of iodine consumed.\nstatic let dietaryIron: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of iron consumed.\nstatic let dietaryMagnesium: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of magnesium consumed.\nstatic let dietaryManganese: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of manganese consumed.\nstatic let dietaryMolybdenum: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of molybdenum consumed.\nstatic let dietaryNiacin: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of niacin (vitamin B3) consumed.\nstatic let dietaryPantothenicAcid: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of pantothenic acid (vitamin B5) consumed.\nstatic let dietaryPhosphorus: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of phosphorus consumed.\nstatic let dietaryPotassium: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of potassium consumed.\nstatic let dietaryProtein: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of protein consumed.\nstatic let dietaryRiboflavin: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of riboflavin (vitamin B2) consumed.\nstatic let dietarySelenium: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of selenium consumed.\nstatic let dietarySodium: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of sodium consumed.\nstatic let dietarySugar: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of sugar consumed.\nstatic let dietaryThiamin: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of thiamin (vitamin B1) consumed.\nstatic let dietaryVitaminA: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of vitamin A consumed.\nstatic let dietaryVitaminB12: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of cyanocobalamin (vitamin B12) consumed.\nstatic let dietaryVitaminB6: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of pyridoxine (vitamin B6) consumed.\nstatic let dietaryVitaminC: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of vitamin C consumed.\nstatic let dietaryVitaminD: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of vitamin D consumed.\nstatic let dietaryVitaminE: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of vitamin E consumed.\nstatic let dietaryVitaminK: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of vitamin K consumed.\nstatic let dietaryWater: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of water consumed.\nstatic let dietaryZinc: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of zinc consumed.\nRelated Documentation\nstruct HKQuantityTypeIdentifier\nThe identifiers that create quantity type objects.\nclass HKQuantitySample\nA sample that represents a quantity, including the value and the units.\nclass HKQuantity\nAn object that stores a value for a given unit."
  },
  {
    "title": "dietaryFatTotal | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquantitytypeidentifier/1615224-dietaryfattotal",
    "html": "Discussion\n\nThese samples include polyunsaturated, monounsaturated, and saturated fats. These samples use mass units (described in HKUnit) and measure cumulative values (described in HKQuantityAggregationStyle).\n\nSee Also\nNutrition\nstatic let dietaryBiotin: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of biotin (vitamin B7) consumed.\nstatic let dietaryCaffeine: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of caffeine consumed.\nstatic let dietaryCalcium: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of calcium consumed.\nstatic let dietaryCarbohydrates: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of carbohydrates consumed.\nstatic let dietaryChloride: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of chloride consumed.\nstatic let dietaryCholesterol: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of cholesterol consumed.\nstatic let dietaryChromium: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of chromium consumed.\nstatic let dietaryCopper: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of copper consumed.\nstatic let dietaryEnergyConsumed: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of energy consumed.\nstatic let dietaryFatMonounsaturated: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of monounsaturated fat consumed.\nstatic let dietaryFatPolyunsaturated: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of polyunsaturated fat consumed.\nstatic let dietaryFatSaturated: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of saturated fat consumed.\nstatic let dietaryFiber: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of fiber consumed.\nstatic let dietaryFolate: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of folate (folic acid) consumed.\nstatic let dietaryIodine: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of iodine consumed.\nstatic let dietaryIron: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of iron consumed.\nstatic let dietaryMagnesium: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of magnesium consumed.\nstatic let dietaryManganese: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of manganese consumed.\nstatic let dietaryMolybdenum: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of molybdenum consumed.\nstatic let dietaryNiacin: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of niacin (vitamin B3) consumed.\nstatic let dietaryPantothenicAcid: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of pantothenic acid (vitamin B5) consumed.\nstatic let dietaryPhosphorus: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of phosphorus consumed.\nstatic let dietaryPotassium: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of potassium consumed.\nstatic let dietaryProtein: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of protein consumed.\nstatic let dietaryRiboflavin: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of riboflavin (vitamin B2) consumed.\nstatic let dietarySelenium: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of selenium consumed.\nstatic let dietarySodium: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of sodium consumed.\nstatic let dietarySugar: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of sugar consumed.\nstatic let dietaryThiamin: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of thiamin (vitamin B1) consumed.\nstatic let dietaryVitaminA: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of vitamin A consumed.\nstatic let dietaryVitaminB12: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of cyanocobalamin (vitamin B12) consumed.\nstatic let dietaryVitaminB6: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of pyridoxine (vitamin B6) consumed.\nstatic let dietaryVitaminC: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of vitamin C consumed.\nstatic let dietaryVitaminD: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of vitamin D consumed.\nstatic let dietaryVitaminE: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of vitamin E consumed.\nstatic let dietaryVitaminK: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of vitamin K consumed.\nstatic let dietaryWater: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of water consumed.\nstatic let dietaryZinc: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of zinc consumed.\nRelated Documentation\nstruct HKQuantityTypeIdentifier\nThe identifiers that create quantity type objects.\nclass HKQuantitySample\nA sample that represents a quantity, including the value and the units.\nclass HKQuantity\nAn object that stores a value for a given unit."
  },
  {
    "title": "dietaryFiber | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquantitytypeidentifier/1615040-dietaryfiber",
    "html": "Discussion\n\nThese samples use mass units (described in HKUnit) and measure cumulative values (described in HKQuantityAggregationStyle).\n\nSee Also\nNutrition\nstatic let dietaryBiotin: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of biotin (vitamin B7) consumed.\nstatic let dietaryCaffeine: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of caffeine consumed.\nstatic let dietaryCalcium: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of calcium consumed.\nstatic let dietaryCarbohydrates: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of carbohydrates consumed.\nstatic let dietaryChloride: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of chloride consumed.\nstatic let dietaryCholesterol: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of cholesterol consumed.\nstatic let dietaryChromium: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of chromium consumed.\nstatic let dietaryCopper: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of copper consumed.\nstatic let dietaryEnergyConsumed: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of energy consumed.\nstatic let dietaryFatMonounsaturated: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of monounsaturated fat consumed.\nstatic let dietaryFatPolyunsaturated: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of polyunsaturated fat consumed.\nstatic let dietaryFatSaturated: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of saturated fat consumed.\nstatic let dietaryFatTotal: HKQuantityTypeIdentifier\nA quantity sample type that measures the total amount of fat consumed.\nstatic let dietaryFolate: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of folate (folic acid) consumed.\nstatic let dietaryIodine: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of iodine consumed.\nstatic let dietaryIron: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of iron consumed.\nstatic let dietaryMagnesium: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of magnesium consumed.\nstatic let dietaryManganese: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of manganese consumed.\nstatic let dietaryMolybdenum: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of molybdenum consumed.\nstatic let dietaryNiacin: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of niacin (vitamin B3) consumed.\nstatic let dietaryPantothenicAcid: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of pantothenic acid (vitamin B5) consumed.\nstatic let dietaryPhosphorus: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of phosphorus consumed.\nstatic let dietaryPotassium: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of potassium consumed.\nstatic let dietaryProtein: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of protein consumed.\nstatic let dietaryRiboflavin: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of riboflavin (vitamin B2) consumed.\nstatic let dietarySelenium: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of selenium consumed.\nstatic let dietarySodium: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of sodium consumed.\nstatic let dietarySugar: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of sugar consumed.\nstatic let dietaryThiamin: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of thiamin (vitamin B1) consumed.\nstatic let dietaryVitaminA: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of vitamin A consumed.\nstatic let dietaryVitaminB12: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of cyanocobalamin (vitamin B12) consumed.\nstatic let dietaryVitaminB6: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of pyridoxine (vitamin B6) consumed.\nstatic let dietaryVitaminC: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of vitamin C consumed.\nstatic let dietaryVitaminD: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of vitamin D consumed.\nstatic let dietaryVitaminE: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of vitamin E consumed.\nstatic let dietaryVitaminK: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of vitamin K consumed.\nstatic let dietaryWater: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of water consumed.\nstatic let dietaryZinc: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of zinc consumed.\nRelated Documentation\nstruct HKQuantityTypeIdentifier\nThe identifiers that create quantity type objects.\nclass HKQuantitySample\nA sample that represents a quantity, including the value and the units.\nclass HKQuantity\nAn object that stores a value for a given unit."
  },
  {
    "title": "unitRaised(toPower:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkunit/1615495-unitraised",
    "html": "Parameters\npower\n\nThe power by which to raise the unit.\n\nReturn Value\n\nA new, complex unit.\n\nDiscussion\n\nThis method creates a new, complex unit by raising the unit this method is called on by the given power. This task is often only one step in a series of operations. For example, you can use this method to create a meters-per-second-squared unit as shown below.\n\nlet meters = HKUnit.meterUnit()\nlet seconds = HKUnit.secondUnit()\nlet squaredSeconds = seconds.unitRaisedToPower(2)\nlet metersPerSecondSquared = meters.unitDividedByUnit(squaredSeconds)\n\nSee Also\nPerforming unit math\nfunc unitMultiplied(by: HKUnit) -> HKUnit\nCreates a complex unit by multiplying the receiving unit with another unit.\nfunc unitDivided(by: HKUnit) -> HKUnit\nCreates a complex unit by dividing the receiving unit by another unit.\nfunc reciprocal() -> HKUnit\nReturns a complex unit representing the unit’s reciprocal.\nRelated Documentation\ninit(from: String)\nReturns the unit instance described by the provided string."
  },
  {
    "title": "unitMultiplied(by:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkunit/1615718-unitmultiplied",
    "html": "Parameters\nunit\n\nThe unit to be multiplied.\n\nReturn Value\n\nA new, complex unit.\n\nDiscussion\n\nYou can create a complex unit by multiplying two units together. For example, you could create a foot-pound unit by multiplying a foot unit by a pound unit as shown below.\n\nlet foot = HKUnit.footUnit()\nlet pound = HKUnit.poundUnit()\nlet footPound = foot.unitMultipliedByUnit(pound)\n\nSee Also\nPerforming unit math\nfunc unitDivided(by: HKUnit) -> HKUnit\nCreates a complex unit by dividing the receiving unit by another unit.\nfunc unitRaised(toPower: Int) -> HKUnit\nCreates a complex unit by raising the unit to the given power.\nfunc reciprocal() -> HKUnit\nReturns a complex unit representing the unit’s reciprocal.\nRelated Documentation\ninit(from: String)\nReturns the unit instance described by the provided string."
  },
  {
    "title": "siemenUnit(with:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkunit/1615648-siemenunit",
    "html": "Parameters\nprefix\n\nA valid metric prefix value. For the complete list of prefix values, see HKMetricPrefix.\n\nReturn Value\n\nA HealthKit unit for measuring electrical conductance based on siemens and the provided prefix.\n\nDiscussion\n\nThis method is used to create prefixed versions of siemens. HealthKit often records electrodermal activity in microsiemens, as shown below.\n\nlet mcS = HKUnit.siemenUnitWithMetricPrefix(.Micro)\n\nSee Also\nConstructing electrical conductance units\nclass func siemen() -> Self\nReturns a HealthKit unit for measuring electrical conductance in siemens."
  },
  {
    "title": "count() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkunit/1615529-count",
    "html": "Return Value\n\nA HealthKit unit for measuring counts.\n\nDiscussion\n\nCount units are used to represent raw scalar values. They are often used to represent the number of times an event occurs—for example, the number of steps the user has taken or the number of times the user has used his or her inhaler. They can also be used as part of a compound unit—for example, the beats portion of beats per minute. Even though count and percent units are both scalar units, you cannot convert between them.\n\nNote\n\nIn HealthKit quantities, count values are stored using double values, even though they are often interpreted as integers.\n\nSee Also\nConstructing scalar units\nclass func percent() -> Self\nReturns a HealthKit unit for measuring percentages."
  },
  {
    "title": "volt() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkunit/3552089-volt",
    "html": "See Also\nElectrical potential difference\nclass func voltUnit(with: HKMetricPrefix) -> Self\nReturns a HealthKit unit for measuring the electrical potential difference in volts with the provided prefix."
  },
  {
    "title": "prismDiopter() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkunit/3916019-prismdiopter",
    "html": "See Also\nConstructing vision units\nclass func diopter() -> Self\nReturns a HealthKit unit for measuring the optical power of a lens using diopter units."
  },
  {
    "title": "siemen() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkunit/1615703-siemen",
    "html": "Return Value\n\nA HealthKit unit for measuring electrical conductance in siemens.\n\nSee Also\nConstructing electrical conductance units\nclass func siemenUnit(with: HKMetricPrefix) -> Self\nReturns a HealthKit unit for measuring electrical conductance, using siemen units with the provided prefix."
  },
  {
    "title": "radianAngleUnit(with:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkunit/3916021-radianangleunit",
    "html": "Parameters\nprefix\n\nA valid metric prefix value. For the complete list of prefix values, see HKMetricPrefix.\n\nSee Also\nConstructing angle units\nclass func degreeAngle() -> Self\nReturns a HealthKit unit for measuring angles using degrees.\nclass func radianAngle() -> Self\nReturns a HealthKit unit for measuring angles using radians."
  },
  {
    "title": "hertz() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkunit/2962907-hertz",
    "html": "Discussion\n\nHertz represent cycles per second.\n\nSee Also\nConstructing frequency units\nclass func hertzUnit(with: HKMetricPrefix) -> Self\nReturns a HealthKit unit for measuring frequency in hertz with the provided prefix."
  },
  {
    "title": "hertzUnit(with:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkunit/2962908-hertzunit",
    "html": "Parameters\nprefix\n\nA valid metric prefix value. For the complete list of prefix values, see HKMetricPrefix.\n\nDiscussion\n\nHertz represent cycles per second.\n\nSee Also\nConstructing frequency units\nclass func hertz() -> Self\nReturns a HealthKit unit for measuring frequency in hertz."
  },
  {
    "title": "kelvin() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkunit/1615289-kelvin",
    "html": "Return Value\n\nA HealthKit unit for measuring temperature in kelvins.\n\nSee Also\nConstructing temperature units\nclass func degreeCelsius() -> Self\nReturns a HealthKit unit for measuring temperature in degrees Celsius.\nclass func degreeFahrenheit() -> Self\nReturns a HealthKit unit for measuring temperature in degrees Fahrenheit."
  },
  {
    "title": "degreeFahrenheit() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkunit/1615444-degreefahrenheit",
    "html": "Return Value\n\nA HealthKit unit for measuring temperature in degrees Fahrenheit.\n\nSee Also\nConstructing temperature units\nclass func degreeCelsius() -> Self\nReturns a HealthKit unit for measuring temperature in degrees Celsius.\nclass func kelvin() -> Self\nReturns a HealthKit unit for measuring temperature in kelvins."
  },
  {
    "title": "degreeCelsius() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkunit/1615180-degreecelsius",
    "html": "Return Value\n\nA HealthKit unit for measuring temperature in degrees Celsius.\n\nSee Also\nConstructing temperature units\nclass func degreeFahrenheit() -> Self\nReturns a HealthKit unit for measuring temperature in degrees Fahrenheit.\nclass func kelvin() -> Self\nReturns a HealthKit unit for measuring temperature in kelvins."
  },
  {
    "title": "wattUnit(with:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkunit/3929736-wattunit",
    "html": "Parameters\nprefix\n\nA valid metric prefix value. For the complete list of prefix values, see HKMetricPrefix.\n\nSee Also\nConstructing power units\nclass func watt() -> Self\nReturns a HealthKit unit for measuring power in watts."
  },
  {
    "title": "watt() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkunit/3929735-watt",
    "html": "See Also\nConstructing power units\nclass func wattUnit(with: HKMetricPrefix) -> Self\nReturns a HealthKit unit for measuring power, using watt units with the provided prefix."
  },
  {
    "title": "init(type:quantity:start:end:metadata:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquantitysample/1615017-init",
    "html": "Parameters\nquantityType\n\nThe type of sample to be created. HealthKit defines a number of different quantity types, representing different types of health and fitness data. For the complete list of quantity type identifiers, see HKQuantityTypeIdentifier.\n\nquantity\n\nThe value to be stored in the sample. The quantity object must use units that are compatible with the provided quantity type. If the units are not compatible, this method throws an exception (invalidArgumentException).\n\nstartDate\n\nThe start date for the sample. This date must be equal to or earlier than the end date; otherwise, this method throws an exception (invalidArgumentException).\n\nendDate\n\nThe end date for the sample. This date must be equal to or later than the start date; otherwise, this method throws an exception (invalidArgumentException).\n\nmetadata\n\nThe metadata dictionary contains extra information describing this sample. The dictionary’s keys are all NSString objects. The values may be NSString objects, NSNumber objects, or NSDate objects. For a complete list of predefined metadata keys, see Metadata Keys.\n\nUsing predefined keys helps facilitate sharing data between apps; however, you are also encouraged to create your own, custom keys as needed to extend the HealthKit quantity sample’s capabilities.\n\nReturn Value\n\nA valid quantity sample with metadata.\n\nDiscussion\n\nHealthKit uses quantity samples to represent sample data using a single numeric value. To create a quantity sample, first create the corresponding quantity type and quantity, and then set its start date, end date, and metadata. You produce a new quantity sample with the provided metadata.\n\nlet metadata = [HKMetadataKeyDigitalSignature:digitalSignature,\n                HKMetadataKeyTimeZone:timeZone]\n \nguard let quantityType = HKObjectType.quantityTypeForIdentifier(HKQuantityTypeIdentifierHeartRate) else {\n    fatalError(\"*** Unable to create a heart rate quantity type ***\")\n}\n \nlet bpm = HKUnit(fromString: \"count/min\")\nlet quantity = HKQuantity(unit: bpm, doubleValue: 72.0)\n \nlet quantitySample = HKQuantitySample(type: quantityType,\n                                      quantity: quantity,\n                                      startDate: start,\n                                      endDate: end,\n                                      metadata: metadata)\n\nSee Also\nCreating Quantity Samples\ninit(type: HKQuantityType, quantity: HKQuantity, start: Date, end: Date)\nReturns a sample containing a numeric measurement.\ninit(type: HKQuantityType, quantity: HKQuantity, start: Date, end: Date, device: HKDevice?, metadata: [String : Any]?)\nReturns a sample containing a numeric measurement with the provided device and metadata.\nRelated Documentation\nvar quantityType: HKQuantityType\nThe quantity type for this sample.\nvar quantity: HKQuantity\nThe quantity for this sample.\nvar endDate: Date\nThe sample’s end date.\nvar metadata: [String : Any]?\nThe metadata for this HealthKit object.\nclass func quantityType(forIdentifier: HKQuantityTypeIdentifier) -> HKQuantityType?\nReturns the shared quantity type for the provided identifier.\nvar startDate: Date\nThe sample’s start date."
  },
  {
    "title": "quantityType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquantitysample/1615020-quantitytype",
    "html": "Discussion\n\nThis property contains a reference to the sampleType property that is cast as an HKQuantityType object.\n\nSee Also\nGetting Property Data\nvar quantity: HKQuantity\nThe quantity for this sample.\nvar count: Int\nThe number of quantities contained in this sample."
  },
  {
    "title": "HKPredicateKeyPathQuantity | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkpredicatekeypathquantity",
    "html": "Discussion\n\nUse this constant whenever you want to include a sample’s quantity in a predicate format string. Add a %K placeholder to the format string, and then pass this constant as an argument.\n\nAlternatively, use the predicateForQuantitySamples(with:quantity:) method to create predicates that match a sample’s quantity.\n\nSee Also\nSpecifying Predicate Key Paths\nlet HKPredicateKeyPathCount: String\nA key path for the sample’s count."
  },
  {
    "title": "dietaryFolate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquantitytypeidentifier/1615578-dietaryfolate",
    "html": "Discussion\n\nThese samples use mass units (described in HKUnit) and measure cumulative values (described in HKQuantityAggregationStyle).\n\nSee Also\nNutrition\nstatic let dietaryBiotin: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of biotin (vitamin B7) consumed.\nstatic let dietaryCaffeine: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of caffeine consumed.\nstatic let dietaryCalcium: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of calcium consumed.\nstatic let dietaryCarbohydrates: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of carbohydrates consumed.\nstatic let dietaryChloride: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of chloride consumed.\nstatic let dietaryCholesterol: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of cholesterol consumed.\nstatic let dietaryChromium: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of chromium consumed.\nstatic let dietaryCopper: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of copper consumed.\nstatic let dietaryEnergyConsumed: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of energy consumed.\nstatic let dietaryFatMonounsaturated: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of monounsaturated fat consumed.\nstatic let dietaryFatPolyunsaturated: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of polyunsaturated fat consumed.\nstatic let dietaryFatSaturated: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of saturated fat consumed.\nstatic let dietaryFatTotal: HKQuantityTypeIdentifier\nA quantity sample type that measures the total amount of fat consumed.\nstatic let dietaryFiber: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of fiber consumed.\nstatic let dietaryIodine: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of iodine consumed.\nstatic let dietaryIron: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of iron consumed.\nstatic let dietaryMagnesium: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of magnesium consumed.\nstatic let dietaryManganese: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of manganese consumed.\nstatic let dietaryMolybdenum: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of molybdenum consumed.\nstatic let dietaryNiacin: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of niacin (vitamin B3) consumed.\nstatic let dietaryPantothenicAcid: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of pantothenic acid (vitamin B5) consumed.\nstatic let dietaryPhosphorus: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of phosphorus consumed.\nstatic let dietaryPotassium: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of potassium consumed.\nstatic let dietaryProtein: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of protein consumed.\nstatic let dietaryRiboflavin: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of riboflavin (vitamin B2) consumed.\nstatic let dietarySelenium: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of selenium consumed.\nstatic let dietarySodium: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of sodium consumed.\nstatic let dietarySugar: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of sugar consumed.\nstatic let dietaryThiamin: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of thiamin (vitamin B1) consumed.\nstatic let dietaryVitaminA: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of vitamin A consumed.\nstatic let dietaryVitaminB12: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of cyanocobalamin (vitamin B12) consumed.\nstatic let dietaryVitaminB6: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of pyridoxine (vitamin B6) consumed.\nstatic let dietaryVitaminC: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of vitamin C consumed.\nstatic let dietaryVitaminD: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of vitamin D consumed.\nstatic let dietaryVitaminE: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of vitamin E consumed.\nstatic let dietaryVitaminK: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of vitamin K consumed.\nstatic let dietaryWater: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of water consumed.\nstatic let dietaryZinc: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of zinc consumed.\nRelated Documentation\nstruct HKQuantityTypeIdentifier\nThe identifiers that create quantity type objects.\nclass HKQuantitySample\nA sample that represents a quantity, including the value and the units.\nclass HKQuantity\nAn object that stores a value for a given unit."
  },
  {
    "title": "dietaryManganese | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquantitytypeidentifier/1615624-dietarymanganese",
    "html": "Discussion\n\nThese samples use mass units (described in HKUnit) and measure cumulative values (described in HKQuantityAggregationStyle).\n\nSee Also\nNutrition\nstatic let dietaryBiotin: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of biotin (vitamin B7) consumed.\nstatic let dietaryCaffeine: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of caffeine consumed.\nstatic let dietaryCalcium: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of calcium consumed.\nstatic let dietaryCarbohydrates: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of carbohydrates consumed.\nstatic let dietaryChloride: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of chloride consumed.\nstatic let dietaryCholesterol: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of cholesterol consumed.\nstatic let dietaryChromium: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of chromium consumed.\nstatic let dietaryCopper: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of copper consumed.\nstatic let dietaryEnergyConsumed: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of energy consumed.\nstatic let dietaryFatMonounsaturated: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of monounsaturated fat consumed.\nstatic let dietaryFatPolyunsaturated: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of polyunsaturated fat consumed.\nstatic let dietaryFatSaturated: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of saturated fat consumed.\nstatic let dietaryFatTotal: HKQuantityTypeIdentifier\nA quantity sample type that measures the total amount of fat consumed.\nstatic let dietaryFiber: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of fiber consumed.\nstatic let dietaryFolate: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of folate (folic acid) consumed.\nstatic let dietaryIodine: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of iodine consumed.\nstatic let dietaryIron: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of iron consumed.\nstatic let dietaryMagnesium: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of magnesium consumed.\nstatic let dietaryMolybdenum: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of molybdenum consumed.\nstatic let dietaryNiacin: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of niacin (vitamin B3) consumed.\nstatic let dietaryPantothenicAcid: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of pantothenic acid (vitamin B5) consumed.\nstatic let dietaryPhosphorus: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of phosphorus consumed.\nstatic let dietaryPotassium: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of potassium consumed.\nstatic let dietaryProtein: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of protein consumed.\nstatic let dietaryRiboflavin: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of riboflavin (vitamin B2) consumed.\nstatic let dietarySelenium: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of selenium consumed.\nstatic let dietarySodium: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of sodium consumed.\nstatic let dietarySugar: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of sugar consumed.\nstatic let dietaryThiamin: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of thiamin (vitamin B1) consumed.\nstatic let dietaryVitaminA: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of vitamin A consumed.\nstatic let dietaryVitaminB12: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of cyanocobalamin (vitamin B12) consumed.\nstatic let dietaryVitaminB6: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of pyridoxine (vitamin B6) consumed.\nstatic let dietaryVitaminC: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of vitamin C consumed.\nstatic let dietaryVitaminD: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of vitamin D consumed.\nstatic let dietaryVitaminE: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of vitamin E consumed.\nstatic let dietaryVitaminK: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of vitamin K consumed.\nstatic let dietaryWater: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of water consumed.\nstatic let dietaryZinc: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of zinc consumed.\nRelated Documentation\nstruct HKQuantityTypeIdentifier\nThe identifiers that create quantity type objects.\nclass HKQuantitySample\nA sample that represents a quantity, including the value and the units.\nclass HKQuantity\nAn object that stores a value for a given unit."
  },
  {
    "title": "dietaryPantothenicAcid | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquantitytypeidentifier/1615122-dietarypantothenicacid",
    "html": "Discussion\n\nThese samples use mass units (described in HKUnit) and measure cumulative values (described in HKQuantityAggregationStyle).\n\nSee Also\nNutrition\nstatic let dietaryBiotin: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of biotin (vitamin B7) consumed.\nstatic let dietaryCaffeine: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of caffeine consumed.\nstatic let dietaryCalcium: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of calcium consumed.\nstatic let dietaryCarbohydrates: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of carbohydrates consumed.\nstatic let dietaryChloride: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of chloride consumed.\nstatic let dietaryCholesterol: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of cholesterol consumed.\nstatic let dietaryChromium: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of chromium consumed.\nstatic let dietaryCopper: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of copper consumed.\nstatic let dietaryEnergyConsumed: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of energy consumed.\nstatic let dietaryFatMonounsaturated: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of monounsaturated fat consumed.\nstatic let dietaryFatPolyunsaturated: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of polyunsaturated fat consumed.\nstatic let dietaryFatSaturated: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of saturated fat consumed.\nstatic let dietaryFatTotal: HKQuantityTypeIdentifier\nA quantity sample type that measures the total amount of fat consumed.\nstatic let dietaryFiber: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of fiber consumed.\nstatic let dietaryFolate: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of folate (folic acid) consumed.\nstatic let dietaryIodine: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of iodine consumed.\nstatic let dietaryIron: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of iron consumed.\nstatic let dietaryMagnesium: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of magnesium consumed.\nstatic let dietaryManganese: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of manganese consumed.\nstatic let dietaryMolybdenum: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of molybdenum consumed.\nstatic let dietaryNiacin: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of niacin (vitamin B3) consumed.\nstatic let dietaryPhosphorus: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of phosphorus consumed.\nstatic let dietaryPotassium: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of potassium consumed.\nstatic let dietaryProtein: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of protein consumed.\nstatic let dietaryRiboflavin: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of riboflavin (vitamin B2) consumed.\nstatic let dietarySelenium: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of selenium consumed.\nstatic let dietarySodium: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of sodium consumed.\nstatic let dietarySugar: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of sugar consumed.\nstatic let dietaryThiamin: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of thiamin (vitamin B1) consumed.\nstatic let dietaryVitaminA: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of vitamin A consumed.\nstatic let dietaryVitaminB12: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of cyanocobalamin (vitamin B12) consumed.\nstatic let dietaryVitaminB6: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of pyridoxine (vitamin B6) consumed.\nstatic let dietaryVitaminC: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of vitamin C consumed.\nstatic let dietaryVitaminD: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of vitamin D consumed.\nstatic let dietaryVitaminE: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of vitamin E consumed.\nstatic let dietaryVitaminK: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of vitamin K consumed.\nstatic let dietaryWater: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of water consumed.\nstatic let dietaryZinc: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of zinc consumed.\nRelated Documentation\nstruct HKQuantityTypeIdentifier\nThe identifiers that create quantity type objects.\nclass HKQuantitySample\nA sample that represents a quantity, including the value and the units.\nclass HKQuantity\nAn object that stores a value for a given unit."
  },
  {
    "title": "dietaryMolybdenum | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquantitytypeidentifier/1615553-dietarymolybdenum",
    "html": "Discussion\n\nThese samples use mass units (described in HKUnit) and measure cumulative values (described in HKQuantityAggregationStyle).\n\nSee Also\nNutrition\nstatic let dietaryBiotin: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of biotin (vitamin B7) consumed.\nstatic let dietaryCaffeine: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of caffeine consumed.\nstatic let dietaryCalcium: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of calcium consumed.\nstatic let dietaryCarbohydrates: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of carbohydrates consumed.\nstatic let dietaryChloride: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of chloride consumed.\nstatic let dietaryCholesterol: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of cholesterol consumed.\nstatic let dietaryChromium: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of chromium consumed.\nstatic let dietaryCopper: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of copper consumed.\nstatic let dietaryEnergyConsumed: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of energy consumed.\nstatic let dietaryFatMonounsaturated: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of monounsaturated fat consumed.\nstatic let dietaryFatPolyunsaturated: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of polyunsaturated fat consumed.\nstatic let dietaryFatSaturated: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of saturated fat consumed.\nstatic let dietaryFatTotal: HKQuantityTypeIdentifier\nA quantity sample type that measures the total amount of fat consumed.\nstatic let dietaryFiber: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of fiber consumed.\nstatic let dietaryFolate: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of folate (folic acid) consumed.\nstatic let dietaryIodine: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of iodine consumed.\nstatic let dietaryIron: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of iron consumed.\nstatic let dietaryMagnesium: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of magnesium consumed.\nstatic let dietaryManganese: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of manganese consumed.\nstatic let dietaryNiacin: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of niacin (vitamin B3) consumed.\nstatic let dietaryPantothenicAcid: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of pantothenic acid (vitamin B5) consumed.\nstatic let dietaryPhosphorus: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of phosphorus consumed.\nstatic let dietaryPotassium: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of potassium consumed.\nstatic let dietaryProtein: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of protein consumed.\nstatic let dietaryRiboflavin: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of riboflavin (vitamin B2) consumed.\nstatic let dietarySelenium: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of selenium consumed.\nstatic let dietarySodium: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of sodium consumed.\nstatic let dietarySugar: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of sugar consumed.\nstatic let dietaryThiamin: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of thiamin (vitamin B1) consumed.\nstatic let dietaryVitaminA: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of vitamin A consumed.\nstatic let dietaryVitaminB12: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of cyanocobalamin (vitamin B12) consumed.\nstatic let dietaryVitaminB6: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of pyridoxine (vitamin B6) consumed.\nstatic let dietaryVitaminC: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of vitamin C consumed.\nstatic let dietaryVitaminD: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of vitamin D consumed.\nstatic let dietaryVitaminE: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of vitamin E consumed.\nstatic let dietaryVitaminK: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of vitamin K consumed.\nstatic let dietaryWater: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of water consumed.\nstatic let dietaryZinc: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of zinc consumed.\nRelated Documentation\nstruct HKQuantityTypeIdentifier\nThe identifiers that create quantity type objects.\nclass HKQuantitySample\nA sample that represents a quantity, including the value and the units.\nclass HKQuantity\nAn object that stores a value for a given unit."
  },
  {
    "title": "init(type:start:end:objects:metadata:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkcorrelation/1614362-init",
    "html": "Parameters\ncorrelationType\n\nThe type for this correlation. For a complete list of correlation types, see Correlation Types.\n\nstartDate\n\nThe start date for the sample. This date must be equal to or earlier than the end date; otherwise, this method throws an exception (invalidArgumentException).\n\nendDate\n\nThe end date for the sample. This date must be equal to or later than the start date; otherwise, this method throws an exception (invalidArgumentException).\n\nobjects\n\nA set of HKSample objects. Specifically, this set contains the quantity and category samples to be grouped into this correlation.\n\nmetadata\n\nThe metadata dictionary containing extra information that describes this correlation. The dictionary’s keys are all NSString objects . The values may be NSString, NSNumber, or NSDate objects. For a complete list of predefined metadata keys, see Metadata Keys.\n\nUsing predefined keys helps facilitate sharing data between apps; however, you are also encouraged to create custom keys as needed to extend the HealthKit sample’s capabilities.\n\nWhen creating correlations representing food, always use the HKMetadataKeyFoodType key to provide the food’s name.\n\nDiscussion\n\nUse a correlation object to represent composite data—that is, a sample that requires more than a single value. To create a correlation sample, first create the quantity and category samples you intend to combine into the correlation. Next, create the correlation’s type. Finally, instantiate the correlation, passing in the type, start date, end date, samples, and metadata as shown below.\n\nUse this method when you need to include additional metadata, but the data was not recorded using external hardware. Samples representing food should always include metadata with the HKMetadataKeyFoodType key.\n\nlet date = NSDate();\n \n// Create a sample for calories\n \nguard let calorieType = HKObjectType.quantityTypeForIdentifier(HKQuantityTypeIdentifierDietaryEnergyConsumed) else {\n    fatalError(\"*** Unable to create the calorie type ***\")\n}\n \nlet calorieQuantity =\n    HKQuantity(unit: HKUnit.kilocalorieUnit(), doubleValue: 110.0)\n \nlet calorieSample = HKQuantitySample(type: calorieType,\n                                     quantity: calorieQuantity, startDate: date, endDate: date)\n \n// Create a sample for total fat\n \nguard let fatType = HKObjectType.quantityTypeForIdentifier(HKQuantityTypeIdentifierDietaryFatTotal) else {\n    fatalError(\"*** Unable to create the fat type ***\")\n}\n \nlet fatQuantity =\n    HKQuantity(unit: HKUnit.gramUnit(), doubleValue: 0.0)\n \nlet fatSample = HKQuantitySample(type: fatType,\n                                 quantity: fatQuantity, startDate: date, endDate: date)\n \n// Create a sample for carbohydrates\n \nguard let carbohydratesType = HKObjectType.quantityTypeForIdentifier(HKQuantityTypeIdentifierDietaryCarbohydrates) else {\n    fatalError(\"*** Unable to create the carbohydrates type ***\")\n}\n \nlet carbohydratesQuantity =\n    HKQuantity(unit: HKUnit.gramUnit(), doubleValue: 30.0)\n \nlet carbohydratesSample = HKQuantitySample(type: carbohydratesType,\n                                           quantity: carbohydratesQuantity, startDate: date, endDate: date)\n \n// Create a sample for protein\n \nguard let proteinType = HKObjectType.quantityTypeForIdentifier(HKQuantityTypeIdentifierDietaryProtein) else {\n    fatalError(\"*** Unable to create the protein type ***\")\n}\n \nlet proteinQuantity =\n    HKQuantity(unit: HKUnit.gramUnit(), doubleValue: 1.0)\n \nlet proteinSample = HKQuantitySample(type: proteinType,\n                                     quantity: proteinQuantity, startDate: date, endDate: date)\n \n// Create the food sample\n \nlet objects: Set = [calorieSample, fatSample, carbohydratesSample, proteinSample]\n \nlet metadata = [HKMetadataKeyFoodType: \"Banana\"]\n \nguard let bananaType = HKObjectType.correlationTypeForIdentifier(HKCorrelationTypeIdentifierFood) else {\n    fatalError(\"*** Unable to create the banana type ***\")\n}\n \nlet banana = HKCorrelation(type: bananaType,\n                           startDate: date, endDate: date, objects: objects, metadata:metadata)\n\nSee Also\nCreating Correlations\ninit(type: HKCorrelationType, start: Date, end: Date, objects: Set<HKSample>)\nInstantiates and returns a new correlation instance.\ninit(type: HKCorrelationType, start: Date, end: Date, objects: Set<HKSample>, device: HKDevice?, metadata: [String : Any]?)\nInstantiates and returns a new correlation instance with the provided device and metadata.\nRelated Documentation\nvar objects: Set<HKSample>\nThe set of sample objects that make up the correlation.\nclass func correlationType(forIdentifier: HKCorrelationTypeIdentifier) -> HKCorrelationType?\nReturns the shared correlation type for the provided identifier.\nvar endDate: Date\nThe sample’s end date.\nvar correlationType: HKCorrelationType\nThe type for this correlation.\nvar metadata: [String : Any]?\nThe metadata for this HealthKit object.\nvar startDate: Date\nThe sample’s start date."
  },
  {
    "title": "HKMetadataKeyBloodGlucoseMealTime | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkmetadatakeybloodglucosemealtime",
    "html": "Discussion\n\nSet this key on a bloodGlucose sample. Set it's value to an NSNumber object containing a HKBloodGlucoseMealTime value.Medical professionals can use the relative meal time to help determine the acceptable range for a blood glucose reading. If your app requires more precise timing or additional information about the meal's composition, create samples to record those details (for example, a dietaryCarbohydrates sample with the exact meal time).\n\nTopics\nValid Values\nenum HKBloodGlucoseMealTime\nConstants indicating the timing of a blood glucose sample relative to a meal.\nSee Also\nBlood Glucose Keys\nlet HKMetadataKeyInsulinDeliveryReason: String\nThe medical reason for administering insulin."
  },
  {
    "title": "metadata | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkobject/1615598-metadata",
    "html": "Discussion\n\nThe metadata dictionary contains extra information describing this object. The dictionary’s keys are all NSString objects. The values can be NSString objects, NSNumber objects or NSDate objects. For a complete list of predefined metadata keys, see Metadata Keys.\n\nUsing predefined keys helps facilitate sharing data between apps; however, you are also encouraged to create your own, custom keys as needed to extend the HealthKit object’s capabilities.\n\nYou set an object’s metadata when you create the object by calling one of these methods (or a related method):\n\ninit(type:quantity:start:end:metadata:)\n\ninit(type:value:start:end:metadata:)\n\ninit(type:start:end:objects:metadata:)\n\ninit(activityType:start:end:duration:totalEnergyBurned:totalDistance:metadata:)\n\nSee Also\nAccessing Properties\nvar uuid: UUID\nThe universally unique identifier (UUID) for this HealthKit object.\nvar device: HKDevice?\nThe device that generated the data for this object.\nvar sourceRevision: HKSourceRevision\nThe app or device that created this object.\nvar source: HKSource\nA HealthKit source, representing the app or device that created this object."
  },
  {
    "title": "initialResultsHandler | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkstatisticscollectionquery/1615755-initialresultshandler",
    "html": "Discussion\n\nIf this property is not set to nil, the query executes the results handler on a background queue after it has finished calculating the statistics for all matching samples currently stored in HealthKit.\n\nSee Also\nGetting and Setting Results Handlers\nvar statisticsUpdateHandler: ((HKStatisticsCollectionQuery, HKStatistics?, HKStatisticsCollection?, Error?) -> Void)?\nThe results handler for monitoring updates to the HealthKit store."
  },
  {
    "title": "energyFormatterUnit(from:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkunit/1615211-energyformatterunit",
    "html": "Parameters\nunit\n\nA valid HealthKit unit object. If the unit is not an energy-type unit, this method throws an exception (invalidArgumentException).\n\nReturn Value\n\nAn energy formatter unit value. For a list of possible energy formatter unit values, see EnergyFormatter.Unit.\n\nSee Also\nWorking with formatter units\ninit(from: EnergyFormatter.Unit)\nConverts an energy formatter enumeration value into a corresponding HealthKit unit object.\nclass func lengthFormatterUnit(from: HKUnit) -> LengthFormatter.Unit\nConverts a HealthKit unit object into a corresponding length formatter enumeration value.\ninit(from: LengthFormatter.Unit)\nConverts a length formatter enumeration value into a corresponding HealthKit object.\nclass func massFormatterUnit(from: HKUnit) -> MassFormatter.Unit\nConverts a HealthKit unit object into a corresponding mass formatter enumeration value.\ninit(from: MassFormatter.Unit)\nConverts a mass formatter enumeration value into a corresponding HealthKit unit object."
  },
  {
    "title": "intervalComponents | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkstatisticscollectionquery/1615108-intervalcomponents",
    "html": "Discussion\n\nThis property defines the length of the time intervals for your collection. The following code sample shows a number of common time intervals.\n\nlet fiveMinutes = NSDateComponents()\nfiveMinutes.minute = 5\n \nlet hour = NSDateComponents()\nhour.hour = 1\n \nlet day = NSDateComponents()\nday.day = 1\n \nlet week = NSDateComponents()\nweek.day = 7\n \nlet month = NSDateComponents()\nmonth.month = 1\n \nlet year = NSDateComponents()\nyear.year = 1\n\nSee Also\nGetting Property Data\nvar anchorDate: Date\nThe anchor date for the collection’s time intervals.\nvar options: HKStatisticsOptions\nA list of options that define the type of statistical calculations performed and the way in which data from multiple sources are merged."
  },
  {
    "title": "calorie() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkunit/1615359-calorie",
    "html": "Deprecated\n\nTo avoid confusion, use largeCalorie() or smallCalorie() instead.\n\nReturn Value\n\nA HealthKit unit for measuring energy in calories.\n\nSee Also\nConstructing energy units\nclass func joule() -> Self\nReturns a HealthKit unit for measuring energy in joules.\nclass func jouleUnit(with: HKMetricPrefix) -> Self\nReturns a HealthKit unit for measuring energy, using joule units with the provided prefix.\nclass func kilocalorie() -> Self\nReturns a HealthKit unit for measuring energy in kilocalories.\nclass func largeCalorie() -> Self\nReturns a HealthKit unit for measuring energy in large calories (Cal).\nclass func smallCalorie() -> Self\nReturns a HealthKit unit for measuring energy in small calories (cal)."
  },
  {
    "title": "largeCalorie() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkunit/2902231-largecalorie",
    "html": "Discussion\n\nThe large calorie is the same as a kilocalorie (1 Cal = 4184.0 J).\n\nSee Also\nConstructing energy units\nclass func joule() -> Self\nReturns a HealthKit unit for measuring energy in joules.\nclass func jouleUnit(with: HKMetricPrefix) -> Self\nReturns a HealthKit unit for measuring energy, using joule units with the provided prefix.\nclass func kilocalorie() -> Self\nReturns a HealthKit unit for measuring energy in kilocalories.\nclass func smallCalorie() -> Self\nReturns a HealthKit unit for measuring energy in small calories (cal).\nclass func calorie() -> Self\nReturns a HealthKit unit for measuring energy in calories."
  },
  {
    "title": "jouleUnit(with:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkunit/1615248-jouleunit",
    "html": "Parameters\nprefix\n\nA valid metric prefix value. For the complete list of prefix values, see HKMetricPrefix.\n\nReturn Value\n\nA HealthKit unit for measuring energy based on joules and the provided prefix.\n\nDiscussion\n\nThis method is used to create prefixed versions of joules. HealthKit commonly uses kilojoules to measure food energy in many regions. Kilojoules can be created as shown below.\n\nlet kj = HKUnit.jouleUnitWithMetricPrefix(.Kilo)\n\nSee Also\nConstructing energy units\nclass func joule() -> Self\nReturns a HealthKit unit for measuring energy in joules.\nclass func kilocalorie() -> Self\nReturns a HealthKit unit for measuring energy in kilocalories.\nclass func largeCalorie() -> Self\nReturns a HealthKit unit for measuring energy in large calories (Cal).\nclass func smallCalorie() -> Self\nReturns a HealthKit unit for measuring energy in small calories (cal).\nclass func calorie() -> Self\nReturns a HealthKit unit for measuring energy in calories."
  },
  {
    "title": "joule() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkunit/1615640-joule",
    "html": "Return Value\n\nA HealthKit unit for measuring energy in joules.\n\nSee Also\nConstructing energy units\nclass func jouleUnit(with: HKMetricPrefix) -> Self\nReturns a HealthKit unit for measuring energy, using joule units with the provided prefix.\nclass func kilocalorie() -> Self\nReturns a HealthKit unit for measuring energy in kilocalories.\nclass func largeCalorie() -> Self\nReturns a HealthKit unit for measuring energy in large calories (Cal).\nclass func smallCalorie() -> Self\nReturns a HealthKit unit for measuring energy in small calories (cal).\nclass func calorie() -> Self\nReturns a HealthKit unit for measuring energy in calories."
  },
  {
    "title": "day() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkunit/1615707-day",
    "html": "Return Value\n\nA HealthKit unit for measuring time in days.\n\nSee Also\nConstructing time units\nclass func second() -> Self\nReturns a HealthKit unit for measuring time in seconds.\nclass func secondUnit(with: HKMetricPrefix) -> Self\nReturns a HealthKit unit for measuring time, using second units with the provided prefix.\nclass func minute() -> Self\nReturns a HealthKit unit for measuring time in minutes.\nclass func hour() -> Self\nReturns a HealthKit unit for measuring time in hours."
  },
  {
    "title": "hour() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkunit/1615214-hour",
    "html": "Return Value\n\nA HealthKit unit for measuring time in hours.\n\nSee Also\nConstructing time units\nclass func second() -> Self\nReturns a HealthKit unit for measuring time in seconds.\nclass func secondUnit(with: HKMetricPrefix) -> Self\nReturns a HealthKit unit for measuring time, using second units with the provided prefix.\nclass func minute() -> Self\nReturns a HealthKit unit for measuring time in minutes.\nclass func day() -> Self\nReturns a HealthKit unit for measuring time in days."
  },
  {
    "title": "pintImperial() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkunit/1615306-pintimperial",
    "html": "Return Value\n\nA HealthKit unit for measuring volume in imperial pints.\n\nSee Also\nConstructing volume units\nclass func liter() -> Self\nReturns a HealthKit unit for measuring volume in liters.\nclass func literUnit(with: HKMetricPrefix) -> Self\nReturns a HealthKit unit for measuring volume, using liter units with the provided prefix.\nclass func fluidOunceUS() -> Self\nReturns a HealthKit unit for measuring volume in US fluid ounces.\nclass func fluidOunceImperial() -> Self\nReturns a HealthKit unit for measuring volume in imperial fluid ounces.\nclass func cupUS() -> Self\nReturns a HealthKit unit for measuring volume in US cups.\nclass func cupImperial() -> Self\nReturns a HealthKit unit for measuring volume in imperial cups.\nclass func pintUS() -> Self\nReturns a HealthKit unit for measuring volume in US pints."
  },
  {
    "title": "minute() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkunit/1615362-minute",
    "html": "Return Value\n\nA HealthKit unit for measuring time in minutes.\n\nSee Also\nConstructing time units\nclass func second() -> Self\nReturns a HealthKit unit for measuring time in seconds.\nclass func secondUnit(with: HKMetricPrefix) -> Self\nReturns a HealthKit unit for measuring time, using second units with the provided prefix.\nclass func hour() -> Self\nReturns a HealthKit unit for measuring time in hours.\nclass func day() -> Self\nReturns a HealthKit unit for measuring time in days."
  },
  {
    "title": "inchesOfMercury() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkunit/3601134-inchesofmercury",
    "html": "Return Value\n\nA HealthKit unit for measuring pressure in inches of mercury.\n\nSee Also\nConstructing pressure units\nclass func pascal() -> Self\nReturns a HealthKit unit for measuring pressure in pascals.\nclass func pascalUnit(with: HKMetricPrefix) -> Self\nReturns a HealthKit unit for measuring pressure, using pascal units with the provided prefix.\nclass func millimeterOfMercury() -> Self\nReturns a HealthKit unit for measuring pressure in millimeters of mercury.\nclass func centimeterOfWater() -> Self\nReturns a HealthKit unit for measuring pressure in centimeters of water.\nclass func atmosphere() -> Self\nReturns a HealthKit unit for measuring pressure in atmospheres.\nclass func decibelAWeightedSoundPressureLevel() -> Self\nReturns a HealthKit unit for measuring the difference between the local pressure and the ambient atmospheric pressure caused by sound."
  },
  {
    "title": "millimeterOfMercury() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkunit/1615410-millimeterofmercury",
    "html": "Return Value\n\nA HealthKit unit for measuring pressure in millimeters of mercury.\n\nDiscussion\n\nOne millimeter of mercury is the pressure needed to raise a column of mercury by 1 millimeter. Even through it is not an SI unit, the millimeter of mercury unit is used in many scientific fields. In HealthKit, it is commonly used to measure blood pressure.\n\nSee Also\nConstructing pressure units\nclass func pascal() -> Self\nReturns a HealthKit unit for measuring pressure in pascals.\nclass func pascalUnit(with: HKMetricPrefix) -> Self\nReturns a HealthKit unit for measuring pressure, using pascal units with the provided prefix.\nclass func inchesOfMercury() -> Self\nReturns a HealthKit unit for measuring pressure in inches of mercury.\nclass func centimeterOfWater() -> Self\nReturns a HealthKit unit for measuring pressure in centimeters of water.\nclass func atmosphere() -> Self\nReturns a HealthKit unit for measuring pressure in atmospheres.\nclass func decibelAWeightedSoundPressureLevel() -> Self\nReturns a HealthKit unit for measuring the difference between the local pressure and the ambient atmospheric pressure caused by sound."
  },
  {
    "title": "pascalUnit(with:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkunit/1615168-pascalunit",
    "html": "Parameters\nprefix\n\nA valid metric prefix value. For the complete list of prefix values, see HKMetricPrefix.\n\nReturn Value\n\nA HealthKit unit for measuring pressure based on pascals and the provided prefix.\n\nSee Also\nConstructing pressure units\nclass func pascal() -> Self\nReturns a HealthKit unit for measuring pressure in pascals.\nclass func millimeterOfMercury() -> Self\nReturns a HealthKit unit for measuring pressure in millimeters of mercury.\nclass func inchesOfMercury() -> Self\nReturns a HealthKit unit for measuring pressure in inches of mercury.\nclass func centimeterOfWater() -> Self\nReturns a HealthKit unit for measuring pressure in centimeters of water.\nclass func atmosphere() -> Self\nReturns a HealthKit unit for measuring pressure in atmospheres.\nclass func decibelAWeightedSoundPressureLevel() -> Self\nReturns a HealthKit unit for measuring the difference between the local pressure and the ambient atmospheric pressure caused by sound."
  },
  {
    "title": "pascal() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkunit/1615172-pascal",
    "html": "Return Value\n\nA HealthKit unit for measuring pressure in pascals.\n\nSee Also\nConstructing pressure units\nclass func pascalUnit(with: HKMetricPrefix) -> Self\nReturns a HealthKit unit for measuring pressure, using pascal units with the provided prefix.\nclass func millimeterOfMercury() -> Self\nReturns a HealthKit unit for measuring pressure in millimeters of mercury.\nclass func inchesOfMercury() -> Self\nReturns a HealthKit unit for measuring pressure in inches of mercury.\nclass func centimeterOfWater() -> Self\nReturns a HealthKit unit for measuring pressure in centimeters of water.\nclass func atmosphere() -> Self\nReturns a HealthKit unit for measuring pressure in atmospheres.\nclass func decibelAWeightedSoundPressureLevel() -> Self\nReturns a HealthKit unit for measuring the difference between the local pressure and the ambient atmospheric pressure caused by sound."
  },
  {
    "title": "pintUS() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkunit/1615528-pintus",
    "html": "Return Value\n\nA HealthKit unit for measuring volume in US pints.\n\nSee Also\nConstructing volume units\nclass func liter() -> Self\nReturns a HealthKit unit for measuring volume in liters.\nclass func literUnit(with: HKMetricPrefix) -> Self\nReturns a HealthKit unit for measuring volume, using liter units with the provided prefix.\nclass func fluidOunceUS() -> Self\nReturns a HealthKit unit for measuring volume in US fluid ounces.\nclass func fluidOunceImperial() -> Self\nReturns a HealthKit unit for measuring volume in imperial fluid ounces.\nclass func cupUS() -> Self\nReturns a HealthKit unit for measuring volume in US cups.\nclass func cupImperial() -> Self\nReturns a HealthKit unit for measuring volume in imperial cups.\nclass func pintImperial() -> Self\nReturns a HealthKit unit for measuring volume in imperial pints."
  },
  {
    "title": "cupImperial() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkunit/1615506-cupimperial",
    "html": "Return Value\n\nA HealthKit unit for measuring volume in imperial cups.\n\nSee Also\nConstructing volume units\nclass func liter() -> Self\nReturns a HealthKit unit for measuring volume in liters.\nclass func literUnit(with: HKMetricPrefix) -> Self\nReturns a HealthKit unit for measuring volume, using liter units with the provided prefix.\nclass func fluidOunceUS() -> Self\nReturns a HealthKit unit for measuring volume in US fluid ounces.\nclass func fluidOunceImperial() -> Self\nReturns a HealthKit unit for measuring volume in imperial fluid ounces.\nclass func cupUS() -> Self\nReturns a HealthKit unit for measuring volume in US cups.\nclass func pintUS() -> Self\nReturns a HealthKit unit for measuring volume in US pints.\nclass func pintImperial() -> Self\nReturns a HealthKit unit for measuring volume in imperial pints."
  },
  {
    "title": "cupUS() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkunit/1615542-cupus",
    "html": "Return Value\n\nA HealthKit unit for measuring volume in US cups.\n\nSee Also\nConstructing volume units\nclass func liter() -> Self\nReturns a HealthKit unit for measuring volume in liters.\nclass func literUnit(with: HKMetricPrefix) -> Self\nReturns a HealthKit unit for measuring volume, using liter units with the provided prefix.\nclass func fluidOunceUS() -> Self\nReturns a HealthKit unit for measuring volume in US fluid ounces.\nclass func fluidOunceImperial() -> Self\nReturns a HealthKit unit for measuring volume in imperial fluid ounces.\nclass func cupImperial() -> Self\nReturns a HealthKit unit for measuring volume in imperial cups.\nclass func pintUS() -> Self\nReturns a HealthKit unit for measuring volume in US pints.\nclass func pintImperial() -> Self\nReturns a HealthKit unit for measuring volume in imperial pints."
  },
  {
    "title": "yard() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkunit/1615106-yard",
    "html": "Return Value\n\nA HealthKit unit for measuring length in yards.\n\nSee Also\nConstructing length units\nclass func meter() -> Self\nReturns a HealthKit unit for measuring length in meters.\nclass func meterUnit(with: HKMetricPrefix) -> Self\nReturns a HealthKit unit for measuring length, using meter units with the provided prefix.\nclass func inch() -> Self\nReturns a HealthKit unit for measuring length in inches.\nclass func foot() -> Self\nReturns a HealthKit unit for measuring length in feet.\nclass func mile() -> Self\nReturns a HealthKit unit for measuring length in miles."
  },
  {
    "title": "mile() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkunit/1615390-mile",
    "html": "Return Value\n\nA HealthKit unit for measuring length in miles.\n\nSee Also\nConstructing length units\nclass func meter() -> Self\nReturns a HealthKit unit for measuring length in meters.\nclass func meterUnit(with: HKMetricPrefix) -> Self\nReturns a HealthKit unit for measuring length, using meter units with the provided prefix.\nclass func inch() -> Self\nReturns a HealthKit unit for measuring length in inches.\nclass func foot() -> Self\nReturns a HealthKit unit for measuring length in feet.\nclass func yard() -> Self\nReturns a HealthKit unit for measuring length in yards."
  },
  {
    "title": "foot() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkunit/1615043-foot",
    "html": "Return Value\n\nA HealthKit unit for measuring length in feet.\n\nSee Also\nConstructing length units\nclass func meter() -> Self\nReturns a HealthKit unit for measuring length in meters.\nclass func meterUnit(with: HKMetricPrefix) -> Self\nReturns a HealthKit unit for measuring length, using meter units with the provided prefix.\nclass func inch() -> Self\nReturns a HealthKit unit for measuring length in inches.\nclass func yard() -> Self\nReturns a HealthKit unit for measuring length in yards.\nclass func mile() -> Self\nReturns a HealthKit unit for measuring length in miles."
  },
  {
    "title": "inch() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkunit/1615144-inch",
    "html": "Return Value\n\nA HealthKit unit for measuring length in inches.\n\nSee Also\nConstructing length units\nclass func meter() -> Self\nReturns a HealthKit unit for measuring length in meters.\nclass func meterUnit(with: HKMetricPrefix) -> Self\nReturns a HealthKit unit for measuring length, using meter units with the provided prefix.\nclass func foot() -> Self\nReturns a HealthKit unit for measuring length in feet.\nclass func yard() -> Self\nReturns a HealthKit unit for measuring length in yards.\nclass func mile() -> Self\nReturns a HealthKit unit for measuring length in miles."
  },
  {
    "title": "meter() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkunit/1615061-meter",
    "html": "Return Value\n\nA HealthKit unit for measuring length in meters.\n\nSee Also\nConstructing length units\nclass func meterUnit(with: HKMetricPrefix) -> Self\nReturns a HealthKit unit for measuring length, using meter units with the provided prefix.\nclass func inch() -> Self\nReturns a HealthKit unit for measuring length in inches.\nclass func foot() -> Self\nReturns a HealthKit unit for measuring length in feet.\nclass func yard() -> Self\nReturns a HealthKit unit for measuring length in yards.\nclass func mile() -> Self\nReturns a HealthKit unit for measuring length in miles."
  },
  {
    "title": "second() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkunit/1615440-second",
    "html": "Return Value\n\nA HealthKit unit for measuring time in seconds.\n\nSee Also\nConstructing time units\nclass func secondUnit(with: HKMetricPrefix) -> Self\nReturns a HealthKit unit for measuring time, using second units with the provided prefix.\nclass func minute() -> Self\nReturns a HealthKit unit for measuring time in minutes.\nclass func hour() -> Self\nReturns a HealthKit unit for measuring time in hours.\nclass func day() -> Self\nReturns a HealthKit unit for measuring time in days."
  },
  {
    "title": "dietaryCalcium | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquantitytypeidentifier/1615249-dietarycalcium",
    "html": "Discussion\n\nThese samples use mass units (described in HKUnit) and measure cumulative values (described in HKQuantityAggregationStyle).\n\nSee Also\nNutrition\nstatic let dietaryBiotin: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of biotin (vitamin B7) consumed.\nstatic let dietaryCaffeine: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of caffeine consumed.\nstatic let dietaryCarbohydrates: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of carbohydrates consumed.\nstatic let dietaryChloride: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of chloride consumed.\nstatic let dietaryCholesterol: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of cholesterol consumed.\nstatic let dietaryChromium: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of chromium consumed.\nstatic let dietaryCopper: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of copper consumed.\nstatic let dietaryEnergyConsumed: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of energy consumed.\nstatic let dietaryFatMonounsaturated: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of monounsaturated fat consumed.\nstatic let dietaryFatPolyunsaturated: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of polyunsaturated fat consumed.\nstatic let dietaryFatSaturated: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of saturated fat consumed.\nstatic let dietaryFatTotal: HKQuantityTypeIdentifier\nA quantity sample type that measures the total amount of fat consumed.\nstatic let dietaryFiber: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of fiber consumed.\nstatic let dietaryFolate: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of folate (folic acid) consumed.\nstatic let dietaryIodine: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of iodine consumed.\nstatic let dietaryIron: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of iron consumed.\nstatic let dietaryMagnesium: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of magnesium consumed.\nstatic let dietaryManganese: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of manganese consumed.\nstatic let dietaryMolybdenum: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of molybdenum consumed.\nstatic let dietaryNiacin: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of niacin (vitamin B3) consumed.\nstatic let dietaryPantothenicAcid: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of pantothenic acid (vitamin B5) consumed.\nstatic let dietaryPhosphorus: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of phosphorus consumed.\nstatic let dietaryPotassium: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of potassium consumed.\nstatic let dietaryProtein: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of protein consumed.\nstatic let dietaryRiboflavin: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of riboflavin (vitamin B2) consumed.\nstatic let dietarySelenium: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of selenium consumed.\nstatic let dietarySodium: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of sodium consumed.\nstatic let dietarySugar: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of sugar consumed.\nstatic let dietaryThiamin: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of thiamin (vitamin B1) consumed.\nstatic let dietaryVitaminA: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of vitamin A consumed.\nstatic let dietaryVitaminB12: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of cyanocobalamin (vitamin B12) consumed.\nstatic let dietaryVitaminB6: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of pyridoxine (vitamin B6) consumed.\nstatic let dietaryVitaminC: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of vitamin C consumed.\nstatic let dietaryVitaminD: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of vitamin D consumed.\nstatic let dietaryVitaminE: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of vitamin E consumed.\nstatic let dietaryVitaminK: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of vitamin K consumed.\nstatic let dietaryWater: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of water consumed.\nstatic let dietaryZinc: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of zinc consumed.\nRelated Documentation\nstruct HKQuantityTypeIdentifier\nThe identifiers that create quantity type objects.\nclass HKQuantitySample\nA sample that represents a quantity, including the value and the units.\nclass HKQuantity\nAn object that stores a value for a given unit."
  },
  {
    "title": "dietaryChromium | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquantitytypeidentifier/1615234-dietarychromium",
    "html": "Discussion\n\nThese samples use mass units (described in HKUnit) and measure cumulative values (described in HKQuantityAggregationStyle).\n\nSee Also\nNutrition\nstatic let dietaryBiotin: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of biotin (vitamin B7) consumed.\nstatic let dietaryCaffeine: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of caffeine consumed.\nstatic let dietaryCalcium: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of calcium consumed.\nstatic let dietaryCarbohydrates: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of carbohydrates consumed.\nstatic let dietaryChloride: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of chloride consumed.\nstatic let dietaryCholesterol: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of cholesterol consumed.\nstatic let dietaryCopper: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of copper consumed.\nstatic let dietaryEnergyConsumed: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of energy consumed.\nstatic let dietaryFatMonounsaturated: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of monounsaturated fat consumed.\nstatic let dietaryFatPolyunsaturated: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of polyunsaturated fat consumed.\nstatic let dietaryFatSaturated: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of saturated fat consumed.\nstatic let dietaryFatTotal: HKQuantityTypeIdentifier\nA quantity sample type that measures the total amount of fat consumed.\nstatic let dietaryFiber: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of fiber consumed.\nstatic let dietaryFolate: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of folate (folic acid) consumed.\nstatic let dietaryIodine: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of iodine consumed.\nstatic let dietaryIron: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of iron consumed.\nstatic let dietaryMagnesium: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of magnesium consumed.\nstatic let dietaryManganese: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of manganese consumed.\nstatic let dietaryMolybdenum: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of molybdenum consumed.\nstatic let dietaryNiacin: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of niacin (vitamin B3) consumed.\nstatic let dietaryPantothenicAcid: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of pantothenic acid (vitamin B5) consumed.\nstatic let dietaryPhosphorus: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of phosphorus consumed.\nstatic let dietaryPotassium: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of potassium consumed.\nstatic let dietaryProtein: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of protein consumed.\nstatic let dietaryRiboflavin: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of riboflavin (vitamin B2) consumed.\nstatic let dietarySelenium: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of selenium consumed.\nstatic let dietarySodium: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of sodium consumed.\nstatic let dietarySugar: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of sugar consumed.\nstatic let dietaryThiamin: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of thiamin (vitamin B1) consumed.\nstatic let dietaryVitaminA: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of vitamin A consumed.\nstatic let dietaryVitaminB12: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of cyanocobalamin (vitamin B12) consumed.\nstatic let dietaryVitaminB6: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of pyridoxine (vitamin B6) consumed.\nstatic let dietaryVitaminC: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of vitamin C consumed.\nstatic let dietaryVitaminD: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of vitamin D consumed.\nstatic let dietaryVitaminE: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of vitamin E consumed.\nstatic let dietaryVitaminK: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of vitamin K consumed.\nstatic let dietaryWater: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of water consumed.\nstatic let dietaryZinc: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of zinc consumed.\nRelated Documentation\nstruct HKQuantityTypeIdentifier\nThe identifiers that create quantity type objects.\nclass HKQuantitySample\nA sample that represents a quantity, including the value and the units.\nclass HKQuantity\nAn object that stores a value for a given unit."
  },
  {
    "title": "dietaryCopper | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquantitytypeidentifier/1615774-dietarycopper",
    "html": "Discussion\n\nThese samples use mass units (described in HKUnit) and measure cumulative values (described in HKQuantityAggregationStyle).\n\nSee Also\nNutrition\nstatic let dietaryBiotin: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of biotin (vitamin B7) consumed.\nstatic let dietaryCaffeine: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of caffeine consumed.\nstatic let dietaryCalcium: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of calcium consumed.\nstatic let dietaryCarbohydrates: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of carbohydrates consumed.\nstatic let dietaryChloride: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of chloride consumed.\nstatic let dietaryCholesterol: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of cholesterol consumed.\nstatic let dietaryChromium: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of chromium consumed.\nstatic let dietaryEnergyConsumed: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of energy consumed.\nstatic let dietaryFatMonounsaturated: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of monounsaturated fat consumed.\nstatic let dietaryFatPolyunsaturated: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of polyunsaturated fat consumed.\nstatic let dietaryFatSaturated: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of saturated fat consumed.\nstatic let dietaryFatTotal: HKQuantityTypeIdentifier\nA quantity sample type that measures the total amount of fat consumed.\nstatic let dietaryFiber: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of fiber consumed.\nstatic let dietaryFolate: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of folate (folic acid) consumed.\nstatic let dietaryIodine: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of iodine consumed.\nstatic let dietaryIron: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of iron consumed.\nstatic let dietaryMagnesium: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of magnesium consumed.\nstatic let dietaryManganese: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of manganese consumed.\nstatic let dietaryMolybdenum: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of molybdenum consumed.\nstatic let dietaryNiacin: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of niacin (vitamin B3) consumed.\nstatic let dietaryPantothenicAcid: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of pantothenic acid (vitamin B5) consumed.\nstatic let dietaryPhosphorus: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of phosphorus consumed.\nstatic let dietaryPotassium: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of potassium consumed.\nstatic let dietaryProtein: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of protein consumed.\nstatic let dietaryRiboflavin: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of riboflavin (vitamin B2) consumed.\nstatic let dietarySelenium: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of selenium consumed.\nstatic let dietarySodium: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of sodium consumed.\nstatic let dietarySugar: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of sugar consumed.\nstatic let dietaryThiamin: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of thiamin (vitamin B1) consumed.\nstatic let dietaryVitaminA: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of vitamin A consumed.\nstatic let dietaryVitaminB12: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of cyanocobalamin (vitamin B12) consumed.\nstatic let dietaryVitaminB6: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of pyridoxine (vitamin B6) consumed.\nstatic let dietaryVitaminC: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of vitamin C consumed.\nstatic let dietaryVitaminD: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of vitamin D consumed.\nstatic let dietaryVitaminE: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of vitamin E consumed.\nstatic let dietaryVitaminK: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of vitamin K consumed.\nstatic let dietaryWater: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of water consumed.\nstatic let dietaryZinc: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of zinc consumed.\nRelated Documentation\nstruct HKQuantityTypeIdentifier\nThe identifiers that create quantity type objects.\nclass HKQuantitySample\nA sample that represents a quantity, including the value and the units.\nclass HKQuantity\nAn object that stores a value for a given unit."
  },
  {
    "title": "dietaryChloride | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquantitytypeidentifier/1615497-dietarychloride",
    "html": "Discussion\n\nThese samples use mass units (described in HKUnit) and measure cumulative values (described in HKQuantityAggregationStyle).\n\nSee Also\nNutrition\nstatic let dietaryBiotin: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of biotin (vitamin B7) consumed.\nstatic let dietaryCaffeine: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of caffeine consumed.\nstatic let dietaryCalcium: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of calcium consumed.\nstatic let dietaryCarbohydrates: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of carbohydrates consumed.\nstatic let dietaryCholesterol: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of cholesterol consumed.\nstatic let dietaryChromium: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of chromium consumed.\nstatic let dietaryCopper: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of copper consumed.\nstatic let dietaryEnergyConsumed: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of energy consumed.\nstatic let dietaryFatMonounsaturated: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of monounsaturated fat consumed.\nstatic let dietaryFatPolyunsaturated: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of polyunsaturated fat consumed.\nstatic let dietaryFatSaturated: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of saturated fat consumed.\nstatic let dietaryFatTotal: HKQuantityTypeIdentifier\nA quantity sample type that measures the total amount of fat consumed.\nstatic let dietaryFiber: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of fiber consumed.\nstatic let dietaryFolate: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of folate (folic acid) consumed.\nstatic let dietaryIodine: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of iodine consumed.\nstatic let dietaryIron: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of iron consumed.\nstatic let dietaryMagnesium: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of magnesium consumed.\nstatic let dietaryManganese: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of manganese consumed.\nstatic let dietaryMolybdenum: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of molybdenum consumed.\nstatic let dietaryNiacin: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of niacin (vitamin B3) consumed.\nstatic let dietaryPantothenicAcid: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of pantothenic acid (vitamin B5) consumed.\nstatic let dietaryPhosphorus: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of phosphorus consumed.\nstatic let dietaryPotassium: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of potassium consumed.\nstatic let dietaryProtein: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of protein consumed.\nstatic let dietaryRiboflavin: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of riboflavin (vitamin B2) consumed.\nstatic let dietarySelenium: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of selenium consumed.\nstatic let dietarySodium: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of sodium consumed.\nstatic let dietarySugar: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of sugar consumed.\nstatic let dietaryThiamin: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of thiamin (vitamin B1) consumed.\nstatic let dietaryVitaminA: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of vitamin A consumed.\nstatic let dietaryVitaminB12: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of cyanocobalamin (vitamin B12) consumed.\nstatic let dietaryVitaminB6: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of pyridoxine (vitamin B6) consumed.\nstatic let dietaryVitaminC: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of vitamin C consumed.\nstatic let dietaryVitaminD: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of vitamin D consumed.\nstatic let dietaryVitaminE: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of vitamin E consumed.\nstatic let dietaryVitaminK: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of vitamin K consumed.\nstatic let dietaryWater: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of water consumed.\nstatic let dietaryZinc: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of zinc consumed.\nRelated Documentation\nstruct HKQuantityTypeIdentifier\nThe identifiers that create quantity type objects.\nclass HKQuantitySample\nA sample that represents a quantity, including the value and the units.\nclass HKQuantity\nAn object that stores a value for a given unit."
  },
  {
    "title": "dietaryEnergyConsumed | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquantitytypeidentifier/1615722-dietaryenergyconsumed",
    "html": "Discussion\n\nThese samples use energy units (described in HKUnit) and measure cumulative values (described in HKQuantityAggregationStyle).\n\nSee Also\nNutrition\nstatic let dietaryBiotin: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of biotin (vitamin B7) consumed.\nstatic let dietaryCaffeine: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of caffeine consumed.\nstatic let dietaryCalcium: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of calcium consumed.\nstatic let dietaryCarbohydrates: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of carbohydrates consumed.\nstatic let dietaryChloride: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of chloride consumed.\nstatic let dietaryCholesterol: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of cholesterol consumed.\nstatic let dietaryChromium: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of chromium consumed.\nstatic let dietaryCopper: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of copper consumed.\nstatic let dietaryFatMonounsaturated: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of monounsaturated fat consumed.\nstatic let dietaryFatPolyunsaturated: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of polyunsaturated fat consumed.\nstatic let dietaryFatSaturated: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of saturated fat consumed.\nstatic let dietaryFatTotal: HKQuantityTypeIdentifier\nA quantity sample type that measures the total amount of fat consumed.\nstatic let dietaryFiber: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of fiber consumed.\nstatic let dietaryFolate: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of folate (folic acid) consumed.\nstatic let dietaryIodine: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of iodine consumed.\nstatic let dietaryIron: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of iron consumed.\nstatic let dietaryMagnesium: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of magnesium consumed.\nstatic let dietaryManganese: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of manganese consumed.\nstatic let dietaryMolybdenum: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of molybdenum consumed.\nstatic let dietaryNiacin: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of niacin (vitamin B3) consumed.\nstatic let dietaryPantothenicAcid: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of pantothenic acid (vitamin B5) consumed.\nstatic let dietaryPhosphorus: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of phosphorus consumed.\nstatic let dietaryPotassium: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of potassium consumed.\nstatic let dietaryProtein: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of protein consumed.\nstatic let dietaryRiboflavin: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of riboflavin (vitamin B2) consumed.\nstatic let dietarySelenium: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of selenium consumed.\nstatic let dietarySodium: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of sodium consumed.\nstatic let dietarySugar: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of sugar consumed.\nstatic let dietaryThiamin: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of thiamin (vitamin B1) consumed.\nstatic let dietaryVitaminA: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of vitamin A consumed.\nstatic let dietaryVitaminB12: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of cyanocobalamin (vitamin B12) consumed.\nstatic let dietaryVitaminB6: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of pyridoxine (vitamin B6) consumed.\nstatic let dietaryVitaminC: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of vitamin C consumed.\nstatic let dietaryVitaminD: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of vitamin D consumed.\nstatic let dietaryVitaminE: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of vitamin E consumed.\nstatic let dietaryVitaminK: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of vitamin K consumed.\nstatic let dietaryWater: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of water consumed.\nstatic let dietaryZinc: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of zinc consumed.\nRelated Documentation\nstruct HKQuantityTypeIdentifier\nThe identifiers that create quantity type objects.\nclass HKQuantitySample\nA sample that represents a quantity, including the value and the units.\nclass HKQuantity\nAn object that stores a value for a given unit."
  },
  {
    "title": "moleUnit(withMolarMass:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkunit/1615515-moleunit",
    "html": "Parameters\ngramsPerMole\n\nThe molar mass (in g/mol) of the item to be weighed.\n\nReturn Value\n\nA HealthKit unit for measuring the mass of an item in moles.\n\nDiscussion\n\nTo create a unit for measuring an item in moles, you need to know that item’s molar mass. For example, you can use the HKUnitMolarMassBloodGlucose constant to create the mole unit for blood glucose, as shown below.\n\nlet molesOfBloodGlucose = HKUnit.moleUnitWithMolarMass(HKUnitMolarMassBloodGlucose)\n\nSee Also\nConstructing mass units\nclass func gram() -> Self\nReturns a HealthKit unit for measuring mass in grams.\nclass func gramUnit(with: HKMetricPrefix) -> Self\nReturns a HealthKit unit for measuring mass, using gram units with the provided prefix.\nclass func ounce() -> Self\nReturns a HealthKit unit for measuring mass in ounces.\nclass func pound() -> Self\nReturns a HealthKit unit for measuring mass in pounds.\nclass func stone() -> Self\nReturns a HealthKit unit for measuring mass in stones.\nclass func moleUnit(with: HKMetricPrefix, molarMass: Double) -> Self\nReturns a HealthKit unit for measuring mass in moles, with the given prefix and molar mass.\nvar HKUnitMolarMassBloodGlucose: Double\nThe molecular mass of blood glucose, typically used to create mole units for blood glucose."
  },
  {
    "title": "moleUnit(with:molarMass:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkunit/1615608-moleunit",
    "html": "Parameters\nprefix\n\nA valid metric prefix value. For the complete list of prefix values, see HKMetricPrefix.\n\ngramsPerMole\n\nThe molar mass, in grams per mole, of the item to be weighed.\n\nReturn Value\n\nA HealthKit unit for measuring mass in moles.\n\nDiscussion\n\nThis method allows the creation of units to measure mass in moles with a given metric prefix and molecular mass. For example, to measure blood glucose in millimoles, you need to use both the correct prefix (milli-) and the HKUnitMolarMassBloodGlucose constant.).\n\nlet millimolesOfBloodGlucose =\n    HKUnit.moleUnitWithMetricPrefix(HKMetricPrefix.Milli,\n                                    molarMass: HKUnitMolarMassBloodGlucose)\n\nSee Also\nConstructing mass units\nclass func gram() -> Self\nReturns a HealthKit unit for measuring mass in grams.\nclass func gramUnit(with: HKMetricPrefix) -> Self\nReturns a HealthKit unit for measuring mass, using gram units with the provided prefix.\nclass func ounce() -> Self\nReturns a HealthKit unit for measuring mass in ounces.\nclass func pound() -> Self\nReturns a HealthKit unit for measuring mass in pounds.\nclass func stone() -> Self\nReturns a HealthKit unit for measuring mass in stones.\nclass func moleUnit(withMolarMass: Double) -> Self\nReturns a HealthKit unit for measuring mass in moles for a given molar mass.\nvar HKUnitMolarMassBloodGlucose: Double\nThe molecular mass of blood glucose, typically used to create mole units for blood glucose."
  },
  {
    "title": "gram() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkunit/1615050-gram",
    "html": "Return Value\n\nA HealthKit unit for measuring mass in grams.\n\nSee Also\nConstructing mass units\nclass func gramUnit(with: HKMetricPrefix) -> Self\nReturns a HealthKit unit for measuring mass, using gram units with the provided prefix.\nclass func ounce() -> Self\nReturns a HealthKit unit for measuring mass in ounces.\nclass func pound() -> Self\nReturns a HealthKit unit for measuring mass in pounds.\nclass func stone() -> Self\nReturns a HealthKit unit for measuring mass in stones.\nclass func moleUnit(withMolarMass: Double) -> Self\nReturns a HealthKit unit for measuring mass in moles for a given molar mass.\nclass func moleUnit(with: HKMetricPrefix, molarMass: Double) -> Self\nReturns a HealthKit unit for measuring mass in moles, with the given prefix and molar mass.\nvar HKUnitMolarMassBloodGlucose: Double\nThe molecular mass of blood glucose, typically used to create mole units for blood glucose."
  },
  {
    "title": "gramUnit(with:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkunit/1615164-gramunit",
    "html": "Parameters\nprefix\n\nA valid metric prefix value. For the complete list of prefix values, see HKMetricPrefix.\n\nReturn Value\n\nA HealthKit unit for measuring mass based on grams and the given prefix.\n\nDiscussion\n\nThis method is used to create prefixed versions of grams, typically kilogram units, as shown below.\n\nlet kg = HKUnit.gramUnitWithMetricPrefix(.Kilo)\nlet kg = HKUnit.gramUnitWithMetricPrefix(.Kilo)\n\nSee Also\nConstructing mass units\nclass func gram() -> Self\nReturns a HealthKit unit for measuring mass in grams.\nclass func ounce() -> Self\nReturns a HealthKit unit for measuring mass in ounces.\nclass func pound() -> Self\nReturns a HealthKit unit for measuring mass in pounds.\nclass func stone() -> Self\nReturns a HealthKit unit for measuring mass in stones.\nclass func moleUnit(withMolarMass: Double) -> Self\nReturns a HealthKit unit for measuring mass in moles for a given molar mass.\nclass func moleUnit(with: HKMetricPrefix, molarMass: Double) -> Self\nReturns a HealthKit unit for measuring mass in moles, with the given prefix and molar mass.\nvar HKUnitMolarMassBloodGlucose: Double\nThe molecular mass of blood glucose, typically used to create mole units for blood glucose."
  },
  {
    "title": "ounce() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkunit/1615118-ounce",
    "html": "Return Value\n\nA HealthKit unit for measuring mass in ounces.\n\nSee Also\nConstructing mass units\nclass func gram() -> Self\nReturns a HealthKit unit for measuring mass in grams.\nclass func gramUnit(with: HKMetricPrefix) -> Self\nReturns a HealthKit unit for measuring mass, using gram units with the provided prefix.\nclass func pound() -> Self\nReturns a HealthKit unit for measuring mass in pounds.\nclass func stone() -> Self\nReturns a HealthKit unit for measuring mass in stones.\nclass func moleUnit(withMolarMass: Double) -> Self\nReturns a HealthKit unit for measuring mass in moles for a given molar mass.\nclass func moleUnit(with: HKMetricPrefix, molarMass: Double) -> Self\nReturns a HealthKit unit for measuring mass in moles, with the given prefix and molar mass.\nvar HKUnitMolarMassBloodGlucose: Double\nThe molecular mass of blood glucose, typically used to create mole units for blood glucose."
  },
  {
    "title": "pound() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkunit/1615563-pound",
    "html": "Return Value\n\nA HealthKit unit for measuring mass in pounds.\n\nSee Also\nConstructing mass units\nclass func gram() -> Self\nReturns a HealthKit unit for measuring mass in grams.\nclass func gramUnit(with: HKMetricPrefix) -> Self\nReturns a HealthKit unit for measuring mass, using gram units with the provided prefix.\nclass func ounce() -> Self\nReturns a HealthKit unit for measuring mass in ounces.\nclass func stone() -> Self\nReturns a HealthKit unit for measuring mass in stones.\nclass func moleUnit(withMolarMass: Double) -> Self\nReturns a HealthKit unit for measuring mass in moles for a given molar mass.\nclass func moleUnit(with: HKMetricPrefix, molarMass: Double) -> Self\nReturns a HealthKit unit for measuring mass in moles, with the given prefix and molar mass.\nvar HKUnitMolarMassBloodGlucose: Double\nThe molecular mass of blood glucose, typically used to create mole units for blood glucose."
  },
  {
    "title": "internationalUnit() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkunit/2868079-internationalunit",
    "html": "Return Value\n\nA HealthKit unit for measuring amounts in IUs."
  },
  {
    "title": "decibelHearingLevel() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkunit/2962905-decibelhearinglevel",
    "html": "Discussion\n\nThis unit measures the intensity of the sound relative to the quietest sound a typical young, healthy individual can hear.\n\nSee Also\nRelated Documentation\nclass func decibelAWeightedSoundPressureLevel() -> Self\nReturns a HealthKit unit for measuring the difference between the local pressure and the ambient atmospheric pressure caused by sound."
  },
  {
    "title": "lengthFormatterUnit(from:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkunit/1615309-lengthformatterunit",
    "html": "Parameters\nunit\n\nA valid HealthKit unit object. If the unit is not a length unit, this method throws an exception (invalidArgumentException).\n\nReturn Value\n\nA length formatter unit value. For a list of possible length formatter unit values see LengthFormatter.Unit.\n\nSee Also\nWorking with formatter units\nclass func energyFormatterUnit(from: HKUnit) -> EnergyFormatter.Unit\nConverts a HealthKit unit object into a corresponding energy formatter enumeration value.\ninit(from: EnergyFormatter.Unit)\nConverts an energy formatter enumeration value into a corresponding HealthKit unit object.\ninit(from: LengthFormatter.Unit)\nConverts a length formatter enumeration value into a corresponding HealthKit object.\nclass func massFormatterUnit(from: HKUnit) -> MassFormatter.Unit\nConverts a HealthKit unit object into a corresponding mass formatter enumeration value.\ninit(from: MassFormatter.Unit)\nConverts a mass formatter enumeration value into a corresponding HealthKit unit object."
  },
  {
    "title": "predicateForObject(with:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquery/1614783-predicateforobject",
    "html": "Parameters\nUUID\n\nThe target UUID.\n\nReturn Value\n\nA predicate that matches a specific object based on its UUID.\n\nDiscussion\n\nHealthKit assigns a UUID to each object when it is saved to the HealthKit store. HealthKit uses these IDs to uniquely identify objects from the store. Use this convenience method to create a predicate that matches the object with the provided UUID. The following sample uses both the convenience method and a predicate format string to create equivalent predicates.\n\nlet uuid = HKQuery.predicateForObjectWithUUID(myUUID)\nlet explicitUUID = NSPredicate(format: \"%K == %@\", HKPredicateKeyPathUUID, myUUID)\n\nSee Also\nCreating object predicates\nclass func predicateForObjects(with: Set<UUID>) -> NSPredicate\nReturns a predicate that matches the objects with the specified universally unique identifiers (UUIDs).\nclass func predicateForObjects(from: HKSource) -> NSPredicate\nReturns a predicate that matches all the objects that were created by the provided source.\nclass func predicateForObjects(from: Set<HKSource>) -> NSPredicate\nReturns a predicate that matches all the objects that were created by any of the provided sources.\nclass func predicateForObjects(from: Set<HKDevice>) -> NSPredicate\nReturns a predicate that matches all the objects that were created by any of the provided devices.\nclass func predicateForObjects(withDeviceProperty: String, allowedValues: Set<String>) -> NSPredicate\nReturns a predicate that matches all objects created by devices with the specified properties.\nclass func predicateForObjects(from: Set<HKSourceRevision>) -> NSPredicate\nReturns a predicate that matches all the objects that were created by any of the provided source revisions.\nclass func predicateForObjects(withMetadataKey: String) -> NSPredicate\nReturns a predicate that matches any object whose metadata contains the provided key.\nclass func predicateForObjects(withMetadataKey: String, allowedValues: [Any]) -> NSPredicate\nReturns a predicate that matches objects based on the provided metadata key and an array of target values.\nclass func predicateForObjects(withMetadataKey: String, operatorType: NSComparisonPredicate.Operator, value: Any) -> NSPredicate\nReturns a predicate that matches objects based on the provided metadata key, value, and operator.\nclass func predicateForObjectsWithNoCorrelation() -> NSPredicate\nReturns a predicate that matches all objects that are not associated with a HealthKit correlation.\nRelated Documentation\nlet HKPredicateKeyPathUUID: String\nThe key path for accessing the object’s UUID inside a predicate format string.\nvar uuid: UUID\nThe universally unique identifier (UUID) for this HealthKit object."
  },
  {
    "title": "init(from:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkunit/1615182-init",
    "html": "Parameters\nmassFormatterUnit\n\nA valid mass formatter unit value. For a list of possible mass formatter unit values, see MassFormatter.Unit.\n\nReturn Value\n\nA HealthKit unit object, or nil if the unit parameter is not a valid energy formatter unit value.\n\nSee Also\nWorking with formatter units\nclass func energyFormatterUnit(from: HKUnit) -> EnergyFormatter.Unit\nConverts a HealthKit unit object into a corresponding energy formatter enumeration value.\ninit(from: EnergyFormatter.Unit)\nConverts an energy formatter enumeration value into a corresponding HealthKit unit object.\nclass func lengthFormatterUnit(from: HKUnit) -> LengthFormatter.Unit\nConverts a HealthKit unit object into a corresponding length formatter enumeration value.\ninit(from: LengthFormatter.Unit)\nConverts a length formatter enumeration value into a corresponding HealthKit object.\nclass func massFormatterUnit(from: HKUnit) -> MassFormatter.Unit\nConverts a HealthKit unit object into a corresponding mass formatter enumeration value."
  },
  {
    "title": "massFormatterUnit(from:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkunit/1615100-massformatterunit",
    "html": "Parameters\nunit\n\nA valid HealthKit unit object. If the unit is not a mass-type unit, this method throws an exception (invalidArgumentException).\n\nReturn Value\n\nA mass formatter unit value. For a list of possible mass formatter unit values, see MassFormatter.Unit.\n\nSee Also\nWorking with formatter units\nclass func energyFormatterUnit(from: HKUnit) -> EnergyFormatter.Unit\nConverts a HealthKit unit object into a corresponding energy formatter enumeration value.\ninit(from: EnergyFormatter.Unit)\nConverts an energy formatter enumeration value into a corresponding HealthKit unit object.\nclass func lengthFormatterUnit(from: HKUnit) -> LengthFormatter.Unit\nConverts a HealthKit unit object into a corresponding length formatter enumeration value.\ninit(from: LengthFormatter.Unit)\nConverts a length formatter enumeration value into a corresponding HealthKit object.\ninit(from: MassFormatter.Unit)\nConverts a mass formatter enumeration value into a corresponding HealthKit unit object."
  },
  {
    "title": "init(quantityType:quantitySamplePredicate:options:anchorDate:intervalComponents:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkstatisticscollectionquery/1615199-init",
    "html": "Parameters\nquantityType\n\nThe type of sample to search for. This type must be an instance of the HKQuantityType class. You cannot perform statistics collection queries using other sample types.\n\nquantitySamplePredicate\n\nA predicate that limits the results returned by the query. You can pass nil if you want to perform the statistical calculation over all the samples of the specified type.\n\noptions\n\nA list of options that define the type of statistical calculations performed and the way in which data from multiple sources are merged. For a list of valid options, see HKStatisticsOptions.\n\nanchorDate\n\nThe date used to anchor the collection’s time intervals. Use this parameter to set the start time for your time intervals. For example, if you are using a day interval, you might create a date object with a time of 2:00 a.m. This value sets the start of the day for each of your time intervals.\n\nTechnically, the anchor sets the start time for a single time interval. All other time intervals must align with this interval. The time intervals can extend before or after the anchor date. Each time interval has the same length, and there is no gap between adjacent intervals. Think of time as a number line: The anchor date represents its origin, with the intervals creating tick marks that extend away from the origin in both directions.\n\nintervalComponents\n\nThe date components that define the time interval for each statistics object in the collection. For a collection of sample time intervals, see Listing 1.\n\nReturn Value\n\nA newly initialized statistics collection query object.\n\nDiscussion\n\nAfter you instantiate the query, set up one or both of the callback handlers, and then call the HKHealthStore class’s execute(_:) method to run it. Queries run on an anonymous background queue. As soon as the query is complete, the initial results handler is executed on the same background queue (but not necessarily on the same thread). You typically dispatch these results to the main queue to update the user interface.\n\nStatistics collection queries can also act as long-running queries. If you assign a statistics update handler, they continue to monitor the HealthKit store after gathering the initial results. The statistics update handler is called on the background queue every time a matching sample is saved to the HealthKit Store. You can cancel this query by calling the store’s stop(_:) method.\n\nNote\n\nStatistical calculations can take a considerable amount of time, especially if there are a large number of samples involved.\n\nSee Also\nCreating Statistics Collection Objects\nExecuting Statistics Collection Queries\nCalculate statistical data for graphs and charts.\nRelated Documentation\nvar statisticsUpdateHandler: ((HKStatisticsCollectionQuery, HKStatistics?, HKStatisticsCollection?, Error?) -> Void)?\nThe results handler for monitoring updates to the HealthKit store.\nvar anchorDate: Date\nThe anchor date for the collection’s time intervals.\nvar intervalComponents: DateComponents\nThe date components that define the time interval for each statistics object in the collection.\nvar options: HKStatisticsOptions\nA list of options that define the type of statistical calculations performed and the way in which data from multiple sources are merged.\nvar initialResultsHandler: ((HKStatisticsCollectionQuery, HKStatisticsCollection?, Error?) -> Void)?\nThe results handler for the query’s initial results."
  },
  {
    "title": "init(from:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkunit/1615218-init",
    "html": "Parameters\nenergyFormatterUnit\n\nA valid energy formatter unit value. For a list of possible energy formatter unit values, see EnergyFormatter.Unit.\n\nReturn Value\n\nA HealthKit unit object, or nil if the unit parameter is not a valid energy formatter unit value.\n\nSee Also\nWorking with formatter units\nclass func energyFormatterUnit(from: HKUnit) -> EnergyFormatter.Unit\nConverts a HealthKit unit object into a corresponding energy formatter enumeration value.\nclass func lengthFormatterUnit(from: HKUnit) -> LengthFormatter.Unit\nConverts a HealthKit unit object into a corresponding length formatter enumeration value.\ninit(from: LengthFormatter.Unit)\nConverts a length formatter enumeration value into a corresponding HealthKit object.\nclass func massFormatterUnit(from: HKUnit) -> MassFormatter.Unit\nConverts a HealthKit unit object into a corresponding mass formatter enumeration value.\ninit(from: MassFormatter.Unit)\nConverts a mass formatter enumeration value into a corresponding HealthKit unit object."
  },
  {
    "title": "init(from:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkunit/1615057-init",
    "html": "Parameters\nlengthFormatterUnit\n\nA valid length formatter unit value. For a list of possible length formatter unit values, see LengthFormatter.Unit.\n\nReturn Value\n\nA HealthKit unit object, or nil if the unit parameter is not a valid length formatter unit value.\n\nSee Also\nWorking with formatter units\nclass func energyFormatterUnit(from: HKUnit) -> EnergyFormatter.Unit\nConverts a HealthKit unit object into a corresponding energy formatter enumeration value.\ninit(from: EnergyFormatter.Unit)\nConverts an energy formatter enumeration value into a corresponding HealthKit unit object.\nclass func lengthFormatterUnit(from: HKUnit) -> LengthFormatter.Unit\nConverts a HealthKit unit object into a corresponding length formatter enumeration value.\nclass func massFormatterUnit(from: HKUnit) -> MassFormatter.Unit\nConverts a HealthKit unit object into a corresponding mass formatter enumeration value.\ninit(from: MassFormatter.Unit)\nConverts a mass formatter enumeration value into a corresponding HealthKit unit object."
  },
  {
    "title": "isNull() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkunit/1615323-isnull",
    "html": "Return Value\n\ntrue if the unit is null; otherwise, false.\n\nDiscussion\n\nNull units occur only when you create compound units in which all the units cancel out. For example, if you tried to create a unit by dividing deciliters by liters (dL/L), you would end up with a null unit.\n\nSee Also\nWorking with units\ninit(from: String)\nReturns the unit instance described by the provided string.\nvar unitString: String\nA string representation of the unit object."
  },
  {
    "title": "anchorDate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkstatisticscollectionquery/1615241-anchordate",
    "html": "Discussion\n\nThe date used to anchor the collection’s time intervals.\n\nUse the anchor date to set the start time for your time intervals. For example, if you are using a day interval, you might create a date object with a time of 2:00 a.m. This value sets the start of each day for all of your time intervals.\n\nTechnically, the anchor sets the start time for a single time interval. All other time intervals must align with this interval. The time intervals can extend before or after the anchor date. Each time interval has the same length, and there is no gap between adjacent intervals. Think of time as a number line: The anchor date represents its origin, with the intervals creating tick marks that extend away from the origin in both directions.\n\nSee Also\nGetting Property Data\nvar intervalComponents: DateComponents\nThe date components that define the time interval for each statistics object in the collection.\nvar options: HKStatisticsOptions\nA list of options that define the type of statistical calculations performed and the way in which data from multiple sources are merged."
  },
  {
    "title": "unitString | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkunit/1615499-unitstring",
    "html": "Discussion\n\nThis property contains a string using the format required by init(from:).\n\nSee Also\nWorking with units\ninit(from: String)\nReturns the unit instance described by the provided string.\nfunc isNull() -> Bool\nReturns a Boolean value indicating whether the unit is null.\nRelated Documentation\nfunc reciprocal() -> HKUnit\nReturns a complex unit representing the unit’s reciprocal.\nfunc unitMultiplied(by: HKUnit) -> HKUnit\nCreates a complex unit by multiplying the receiving unit with another unit.\nfunc unitRaised(toPower: Int) -> HKUnit\nCreates a complex unit by raising the unit to the given power.\nfunc unitDivided(by: HKUnit) -> HKUnit\nCreates a complex unit by dividing the receiving unit by another unit."
  },
  {
    "title": "init(from:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkunit/1615733-init",
    "html": "Parameters\nstring\n\nA string representation of the unit, such as count, kg, or m/s^2.\n\nReturn Value\n\nThe unit object described by the string. If the string does not represent a valid unit, this method throws an exception (invalidArgumentException).\n\nDiscussion\n\nYou can create unit objects using a string representation of that unit, which is a convenient way to create complex, compound units. A few sample units are shown below.\n\nlet count = HKUnit(fromString: \"count\")\nlet mass = HKUnit(fromString: \"kg\")\nlet acceleration = HKUnit(fromString: \"m/s^2\")\n\n\nUnit strings use one or more characters to represent the International System of Units (SI). The unit strings for SI units are listed in Table 1 .\n\nTable 1 SI units\n\nString\n\n\t\n\nUnit name\n\n\t\n\nUnit type\n\n\n\n\ng\n\n\t\n\nGrams\n\n\t\n\nMass\n\n\n\n\nm\n\n\t\n\nMeters\n\n\t\n\nLength\n\n\n\n\nL or l\n\n\t\n\nLiters\n\n\t\n\nVolume\n\n\n\n\nPa\n\n\t\n\nPascals\n\n\t\n\nPressure\n\n\n\n\ns\n\n\t\n\nSeconds\n\n\t\n\nTime\n\n\n\n\nJ\n\n\t\n\nJoules\n\n\t\n\nEnergy\n\n\n\n\nK\n\n\t\n\nKelvin\n\n\t\n\nTemperature\n\n\n\n\nS\n\n\t\n\nSiemens\n\n\t\n\nElectrical conductance\n\n\n\n\nmol<molar mass>\n\n\t\n\nMoles\n\n\t\n\nMass\n\nFor molar mass, you must include the molar mass (in g/mol) of the item to be weighed. For example, for blood glucose samples, use mol<180.15588000005408>.\n\nEach SI unit can also take an optional prefix. Valid prefix strings are listed in Table 2.\n\nTable 2 SI unit prefixes\n\nPrefix\n\n\t\n\nName\n\n\t\n\nMultiplier\n\n\n\n\np\n\n\t\n\nPico-\n\n\t\n\n1.0e-12\n\n\n\n\nn\n\n\t\n\nNano-\n\n\t\n\n1.0e-9\n\n\n\n\nmc\n\n\t\n\nMicro-\n\n\t\n\n1.0e-6\n\n\n\n\nm\n\n\t\n\nMilli-\n\n\t\n\n0.001\n\n\n\n\nc\n\n\t\n\nCenti-\n\n\t\n\n0.01\n\n\n\n\nd\n\n\t\n\nDeci-\n\n\t\n\n0.1\n\n\n\n\nda\n\n\t\n\nDeca-\n\n\t\n\n10\n\n\n\n\nh\n\n\t\n\nHecto-\n\n\t\n\n100\n\n\n\n\nk\n\n\t\n\nKilo-\n\n\t\n\n1000\n\n\n\n\nM\n\n\t\n\nMega-\n\n\t\n\n1.0e6\n\n\n\n\nG\n\n\t\n\nGiga-\n\n\t\n\n1.0e9\n\n\n\n\nT\n\n\t\n\nTera-\n\n\t\n\n1.0e12\n\nThe HKUnit class also supports a number of non-SI units, as shown in Table 3.\n\nTable 3 Non-SI units\n\nString\n\n\t\n\nUnit name\n\n\t\n\nUnit type\n\n\n\n\noz\n\n\t\n\nOunces\n\n\t\n\nMass\n\n\n\n\nlb\n\n\t\n\nPounds\n\n\t\n\nMass\n\n\n\n\nst\n\n\t\n\nStones\n\n\t\n\nMass\n\n\n\n\nin\n\n\t\n\nInches\n\n\t\n\nLength\n\n\n\n\nft\n\n\t\n\nFeet\n\n\t\n\nLength\n\n\n\n\nyd\n\n\t\n\nYard\n\n\t\n\nLength\n\n\n\n\nmi\n\n\t\n\nMiles\n\n\t\n\nLength\n\n\n\n\nmmHg\n\n\t\n\nMillimeters of mercury\n\n\t\n\nPressure\n\n\n\n\ninHg\n\n\t\n\nInches of mercury\n\n\t\n\nPressure\n\n\n\n\ncmAq\n\n\t\n\nCentimeters of water\n\n\t\n\nPressure\n\n\n\n\natm\n\n\t\n\nAtmospheres\n\n\t\n\nPressure\n\n\n\n\nfl_oz_us\n\n\t\n\nU.S. fluid ounces\n\n\t\n\nVolume\n\n\n\n\nfl_oz_imp\n\n\t\n\nImperial fluid ounces\n\n\t\n\nVolume\n\n\n\n\ncup_us\n\n\t\n\nU.S. cup\n\n\t\n\nVolume\n\n\n\n\ncup_imp\n\n\t\n\nImperial cup\n\n\t\n\nVolume\n\n\n\n\npt_us\n\n\t\n\nU.S. pint\n\n\t\n\nVolume\n\n\n\n\npt_imp\n\n\t\n\nImperial pint\n\n\t\n\nVolume\n\n\n\n\nmin\n\n\t\n\nMinutes\n\n\t\n\nTime\n\n\n\n\nhr\n\n\t\n\nHours\n\n\t\n\nTime\n\n\n\n\nd\n\n\t\n\nDays\n\n\t\n\nTime\n\n\n\n\nHz\n\n\t\n\nHertz\n\n\t\n\nFrequency\n\n\n\n\ncal\n\n\t\n\nSmall calories\n\n\t\n\nEnergy\n\n\n\n\nCal\n\n\t\n\nLarge calories\n\n\t\n\nEnergy\n\n\n\n\nkcal\n\n\t\n\nKilocalories\n\n\t\n\nEnergy\n\n\n\n\ndegC\n\n\t\n\nDegrees Celsius\n\n\t\n\nTemperature\n\n\n\n\ndegF\n\n\t\n\nDegrees Fahrenheit\n\n\t\n\nTemperature\n\n\n\n\ndBASPL\n\n\t\n\nDecibel: Sound Pressure Level\n\n\t\n\nSound pressure\n\n\n\n\ndBHL\n\n\t\n\nDecibel: Hearing Level\n\n\t\n\nSound pressure\n\n\n\n\nIU\n\n\t\n\nInternational Unit\n\n\t\n\nDosage\n\n\n\n\ncount\n\n\t\n\nCount\n\n\t\n\nCount\n\n\n\n\n%\n\n\t\n\nPercent\n\n\t\n\nPercent\n\nOf these, the count and percent units deserve special attention. Count units represent raw scalar values. They can be used to represent the number of times an event occurs—for example, the number of steps the user has taken or the number of times the user has used their inhaler. They can also be used as part of a compound unit—for example, the beats portion of beats per minute.\n\nNote\n\nIn HealthKit quantities, count values are stored using double data types, even though they are often interpreted as integers.\n\nThe percent unit measures a value between 0.0 and 1.0. HealthKit uses percent units when measuring body fat percentage, oxygen saturation, blood alcohol content, and similar values.\n\nYou can create more complex, compound units by mathematically combining multiple individual units. Unit strings can include symbols that indicate multiplication (. or *) or division (/), or raise a unit to a power (^). In compound unit strings, multiplication is evaluated before anything else. Additionally, there can only be one division symbol in the string. Common compound units are shown in Table 4.\n\nTable 4 Compound units in HealthKit\n\nString\n\n\t\n\nUnit name\n\n\t\n\nUnit type\n\n\t\n\nSample type\n\n\n\n\ncount/min\n\n\t\n\nBeats per minute\n\n\t\n\nCount/time\n\n\t\n\nHeart rate\n\n\n\n\nmg/dl\n\n\t\n\nMilligrams per deciliter\n\n\t\n\nMass/volume\n\n\t\n\nBlood glucose level\n\n\n\n\nml/(kg*min)\n\n\t\n\nMilliliters per kilogram per minute\n\n\t\n\nVolume/(mass * time)\n\n\t\n\nVO2 Max\n\n\n\n\nL/min\n\n\t\n\nLiters per minute\n\n\t\n\nVolume/time\n\n\t\n\nPeak Expiratory Flow Rate\n\nSee Also\nWorking with units\nvar unitString: String\nA string representation of the unit object.\nfunc isNull() -> Bool\nReturns a Boolean value indicating whether the unit is null."
  },
  {
    "title": "Predicate format strings | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquery/predicate_format_strings",
    "html": "Topics\nObject keys\nlet HKPredicateKeyPathUUID: String\nThe key path for accessing the object’s UUID inside a predicate format string.\nlet HKPredicateKeyPathMetadata: String\nThe key path for accessing the object’s metadata dictionary inside a predicate format string.\nlet HKPredicateKeyPathSum: String\nThe key path for accessing the sum of a quantity series inside a predicate format string.\nQuantity sample keys\nlet HKPredicateKeyPathQuantity: String\nThe key path for accessing the sample’s quantity.\nCategory sample keys\nlet HKPredicateKeyPathCategoryValue: String\nThe key path for accessing the category sample’s value.\nCorrelation sample keys\nlet HKPredicateKeyPathCorrelation: String\nThe key path for accessing the object’s correlation inside a predicate format string.\nDevice and source keys\nlet HKPredicateKeyPathDevice: String\nThe key path for accessing the object’s device inside a predicate format string.\nlet HKPredicateKeyPathSource: String\nThe key path for accessing the object’s source inside a predicate format string.\nlet HKPredicateKeyPathSourceRevision: String\nThe key path for accessing the object’s source revision inside a predicate format string.\nStart and end date keys\nlet HKPredicateKeyPathStartDate: String\nThe key path for accessing the sample’s start date.\nlet HKPredicateKeyPathEndDate: String\nThe key path for accessing the sample’s end date.\nActivity summary keys\nlet HKPredicateKeyPathDateComponents: String\nThe key path for accessing an activity summary’s date components.\nDocument keys\nlet HKPredicateKeyPathCDAAuthorName: String\nThe key path for accessing the author’s name inside a predicate format string.\nlet HKPredicateKeyPathCDACustodianName: String\nThe key path for accessing the custodian’s name inside a predicate format string.\nlet HKPredicateKeyPathCDAPatientName: String\nThe key path for accessing the patient’s name inside a predicate format string.\nlet HKPredicateKeyPathCDATitle: String\nThe key path for accessing the document’s title inside a predicate format string.\nClinical record keys\nlet HKPredicateKeyPathClinicalRecordFHIRResourceIdentifier: String\nThe key path for accessing the clinical record’s Fast Healthcare Interoperability Resources (FHIR) identifier.\nlet HKPredicateKeyPathClinicalRecordFHIRResourceType: String\nThe key path for accessing the resource type of a Fast Healthcare Interoperability Resources (FHIR) record.\nWorkout keys\nlet HKPredicateKeyPathWorkout: String\nThe key path for accessing the object’s workout inside a predicate format string.\nlet HKPredicateKeyPathWorkoutType: String\nThe key path for accessing the workout’s type.\nlet HKPredicateKeyPathWorkoutDuration: String\nThe key path for accessing the workout’s duration.\nlet HKPredicateKeyPathWorkoutAverageQuantity: String\nThe key path for accessing workouts with a matching average quantity.\nlet HKPredicateKeyPathWorkoutMaximumQuantity: String\nThe key path for accessing workouts with a matching maximum quantity.\nlet HKPredicateKeyPathWorkoutMinimumQuantity: String\nThe key path for accessing workouts with a matching minimum quantity.\nlet HKPredicateKeyPathWorkoutSumQuantity: String\nThe key path for accessing workouts with a matching sum.\nlet HKPredicateKeyPathWorkoutTotalDistance: String\nThe key path for accessing the workout’s total distance.\nlet HKPredicateKeyPathWorkoutTotalEnergyBurned: String\nThe key path for accessing the workout’s total energy burned.\nlet HKPredicateKeyPathWorkoutTotalFlightsClimbed: String\nThe key path for accessing the total number of flights of stairs climbed during the workout.\nlet HKPredicateKeyPathWorkoutTotalSwimmingStrokeCount: String\nThe key path for accessing the number of strokes during a swimming workout.\nWorkout activity keys\nlet HKPredicateKeyPathWorkoutActivity: String\nThe key path for accessing a specific workout activity.\nlet HKPredicateKeyPathWorkoutActivityType: String\nThe key path for accessing activities that match a workout activity type.\nlet HKPredicateKeyPathWorkoutActivityStartDate: String\nThe key path for accessing activities with a matching start date.\nlet HKPredicateKeyPathWorkoutActivityEndDate: String\nThe key path for accessing activities with a matching end date.\nlet HKPredicateKeyPathWorkoutActivityDuration: String\nThe key path for accessing activities with a matching duration.\nlet HKPredicateKeyPathWorkoutActivityAverageQuantity: String\nThe key path for accessing activities with a matching average quantity.\nlet HKPredicateKeyPathWorkoutActivityMaximumQuantity: String\nThe key path for accessing activities with a matching maximum quantity.\nlet HKPredicateKeyPathWorkoutActivityMinimumQuantity: String\nThe key path for accessing activities with a matching minimum quantity.\nlet HKPredicateKeyPathWorkoutActivitySumQuantity: String\nThe key path for accessing activities with a matching sum."
  },
  {
    "title": "predicateForWorkoutActivities(operatorType:quantityType:maximumQuantity:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquery/3929716-predicateforworkoutactivities",
    "html": "Parameters\noperatorType\n\nThe operator type to use when comparing the maximum quantity.\n\nquantityType\n\nThe type of HKQuantitySample objects used to calculate the maximum quantity.\n\nmaximumQuantity\n\nThe target value for the maximum quantity.\n\nDiscussion\n\nUse this convenience method to create a predicate that matches workout activities with the specified maximum quantity. To use this predicate, call predicateForWorkouts(activityPredicate:) to wrap this predicate inside a workout predicate. You can then use the workout predicate in your query.\n\nThe following sample creates a predicate for workout activities with a maximum heart rate of 150 bmp or higher.\n\nlet quantityType = HKQuantityType(.heartRate)\n\n\nlet expectedQuantity =\nHKQuantity(unit: .count().unitDivided(by: .minute()),\n           doubleValue: 150.0)\n\n\nlet heartRatePredicate =\nHKQuery.predicateForWorkoutActivities(\n    operatorType: .greaterThanOrEqualTo,\n    quantityType: quantityType,\n    maximumQuantity:\n        expectedQuantity\n)\n\n\n// Wrap the activity predicate inside a workout predicate.\nlet workoutPredicate = HKQuery.predicateForWorkouts(activityPredicate: heartRatePredicate)\n\n\nFor more information on how HealthKit calculates statistics for HKWorkoutActivity objects, see statistics(for:).\n\nSee Also\nCreating workout activity predicates\nclass func predicateForWorkoutActivities(workoutActivityType: HKWorkoutActivityType) -> NSPredicate\nReturns a predicate for workout activities based on the type of activity performed.\nclass func predicateForWorkoutActivities(operatorType: NSComparisonPredicate.Operator, duration: TimeInterval) -> NSPredicate\nReturns a predicate for matching workout activities based on their duration.\nclass func predicateForWorkoutActivities(start: Date?, end: Date?, options: HKQueryOptions) -> NSPredicate\nReturns a predicate for workout activities that occur between the start and end date.\nclass func predicateForWorkoutActivities(operatorType: NSComparisonPredicate.Operator, quantityType: HKQuantityType, averageQuantity: HKQuantity) -> NSPredicate\nReturns a predicate for matching workout activities based the average value of an associated quantity type.\nclass func predicateForWorkoutActivities(operatorType: NSComparisonPredicate.Operator, quantityType: HKQuantityType, minimumQuantity: HKQuantity) -> NSPredicate\nReturns a predicate for matching workout activities based the minimum value of an associated quantity type.\nclass func predicateForWorkoutActivities(operatorType: NSComparisonPredicate.Operator, quantityType: HKQuantityType, sumQuantity: HKQuantity) -> NSPredicate\nReturns a predicate for matching workout activities based the sum of an associated quantity type."
  },
  {
    "title": "predicateForObjectsAssociated(electrocardiogram:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquery/3552037-predicateforobjectsassociated",
    "html": "Parameters\nelectrocardiogram\n\nThe target electrocardiogram.\n\nReturn Value\n\nA predicate that matches symptom samples associated with the specified electrocardiogram.\n\nDiscussion\n\nIf the HKElectrocardiogram sample’s symptomsStatus property is HKElectrocardiogram.SymptomsStatus.present, you can query for symptom samples associated with the electrocardiogram. See Symptom Type Identifiers for a complete list of symptom types.\n\nSee Also\nCreating electrocardiogram predicates\nclass func predicateForElectrocardiograms(classification: HKElectrocardiogram.Classification) -> NSPredicate\nReturns a predicate that matches electrocardiogram samples with the specified classification.\nclass func predicateForElectrocardiograms(symptomsStatus: HKElectrocardiogram.SymptomsStatus) -> NSPredicate\nReturns a predicate that matches electrocardiogram samples with the specified symptom status."
  },
  {
    "title": "predicateForWorkoutActivities(operatorType:quantityType:averageQuantity:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquery/3929715-predicateforworkoutactivities",
    "html": "Parameters\noperatorType\n\nThe operator type to use when comparing the average quantity.\n\nquantityType\n\nThe type of HKQuantitySample objects used to calculate the average quantity.\n\naverageQuantity\n\nThe target value for the average quantity.\n\nDiscussion\n\nUse this convenience method to create a predicate that matches workouts with the specified average quantity. To use this predicate, call predicateForWorkouts(activityPredicate:) to wrap this predicate inside a workout predicate. You can then use the workout predicate in your query.\n\nThe following sample creates a predicate for workout activities with an average heart rate of 150 bmp or higher.\n\nlet quantityType = HKQuantityType(.heartRate)\n\n\nlet expectedQuantity =\nHKQuantity(unit: .count().unitDivided(by: .minute()),\n           doubleValue: 150.0)\n\n\nlet heartRatePredicate =\nHKQuery.predicateForWorkoutActivities(\n    operatorType: .greaterThanOrEqualTo,\n    quantityType: quantityType,\n    averageQuantity:\n        expectedQuantity\n)\n\n\n// Wrap the activity predicate inside a workout predicate.\nlet workoutPredicate = HKQuery.predicateForWorkouts(activityPredicate: heartRatePredicate)\n\n\nFor more information on how HealthKit calculates statistics for HKWorkoutActivity objects, see statistics(for:).\n\nSee Also\nCreating workout activity predicates\nclass func predicateForWorkoutActivities(workoutActivityType: HKWorkoutActivityType) -> NSPredicate\nReturns a predicate for workout activities based on the type of activity performed.\nclass func predicateForWorkoutActivities(operatorType: NSComparisonPredicate.Operator, duration: TimeInterval) -> NSPredicate\nReturns a predicate for matching workout activities based on their duration.\nclass func predicateForWorkoutActivities(start: Date?, end: Date?, options: HKQueryOptions) -> NSPredicate\nReturns a predicate for workout activities that occur between the start and end date.\nclass func predicateForWorkoutActivities(operatorType: NSComparisonPredicate.Operator, quantityType: HKQuantityType, maximumQuantity: HKQuantity) -> NSPredicate\nReturns a predicate for matching workout activities based the maximum value of an associated quantity type.\nclass func predicateForWorkoutActivities(operatorType: NSComparisonPredicate.Operator, quantityType: HKQuantityType, minimumQuantity: HKQuantity) -> NSPredicate\nReturns a predicate for matching workout activities based the minimum value of an associated quantity type.\nclass func predicateForWorkoutActivities(operatorType: NSComparisonPredicate.Operator, quantityType: HKQuantityType, sumQuantity: HKQuantity) -> NSPredicate\nReturns a predicate for matching workout activities based the sum of an associated quantity type."
  },
  {
    "title": "HealthKit sort descriptors | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquery/healthkit_sort_descriptors",
    "html": "Topics\nSample sort identifiers\nlet HKSampleSortIdentifierStartDate: String\nA constant for sorting samples based on their start date.\nlet HKSampleSortIdentifierEndDate: String\nA constant for sorting samples based on their end date.\nWorkout sort identifiers\nlet HKWorkoutSortIdentifierDuration: String\nA constant for sorting workouts based on their duration.\nlet HKWorkoutSortIdentifierTotalDistance: String\nA constant for sorting workouts based on their total distance.\nlet HKWorkoutSortIdentifierTotalFlightsClimbed: String\nA constant for sorting workouts based on the number of flights of steps climbed.\nlet HKWorkoutSortIdentifierTotalEnergyBurned: String\nA constant for sorting workouts based on the total energy burned.\nlet HKWorkoutSortIdentifierTotalSwimmingStrokeCount: String\nA constant for sorting workouts based on the number of swimming strokes.\nSee Also\nCreating Sample Queries\nExecuting Sample Queries\nCreate, run, and sort sample queries.\ninit(sampleType: HKSampleType, predicate: NSPredicate?, limit: Int, sortDescriptors: [NSSortDescriptor]?, resultsHandler: (HKSampleQuery, [HKSample]?, Error?) -> Void)\nInstantiates and returns a sample query.\ninit(queryDescriptors: [HKQueryDescriptor], limit: Int, resultsHandler: (HKSampleQuery, [HKSample]?, Error?) -> Void)\nCreates a query for samples that match any of the descriptors you provided.\ninit(queryDescriptors: [HKQueryDescriptor], limit: Int, sortDescriptors: [NSSortDescriptor], resultsHandler: (HKSampleQuery, [HKSample]?, Error?) -> Void)\nCreates a query for samples that match any of the query descriptors you provided, sorted by the sort descriptors you provided.\nlet HKObjectQueryNoLimit: Int\nA value indicating that the query returns all the matching samples in the HealthKit store."
  },
  {
    "title": "bloodType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkbloodtypeobject/1614167-bloodtype",
    "html": "Discussion\n\nFor a list of possible blood types, see HKBloodType.\n\nTopics\nValid Blood Types\nenum HKBloodType\nConstants indicating the user’s blood type."
  },
  {
    "title": "predicateForWorkouts(with:totalFlightsClimbed:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquery/2867274-predicateforworkouts",
    "html": "Parameters\noperatorType\n\nThe operator to use when comparing the sample to the target number of flights climbed.\n\ntotalFlightsClimbed\n\nA quantity representing the target number of flights climbed.\n\nReturn Value\n\nA predicate that matches workouts based on the number of flights climbed.\n\nDiscussion\n\nThis convenience method creates a predicate that compares the total flights climbed during a workout with a target number of flights climbed. The following sample uses the convenience method and a predicate format string to create equivalent predicates.\n\nlet flightsClimbed = HKQuantity(unit: HKUnit.count(), doubleValue: 10.0)\nlet tenFlightsClimbed = HKQuery.predicateForWorkouts(with: .greaterThanOrEqualTo, totalFlightsClimbed: flightsClimbed)\n\n\n// Creating a predicate using a predicate format string.\nlet explicitTenFlightsClimbed = NSPredicate(format: \"%K >= %@\",\n                                            HKPredicateKeyPathWorkoutTotalFlightsClimbed,\n                                            flightsClimbed)\n\nSee Also\nCreating workout predicates\nclass func predicateForObjects(from: HKWorkout) -> NSPredicate\nReturns a predicate that matches any objects that have been associated with the provided workout.\nclass func predicateForWorkouts(with: HKWorkoutActivityType) -> NSPredicate\nReturns a predicate for matching workouts based on the type of activity.\nclass func predicateForWorkouts(activityPredicate: NSPredicate) -> NSPredicate\nReturns a predicate for matching workouts based on the associated workout activities.\nclass func predicateForWorkouts(with: NSComparisonPredicate.Operator, duration: TimeInterval) -> NSPredicate\nReturns a predicate for matching workouts based on their duration.\nclass func predicateForWorkouts(operatorType: NSComparisonPredicate.Operator, quantityType: HKQuantityType, averageQuantity: HKQuantity) -> NSPredicate\nReturns a predicate for matching workouts based the average value of an associated quantity type.\nclass func predicateForWorkouts(operatorType: NSComparisonPredicate.Operator, quantityType: HKQuantityType, maximumQuantity: HKQuantity) -> NSPredicate\nReturns a predicate for matching workout activities based the maximum value of an associated quantity type.\nclass func predicateForWorkouts(operatorType: NSComparisonPredicate.Operator, quantityType: HKQuantityType, minimumQuantity: HKQuantity) -> NSPredicate\nReturns a predicate for matching workout activities based the minimum value of an associated quantity type.\nclass func predicateForWorkouts(operatorType: NSComparisonPredicate.Operator, quantityType: HKQuantityType, sumQuantity: HKQuantity) -> NSPredicate\nReturns a predicate for matching workout activities based the sum of an associated quantity type.\nclass func predicateForWorkouts(with: NSComparisonPredicate.Operator, totalDistance: HKQuantity) -> NSPredicate\nReturns a predicate for matching workouts based on the total distance traveled.\nDeprecated\nclass func predicateForWorkouts(with: NSComparisonPredicate.Operator, totalEnergyBurned: HKQuantity) -> NSPredicate\nReturns a predicate for matching workouts based on the total energy burned.\nDeprecated\nclass func predicateForWorkouts(with: NSComparisonPredicate.Operator, totalSwimmingStrokeCount: HKQuantity) -> NSPredicate\nReturns a predicate that matches workout samples based on the number of strokes while swimming.\nDeprecated\nRelated Documentation\nlet HKPredicateKeyPathWorkoutTotalFlightsClimbed: String\nThe key path for accessing the total number of flights of stairs climbed during the workout."
  },
  {
    "title": "predicateForWorkoutActivities(start:end:options:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquery/3929719-predicateforworkoutactivities",
    "html": "Parameters\nstartDate\n\nThe start date for the target time interval.\n\nendDate\n\nThe end date for the target time interval.\n\noptions\n\nA constant that specifies how HealthKit compares the sample’s start and end date with the target time interval. For a list of possible values, see HKQueryOptions.\n\nDiscussion\n\nUse this convenience method to create a predicate that matches workout activities that occur between the specified start and end dates. To use this predicate, call predicateForWorkouts(activityPredicate:) to wrap this predicate inside a workout predicate. You can then use the workout predicate in your query.\n\nThe following sample creates a predicate for workout activities within the last 30 minutes.\n\nlet end = Date()\nlet start = end.advanced(by: -30.0 * 60.0)\n\n\nlet recentActivityPredicate =\nHKQuery.predicateForWorkoutActivities(start: start, end: end)\n\n\nlet workoutPredicate =\nHKQuery.predicateForWorkouts(activityPredicate: recentActivityPredicate)\n\n\nSee Also\nCreating workout activity predicates\nclass func predicateForWorkoutActivities(workoutActivityType: HKWorkoutActivityType) -> NSPredicate\nReturns a predicate for workout activities based on the type of activity performed.\nclass func predicateForWorkoutActivities(operatorType: NSComparisonPredicate.Operator, duration: TimeInterval) -> NSPredicate\nReturns a predicate for matching workout activities based on their duration.\nclass func predicateForWorkoutActivities(operatorType: NSComparisonPredicate.Operator, quantityType: HKQuantityType, averageQuantity: HKQuantity) -> NSPredicate\nReturns a predicate for matching workout activities based the average value of an associated quantity type.\nclass func predicateForWorkoutActivities(operatorType: NSComparisonPredicate.Operator, quantityType: HKQuantityType, maximumQuantity: HKQuantity) -> NSPredicate\nReturns a predicate for matching workout activities based the maximum value of an associated quantity type.\nclass func predicateForWorkoutActivities(operatorType: NSComparisonPredicate.Operator, quantityType: HKQuantityType, minimumQuantity: HKQuantity) -> NSPredicate\nReturns a predicate for matching workout activities based the minimum value of an associated quantity type.\nclass func predicateForWorkoutActivities(operatorType: NSComparisonPredicate.Operator, quantityType: HKQuantityType, sumQuantity: HKQuantity) -> NSPredicate\nReturns a predicate for matching workout activities based the sum of an associated quantity type."
  },
  {
    "title": "biologicalSex | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkbiologicalsexobject/1614157-biologicalsex",
    "html": "Discussion\n\nFor a list of possible biological sex values, see HKBiologicalSex.\n\nTopics\nValid Biological Sex Values\nenum HKBiologicalSex\nConstants indicating the user’s sex."
  },
  {
    "title": "predicateForWorkoutActivities(workoutActivityType:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquery/3929720-predicateforworkoutactivities",
    "html": "Parameters\nworkoutActivityType\n\nThe type of activity. For a list of valid workout activities, see HKWorkoutActivityType.\n\nDiscussion\n\nTo use this predicate, call predicateForWorkouts(activityPredicate:) to wrap this predicate inside a workout predicate. You can then use the workout predicate in your query.\n\nThe following example creates a predicate that matches workout activities with a HKWorkoutActivityType.running type.\n\nlet runningActivityPredicate =\nHKQuery.predicateForWorkoutActivities(workoutActivityType: .running)\n\n\nlet workoutPredicate =\nHKQuery.predicateForWorkouts(activityPredicate: runningActivityPredicate)\n\n\nSee Also\nCreating workout activity predicates\nclass func predicateForWorkoutActivities(operatorType: NSComparisonPredicate.Operator, duration: TimeInterval) -> NSPredicate\nReturns a predicate for matching workout activities based on their duration.\nclass func predicateForWorkoutActivities(start: Date?, end: Date?, options: HKQueryOptions) -> NSPredicate\nReturns a predicate for workout activities that occur between the start and end date.\nclass func predicateForWorkoutActivities(operatorType: NSComparisonPredicate.Operator, quantityType: HKQuantityType, averageQuantity: HKQuantity) -> NSPredicate\nReturns a predicate for matching workout activities based the average value of an associated quantity type.\nclass func predicateForWorkoutActivities(operatorType: NSComparisonPredicate.Operator, quantityType: HKQuantityType, maximumQuantity: HKQuantity) -> NSPredicate\nReturns a predicate for matching workout activities based the maximum value of an associated quantity type.\nclass func predicateForWorkoutActivities(operatorType: NSComparisonPredicate.Operator, quantityType: HKQuantityType, minimumQuantity: HKQuantity) -> NSPredicate\nReturns a predicate for matching workout activities based the minimum value of an associated quantity type.\nclass func predicateForWorkoutActivities(operatorType: NSComparisonPredicate.Operator, quantityType: HKQuantityType, sumQuantity: HKQuantity) -> NSPredicate\nReturns a predicate for matching workout activities based the sum of an associated quantity type."
  },
  {
    "title": "predicateForWorkouts(with:totalSwimmingStrokeCount:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquery/2344688-predicateforworkouts",
    "html": "Parameters\noperatorType\n\nThe operator to use when comparing the sample to the target number of flights climbed.\n\ntotalSwimmingStrokeCount\n\nA quantity representing the target stroke count.\n\nReturn Value\n\nA predicate that matches workouts based on the number of strokes while swimming.\n\nDiscussion\n\nThis convenience method creates a predicate that compares the number of swimming strokes during a workout with a target number. The following sample uses the convenience method and a predicate format string to create equivalent predicates.\n\n// Creating a predicate using the convenience method.\nlet swimmingStrokeCount = HKQuantity(unit: HKUnit.count(), doubleValue: 500.0)\nlet longSwim = HKQuery.predicateForWorkouts(with: .greaterThanOrEqualTo, totalSwimmingStrokeCount: swimmingStrokeCount)\n\n\n// Creating a predicate using a predicate format string.\nlet explicitLongSwim = NSPredicate(format: \"%K >= %@\",\n                                   HKPredicateKeyPathWorkoutTotalSwimmingStrokeCount,\n                                   swimmingStrokeCount)\n\nSee Also\nCreating workout predicates\nclass func predicateForObjects(from: HKWorkout) -> NSPredicate\nReturns a predicate that matches any objects that have been associated with the provided workout.\nclass func predicateForWorkouts(with: HKWorkoutActivityType) -> NSPredicate\nReturns a predicate for matching workouts based on the type of activity.\nclass func predicateForWorkouts(activityPredicate: NSPredicate) -> NSPredicate\nReturns a predicate for matching workouts based on the associated workout activities.\nclass func predicateForWorkouts(with: NSComparisonPredicate.Operator, duration: TimeInterval) -> NSPredicate\nReturns a predicate for matching workouts based on their duration.\nclass func predicateForWorkouts(operatorType: NSComparisonPredicate.Operator, quantityType: HKQuantityType, averageQuantity: HKQuantity) -> NSPredicate\nReturns a predicate for matching workouts based the average value of an associated quantity type.\nclass func predicateForWorkouts(operatorType: NSComparisonPredicate.Operator, quantityType: HKQuantityType, maximumQuantity: HKQuantity) -> NSPredicate\nReturns a predicate for matching workout activities based the maximum value of an associated quantity type.\nclass func predicateForWorkouts(operatorType: NSComparisonPredicate.Operator, quantityType: HKQuantityType, minimumQuantity: HKQuantity) -> NSPredicate\nReturns a predicate for matching workout activities based the minimum value of an associated quantity type.\nclass func predicateForWorkouts(operatorType: NSComparisonPredicate.Operator, quantityType: HKQuantityType, sumQuantity: HKQuantity) -> NSPredicate\nReturns a predicate for matching workout activities based the sum of an associated quantity type.\nclass func predicateForWorkouts(with: NSComparisonPredicate.Operator, totalDistance: HKQuantity) -> NSPredicate\nReturns a predicate for matching workouts based on the total distance traveled.\nDeprecated\nclass func predicateForWorkouts(with: NSComparisonPredicate.Operator, totalEnergyBurned: HKQuantity) -> NSPredicate\nReturns a predicate for matching workouts based on the total energy burned.\nDeprecated\nclass func predicateForWorkouts(with: NSComparisonPredicate.Operator, totalFlightsClimbed: HKQuantity) -> NSPredicate\nReturns a predicate that matches workout samples based on the number of flights climbed.\nDeprecated\nRelated Documentation\nlet HKPredicateKeyPathWorkoutTotalSwimmingStrokeCount: String\nThe key path for accessing the number of strokes during a swimming workout."
  },
  {
    "title": "predicateForWorkoutActivities(operatorType:duration:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquery/3929714-predicateforworkoutactivities",
    "html": "Parameters\noperatorType\n\nThe operator type to use when comparing the duration.\n\nduration\n\nThe target duration.\n\nReturn Value\n\nA predicate for matching workout activities based on their duration. This predicate works only on workout activities.\n\nDiscussion\n\nUse this convenience method to create a predicate that matches against an activity’s duration. To use this predicate, call predicateForWorkouts(activityPredicate:) to wrap this predicate inside a workout predicate. You can then use the workout predicate in your query.\n\nThe following sample creates a predicate for matching workout activities with a duration of 30 minutes or longer.\n\nlet longWorkoutActivityPredicate = HKQuery.predicateForWorkoutActivities(operatorType: .greaterThanOrEqualTo, duration: 60.0 * 30.0)\n\n\n\n\n// Wrap the activity predicate inside a workout predicate.\nlet workoutPredicate = HKQuery.predicateForWorkouts(activityPredicate: longWorkoutActivityPredicate)\n\n\nSee Also\nCreating workout activity predicates\nclass func predicateForWorkoutActivities(workoutActivityType: HKWorkoutActivityType) -> NSPredicate\nReturns a predicate for workout activities based on the type of activity performed.\nclass func predicateForWorkoutActivities(start: Date?, end: Date?, options: HKQueryOptions) -> NSPredicate\nReturns a predicate for workout activities that occur between the start and end date.\nclass func predicateForWorkoutActivities(operatorType: NSComparisonPredicate.Operator, quantityType: HKQuantityType, averageQuantity: HKQuantity) -> NSPredicate\nReturns a predicate for matching workout activities based the average value of an associated quantity type.\nclass func predicateForWorkoutActivities(operatorType: NSComparisonPredicate.Operator, quantityType: HKQuantityType, maximumQuantity: HKQuantity) -> NSPredicate\nReturns a predicate for matching workout activities based the maximum value of an associated quantity type.\nclass func predicateForWorkoutActivities(operatorType: NSComparisonPredicate.Operator, quantityType: HKQuantityType, minimumQuantity: HKQuantity) -> NSPredicate\nReturns a predicate for matching workout activities based the minimum value of an associated quantity type.\nclass func predicateForWorkoutActivities(operatorType: NSComparisonPredicate.Operator, quantityType: HKQuantityType, sumQuantity: HKQuantity) -> NSPredicate\nReturns a predicate for matching workout activities based the sum of an associated quantity type.\nRelated Documentation\nlet HKPredicateKeyPathWorkoutDuration: String\nThe key path for accessing the workout’s duration.\nvar duration: TimeInterval\nThe workout’s duration."
  },
  {
    "title": "predicateForWorkouts(operatorType:quantityType:sumQuantity:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquery/3929725-predicateforworkouts",
    "html": "Parameters\noperatorType\n\nThe operator type to use when comparing the sum.\n\nquantityType\n\nThe type of HKQuantitySample objects used to calculate the sum.\n\nsumQuantity\n\nThe target value for the sum.\n\nDiscussion\n\nUse this convenience method to create a predicate that matches workouts with the specified total value. For more information on how HealthKit calculates statistics for HKWorkoutActivity objects, see statistics(for:).\n\nThe following sample creates a predicate for workout activities with a total step count of 1000 or higher.\n\nlet quantityType = HKQuantityType(.stepCount)\n\n\nlet expectedQuantity = HKQuantity(unit: .count(),\n                                  doubleValue: 1000.0)\n\n\nlet stepCountPredicate = HKQuery.predicateForWorkouts(\n    operatorType: .greaterThanOrEqualTo,\n    quantityType: quantityType,\n    sumQuantity: expectedQuantity)\n\n\nSee Also\nCreating workout predicates\nclass func predicateForObjects(from: HKWorkout) -> NSPredicate\nReturns a predicate that matches any objects that have been associated with the provided workout.\nclass func predicateForWorkouts(with: HKWorkoutActivityType) -> NSPredicate\nReturns a predicate for matching workouts based on the type of activity.\nclass func predicateForWorkouts(activityPredicate: NSPredicate) -> NSPredicate\nReturns a predicate for matching workouts based on the associated workout activities.\nclass func predicateForWorkouts(with: NSComparisonPredicate.Operator, duration: TimeInterval) -> NSPredicate\nReturns a predicate for matching workouts based on their duration.\nclass func predicateForWorkouts(operatorType: NSComparisonPredicate.Operator, quantityType: HKQuantityType, averageQuantity: HKQuantity) -> NSPredicate\nReturns a predicate for matching workouts based the average value of an associated quantity type.\nclass func predicateForWorkouts(operatorType: NSComparisonPredicate.Operator, quantityType: HKQuantityType, maximumQuantity: HKQuantity) -> NSPredicate\nReturns a predicate for matching workout activities based the maximum value of an associated quantity type.\nclass func predicateForWorkouts(operatorType: NSComparisonPredicate.Operator, quantityType: HKQuantityType, minimumQuantity: HKQuantity) -> NSPredicate\nReturns a predicate for matching workout activities based the minimum value of an associated quantity type.\nclass func predicateForWorkouts(with: NSComparisonPredicate.Operator, totalDistance: HKQuantity) -> NSPredicate\nReturns a predicate for matching workouts based on the total distance traveled.\nDeprecated\nclass func predicateForWorkouts(with: NSComparisonPredicate.Operator, totalEnergyBurned: HKQuantity) -> NSPredicate\nReturns a predicate for matching workouts based on the total energy burned.\nDeprecated\nclass func predicateForWorkouts(with: NSComparisonPredicate.Operator, totalFlightsClimbed: HKQuantity) -> NSPredicate\nReturns a predicate that matches workout samples based on the number of flights climbed.\nDeprecated\nclass func predicateForWorkouts(with: NSComparisonPredicate.Operator, totalSwimmingStrokeCount: HKQuantity) -> NSPredicate\nReturns a predicate that matches workout samples based on the number of strokes while swimming.\nDeprecated"
  },
  {
    "title": "predicateForWorkouts(operatorType:quantityType:maximumQuantity:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquery/3929723-predicateforworkouts",
    "html": "Parameters\noperatorType\n\nThe operator type to use when comparing the maximum quantity.\n\nquantityType\n\nThe type of HKQuantitySample objects used to calculate the maximum quantity.\n\nmaximumQuantity\n\nThe target value for the maximum quantity.\n\nDiscussion\n\nUse this convenience method to create a predicate that matches workouts with the specified maximum quantity. For more information on how HealthKit calculates statistics for HKWorkoutActivity objects, see statistics(for:).\n\nThe following sample creates a predicate for workout activities with a maximum heart rate of 150 bmp or higher.\n\nlet quantityType = HKQuantityType(.heartRate)\n\n\nlet expectedQuantity =\nHKQuantity(unit: .count().unitDivided(by: .minute()),\n           doubleValue: 150.0)\n\n\nlet heartRatePredicate = HKQuery.predicateForWorkouts(\n    operatorType: .greaterThanOrEqualTo,\n    quantityType: quantityType,\n    maximumQuantity: expectedQuantity)\n}\n\n\nSee Also\nCreating workout predicates\nclass func predicateForObjects(from: HKWorkout) -> NSPredicate\nReturns a predicate that matches any objects that have been associated with the provided workout.\nclass func predicateForWorkouts(with: HKWorkoutActivityType) -> NSPredicate\nReturns a predicate for matching workouts based on the type of activity.\nclass func predicateForWorkouts(activityPredicate: NSPredicate) -> NSPredicate\nReturns a predicate for matching workouts based on the associated workout activities.\nclass func predicateForWorkouts(with: NSComparisonPredicate.Operator, duration: TimeInterval) -> NSPredicate\nReturns a predicate for matching workouts based on their duration.\nclass func predicateForWorkouts(operatorType: NSComparisonPredicate.Operator, quantityType: HKQuantityType, averageQuantity: HKQuantity) -> NSPredicate\nReturns a predicate for matching workouts based the average value of an associated quantity type.\nclass func predicateForWorkouts(operatorType: NSComparisonPredicate.Operator, quantityType: HKQuantityType, minimumQuantity: HKQuantity) -> NSPredicate\nReturns a predicate for matching workout activities based the minimum value of an associated quantity type.\nclass func predicateForWorkouts(operatorType: NSComparisonPredicate.Operator, quantityType: HKQuantityType, sumQuantity: HKQuantity) -> NSPredicate\nReturns a predicate for matching workout activities based the sum of an associated quantity type.\nclass func predicateForWorkouts(with: NSComparisonPredicate.Operator, totalDistance: HKQuantity) -> NSPredicate\nReturns a predicate for matching workouts based on the total distance traveled.\nDeprecated\nclass func predicateForWorkouts(with: NSComparisonPredicate.Operator, totalEnergyBurned: HKQuantity) -> NSPredicate\nReturns a predicate for matching workouts based on the total energy burned.\nDeprecated\nclass func predicateForWorkouts(with: NSComparisonPredicate.Operator, totalFlightsClimbed: HKQuantity) -> NSPredicate\nReturns a predicate that matches workout samples based on the number of flights climbed.\nDeprecated\nclass func predicateForWorkouts(with: NSComparisonPredicate.Operator, totalSwimmingStrokeCount: HKQuantity) -> NSPredicate\nReturns a predicate that matches workout samples based on the number of strokes while swimming.\nDeprecated"
  },
  {
    "title": "predicateForWorkouts(with:totalEnergyBurned:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquery/1614788-predicateforworkouts",
    "html": "Parameters\noperatorType\n\nThe operator type to use when comparing the total energy burned.\n\ntotalEnergyBurned\n\nThe target amount of energy burned.\n\nReturn Value\n\nA predicate for matching workouts based on the total energy burned. This predicate works only on workouts.\n\nDiscussion\n\nUse this convenience method to create a predicate that matches against a workout’s total energy burned. The following sample uses both the convenience method and a predicate format string to create equivalent predicates.\n\n// Predicate matching workouts burning 500 calories or more\nlet energyBurned = HKQuantity(unit: HKUnit.kilocalorieUnit(), doubleValue: 500)\nlet workout = HKQuery.predicateForWorkoutsWithOperatorType(\n    .GreaterThanOrEqualToPredicateOperatorType,\n    totalEnergyBurned: energyBurned)\n \n \nlet explicitWorkout = NSPredicate(format: \"%K >= %@\",\n                                  HKPredicateKeyPathWorkoutTotalEnergyBurned, energyBurned)\n\nSee Also\nCreating workout predicates\nclass func predicateForObjects(from: HKWorkout) -> NSPredicate\nReturns a predicate that matches any objects that have been associated with the provided workout.\nclass func predicateForWorkouts(with: HKWorkoutActivityType) -> NSPredicate\nReturns a predicate for matching workouts based on the type of activity.\nclass func predicateForWorkouts(activityPredicate: NSPredicate) -> NSPredicate\nReturns a predicate for matching workouts based on the associated workout activities.\nclass func predicateForWorkouts(with: NSComparisonPredicate.Operator, duration: TimeInterval) -> NSPredicate\nReturns a predicate for matching workouts based on their duration.\nclass func predicateForWorkouts(operatorType: NSComparisonPredicate.Operator, quantityType: HKQuantityType, averageQuantity: HKQuantity) -> NSPredicate\nReturns a predicate for matching workouts based the average value of an associated quantity type.\nclass func predicateForWorkouts(operatorType: NSComparisonPredicate.Operator, quantityType: HKQuantityType, maximumQuantity: HKQuantity) -> NSPredicate\nReturns a predicate for matching workout activities based the maximum value of an associated quantity type.\nclass func predicateForWorkouts(operatorType: NSComparisonPredicate.Operator, quantityType: HKQuantityType, minimumQuantity: HKQuantity) -> NSPredicate\nReturns a predicate for matching workout activities based the minimum value of an associated quantity type.\nclass func predicateForWorkouts(operatorType: NSComparisonPredicate.Operator, quantityType: HKQuantityType, sumQuantity: HKQuantity) -> NSPredicate\nReturns a predicate for matching workout activities based the sum of an associated quantity type.\nclass func predicateForWorkouts(with: NSComparisonPredicate.Operator, totalDistance: HKQuantity) -> NSPredicate\nReturns a predicate for matching workouts based on the total distance traveled.\nDeprecated\nclass func predicateForWorkouts(with: NSComparisonPredicate.Operator, totalFlightsClimbed: HKQuantity) -> NSPredicate\nReturns a predicate that matches workout samples based on the number of flights climbed.\nDeprecated\nclass func predicateForWorkouts(with: NSComparisonPredicate.Operator, totalSwimmingStrokeCount: HKQuantity) -> NSPredicate\nReturns a predicate that matches workout samples based on the number of strokes while swimming.\nDeprecated\nRelated Documentation\nlet HKPredicateKeyPathWorkoutTotalEnergyBurned: String\nThe key path for accessing the workout’s total energy burned.\nvar totalEnergyBurned: HKQuantity?\nThe total active energy burned during the workout."
  },
  {
    "title": "predicateForWorkouts(with:totalDistance:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquery/1614779-predicateforworkouts",
    "html": "Parameters\noperatorType\n\nThe operator type to use when comparing the total distance.\n\ntotalDistance\n\nThe target distance.\n\nReturn Value\n\nA predicate for matching workouts based on the total distance traveled. This predicate works only on workouts.\n\nDiscussion\n\nUse this convenience method to create a predicate that matches against a workout’s total distance. The following sample uses both the convenience method and a predicate format string to create equivalent predicates.\n\n// Predicate matching workouts covering 6.5 miles or more.\nlet distance = HKQuantity(unit: HKUnit.mileUnit(), doubleValue: 6.5)\nlet workout = HKQuery.predicateForWorkoutsWithOperatorType(\n    .GreaterThanOrEqualToPredicateOperatorType,\n    totalDistance: distance)\n \n \nlet explicitWorkout = NSPredicate(format: \"%K >= %@\",\n                                  HKPredicateKeyPathWorkoutTotalDistance, distance)\n\nSee Also\nCreating workout predicates\nclass func predicateForObjects(from: HKWorkout) -> NSPredicate\nReturns a predicate that matches any objects that have been associated with the provided workout.\nclass func predicateForWorkouts(with: HKWorkoutActivityType) -> NSPredicate\nReturns a predicate for matching workouts based on the type of activity.\nclass func predicateForWorkouts(activityPredicate: NSPredicate) -> NSPredicate\nReturns a predicate for matching workouts based on the associated workout activities.\nclass func predicateForWorkouts(with: NSComparisonPredicate.Operator, duration: TimeInterval) -> NSPredicate\nReturns a predicate for matching workouts based on their duration.\nclass func predicateForWorkouts(operatorType: NSComparisonPredicate.Operator, quantityType: HKQuantityType, averageQuantity: HKQuantity) -> NSPredicate\nReturns a predicate for matching workouts based the average value of an associated quantity type.\nclass func predicateForWorkouts(operatorType: NSComparisonPredicate.Operator, quantityType: HKQuantityType, maximumQuantity: HKQuantity) -> NSPredicate\nReturns a predicate for matching workout activities based the maximum value of an associated quantity type.\nclass func predicateForWorkouts(operatorType: NSComparisonPredicate.Operator, quantityType: HKQuantityType, minimumQuantity: HKQuantity) -> NSPredicate\nReturns a predicate for matching workout activities based the minimum value of an associated quantity type.\nclass func predicateForWorkouts(operatorType: NSComparisonPredicate.Operator, quantityType: HKQuantityType, sumQuantity: HKQuantity) -> NSPredicate\nReturns a predicate for matching workout activities based the sum of an associated quantity type.\nclass func predicateForWorkouts(with: NSComparisonPredicate.Operator, totalEnergyBurned: HKQuantity) -> NSPredicate\nReturns a predicate for matching workouts based on the total energy burned.\nDeprecated\nclass func predicateForWorkouts(with: NSComparisonPredicate.Operator, totalFlightsClimbed: HKQuantity) -> NSPredicate\nReturns a predicate that matches workout samples based on the number of flights climbed.\nDeprecated\nclass func predicateForWorkouts(with: NSComparisonPredicate.Operator, totalSwimmingStrokeCount: HKQuantity) -> NSPredicate\nReturns a predicate that matches workout samples based on the number of strokes while swimming.\nDeprecated\nRelated Documentation\nvar totalDistance: HKQuantity?\nThe total distance traveled during the workout.\nlet HKPredicateKeyPathWorkoutTotalDistance: String\nThe key path for accessing the workout’s total distance."
  },
  {
    "title": "predicateForWorkouts(operatorType:quantityType:minimumQuantity:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquery/3929724-predicateforworkouts",
    "html": "Parameters\noperatorType\n\nThe operator type to use when comparing the minimum quantity.\n\nquantityType\n\nThe type of HKQuantitySample objects used to calculate the minimum quantity.\n\nminimumQuantity\n\nThe target value for the minimum quantity.\n\nDiscussion\n\nUse this convenience method to create a predicate that matches workouts with the specified minimum quantity. For more information on how HealthKit calculates statistics for HKWorkoutActivity objects, see statistics(for:).\n\nThe following sample creates a predicate for workout activities with a minimum heart rate of 150 bmp or higher.\n\nlet quantityType = HKQuantityType(.heartRate)\n\n\nlet expectedQuantity =\nHKQuantity(unit: .count().unitDivided(by: .minute()),\n           doubleValue: 150.0)\n\n\nlet heartRatePredicate = HKQuery.predicateForWorkouts(\n    operatorType: .greaterThanOrEqualTo,\n    quantityType: quantityType,\n    minimumQuantity: expectedQuantity)\n\n\nSee Also\nCreating workout predicates\nclass func predicateForObjects(from: HKWorkout) -> NSPredicate\nReturns a predicate that matches any objects that have been associated with the provided workout.\nclass func predicateForWorkouts(with: HKWorkoutActivityType) -> NSPredicate\nReturns a predicate for matching workouts based on the type of activity.\nclass func predicateForWorkouts(activityPredicate: NSPredicate) -> NSPredicate\nReturns a predicate for matching workouts based on the associated workout activities.\nclass func predicateForWorkouts(with: NSComparisonPredicate.Operator, duration: TimeInterval) -> NSPredicate\nReturns a predicate for matching workouts based on their duration.\nclass func predicateForWorkouts(operatorType: NSComparisonPredicate.Operator, quantityType: HKQuantityType, averageQuantity: HKQuantity) -> NSPredicate\nReturns a predicate for matching workouts based the average value of an associated quantity type.\nclass func predicateForWorkouts(operatorType: NSComparisonPredicate.Operator, quantityType: HKQuantityType, maximumQuantity: HKQuantity) -> NSPredicate\nReturns a predicate for matching workout activities based the maximum value of an associated quantity type.\nclass func predicateForWorkouts(operatorType: NSComparisonPredicate.Operator, quantityType: HKQuantityType, sumQuantity: HKQuantity) -> NSPredicate\nReturns a predicate for matching workout activities based the sum of an associated quantity type.\nclass func predicateForWorkouts(with: NSComparisonPredicate.Operator, totalDistance: HKQuantity) -> NSPredicate\nReturns a predicate for matching workouts based on the total distance traveled.\nDeprecated\nclass func predicateForWorkouts(with: NSComparisonPredicate.Operator, totalEnergyBurned: HKQuantity) -> NSPredicate\nReturns a predicate for matching workouts based on the total energy burned.\nDeprecated\nclass func predicateForWorkouts(with: NSComparisonPredicate.Operator, totalFlightsClimbed: HKQuantity) -> NSPredicate\nReturns a predicate that matches workout samples based on the number of flights climbed.\nDeprecated\nclass func predicateForWorkouts(with: NSComparisonPredicate.Operator, totalSwimmingStrokeCount: HKQuantity) -> NSPredicate\nReturns a predicate that matches workout samples based on the number of strokes while swimming.\nDeprecated"
  },
  {
    "title": "predicateForWorkouts(with:duration:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquery/1614772-predicateforworkouts",
    "html": "Parameters\noperatorType\n\nThe operator type to use when comparing the duration.\n\nduration\n\nThe target duration.\n\nReturn Value\n\nA predicate for matching workouts based on their duration. This predicate works only on workouts.\n\nDiscussion\n\nUse this convenience method to create a predicate that matches against a workout’s duration. The following sample uses both the convenience method and a predicate format string to create equivalent predicates.\n\n// Predicate matching workouts equal to or longer than 30 minutes\nlet workout = HKQuery.predicateForWorkoutsWithOperatorType(\n    .GreaterThanOrEqualToPredicateOperatorType,\n    duration: 60.0 * 30.0)\n \n \nlet explicitWorkout = NSPredicate(format: \"%K >= %d\",\n                                  HKPredicateKeyPathWorkoutDuration, 60 * 30)\n\nSee Also\nCreating workout predicates\nclass func predicateForObjects(from: HKWorkout) -> NSPredicate\nReturns a predicate that matches any objects that have been associated with the provided workout.\nclass func predicateForWorkouts(with: HKWorkoutActivityType) -> NSPredicate\nReturns a predicate for matching workouts based on the type of activity.\nclass func predicateForWorkouts(activityPredicate: NSPredicate) -> NSPredicate\nReturns a predicate for matching workouts based on the associated workout activities.\nclass func predicateForWorkouts(operatorType: NSComparisonPredicate.Operator, quantityType: HKQuantityType, averageQuantity: HKQuantity) -> NSPredicate\nReturns a predicate for matching workouts based the average value of an associated quantity type.\nclass func predicateForWorkouts(operatorType: NSComparisonPredicate.Operator, quantityType: HKQuantityType, maximumQuantity: HKQuantity) -> NSPredicate\nReturns a predicate for matching workout activities based the maximum value of an associated quantity type.\nclass func predicateForWorkouts(operatorType: NSComparisonPredicate.Operator, quantityType: HKQuantityType, minimumQuantity: HKQuantity) -> NSPredicate\nReturns a predicate for matching workout activities based the minimum value of an associated quantity type.\nclass func predicateForWorkouts(operatorType: NSComparisonPredicate.Operator, quantityType: HKQuantityType, sumQuantity: HKQuantity) -> NSPredicate\nReturns a predicate for matching workout activities based the sum of an associated quantity type.\nclass func predicateForWorkouts(with: NSComparisonPredicate.Operator, totalDistance: HKQuantity) -> NSPredicate\nReturns a predicate for matching workouts based on the total distance traveled.\nDeprecated\nclass func predicateForWorkouts(with: NSComparisonPredicate.Operator, totalEnergyBurned: HKQuantity) -> NSPredicate\nReturns a predicate for matching workouts based on the total energy burned.\nDeprecated\nclass func predicateForWorkouts(with: NSComparisonPredicate.Operator, totalFlightsClimbed: HKQuantity) -> NSPredicate\nReturns a predicate that matches workout samples based on the number of flights climbed.\nDeprecated\nclass func predicateForWorkouts(with: NSComparisonPredicate.Operator, totalSwimmingStrokeCount: HKQuantity) -> NSPredicate\nReturns a predicate that matches workout samples based on the number of strokes while swimming.\nDeprecated\nRelated Documentation\nlet HKPredicateKeyPathWorkoutDuration: String\nThe key path for accessing the workout’s duration.\nvar duration: TimeInterval\nThe workout’s duration."
  },
  {
    "title": "predicateForWorkouts(activityPredicate:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquery/3929721-predicateforworkouts",
    "html": "Parameters\nactivityPredicate\n\nA predicate that matches a particular set of workout activities.\n\nDiscussion\n\nThe following example creates a predicate that matches workouts with an associated HKWorkoutActivityType.running activity type.\n\nlet runningActivityPredicate =\nHKQuery.predicateForWorkoutActivities(workoutActivityType: .running)\n\n\nlet workoutPredicate =\nHKQuery.predicateForWorkouts(activityPredicate: runningActivityPredicate)\n\n\nSee Also\nCreating workout predicates\nclass func predicateForObjects(from: HKWorkout) -> NSPredicate\nReturns a predicate that matches any objects that have been associated with the provided workout.\nclass func predicateForWorkouts(with: HKWorkoutActivityType) -> NSPredicate\nReturns a predicate for matching workouts based on the type of activity.\nclass func predicateForWorkouts(with: NSComparisonPredicate.Operator, duration: TimeInterval) -> NSPredicate\nReturns a predicate for matching workouts based on their duration.\nclass func predicateForWorkouts(operatorType: NSComparisonPredicate.Operator, quantityType: HKQuantityType, averageQuantity: HKQuantity) -> NSPredicate\nReturns a predicate for matching workouts based the average value of an associated quantity type.\nclass func predicateForWorkouts(operatorType: NSComparisonPredicate.Operator, quantityType: HKQuantityType, maximumQuantity: HKQuantity) -> NSPredicate\nReturns a predicate for matching workout activities based the maximum value of an associated quantity type.\nclass func predicateForWorkouts(operatorType: NSComparisonPredicate.Operator, quantityType: HKQuantityType, minimumQuantity: HKQuantity) -> NSPredicate\nReturns a predicate for matching workout activities based the minimum value of an associated quantity type.\nclass func predicateForWorkouts(operatorType: NSComparisonPredicate.Operator, quantityType: HKQuantityType, sumQuantity: HKQuantity) -> NSPredicate\nReturns a predicate for matching workout activities based the sum of an associated quantity type.\nclass func predicateForWorkouts(with: NSComparisonPredicate.Operator, totalDistance: HKQuantity) -> NSPredicate\nReturns a predicate for matching workouts based on the total distance traveled.\nDeprecated\nclass func predicateForWorkouts(with: NSComparisonPredicate.Operator, totalEnergyBurned: HKQuantity) -> NSPredicate\nReturns a predicate for matching workouts based on the total energy burned.\nDeprecated\nclass func predicateForWorkouts(with: NSComparisonPredicate.Operator, totalFlightsClimbed: HKQuantity) -> NSPredicate\nReturns a predicate that matches workout samples based on the number of flights climbed.\nDeprecated\nclass func predicateForWorkouts(with: NSComparisonPredicate.Operator, totalSwimmingStrokeCount: HKQuantity) -> NSPredicate\nReturns a predicate that matches workout samples based on the number of strokes while swimming.\nDeprecated"
  },
  {
    "title": "predicateForVerifiableClinicalRecords(withRelevantDateWithin:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquery/3801679-predicateforverifiableclinicalre",
    "html": "Parameters\ndateInterval\n\nThe start and end date for the predicate.\n\nDiscussion\n\nThe resulting predicate matches HKVerifiableClinicalRecord instances that have a relevantDate property within the specified date interval.\n\nSee Also\nCreating clinical record predicates\nclass func predicateForClinicalRecords(from: HKSource, fhirResourceType: HKFHIRResourceType, identifier: String) -> NSPredicate\nReturns a predicate for a specific FHIR resource.\nclass func predicateForClinicalRecords(withFHIRResourceType: HKFHIRResourceType) -> NSPredicate\nReturns a predicate for a specific FHIR type."
  },
  {
    "title": "predicateForWorkouts(with:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquery/1614787-predicateforworkouts",
    "html": "Parameters\nworkoutActivityType\n\nThe type of activity. For a list of valid workout activities, see HKWorkoutActivityType.\n\nReturn Value\n\nA predicate for matching workouts based on the type of activity.\n\nDiscussion\n\nUse this convenience method to create a predicate that matches workouts based on their activity. The following sample uses both the convenience method and a predicate format string to create equivalent predicates.\n\nlet workout = HKQuery.predicateForWorkoutsWithWorkoutActivityType(.Curling)\n \n \nlet explicitWorkout = NSPredicate(format: \"%K == %d\",\n                                  HKPredicateKeyPathWorkoutType,\n                                  HKWorkoutActivityType.Curling.rawValue)\n\nSee Also\nCreating workout predicates\nclass func predicateForObjects(from: HKWorkout) -> NSPredicate\nReturns a predicate that matches any objects that have been associated with the provided workout.\nclass func predicateForWorkouts(activityPredicate: NSPredicate) -> NSPredicate\nReturns a predicate for matching workouts based on the associated workout activities.\nclass func predicateForWorkouts(with: NSComparisonPredicate.Operator, duration: TimeInterval) -> NSPredicate\nReturns a predicate for matching workouts based on their duration.\nclass func predicateForWorkouts(operatorType: NSComparisonPredicate.Operator, quantityType: HKQuantityType, averageQuantity: HKQuantity) -> NSPredicate\nReturns a predicate for matching workouts based the average value of an associated quantity type.\nclass func predicateForWorkouts(operatorType: NSComparisonPredicate.Operator, quantityType: HKQuantityType, maximumQuantity: HKQuantity) -> NSPredicate\nReturns a predicate for matching workout activities based the maximum value of an associated quantity type.\nclass func predicateForWorkouts(operatorType: NSComparisonPredicate.Operator, quantityType: HKQuantityType, minimumQuantity: HKQuantity) -> NSPredicate\nReturns a predicate for matching workout activities based the minimum value of an associated quantity type.\nclass func predicateForWorkouts(operatorType: NSComparisonPredicate.Operator, quantityType: HKQuantityType, sumQuantity: HKQuantity) -> NSPredicate\nReturns a predicate for matching workout activities based the sum of an associated quantity type.\nclass func predicateForWorkouts(with: NSComparisonPredicate.Operator, totalDistance: HKQuantity) -> NSPredicate\nReturns a predicate for matching workouts based on the total distance traveled.\nDeprecated\nclass func predicateForWorkouts(with: NSComparisonPredicate.Operator, totalEnergyBurned: HKQuantity) -> NSPredicate\nReturns a predicate for matching workouts based on the total energy burned.\nDeprecated\nclass func predicateForWorkouts(with: NSComparisonPredicate.Operator, totalFlightsClimbed: HKQuantity) -> NSPredicate\nReturns a predicate that matches workout samples based on the number of flights climbed.\nDeprecated\nclass func predicateForWorkouts(with: NSComparisonPredicate.Operator, totalSwimmingStrokeCount: HKQuantity) -> NSPredicate\nReturns a predicate that matches workout samples based on the number of strokes while swimming.\nDeprecated\nRelated Documentation\nvar workoutActivityType: HKWorkoutActivityType\nThe type of activity performed during the workout.\nlet HKPredicateKeyPathWorkoutType: String\nThe key path for accessing the workout’s type."
  },
  {
    "title": "predicateForClinicalRecords(withFHIRResourceType:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquery/2999414-predicateforclinicalrecords",
    "html": "See Also\nCreating clinical record predicates\nclass func predicateForClinicalRecords(from: HKSource, fhirResourceType: HKFHIRResourceType, identifier: String) -> NSPredicate\nReturns a predicate for a specific FHIR resource.\nclass func predicateForVerifiableClinicalRecords(withRelevantDateWithin: DateInterval) -> NSPredicate\nReturns a predicate that finds verifiable health records with a relevant date within the specified range."
  },
  {
    "title": "kilocalorie() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkunit/1615576-kilocalorie",
    "html": "Return Value\n\nA HealthKit unit for measuring energy in kilocalories.\n\nDiscussion\n\nThe kilocalorie is used to measure food energy in many regions.\n\nSee Also\nConstructing energy units\nclass func joule() -> Self\nReturns a HealthKit unit for measuring energy in joules.\nclass func jouleUnit(with: HKMetricPrefix) -> Self\nReturns a HealthKit unit for measuring energy, using joule units with the provided prefix.\nclass func largeCalorie() -> Self\nReturns a HealthKit unit for measuring energy in large calories (Cal).\nclass func smallCalorie() -> Self\nReturns a HealthKit unit for measuring energy in small calories (cal).\nclass func calorie() -> Self\nReturns a HealthKit unit for measuring energy in calories."
  },
  {
    "title": "atmosphere() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkunit/1615672-atmosphere",
    "html": "Return Value\n\nA HealthKit unit for measuring pressure in atmospheres.\n\nDiscussion\n\nOne atmosphere is the average atmospheric pressure at sea level.\n\nSee Also\nConstructing pressure units\nclass func pascal() -> Self\nReturns a HealthKit unit for measuring pressure in pascals.\nclass func pascalUnit(with: HKMetricPrefix) -> Self\nReturns a HealthKit unit for measuring pressure, using pascal units with the provided prefix.\nclass func millimeterOfMercury() -> Self\nReturns a HealthKit unit for measuring pressure in millimeters of mercury.\nclass func inchesOfMercury() -> Self\nReturns a HealthKit unit for measuring pressure in inches of mercury.\nclass func centimeterOfWater() -> Self\nReturns a HealthKit unit for measuring pressure in centimeters of water.\nclass func decibelAWeightedSoundPressureLevel() -> Self\nReturns a HealthKit unit for measuring the difference between the local pressure and the ambient atmospheric pressure caused by sound."
  },
  {
    "title": "secondUnit(with:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkunit/1615644-secondunit",
    "html": "Parameters\nprefix\n\nA valid metric prefix value. For the complete list of prefix values, see HKMetricPrefix.\n\nReturn Value\n\nA HealthKit unit for measuring time based on seconds and the provided prefix.\n\nDiscussion\n\nThis method is used to create prefixed versions of seconds. Common uses include creating millisecond units, as shown below.\n\nlet ms = HKUnit.secondUnitWithMetricPrefix(.Milli)\n\nSee Also\nConstructing time units\nclass func second() -> Self\nReturns a HealthKit unit for measuring time in seconds.\nclass func minute() -> Self\nReturns a HealthKit unit for measuring time in minutes.\nclass func hour() -> Self\nReturns a HealthKit unit for measuring time in hours.\nclass func day() -> Self\nReturns a HealthKit unit for measuring time in days."
  },
  {
    "title": "centimeterOfWater() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkunit/1615036-centimeterofwater",
    "html": "Return Value\n\nA HealthKit unit for measuring pressure in centimeters of water.\n\nDiscussion\n\nOne centimeter of water is the pressure needed to raise a column of water by 1 centimeter.\n\nSee Also\nConstructing pressure units\nclass func pascal() -> Self\nReturns a HealthKit unit for measuring pressure in pascals.\nclass func pascalUnit(with: HKMetricPrefix) -> Self\nReturns a HealthKit unit for measuring pressure, using pascal units with the provided prefix.\nclass func millimeterOfMercury() -> Self\nReturns a HealthKit unit for measuring pressure in millimeters of mercury.\nclass func inchesOfMercury() -> Self\nReturns a HealthKit unit for measuring pressure in inches of mercury.\nclass func atmosphere() -> Self\nReturns a HealthKit unit for measuring pressure in atmospheres.\nclass func decibelAWeightedSoundPressureLevel() -> Self\nReturns a HealthKit unit for measuring the difference between the local pressure and the ambient atmospheric pressure caused by sound."
  },
  {
    "title": "decibelAWeightedSoundPressureLevel() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkunit/3081273-decibelaweightedsoundpressurelev",
    "html": "See Also\nConstructing pressure units\nclass func pascal() -> Self\nReturns a HealthKit unit for measuring pressure in pascals.\nclass func pascalUnit(with: HKMetricPrefix) -> Self\nReturns a HealthKit unit for measuring pressure, using pascal units with the provided prefix.\nclass func millimeterOfMercury() -> Self\nReturns a HealthKit unit for measuring pressure in millimeters of mercury.\nclass func inchesOfMercury() -> Self\nReturns a HealthKit unit for measuring pressure in inches of mercury.\nclass func centimeterOfWater() -> Self\nReturns a HealthKit unit for measuring pressure in centimeters of water.\nclass func atmosphere() -> Self\nReturns a HealthKit unit for measuring pressure in atmospheres.\nRelated Documentation\nclass func decibelHearingLevel() -> Self\nReturns a HealthKit unit for measuring the intensity of a sound."
  },
  {
    "title": "stone() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkunit/1615318-stone",
    "html": "Return Value\n\nA HealthKit unit for measuring mass in stones.\n\nSee Also\nConstructing mass units\nclass func gram() -> Self\nReturns a HealthKit unit for measuring mass in grams.\nclass func gramUnit(with: HKMetricPrefix) -> Self\nReturns a HealthKit unit for measuring mass, using gram units with the provided prefix.\nclass func ounce() -> Self\nReturns a HealthKit unit for measuring mass in ounces.\nclass func pound() -> Self\nReturns a HealthKit unit for measuring mass in pounds.\nclass func moleUnit(withMolarMass: Double) -> Self\nReturns a HealthKit unit for measuring mass in moles for a given molar mass.\nclass func moleUnit(with: HKMetricPrefix, molarMass: Double) -> Self\nReturns a HealthKit unit for measuring mass in moles, with the given prefix and molar mass.\nvar HKUnitMolarMassBloodGlucose: Double\nThe molecular mass of blood glucose, typically used to create mole units for blood glucose."
  },
  {
    "title": "fluidOunceUS() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkunit/1615310-fluidounceus",
    "html": "Return Value\n\nA HealthKit unit for measuring volume in US fluid ounces.\n\nSee Also\nConstructing volume units\nclass func liter() -> Self\nReturns a HealthKit unit for measuring volume in liters.\nclass func literUnit(with: HKMetricPrefix) -> Self\nReturns a HealthKit unit for measuring volume, using liter units with the provided prefix.\nclass func fluidOunceImperial() -> Self\nReturns a HealthKit unit for measuring volume in imperial fluid ounces.\nclass func cupUS() -> Self\nReturns a HealthKit unit for measuring volume in US cups.\nclass func cupImperial() -> Self\nReturns a HealthKit unit for measuring volume in imperial cups.\nclass func pintUS() -> Self\nReturns a HealthKit unit for measuring volume in US pints.\nclass func pintImperial() -> Self\nReturns a HealthKit unit for measuring volume in imperial pints."
  },
  {
    "title": "fluidOunceImperial() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkunit/1615614-fluidounceimperial",
    "html": "Return Value\n\nA HealthKit unit for measuring volume in imperial fluid ounces.\n\nSee Also\nConstructing volume units\nclass func liter() -> Self\nReturns a HealthKit unit for measuring volume in liters.\nclass func literUnit(with: HKMetricPrefix) -> Self\nReturns a HealthKit unit for measuring volume, using liter units with the provided prefix.\nclass func fluidOunceUS() -> Self\nReturns a HealthKit unit for measuring volume in US fluid ounces.\nclass func cupUS() -> Self\nReturns a HealthKit unit for measuring volume in US cups.\nclass func cupImperial() -> Self\nReturns a HealthKit unit for measuring volume in imperial cups.\nclass func pintUS() -> Self\nReturns a HealthKit unit for measuring volume in US pints.\nclass func pintImperial() -> Self\nReturns a HealthKit unit for measuring volume in imperial pints."
  },
  {
    "title": "liter() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkunit/1615768-liter",
    "html": "Return Value\n\nA HealthKit unit for measuring volume in liters.\n\nSee Also\nConstructing volume units\nclass func literUnit(with: HKMetricPrefix) -> Self\nReturns a HealthKit unit for measuring volume, using liter units with the provided prefix.\nclass func fluidOunceUS() -> Self\nReturns a HealthKit unit for measuring volume in US fluid ounces.\nclass func fluidOunceImperial() -> Self\nReturns a HealthKit unit for measuring volume in imperial fluid ounces.\nclass func cupUS() -> Self\nReturns a HealthKit unit for measuring volume in US cups.\nclass func cupImperial() -> Self\nReturns a HealthKit unit for measuring volume in imperial cups.\nclass func pintUS() -> Self\nReturns a HealthKit unit for measuring volume in US pints.\nclass func pintImperial() -> Self\nReturns a HealthKit unit for measuring volume in imperial pints."
  },
  {
    "title": "literUnit(with:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkunit/1615369-literunit",
    "html": "Parameters\nprefix\n\nA valid metric prefix value. For the complete list of prefix values, see HKMetricPrefix.\n\nReturn Value\n\nA HealthKit unit for measuring volume based on liters and the provided prefix.\n\nDiscussion\n\nThis method is used to create prefixed versions of liters, typically milliliter units, as shown below.\n\nlet ml = HKUnit.literUnitWithMetricPrefix(.Milli)\nlet ml = HKUnit.literUnitWithMetricPrefix(.Milli)\n\nSee Also\nConstructing volume units\nclass func liter() -> Self\nReturns a HealthKit unit for measuring volume in liters.\nclass func fluidOunceUS() -> Self\nReturns a HealthKit unit for measuring volume in US fluid ounces.\nclass func fluidOunceImperial() -> Self\nReturns a HealthKit unit for measuring volume in imperial fluid ounces.\nclass func cupUS() -> Self\nReturns a HealthKit unit for measuring volume in US cups.\nclass func cupImperial() -> Self\nReturns a HealthKit unit for measuring volume in imperial cups.\nclass func pintUS() -> Self\nReturns a HealthKit unit for measuring volume in US pints.\nclass func pintImperial() -> Self\nReturns a HealthKit unit for measuring volume in imperial pints."
  },
  {
    "title": "HKMetadataKeyHeartRateEventThreshold | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkmetadatakeyheartrateeventthreshold",
    "html": "Discussion\n\nThe value for this key contains an HKQuantity object with count/time units, described in HKUnit. This metadata key is used by highHeartRateEvent and lowHeartRateEvent category samples."
  },
  {
    "title": "expirationDate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkvisionprescription/3916029-expirationdate",
    "html": "See Also\nAccessing the prescription data\nvar prescriptionType: HKVisionPrescriptionType\nThe type of vision prescription.\nenum HKVisionPrescriptionType\nThe type of vision prescription, for example a prescription for glasses or for contacts.\nvar dateIssued: Date\nThe date when the doctor issued the prescription."
  },
  {
    "title": "predicateForCategorySamples(with:value:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquery/1614781-predicateforcategorysamples",
    "html": "Deprecated\n\nUse predicateForSamples(_:value:) instead.\n\nParameters\noperatorType\n\nThe type of operation to perform when matching the category sample’s value against the target value. For a list of possible operators, see NSComparisonPredicate.Operator.contains.\n\nvalue\n\nThe category sample’s target value. Use an enumeration value appropriate for the type of category samples you are working with. For example, a predicate for sleep analysis samples use values from the HKCategoryValueSleepAnalysis enumeration.\n\nReturn Value\n\nA predicate that matches category samples based on the provided expression. This predicate works only with category samples.\n\nDiscussion\n\nUse this convenience method to create a predicate that checks a category sample’s value. Listing 1 uses both the convenience method and a predicate format string to create equivalent predicates.\n\nListing 1 Matching category samples against a target value\nlet asleep = HKQuery.predicateForCategorySamplesWithOperatorType(\n    .EqualToPredicateOperatorType,\n    value: HKCategoryValueSleepAnalysis.Asleep.rawValue)\n \nlet explicitAsleep =\n    NSPredicate(format: \"%K == %d\",\n                HKPredicateKeyPathCategoryValue,\n                HKCategoryValueSleepAnalysis.Asleep.rawValue)\n\nSee Also\nCreating category sample predicates\nprotocol HKCategoryValuePredicateProviding\nA protocol for objects that produce predicates that match category value samples.\nRelated Documentation\nvar value: Int\nThe category value for this sample.\nlet HKPredicateKeyPathCategoryValue: String\nThe key path for accessing the category sample’s value."
  },
  {
    "title": "init(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquantitytype/3778608-init",
    "html": "Parameters\nidentifier\n\nAn identifier that specifies the type of data to store in the sample. For a complete list of quantity type identifiers, see HKQuantityTypeIdentifier."
  },
  {
    "title": "correlationType(forIdentifier:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkobjecttype/1615580-correlationtype",
    "html": "Parameters\nidentifier\n\nA correlation type identifier. For a list of valid identifiers, see HKCorrelationTypeIdentifier.\n\nReturn Value\n\nThe shared HKCorrelationType instance based on the provided identifier.\n\nDiscussion\n\nThis method returns an instance of the HKCorrelationType concrete subclass. HealthKit uses correlation types to create complex data objects that contain multiple values. Use correlation type instances to create correlation objects that you can save in the HealthKit store. For more information, see HKCorrelation.\n\nSee Also\nCreating correlation types\nstruct HKCorrelationTypeIdentifier\nThe identifiers that create correlation type objects."
  },
  {
    "title": "audiogramSampleType() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkobjecttype/3042434-audiogramsampletype",
    "html": "Return Value\n\nThe shared HKAudiogramSampleType instance.\n\nDiscussion\n\nThis method returns an instance of the HKAudiogramSampleType concrete subclass. HealthKit uses this type to store and read audiogram data from the HealthKit store."
  },
  {
    "title": "predicateForQuantitySamples(with:quantity:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquery/1614761-predicateforquantitysamples",
    "html": "Parameters\noperatorType\n\nThe operator type to use when comparing the sample’s quantity to the target quantity.\n\nquantity\n\nThe target quantity object.\n\nReturn Value\n\nA predicate that matches samples based on the target quantity. This predicate works only on quantity samples.\n\nDiscussion\n\nUse this convenience method to create a predicate that matches against a sample’s quantity. The following sample uses both the convenience method and a predicate format string to create equivalent predicates.\n\nlet targetWeight = HKQuantity(unit: HKUnit.poundUnit(),\n                              doubleValue: 150.0)\n \nlet underTargetWeight =\n    HKQuery.predicateForQuantitySamplesWithOperatorType(\n        .LessThanOrEqualToPredicateOperatorType,\n        quantity: targetWeight)\n \n \nlet explicitUnderTargetWeight = NSPredicate(format: \"%K <= %@\",\n                                            HKPredicateKeyPathQuantity,\n                                            targetWeight)\n\nSee Also\nRelated Documentation\nlet HKPredicateKeyPathQuantity: String\nThe key path for accessing the sample’s quantity.\nvar quantity: HKQuantity\nThe quantity for this sample."
  },
  {
    "title": "HKQueryOptions | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkqueryoptions",
    "html": "Topics\nConstants\nstatic var strictStartDate: HKQueryOptions\nThe sample’s start time must fall within the target time period.\nstatic var strictEndDate: HKQueryOptions\nThe sample’s end time must fall within the target time period.\nInitializers\ninit(rawValue: UInt)\nReturns a newly initialized query option using the provided integer.\nRelationships\nConforms To\nOptionSet\nSendable\nSee Also\nCreating sample predicates\nclass func predicateForSamples(withStart: Date?, end: Date?, options: HKQueryOptions) -> NSPredicate\nReturns a predicate for samples whose start and end dates fall within the specified time interval."
  },
  {
    "title": "predicateForObjects(withMetadataKey:allowedValues:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquery/1614780-predicateforobjects",
    "html": "Parameters\nkey\n\nThe metadata key for the value to be matched. For a list of preset keys, see Metadata Keys. You may also search using custom keys.\n\nallowedValues\n\nAn array of valid values. These values must be NSString, NSNumber, or NSDate instances.\n\nReturn Value\n\nA predicate that matches objects based on the provided metadata key and an array of target values..\n\nDiscussion\n\nUse this convenience method to create a predicate that matches objects based on their metadata. When this predicate is evaluated, it gets the metadata’s value for the provided key. Then the predicate checks that value against the allowedValues array. If the array contains a matching value, the predicate returns true; otherwise, it returns false.\n\nThe following sample uses both the convenience method and a predicate format string to create equivalent predicates.\n\nlet metadataValues =\n    HKQuery.predicateForObjectsWithMetadataKey(HKMetadataKeyFoodType,\n                                               allowedValues: [\"Pizza\", \"Tofu\"])\n \n \nlet explicitMetadataKey = NSPredicate(format: \"%K.%K IN %@\",\n                                      HKPredicateKeyPathMetadata, HKMetadataKeyFoodType, [\"Pizza\", \"Tofu\"])\n\nSee Also\nCreating object predicates\nclass func predicateForObject(with: UUID) -> NSPredicate\nReturns a predicate that matches an object with the specified universally unique identifier (UUID).\nclass func predicateForObjects(with: Set<UUID>) -> NSPredicate\nReturns a predicate that matches the objects with the specified universally unique identifiers (UUIDs).\nclass func predicateForObjects(from: HKSource) -> NSPredicate\nReturns a predicate that matches all the objects that were created by the provided source.\nclass func predicateForObjects(from: Set<HKSource>) -> NSPredicate\nReturns a predicate that matches all the objects that were created by any of the provided sources.\nclass func predicateForObjects(from: Set<HKDevice>) -> NSPredicate\nReturns a predicate that matches all the objects that were created by any of the provided devices.\nclass func predicateForObjects(withDeviceProperty: String, allowedValues: Set<String>) -> NSPredicate\nReturns a predicate that matches all objects created by devices with the specified properties.\nclass func predicateForObjects(from: Set<HKSourceRevision>) -> NSPredicate\nReturns a predicate that matches all the objects that were created by any of the provided source revisions.\nclass func predicateForObjects(withMetadataKey: String) -> NSPredicate\nReturns a predicate that matches any object whose metadata contains the provided key.\nclass func predicateForObjects(withMetadataKey: String, operatorType: NSComparisonPredicate.Operator, value: Any) -> NSPredicate\nReturns a predicate that matches objects based on the provided metadata key, value, and operator.\nclass func predicateForObjectsWithNoCorrelation() -> NSPredicate\nReturns a predicate that matches all objects that are not associated with a HealthKit correlation.\nRelated Documentation\nlet HKPredicateKeyPathMetadata: String\nThe key path for accessing the object’s metadata dictionary inside a predicate format string.\nvar metadata: [String : Any]?\nThe metadata for this HealthKit object."
  },
  {
    "title": "predicateForObjects(withMetadataKey:operatorType:value:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquery/1614764-predicateforobjects",
    "html": "Parameters\nkey\n\nThe metadata key for the value to be matched. For a list of preset keys, see Metadata Keys. You may also search using custom keys.\n\noperatorType\n\nDefines the relationship used to match the metadata’s value with the provided value.\n\nvalue\n\nThe target value. These values must be NSString, NSNumber, or NSDate instances.\n\nReturn Value\n\nA predicate that matches objects based on the specified metadata key, operator, and value.\n\nDiscussion\n\nUse this convenience method to create a predicate that matches objects based on their metadata, an operator, and a target value. When this predicate is evaluated, it gets the metadata’s value for the provided key. Then the predicate compares that value with the target value using the provided operator.\n\nThe following sample uses both the convenience method and a predicate format string to create equivalent predicates.\n\nlet metadataOperator =\n    HKQuery.predicateForObjectsWithMetadataKey(AccuracyCustomMetadataKey,\n                                               operatorType: NSPredicateOperatorType.GreaterThanPredicateOperatorType,\n                                               value: 75.0)\n \nlet explicitMetadataOperator = NSPredicate(format: \"%K.%K > %d\",\n                                           HKPredicateKeyPathMetadata, AccuracyCustomMetadataKey,\n                                           75.0)\n\nSee Also\nCreating object predicates\nclass func predicateForObject(with: UUID) -> NSPredicate\nReturns a predicate that matches an object with the specified universally unique identifier (UUID).\nclass func predicateForObjects(with: Set<UUID>) -> NSPredicate\nReturns a predicate that matches the objects with the specified universally unique identifiers (UUIDs).\nclass func predicateForObjects(from: HKSource) -> NSPredicate\nReturns a predicate that matches all the objects that were created by the provided source.\nclass func predicateForObjects(from: Set<HKSource>) -> NSPredicate\nReturns a predicate that matches all the objects that were created by any of the provided sources.\nclass func predicateForObjects(from: Set<HKDevice>) -> NSPredicate\nReturns a predicate that matches all the objects that were created by any of the provided devices.\nclass func predicateForObjects(withDeviceProperty: String, allowedValues: Set<String>) -> NSPredicate\nReturns a predicate that matches all objects created by devices with the specified properties.\nclass func predicateForObjects(from: Set<HKSourceRevision>) -> NSPredicate\nReturns a predicate that matches all the objects that were created by any of the provided source revisions.\nclass func predicateForObjects(withMetadataKey: String) -> NSPredicate\nReturns a predicate that matches any object whose metadata contains the provided key.\nclass func predicateForObjects(withMetadataKey: String, allowedValues: [Any]) -> NSPredicate\nReturns a predicate that matches objects based on the provided metadata key and an array of target values.\nclass func predicateForObjectsWithNoCorrelation() -> NSPredicate\nReturns a predicate that matches all objects that are not associated with a HealthKit correlation.\nRelated Documentation\nlet HKPredicateKeyPathMetadata: String\nThe key path for accessing the object’s metadata dictionary inside a predicate format string.\nvar metadata: [String : Any]?\nThe metadata for this HealthKit object."
  },
  {
    "title": "predicateForObjectsWithNoCorrelation() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquery/1614762-predicateforobjectswithnocorrela",
    "html": "Return Value\n\nA predicate that matches all objects that are not associated with any HealthKit correlations.\n\nDiscussion\n\nUse this convenience method to create a predicate that matches all objects not associated with a HKCorrelation object. The following sample uses both the convenience method and a predicate format string to create equivalent predicates.\n\nlet noncorrelated = HKQuery.predicateForObjectsWithNoCorrelation()\n \nlet explicitNoncorrelated =\n    NSPredicate(format: \"%K == nil\", HKPredicateKeyPathCorrelation)\n\nSee Also\nCreating object predicates\nclass func predicateForObject(with: UUID) -> NSPredicate\nReturns a predicate that matches an object with the specified universally unique identifier (UUID).\nclass func predicateForObjects(with: Set<UUID>) -> NSPredicate\nReturns a predicate that matches the objects with the specified universally unique identifiers (UUIDs).\nclass func predicateForObjects(from: HKSource) -> NSPredicate\nReturns a predicate that matches all the objects that were created by the provided source.\nclass func predicateForObjects(from: Set<HKSource>) -> NSPredicate\nReturns a predicate that matches all the objects that were created by any of the provided sources.\nclass func predicateForObjects(from: Set<HKDevice>) -> NSPredicate\nReturns a predicate that matches all the objects that were created by any of the provided devices.\nclass func predicateForObjects(withDeviceProperty: String, allowedValues: Set<String>) -> NSPredicate\nReturns a predicate that matches all objects created by devices with the specified properties.\nclass func predicateForObjects(from: Set<HKSourceRevision>) -> NSPredicate\nReturns a predicate that matches all the objects that were created by any of the provided source revisions.\nclass func predicateForObjects(withMetadataKey: String) -> NSPredicate\nReturns a predicate that matches any object whose metadata contains the provided key.\nclass func predicateForObjects(withMetadataKey: String, allowedValues: [Any]) -> NSPredicate\nReturns a predicate that matches objects based on the provided metadata key and an array of target values.\nclass func predicateForObjects(withMetadataKey: String, operatorType: NSComparisonPredicate.Operator, value: Any) -> NSPredicate\nReturns a predicate that matches objects based on the provided metadata key, value, and operator.\nRelated Documentation\nlet HKPredicateKeyPathCorrelation: String\nThe key path for accessing the object’s correlation inside a predicate format string.\nclass HKCorrelation\nA sample that groups multiple related samples into a single entry."
  },
  {
    "title": "predicateForSamples(withStart:end:options:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquery/1614771-predicateforsamples",
    "html": "Parameters\nstartDate\n\nThe start date for the target time interval.\n\nendDate\n\nThe end date for the target time interval.\n\noptions\n\nA constant that specifies how the sample’s start and end date are compared with the target time interval. For a list of possible values, see HKQueryOptions.\n\nReturn Value\n\nA predicate for samples whose start and end dates fall within the specified time interval. This predicate works only with samples.\n\nDiscussion\n\nUse this convenience method to create a predicate that compares a sample’s start and end dates with a specified time interval. The following sample uses both the convenience method and a predicate format string to create equivalent predicates.\n\nlet timeInterval =\n    HKQuery.predicateForSamplesWithStartDate(myStartDate,\n                                             endDate: myEndDate, options: .None)\n \nlet explicitTimeInterval = NSPredicate(format: \"%K >= %@ AND %K < %@\",\n                                       HKPredicateKeyPathEndDate, myStartDate,\n                                       HKPredicateKeyPathStartDate, myEndDate)\n\nSee Also\nCreating sample predicates\nstruct HKQueryOptions\nConstants that describe how a sample’s time period overlaps with the target time period.\nRelated Documentation\nlet HKPredicateKeyPathEndDate: String\nThe key path for accessing the sample’s end date.\nlet HKPredicateKeyPathStartDate: String\nThe key path for accessing the sample’s start date.\nvar endDate: Date\nThe sample’s end date.\nvar startDate: Date\nThe sample’s start date."
  },
  {
    "title": "predicateForObjects(from:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquery/1614767-predicateforobjects",
    "html": "Parameters\nsources\n\nA set of sources that have saved data to the HealthKit store.\n\nReturn Value\n\nA predicate that matches all the objects created by any of the provided sources.\n\nDiscussion\n\nUse this convenience method to create a predicate that finds all the objects from a specified set of apps or devices. The following sample uses both the convenience method and a predicate format string to create equivalent predicates.\n\nlet fromSources = HKQuery.predicateForObjectsFromSources(sources)\n \nlet explicitFromSources =\n    NSPredicate(format: \"%K IN %@\", HKPredicateKeyPathSource, sources)\n\nSee Also\nCreating object predicates\nclass func predicateForObject(with: UUID) -> NSPredicate\nReturns a predicate that matches an object with the specified universally unique identifier (UUID).\nclass func predicateForObjects(with: Set<UUID>) -> NSPredicate\nReturns a predicate that matches the objects with the specified universally unique identifiers (UUIDs).\nclass func predicateForObjects(from: HKSource) -> NSPredicate\nReturns a predicate that matches all the objects that were created by the provided source.\nclass func predicateForObjects(from: Set<HKDevice>) -> NSPredicate\nReturns a predicate that matches all the objects that were created by any of the provided devices.\nclass func predicateForObjects(withDeviceProperty: String, allowedValues: Set<String>) -> NSPredicate\nReturns a predicate that matches all objects created by devices with the specified properties.\nclass func predicateForObjects(from: Set<HKSourceRevision>) -> NSPredicate\nReturns a predicate that matches all the objects that were created by any of the provided source revisions.\nclass func predicateForObjects(withMetadataKey: String) -> NSPredicate\nReturns a predicate that matches any object whose metadata contains the provided key.\nclass func predicateForObjects(withMetadataKey: String, allowedValues: [Any]) -> NSPredicate\nReturns a predicate that matches objects based on the provided metadata key and an array of target values.\nclass func predicateForObjects(withMetadataKey: String, operatorType: NSComparisonPredicate.Operator, value: Any) -> NSPredicate\nReturns a predicate that matches objects based on the provided metadata key, value, and operator.\nclass func predicateForObjectsWithNoCorrelation() -> NSPredicate\nReturns a predicate that matches all objects that are not associated with a HealthKit correlation.\nRelated Documentation\nvar source: HKSource\nA HealthKit source, representing the app or device that created this object.\nclass HKSourceQuery\nA query that returns a list of sources, such as apps and devices, that have saved matching queries to the HealthKit store."
  },
  {
    "title": "predicateForObjects(from:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquery/1614769-predicateforobjects",
    "html": "Parameters\nsource\n\nThe source that saved data into the HealthKit store. The source object represents either an app or a devices capable of saving data directly into the HealthKit store (for example, a linked Bluetooth heart rate monitor).\n\nReturn Value\n\nA predicate that matches all the objects created by the provided source.\n\nDiscussion\n\nUse this convenience method to create a predicate that finds all the objects from a specific app or device. The following sample uses both the convenience method and a predicate format string to create equivalent predicates.\n\nlet fromSource = HKQuery.predicateForObjectsFromSource(source)\n \nlet explicitFromSource =\n    NSPredicate(format: \"%K == %@\", HKPredicateKeyPathSource, source)\n\nSee Also\nCreating object predicates\nclass func predicateForObject(with: UUID) -> NSPredicate\nReturns a predicate that matches an object with the specified universally unique identifier (UUID).\nclass func predicateForObjects(with: Set<UUID>) -> NSPredicate\nReturns a predicate that matches the objects with the specified universally unique identifiers (UUIDs).\nclass func predicateForObjects(from: Set<HKSource>) -> NSPredicate\nReturns a predicate that matches all the objects that were created by any of the provided sources.\nclass func predicateForObjects(from: Set<HKDevice>) -> NSPredicate\nReturns a predicate that matches all the objects that were created by any of the provided devices.\nclass func predicateForObjects(withDeviceProperty: String, allowedValues: Set<String>) -> NSPredicate\nReturns a predicate that matches all objects created by devices with the specified properties.\nclass func predicateForObjects(from: Set<HKSourceRevision>) -> NSPredicate\nReturns a predicate that matches all the objects that were created by any of the provided source revisions.\nclass func predicateForObjects(withMetadataKey: String) -> NSPredicate\nReturns a predicate that matches any object whose metadata contains the provided key.\nclass func predicateForObjects(withMetadataKey: String, allowedValues: [Any]) -> NSPredicate\nReturns a predicate that matches objects based on the provided metadata key and an array of target values.\nclass func predicateForObjects(withMetadataKey: String, operatorType: NSComparisonPredicate.Operator, value: Any) -> NSPredicate\nReturns a predicate that matches objects based on the provided metadata key, value, and operator.\nclass func predicateForObjectsWithNoCorrelation() -> NSPredicate\nReturns a predicate that matches all objects that are not associated with a HealthKit correlation.\nRelated Documentation\nvar source: HKSource\nA HealthKit source, representing the app or device that created this object.\nclass HKSourceQuery\nA query that returns a list of sources, such as apps and devices, that have saved matching queries to the HealthKit store."
  },
  {
    "title": "predicateForObjects(with:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquery/1614785-predicateforobjects",
    "html": "Parameters\nUUIDs\n\nThe set of UUIDs to be matched.\n\nReturn Value\n\nA predicate that matches the specified objects based on their UUIDs.\n\nDiscussion\n\nHealthKit assigns a UUID to each object when it is saved to the HealthKit store. HealthKit uses these IDs to uniquely identify objects from the store. Use this convenience method to create a predicate that checks an object’s UUID against the provided set of UUIDs. The following sample uses both the convenience method and a predicate format string to create equivalent predicates.\n\nlet uuids = HKQuery.predicateForObjectsWithUUIDs(myUUIDs)\n \nlet explicitUUIDs =\n    NSPredicate(format: \"%K IN %@\", HKPredicateKeyPathUUID, myUUIDs)\n\nSee Also\nCreating object predicates\nclass func predicateForObject(with: UUID) -> NSPredicate\nReturns a predicate that matches an object with the specified universally unique identifier (UUID).\nclass func predicateForObjects(from: HKSource) -> NSPredicate\nReturns a predicate that matches all the objects that were created by the provided source.\nclass func predicateForObjects(from: Set<HKSource>) -> NSPredicate\nReturns a predicate that matches all the objects that were created by any of the provided sources.\nclass func predicateForObjects(from: Set<HKDevice>) -> NSPredicate\nReturns a predicate that matches all the objects that were created by any of the provided devices.\nclass func predicateForObjects(withDeviceProperty: String, allowedValues: Set<String>) -> NSPredicate\nReturns a predicate that matches all objects created by devices with the specified properties.\nclass func predicateForObjects(from: Set<HKSourceRevision>) -> NSPredicate\nReturns a predicate that matches all the objects that were created by any of the provided source revisions.\nclass func predicateForObjects(withMetadataKey: String) -> NSPredicate\nReturns a predicate that matches any object whose metadata contains the provided key.\nclass func predicateForObjects(withMetadataKey: String, allowedValues: [Any]) -> NSPredicate\nReturns a predicate that matches objects based on the provided metadata key and an array of target values.\nclass func predicateForObjects(withMetadataKey: String, operatorType: NSComparisonPredicate.Operator, value: Any) -> NSPredicate\nReturns a predicate that matches objects based on the provided metadata key, value, and operator.\nclass func predicateForObjectsWithNoCorrelation() -> NSPredicate\nReturns a predicate that matches all objects that are not associated with a HealthKit correlation.\nRelated Documentation\nlet HKPredicateKeyPathUUID: String\nThe key path for accessing the object’s UUID inside a predicate format string.\nvar uuid: UUID\nThe universally unique identifier (UUID) for this HealthKit object."
  },
  {
    "title": "sampleType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquery/1614789-sampletype",
    "html": "Deprecated\n\nUse objectType instead.\n\nDiscussion\n\nNot all queries return objects of the specified type; however, they all use the object type to generate their results. For example, source queries return a set of data sources that have saved objects with a matching type, while statistics queries return statistical information about the objects with a matching type.\n\nSee Also\nAccessing properties\nvar predicate: NSPredicate?\nA predicate used to filter the objects returned from the HealthKit store.\nvar objectType: HKObjectType?\nThe type of objects being queried."
  },
  {
    "title": "degreeAngle() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkunit/3916017-degreeangle",
    "html": "See Also\nConstructing angle units\nclass func radianAngle() -> Self\nReturns a HealthKit unit for measuring angles using radians.\nclass func radianAngleUnit(with: HKMetricPrefix) -> Self\nReturns a HealthKit unit for measuring angles, using radian units with the provided prefix."
  },
  {
    "title": "init(rightEyeSpecification:leftEyeSpecification:dateIssued:expirationDate:device:metadata:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkglassesprescription/4048314-init",
    "html": "Parameters\nrightEyeSpecification\n\nThe lens specification for the right eye.\n\nleftEyeSpecification\n\nThe lens specification for the left eye.\n\ndateIssued\n\nThe date when the doctor issued the prescription.\n\nexpirationDate\n\nThe date when the prescription expires.\n\ndevice\n\nThe device that generated the sample.\n\nmetadata\n\nAdditional metadata about the sample."
  },
  {
    "title": "predicate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquery/1614763-predicate",
    "html": "Discussion\n\nIf the predicate is nil, the query does not filter its results. Instead, it returns all the objects matching the query’s other parameters.\n\nSee Also\nAccessing properties\nvar objectType: HKObjectType?\nThe type of objects being queried.\nvar sampleType: HKSampleType?\nThe type of objects being queried."
  },
  {
    "title": "rightEye | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkglassesprescription/3916002-righteye",
    "html": "See Also\nAccessing the glasses prescription data\nvar leftEye: HKGlassesLensSpecification?\nThe lens specification for the left eye."
  },
  {
    "title": "init(type:dateIssued:expirationDate:device:metadata:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkvisionprescription/3929737-init",
    "html": "Parameters\ntype\n\nA value that indicates the type of prescription. For a list of possible values, see HKVisionPrescriptionType.\n\ndateIssued\n\nThe date when the doctor issued the prescription.\n\nexpirationDate\n\nThe date when the prescription expires.\n\ndevice\n\nThe device that generated the sample.\n\nmetadata\n\nAdditional metadata about the sample.\n\nDiscussion\n\nUse this initializer to create an image-only prescription. Here, you attach the prescription as an image or PDF to a simple sample. The sample contains only basic information about the prescription, such as the issue and expiration dates. To see the prescription data, people must view the attached image or PDF.\n\nTo create a vision prescription sample that contains the full data for the prescription, use HKGlassesPrescription or HKContactsPrescription instead.\n\nSee Also\nRelated Documentation\nclass HKGlassesPrescription\nA sample that stores a prescription for glasses.\nclass HKContactsPrescription\nA sample that store a prescription for contacts."
  },
  {
    "title": "prescriptionType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkvisionprescription/3916031-prescriptiontype",
    "html": "Discussion\n\nThis property contains a value that indicates the type of prescription. For a list of possible values, see HKVisionPrescriptionType.\n\nSee Also\nAccessing the prescription data\nenum HKVisionPrescriptionType\nThe type of vision prescription, for example a prescription for glasses or for contacts.\nvar dateIssued: Date\nThe date when the doctor issued the prescription.\nvar expirationDate: Date?\nThe date when the prescription expires.\nRelated Documentation\nclass HKGlassesPrescription\nA sample that stores a prescription for glasses.\nclass HKContactsPrescription\nA sample that store a prescription for contacts."
  },
  {
    "title": "HKMetadataKeyGlassesPrescriptionDescription | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkmetadatakeyglassesprescriptiondescription",
    "html": "Discussion\n\nIf a glasses prescription was designed for a particular use, like reading or distance, use this metadata key to describe that use.\n\nThis metadata key stores a String value."
  },
  {
    "title": "statisticsUpdateHandler | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkstatisticscollectionquery/1615723-statisticsupdatehandler",
    "html": "Discussion\n\nIf this property is set to nil, the statistics collection query will automatically stop as soon as it has finished calculating the initial results. If this property is not nil, the query behaves similarly to the observer query. It continues to run, monitoring the HealthKit store. If any new, matching samples are saved to the store—or if any of the existing matching samples are deleted from the store—the query executes the update handler on a background queue.\n\nSee Also\nGetting and Setting Results Handlers\nvar initialResultsHandler: ((HKStatisticsCollectionQuery, HKStatisticsCollection?, Error?) -> Void)?\nThe results handler for the query’s initial results."
  },
  {
    "title": "options | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkstatisticscollectionquery/1615293-options",
    "html": "Discussion\n\nFor a list of valid options, see HKStatisticsOptions.\n\nSee Also\nGetting Property Data\nvar anchorDate: Date\nThe anchor date for the collection’s time intervals.\nvar intervalComponents: DateComponents\nThe date components that define the time interval for each statistics object in the collection."
  },
  {
    "title": "predicateForWorkoutActivities(operatorType:quantityType:sumQuantity:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquery/3929718-predicateforworkoutactivities",
    "html": "Parameters\noperatorType\n\nThe operator type to use when comparing the sum.\n\nquantityType\n\nThe type of HKQuantitySample objects used to calculate the sum.\n\nsumQuantity\n\nThe target value for the sum.\n\nDiscussion\n\nUse this convenience method to create a predicate that matches workout activities with the specified total value. To use this predicate, call predicateForWorkouts(activityPredicate:) to wrap this predicate inside a workout predicate. You can then use the workout predicate in your query.\n\nThe following sample creates a predicate for workout activities with a total step count of 1000 or higher.\n\nlet quantityType = HKQuantityType(.stepCount)\n\n\nlet expectedQuantity = HKQuantity(unit: .count(),\n                                  doubleValue: 1000.0)\n\n\nlet stepCountPredicate =\nHKQuery.predicateForWorkoutActivities(\n    operatorType: .greaterThanOrEqualTo,\n    quantityType: quantityType,\n    sumQuantity:\n        expectedQuantity\n)\n\n\n// Wrap the activity predicate inside a workout predicate.\nlet workoutPredicate = HKQuery.predicateForWorkouts(activityPredicate: stepCountPredicate)\n\n\nFor more information on how HealthKit calculates statistics for HKWorkoutActivity objects, see statistics(for:).\n\nSee Also\nCreating workout activity predicates\nclass func predicateForWorkoutActivities(workoutActivityType: HKWorkoutActivityType) -> NSPredicate\nReturns a predicate for workout activities based on the type of activity performed.\nclass func predicateForWorkoutActivities(operatorType: NSComparisonPredicate.Operator, duration: TimeInterval) -> NSPredicate\nReturns a predicate for matching workout activities based on their duration.\nclass func predicateForWorkoutActivities(start: Date?, end: Date?, options: HKQueryOptions) -> NSPredicate\nReturns a predicate for workout activities that occur between the start and end date.\nclass func predicateForWorkoutActivities(operatorType: NSComparisonPredicate.Operator, quantityType: HKQuantityType, averageQuantity: HKQuantity) -> NSPredicate\nReturns a predicate for matching workout activities based the average value of an associated quantity type.\nclass func predicateForWorkoutActivities(operatorType: NSComparisonPredicate.Operator, quantityType: HKQuantityType, maximumQuantity: HKQuantity) -> NSPredicate\nReturns a predicate for matching workout activities based the maximum value of an associated quantity type.\nclass func predicateForWorkoutActivities(operatorType: NSComparisonPredicate.Operator, quantityType: HKQuantityType, minimumQuantity: HKQuantity) -> NSPredicate\nReturns a predicate for matching workout activities based the minimum value of an associated quantity type."
  },
  {
    "title": "predicateForWorkoutActivities(operatorType:quantityType:minimumQuantity:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquery/3929717-predicateforworkoutactivities",
    "html": "Parameters\noperatorType\n\nThe operator type to use when comparing the minimum quantity.\n\nquantityType\n\nThe type of HKQuantitySample objects used to calculate the minimum quantity.\n\nminimumQuantity\n\nThe target value for the minimum quantity.\n\nDiscussion\n\nUse this convenience method to create a predicate that matches workout activities with the specified minimum quantity. To use this predicate, call predicateForWorkouts(activityPredicate:) to wrap this predicate inside a workout predicate. You can then use the workout predicate in your query.\n\nThe following sample creates a predicate for workout activities with a minimum heart rate of 150 bmp or higher.\n\nlet quantityType = HKQuantityType(.heartRate)\n\n\nlet expectedQuantity =\nHKQuantity(unit: .count().unitDivided(by: .minute()),\n           doubleValue: 150.0)\n\n\nlet heartRatePredicate =\nHKQuery.predicateForWorkoutActivities(\n    operatorType: .greaterThanOrEqualTo,\n    quantityType: quantityType,\n    minimumQuantity:\n        expectedQuantity\n)\n\n\n// Wrap the activity predicate inside a workout predicate.\nlet workoutPredicate = HKQuery.predicateForWorkouts(activityPredicate: heartRatePredicate)\n\n\nFor more information on how HealthKit calculates statistics for HKWorkoutActivity objects, see statistics(for:).\n\nSee Also\nCreating workout activity predicates\nclass func predicateForWorkoutActivities(workoutActivityType: HKWorkoutActivityType) -> NSPredicate\nReturns a predicate for workout activities based on the type of activity performed.\nclass func predicateForWorkoutActivities(operatorType: NSComparisonPredicate.Operator, duration: TimeInterval) -> NSPredicate\nReturns a predicate for matching workout activities based on their duration.\nclass func predicateForWorkoutActivities(start: Date?, end: Date?, options: HKQueryOptions) -> NSPredicate\nReturns a predicate for workout activities that occur between the start and end date.\nclass func predicateForWorkoutActivities(operatorType: NSComparisonPredicate.Operator, quantityType: HKQuantityType, averageQuantity: HKQuantity) -> NSPredicate\nReturns a predicate for matching workout activities based the average value of an associated quantity type.\nclass func predicateForWorkoutActivities(operatorType: NSComparisonPredicate.Operator, quantityType: HKQuantityType, maximumQuantity: HKQuantity) -> NSPredicate\nReturns a predicate for matching workout activities based the maximum value of an associated quantity type.\nclass func predicateForWorkoutActivities(operatorType: NSComparisonPredicate.Operator, quantityType: HKQuantityType, sumQuantity: HKQuantity) -> NSPredicate\nReturns a predicate for matching workout activities based the sum of an associated quantity type."
  },
  {
    "title": "predicate(forActivitySummariesBetweenStart:end:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquery/1614777-predicate",
    "html": "Parameters\nstartDateComponents\n\nDate components that uniquely identify the start day as perceived by the user. This day may be longer or shorter than 24 hours (for example, if the user traveled across time zones).\n\nThe date components must have a valid calendar property.\n\nendDateComponents\n\nDate components that uniquely identify the end day as perceived by the user. This day may be longer or shorter than 24 hours (for example, if the user traveled across time zones).\n\nThe date components must have a valid calendar property.\n\nReturn Value\n\nA predicate for matching activity summaries spanning a range of days.\n\nDiscussion\n\nUse this convenience method to create a predicate that matches activity summaries that fall between the specified days. The following sample uses both the convenience method and a predicate format string to create equivalent predicates.\n\nlet forDays =\n    HKQuery.predicateForActivitySummariesBetweenStartDateComponents(startDateComponents, endDateComponents: endDateComponents)\nlet explicitForDays =\n    NSPredicate(format: \"%K >= %@ AND %K <= %@\", HKPredicateKeyPathDateComponents, startDateComponents, HKPredicateKeyPathDateComponents, endDateComponents)\n\nSee Also\nCreating activity summary predicates\nclass func predicateForActivitySummary(with: DateComponents) -> NSPredicate\nReturns a predicate that matches the activity summary for the specified day.\nRelated Documentation\nlet HKPredicateKeyPathDateComponents: String\nThe key path for accessing an activity summary’s date components."
  },
  {
    "title": "predicateForActivitySummary(with:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquery/1614790-predicateforactivitysummary",
    "html": "Parameters\ndateComponents\n\nDate components that uniquely identify the day as perceived by the user. This day may be longer or shorter than 24 hours (for example, if the user traveled across time zones).\n\nThe date components must have a valid calendar property.\n\nReturn Value\n\nA predicate for matching a single activity summary.\n\nDiscussion\n\nUse this convenience method to create a predicate that matches the activity summary for the specified day. The following sample uses both the convenience method and a predicate format string to create equivalent predicates.\n\nlet forDay = HKQuery.predicateForActivitySummaryWithDateComponents(day)\nlet explicitForDay = NSPredicate(format: \"%K == %@\", HKPredicateKeyPathDateComponents, day)\n\nSee Also\nCreating activity summary predicates\nclass func predicate(forActivitySummariesBetweenStart: DateComponents, end: DateComponents) -> NSPredicate\nReturns a predicate for matching all the activity summaries that fall between the days identified by the start and end date components.\nRelated Documentation\nlet HKPredicateKeyPathDateComponents: String\nThe key path for accessing an activity summary’s date components."
  },
  {
    "title": "predicateForElectrocardiograms(symptomsStatus:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquery/3566517-predicateforelectrocardiograms",
    "html": "Parameters\nsymptomsStatus\n\nThe target symptom status.\n\nReturn Value\n\nA predicate that matches electrocardiogram samples with the specified symptom status.\n\nDiscussion\n\nUse this convenience method to create a predicate that matches electrocardiogram samples with the specified symptom status. The following sample uses both the convenience method and a predicate format string to create equivalent predicates.\n\nlet forSymptomStatus = HKQuery.predicateForElectrocardiograms(symptomsStatus: .present)\n\n\nlet status = HKElectrocardiogram.SymptomsStatus.present.rawValue\n\n\n\n\nlet explicitForSymptomStatus = NSPredicate(format: \"%K == %d\", HKPredicateKeyPathECGSymptomsStatus, status)\n\n\nSee Also\nCreating electrocardiogram predicates\nclass func predicateForElectrocardiograms(classification: HKElectrocardiogram.Classification) -> NSPredicate\nReturns a predicate that matches electrocardiogram samples with the specified classification.\nclass func predicateForObjectsAssociated(electrocardiogram: HKElectrocardiogram) -> NSPredicate\nReturns a predicate that matches symptom samples associated with the specified electrocardiogram.\nRelated Documentation\nlet HKPredicateKeyPathECGSymptomsStatus: String\nThe key path for the sample’s symptom status."
  },
  {
    "title": "predicateForElectrocardiograms(classification:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquery/3552036-predicateforelectrocardiograms",
    "html": "Parameters\nclassification\n\nThe target classification.\n\nReturn Value\n\nA predicate that matches electrocardiogram samples with the specified classification.\n\nDiscussion\n\nUse this convenience method to create a predicate that matches electrocardiogram samples with the specified classification. The following sample uses both the convenience method and a predicate format string to create equivalent predicates.\n\nlet forClassification = HKQuery.predicateForElectrocardiograms(classification: .atrialFibrillation)\n\n\nlet classification = HKElectrocardiogram.Classification.atrialFibrillation.rawValue\n\n\nlet explicitForClassification = NSPredicate(format: \"%K == %d\", HKPredicateKeyPathECGClassification, classification)\n\n\nSee Also\nCreating electrocardiogram predicates\nclass func predicateForElectrocardiograms(symptomsStatus: HKElectrocardiogram.SymptomsStatus) -> NSPredicate\nReturns a predicate that matches electrocardiogram samples with the specified symptom status.\nclass func predicateForObjectsAssociated(electrocardiogram: HKElectrocardiogram) -> NSPredicate\nReturns a predicate that matches symptom samples associated with the specified electrocardiogram.\nRelated Documentation\nlet HKPredicateKeyPathECGClassification: String\nThe key path for the sample’s classification."
  },
  {
    "title": "predicateForWorkouts(operatorType:quantityType:averageQuantity:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquery/3929722-predicateforworkouts",
    "html": "Parameters\noperatorType\n\nThe operator type to use when comparing the quantity.\n\nquantityType\n\nThe type of HKQuantitySample objects used to calculate the average quantity.\n\naverageQuantity\n\nThe target value for the average quantity.\n\nDiscussion\n\nUse this convenience method to create a predicate that matches workouts with the specified average quantity. For more information on how HealthKit calculates statistics for HKWorkout objects, see statistics(for:) .\n\nThe following sample creates a predicate for workouts with an average heart rate of 150 bmp or higher.\n\nlet quantityType = HKQuantityType(.heartRate)\n\n\nlet expectedQuantity =\nHKQuantity(unit: .count().unitDivided(by: .minute()),\n           doubleValue: 150.0)\n\n\nlet heartRatePredicate = HKQuery.predicateForWorkouts(\n    operatorType: .greaterThanOrEqualTo,\n    quantityType: quantityType,\n    averageQuantity: expectedQuantity)\n\n\nSee Also\nCreating workout predicates\nclass func predicateForObjects(from: HKWorkout) -> NSPredicate\nReturns a predicate that matches any objects that have been associated with the provided workout.\nclass func predicateForWorkouts(with: HKWorkoutActivityType) -> NSPredicate\nReturns a predicate for matching workouts based on the type of activity.\nclass func predicateForWorkouts(activityPredicate: NSPredicate) -> NSPredicate\nReturns a predicate for matching workouts based on the associated workout activities.\nclass func predicateForWorkouts(with: NSComparisonPredicate.Operator, duration: TimeInterval) -> NSPredicate\nReturns a predicate for matching workouts based on their duration.\nclass func predicateForWorkouts(operatorType: NSComparisonPredicate.Operator, quantityType: HKQuantityType, maximumQuantity: HKQuantity) -> NSPredicate\nReturns a predicate for matching workout activities based the maximum value of an associated quantity type.\nclass func predicateForWorkouts(operatorType: NSComparisonPredicate.Operator, quantityType: HKQuantityType, minimumQuantity: HKQuantity) -> NSPredicate\nReturns a predicate for matching workout activities based the minimum value of an associated quantity type.\nclass func predicateForWorkouts(operatorType: NSComparisonPredicate.Operator, quantityType: HKQuantityType, sumQuantity: HKQuantity) -> NSPredicate\nReturns a predicate for matching workout activities based the sum of an associated quantity type.\nclass func predicateForWorkouts(with: NSComparisonPredicate.Operator, totalDistance: HKQuantity) -> NSPredicate\nReturns a predicate for matching workouts based on the total distance traveled.\nDeprecated\nclass func predicateForWorkouts(with: NSComparisonPredicate.Operator, totalEnergyBurned: HKQuantity) -> NSPredicate\nReturns a predicate for matching workouts based on the total energy burned.\nDeprecated\nclass func predicateForWorkouts(with: NSComparisonPredicate.Operator, totalFlightsClimbed: HKQuantity) -> NSPredicate\nReturns a predicate that matches workout samples based on the number of flights climbed.\nDeprecated\nclass func predicateForWorkouts(with: NSComparisonPredicate.Operator, totalSwimmingStrokeCount: HKQuantity) -> NSPredicate\nReturns a predicate that matches workout samples based on the number of strokes while swimming.\nDeprecated"
  },
  {
    "title": "HKError.Code.errorHealthDataUnavailable | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkerror/code/errorhealthdataunavailable",
    "html": "Discussion\n\nBecause iOS apps can run on devices that don’t support HealthKit (for example, on an iPad), always verify that the current device supports HealthKit by calling isHealthDataAvailable() before calling any other HealthKit methods. If HealthKit isn’t available on the device, other HealthKit methods fail with an errorHealthDataUnavailable error.\n\nSee Also\nErrors\ncase errorHealthDataRestricted\nA Mobile Device Management (MDM) profile restricts the use of HealthKit on this device.\ncase errorInvalidArgument\nThe app passed an invalid argument to the HealthKit API.\ncase errorAuthorizationDenied\nThe user hasn’t given the app permission to save data.\ncase errorAuthorizationNotDetermined\nThe app hasn’t yet asked the user for the authorization required to complete the task.\ncase errorRequiredAuthorizationDenied\nThe user hasn’t granted the application authorization to access all the required clinical record types.\ncase errorDatabaseInaccessible\nThe HealthKit data is unavailable because it’s protected and the device is locked.\ncase errorUserCanceled\nThe user canceled the operation.\ncase errorAnotherWorkoutSessionStarted\nAnother app started a workout session.\ncase errorUserExitedWorkoutSession\nThe user exited your application while a workout session was running.\ncase errorNoData\nData is unavailable for the requested query and predicate."
  },
  {
    "title": "HKPredicateKeyPathWorkoutAverageQuantity | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkpredicatekeypathworkoutaveragequantity",
    "html": "See Also\nSpecifying predicate key paths\nlet HKPredicateKeyPathWorkoutType: String\nThe key path for accessing the workout’s type.\nlet HKPredicateKeyPathWorkoutDuration: String\nThe key path for accessing the workout’s duration.\nlet HKPredicateKeyPathWorkoutTotalDistance: String\nThe key path for accessing the workout’s total distance.\nlet HKPredicateKeyPathWorkoutTotalEnergyBurned: String\nThe key path for accessing the workout’s total energy burned.\nlet HKPredicateKeyPathWorkoutMaximumQuantity: String\nThe key path for accessing workouts with a matching maximum quantity.\nlet HKPredicateKeyPathWorkoutMinimumQuantity: String\nThe key path for accessing workouts with a matching minimum quantity.\nlet HKPredicateKeyPathWorkoutSumQuantity: String\nThe key path for accessing workouts with a matching sum."
  },
  {
    "title": "HKPredicateKeyPathWorkoutTotalDistance | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkpredicatekeypathworkouttotaldistance",
    "html": "See Also\nSpecifying predicate key paths\nlet HKPredicateKeyPathWorkoutType: String\nThe key path for accessing the workout’s type.\nlet HKPredicateKeyPathWorkoutDuration: String\nThe key path for accessing the workout’s duration.\nlet HKPredicateKeyPathWorkoutTotalEnergyBurned: String\nThe key path for accessing the workout’s total energy burned.\nlet HKPredicateKeyPathWorkoutAverageQuantity: String\nThe key path for accessing workouts with a matching average quantity.\nlet HKPredicateKeyPathWorkoutMaximumQuantity: String\nThe key path for accessing workouts with a matching maximum quantity.\nlet HKPredicateKeyPathWorkoutMinimumQuantity: String\nThe key path for accessing workouts with a matching minimum quantity.\nlet HKPredicateKeyPathWorkoutSumQuantity: String\nThe key path for accessing workouts with a matching sum."
  },
  {
    "title": "HKWorkoutSortIdentifierTotalEnergyBurned | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkoutsortidentifiertotalenergyburned",
    "html": "See Also\nSpecifying sort identifiers\nlet HKWorkoutSortIdentifierDuration: String\nA constant for sorting workouts based on their duration.\nlet HKWorkoutSortIdentifierTotalDistance: String\nA constant for sorting workouts based on their total distance."
  },
  {
    "title": "totalFlightsClimbed | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkout/2867030-totalflightsclimbed",
    "html": "Deprecated\n\nUse allStatistics or statistics(for:) instead.\n\nDiscussion\n\nThis property contains a quantity using count units, or nil.\n\nNote\n\nProvide the total flights climbed value whenever the number of flights climbed is relevant to the workout type. In addition, add flights climbed samples to a workout using the add(_:to:completion:) method. These samples should sum up to the total flights climbed, while providing detailed information about how the intensity changes over the duration of the workout.\n\nSee Also\nAccessing workout data\nvar duration: TimeInterval\nThe workout’s duration.\nvar workoutActivityType: HKWorkoutActivityType\nThe type of activity performed during the workout.\nvar workoutActivities: [HKWorkoutActivity]\nvar workoutEvents: [HKWorkoutEvent]?\nAn array of workout event objects.\nfunc statistics(for: HKQuantityType) -> HKStatistics?\nReturns the workout’s statistics for the provided quantity type.\nvar allStatistics: [HKQuantityType : HKStatistics]\nA dictionary that contains all the statistics for the workout.\nvar totalDistance: HKQuantity?\nThe total distance traveled during the workout.\nDeprecated\nvar totalEnergyBurned: HKQuantity?\nThe total active energy burned during the workout.\nDeprecated\nvar totalSwimmingStrokeCount: HKQuantity?\nThe total stroke count for the workout.\nDeprecated"
  },
  {
    "title": "HKWorkoutSortIdentifierDuration | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkoutsortidentifierduration",
    "html": "See Also\nSpecifying sort identifiers\nlet HKWorkoutSortIdentifierTotalDistance: String\nA constant for sorting workouts based on their total distance.\nlet HKWorkoutSortIdentifierTotalEnergyBurned: String\nA constant for sorting workouts based on the total energy burned."
  },
  {
    "title": "totalEnergyBurned | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkout/1615491-totalenergyburned",
    "html": "Deprecated\n\nUse allStatistics or statistics(for:) instead.\n\nDiscussion\n\nThis property contains a quantity using energy units, or nil.\n\nNote\n\nProvide a total energy burned value whenever the active calories burned is relevant to the workout type. In addition, add active energy burned samples to a workout using the add(_:to:completion:) method. These samples should sum up to the total energy, while providing detailed information about how the intensity changes over the duration of the workout.\n\nSee Also\nAccessing workout data\nvar duration: TimeInterval\nThe workout’s duration.\nvar workoutActivityType: HKWorkoutActivityType\nThe type of activity performed during the workout.\nvar workoutActivities: [HKWorkoutActivity]\nvar workoutEvents: [HKWorkoutEvent]?\nAn array of workout event objects.\nfunc statistics(for: HKQuantityType) -> HKStatistics?\nReturns the workout’s statistics for the provided quantity type.\nvar allStatistics: [HKQuantityType : HKStatistics]\nA dictionary that contains all the statistics for the workout.\nvar totalDistance: HKQuantity?\nThe total distance traveled during the workout.\nDeprecated\nvar totalFlightsClimbed: HKQuantity?\nThe total number of flights of stairs climbed during the workout.\nDeprecated\nvar totalSwimmingStrokeCount: HKQuantity?\nThe total stroke count for the workout.\nDeprecated\nRelated Documentation\nfunc splitTotalEnergy(HKQuantity, start: Date, end: Date, resultsHandler: (HKQuantity?, HKQuantity?, Error?) -> Void)\nCalculates the active and resting energy burned based on the total energy burned over the given duration."
  },
  {
    "title": "totalDistance | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkout/1615756-totaldistance",
    "html": "Deprecated\n\nUse allStatistics or statistics(for:) instead.\n\nDiscussion\n\nThis property contains a quantity using length units, or nil.\n\nNote\n\nProvide a total distance value whenever the distance traveled is relevant to the workout type. In addition, add distance samples to a workout using the add(_:to:completion:) method. These samples should sum up to the total distance, while providing detailed information about how the intensity changes over the duration of the workout.\n\nSee Also\nAccessing workout data\nvar duration: TimeInterval\nThe workout’s duration.\nvar workoutActivityType: HKWorkoutActivityType\nThe type of activity performed during the workout.\nvar workoutActivities: [HKWorkoutActivity]\nvar workoutEvents: [HKWorkoutEvent]?\nAn array of workout event objects.\nfunc statistics(for: HKQuantityType) -> HKStatistics?\nReturns the workout’s statistics for the provided quantity type.\nvar allStatistics: [HKQuantityType : HKStatistics]\nA dictionary that contains all the statistics for the workout.\nvar totalEnergyBurned: HKQuantity?\nThe total active energy burned during the workout.\nDeprecated\nvar totalFlightsClimbed: HKQuantity?\nThe total number of flights of stairs climbed during the workout.\nDeprecated\nvar totalSwimmingStrokeCount: HKQuantity?\nThe total stroke count for the workout.\nDeprecated"
  },
  {
    "title": "init(activityType:start:end:workoutEvents:totalEnergyBurned:totalDistance:totalSwimmingStrokeCount:device:metadata:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkout/2341569-init",
    "html": "Parameters\nworkoutActivityType\n\nThe type of activity performed during the workout. For the complete list of activity types, see HKWorkoutActivityType.\n\nstartDate\n\nThe date and time when the activity started.\n\nendDate\n\nThe date and time when the activity ended. This date must be equal to or later than the start date.\n\nworkoutEvents\n\nAn array of workout event objects. This array specifies when the user has paused and resumed the workout activity. This method calculates the workout’s duration based on the total amount of active time between the provided start and end dates.\n\ntotalEnergyBurned\n\nA quantity using energy units, or nil. This property sets the workout’s totalEnergyBurned property. It represents the total active energy burned during the workout.\n\ntotalDistance\n\nA quantity using length units, or nil. This property sets the workout’s totalDistance property.\n\ntotalSwimmingStrokeCount\n\nA quantity unit using count units or nil. This property sets the workout’s totalSwimmingStrokeCount property.\n\ndevice\n\nThe device that generated the data for this sample.\n\nmetadata\n\nThe metadata dictionary contains extra information describing this workout. The dictionary’s keys are all NSString objects . The values may be NSString, NSNumber, or NSDate objects. For a complete list of predefined metadata keys, see Metadata Keys.\n\nUsing predefined keys helps facilitate sharing data between apps; however, you are also encouraged to create your own, custom keys as needed to extend the HealthKit quantity sample’s capabilities.\n\nReturn Value\n\nA workout object with the specified duration, total energy burned, total distance, total stroke count, device, metadata, and workout events.\n\nDiscussion\n\nThis method calculates the workout’s duration based on the amount of time it spends in an active state. A workout starts in an active state. A pause event switches it to an inactive state, and a resume event switches it back to an active state. For more information on workout events, see HKWorkoutEvent.\n\nIf the total energy burned or total distance are non-zero values, create a set of corresponding samples that add up to the calculated totals. Associate these samples with the workout by calling the health store’s add(_:to:completion:) method.\n\nSee Also\nCreating workouts\ninit(activityType: HKWorkoutActivityType, start: Date, end: Date)\nInstantiates a new workout.\nDeprecated\ninit(activityType: HKWorkoutActivityType, start: Date, end: Date, duration: TimeInterval, totalEnergyBurned: HKQuantity?, totalDistance: HKQuantity?, metadata: [String : Any]?)\nInstantiates a new workout that includes the energy burned, distance, and metadata for the workout.\nDeprecated\ninit(activityType: HKWorkoutActivityType, start: Date, end: Date, workoutEvents: [HKWorkoutEvent]?, totalEnergyBurned: HKQuantity?, totalDistance: HKQuantity?, metadata: [String : Any]?)\nInstantiates a new workout whose duration is calculated based on the start and end dates and the provided workout events.\nDeprecated\ninit(activityType: HKWorkoutActivityType, start: Date, end: Date, duration: TimeInterval, totalEnergyBurned: HKQuantity?, totalDistance: HKQuantity?, device: HKDevice?, metadata: [String : Any]?)\nInstantiates a new workout activity that includes the device that produced the sample data.\nDeprecated\ninit(activityType: HKWorkoutActivityType, start: Date, end: Date, workoutEvents: [HKWorkoutEvent]?, totalEnergyBurned: HKQuantity?, totalDistance: HKQuantity?, device: HKDevice?, metadata: [String : Any]?)\nInstantiates a workout that includes both workout events and the device that produced the sample data.\nDeprecated\ninit(activityType: HKWorkoutActivityType, start: Date, end: Date, workoutEvents: [HKWorkoutEvent]?, totalEnergyBurned: HKQuantity?, totalDistance: HKQuantity?, totalFlightsClimbed: HKQuantity?, device: HKDevice?, metadata: [String : Any]?)\nInstantiates a workout using a variety of data, including the number of flights of stairs climbed.\nDeprecated\nRelated Documentation\nvar workoutActivityType: HKWorkoutActivityType\nThe type of activity performed during the workout.\nvar totalDistance: HKQuantity?\nThe total distance traveled during the workout.\nvar duration: TimeInterval\nThe workout’s duration.\nvar metadata: [String : Any]?\nThe metadata for this HealthKit object.\nvar totalEnergyBurned: HKQuantity?\nThe total active energy burned during the workout.\nvar workoutEvents: [HKWorkoutEvent]?\nAn array of workout event objects."
  },
  {
    "title": "HKVisionPrescriptionType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkvisionprescriptiontype",
    "html": "Topics\nPrescription types\ncase glasses\nA prescription for glasses.\ncase contacts\nA prescription for contacts.\nRelationships\nConforms To\nSendable\nSee Also\nAccessing the prescription data\nvar prescriptionType: HKVisionPrescriptionType\nThe type of vision prescription.\nvar dateIssued: Date\nThe date when the doctor issued the prescription.\nvar expirationDate: Date?\nThe date when the prescription expires."
  },
  {
    "title": "dateIssued | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkvisionprescription/3916028-dateissued",
    "html": "See Also\nAccessing the prescription data\nvar prescriptionType: HKVisionPrescriptionType\nThe type of vision prescription.\nenum HKVisionPrescriptionType\nThe type of vision prescription, for example a prescription for glasses or for contacts.\nvar expirationDate: Date?\nThe date when the prescription expires."
  },
  {
    "title": "init(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkdocumenttype/3778607-init",
    "html": "Parameters\nidentifier\n\nAn identifier that specifies the type of document to store in the sample. For a complete list of document type identifiers, see HKDocumentTypeIdentifier."
  },
  {
    "title": "init(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkcorrelationtype/3778606-init",
    "html": "Parameters\nidentifier\n\nAn identifier that specifies the type of data to store in the sample. For a complete list of correlation type identifiers, see HKCorrelationTypeIdentifier."
  },
  {
    "title": "is(compatibleWith:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquantitytype/1615719-is",
    "html": "Parameters\nunit\n\nThe HealthKit unit to be checked.\n\nReturn Value\n\nYES if the quantity type is compatible with the given unit; otherwise, NO.\n\nDiscussion\n\nWhen creating a HealthKit quantity sample, the sample’s type and quantity object must use compatible units. For more information, see HKQuantity.\n\nSee Also\nAccessing Quantity Type Data\nvar aggregationStyle: HKQuantityAggregationStyle\nThe aggregation style for the given quantity type.\nenum HKQuantityAggregationStyle\nConstant values that describe how quantities can be aggregated over time."
  },
  {
    "title": "maximumAllowedDuration | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hksampletype/3113768-maximumallowedduration",
    "html": "Return Value\n\nThe maximum time interval between the sample’s startDate and endDate properties.\n\nDiscussion\n\nThis method throws an exception if isMaximumDurationRestricted is false.\n\nSee Also\nChecking the Duration Restriction\nvar isMinimumDurationRestricted: Bool\nA Boolean value that indicates whether samples of this type have a minimum time interval between the start and end dates.\nvar minimumAllowedDuration: TimeInterval\nThe minimum duration if the sample type has a restricted duration.\nvar isMaximumDurationRestricted: Bool\nA Boolean value that indicates whether samples of this type have a maximum time interval between the start and end dates."
  },
  {
    "title": "isMaximumDurationRestricted | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hksampletype/3327019-ismaximumdurationrestricted",
    "html": "See Also\nChecking the Duration Restriction\nvar isMinimumDurationRestricted: Bool\nA Boolean value that indicates whether samples of this type have a minimum time interval between the start and end dates.\nvar minimumAllowedDuration: TimeInterval\nThe minimum duration if the sample type has a restricted duration.\nvar maximumAllowedDuration: TimeInterval\nThe maximum duration if the sample type has a restricted duration."
  },
  {
    "title": "HKSampleSortIdentifierEndDate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hksamplesortidentifierenddate",
    "html": "See Also\nSpecifying Sort Identifiers\nlet HKSampleSortIdentifierStartDate: String\nA constant for sorting samples based on their start date."
  },
  {
    "title": "sampleType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hksample/1615744-sampletype",
    "html": "Discussion\n\nThis property contains a concrete sample type that corresponds with this sample’s concrete class. For example, if the sample is an HKQuantitySample instance, it returns an HKQuantityType object.\n\nSee Also\nAccessing the Sample’s Data\nvar startDate: Date\nThe sample’s start date.\nvar endDate: Date\nThe sample’s end date.\nvar hasUndeterminedDuration: Bool\nIndicates whether the sample has an unknown duration.\nRelated Documentation\nvar quantityType: HKQuantityType\nThe quantity type for this sample.\nvar correlationType: HKCorrelationType\nThe type for this correlation.\nvar categoryType: HKCategoryType\nThe category type for this sample."
  },
  {
    "title": "minimumAllowedDuration | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hksampletype/3327021-minimumallowedduration",
    "html": "Return Value\n\nThe minimum time interval between the sample’s startDate and endDate properties.\n\nDiscussion\n\nThis method throws an exception if isMinimumDurationRestricted is false.\n\nSee Also\nChecking the Duration Restriction\nvar isMinimumDurationRestricted: Bool\nA Boolean value that indicates whether samples of this type have a minimum time interval between the start and end dates.\nvar isMaximumDurationRestricted: Bool\nA Boolean value that indicates whether samples of this type have a maximum time interval between the start and end dates.\nvar maximumAllowedDuration: TimeInterval\nThe maximum duration if the sample type has a restricted duration."
  },
  {
    "title": "aggregationStyle | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquantitytype/1615610-aggregationstyle",
    "html": "Discussion\n\nFor more information on aggregation styles, see HKQuantityAggregationStyle.\n\nSee Also\nAccessing Quantity Type Data\nenum HKQuantityAggregationStyle\nConstant values that describe how quantities can be aggregated over time.\nfunc `is`(compatibleWith: HKUnit) -> Bool\nReturns a Boolean value that indicates whether the quantity type is compatible with the given unit."
  },
  {
    "title": "HKSampleSortIdentifierStartDate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hksamplesortidentifierstartdate",
    "html": "See Also\nSpecifying Sort Identifiers\nlet HKSampleSortIdentifierEndDate: String\nA constant for sorting samples based on their end date."
  },
  {
    "title": "HKPredicateKeyPathStartDate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkpredicatekeypathstartdate",
    "html": "See Also\nSpecifying Predicate Key Paths\nlet HKPredicateKeyPathEndDate: String\nThe key path for accessing the sample’s end date."
  },
  {
    "title": "compare(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquantity/1615160-compare",
    "html": "Parameters\nquantity\n\nThe quantity to compare. This method throws an exception if the quantities do not have compatible units (invalidArgumentException).\n\nReturn Value\n\nComparisonResult.orderedDescending if the parameter is less than the receiver. ComparisonResult.orderedAscending if the parameter is greater than the receiver. ComparisonResult.orderedSame if the quantities are equal.\n\nDiscussion\n\nReturns whether the quantity argument is less than, equal to, or greater than the current quantity. This method automatically converts the quantities into the same units before comparing the values. You just need to ensure that the quantities have compatible units.\n\nNote\n\nConverting a value to a different unit can introduce floating point errors. Values that should be equal may appear unequal due to these floating point errors.\n\nIn most cases, the compatible units are clear from context. To see the unit types associated with different quantity sample types, see the type identifiers in HealthKit Constants.\n\nIf you need to programmatically check whether a particular unit is compatible with a particular quantity, call the quantity’s is(compatibleWith:) method.\n\nSee Also\nRelated Documentation\nfunc `is`(compatibleWith: HKUnit) -> Bool\nReturns a boolean value indicating whether the quantity is compatible with the provided unit."
  },
  {
    "title": "init(unit:doubleValue:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquantity/1615035-init",
    "html": "Parameters\nunit\n\nThe units for the given value. This defines the set of compatible units. For example, if you create a quantity with a meter unit, it is compatible with any other length units.\n\nvalue\n\nThe value of this quantity, measured using the unit parameter.\n\nReturn Value\n\nA newly instantiated quantity instance.\n\nDiscussion\n\nHealthKit uses quantity objects to store data for quantity samples. For more information on using quantity objects, see HKQuantitySample."
  },
  {
    "title": "HKMetricPrefix | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkmetricprefix",
    "html": "Topics\nPrefixes\ncase none\nA prefix that does not modify the base unit.\ncase femto\nA prefix that multiplies the base unit by 1e-15.\ncase pico\nA prefix that multiplies the base unit by 1e-12.\ncase nano\nA prefix that multiplies the base unit by 1e-9.\ncase micro\nA prefix that multiplies the base unit by 1e-6.\ncase milli\nA prefix that multiplies the base unit by 0.001.\ncase centi\nA prefix that multiplies the base unit by 0.01.\ncase deci\nA prefix that multiplies the base unit by 0.1.\ncase deca\nA prefix that multiplies the base unit by 10.\ncase hecto\nA prefix that multiplies the base unit by 100.\ncase kilo\nA prefix that multiplies the base unit by 1000.\ncase mega\nA prefix that multiplies the base unit by 1e6.\ncase giga\nA prefix that multiplies the base unit by 1e9.\ncase tera\nA prefix that multiplies the base unit by 1e12.\nRelationships\nConforms To\nSendable\nSee Also\nUnits and quantities\nDefining and converting units and quantities\nCreate and convert units and quantities.\nclass HKQuantity\nAn object that stores a value for a given unit.\nclass HKUnit\nA class for managing the units of measure within HealthKit."
  },
  {
    "title": "init(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkcategorytype/3778603-init",
    "html": "Parameters\nidentifier\n\nAn identifier that specifies the type of data to store in the sample. For a complete list of category type identifiers, see HKCategoryTypeIdentifier."
  },
  {
    "title": "predicateForObjects(from:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquery/1614773-predicateforobjects",
    "html": "Parameters\nworkout\n\nThe workout you are searching for.\n\nReturn Value\n\nA predicate that matches any objects that have been added to the provided workout.\n\nDiscussion\n\nUse this convenience method to create a predicate that matches all the HealthKit objects for a given workout. The following sample uses both the convenience method and a predicate format string to create equivalent predicates.\n\nlet workoutObjects = HKQuery.predicateForObjectsFromWorkout(workout)\n \nlet explicitWorkoutObjects =\n    NSPredicate(format: \"%K == %@\", HKPredicateKeyPathWorkout, workout)\n\nSee Also\nCreating workout predicates\nclass func predicateForWorkouts(with: HKWorkoutActivityType) -> NSPredicate\nReturns a predicate for matching workouts based on the type of activity.\nclass func predicateForWorkouts(activityPredicate: NSPredicate) -> NSPredicate\nReturns a predicate for matching workouts based on the associated workout activities.\nclass func predicateForWorkouts(with: NSComparisonPredicate.Operator, duration: TimeInterval) -> NSPredicate\nReturns a predicate for matching workouts based on their duration.\nclass func predicateForWorkouts(operatorType: NSComparisonPredicate.Operator, quantityType: HKQuantityType, averageQuantity: HKQuantity) -> NSPredicate\nReturns a predicate for matching workouts based the average value of an associated quantity type.\nclass func predicateForWorkouts(operatorType: NSComparisonPredicate.Operator, quantityType: HKQuantityType, maximumQuantity: HKQuantity) -> NSPredicate\nReturns a predicate for matching workout activities based the maximum value of an associated quantity type.\nclass func predicateForWorkouts(operatorType: NSComparisonPredicate.Operator, quantityType: HKQuantityType, minimumQuantity: HKQuantity) -> NSPredicate\nReturns a predicate for matching workout activities based the minimum value of an associated quantity type.\nclass func predicateForWorkouts(operatorType: NSComparisonPredicate.Operator, quantityType: HKQuantityType, sumQuantity: HKQuantity) -> NSPredicate\nReturns a predicate for matching workout activities based the sum of an associated quantity type.\nclass func predicateForWorkouts(with: NSComparisonPredicate.Operator, totalDistance: HKQuantity) -> NSPredicate\nReturns a predicate for matching workouts based on the total distance traveled.\nDeprecated\nclass func predicateForWorkouts(with: NSComparisonPredicate.Operator, totalEnergyBurned: HKQuantity) -> NSPredicate\nReturns a predicate for matching workouts based on the total energy burned.\nDeprecated\nclass func predicateForWorkouts(with: NSComparisonPredicate.Operator, totalFlightsClimbed: HKQuantity) -> NSPredicate\nReturns a predicate that matches workout samples based on the number of flights climbed.\nDeprecated\nclass func predicateForWorkouts(with: NSComparisonPredicate.Operator, totalSwimmingStrokeCount: HKQuantity) -> NSPredicate\nReturns a predicate that matches workout samples based on the number of strokes while swimming.\nDeprecated\nRelated Documentation\nfunc add([HKSample], to: HKWorkout, completion: (Bool, Error?) -> Void)\nAssociates the provided samples with the specified workout."
  },
  {
    "title": "requiresPerObjectAuthorization() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkobjecttype/3974094-requiresperobjectauthorization",
    "html": "Discussion\n\nIf this method returns true, you must call requestPerObjectReadAuthorization(for:predicate:completion:) each time you want to query for the data type. The user can then select the individual samples that the app has permission to read. The system always prompts the user for permission, regardless of whether they’ve previously granted permission.\n\nImportant\n\nUsing the requestAuthorization(toShare:read:) method to request read access to any data types that require per-object authorization fails with an HKError.Code.errorInvalidArgument error.\n\nSee Also\nGetting property data\nvar identifier: String\nA unique string identifying the HealthKit object type.\nRelated Documentation\nclass HKPrescriptionType\nA type that identifies samples that store a prescription.\nlet HKVisionPrescriptionTypeIdentifier: String\nA type identifier for vision prescription samples."
  },
  {
    "title": "HKWorkoutSessionState.ended | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkoutsessionstate/ended",
    "html": "Discussion\n\nThe watch can no longer run in the background. Its sensors return to normal, and it no longer generates workout data. You can’t restart or reuse the workout session.\n\nSee Also\nSession states\ncase notStarted\nThe workout session has not started.\ncase prepared\nThe session is ready but not yet running.\ncase running\nThe workout session is running.\ncase paused\nThe workout session has paused.\ncase stopped\nThe session has stopped.\nRelated Documentation\nfunc end()\nEnds the workout session."
  },
  {
    "title": "workoutSession(_:didChangeTo:from:date:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkoutsessiondelegate/1627958-workoutsession",
    "html": "Required\n\nParameters\nworkoutSession\n\nThe workout session that changed.\n\ntoState\n\nThe session’s new state. For a list of possible values, see HKWorkoutSessionState.\n\nfromState\n\nThe session’s previous state. For a list of possible values, see HKWorkoutSessionState.\n\ndate\n\nA date object indicating when the state change occurred.\n\nDiscussion\n\nIf your application is suspended, the delegate receives this call after the application resumes. This means you may receive the notification long after the state changed. Check the date parameter to determine when the state change actually occurred.\n\nFor a list of possible session states, see HKWorkoutSessionState.\n\nSee Also\nTracking workout sessions\nfunc workoutSession(HKWorkoutSession, didFailWithError: Error)\nTells the delegate that the session failed with an error.\n\nRequired\n\nfunc workoutSession(HKWorkoutSession, didGenerate: HKWorkoutEvent)\nTells the delegate that the system generated a workout event.\nfunc workoutSession(HKWorkoutSession, didBeginActivityWith: HKWorkoutConfiguration, date: Date)\nTells the delegate that a new workout session began.\nfunc workoutSession(HKWorkoutSession, didEndActivityWith: HKWorkoutConfiguration, date: Date)\nTells the session that the current workout activity ended."
  },
  {
    "title": "identifier | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkobjecttype/1615294-identifier",
    "html": "Discussion\n\nEach object type has a unique identifier. The identifiers can be grouped into four categories: category identifiers, characteristic identifiers, correlation identifiers, and quantity identifiers. Each group of identifiers is associated with a different concrete subclass of HKObjectType. For a complete list of type identifiers, see HealthKit Constants.\n\nSee Also\nGetting property data\nfunc requiresPerObjectAuthorization() -> Bool\nReturns a Boolean that indicates whether the data type requires per-object authorization."
  },
  {
    "title": "HKDocumentTypeIdentifier | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkdocumenttypeidentifier",
    "html": "Overview\n\nTo create an HKDocumentType instance, pass an HKDocumentTypeIdentifier value to the documentType(forIdentifier:) method.\n\nFor the complete list of quantity type identifiers, see Document Types.\n\nTopics\nDocument Types\nstatic let CDA: HKDocumentTypeIdentifier\nThe CDA Document type identifier, used when requesting permission to read or share CDA documents.\nInitializers\ninit(rawValue: String)\nReturns a newly initialized document type identifier using the provided string.\nRelationships\nConforms To\nHashable\nRawRepresentable\nSendable\nSee Also\nCreating document types\nclass func documentType(forIdentifier: HKDocumentTypeIdentifier) -> HKDocumentType?\nReturns the shared document type for the provided identifier."
  },
  {
    "title": "HKWorkoutSessionDelegate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkoutsessiondelegate",
    "html": "Overview\n\nAll the methods are required. HealthKit calls these methods on an anonymous serial background queue.\n\nTopics\nTracking workout sessions\nfunc workoutSession(HKWorkoutSession, didChangeTo: HKWorkoutSessionState, from: HKWorkoutSessionState, date: Date)\nTells the delegate that the session’s state changed.\n\nRequired\n\nfunc workoutSession(HKWorkoutSession, didFailWithError: Error)\nTells the delegate that the session failed with an error.\n\nRequired\n\nfunc workoutSession(HKWorkoutSession, didGenerate: HKWorkoutEvent)\nTells the delegate that the system generated a workout event.\nfunc workoutSession(HKWorkoutSession, didBeginActivityWith: HKWorkoutConfiguration, date: Date)\nTells the delegate that a new workout session began.\nfunc workoutSession(HKWorkoutSession, didEndActivityWith: HKWorkoutConfiguration, date: Date)\nTells the session that the current workout activity ended.\nWorking with mirrored sessions\nfunc workoutSession(HKWorkoutSession, didDisconnectFromRemoteDeviceWithError: Error?)\nTells the delegate that the mirrored workout session disconnected from the primary session.\nfunc workoutSession(HKWorkoutSession, didReceiveDataFromRemoteWorkoutSession: [Data])\nPasses data from the remote workout session to the session delegate.\nRelationships\nInherits From\nNSObjectProtocol\nSee Also\nMonitoring the session\nvar delegate: HKWorkoutSessionDelegate?\nThe workout session’s delegate."
  },
  {
    "title": "HKWorkoutSessionState.running | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkoutsessionstate/running",
    "html": "See Also\nSession states\ncase notStarted\nThe workout session has not started.\ncase prepared\nThe session is ready but not yet running.\ncase paused\nThe workout session has paused.\ncase stopped\nThe session has stopped.\ncase ended\nThe workout session has ended.\nRelated Documentation\nfunc resume()\nResumes the workout session."
  },
  {
    "title": "HKWorkoutEventType.pause | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkouteventtype/pause",
    "html": "See Also\nEvents\ncase resume\nA constant indicating that the workout has resumed.\ncase motionPaused\nA constant indicating that the system has automatically paused a workout session.\ncase motionResumed\nA constant indicating that the system has automatically resumed a workout session.\ncase pauseOrResumeRequest\nA constant indicating that the user has requested a pause or resume.\ncase lap\nA constant indicating a lap.\ncase segment\nA constant indicating a period of time of interest during a workout.\ncase marker\nA constant indicating a point of interest during a workout session."
  },
  {
    "title": "HKCategoryValueHeadphoneAudioExposureEvent | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkcategoryvalueheadphoneaudioexposureevent",
    "html": "Topics\nEvents\ncase sevenDayLimit\nExposure to significant audio levels from headphones over a seven-day period.\nRelationships\nConforms To\nHKCategoryValuePredicateProviding\nSendable\nSee Also\nAssigning Values\nenum HKCategoryValue\nCategories that are undefined.\nenum HKCategoryValueCervicalMucusQuality\nCategories that represent the user’s cervical mucus quality.\nenum HKCategoryValueMenstrualFlow\nCategories that indicate the amount of menstrual flow for a given sample.\nenum HKCategoryValueOvulationTestResult\nCategories that represent the result of an ovulation home test.\nenum HKCategoryValueContraceptive\nThe type of contraceptive.\nenum HKCategoryValueSleepAnalysis\nCategories that represent the result of a sleep analysis.\nenum HKCategoryValueAppetiteChanges\nCategories that represent change in appetite.\nenum HKCategoryValuePresence\nCategories that indicate whether a symptom is present.\nenum HKCategoryValueSeverity\nCategories that represent the severity of a symptom.\nenum HKCategoryValueEnvironmentalAudioExposureEvent\nExposure events for environmental audio.\nenum HKCategoryValueLowCardioFitnessEvent\nA value that indicates a low-level cardio fitness event.\nenum HKAppleWalkingSteadinessClassification\nA classification of a score based on the steadiness of the user’s gait.\nenum HKCategoryValueAppleWalkingSteadinessEvent\nThe value of an event triggered by a reduced score for the steadiness of the user’s gait.\nenum HKCategoryValuePregnancyTestResult\nCategory values that indicate the results of a home pregnancy test.\nenum HKCategoryValueProgesteroneTestResult\nA category value that indicates the result from a home progesterone test.\nenum HKCategoryValueAudioExposureEvent\nCategories that indicate audio exposure events."
  },
  {
    "title": "HKCategoryValueEnvironmentalAudioExposureEvent | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkcategoryvalueenvironmentalaudioexposureevent",
    "html": "Topics\nEvents\ncase momentaryLimit\nA brief exposure to a loud environment.\nMetadata Keys\nlet HKMetadataKeyAudioExposureLevel: String\nThe audio level associated with an audio event.\nRelationships\nConforms To\nHKCategoryValuePredicateProviding\nSendable\nSee Also\nAssigning Values\nenum HKCategoryValue\nCategories that are undefined.\nenum HKCategoryValueCervicalMucusQuality\nCategories that represent the user’s cervical mucus quality.\nenum HKCategoryValueMenstrualFlow\nCategories that indicate the amount of menstrual flow for a given sample.\nenum HKCategoryValueOvulationTestResult\nCategories that represent the result of an ovulation home test.\nenum HKCategoryValueContraceptive\nThe type of contraceptive.\nenum HKCategoryValueSleepAnalysis\nCategories that represent the result of a sleep analysis.\nenum HKCategoryValueAppetiteChanges\nCategories that represent change in appetite.\nenum HKCategoryValuePresence\nCategories that indicate whether a symptom is present.\nenum HKCategoryValueSeverity\nCategories that represent the severity of a symptom.\nenum HKCategoryValueHeadphoneAudioExposureEvent\nExposure events for headphone audio.\nenum HKCategoryValueLowCardioFitnessEvent\nA value that indicates a low-level cardio fitness event.\nenum HKAppleWalkingSteadinessClassification\nA classification of a score based on the steadiness of the user’s gait.\nenum HKCategoryValueAppleWalkingSteadinessEvent\nThe value of an event triggered by a reduced score for the steadiness of the user’s gait.\nenum HKCategoryValuePregnancyTestResult\nCategory values that indicate the results of a home pregnancy test.\nenum HKCategoryValueProgesteroneTestResult\nA category value that indicates the result from a home progesterone test.\nenum HKCategoryValueAudioExposureEvent\nCategories that indicate audio exposure events."
  },
  {
    "title": "HKCharacteristicTypeIdentifier | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkcharacteristictypeidentifier",
    "html": "Overview\n\nTo create an HKCharacteristicType instance, pass an HKCharacteristicTypeIdentifier value to the characteristicType(forIdentifier:) method.\n\nTopics\nCharacteristic Types\nstatic let activityMoveMode: HKCharacteristicTypeIdentifier\nA characteristic identifier for the user’s activity mode.\nstatic let biologicalSex: HKCharacteristicTypeIdentifier\nA characteristic type identifier for the user’s sex.\nstatic let bloodType: HKCharacteristicTypeIdentifier\nA characteristic type identifier for the user’s blood type.\nstatic let dateOfBirth: HKCharacteristicTypeIdentifier\nA characteristic type identifier for the user’s date of birth.\nstatic let fitzpatrickSkinType: HKCharacteristicTypeIdentifier\nA characteristic type identifier for the user’s skin type.\nstatic let wheelchairUse: HKCharacteristicTypeIdentifier\nA characteristic identifier for the user’s use of a wheelchair.\nInitializers\ninit(rawValue: String)\nReturns a newly initialized characteristic type identifier using the provided string.\nRelationships\nConforms To\nHashable\nRawRepresentable\nSendable\nSee Also\nCreating characteristic types\nclass func characteristicType(forIdentifier: HKCharacteristicTypeIdentifier) -> HKCharacteristicType?\nReturns the shared characteristic type for the provided identifier."
  },
  {
    "title": "characteristicType(forIdentifier:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkobjecttype/1615558-characteristictype",
    "html": "Parameters\nidentifier\n\nA characteristic type identifier. For a list of valid identifiers, see HKCharacteristicTypeIdentifier.\n\nReturn Value\n\nThe shared HKCharacteristicType instance based on the provided identifier.\n\nDiscussion\n\nThis method returns an instance of the HKCharacteristicType concrete subclass. Characteristic types represent data that doesn’t typically change over time. Unlike the other object types, characteristic types cannot be used to create new HealthKit objects. Instead, users must enter and edit their characteristic data using the Health app. Characteristic types are used only when asking for permission to read data from the HealthKit store.\n\nSee Also\nCreating characteristic types\nstruct HKCharacteristicTypeIdentifier\nThe identifiers that create characteristic type objects."
  },
  {
    "title": "electrocardiogramType() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkobjecttype/3552035-electrocardiogramtype",
    "html": "Return Value\n\nThe shared HKElectrocardiogramType instance.\n\nDiscussion\n\nThis method returns an instance of the HKElectrocardiogramType concrete subclass. Use this type to request permission to read HKElectrocardiogram objects from the HealthKit store.\n\nNote\n\nYou can’t request permission to share HKActivitySummary objects."
  },
  {
    "title": "activitySummaryType() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkobjecttype/1615319-activitysummarytype",
    "html": "Return Value\n\nThe shared HKActivitySummaryType instance.\n\nDiscussion\n\nThis method returns an instance of the HKActivitySummaryType concrete subclass. Use this type to request permission to read HKActivitySummary objects from the HealthKit store.\n\nNote\n\nYou cannot request permission to share HKActivitySummary objects."
  },
  {
    "title": "HKCategoryValuePredicateProviding | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkcategoryvaluepredicateproviding",
    "html": "Topics\nCreating predicates\nstatic func predicateForSamples(NSComparisonPredicate.Operator, value: Self) -> NSPredicate\nReturns a predicate that checks a category sample’s value.\nAvailable when RawValue is Int.\nstatic func predicateForSamples(equalTo: Set<Self>) -> NSPredicate\nReturns a predicate that checks whether a category sample is equal to the provided set of values.\nAvailable when RawValue is Int.\nRelationships\nInherits From\nHashable\nRawRepresentable\nConforming Types\nHKCategoryValue\nHKCategoryValueAppetiteChanges\nHKCategoryValueAppleStandHour\nHKCategoryValueAppleWalkingSteadinessEvent\nHKCategoryValueCervicalMucusQuality\nHKCategoryValueContraceptive\nHKCategoryValueEnvironmentalAudioExposureEvent\nHKCategoryValueHeadphoneAudioExposureEvent\nHKCategoryValueLowCardioFitnessEvent\nHKCategoryValueMenstrualFlow\nHKCategoryValueOvulationTestResult\nHKCategoryValuePregnancyTestResult\nHKCategoryValuePresence\nHKCategoryValueProgesteroneTestResult\nHKCategoryValueSeverity\nHKCategoryValueSleepAnalysis\nSee Also\nCreating category sample predicates\nclass func predicateForCategorySamples(with: NSComparisonPredicate.Operator, value: Int) -> NSPredicate\nReturns a predicate that checks a category sample’s value."
  },
  {
    "title": "predicateForClinicalRecords(from:fhirResourceType:identifier:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquery/2999413-predicateforclinicalrecords",
    "html": "Discussion\n\nThe FHIR resource identifier is only unique for a particular resource type from a given source. To uniquely identify a FHIR resource, you must compare the identifier, the resource type, and the source.\n\nSee Also\nCreating clinical record predicates\nclass func predicateForClinicalRecords(withFHIRResourceType: HKFHIRResourceType) -> NSPredicate\nReturns a predicate for a specific FHIR type.\nclass func predicateForVerifiableClinicalRecords(withRelevantDateWithin: DateInterval) -> NSPredicate\nReturns a predicate that finds verifiable health records with a relevant date within the specified range."
  },
  {
    "title": "HKCorrelationTypeIdentifier | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkcorrelationtypeidentifier",
    "html": "Overview\n\nTo create an HKCorrelationType instance, pass an HKCorrelationTypeIdentifier value to the correlationType(forIdentifier:) method.\n\nTopics\nCorrelation Types\nstatic let bloodPressure: HKCorrelationTypeIdentifier\nA correlation sample that combines a systolic sample and a diastolic sample into a single blood pressure reading.\nstatic let food: HKCorrelationTypeIdentifier\nFood correlation types combine any number of nutritional samples into a single food object.\nInitializers\ninit(rawValue: String)\nReturns a newly initialized correlation type identifier using the provided string.\nRelationships\nConforms To\nHashable\nRawRepresentable\nSendable\nSee Also\nCreating correlation types\nclass func correlationType(forIdentifier: HKCorrelationTypeIdentifier) -> HKCorrelationType?\nReturns the shared correlation type for the provided identifier."
  },
  {
    "title": "HKPredicateKeyPathMetadata | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkpredicatekeypathmetadata",
    "html": "See Also\nSpecifying Predicate Key Paths\nlet HKPredicateKeyPathUUID: String\nThe key path for accessing the object’s UUID inside a predicate format string."
  },
  {
    "title": "workoutType() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkobjecttype/1615132-workouttype",
    "html": "Return Value\n\nThe shared HKWorkoutType instance.\n\nDiscussion\n\nThis method returns an instance of the HKWorkoutType concrete subclass. HealthKit uses workout types to create samples that store information about individual workouts. Use workout type instances to create workout objects that you can save in the HealthKit store. For more information, see HKWorkoutType.\n\nIn HealthKit, all workouts use the same workout type."
  },
  {
    "title": "HKPredicateKeyPathUUID | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkpredicatekeypathuuid",
    "html": "See Also\nSpecifying Predicate Key Paths\nlet HKPredicateKeyPathMetadata: String\nThe key path for accessing the object’s metadata dictionary inside a predicate format string."
  },
  {
    "title": "predicateForObjects(withMetadataKey:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquery/1614782-predicateforobjects",
    "html": "Parameters\nkey\n\nThe metadata key to match. For a list of preset keys, see Metadata Keys. You may also search for custom keys.\n\nReturn Value\n\nA predicate that matches any object whose metadata contains the provided key.\n\nDiscussion\n\nUse this convenience method to create a predicate that finds all objects with a specific key stored in their metadata. The following sample uses both the convenience method and a predicate format string to create equivalent predicates.\n\nlet metadataKey = HKQuery.predicateForObjectsWithMetadataKey(HKMetadataKeyFoodType)\n \nlet explicitMetadataKey =\n    NSPredicate(format: \"%K.%K != nil\",\n                HKPredicateKeyPathMetadata, HKMetadataKeyFoodType)\n\nSee Also\nCreating object predicates\nclass func predicateForObject(with: UUID) -> NSPredicate\nReturns a predicate that matches an object with the specified universally unique identifier (UUID).\nclass func predicateForObjects(with: Set<UUID>) -> NSPredicate\nReturns a predicate that matches the objects with the specified universally unique identifiers (UUIDs).\nclass func predicateForObjects(from: HKSource) -> NSPredicate\nReturns a predicate that matches all the objects that were created by the provided source.\nclass func predicateForObjects(from: Set<HKSource>) -> NSPredicate\nReturns a predicate that matches all the objects that were created by any of the provided sources.\nclass func predicateForObjects(from: Set<HKDevice>) -> NSPredicate\nReturns a predicate that matches all the objects that were created by any of the provided devices.\nclass func predicateForObjects(withDeviceProperty: String, allowedValues: Set<String>) -> NSPredicate\nReturns a predicate that matches all objects created by devices with the specified properties.\nclass func predicateForObjects(from: Set<HKSourceRevision>) -> NSPredicate\nReturns a predicate that matches all the objects that were created by any of the provided source revisions.\nclass func predicateForObjects(withMetadataKey: String, allowedValues: [Any]) -> NSPredicate\nReturns a predicate that matches objects based on the provided metadata key and an array of target values.\nclass func predicateForObjects(withMetadataKey: String, operatorType: NSComparisonPredicate.Operator, value: Any) -> NSPredicate\nReturns a predicate that matches objects based on the provided metadata key, value, and operator.\nclass func predicateForObjectsWithNoCorrelation() -> NSPredicate\nReturns a predicate that matches all objects that are not associated with a HealthKit correlation.\nRelated Documentation\nlet HKPredicateKeyPathMetadata: String\nThe key path for accessing the object’s metadata dictionary inside a predicate format string.\nvar metadata: [String : Any]?\nThe metadata for this HealthKit object."
  },
  {
    "title": "predicateForObjects(from:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquery/1614765-predicateforobjects",
    "html": "Parameters\ndevices\n\nA set of devices that have generated the data for objects stored in the HealthKit store.\n\nReturn Value\n\nA predicate that matches all the objects that store data generated by any of the provided devices.\n\nDiscussion\n\nWhen creating the device objects for this predicate, only pass in values for the parameters you need for your query. HealthKit returns all the devices that match the non-nil parameters. This gives you a great deal of control when it comes to fine tuning your query. For example, setting the localIdentifier and the firmwareVersion parameters lets you query for all the samples generated by a specific device running a specific version of the firmware. Just setting the manufacturer and model casts a much broader net.\n\nThe following sample uses both the convenience method and a predicate format string to create equivalent predicates.\n\nlet fromDevices = HKQuery.predicateForObjectsFromDevices(devices)\n \nlet explicitFromDevices =\n    NSPredicate(format: \"%K IN %@\", HKPredicateKeyPathDevice, devices)\n\nSee Also\nCreating object predicates\nclass func predicateForObject(with: UUID) -> NSPredicate\nReturns a predicate that matches an object with the specified universally unique identifier (UUID).\nclass func predicateForObjects(with: Set<UUID>) -> NSPredicate\nReturns a predicate that matches the objects with the specified universally unique identifiers (UUIDs).\nclass func predicateForObjects(from: HKSource) -> NSPredicate\nReturns a predicate that matches all the objects that were created by the provided source.\nclass func predicateForObjects(from: Set<HKSource>) -> NSPredicate\nReturns a predicate that matches all the objects that were created by any of the provided sources.\nclass func predicateForObjects(withDeviceProperty: String, allowedValues: Set<String>) -> NSPredicate\nReturns a predicate that matches all objects created by devices with the specified properties.\nclass func predicateForObjects(from: Set<HKSourceRevision>) -> NSPredicate\nReturns a predicate that matches all the objects that were created by any of the provided source revisions.\nclass func predicateForObjects(withMetadataKey: String) -> NSPredicate\nReturns a predicate that matches any object whose metadata contains the provided key.\nclass func predicateForObjects(withMetadataKey: String, allowedValues: [Any]) -> NSPredicate\nReturns a predicate that matches objects based on the provided metadata key and an array of target values.\nclass func predicateForObjects(withMetadataKey: String, operatorType: NSComparisonPredicate.Operator, value: Any) -> NSPredicate\nReturns a predicate that matches objects based on the provided metadata key, value, and operator.\nclass func predicateForObjectsWithNoCorrelation() -> NSPredicate\nReturns a predicate that matches all objects that are not associated with a HealthKit correlation."
  },
  {
    "title": "predicateForObjects(from:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquery/1614791-predicateforobjects",
    "html": "Parameters\nsourceRevisions\n\nA set of source revisions that have saved data to the HealthKit store.\n\nReturn Value\n\nA predicate that matches all the objects created by any of the provided source revisions.\n\nDiscussion\n\nThe following sample uses both the convenience method and a predicate format string to create equivalent predicates.\n\nlet fromSourceRevisions = HKQuery.predicateForObjectsFromSourceRevisions(sourceRevisions)\n \nlet explicitFromSourceRevisions = NSPredicate(format: \"%K IN %@\", HKPredicateKeyPathSourceRevision, sourceRevisions)\n\nSee Also\nCreating object predicates\nclass func predicateForObject(with: UUID) -> NSPredicate\nReturns a predicate that matches an object with the specified universally unique identifier (UUID).\nclass func predicateForObjects(with: Set<UUID>) -> NSPredicate\nReturns a predicate that matches the objects with the specified universally unique identifiers (UUIDs).\nclass func predicateForObjects(from: HKSource) -> NSPredicate\nReturns a predicate that matches all the objects that were created by the provided source.\nclass func predicateForObjects(from: Set<HKSource>) -> NSPredicate\nReturns a predicate that matches all the objects that were created by any of the provided sources.\nclass func predicateForObjects(from: Set<HKDevice>) -> NSPredicate\nReturns a predicate that matches all the objects that were created by any of the provided devices.\nclass func predicateForObjects(withDeviceProperty: String, allowedValues: Set<String>) -> NSPredicate\nReturns a predicate that matches all objects created by devices with the specified properties.\nclass func predicateForObjects(withMetadataKey: String) -> NSPredicate\nReturns a predicate that matches any object whose metadata contains the provided key.\nclass func predicateForObjects(withMetadataKey: String, allowedValues: [Any]) -> NSPredicate\nReturns a predicate that matches objects based on the provided metadata key and an array of target values.\nclass func predicateForObjects(withMetadataKey: String, operatorType: NSComparisonPredicate.Operator, value: Any) -> NSPredicate\nReturns a predicate that matches objects based on the provided metadata key, value, and operator.\nclass func predicateForObjectsWithNoCorrelation() -> NSPredicate\nReturns a predicate that matches all objects that are not associated with a HealthKit correlation."
  },
  {
    "title": "predicateForObjects(withDeviceProperty:allowedValues:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquery/1614775-predicateforobjects",
    "html": "Parameters\nkey\n\nA string specifying the device’s property. For a list of valid keys, see Valid Device Property Keys.\n\nallowedValues\n\nA set of strings. These strings represent the target property values.\n\nReturn Value\n\nA predicate that matches all objects created by a device whose specified property matches one of the allowed values.\n\nDiscussion\n\nUse this convenience method to create a predicate that finds all the objects saved by matching devices. These predicates let you match multiple values for a single property. For example, you can create a single predicate that matches a number of different manufacturer values.\n\nThe following sample shows how to create a predicate that matches a list of device model names.\n\nlet fromDevices = HKQuery.predicateForObjectsWithDeviceProperty(HKDevicePropertyKeyModel, allowedValues:modelNames)\n\nTopics\nValid Device Property Keys\nUse these keys to create predicates that match the specified device property.\nlet HKDevicePropertyKeyName: String\nThe device’s name.\nlet HKDevicePropertyKeyManufacturer: String\nThe device’s manufacturer.\nlet HKDevicePropertyKeyModel: String\nThe device’s model.\nlet HKDevicePropertyKeyHardwareVersion: String\nThe device’s hardware version.\nlet HKDevicePropertyKeyFirmwareVersion: String\nThe device’s firmware version.\nlet HKDevicePropertyKeySoftwareVersion: String\nThe device’s software version.\nlet HKDevicePropertyKeyLocalIdentifier: String\nA unique identifier for the device on the hardware running the app. For more information, see localIdentifier.\nlet HKDevicePropertyKeyUDIDeviceIdentifier: String\nThe device’s UDI Device Identifier.\nSee Also\nCreating object predicates\nclass func predicateForObject(with: UUID) -> NSPredicate\nReturns a predicate that matches an object with the specified universally unique identifier (UUID).\nclass func predicateForObjects(with: Set<UUID>) -> NSPredicate\nReturns a predicate that matches the objects with the specified universally unique identifiers (UUIDs).\nclass func predicateForObjects(from: HKSource) -> NSPredicate\nReturns a predicate that matches all the objects that were created by the provided source.\nclass func predicateForObjects(from: Set<HKSource>) -> NSPredicate\nReturns a predicate that matches all the objects that were created by any of the provided sources.\nclass func predicateForObjects(from: Set<HKDevice>) -> NSPredicate\nReturns a predicate that matches all the objects that were created by any of the provided devices.\nclass func predicateForObjects(from: Set<HKSourceRevision>) -> NSPredicate\nReturns a predicate that matches all the objects that were created by any of the provided source revisions.\nclass func predicateForObjects(withMetadataKey: String) -> NSPredicate\nReturns a predicate that matches any object whose metadata contains the provided key.\nclass func predicateForObjects(withMetadataKey: String, allowedValues: [Any]) -> NSPredicate\nReturns a predicate that matches objects based on the provided metadata key and an array of target values.\nclass func predicateForObjects(withMetadataKey: String, operatorType: NSComparisonPredicate.Operator, value: Any) -> NSPredicate\nReturns a predicate that matches objects based on the provided metadata key, value, and operator.\nclass func predicateForObjectsWithNoCorrelation() -> NSPredicate\nReturns a predicate that matches all objects that are not associated with a HealthKit correlation."
  },
  {
    "title": "objectType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquery/1614768-objecttype",
    "html": "Discussion\n\nNot all queries return objects of the specified type; however, they all use the object type to filter their results. For example, source queries return a set of data sources that have saved objects with a matching type, while statistics queries return statistical information about the objects with a matching type.\n\nSee Also\nAccessing properties\nvar predicate: NSPredicate?\nA predicate used to filter the objects returned from the HealthKit store.\nvar sampleType: HKSampleType?\nThe type of objects being queried."
  },
  {
    "title": "diopter() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkunit/3916018-diopter",
    "html": "See Also\nConstructing vision units\nclass func prismDiopter() -> Self\nReturns a HealthKit unit for measuring the prismatic deviation of a lens using prism diopter units."
  },
  {
    "title": "leftEye | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkglassesprescription/3916001-lefteye",
    "html": "See Also\nAccessing the glasses prescription data\nvar rightEye: HKGlassesLensSpecification?\nThe lens specification for the right eye."
  },
  {
    "title": "init(activityType:start:end:duration:totalEnergyBurned:totalDistance:metadata:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkout/1615739-init",
    "html": "Parameters\nworkoutActivityType\n\nThe type of activity performed during the workout. For a complete list of activity types, see HKWorkoutActivityType.\n\nstartDate\n\nThe date and time when the activity started.\n\nendDate\n\nThe date and time when the activity ended. This date must be equal to or later than the start date.\n\nduration\n\nA time interval representing the workout’s actual duration. Passing a nonzero value sets the workout’s duration property. If you pass 0, this method calculates the duration property based on the workout’s start and end dates.\n\ntotalEnergyBurned\n\nA quantity using energy units, or nil. This property sets the workout’s totalEnergyBurned property. It represents the total active energy burned during the workout.\n\ntotalDistance\n\nA quantity using length units, or nil. This property sets the workout’s totalDistance property.\n\nmetadata\n\nThe metadata dictionary contains extra information describing this workout. The dictionary’s keys are all NSString objects . The values may be NSString, NSNumber, or NSDate objects. For a complete list of predefined metadata keys, see Metadata Keys.\n\nUsing predefined keys helps facilitate sharing data between apps; however, you are also encouraged to create your own, custom keys as needed to extend the workout’s capabilities.\n\nReturn Value\n\nA workout object with the provided duration, total energy burned, total distance, and metadata properties. The workoutEvents property and the device are set to nil.\n\nDiscussion\n\nThis method returns a workout with the specified duration, total energy burned, total distance and metadata. The workoutEventsproperty and the device are set to nil.\n\nIf the total energy burned or total distance are nonzero values, create a set of corresponding samples that add up to the calculated totals. Associate these samples with the workout by calling the health store’s add(_:to:completion:) method.\n\nlet distance = HKQuantity(unit: HKUnit.mileUnit(), doubleValue: 5.2)\nlet energyBurned = HKQuantity(unit: HKUnit.kilocalorieUnit(), doubleValue: 259.0)\nlet metadata = [HKMetadataKeyIndoorWorkout:false]\n \nlet hike = HKWorkout(activityType: HKWorkoutActivityType.Hiking,\n                     startDate: start, endDate: end, duration: 9000,\n                     totalEnergyBurned: energyBurned, totalDistance: distance, metadata: metadata)\n \n \nhealthStore.saveObject(hike) { (success, error) -> Void in\n    guard success else {\n        // Perform proper error handling here...\n        fatalError(\"*** An error occurred while saving this \" +\n            \"workout: \\(error?.localizedDescription)\")\n    }\n}\n\nSee Also\nCreating workouts\ninit(activityType: HKWorkoutActivityType, start: Date, end: Date)\nInstantiates a new workout.\nDeprecated\ninit(activityType: HKWorkoutActivityType, start: Date, end: Date, workoutEvents: [HKWorkoutEvent]?, totalEnergyBurned: HKQuantity?, totalDistance: HKQuantity?, metadata: [String : Any]?)\nInstantiates a new workout whose duration is calculated based on the start and end dates and the provided workout events.\nDeprecated\ninit(activityType: HKWorkoutActivityType, start: Date, end: Date, duration: TimeInterval, totalEnergyBurned: HKQuantity?, totalDistance: HKQuantity?, device: HKDevice?, metadata: [String : Any]?)\nInstantiates a new workout activity that includes the device that produced the sample data.\nDeprecated\ninit(activityType: HKWorkoutActivityType, start: Date, end: Date, workoutEvents: [HKWorkoutEvent]?, totalEnergyBurned: HKQuantity?, totalDistance: HKQuantity?, device: HKDevice?, metadata: [String : Any]?)\nInstantiates a workout that includes both workout events and the device that produced the sample data.\nDeprecated\ninit(activityType: HKWorkoutActivityType, start: Date, end: Date, workoutEvents: [HKWorkoutEvent]?, totalEnergyBurned: HKQuantity?, totalDistance: HKQuantity?, totalFlightsClimbed: HKQuantity?, device: HKDevice?, metadata: [String : Any]?)\nInstantiates a workout using a variety of data, including the number of flights of stairs climbed.\nDeprecated\ninit(activityType: HKWorkoutActivityType, start: Date, end: Date, workoutEvents: [HKWorkoutEvent]?, totalEnergyBurned: HKQuantity?, totalDistance: HKQuantity?, totalSwimmingStrokeCount: HKQuantity?, device: HKDevice?, metadata: [String : Any]?)\nInstantiates a workout using a variety of data, including the number of strokes while swimming.\nDeprecated\nRelated Documentation\nvar workoutActivityType: HKWorkoutActivityType\nThe type of activity performed during the workout.\nvar totalDistance: HKQuantity?\nThe total distance traveled during the workout.\nvar duration: TimeInterval\nThe workout’s duration.\nvar metadata: [String : Any]?\nThe metadata for this HealthKit object.\nvar totalEnergyBurned: HKQuantity?\nThe total active energy burned during the workout.\nvar workoutEvents: [HKWorkoutEvent]?\nAn array of workout event objects."
  },
  {
    "title": "HKFitzpatrickSkinTypeObject | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkfitzpatrickskintypeobject",
    "html": "Topics\nAccessing Skin Type Data\nvar skinType: HKFitzpatrickSkinType\nThe user’s skin type.\nRelationships\nInherits From\nNSObject\nConforms To\nNSCopying\nNSSecureCoding\nSee Also\nPossible Values\nenum HKFitzpatrickSkinType\nCategories representing the user’s skin type based on the Fitzpatrick scale."
  },
  {
    "title": "uvExposure | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquantitytypeidentifier/1615195-uvexposure",
    "html": "Discussion\n\nThese samples use count units (described in HKUnit) and measure discrete values (described in HKQuantityAggregationStyle). The sample’s value represents the UV index that the user was exposed to during the sample’s duration.\n\nSee Also\nRelated Documentation\nstruct HKQuantityTypeIdentifier\nThe identifiers that create quantity type objects.\nclass HKQuantitySample\nA sample that represents a quantity, including the value and the units.\nclass HKQuantity\nAn object that stores a value for a given unit."
  },
  {
    "title": "HKError.Code.errorUserExitedWorkoutSession | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkerror/code/erroruserexitedworkoutsession",
    "html": "Discussion\n\nWorkout sessions end when the app goes into the background.\n\nSee Also\nErrors\ncase errorHealthDataUnavailable\nHealthKit accessed on an unsupported device, such as an iPad.\ncase errorHealthDataRestricted\nA Mobile Device Management (MDM) profile restricts the use of HealthKit on this device.\ncase errorInvalidArgument\nThe app passed an invalid argument to the HealthKit API.\ncase errorAuthorizationDenied\nThe user hasn’t given the app permission to save data.\ncase errorAuthorizationNotDetermined\nThe app hasn’t yet asked the user for the authorization required to complete the task.\ncase errorRequiredAuthorizationDenied\nThe user hasn’t granted the application authorization to access all the required clinical record types.\ncase errorDatabaseInaccessible\nThe HealthKit data is unavailable because it’s protected and the device is locked.\ncase errorUserCanceled\nThe user canceled the operation.\ncase errorAnotherWorkoutSessionStarted\nAnother app started a workout session.\ncase errorNoData\nData is unavailable for the requested query and predicate."
  },
  {
    "title": "HKError.Code.errorDatabaseInaccessible | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkerror/code/errordatabaseinaccessible",
    "html": "Discussion\n\nThis error occurs when your app queries for HealthKit data while the device is locked. You can, however, still save data. This data is saved into a temporary file, which is merged with HealthKit’s data when the user unlocks their device.\n\nSee Also\nErrors\ncase errorHealthDataUnavailable\nHealthKit accessed on an unsupported device, such as an iPad.\ncase errorHealthDataRestricted\nA Mobile Device Management (MDM) profile restricts the use of HealthKit on this device.\ncase errorInvalidArgument\nThe app passed an invalid argument to the HealthKit API.\ncase errorAuthorizationDenied\nThe user hasn’t given the app permission to save data.\ncase errorAuthorizationNotDetermined\nThe app hasn’t yet asked the user for the authorization required to complete the task.\ncase errorRequiredAuthorizationDenied\nThe user hasn’t granted the application authorization to access all the required clinical record types.\ncase errorUserCanceled\nThe user canceled the operation.\ncase errorAnotherWorkoutSessionStarted\nAnother app started a workout session.\ncase errorUserExitedWorkoutSession\nThe user exited your application while a workout session was running.\ncase errorNoData\nData is unavailable for the requested query and predicate."
  },
  {
    "title": "HKWorkoutRouteBuilder | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkoutroutebuilder",
    "html": "Overview\n\nTo create a workout route, instantiate a HKWorkoutRouteBuilder, and provide it with location data throughout the workout. After the workout ends, call the builder’s finishRoute(with:metadata:completion:) method to construct the route. For detailed instructions, see Creating a Workout Route.\n\nTopics\nCreating the builder\ninit(healthStore: HKHealthStore, device: HKDevice?)\nCreates and returns a new workout route builder.\nBuilding the route\nfunc finishRoute(with: HKWorkout, metadata: [String : Any]?, completion: (HKWorkoutRoute?, Error?) -> Void)\nCreates, saves, and associates the route with the provided workout.\nfunc insertRouteData([CLLocation], completion: (Bool, Error?) -> Void)\nAdds route data to the builder.\nfunc addMetadata([String : Any], completion: (Bool, Error?) -> Void)\nAdds metadata to the builder.\nRelationships\nInherits From\nHKSeriesBuilder\nSee Also\nRoute data\nCreating a workout route\nRecord the user’s route during a workout.\nReading route data\nAccess the user’s route for a workout.\nclass HKWorkoutRoute\nA sample that contains a workout’s route data.\nstruct HKWorkoutRouteQueryDescriptor\nA query interface that reads the location data stored in a workout route using Swift concurrency.\nclass HKWorkoutRouteQuery\nA query to access the location data stored in a workout route.\nlet HKWorkoutRouteTypeIdentifier: String\nA series sample containing location data that defines the route the user took during a workout.\nclass HKSeriesBuilder\nAn abstract base class for building series samples.\nclass HKSeriesSample\nAn abstract base class that defines samples that contain a series of items."
  },
  {
    "title": "underwaterDepth | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquantitytypeidentifier/3958703-underwaterdepth",
    "html": "Discussion\n\nApple Watch Ultra automatically records these samples during dive sessions.\n\nUnderwater depth samples use length units (described in HKUnit) and measure discrete values (described in HKQuantityAggregationStyle).\n\nSee Also\nDiving\nstatic let appleSleepingWristTemperature: HKQuantityTypeIdentifier\nA quantity sample type that records the wrist temperature during sleep.\nstatic let atrialFibrillationBurden: HKQuantityTypeIdentifier\nA quantity type that measures an estimate of the percentage of time a person’s heart shows signs of atrial fibrillation (AFib) while wearing Apple Watch.\nstatic let heartRateRecoveryOneMinute: HKQuantityTypeIdentifier\nA quantity sample that records the reduction in heart rate from the peak exercise rate to the rate one minute after exercising ended.\nstatic let waterTemperature: HKQuantityTypeIdentifier\nA quantity sample that records the water temperature."
  },
  {
    "title": "HKLiveWorkoutDataSource | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkliveworkoutdatasource",
    "html": "Topics\nCreating a live data source\ninit(healthStore: HKHealthStore, workoutConfiguration: HKWorkoutConfiguration?)\nCreates a new data source based on the provided workout configuration.\nvar typesToCollect: Set<HKQuantityType>\nThe quantity type samples that the data source automatically sends to the workout builder.\nCalculating statistics\nfunc enableCollection(for: HKQuantityType, predicate: NSPredicate?)\nBegins automatically calculating statistics for samples that match the quantity type and predicate.\nfunc disableCollection(for: HKQuantityType)\nStops automatically calculating statistics for the quantity type.\nRelationships\nInherits From\nNSObject\nSee Also\nSessions\nRunning workout sessions\nTrack a workout on Apple Watch.\nBuild a workout app for Apple Watch\nCreate your own workout app, quickly and easily, with HealthKit and SwiftUI.\nBuilding a multidevice workout app\nMirror a workout from a watchOS app to its companion iOS app, and perform bidirectional communication between them.\nclass HKWorkoutSession\nA session that tracks the user’s workout on Apple Watch.\nclass HKWorkoutConfiguration\nAn object that contains configuration information about a workout session.\nenum HKWorkoutSessionState\nA workout session’s state.\nclass HKLiveWorkoutBuilder\nA builder object that constructs a workout incrementally based on live data from an active workout session."
  },
  {
    "title": "visionPrescriptionType() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkobjecttype/3916014-visionprescriptiontype",
    "html": "Discussion\n\nThis method returns an instance of the HKPrescriptionType concrete subclass. Use a prescription type to request permission to read or write prescriptions from the HealthKit store., and to create samples that store prescription information. In HealthKit, all prescriptions use the same HKPrescriptionType instance."
  },
  {
    "title": "Workout Metadata Keys | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkout/workout_metadata_keys",
    "html": "Topics\nWorkout Type\nlet HKMetadataKeyActivityType: String\nlet HKMetadataKeyAppleFitnessPlusSession: String\nlet HKMetadataKeyCoachedWorkout: String\nA key that indicates whether the workout was performed with a coach or personal trainer.\nlet HKMetadataKeyGroupFitness: String\nA key that indicates whether the workout was performed as part of a group fitness class.\nlet HKMetadataKeyIndoorWorkout: String\nA key that indicates whether the workout was performed indoors.\nlet HKMetadataKeyWorkoutBrandName: String\nThe brand name of a particular workout.\nCycling\nlet HKMetadataKeyCyclingFunctionalThresholdPowerTestType: String\nGymKit Fitness Equipment\nlet HKMetadataKeyFitnessMachineDuration: String\nThe workout duration displayed by a connected GymKit fitness machine.\nlet HKMetadataKeyCrossTrainerDistance: String\nThe workout distance displayed by a connected GymKit cross-trainer machine.\nlet HKMetadataKeyIndoorBikeDistance: String\nThe workout distance displayed by a connected GymKit exercise bike.\nIntensity\nlet HKMetadataKeyAverageMETs: String\nA key that indicates the average Metabolic Equivalent of Task (METs) during a workout.\nlet HKMetadataKeyPhysicalEffortEstimationType: String\nSkiing and Snowboarding\nlet HKMetadataKeyAlpineSlopeGrade: String\nA key that indicates the percent slope of a ski run.\nlet HKMetadataKeyElevationAscended: String\nA key that indicates the cumulative elevation ascended during a workout.\nlet HKMetadataKeyElevationDescended: String\nA key that indicates the cumulative elevation descended during a workout.\nSpeed\nlet HKMetadataKeyAverageSpeed: String\nA key that indicates the average speed during a workout.\nlet HKMetadataKeyMaximumSpeed: String\nA key that indicates the maximum speed during a workout.\nSwimming\nlet HKMetadataKeySwimmingLocationType: String\nA key that indicates the location for a swimming workout.\nlet HKMetadataKeySwimmingStrokeStyle: String\nA key that indicates the predominant stroke style for a lap of swimming.\nlet HKMetadataKeyLapLength: String\nA key that indicates the length of a lap during a workout.\nlet HKMetadataKeySWOLFScore: String\nlet HKMetadataKeyWaterSalinity: String"
  },
  {
    "title": "HKPredicateKeyPathWorkoutSumQuantity | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkpredicatekeypathworkoutsumquantity",
    "html": "See Also\nSpecifying predicate key paths\nlet HKPredicateKeyPathWorkoutType: String\nThe key path for accessing the workout’s type.\nlet HKPredicateKeyPathWorkoutDuration: String\nThe key path for accessing the workout’s duration.\nlet HKPredicateKeyPathWorkoutTotalDistance: String\nThe key path for accessing the workout’s total distance.\nlet HKPredicateKeyPathWorkoutTotalEnergyBurned: String\nThe key path for accessing the workout’s total energy burned.\nlet HKPredicateKeyPathWorkoutAverageQuantity: String\nThe key path for accessing workouts with a matching average quantity.\nlet HKPredicateKeyPathWorkoutMaximumQuantity: String\nThe key path for accessing workouts with a matching maximum quantity.\nlet HKPredicateKeyPathWorkoutMinimumQuantity: String\nThe key path for accessing workouts with a matching minimum quantity."
  },
  {
    "title": "HKPredicateKeyPathWorkoutTotalEnergyBurned | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkpredicatekeypathworkouttotalenergyburned",
    "html": "See Also\nSpecifying predicate key paths\nlet HKPredicateKeyPathWorkoutType: String\nThe key path for accessing the workout’s type.\nlet HKPredicateKeyPathWorkoutDuration: String\nThe key path for accessing the workout’s duration.\nlet HKPredicateKeyPathWorkoutTotalDistance: String\nThe key path for accessing the workout’s total distance.\nlet HKPredicateKeyPathWorkoutAverageQuantity: String\nThe key path for accessing workouts with a matching average quantity.\nlet HKPredicateKeyPathWorkoutMaximumQuantity: String\nThe key path for accessing workouts with a matching maximum quantity.\nlet HKPredicateKeyPathWorkoutMinimumQuantity: String\nThe key path for accessing workouts with a matching minimum quantity.\nlet HKPredicateKeyPathWorkoutSumQuantity: String\nThe key path for accessing workouts with a matching sum."
  },
  {
    "title": "HKPredicateKeyPathWorkoutMaximumQuantity | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkpredicatekeypathworkoutmaximumquantity",
    "html": "See Also\nSpecifying predicate key paths\nlet HKPredicateKeyPathWorkoutType: String\nThe key path for accessing the workout’s type.\nlet HKPredicateKeyPathWorkoutDuration: String\nThe key path for accessing the workout’s duration.\nlet HKPredicateKeyPathWorkoutTotalDistance: String\nThe key path for accessing the workout’s total distance.\nlet HKPredicateKeyPathWorkoutTotalEnergyBurned: String\nThe key path for accessing the workout’s total energy burned.\nlet HKPredicateKeyPathWorkoutAverageQuantity: String\nThe key path for accessing workouts with a matching average quantity.\nlet HKPredicateKeyPathWorkoutMinimumQuantity: String\nThe key path for accessing workouts with a matching minimum quantity.\nlet HKPredicateKeyPathWorkoutSumQuantity: String\nThe key path for accessing workouts with a matching sum."
  },
  {
    "title": "HKPredicateKeyPathWorkoutDuration | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkpredicatekeypathworkoutduration",
    "html": "See Also\nSpecifying predicate key paths\nlet HKPredicateKeyPathWorkoutType: String\nThe key path for accessing the workout’s type.\nlet HKPredicateKeyPathWorkoutTotalDistance: String\nThe key path for accessing the workout’s total distance.\nlet HKPredicateKeyPathWorkoutTotalEnergyBurned: String\nThe key path for accessing the workout’s total energy burned.\nlet HKPredicateKeyPathWorkoutAverageQuantity: String\nThe key path for accessing workouts with a matching average quantity.\nlet HKPredicateKeyPathWorkoutMaximumQuantity: String\nThe key path for accessing workouts with a matching maximum quantity.\nlet HKPredicateKeyPathWorkoutMinimumQuantity: String\nThe key path for accessing workouts with a matching minimum quantity.\nlet HKPredicateKeyPathWorkoutSumQuantity: String\nThe key path for accessing workouts with a matching sum."
  },
  {
    "title": "totalSwimmingStrokeCount | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkout/2341561-totalswimmingstrokecount",
    "html": "Deprecated\n\nUse allStatistics or statistics(for:) instead.\n\nDiscussion\n\nThis property contains a quantity using count units, or nil.\n\nNote\n\nProvide a total stroke count value whenever the stroke count is relevant to the workout type. In addition, add stroke count samples to a workout using the add(_:to:completion:) method. These samples should sum up to the total stroke count, while providing detailed information about how the intensity changes over the duration of the workout.\n\nSee Also\nAccessing workout data\nvar duration: TimeInterval\nThe workout’s duration.\nvar workoutActivityType: HKWorkoutActivityType\nThe type of activity performed during the workout.\nvar workoutActivities: [HKWorkoutActivity]\nvar workoutEvents: [HKWorkoutEvent]?\nAn array of workout event objects.\nfunc statistics(for: HKQuantityType) -> HKStatistics?\nReturns the workout’s statistics for the provided quantity type.\nvar allStatistics: [HKQuantityType : HKStatistics]\nA dictionary that contains all the statistics for the workout.\nvar totalDistance: HKQuantity?\nThe total distance traveled during the workout.\nDeprecated\nvar totalEnergyBurned: HKQuantity?\nThe total active energy burned during the workout.\nDeprecated\nvar totalFlightsClimbed: HKQuantity?\nThe total number of flights of stairs climbed during the workout.\nDeprecated"
  },
  {
    "title": "HKPredicateKeyPathWorkoutType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkpredicatekeypathworkouttype",
    "html": "See Also\nSpecifying predicate key paths\nlet HKPredicateKeyPathWorkoutDuration: String\nThe key path for accessing the workout’s duration.\nlet HKPredicateKeyPathWorkoutTotalDistance: String\nThe key path for accessing the workout’s total distance.\nlet HKPredicateKeyPathWorkoutTotalEnergyBurned: String\nThe key path for accessing the workout’s total energy burned.\nlet HKPredicateKeyPathWorkoutAverageQuantity: String\nThe key path for accessing workouts with a matching average quantity.\nlet HKPredicateKeyPathWorkoutMaximumQuantity: String\nThe key path for accessing workouts with a matching maximum quantity.\nlet HKPredicateKeyPathWorkoutMinimumQuantity: String\nThe key path for accessing workouts with a matching minimum quantity.\nlet HKPredicateKeyPathWorkoutSumQuantity: String\nThe key path for accessing workouts with a matching sum."
  },
  {
    "title": "HKWorkoutSortIdentifierTotalDistance | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkoutsortidentifiertotaldistance",
    "html": "See Also\nSpecifying sort identifiers\nlet HKWorkoutSortIdentifierDuration: String\nA constant for sorting workouts based on their duration.\nlet HKWorkoutSortIdentifierTotalEnergyBurned: String\nA constant for sorting workouts based on the total energy burned."
  },
  {
    "title": "workoutActivities | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkout/3929755-workoutactivities",
    "html": "See Also\nAccessing workout data\nvar duration: TimeInterval\nThe workout’s duration.\nvar workoutActivityType: HKWorkoutActivityType\nThe type of activity performed during the workout.\nvar workoutEvents: [HKWorkoutEvent]?\nAn array of workout event objects.\nfunc statistics(for: HKQuantityType) -> HKStatistics?\nReturns the workout’s statistics for the provided quantity type.\nvar allStatistics: [HKQuantityType : HKStatistics]\nA dictionary that contains all the statistics for the workout.\nvar totalDistance: HKQuantity?\nThe total distance traveled during the workout.\nDeprecated\nvar totalEnergyBurned: HKQuantity?\nThe total active energy burned during the workout.\nDeprecated\nvar totalFlightsClimbed: HKQuantity?\nThe total number of flights of stairs climbed during the workout.\nDeprecated\nvar totalSwimmingStrokeCount: HKQuantity?\nThe total stroke count for the workout.\nDeprecated"
  },
  {
    "title": "allStatistics | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkout/3979254-allstatistics",
    "html": "Discussion\n\nHealthKit calculates an HKStatistics object for each HKQuantityType, based on the HKQuantitySample objects associated with the containing workout.\n\nSee Also\nAccessing workout data\nvar duration: TimeInterval\nThe workout’s duration.\nvar workoutActivityType: HKWorkoutActivityType\nThe type of activity performed during the workout.\nvar workoutActivities: [HKWorkoutActivity]\nvar workoutEvents: [HKWorkoutEvent]?\nAn array of workout event objects.\nfunc statistics(for: HKQuantityType) -> HKStatistics?\nReturns the workout’s statistics for the provided quantity type.\nvar totalDistance: HKQuantity?\nThe total distance traveled during the workout.\nDeprecated\nvar totalEnergyBurned: HKQuantity?\nThe total active energy burned during the workout.\nDeprecated\nvar totalFlightsClimbed: HKQuantity?\nThe total number of flights of stairs climbed during the workout.\nDeprecated\nvar totalSwimmingStrokeCount: HKQuantity?\nThe total stroke count for the workout.\nDeprecated"
  },
  {
    "title": "workoutActivityType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkout/1615632-workoutactivitytype",
    "html": "Discussion\n\nFor the complete list of activity types, see HKWorkoutActivityType.\n\nSee Also\nAccessing workout data\nvar duration: TimeInterval\nThe workout’s duration.\nvar workoutActivities: [HKWorkoutActivity]\nvar workoutEvents: [HKWorkoutEvent]?\nAn array of workout event objects.\nfunc statistics(for: HKQuantityType) -> HKStatistics?\nReturns the workout’s statistics for the provided quantity type.\nvar allStatistics: [HKQuantityType : HKStatistics]\nA dictionary that contains all the statistics for the workout.\nvar totalDistance: HKQuantity?\nThe total distance traveled during the workout.\nDeprecated\nvar totalEnergyBurned: HKQuantity?\nThe total active energy burned during the workout.\nDeprecated\nvar totalFlightsClimbed: HKQuantity?\nThe total number of flights of stairs climbed during the workout.\nDeprecated\nvar totalSwimmingStrokeCount: HKQuantity?\nThe total stroke count for the workout.\nDeprecated"
  },
  {
    "title": "duration | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkout/1615240-duration",
    "html": "Discussion\n\nA workout’s duration can be specified in one of three ways. The init(activityType:start:end:) method uses the time interval between the provided start and end dates. The init(activityType:start:end:duration:totalEnergyBurned:totalDistance:metadata:) method sets the duration to the provided value. And the init(activityType:start:end:workoutEvents:totalEnergyBurned:totalDistance:metadata:) method calculates the total active duration based on the start and end dates and the workout events.\n\nSee Also\nAccessing workout data\nvar workoutActivityType: HKWorkoutActivityType\nThe type of activity performed during the workout.\nvar workoutActivities: [HKWorkoutActivity]\nvar workoutEvents: [HKWorkoutEvent]?\nAn array of workout event objects.\nfunc statistics(for: HKQuantityType) -> HKStatistics?\nReturns the workout’s statistics for the provided quantity type.\nvar allStatistics: [HKQuantityType : HKStatistics]\nA dictionary that contains all the statistics for the workout.\nvar totalDistance: HKQuantity?\nThe total distance traveled during the workout.\nDeprecated\nvar totalEnergyBurned: HKQuantity?\nThe total active energy burned during the workout.\nDeprecated\nvar totalFlightsClimbed: HKQuantity?\nThe total number of flights of stairs climbed during the workout.\nDeprecated\nvar totalSwimmingStrokeCount: HKQuantity?\nThe total stroke count for the workout.\nDeprecated"
  },
  {
    "title": "init(activityType:start:end:workoutEvents:totalEnergyBurned:totalDistance:totalFlightsClimbed:device:metadata:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkout/2867034-init",
    "html": "Parameters\nworkoutActivityType\n\nThe type of activity performed during the workout. For the complete list of activity types, see HKWorkoutActivityType.\n\nstartDate\n\nThe date and time when the activity started.\n\nendDate\n\nThe date and time when the activity ended. This date must be equal to or later than the start date.\n\nworkoutEvents\n\nAn array of workout event objects. This array specifies when the user has paused and resumed the workout activity. This method calculates the workout’s duration based on the total amount of active time between the provided start and end dates.\n\ntotalEnergyBurned\n\nA quantity using energy units, or nil. This property sets the workout’s totalEnergyBurned property. It represents the total active energy burned during the workout.\n\ntotalDistance\n\nA quantity using length units, or nil. This property sets the workout’s totalDistance property.\n\ntotalFlightsClimbed\n\nA quantity unit using count units or nil. This property sets the workout’s totalFlightsClimbed property.\n\ndevice\n\nThe device that generated the data for this sample.\n\nmetadata\n\nThe metadata dictionary contains extra information describing this workout. The dictionary’s keys are all NSString objects . The values may be NSString, NSNumber, or NSDate objects. For a complete list of predefined metadata keys, see Metadata Keys.\n\nUsing predefined keys helps facilitate sharing data between apps; however, you are also encouraged to create your own, custom keys as needed to extend the HealthKit quantity sample’s capabilities.\n\nReturn Value\n\nA workout object with the specified duration, total energy burned, total distance, total flights climbed, device, metadata, and workout events.\n\nDiscussion\n\nThis method calculates the workout’s duration based on the amount of time it spends in an active state. A workout starts in an active state. A pause event switches it to an inactive state, and a resume event switches it back to an active state. For more information on workout events, see HKWorkoutEvent.\n\nIf the total energy burned or total distance are non-zero values, create a set of corresponding samples that add up to the calculated totals. Associate these samples with the workout by calling the health store’s add(_:to:completion:) method.\n\nSee Also\nCreating workouts\ninit(activityType: HKWorkoutActivityType, start: Date, end: Date)\nInstantiates a new workout.\nDeprecated\ninit(activityType: HKWorkoutActivityType, start: Date, end: Date, duration: TimeInterval, totalEnergyBurned: HKQuantity?, totalDistance: HKQuantity?, metadata: [String : Any]?)\nInstantiates a new workout that includes the energy burned, distance, and metadata for the workout.\nDeprecated\ninit(activityType: HKWorkoutActivityType, start: Date, end: Date, workoutEvents: [HKWorkoutEvent]?, totalEnergyBurned: HKQuantity?, totalDistance: HKQuantity?, metadata: [String : Any]?)\nInstantiates a new workout whose duration is calculated based on the start and end dates and the provided workout events.\nDeprecated\ninit(activityType: HKWorkoutActivityType, start: Date, end: Date, duration: TimeInterval, totalEnergyBurned: HKQuantity?, totalDistance: HKQuantity?, device: HKDevice?, metadata: [String : Any]?)\nInstantiates a new workout activity that includes the device that produced the sample data.\nDeprecated\ninit(activityType: HKWorkoutActivityType, start: Date, end: Date, workoutEvents: [HKWorkoutEvent]?, totalEnergyBurned: HKQuantity?, totalDistance: HKQuantity?, device: HKDevice?, metadata: [String : Any]?)\nInstantiates a workout that includes both workout events and the device that produced the sample data.\nDeprecated\ninit(activityType: HKWorkoutActivityType, start: Date, end: Date, workoutEvents: [HKWorkoutEvent]?, totalEnergyBurned: HKQuantity?, totalDistance: HKQuantity?, totalSwimmingStrokeCount: HKQuantity?, device: HKDevice?, metadata: [String : Any]?)\nInstantiates a workout using a variety of data, including the number of strokes while swimming.\nDeprecated\nRelated Documentation\nvar workoutActivityType: HKWorkoutActivityType\nThe type of activity performed during the workout.\nvar totalDistance: HKQuantity?\nThe total distance traveled during the workout.\nvar duration: TimeInterval\nThe workout’s duration.\nvar metadata: [String : Any]?\nThe metadata for this HealthKit object.\nvar totalEnergyBurned: HKQuantity?\nThe total active energy burned during the workout.\nvar workoutEvents: [HKWorkoutEvent]?\nAn array of workout event objects."
  },
  {
    "title": "init(activityType:start:end:workoutEvents:totalEnergyBurned:totalDistance:device:metadata:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkout/1615713-init",
    "html": "Parameters\nworkoutActivityType\n\nThe type of activity performed during the workout. For the complete list of activity types, see HKWorkoutActivityType.\n\nstartDate\n\nThe date and time when the activity started.\n\nendDate\n\nThe date and time when the activity ended. This date must be equal to or later than the start date.\n\nworkoutEvents\n\nAn array of workout event objects. This array specifies when the user has paused and resumed the workout activity. This method calculates the workout’s duration based on the total amount of active time between the provided start and end dates.\n\ntotalEnergyBurned\n\nA quantity using energy units, or nil. This property sets the workout’s totalEnergyBurned property. It represents the total active energy burned during the workout.\n\ntotalDistance\n\nA quantity using length units, or nil. This property sets the workout’s totalDistance property.\n\ndevice\n\nThe device that generated the data for this sample.\n\nmetadata\n\nThe metadata dictionary contains extra information describing this workout. The dictionary’s keys are all NSString objects . The values may be NSString, NSNumber, or NSDate objects. For a complete list of predefined metadata keys, see Metadata Keys.\n\nUsing predefined keys helps facilitate sharing data between apps; however, you are also encouraged to create your own, custom keys as needed to extend the HealthKit quantity sample’s capabilities.\n\nReturn Value\n\nA workout object with the specified duration, total energy burned, total distance, device, metadata, and workout events.\n\nDiscussion\n\nThis method calculates the workout’s duration based on the amount of time it spends in an active state. A workout starts in an active state. A pause event switches it to an inactive state, and a resume event switches it back to an active state. For more information on workout events, see HKWorkoutEvent.\n\nIf the total energy burned or total distance are non-zero values, create a set of corresponding samples that add up to the calculated totals. Associate these samples with the workout by calling the health store’s add(_:to:completion:) method.\n\nlet distance = HKQuantity(unit: HKUnit.mileUnit(), doubleValue: 5.2)\nlet energyBurned = HKQuantity(unit: HKUnit.kilocalorieUnit(), doubleValue: 259.0)\nlet pause = HKWorkoutEvent(type: HKWorkoutEventType.Pause, date: pauseStart)\nlet resume = HKWorkoutEvent(type: HKWorkoutEventType.Resume, date: pauseEnd)\n \nlet device = HKDevice(name: deviceName,\n                      manufacturer: manufacturerName,\n                      model: modelName,\n                      hardwareVersion: hardwareVersionNumber,\n                      firmwareVersion: firmwareVersionNumber,\n                      softwareVersion: softwareVersionNumber,\n                      localIdentifier: localIdentifier,\n                      UDIDeviceIdentifier: deviceIdentifier)\n \nlet metadata = [HKMetadataKeyIndoorWorkout:false]\n \nlet kayaking = HKWorkout(activityType: HKWorkoutActivityType.PaddleSports, startDate: start, endDate: end, workoutEvents: [pause, resume], totalEnergyBurned: energyBurned, totalDistance: distance, device: device, metadata: metadata)\n \nhealthStore.saveObject(kayaking) { (success, error) -> Void in\n    \n    guard success else {\n        // Perform proper error handling here...\n        fatalError(\"*** An error occurred while saving this \" +\n            \"workout: \\(error?.localizedDescription)\")\n    }\n}\n\nSee Also\nCreating workouts\ninit(activityType: HKWorkoutActivityType, start: Date, end: Date)\nInstantiates a new workout.\nDeprecated\ninit(activityType: HKWorkoutActivityType, start: Date, end: Date, duration: TimeInterval, totalEnergyBurned: HKQuantity?, totalDistance: HKQuantity?, metadata: [String : Any]?)\nInstantiates a new workout that includes the energy burned, distance, and metadata for the workout.\nDeprecated\ninit(activityType: HKWorkoutActivityType, start: Date, end: Date, workoutEvents: [HKWorkoutEvent]?, totalEnergyBurned: HKQuantity?, totalDistance: HKQuantity?, metadata: [String : Any]?)\nInstantiates a new workout whose duration is calculated based on the start and end dates and the provided workout events.\nDeprecated\ninit(activityType: HKWorkoutActivityType, start: Date, end: Date, duration: TimeInterval, totalEnergyBurned: HKQuantity?, totalDistance: HKQuantity?, device: HKDevice?, metadata: [String : Any]?)\nInstantiates a new workout activity that includes the device that produced the sample data.\nDeprecated\ninit(activityType: HKWorkoutActivityType, start: Date, end: Date, workoutEvents: [HKWorkoutEvent]?, totalEnergyBurned: HKQuantity?, totalDistance: HKQuantity?, totalFlightsClimbed: HKQuantity?, device: HKDevice?, metadata: [String : Any]?)\nInstantiates a workout using a variety of data, including the number of flights of stairs climbed.\nDeprecated\ninit(activityType: HKWorkoutActivityType, start: Date, end: Date, workoutEvents: [HKWorkoutEvent]?, totalEnergyBurned: HKQuantity?, totalDistance: HKQuantity?, totalSwimmingStrokeCount: HKQuantity?, device: HKDevice?, metadata: [String : Any]?)\nInstantiates a workout using a variety of data, including the number of strokes while swimming.\nDeprecated\nRelated Documentation\nvar workoutActivityType: HKWorkoutActivityType\nThe type of activity performed during the workout.\nvar totalDistance: HKQuantity?\nThe total distance traveled during the workout.\nvar duration: TimeInterval\nThe workout’s duration.\nvar metadata: [String : Any]?\nThe metadata for this HealthKit object.\nvar totalEnergyBurned: HKQuantity?\nThe total active energy burned during the workout.\nvar workoutEvents: [HKWorkoutEvent]?\nAn array of workout event objects."
  },
  {
    "title": "init(activityType:start:end:duration:totalEnergyBurned:totalDistance:device:metadata:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkout/1615048-init",
    "html": "Parameters\nworkoutActivityType\n\nThe type of activity performed during the workout. For a complete list of activity types, see HKWorkoutActivityType.\n\nstartDate\n\nThe date and time when the activity started.\n\nendDate\n\nThe date and time when the activity ended. This date must be equal to or later than the start date.\n\nduration\n\nA time interval representing the workout’s actual duration. Passing a nonzero value sets the workout’s duration property. If you pass 0, this method calculates the duration property based on the workout’s start and end dates.\n\ntotalEnergyBurned\n\nA quantity using energy units, or nil. This property sets the workout’s totalEnergyBurned property. It represents the total active energy burned during the workout.\n\ntotalDistance\n\nA quantity using length units, or nil. This property sets the workout’s totalDistance property.\n\ndevice\n\nThe device that generated the data for this sample.\n\nmetadata\n\nThe metadata dictionary contains extra information describing this workout. The dictionary’s keys are all NSString objects . The values may be NSString, NSNumber, or NSDate objects. For a complete list of predefined metadata keys, see Metadata Keys.\n\nUsing predefined keys helps facilitate sharing data between apps; however, you are also encouraged to create your own, custom keys as needed to extend the workout’s capabilities.\n\nReturn Value\n\nA workout object with the provided duration, total energy burned, total distance, device, and metadata properties. The workoutEvents property is set to nil.\n\nDiscussion\n\nThis method returns a workout with the specified duration, total energy burned, total distance, device, and metadata. The workoutEvents property is set to nil.\n\nIf the total energy burned or total distance are non-zero values, create a set of corresponding samples that add up to the calculated totals. Associate these samples with the workout by calling the health store’s add(_:to:completion:) method.\n\nlet distance = HKQuantity(unit: HKUnit.mileUnit(), doubleValue: 5.2)\nlet energyBurned = HKQuantity(unit: HKUnit.kilocalorieUnit(), doubleValue: 259.0)\n \nlet device = HKDevice(name: deviceName,\n                      manufacturer: manufacturerName,\n                      model: modelName,\n                      hardwareVersion: hardwareVersionNumber,\n                      firmwareVersion: firmwareVersionNumber,\n                      softwareVersion: softwareVersionNumber,\n                      localIdentifier: localIdentifier,\n                      UDIDeviceIdentifier: deviceIdentifier)\n \nlet metadata = [HKMetadataKeyIndoorWorkout:false]\n \nlet hike = HKWorkout(activityType: HKWorkoutActivityType.Hiking, startDate: start, endDate: end, duration: 9000, totalEnergyBurned: energyBurned, totalDistance: distance, device: device, metadata: metadata)\n \nhealthStore.saveObject(hike) { (success, error) -> Void in\n    \n    guard success else {\n        // Perform proper error handling here...\n        fatalError(\"*** An error occurred while saving this \" +\n            \"workout: \\(error?.localizedDescription)\")\n    }\n}\n\nSee Also\nCreating workouts\ninit(activityType: HKWorkoutActivityType, start: Date, end: Date)\nInstantiates a new workout.\nDeprecated\ninit(activityType: HKWorkoutActivityType, start: Date, end: Date, duration: TimeInterval, totalEnergyBurned: HKQuantity?, totalDistance: HKQuantity?, metadata: [String : Any]?)\nInstantiates a new workout that includes the energy burned, distance, and metadata for the workout.\nDeprecated\ninit(activityType: HKWorkoutActivityType, start: Date, end: Date, workoutEvents: [HKWorkoutEvent]?, totalEnergyBurned: HKQuantity?, totalDistance: HKQuantity?, metadata: [String : Any]?)\nInstantiates a new workout whose duration is calculated based on the start and end dates and the provided workout events.\nDeprecated\ninit(activityType: HKWorkoutActivityType, start: Date, end: Date, workoutEvents: [HKWorkoutEvent]?, totalEnergyBurned: HKQuantity?, totalDistance: HKQuantity?, device: HKDevice?, metadata: [String : Any]?)\nInstantiates a workout that includes both workout events and the device that produced the sample data.\nDeprecated\ninit(activityType: HKWorkoutActivityType, start: Date, end: Date, workoutEvents: [HKWorkoutEvent]?, totalEnergyBurned: HKQuantity?, totalDistance: HKQuantity?, totalFlightsClimbed: HKQuantity?, device: HKDevice?, metadata: [String : Any]?)\nInstantiates a workout using a variety of data, including the number of flights of stairs climbed.\nDeprecated\ninit(activityType: HKWorkoutActivityType, start: Date, end: Date, workoutEvents: [HKWorkoutEvent]?, totalEnergyBurned: HKQuantity?, totalDistance: HKQuantity?, totalSwimmingStrokeCount: HKQuantity?, device: HKDevice?, metadata: [String : Any]?)\nInstantiates a workout using a variety of data, including the number of strokes while swimming.\nDeprecated\nRelated Documentation\nvar workoutActivityType: HKWorkoutActivityType\nThe type of activity performed during the workout.\nvar totalDistance: HKQuantity?\nThe total distance traveled during the workout.\nvar duration: TimeInterval\nThe workout’s duration.\nvar metadata: [String : Any]?\nThe metadata for this HealthKit object.\nvar totalEnergyBurned: HKQuantity?\nThe total active energy burned during the workout.\nvar workoutEvents: [HKWorkoutEvent]?\nAn array of workout event objects."
  },
  {
    "title": "init(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkcharacteristictype/3778604-init",
    "html": "Parameters\nidentifier\n\nAn identifier that specifies the type of characteristic data. For a complete list of characteristic type identifiers, see HKCharacteristicTypeIdentifier."
  },
  {
    "title": "hasUndeterminedDuration | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hksample/3552038-hasundeterminedduration",
    "html": "Discussion\n\nThis property is true if the sample’s endDate property is distantFuture.\n\nSee Also\nAccessing the Sample’s Data\nvar startDate: Date\nThe sample’s start date.\nvar endDate: Date\nThe sample’s end date.\nvar sampleType: HKSampleType\nThe sample type."
  },
  {
    "title": "isMinimumDurationRestricted | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hksampletype/3327020-isminimumdurationrestricted",
    "html": "See Also\nChecking the Duration Restriction\nvar minimumAllowedDuration: TimeInterval\nThe minimum duration if the sample type has a restricted duration.\nvar isMaximumDurationRestricted: Bool\nA Boolean value that indicates whether samples of this type have a maximum time interval between the start and end dates.\nvar maximumAllowedDuration: TimeInterval\nThe maximum duration if the sample type has a restricted duration."
  },
  {
    "title": "HKQuantityAggregationStyle | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquantityaggregationstyle",
    "html": "Overview\n\nA quantity type’s aggregation style determines the type of statistics queries that you can perform. Discrete types support average, minimum, and maximum queries. Cumulative types support only sum queries. For more information, see HKStatisticsQuery.\n\nTopics\nAggregation Styles\ncase cumulative\nCumulative samples that can be summed over time.\ncase discreteArithmetic\nDiscrete samples that can be averaged over time using an arithmetic mean.\ncase discreteTemporallyWeighted\nDiscrete samples that can be averaged over a time interval using a temporally weighted integration function.\ncase discreteEquivalentContinuousLevel\nDiscrete samples that can be combined over a time interval by computing the equivalent continuous sound level.\nDeprecated Styles\nstatic var discrete: HKQuantityAggregationStyle\nDiscrete samples may be averaged over time.\nRelationships\nConforms To\nSendable\nSee Also\nAccessing Quantity Type Data\nvar aggregationStyle: HKQuantityAggregationStyle\nThe aggregation style for the given quantity type.\nfunc `is`(compatibleWith: HKUnit) -> Bool\nReturns a Boolean value that indicates whether the quantity type is compatible with the given unit."
  },
  {
    "title": "HKPredicateKeyPathEndDate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkpredicatekeypathenddate",
    "html": "See Also\nSpecifying Predicate Key Paths\nlet HKPredicateKeyPathStartDate: String\nThe key path for accessing the sample’s start date."
  },
  {
    "title": "is(compatibleWith:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquantity/1615508-is",
    "html": "Parameters\nunit\n\nThe target unit.\n\nReturn Value\n\nYes if the quantity is compatible; otherwise, false.\n\nDiscussion\n\nIndividual units are compatible if they measure the same feature. For example, all length units are compatible. All mass units are also compatible. However, a length unit is not compatible with a mass unit.\n\nComplex units are compatible if the equation defining the units are compatible. Specifically, it must use the same operators, and the operands must be compatible. For example, meters per second and miles per hour are compatible. The left operands are both length units, the right operands are both time units and they all use a division operator.\n\nSee Also\nWorking With Units\nfunc doubleValue(for: HKUnit) -> Double\nReturns the quantity’s value in the provided unit."
  },
  {
    "title": "doubleValue(for:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquantity/1615245-doublevalue",
    "html": "Parameters\nunit\n\nThe target unit. If the quantity is not compatible with this unit, it throws an exception (invalidArgumentException).\n\nReturn Value\n\nThe quantity’s value in the provided units.\n\nDiscussion\n\nThis method converts the quantity’s value to the desired units. You do not need to know the quantity’s original units. You can request the value in whatever units you want, as long as they are compatible with the quantity. This lets each application (or each locale) work with its preferred units.\n\nIn most cases, you know which units are compatible with a given quantity from context. To see the unit types associated with different quantity sample types, see the type identifiers in HealthKit Constants.\n\nIf you need to programmatically check whether a particular unit is compatible with a particular quantity, call the quantity’s is(compatibleWith:) method.\n\nSee Also\nWorking With Units\nfunc `is`(compatibleWith: HKUnit) -> Bool\nReturns a boolean value indicating whether the quantity is compatible with the provided unit."
  },
  {
    "title": "Defining and converting units and quantities | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/samples/units_and_quantities/defining_and_converting_units_and_quantities",
    "html": "Overview\n\nThe HKUnit class provides the representation for a single unit. It supports a wide range of metric and imperial units, as well as both simple and complex units. A simple unit represents a single measurement, such as meters, pounds, or seconds. A complex unit combines one or more simple units using mathematical operations, such as meters per second (m/s) or pounds per square foot (lb/ft2).\n\nIn addition to convenience methods for creating all the simple units supported by HealthKit, HKUnit provides the mathematical operations needed to build complex units. You can also create complex units directly using properly formatted unit strings.\n\nFor more information on units, see HKUnit.\n\nThe HKQuantity class stores a value for a given unit. You can then request the value in any compatible units, letting your app easily translate values between units.\n\nFor more information on quantities, see HKQuantity.\n\nYou can use MeasurementFormatter to localize quantities such as length, mass, and energy. For other quantities, you need to perform the conversions and localize the data yourself.\n\nSee Also\nUnits and quantities\nclass HKQuantity\nAn object that stores a value for a given unit.\nclass HKUnit\nA class for managing the units of measure within HealthKit.\nenum HKMetricPrefix\nPrefixes that can be added to SI units to change the order of magnitude."
  },
  {
    "title": "allowsRecalibrationForEstimates | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hksampletype/3801678-allowsrecalibrationforestimates",
    "html": "Discussion\n\nTo recalibrate the data for this sample type, call the HKHealthStore class’s recalibrateEstimates(sampleType:date:completion:) method."
  },
  {
    "title": "respiratoryRate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquantitytypeidentifier/1615094-respiratoryrate",
    "html": "Discussion\n\nThese samples use count/time units (described in HKUnit) and measure discrete values (described in HKQuantityAggregationStyle).\n\nSee Also\nVital signs\nstatic let heartRate: HKQuantityTypeIdentifier\nA quantity sample type that measures the user’s heart rate.\nstatic let restingHeartRate: HKQuantityTypeIdentifier\nA quantity sample type that measures the user’s resting heart rate.\nstatic let walkingHeartRateAverage: HKQuantityTypeIdentifier\nA quantity sample type that measures the user’s heart rate while walking.\nstatic let heartRateVariabilitySDNN: HKQuantityTypeIdentifier\nA quantity sample type that measures the standard deviation of heartbeat intervals.\nstatic let heartRateRecoveryOneMinute: HKQuantityTypeIdentifier\nA quantity sample that records the reduction in heart rate from the peak exercise rate to the rate one minute after exercising ended.\nstatic let atrialFibrillationBurden: HKQuantityTypeIdentifier\nA quantity type that measures an estimate of the percentage of time a person’s heart shows signs of atrial fibrillation (AFib) while wearing Apple Watch.\nstatic let oxygenSaturation: HKQuantityTypeIdentifier\nA quantity sample type that measures the user’s oxygen saturation.\nstatic let bodyTemperature: HKQuantityTypeIdentifier\nA quantity sample type that measures the user’s body temperature.\nstatic let bloodPressureDiastolic: HKQuantityTypeIdentifier\nA quantity sample type that measures the user’s diastolic blood pressure.\nstatic let bloodPressureSystolic: HKQuantityTypeIdentifier\nA quantity sample type that measures the user’s systolic blood pressure.\nRelated Documentation\nstruct HKQuantityTypeIdentifier\nThe identifiers that create quantity type objects.\nclass HKQuantitySample\nA sample that represents a quantity, including the value and the units.\nclass HKQuantity\nAn object that stores a value for a given unit."
  },
  {
    "title": "contraceptive | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkcategorytypeidentifier/3552048-contraceptive",
    "html": "Discussion\n\nSamples of this type use values from the HKCategoryValueContraceptive enumeration.\n\nSee Also\nReproductive Health\nstatic let menstrualFlow: HKCategoryTypeIdentifier\nA category sample type that records menstrual cycles.\nstatic let intermenstrualBleeding: HKCategoryTypeIdentifier\nA category sample type that records spotting outside the normal menstruation period.\nstatic let infrequentMenstrualCycles: HKCategoryTypeIdentifier\nA category sample that indicates an infrequent menstrual cycle.\nstatic let irregularMenstrualCycles: HKCategoryTypeIdentifier\nA category sample that indicates an irregular menstrual cycle.\nstatic let persistentIntermenstrualBleeding: HKCategoryTypeIdentifier\nA category sample that indicates persistent intermenstrual bleeding.\nstatic let prolongedMenstrualPeriods: HKCategoryTypeIdentifier\nA category sample that indicates a prolonged menstrual cycle.\nstatic let cervicalMucusQuality: HKCategoryTypeIdentifier\nA category sample type that records the quality of the user’s cervical mucus.\nstatic let ovulationTestResult: HKCategoryTypeIdentifier\nA category sample type that records the result of an ovulation home test.\nstatic let progesteroneTestResult: HKCategoryTypeIdentifier\nA category type that represents the results from a home progesterone test.\nstatic let sexualActivity: HKCategoryTypeIdentifier\nA category sample type that records sexual activity.\nstatic let pregnancy: HKCategoryTypeIdentifier\nA category type that records pregnancy.\nstatic let pregnancyTestResult: HKCategoryTypeIdentifier\nA category type that represents the results from a home pregnancy test.\nstatic let lactation: HKCategoryTypeIdentifier\nA category type that records lactation."
  },
  {
    "title": "init(activityType:start:end:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkout/1615340-init",
    "html": "Parameters\nworkoutActivityType\n\nThe type of activity being performed during the workout. For a list of possible activity types, see HKWorkoutActivityType.\n\nstartDate\n\nThe date and time when the activity started.\n\nendDate\n\nThe date and time when the activity ended. This date must be equal to or later than the start date.\n\nReturn Value\n\nA workout activity.\n\nDiscussion\n\nThe workout’s duration is calculated from its start and end times. The workout’s total distance, total energy burned, workout events, device, and metadata are all set to nil.\n\nlet basketball = HKWorkout(activityType:HKWorkoutActivityType.Basketball,\n                           startDate: start, endDate: end)\n \n \nhealthStore.saveObject(basketball) { (success, error) -> Void in\n    guard success else {\n        // Perform proper error handling here...\n        fatalError(\"*** An error occurred while saving this \" +\n            \"workout: \\(error?.localizedDescription)\")\n    }\n}\n\nSee Also\nCreating workouts\ninit(activityType: HKWorkoutActivityType, start: Date, end: Date, duration: TimeInterval, totalEnergyBurned: HKQuantity?, totalDistance: HKQuantity?, metadata: [String : Any]?)\nInstantiates a new workout that includes the energy burned, distance, and metadata for the workout.\nDeprecated\ninit(activityType: HKWorkoutActivityType, start: Date, end: Date, workoutEvents: [HKWorkoutEvent]?, totalEnergyBurned: HKQuantity?, totalDistance: HKQuantity?, metadata: [String : Any]?)\nInstantiates a new workout whose duration is calculated based on the start and end dates and the provided workout events.\nDeprecated\ninit(activityType: HKWorkoutActivityType, start: Date, end: Date, duration: TimeInterval, totalEnergyBurned: HKQuantity?, totalDistance: HKQuantity?, device: HKDevice?, metadata: [String : Any]?)\nInstantiates a new workout activity that includes the device that produced the sample data.\nDeprecated\ninit(activityType: HKWorkoutActivityType, start: Date, end: Date, workoutEvents: [HKWorkoutEvent]?, totalEnergyBurned: HKQuantity?, totalDistance: HKQuantity?, device: HKDevice?, metadata: [String : Any]?)\nInstantiates a workout that includes both workout events and the device that produced the sample data.\nDeprecated\ninit(activityType: HKWorkoutActivityType, start: Date, end: Date, workoutEvents: [HKWorkoutEvent]?, totalEnergyBurned: HKQuantity?, totalDistance: HKQuantity?, totalFlightsClimbed: HKQuantity?, device: HKDevice?, metadata: [String : Any]?)\nInstantiates a workout using a variety of data, including the number of flights of stairs climbed.\nDeprecated\ninit(activityType: HKWorkoutActivityType, start: Date, end: Date, workoutEvents: [HKWorkoutEvent]?, totalEnergyBurned: HKQuantity?, totalDistance: HKQuantity?, totalSwimmingStrokeCount: HKQuantity?, device: HKDevice?, metadata: [String : Any]?)\nInstantiates a workout using a variety of data, including the number of strokes while swimming.\nDeprecated\nRelated Documentation\nvar workoutActivityType: HKWorkoutActivityType\nThe type of activity performed during the workout.\nvar totalDistance: HKQuantity?\nThe total distance traveled during the workout.\nvar duration: TimeInterval\nThe workout’s duration.\nvar metadata: [String : Any]?\nThe metadata for this HealthKit object.\nvar totalEnergyBurned: HKQuantity?\nThe total active energy burned during the workout.\nvar workoutEvents: [HKWorkoutEvent]?\nAn array of workout event objects."
  },
  {
    "title": "init(activityType:start:end:workoutEvents:totalEnergyBurned:totalDistance:metadata:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkout/1615212-init",
    "html": "Parameters\nworkoutActivityType\n\nThe type of activity performed during the workout. For the complete list of activity types, see HKWorkoutActivityType.\n\nstartDate\n\nThe date and time when the activity started.\n\nendDate\n\nThe date and time when the activity ended. This date must be equal to or later than the start date.\n\nworkoutEvents\n\nAn array of workout event objects. This array specifies when the user has paused and resumed the workout activity. This method calculates the workout’s duration based on the total amount of active time between the provided start and end dates.\n\ntotalEnergyBurned\n\nA quantity using energy units, or nil. This parameter sets the workout’s totalEnergyBurned property. It represents the total active energy burned during the workout.\n\ntotalDistance\n\nA quantity using length units, or nil. This parameter sets the workout’s totalDistance property.\n\nmetadata\n\nThe metadata dictionary contains extra information describing this workout. The dictionary’s keys are all NSString objects . The values may be NSString, NSNumber, or NSDate objects. For a complete list of predefined keys, see Metadata Keys.\n\nUsing predefined keys helps facilitate sharing data between apps; however, you are also encouraged to create your own, custom keys as needed to extend the HealthKit quantity sample’s capabilities.\n\nDiscussion\n\nThis method calculates the workout’s duration based on the amount of time it spends in an active state. A workout starts in an active state. A pause event switches it to an inactive state, and a resume event switches it back to an active state. For more information on workout events, see HKWorkoutEvent.\n\nIf the total energy burned or total distance are non-zero values, create a set of corresponding samples that add up to the calculated totals. Associate these samples with the workout by calling the health store’s add(_:to:completion:) method.\n\nlet distance = HKQuantity(unit: HKUnit.mileUnit(), doubleValue: 2.3)\nlet energyBurned = HKQuantity(unit: HKUnit.kilocalorieUnit(), doubleValue: 356.0)\nlet metadata = [HKMetadataKeyIndoorWorkout:false]\n \nlet pause = HKWorkoutEvent(type: HKWorkoutEventType.Pause, date: pauseStart)\nlet resume = HKWorkoutEvent(type: HKWorkoutEventType.Resume, date: pauseEnd)\n \nlet kayaking = HKWorkout(activityType: HKWorkoutActivityType.PaddleSports,\n                         startDate: start, endDate: end, workoutEvents: [pause, resume],\n                         totalEnergyBurned: energyBurned, totalDistance: distance, metadata: metadata)\n \n \nhealthStore.saveObject(kayaking) { (success, error) -> Void in\n    guard success else {\n        // Perform proper error handling here...\n        fatalError(\"*** An error occurred while saving this \" +\n            \"workout: \\(error?.localizedDescription)\")\n    }\n}\n\nSee Also\nCreating workouts\ninit(activityType: HKWorkoutActivityType, start: Date, end: Date)\nInstantiates a new workout.\nDeprecated\ninit(activityType: HKWorkoutActivityType, start: Date, end: Date, duration: TimeInterval, totalEnergyBurned: HKQuantity?, totalDistance: HKQuantity?, metadata: [String : Any]?)\nInstantiates a new workout that includes the energy burned, distance, and metadata for the workout.\nDeprecated\ninit(activityType: HKWorkoutActivityType, start: Date, end: Date, duration: TimeInterval, totalEnergyBurned: HKQuantity?, totalDistance: HKQuantity?, device: HKDevice?, metadata: [String : Any]?)\nInstantiates a new workout activity that includes the device that produced the sample data.\nDeprecated\ninit(activityType: HKWorkoutActivityType, start: Date, end: Date, workoutEvents: [HKWorkoutEvent]?, totalEnergyBurned: HKQuantity?, totalDistance: HKQuantity?, device: HKDevice?, metadata: [String : Any]?)\nInstantiates a workout that includes both workout events and the device that produced the sample data.\nDeprecated\ninit(activityType: HKWorkoutActivityType, start: Date, end: Date, workoutEvents: [HKWorkoutEvent]?, totalEnergyBurned: HKQuantity?, totalDistance: HKQuantity?, totalFlightsClimbed: HKQuantity?, device: HKDevice?, metadata: [String : Any]?)\nInstantiates a workout using a variety of data, including the number of flights of stairs climbed.\nDeprecated\ninit(activityType: HKWorkoutActivityType, start: Date, end: Date, workoutEvents: [HKWorkoutEvent]?, totalEnergyBurned: HKQuantity?, totalDistance: HKQuantity?, totalSwimmingStrokeCount: HKQuantity?, device: HKDevice?, metadata: [String : Any]?)\nInstantiates a workout using a variety of data, including the number of strokes while swimming.\nDeprecated\nRelated Documentation\nvar workoutActivityType: HKWorkoutActivityType\nThe type of activity performed during the workout.\nvar totalDistance: HKQuantity?\nThe total distance traveled during the workout.\nvar duration: TimeInterval\nThe workout’s duration.\nvar metadata: [String : Any]?\nThe metadata for this HealthKit object.\nvar totalEnergyBurned: HKQuantity?\nThe total active energy burned during the workout.\nvar workoutEvents: [HKWorkoutEvent]?\nAn array of workout event objects."
  },
  {
    "title": "HKWheelchairUseObject | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkwheelchairuseobject",
    "html": "Topics\nAccessing Wheelchair Use Data\nvar wheelchairUse: HKWheelchairUse\nA value indicating the user’s wheelchair use.\nRelationships\nInherits From\nNSObject\nConforms To\nNSCopying\nNSSecureCoding\nSee Also\nPossible Values\nenum HKWheelchairUse\nConstants indicating the user’s wheelchair use."
  },
  {
    "title": "HKWheelchairUse | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkwheelchairuse",
    "html": "Topics\nConstants\ncase notSet\nEither the wheelchair use is not set or the user has not granted your app permission to read that information.\ncase no\nThe user does not use a wheelchair.\ncase yes\nThe user uses a wheelchair.\nRelationships\nConforms To\nSendable\nSee Also\nPossible Values\nclass HKWheelchairUseObject\nThis class acts as a wrapper for the wheelchair use enumeration."
  },
  {
    "title": "HKFitzpatrickSkinType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkfitzpatrickskintype",
    "html": "Overview\n\nThe Fitzpatrick scale is a numerical classification for skin color based on the skins response to sun exposure in terms of the degree of burning and tanning.\n\nTopics\nConstants\ncase notSet\nEither the user’s skin type is not set, or the user has not granted your app permission to read the skin type.\ncase I\nPale white skin that always burns easily in the sun and never tans.\ncase II\nWhite skin that burns easily and tans minimally.\ncase III\nWhite to light brown skin that burns moderately and tans uniformly.\ncase IV\nBeige-olive, lightly tanned skin that burns minimally and tans moderately.\ncase V\nBrown skin that rarely burns and tans profusely.\ncase VI\nDark brown to black skin that never burns and tans profusely.\nRelationships\nConforms To\nSendable\nSee Also\nPossible Values\nclass HKFitzpatrickSkinTypeObject\nThis class acts as a wrapper for the HKFitzpatrickSkinType enumeration."
  },
  {
    "title": "clinicalNoteRecord | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkclinicaltypeidentifier/4111142-clinicalnoterecord",
    "html": "Discussion\n\nClinical notes can have one or more attached files. While these files are often PDFs, HTML, or text files, they can be any format. Check the HKAttachment object’s contentType property to determine the file type. For more information on accessing the attachments, see HKAttachment.\n\nIf your app has permission to read clinicalNoteRecord samples, it can also access the attachments. For more information on reading clinical note records, see Accessing Health Records.\n\nSee Also\nClinical Record Type Identifiers\nstatic let allergyRecord: HKClinicalTypeIdentifier\nA type identifier for records of allergic or intolerant reactions.\nstatic let conditionRecord: HKClinicalTypeIdentifier\nA type identifier for records of a condition, problem, diagnosis, or other event.\nstatic let immunizationRecord: HKClinicalTypeIdentifier\nA type identifier for records of the current or historical administration of vaccines.\nstatic let labResultRecord: HKClinicalTypeIdentifier\nA type identifier for records of lab results.\nstatic let medicationRecord: HKClinicalTypeIdentifier\nA type identifier for records of medication.\nstatic let procedureRecord: HKClinicalTypeIdentifier\nA type identifier for records of procedures.\nstatic let vitalSignRecord: HKClinicalTypeIdentifier\nA type identifier for records of vital signs.\nstatic let coverageRecord: HKClinicalTypeIdentifier\nA type identifier for records containing information about the user’s insurance coverage.\nRelated Documentation\nclass HKClinicalType\nA type that identifies samples that contain clinical record data.\nstatic let documentReference: HKFHIRResourceType\nA type that identifies FHIR resources for document references.\nstatic let diagnosticReport: HKFHIRResourceType\nA type that identifies FHIR resources for findings and interpretation of diagnostic tests."
  },
  {
    "title": "allergyRecord | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkclinicaltypeidentifier/2976207-allergyrecord",
    "html": "See Also\nClinical Record Type Identifiers\nstatic let clinicalNoteRecord: HKClinicalTypeIdentifier\nA type identifier for records of clinical notes.\nstatic let conditionRecord: HKClinicalTypeIdentifier\nA type identifier for records of a condition, problem, diagnosis, or other event.\nstatic let immunizationRecord: HKClinicalTypeIdentifier\nA type identifier for records of the current or historical administration of vaccines.\nstatic let labResultRecord: HKClinicalTypeIdentifier\nA type identifier for records of lab results.\nstatic let medicationRecord: HKClinicalTypeIdentifier\nA type identifier for records of medication.\nstatic let procedureRecord: HKClinicalTypeIdentifier\nA type identifier for records of procedures.\nstatic let vitalSignRecord: HKClinicalTypeIdentifier\nA type identifier for records of vital signs.\nstatic let coverageRecord: HKClinicalTypeIdentifier\nA type identifier for records containing information about the user’s insurance coverage.\nRelated Documentation\nclass HKClinicalType\nA type that identifies samples that contain clinical record data.\nstatic let allergyIntolerance: HKFHIRResourceType\nA type that identifies FHIR resources for allergies and intolerances."
  },
  {
    "title": "HKAuthorizationRequestStatus.unknown | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkauthorizationrequeststatus/unknown",
    "html": "See Also\nStatuses\ncase shouldRequest\nThe application has not yet requested authorization for all the specified data types.\ncase unnecessary\nThe application has already requested authorization for all the specified data types."
  },
  {
    "title": "HKAuthorizationRequestStatus.unnecessary | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkauthorizationrequeststatus/unnecessary",
    "html": "See Also\nStatuses\ncase unknown\nThe authorization request status could not be determined because an error occurred.\ncase shouldRequest\nThe application has not yet requested authorization for all the specified data types."
  },
  {
    "title": "coverageRecord | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkclinicaltypeidentifier/3551956-coveragerecord",
    "html": "Discussion\n\nUse this identifier for records containing information that might typically appear on the user’s insurance card.\n\nSee Also\nClinical Record Type Identifiers\nstatic let allergyRecord: HKClinicalTypeIdentifier\nA type identifier for records of allergic or intolerant reactions.\nstatic let clinicalNoteRecord: HKClinicalTypeIdentifier\nA type identifier for records of clinical notes.\nstatic let conditionRecord: HKClinicalTypeIdentifier\nA type identifier for records of a condition, problem, diagnosis, or other event.\nstatic let immunizationRecord: HKClinicalTypeIdentifier\nA type identifier for records of the current or historical administration of vaccines.\nstatic let labResultRecord: HKClinicalTypeIdentifier\nA type identifier for records of lab results.\nstatic let medicationRecord: HKClinicalTypeIdentifier\nA type identifier for records of medication.\nstatic let procedureRecord: HKClinicalTypeIdentifier\nA type identifier for records of procedures.\nstatic let vitalSignRecord: HKClinicalTypeIdentifier\nA type identifier for records of vital signs."
  },
  {
    "title": "vitalSignRecord | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkclinicaltypeidentifier/2976213-vitalsignrecord",
    "html": "See Also\nClinical Record Type Identifiers\nstatic let allergyRecord: HKClinicalTypeIdentifier\nA type identifier for records of allergic or intolerant reactions.\nstatic let clinicalNoteRecord: HKClinicalTypeIdentifier\nA type identifier for records of clinical notes.\nstatic let conditionRecord: HKClinicalTypeIdentifier\nA type identifier for records of a condition, problem, diagnosis, or other event.\nstatic let immunizationRecord: HKClinicalTypeIdentifier\nA type identifier for records of the current or historical administration of vaccines.\nstatic let labResultRecord: HKClinicalTypeIdentifier\nA type identifier for records of lab results.\nstatic let medicationRecord: HKClinicalTypeIdentifier\nA type identifier for records of medication.\nstatic let procedureRecord: HKClinicalTypeIdentifier\nA type identifier for records of procedures.\nstatic let coverageRecord: HKClinicalTypeIdentifier\nA type identifier for records containing information about the user’s insurance coverage.\nRelated Documentation\nclass HKClinicalType\nA type that identifies samples that contain clinical record data.\nstatic let observation: HKFHIRResourceType\nA type that identifies FHIR resources for medical observations, including lab results and vital signs."
  },
  {
    "title": "HKDeletedObject | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkdeletedobject",
    "html": "Overview\n\nUse HKAnchoredObjectQuery queries to generate a list of recently deleted objects. Create a query using the init(type:predicate:anchor:limit:resultsHandler:)method. When the system calls the result handler, it passes the deletedObject parameter an array of HKDeletedObject instances matching the query.\n\nDeleted objects are temporary; the system may remove them from the HealthKit store at any time to free up space. To guarantee that you receive notifications for all deleted objects, create an HKObserverQuery and register it for background delivery. The system then wakes your app and calls the observer query’s update handler whenever the matching objects change—including deletions. However, the query does not provide a list of deleted objects. To determine which objects were deleted, use the observer query’s update handler to create an anchored object query for the newly deleted objects.\n\nTopics\nIdentifying Deleted Objects\nvar uuid: UUID\nThe universally unique identifier (UUID) for the HealthKit object that was deleted from the store.\nvar metadata: [String : Any]?\nThe metadata associated with the deleted object.\nRelationships\nInherits From\nNSObject\nConforms To\nNSSecureCoding"
  },
  {
    "title": "HKAuthorizationStatus.notDetermined | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkauthorizationstatus/notdetermined",
    "html": "Discussion\n\nMake sure your app requests proper authorization before calling any other HealthKit methods. For more information on setting up HealthKit, see HealthKit."
  },
  {
    "title": "HKError.Code.errorHealthDataRestricted | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkerror/code/errorhealthdatarestricted",
    "html": "Discussion\n\nBecause an MDM profile can disable HealthKit on a managed device, always verify that the current device supports HealthKit by calling isHealthDataAvailable() before calling any other HealthKit methods. If HealthKit is restricted (for example, in an enterprise environment), the methods fail with an errorHealthDataRestricted error.\n\nSee Also\nErrors\ncase errorHealthDataUnavailable\nHealthKit accessed on an unsupported device, such as an iPad.\ncase errorInvalidArgument\nThe app passed an invalid argument to the HealthKit API.\ncase errorAuthorizationDenied\nThe user hasn’t given the app permission to save data.\ncase errorAuthorizationNotDetermined\nThe app hasn’t yet asked the user for the authorization required to complete the task.\ncase errorRequiredAuthorizationDenied\nThe user hasn’t granted the application authorization to access all the required clinical record types.\ncase errorDatabaseInaccessible\nThe HealthKit data is unavailable because it’s protected and the device is locked.\ncase errorUserCanceled\nThe user canceled the operation.\ncase errorAnotherWorkoutSessionStarted\nAnother app started a workout session.\ncase errorUserExitedWorkoutSession\nThe user exited your application while a workout session was running.\ncase errorNoData\nData is unavailable for the requested query and predicate."
  },
  {
    "title": "HKError.Code.errorAnotherWorkoutSessionStarted | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkerror/code/erroranotherworkoutsessionstarted",
    "html": "Discussion\n\nThis error occurs whenever a second workout session is started. Apple Watch only runs one workout session at a time. If the user begins a second workout session in a different app, the original session receives this error message and then ends. The second session then starts.\n\nSee Also\nErrors\ncase errorHealthDataUnavailable\nHealthKit accessed on an unsupported device, such as an iPad.\ncase errorHealthDataRestricted\nA Mobile Device Management (MDM) profile restricts the use of HealthKit on this device.\ncase errorInvalidArgument\nThe app passed an invalid argument to the HealthKit API.\ncase errorAuthorizationDenied\nThe user hasn’t given the app permission to save data.\ncase errorAuthorizationNotDetermined\nThe app hasn’t yet asked the user for the authorization required to complete the task.\ncase errorRequiredAuthorizationDenied\nThe user hasn’t granted the application authorization to access all the required clinical record types.\ncase errorDatabaseInaccessible\nThe HealthKit data is unavailable because it’s protected and the device is locked.\ncase errorUserCanceled\nThe user canceled the operation.\ncase errorUserExitedWorkoutSession\nThe user exited your application while a workout session was running.\ncase errorNoData\nData is unavailable for the requested query and predicate."
  },
  {
    "title": "HKError.Code.errorNoData | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkerror/code/errornodata",
    "html": "Discussion\n\nThis error indicates that no data exists that corresponds to a particular query, so the system can’t calculate the query’s result. HKStatisticsQuery queries return this error when HealthKit can’t return the data needed to calculate the statistics.\n\nSee Also\nErrors\ncase errorHealthDataUnavailable\nHealthKit accessed on an unsupported device, such as an iPad.\ncase errorHealthDataRestricted\nA Mobile Device Management (MDM) profile restricts the use of HealthKit on this device.\ncase errorInvalidArgument\nThe app passed an invalid argument to the HealthKit API.\ncase errorAuthorizationDenied\nThe user hasn’t given the app permission to save data.\ncase errorAuthorizationNotDetermined\nThe app hasn’t yet asked the user for the authorization required to complete the task.\ncase errorRequiredAuthorizationDenied\nThe user hasn’t granted the application authorization to access all the required clinical record types.\ncase errorDatabaseInaccessible\nThe HealthKit data is unavailable because it’s protected and the device is locked.\ncase errorUserCanceled\nThe user canceled the operation.\ncase errorAnotherWorkoutSessionStarted\nAnother app started a workout session.\ncase errorUserExitedWorkoutSession\nThe user exited your application while a workout session was running."
  },
  {
    "title": "HKActivitySummary | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkactivitysummary",
    "html": "Overview\n\nYou can read HKActivitySummary objects from the HealthKit store using an HKActivitySummaryQuery object. Unlike the HKSample subclasses, HKActivitySummary instances are mutable, but changes made to the object’s properties have no affect on the values in the HealthKit store.\n\nYou can instantiate your own HKActivitySummary objects (if needed), but you can’t save HKActivitySummary objects to the store.\n\nYou can display an active summary in iOS using the HKActivityRingView class or in watchOS using the WKInterfaceActivityRing class.\n\nTopics\nAccessing the summary’s data\nvar activityMoveMode: HKActivityMoveMode\nThe move mode that they system used for this activity summary.\nenum HKActivityMoveMode\nConstants that specify the value measured by the Move ring on the user’s device.\nvar activeEnergyBurned: HKQuantity\nThe amount of active energy the user burned during the specified day.\nvar activeEnergyBurnedGoal: HKQuantity\nThe user’s daily goal for active energy burned.\nvar appleMoveTime: HKQuantity\nThe amount of time the user spent performing activities that involve full-body movements during the specified day.\nvar appleMoveTimeGoal: HKQuantity\nThe user’s daily goal for move time.\nvar appleExerciseTime: HKQuantity\nThe amount of time that the user has spent exercising during the specified day.\nvar appleExerciseTimeGoal: HKQuantity\nThe user’s daily exercise goal.\nvar exerciseTimeGoal: HKQuantity?\nThe user’s daily goal for exercise time.\nvar appleStandHours: HKQuantity\nThe number hours in the specified day during which the user has stood and moved for at least a minute per hour.\nvar standHoursGoal: HKQuantity?\nThe user’s daily goal for stand hours.\nvar appleStandHoursGoal: HKQuantity\nThe user’s daily goal for stand hours.\nenum HKCategoryValueAppleStandHour\nCategories that the system used to indicate whether the user stood during the sample’s duration.\nfunc dateComponents(for: Calendar) -> DateComponents\nDate components that uniquely identify the day represented by the summary object.\nSpecifying predicate key paths\nlet HKPredicateKeyPathDateComponents: String\nThe key path for accessing an activity summary’s date components.\nRelationships\nInherits From\nNSObject\nConforms To\nNSCopying\nNSSecureCoding\nSee Also\nActivity rings\nstruct HKActivitySummaryQueryDescriptor\nA query interface that reads activity summaries using Swift concurrency.\nclass HKActivitySummaryQuery\nA query for reading activity summary objects from the HealthKit store.\nclass HKActivityRingView\nA view that uses the Move, Exercise, and Stand activity rings to display data from a HealthKit activity summary object.\nclass HKActivityMoveModeObject\nAn object that contains a movement mode value."
  },
  {
    "title": "HKSeriesBuilder | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkseriesbuilder",
    "html": "Overview\n\nNever instantiate HKSeriesBuilder objects directly. Instead, user one of the concrete subclasses (for example, the HKWorkoutRouteBuilder class).\n\nTopics\nManaging series generation\nfunc discard()\nInvalidates the builder and discards the collected data.\nRelationships\nInherits From\nNSObject\nSee Also\nRoute data\nCreating a workout route\nRecord the user’s route during a workout.\nReading route data\nAccess the user’s route for a workout.\nclass HKWorkoutRouteBuilder\nA builder object that incrementally constructs a workout route.\nclass HKWorkoutRoute\nA sample that contains a workout’s route data.\nstruct HKWorkoutRouteQueryDescriptor\nA query interface that reads the location data stored in a workout route using Swift concurrency.\nclass HKWorkoutRouteQuery\nA query to access the location data stored in a workout route.\nlet HKWorkoutRouteTypeIdentifier: String\nA series sample containing location data that defines the route the user took during a workout.\nclass HKSeriesSample\nAn abstract base class that defines samples that contain a series of items."
  },
  {
    "title": "HKLiveWorkoutBuilder | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkliveworkoutbuilder",
    "html": "Overview\n\nUse a live workout builder to create an HKWorkout sample during an active HKWorkoutSession. For complete instructions on running workout sessions on Apple Watch, see Running workout sessions.\n\nTopics\nConfiguring a live workout builder\nvar dataSource: HKLiveWorkoutDataSource?\nA data source that provides live data from a workout session automatically.\nvar workoutSession: HKWorkoutSession?\nThe workout session created by the data source and associated with this builder.\nMonitoring and controlling the workout\nvar delegate: HKLiveWorkoutBuilderDelegate?\nThe live builder’s delegate.\nprotocol HKLiveWorkoutBuilderDelegate\nA protocol for monitoring live workout builders.\nvar currentWorkoutActivity: HKWorkoutActivity?\nThe current workout activity.\nvar shouldCollectWorkoutEvents: Bool\nA Boolean value that determines whether the workout builder automatically adds events generated by the workout session.\nAccessing data\nvar elapsedTime: TimeInterval\nThe elapsed time for the workout based on the builder's current contents, including pauses.\nRelationships\nInherits From\nHKWorkoutBuilder\nSee Also\nSessions\nRunning workout sessions\nTrack a workout on Apple Watch.\nBuild a workout app for Apple Watch\nCreate your own workout app, quickly and easily, with HealthKit and SwiftUI.\nBuilding a multidevice workout app\nMirror a workout from a watchOS app to its companion iOS app, and perform bidirectional communication between them.\nclass HKWorkoutSession\nA session that tracks the user’s workout on Apple Watch.\nclass HKWorkoutConfiguration\nAn object that contains configuration information about a workout session.\nenum HKWorkoutSessionState\nA workout session’s state.\nclass HKLiveWorkoutDataSource\nA data source that automatically provides live data from an active workout session."
  },
  {
    "title": "HKWorkoutConfiguration | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkoutconfiguration",
    "html": "Overview\n\nLike many HealthKit classes, the HKWorkoutConfiguration class is not extendable and should not be subclassed.\n\nTopics\nSession settings\nvar activityType: HKWorkoutActivityType\nThe workout session’s activity type.\nvar locationType: HKWorkoutSessionLocationType\nThe workout session’s location.\nenum HKWorkoutSessionLocationType\nA constant indicating whether the workout session takes place indoors or outdoors.\nvar swimmingLocationType: HKWorkoutSwimmingLocationType\nThe workout session’s swimming location.\nenum HKWorkoutSwimmingLocationType\nThe possible locations for swimming.\nvar lapLength: HKQuantity?\nThe length of the lap for a workout session.\nRelationships\nInherits From\nNSObject\nConforms To\nNSCopying\nNSSecureCoding\nSee Also\nSessions\nRunning workout sessions\nTrack a workout on Apple Watch.\nBuild a workout app for Apple Watch\nCreate your own workout app, quickly and easily, with HealthKit and SwiftUI.\nBuilding a multidevice workout app\nMirror a workout from a watchOS app to its companion iOS app, and perform bidirectional communication between them.\nclass HKWorkoutSession\nA session that tracks the user’s workout on Apple Watch.\nenum HKWorkoutSessionState\nA workout session’s state.\nclass HKLiveWorkoutBuilder\nA builder object that constructs a workout incrementally based on live data from an active workout session.\nclass HKLiveWorkoutDataSource\nA data source that automatically provides live data from an active workout session."
  },
  {
    "title": "HKSeriesSample | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkseriessample",
    "html": "Overview\n\nNever instantiate HKSeriesSample objects directly. Instead, user one of the concrete subclasses (for example, the HKWorkoutRoute class).\n\nTopics\nAccessing the series\nvar count: Int\nThe number of items in the series.\nRelationships\nInherits From\nHKSample\nSee Also\nRoute data\nCreating a workout route\nRecord the user’s route during a workout.\nReading route data\nAccess the user’s route for a workout.\nclass HKWorkoutRouteBuilder\nA builder object that incrementally constructs a workout route.\nclass HKWorkoutRoute\nA sample that contains a workout’s route data.\nstruct HKWorkoutRouteQueryDescriptor\nA query interface that reads the location data stored in a workout route using Swift concurrency.\nclass HKWorkoutRouteQuery\nA query to access the location data stored in a workout route.\nlet HKWorkoutRouteTypeIdentifier: String\nA series sample containing location data that defines the route the user took during a workout.\nclass HKSeriesBuilder\nAn abstract base class for building series samples."
  },
  {
    "title": "HKActivityMoveModeObject | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkactivitymovemodeobject",
    "html": "Topics\nAccessing the data\nvar activityMoveMode: HKActivityMoveMode\nA property that contains the movement mode value.\nRelationships\nInherits From\nNSObject\nConforms To\nNSCopying\nNSSecureCoding\nSee Also\nActivity rings\nclass HKActivitySummary\nAn object that contains the move, exercise, and stand data for a given day.\nstruct HKActivitySummaryQueryDescriptor\nA query interface that reads activity summaries using Swift concurrency.\nclass HKActivitySummaryQuery\nA query for reading activity summary objects from the HealthKit store.\nclass HKActivityRingView\nA view that uses the Move, Exercise, and Stand activity rings to display data from a HealthKit activity summary object."
  },
  {
    "title": "Reading route data | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/workouts_and_activity_rings/reading_route_data",
    "html": "Overview\n\nYour app can read the route associated with any workout in HealthKit (for example, the path that the user took while walking, running, or cycling). However, the size and nature of route data presents two challenges:\n\nRoute samples aren’t static.\n\nAfter you have the route sample, you still need to perform a second query to access the underlying location data.\n\nUnlike most HealthKit data, apps can add or update route data over time. For example, an app must save a workout before associating route data with it. This means there is a brief period when the workout exists in the HealthKit store, but it doesn’t yet have a route sample associated with it.\n\nAdditionally, apps often post-process the route data. For example, an app may generate and save the initial route sample on Apple Watch, but then perform additional smoothing on iPhone or a remote server. After the smoothing completes, the app updates the route sample using a sync identifier, replacing the original sample with the new, updated version.\n\nAs a result, a query that just returns the current route sample for a given workout may return an outdated copy of the route, or may not return anything at all. To guarantee that your app receives the most up-to-date route sample, use an anchored object query to both get the current route, and to track any additions or updates.\n\nAfter you have the route sample, you still need to make a second query to access the underlying location data. For performance reasons, the system returns the locations asynchronously in batches. As each new batch of location data arrives, your app can process the locations and, for example, plot the locations on a map or analyze and visualize the data.\n\nGet the Route Sample Object\n\nTo guarantee that your app receives the most up-to-date route information, use an anchored object query to access the route and track any updates.\n\nlet runningObjectQuery = HKQuery.predicateForObjects(from: myWorkout)\n\n\nlet routeQuery = HKAnchoredObjectQuery(type: HKSeriesType.workoutRoute(), predicate: runningObjectQuery, anchor: nil, limit: HKObjectQueryNoLimit) { (query, samples, deletedObjects, anchor, error) in\n    \n    guard error == nil else {\n        // Handle any errors here.\n        fatalError(\"The initial query failed.\")\n    }\n    \n    // Process the initial route data here.\n}\n\n\nrouteQuery.updateHandler = { (query, samples, deleted, anchor, error) in\n    \n    guard error == nil else {\n        // Handle any errors here.\n        fatalError(\"The update failed.\")\n    }\n    \n    // Process updates or additions here.\n}\n\n\nstore.execute(routeQuery)\n\n\nThe query’s update handler receives any additions or changes to the route data. This lets your app process the most up-to-date version of the route, as soon as it becomes available.\n\nAccess a Route Sample’s Location Data\n\nAfter receiving an HKWorkoutRoute sample, you can access its location data using an HKWorkoutRouteQuery. Because a route sample can contain thousands of locations, you may not receive all of the location data at once. Instead, the system returns the location data in small batches.\n\nTo process the locations associated with a route:\n\nCreate a query object. Provide a block to receive the locations.\n\nRun the query. Call the HealthKit store’s execute(_:) method to run the query.\n\nReceive the route data. Your block receives one or more batches of location data. When the block’s done parameter is true, you have received all the data.\n\nOptionally: Call the HealthKit store’s stop(_:) method to stop the query from receiving additional data.\n\n// Create the route query.\nlet query = HKWorkoutRouteQuery(route: myRoute) { (query, locationsOrNil, done, errorOrNil) in\n    \n    // This block may be called multiple times.\n    \n    if let error = errorOrNil {\n        // Handle any errors here.\n        return\n    }\n    \n    guard let locations = locationsOrNil else {\n        fatalError(\"*** Invalid State: This can only fail if there was an error. ***\")\n    }\n    \n    // Do something with this batch of location data.\n        \n    if done {\n        // The query returned all the location data associated with the route.\n        // Do something with the complete data set.\n    }\n    \n    // You can stop the query by calling:\n    // store.stop(query)\n    \n}\nstore.execute(query)\n\n\nNote\n\nLocations from the HealthKit store are accurate within 50 meters or fewer, but they may need additional smoothing before you can use them (for example, to produce clean lines when plotting the route on a map).\n\nSee Also\nRoute data\nCreating a workout route\nRecord the user’s route during a workout.\nclass HKWorkoutRouteBuilder\nA builder object that incrementally constructs a workout route.\nclass HKWorkoutRoute\nA sample that contains a workout’s route data.\nstruct HKWorkoutRouteQueryDescriptor\nA query interface that reads the location data stored in a workout route using Swift concurrency.\nclass HKWorkoutRouteQuery\nA query to access the location data stored in a workout route.\nlet HKWorkoutRouteTypeIdentifier: String\nA series sample containing location data that defines the route the user took during a workout.\nclass HKSeriesBuilder\nAn abstract base class for building series samples.\nclass HKSeriesSample\nAn abstract base class that defines samples that contain a series of items."
  },
  {
    "title": "Creating a workout route | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/workouts_and_activity_rings/creating_a_workout_route",
    "html": "Overview\n\nYour app can create a route (for example, the user’s path when walking, running, or cycling) and associate it with a workout in HealthKit. During the workout, your app can track the user, gathering a series of location updates. These updates represent both the user’s location (longitude, latitude, and altitude) and the update’s time. Other apps can then use these locations to plot the route on a map, or to calculate metrics not already provided by HealthKit (for example, the user’s speed over specific intervals during the workout).\n\nTo create a workout route:\n\nRequest permissions. Before starting a workout, your app must request permission to use both the required HealthKit data types and Core Location updates.\n\nStart the workout. Setup the route builder object and start tracking the user’s location.\n\nAdd locations to the builder. As your app receives location updates from Core Location, filter and smooth the updates as needed, and add them to the route builder.\n\nEnd the workout. Stop tracking the user’s location. Save the workout to the HealthKit store.\n\nFinish the route. Tell the route builder to save the route and associates it with the workout.\n\nRequest Permissions\n\nAs noted in Setting up HealthKit, you must request permission from the user before using any data in HealthKit. Specifically for route data, you must request permission to read and share both HKWorkout and HKWorkoutRoute samples.\n\nYou must also request permission to use location services before your app receives location updates from Core Location. For more information on requesting permission to use location services, see CLLocationManager.\n\nStart the Workout\n\nWhen the user starts a new workout, begin tracking the user’s location using a CLLocationManager object from the Core Location framework. After you call the location manager’s startUpdatingLocation() method, the location manager’s delegate begins receiving updates containing the user’s current location.\n\n// Start tracking the user.\nlocationManager.desiredAccuracy = kCLLocationAccuracyBest\nlocationManager.startUpdatingLocation()\n\n\nNext, create and store a route builder for the workout. During the workout, you incrementally add locations from the Core Location updates to the route builder, which then creates the route from the accumulated data.\n\n// Create the route builder.\nrouteBuilder = HKWorkoutRouteBuilder(healthStore: store, device: nil)\n\n\nAdd Locations to the Builder\n\nAs your app receives location updates from Core Location, filter and smooth the locations, and then call insertRouteData(_:completion:) to add the locations to the route builder.\n\n// MARK: - CLLocationManagerDelegate Methods.\nfunc locationManager(_ manager: CLLocationManager, didUpdateLocations locations: [CLLocation]) {\n    \n    // Filter the raw data.\n    let filteredLocations = locations.filter { (location: CLLocation) -> Bool in\n        location.horizontalAccuracy <= 50.0\n    }\n    \n    guard !filteredLocations.isEmpty else { return }\n    \n    // Add the filtered data to the route.\n    routeBuilder.insertRouteData(filteredLocations) { (success, error) in\n        if !success {\n            // Handle any errors here.\n        }\n    }\n}\n\n\nBecause raw Core Location data can contain a significant amount of noise, your app needs to filter out any inaccurate locations before adding them to the route builder. Don't add any locations whose accuracy is greater than 50 meters. For best results, try to keep the time between locations to 3 seconds or less.\n\nEnd the Workout\n\nWhen the user ends the workout, stop tracking the user and save the workout to the HealthKit store. For more information on saving workouts, see Saving data to HealthKit.\n\nFinish the Route\n\nAfter saving the workout, add any remaining locations to the route builder and call finishRoute(with:metadata:completion:).\n\n// Create, save, and associate the route with the provided workout.\nrouteBuilder.finishRoute(with: myWorkout, metadata: myMetadata) { (newRoute, error) in\n    \n    guard newRoute != nil else {\n        // Handle any errors here.\n        return\n    }\n    \n    // Optional: Do something with the route here.\n}\n\n\nThe builder then processes the route data. If there are no errors, the builder saves the workout route to the HealthKit store and associates it with the provided workout. It then calls the completion handler and passes in the newly created route object.\n\nIf an error occurs, the builder calls the completion handler and passes an error object instead. Your app must handle the error and either try again or fail gracefully.\n\nYou can only associate a route with a single workout. After creating a route, you cannot change its workout.\n\nSee Also\nRoute data\nReading route data\nAccess the user’s route for a workout.\nclass HKWorkoutRouteBuilder\nA builder object that incrementally constructs a workout route.\nclass HKWorkoutRoute\nA sample that contains a workout’s route data.\nstruct HKWorkoutRouteQueryDescriptor\nA query interface that reads the location data stored in a workout route using Swift concurrency.\nclass HKWorkoutRouteQuery\nA query to access the location data stored in a workout route.\nlet HKWorkoutRouteTypeIdentifier: String\nA series sample containing location data that defines the route the user took during a workout.\nclass HKSeriesBuilder\nAn abstract base class for building series samples.\nclass HKSeriesSample\nAn abstract base class that defines samples that contain a series of items."
  },
  {
    "title": "Build a workout app for Apple Watch | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/workouts_and_activity_rings/build_a_workout_app_for_apple_watch",
    "html": "Overview\n\nNote\n\nThis sample code project is associated with WWDC21 session 10009: Build a workout app for Apple Watch.\n\nConfigure the sample code project\n\nBefore you run the sample code project in Xcode:\n\nOpen the sample with the latest version of Xcode.\n\nSelect the top-level project.\n\nFor the three targets, select the correct team in the Signing & Capabilities pane (next to Team) to let Xcode automatically manage your provisioning profile.\n\nMake a note of the Bundle Identifier of the WatchKit App target.\n\nOpen the Info.plist file of the WatchKit Extension target, and change the value of the NSExtension > NSExtensionAttributes > WKAppBundleIdentifier key to the bundle ID you noted in the previous step.\n\nMake a clean build and run the sample app on your device.\n\nSee Also\nSessions\nRunning workout sessions\nTrack a workout on Apple Watch.\nBuilding a multidevice workout app\nMirror a workout from a watchOS app to its companion iOS app, and perform bidirectional communication between them.\nclass HKWorkoutSession\nA session that tracks the user’s workout on Apple Watch.\nclass HKWorkoutConfiguration\nAn object that contains configuration information about a workout session.\nenum HKWorkoutSessionState\nA workout session’s state.\nclass HKLiveWorkoutBuilder\nA builder object that constructs a workout incrementally based on live data from an active workout session.\nclass HKLiveWorkoutDataSource\nA data source that automatically provides live data from an active workout session."
  },
  {
    "title": "HKWorkoutEvent | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkoutevent",
    "html": "Overview\n\nYou can use workout events to toggle a workout between an active and an inactive state, or to mark points of interest during a workout.\n\nWorkouts start in an active state. A pause event switches it to an inactive state; a resume event switches it back to an active state. Adding a pause event when the workout is already inactive, or a resume event when the workout is already active, does not affect the workout’s state. These events are ignored.\n\nThe lap, segment, and marker events are used to identify periods of interest during a workout. Use lap events to partition a workout into segments of equal distance. Segment events mark important periods during the workout, while markers identify important points in time.\n\nTopics\nCreating workout events\ninit(type: HKWorkoutEventType, dateInterval: DateInterval, metadata: [String : Any]?)\nInstantiates and returns a new workout event with the specified type, date interval, and metadata.\nGetting property data\nvar dateInterval: DateInterval\nThe time and duration of the event.\nvar type: HKWorkoutEventType\nThe type of workout event.\nvar metadata: [String : Any]?\nThe metadata associated with the workout event.\nDetermining the event type\nenum HKWorkoutEventType\nConstants that represent events occurring during a workout.\nDeprecated\ninit(type: HKWorkoutEventType, date: Date)\nInstantiates and returns a new workout event with the specified type and date.\ninit(type: HKWorkoutEventType, date: Date, metadata: [String : Any])\nInstantiates and returns a new workout event with the specified type, date, and metadata.\nvar date: Date\nThe time when the transition occurred.\nRelationships\nInherits From\nNSObject\nConforms To\nNSCopying\nNSSecureCoding\nSee Also\nSamples\nAdding samples to a workout\nCreate associated samples that add details to a workout.\nAccessing condensed workout samples\nRead series data from condensed workouts.\nDividing a HealthKit workout into activities\nPartition multisport and interval workouts into activities that represent the different parts of the workout.\nclass HKWorkout\nA workout sample that stores information about a single physical activity.\nclass HKWorkoutActivity\nAn object that describes an activity within a longer workout.\nclass HKWorkoutBuilder\nA builder object that incrementally constructs a workout.\nclass HKWorkoutType\nA type that identifies samples that store information about a workout.\nlet HKWorkoutTypeIdentifier: String\nThe workout type identifier.\nenum HKWorkoutActivityType\nThe type of activity performed during a workout.\nenum HKWorkoutSessionType\nThe type of session."
  },
  {
    "title": "Dividing a HealthKit workout into activities | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/workouts_and_activity_rings/dividing_a_healthkit_workout_into_activities",
    "html": "Overview\n\nSome workouts benefit from having the workout’s duration broken into a set of discrete activities. For example, a multisport event, like a triathlon, has separate swim, bike, and run portions. Similarly, you can divide interval training into active and rest periods.\n\nTo model these activities in HealthKit, use the HKWorkoutActivity class to specify the different parts of a workout. You can then query for workouts that have matching activities, and analyze those activities independently from the rest of the workout.\n\nHKWorkoutActivity instances have two main use cases:\n\nMultisport workouts\n\nFor workouts with an HKWorkoutActivityType.swimBikeRun activity type, you can use HKWorkoutActivity instances to represent the HKWorkoutActivityType.swimming, HKWorkoutActivityType.cycling, and HKWorkoutActivityType.running portions of the workout. You can also use activities to mark the HKWorkoutActivityType.transition between these activities.\n\nInterval training\n\nUse HKWorkoutActivity instances to represent the active portions of the workout. You can create an interval workout for any HKWorkoutActivityType; however, all workout activities must use the same activity type as the containing workout. You can’t mix activities within a single workout.\n\nNote\n\nAll HKWorkout objects have at least one associated HKWorkoutActivity. If you don’t explicitly add an activity to a workout, HealthKit adds an activity that matches the workout’s activity type. This means you can use predicateForWorkoutActivities(workoutActivityType:) to filter for all the workouts that track an activity type. For example, filtering for workout activities that use HKWorkoutActivityType.running includes regular running workouts, running interval training, and HKWorkoutActivityType.swimBikeRun workouts that include a running activity.\n\nMark transitions\n\nActivities can’t overlap, but they also don’t need to cover the entire HKWorkout sample’s duration. You can leave the time between the active portions of the workout blank, or you can explicitly create workout activities for these intervals. For example, explicitly creating activities for the time between active portions of the workout helps you track statistics during those intervals.\n\nFor multisport workouts, you can explicitly mark the transitions between activities using an HKWorkoutActivityType.transition type. For interval training, you can use the same activity type as the workout for the rest periods; however, you may want to add custom metadata to indicate whether the activity is an active or resting interval.\n\nHow you choose to model the data depends on the needs of your app and the types of intervals you’re tracking. If you’re tracking a workout that alternates between a fast and a slow pace, using workout activities to explicitly track all intervals makes sense. If, however, the intervals alternate between exercising and resting (for example, during many high-intensity interval training exercises), you may want to leave the rest intervals blank.\n\nAdd workout activities to a workout session\n\nTo add workout activities to a workout session, start by creating the session and start collecting data using the workout builder.\n\n// Create the workout configuration for a multisport workout.\nlet configuration = HKWorkoutConfiguration()\nconfiguration.activityType = .swimBikeRun\nconfiguration.locationType = .outdoor\n\n\n// Create the workout session.\nsession = try HKWorkoutSession(healthStore: store,\n                               configuration: configuration)\n\n\n// Start the session and the workout builder.\nlet startDate = Date()\nsession.startActivity(with: startDate)\nworkoutBuilder = session.associatedWorkoutBuilder()\n\n\n// Set the workout builder's data source.\nworkoutBuilder.dataSource =\nHKLiveWorkoutDataSource(healthStore: store,\n                        workoutConfiguration: configuration)\n\n\n// Start collecting data.\ntry await workoutBuilder.beginCollection(at: startDate)\n\n\nNext, when an activity begins, create a new configuration for the activity, and start the activity using the session’s beginNewActivity(configuration:date:metadata:) method. The data source automatically begins collecting the default data types for the activity.\n\n// Start the swimming activity.\nlet swimmingConfiguration = HKWorkoutConfiguration()\nswimmingConfiguration.activityType = .swimming\nswimmingConfiguration.locationType = .outdoor\nswimmingConfiguration.swimmingLocationType = .openWater\n\n\nsession.beginNewActivity(configuration: swimmingConfiguration,\n                         date: Date(),\n                         metadata: nil)\n\n\nWhen the activity ends, call the session’s endCurrentActivity(on:) method. HealthKit also ends the current activity when you begin a new activity.\n\n// End the activity.\nsession.endCurrentActivity(on: Date())\n\n\nTo explicitly track the intervals between activities, start a new activity using HKWorkoutActivityType.transition. End this transition when the next activity begins.\n\n// Explicitly track the transition between activities.\nlet transitionConfiguration = HKWorkoutConfiguration()\ntransitionConfiguration.activityType = .transition\ntransitionConfiguration.locationType = .outdoor\n\n\nsession.beginNewActivity(configuration: transitionConfiguration,\n                         date: Date(),\n                         metadata: nil)\n\n\nFinally, when the entire workout session ends, call the session’s end() method. This also ends the current activity. Then call the workout builder’s finishWorkout(completion:) method to save the workout to the HealthKit store. This method also returns an HKWorkout object, which you can use to display summary information about the workout.\n\n// Ending the session also ends the current activity.\nsession.end()\n\n\n// Finishing the workout saves the workout\n// and returns an HKWorkout object that you can use to display summary data.\nlet workout = try await workoutBuilder.finishWorkout()\n\n\n// Do something with the workout here.\nprint(workout as Any)\n\n\nEnable and disable the collection of data\n\nWhen you start a new workout activity, your data source automatically begins collecting relevant data from Apple Watch. To see the data types that the data source collects, check the data source’s typesToCollect property.\n\nWhen running an HKWorkoutActivityType.swimBikeRun workout session, HealthKit automatically changes the collected data types based on the current workout activity. For example, the data source collects data like activeEnergyBurned, distanceSwimming, and swimmingStrokeCount.\n\nIf you start an HKWorkoutActivityType.running activity, the system automatically updates the data source’s typesToCollect property based on the new activity. For example, the data source automatically stops collecting distanceSwimming and swimmingStrokeCount, and starts collecting relevant data like distanceWalkingRunning and runningStrideLength.\n\nMost of the time, you can use the default collected data types. However, if your app calculates and saves its own HKSample objects during the workout, you may want to manually enable and disable the collection of that data type, letting the data source automatically associate your samples with the workout.\n\nTo start collecting a data type, call the data source’s enableCollection(for:predicate:) method.\n\n// Enable the collection of respiratory rate.\nguard let dataSource = session.associatedWorkoutBuilder().dataSource else {\n    print(\"*** No data source found! ***\")\n    return }\n\n\nlet respiratoryRate = HKQuantityType(.respiratoryRate)\ndataSource.enableCollection(for: respiratoryRate, predicate: nil)\n\n\nHealthKit then associates any matching samples from your app with the workout activity. You can also disable the collection of a data type by calling disableCollection(for:).\n\n// Disable the collection of respiratory rate.\nguard let dataSource = session.associatedWorkoutBuilder().dataSource else {\n    print(\"*** No data source found! ***\")\n    return }\n\n\nlet respiratoryRate = HKQuantityType(.respiratoryRate)\ndataSource.disableCollection(for: respiratoryRate)\n\n\nQuery for workout activities\n\nTo query for workouts with activities that match a specific predicate, start by creating a workout activity predicate using one of the HKQuery class’s predicateForWorkoutActivities methods. Next, use predicateForWorkouts(activityPredicate:) to wrap the activity predicate inside a workout predicate. You can then use the workout predicate in your query.\n\n// Create a predicate for an average heart rate of greater than 150 bpm.\nlet highHeartRate = HKQuantity(unit: .count(), doubleValue: 150.0)\nlet heartRateType = HKQuantityType(.heartRate)\n\n\nlet heartRatePredicate =\nHKQuery.predicateForWorkoutActivities(operatorType: .greaterThan,\n                                      quantityType: heartRateType,\n                                      averageQuantity: highHeartRate)\n\n\n// Wrap the workout activity predicate inside a workout predicate.\nlet workoutPredicate = HKQuery.predicateForWorkouts(activityPredicate: heartRatePredicate)\n\n\nlet query = HKSampleQueryDescriptor(predicates: [.workout(workoutPredicate)],\n                                    sortDescriptors: [])\n\n\nlet matchingWorkouts = try await query.result(for: store)\n\n\n// Do something with the samples here.\nprint(matchingWorkouts)\n\n\nThis example returns all the workouts that have an activity with an average heart rate over 150 bpm. Use the workout’s workoutActivities property to access the activities associated with a workout.\n\nSee Also\nSamples\nAdding samples to a workout\nCreate associated samples that add details to a workout.\nAccessing condensed workout samples\nRead series data from condensed workouts.\nclass HKWorkout\nA workout sample that stores information about a single physical activity.\nclass HKWorkoutActivity\nAn object that describes an activity within a longer workout.\nclass HKWorkoutBuilder\nA builder object that incrementally constructs a workout.\nclass HKWorkoutType\nA type that identifies samples that store information about a workout.\nlet HKWorkoutTypeIdentifier: String\nThe workout type identifier.\nenum HKWorkoutActivityType\nThe type of activity performed during a workout.\nenum HKWorkoutSessionType\nThe type of session.\nclass HKWorkoutEvent\nAn object representing an important event during a workout."
  },
  {
    "title": "BufferedAsyncByteIterator | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/bufferedasyncbyteiterator",
    "html": "Topics\nAccessing byte data\ntypealias BufferedAsyncByteIterator.Element\nThe type of element returned by the iterator.\nfunc next() -> UInt8?\nAsynchronously returns the next byte of data.\nRelationships\nConforms To\nAsyncIteratorProtocol"
  },
  {
    "title": "HKWorkoutBuilder | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkoutbuilder",
    "html": "Overview\n\nIncrementally collect samples and events associated with a workout. When the workout ends, call finishWorkout(completion:) to create an HKWorkout sample and save it to the HealthKit store.\n\nFor watchOS, use an HKWorkoutSession and an HKLiveWorkoutBuilder instead.\n\nTopics\nCreating the builder\ninit(healthStore: HKHealthStore, configuration: HKWorkoutConfiguration, device: HKDevice?)\nReturns a new workout builder object that is not connected to a workout session or other data source.\nvar device: HKDevice?\nThe device associated with the workout.\nvar workoutConfiguration: HKWorkoutConfiguration\nThe configuration information for the workout.\nStarting the workout\nfunc beginCollection(withStart: Date, completion: (Bool, Error?) -> Void)\nSets the workout’s start date and begins building the workout.\nvar startDate: Date?\nThe workout’s start date and time.\nfunc elapsedTime(at: Date) -> TimeInterval\nCalculates the duration of the workout at the specified time.\nAssociating samples with the workout\nfunc add([HKSample], completion: (Bool, Error?) -> Void)\nAdds a sample to be associated with the workout.\nfunc seriesBuilder(for: HKSeriesType) -> HKSeriesBuilder?\nReturns the series builder for the specified type, creating a new builder, if necessary.\nfunc statistics(for: HKQuantityType) -> HKStatistics?\nReturns the statistics calculated for matching samples added to the workout.\nAdding metadata to the workout\nfunc addMetadata([String : Any], completion: (Bool, Error?) -> Void)\nAdds metadata to be saved with the workout.\nvar metadata: [String : Any]\nThe metadata the builder saves with the workout.\nAdding events to the workout\nfunc addWorkoutEvents([HKWorkoutEvent], completion: (Bool, Error?) -> Void)\nAdds a workout event to the builder.\nvar workoutEvents: [HKWorkoutEvent]\nThe list of events added to the workout.\nManaging workout activities\nfunc addWorkoutActivity(HKWorkoutActivity, completion: (Bool, Error?) -> Void)\nAdds a workout activity to the workout builder.\nfunc updateActivity(uuid: UUID, adding: [String : Any], completion: (Bool, Error?) -> Void)\nAdds metadata to a workout activity that you’ve already added to the workout builder.\nfunc updateActivity(uuid: UUID, end: Date, completion: (Bool, Error?) -> Void)\nSets the end date for a workout activity that you’ve already added to the workout builder.\nvar workoutActivities: [HKWorkoutActivity]\nEnding the workout\nfunc endCollection(withEnd: Date, completion: (Bool, Error?) -> Void)\nStops the collection of data, sets the workout’s end date, and deactivates the workout builder.\nvar endDate: Date?\nThe workout’s end date and time.\nfunc finishWorkout(completion: (HKWorkout?, Error?) -> Void)\nCreates the workout, using the samples and events added to the builder, and saves it to the HealthKit store.\nfunc discardWorkout()\nStops the collection of data and discards the current results without saving the workout.\nAccessing workout statistics\nvar allStatistics: [HKQuantityType : HKStatistics]\nA dictionary that contains all the statistics for the workout builder.\nRelationships\nInherits From\nNSObject\nSee Also\nSamples\nAdding samples to a workout\nCreate associated samples that add details to a workout.\nAccessing condensed workout samples\nRead series data from condensed workouts.\nDividing a HealthKit workout into activities\nPartition multisport and interval workouts into activities that represent the different parts of the workout.\nclass HKWorkout\nA workout sample that stores information about a single physical activity.\nclass HKWorkoutActivity\nAn object that describes an activity within a longer workout.\nclass HKWorkoutType\nA type that identifies samples that store information about a workout.\nlet HKWorkoutTypeIdentifier: String\nThe workout type identifier.\nenum HKWorkoutActivityType\nThe type of activity performed during a workout.\nenum HKWorkoutSessionType\nThe type of session.\nclass HKWorkoutEvent\nAn object representing an important event during a workout."
  },
  {
    "title": "HKWorkoutActivity | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkoutactivity",
    "html": "Overview\n\nWorkout activity objects partition a workout into a set of separate activities. For example, you can use workout activities to record the swim, bike, and running portions of a multisport event, like a triathlon, or to represent the active and rest periods during interval training. All HKWorkout instance have at least one, associated HKWorkoutActivity. If you don’t explicitly set workout activities, HealthKit assigns a workout activity that matches the HKWorkout object’s activity type. For more information, see Dividing a HealthKit workout into activities.\n\nTopics\nCreating workout activities\ninit(workoutConfiguration: HKWorkoutConfiguration, start: Date, end: Date?, metadata: [String : Any]?)\nCreates a workout activity using the provided configuration, start date, end date, and metadata.\nAccessing workout data\nvar uuid: UUID\nThe activity’s universally unique identifier (UUID).\nvar startDate: Date\nThe activitiy’s start date and time.\nvar endDate: Date?\nThe activity’s end date and time.\nvar duration: TimeInterval\nThe activity’s duration, measured in seconds.\nvar allStatistics: [HKQuantityType : HKStatistics]\nA dictionary that contains all the statistics for the activity.\nfunc statistics(for: HKQuantityType) -> HKStatistics?\nReturns the activity’s statistics for the provided quantity type.\nvar metadata: [String : Any]?\nMetadata that describes the activity.\nvar workoutConfiguration: HKWorkoutConfiguration\nThe configuration information for this part of the workout.\nvar workoutEvents: [HKWorkoutEvent]\nAn array of events associated with the containing workout and occurring during the activity’s duration.\nSpecifying predicate key paths\nlet HKPredicateKeyPathWorkoutActivity: String\nThe key path for accessing a specific workout activity.\nlet HKPredicateKeyPathWorkoutActivityType: String\nThe key path for accessing activities that match a workout activity type.\nlet HKPredicateKeyPathWorkoutActivityStartDate: String\nThe key path for accessing activities with a matching start date.\nlet HKPredicateKeyPathWorkoutActivityEndDate: String\nThe key path for accessing activities with a matching end date.\nlet HKPredicateKeyPathWorkoutActivityDuration: String\nThe key path for accessing activities with a matching duration.\nlet HKPredicateKeyPathWorkoutActivityAverageQuantity: String\nThe key path for accessing activities with a matching average quantity.\nlet HKPredicateKeyPathWorkoutActivityMaximumQuantity: String\nThe key path for accessing activities with a matching maximum quantity.\nlet HKPredicateKeyPathWorkoutActivityMinimumQuantity: String\nThe key path for accessing activities with a matching minimum quantity.\nlet HKPredicateKeyPathWorkoutActivitySumQuantity: String\nThe key path for accessing activities with a matching sum.\nRelationships\nInherits From\nNSObject\nConforms To\nNSCopying\nNSSecureCoding\nSee Also\nSamples\nAdding samples to a workout\nCreate associated samples that add details to a workout.\nAccessing condensed workout samples\nRead series data from condensed workouts.\nDividing a HealthKit workout into activities\nPartition multisport and interval workouts into activities that represent the different parts of the workout.\nclass HKWorkout\nA workout sample that stores information about a single physical activity.\nclass HKWorkoutBuilder\nA builder object that incrementally constructs a workout.\nclass HKWorkoutType\nA type that identifies samples that store information about a workout.\nlet HKWorkoutTypeIdentifier: String\nThe workout type identifier.\nenum HKWorkoutActivityType\nThe type of activity performed during a workout.\nenum HKWorkoutSessionType\nThe type of session.\nclass HKWorkoutEvent\nAn object representing an important event during a workout."
  },
  {
    "title": "documentType(forIdentifier:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkobjecttype/1778757-documenttype",
    "html": "Parameters\nidentifier\n\nA document type identifier. For a list of valid identifiers, see HKDocumentTypeIdentifier.\n\nReturn Value\n\nThe shared HKDocumentType instance based on the provided identifier.\n\nDiscussion\n\nThis method returns an instance of the HKQuantityType concrete subclass. HealthKit uses document types to manage medical documents. Use document type instances to create document samples that you can save in the HealthKit store. For more information, see HKDocumentSample.\n\nSee Also\nCreating document types\nstruct HKDocumentTypeIdentifier\nThe identifiers for documents."
  },
  {
    "title": "seriesType(forIdentifier:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkobjecttype/2866707-seriestype",
    "html": "Parameters\nidentifier\n\nA series type identifier. In iOS 11 and watchOS 4, there is only one series type identifier: HKWorkoutRouteTypeIdentifier.\n\nReturn Value\n\nThe shared HKSeriesType instance based on the provided identifier.\n\nDiscussion\n\nThis method returns an instance of the HKSeriesType concrete subclass. HealthKit uses series types to represent samples that store a series of items. You can’t directly instantiate these samples; instead, use a HKSeriesBuilder subclass to create them. Use series types to ask for permission to read series data from the HealthKit store.\n\nSee Also\nRelated Documentation\nclass func workoutRoute() -> Self\nReturns a series type object for workout routes.\nclass HKWorkoutRoute\nA sample that contains a workout’s route data.\nclass HKWorkoutRouteBuilder\nA builder object that incrementally constructs a workout route."
  },
  {
    "title": "Accessing condensed workout samples | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/workouts_and_activity_rings/accessing_condensed_workout_samples",
    "html": "Overview\n\nTo reduce the size of workout data, HealthKit can condense samples associated with workouts created on Apple Watch. HealthKit enumerates the data associated with a workout and adds that data to one or more quantity series samples. After saving all the data to series objects, HealthKit deletes the originals. In addition, it converts older HKQuantitySample objects to HKCumulativeQuantitySample or HKDiscreteQuantitySample objects.\n\nHealthKit only condenses high-frequency data recorded by the Workout app on Apple Watch. This includes the following data types:\n\ndistanceWalkingRunning\n\ndistanceCycling\n\nbasalEnergyBurned\n\nactiveEnergyBurned\n\nheartRate\n\nFor these data types, HealthKit condenses samples that are more than 90 days old and associated with a workout that’s at least 5 minutes long.\n\nHealthKit may condense samples for a given workout more than once. For example, if the system syncs new samples associated with the workout to the device, or if the condenser algorithm changes, HealthKit may condense the workout again.\n\nHealthKit also batches the data into multiple quantity series to optimize how the system lays out the data in memory. For many data types, HealthKit creates a separate quantity series for each 5-minute interval in the workout. The condensation process preserves all the data from the original workout — but it greatly reduces the overhead needed to save that data to disk. However, your app may need to perform additional steps to read the condensed data.\n\nQuery high-frequency data from a condensed workout\n\nBecause HealthKit condenses older workout data, any samples associated with a workout may actually represent a series of higher-frequency data. In many cases, you can just use these samples, without having to access the underlying data. For example, HKStatisticsQuery and HKStatisticsCollectionQuery transparently operate on the underlying data.\n\nHowever, if your app needs to access the underlying data directly, start by querying for all the samples associated with a workout:\n\n// Create the workout predicate.\nlet forWorkout = HKQuery.predicateForObjects(from: workout)\n\n\n// Create the heart-rate descriptor.\nlet heartRateDescriptor = HKQueryDescriptor(sampleType: myHeartRateType,\n                                            predicate: forWorkout)\n\n\n// Create the query.\nlet heartRateQuery = HKSampleQuery(queryDescriptors: [heartRateDescriptor],\n                                   limit: HKObjectQueryNoLimit)\n{ query, samples, error in\n    // Process the samples.\n}\n\n\n// Run  the query.\nmyStore.execute(heartRateQuery)\n\n\nThen, in the query’s results handler, if a sample has a count greater than 1, it contains series data.\n\n// Create the query.\nlet heartRateQuery = HKSampleQuery(queryDescriptors: [heartRateDescriptor],\n                                   limit: HKObjectQueryNoLimit)\n{ query, samples, error in\n\n\n    // Start by checking for errors.\n    guard let samples = samples else {\n        // Handle the error.\n        fatalError(\"*** An error occurred: \\(error!.localizedDescription) ***\")\n    }\n    \n    // Iterate over all the samples.\n    for sample in samples {\n        \n        guard let sample = sample as? HKDiscreteQuantitySample else {\n            fatalError(\"*** Unexpected Sample Type ***\")\n        }\n        \n        // Check to see if the sample is a series.\n        if sample.count == 1 {\n            // This is a single sample.\n            // Use the sample.\n            myOutput.append(\"\\(sample)\\n\")\n        }\n        else {\n            // This is a series.\n            // Get the detailed items for the series.\n            myGetDetailedItems(for: sample)\n        }\n    }\n}\n\n\n\n\nUse an HKQuantitySeriesSampleQuery to access the detailed data from the series.\n\n// Create the predicate.\nlet inSeriesSample = HKQuery.predicateForObject(with: series.uuid)\n\n\n// Create the query.\nlet detailQuery = HKQuantitySeriesSampleQuery(quantityType: myHeartRateType,\n                                              predicate: inSeriesSample)\n{ query, quantity, dateInterval, HKSample, done, error in\n    \n    guard let quantity = quantity, let dateInterval = dateInterval else {\n        fatalError(\"*** An error occurred: \\(error!.localizedDescription) ***\")\n    }\n    \n    // Use the data.\n    myOutput.append(\"\\(quantity.doubleValue(for: HKUnit(from: \"count/min\"))): \\(dateInterval)\")\n}\n\n\n// Run the query.\nmyStore.execute(detailQuery)\n\n\nSee Also\nSamples\nAdding samples to a workout\nCreate associated samples that add details to a workout.\nDividing a HealthKit workout into activities\nPartition multisport and interval workouts into activities that represent the different parts of the workout.\nclass HKWorkout\nA workout sample that stores information about a single physical activity.\nclass HKWorkoutActivity\nAn object that describes an activity within a longer workout.\nclass HKWorkoutBuilder\nA builder object that incrementally constructs a workout.\nclass HKWorkoutType\nA type that identifies samples that store information about a workout.\nlet HKWorkoutTypeIdentifier: String\nThe workout type identifier.\nenum HKWorkoutActivityType\nThe type of activity performed during a workout.\nenum HKWorkoutSessionType\nThe type of session.\nclass HKWorkoutEvent\nAn object representing an important event during a workout."
  },
  {
    "title": "HKWorkoutSessionType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkoutsessiontype",
    "html": "Topics\nTypes\ncase mirrored\nA mirrored session, running on the companion iOS device.\ncase primary\nA primary session running on watchOS.\nRelationships\nConforms To\nSendable\nSee Also\nSamples\nAdding samples to a workout\nCreate associated samples that add details to a workout.\nAccessing condensed workout samples\nRead series data from condensed workouts.\nDividing a HealthKit workout into activities\nPartition multisport and interval workouts into activities that represent the different parts of the workout.\nclass HKWorkout\nA workout sample that stores information about a single physical activity.\nclass HKWorkoutActivity\nAn object that describes an activity within a longer workout.\nclass HKWorkoutBuilder\nA builder object that incrementally constructs a workout.\nclass HKWorkoutType\nA type that identifies samples that store information about a workout.\nlet HKWorkoutTypeIdentifier: String\nThe workout type identifier.\nenum HKWorkoutActivityType\nThe type of activity performed during a workout.\nclass HKWorkoutEvent\nAn object representing an important event during a workout."
  },
  {
    "title": "HKCategoryTypeIdentifier | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkcategorytypeidentifier",
    "html": "Overview\n\nTo create an HKCategoryType instance, pass an HKCategoryTypeIdentifier value to the categoryType(forIdentifier:) method.\n\nFor the complete list of quantity type identifiers, see Activity.\n\nTopics\nActivity\nstatic let appleStandHour: HKCategoryTypeIdentifier\nA category sample type that counts the number of hours in the day during which the user has stood and moved for at least one minute per hour.\nstatic let lowCardioFitnessEvent: HKCategoryTypeIdentifier\nAn event that indicates the user’s VO2 max values consistently fall below a particular aerobic fitness threshold.\nReproductive Health\nstatic let menstrualFlow: HKCategoryTypeIdentifier\nA category sample type that records menstrual cycles.\nstatic let intermenstrualBleeding: HKCategoryTypeIdentifier\nA category sample type that records spotting outside the normal menstruation period.\nstatic let infrequentMenstrualCycles: HKCategoryTypeIdentifier\nA category sample that indicates an infrequent menstrual cycle.\nstatic let irregularMenstrualCycles: HKCategoryTypeIdentifier\nA category sample that indicates an irregular menstrual cycle.\nstatic let persistentIntermenstrualBleeding: HKCategoryTypeIdentifier\nA category sample that indicates persistent intermenstrual bleeding.\nstatic let prolongedMenstrualPeriods: HKCategoryTypeIdentifier\nA category sample that indicates a prolonged menstrual cycle.\nstatic let cervicalMucusQuality: HKCategoryTypeIdentifier\nA category sample type that records the quality of the user’s cervical mucus.\nstatic let ovulationTestResult: HKCategoryTypeIdentifier\nA category sample type that records the result of an ovulation home test.\nstatic let progesteroneTestResult: HKCategoryTypeIdentifier\nA category type that represents the results from a home progesterone test.\nstatic let sexualActivity: HKCategoryTypeIdentifier\nA category sample type that records sexual activity.\nstatic let contraceptive: HKCategoryTypeIdentifier\nA category sample type that records the use of contraceptives.\nstatic let pregnancy: HKCategoryTypeIdentifier\nA category type that records pregnancy.\nstatic let pregnancyTestResult: HKCategoryTypeIdentifier\nA category type that represents the results from a home pregnancy test.\nstatic let lactation: HKCategoryTypeIdentifier\nA category type that records lactation.\nHearing\nstatic let environmentalAudioExposureEvent: HKCategoryTypeIdentifier\nA category sample type that records exposure to potentially damaging sounds from the environment.\nenum HKCategoryValueEnvironmentalAudioExposureEvent\nExposure events for environmental audio.\nstatic let headphoneAudioExposureEvent: HKCategoryTypeIdentifier\nA category sample type that records exposure to potentially damaging sounds from headphones.\nenum HKCategoryValueHeadphoneAudioExposureEvent\nExposure events for headphone audio.\nstatic let audioExposureEvent: HKCategoryTypeIdentifier\nA category sample type for audio exposure events.\nVital Signs\nstatic let lowHeartRateEvent: HKCategoryTypeIdentifier\nA category sample type for low heart rate events.\nstatic let highHeartRateEvent: HKCategoryTypeIdentifier\nA category sample type for high heart rate events.\nstatic let irregularHeartRhythmEvent: HKCategoryTypeIdentifier\nA category sample type for irregular heart rhythm events.\nMobility\nstatic let appleWalkingSteadinessEvent: HKCategoryTypeIdentifier\nA category sample type that records an incident where the user showed a reduced score for their gait’s steadiness.\nSymptoms\nSymptom Type Identifiers\nIdentifiers for medical symptoms.\nMindfulness and Sleep\nstatic let mindfulSession: HKCategoryTypeIdentifier\nA category sample type for recording a mindful session.\nstatic let sleepAnalysis: HKCategoryTypeIdentifier\nA category sample type for sleep analysis information.\nSelf Care\nstatic let toothbrushingEvent: HKCategoryTypeIdentifier\nA category sample type for toothbrushing events.\nstatic let handwashingEvent: HKCategoryTypeIdentifier\nA category sample type for handwashing events.\nInitializers\ninit(rawValue: String)\nReturns a newly initialized category type identifier using the provided string.\nRelationships\nConforms To\nHashable\nRawRepresentable\nSendable\nSee Also\nCreating category types\nclass func categoryType(forIdentifier: HKCategoryTypeIdentifier) -> HKCategoryType?\nReturns the shared category type for the provided identifier."
  },
  {
    "title": "Adding samples to a workout | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/workouts_and_activity_rings/adding_samples_to_a_workout",
    "html": "Overview\n\nWhen you create a workout sample, it only contains a general overview of the workout: the workout’s duration, the total distance traveled, and the total energy burned. You can enhance the workout by creating samples that provide additional details, and associating these samples with the workout. To associate a sample with a workout use the HealthKit store’s add(_:to:completion:) method. The workout must be saved to the HealthKit store before you add any samples. The samples don’t need to be saved. Adding them to the workout automatically saves them.\n\nGather data about a workout\n\nAssociating samples with a workout provides fine-grain information about the workout. However, adding samples to the workout does not change any of the workout’s properties. Specifically, adding distance samples won’t change the quantity stored in the totalDistance, startDate, endDate, or duration properties. Likewise, adding active energy burned samples won’t change the quantity stored in the totalEnergyBurned property. Therefore, adding associated samples leads to some duplication between the workout’s properties and these samples.\n\nYour app should always provide data for the workout’s duration, totalDistance, and totalEnergyBurned properties when the data is both available and relevant to the workout. In addition, you should provide a set of associated samples that sum up to these totals. You can also provide additional associated samples, to help track how the intensity of the exercise changed during the course of the workout.\n\nFor example, an app that tracks runs might create a workout that includes the total distance, duration, and calories burned after the user finishes the run. The app could also save samples that describe the distance, calories burned, step count, heart rate, flights climbed, and other data over much smaller time intervals.\n\nFine tune the exact length of your associated samples based on the type of workout and the needs of your app. Using five-minute intervals minimizes the amount of memory needed to store the workouts, while still providing a general sense of the change in intensity over the course of a long workout. Using five-second intervals provides a much more detailed view of the workout, but requires considerably more memory and processing.\n\nThe following code samples show how to associate distance, energy burned, and Heart Rate samples with a workout. For simplicity’s sake, these samples use hard-coded values and perform all the operations inline. A real-world app would calculate these values from sensor data and break the operation up using helper methods.\n\nCreate and save the sample\n\nStart by creating quantity objects for the total energy burned, and total distance traveled.\n\nlet energyBurned = HKQuantity(unit: HKUnit.largeCalorie(), doubleValue: 425.0)\nlet distance = HKQuantity(unit: HKUnit.mile(), doubleValue: 3.2)\n\n\nNext create the workout sample.\n\nlet run = HKWorkout(activityType: HKWorkoutActivityType.running,\n                    start: start,\n                    end: end,\n                    duration: 0,\n                    totalEnergyBurned: energyBurned,\n                    totalDistance: distance,\n                    metadata: nil)\n\n\nAnd save the sample to the HealthKit store.\n\nstore.save(run) { (success, error) -> Void in\n    guard success else {\n        // Perform proper error handling here.\n        return\n    }\n    \n    // Add detail samples here.\n}\n\n\nAdd detailed samples\n\nIn the completion handler, you check to ensure that the save succeeded, and then add detailed samples to the workout. For example, you could split the workout into intervals and then calculate detailed information for each interval. The following code listing creates a sample for the distance covered in the first interval.\n\nguard let distanceType =\n    HKObjectType.quantityType(forIdentifier:\n        HKQuantityTypeIdentifier.distanceWalkingRunning) else {\n    fatalError(\"*** Unable to create a distance type ***\")\n}\n\n\nlet distancePerInterval = HKQuantity(unit: HKUnit.foot(),\n                                     doubleValue: 165.0)\n\n\nlet distancePerIntervalSample = HKQuantitySample(type: distanceType,\n                                                 quantity: distancePerInterval,\n                                                 start: myIntervals[0],\n                                                 end: myIntervals[1])\n\n\nmyDetailSamples.append(distancePerIntervalSample)\n\n\nThen you create an energy-burned sample for that interval.\n\nguard let energyBurnedType =\n    HKObjectType.quantityType(forIdentifier:\n        HKQuantityTypeIdentifier.activeEnergyBurned) else {\n    fatalError(\"*** Unable to create an energy burned type ***\")\n}\n\n\nlet energyBurnedPerInterval = HKQuantity(unit: HKUnit.largeCalorie(),\n                                         doubleValue: 15.5)\n\n\nlet energyBurnedPerIntervalSample =\n    HKQuantitySample(type: energyBurnedType,\n                     quantity: energyBurnedPerInterval,\n                     start: myIntervals[0],\n                     end: myIntervals[1])\n\n\nmyDetailSamples.append(energyBurnedPerIntervalSample)\n\n\nHowever, you’re not limited to just energy burned and distance. The following code creates a heart rate sample.\n\nguard let heartRateType =\n    HKObjectType.quantityType(forIdentifier:\n        HKQuantityTypeIdentifier.heartRate) else {\n    fatalError(\"*** Unable to create a heart rate type ***\")\n}\n\n\nlet heartRateForInterval = HKQuantity(unit: HKUnit(from: \"count/min\"),\n                                      doubleValue: 95.0)\n\n\nlet heartRateForIntervalSample =\n    HKQuantitySample(type: heartRateType,\n                     quantity: heartRateForInterval,\n                     start: myIntervals[0],\n                     end: myIntervals[1])\n\n\nmyDetailSamples.append(heartRateForIntervalSample)\n\n\nContinue to create all the samples you need for all of your intervals. Then use the HealthKit store to add these samples to the workout.\n\nstore.add(myDetailSamples, to: run) { (success, error) -> Void in\n    guard success else {\n        // Perform proper error handling here.\n        return\n    }\n}\n\n\nRead associated samples\n\nTo read a workout’s fine-grain details, you need to create a query that returns only the samples associated with the workout. Use the predicateForObjects(from:) method to create a predicate object that matches only samples associated with the workout. You can then use that predicate to filter one or more queries. For example, the following sample code returns all the distance samples associated with the workout.\n\nguard let distanceType =\n    HKObjectType.quantityType(forIdentifier:\n        HKQuantityTypeIdentifier.distanceWalkingRunning) else {\n            fatalError(\"*** Unable to create a distance type ***\")\n}\n\n\nlet workoutPredicate = HKQuery.predicateForObjects(from: workout)\n\n\nlet startDateSort = NSSortDescriptor(key: HKSampleSortIdentifierStartDate, ascending: true)\n\n\nlet query = HKSampleQuery(sampleType: distanceType,\n                          predicate: workoutPredicate,\n                          limit: 0,\n                          sortDescriptors: [startDateSort]) { (sampleQuery, results, error) -> Void in\n                            guard let distanceSamples = results as? [HKQuantitySample] else {\n                                // Perform proper error handling here.\n                                return\n                            }\n                            \n                            // Use the workout's distance samples here.\n}\n\n\nstore.execute(query)\n\n\nYou need to create a separate query for each data type associated with the workout. For example, to get the full details of the workout created earlier, you would need separate queries for distance, energy burned, and heart rate.\n\nSee Also\nSamples\nAccessing condensed workout samples\nRead series data from condensed workouts.\nDividing a HealthKit workout into activities\nPartition multisport and interval workouts into activities that represent the different parts of the workout.\nclass HKWorkout\nA workout sample that stores information about a single physical activity.\nclass HKWorkoutActivity\nAn object that describes an activity within a longer workout.\nclass HKWorkoutBuilder\nA builder object that incrementally constructs a workout.\nclass HKWorkoutType\nA type that identifies samples that store information about a workout.\nlet HKWorkoutTypeIdentifier: String\nThe workout type identifier.\nenum HKWorkoutActivityType\nThe type of activity performed during a workout.\nenum HKWorkoutSessionType\nThe type of session.\nclass HKWorkoutEvent\nAn object representing an important event during a workout."
  },
  {
    "title": "categoryType(forIdentifier:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkobjecttype/1615526-categorytype",
    "html": "Parameters\nidentifier\n\nA category type identifier. For a list of valid identifiers, see HKCategoryTypeIdentifier.\n\nReturn Value\n\nThe shared HKCategoryType instance based on the provided identifier.\n\nDiscussion\n\nThis method returns an instance of the HKCategoryType concrete subclass. HealthKit uses category types to represent data that can be categorized into an enumeration of values. Use category type instances to create category samples that you can then save in the HealthKit store. For more information, see HKCategorySample.\n\nSee Also\nCreating category types\nstruct HKCategoryTypeIdentifier\nIdentifiers for creating category types."
  },
  {
    "title": "HKPredicateKeyPathWorkoutMinimumQuantity | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkpredicatekeypathworkoutminimumquantity",
    "html": "See Also\nSpecifying predicate key paths\nlet HKPredicateKeyPathWorkoutType: String\nThe key path for accessing the workout’s type.\nlet HKPredicateKeyPathWorkoutDuration: String\nThe key path for accessing the workout’s duration.\nlet HKPredicateKeyPathWorkoutTotalDistance: String\nThe key path for accessing the workout’s total distance.\nlet HKPredicateKeyPathWorkoutTotalEnergyBurned: String\nThe key path for accessing the workout’s total energy burned.\nlet HKPredicateKeyPathWorkoutAverageQuantity: String\nThe key path for accessing workouts with a matching average quantity.\nlet HKPredicateKeyPathWorkoutMaximumQuantity: String\nThe key path for accessing workouts with a matching maximum quantity.\nlet HKPredicateKeyPathWorkoutSumQuantity: String\nThe key path for accessing workouts with a matching sum."
  },
  {
    "title": "statistics(for:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkout/3929754-statistics",
    "html": "Parameters\nquantityType\n\nThe type of HKQuantitySample objects used to calculate the statistics.\n\nDiscussion\n\nHealthKit calculates an HKStatistics object based on the HKQuantitySample objects associated with the workout that also match the specified HKQuantityType.\n\nIf there are no matching quantity values, this method returns nil.\n\nSee Also\nAccessing workout data\nvar duration: TimeInterval\nThe workout’s duration.\nvar workoutActivityType: HKWorkoutActivityType\nThe type of activity performed during the workout.\nvar workoutActivities: [HKWorkoutActivity]\nvar workoutEvents: [HKWorkoutEvent]?\nAn array of workout event objects.\nvar allStatistics: [HKQuantityType : HKStatistics]\nA dictionary that contains all the statistics for the workout.\nvar totalDistance: HKQuantity?\nThe total distance traveled during the workout.\nDeprecated\nvar totalEnergyBurned: HKQuantity?\nThe total active energy burned during the workout.\nDeprecated\nvar totalFlightsClimbed: HKQuantity?\nThe total number of flights of stairs climbed during the workout.\nDeprecated\nvar totalSwimmingStrokeCount: HKQuantity?\nThe total stroke count for the workout.\nDeprecated"
  },
  {
    "title": "workoutEvents | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkout/1615424-workoutevents",
    "html": "Discussion\n\nThis array specifies when the user has paused and resumed the workout activity. This method calculates the workout’s duration based on the amount of active time between the provided start and end dates. For more information on workout events, see HKWorkoutEvent.\n\nSee Also\nAccessing workout data\nvar duration: TimeInterval\nThe workout’s duration.\nvar workoutActivityType: HKWorkoutActivityType\nThe type of activity performed during the workout.\nvar workoutActivities: [HKWorkoutActivity]\nfunc statistics(for: HKQuantityType) -> HKStatistics?\nReturns the workout’s statistics for the provided quantity type.\nvar allStatistics: [HKQuantityType : HKStatistics]\nA dictionary that contains all the statistics for the workout.\nvar totalDistance: HKQuantity?\nThe total distance traveled during the workout.\nDeprecated\nvar totalEnergyBurned: HKQuantity?\nThe total active energy burned during the workout.\nDeprecated\nvar totalFlightsClimbed: HKQuantity?\nThe total number of flights of stairs climbed during the workout.\nDeprecated\nvar totalSwimmingStrokeCount: HKQuantity?\nThe total stroke count for the workout.\nDeprecated"
  },
  {
    "title": "flightsClimbed | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquantitytypeidentifier/1615458-flightsclimbed",
    "html": "Discussion\n\nThese samples use count units (described in HKUnit) and measure cumulative values (described in HKQuantityAggregationStyle).\n\nSee Also\nActivity\nstatic let stepCount: HKQuantityTypeIdentifier\nA quantity sample type that measures the number of steps the user has taken.\nstatic let distanceWalkingRunning: HKQuantityTypeIdentifier\nA quantity sample type that measures the distance the user has moved by walking or running.\nstatic let runningGroundContactTime: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of time the runner’s foot is in contact with the ground while running.\nstatic let runningPower: HKQuantityTypeIdentifier\nA quantity sample type that measures the rate of work required for the runner to maintain their speed.\nstatic let runningSpeed: HKQuantityTypeIdentifier\nA quantity sample type that measures the runner’s speed.\nstatic let runningStrideLength: HKQuantityTypeIdentifier\nA quantity sample type that measures the distance covered by a single step while running.\nstatic let runningVerticalOscillation: HKQuantityTypeIdentifier\nA quantity sample type measuring pelvis vertical range of motion during a single running stride.\nstatic let distanceCycling: HKQuantityTypeIdentifier\nA quantity sample type that measures the distance the user has moved by cycling.\nstatic let pushCount: HKQuantityTypeIdentifier\nA quantity sample type that measures the number of pushes that the user has performed while using a wheelchair.\nstatic let distanceWheelchair: HKQuantityTypeIdentifier\nA quantity sample type that measures the distance the user has moved using a wheelchair.\nstatic let swimmingStrokeCount: HKQuantityTypeIdentifier\nA quantity sample type that measures the number of strokes performed while swimming.\nstatic let distanceSwimming: HKQuantityTypeIdentifier\nA quantity sample type that measures the distance the user has moved while swimming.\nstatic let distanceDownhillSnowSports: HKQuantityTypeIdentifier\nA quantity sample type that measures the distance the user has traveled while skiing or snowboarding.\nstatic let basalEnergyBurned: HKQuantityTypeIdentifier\nA quantity sample type that measures the resting energy burned by the user.\nstatic let activeEnergyBurned: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of active energy the user has burned.\nstatic let nikeFuel: HKQuantityTypeIdentifier\nA quantity sample type that measures the number of NikeFuel points the user has earned.\nstatic let appleExerciseTime: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of time the user spent exercising.\nstatic let appleMoveTime: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of time the user has spent performing activities that involve full-body movements during the specified day.\nstatic let appleStandTime: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of time the user has spent standing.\nstatic let vo2Max: HKQuantityTypeIdentifier\nA quantity sample that measures the maximal oxygen consumption during exercise.\nRelated Documentation\nstruct HKQuantityTypeIdentifier\nThe identifiers that create quantity type objects.\nclass HKQuantitySample\nA sample that represents a quantity, including the value and the units.\nclass HKQuantity\nAn object that stores a value for a given unit."
  },
  {
    "title": "basalBodyTemperature | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquantitytypeidentifier/1615763-basalbodytemperature",
    "html": "Discussion\n\nBasal body temperature measures the body’s temperature when at rest (for example, taking the temperature immediately after waking). These samples use temperature units (described in HKUnit) and measure discrete values (described in HKQuantityAggregationStyle).\n\nSee Also\nRelated Documentation\nenum HKCategoryValue\nCategories that are undefined.\nstruct HKCategoryTypeIdentifier\nIdentifiers for creating category types.\nclass HKCategoryType\nA type that identifies samples that contain a value from a small set of possible values.\nclass HKCategorySample\nA sample with values from a short list of possible values."
  },
  {
    "title": "appleStandTime | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquantitytypeidentifier/3174858-applestandtime",
    "html": "Discussion\n\nThese samples use time units (described in HKUnit) and measure cumulative values (described in HKQuantityAggregationStyle).\n\nSee Also\nActivity\nstatic let stepCount: HKQuantityTypeIdentifier\nA quantity sample type that measures the number of steps the user has taken.\nstatic let distanceWalkingRunning: HKQuantityTypeIdentifier\nA quantity sample type that measures the distance the user has moved by walking or running.\nstatic let runningGroundContactTime: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of time the runner’s foot is in contact with the ground while running.\nstatic let runningPower: HKQuantityTypeIdentifier\nA quantity sample type that measures the rate of work required for the runner to maintain their speed.\nstatic let runningSpeed: HKQuantityTypeIdentifier\nA quantity sample type that measures the runner’s speed.\nstatic let runningStrideLength: HKQuantityTypeIdentifier\nA quantity sample type that measures the distance covered by a single step while running.\nstatic let runningVerticalOscillation: HKQuantityTypeIdentifier\nA quantity sample type measuring pelvis vertical range of motion during a single running stride.\nstatic let distanceCycling: HKQuantityTypeIdentifier\nA quantity sample type that measures the distance the user has moved by cycling.\nstatic let pushCount: HKQuantityTypeIdentifier\nA quantity sample type that measures the number of pushes that the user has performed while using a wheelchair.\nstatic let distanceWheelchair: HKQuantityTypeIdentifier\nA quantity sample type that measures the distance the user has moved using a wheelchair.\nstatic let swimmingStrokeCount: HKQuantityTypeIdentifier\nA quantity sample type that measures the number of strokes performed while swimming.\nstatic let distanceSwimming: HKQuantityTypeIdentifier\nA quantity sample type that measures the distance the user has moved while swimming.\nstatic let distanceDownhillSnowSports: HKQuantityTypeIdentifier\nA quantity sample type that measures the distance the user has traveled while skiing or snowboarding.\nstatic let basalEnergyBurned: HKQuantityTypeIdentifier\nA quantity sample type that measures the resting energy burned by the user.\nstatic let activeEnergyBurned: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of active energy the user has burned.\nstatic let flightsClimbed: HKQuantityTypeIdentifier\nA quantity sample type that measures the number flights of stairs that the user has climbed.\nstatic let nikeFuel: HKQuantityTypeIdentifier\nA quantity sample type that measures the number of NikeFuel points the user has earned.\nstatic let appleExerciseTime: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of time the user spent exercising.\nstatic let appleMoveTime: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of time the user has spent performing activities that involve full-body movements during the specified day.\nstatic let vo2Max: HKQuantityTypeIdentifier\nA quantity sample that measures the maximal oxygen consumption during exercise.\nRelated Documentation\nstruct HKQuantityTypeIdentifier\nThe identifiers that create quantity type objects.\nclass HKQuantitySample\nA sample that represents a quantity, including the value and the units.\nclass HKQuantity\nAn object that stores a value for a given unit."
  },
  {
    "title": "basalEnergyBurned | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquantitytypeidentifier/1615512-basalenergyburned",
    "html": "Discussion\n\nResting energy is the energy that the user’s body burns to maintain its normal, resting state. The body uses this energy to perform basic functions like breathing, circulating blood, and managing the growth and maintenance of cells. These samples use energy units (described in HKUnit) and measure cumulative values (described in HKQuantityAggregationStyle).\n\nSee Also\nActivity\nstatic let stepCount: HKQuantityTypeIdentifier\nA quantity sample type that measures the number of steps the user has taken.\nstatic let distanceWalkingRunning: HKQuantityTypeIdentifier\nA quantity sample type that measures the distance the user has moved by walking or running.\nstatic let runningGroundContactTime: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of time the runner’s foot is in contact with the ground while running.\nstatic let runningPower: HKQuantityTypeIdentifier\nA quantity sample type that measures the rate of work required for the runner to maintain their speed.\nstatic let runningSpeed: HKQuantityTypeIdentifier\nA quantity sample type that measures the runner’s speed.\nstatic let runningStrideLength: HKQuantityTypeIdentifier\nA quantity sample type that measures the distance covered by a single step while running.\nstatic let runningVerticalOscillation: HKQuantityTypeIdentifier\nA quantity sample type measuring pelvis vertical range of motion during a single running stride.\nstatic let distanceCycling: HKQuantityTypeIdentifier\nA quantity sample type that measures the distance the user has moved by cycling.\nstatic let pushCount: HKQuantityTypeIdentifier\nA quantity sample type that measures the number of pushes that the user has performed while using a wheelchair.\nstatic let distanceWheelchair: HKQuantityTypeIdentifier\nA quantity sample type that measures the distance the user has moved using a wheelchair.\nstatic let swimmingStrokeCount: HKQuantityTypeIdentifier\nA quantity sample type that measures the number of strokes performed while swimming.\nstatic let distanceSwimming: HKQuantityTypeIdentifier\nA quantity sample type that measures the distance the user has moved while swimming.\nstatic let distanceDownhillSnowSports: HKQuantityTypeIdentifier\nA quantity sample type that measures the distance the user has traveled while skiing or snowboarding.\nstatic let activeEnergyBurned: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of active energy the user has burned.\nstatic let flightsClimbed: HKQuantityTypeIdentifier\nA quantity sample type that measures the number flights of stairs that the user has climbed.\nstatic let nikeFuel: HKQuantityTypeIdentifier\nA quantity sample type that measures the number of NikeFuel points the user has earned.\nstatic let appleExerciseTime: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of time the user spent exercising.\nstatic let appleMoveTime: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of time the user has spent performing activities that involve full-body movements during the specified day.\nstatic let appleStandTime: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of time the user has spent standing.\nstatic let vo2Max: HKQuantityTypeIdentifier\nA quantity sample that measures the maximal oxygen consumption during exercise.\nRelated Documentation\nstruct HKQuantityTypeIdentifier\nThe identifiers that create quantity type objects.\nclass HKQuantitySample\nA sample that represents a quantity, including the value and the units.\nclass HKQuantity\nAn object that stores a value for a given unit."
  },
  {
    "title": "peakExpiratoryFlowRate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquantitytypeidentifier/1615779-peakexpiratoryflowrate",
    "html": "Discussion\n\nThese samples use volume/time units (described in HKUnit) and measure discrete values (described in HKQuantityAggregationStyle).\n\nSee Also\nLab and test results\nstatic let bloodGlucose: HKQuantityTypeIdentifier\nA quantity sample type that measures the user’s blood glucose level.\nstatic let electrodermalActivity: HKQuantityTypeIdentifier\nA quantity sample type that measures electrodermal activity.\nstatic let forcedExpiratoryVolume1: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of air that can be forcibly exhaled from the lungs during the first second of a forced exhalation.\nstatic let forcedVitalCapacity: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of air that can be forcibly exhaled from the lungs after taking the deepest breath possible.\nstatic let inhalerUsage: HKQuantityTypeIdentifier\nA quantity sample type that measures the number of puffs the user takes from their inhaler.\nstatic let insulinDelivery: HKQuantityTypeIdentifier\nA quantity sample that measures the amount of insulin delivered.\nstatic let numberOfTimesFallen: HKQuantityTypeIdentifier\nA quantity sample type that measures the number of times the user fell.\nstatic let peripheralPerfusionIndex: HKQuantityTypeIdentifier\nA quantity sample type that measures the user’s peripheral perfusion index."
  },
  {
    "title": "HKWorkoutRouteTypeIdentifier | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkoutroutetypeidentifier",
    "html": "See Also\nRoute data\nCreating a workout route\nRecord the user’s route during a workout.\nReading route data\nAccess the user’s route for a workout.\nclass HKWorkoutRouteBuilder\nA builder object that incrementally constructs a workout route.\nclass HKWorkoutRoute\nA sample that contains a workout’s route data.\nstruct HKWorkoutRouteQueryDescriptor\nA query interface that reads the location data stored in a workout route using Swift concurrency.\nclass HKWorkoutRouteQuery\nA query to access the location data stored in a workout route.\nclass HKSeriesBuilder\nAn abstract base class for building series samples.\nclass HKSeriesSample\nAn abstract base class that defines samples that contain a series of items."
  },
  {
    "title": "insulinDelivery | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquantitytypeidentifier/2867753-insulindelivery",
    "html": "Discussion\n\nThese samples use international units (IU) (described in HKUnit) and measure cumulative values (described in HKQuantityAggregationStyle).\n\nTopics\nMetadata Keys\nlet HKMetadataKeyInsulinDeliveryReason: String\nThe medical reason for administering insulin.\nSee Also\nLab and test results\nstatic let bloodGlucose: HKQuantityTypeIdentifier\nA quantity sample type that measures the user’s blood glucose level.\nstatic let electrodermalActivity: HKQuantityTypeIdentifier\nA quantity sample type that measures electrodermal activity.\nstatic let forcedExpiratoryVolume1: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of air that can be forcibly exhaled from the lungs during the first second of a forced exhalation.\nstatic let forcedVitalCapacity: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of air that can be forcibly exhaled from the lungs after taking the deepest breath possible.\nstatic let inhalerUsage: HKQuantityTypeIdentifier\nA quantity sample type that measures the number of puffs the user takes from their inhaler.\nstatic let numberOfTimesFallen: HKQuantityTypeIdentifier\nA quantity sample type that measures the number of times the user fell.\nstatic let peakExpiratoryFlowRate: HKQuantityTypeIdentifier\nA quantity sample type that measures the user’s maximum flow rate generated during a forceful exhalation.\nstatic let peripheralPerfusionIndex: HKQuantityTypeIdentifier\nA quantity sample type that measures the user’s peripheral perfusion index.\nRelated Documentation\nstruct HKQuantityTypeIdentifier\nThe identifiers that create quantity type objects.\nclass HKQuantitySample\nA sample that represents a quantity, including the value and the units.\nclass HKQuantity\nAn object that stores a value for a given unit."
  },
  {
    "title": "forcedExpiratoryVolume1 | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquantitytypeidentifier/1615661-forcedexpiratoryvolume1",
    "html": "Discussion\n\nThese samples use volume units (described in HKUnit) and measure discrete values (described in HKQuantityAggregationStyle).\n\nSee Also\nLab and test results\nstatic let bloodGlucose: HKQuantityTypeIdentifier\nA quantity sample type that measures the user’s blood glucose level.\nstatic let electrodermalActivity: HKQuantityTypeIdentifier\nA quantity sample type that measures electrodermal activity.\nstatic let forcedVitalCapacity: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of air that can be forcibly exhaled from the lungs after taking the deepest breath possible.\nstatic let inhalerUsage: HKQuantityTypeIdentifier\nA quantity sample type that measures the number of puffs the user takes from their inhaler.\nstatic let insulinDelivery: HKQuantityTypeIdentifier\nA quantity sample that measures the amount of insulin delivered.\nstatic let numberOfTimesFallen: HKQuantityTypeIdentifier\nA quantity sample type that measures the number of times the user fell.\nstatic let peakExpiratoryFlowRate: HKQuantityTypeIdentifier\nA quantity sample type that measures the user’s maximum flow rate generated during a forceful exhalation.\nstatic let peripheralPerfusionIndex: HKQuantityTypeIdentifier\nA quantity sample type that measures the user’s peripheral perfusion index."
  },
  {
    "title": "inhalerUsage | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquantitytypeidentifier/1615602-inhalerusage",
    "html": "Discussion\n\nThese samples use count units (described in HKUnit) and measure cumulative values (described in HKQuantityAggregationStyle).\n\nSee Also\nLab and test results\nstatic let bloodGlucose: HKQuantityTypeIdentifier\nA quantity sample type that measures the user’s blood glucose level.\nstatic let electrodermalActivity: HKQuantityTypeIdentifier\nA quantity sample type that measures electrodermal activity.\nstatic let forcedExpiratoryVolume1: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of air that can be forcibly exhaled from the lungs during the first second of a forced exhalation.\nstatic let forcedVitalCapacity: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of air that can be forcibly exhaled from the lungs after taking the deepest breath possible.\nstatic let insulinDelivery: HKQuantityTypeIdentifier\nA quantity sample that measures the amount of insulin delivered.\nstatic let numberOfTimesFallen: HKQuantityTypeIdentifier\nA quantity sample type that measures the number of times the user fell.\nstatic let peakExpiratoryFlowRate: HKQuantityTypeIdentifier\nA quantity sample type that measures the user’s maximum flow rate generated during a forceful exhalation.\nstatic let peripheralPerfusionIndex: HKQuantityTypeIdentifier\nA quantity sample type that measures the user’s peripheral perfusion index."
  },
  {
    "title": "electrodermalActivity | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquantitytypeidentifier/1615574-electrodermalactivity",
    "html": "Discussion\n\nElectrodermal activity measures the conductance of the user’s skin. This conductance increases as the activity of the sweat glands increases. These samples use conductance units (described in HKUnit) and measure discrete values (described in HKQuantityAggregationStyle).\n\nSee Also\nLab and test results\nstatic let bloodGlucose: HKQuantityTypeIdentifier\nA quantity sample type that measures the user’s blood glucose level.\nstatic let forcedExpiratoryVolume1: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of air that can be forcibly exhaled from the lungs during the first second of a forced exhalation.\nstatic let forcedVitalCapacity: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of air that can be forcibly exhaled from the lungs after taking the deepest breath possible.\nstatic let inhalerUsage: HKQuantityTypeIdentifier\nA quantity sample type that measures the number of puffs the user takes from their inhaler.\nstatic let insulinDelivery: HKQuantityTypeIdentifier\nA quantity sample that measures the amount of insulin delivered.\nstatic let numberOfTimesFallen: HKQuantityTypeIdentifier\nA quantity sample type that measures the number of times the user fell.\nstatic let peakExpiratoryFlowRate: HKQuantityTypeIdentifier\nA quantity sample type that measures the user’s maximum flow rate generated during a forceful exhalation.\nstatic let peripheralPerfusionIndex: HKQuantityTypeIdentifier\nA quantity sample type that measures the user’s peripheral perfusion index."
  },
  {
    "title": "sixMinuteWalkTestDistance | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquantitytypeidentifier/3552083-sixminutewalktestdistance",
    "html": "Discussion\n\nThe standard six-minute walk test measures the maximum number of meters a user can walk on an unobstructed, flat course.\n\nOn Apple Watch Series 3 or later, the system automatically records a weekly sixMinuteWalkTestDistance sample. You can also create and save your own sixMinuteWalkTestDistance samples—for example, when creating an app that records the results of tests performed in a clinic.\n\nsixMinuteWalkTestDistance samples use length units (described in HKUnit) and measure discrete values (described in HKQuantityAggregationStyle). For example, the following code creates a unit in meters.\n\nlet meters = HKUnit.meter()\n\n\nUnderstand Estimated Test Results\n\nEach week, the system calculates the approximate result a user might receive from a six-minute walk test administered at a clinic. The system estimates the result using passively observed motion and workout data. The maximum estimated distance is 500m.\n\nTo record an estimate, the user must wear the watch at least 8 hours a day, 3 days a week. Additionally, the user must meet the 8-hour threshold at least 10 times over the previous 4 weeks.\n\nApple Watch produces the best results when the user’s expected six-minute walk distance is less than 500m, and the user wears a calibrated Apple Watch while performing a representative range of physical activities each day. For more information about calibrating Apple Watch, see Calibrating your Apple Watch for improved Workout and Activity accuracy.\n\nIf the watch isn’t calibrated, users can improve the accuracy of their results by carrying their iPhone on their hip or in their front pants pocket. The system uses the walkingSpeed samples automatically recorded by the phone to help calibrate the six-minute walk algorithm. The system may also use GPS from both iPhone and Apple Watch to improve the calibration.\n\nSamples indicate whether the device was sufficiently calibrated to support an accurate estimate using the HKMetadataKeyAppleDeviceCalibrated metadata key.\n\nTopics\nEnabling Recalibration\ncom.apple.developer.healthkit.recalibrate-estimates\nA Boolean value that determines whether your app can recalibrate the prediction algorithm used to calculate supported sample types.\nAccessing Estimate Dates\nlet HKMetadataKeyDateOfEarliestDataUsedForEstimate: String\nThe earliest date of data used to calculate the sample’s estimated value.\nSee Also\nMobility\nstatic let appleWalkingSteadiness: HKQuantityTypeIdentifier\nA quantity sample type that measures the steadiness of the user’s gait.\nstatic let walkingSpeed: HKQuantityTypeIdentifier\nA quantity sample type that measures the user’s average speed when walking steadily over flat ground.\nstatic let walkingStepLength: HKQuantityTypeIdentifier\nA quantity sample type that measures the average length of the user’s step when walking steadily over flat ground.\nstatic let walkingAsymmetryPercentage: HKQuantityTypeIdentifier\nA quantity sample type that measures the percentage of steps in which one foot moves at a different speed than the other when walking on flat ground.\nstatic let walkingDoubleSupportPercentage: HKQuantityTypeIdentifier\nA quantity sample type that measures the percentage of time when both of the user’s feet touch the ground while walking steadily over flat ground.\nstatic let stairAscentSpeed: HKQuantityTypeIdentifier\nA quantity sample type measuring the user’s speed while climbing a flight of stairs.\nstatic let stairDescentSpeed: HKQuantityTypeIdentifier\nA quantity sample type measuring the user’s speed while descending a flight of stairs."
  },
  {
    "title": "Nutrition Type Identifiers | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/data_types/nutrition_type_identifiers",
    "html": "Overview\n\nNutritional data can be broadly categorized into two main groups:\n\nMacronutrients consumed in large quantities, such as fats, carbohydrates, and proteins.\n\nMicronutrients consumed in smaller quantities, such as vitamins and minerals.\n\nHealthKit also provides type identifiers for nutrition-related items that users may want to track, like water or caffeine.\n\nYou do not need to track all nutritional information; you can focus on the items of interest to your users. In general, the data from nutrition labels is a good place to start. Many countries and regions require a nutrition label on packaged food. While the contents of these labels vary from one country or region to another, they typically include the nutritional data represented by these properties:\n\ndietaryEnergyConsumed\n\ndietaryFatTotal\n\ndietaryFatSaturated\n\ndietaryCholesterol\n\ndietaryCarbohydrates\n\ndietaryFiber\n\ndietarySugar\n\ndietaryProtein\n\ndietaryCalcium\n\ndietaryIron\n\ndietaryPotassium\n\ndietarySodium\n\ndietaryVitaminA\n\ndietaryVitaminC\n\ndietaryVitaminD\n\nCombine Nutritional Samples\n\nMacronutrient identifiers can be thought of as a hierarchy. The dietaryEnergyConsumed identifier represents the total amount of energy from all fats, carbohydrates, and protein. You can provide a detailed breakdown using the dietaryFatTotal, dietaryCarbohydrates, and dietaryProtein identifiers. Fats can be further separated into dietaryFatMonounsaturated, dietaryFatPolyunsaturated, and dietaryFatSaturated. Carbohydrates can be identified as dietaryFiber and dietarySugar.\n\nUnless your app is very focused (for example, tracking only sugar or saturated fat), always provide the total data (dietaryFatTotal or dietaryCarbohydrates), and then optionally provide the more detailed information using the subcategories. You do not need to provide data for all of the subcategories; however, the sum of the subcategory sample values should be equal or less than the total sample’s value.\n\nNote\n\nThe dietaryEnergyConsumed samples are handled differently than the other macronutrients. While it can be seen as a total value, dietaryEnergyConsumed is measured in calories or kilojoules, while the individual macronutrient samples are measured by mass.\n\nTopics\nEssentials\nstatic let food: HKCorrelationTypeIdentifier\nFood correlation types combine any number of nutritional samples into a single food object.\nlet HKMetadataKeyFoodType: String\nThe type of food that the HealthKit object represents.\nMacronutrients\nstatic let dietaryEnergyConsumed: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of energy consumed.\nstatic let dietaryCarbohydrates: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of carbohydrates consumed.\nstatic let dietaryFiber: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of fiber consumed.\nstatic let dietarySugar: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of sugar consumed.\nstatic let dietaryFatTotal: HKQuantityTypeIdentifier\nA quantity sample type that measures the total amount of fat consumed.\nstatic let dietaryFatMonounsaturated: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of monounsaturated fat consumed.\nstatic let dietaryFatPolyunsaturated: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of polyunsaturated fat consumed.\nstatic let dietaryFatSaturated: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of saturated fat consumed.\nstatic let dietaryCholesterol: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of cholesterol consumed.\nstatic let dietaryProtein: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of protein consumed.\nVitamins\nstatic let dietaryVitaminA: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of vitamin A consumed.\nstatic let dietaryThiamin: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of thiamin (vitamin B1) consumed.\nstatic let dietaryRiboflavin: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of riboflavin (vitamin B2) consumed.\nstatic let dietaryNiacin: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of niacin (vitamin B3) consumed.\nstatic let dietaryPantothenicAcid: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of pantothenic acid (vitamin B5) consumed.\nstatic let dietaryVitaminB6: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of pyridoxine (vitamin B6) consumed.\nstatic let dietaryBiotin: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of biotin (vitamin B7) consumed.\nstatic let dietaryVitaminB12: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of cyanocobalamin (vitamin B12) consumed.\nstatic let dietaryVitaminC: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of vitamin C consumed.\nstatic let dietaryVitaminD: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of vitamin D consumed.\nstatic let dietaryVitaminE: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of vitamin E consumed.\nstatic let dietaryVitaminK: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of vitamin K consumed.\nstatic let dietaryFolate: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of folate (folic acid) consumed.\nMinerals\nstatic let dietaryCalcium: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of calcium consumed.\nstatic let dietaryChloride: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of chloride consumed.\nstatic let dietaryIron: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of iron consumed.\nstatic let dietaryMagnesium: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of magnesium consumed.\nstatic let dietaryPhosphorus: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of phosphorus consumed.\nstatic let dietaryPotassium: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of potassium consumed.\nstatic let dietarySodium: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of sodium consumed.\nstatic let dietaryZinc: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of zinc consumed.\nHydration\nstatic let dietaryWater: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of water consumed.\nCaffeination\nstatic let dietaryCaffeine: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of caffeine consumed.\nUltratrace Minerals\nstatic let dietaryChromium: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of chromium consumed.\nstatic let dietaryCopper: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of copper consumed.\nstatic let dietaryIodine: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of iodine consumed.\nstatic let dietaryManganese: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of manganese consumed.\nstatic let dietaryMolybdenum: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of molybdenum consumed.\nstatic let dietarySelenium: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of selenium consumed."
  },
  {
    "title": "appleWalkingSteadinessEvent | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkcategorytypeidentifier/3747012-applewalkingsteadinessevent",
    "html": "Discussion\n\nSamples of this type use values from the HKCategoryValueAppleWalkingSteadinessEvent enumeration.\n\nWalking Steadiness events are read-only. You can request permission to read the samples using this identifier, but you can’t request authorization to share them. This means you can’t save new Walking Steadiness events to the HealthKit store. To add test data in iOS Simulator, open the Health app and select Browse > Mobility > Walking Steadiness Notifications > Add Data."
  },
  {
    "title": "bloodAlcoholContent | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquantitytypeidentifier/1615081-bloodalcoholcontent",
    "html": "Discussion\n\nThese samples use percent units (described in HKUnit) and measure discrete values (described in HKQuantityAggregationStyle).\n\nSee Also\nAlcohol consumption\nstatic let numberOfAlcoholicBeverages: HKQuantityTypeIdentifier\nA quantity sample type that measures the number of standard alcoholic drinks that the user has consumed."
  },
  {
    "title": "appleWalkingSteadiness | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquantitytypeidentifier/3747016-applewalkingsteadiness",
    "html": "Discussion\n\nSamples that match the Walking Steadiness identifier use percentage units (described in HKUnit) and measure discrete values (described in HKQuantityAggregationStyle). For example, the following code creates a percentage unit.\n\nlet percentage = HKUnit.percent()\n\n\nThe value can be between 0.0 and 1.0.\n\nThe system automatically records Walking Steadiness samples on iPhone 8 or later. The user must carry their phone near their waist—such as in a pocket—and walk steadily on flat ground. To ensure accuracy, the user must set their height value in the Health app. The system creates a Walking Steadiness sample every 7 days—though the interval can be longer if it doesn’t have enough mobility data to calculate accurate results. iPhone doesn’t record Walking Steadiness samples if the user’s wheelchair status is on.\n\nWalking Steadiness samples are read-only. You can request permission to read the samples using this identifier, but you can’t request authorization to share them. This means you can’t save new Walking Steadiness samples to the HealthKit store. To add test data in iOS Simulator, open the Health app and select Browse > Mobility > Walking Steadiness > Add Data.\n\nSee Also\nMobility\nstatic let sixMinuteWalkTestDistance: HKQuantityTypeIdentifier\nA quantity sample type that stores the distance a user can walk during a six-minute walk test.\nstatic let walkingSpeed: HKQuantityTypeIdentifier\nA quantity sample type that measures the user’s average speed when walking steadily over flat ground.\nstatic let walkingStepLength: HKQuantityTypeIdentifier\nA quantity sample type that measures the average length of the user’s step when walking steadily over flat ground.\nstatic let walkingAsymmetryPercentage: HKQuantityTypeIdentifier\nA quantity sample type that measures the percentage of steps in which one foot moves at a different speed than the other when walking on flat ground.\nstatic let walkingDoubleSupportPercentage: HKQuantityTypeIdentifier\nA quantity sample type that measures the percentage of time when both of the user’s feet touch the ground while walking steadily over flat ground.\nstatic let stairAscentSpeed: HKQuantityTypeIdentifier\nA quantity sample type measuring the user’s speed while climbing a flight of stairs.\nstatic let stairDescentSpeed: HKQuantityTypeIdentifier\nA quantity sample type measuring the user’s speed while descending a flight of stairs."
  },
  {
    "title": "numberOfAlcoholicBeverages | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquantitytypeidentifier/3747017-numberofalcoholicbeverages",
    "html": "Discussion\n\nSamples matching the numberOfAlcoholicBeverages identifier measure the number of standard alcoholic drinks consumed by the user. A standard drink is one beer, glass of wine, or mixed drink made with spirits. The samples use count units (described in HKUnit) to measure cumulative values (described in HKQuantityAggregationStyle).\n\nThe following code listing saves a single standard drink to the HealthKit store.\n\n// Create the alcoholic beverage sample type.\nlet alcoholConsumptionType = HKQuantityType(.numberOfAlcoholicBeverages)\n\n\n// Create a quantity for the number of standard beverages consumed.\nlet beverageCount = HKQuantity(unit:HKUnit.count(), doubleValue:1.0)\n\n\n// Get the current date.\nlet date = Date()\n\n\n// Create the alcoholic beverage consumption sample.\nlet beverageSample = HKQuantitySample(type: alcoholConsumptionType,\n                                      quantity: beverageCount,\n                                      start: date,\n                                      end: date)\n\n\n// Save the sample to the HealthKit store.\nstore.save(beverageSample) { (success, error) in\n    \n    if success {\n        // The system successfully saved the sample.\n        \n    } else {\n        if let error = error {\n            // Handle the error here.\n        }\n    }\n}\n\n\nSee Also\nAlcohol consumption\nstatic let bloodAlcoholContent: HKQuantityTypeIdentifier\nA quantity sample type that measures the user’s blood alcohol content."
  },
  {
    "title": "bloodPressureDiastolic | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquantitytypeidentifier/1615233-bloodpressurediastolic",
    "html": "Discussion\n\nWhen recording blood pressure, combine systolic and diastolic samples into a single correlation object (described in bloodPressure). These samples use pressure units (described in HKUnit) and measure discrete values (described in HKQuantityAggregationStyle).\n\nSee Also\nVital signs\nstatic let heartRate: HKQuantityTypeIdentifier\nA quantity sample type that measures the user’s heart rate.\nstatic let restingHeartRate: HKQuantityTypeIdentifier\nA quantity sample type that measures the user’s resting heart rate.\nstatic let walkingHeartRateAverage: HKQuantityTypeIdentifier\nA quantity sample type that measures the user’s heart rate while walking.\nstatic let heartRateVariabilitySDNN: HKQuantityTypeIdentifier\nA quantity sample type that measures the standard deviation of heartbeat intervals.\nstatic let heartRateRecoveryOneMinute: HKQuantityTypeIdentifier\nA quantity sample that records the reduction in heart rate from the peak exercise rate to the rate one minute after exercising ended.\nstatic let atrialFibrillationBurden: HKQuantityTypeIdentifier\nA quantity type that measures an estimate of the percentage of time a person’s heart shows signs of atrial fibrillation (AFib) while wearing Apple Watch.\nstatic let oxygenSaturation: HKQuantityTypeIdentifier\nA quantity sample type that measures the user’s oxygen saturation.\nstatic let bodyTemperature: HKQuantityTypeIdentifier\nA quantity sample type that measures the user’s body temperature.\nstatic let bloodPressureSystolic: HKQuantityTypeIdentifier\nA quantity sample type that measures the user’s systolic blood pressure.\nstatic let respiratoryRate: HKQuantityTypeIdentifier\nA quantity sample type that measures the user’s respiratory rate.\nRelated Documentation\nstruct HKQuantityTypeIdentifier\nThe identifiers that create quantity type objects.\nclass HKQuantitySample\nA sample that represents a quantity, including the value and the units.\nclass HKQuantity\nAn object that stores a value for a given unit."
  },
  {
    "title": "bloodPressureSystolic | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquantitytypeidentifier/1615552-bloodpressuresystolic",
    "html": "Discussion\n\nSystolic blood pressure measures the maximum blood pressure during each heart beat. When recording blood pressure, combine systolic and diastolic samples into a single correlation object (described in bloodPressure). These samples use pressure units (described in HKUnit) and measure discrete values (described in HKQuantityAggregationStyle).\n\nSee Also\nVital signs\nstatic let heartRate: HKQuantityTypeIdentifier\nA quantity sample type that measures the user’s heart rate.\nstatic let restingHeartRate: HKQuantityTypeIdentifier\nA quantity sample type that measures the user’s resting heart rate.\nstatic let walkingHeartRateAverage: HKQuantityTypeIdentifier\nA quantity sample type that measures the user’s heart rate while walking.\nstatic let heartRateVariabilitySDNN: HKQuantityTypeIdentifier\nA quantity sample type that measures the standard deviation of heartbeat intervals.\nstatic let heartRateRecoveryOneMinute: HKQuantityTypeIdentifier\nA quantity sample that records the reduction in heart rate from the peak exercise rate to the rate one minute after exercising ended.\nstatic let atrialFibrillationBurden: HKQuantityTypeIdentifier\nA quantity type that measures an estimate of the percentage of time a person’s heart shows signs of atrial fibrillation (AFib) while wearing Apple Watch.\nstatic let oxygenSaturation: HKQuantityTypeIdentifier\nA quantity sample type that measures the user’s oxygen saturation.\nstatic let bodyTemperature: HKQuantityTypeIdentifier\nA quantity sample type that measures the user’s body temperature.\nstatic let bloodPressureDiastolic: HKQuantityTypeIdentifier\nA quantity sample type that measures the user’s diastolic blood pressure.\nstatic let respiratoryRate: HKQuantityTypeIdentifier\nA quantity sample type that measures the user’s respiratory rate.\nRelated Documentation\nstruct HKQuantityTypeIdentifier\nThe identifiers that create quantity type objects.\nclass HKQuantitySample\nA sample that represents a quantity, including the value and the units.\nclass HKQuantity\nAn object that stores a value for a given unit."
  },
  {
    "title": "restingHeartRate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquantitytypeidentifier/2867756-restingheartrate",
    "html": "Discussion\n\nThese samples use count/time units (described in HKUnit) and measure discrete values (described in HKQuantityAggregationStyle).\n\nResting heart rate is commonly correlated with overall cardiovascular health. It is an estimation of the user’s lowest heart rate during periods of rest, and is intended to be used as a medically relevant metric. A resting heart rate sample is different than a sedentary heart rate sample (that is, a sample using the heartRate identifier with a HKHeartRateMotionContext.sedentary motion context). For example, if the user finishes a high-intensity workout, and then sits down to rest, the next heart rate sample may be marked as a sedentary sample, but it is still much higher than the user’s actual resting heart rate. To produce more accurate results, the system estimates the resting heart rate by analyzing sedentary heart rate samples throughout the day.\n\nBecause the resting heart rate estimates become more accurate as the day progresses, the system may delete earlier samples and replace them with better estimates. Apple Watch replaces only the samples written by the watch for the current or previous day.\n\nSee Also\nVital signs\nstatic let heartRate: HKQuantityTypeIdentifier\nA quantity sample type that measures the user’s heart rate.\nstatic let walkingHeartRateAverage: HKQuantityTypeIdentifier\nA quantity sample type that measures the user’s heart rate while walking.\nstatic let heartRateVariabilitySDNN: HKQuantityTypeIdentifier\nA quantity sample type that measures the standard deviation of heartbeat intervals.\nstatic let heartRateRecoveryOneMinute: HKQuantityTypeIdentifier\nA quantity sample that records the reduction in heart rate from the peak exercise rate to the rate one minute after exercising ended.\nstatic let atrialFibrillationBurden: HKQuantityTypeIdentifier\nA quantity type that measures an estimate of the percentage of time a person’s heart shows signs of atrial fibrillation (AFib) while wearing Apple Watch.\nstatic let oxygenSaturation: HKQuantityTypeIdentifier\nA quantity sample type that measures the user’s oxygen saturation.\nstatic let bodyTemperature: HKQuantityTypeIdentifier\nA quantity sample type that measures the user’s body temperature.\nstatic let bloodPressureDiastolic: HKQuantityTypeIdentifier\nA quantity sample type that measures the user’s diastolic blood pressure.\nstatic let bloodPressureSystolic: HKQuantityTypeIdentifier\nA quantity sample type that measures the user’s systolic blood pressure.\nstatic let respiratoryRate: HKQuantityTypeIdentifier\nA quantity sample type that measures the user’s respiratory rate."
  },
  {
    "title": "heartRate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquantitytypeidentifier/1615138-heartrate",
    "html": "Discussion\n\nThese samples use count/time units (described in HKUnit) and measure discrete values (described in HKQuantityAggregationStyle).\n\nHeart rate samples may include motion context information, which is stored as metadata using the HKMetadataKeyHeartRateMotionContext key. The value of this key is an NSNumber object that contains a HKHeartRateMotionContext value.\n\nThe motion context gives additional information about the user’s activity level when the heart rate sample was taken. Apple Watch uses the following guidelines when setting the motion context:\n\nIf the user has been still for at least 5 minutes prior to the sample, the context is set to the HKHeartRateMotionContext.sedentary value.\n\nIf the user is in motion, the context is set to the HKHeartRateMotionContext.active value.\n\nYou can add motion context to the metadata of any heart rate samples that you create. This means other apps may also save heart rate samples with (or without) the HKMetadataKeyHeartRateMotionContext metadata key.\n\nNote that not all heart rate samples have a motion context. For example, if Apple Watch cannot determine the motion context, it creates samples without a HKMetadataKeyHeartRateMotionContext metadata key. In addition, heart rate samples recorded by an Apple Watch (1st generation) or by a device running watchOS 3 or earlier do not have the motion context metadata key. Treat these samples as if they used the HKHeartRateMotionContext.notSet motion context.\n\nTopics\nMetadata Keys\nlet HKMetadataKeyHeartRateSensorLocation: String\nThe location where a specific heart rate reading was taken.\nlet HKMetadataKeyHeartRateMotionContext: String\nThe user’s activity level when the heart rate sample was measured.\nSee Also\nVital signs\nstatic let restingHeartRate: HKQuantityTypeIdentifier\nA quantity sample type that measures the user’s resting heart rate.\nstatic let walkingHeartRateAverage: HKQuantityTypeIdentifier\nA quantity sample type that measures the user’s heart rate while walking.\nstatic let heartRateVariabilitySDNN: HKQuantityTypeIdentifier\nA quantity sample type that measures the standard deviation of heartbeat intervals.\nstatic let heartRateRecoveryOneMinute: HKQuantityTypeIdentifier\nA quantity sample that records the reduction in heart rate from the peak exercise rate to the rate one minute after exercising ended.\nstatic let atrialFibrillationBurden: HKQuantityTypeIdentifier\nA quantity type that measures an estimate of the percentage of time a person’s heart shows signs of atrial fibrillation (AFib) while wearing Apple Watch.\nstatic let oxygenSaturation: HKQuantityTypeIdentifier\nA quantity sample type that measures the user’s oxygen saturation.\nstatic let bodyTemperature: HKQuantityTypeIdentifier\nA quantity sample type that measures the user’s body temperature.\nstatic let bloodPressureDiastolic: HKQuantityTypeIdentifier\nA quantity sample type that measures the user’s diastolic blood pressure.\nstatic let bloodPressureSystolic: HKQuantityTypeIdentifier\nA quantity sample type that measures the user’s systolic blood pressure.\nstatic let respiratoryRate: HKQuantityTypeIdentifier\nA quantity sample type that measures the user’s respiratory rate.\nRelated Documentation\nstruct HKQuantityTypeIdentifier\nThe identifiers that create quantity type objects.\nclass HKQuantitySample\nA sample that represents a quantity, including the value and the units.\nclass HKQuantity\nAn object that stores a value for a given unit."
  },
  {
    "title": "audioExposureEvent | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkcategorytypeidentifier/3113773-audioexposureevent",
    "html": "Deprecated\n\nUse environmentalAudioExposureEvent instead.\n\nDiscussion\n\nThese samples use values from HKCategoryValueAudioExposureEvent.\n\nTopics\nMetadata Keys\nlet HKMetadataKeyAudioExposureLevel: String\nThe audio level associated with an audio event.\nSee Also\nHearing\nstatic let environmentalAudioExposureEvent: HKCategoryTypeIdentifier\nA category sample type that records exposure to potentially damaging sounds from the environment.\nenum HKCategoryValueEnvironmentalAudioExposureEvent\nExposure events for environmental audio.\nstatic let headphoneAudioExposureEvent: HKCategoryTypeIdentifier\nA category sample type that records exposure to potentially damaging sounds from headphones.\nenum HKCategoryValueHeadphoneAudioExposureEvent\nExposure events for headphone audio."
  },
  {
    "title": "pregnancy | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkcategorytypeidentifier/3552071-pregnancy",
    "html": "Discussion\n\nUse a HKCategoryValue.notApplicable value with samples of this type.\n\nSee Also\nReproductive Health\nstatic let menstrualFlow: HKCategoryTypeIdentifier\nA category sample type that records menstrual cycles.\nstatic let intermenstrualBleeding: HKCategoryTypeIdentifier\nA category sample type that records spotting outside the normal menstruation period.\nstatic let infrequentMenstrualCycles: HKCategoryTypeIdentifier\nA category sample that indicates an infrequent menstrual cycle.\nstatic let irregularMenstrualCycles: HKCategoryTypeIdentifier\nA category sample that indicates an irregular menstrual cycle.\nstatic let persistentIntermenstrualBleeding: HKCategoryTypeIdentifier\nA category sample that indicates persistent intermenstrual bleeding.\nstatic let prolongedMenstrualPeriods: HKCategoryTypeIdentifier\nA category sample that indicates a prolonged menstrual cycle.\nstatic let cervicalMucusQuality: HKCategoryTypeIdentifier\nA category sample type that records the quality of the user’s cervical mucus.\nstatic let ovulationTestResult: HKCategoryTypeIdentifier\nA category sample type that records the result of an ovulation home test.\nstatic let progesteroneTestResult: HKCategoryTypeIdentifier\nA category type that represents the results from a home progesterone test.\nstatic let sexualActivity: HKCategoryTypeIdentifier\nA category sample type that records sexual activity.\nstatic let contraceptive: HKCategoryTypeIdentifier\nA category sample type that records the use of contraceptives.\nstatic let pregnancyTestResult: HKCategoryTypeIdentifier\nA category type that represents the results from a home pregnancy test.\nstatic let lactation: HKCategoryTypeIdentifier\nA category type that records lactation."
  },
  {
    "title": "lactation | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkcategorytypeidentifier/3552063-lactation",
    "html": "Discussion\n\nUse a HKCategoryValue.notApplicable value with samples of this type.\n\nSee Also\nReproductive Health\nstatic let menstrualFlow: HKCategoryTypeIdentifier\nA category sample type that records menstrual cycles.\nstatic let intermenstrualBleeding: HKCategoryTypeIdentifier\nA category sample type that records spotting outside the normal menstruation period.\nstatic let infrequentMenstrualCycles: HKCategoryTypeIdentifier\nA category sample that indicates an infrequent menstrual cycle.\nstatic let irregularMenstrualCycles: HKCategoryTypeIdentifier\nA category sample that indicates an irregular menstrual cycle.\nstatic let persistentIntermenstrualBleeding: HKCategoryTypeIdentifier\nA category sample that indicates persistent intermenstrual bleeding.\nstatic let prolongedMenstrualPeriods: HKCategoryTypeIdentifier\nA category sample that indicates a prolonged menstrual cycle.\nstatic let cervicalMucusQuality: HKCategoryTypeIdentifier\nA category sample type that records the quality of the user’s cervical mucus.\nstatic let ovulationTestResult: HKCategoryTypeIdentifier\nA category sample type that records the result of an ovulation home test.\nstatic let progesteroneTestResult: HKCategoryTypeIdentifier\nA category type that represents the results from a home progesterone test.\nstatic let sexualActivity: HKCategoryTypeIdentifier\nA category sample type that records sexual activity.\nstatic let contraceptive: HKCategoryTypeIdentifier\nA category sample type that records the use of contraceptives.\nstatic let pregnancy: HKCategoryTypeIdentifier\nA category type that records pregnancy.\nstatic let pregnancyTestResult: HKCategoryTypeIdentifier\nA category type that represents the results from a home pregnancy test."
  },
  {
    "title": "environmentalAudioExposure | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquantitytypeidentifier/3081271-environmentalaudioexposure",
    "html": "Discussion\n\nThese samples use sound pressure units (described in HKUnit). You create these units using the decibelAWeightedSoundPressureLevel() method. They measure discrete values of the equivalent continuous sound pressure level, described in HKQuantityAggregationStyle.discreteEquivalentContinuousLevel.\n\nSee Also\nHearing\nstatic let headphoneAudioExposure: HKQuantityTypeIdentifier\nA quantity sample type that measures audio exposure from headphones."
  },
  {
    "title": "headphoneAudioExposure | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquantitytypeidentifier/3081272-headphoneaudioexposure",
    "html": "Discussion\n\nThese samples use sound pressure units (described in HKUnit). You create these units using the decibelAWeightedSoundPressureLevel() method. They measure discrete values of the equivalent continuous sound pressure level, described in HKQuantityAggregationStyle.discreteEquivalentContinuousLevel.\n\nSee Also\nHearing\nstatic let environmentalAudioExposure: HKQuantityTypeIdentifier\nA quantity sample type that measures audio exposure to sounds in the environment."
  },
  {
    "title": "pregnancyTestResult | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkcategorytypeidentifier/3747014-pregnancytestresult",
    "html": "Discussion\n\nHome pregnancy tests check for the presence of the human chorionic gonadotropin (hCG) hormone in a urine sample to determine if a person is pregnant.\n\nSamples of this type use values from the HKCategoryValuePregnancyTestResult enumeration.\n\nSee Also\nReproductive Health\nstatic let menstrualFlow: HKCategoryTypeIdentifier\nA category sample type that records menstrual cycles.\nstatic let intermenstrualBleeding: HKCategoryTypeIdentifier\nA category sample type that records spotting outside the normal menstruation period.\nstatic let infrequentMenstrualCycles: HKCategoryTypeIdentifier\nA category sample that indicates an infrequent menstrual cycle.\nstatic let irregularMenstrualCycles: HKCategoryTypeIdentifier\nA category sample that indicates an irregular menstrual cycle.\nstatic let persistentIntermenstrualBleeding: HKCategoryTypeIdentifier\nA category sample that indicates persistent intermenstrual bleeding.\nstatic let prolongedMenstrualPeriods: HKCategoryTypeIdentifier\nA category sample that indicates a prolonged menstrual cycle.\nstatic let cervicalMucusQuality: HKCategoryTypeIdentifier\nA category sample type that records the quality of the user’s cervical mucus.\nstatic let ovulationTestResult: HKCategoryTypeIdentifier\nA category sample type that records the result of an ovulation home test.\nstatic let progesteroneTestResult: HKCategoryTypeIdentifier\nA category type that represents the results from a home progesterone test.\nstatic let sexualActivity: HKCategoryTypeIdentifier\nA category sample type that records sexual activity.\nstatic let contraceptive: HKCategoryTypeIdentifier\nA category sample type that records the use of contraceptives.\nstatic let pregnancy: HKCategoryTypeIdentifier\nA category type that records pregnancy.\nstatic let lactation: HKCategoryTypeIdentifier\nA category type that records lactation."
  },
  {
    "title": "progesteroneTestResult | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkcategorytypeidentifier/3747015-progesteronetestresult",
    "html": "Discussion\n\nHome progesterone tests check for the presence of a progesterone hormone metabolite, known as pregnanediol-3-glucuronide (PDG), in a urine sample to confirm whether ovulation has occurred.\n\nSamples of this type use values from the HKCategoryValueProgesteroneTestResult enumeration.\n\nSee Also\nReproductive Health\nstatic let menstrualFlow: HKCategoryTypeIdentifier\nA category sample type that records menstrual cycles.\nstatic let intermenstrualBleeding: HKCategoryTypeIdentifier\nA category sample type that records spotting outside the normal menstruation period.\nstatic let infrequentMenstrualCycles: HKCategoryTypeIdentifier\nA category sample that indicates an infrequent menstrual cycle.\nstatic let irregularMenstrualCycles: HKCategoryTypeIdentifier\nA category sample that indicates an irregular menstrual cycle.\nstatic let persistentIntermenstrualBleeding: HKCategoryTypeIdentifier\nA category sample that indicates persistent intermenstrual bleeding.\nstatic let prolongedMenstrualPeriods: HKCategoryTypeIdentifier\nA category sample that indicates a prolonged menstrual cycle.\nstatic let cervicalMucusQuality: HKCategoryTypeIdentifier\nA category sample type that records the quality of the user’s cervical mucus.\nstatic let ovulationTestResult: HKCategoryTypeIdentifier\nA category sample type that records the result of an ovulation home test.\nstatic let sexualActivity: HKCategoryTypeIdentifier\nA category sample type that records sexual activity.\nstatic let contraceptive: HKCategoryTypeIdentifier\nA category sample type that records the use of contraceptives.\nstatic let pregnancy: HKCategoryTypeIdentifier\nA category type that records pregnancy.\nstatic let pregnancyTestResult: HKCategoryTypeIdentifier\nA category type that represents the results from a home pregnancy test.\nstatic let lactation: HKCategoryTypeIdentifier\nA category type that records lactation."
  },
  {
    "title": "sexualActivity | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkcategorytypeidentifier/1615769-sexualactivity",
    "html": "Discussion\n\nUse a HKCategoryValue.notApplicable value with these samples. These samples can include HKMetadataKeySexualActivityProtectionUsed metadata.\n\nTopics\nMetadata Keys\nlet HKMetadataKeySexualActivityProtectionUsed: String\nA key that indicates whether protection was used during sexual activity. This metadata key can be used with sexualActivity category samples.\nSee Also\nReproductive Health\nstatic let menstrualFlow: HKCategoryTypeIdentifier\nA category sample type that records menstrual cycles.\nstatic let intermenstrualBleeding: HKCategoryTypeIdentifier\nA category sample type that records spotting outside the normal menstruation period.\nstatic let infrequentMenstrualCycles: HKCategoryTypeIdentifier\nA category sample that indicates an infrequent menstrual cycle.\nstatic let irregularMenstrualCycles: HKCategoryTypeIdentifier\nA category sample that indicates an irregular menstrual cycle.\nstatic let persistentIntermenstrualBleeding: HKCategoryTypeIdentifier\nA category sample that indicates persistent intermenstrual bleeding.\nstatic let prolongedMenstrualPeriods: HKCategoryTypeIdentifier\nA category sample that indicates a prolonged menstrual cycle.\nstatic let cervicalMucusQuality: HKCategoryTypeIdentifier\nA category sample type that records the quality of the user’s cervical mucus.\nstatic let ovulationTestResult: HKCategoryTypeIdentifier\nA category sample type that records the result of an ovulation home test.\nstatic let progesteroneTestResult: HKCategoryTypeIdentifier\nA category type that represents the results from a home progesterone test.\nstatic let contraceptive: HKCategoryTypeIdentifier\nA category sample type that records the use of contraceptives.\nstatic let pregnancy: HKCategoryTypeIdentifier\nA category type that records pregnancy.\nstatic let pregnancyTestResult: HKCategoryTypeIdentifier\nA category type that represents the results from a home pregnancy test.\nstatic let lactation: HKCategoryTypeIdentifier\nA category type that records lactation.\nRelated Documentation\nenum HKCategoryValue\nCategories that are undefined.\nstruct HKCategoryTypeIdentifier\nIdentifiers for creating category types.\nclass HKCategoryType\nA type that identifies samples that contain a value from a small set of possible values.\nclass HKCategorySample\nA sample with values from a short list of possible values."
  },
  {
    "title": "cervicalMucusQuality | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkcategorytypeidentifier/1615429-cervicalmucusquality",
    "html": "Discussion\n\nThese samples use values from the HKCategoryValueCervicalMucusQuality enum.\n\nSee Also\nReproductive Health\nstatic let menstrualFlow: HKCategoryTypeIdentifier\nA category sample type that records menstrual cycles.\nstatic let intermenstrualBleeding: HKCategoryTypeIdentifier\nA category sample type that records spotting outside the normal menstruation period.\nstatic let infrequentMenstrualCycles: HKCategoryTypeIdentifier\nA category sample that indicates an infrequent menstrual cycle.\nstatic let irregularMenstrualCycles: HKCategoryTypeIdentifier\nA category sample that indicates an irregular menstrual cycle.\nstatic let persistentIntermenstrualBleeding: HKCategoryTypeIdentifier\nA category sample that indicates persistent intermenstrual bleeding.\nstatic let prolongedMenstrualPeriods: HKCategoryTypeIdentifier\nA category sample that indicates a prolonged menstrual cycle.\nstatic let ovulationTestResult: HKCategoryTypeIdentifier\nA category sample type that records the result of an ovulation home test.\nstatic let progesteroneTestResult: HKCategoryTypeIdentifier\nA category type that represents the results from a home progesterone test.\nstatic let sexualActivity: HKCategoryTypeIdentifier\nA category sample type that records sexual activity.\nstatic let contraceptive: HKCategoryTypeIdentifier\nA category sample type that records the use of contraceptives.\nstatic let pregnancy: HKCategoryTypeIdentifier\nA category type that records pregnancy.\nstatic let pregnancyTestResult: HKCategoryTypeIdentifier\nA category type that represents the results from a home pregnancy test.\nstatic let lactation: HKCategoryTypeIdentifier\nA category type that records lactation.\nRelated Documentation\nenum HKCategoryValue\nCategories that are undefined.\nstruct HKCategoryTypeIdentifier\nIdentifiers for creating category types.\nclass HKCategoryType\nA type that identifies samples that contain a value from a small set of possible values.\nclass HKCategorySample\nA sample with values from a short list of possible values."
  },
  {
    "title": "ovulationTestResult | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkcategorytypeidentifier/1615252-ovulationtestresult",
    "html": "Discussion\n\nThese samples use values from the HKCategoryValueOvulationTestResult enum.\n\nSee Also\nReproductive Health\nstatic let menstrualFlow: HKCategoryTypeIdentifier\nA category sample type that records menstrual cycles.\nstatic let intermenstrualBleeding: HKCategoryTypeIdentifier\nA category sample type that records spotting outside the normal menstruation period.\nstatic let infrequentMenstrualCycles: HKCategoryTypeIdentifier\nA category sample that indicates an infrequent menstrual cycle.\nstatic let irregularMenstrualCycles: HKCategoryTypeIdentifier\nA category sample that indicates an irregular menstrual cycle.\nstatic let persistentIntermenstrualBleeding: HKCategoryTypeIdentifier\nA category sample that indicates persistent intermenstrual bleeding.\nstatic let prolongedMenstrualPeriods: HKCategoryTypeIdentifier\nA category sample that indicates a prolonged menstrual cycle.\nstatic let cervicalMucusQuality: HKCategoryTypeIdentifier\nA category sample type that records the quality of the user’s cervical mucus.\nstatic let progesteroneTestResult: HKCategoryTypeIdentifier\nA category type that represents the results from a home progesterone test.\nstatic let sexualActivity: HKCategoryTypeIdentifier\nA category sample type that records sexual activity.\nstatic let contraceptive: HKCategoryTypeIdentifier\nA category sample type that records the use of contraceptives.\nstatic let pregnancy: HKCategoryTypeIdentifier\nA category type that records pregnancy.\nstatic let pregnancyTestResult: HKCategoryTypeIdentifier\nA category type that represents the results from a home pregnancy test.\nstatic let lactation: HKCategoryTypeIdentifier\nA category type that records lactation.\nRelated Documentation\nenum HKCategoryValue\nCategories that are undefined.\nstruct HKCategoryTypeIdentifier\nIdentifiers for creating category types.\nclass HKCategoryType\nA type that identifies samples that contain a value from a small set of possible values.\nclass HKCategorySample\nA sample with values from a short list of possible values."
  },
  {
    "title": "HKAuthorizationRequestStatus.shouldRequest | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkauthorizationrequeststatus/shouldrequest",
    "html": "See Also\nStatuses\ncase unknown\nThe authorization request status could not be determined because an error occurred.\ncase unnecessary\nThe application has already requested authorization for all the specified data types."
  },
  {
    "title": "procedureRecord | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkclinicaltypeidentifier/2976212-procedurerecord",
    "html": "See Also\nClinical Record Type Identifiers\nstatic let allergyRecord: HKClinicalTypeIdentifier\nA type identifier for records of allergic or intolerant reactions.\nstatic let clinicalNoteRecord: HKClinicalTypeIdentifier\nA type identifier for records of clinical notes.\nstatic let conditionRecord: HKClinicalTypeIdentifier\nA type identifier for records of a condition, problem, diagnosis, or other event.\nstatic let immunizationRecord: HKClinicalTypeIdentifier\nA type identifier for records of the current or historical administration of vaccines.\nstatic let labResultRecord: HKClinicalTypeIdentifier\nA type identifier for records of lab results.\nstatic let medicationRecord: HKClinicalTypeIdentifier\nA type identifier for records of medication.\nstatic let vitalSignRecord: HKClinicalTypeIdentifier\nA type identifier for records of vital signs.\nstatic let coverageRecord: HKClinicalTypeIdentifier\nA type identifier for records containing information about the user’s insurance coverage.\nRelated Documentation\nclass HKClinicalType\nA type that identifies samples that contain clinical record data.\nstatic let procedure: HKFHIRResourceType\nA type that identifies FHIR resources for procedures performed on the patient."
  },
  {
    "title": "medicationRecord | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkclinicaltypeidentifier/2976211-medicationrecord",
    "html": "See Also\nClinical Record Type Identifiers\nstatic let allergyRecord: HKClinicalTypeIdentifier\nA type identifier for records of allergic or intolerant reactions.\nstatic let clinicalNoteRecord: HKClinicalTypeIdentifier\nA type identifier for records of clinical notes.\nstatic let conditionRecord: HKClinicalTypeIdentifier\nA type identifier for records of a condition, problem, diagnosis, or other event.\nstatic let immunizationRecord: HKClinicalTypeIdentifier\nA type identifier for records of the current or historical administration of vaccines.\nstatic let labResultRecord: HKClinicalTypeIdentifier\nA type identifier for records of lab results.\nstatic let procedureRecord: HKClinicalTypeIdentifier\nA type identifier for records of procedures.\nstatic let vitalSignRecord: HKClinicalTypeIdentifier\nA type identifier for records of vital signs.\nstatic let coverageRecord: HKClinicalTypeIdentifier\nA type identifier for records containing information about the user’s insurance coverage.\nRelated Documentation\nclass HKClinicalType\nA type that identifies samples that contain clinical record data.\nstatic let medicationOrder: HKFHIRResourceType\nA type that identifies FHIR resources for prescriptions or other orders for medication.\nstatic let medicationDispense: HKFHIRResourceType\nA type that identifies FHIR resources for the delivery of medication (usually in response to a prescription).\nstatic let medicationStatement: HKFHIRResourceType\nA type that identifies FHIR resources for statements about medication taken by the patient."
  },
  {
    "title": "immunizationRecord | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkclinicaltypeidentifier/2976209-immunizationrecord",
    "html": "See Also\nClinical Record Type Identifiers\nstatic let allergyRecord: HKClinicalTypeIdentifier\nA type identifier for records of allergic or intolerant reactions.\nstatic let clinicalNoteRecord: HKClinicalTypeIdentifier\nA type identifier for records of clinical notes.\nstatic let conditionRecord: HKClinicalTypeIdentifier\nA type identifier for records of a condition, problem, diagnosis, or other event.\nstatic let labResultRecord: HKClinicalTypeIdentifier\nA type identifier for records of lab results.\nstatic let medicationRecord: HKClinicalTypeIdentifier\nA type identifier for records of medication.\nstatic let procedureRecord: HKClinicalTypeIdentifier\nA type identifier for records of procedures.\nstatic let vitalSignRecord: HKClinicalTypeIdentifier\nA type identifier for records of vital signs.\nstatic let coverageRecord: HKClinicalTypeIdentifier\nA type identifier for records containing information about the user’s insurance coverage.\nRelated Documentation\nclass HKClinicalType\nA type that identifies samples that contain clinical record data.\nstatic let immunization: HKFHIRResourceType\nA type that identifies FHIR resources for the administration of vaccines."
  },
  {
    "title": "conditionRecord | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkclinicaltypeidentifier/2976208-conditionrecord",
    "html": "See Also\nClinical Record Type Identifiers\nstatic let allergyRecord: HKClinicalTypeIdentifier\nA type identifier for records of allergic or intolerant reactions.\nstatic let clinicalNoteRecord: HKClinicalTypeIdentifier\nA type identifier for records of clinical notes.\nstatic let immunizationRecord: HKClinicalTypeIdentifier\nA type identifier for records of the current or historical administration of vaccines.\nstatic let labResultRecord: HKClinicalTypeIdentifier\nA type identifier for records of lab results.\nstatic let medicationRecord: HKClinicalTypeIdentifier\nA type identifier for records of medication.\nstatic let procedureRecord: HKClinicalTypeIdentifier\nA type identifier for records of procedures.\nstatic let vitalSignRecord: HKClinicalTypeIdentifier\nA type identifier for records of vital signs.\nstatic let coverageRecord: HKClinicalTypeIdentifier\nA type identifier for records containing information about the user’s insurance coverage.\nRelated Documentation\nclass HKClinicalType\nA type that identifies samples that contain clinical record data.\nstatic let condition: HKFHIRResourceType\nA type that identifies FHIR resources for a condition, problem, diagnosis, or other event."
  },
  {
    "title": "labResultRecord | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkclinicaltypeidentifier/2976210-labresultrecord",
    "html": "See Also\nClinical Record Type Identifiers\nstatic let allergyRecord: HKClinicalTypeIdentifier\nA type identifier for records of allergic or intolerant reactions.\nstatic let clinicalNoteRecord: HKClinicalTypeIdentifier\nA type identifier for records of clinical notes.\nstatic let conditionRecord: HKClinicalTypeIdentifier\nA type identifier for records of a condition, problem, diagnosis, or other event.\nstatic let immunizationRecord: HKClinicalTypeIdentifier\nA type identifier for records of the current or historical administration of vaccines.\nstatic let medicationRecord: HKClinicalTypeIdentifier\nA type identifier for records of medication.\nstatic let procedureRecord: HKClinicalTypeIdentifier\nA type identifier for records of procedures.\nstatic let vitalSignRecord: HKClinicalTypeIdentifier\nA type identifier for records of vital signs.\nstatic let coverageRecord: HKClinicalTypeIdentifier\nA type identifier for records containing information about the user’s insurance coverage.\nRelated Documentation\nclass HKClinicalType\nA type that identifies samples that contain clinical record data.\nstatic let observation: HKFHIRResourceType\nA type that identifies FHIR resources for medical observations, including lab results and vital signs."
  },
  {
    "title": "HKError.Code.errorUserCanceled | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkerror/code/errorusercanceled",
    "html": "See Also\nErrors\ncase errorHealthDataUnavailable\nHealthKit accessed on an unsupported device, such as an iPad.\ncase errorHealthDataRestricted\nA Mobile Device Management (MDM) profile restricts the use of HealthKit on this device.\ncase errorInvalidArgument\nThe app passed an invalid argument to the HealthKit API.\ncase errorAuthorizationDenied\nThe user hasn’t given the app permission to save data.\ncase errorAuthorizationNotDetermined\nThe app hasn’t yet asked the user for the authorization required to complete the task.\ncase errorRequiredAuthorizationDenied\nThe user hasn’t granted the application authorization to access all the required clinical record types.\ncase errorDatabaseInaccessible\nThe HealthKit data is unavailable because it’s protected and the device is locked.\ncase errorAnotherWorkoutSessionStarted\nAnother app started a workout session.\ncase errorUserExitedWorkoutSession\nThe user exited your application while a workout session was running.\ncase errorNoData\nData is unavailable for the requested query and predicate."
  },
  {
    "title": "HKActivityRingView | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkactivityringview",
    "html": "Overview\n\nUse HKActivityRingView to display data from an HKActivitySummary object. For example, Figure 1 shows how the rings can display a summary view of the user's activity.\n\nFigure 1 An activity ring view\n\nThe activity ring view always appears as a black rectangle with red, green, and blue concentric rings. The rings are centered in the view and are sized to fit the available space (see Figure 2).\n\nFigure 2 The rings fitted to the available space\n\nThe rings have two different ways to display a lack of data. One indicates that the activity summary is missing, and the other indicates that the activity summary’s values are set to zero. If the ring has a nil-valued activitySummary property, the rings appear empty. Use this to indicate that there is no summary data available for the specified day (for example, dates in the future).\n\nFigure 3 The rings when no activity summary is available\n\nIf the summary has zero-valued quantities set for its value properties, the ring displays a dot at the top of the ring. Use this to indicate that the user has not yet burned any active calories, exercised, or earned any stand hours for the specified day.\n\nFigure 4 The rings when the activity values are all set to zero\n\nTo display activity summary data from the HealthKit store, use an HKActivitySummaryQuery object. You can also instantiate and display your own HKActivitySummary objects, as needed.\n\nTo display data for a ring, the HKActivitySummary object must have a non-nil quantity for both the corresponding value property and the goal property (see Table 1).\n\nTable 1 Properties affecting rings\n\nRing\n\n\t\n\nValue property\n\n\t\n\nGoal property\n\n\n\n\nMove\n\n\t\n\nactiveEnergyBurned\n\n\t\n\nactiveEnergyBurnedGoal\n\n\n\n\nExercise\n\n\t\n\nappleExerciseTime\n\n\t\n\nappleExerciseTimeGoal\n\n\n\n\nStand\n\n\t\n\nappleStandHours\n\n\t\n\nappleStandHoursGoal\n\nThe activity ring view colors a percentage of each ring based on these properties, as shown here:\n\nring percent = value property quantity / goal property quantity\n\nTopics\nSetting the activity summary\nvar activitySummary: HKActivitySummary?\nThe active summary displayed by the activity ring view.\nfunc setActivitySummary(HKActivitySummary?, animated: Bool)\nSets the activity summary displayed by the activity ring view.\nRelationships\nInherits From\nUIView\nSee Also\nActivity rings\nclass HKActivitySummary\nAn object that contains the move, exercise, and stand data for a given day.\nstruct HKActivitySummaryQueryDescriptor\nA query interface that reads activity summaries using Swift concurrency.\nclass HKActivitySummaryQuery\nA query for reading activity summary objects from the HealthKit store.\nclass HKActivityMoveModeObject\nAn object that contains a movement mode value."
  },
  {
    "title": "HKWorkoutSessionState | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkoutsessionstate",
    "html": "Topics\nSession states\ncase notStarted\nThe workout session has not started.\ncase prepared\nThe session is ready but not yet running.\ncase running\nThe workout session is running.\ncase paused\nThe workout session has paused.\ncase stopped\nThe session has stopped.\ncase ended\nThe workout session has ended.\nRelationships\nConforms To\nSendable\nSee Also\nSessions\nRunning workout sessions\nTrack a workout on Apple Watch.\nBuild a workout app for Apple Watch\nCreate your own workout app, quickly and easily, with HealthKit and SwiftUI.\nBuilding a multidevice workout app\nMirror a workout from a watchOS app to its companion iOS app, and perform bidirectional communication between them.\nclass HKWorkoutSession\nA session that tracks the user’s workout on Apple Watch.\nclass HKWorkoutConfiguration\nAn object that contains configuration information about a workout session.\nclass HKLiveWorkoutBuilder\nA builder object that constructs a workout incrementally based on live data from an active workout session.\nclass HKLiveWorkoutDataSource\nA data source that automatically provides live data from an active workout session."
  },
  {
    "title": "Building a multidevice workout app | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/workouts_and_activity_rings/building_a_multidevice_workout_app",
    "html": "Overview\n\nNote\n\nThis sample code project is associated with WWDC23 session 10023: Build a multidevice workout app.\n\nConfigure the sample code project\n\nThis sample code project needs to run on physical devices. Before you run it with Xcode:\n\nSet the developer team for all targets to let Xcode automatically manage the provisioning profile. For more information, see Assign a project to a team.\n\nIn the Info pane of the MirroringWorkoutsSample Watch App target, change the value of the WKCompanionAppBundleIdentifier key to the bundle ID of the iOS app.\n\nSee Also\nSessions\nRunning workout sessions\nTrack a workout on Apple Watch.\nBuild a workout app for Apple Watch\nCreate your own workout app, quickly and easily, with HealthKit and SwiftUI.\nclass HKWorkoutSession\nA session that tracks the user’s workout on Apple Watch.\nclass HKWorkoutConfiguration\nAn object that contains configuration information about a workout session.\nenum HKWorkoutSessionState\nA workout session’s state.\nclass HKLiveWorkoutBuilder\nA builder object that constructs a workout incrementally based on live data from an active workout session.\nclass HKLiveWorkoutDataSource\nA data source that automatically provides live data from an active workout session."
  },
  {
    "title": "HKWorkoutActivityType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkoutactivitytype",
    "html": "Topics\nIndividual sports\ncase archery\nThe constant for shooting archery.\ncase bowling\nThe constant for bowling.\ncase fencing\nThe constant for fencing.\ncase gymnastics\nPerforming gymnastics.\ncase trackAndField\nParticipating in track and field events, including shot put, javelin, pole vaulting, and related sports.\nTeam sports\ncase americanFootball\nThe constant for playing American football.\ncase australianFootball\nThe constant for playing Australian football.\ncase baseball\nThe constant for playing baseball.\ncase basketball\nThe constant for playing basketball.\ncase cricket\nThe constant for playing cricket.\ncase discSports\nThe constant for playing disc sports such as Ultimate and Disc Golf.\ncase handball\nThe constant for playing handball.\ncase hockey\nThe constant for playing hockey, including ice hockey, field hockey, and related sports.\ncase lacrosse\nThe constant for playing lacrosse.\ncase rugby\nThe constant for playing rugby.\ncase soccer\nThe constant for playing soccer.\ncase softball\nThe constant for playing softball.\ncase volleyball\nThe constant for playing volleyball.\nExercise and fitness\ncase preparationAndRecovery\nThe constant for warm-up and therapeutic activities like foam rolling and stretching.\ncase flexibility\nThe constant for a flexibility workout.\ncase cooldown\nThe constant for low intensity stretching and mobility exercises following a more vigorous workout.\ncase walking\nThe constant for walking.\ncase running\nThe constant for running and jogging.\ncase wheelchairWalkPace\nThe constant for a wheelchair workout at walking pace.\ncase wheelchairRunPace\nThe constant for wheelchair workout at running pace.\ncase cycling\nThe constant for cycling.\ncase handCycling\nThe constant for hand cycling.\ncase coreTraining\nThe constant for core training.\ncase elliptical\nThe constant for workouts on an elliptical machine.\ncase functionalStrengthTraining\nThe constant for strength training, primarily with free weights and body weight.\ncase traditionalStrengthTraining\nThe constant for strength training exercises primarily using machines or free weights.\ncase crossTraining\nThe constant for exercise that includes any mixture of cardio, strength, and/or flexibility training.\ncase mixedCardio\nThe constant for workouts that mix a variety of cardio exercise machines or modalities.\ncase highIntensityIntervalTraining\nThe constant for high intensity interval training.\ncase jumpRope\nThe constant for jumping rope.\ncase stairClimbing\nThe constant for workouts using a stair climbing machine.\ncase stairs\nThe constant for running, walking, or other drills using stairs (for example, in a stadium or inside a multilevel building).\ncase stepTraining\nThe constant for training using a step bench.\ncase fitnessGaming\nThe constant for playing fitness-based video games.\nStudio activities\ncase barre\nThe constant for barre workout.\ncase cardioDance\nThe constant for cardiovascular dance workouts.\ncase socialDance\nThe constant for dancing with a partner or partners, such as swing, salsa, or folk dances.\ncase yoga\nThe constant for practicing yoga.\ncase mindAndBody\nThe constant for performing activities like walking meditation, Gyrotonic exercise, and Qigong.\ncase pilates\nThe constant for a pilates workout.\nRacket sports\ncase badminton\nThe constant for playing badminton.\ncase pickleball\nThe constant for playing pickleball.\ncase racquetball\nThe constant for playing racquetball.\ncase squash\nThe constant for playing squash.\ncase tableTennis\nThe constant for playing table tennis.\ncase tennis\nThe constant for playing tennis.\nOutdoor activities\ncase climbing\nThe constant for climbing.\ncase equestrianSports\nThe constant for activities that involve riding a horse, including polo, horse racing, and horse riding.\ncase fishing\nThe constant for fishing.\ncase golf\nThe constant for playing golf.\ncase hiking\nThe constant for hiking.\ncase hunting\nThe constant for hunting.\ncase play\nThe constant for play-based activities like tag, dodgeball, hopscotch, tetherball, and playing on a jungle gym.\nSnow and ice sports\ncase crossCountrySkiing\nThe constant for cross country skiing.\ncase curling\nThe constant for curling.\ncase downhillSkiing\nThe constant for downhill skiing.\ncase snowSports\nThe constant for a variety of snow sports, including sledding, snowmobiling, or building a snowman.\ncase snowboarding\nThe constant for snowboarding.\ncase skatingSports\nThe constant for skating activities, including ice skating, speed skating, inline skating, and skateboarding.\nWater activities\ncase paddleSports\nThe constant for canoeing, kayaking, paddling an outrigger, paddling a stand-up paddle board, and related sports.\ncase rowing\nThe constant for rowing.\ncase sailing\nThe constant for sailing.\ncase surfingSports\nThe constant for a variety of surf sports, including surfing, kite surfing, and wind surfing.\ncase swimming\nThe constant for swimming.\ncase waterFitness\nThe constant for aerobic exercise performed in shallow water.\ncase waterPolo\nThe constant for playing water polo.\ncase waterSports\nThe constant for a variety of water sports, including water skiing, wake boarding, and related activities.\nMartial arts\ncase boxing\nThe constant for boxing.\ncase kickboxing\nThe constant for kickboxing.\ncase martialArts\nThe constant for practicing martial arts.\ncase taiChi\nThe constant for tai chi.\ncase wrestling\nThe constant for wrestling.\nOther activities\ncase other\nThe constant for a workout that does not match any of the other workout activity types.\nDeprecated activity types\ncase dance\nThe constant for dancing.\ncase danceInspiredTraining\nThe constant for workouts inspired by dance, including Pilates, Barre, and Feldenkrais.\ncase mixedMetabolicCardioTraining\nThe constant for performing any mix of cardio-focused exercises.\nMultisport activities\ncase swimBikeRun\nThe constant for multisport activities like triathlons.\ncase transition\nA constant for the transition time between activities in a multisport workout.\nEnumeration Cases\ncase underwaterDiving\nRelationships\nConforms To\nSendable\nSee Also\nSamples\nAdding samples to a workout\nCreate associated samples that add details to a workout.\nAccessing condensed workout samples\nRead series data from condensed workouts.\nDividing a HealthKit workout into activities\nPartition multisport and interval workouts into activities that represent the different parts of the workout.\nclass HKWorkout\nA workout sample that stores information about a single physical activity.\nclass HKWorkoutActivity\nAn object that describes an activity within a longer workout.\nclass HKWorkoutBuilder\nA builder object that incrementally constructs a workout.\nclass HKWorkoutType\nA type that identifies samples that store information about a workout.\nlet HKWorkoutTypeIdentifier: String\nThe workout type identifier.\nenum HKWorkoutSessionType\nThe type of session.\nclass HKWorkoutEvent\nAn object representing an important event during a workout."
  },
  {
    "title": "waterTemperature | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquantitytypeidentifier/3958704-watertemperature",
    "html": "Discussion\n\nApple Watch Ultra automatically records these samples during dive sessions.\n\nWater temperature samples use temperature units (described in HKUnit) and measure discrete values (described in HKQuantityAggregationStyle).\n\nSee Also\nDiving\nstatic let appleSleepingWristTemperature: HKQuantityTypeIdentifier\nA quantity sample type that records the wrist temperature during sleep.\nstatic let atrialFibrillationBurden: HKQuantityTypeIdentifier\nA quantity type that measures an estimate of the percentage of time a person’s heart shows signs of atrial fibrillation (AFib) while wearing Apple Watch.\nstatic let heartRateRecoveryOneMinute: HKQuantityTypeIdentifier\nA quantity sample that records the reduction in heart rate from the peak exercise rate to the rate one minute after exercising ended.\nstatic let underwaterDepth: HKQuantityTypeIdentifier\nA quantity sample that records a person’s depth underwater."
  },
  {
    "title": "HKStatistics | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkstatistics",
    "html": "Overview\n\nHealthKit creates statistic objects using either a statistics query or a statistics collection query. For the statistics query, it performs the specified calculations over all the samples that match the query. For the statistics collection query, it partitions the matching samples into a set of time intervals and performs the calculations over each interval separately.\n\nBy default, these queries automatically merge the data from all of your data sources before performing the calculations. If you want to merge the data yourself, you can set the separateBySource option. You can then request the statistical data for each source separately.\n\nWhen requesting data from a statistics object, your request must match the options you used when creating the query. For example, if you create a query using the discreteAverage option, you must access the results using the averageQuantity() method.\n\nFor more information on calculating statistical data, see HKStatisticsQuery Class Reference. To calculate the statistics over a series of time intervals, see the HKStatisticsCollectionQuery Class Reference.\n\nTopics\nGetting Property Data\nvar startDate: Date\nThe start of the time period included in these statistics.\nvar endDate: Date\nThe end of the time period included in these statistics.\nvar quantityType: HKQuantityType\nThe quantity type of the samples used to calculate these statistics.\nvar sources: [HKSource]?\nAn array containing all the sources contributing to these statistics.\nGetting Statistics Data\nfunc averageQuantity() -> HKQuantity?\nReturns the average value from all the samples that match the query.\nfunc averageQuantity(for: HKSource) -> HKQuantity?\nReturns the average value from all the samples that match the query and that were created by the specified source.\nfunc maximumQuantity() -> HKQuantity?\nReturns the maximum value from all the samples that match the query.\nfunc maximumQuantity(for: HKSource) -> HKQuantity?\nReturns the maximum value from all the samples that match the query and that were created by the specified source.\nfunc minimumQuantity() -> HKQuantity?\nReturns the minimum value from all the samples that match the query.\nfunc minimumQuantity(for: HKSource) -> HKQuantity?\nReturns the minimum value from all the samples that match the query and that were created by the specified source.\nfunc sumQuantity() -> HKQuantity?\nReturns the sum of all the samples that match the query.\nfunc sumQuantity(for: HKSource) -> HKQuantity?\nReturns the sum of all the samples that match the query and that were created by the specified source.\nfunc duration() -> HKQuantity?\nReturns the total duration covering all the samples that match the query.\nfunc duration(for: HKSource) -> HKQuantity?\nReturns the total duration covering all the samples created by the specified source that also match the query.\nGetting the Most Recent Quantity\nfunc mostRecentQuantity() -> HKQuantity?\nReturns the most recent value from all the samples that match the query.\nfunc mostRecentQuantity(for: HKSource) -> HKQuantity?\nReturns the most recent value from all the samples that match the query and were created by the specified source.\nfunc mostRecentQuantityDateInterval() -> DateInterval?\nReturns the date interval of the most recent sample that matches the query.\nfunc mostRecentQuantityDateInterval(for: HKSource) -> DateInterval?\nReturns the date interval of the most recent sample that matches the query and was created by the specified source.\nRelationships\nInherits From\nNSObject\nConforms To\nNSCopying\nNSSecureCoding\nSee Also\nStatistics\nExecuting Statistical Queries\nCreate and run statistical queries.\nExecuting Statistics Collection Queries\nCalculate statistical data for graphs and charts.\nstruct HKStatisticsQueryDescriptor\nA query descriptor that calculates the minimum, maximum, average, or sum over a set of samples from the HealthKit store.\nclass HKStatisticsQuery\nA query that performs statistical calculations over a set of matching quantity samples, and returns the results.\nstruct HKStatisticsCollectionQueryDescriptor\nA query descriptor that gathers a collection of statistics calculated over a series of fixed-length time intervals.\nclass HKStatisticsCollectionQuery\nA query that performs multiple statistics queries over a series of fixed-length time intervals.\nclass HKStatisticsCollection\nAn object that manages a collection of statistics, representing the results calculated over separate time intervals.\nstruct HKStatisticsOptions\nOptions for specifying the statistic to calculate."
  },
  {
    "title": "HKVerifiableClinicalRecordQuery | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkverifiableclinicalrecordquery",
    "html": "Overview\n\nNote\n\nTo use Swift concurrency when reading verifiable clinical records, see HKVerifiableClinicalRecordQueryDescriptor.\n\nUse an HKVerifiableClinicalRecordQuery object to request one-time access to a SMART Health Card or EU Digital COVID Certificate. For example, the following code requests cards that represent immunizations within the last six months.\n\n// Calculate the start and end dates.\nvar sixMonthsAgo = DateComponents()\nsixMonthsAgo.month = -6\n\n\nlet end = Date()\nguard let start = Calendar.current.date(byAdding: sixMonthsAgo, to: end) else {\n    fatalError(\"*** Unable to calculate a date using \\(end) and \\(sixMonthsAgo) ***\")\n}\n\n\n// Create the predicate.\nlet lastSixMonthsPredicate =\nHKQuery.predicateForVerifiableClinicalRecords(withRelevantDateWithin: DateInterval(start: start, end: end))\n\n\n// Create the query for immunization cards.\nlet query = HKVerifiableClinicalRecordQuery(\n    recordTypes: [HKVerifiableClinicalRecordCredentialType.covid19.rawValue,\n                  HKVerifiableClinicalRecordCredentialType.immunization.rawValue],\n    sourceTypes: [.smartHealthCard, .euDigitalCOVIDCertificate],\n    predicate: lastSixMonthsPredicate) { query, records, error in\n        \n        if let error = error {\n            // Handle errors here.\n            fatalError(\"*** An error occurred: \\(error.localizedDescription)***\")\n        }\n        \n        if let records = records {\n            \n            // Use the records here.\n            for record in records {\n                print(record.recordTypes)\n                print(record.itemNames)\n                print(record.issuedDate)\n                print(record.expirationDate ?? \"No expiration date.\")\n            }\n        }\n    }\n\n\n// Run the query.\nstore.execute(query)\n\n\nUnlike other HealthKit queries, you don’t need to request permission to read verifiable health records before running this query. HealthKit prompts the user for permission to read the records each time you run the query.\n\nNote\n\nRunning an HKVerifiableClinicalRecordQuery requires a special entitlement from Apple, or the query fails with an HKError.Code.errorAuthorizationDenied error. To request the entitlement, see Request Access to the Verifiable Health Records Entitlement.\n\nTopics\nCreating Queries\ninit(recordTypes: [String], sourceTypes: [HKVerifiableClinicalRecordSourceType], predicate: NSPredicate?, resultsHandler: (HKVerifiableClinicalRecordQuery, [HKVerifiableClinicalRecord]?, Error?) -> Void)\nCreates a query for one-time access to a verifiable clinical record.\ninit(recordTypes: [String], predicate: NSPredicate?, resultsHandler: (HKVerifiableClinicalRecordQuery, [HKVerifiableClinicalRecord]?, Error?) -> Void)\nCreates a query for one-time access to a SMART Health Card.\nAccessing the Metadata\nvar recordTypes: [String]\nThe type of records that this query returns.\nvar sourceTypes: [HKVerifiableClinicalRecordSourceType]\nThe format of the verifiable clinical record.\nRelationships\nInherits From\nHKQuery\nSee Also\nClinical record queries\nstruct HKVerifiableClinicalRecordQueryDescriptor\nA query interface that provides one-time access to a SMART Health Card or EU Digital COVID Certificate using Swift concurrency.\nstruct HKVerifiableClinicalRecordSourceType\nThe source type for the verifiable clinical record.\nstruct HKVerifiableClinicalRecordCredentialType\nThe type of record returned by a verifiable clinical record query.\nclass HKDocumentQuery\nA query that returns a snapshot of all matching documents currently saved in the HealthKit store."
  },
  {
    "title": "HKAnchoredObjectQuery | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkanchoredobjectquery",
    "html": "Overview\n\nAnchored object queries provide an easy way to search for new data in the HealthKit store. An HKAnchoredObjectQuery returns an anchor value that corresponds to the last sample or deleted object received by that query. Subsequent queries can use this anchor to restrict their results to only newer saved or deleted objects.\n\nAnchored object queries are mostly immutable. You can assign the query’s updateHandler property after instantiating the object, but you must set all other properties when you instantiate the object. You can’t change them.\n\nCombine Snapshots and Updates\n\nThe anchored object query can combine the abilities of a regular query with a long-running query.\n\nIt grabs a snapshot of the data currently stored in the HealthKit store (like an HKSampleQuery).\n\nIt can also perform a long-running query that responds to updates (like an HKObserverQuery).\n\nOften, it’s more efficient to set up and run a single anchored object query than to run separate sample and observer queries. As a result, you may want to use anchored object queries, even when you aren’t using anchors to limit the results. In this case, set the anchor parameter to nil.\n\nTopics\nCreating Anchored Object Queries\nExecuting Anchored Object Queries\nCreate and run an anchored object query.\ninit(type: HKSampleType, predicate: NSPredicate?, anchor: HKQueryAnchor?, limit: Int, resultsHandler: (HKAnchoredObjectQuery, [HKSample]?, [HKDeletedObject]?, HKQueryAnchor?, Error?) -> Void)\nInitializes a new anchored object query.\ninit(queryDescriptors: [HKQueryDescriptor], anchor: HKQueryAnchor?, limit: Int, resultsHandler: (HKAnchoredObjectQuery, [HKSample]?, [HKDeletedObject]?, HKQueryAnchor?, Error?) -> Void)\nCreates an anchored object query that matches any of the query descriptors you provided.\nlet HKObjectQueryNoLimit: Int\nA value indicating that the query returns all the matching samples in the HealthKit store.\ninit(type: HKSampleType, predicate: NSPredicate?, anchor: Int, limit: Int, completionHandler: (HKAnchoredObjectQuery, [HKSample]?, Int, Error?) -> Void)\nInitializes a new anchored object query.\nReceiving Updates\nvar updateHandler: ((HKAnchoredObjectQuery, [HKSample]?, [HKDeletedObject]?, HKQueryAnchor?, Error?) -> Void)?\nHandler for monitoring updates to the HealthKit store.\nTracking Anchors\nclass HKQueryAnchor\nAn object used to identify all the samples previously returned by an anchored object query.\nTracking Deleted Objects\nclass HKDeletedObject\nAn object that represents a sample that has been deleted from the HealthKit store.\nRelationships\nInherits From\nHKQuery\nSee Also\nLong-running queries\nstruct HKActivitySummaryQueryDescriptor\nA query interface that reads activity summaries using Swift concurrency.\nclass HKActivitySummaryQuery\nA query for reading activity summary objects from the HealthKit store.\nstruct HKAnchoredObjectQueryDescriptor\nA query interface that runs anchored object queries using Swift concurrency.\nclass HKObserverQuery\nA long-running query that monitors the HealthKit store and updates your app when the HealthKit store saves or deletes a matching sample."
  },
  {
    "title": "Executing Statistical Queries | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/queries/executing_statistical_queries",
    "html": "Overview\n\nStatistical queries calculate common statistics over a matching set of samples, for example by returning the minimum value, the maximum value, or the sum of all the values.\n\nCreate the Object Type and Predicate\n\nStart by creating the type object for the desired samples. The following example creates a type object for energy consumed.\n\nguard let energyConsumed = HKSampleType.quantityType(forIdentifier: HKQuantityTypeIdentifier.dietaryEnergyConsumed) else {\n    // This should never fail when using a defined constant.\n    fatalError(\"*** Unable to get the step count type ***\")\n}\n\n\nNext, create a predicate for samples created between midnight last night and midnight tonight.\n\nlet calendar = NSCalendar.current\nlet now = Date()\nlet components = calendar.dateComponents([.year, .month, .day], from: now)\n\n\nguard let startDate = calendar.date(from: components) else {\n    fatalError(\"*** Unable to create the start date ***\")\n}\n \nguard let endDate = calendar.date(byAdding: .day, value: 1, to: startDate) else {\n    fatalError(\"*** Unable to create the end date ***\")\n}\n\n\nlet today = HKQuery.predicateForSamples(withStart: startDate, end: endDate, options: [])\n\n\nYou use these values to create the query.\n\nCreate the Query\n\nTo create the statistical query, call the init(quantityType:quantitySamplePredicate:options:completionHandler:) initializer. The following code creates a statistical query that calculates the total energy consumed during the specified time period.\n\nlet query = HKStatisticsQuery(quantityType: energyConsumed, quantitySamplePredicate: today, options: .cumulativeSum) { (query, statisticsOrNil, errorOrNil) in\n    \n    guard let statistics = statisticsOrNil else {\n        // Handle any errors here.\n        return\n    }\n    \n    let sum = statistics.sumQuantity()\n    let totalCaloriesConsumed = sum?.doubleValue(for: HKUnit.largeCalorie())\n    \n    // Update your app here.\n    \n    // The results come back on an anonymous background queue.\n    // Dispatch to the main queue before modifying the UI.\n    \n    DispatchQueue.main.async {\n        // Update the UI here.\n    }\n}\n\n\nThe query returns a statistics object that contains the values calculated by the query. The callback handler should check for errors before accessing the statistics. It should also dispatch updates to the user interface back to the main thread.\n\nRun the Query\n\nAfter the query is instantiated, you run it by calling the HealthKit store’s execute(_:) method on the HealthKit store.\n\nstore.execute(query)\n\n\nThis method runs the query on an anonymous background queue. When the query is complete, it executes the results handler on the same background queue (but not necessarily on the same thread).\n\nSee Also\nStatistics\nExecuting Statistics Collection Queries\nCalculate statistical data for graphs and charts.\nstruct HKStatisticsQueryDescriptor\nA query descriptor that calculates the minimum, maximum, average, or sum over a set of samples from the HealthKit store.\nclass HKStatisticsQuery\nA query that performs statistical calculations over a set of matching quantity samples, and returns the results.\nstruct HKStatisticsCollectionQueryDescriptor\nA query descriptor that gathers a collection of statistics calculated over a series of fixed-length time intervals.\nclass HKStatisticsCollectionQuery\nA query that performs multiple statistics queries over a series of fixed-length time intervals.\nclass HKStatistics\nAn object that represents the result of calculating the minimum, maximum, average, or sum over a set of samples from the HealthKit store.\nclass HKStatisticsCollection\nAn object that manages a collection of statistics, representing the results calculated over separate time intervals.\nstruct HKStatisticsOptions\nOptions for specifying the statistic to calculate."
  },
  {
    "title": "HKSamplePredicate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hksamplepredicate",
    "html": "Overview\n\nThe HKSamplePredicate structure bundles an HKSampleType and an optional NSPredicate. The structure is generic. You can create it for any HKSampleType subclass, and it automatically sets the Sample type to the matching HKSampleType subtype. As a result, any query that you build using this structure returns properly typed results.\n\nTo create an HKSamplePredicate instance, call one of its constructor methods.\n\nlet stepType = HKQuantityType(.stepCount)\nlet predicate = HKSamplePredicate.quantitySample(type: stepType)\n\n\nlet descriptor = HKSampleQueryDescriptor(\n    predicates:[predicate],\n    sortDescriptors: [],\n    limit: 10)\n\n\n// The results are an array of HKQuantitySample objects.\nlet results = try await descriptor.result(for: store)\n\n\nTopics\nCreating Sample Predicates\nstatic func audiogram(NSPredicate?) -> HKSamplePredicate<HKAudiogramSample>\nReturns a sample predicate that matches audiogram samples.\nstatic func categorySample(type: HKCategoryType, predicate: NSPredicate?) -> HKSamplePredicate<HKCategorySample>\nReturns a sample predicate that matches category samples.\nstatic func clinicalRecord(type: HKClinicalType, predicate: NSPredicate?) -> HKSamplePredicate<HKClinicalRecord>\nReturns a sample predicate that matches clinical record samples.\nstatic func correlation(type: HKCorrelationType, predicate: NSPredicate?) -> HKSamplePredicate<HKCorrelation>\nReturns a sample predicate that matches samples that contain correlated data.\nstatic func electrocardiogram(NSPredicate?) -> HKSamplePredicate<HKElectrocardiogram>\nReturns a sample predicate that matches electrocardiogram samples.\nstatic func heartbeatSeries(NSPredicate?) -> HKSamplePredicate<HKHeartbeatSeriesSample>\nReturns a sample predicate that matches heartbeat series samples.\nstatic func quantitySample(type: HKQuantityType, predicate: NSPredicate?) -> HKSamplePredicate<HKQuantitySample>\nReturns a sample predicate that matches quantity samples.\nstatic func sample(type: HKSampleType, predicate: NSPredicate?) -> HKSamplePredicate<HKSample>\nReturns a sample predicate that matches samples.\nstatic func visionPrescription(NSPredicate?) -> HKSamplePredicate<HKVisionPrescription>\nReturns a predicate that matches prescription samples.\nstatic func workout(NSPredicate?) -> HKSamplePredicate<HKWorkout>\nReturns a sample predicate that matches workout samples.\nstatic func workoutRoute(NSPredicate?) -> HKSamplePredicate<HKWorkoutRoute>\nReturns a sample predicate that matches samples containing workout route data.\nAccessing Sample Predicate Data\nlet nsPredicate: NSPredicate?\nAn optional predicate that further restricts the results that the query returns.\nlet sampleType: HKSampleType\nThe type of samples that the query returns.\nComparing Sample Predicates\nstatic func == (HKSamplePredicate<Sample>, HKSamplePredicate<Sample>) -> Bool\nReturns a Boolean value indicating whether two values are equal.\nstatic func != (HKSamplePredicate<Sample>, HKSamplePredicate<Sample>) -> Bool\nReturns a Boolean value indicating that two values aren’t equal.\nfunc hash(into: inout Hasher)\nRetrurns a hash value for the sample predicate.\nvar hashValue: Int\nThe hash value.\nRelationships\nConforms To\nHashable\nSee Also\nSwift concurrency support\nRunning Queries with Swift Concurrency\nUse Swift concurrency to manage one-shot and long-running queries.\nprotocol HKAsyncQuery\nA protocol that defines an asynchronous method for running queries.\nprotocol HKAsyncSequenceQuery\nA protocol that defines a method for running queries that returns results using an asynchronous sequence."
  },
  {
    "title": "HKQueryDescriptor | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquerydescriptor",
    "html": "Overview\n\nUse descriptors to create queries that return multiple data types. You can use descriptors when creating HKSampleQuery, HKAnchoredObjectQuery, or HKObserverQuery instances.\n\nTopics\nCreating Query Descriptors\ninit(sampleType: HKSampleType, predicate: NSPredicate?)\nCreates a new descriptor for the data type and predicate you provided.\nAccessing Descriptor Data\nvar predicate: NSPredicate?\nThe predicate that filters samples matching this descriptor.\nvar sampleType: HKSampleType\nThe data type of samples that match this descriptor.\nRelationships\nInherits From\nNSObject\nConforms To\nNSCopying\nNSSecureCoding\nSee Also\nBasic queries\nstruct HKSampleQueryDescriptor\nA query interface that reads samples using Swift concurrency.\nclass HKSampleQuery\nA general query that returns a snapshot of all the matching samples currently saved in the HealthKit store.\nclass HKCorrelationQuery\nA query that performs complex searches based on the correlation’s contents, and returns a snapshot of all matching samples.\nclass HKQuery\nAn abstract class for all the query classes in HealthKit."
  },
  {
    "title": "HKAsyncQuery | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkasyncquery",
    "html": "Topics\nRunning Queries\nassociatedtype Output\nThe type of data that the query returns.\n\nRequired\n\nfunc result(for: HKHealthStore) -> Self.Output\nRuns a one-shot query and asynchronously returns a snapshot of the current matching results.\n\nRequired\n\nRelationships\nConforming Types\nHKActivitySummaryQueryDescriptor\nHKAnchoredObjectQueryDescriptor\nHKSampleQueryDescriptor\nHKSourceQueryDescriptor\nHKStatisticsCollectionQueryDescriptor\nHKStatisticsQueryDescriptor\nHKVerifiableClinicalRecordQueryDescriptor\nSee Also\nSwift concurrency support\nRunning Queries with Swift Concurrency\nUse Swift concurrency to manage one-shot and long-running queries.\nprotocol HKAsyncSequenceQuery\nA protocol that defines a method for running queries that returns results using an asynchronous sequence.\nstruct HKSamplePredicate\nA predicate for queries that return a collection of matching sample objects."
  },
  {
    "title": "persistentIntermenstrualBleeding | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkcategorytypeidentifier/3951063-persistentintermenstrualbleeding",
    "html": "Discussion\n\nHealthKit generates Cycle Deviation notifications based on the cycle data a person enters. HealthKit processes this data on their iOS device. If it detects a potential deviation, it sends a notification asking them to verify their logged cycle history. If the person confirms that their cycle history is accurate, HealthKit saves a corresponding sample of the detected Cycle Deviation to the HealthKit store.\n\nCycle Deviation notifications include:\n\nPersistent spotting\n\nPersistent spotting, also known as irregular intermenstrual bleeding, is defined as spotting that occurs in at least two of your cycles in the last six months. HealthKit records verified instances using persistentIntermenstrualBleeding samples.\n\nProlonged periods\n\nProlonged periods are defined as menstrual bleeding that lasts for ten or more days, and this has happened at least two times in the last six months. HealthKit records verified instances using prolongedMenstrualPeriods samples.\n\nIrregular cycles\n\nAn irregular cycle is defined as at least a seventeen-day difference between a person’s shortest and longest cycles over the last six months. HealthKit records verified instances using irregularMenstrualCycles samples.\n\nInfrequent periods\n\nAn infrequent period is defined as having a period one or two times in the last six months. HealthKit records verified instances using infrequentMenstrualCycles samples.\n\nUse a HKCategoryValue.notApplicable value with these samples.\n\nImportant\n\nThese samples are read-only. You can request permission to read the samples using this identifier, but you can’t request authorization to share them. This means you can’t save new infrequent menstrual cycle samples to the HealthKit store.\n\nSee Also\nReproductive Health\nstatic let menstrualFlow: HKCategoryTypeIdentifier\nA category sample type that records menstrual cycles.\nstatic let intermenstrualBleeding: HKCategoryTypeIdentifier\nA category sample type that records spotting outside the normal menstruation period.\nstatic let infrequentMenstrualCycles: HKCategoryTypeIdentifier\nA category sample that indicates an infrequent menstrual cycle.\nstatic let irregularMenstrualCycles: HKCategoryTypeIdentifier\nA category sample that indicates an irregular menstrual cycle.\nstatic let prolongedMenstrualPeriods: HKCategoryTypeIdentifier\nA category sample that indicates a prolonged menstrual cycle.\nstatic let cervicalMucusQuality: HKCategoryTypeIdentifier\nA category sample type that records the quality of the user’s cervical mucus.\nstatic let ovulationTestResult: HKCategoryTypeIdentifier\nA category sample type that records the result of an ovulation home test.\nstatic let progesteroneTestResult: HKCategoryTypeIdentifier\nA category type that represents the results from a home progesterone test.\nstatic let sexualActivity: HKCategoryTypeIdentifier\nA category sample type that records sexual activity.\nstatic let contraceptive: HKCategoryTypeIdentifier\nA category sample type that records the use of contraceptives.\nstatic let pregnancy: HKCategoryTypeIdentifier\nA category type that records pregnancy.\nstatic let pregnancyTestResult: HKCategoryTypeIdentifier\nA category type that represents the results from a home pregnancy test.\nstatic let lactation: HKCategoryTypeIdentifier\nA category type that records lactation."
  },
  {
    "title": "menstrualFlow | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkcategorytypeidentifier/1615136-menstrualflow",
    "html": "Discussion\n\nThese samples use values from the HKCategoryValueMenstrualFlow enum. Additionally, these samples must include HKMetadataKeyMenstrualCycleStart metadata.\n\nWhen recording data about the user’s menstrual cycle, you can either use a single sample for the entire period, or multiple samples to record changes over the cycle. When using single samples, pass the start of the menstrual period to the startDate parameter. Pass the end of the period to the endDate parameter, and set the HKMetadataKeyMenstrualCycleStart value to true.\n\nWhen using multiple samples to record a single period, the startDate and endDate parameters should mark the beginning and ending of each individual sample. Set the HKMetadataKeyMenstrualCycleStart value for the first sample in the period to true. Use false for any additional samples. Different samples can use different menstrualFlow values to record the changes in flow over time.\n\nTopics\nMetadata Keys\nlet HKMetadataKeyMenstrualCycleStart: String\nA key that indicates whether the sample represents the start of a menstrual cycle. This metadata key is required for menstrualFlow category samples.\nSee Also\nReproductive Health\nstatic let intermenstrualBleeding: HKCategoryTypeIdentifier\nA category sample type that records spotting outside the normal menstruation period.\nstatic let infrequentMenstrualCycles: HKCategoryTypeIdentifier\nA category sample that indicates an infrequent menstrual cycle.\nstatic let irregularMenstrualCycles: HKCategoryTypeIdentifier\nA category sample that indicates an irregular menstrual cycle.\nstatic let persistentIntermenstrualBleeding: HKCategoryTypeIdentifier\nA category sample that indicates persistent intermenstrual bleeding.\nstatic let prolongedMenstrualPeriods: HKCategoryTypeIdentifier\nA category sample that indicates a prolonged menstrual cycle.\nstatic let cervicalMucusQuality: HKCategoryTypeIdentifier\nA category sample type that records the quality of the user’s cervical mucus.\nstatic let ovulationTestResult: HKCategoryTypeIdentifier\nA category sample type that records the result of an ovulation home test.\nstatic let progesteroneTestResult: HKCategoryTypeIdentifier\nA category type that represents the results from a home progesterone test.\nstatic let sexualActivity: HKCategoryTypeIdentifier\nA category sample type that records sexual activity.\nstatic let contraceptive: HKCategoryTypeIdentifier\nA category sample type that records the use of contraceptives.\nstatic let pregnancy: HKCategoryTypeIdentifier\nA category type that records pregnancy.\nstatic let pregnancyTestResult: HKCategoryTypeIdentifier\nA category type that represents the results from a home pregnancy test.\nstatic let lactation: HKCategoryTypeIdentifier\nA category type that records lactation.\nRelated Documentation\nenum HKCategoryValue\nCategories that are undefined.\nstruct HKCategoryTypeIdentifier\nIdentifiers for creating category types.\nclass HKCategoryType\nA type that identifies samples that contain a value from a small set of possible values.\nclass HKCategorySample\nA sample with values from a short list of possible values."
  },
  {
    "title": "prolongedMenstrualPeriods | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkcategorytypeidentifier/3951064-prolongedmenstrualperiods",
    "html": "Discussion\n\nHealthKit generates Cycle Deviation notifications based on the cycle data a person enters. HealthKit processes this data on their iOS device. If it detects a potential deviation, it sends a notification asking them to verify their logged cycle history. If the person confirms that their cycle history is accurate, HealthKit saves a corresponding sample of the detected Cycle Deviation to the HealthKit store.\n\nCycle Deviation notifications include:\n\nPersistent spotting\n\nPersistent spotting, also known as irregular intermenstrual bleeding, is defined as spotting that occurs in at least two of your cycles in the last six months. HealthKit records verified instances using persistentIntermenstrualBleeding samples.\n\nProlonged periods\n\nProlonged periods are defined as menstrual bleeding that lasts for ten or more days, and this has happened at least two times in the last six months. HealthKit records verified instances using prolongedMenstrualPeriods samples.\n\nIrregular cycles\n\nAn irregular cycle is defined as at least a seventeen-day difference between a person’s shortest and longest cycles over the last six months. HealthKit records verified instances using irregularMenstrualCycles samples.\n\nInfrequent periods\n\nAn infrequent period is defined as having a period one or two times in the last six months. HealthKit records verified instances using infrequentMenstrualCycles samples.\n\nUse a HKCategoryValue.notApplicable value with these samples.\n\nImportant\n\nThese samples are read-only. You can request permission to read the samples using this identifier, but you can’t request authorization to share them. This means you can’t save new infrequent menstrual cycle samples to the HealthKit store.\n\nSee Also\nReproductive Health\nstatic let menstrualFlow: HKCategoryTypeIdentifier\nA category sample type that records menstrual cycles.\nstatic let intermenstrualBleeding: HKCategoryTypeIdentifier\nA category sample type that records spotting outside the normal menstruation period.\nstatic let infrequentMenstrualCycles: HKCategoryTypeIdentifier\nA category sample that indicates an infrequent menstrual cycle.\nstatic let irregularMenstrualCycles: HKCategoryTypeIdentifier\nA category sample that indicates an irregular menstrual cycle.\nstatic let persistentIntermenstrualBleeding: HKCategoryTypeIdentifier\nA category sample that indicates persistent intermenstrual bleeding.\nstatic let cervicalMucusQuality: HKCategoryTypeIdentifier\nA category sample type that records the quality of the user’s cervical mucus.\nstatic let ovulationTestResult: HKCategoryTypeIdentifier\nA category sample type that records the result of an ovulation home test.\nstatic let progesteroneTestResult: HKCategoryTypeIdentifier\nA category type that represents the results from a home progesterone test.\nstatic let sexualActivity: HKCategoryTypeIdentifier\nA category sample type that records sexual activity.\nstatic let contraceptive: HKCategoryTypeIdentifier\nA category sample type that records the use of contraceptives.\nstatic let pregnancy: HKCategoryTypeIdentifier\nA category type that records pregnancy.\nstatic let pregnancyTestResult: HKCategoryTypeIdentifier\nA category type that represents the results from a home pregnancy test.\nstatic let lactation: HKCategoryTypeIdentifier\nA category type that records lactation."
  },
  {
    "title": "irregularMenstrualCycles | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkcategorytypeidentifier/3951062-irregularmenstrualcycles",
    "html": "Discussion\n\nHealthKit generates Cycle Deviation notifications based on the cycle data a person enters. HealthKit processes this data on their iOS device. If it detects a potential deviation, it sends a notification asking them to verify their logged cycle history. If the person confirms that their cycle history is accurate, HealthKit saves a corresponding sample of the detected Cycle Deviation to the HealthKit store.\n\nCycle Deviation notifications include:\n\nPersistent spotting\n\nPersistent spotting, also known as irregular intermenstrual bleeding, is defined as spotting that occurs in at least two of your cycles in the last six months. HealthKit records verified instances using persistentIntermenstrualBleeding samples.\n\nProlonged periods\n\nProlonged periods are defined as menstrual bleeding that lasts for ten or more days, and this has happened at least two times in the last six months. HealthKit records verified instances using prolongedMenstrualPeriods samples.\n\nIrregular cycles\n\nAn irregular cycle is defined as at least a seventeen-day difference between a person’s shortest and longest cycles over the last six months. HealthKit records verified instances using irregularMenstrualCycles samples.\n\nInfrequent periods\n\nAn infrequent period is defined as having a period one or two times in the last six months. HealthKit records verified instances using infrequentMenstrualCycles samples.\n\nUse a HKCategoryValue.notApplicable value with these samples.\n\nImportant\n\nThese samples are read-only. You can request permission to read the samples using this identifier, but you can’t request authorization to share them. This means you can’t save new infrequent menstrual cycle samples to the HealthKit store.\n\nSee Also\nReproductive Health\nstatic let menstrualFlow: HKCategoryTypeIdentifier\nA category sample type that records menstrual cycles.\nstatic let intermenstrualBleeding: HKCategoryTypeIdentifier\nA category sample type that records spotting outside the normal menstruation period.\nstatic let infrequentMenstrualCycles: HKCategoryTypeIdentifier\nA category sample that indicates an infrequent menstrual cycle.\nstatic let persistentIntermenstrualBleeding: HKCategoryTypeIdentifier\nA category sample that indicates persistent intermenstrual bleeding.\nstatic let prolongedMenstrualPeriods: HKCategoryTypeIdentifier\nA category sample that indicates a prolonged menstrual cycle.\nstatic let cervicalMucusQuality: HKCategoryTypeIdentifier\nA category sample type that records the quality of the user’s cervical mucus.\nstatic let ovulationTestResult: HKCategoryTypeIdentifier\nA category sample type that records the result of an ovulation home test.\nstatic let progesteroneTestResult: HKCategoryTypeIdentifier\nA category type that represents the results from a home progesterone test.\nstatic let sexualActivity: HKCategoryTypeIdentifier\nA category sample type that records sexual activity.\nstatic let contraceptive: HKCategoryTypeIdentifier\nA category sample type that records the use of contraceptives.\nstatic let pregnancy: HKCategoryTypeIdentifier\nA category type that records pregnancy.\nstatic let pregnancyTestResult: HKCategoryTypeIdentifier\nA category type that represents the results from a home pregnancy test.\nstatic let lactation: HKCategoryTypeIdentifier\nA category type that records lactation."
  },
  {
    "title": "infrequentMenstrualCycles | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkcategorytypeidentifier/3951061-infrequentmenstrualcycles",
    "html": "Discussion\n\nHealthKit generates Cycle Deviation notifications based on the cycle data a person enters. HealthKit processes this data on their iOS device. If it detects a potential deviation, it sends a notification asking them to verify their logged cycle history. If the person confirms that their cycle history is accurate, HealthKit saves a corresponding sample of the detected Cycle Deviation to the HealthKit store.\n\nCycle Deviation notifications include:\n\nPersistent spotting\n\nPersistent spotting, also known as irregular intermenstrual bleeding, is defined as spotting that occurs in at least two of your cycles in the last six months. HealthKit records verified instances using persistentIntermenstrualBleeding samples.\n\nProlonged periods\n\nProlonged periods are defined as menstrual bleeding that lasts for ten or more days, and this has happened at least two times in the last six months. HealthKit records verified instances using prolongedMenstrualPeriods samples.\n\nIrregular cycles\n\nAn irregular cycle is defined as at least a seventeen-day difference between a person’s shortest and longest cycles over the last six months. HealthKit records verified instances using irregularMenstrualCycles samples.\n\nInfrequent periods\n\nAn infrequent period is defined as having a period one or two times in the last six months. HealthKit records verified instances using infrequentMenstrualCycles samples.\n\nUse a HKCategoryValue.notApplicable value with these samples.\n\nImportant\n\nThese samples are read-only. You can request permission to read the samples using this identifier, but you can’t request authorization to share them. This means you can’t save new infrequent menstrual cycle samples to the HealthKit store.\n\nSee Also\nReproductive Health\nstatic let menstrualFlow: HKCategoryTypeIdentifier\nA category sample type that records menstrual cycles.\nstatic let intermenstrualBleeding: HKCategoryTypeIdentifier\nA category sample type that records spotting outside the normal menstruation period.\nstatic let irregularMenstrualCycles: HKCategoryTypeIdentifier\nA category sample that indicates an irregular menstrual cycle.\nstatic let persistentIntermenstrualBleeding: HKCategoryTypeIdentifier\nA category sample that indicates persistent intermenstrual bleeding.\nstatic let prolongedMenstrualPeriods: HKCategoryTypeIdentifier\nA category sample that indicates a prolonged menstrual cycle.\nstatic let cervicalMucusQuality: HKCategoryTypeIdentifier\nA category sample type that records the quality of the user’s cervical mucus.\nstatic let ovulationTestResult: HKCategoryTypeIdentifier\nA category sample type that records the result of an ovulation home test.\nstatic let progesteroneTestResult: HKCategoryTypeIdentifier\nA category type that represents the results from a home progesterone test.\nstatic let sexualActivity: HKCategoryTypeIdentifier\nA category sample type that records sexual activity.\nstatic let contraceptive: HKCategoryTypeIdentifier\nA category sample type that records the use of contraceptives.\nstatic let pregnancy: HKCategoryTypeIdentifier\nA category type that records pregnancy.\nstatic let pregnancyTestResult: HKCategoryTypeIdentifier\nA category type that represents the results from a home pregnancy test.\nstatic let lactation: HKCategoryTypeIdentifier\nA category type that records lactation."
  },
  {
    "title": "intermenstrualBleeding | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkcategorytypeidentifier/1615418-intermenstrualbleeding",
    "html": "Discussion\n\nUse a HKCategoryValue.notApplicable value with these samples.\n\nSee Also\nReproductive Health\nstatic let menstrualFlow: HKCategoryTypeIdentifier\nA category sample type that records menstrual cycles.\nstatic let infrequentMenstrualCycles: HKCategoryTypeIdentifier\nA category sample that indicates an infrequent menstrual cycle.\nstatic let irregularMenstrualCycles: HKCategoryTypeIdentifier\nA category sample that indicates an irregular menstrual cycle.\nstatic let persistentIntermenstrualBleeding: HKCategoryTypeIdentifier\nA category sample that indicates persistent intermenstrual bleeding.\nstatic let prolongedMenstrualPeriods: HKCategoryTypeIdentifier\nA category sample that indicates a prolonged menstrual cycle.\nstatic let cervicalMucusQuality: HKCategoryTypeIdentifier\nA category sample type that records the quality of the user’s cervical mucus.\nstatic let ovulationTestResult: HKCategoryTypeIdentifier\nA category sample type that records the result of an ovulation home test.\nstatic let progesteroneTestResult: HKCategoryTypeIdentifier\nA category type that represents the results from a home progesterone test.\nstatic let sexualActivity: HKCategoryTypeIdentifier\nA category sample type that records sexual activity.\nstatic let contraceptive: HKCategoryTypeIdentifier\nA category sample type that records the use of contraceptives.\nstatic let pregnancy: HKCategoryTypeIdentifier\nA category type that records pregnancy.\nstatic let pregnancyTestResult: HKCategoryTypeIdentifier\nA category type that represents the results from a home pregnancy test.\nstatic let lactation: HKCategoryTypeIdentifier\nA category type that records lactation.\nRelated Documentation\nenum HKCategoryValue\nCategories that are undefined.\nstruct HKCategoryTypeIdentifier\nIdentifiers for creating category types.\nclass HKCategoryType\nA type that identifies samples that contain a value from a small set of possible values.\nclass HKCategorySample\nA sample with values from a short list of possible values."
  },
  {
    "title": "appleSleepingWristTemperature | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquantitytypeidentifier/3951065-applesleepingwristtemperature",
    "html": "Discussion\n\nApple Watch Series 8 and Apple Watch Ultra can sample a person’s wrist temperature while they sleep. A supported watch measures temperature from both sensors every five seconds overnight during sleep. The watch then aggregates this data to a single appleSleepingWristTemperature sample. It corrects this sample for environmental bias and calculates a single value that represents the wrist temperature over the entire night.\n\nBody temperature naturally fluctuates from night to night, and external factors, like the sleep environment, can also affect the measurements. Other factors that can affect a person’s relative temperature include exercise, jet lag, menstrual cycles, or illness.\n\nCycle tracking uses a person’s sleeping wrist temperature data to provide a retrospective estimate of when they likely ovulated. It also combines this data with heart rate and logged cycle data to provide improved predictions about their cycle.\n\nTo enable sleeping wrist temperature measurements, ensure Sleep Focus is on and that somone is wearing Apple Watch while sleeping.\n\nApple Watch records the absolute wrist temperature value; however, Health displays this data as a relative value, based on a person’s baseline. Health needs to calculate this baseline, so it won’t display the wrist temperature until it has gathered about five nights of data. However, Apple Watch records appleSleepingWristTemperature samples starting with the first night, and you can read them immediately from the HealthKit store.\n\nSleeping wrist temperature samples use temperature units (described in HKUnit) and measure discrete values (described in HKQuantityAggregationStyle).\n\nImportant\n\nThese samples are read-only. You can request permission to read the samples using this identifier, but you can’t request authorization to share them. This means you can’t save new sleeping wrist temperature samples to the HealthKit store.\n\nSee Also\nBody measurements\nstatic let height: HKQuantityTypeIdentifier\nA quantity sample type that measures the user’s height.\nstatic let bodyMass: HKQuantityTypeIdentifier\nA quantity sample type that measures the user’s weight.\nstatic let bodyMassIndex: HKQuantityTypeIdentifier\nA quantity sample type that measures the user’s body mass index.\nstatic let leanBodyMass: HKQuantityTypeIdentifier\nA quantity sample type that measures the user’s lean body mass.\nstatic let bodyFatPercentage: HKQuantityTypeIdentifier\nA quantity sample type that measures the user’s body fat percentage.\nstatic let waistCircumference: HKQuantityTypeIdentifier\nA quantity sample type that measures the user’s waist circumference."
  },
  {
    "title": "waistCircumference | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquantitytypeidentifier/2867758-waistcircumference",
    "html": "Discussion\n\nThese samples use length units (described in HKUnit) and measure discrete values (described in HKQuantityAggregationStyle).\n\nSee Also\nBody measurements\nstatic let height: HKQuantityTypeIdentifier\nA quantity sample type that measures the user’s height.\nstatic let bodyMass: HKQuantityTypeIdentifier\nA quantity sample type that measures the user’s weight.\nstatic let bodyMassIndex: HKQuantityTypeIdentifier\nA quantity sample type that measures the user’s body mass index.\nstatic let leanBodyMass: HKQuantityTypeIdentifier\nA quantity sample type that measures the user’s lean body mass.\nstatic let bodyFatPercentage: HKQuantityTypeIdentifier\nA quantity sample type that measures the user’s body fat percentage.\nstatic let appleSleepingWristTemperature: HKQuantityTypeIdentifier\nA quantity sample type that records the wrist temperature during sleep."
  },
  {
    "title": "nikeFuel | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquantitytypeidentifier/1615522-nikefuel",
    "html": "Discussion\n\nThese samples use count units (described in HKUnit) and measure cumulative values (described in HKQuantityAggregationStyle).\n\nSee Also\nActivity\nstatic let stepCount: HKQuantityTypeIdentifier\nA quantity sample type that measures the number of steps the user has taken.\nstatic let distanceWalkingRunning: HKQuantityTypeIdentifier\nA quantity sample type that measures the distance the user has moved by walking or running.\nstatic let runningGroundContactTime: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of time the runner’s foot is in contact with the ground while running.\nstatic let runningPower: HKQuantityTypeIdentifier\nA quantity sample type that measures the rate of work required for the runner to maintain their speed.\nstatic let runningSpeed: HKQuantityTypeIdentifier\nA quantity sample type that measures the runner’s speed.\nstatic let runningStrideLength: HKQuantityTypeIdentifier\nA quantity sample type that measures the distance covered by a single step while running.\nstatic let runningVerticalOscillation: HKQuantityTypeIdentifier\nA quantity sample type measuring pelvis vertical range of motion during a single running stride.\nstatic let distanceCycling: HKQuantityTypeIdentifier\nA quantity sample type that measures the distance the user has moved by cycling.\nstatic let pushCount: HKQuantityTypeIdentifier\nA quantity sample type that measures the number of pushes that the user has performed while using a wheelchair.\nstatic let distanceWheelchair: HKQuantityTypeIdentifier\nA quantity sample type that measures the distance the user has moved using a wheelchair.\nstatic let swimmingStrokeCount: HKQuantityTypeIdentifier\nA quantity sample type that measures the number of strokes performed while swimming.\nstatic let distanceSwimming: HKQuantityTypeIdentifier\nA quantity sample type that measures the distance the user has moved while swimming.\nstatic let distanceDownhillSnowSports: HKQuantityTypeIdentifier\nA quantity sample type that measures the distance the user has traveled while skiing or snowboarding.\nstatic let basalEnergyBurned: HKQuantityTypeIdentifier\nA quantity sample type that measures the resting energy burned by the user.\nstatic let activeEnergyBurned: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of active energy the user has burned.\nstatic let flightsClimbed: HKQuantityTypeIdentifier\nA quantity sample type that measures the number flights of stairs that the user has climbed.\nstatic let appleExerciseTime: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of time the user spent exercising.\nstatic let appleMoveTime: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of time the user has spent performing activities that involve full-body movements during the specified day.\nstatic let appleStandTime: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of time the user has spent standing.\nstatic let vo2Max: HKQuantityTypeIdentifier\nA quantity sample that measures the maximal oxygen consumption during exercise.\nRelated Documentation\nstruct HKQuantityTypeIdentifier\nThe identifiers that create quantity type objects.\nclass HKQuantitySample\nA sample that represents a quantity, including the value and the units.\nclass HKQuantity\nAn object that stores a value for a given unit."
  },
  {
    "title": "activeEnergyBurned | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquantitytypeidentifier/1615771-activeenergyburned",
    "html": "Discussion\n\nActive energy is the energy that the user has burned due to physical activity and exercise. These samples should not include the resting energy burned during the sample’s duration. Use the health store’s splitTotalEnergy(_:start:end:resultsHandler:) method to split a workout’s total energy burned into the active and resting portions, and then save each portion in its own sample.\n\nActive energy samples use energy units (described in HKUnit) and measure cumulative values (described in HKQuantityAggregationStyle).\n\nSee Also\nActivity\nstatic let stepCount: HKQuantityTypeIdentifier\nA quantity sample type that measures the number of steps the user has taken.\nstatic let distanceWalkingRunning: HKQuantityTypeIdentifier\nA quantity sample type that measures the distance the user has moved by walking or running.\nstatic let runningGroundContactTime: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of time the runner’s foot is in contact with the ground while running.\nstatic let runningPower: HKQuantityTypeIdentifier\nA quantity sample type that measures the rate of work required for the runner to maintain their speed.\nstatic let runningSpeed: HKQuantityTypeIdentifier\nA quantity sample type that measures the runner’s speed.\nstatic let runningStrideLength: HKQuantityTypeIdentifier\nA quantity sample type that measures the distance covered by a single step while running.\nstatic let runningVerticalOscillation: HKQuantityTypeIdentifier\nA quantity sample type measuring pelvis vertical range of motion during a single running stride.\nstatic let distanceCycling: HKQuantityTypeIdentifier\nA quantity sample type that measures the distance the user has moved by cycling.\nstatic let pushCount: HKQuantityTypeIdentifier\nA quantity sample type that measures the number of pushes that the user has performed while using a wheelchair.\nstatic let distanceWheelchair: HKQuantityTypeIdentifier\nA quantity sample type that measures the distance the user has moved using a wheelchair.\nstatic let swimmingStrokeCount: HKQuantityTypeIdentifier\nA quantity sample type that measures the number of strokes performed while swimming.\nstatic let distanceSwimming: HKQuantityTypeIdentifier\nA quantity sample type that measures the distance the user has moved while swimming.\nstatic let distanceDownhillSnowSports: HKQuantityTypeIdentifier\nA quantity sample type that measures the distance the user has traveled while skiing or snowboarding.\nstatic let basalEnergyBurned: HKQuantityTypeIdentifier\nA quantity sample type that measures the resting energy burned by the user.\nstatic let flightsClimbed: HKQuantityTypeIdentifier\nA quantity sample type that measures the number flights of stairs that the user has climbed.\nstatic let nikeFuel: HKQuantityTypeIdentifier\nA quantity sample type that measures the number of NikeFuel points the user has earned.\nstatic let appleExerciseTime: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of time the user spent exercising.\nstatic let appleMoveTime: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of time the user has spent performing activities that involve full-body movements during the specified day.\nstatic let appleStandTime: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of time the user has spent standing.\nstatic let vo2Max: HKQuantityTypeIdentifier\nA quantity sample that measures the maximal oxygen consumption during exercise.\nRelated Documentation\nstruct HKQuantityTypeIdentifier\nThe identifiers that create quantity type objects.\nclass HKQuantitySample\nA sample that represents a quantity, including the value and the units.\nclass HKQuantity\nAn object that stores a value for a given unit."
  },
  {
    "title": "distanceDownhillSnowSports | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquantitytypeidentifier/2879137-distancedownhillsnowsports",
    "html": "Discussion\n\nThese samples use length units (described in HKUnit) and measure cumulative values (described in HKQuantityAggregationStyle).\n\nSee Also\nActivity\nstatic let stepCount: HKQuantityTypeIdentifier\nA quantity sample type that measures the number of steps the user has taken.\nstatic let distanceWalkingRunning: HKQuantityTypeIdentifier\nA quantity sample type that measures the distance the user has moved by walking or running.\nstatic let runningGroundContactTime: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of time the runner’s foot is in contact with the ground while running.\nstatic let runningPower: HKQuantityTypeIdentifier\nA quantity sample type that measures the rate of work required for the runner to maintain their speed.\nstatic let runningSpeed: HKQuantityTypeIdentifier\nA quantity sample type that measures the runner’s speed.\nstatic let runningStrideLength: HKQuantityTypeIdentifier\nA quantity sample type that measures the distance covered by a single step while running.\nstatic let runningVerticalOscillation: HKQuantityTypeIdentifier\nA quantity sample type measuring pelvis vertical range of motion during a single running stride.\nstatic let distanceCycling: HKQuantityTypeIdentifier\nA quantity sample type that measures the distance the user has moved by cycling.\nstatic let pushCount: HKQuantityTypeIdentifier\nA quantity sample type that measures the number of pushes that the user has performed while using a wheelchair.\nstatic let distanceWheelchair: HKQuantityTypeIdentifier\nA quantity sample type that measures the distance the user has moved using a wheelchair.\nstatic let swimmingStrokeCount: HKQuantityTypeIdentifier\nA quantity sample type that measures the number of strokes performed while swimming.\nstatic let distanceSwimming: HKQuantityTypeIdentifier\nA quantity sample type that measures the distance the user has moved while swimming.\nstatic let basalEnergyBurned: HKQuantityTypeIdentifier\nA quantity sample type that measures the resting energy burned by the user.\nstatic let activeEnergyBurned: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of active energy the user has burned.\nstatic let flightsClimbed: HKQuantityTypeIdentifier\nA quantity sample type that measures the number flights of stairs that the user has climbed.\nstatic let nikeFuel: HKQuantityTypeIdentifier\nA quantity sample type that measures the number of NikeFuel points the user has earned.\nstatic let appleExerciseTime: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of time the user spent exercising.\nstatic let appleMoveTime: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of time the user has spent performing activities that involve full-body movements during the specified day.\nstatic let appleStandTime: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of time the user has spent standing.\nstatic let vo2Max: HKQuantityTypeIdentifier\nA quantity sample that measures the maximal oxygen consumption during exercise."
  },
  {
    "title": "distanceSwimming | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquantitytypeidentifier/2344686-distanceswimming",
    "html": "Discussion\n\nThese samples use length units (described in HKUnit) and measure cumulative values (described in HKQuantityAggregationStyle).\n\nSee Also\nActivity\nstatic let stepCount: HKQuantityTypeIdentifier\nA quantity sample type that measures the number of steps the user has taken.\nstatic let distanceWalkingRunning: HKQuantityTypeIdentifier\nA quantity sample type that measures the distance the user has moved by walking or running.\nstatic let runningGroundContactTime: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of time the runner’s foot is in contact with the ground while running.\nstatic let runningPower: HKQuantityTypeIdentifier\nA quantity sample type that measures the rate of work required for the runner to maintain their speed.\nstatic let runningSpeed: HKQuantityTypeIdentifier\nA quantity sample type that measures the runner’s speed.\nstatic let runningStrideLength: HKQuantityTypeIdentifier\nA quantity sample type that measures the distance covered by a single step while running.\nstatic let runningVerticalOscillation: HKQuantityTypeIdentifier\nA quantity sample type measuring pelvis vertical range of motion during a single running stride.\nstatic let distanceCycling: HKQuantityTypeIdentifier\nA quantity sample type that measures the distance the user has moved by cycling.\nstatic let pushCount: HKQuantityTypeIdentifier\nA quantity sample type that measures the number of pushes that the user has performed while using a wheelchair.\nstatic let distanceWheelchair: HKQuantityTypeIdentifier\nA quantity sample type that measures the distance the user has moved using a wheelchair.\nstatic let swimmingStrokeCount: HKQuantityTypeIdentifier\nA quantity sample type that measures the number of strokes performed while swimming.\nstatic let distanceDownhillSnowSports: HKQuantityTypeIdentifier\nA quantity sample type that measures the distance the user has traveled while skiing or snowboarding.\nstatic let basalEnergyBurned: HKQuantityTypeIdentifier\nA quantity sample type that measures the resting energy burned by the user.\nstatic let activeEnergyBurned: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of active energy the user has burned.\nstatic let flightsClimbed: HKQuantityTypeIdentifier\nA quantity sample type that measures the number flights of stairs that the user has climbed.\nstatic let nikeFuel: HKQuantityTypeIdentifier\nA quantity sample type that measures the number of NikeFuel points the user has earned.\nstatic let appleExerciseTime: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of time the user spent exercising.\nstatic let appleMoveTime: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of time the user has spent performing activities that involve full-body movements during the specified day.\nstatic let appleStandTime: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of time the user has spent standing.\nstatic let vo2Max: HKQuantityTypeIdentifier\nA quantity sample that measures the maximal oxygen consumption during exercise.\nRelated Documentation\nstruct HKQuantityTypeIdentifier\nThe identifiers that create quantity type objects.\nclass HKQuantitySample\nA sample that represents a quantity, including the value and the units.\nclass HKQuantity\nAn object that stores a value for a given unit."
  },
  {
    "title": "swimmingStrokeCount | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquantitytypeidentifier/2344687-swimmingstrokecount",
    "html": "Discussion\n\nThese samples use count units (described in HKUnit) and measure cumulative values (described in HKQuantityAggregationStyle).\n\nSee Also\nActivity\nstatic let stepCount: HKQuantityTypeIdentifier\nA quantity sample type that measures the number of steps the user has taken.\nstatic let distanceWalkingRunning: HKQuantityTypeIdentifier\nA quantity sample type that measures the distance the user has moved by walking or running.\nstatic let runningGroundContactTime: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of time the runner’s foot is in contact with the ground while running.\nstatic let runningPower: HKQuantityTypeIdentifier\nA quantity sample type that measures the rate of work required for the runner to maintain their speed.\nstatic let runningSpeed: HKQuantityTypeIdentifier\nA quantity sample type that measures the runner’s speed.\nstatic let runningStrideLength: HKQuantityTypeIdentifier\nA quantity sample type that measures the distance covered by a single step while running.\nstatic let runningVerticalOscillation: HKQuantityTypeIdentifier\nA quantity sample type measuring pelvis vertical range of motion during a single running stride.\nstatic let distanceCycling: HKQuantityTypeIdentifier\nA quantity sample type that measures the distance the user has moved by cycling.\nstatic let pushCount: HKQuantityTypeIdentifier\nA quantity sample type that measures the number of pushes that the user has performed while using a wheelchair.\nstatic let distanceWheelchair: HKQuantityTypeIdentifier\nA quantity sample type that measures the distance the user has moved using a wheelchair.\nstatic let distanceSwimming: HKQuantityTypeIdentifier\nA quantity sample type that measures the distance the user has moved while swimming.\nstatic let distanceDownhillSnowSports: HKQuantityTypeIdentifier\nA quantity sample type that measures the distance the user has traveled while skiing or snowboarding.\nstatic let basalEnergyBurned: HKQuantityTypeIdentifier\nA quantity sample type that measures the resting energy burned by the user.\nstatic let activeEnergyBurned: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of active energy the user has burned.\nstatic let flightsClimbed: HKQuantityTypeIdentifier\nA quantity sample type that measures the number flights of stairs that the user has climbed.\nstatic let nikeFuel: HKQuantityTypeIdentifier\nA quantity sample type that measures the number of NikeFuel points the user has earned.\nstatic let appleExerciseTime: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of time the user spent exercising.\nstatic let appleMoveTime: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of time the user has spent performing activities that involve full-body movements during the specified day.\nstatic let appleStandTime: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of time the user has spent standing.\nstatic let vo2Max: HKQuantityTypeIdentifier\nA quantity sample that measures the maximal oxygen consumption during exercise.\nRelated Documentation\nstruct HKQuantityTypeIdentifier\nThe identifiers that create quantity type objects.\nclass HKQuantitySample\nA sample that represents a quantity, including the value and the units.\nclass HKQuantity\nAn object that stores a value for a given unit."
  },
  {
    "title": "distanceWheelchair | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquantitytypeidentifier/1771741-distancewheelchair",
    "html": "Discussion\n\nThese samples use length units (described in HKUnit) and measure cumulative values (described in HKQuantityAggregationStyle).\n\nSee Also\nActivity\nstatic let stepCount: HKQuantityTypeIdentifier\nA quantity sample type that measures the number of steps the user has taken.\nstatic let distanceWalkingRunning: HKQuantityTypeIdentifier\nA quantity sample type that measures the distance the user has moved by walking or running.\nstatic let runningGroundContactTime: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of time the runner’s foot is in contact with the ground while running.\nstatic let runningPower: HKQuantityTypeIdentifier\nA quantity sample type that measures the rate of work required for the runner to maintain their speed.\nstatic let runningSpeed: HKQuantityTypeIdentifier\nA quantity sample type that measures the runner’s speed.\nstatic let runningStrideLength: HKQuantityTypeIdentifier\nA quantity sample type that measures the distance covered by a single step while running.\nstatic let runningVerticalOscillation: HKQuantityTypeIdentifier\nA quantity sample type measuring pelvis vertical range of motion during a single running stride.\nstatic let distanceCycling: HKQuantityTypeIdentifier\nA quantity sample type that measures the distance the user has moved by cycling.\nstatic let pushCount: HKQuantityTypeIdentifier\nA quantity sample type that measures the number of pushes that the user has performed while using a wheelchair.\nstatic let swimmingStrokeCount: HKQuantityTypeIdentifier\nA quantity sample type that measures the number of strokes performed while swimming.\nstatic let distanceSwimming: HKQuantityTypeIdentifier\nA quantity sample type that measures the distance the user has moved while swimming.\nstatic let distanceDownhillSnowSports: HKQuantityTypeIdentifier\nA quantity sample type that measures the distance the user has traveled while skiing or snowboarding.\nstatic let basalEnergyBurned: HKQuantityTypeIdentifier\nA quantity sample type that measures the resting energy burned by the user.\nstatic let activeEnergyBurned: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of active energy the user has burned.\nstatic let flightsClimbed: HKQuantityTypeIdentifier\nA quantity sample type that measures the number flights of stairs that the user has climbed.\nstatic let nikeFuel: HKQuantityTypeIdentifier\nA quantity sample type that measures the number of NikeFuel points the user has earned.\nstatic let appleExerciseTime: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of time the user spent exercising.\nstatic let appleMoveTime: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of time the user has spent performing activities that involve full-body movements during the specified day.\nstatic let appleStandTime: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of time the user has spent standing.\nstatic let vo2Max: HKQuantityTypeIdentifier\nA quantity sample that measures the maximal oxygen consumption during exercise.\nRelated Documentation\nstruct HKQuantityTypeIdentifier\nThe identifiers that create quantity type objects.\nclass HKQuantitySample\nA sample that represents a quantity, including the value and the units.\nclass HKQuantity\nAn object that stores a value for a given unit."
  },
  {
    "title": "pushCount | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquantitytypeidentifier/1779580-pushcount",
    "html": "Discussion\n\nThese samples use count units (described in HKUnit) and measure cumulative values (described in HKQuantityAggregationStyle).\n\nSee Also\nActivity\nstatic let stepCount: HKQuantityTypeIdentifier\nA quantity sample type that measures the number of steps the user has taken.\nstatic let distanceWalkingRunning: HKQuantityTypeIdentifier\nA quantity sample type that measures the distance the user has moved by walking or running.\nstatic let runningGroundContactTime: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of time the runner’s foot is in contact with the ground while running.\nstatic let runningPower: HKQuantityTypeIdentifier\nA quantity sample type that measures the rate of work required for the runner to maintain their speed.\nstatic let runningSpeed: HKQuantityTypeIdentifier\nA quantity sample type that measures the runner’s speed.\nstatic let runningStrideLength: HKQuantityTypeIdentifier\nA quantity sample type that measures the distance covered by a single step while running.\nstatic let runningVerticalOscillation: HKQuantityTypeIdentifier\nA quantity sample type measuring pelvis vertical range of motion during a single running stride.\nstatic let distanceCycling: HKQuantityTypeIdentifier\nA quantity sample type that measures the distance the user has moved by cycling.\nstatic let distanceWheelchair: HKQuantityTypeIdentifier\nA quantity sample type that measures the distance the user has moved using a wheelchair.\nstatic let swimmingStrokeCount: HKQuantityTypeIdentifier\nA quantity sample type that measures the number of strokes performed while swimming.\nstatic let distanceSwimming: HKQuantityTypeIdentifier\nA quantity sample type that measures the distance the user has moved while swimming.\nstatic let distanceDownhillSnowSports: HKQuantityTypeIdentifier\nA quantity sample type that measures the distance the user has traveled while skiing or snowboarding.\nstatic let basalEnergyBurned: HKQuantityTypeIdentifier\nA quantity sample type that measures the resting energy burned by the user.\nstatic let activeEnergyBurned: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of active energy the user has burned.\nstatic let flightsClimbed: HKQuantityTypeIdentifier\nA quantity sample type that measures the number flights of stairs that the user has climbed.\nstatic let nikeFuel: HKQuantityTypeIdentifier\nA quantity sample type that measures the number of NikeFuel points the user has earned.\nstatic let appleExerciseTime: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of time the user spent exercising.\nstatic let appleMoveTime: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of time the user has spent performing activities that involve full-body movements during the specified day.\nstatic let appleStandTime: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of time the user has spent standing.\nstatic let vo2Max: HKQuantityTypeIdentifier\nA quantity sample that measures the maximal oxygen consumption during exercise.\nRelated Documentation\nstruct HKQuantityTypeIdentifier\nThe identifiers that create quantity type objects.\nclass HKQuantitySample\nA sample that represents a quantity, including the value and the units.\nclass HKQuantity\nAn object that stores a value for a given unit."
  },
  {
    "title": "distanceCycling | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquantitytypeidentifier/1615477-distancecycling",
    "html": "Discussion\n\nThese samples use length units (described in HKUnit) and measure cumulative values (described in HKQuantityAggregationStyle).\n\nSee Also\nActivity\nstatic let stepCount: HKQuantityTypeIdentifier\nA quantity sample type that measures the number of steps the user has taken.\nstatic let distanceWalkingRunning: HKQuantityTypeIdentifier\nA quantity sample type that measures the distance the user has moved by walking or running.\nstatic let runningGroundContactTime: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of time the runner’s foot is in contact with the ground while running.\nstatic let runningPower: HKQuantityTypeIdentifier\nA quantity sample type that measures the rate of work required for the runner to maintain their speed.\nstatic let runningSpeed: HKQuantityTypeIdentifier\nA quantity sample type that measures the runner’s speed.\nstatic let runningStrideLength: HKQuantityTypeIdentifier\nA quantity sample type that measures the distance covered by a single step while running.\nstatic let runningVerticalOscillation: HKQuantityTypeIdentifier\nA quantity sample type measuring pelvis vertical range of motion during a single running stride.\nstatic let pushCount: HKQuantityTypeIdentifier\nA quantity sample type that measures the number of pushes that the user has performed while using a wheelchair.\nstatic let distanceWheelchair: HKQuantityTypeIdentifier\nA quantity sample type that measures the distance the user has moved using a wheelchair.\nstatic let swimmingStrokeCount: HKQuantityTypeIdentifier\nA quantity sample type that measures the number of strokes performed while swimming.\nstatic let distanceSwimming: HKQuantityTypeIdentifier\nA quantity sample type that measures the distance the user has moved while swimming.\nstatic let distanceDownhillSnowSports: HKQuantityTypeIdentifier\nA quantity sample type that measures the distance the user has traveled while skiing or snowboarding.\nstatic let basalEnergyBurned: HKQuantityTypeIdentifier\nA quantity sample type that measures the resting energy burned by the user.\nstatic let activeEnergyBurned: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of active energy the user has burned.\nstatic let flightsClimbed: HKQuantityTypeIdentifier\nA quantity sample type that measures the number flights of stairs that the user has climbed.\nstatic let nikeFuel: HKQuantityTypeIdentifier\nA quantity sample type that measures the number of NikeFuel points the user has earned.\nstatic let appleExerciseTime: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of time the user spent exercising.\nstatic let appleMoveTime: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of time the user has spent performing activities that involve full-body movements during the specified day.\nstatic let appleStandTime: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of time the user has spent standing.\nstatic let vo2Max: HKQuantityTypeIdentifier\nA quantity sample that measures the maximal oxygen consumption during exercise.\nRelated Documentation\nstruct HKQuantityTypeIdentifier\nThe identifiers that create quantity type objects.\nclass HKQuantitySample\nA sample that represents a quantity, including the value and the units.\nclass HKQuantity\nAn object that stores a value for a given unit."
  },
  {
    "title": "runningGroundContactTime | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquantitytypeidentifier/3929729-runninggroundcontacttime",
    "html": "Discussion\n\nThese samples use time units (described in HKUnit) and measure discrete values (described in HKQuantityAggregationStyle). During outdoor running workouts, the system automatically records ground contact time on Apple Watch SE and Series 6 and later.\n\nSee Also\nActivity\nstatic let stepCount: HKQuantityTypeIdentifier\nA quantity sample type that measures the number of steps the user has taken.\nstatic let distanceWalkingRunning: HKQuantityTypeIdentifier\nA quantity sample type that measures the distance the user has moved by walking or running.\nstatic let runningPower: HKQuantityTypeIdentifier\nA quantity sample type that measures the rate of work required for the runner to maintain their speed.\nstatic let runningSpeed: HKQuantityTypeIdentifier\nA quantity sample type that measures the runner’s speed.\nstatic let runningStrideLength: HKQuantityTypeIdentifier\nA quantity sample type that measures the distance covered by a single step while running.\nstatic let runningVerticalOscillation: HKQuantityTypeIdentifier\nA quantity sample type measuring pelvis vertical range of motion during a single running stride.\nstatic let distanceCycling: HKQuantityTypeIdentifier\nA quantity sample type that measures the distance the user has moved by cycling.\nstatic let pushCount: HKQuantityTypeIdentifier\nA quantity sample type that measures the number of pushes that the user has performed while using a wheelchair.\nstatic let distanceWheelchair: HKQuantityTypeIdentifier\nA quantity sample type that measures the distance the user has moved using a wheelchair.\nstatic let swimmingStrokeCount: HKQuantityTypeIdentifier\nA quantity sample type that measures the number of strokes performed while swimming.\nstatic let distanceSwimming: HKQuantityTypeIdentifier\nA quantity sample type that measures the distance the user has moved while swimming.\nstatic let distanceDownhillSnowSports: HKQuantityTypeIdentifier\nA quantity sample type that measures the distance the user has traveled while skiing or snowboarding.\nstatic let basalEnergyBurned: HKQuantityTypeIdentifier\nA quantity sample type that measures the resting energy burned by the user.\nstatic let activeEnergyBurned: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of active energy the user has burned.\nstatic let flightsClimbed: HKQuantityTypeIdentifier\nA quantity sample type that measures the number flights of stairs that the user has climbed.\nstatic let nikeFuel: HKQuantityTypeIdentifier\nA quantity sample type that measures the number of NikeFuel points the user has earned.\nstatic let appleExerciseTime: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of time the user spent exercising.\nstatic let appleMoveTime: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of time the user has spent performing activities that involve full-body movements during the specified day.\nstatic let appleStandTime: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of time the user has spent standing.\nstatic let vo2Max: HKQuantityTypeIdentifier\nA quantity sample that measures the maximal oxygen consumption during exercise.\nRelated Documentation\nstatic let appleWalkingSteadiness: HKQuantityTypeIdentifier\nA quantity sample type that measures the steadiness of the user’s gait.\nstatic let appleWalkingSteadinessEvent: HKCategoryTypeIdentifier\nA category sample type that records an incident where the user showed a reduced score for their gait’s steadiness.\nstatic let sixMinuteWalkTestDistance: HKQuantityTypeIdentifier\nA quantity sample type that stores the distance a user can walk during a six-minute walk test.\nstatic let walkingSpeed: HKQuantityTypeIdentifier\nA quantity sample type that measures the user’s average speed when walking steadily over flat ground.\nstatic let walkingStepLength: HKQuantityTypeIdentifier\nA quantity sample type that measures the average length of the user’s step when walking steadily over flat ground.\nstatic let walkingAsymmetryPercentage: HKQuantityTypeIdentifier\nA quantity sample type that measures the percentage of steps in which one foot moves at a different speed than the other when walking on flat ground.\nstatic let walkingDoubleSupportPercentage: HKQuantityTypeIdentifier\nA quantity sample type that measures the percentage of time when both of the user’s feet touch the ground while walking steadily over flat ground.\nstatic let stairAscentSpeed: HKQuantityTypeIdentifier\nA quantity sample type measuring the user’s speed while climbing a flight of stairs.\nstatic let stairDescentSpeed: HKQuantityTypeIdentifier\nA quantity sample type measuring the user’s speed while descending a flight of stairs."
  },
  {
    "title": "runningVerticalOscillation | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquantitytypeidentifier/3929734-runningverticaloscillation",
    "html": "Discussion\n\nThese samples use length units (described in HKUnit) and measure discrete values (described in HKQuantityAggregationStyle). During outdoor running workouts, the system automatically records vertical oscillation on Apple Watch SE and Series 6 and later.\n\nSee Also\nActivity\nstatic let stepCount: HKQuantityTypeIdentifier\nA quantity sample type that measures the number of steps the user has taken.\nstatic let distanceWalkingRunning: HKQuantityTypeIdentifier\nA quantity sample type that measures the distance the user has moved by walking or running.\nstatic let runningGroundContactTime: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of time the runner’s foot is in contact with the ground while running.\nstatic let runningPower: HKQuantityTypeIdentifier\nA quantity sample type that measures the rate of work required for the runner to maintain their speed.\nstatic let runningSpeed: HKQuantityTypeIdentifier\nA quantity sample type that measures the runner’s speed.\nstatic let runningStrideLength: HKQuantityTypeIdentifier\nA quantity sample type that measures the distance covered by a single step while running.\nstatic let distanceCycling: HKQuantityTypeIdentifier\nA quantity sample type that measures the distance the user has moved by cycling.\nstatic let pushCount: HKQuantityTypeIdentifier\nA quantity sample type that measures the number of pushes that the user has performed while using a wheelchair.\nstatic let distanceWheelchair: HKQuantityTypeIdentifier\nA quantity sample type that measures the distance the user has moved using a wheelchair.\nstatic let swimmingStrokeCount: HKQuantityTypeIdentifier\nA quantity sample type that measures the number of strokes performed while swimming.\nstatic let distanceSwimming: HKQuantityTypeIdentifier\nA quantity sample type that measures the distance the user has moved while swimming.\nstatic let distanceDownhillSnowSports: HKQuantityTypeIdentifier\nA quantity sample type that measures the distance the user has traveled while skiing or snowboarding.\nstatic let basalEnergyBurned: HKQuantityTypeIdentifier\nA quantity sample type that measures the resting energy burned by the user.\nstatic let activeEnergyBurned: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of active energy the user has burned.\nstatic let flightsClimbed: HKQuantityTypeIdentifier\nA quantity sample type that measures the number flights of stairs that the user has climbed.\nstatic let nikeFuel: HKQuantityTypeIdentifier\nA quantity sample type that measures the number of NikeFuel points the user has earned.\nstatic let appleExerciseTime: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of time the user spent exercising.\nstatic let appleMoveTime: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of time the user has spent performing activities that involve full-body movements during the specified day.\nstatic let appleStandTime: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of time the user has spent standing.\nstatic let vo2Max: HKQuantityTypeIdentifier\nA quantity sample that measures the maximal oxygen consumption during exercise.\nRelated Documentation\nstatic let appleWalkingSteadiness: HKQuantityTypeIdentifier\nA quantity sample type that measures the steadiness of the user’s gait.\nstatic let appleWalkingSteadinessEvent: HKCategoryTypeIdentifier\nA category sample type that records an incident where the user showed a reduced score for their gait’s steadiness.\nstatic let sixMinuteWalkTestDistance: HKQuantityTypeIdentifier\nA quantity sample type that stores the distance a user can walk during a six-minute walk test.\nstatic let walkingSpeed: HKQuantityTypeIdentifier\nA quantity sample type that measures the user’s average speed when walking steadily over flat ground.\nstatic let walkingStepLength: HKQuantityTypeIdentifier\nA quantity sample type that measures the average length of the user’s step when walking steadily over flat ground.\nstatic let walkingAsymmetryPercentage: HKQuantityTypeIdentifier\nA quantity sample type that measures the percentage of steps in which one foot moves at a different speed than the other when walking on flat ground.\nstatic let walkingDoubleSupportPercentage: HKQuantityTypeIdentifier\nA quantity sample type that measures the percentage of time when both of the user’s feet touch the ground while walking steadily over flat ground.\nstatic let stairAscentSpeed: HKQuantityTypeIdentifier\nA quantity sample type measuring the user’s speed while climbing a flight of stairs.\nstatic let stairDescentSpeed: HKQuantityTypeIdentifier\nA quantity sample type measuring the user’s speed while descending a flight of stairs."
  },
  {
    "title": "runningPower | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquantitytypeidentifier/3929730-runningpower",
    "html": "Discussion\n\nThese samples use power units (described in HKUnit) and measure discrete values (described in HKQuantityAggregationStyle). During outdoor running workouts, the system automatically records running power samples on Apple Watch SE and Series 6 and later.\n\nSee Also\nActivity\nstatic let stepCount: HKQuantityTypeIdentifier\nA quantity sample type that measures the number of steps the user has taken.\nstatic let distanceWalkingRunning: HKQuantityTypeIdentifier\nA quantity sample type that measures the distance the user has moved by walking or running.\nstatic let runningGroundContactTime: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of time the runner’s foot is in contact with the ground while running.\nstatic let runningSpeed: HKQuantityTypeIdentifier\nA quantity sample type that measures the runner’s speed.\nstatic let runningStrideLength: HKQuantityTypeIdentifier\nA quantity sample type that measures the distance covered by a single step while running.\nstatic let runningVerticalOscillation: HKQuantityTypeIdentifier\nA quantity sample type measuring pelvis vertical range of motion during a single running stride.\nstatic let distanceCycling: HKQuantityTypeIdentifier\nA quantity sample type that measures the distance the user has moved by cycling.\nstatic let pushCount: HKQuantityTypeIdentifier\nA quantity sample type that measures the number of pushes that the user has performed while using a wheelchair.\nstatic let distanceWheelchair: HKQuantityTypeIdentifier\nA quantity sample type that measures the distance the user has moved using a wheelchair.\nstatic let swimmingStrokeCount: HKQuantityTypeIdentifier\nA quantity sample type that measures the number of strokes performed while swimming.\nstatic let distanceSwimming: HKQuantityTypeIdentifier\nA quantity sample type that measures the distance the user has moved while swimming.\nstatic let distanceDownhillSnowSports: HKQuantityTypeIdentifier\nA quantity sample type that measures the distance the user has traveled while skiing or snowboarding.\nstatic let basalEnergyBurned: HKQuantityTypeIdentifier\nA quantity sample type that measures the resting energy burned by the user.\nstatic let activeEnergyBurned: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of active energy the user has burned.\nstatic let flightsClimbed: HKQuantityTypeIdentifier\nA quantity sample type that measures the number flights of stairs that the user has climbed.\nstatic let nikeFuel: HKQuantityTypeIdentifier\nA quantity sample type that measures the number of NikeFuel points the user has earned.\nstatic let appleExerciseTime: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of time the user spent exercising.\nstatic let appleMoveTime: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of time the user has spent performing activities that involve full-body movements during the specified day.\nstatic let appleStandTime: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of time the user has spent standing.\nstatic let vo2Max: HKQuantityTypeIdentifier\nA quantity sample that measures the maximal oxygen consumption during exercise.\nRelated Documentation\nstatic let appleWalkingSteadiness: HKQuantityTypeIdentifier\nA quantity sample type that measures the steadiness of the user’s gait.\nstatic let appleWalkingSteadinessEvent: HKCategoryTypeIdentifier\nA category sample type that records an incident where the user showed a reduced score for their gait’s steadiness.\nstatic let sixMinuteWalkTestDistance: HKQuantityTypeIdentifier\nA quantity sample type that stores the distance a user can walk during a six-minute walk test.\nstatic let walkingSpeed: HKQuantityTypeIdentifier\nA quantity sample type that measures the user’s average speed when walking steadily over flat ground.\nstatic let walkingStepLength: HKQuantityTypeIdentifier\nA quantity sample type that measures the average length of the user’s step when walking steadily over flat ground.\nstatic let walkingAsymmetryPercentage: HKQuantityTypeIdentifier\nA quantity sample type that measures the percentage of steps in which one foot moves at a different speed than the other when walking on flat ground.\nstatic let walkingDoubleSupportPercentage: HKQuantityTypeIdentifier\nA quantity sample type that measures the percentage of time when both of the user’s feet touch the ground while walking steadily over flat ground.\nstatic let stairAscentSpeed: HKQuantityTypeIdentifier\nA quantity sample type measuring the user’s speed while climbing a flight of stairs.\nstatic let stairDescentSpeed: HKQuantityTypeIdentifier\nA quantity sample type measuring the user’s speed while descending a flight of stairs."
  },
  {
    "title": "peripheralPerfusionIndex | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquantitytypeidentifier/1615442-peripheralperfusionindex",
    "html": "Discussion\n\nThe peripheral perfusion index measures the pulse strength at the monitoring site. These samples use percent units (described in HKUnit) and measure discrete values (described in HKQuantityAggregationStyle).\n\nSee Also\nLab and test results\nstatic let bloodGlucose: HKQuantityTypeIdentifier\nA quantity sample type that measures the user’s blood glucose level.\nstatic let electrodermalActivity: HKQuantityTypeIdentifier\nA quantity sample type that measures electrodermal activity.\nstatic let forcedExpiratoryVolume1: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of air that can be forcibly exhaled from the lungs during the first second of a forced exhalation.\nstatic let forcedVitalCapacity: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of air that can be forcibly exhaled from the lungs after taking the deepest breath possible.\nstatic let inhalerUsage: HKQuantityTypeIdentifier\nA quantity sample type that measures the number of puffs the user takes from their inhaler.\nstatic let insulinDelivery: HKQuantityTypeIdentifier\nA quantity sample that measures the amount of insulin delivered.\nstatic let numberOfTimesFallen: HKQuantityTypeIdentifier\nA quantity sample type that measures the number of times the user fell.\nstatic let peakExpiratoryFlowRate: HKQuantityTypeIdentifier\nA quantity sample type that measures the user’s maximum flow rate generated during a forceful exhalation."
  },
  {
    "title": "runningStrideLength | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquantitytypeidentifier/3929732-runningstridelength",
    "html": "Discussion\n\nThese samples use length units (described in HKUnit) and measure discrete values (described in HKQuantityAggregationStyle). During outdoor running workouts, the system automatically records running stride samples on Apple Watch SE and Series 6 and later.\n\nSee Also\nActivity\nstatic let stepCount: HKQuantityTypeIdentifier\nA quantity sample type that measures the number of steps the user has taken.\nstatic let distanceWalkingRunning: HKQuantityTypeIdentifier\nA quantity sample type that measures the distance the user has moved by walking or running.\nstatic let runningGroundContactTime: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of time the runner’s foot is in contact with the ground while running.\nstatic let runningPower: HKQuantityTypeIdentifier\nA quantity sample type that measures the rate of work required for the runner to maintain their speed.\nstatic let runningSpeed: HKQuantityTypeIdentifier\nA quantity sample type that measures the runner’s speed.\nstatic let runningVerticalOscillation: HKQuantityTypeIdentifier\nA quantity sample type measuring pelvis vertical range of motion during a single running stride.\nstatic let distanceCycling: HKQuantityTypeIdentifier\nA quantity sample type that measures the distance the user has moved by cycling.\nstatic let pushCount: HKQuantityTypeIdentifier\nA quantity sample type that measures the number of pushes that the user has performed while using a wheelchair.\nstatic let distanceWheelchair: HKQuantityTypeIdentifier\nA quantity sample type that measures the distance the user has moved using a wheelchair.\nstatic let swimmingStrokeCount: HKQuantityTypeIdentifier\nA quantity sample type that measures the number of strokes performed while swimming.\nstatic let distanceSwimming: HKQuantityTypeIdentifier\nA quantity sample type that measures the distance the user has moved while swimming.\nstatic let distanceDownhillSnowSports: HKQuantityTypeIdentifier\nA quantity sample type that measures the distance the user has traveled while skiing or snowboarding.\nstatic let basalEnergyBurned: HKQuantityTypeIdentifier\nA quantity sample type that measures the resting energy burned by the user.\nstatic let activeEnergyBurned: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of active energy the user has burned.\nstatic let flightsClimbed: HKQuantityTypeIdentifier\nA quantity sample type that measures the number flights of stairs that the user has climbed.\nstatic let nikeFuel: HKQuantityTypeIdentifier\nA quantity sample type that measures the number of NikeFuel points the user has earned.\nstatic let appleExerciseTime: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of time the user spent exercising.\nstatic let appleMoveTime: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of time the user has spent performing activities that involve full-body movements during the specified day.\nstatic let appleStandTime: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of time the user has spent standing.\nstatic let vo2Max: HKQuantityTypeIdentifier\nA quantity sample that measures the maximal oxygen consumption during exercise.\nRelated Documentation\nstatic let appleWalkingSteadiness: HKQuantityTypeIdentifier\nA quantity sample type that measures the steadiness of the user’s gait.\nstatic let appleWalkingSteadinessEvent: HKCategoryTypeIdentifier\nA category sample type that records an incident where the user showed a reduced score for their gait’s steadiness.\nstatic let sixMinuteWalkTestDistance: HKQuantityTypeIdentifier\nA quantity sample type that stores the distance a user can walk during a six-minute walk test.\nstatic let walkingSpeed: HKQuantityTypeIdentifier\nA quantity sample type that measures the user’s average speed when walking steadily over flat ground.\nstatic let walkingStepLength: HKQuantityTypeIdentifier\nA quantity sample type that measures the average length of the user’s step when walking steadily over flat ground.\nstatic let walkingAsymmetryPercentage: HKQuantityTypeIdentifier\nA quantity sample type that measures the percentage of steps in which one foot moves at a different speed than the other when walking on flat ground.\nstatic let walkingDoubleSupportPercentage: HKQuantityTypeIdentifier\nA quantity sample type that measures the percentage of time when both of the user’s feet touch the ground while walking steadily over flat ground.\nstatic let stairAscentSpeed: HKQuantityTypeIdentifier\nA quantity sample type measuring the user’s speed while climbing a flight of stairs.\nstatic let stairDescentSpeed: HKQuantityTypeIdentifier\nA quantity sample type measuring the user’s speed while descending a flight of stairs."
  },
  {
    "title": "runningSpeed | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquantitytypeidentifier/3929731-runningspeed",
    "html": "Discussion\n\nThese samples use distance per time units (described in HKUnit) and measure discrete values (described in HKQuantityAggregationStyle). During outdoor running workouts, the system automatically records running speed samples on Apple Watch.\n\nSee Also\nActivity\nstatic let stepCount: HKQuantityTypeIdentifier\nA quantity sample type that measures the number of steps the user has taken.\nstatic let distanceWalkingRunning: HKQuantityTypeIdentifier\nA quantity sample type that measures the distance the user has moved by walking or running.\nstatic let runningGroundContactTime: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of time the runner’s foot is in contact with the ground while running.\nstatic let runningPower: HKQuantityTypeIdentifier\nA quantity sample type that measures the rate of work required for the runner to maintain their speed.\nstatic let runningStrideLength: HKQuantityTypeIdentifier\nA quantity sample type that measures the distance covered by a single step while running.\nstatic let runningVerticalOscillation: HKQuantityTypeIdentifier\nA quantity sample type measuring pelvis vertical range of motion during a single running stride.\nstatic let distanceCycling: HKQuantityTypeIdentifier\nA quantity sample type that measures the distance the user has moved by cycling.\nstatic let pushCount: HKQuantityTypeIdentifier\nA quantity sample type that measures the number of pushes that the user has performed while using a wheelchair.\nstatic let distanceWheelchair: HKQuantityTypeIdentifier\nA quantity sample type that measures the distance the user has moved using a wheelchair.\nstatic let swimmingStrokeCount: HKQuantityTypeIdentifier\nA quantity sample type that measures the number of strokes performed while swimming.\nstatic let distanceSwimming: HKQuantityTypeIdentifier\nA quantity sample type that measures the distance the user has moved while swimming.\nstatic let distanceDownhillSnowSports: HKQuantityTypeIdentifier\nA quantity sample type that measures the distance the user has traveled while skiing or snowboarding.\nstatic let basalEnergyBurned: HKQuantityTypeIdentifier\nA quantity sample type that measures the resting energy burned by the user.\nstatic let activeEnergyBurned: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of active energy the user has burned.\nstatic let flightsClimbed: HKQuantityTypeIdentifier\nA quantity sample type that measures the number flights of stairs that the user has climbed.\nstatic let nikeFuel: HKQuantityTypeIdentifier\nA quantity sample type that measures the number of NikeFuel points the user has earned.\nstatic let appleExerciseTime: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of time the user spent exercising.\nstatic let appleMoveTime: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of time the user has spent performing activities that involve full-body movements during the specified day.\nstatic let appleStandTime: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of time the user has spent standing.\nstatic let vo2Max: HKQuantityTypeIdentifier\nA quantity sample that measures the maximal oxygen consumption during exercise.\nRelated Documentation\nstatic let appleWalkingSteadiness: HKQuantityTypeIdentifier\nA quantity sample type that measures the steadiness of the user’s gait.\nstatic let appleWalkingSteadinessEvent: HKCategoryTypeIdentifier\nA category sample type that records an incident where the user showed a reduced score for their gait’s steadiness.\nstatic let sixMinuteWalkTestDistance: HKQuantityTypeIdentifier\nA quantity sample type that stores the distance a user can walk during a six-minute walk test.\nstatic let walkingSpeed: HKQuantityTypeIdentifier\nA quantity sample type that measures the user’s average speed when walking steadily over flat ground.\nstatic let walkingStepLength: HKQuantityTypeIdentifier\nA quantity sample type that measures the average length of the user’s step when walking steadily over flat ground.\nstatic let walkingAsymmetryPercentage: HKQuantityTypeIdentifier\nA quantity sample type that measures the percentage of steps in which one foot moves at a different speed than the other when walking on flat ground.\nstatic let walkingDoubleSupportPercentage: HKQuantityTypeIdentifier\nA quantity sample type that measures the percentage of time when both of the user’s feet touch the ground while walking steadily over flat ground.\nstatic let stairAscentSpeed: HKQuantityTypeIdentifier\nA quantity sample type measuring the user’s speed while climbing a flight of stairs.\nstatic let stairDescentSpeed: HKQuantityTypeIdentifier\nA quantity sample type measuring the user’s speed while descending a flight of stairs."
  },
  {
    "title": "bloodType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkcharacteristictypeidentifier/1615759-bloodtype",
    "html": "Discussion\n\nThis type uses values from the HKBloodType enum.\n\nSee Also\nCharacteristic Types\nstatic let activityMoveMode: HKCharacteristicTypeIdentifier\nA characteristic identifier for the user’s activity mode.\nstatic let biologicalSex: HKCharacteristicTypeIdentifier\nA characteristic type identifier for the user’s sex.\nstatic let dateOfBirth: HKCharacteristicTypeIdentifier\nA characteristic type identifier for the user’s date of birth.\nstatic let fitzpatrickSkinType: HKCharacteristicTypeIdentifier\nA characteristic type identifier for the user’s skin type.\nstatic let wheelchairUse: HKCharacteristicTypeIdentifier\nA characteristic identifier for the user’s use of a wheelchair.\nRelated Documentation\nclass HKCharacteristicType\nA type that represents data that doesn’t typically change over time.\nstruct HKCharacteristicTypeIdentifier\nThe identifiers that create characteristic type objects.\nenum HKBloodType\nConstants indicating the user’s blood type.\nclass HKBloodTypeObject\nThis class acts as a wrapper for the enumeration."
  },
  {
    "title": "biologicalSex | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkcharacteristictypeidentifier/1615283-biologicalsex",
    "html": "Discussion\n\nThis type uses values from the HKBiologicalSex enum.\n\nSee Also\nCharacteristic Types\nstatic let activityMoveMode: HKCharacteristicTypeIdentifier\nA characteristic identifier for the user’s activity mode.\nstatic let bloodType: HKCharacteristicTypeIdentifier\nA characteristic type identifier for the user’s blood type.\nstatic let dateOfBirth: HKCharacteristicTypeIdentifier\nA characteristic type identifier for the user’s date of birth.\nstatic let fitzpatrickSkinType: HKCharacteristicTypeIdentifier\nA characteristic type identifier for the user’s skin type.\nstatic let wheelchairUse: HKCharacteristicTypeIdentifier\nA characteristic identifier for the user’s use of a wheelchair.\nRelated Documentation\nclass HKCharacteristicType\nA type that represents data that doesn’t typically change over time.\nstruct HKCharacteristicTypeIdentifier\nThe identifiers that create characteristic type objects.\nenum HKBiologicalSex\nConstants indicating the user’s sex.\nclass HKBiologicalSexObject\nThis class acts as a wrapper for the enumeration."
  },
  {
    "title": "HKSource | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hksource",
    "html": "Overview\n\nSources include apps and devices that save data to the HealthKit store. Currently, HealthKit supports only the direct import of data from Bluetooth LE heart rate monitors. All other devices need a companion app to collect and save the data to HealthKit.\n\nTopics\nGetting the Current Source\nclass func `default`() -> HKSource\nReturns a source object for the current app.\nGetting Property Data\nvar bundleIdentifier: String\nThe source’s bundle identifier.\nvar name: String\nThe source’s name.\nRelationships\nInherits From\nNSObject\nConforms To\nNSCopying\nNSSecureCoding\nSee Also\nSources and devices\nstruct HKSourceQueryDescriptor\nA query interface that uses Swift concurrency to read the apps and devices that produced the matching samples.\nclass HKSourceRevision\nAn object indicating the source of a HealthKit sample.\nclass HKDevice\nA device that generates data for HealthKit.\nclass HKSourceQuery\nA query that returns a list of sources, such as apps and devices, that have saved matching queries to the HealthKit store."
  },
  {
    "title": "handwashingEvent | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkcategorytypeidentifier/3585100-handwashingevent",
    "html": "Discussion\n\nUse this type to read or share handwashing events. When creating a handwashing event sample, set the value to HKCategoryValue.notApplicable, and set the duration by specifying different start and end dates. The Health app uses the sample’s duration to determine if the handwashing event completed.\n\nApple Watch automatically detects and records handwashing events on Apple Watch Series 4 and later.\n\nSee Also\nSelf Care\nstatic let toothbrushingEvent: HKCategoryTypeIdentifier\nA category sample type for toothbrushing events."
  },
  {
    "title": "activityMoveMode | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkcharacteristictypeidentifier/3281490-activitymovemode",
    "html": "See Also\nCharacteristic Types\nstatic let biologicalSex: HKCharacteristicTypeIdentifier\nA characteristic type identifier for the user’s sex.\nstatic let bloodType: HKCharacteristicTypeIdentifier\nA characteristic type identifier for the user’s blood type.\nstatic let dateOfBirth: HKCharacteristicTypeIdentifier\nA characteristic type identifier for the user’s date of birth.\nstatic let fitzpatrickSkinType: HKCharacteristicTypeIdentifier\nA characteristic type identifier for the user’s skin type.\nstatic let wheelchairUse: HKCharacteristicTypeIdentifier\nA characteristic identifier for the user’s use of a wheelchair."
  },
  {
    "title": "HKObserverQuery | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkobserverquery",
    "html": "Overview\n\nObserver queries set up a long-running task on a background queue. This task watches the HealthKit store, and alerts you when the store saves or removes matching data. Your app uses observer queries to respond to changes made by other apps and devices.\n\nObserver queries are immutable: You set their properties when you first create them, and you can’t change them.\n\nTopics\nCreating Observer Queries\nExecuting Observer Queries\nCreate and run observer queries.\ninit(sampleType: HKSampleType, predicate: NSPredicate?, updateHandler: (HKObserverQuery, HKObserverQueryCompletionHandler, Error?) -> Void)\nInstantiates and returns a query that monitors the HealthKit store and responds to changes.\ninit(queryDescriptors: [HKQueryDescriptor], updateHandler: (HKObserverQuery, Set<HKSampleType>?, HKObserverQueryCompletionHandler, Error?) -> Void)\nCreates a query that monitors the HealthKit store and responds to any changes matching any of the query descriptors you provided.\ntypealias HKObserverQueryCompletionHandler\nThe completion handler for background deliveries.\nRelationships\nInherits From\nHKQuery\nSee Also\nLong-running queries\nstruct HKActivitySummaryQueryDescriptor\nA query interface that reads activity summaries using Swift concurrency.\nclass HKActivitySummaryQuery\nA query for reading activity summary objects from the HealthKit store.\nstruct HKAnchoredObjectQueryDescriptor\nA query interface that runs anchored object queries using Swift concurrency.\nclass HKAnchoredObjectQuery\nA query that returns changes to the HealthKit store, including a snapshot of new changes and continuous monitoring as a long-running query."
  },
  {
    "title": "HKClinicalType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkclinicaltype",
    "html": "Topics\nCreating Clinical Types\ninit(HKClinicalTypeIdentifier)\nCreates a clinical type using the provided identifier.\nRelationships\nInherits From\nHKSampleType\nSee Also\nObject type subclasses\nclass HKCharacteristicType\nA type that represents data that doesn’t typically change over time.\nclass HKQuantityType\nA type that identifies samples that store numerical values.\nclass HKCategoryType\nA type that identifies samples that contain a value from a small set of possible values.\nclass HKCorrelationType\nA type that identifies samples that group multiple subsamples.\nclass HKActivitySummaryType\nA type that identifies activity summary objects.\nclass HKAudiogramSampleType\nA type that identifies samples that contain audiogram data.\nclass HKElectrocardiogramType\nA type that identifies samples containing electrocardiogram data.\nclass HKSeriesType\nA type that indicates the data stored in a series sample.\nclass HKWorkoutType\nA type that identifies samples that store information about a workout.\nclass HKObjectType\nAn abstract superclass with subclasses that identify a specific type of data for the HealthKit store.\nclass HKSampleType\nAn abstract superclass for all classes that identify a specific type of sample when working with the HealthKit store.\nRelated Documentation\nclass HKClinicalRecord\nA sample that stores a clinical record.\nstatic let allergyRecord: HKClinicalTypeIdentifier\nA type identifier for records of allergic or intolerant reactions.\nstatic let conditionRecord: HKClinicalTypeIdentifier\nA type identifier for records of a condition, problem, diagnosis, or other event.\nstatic let immunizationRecord: HKClinicalTypeIdentifier\nA type identifier for records of the current or historical administration of vaccines.\nstatic let labResultRecord: HKClinicalTypeIdentifier\nA type identifier for records of lab results.\nstatic let medicationRecord: HKClinicalTypeIdentifier\nA type identifier for records of medication.\nstatic let procedureRecord: HKClinicalTypeIdentifier\nA type identifier for records of procedures.\nstatic let vitalSignRecord: HKClinicalTypeIdentifier\nA type identifier for records of vital signs."
  },
  {
    "title": "HKElectrocardiogramType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkelectrocardiogramtype",
    "html": "Overview\n\nThe HKElectrocardiogramType class is a concrete subclass of the HKObjectType class. To create an electrocardiogram type instance, use the object type’s electrocardiogramType() convenience method.\n\nUse the electrocardiogram type to:\n\nRequest permission to read electrocardiogram samples\n\nQuery for electrocardiogram samples\n\nElectrocardiogram samples are read-only. You can request permission to read the samples using this identifier, but you can’t request authorization to share them. This means you can’t save new electrocardiogram samples to the HealthKit store. To add test data in iOS Simulator, open the Health app and select Browse > Heart > Electrocardiograms (ECG) > Add Data.\n\nRelationships\nInherits From\nHKSampleType\nConforms To\nSendable\nSee Also\nVital signs\nstatic let heartRate: HKQuantityTypeIdentifier\nA quantity sample type that measures the user’s heart rate.\nstatic let lowHeartRateEvent: HKCategoryTypeIdentifier\nA category sample type for low heart rate events.\nstatic let highHeartRateEvent: HKCategoryTypeIdentifier\nA category sample type for high heart rate events.\nstatic let irregularHeartRhythmEvent: HKCategoryTypeIdentifier\nA category sample type for irregular heart rhythm events.\nstatic let restingHeartRate: HKQuantityTypeIdentifier\nA quantity sample type that measures the user’s resting heart rate.\nstatic let heartRateVariabilitySDNN: HKQuantityTypeIdentifier\nA quantity sample type that measures the standard deviation of heartbeat intervals.\nstatic let heartRateRecoveryOneMinute: HKQuantityTypeIdentifier\nA quantity sample that records the reduction in heart rate from the peak exercise rate to the rate one minute after exercising ended.\nstatic let atrialFibrillationBurden: HKQuantityTypeIdentifier\nA quantity type that measures an estimate of the percentage of time a person’s heart shows signs of atrial fibrillation (AFib) while wearing Apple Watch.\nstatic let walkingHeartRateAverage: HKQuantityTypeIdentifier\nA quantity sample type that measures the user’s heart rate while walking.\nlet HKDataTypeIdentifierHeartbeatSeries: String\nA series sample containing heartbeat data.\nstatic let oxygenSaturation: HKQuantityTypeIdentifier\nA quantity sample type that measures the user’s oxygen saturation.\nstatic let bodyTemperature: HKQuantityTypeIdentifier\nA quantity sample type that measures the user’s body temperature.\nstatic let bloodPressure: HKCorrelationTypeIdentifier\nA correlation sample that combines a systolic sample and a diastolic sample into a single blood pressure reading.\nstatic let bloodPressureSystolic: HKQuantityTypeIdentifier\nA quantity sample type that measures the user’s systolic blood pressure.\nstatic let bloodPressureDiastolic: HKQuantityTypeIdentifier\nA quantity sample type that measures the user’s diastolic blood pressure.\nstatic let respiratoryRate: HKQuantityTypeIdentifier\nA quantity sample type that measures the user’s respiratory rate."
  },
  {
    "title": "HKSeriesType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkseriestype",
    "html": "Topics\nAccessing Series Types\nclass func workoutRoute() -> Self\nReturns a series type object for workout routes.\nclass func heartbeat() -> Self\nReturns a series type object for heartbeat data.\nRelationships\nInherits From\nHKSampleType\nConforms To\nSendable\nSee Also\nObject type subclasses\nclass HKCharacteristicType\nA type that represents data that doesn’t typically change over time.\nclass HKQuantityType\nA type that identifies samples that store numerical values.\nclass HKCategoryType\nA type that identifies samples that contain a value from a small set of possible values.\nclass HKCorrelationType\nA type that identifies samples that group multiple subsamples.\nclass HKActivitySummaryType\nA type that identifies activity summary objects.\nclass HKAudiogramSampleType\nA type that identifies samples that contain audiogram data.\nclass HKElectrocardiogramType\nA type that identifies samples containing electrocardiogram data.\nclass HKClinicalType\nA type that identifies samples that contain clinical record data.\nclass HKWorkoutType\nA type that identifies samples that store information about a workout.\nclass HKObjectType\nAn abstract superclass with subclasses that identify a specific type of data for the HealthKit store.\nclass HKSampleType\nAn abstract superclass for all classes that identify a specific type of sample when working with the HealthKit store.\nRelated Documentation\nclass HKWorkoutRoute\nA sample that contains a workout’s route data.\nclass HKWorkoutRouteBuilder\nA builder object that incrementally constructs a workout route.\nclass HKWorkoutRouteQuery\nA query to access the location data stored in a workout route."
  },
  {
    "title": "HKAudiogramSampleType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkaudiogramsampletype",
    "html": "Overview\n\nThe HKAudiogramSampleType class is a concrete subclass of the HKObjectType class. To create an audiogram sample type instance, use the object type’s audiogramSampleType() convenience method.\n\nUse audiogram sample types to:\n\nRequest permission to read or write audiogram samples.\n\nCreate and share audiogram samples.\n\nQuery for audiogram samples.\n\nRelationships\nInherits From\nHKSampleType\nConforms To\nSendable\nSee Also\nObject type subclasses\nclass HKCharacteristicType\nA type that represents data that doesn’t typically change over time.\nclass HKQuantityType\nA type that identifies samples that store numerical values.\nclass HKCategoryType\nA type that identifies samples that contain a value from a small set of possible values.\nclass HKCorrelationType\nA type that identifies samples that group multiple subsamples.\nclass HKActivitySummaryType\nA type that identifies activity summary objects.\nclass HKElectrocardiogramType\nA type that identifies samples containing electrocardiogram data.\nclass HKSeriesType\nA type that indicates the data stored in a series sample.\nclass HKClinicalType\nA type that identifies samples that contain clinical record data.\nclass HKWorkoutType\nA type that identifies samples that store information about a workout.\nclass HKObjectType\nAn abstract superclass with subclasses that identify a specific type of data for the HealthKit store.\nclass HKSampleType\nAn abstract superclass for all classes that identify a specific type of sample when working with the HealthKit store."
  },
  {
    "title": "mindfulSession | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkcategorytypeidentifier/1648575-mindfulsession",
    "html": "Discussion\n\nUse a HKCategoryValue.notApplicable value with these samples.\n\nSee Also\nMindfulness and Sleep\nstatic let sleepAnalysis: HKCategoryTypeIdentifier\nA category sample type for sleep analysis information.\nRelated Documentation\nenum HKCategoryValue\nCategories that are undefined.\nstruct HKCategoryTypeIdentifier\nIdentifiers for creating category types.\nclass HKCategoryType\nA type that identifies samples that contain a value from a small set of possible values.\nclass HKCategorySample\nA sample with values from a short list of possible values."
  },
  {
    "title": "HKWorkoutTypeIdentifier | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkouttypeidentifier",
    "html": "Discussion\n\nUse this type identifier when requesting permission to read or share workout data.\n\nSee Also\nSamples\nAdding samples to a workout\nCreate associated samples that add details to a workout.\nAccessing condensed workout samples\nRead series data from condensed workouts.\nDividing a HealthKit workout into activities\nPartition multisport and interval workouts into activities that represent the different parts of the workout.\nclass HKWorkout\nA workout sample that stores information about a single physical activity.\nclass HKWorkoutActivity\nAn object that describes an activity within a longer workout.\nclass HKWorkoutBuilder\nA builder object that incrementally constructs a workout.\nclass HKWorkoutType\nA type that identifies samples that store information about a workout.\nenum HKWorkoutActivityType\nThe type of activity performed during a workout.\nenum HKWorkoutSessionType\nThe type of session.\nclass HKWorkoutEvent\nAn object representing an important event during a workout."
  },
  {
    "title": "Symptom Type Identifiers | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/data_types/symptom_type_identifiers",
    "html": "Topics\nAbdominal and Gastrointestinal\nstatic let abdominalCramps: HKCategoryTypeIdentifier\nA category type that records abdominal cramps as a symptom.\nstatic let bloating: HKCategoryTypeIdentifier\nA category type that records bloating as a symptom.\nstatic let constipation: HKCategoryTypeIdentifier\nA category type that records constipation as a symptom.\nstatic let diarrhea: HKCategoryTypeIdentifier\nA category type that records diarrhea as a symptom.\nstatic let heartburn: HKCategoryTypeIdentifier\nA category type that records heartburn as a symptom.\nstatic let nausea: HKCategoryTypeIdentifier\nA category type that records nausea as a symptom.\nstatic let vomiting: HKCategoryTypeIdentifier\nA category type that records vomiting as a symptom.\nConstitutional\nstatic let appetiteChanges: HKCategoryTypeIdentifier\nA category type that records changes in appetite as a symptom.\nstatic let chills: HKCategoryTypeIdentifier\nA category type that records chills as a symptom.\nstatic let dizziness: HKCategoryTypeIdentifier\nA category type that records dizziness as a symptom.\nstatic let fainting: HKCategoryTypeIdentifier\nA category type that records fainting as a symptom.\nstatic let fatigue: HKCategoryTypeIdentifier\nA category type that records fatigue as a symptom.\nstatic let fever: HKCategoryTypeIdentifier\nA category type that records fever as a symptom.\nstatic let generalizedBodyAche: HKCategoryTypeIdentifier\nA category type that records body ache as a symptom.\nstatic let hotFlashes: HKCategoryTypeIdentifier\nA category type that records hot flashes as a symptom.\nHeart and Lung\nstatic let chestTightnessOrPain: HKCategoryTypeIdentifier\nA category type that records chest tightness or pain as a symptom.\nstatic let coughing: HKCategoryTypeIdentifier\nA category type that records coughing as a symptom.\nstatic let rapidPoundingOrFlutteringHeartbeat: HKCategoryTypeIdentifier\nA category type that records a rapid, pounding, or fluttering heartbeat as a symptom.\nstatic let shortnessOfBreath: HKCategoryTypeIdentifier\nA category type that records shortness of breath as a symptom.\nstatic let skippedHeartbeat: HKCategoryTypeIdentifier\nA category type that records skipped heartbeat as a symptom.\nstatic let wheezing: HKCategoryTypeIdentifier\nA category type that records wheezing as a symptom.\nMusculoskeletal\nstatic let lowerBackPain: HKCategoryTypeIdentifier\nA category type that records lower back pain as a symptom.\nNeurological\nstatic let headache: HKCategoryTypeIdentifier\nA category type that records headache as a symptom.\nstatic let memoryLapse: HKCategoryTypeIdentifier\nA category type that records memory lapse as a symptom.\nstatic let moodChanges: HKCategoryTypeIdentifier\nA category type that records mood changes as a symptom.\nNose and Throat\nstatic let lossOfSmell: HKCategoryTypeIdentifier\nA category type that records loss of smell as a symptom.\nstatic let lossOfTaste: HKCategoryTypeIdentifier\nA category type that records loss of taste as a symptom.\nstatic let runnyNose: HKCategoryTypeIdentifier\nA category type that records runny nose as a symptom.\nstatic let soreThroat: HKCategoryTypeIdentifier\nA category type that records sore throat as a symptom.\nstatic let sinusCongestion: HKCategoryTypeIdentifier\nA category type that records sinus congestion as a symptom.\nReproduction\nstatic let breastPain: HKCategoryTypeIdentifier\nA category type that records breast pain as a symptom.\nstatic let pelvicPain: HKCategoryTypeIdentifier\nA category type that records pelvic pain as a symptom.\nstatic let vaginalDryness: HKCategoryTypeIdentifier\nA category type that records vaginal dryness as a symptom.\nSkin and Hair\nstatic let acne: HKCategoryTypeIdentifier\nA category type that records acne as a symptom.\nstatic let drySkin: HKCategoryTypeIdentifier\nA category type that records dry skin as a symptom.\nstatic let hairLoss: HKCategoryTypeIdentifier\nA category type that records hair loss as a symptom.\nSleep\nstatic let nightSweats: HKCategoryTypeIdentifier\nA category type that records night sweats as a symptom.\nstatic let sleepChanges: HKCategoryTypeIdentifier\nA category type that records sleep changes as a symptom.\nUrinary\nstatic let bladderIncontinence: HKCategoryTypeIdentifier\nA category type that records bladder incontinence as a symptom."
  },
  {
    "title": "forcedVitalCapacity | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquantitytypeidentifier/1615412-forcedvitalcapacity",
    "html": "Discussion\n\nThese samples use volume units (described in HKUnit) and measure discrete values (described in HKQuantityAggregationStyle).\n\nSee Also\nLab and test results\nstatic let bloodGlucose: HKQuantityTypeIdentifier\nA quantity sample type that measures the user’s blood glucose level.\nstatic let electrodermalActivity: HKQuantityTypeIdentifier\nA quantity sample type that measures electrodermal activity.\nstatic let forcedExpiratoryVolume1: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of air that can be forcibly exhaled from the lungs during the first second of a forced exhalation.\nstatic let inhalerUsage: HKQuantityTypeIdentifier\nA quantity sample type that measures the number of puffs the user takes from their inhaler.\nstatic let insulinDelivery: HKQuantityTypeIdentifier\nA quantity sample that measures the amount of insulin delivered.\nstatic let numberOfTimesFallen: HKQuantityTypeIdentifier\nA quantity sample type that measures the number of times the user fell.\nstatic let peakExpiratoryFlowRate: HKQuantityTypeIdentifier\nA quantity sample type that measures the user’s maximum flow rate generated during a forceful exhalation.\nstatic let peripheralPerfusionIndex: HKQuantityTypeIdentifier\nA quantity sample type that measures the user’s peripheral perfusion index."
  },
  {
    "title": "walkingSpeed | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquantitytypeidentifier/3131040-walkingspeed",
    "html": "Discussion\n\nWalking speed represents how quickly the user walks on flat ground. The system automatically records walking speed samples on iPhone 8 or later. The user must carry their phone near their waist—such as in a pocket—and walk steadily on flat ground. To ensure accuracy, the user’s height value must be up to date. The system records 10 to 30 walking speed samples on a typical day. iPhone doesn’t record walking speed samples if the user’s wheelchair status is on.\n\nThese samples use distance per time units (described in HKUnit) and measure discrete values (described in HKQuantityAggregationStyle). For example, the following code shows two ways to create a meters per second unit. The first uses explicit constructors, while the second initializes the unit from a string.\n\nlet mps = HKUnit.meter().unitDivided(by: HKUnit.second())\nlet mpsFromString = HKUnit(from: \"m/s\")\n\n\nThe sample’s quantity property represents the average walking speed between the sample’s startDate and endDate properties.\n\nSee Also\nMobility\nstatic let appleWalkingSteadiness: HKQuantityTypeIdentifier\nA quantity sample type that measures the steadiness of the user’s gait.\nstatic let sixMinuteWalkTestDistance: HKQuantityTypeIdentifier\nA quantity sample type that stores the distance a user can walk during a six-minute walk test.\nstatic let walkingStepLength: HKQuantityTypeIdentifier\nA quantity sample type that measures the average length of the user’s step when walking steadily over flat ground.\nstatic let walkingAsymmetryPercentage: HKQuantityTypeIdentifier\nA quantity sample type that measures the percentage of steps in which one foot moves at a different speed than the other when walking on flat ground.\nstatic let walkingDoubleSupportPercentage: HKQuantityTypeIdentifier\nA quantity sample type that measures the percentage of time when both of the user’s feet touch the ground while walking steadily over flat ground.\nstatic let stairAscentSpeed: HKQuantityTypeIdentifier\nA quantity sample type measuring the user’s speed while climbing a flight of stairs.\nstatic let stairDescentSpeed: HKQuantityTypeIdentifier\nA quantity sample type measuring the user’s speed while descending a flight of stairs.\nRelated Documentation\nenum HKDevicePlacementSide\nValues that indicate the placement of the device that measured a sample."
  },
  {
    "title": "walkingDoubleSupportPercentage | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquantitytypeidentifier/3552087-walkingdoublesupportpercentage",
    "html": "Discussion\n\nThese samples measure the percentage of time during a walk that both of the user’s feet are on the ground. A lower value indicates that the user spends more time with the weight on just one foot instead of two. During a typical walk, this measure falls between 20% and 40%. Double support time varies depending on how fast the user walks and the terrain.\n\nThe system automatically records double support samples on iPhone 8 or later. The user must carry their phone near their waist—such as in a pocket—and walk steadily on flat ground. The system records 10 to 30 walking double support samples on a typical day. iPhone doesn’t record double support samples if the user’s wheelchair status is on.\n\nThese samples use percentage units (described in HKUnit) and measure discrete values (described in HKQuantityAggregationStyle). For example, the following code creates a percentage unit.\n\nlet percentage = HKUnit.percent()\n\n\nThe sample’s quantity property represents the percent of time the user had weight on both feet between the sample’s startDate and endDate properties.\n\nSee Also\nMobility\nstatic let appleWalkingSteadiness: HKQuantityTypeIdentifier\nA quantity sample type that measures the steadiness of the user’s gait.\nstatic let sixMinuteWalkTestDistance: HKQuantityTypeIdentifier\nA quantity sample type that stores the distance a user can walk during a six-minute walk test.\nstatic let walkingSpeed: HKQuantityTypeIdentifier\nA quantity sample type that measures the user’s average speed when walking steadily over flat ground.\nstatic let walkingStepLength: HKQuantityTypeIdentifier\nA quantity sample type that measures the average length of the user’s step when walking steadily over flat ground.\nstatic let walkingAsymmetryPercentage: HKQuantityTypeIdentifier\nA quantity sample type that measures the percentage of steps in which one foot moves at a different speed than the other when walking on flat ground.\nstatic let stairAscentSpeed: HKQuantityTypeIdentifier\nA quantity sample type measuring the user’s speed while climbing a flight of stairs.\nstatic let stairDescentSpeed: HKQuantityTypeIdentifier\nA quantity sample type measuring the user’s speed while descending a flight of stairs.\nRelated Documentation\nenum HKDevicePlacementSide\nValues that indicate the placement of the device that measured a sample."
  },
  {
    "title": "walkingAsymmetryPercentage | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquantitytypeidentifier/3552086-walkingasymmetrypercentage",
    "html": "Discussion\n\nWalking asymmetry is the percent of time that a user’s steps with one foot are faster or slower than the other foot. The system automatically records walking asymmetry samples on iPhone 8 or later. The user must carry their phone near their waist—such as in a pocket—and walk steadily on flat ground. The system records the phone’s location using the HKMetadataKeyDevicePlacementSide metadata key. The system records 10 to 30 walking asymmetry samples on a typical day. iPhone doesn’t record walking asymmetry samples if the user’s wheelchair status is on.\n\nThese samples use percentage units (described in HKUnit) and measure discrete values (described in HKQuantityAggregationStyle). For example, the following code creates a percentage unit.\n\nlet percentage = HKUnit.percent()\n\n\nThe sample’s quantity property represents the percent of asymmetrical steps between the sample’s startDate and endDate properties.\n\nSee Also\nMobility\nstatic let appleWalkingSteadiness: HKQuantityTypeIdentifier\nA quantity sample type that measures the steadiness of the user’s gait.\nstatic let sixMinuteWalkTestDistance: HKQuantityTypeIdentifier\nA quantity sample type that stores the distance a user can walk during a six-minute walk test.\nstatic let walkingSpeed: HKQuantityTypeIdentifier\nA quantity sample type that measures the user’s average speed when walking steadily over flat ground.\nstatic let walkingStepLength: HKQuantityTypeIdentifier\nA quantity sample type that measures the average length of the user’s step when walking steadily over flat ground.\nstatic let walkingDoubleSupportPercentage: HKQuantityTypeIdentifier\nA quantity sample type that measures the percentage of time when both of the user’s feet touch the ground while walking steadily over flat ground.\nstatic let stairAscentSpeed: HKQuantityTypeIdentifier\nA quantity sample type measuring the user’s speed while climbing a flight of stairs.\nstatic let stairDescentSpeed: HKQuantityTypeIdentifier\nA quantity sample type measuring the user’s speed while descending a flight of stairs.\nRelated Documentation\nenum HKDevicePlacementSide\nValues that indicate the placement of the device that measured a sample."
  },
  {
    "title": "stairAscentSpeed | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquantitytypeidentifier/3552084-stairascentspeed",
    "html": "Discussion\n\nThis is a measurement of how fast the user walks up stairs. The system automatically records stair ascent samples on Apple Watch Series 5 or later. The user must climb a 10-foot (3-meter) flight of steps while wearing the watch. The system records 20 samples on a typical day; however, some days may go over 100 samples, for example if the user goes on a long hike. The watch doesn’t record stair ascent speed samples if the user’s wheelchair status is on.\n\nThese samples use distance/time units (described in HKUnit) and measure discrete values (described in HKQuantityAggregationStyle). For example, the following code shows two ways to create a meters/second unit. The first uses explicit constructors, while the second initializes the unit from a string.\n\nlet mps = HKUnit.meter().unitDivided(by: HKUnit.second())\nlet mpsFromString = HKUnit(from: \"m/s\")\n\n\nThe sample’s quantity property represents the average ascent speed between the sample’s startDate and endDate properties.\n\nSee Also\nMobility\nstatic let appleWalkingSteadiness: HKQuantityTypeIdentifier\nA quantity sample type that measures the steadiness of the user’s gait.\nstatic let sixMinuteWalkTestDistance: HKQuantityTypeIdentifier\nA quantity sample type that stores the distance a user can walk during a six-minute walk test.\nstatic let walkingSpeed: HKQuantityTypeIdentifier\nA quantity sample type that measures the user’s average speed when walking steadily over flat ground.\nstatic let walkingStepLength: HKQuantityTypeIdentifier\nA quantity sample type that measures the average length of the user’s step when walking steadily over flat ground.\nstatic let walkingAsymmetryPercentage: HKQuantityTypeIdentifier\nA quantity sample type that measures the percentage of steps in which one foot moves at a different speed than the other when walking on flat ground.\nstatic let walkingDoubleSupportPercentage: HKQuantityTypeIdentifier\nA quantity sample type that measures the percentage of time when both of the user’s feet touch the ground while walking steadily over flat ground.\nstatic let stairDescentSpeed: HKQuantityTypeIdentifier\nA quantity sample type measuring the user’s speed while descending a flight of stairs.\nRelated Documentation\nenum HKDevicePlacementSide\nValues that indicate the placement of the device that measured a sample."
  },
  {
    "title": "walkingStepLength | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquantitytypeidentifier/3552088-walkingsteplength",
    "html": "Discussion\n\nStep length is the distance between the user’s front foot and back foot when they walk. The system automatically records walking step length samples on iPhone 8 or later. The user must carry their phone near their waist—such as in a pocket—and walk steadily on flat ground. To ensure accuracy, the user’s height value must be up to date. The system records 10 to 30 step length samples on a typical day. iPhone doesn’t record walking step length samples if the user’s wheelchair status is on.\n\nThese samples use distance units (described in HKUnit) and measure discrete values (described in HKQuantityAggregationStyle). For example, the following code creates a unit in meters.\n\nlet meters = HKUnit.meter()\n\n\nThe sample’s quantity property represents the average step length between the sample’s startDate and endDate properties.\n\nSee Also\nMobility\nstatic let appleWalkingSteadiness: HKQuantityTypeIdentifier\nA quantity sample type that measures the steadiness of the user’s gait.\nstatic let sixMinuteWalkTestDistance: HKQuantityTypeIdentifier\nA quantity sample type that stores the distance a user can walk during a six-minute walk test.\nstatic let walkingSpeed: HKQuantityTypeIdentifier\nA quantity sample type that measures the user’s average speed when walking steadily over flat ground.\nstatic let walkingAsymmetryPercentage: HKQuantityTypeIdentifier\nA quantity sample type that measures the percentage of steps in which one foot moves at a different speed than the other when walking on flat ground.\nstatic let walkingDoubleSupportPercentage: HKQuantityTypeIdentifier\nA quantity sample type that measures the percentage of time when both of the user’s feet touch the ground while walking steadily over flat ground.\nstatic let stairAscentSpeed: HKQuantityTypeIdentifier\nA quantity sample type measuring the user’s speed while climbing a flight of stairs.\nstatic let stairDescentSpeed: HKQuantityTypeIdentifier\nA quantity sample type measuring the user’s speed while descending a flight of stairs.\nRelated Documentation\nenum HKDevicePlacementSide\nValues that indicate the placement of the device that measured a sample."
  },
  {
    "title": "stairDescentSpeed | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquantitytypeidentifier/3552085-stairdescentspeed",
    "html": "Discussion\n\nThis is a measurement of how fast the user walks down stairs. The system automatically records stair descent samples on Apple Watch Series 5 or later. The user must walk down a 10-foot (3-meter) flight of steps while wearing the watch. The system records 20 samples on a typical day; however, some days may go over 100 samples, for example if the user goes on a long hike. The watch doesn’t record stair descent speed samples if the user’s wheelchair status is on.\n\nThese samples use distance/time units (described in HKUnit) and measure discrete values (described in HKQuantityAggregationStyle). For example, the following code shows two ways to create a meters/second unit. The first uses explicit constructors, while the second initializes the unit from a string.\n\nlet mps = HKUnit.meter().unitDivided(by: HKUnit.second())\nlet mpsFromString = HKUnit(from: \"m/s\")\n\n\nThe sample’s quantity property represents the average descent speed between the sample’s startDate and endDate properties.\n\nSee Also\nMobility\nstatic let appleWalkingSteadiness: HKQuantityTypeIdentifier\nA quantity sample type that measures the steadiness of the user’s gait.\nstatic let sixMinuteWalkTestDistance: HKQuantityTypeIdentifier\nA quantity sample type that stores the distance a user can walk during a six-minute walk test.\nstatic let walkingSpeed: HKQuantityTypeIdentifier\nA quantity sample type that measures the user’s average speed when walking steadily over flat ground.\nstatic let walkingStepLength: HKQuantityTypeIdentifier\nA quantity sample type that measures the average length of the user’s step when walking steadily over flat ground.\nstatic let walkingAsymmetryPercentage: HKQuantityTypeIdentifier\nA quantity sample type that measures the percentage of steps in which one foot moves at a different speed than the other when walking on flat ground.\nstatic let walkingDoubleSupportPercentage: HKQuantityTypeIdentifier\nA quantity sample type that measures the percentage of time when both of the user’s feet touch the ground while walking steadily over flat ground.\nstatic let stairAscentSpeed: HKQuantityTypeIdentifier\nA quantity sample type measuring the user’s speed while climbing a flight of stairs.\nRelated Documentation\nenum HKDevicePlacementSide\nValues that indicate the placement of the device that measured a sample."
  },
  {
    "title": "atrialFibrillationBurden | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquantitytypeidentifier/3964795-atrialfibrillationburden",
    "html": "Discussion\n\nOn watchOS 9 and iOS 16 and later, once a person enables AFib History, Apple Watch begins collecting heart-rhythm data more frequently. iPhone then calculates the AFib burden once a week, as long as Apple Watch has gathered enough heart-rhythm data during that week.\n\nIf iPhone is unlocked and isn’t under heavy load, it starts analyzing heart rhythm samples around 8:00 am Monday morning. As soon as it finishes this analysis, iPhone sends the user a notification telling them the results.\n\nThese samples use percentage units (described in HKUnit) and measure discrete values (described in HKQuantityAggregationStyle). The sample’s value represents an estimate of the percentage of time a person’s heart shows signs of AFib while wearing Apple Watch.\n\nImportant\n\nThese samples are read-only. You can request permission to read the samples using this identifier, but you can’t request authorization to share them. This means you can’t save new AFib burden samples to the HealthKit store.\n\nSee Also\nVital signs\nstatic let heartRate: HKQuantityTypeIdentifier\nA quantity sample type that measures the user’s heart rate.\nstatic let restingHeartRate: HKQuantityTypeIdentifier\nA quantity sample type that measures the user’s resting heart rate.\nstatic let walkingHeartRateAverage: HKQuantityTypeIdentifier\nA quantity sample type that measures the user’s heart rate while walking.\nstatic let heartRateVariabilitySDNN: HKQuantityTypeIdentifier\nA quantity sample type that measures the standard deviation of heartbeat intervals.\nstatic let heartRateRecoveryOneMinute: HKQuantityTypeIdentifier\nA quantity sample that records the reduction in heart rate from the peak exercise rate to the rate one minute after exercising ended.\nstatic let oxygenSaturation: HKQuantityTypeIdentifier\nA quantity sample type that measures the user’s oxygen saturation.\nstatic let bodyTemperature: HKQuantityTypeIdentifier\nA quantity sample type that measures the user’s body temperature.\nstatic let bloodPressureDiastolic: HKQuantityTypeIdentifier\nA quantity sample type that measures the user’s diastolic blood pressure.\nstatic let bloodPressureSystolic: HKQuantityTypeIdentifier\nA quantity sample type that measures the user’s systolic blood pressure.\nstatic let respiratoryRate: HKQuantityTypeIdentifier\nA quantity sample type that measures the user’s respiratory rate."
  },
  {
    "title": "walkingHeartRateAverage | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquantitytypeidentifier/2874170-walkingheartrateaverage",
    "html": "Discussion\n\nThese samples use count/time units (described in HKUnit) and measure discrete values (described in HKQuantityAggregationStyle).\n\nA user's average heart rate while walking is correlated to their fitness level, because it corresponds to their heart's efficiency while physically active. Apple Watch estimates the walking heart rate by averaging heart rate samples taken while the user is walking, as well as heart rate samples taken during walking workout sessions.\n\nBecause walking heart rate estimates become more accurate as the day progresses, the system may delete earlier samples and replace them with better estimates. Apple Watch replaces only the samples written by the watch for the current or previous day.\n\nNote\n\nWalking heart rate samples are automatically created by HealthKit. You cannot save your own walking heart rate samples; however, you can query these samples.\n\nSee Also\nVital signs\nstatic let heartRate: HKQuantityTypeIdentifier\nA quantity sample type that measures the user’s heart rate.\nstatic let restingHeartRate: HKQuantityTypeIdentifier\nA quantity sample type that measures the user’s resting heart rate.\nstatic let heartRateVariabilitySDNN: HKQuantityTypeIdentifier\nA quantity sample type that measures the standard deviation of heartbeat intervals.\nstatic let heartRateRecoveryOneMinute: HKQuantityTypeIdentifier\nA quantity sample that records the reduction in heart rate from the peak exercise rate to the rate one minute after exercising ended.\nstatic let atrialFibrillationBurden: HKQuantityTypeIdentifier\nA quantity type that measures an estimate of the percentage of time a person’s heart shows signs of atrial fibrillation (AFib) while wearing Apple Watch.\nstatic let oxygenSaturation: HKQuantityTypeIdentifier\nA quantity sample type that measures the user’s oxygen saturation.\nstatic let bodyTemperature: HKQuantityTypeIdentifier\nA quantity sample type that measures the user’s body temperature.\nstatic let bloodPressureDiastolic: HKQuantityTypeIdentifier\nA quantity sample type that measures the user’s diastolic blood pressure.\nstatic let bloodPressureSystolic: HKQuantityTypeIdentifier\nA quantity sample type that measures the user’s systolic blood pressure.\nstatic let respiratoryRate: HKQuantityTypeIdentifier\nA quantity sample type that measures the user’s respiratory rate."
  },
  {
    "title": "oxygenSaturation | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquantitytypeidentifier/1615377-oxygensaturation",
    "html": "Discussion\n\nOxygen saturation samples measure the percentage of oxygen in the bloodstream. These samples use percent units (described in HKUnit) and measure discrete values (described in HKQuantityAggregationStyle).\n\nSee Also\nVital signs\nstatic let heartRate: HKQuantityTypeIdentifier\nA quantity sample type that measures the user’s heart rate.\nstatic let restingHeartRate: HKQuantityTypeIdentifier\nA quantity sample type that measures the user’s resting heart rate.\nstatic let walkingHeartRateAverage: HKQuantityTypeIdentifier\nA quantity sample type that measures the user’s heart rate while walking.\nstatic let heartRateVariabilitySDNN: HKQuantityTypeIdentifier\nA quantity sample type that measures the standard deviation of heartbeat intervals.\nstatic let heartRateRecoveryOneMinute: HKQuantityTypeIdentifier\nA quantity sample that records the reduction in heart rate from the peak exercise rate to the rate one minute after exercising ended.\nstatic let atrialFibrillationBurden: HKQuantityTypeIdentifier\nA quantity type that measures an estimate of the percentage of time a person’s heart shows signs of atrial fibrillation (AFib) while wearing Apple Watch.\nstatic let bodyTemperature: HKQuantityTypeIdentifier\nA quantity sample type that measures the user’s body temperature.\nstatic let bloodPressureDiastolic: HKQuantityTypeIdentifier\nA quantity sample type that measures the user’s diastolic blood pressure.\nstatic let bloodPressureSystolic: HKQuantityTypeIdentifier\nA quantity sample type that measures the user’s systolic blood pressure.\nstatic let respiratoryRate: HKQuantityTypeIdentifier\nA quantity sample type that measures the user’s respiratory rate."
  },
  {
    "title": "bodyTemperature | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquantitytypeidentifier/1615490-bodytemperature",
    "html": "Discussion\n\nThese samples use temperature units (described in HKUnit) and measure discrete values (described in HKQuantityAggregationStyle).\n\nTopics\nMetadata Keys\nlet HKMetadataKeyBodyTemperatureSensorLocation: String\nThe location where a specific body temperature reading was taken.\nSee Also\nVital signs\nstatic let heartRate: HKQuantityTypeIdentifier\nA quantity sample type that measures the user’s heart rate.\nstatic let restingHeartRate: HKQuantityTypeIdentifier\nA quantity sample type that measures the user’s resting heart rate.\nstatic let walkingHeartRateAverage: HKQuantityTypeIdentifier\nA quantity sample type that measures the user’s heart rate while walking.\nstatic let heartRateVariabilitySDNN: HKQuantityTypeIdentifier\nA quantity sample type that measures the standard deviation of heartbeat intervals.\nstatic let heartRateRecoveryOneMinute: HKQuantityTypeIdentifier\nA quantity sample that records the reduction in heart rate from the peak exercise rate to the rate one minute after exercising ended.\nstatic let atrialFibrillationBurden: HKQuantityTypeIdentifier\nA quantity type that measures an estimate of the percentage of time a person’s heart shows signs of atrial fibrillation (AFib) while wearing Apple Watch.\nstatic let oxygenSaturation: HKQuantityTypeIdentifier\nA quantity sample type that measures the user’s oxygen saturation.\nstatic let bloodPressureDiastolic: HKQuantityTypeIdentifier\nA quantity sample type that measures the user’s diastolic blood pressure.\nstatic let bloodPressureSystolic: HKQuantityTypeIdentifier\nA quantity sample type that measures the user’s systolic blood pressure.\nstatic let respiratoryRate: HKQuantityTypeIdentifier\nA quantity sample type that measures the user’s respiratory rate.\nRelated Documentation\nstruct HKQuantityTypeIdentifier\nThe identifiers that create quantity type objects.\nclass HKQuantitySample\nA sample that represents a quantity, including the value and the units.\nclass HKQuantity\nAn object that stores a value for a given unit."
  },
  {
    "title": "heartRateVariabilitySDNN | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquantitytypeidentifier/2881127-heartratevariabilitysdnn",
    "html": "Discussion\n\nThese samples use time units (described in HKUnit) and measure discrete values (described in HKQuantityAggregationStyle).\n\nHealthKit calculates the Heart rate variability (HRV) by measuring the variation between individual heartbeats. While there are multiple ways of computing HRV, HealthKit uses SDNN heart rate variability, which uses the standard deviation of the inter-beat (RR) intervals between normal heartbeats (typically measured in milliseconds).\n\nTopics\nMetadata\nlet HKMetadataKeyAlgorithmVersion: String\nA key that indicates the version number of the algorithm used to calculate the sample’s value.\nSee Also\nVital signs\nstatic let heartRate: HKQuantityTypeIdentifier\nA quantity sample type that measures the user’s heart rate.\nstatic let restingHeartRate: HKQuantityTypeIdentifier\nA quantity sample type that measures the user’s resting heart rate.\nstatic let walkingHeartRateAverage: HKQuantityTypeIdentifier\nA quantity sample type that measures the user’s heart rate while walking.\nstatic let heartRateRecoveryOneMinute: HKQuantityTypeIdentifier\nA quantity sample that records the reduction in heart rate from the peak exercise rate to the rate one minute after exercising ended.\nstatic let atrialFibrillationBurden: HKQuantityTypeIdentifier\nA quantity type that measures an estimate of the percentage of time a person’s heart shows signs of atrial fibrillation (AFib) while wearing Apple Watch.\nstatic let oxygenSaturation: HKQuantityTypeIdentifier\nA quantity sample type that measures the user’s oxygen saturation.\nstatic let bodyTemperature: HKQuantityTypeIdentifier\nA quantity sample type that measures the user’s body temperature.\nstatic let bloodPressureDiastolic: HKQuantityTypeIdentifier\nA quantity sample type that measures the user’s diastolic blood pressure.\nstatic let bloodPressureSystolic: HKQuantityTypeIdentifier\nA quantity sample type that measures the user’s systolic blood pressure.\nstatic let respiratoryRate: HKQuantityTypeIdentifier\nA quantity sample type that measures the user’s respiratory rate."
  },
  {
    "title": "heartRateRecoveryOneMinute | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquantitytypeidentifier/3929728-heartraterecoveryoneminute",
    "html": "Discussion\n\nHeart rate recovery samples use count units (described in HKUnit) and measure discrete values (described in HKQuantityAggregationStyle). These samples always record a positive value.\n\nSee Also\nVital signs\nstatic let heartRate: HKQuantityTypeIdentifier\nA quantity sample type that measures the user’s heart rate.\nstatic let restingHeartRate: HKQuantityTypeIdentifier\nA quantity sample type that measures the user’s resting heart rate.\nstatic let walkingHeartRateAverage: HKQuantityTypeIdentifier\nA quantity sample type that measures the user’s heart rate while walking.\nstatic let heartRateVariabilitySDNN: HKQuantityTypeIdentifier\nA quantity sample type that measures the standard deviation of heartbeat intervals.\nstatic let atrialFibrillationBurden: HKQuantityTypeIdentifier\nA quantity type that measures an estimate of the percentage of time a person’s heart shows signs of atrial fibrillation (AFib) while wearing Apple Watch.\nstatic let oxygenSaturation: HKQuantityTypeIdentifier\nA quantity sample type that measures the user’s oxygen saturation.\nstatic let bodyTemperature: HKQuantityTypeIdentifier\nA quantity sample type that measures the user’s body temperature.\nstatic let bloodPressureDiastolic: HKQuantityTypeIdentifier\nA quantity sample type that measures the user’s diastolic blood pressure.\nstatic let bloodPressureSystolic: HKQuantityTypeIdentifier\nA quantity sample type that measures the user’s systolic blood pressure.\nstatic let respiratoryRate: HKQuantityTypeIdentifier\nA quantity sample type that measures the user’s respiratory rate."
  },
  {
    "title": "HKDataTypeIdentifierHeartbeatSeries | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkdatatypeidentifierheartbeatseries",
    "html": "See Also\nVital signs\nstatic let heartRate: HKQuantityTypeIdentifier\nA quantity sample type that measures the user’s heart rate.\nstatic let lowHeartRateEvent: HKCategoryTypeIdentifier\nA category sample type for low heart rate events.\nstatic let highHeartRateEvent: HKCategoryTypeIdentifier\nA category sample type for high heart rate events.\nstatic let irregularHeartRhythmEvent: HKCategoryTypeIdentifier\nA category sample type for irregular heart rhythm events.\nstatic let restingHeartRate: HKQuantityTypeIdentifier\nA quantity sample type that measures the user’s resting heart rate.\nstatic let heartRateVariabilitySDNN: HKQuantityTypeIdentifier\nA quantity sample type that measures the standard deviation of heartbeat intervals.\nstatic let heartRateRecoveryOneMinute: HKQuantityTypeIdentifier\nA quantity sample that records the reduction in heart rate from the peak exercise rate to the rate one minute after exercising ended.\nstatic let atrialFibrillationBurden: HKQuantityTypeIdentifier\nA quantity type that measures an estimate of the percentage of time a person’s heart shows signs of atrial fibrillation (AFib) while wearing Apple Watch.\nstatic let walkingHeartRateAverage: HKQuantityTypeIdentifier\nA quantity sample type that measures the user’s heart rate while walking.\nclass HKElectrocardiogramType\nA type that identifies samples containing electrocardiogram data.\nstatic let oxygenSaturation: HKQuantityTypeIdentifier\nA quantity sample type that measures the user’s oxygen saturation.\nstatic let bodyTemperature: HKQuantityTypeIdentifier\nA quantity sample type that measures the user’s body temperature.\nstatic let bloodPressure: HKCorrelationTypeIdentifier\nA correlation sample that combines a systolic sample and a diastolic sample into a single blood pressure reading.\nstatic let bloodPressureSystolic: HKQuantityTypeIdentifier\nA quantity sample type that measures the user’s systolic blood pressure.\nstatic let bloodPressureDiastolic: HKQuantityTypeIdentifier\nA quantity sample type that measures the user’s diastolic blood pressure.\nstatic let respiratoryRate: HKQuantityTypeIdentifier\nA quantity sample type that measures the user’s respiratory rate.\nRelated Documentation\nclass HKHeartbeatSeriesSample\nA sample that represents a series of heartbeats.\nclass HKHeartbeatSeriesQuery\nA query that returns the heartbeat data contained in a heartbeat series sample.\nclass HKHeartbeatSeriesBuilder\nA builder object for incrementally building a heartbeat series."
  },
  {
    "title": "bloodPressure | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkcorrelationtypeidentifier/1615325-bloodpressure",
    "html": "See Also\nCorrelation Types\nstatic let food: HKCorrelationTypeIdentifier\nFood correlation types combine any number of nutritional samples into a single food object.\nRelated Documentation\nstruct HKCorrelationTypeIdentifier\nThe identifiers that create correlation type objects.\nclass HKCorrelationType\nA type that identifies samples that group multiple subsamples.\nclass HKCorrelation\nA sample that groups multiple related samples into a single entry."
  },
  {
    "title": "HKVerifiableClinicalRecord | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkverifiableclinicalrecord",
    "html": "Overview\n\nHKVerifiableClinicalRecord samples contain data from a SMART Health Card or EU Digital COVID Certificate. Verifiable clinical records combine information about the user’s identity with clinical data, like an immunization record or a lab test result. The organization that produced the data cryptographically signs the bundle.\n\nApps that use verifiable clinical records can use the cryptographic signature to verify the authenticity of the contents. To verify the card:\n\nAccess the card’s raw payload using the clinical record’s dataRepresentation property.\n\nUnzip the payload and parse out the iss value, which contains a URL that identifies the organization that issued the card.\n\nGet the public key from the issuer.\n\nVerify the payload’s signature.\n\nFor more information, see SMART Health Cards Framework and Electronic Health Certificates. You can download example SMART cards for testing and development from Examples.\n\nTopics\nIdentifying the Subject\nvar subject: HKVerifiableClinicalRecordSubject\nData about the person whose clinical data the card contains.\nIdentifying the Issuer\nvar issuerIdentifier: String\nAn identifier that represents the card’s issuer.\nReading Metadata\nvar issuedDate: Date\nThe date when the issuer created the card.\nvar relevantDate: Date\nA date relevant to this record, such as when the issuer administered a vaccine or performed a test.\nvar expirationDate: Date?\nThe date when the card expires.\nvar recordTypes: [String]\nAn array of strings representing the types of records contained in the card.\nvar sourceType: HKVerifiableClinicalRecordSourceType?\nThe source for the verifiable clinical record\nstruct HKVerifiableClinicalRecordSourceType\nThe source type for the verifiable clinical record.\nvar itemNames: [String]\nA human-readable description of the card’s contents.\nAccessing the Raw Payload\nvar dataRepresentation: Data\nA raw representation of the record’s data.\nvar jwsRepresentation: Data\nA raw representation of the SMART Health Card’s contents.\nRelationships\nInherits From\nHKSample\nSee Also\nMedical records\nAccessing Health Records\nRead clinical record data from the HealthKit store.\nAccessing Sample Data in the Simulator\nSet up sample accounts to build and test your app.\nAccessing a User’s Clinical Records\nRequest authorization to query HealthKit for a user’s clinical records and display them in your app.\nAccessing Data from a SMART Health Card\nQuery for and validate a verifiable clinical record.\nclass HKClinicalRecord\nA sample that stores a clinical record.\nclass HKFHIRResource\nAn object containing Fast Healthcare Interoperability Resources (FHIR) data.\nclass HKVerifiableClinicalRecordSubject\nThe subject associated with a signed clinical record.\nclass HKCDADocumentSample\nA Clinical Document Architecture (CDA) sample that stores a single document.\nclass HKDocumentSample\nAn abstract class that represents a health document in the HealthKit store.\nstatic let CDA: HKDocumentTypeIdentifier\nThe CDA Document type identifier, used when requesting permission to read or share CDA documents.\nclass HKDocumentType\nA sample type used to create queries for documents."
  },
  {
    "title": "HKWorkoutRoute | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkoutroute",
    "html": "Overview\n\nWhen creating a workout route, you do not instantiate the HKWorkoutRoute objects directly. Instead, create a HKWorkoutRouteBuilder object, and provide it with location data throughout the workout. After the workout ends, call the route builder’s finishRoute(with:metadata:completion:) method to create the route. For detailed instructions, see Creating a workout route.\n\nThe route’s location data is stored as an array of CLLocation objects. Because the route may contain a large number of location objects, use a HKWorkoutRouteQuery object to asynchronously read the location data from the HealthKit store in batches. For more information, see Reading route data.\n\nUsing workout routes\n\nLike many HealthKit classes, the HKWorkoutRoute class should not be subclassed. You can extend HKWorkoutRoute objects by adding custom metadata keys and values to the metadata dictionary when the object is created.\n\nRelationships\nInherits From\nHKSeriesSample\nSee Also\nRoute data\nCreating a workout route\nRecord the user’s route during a workout.\nReading route data\nAccess the user’s route for a workout.\nclass HKWorkoutRouteBuilder\nA builder object that incrementally constructs a workout route.\nstruct HKWorkoutRouteQueryDescriptor\nA query interface that reads the location data stored in a workout route using Swift concurrency.\nclass HKWorkoutRouteQuery\nA query to access the location data stored in a workout route.\nlet HKWorkoutRouteTypeIdentifier: String\nA series sample containing location data that defines the route the user took during a workout.\nclass HKSeriesBuilder\nAn abstract base class for building series samples.\nclass HKSeriesSample\nAn abstract base class that defines samples that contain a series of items."
  },
  {
    "title": "HKElectrocardiogram.VoltageMeasurement | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkelectrocardiogram/voltagemeasurement",
    "html": "Topics\nAccessing Data\nfunc quantity(for: HKElectrocardiogram.Lead) -> HKQuantity?\nReturns the voltage for the specified lead.\nvar timeSinceSampleStart: TimeInterval\nThe time of the measurement relative to the sample’s start time.\nRelationships\nInherits From\nNSObject\nConforms To\nNSCopying\nSee Also\nAccessing Voltage Measurements\nvar numberOfVoltageMeasurements: Int\nThe number of voltage measurements associated with this sample.\nvar samplingFrequency: HKQuantity?\nThe frequency at which the Apple Watch sampled the voltage.\nenum HKElectrocardiogram.Lead\nThe lead used to record a voltage measurement."
  },
  {
    "title": "HKElectrocardiogram | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkelectrocardiogram",
    "html": "Overview\n\nAn HKElectrocardiogram is a collection of voltage values representing waveforms from one or more leads. The HKElectrocardiogram sample provides high-level details about the ECG reading, such as the sampling frequency or classification. HealthKit provides read-only access to electrocardiogram (ECG) data saved by Apple Watch.\n\nYou can query for HKElectrocardiogram samples using an HKSampleQuery.\n\n// Create the electrocardiogram sample type.\nlet ecgType = HKObjectType.electrocardiogramType()\n\n\n\n\n// Query for electrocardiogram samples\nlet ecgQuery = HKSampleQuery(sampleType: ecgType,\n                             predicate: nil,\n                             limit: HKObjectQueryNoLimit,\n                             sortDescriptors: nil) { (query, samples, error) in\n    if let error = error {\n        // Handle the error here.\n        fatalError(\"*** An error occurred \\(error.localizedDescription) ***\")\n    }\n    \n    guard let ecgSamples = samples as? [HKElectrocardiogram] else {\n        fatalError(\"*** Unable to convert \\(String(describing: samples)) to [HKElectrocardiogram] ***\")\n    }\n    \n    for sample in ecgSamples {\n        // Handle the samples here.\n        \n    }\n}\n\n\n// Execute the query.\nhealthStore.execute(ecgQuery)\n\n\nAfter retrieving an HKElectrocardiogram sample, you can access the voltage measurements associated with the sample use an HKElectrocardiogramQuery query.\n\n// Create a query for the voltage measurements\nlet voltageQuery = HKElectrocardiogramQuery(ecgSample) { (query, result) in\n    switch(result) {\n    \n    case .measurement(let measurement):\n        if let voltageQuantity = measurement.quantity(for: .appleWatchSimilarToLeadI) {\n            // Do something with the voltage quantity here.\n\n\n        }\n    \n    case .done:\n        // No more voltage measurements. Finish processing the existing measurements.\n\n\n    case .error(let error):\n        // Handle the error here.\n\n\n    }\n}\n\n\n// Execute the query.\nhealthStore.execute(voltageQuery)\n\n\nTopics\nAccessing Overview Information\nvar classification: HKElectrocardiogram.Classification\nThe ECG’s classification.\nenum HKElectrocardiogram.Classification\nClassifications returned by Apple Watch’s ECG algorithm.\nvar averageHeartRate: HKQuantity?\nThe user’s average heart rate during the ECG.\nvar symptomsStatus: HKElectrocardiogram.SymptomsStatus\nA value that indicates whether the user entered a symptom when they recorded the ECG.\nenum HKElectrocardiogram.SymptomsStatus\nValues indicating whether the user entered a symptom when they recorded the ECG.\nAccessing Voltage Measurements\nvar numberOfVoltageMeasurements: Int\nThe number of voltage measurements associated with this sample.\nvar samplingFrequency: HKQuantity?\nThe frequency at which the Apple Watch sampled the voltage.\nclass HKElectrocardiogram.VoltageMeasurement\nThe voltage for all leads at a single point in time.\nenum HKElectrocardiogram.Lead\nThe lead used to record a voltage measurement.\nSpecifying Metadata\nlet HKMetadataKeyAppleECGAlgorithmVersion: String\nA key for metadata indicating the version number of the algorithm Apple Watch uses to generate an ECG reading.\nenum HKAppleECGAlgorithmVersion\nVersion numbers for the algorithm Apple Watch uses to generate an ECG reading.\nSpecifying Predicate Key Paths\nlet HKPredicateKeyPathECGClassification: String\nThe key path for the sample’s classification.\nlet HKPredicateKeyPathECGSymptomsStatus: String\nThe key path for the sample’s symptom status.\nlet HKPredicateKeyPathAverageHeartRate: String\nThe key path for the sample’s average heart rate.\nRelationships\nInherits From\nHKSample\nSee Also\nElectrocardiograms\nclass HKElectrocardiogram.VoltageMeasurement\nThe voltage for all leads at a single point in time."
  },
  {
    "title": "HKDiscreteQuantitySample | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkdiscretequantitysample",
    "html": "Overview\n\nA quantity sample contains one or more HKQuantity objects. Each quantity represents a single piece of data with a single numeric value and the value’s associated units. Use these samples to store data representing independent measurements, such as height, heart rate, or temperature.\n\nThe HKDiscreteQuantitySample class is a concrete subclass of the HKQuantitySample class. Discrete quantity samples are immutable; you set the sample’s properties when you create it, and they cannot change.\n\nExtend Discrete Quantity Samples\n\nLike many HealthKit classes, you should not subclass the HKDiscreteQuantitySample class. You may extend this class by adding metadata with custom keys to save related data used by your app.\n\nFor more information, see init(type:quantity:start:end:metadata:).\n\nTopics\nAccessing Calculated Values\nvar averageQuantity: HKQuantity\nThe average of all quantities contained by the sample.\nvar maximumQuantity: HKQuantity\nThe maximum quantity contained by the sample.\nvar minimumQuantity: HKQuantity\nThe minimum value contained by the sample.\nvar mostRecentQuantity: HKQuantity\nThe most recent quantity contained by the sample.\nvar mostRecentQuantityDateInterval: DateInterval\nThe date interval for the most recent quantity contained by the sample.\nSpecifying Predicate Key Paths\nlet HKPredicateKeyPathMin: String\nThe key path for the sample’s minimum quantity.\nlet HKPredicateKeyPathAverage: String\nThe key path for the sample’s average quantity.\nlet HKPredicateKeyPathMax: String\nThe key path for the sample’s maximum quantity.\nlet HKPredicateKeyPathMostRecent: String\nThe key path for the sample’s most recent quantity.\nlet HKPredicateKeyPathMostRecentStartDate: String\nThe key path for the start date of the sample’s most recent quantity.\nlet HKPredicateKeyPathMostRecentEndDate: String\nThe key path for the end date of the sample’s most recent quantity.\nlet HKPredicateKeyPathMostRecentDuration: String\nA key path for the duration of the sample’s most recent quantity.\nRelationships\nInherits From\nHKQuantitySample\nSee Also\nBasic samples\nclass HKCumulativeQuantitySample\nA sample that represents a cumulative quantity.\nclass HKQuantitySample\nA sample that represents a quantity, including the value and the units.\nclass HKCategorySample\nA sample with values from a short list of possible values.\nclass HKCorrelation\nA sample that groups multiple related samples into a single entry.\nUnits and quantities\nObjects used to specify a quantity for a given unit, and to convert between units.\nMetadata Keys\nConstants used to add metadata to objects stored in HealthKit."
  },
  {
    "title": "HKError.Code.errorRequiredAuthorizationDenied | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkerror/code/errorrequiredauthorizationdenied",
    "html": "Discussion\n\nYou can specify required clinical record types using the NSHealthRequiredReadAuthorizationTypeIdentifiers Info.plist key.\n\nSee Also\nErrors\ncase errorHealthDataUnavailable\nHealthKit accessed on an unsupported device, such as an iPad.\ncase errorHealthDataRestricted\nA Mobile Device Management (MDM) profile restricts the use of HealthKit on this device.\ncase errorInvalidArgument\nThe app passed an invalid argument to the HealthKit API.\ncase errorAuthorizationDenied\nThe user hasn’t given the app permission to save data.\ncase errorAuthorizationNotDetermined\nThe app hasn’t yet asked the user for the authorization required to complete the task.\ncase errorDatabaseInaccessible\nThe HealthKit data is unavailable because it’s protected and the device is locked.\ncase errorUserCanceled\nThe user canceled the operation.\ncase errorAnotherWorkoutSessionStarted\nAnother app started a workout session.\ncase errorUserExitedWorkoutSession\nThe user exited your application while a workout session was running.\ncase errorNoData\nData is unavailable for the requested query and predicate."
  },
  {
    "title": "HKError.Code.errorAuthorizationNotDetermined | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkerror/code/errorauthorizationnotdetermined",
    "html": "Discussion\n\nThis error occurs when your app doesn’t request proper authorization before calling any other HealthKit methods. For more information on setting up HealthKit, see HealthKit.\n\nSee Also\nErrors\ncase errorHealthDataUnavailable\nHealthKit accessed on an unsupported device, such as an iPad.\ncase errorHealthDataRestricted\nA Mobile Device Management (MDM) profile restricts the use of HealthKit on this device.\ncase errorInvalidArgument\nThe app passed an invalid argument to the HealthKit API.\ncase errorAuthorizationDenied\nThe user hasn’t given the app permission to save data.\ncase errorRequiredAuthorizationDenied\nThe user hasn’t granted the application authorization to access all the required clinical record types.\ncase errorDatabaseInaccessible\nThe HealthKit data is unavailable because it’s protected and the device is locked.\ncase errorUserCanceled\nThe user canceled the operation.\ncase errorAnotherWorkoutSessionStarted\nAnother app started a workout session.\ncase errorUserExitedWorkoutSession\nThe user exited your application while a workout session was running.\ncase errorNoData\nData is unavailable for the requested query and predicate."
  },
  {
    "title": "HKStatisticsOptions | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkstatisticsoptions",
    "html": "Overview\n\nYou cannot combine a discrete option with a cumulative option. You can, however, combine multiple discrete options together to perform multiple calculations. You can also combine the separateBySource option with any of the other options.\n\nlet cumulativeActiveEnergyBurned =\n    HKObjectType.quantityTypeForIdentifier(HKQuantityTypeIdentifierActiveEnergyBurned)\n \nlet discreteHeartRate =\n    HKObjectType.quantityTypeForIdentifier(HKQuantityTypeIdentifierHeartRate)\n \n// Cannot combine cumulative options with discrete options.\n// However, you can combine a cumulative option and seperated by source\nlet cumulativeQuery = HKStatisticsQuery(quantityType:cumulativeActiveEnergyBurned,\n                                        quantitySamplePredicate:nil,\n                                        options: .CumulativeSum | .SeparateBySource) {\n                                            query, statistics, error in\n                                            \n                                            // ... process the results here\n}\n \n// You can also combine any number of discrete options\n// and the seperated by source option.\nlet discreteQuery = HKStatisticsQuery(quantityType: discreteHeartRate,\n                                      quantitySamplePredicate: nil,\n                                      options: .DiscreteAverage | .DiscreteMin |\n                                        .DiscreteMax | .SeparateBySource) {\n                                            query, statistics, error in\n                                            \n                                            // ... process the results here\n}\n\nTopics\nConstants\nstatic var separateBySource: HKStatisticsOptions\nAn option indicating that the system calculates the specified statistics separately for each source.\nstatic var discreteAverage: HKStatisticsOptions\nAn option indicating that the system calculates the average quantity for the samples.\nstatic var discreteMin: HKStatisticsOptions\nAn option indicating that the system calculates the minimum quantity for the samples.\nstatic var discreteMax: HKStatisticsOptions\nAn option indicating that the system calculates the maximum quantity for the samples.\nstatic var cumulativeSum: HKStatisticsOptions\nAn option indicating that the system calculates the sum of all the quantities for the samples.\nstatic var mostRecent: HKStatisticsOptions\nAn option indicating that the system returns the most recent quantity from the matching samples.\nstatic var duration: HKStatisticsOptions\nAn option indicating that the system calculates the total duration covering all the samples.\nDeprecated Constants\nstatic var discreteMostRecent: HKStatisticsOptions\nAn option indicating that the system returns the most recent quantity from the matching samples.\nInitializers\ninit(rawValue: UInt)\nReturns a newly initialized statistics option using the provided integer.\nRelationships\nConforms To\nOptionSet\nSendable\nSee Also\nStatistics\nExecuting Statistical Queries\nCreate and run statistical queries.\nExecuting Statistics Collection Queries\nCalculate statistical data for graphs and charts.\nstruct HKStatisticsQueryDescriptor\nA query descriptor that calculates the minimum, maximum, average, or sum over a set of samples from the HealthKit store.\nclass HKStatisticsQuery\nA query that performs statistical calculations over a set of matching quantity samples, and returns the results.\nstruct HKStatisticsCollectionQueryDescriptor\nA query descriptor that gathers a collection of statistics calculated over a series of fixed-length time intervals.\nclass HKStatisticsCollectionQuery\nA query that performs multiple statistics queries over a series of fixed-length time intervals.\nclass HKStatistics\nAn object that represents the result of calculating the minimum, maximum, average, or sum over a set of samples from the HealthKit store.\nclass HKStatisticsCollection\nAn object that manages a collection of statistics, representing the results calculated over separate time intervals."
  },
  {
    "title": "HKStatisticsCollection | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkstatisticscollection",
    "html": "Overview\n\nFor more information on statistics objects, see HKStatistics. For more information on calculating statistics over consecutive time intervals, see HKStatisticsCollectionQuery.\n\nTopics\nAccessing Statistics Collections\nfunc statistics() -> [HKStatistics]\nReturns an array of statistics objects representing the populated time intervals covered by the statistics collection query.\nfunc statistics(for: Date) -> HKStatistics?\nReturns the statistics object for the time interval that contains the provided date.\nfunc enumerateStatistics(from: Date, to: Date, with: (HKStatistics, UnsafeMutablePointer<ObjCBool>) -> Void)\nEnumerates the statistics objects for all the time intervals from the start date until the end date.\nGetting Information About Statistics Collections\nfunc sources() -> Set<HKSource>\nReturns a set containing all the sources that had samples matched by the statistics collection query.\nRelationships\nInherits From\nNSObject\nSee Also\nStatistics\nExecuting Statistical Queries\nCreate and run statistical queries.\nExecuting Statistics Collection Queries\nCalculate statistical data for graphs and charts.\nstruct HKStatisticsQueryDescriptor\nA query descriptor that calculates the minimum, maximum, average, or sum over a set of samples from the HealthKit store.\nclass HKStatisticsQuery\nA query that performs statistical calculations over a set of matching quantity samples, and returns the results.\nstruct HKStatisticsCollectionQueryDescriptor\nA query descriptor that gathers a collection of statistics calculated over a series of fixed-length time intervals.\nclass HKStatisticsCollectionQuery\nA query that performs multiple statistics queries over a series of fixed-length time intervals.\nclass HKStatistics\nAn object that represents the result of calculating the minimum, maximum, average, or sum over a set of samples from the HealthKit store.\nstruct HKStatisticsOptions\nOptions for specifying the statistic to calculate."
  },
  {
    "title": "HKVerifiableClinicalRecordQueryDescriptor | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkverifiableclinicalrecordquerydescriptor",
    "html": "Overview\n\nUse HKVerifiableClinicalRecordQueryDescriptor to read verifiable clinical records.\n\n// Calculate the start and end dates.\nvar sixMonthsAgo = DateComponents()\nsixMonthsAgo.month = -6\n\n\nlet end = Date()\nguard let start = Calendar.current.date(byAdding: sixMonthsAgo, to: end) else {\n    fatalError(\"*** Unable to calculate a date using \\(end) and \\(sixMonthsAgo) ***\")\n}\n\n\n// Create the predicate.\nlet lastSixMonthsPredicate =\nHKQuery.predicateForVerifiableClinicalRecords(withRelevantDateWithin: DateInterval(start: start, end: end))\n\n\n// Create the descriptor.\nlet healthRecordDescriptor = HKVerifiableClinicalRecordQueryDescriptor(\n    recordTypes: [.covid19, .immunization],\n    sourceTypes: [.smartHealthCard, .euDigitalCOVIDCertificate],\n    predicate: lastSixMonthsPredicate)\n\n\n// Asynchronously read the records.\nlet records = try await healthRecordDescriptor.result(for: store)\n\n\n// Use the records here.\nfor record in records {\n    print(record.recordTypes)\n    print(record.itemNames)\n    print(record.issuedDate)\n    print(record.expirationDate ?? \"No expiration date.\")\n}\n\n\nWhen you call the descriptor’s result(for:) method, it creates and executes an HKVerifiableClinicalRecordQuery in the background, passing the results as an array of HKVerifiableClinicalRecord instances.\n\nUnlike other HealthKit queries, you don’t need to request permission to read verifiable health records before using this descriptor. HealthKit prompts the user for permission to read the records each time your app runs the underlying query.\n\nNote\n\nRunning an HKVerifiableClinicalRecordQuery requires a special entitlement from Apple, or the query fails with an HKError.Code.errorAuthorizationDenied error. To request the entitlement, see Request Access to the Verifiable Health Records Entitlement.\n\nTopics\nCreating Query Descriptors\ntypealias HKVerifiableClinicalRecordQueryDescriptor.Output\nThe type of data that the query returns.\ninit(recordTypes: [HKVerifiableClinicalRecordCredentialType], sourceTypes: [HKVerifiableClinicalRecordSourceType], predicate: NSPredicate?)\nCreates a query descriptor for reading verifiable clinical records.\nRunning Queries\nfunc result(for: HKHealthStore) -> [HKVerifiableClinicalRecord]\nRuns a one-shot query that asynchronously reads matching clinical records.\nAccessing Query Properties\nvar recordTypes: [HKVerifiableClinicalRecordCredentialType]\nThe types of records returned by this query.\nvar sourceTypes: [HKVerifiableClinicalRecordSourceType]\nThe source for the verifiable clinical records, for example from a SMART Health Card or an EU Digital COVID Certificate.\nvar predicate: NSPredicate?\nA predicate that limits the results returned by the query.\nRelationships\nConforms To\nHKAsyncQuery\nSee Also\nClinical record queries\nclass HKVerifiableClinicalRecordQuery\nA query for one-time access to a SMART Health Card or EU Digital COVID Certificate.\nstruct HKVerifiableClinicalRecordSourceType\nThe source type for the verifiable clinical record.\nstruct HKVerifiableClinicalRecordCredentialType\nThe type of record returned by a verifiable clinical record query.\nclass HKDocumentQuery\nA query that returns a snapshot of all matching documents currently saved in the HealthKit store."
  },
  {
    "title": "HKDevice | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkdevice",
    "html": "Overview\n\nDevices include Apple Watch, iPhone, and any other health or fitness peripherals that produce the sample data stored in HealthKit. Device objects are immutable: You set the device’s properties when you create the HKDevice object, and they cannot change.\n\nTopics\nCreating Device Objects\ninit(name: String?, manufacturer: String?, model: String?, hardwareVersion: String?, firmwareVersion: String?, softwareVersion: String?, localIdentifier: String?, udiDeviceIdentifier: String?)\nInitializes a new device object.\nclass func local() -> HKDevice\nreturns a device object that represents the current device.\nAccessing Data About a Device\nvar udiDeviceIdentifier: String?\nThe device identifier portion of the US Food and Drug Administration’s Unique Device Identifier (UDI).\nvar firmwareVersion: String?\nAn arbitrary string representing the current version of the firmware running on the device.\nvar hardwareVersion: String?\nAn arbitrary string representing the hardware version of the device.\nvar localIdentifier: String?\nAn identifier that uniquely identifies the device object on the hardware running this code.\nvar manufacturer: String?\nA string representing the device’s manufacturer.\nvar model: String?\nA string representing the device’s model.\nvar name: String?\nThe user-facing name for the device.\nvar softwareVersion: String?\nAn arbitrary string representing the version of the software running on the device.\nRelationships\nInherits From\nNSObject\nConforms To\nNSCopying\nNSSecureCoding\nSee Also\nSources and devices\nstruct HKSourceQueryDescriptor\nA query interface that uses Swift concurrency to read the apps and devices that produced the matching samples.\nclass HKSourceRevision\nAn object indicating the source of a HealthKit sample.\nclass HKSource\nAn object indicating the app or device that created a HealthKit sample\nclass HKSourceQuery\nA query that returns a list of sources, such as apps and devices, that have saved matching queries to the HealthKit store."
  },
  {
    "title": "HKSourceQuery | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hksourcequery",
    "html": "Overview\n\nSource queries return a list of sources that have saved samples matching the specified sample types. Sources can be apps or devices (like Apple Watch or Bluetooth heart-rate monitors).\n\nSource queries are immutable: Their properties are set when they are first created, and they can’t change.\n\nTopics\nCreating Source Queries\nExecuting Source Queries\nCreate and run source queries.\ninit(sampleType: HKSampleType, samplePredicate: NSPredicate?, completionHandler: (HKSourceQuery, Set<HKSource>?, Error?) -> Void)\nInstantiates and returns a source query.\nRelationships\nInherits From\nHKQuery\nSee Also\nSources and devices\nstruct HKSourceQueryDescriptor\nA query interface that uses Swift concurrency to read the apps and devices that produced the matching samples.\nclass HKSourceRevision\nAn object indicating the source of a HealthKit sample.\nclass HKSource\nAn object indicating the app or device that created a HealthKit sample\nclass HKDevice\nA device that generates data for HealthKit."
  },
  {
    "title": "HKSourceQueryDescriptor | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hksourcequerydescriptor",
    "html": "Overview\n\nUse HKSourceQueryDescriptor to run a general query that returns a snapshot of all the apps and devices that have saved matching data to the HealthKit store.\n\n// Create the source descriptor.\nlet sourceDescriptor = HKSourceQueryDescriptor(predicate: .workout())\n\n\n// Read the source data from the HealthKit store.\nlet sources = try await sourceDescriptor.result(for: store)\n\n\nfor source in sources {\n    // Process the sources here.\n    print(source)\n}\n\n\nWhen you call the descriptor’s result(for:) method, it creates and executes an HKSourceQuery in the background, passing the results as an array of HKSource instances.\n\nTopics\nCreating Source Query Descriptors\ntypealias HKSourceQueryDescriptor.Output\nThe type of data that the query returns.\ninit(predicate: HKSamplePredicate<Sample>)\nCreates a source query descriptor.\nRunning Queries\nfunc result(for: HKHealthStore) -> [HKSource]\nRuns a one-shot query that asynchronously returns a snapshot of all the sources that saved matching data.\nAccessing Query Properties\nvar predicate: HKSamplePredicate<Sample>\nA predicate that limits the data used by the query.\nRelationships\nConforms To\nHKAsyncQuery\nSee Also\nSources and devices\nclass HKSourceRevision\nAn object indicating the source of a HealthKit sample.\nclass HKSource\nAn object indicating the app or device that created a HealthKit sample\nclass HKDevice\nA device that generates data for HealthKit.\nclass HKSourceQuery\nA query that returns a list of sources, such as apps and devices, that have saved matching queries to the HealthKit store."
  },
  {
    "title": "HKAnchoredObjectQueryDescriptor | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkanchoredobjectquerydescriptor",
    "html": "Overview\n\nUse HKAnchoredObjectQueryDescriptor to read any changes to the HealthKit store that occurred after the provided anchor. When creating a new query descriptor, if you pass nil as the anchor parameter, the query reads all matching data from the store.\n\nThere are two common use cases for anchored object queries:\n\nBatch-read all the matching data from the HealthKit store using a series of HKAnchoredObjectQueryDescriptor instances.\n\nMonitor the HealthKit store for any changes to the matching data using a long-running HKAnchoredObjectQueryDescriptor instance.\n\nBatch Read Existing Data\n\nUsers may have large quantities of data saved to the HealthKit store; therefore, reading all data for a given data type might become very expensive, both in terms of memory usage and processing time. To avoid performance issues, you can use HKAnchoredObjectQueryDescriptor queries to read the data in batches.\n\nStart with a nil-valued anchor, and create a one-shot query descriptor that reads a batch of data. After you process the results from one query, start a new one-shot query for the next batch. Continue reading batches until there’s no new data.\n\nlet stepType = HKQuantityType(.stepCount)\n\n\n// Start by reading all matching data.\nvar anchor: HKQueryAnchor? = nil\nvar results: HKAnchoredObjectQueryDescriptor<HKQuantitySample>.Result\n\n\n\n\nrepeat {\n    // Create a query descriptor that reads a batch\n    // of 100 matching samples.\n    let anchorDescriptor =\n    HKAnchoredObjectQueryDescriptor(\n        predicates: [.quantitySample(type: stepType)],\n        anchor: anchor,\n        limit: 100\n    )\n\n\n    results = try await anchorDescriptor.result(for: store)\n    anchor = results.newAnchor\n    \n    // Process the batch of results here.\n    \n} while (results.addedSamples != []) && (results.deletedObjects != [])\n\n\nTip\n\nBecause HKQueryAnchor instances adopt the NSSecureCoding protocol, you can save the most recent anchor and use it the next time your app launches.\n\nMonitor for Changes\n\nTo monitor the HealthKit store for changes, start by creating an HKAnchoredObjectQueryDescriptor instance that matches the data you want to monitor. Pass in the anchor from the last time you read data from the HealthKit store.\n\nNext, call the query descriptor’s results(for:) method to start your long-running query. This method returns an AsyncSequence instance which HealthKit uses to return HKAnchoredObjectQueryDescriptor.Results.Element instances. The first result represents any changes currently in the HealthKit store, and additional results represent changes as they occur.\n\nlet stepType = HKQuantityType(.stepCount)\n\n\n// Create a query descriptor.\nlet anchorDescriptor =\nHKAnchoredObjectQueryDescriptor(\n    predicates: [.quantitySample(type: stepType)],\n    anchor: anchor\n)\n\n\nlet updateQueue = anchorDescriptor.results(for: store)\n\n\nupdateTask = Task {\n    for try await update in updateQueue {\n        // Process the update here.\n        print(update)\n    }\n}\n\n\nTopics\nCreating Query Descriptors\ntypealias HKAnchoredObjectQueryDescriptor.Output\nThe type of data that the anchored object query returns.\ntypealias HKAnchoredObjectQueryDescriptor.Sequence\nThe asynchronous sequence that the anchored object query returns.\ninit(predicates: [HKSamplePredicate<Sample>], anchor: HKQueryAnchor?, limit: Int?)\nCreates an anchored object query descriptor.\nRunning Queries\nfunc result(for: HKHealthStore) -> HKAnchoredObjectQueryDescriptor<Sample>.Result\nRuns a one-shot query and asynchronously returns a snapshot of the current matching results.\nfunc results(for: HKHealthStore) -> HKAnchoredObjectQueryDescriptor<Sample>.Results\nInitiates a long-running query that returns its results using an asynchronous sequence.\nstruct HKAnchoredObjectQueryDescriptor.Result\nA set of results from an anchored object query.\nstruct HKAnchoredObjectQueryDescriptor.Results\nAn asynchronous sequence that emits updates from an anchored object query.\nAccessing Query Properties\nvar predicates: [HKSamplePredicate<Sample>]\nA predicate that limits the results that the query returns.\nvar anchor: HKQueryAnchor?\nAn anchor that a previous anchored object query returned.\nvar limit: Int?\nThe maximum number of samples that the query returns.\nRelationships\nConforms To\nHKAsyncQuery\nHKAsyncSequenceQuery\nSee Also\nLong-running queries\nstruct HKActivitySummaryQueryDescriptor\nA query interface that reads activity summaries using Swift concurrency.\nclass HKActivitySummaryQuery\nA query for reading activity summary objects from the HealthKit store.\nclass HKAnchoredObjectQuery\nA query that returns changes to the HealthKit store, including a snapshot of new changes and continuous monitoring as a long-running query.\nclass HKObserverQuery\nA long-running query that monitors the HealthKit store and updates your app when the HealthKit store saves or deletes a matching sample."
  },
  {
    "title": "HKElectrocardiogramQueryDescriptor | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkelectrocardiogramquerydescriptor",
    "html": "Overview\n\nUse HKElectrocardiogramQueryDescriptor to access the individual voltage measurements associated with an HKElectrocardiogram sample. To read the individual voltage measurements, create an electrocardiogram query descriptor using the desired sample, and then call the results(for:) method on the descriptor.\n\n// Create the descriptor.\nlet ecgDescriptor = HKElectrocardiogramQueryDescriptor(myElectrocardiogram)\n\n\n// Get the AsyncSequence that returns individual voltage measurements.\nlet voltages = ecgDescriptor.results(for: store)\n\n\n// Access each voltage measurement.\nfor try await measurement in voltages {\n    \n    // Process the results here.\n    print(measurement.quantity(for: .appleWatchSimilarToLeadI) ?? \"No Measurement\")\n    print(measurement.timeSinceSampleStart)\n}\n\n\nWhile this method returns an AsyncSequence, unlike the long-running queries, this sequence has a finite size. Iterating over the sequence asynchronously returns voltage measurements, automatically terminating after you receive all the measurements.\n\nTopics\nCreating Electrocardiogram Query Descriptors\ntypealias HKElectrocardiogramQueryDescriptor.Sequence\nThe type of asynchronous sequence that the query returns.\ninit(HKElectrocardiogram)\nCreates a query descriptor that reads voltage measurements from the provided electrocardiogram sample.\nRunning Queries\nfunc results(for: HKHealthStore) -> HKElectrocardiogramQueryDescriptor.Results\nRuns a one-shot query that returns an asynchronous sequence of data representing individual heartbeats.\nstruct HKElectrocardiogramQueryDescriptor.Results\nAn asynchronous sequence that emits data about individual voltage measurements from an electrocardiogram sample.\nAccessing Query Properties\nvar electrocardiogram: HKElectrocardiogram\nThe sample that contains the voltage measurements.\nRelationships\nConforms To\nHKAsyncSequenceQuery\nSee Also\nSeries queries\nstruct HKQuantitySeriesSampleQueryDescriptor\nA query interface that reads the series data associated with quantity samples using Swift concurrency.\nclass HKQuantitySeriesSampleQuery\nA query that accesses the series data associated with a quantity sample.\nstruct HKWorkoutRouteQueryDescriptor\nA query interface that reads the location data stored in a workout route using Swift concurrency.\nclass HKWorkoutRouteQuery\nA query to access the location data stored in a workout route.\nstruct HKHeartbeatSeriesQueryDescriptor\nA query interface that reads the heartbeat series data stored in a heartbeat sample using Swift concurrency.\nclass HKHeartbeatSeriesQuery\nA query that returns the heartbeat data contained in a heartbeat series sample.\nclass HKElectrocardiogramQuery\nA query that returns the underlying voltage measurements for an electrocardiogram sample."
  },
  {
    "title": "HKWorkoutRouteQuery | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkoutroutequery",
    "html": "Overview\n\nUse a workout route query to access the location data associated with an HKWorkoutRoute. Because a route sample can include a large number of CLLocation objects, the query asynchronously returns the locations in batches. For detailed instructions, see Reading Route Data.\n\nTopics\nCreating route queries\ninit(route: HKWorkoutRoute, dataHandler: (HKWorkoutRouteQuery, [CLLocation]?, Bool, Error?) -> Void)\nCreates a new query to access the location data associated with a workout route.\ninit(route: HKWorkoutRoute, dateInterval: DateInterval, dataHandler: (HKWorkoutRouteQuery, [CLLocation]?, Bool, Error?) -> Void)\nCreates a new query to access the location data associated with a workout route during the specified date interval.\nRelationships\nInherits From\nHKQuery\nSee Also\nRoute data\nCreating a workout route\nRecord the user’s route during a workout.\nReading route data\nAccess the user’s route for a workout.\nclass HKWorkoutRouteBuilder\nA builder object that incrementally constructs a workout route.\nclass HKWorkoutRoute\nA sample that contains a workout’s route data.\nstruct HKWorkoutRouteQueryDescriptor\nA query interface that reads the location data stored in a workout route using Swift concurrency.\nlet HKWorkoutRouteTypeIdentifier: String\nA series sample containing location data that defines the route the user took during a workout.\nclass HKSeriesBuilder\nAn abstract base class for building series samples.\nclass HKSeriesSample\nAn abstract base class that defines samples that contain a series of items."
  },
  {
    "title": "HKWorkoutRouteQueryDescriptor | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkoutroutequerydescriptor",
    "html": "Overview\n\nUse HKWorkoutRouteQueryDescriptor to access the individual CLLocation objects stored in an HKWorkoutRoute sample. To read the individual locations, create a workout route query descriptor using the desired route, and then call the descriptor’s results(for:) method.\n\n// Create the descriptor.\nlet routeQueryDescriptor = HKWorkoutRouteQueryDescriptor(myRoute)\n\n\n// Get the AsyncSequence that returns individual locations.\nlet locations = routeQueryDescriptor.results(for: store)\n\n\n// Access each location.\nfor try await location in locations {\n    \n    // Process the results here.\n    print(location.coordinate)\n    print(location.timestamp)\n}\n\n\nWhile this method returns an AsyncSequence, unlike the long-running queries, this sequence has a finite size. Iterating over the sequence asynchronously returns the route’s locations, automatically terminating after you receive all the locations.\n\nTopics\nCreating workout route query descriptors\ntypealias HKWorkoutRouteQueryDescriptor.Sequence\nThe type of asynchronous sequence that the query returns.\ninit(HKWorkoutRoute)\nCreates a query descriptor that reads locations from the provided workout route sample.\nRunning queries\nfunc results(for: HKHealthStore) -> HKWorkoutRouteQueryDescriptor.Results\nRuns a one-shot query that returns an asynchronous sequence of data representing individual locations.\nstruct HKWorkoutRouteQueryDescriptor.Results\nAn asynchronous sequence that emits data about individual locations from a workout route sample.\nAccessing query properties\nvar workoutRoute: HKWorkoutRoute\nA workout route sample that contains locations.\nRelationships\nConforms To\nHKAsyncSequenceQuery\nSee Also\nRoute data\nCreating a workout route\nRecord the user’s route during a workout.\nReading route data\nAccess the user’s route for a workout.\nclass HKWorkoutRouteBuilder\nA builder object that incrementally constructs a workout route.\nclass HKWorkoutRoute\nA sample that contains a workout’s route data.\nclass HKWorkoutRouteQuery\nA query to access the location data stored in a workout route.\nlet HKWorkoutRouteTypeIdentifier: String\nA series sample containing location data that defines the route the user took during a workout.\nclass HKSeriesBuilder\nAn abstract base class for building series samples.\nclass HKSeriesSample\nAn abstract base class that defines samples that contain a series of items."
  },
  {
    "title": "HKQuantitySeriesSampleQueryDescriptor | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquantityseriessamplequerydescriptor",
    "html": "Overview\n\nUse HKQuantitySeriesSampleQueryDescriptor to read the series data included in quantity samples. Apps can save any quantity data as a series using the HKQuantitySeriesSampleBuilder class; however, series data typically comes from high-frequency data saved during a workout. Any HKQuantitySample that has a count greater than 1 contains series data.\n\nImportant\n\nOnly use this query when you need direct access to the high-frequency series data, for example when visualizing the raw data or when exporting objects from the HealthKit store. For most common calculations, consider using a statistical query instead. Statistical queries correctly handle quantity data, whether the samples represent a single quantity or a series.\n\nTo read the individual data entries, create a predicate that identifies the sample type and limits the results to the desired data. For example, to read the series for a particular sample object, include a predicateForObject(with:) predicate. However, if you’re reading high-frequency data during a workout, you may want to include a predicateForSamples(withStart:end:options:) predicate that returns matching series data based on the workout’s time period instead.\n\n// Create the predicate for the data.\nlet heartRate = HKQuantityType(.heartRate)\nlet objectPredicate = HKQuery.predicateForObject(with: myHeartRateSample.uuid)\nlet predicate = HKSamplePredicate.quantitySample(type: heartRate,\n                                                 predicate: objectPredicate)\n\n\n\n\n// Create the source descriptor.\nlet seriesDescriptor =\nHKQuantitySeriesSampleQueryDescriptor(predicate: predicate,\n                                      options: .orderByQuantitySampleStartDate)\n\n\n// Get the AsyncSequence that returns the individual data entries.\nlet series = seriesDescriptor.results(for: store)\n\n\n// Access each data entry in the series\nfor try await entry in series {\n    \n    // Process results here.\n    let steps = entry.quantity.doubleValue(for: .count())\n    print(steps)\n}\n\n\nWhile this method returns an AsyncSequence, unlike the long-running queries, this sequence has a finite size. Iterating over the sequence asynchronously returns data entries, automatically terminating after you receive all the data.\n\nTopics\nCreating Series Query Descriptors\ntypealias HKQuantitySeriesSampleQueryDescriptor.Sequence\nThe type of asynchronous sequence that the query returns.\ninit(predicate: HKSamplePredicate<HKQuantitySample>, options: HKQuantitySeriesSampleQueryDescriptor.Options)\nCreates a quantity series query descriptor.\nstruct HKQuantitySeriesSampleQueryDescriptor.Options\nOptions used when querying series data.\nRunning Queries\nfunc results(for: HKHealthStore) -> HKQuantitySeriesSampleQueryDescriptor.Results\nRuns a one-shot query that returns an asynchronous sequence of matching series samples.\nstruct HKQuantitySeriesSampleQueryDescriptor.Results\nAn asynchronous sequence that emits data from the quantity series query.\nstruct HKQuantitySeriesSampleQueryDescriptor.Result\nA set of results from a quantity series sample descriptor.\nAccessing Query Properties\nvar options: HKQuantitySeriesSampleQueryDescriptor.Options\nA set of options for the query. For a list of possible values, see HKQuantitySeriesSampleQueryDescriptor.Options.\nvar predicate: HKSamplePredicate<HKQuantitySample>\nA predicate that defines the set of series samples that the query returns.\nRelationships\nConforms To\nHKAsyncSequenceQuery\nSee Also\nSeries queries\nclass HKQuantitySeriesSampleQuery\nA query that accesses the series data associated with a quantity sample.\nstruct HKWorkoutRouteQueryDescriptor\nA query interface that reads the location data stored in a workout route using Swift concurrency.\nclass HKWorkoutRouteQuery\nA query to access the location data stored in a workout route.\nstruct HKHeartbeatSeriesQueryDescriptor\nA query interface that reads the heartbeat series data stored in a heartbeat sample using Swift concurrency.\nclass HKHeartbeatSeriesQuery\nA query that returns the heartbeat data contained in a heartbeat series sample.\nstruct HKElectrocardiogramQueryDescriptor\nA query interface that reads the underlying voltage measurements for an electrocardiogram sample using Swift concurrency.\nclass HKElectrocardiogramQuery\nA query that returns the underlying voltage measurements for an electrocardiogram sample."
  },
  {
    "title": "HKHeartbeatSeriesQuery | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkheartbeatseriesquery",
    "html": "Topics\nCreating a Heartbeat Series Query\ninit(heartbeatSeries: HKHeartbeatSeriesSample, dataHandler: (HKHeartbeatSeriesQuery, TimeInterval, Bool, Bool, Error?) -> Void)\nCreates a new heartbeat series query.\nRelationships\nInherits From\nHKQuery\nSee Also\nSeries queries\nstruct HKQuantitySeriesSampleQueryDescriptor\nA query interface that reads the series data associated with quantity samples using Swift concurrency.\nclass HKQuantitySeriesSampleQuery\nA query that accesses the series data associated with a quantity sample.\nstruct HKWorkoutRouteQueryDescriptor\nA query interface that reads the location data stored in a workout route using Swift concurrency.\nclass HKWorkoutRouteQuery\nA query to access the location data stored in a workout route.\nstruct HKHeartbeatSeriesQueryDescriptor\nA query interface that reads the heartbeat series data stored in a heartbeat sample using Swift concurrency.\nstruct HKElectrocardiogramQueryDescriptor\nA query interface that reads the underlying voltage measurements for an electrocardiogram sample using Swift concurrency.\nclass HKElectrocardiogramQuery\nA query that returns the underlying voltage measurements for an electrocardiogram sample."
  },
  {
    "title": "HKQuantitySeriesSampleQuery | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquantityseriessamplequery",
    "html": "Overview\n\nUse a series query to access the individual HKQuantity objects added to a sample using an HKQuantitySeriesSampleBuilder.\n\nImportant\n\nFor many common calculations, consider using a statistical query instead. Statistical queries correctly handle quantity data, whether the samples represent a single quantity or a series.\n\nTopics\nCreating a Series Query\ninit(quantityType: HKQuantityType, predicate: NSPredicate?, quantityHandler: (HKQuantitySeriesSampleQuery, HKQuantity?, DateInterval?, HKQuantitySample?, Bool, Error?) -> Void)\nCreates a new query for a series of the specified quantity type.\nvar includeSample: Bool\nA Boolean value that determines whether the query should return the series sample.\nvar orderByQuantitySampleStartDate: Bool\nA Boolean value that determines whether the query groups the results based on the quantity sample’s start date.\nDeprecated Mehtods\ninit(sample: HKQuantitySample, quantityHandler: (HKQuantitySeriesSampleQuery, HKQuantity?, Date?, Bool, Error?) -> Void)\nCreates a new series query.\nRelationships\nInherits From\nHKQuery\nSee Also\nSeries queries\nstruct HKQuantitySeriesSampleQueryDescriptor\nA query interface that reads the series data associated with quantity samples using Swift concurrency.\nstruct HKWorkoutRouteQueryDescriptor\nA query interface that reads the location data stored in a workout route using Swift concurrency.\nclass HKWorkoutRouteQuery\nA query to access the location data stored in a workout route.\nstruct HKHeartbeatSeriesQueryDescriptor\nA query interface that reads the heartbeat series data stored in a heartbeat sample using Swift concurrency.\nclass HKHeartbeatSeriesQuery\nA query that returns the heartbeat data contained in a heartbeat series sample.\nstruct HKElectrocardiogramQueryDescriptor\nA query interface that reads the underlying voltage measurements for an electrocardiogram sample using Swift concurrency.\nclass HKElectrocardiogramQuery\nA query that returns the underlying voltage measurements for an electrocardiogram sample.\nRelated Documentation\nclass HKQuantitySeriesSampleBuilder\nA builder object for incrementally building a sample that contains multiple quantities.\nclass HKCumulativeQuantitySample\nA sample that represents a cumulative quantity.\nclass HKDiscreteQuantitySample\nA sample that represents a discrete quantity."
  },
  {
    "title": "HKHeartbeatSeriesQueryDescriptor | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkheartbeatseriesquerydescriptor",
    "html": "Overview\n\nUse HKHeartbeatSeriesQueryDescriptor to read the heartbeat data included in a HKHeartbeatSeriesSample. To read the individual heartbeats, create a heartbeat series query descriptor using the desired series sample, and then call the results(for:) method on the descriptor.\n\n// Create the descriptor.\nlet heartbeatDescriptor = HKHeartbeatSeriesQueryDescriptor(myHeartbeatSample)\n\n\n// Get the AsyncSequence that returns individual heartbeats.\nlet series = heartbeatDescriptor.results(for: store)\n\n\n// Access the data for each haeartbeat.\nfor try await heartbeat in series {\n    \n    // Process the results here.\n    print(heartbeat.precededByGap)\n    print(heartbeat.timeIntervalSinceStart)\n}\n\n\nWhile this method returns an AsyncSequence, unlike the long-running queries, this sequence has a finite size. Iterating over the sequence asynchronously returns heartbeat data, automatically terminating after you receive all the data.\n\nTopics\nCreating Heartbeat Series Query Descriptors\ntypealias HKHeartbeatSeriesQueryDescriptor.Sequence\nThe type of asynchronous sequence that the query returns.\ninit(HKHeartbeatSeriesSample)\nCreates a heartbeat series query descriptor.\nRunning Queries\nfunc results(for: HKHealthStore) -> HKHeartbeatSeriesQueryDescriptor.Results\nRuns a one-shot query that returns an asynchronous sequence of data representing individual heartbeats.\nstruct HKHeartbeatSeriesQueryDescriptor.Results\nAn asynchronous sequence that emits data about individual heartbeats from a heartbeat series sample.\nstruct HKHeartbeatSeriesQueryDescriptor.Heartbeat\nData about an individual heartbeat.\nAccessing Query Properties\nvar sample: HKHeartbeatSeriesSample\nThe sample containing the heartbeat series.\nRelationships\nConforms To\nHKAsyncSequenceQuery\nSee Also\nSeries queries\nstruct HKQuantitySeriesSampleQueryDescriptor\nA query interface that reads the series data associated with quantity samples using Swift concurrency.\nclass HKQuantitySeriesSampleQuery\nA query that accesses the series data associated with a quantity sample.\nstruct HKWorkoutRouteQueryDescriptor\nA query interface that reads the location data stored in a workout route using Swift concurrency.\nclass HKWorkoutRouteQuery\nA query to access the location data stored in a workout route.\nclass HKHeartbeatSeriesQuery\nA query that returns the heartbeat data contained in a heartbeat series sample.\nstruct HKElectrocardiogramQueryDescriptor\nA query interface that reads the underlying voltage measurements for an electrocardiogram sample using Swift concurrency.\nclass HKElectrocardiogramQuery\nA query that returns the underlying voltage measurements for an electrocardiogram sample."
  },
  {
    "title": "HKCorrelationQuery | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkcorrelationquery",
    "html": "Overview\n\nCorrelation samples act as a container, grouping multiple quantity or category samples. While you can use HKSample objects to search for correlations, correlation queries allow more complex filtering based on the contained samples. Specifically, correlation queries let you provide a separate predicate for each of the sample types stored in the correlation. A correlation is returned only if the correlation’s predicate and all of the sample predicates match.\n\nRequesting Permission to Share and Read\n\nUnlike other sample types, you do not request permission to share and read correlation types directly. Instead, you request permission to share and read each of the sample types contained within the correlation.\n\nWhen saving a correlation, the app must have permission to share all of the contained objects. If the app does not have permission to share one or more of the contained objects, the operation fails.\n\nWhen your app queries for correlation data, HealthKit only returns samples that contain objects you have permission to read. If the app has permission to read only some of the contained objects, HealthKit still returns the correlation; however, the correlation appears to only contain those objects that your app has permission to read. HealthKit hides all of the other contained objects from your app.\n\nExecuting Queries\n\nYou create a correlation query by calling the init(type:predicate:samplePredicates:completion:) initializer. After the query is instantiated, you run it by calling the HealthKit store’s execute(_:) method. This method runs the query on an anonymous background queue. When the query is complete, it executes the results handler on the same background queue (though not necessarily the same thread). Typically, you dispatch these results back to the main thread to update your user interface.\n\nListing 1 builds a correlation query that searches for food samples with more than 800 calories.\n\nListing 1 Searching for high calorie food\nvar highCalorieFoods: [HKCorrelationQuery] = []\n \nlet highCalorie = HKQuantity(unit: HKUnit.kilocalorieUnit(),\n                             doubleValue: 800.0);\n \nlet greaterThanHighCalorie = HKQuery.predicateForQuantitySamplesWithOperatorType(\n    .GreaterThanOrEqualToPredicateOperatorType, quantity: highCalorie)\n \nlet energyConsumed = HKObjectType.quantityTypeForIdentifier(\n    HKQuantityTypeIdentifierDietaryEnergyConsumed)\n \nlet samplePredicates = [energyConsumed: greaterThanHighCalorie]\n \nlet foodType = HKCorrelationType.correlationTypeForIdentifier(\n    HKCorrelationTypeIdentifierFood)\n \nlet query = HKCorrelationQuery(type: foodType, predicate: nil, samplePredicates: samplePredicates)\n{\n    query, results, error in\n    \n    if let correlations = results as? [HKCorrelationQuery] {\n        for correlation in correlations {\n            highCalorieFoods.append(correlation)\n        }\n    }\n    else {\n        // Provide proper error handling here...\n        println(\"An error occurred while searching for high calorie food: \\(error.localizedDescription)\")\n        abort()\n    }\n    \n    println(\"Found \\(highCalorieFoods.count) foods: \\(highCalorieFoods)\")\n}\n \nhealthStore.executeQuery(query)\n\n\nListing 1 begins by setting up an array to store our high calorie foods. Next, the sample code creates a predicate that matches quantities greater than or equal to 800 kcal. It then creates a dictionary using a quantity type object for dietary energy consumed as the key and the newly-created predicate as the value. It uses this dictionary as the sample predicates for a correlation query.\n\nIn the query’s completion handler, the sample code first checks to see if an error occurred. If no errors occurred, it adds the results to the array of high calorie foods. Then it logs the number of matching samples found, and the contents of the high calorie foods array.\n\nOnce the sample code finishes declaring the completion handler, the query is ready to use. The sample code simply executes the query on the HeathKit store.\n\nSubclassing Correlation Queries\n\nLike many HealthKit classes, the HKCorrelationQuery class should not be subclassed.\n\nTopics\nCreating Correlation Queries\ninit(type: HKCorrelationType, predicate: NSPredicate?, samplePredicates: [HKSampleType : NSPredicate]?, completion: (HKCorrelationQuery, [HKCorrelation]?, Error?) -> Void)\nInstantiates and returns a correlation query.\nGetting Property Data\nvar correlationType: HKCorrelationType\nThe type of correlation to search for.\nvar samplePredicates: [HKSampleType : NSPredicate]?\nA dictionary whose keys are HKSampleType instances and whose values are NSPredicate instances.\nRelationships\nInherits From\nHKQuery\nSee Also\nBasic queries\nstruct HKSampleQueryDescriptor\nA query interface that reads samples using Swift concurrency.\nclass HKSampleQuery\nA general query that returns a snapshot of all the matching samples currently saved in the HealthKit store.\nclass HKQueryDescriptor\nA descriptor that specifies a set of samples based on the data type and a predicate.\nclass HKQuery\nAn abstract class for all the query classes in HealthKit."
  },
  {
    "title": "HKSampleQuery | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hksamplequery",
    "html": "Overview\n\nYou can use sample queries to search for any concrete subclasses of the HKSample class, including HKCategorySample, HKCorrelation, HKQuantitySample, and HKWorkout objects.\n\nThe sample query returns sample objects that match the provided type and predicate. You can provide a sort order for the returned samples, or limit the number of samples returned. Other query classes can be used to perform more specialized searches and calculations. For more information, see HKQuery.\n\nSample queries are immutable: The query’s properties are set when the query is first created, and they can't change.\n\nNote\n\nLike many HealthKit classes, the HKSampleQuery class should not be subclassed.\n\nTopics\nCreating Sample Queries\nExecuting Sample Queries\nCreate, run, and sort sample queries.\ninit(sampleType: HKSampleType, predicate: NSPredicate?, limit: Int, sortDescriptors: [NSSortDescriptor]?, resultsHandler: (HKSampleQuery, [HKSample]?, Error?) -> Void)\nInstantiates and returns a sample query.\ninit(queryDescriptors: [HKQueryDescriptor], limit: Int, resultsHandler: (HKSampleQuery, [HKSample]?, Error?) -> Void)\nCreates a query for samples that match any of the descriptors you provided.\ninit(queryDescriptors: [HKQueryDescriptor], limit: Int, sortDescriptors: [NSSortDescriptor], resultsHandler: (HKSampleQuery, [HKSample]?, Error?) -> Void)\nCreates a query for samples that match any of the query descriptors you provided, sorted by the sort descriptors you provided.\nlet HKObjectQueryNoLimit: Int\nA value indicating that the query returns all the matching samples in the HealthKit store.\nHealthKit sort descriptors\nIdentifiers for sorting results.\nGetting Property Data\nvar limit: Int\nThe maximum number of samples that this query returns.\nvar sortDescriptors: [NSSortDescriptor]?\nThe sort descriptors that specify the order of the results returned by this query.\nSetting Limits\nlet HKObjectQueryNoLimit: Int\nA value indicating that the query returns all the matching samples in the HealthKit store.\nRelationships\nInherits From\nHKQuery\nSee Also\nBasic queries\nstruct HKSampleQueryDescriptor\nA query interface that reads samples using Swift concurrency.\nclass HKCorrelationQuery\nA query that performs complex searches based on the correlation’s contents, and returns a snapshot of all matching samples.\nclass HKQueryDescriptor\nA descriptor that specifies a set of samples based on the data type and a predicate.\nclass HKQuery\nAn abstract class for all the query classes in HealthKit."
  },
  {
    "title": "Running Queries with Swift Concurrency | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/queries/running_queries_with_swift_concurrency",
    "html": "Overview\n\nHealthKit provides a Swift-only API for querying the HealthKit store using Swift concurrency. This API uses two protocols. Descriptors that adopt the HKAsyncQuery perform one-shot queries that return all matching results currently in the HealthKit store. Descriptors that adopt the HKAsyncSequenceQuery perform long-running queries that continue to monitor the store and return updates as changes occur.\n\nBuilding a Query Descriptor\n\nFor all queries, start by constructing the type and predicates that describe the desired data. The following code creates a type for workout samples, and a predicate that matches samples that started within the last week.\n\nlet workoutType = HKWorkoutType.workoutType()\n\n\n// Get the date one week ago.\nlet calendar = Calendar.current\nvar components = calendar.dateComponents([.year, .month, .day], from: Date())\ncomponents.day = components.day! - 7\nlet oneWeekAgo = calendar.date(from: components)\n\n\n// Create a predicate for all samples within the last week.\nlet inLastWeek = HKQuery.predicateForSamples(withStart: oneWeekAgo,\n                                             end: nil,\n                                             options: [.strictStartDate])\n\n\nImportant\n\nPeople may have a large quantity of data saved to the HealthKit store. Querying for all samples of a given data type can become very expensive, both in terms of memory usage and processing time. To avoid performance issues, limit the number of results your queries may return. For example, explicitly set a limit for the query, or specify a restricted date range for matching samples. If you need to read all samples for a data type, use HKAnchoredObjectQueryDescriptor queries to read the data in batches.\n\nNext, create a descriptor that represents the query itself. The following descriptor uses the previous type and predicate to search for all workouts added to the HealthKit store after the provided anchor that are less than one week old.\n\n// Create the query descriptor.\nlet anchorDescriptor =\nHKAnchoredObjectQueryDescriptor(\n    predicates: [.workout(inLastWeek)],\n        anchor: myAnchor)\n\n\nYou can now use this descriptor to run your query.\n\nRunning a One-Shot Query\n\nDescriptors that adopt the HKAsyncQuery protocol can perform one-shot queries. Call the descriptor’s result(for:) method to start the query. The query then gathers a snapshot of all the matching data currently in the HealthKit store.\n\nNote that the type that the result(for:) method returns varies based on the descriptor. For example, HKSampleQueryDescriptor returns an array of properly typed samples, while the HKAnchoredObjectQueryDescriptor returns a structure that contains arrays of added samples and deleted objects.\n\n// Wait for the current results.\nlet results = try await anchorDescriptor.result(for: store)\n\n\n// Process the results.\nlet addedSamples = results.addedSamples\nlet deletedSamples = results.deletedObjects\n\n\n// Do something with the results here.\n\n\n// Update the anchor.\nmyAnchor = results.newAnchor\n\n\nRunning and Stopping Long-Running Queries\n\nDescriptors that adopt the HKAsyncSequenceQuery protocol can create long-running queries that monitor the HealthKit store and return periodic updates. Here, the results(for:) method returns an instance that adopts the AsyncSequence protocol. Note that the call to results(for:) is synchronous, but accessing data from the sequence is asynchronous.\n\nThe following code uses a for loop to read updates from the sequence as they arrive. The first instance contains all matching samples currently in the HealthKit store. This is the same as the results that the result(for:) method returns. However, the system continues to monitor the HealthKit store, and returns new results as they appear.\n\n// Start a long-running query to monitor the HealthKit store.\nlet updateQueue = anchorDescriptor.results(for: store)\n\n\n// Wait for the initial results and each update.\nmyUpdateTask = Task {\n    for try await results in updateQueue {\n        \n        // Process the results.\n        let addedSamples = results.addedSamples\n        let deletedSamples = results.deletedObjects\n        myAnchor = results.newAnchor\n        \n        log.append(\"- \\(addedSamples.count) new workouts found.\\n\")\n        log.append(\"- \\(deletedSamples.count) deleted workouts found.\\n\")\n    }\n}\n\n\nBy wrapping the for loop in a Task, you can cancel the task to stop the long-running query.\n\nfunc stopUpdates() {\n    myUpdateTask?.cancel()\n    myUpdateTask = nil\n}\n\n\nChoosing the Correct Query Type\n\nTo see the list of descriptors for one-shot queries, see the Conforming Types section of the HKAsyncQuery protocol. For the list of long-running descriptors, see HKAsyncSequenceQuery.\n\nTip\n\nMost descriptors only adopt one of the two protocols; however, HKActivitySummaryQueryDescriptor, HKAnchoredObjectQueryDescriptor, and HKStatisticsCollectionQueryDescriptor adopt both. Be sure to select result(for:) or results(for:) based on your app’s needs.\n\n// Returns all matching samples currently in the HealthKit Store.\nlet results = try await anchorDescriptor.result(for: store)\n\n\n// Sets up a long-running query that returns both the current matching samples\n// as well as any changes.\nlet updateQueue = anchorDescriptor.results(for: store)\n\n\nSee Also\nSwift concurrency support\nprotocol HKAsyncQuery\nA protocol that defines an asynchronous method for running queries.\nprotocol HKAsyncSequenceQuery\nA protocol that defines a method for running queries that returns results using an asynchronous sequence.\nstruct HKSamplePredicate\nA predicate for queries that return a collection of matching sample objects."
  },
  {
    "title": "HKAsyncSequenceQuery | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkasyncsequencequery",
    "html": "Topics\nRunning Queries\nassociatedtype Sequence\nThe data type that the query returns.\n\nRequired\n\nfunc results(for: HKHealthStore) -> Self.Sequence\nInitiates a query that returns its results using an asynchronous sequence.\n\nRequired\n\nRelationships\nConforming Types\nHKActivitySummaryQueryDescriptor\nHKAnchoredObjectQueryDescriptor\nHKElectrocardiogramQueryDescriptor\nHKHeartbeatSeriesQueryDescriptor\nHKQuantitySeriesSampleQueryDescriptor\nHKStatisticsCollectionQueryDescriptor\nHKWorkoutRouteQueryDescriptor\nSee Also\nSwift concurrency support\nRunning Queries with Swift Concurrency\nUse Swift concurrency to manage one-shot and long-running queries.\nprotocol HKAsyncQuery\nA protocol that defines an asynchronous method for running queries.\nstruct HKSamplePredicate\nA predicate for queries that return a collection of matching sample objects."
  },
  {
    "title": "HKAttachment | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkattachment",
    "html": "Overview\n\nTo access the attachment’s data, get a data reader from the attachment store for each attachment.\n\nlet attachmentStore = HKAttachmentStore(healthStore: store)\n\n\nlet attachments: [HKAttachment]\ndo {\n    attachments = try await attachmentStore.attachments(for: prescription)\n} catch {\n    // Handle the error here.\n    fatalError(\"*** An error occurred while accessing the attachments for a prescription: \\(error.localizedDescription) ***\")\n}\n\n\n// Use the attachments here.\nprint(\"*** \\(attachments.count) attachments found ***\")\n\n\nfor attachment in attachments {\n\n\n    // Get a data reader for the attachment.\n    let dataReader = attachmentStore.dataReader(for:   attachment)\n\n\n    // Read the data here.\n}\n\n\nYou can then asynchronously access the whole data object.\n\nlet data: Data\ndo {\n    data = try await dataReader.data\n} catch {\n    // Handle the error here.\n    fatalError(\"*** An error occurred while accessing the attachment's data. \\(error.localizedDescription) ***\")\n}\n\n\nAlternatively, you can access the file’s contents as an asynchronous sequence of bytes.\n\n// Asynchronously access the attachment's bytes.\nvar data = Data()\ndo {\n    for try await byte in dataReader.bytes {\n        // Use the bytes here.\n        data.append(byte)\n    }\n} catch {\n    // Handle the error here.\n    fatalError(\"*** An error occurred while reading the attachment's data: \\(error.localizedDescription) ***\")\n}\n\n\nNote\n\nYou can only add attachments to HKVisionPrescription, HKGlassesPrescription, and HKContactsPrescription samples. You can also read attachments from clinicalNoteRecord samples.\n\nTopics\nAccessing attachment data\nvar name: String\nThe name of the attached file.\nvar identifier: UUID\nThe universally unique identifier for the attached file.\nvar contentType: UTType\nThe type of data stored in the attached file.\nvar size: Int\nThe attachment’s size (in bytes).\nvar creationDate: Date\nThe attachment’s creation date.\nvar metadata: [String : Any]?\nAdditional data associated with the attachment in the HealthKit store.\nstruct HKAttachment.AsyncBytes\nAn asynchronous sequence that returns the attached file as a series of bytes.\nRelationships\nInherits From\nNSObject\nConforms To\nNSCopying\nNSSecureCoding\nSee Also\nAttachments\nclass HKAttachmentStore\nThe access point for attachments associated with samples in the HealthKit store.\nclass HKAttachmentDataReader\nA reader that provides access to an attachment’s data.\nRelated Documentation\nclass HKVisionPrescription\nA sample that stores a vision prescription.\nclass HKGlassesPrescription\nA sample that stores a prescription for glasses.\nclass HKContactsPrescription\nA sample that store a prescription for contacts."
  },
  {
    "title": "HKAttachmentStore | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkattachmentstore",
    "html": "Overview\n\nUse an HKAttachmentStore object to manage attachments for samples that your app has saved to the HealthKit store.\n\nTopics\nCreating an attachment store\ninit(healthStore: HKHealthStore)\nCreates an attachment store for the provided HealthKit store.\nAdding attachments\nfunc addAttachment(to: HKObject, name: String, contentType: UTType, url: URL, metadata: [String : Any]) -> HKAttachment\nAsynchronously adds an attachment to the specified object.\nfunc addAttachment(to: HKObject, name: String, contentType: UTType, url: URL, metadata: [String : Any], completion: (HKAttachment?, (Error)?) -> Void)\nAdds an attachment to the specified object.\nAccessing attachments\nfunc getAttachments(for: HKObject, completion: ([HKAttachment]?, Error?) -> Void)\nReturns all the attachments for the specified object.\nfunc dataReader(for: HKAttachment) -> HKAttachmentDataReader\nReturns a data reader for the attachment.\nfunc getData(for: HKAttachment, completion: (Data?, Error?) -> Void) -> Progress\nReturns an attachment’s data.\nfunc streamData(for: HKAttachment, dataHandler: (Data?, Error?, Bool) -> Void) -> Progress\nAsynchronously returns the attachment’s data.\nRemoving attachments\nfunc removeAttachment(HKAttachment, from: HKObject, completion: (Bool, Error?) -> Void)\nRemoves the specified attachment.\nRelationships\nInherits From\nNSObject\nSee Also\nAttachments\nclass HKAttachment\nA file that is attached to a sample in the HealthKit store.\nclass HKAttachmentDataReader\nA reader that provides access to an attachment’s data."
  },
  {
    "title": "HKPrescriptionType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkprescriptiontype",
    "html": "Overview\n\nThe HKPrescriptionType class is a concrete subclass of the HKSampleType class. To create a vision prescription type instances, use the visionPrescriptionType() convenience method.\n\nUse this data type to request permission to save vision prescriptions to the HealthKit store.\n\n// Create the prescription data type.\nlet visionPrescriptionType = HKObjectType.visionPrescriptionType()\n\n\n// Request authorization to save vision prescription samples.\nstore.requestAuthorization(toShare: [visionPrescriptionType],\n                           read: []) { success, error in\n    if let error {\n        // Handle errors here.\n        fatalError(\"*** An error occurred while requesting permission: \\(error.localizedDescription) ***\")\n    }\n}\n\n\nImportant\n\nVision prescription samples require per-object authorization. Requesting authorization to read these samples using requestAuthorization(toShare:read:) fails with an error. Instead, use requestPerObjectReadAuthorization(for:predicate:completion:) to request authorization before querying for samples.\n\nRelationships\nInherits From\nHKSampleType\nConforms To\nSendable\nSee Also\nVision prescriptions\nclass HKVisionPrescription\nA sample that stores a vision prescription.\nclass HKGlassesPrescription\nA sample that stores a prescription for glasses.\nclass HKContactsPrescription\nA sample that store a prescription for contacts.\nclass HKGlassesLensSpecification\nAn object that contains the glasses prescription data for one eye.\nclass HKContactsLensSpecification\nAn object that contains the contacts prescription data for one eye.\nclass HKLensSpecification\nAn abstract superclass for lens specifications.\nclass HKVisionPrism\nPrescription data for eye alignment."
  },
  {
    "title": "HKLensSpecification | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hklensspecification",
    "html": "Overview\n\nDon’t instantiate this class directly. Instead, use one of its concrete subclasses: HKGlassesLensSpecification or HKContactsLensSpecification.\n\nTopics\nAccessing lens specification data\nvar sphere: HKQuantity\nThe correction for farsightedness.\nvar cylinder: HKQuantity?\nPart of the correction for astigmatism that measures the strength of the correction.\nvar axis: HKQuantity?\nPart of the correction for astigmatism that measures the orientation fo the correction.\nvar addPower: HKQuantity?\nThe correction for nearsightedness.\nRelationships\nInherits From\nNSObject\nSee Also\nVision prescriptions\nclass HKVisionPrescription\nA sample that stores a vision prescription.\nclass HKGlassesPrescription\nA sample that stores a prescription for glasses.\nclass HKContactsPrescription\nA sample that store a prescription for contacts.\nclass HKGlassesLensSpecification\nAn object that contains the glasses prescription data for one eye.\nclass HKContactsLensSpecification\nAn object that contains the contacts prescription data for one eye.\nclass HKVisionPrism\nPrescription data for eye alignment.\nclass HKPrescriptionType\nA type that identifies samples that store a prescription."
  },
  {
    "title": "HKVisionPrism | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkvisionprism",
    "html": "Overview\n\nTo include prism information in a glasses prescription, start by creating an HKVisionPrism object.\n\n// The correction for eye alignment.\nlet prismQuantity = HKQuantity(unit: .prismDiopter(), doubleValue: +0.25)\nlet angle = HKQuantity(unit: .degreeAngle(), doubleValue: 15.0)\nlet prism = HKVisionPrism(amount: prismQuantity,\n                          angle: angle,\n                          eye: .right)\n\n\nThen, pass this value to the HKGlassesLensSpecification’s initializer.\n\n// The prescription for the right eye.\nlet glassesRightEye = HKGlassesLensSpecification(sphere: sphere,\n                                                 cylinder: cylinder,\n                                                 axis: axis,\n                                                 addPower: addPower,\n                                                 vertexDistance: vertexDistance,\n                                                 prism: prism,\n                                                 farPupillaryDistance: farDistance,\n                                                 nearPupillaryDistance: nearDistance)\n\n\nFinally, create the glasses prescription and save it to the HealthKit store.\n\n// The glasses prescription.\nlet prescription = HKGlassesPrescription(rightEyeSpecification: glassesRightEye,\n                                               leftEyeSpecification: glassesLeftEye,\n                                               dateIssued: dateIssued,\n                                               expirationDate: expirationDate,\n                                               device: HKDevice.local(),\n                                               metadata: nil)\n// Save the sample to the HealthKit store.\ndo {\n    try await store.save(prescription)\n} catch {\n    // Handle the error here.\n    fatalError(\"*** An error occurred while saving the prescription sample to the HealthKit store \\(error.localizedDescription) ***\")\n}\n\n\nTopics\nCreating vision prism objects\ninit(amount: HKQuantity, angle: HKQuantity, eye: HKVisionEye)\nCreates a new vision prism object, using a single quantity and an alignment angle.\ninit(verticalAmount: HKQuantity, verticalBase: HKPrismBase, horizontalAmount: HKQuantity, horizontalBase: HKPrismBase, eye: HKVisionEye)\nCreates a new vision prism object that separates the correction strength into horizontal and vertical components.\nAccessing lens specification data\nvar eye: HKVisionEye\nA value indicating which eye the correction applies to.\nenum HKVisionEye\nA value that specifies the eye for a vision prescription.\nvar amount: HKQuantity\nThe strength of the correction.\nvar angle: HKQuantity\nThe orientation of the adjustment.\nvar horizontalAmount: HKQuantity\nThe strength of the horizontal correction.\nvar horizontalBase: HKPrismBase\nThe orientation of the horizontal portion of the correction.\nvar verticalAmount: HKQuantity\nThe strength of the vertical correction.\nvar verticalBase: HKPrismBase\nThe orientation of the vertical portion of the correction.\nenum HKPrismBase\nThe orientation of the prism correction, represented by the location of the prism’s base (the thickest part of the prism).\nRelationships\nInherits From\nNSObject\nConforms To\nNSCopying\nNSSecureCoding\nSee Also\nVision prescriptions\nclass HKVisionPrescription\nA sample that stores a vision prescription.\nclass HKGlassesPrescription\nA sample that stores a prescription for glasses.\nclass HKContactsPrescription\nA sample that store a prescription for contacts.\nclass HKGlassesLensSpecification\nAn object that contains the glasses prescription data for one eye.\nclass HKContactsLensSpecification\nAn object that contains the contacts prescription data for one eye.\nclass HKLensSpecification\nAn abstract superclass for lens specifications.\nclass HKPrescriptionType\nA type that identifies samples that store a prescription."
  },
  {
    "title": "HKContactsLensSpecification | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkcontactslensspecification",
    "html": "Overview\n\nTo create a sample that stores a contacts prescription, start by defining a specification for each eye. Each lens specification object requires a sphere parameter. This measures the lens’s strength for correcting either nearsightedness or farsightedness (measured in diopter() units).\n\n// The correction for farsightedness.\nlet sphere = HKQuantity(unit: .diopter(), doubleValue: -0.75)\n\n\nNext, create values for any of the prescription’s optional parameters. For example, if the prescription corrects for astigmatism, create the cylinder and axis values. The cylinder value uses diopter() units, while the axis uses degreeAngle().\n\n// The corrections for astigmatism.\nlet cylinder = HKQuantity(unit: .diopter(), doubleValue: -0.5)\nlet axis = HKQuantity(unit: .degreeAngle(), doubleValue: 155.0)\n\n\nTo add a multifocal correction for reading, create an addPower value using diopter() units.\n\n// Multifocal correction for reading.\nlet addPower = HKQuantity(unit: .diopter(), doubleValue: +2.00)\n\n\nTo add fitting information for the contact lens, create baseCurve and diameter values. Both of these values use millimeters.\n\n// The fitting information.\nlet baseCurve = HKQuantity(unit: HKUnit.meterUnit(with: .milli),\n                           doubleValue: 9.0)\n\n\nlet diameter = HKQuantity(unit: HKUnit.meterUnit(with: .milli),\n                          doubleValue: 12.0)\n\n\nThen you can create the HKContactsLensSpecification lens specification.\n\n// The prescription for the right eye.\nlet contactsRightEye = HKContactsLensSpecification(sphere: sphere,\n                                                   cylinder: cylinder,\n                                                   axis: axis,\n                                                   addPower: addPower,\n                                                   baseCurve: baseCurve,\n                                                   diameter: diameter)\n\n\nAfter you create your lens specifications, you can create an HKContactsPrescription sample.\n\n// The date the doctor issued the prescription.\nlet dateIssued = Date()\n\n\n// The date when the prescription expires.\nlet expirationDate = dateIssued.addingTimeInterval(60 * 24 * 365)\n\n\n// The contacts prescription.\nlet prescription = HKContactsPrescription(rightEyeSpecification: contactsRightEye,\n                                          leftEyeSpecification: contactsLeftEye,\n                                          brand: \"MyBrand Name\",\n                                          dateIssued: dateIssued,\n                                          expirationDate: expirationDate,\n                                          device: HKDevice.local(),\n                                          metadata: nil)\n\n\nThen save the sample to the HealthKit store.\n\n// Save the sample to the HealthKit store.\ndo {\n    try await store.save(prescription)\n} catch {\n    // Handle the error here.\n    fatalError(\"*** An error occurred while saving the prescription sample to the HealthKit store \\(error.localizedDescription) ***\")\n}\n\n\nFinally, add an image or PDF of the prescription to the sample as an attachment.\n\n// Get the attachment store.\nlet attachmentStore = HKAttachmentStore(healthStore: store)\n\n\n// Attach the image to the sample.\ndo {\n    _ = try await attachmentStore.addAttachment(to: prescription,\n                                                name: \"Glasses Prescription\",\n                                                contentType: type,\n                                                url: url)\n} catch {\n    // Handle the error.\n    fatalError(\"*** An error occurred while attaching the image: \\(error.localizedDescription) ***\")\n}\n\n\nImportant\n\nMany regions require an image of the prescription to manufacture glasses or contacts. Add an image or pdf of the prescription as an attachment. For more information, see HKAttachmentStore.\n\nTopics\nCreating contacts lens specifications\ninit(sphere: HKQuantity, cylinder: HKQuantity?, axis: HKQuantity?, addPower: HKQuantity?, baseCurve: HKQuantity?, diameter: HKQuantity?)\nCreates a new contact lens specification, containing the prescription data for one eye.\nAccessing the specification’s data\nvar baseCurve: HKQuantity?\nPart of the contact’s fit, it measures the curve of the back side of the contact, measured in mm.\nvar diameter: HKQuantity?\nPart of the contact’s fit, it measures the diameter of the lens, measured in mm.\nRelationships\nInherits From\nHKLensSpecification\nConforms To\nNSCopying\nNSSecureCoding\nSee Also\nVision prescriptions\nclass HKVisionPrescription\nA sample that stores a vision prescription.\nclass HKGlassesPrescription\nA sample that stores a prescription for glasses.\nclass HKContactsPrescription\nA sample that store a prescription for contacts.\nclass HKGlassesLensSpecification\nAn object that contains the glasses prescription data for one eye.\nclass HKLensSpecification\nAn abstract superclass for lens specifications.\nclass HKVisionPrism\nPrescription data for eye alignment.\nclass HKPrescriptionType\nA type that identifies samples that store a prescription."
  },
  {
    "title": "HKGlassesLensSpecification | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkglasseslensspecification",
    "html": "Overview\n\nTo create a sample that stores a glasses prescription, start by defining a specification for each eye. Each lens specification object requires a sphere parameter. This measures the lens’s strength for correcting either nearsightedness or farsightedness (measured in diopter() units).\n\n// The correction for farsightedness.\nlet sphere = HKQuantity(unit: .diopter(), doubleValue: -0.75)\n\n\nNext, create values for any of the prescription’s optional parameters. For example, if the prescription corrects for astigmatism, create the cylinder and axis values. The cylinder value uses diopter() units, while the axis uses degreeAngle().\n\n// The corrections for astigmatism.\nlet cylinder = HKQuantity(unit: .diopter(), doubleValue: -0.5)\nlet axis = HKQuantity(unit: .degreeAngle(), doubleValue: 155.0)\n\n\nTo add a multifocal correction for reading, create an addPower value using diopter() units.\n\n// Multifocal correction for reading.\nlet addPower = HKQuantity(unit: .diopter(), doubleValue: +2.00)\n\n\nTo add a correction for eye alignment, create an HKVisionPrism object.\n\n// The correction for eye alignment.\nlet prismQuantity = HKQuantity(unit: .prismDiopter(), doubleValue: +0.25)\nlet angle = HKQuantity(unit: .degreeAngle(), doubleValue: 15.0)\nlet prism = HKVisionPrism(amount: prismQuantity,\n                          angle: angle,\n                          eye: .right)\n\n\nTo add information about the distance between the eye and the back of the lens, or the pupil and the center of the nose, create vertexDistance, nearDistance, and farDistance values. All of these use millimeters.\n\n// Distance between the back of the lens and the eye.\nlet vertexDistance = HKQuantity(unit: HKUnit.meterUnit(with: .milli), doubleValue: 14.0)\n\n\n// Set the distance between the pupil and the center of the nose when looking at a nearby object.\nlet nearDistance = HKQuantity(unit: HKUnit.meterUnit(with: .milli), doubleValue: 25.0)\n\n\n// Set the distance between the pupil and the center of the nose when looking far away.\nlet farDistance = HKQuantity(unit: HKUnit.meterUnit(with: .milli), doubleValue: 27.0)\n\n\nThen you can create the HKGlassesLensSpecification lens specification.\n\n// The prescription for the right eye.\nlet glassesRightEye = HKGlassesLensSpecification(sphere: sphere,\n                                                 cylinder: cylinder,\n                                                 axis: axis,\n                                                 addPower: addPower,\n                                                 vertexDistance: vertexDistance,\n                                                 prism: prism,\n                                                 farPupillaryDistance: farDistance,\n                                                 nearPupillaryDistance: nearDistance)\n\n\nAfter you create your lens specifications, you can create an HKGlassesPrescription sample.\n\n// The date the doctor issued the prescription.\nlet dateIssued = Date()\n\n\n// The date when the prescription expires.\nlet expirationDate = dateIssued.addingTimeInterval(60 * 24 * 365)\n\n\n// The glasses prescription.\nlet prescription = HKGlassesPrescription(rightEyeSpecification: glassesRightEye,\n                                               leftEyeSpecification: glassesLeftEye,\n                                               dateIssued: dateIssued,\n                                               expirationDate: expirationDate,\n                                               device: HKDevice.local(),\n                                               metadata: nil)\n\n\nThen save the sample to the HealthKit store.\n\n// Save the sample to the HealthKit store.\ndo {\n    try await store.save(prescription)\n} catch {\n    // Handle the error here.\n    fatalError(\"*** An error occurred while saving the prescription sample to the HealthKit store \\(error.localizedDescription) ***\")\n}\n\n\nFinally, add an image or PDF of the prescription to the sample as an attachment.\n\n// Get the attachment store.\nlet attachmentStore = HKAttachmentStore(healthStore: store)\n\n\n// Attach the image to the sample.\ndo {\n    _ = try await attachmentStore.addAttachment(to: prescription,\n                                                name: \"Glasses Prescription\",\n                                                contentType: type,\n                                                url: url)\n} catch {\n    // Handle the error.\n    fatalError(\"*** An error occurred while attaching the image: \\(error.localizedDescription) ***\")\n}\n\n\nImportant\n\nMany regions require an image of the prescription to manufacture glasses or contacts. Add an image or pdf of the prescription as an attachment. For more information, see HKAttachmentStore.\n\nTopics\nCreating glasses lens specifications\ninit(sphere: HKQuantity, cylinder: HKQuantity?, axis: HKQuantity?, addPower: HKQuantity?, vertexDistance: HKQuantity?, prism: HKVisionPrism?, farPupillaryDistance: HKQuantity?, nearPupillaryDistance: HKQuantity?)\nCreates a new glasses lens specification, containing the prescription data for one eye.\nAccessing the specification’s data\nvar farPupillaryDistance: HKQuantity?\nThe distance between the pupil and the center of the nose when looking at an object far away, measured in mm.\nvar nearPupillaryDistance: HKQuantity?\nThe distance between the pupil and the center of the nose when looking at a nearby object, measured in mm.\nvar prism: HKVisionPrism?\nAn object that contains information about the eye alignment correction.\nvar vertexDistance: HKQuantity?\nThe distance between the back of the lens and the eye, measured in mm.\nRelationships\nInherits From\nHKLensSpecification\nConforms To\nNSCopying\nNSSecureCoding\nSee Also\nVision prescriptions\nclass HKVisionPrescription\nA sample that stores a vision prescription.\nclass HKGlassesPrescription\nA sample that stores a prescription for glasses.\nclass HKContactsPrescription\nA sample that store a prescription for contacts.\nclass HKContactsLensSpecification\nAn object that contains the contacts prescription data for one eye.\nclass HKLensSpecification\nAn abstract superclass for lens specifications.\nclass HKVisionPrism\nPrescription data for eye alignment.\nclass HKPrescriptionType\nA type that identifies samples that store a prescription."
  },
  {
    "title": "appleMoveTime | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquantitytypeidentifier/3131035-applemovetime",
    "html": "Discussion\n\nappleMoveTime measures every full minute where the watch detects the user actively moving. Apple Watch uses the accelerometer and gyroscopes to detect activities that involve full-body movements, like walking, running, or playing in the playground.\n\nFor younger users, HealthKit’s activity summary can track move time instead of active energy burned:\n\nHealthKit automatically tracks move time for any users under 13 years old.\n\nUsers 13 to 18 years old can choose whether to track move time or active calorie burn.\n\nAll users over 18 years old track active calorie burn.\n\nThese samples use time units (described in HKUnit) and measure cumulative values (described in HKQuantityAggregationStyle).\n\nSee Also\nActivity\nstatic let stepCount: HKQuantityTypeIdentifier\nA quantity sample type that measures the number of steps the user has taken.\nstatic let distanceWalkingRunning: HKQuantityTypeIdentifier\nA quantity sample type that measures the distance the user has moved by walking or running.\nstatic let runningGroundContactTime: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of time the runner’s foot is in contact with the ground while running.\nstatic let runningPower: HKQuantityTypeIdentifier\nA quantity sample type that measures the rate of work required for the runner to maintain their speed.\nstatic let runningSpeed: HKQuantityTypeIdentifier\nA quantity sample type that measures the runner’s speed.\nstatic let runningStrideLength: HKQuantityTypeIdentifier\nA quantity sample type that measures the distance covered by a single step while running.\nstatic let runningVerticalOscillation: HKQuantityTypeIdentifier\nA quantity sample type measuring pelvis vertical range of motion during a single running stride.\nstatic let distanceCycling: HKQuantityTypeIdentifier\nA quantity sample type that measures the distance the user has moved by cycling.\nstatic let pushCount: HKQuantityTypeIdentifier\nA quantity sample type that measures the number of pushes that the user has performed while using a wheelchair.\nstatic let distanceWheelchair: HKQuantityTypeIdentifier\nA quantity sample type that measures the distance the user has moved using a wheelchair.\nstatic let swimmingStrokeCount: HKQuantityTypeIdentifier\nA quantity sample type that measures the number of strokes performed while swimming.\nstatic let distanceSwimming: HKQuantityTypeIdentifier\nA quantity sample type that measures the distance the user has moved while swimming.\nstatic let distanceDownhillSnowSports: HKQuantityTypeIdentifier\nA quantity sample type that measures the distance the user has traveled while skiing or snowboarding.\nstatic let basalEnergyBurned: HKQuantityTypeIdentifier\nA quantity sample type that measures the resting energy burned by the user.\nstatic let activeEnergyBurned: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of active energy the user has burned.\nstatic let flightsClimbed: HKQuantityTypeIdentifier\nA quantity sample type that measures the number flights of stairs that the user has climbed.\nstatic let nikeFuel: HKQuantityTypeIdentifier\nA quantity sample type that measures the number of NikeFuel points the user has earned.\nstatic let appleExerciseTime: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of time the user spent exercising.\nstatic let appleStandTime: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of time the user has spent standing.\nstatic let vo2Max: HKQuantityTypeIdentifier\nA quantity sample that measures the maximal oxygen consumption during exercise.\nRelated Documentation\nvar activityMoveMode: HKActivityMoveMode\nThe move mode that they system used for this activity summary.\nstruct HKQuantityTypeIdentifier\nThe identifiers that create quantity type objects.\nclass HKQuantitySample\nA sample that represents a quantity, including the value and the units.\nclass HKQuantity\nAn object that stores a value for a given unit."
  },
  {
    "title": "appleExerciseTime | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquantitytypeidentifier/1615696-appleexercisetime",
    "html": "Discussion\n\nThis quantity type measures every full minute of movement that equals or exceeds the intensity of a brisk walk.\n\nApple watch automatically records exercise time. By default, the watch uses the accelerometer to estimate the intensity of the user’s movement. However, during workout sessions, the watch uses additional sensors, like the heart rate sensor and GPS, to generate estimates.\n\nHKWorkoutSession sessions also contribute to the exercise time. For more information, see Fill the Activity rings.\n\nThese samples use time units (described in HKUnit) and measure cumulative values (described in HKQuantityAggregationStyle).\n\nSee Also\nActivity\nstatic let stepCount: HKQuantityTypeIdentifier\nA quantity sample type that measures the number of steps the user has taken.\nstatic let distanceWalkingRunning: HKQuantityTypeIdentifier\nA quantity sample type that measures the distance the user has moved by walking or running.\nstatic let runningGroundContactTime: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of time the runner’s foot is in contact with the ground while running.\nstatic let runningPower: HKQuantityTypeIdentifier\nA quantity sample type that measures the rate of work required for the runner to maintain their speed.\nstatic let runningSpeed: HKQuantityTypeIdentifier\nA quantity sample type that measures the runner’s speed.\nstatic let runningStrideLength: HKQuantityTypeIdentifier\nA quantity sample type that measures the distance covered by a single step while running.\nstatic let runningVerticalOscillation: HKQuantityTypeIdentifier\nA quantity sample type measuring pelvis vertical range of motion during a single running stride.\nstatic let distanceCycling: HKQuantityTypeIdentifier\nA quantity sample type that measures the distance the user has moved by cycling.\nstatic let pushCount: HKQuantityTypeIdentifier\nA quantity sample type that measures the number of pushes that the user has performed while using a wheelchair.\nstatic let distanceWheelchair: HKQuantityTypeIdentifier\nA quantity sample type that measures the distance the user has moved using a wheelchair.\nstatic let swimmingStrokeCount: HKQuantityTypeIdentifier\nA quantity sample type that measures the number of strokes performed while swimming.\nstatic let distanceSwimming: HKQuantityTypeIdentifier\nA quantity sample type that measures the distance the user has moved while swimming.\nstatic let distanceDownhillSnowSports: HKQuantityTypeIdentifier\nA quantity sample type that measures the distance the user has traveled while skiing or snowboarding.\nstatic let basalEnergyBurned: HKQuantityTypeIdentifier\nA quantity sample type that measures the resting energy burned by the user.\nstatic let activeEnergyBurned: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of active energy the user has burned.\nstatic let flightsClimbed: HKQuantityTypeIdentifier\nA quantity sample type that measures the number flights of stairs that the user has climbed.\nstatic let nikeFuel: HKQuantityTypeIdentifier\nA quantity sample type that measures the number of NikeFuel points the user has earned.\nstatic let appleMoveTime: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of time the user has spent performing activities that involve full-body movements during the specified day.\nstatic let appleStandTime: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of time the user has spent standing.\nstatic let vo2Max: HKQuantityTypeIdentifier\nA quantity sample that measures the maximal oxygen consumption during exercise.\nRelated Documentation\nstruct HKQuantityTypeIdentifier\nThe identifiers that create quantity type objects.\nclass HKQuantitySample\nA sample that represents a quantity, including the value and the units.\nclass HKQuantity\nAn object that stores a value for a given unit."
  },
  {
    "title": "leanBodyMass | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquantitytypeidentifier/1615664-leanbodymass",
    "html": "Discussion\n\nThese samples use mass units (described in HKUnit) and measure discrete values (described in HKQuantityAggregationStyle).\n\nSee Also\nBody measurements\nstatic let height: HKQuantityTypeIdentifier\nA quantity sample type that measures the user’s height.\nstatic let bodyMass: HKQuantityTypeIdentifier\nA quantity sample type that measures the user’s weight.\nstatic let bodyMassIndex: HKQuantityTypeIdentifier\nA quantity sample type that measures the user’s body mass index.\nstatic let bodyFatPercentage: HKQuantityTypeIdentifier\nA quantity sample type that measures the user’s body fat percentage.\nstatic let waistCircumference: HKQuantityTypeIdentifier\nA quantity sample type that measures the user’s waist circumference.\nstatic let appleSleepingWristTemperature: HKQuantityTypeIdentifier\nA quantity sample type that records the wrist temperature during sleep.\nRelated Documentation\nstruct HKQuantityTypeIdentifier\nThe identifiers that create quantity type objects.\nclass HKQuantitySample\nA sample that represents a quantity, including the value and the units.\nclass HKQuantity\nAn object that stores a value for a given unit."
  },
  {
    "title": "bodyMassIndex | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquantitytypeidentifier/1615698-bodymassindex",
    "html": "Discussion\n\nThese samples use count units (described in HKUnit) and measure discrete values (described in HKQuantityAggregationStyle).\n\nSee Also\nBody measurements\nstatic let height: HKQuantityTypeIdentifier\nA quantity sample type that measures the user’s height.\nstatic let bodyMass: HKQuantityTypeIdentifier\nA quantity sample type that measures the user’s weight.\nstatic let leanBodyMass: HKQuantityTypeIdentifier\nA quantity sample type that measures the user’s lean body mass.\nstatic let bodyFatPercentage: HKQuantityTypeIdentifier\nA quantity sample type that measures the user’s body fat percentage.\nstatic let waistCircumference: HKQuantityTypeIdentifier\nA quantity sample type that measures the user’s waist circumference.\nstatic let appleSleepingWristTemperature: HKQuantityTypeIdentifier\nA quantity sample type that records the wrist temperature during sleep.\nRelated Documentation\nstruct HKQuantityTypeIdentifier\nThe identifiers that create quantity type objects.\nclass HKQuantitySample\nA sample that represents a quantity, including the value and the units.\nclass HKQuantity\nAn object that stores a value for a given unit."
  },
  {
    "title": "bodyFatPercentage | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquantitytypeidentifier/1615666-bodyfatpercentage",
    "html": "Discussion\n\nThese samples use percent units (described in HKUnit) and measure discrete values (described in HKQuantityAggregationStyle).\n\nSee Also\nBody measurements\nstatic let height: HKQuantityTypeIdentifier\nA quantity sample type that measures the user’s height.\nstatic let bodyMass: HKQuantityTypeIdentifier\nA quantity sample type that measures the user’s weight.\nstatic let bodyMassIndex: HKQuantityTypeIdentifier\nA quantity sample type that measures the user’s body mass index.\nstatic let leanBodyMass: HKQuantityTypeIdentifier\nA quantity sample type that measures the user’s lean body mass.\nstatic let waistCircumference: HKQuantityTypeIdentifier\nA quantity sample type that measures the user’s waist circumference.\nstatic let appleSleepingWristTemperature: HKQuantityTypeIdentifier\nA quantity sample type that records the wrist temperature during sleep.\nRelated Documentation\nstruct HKQuantityTypeIdentifier\nThe identifiers that create quantity type objects.\nclass HKQuantitySample\nA sample that represents a quantity, including the value and the units.\nclass HKQuantity\nAn object that stores a value for a given unit."
  },
  {
    "title": "appleStandHour | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkcategorytypeidentifier/1615539-applestandhour",
    "html": "Discussion\n\nThis quantity type counts the number of hours during which the user stood and moved for at least one minute per hour.\n\nIf wheelchairUse() returns HKWheelchairUse.yes, Apple Watch calculates the number of hours during which the user rolled for at least one minute instead. Also, the Activity rings display Roll hours instead of Stand hours.\n\nNote\n\nRoll hours are recorded using the appleStandHours quantity type. Check the wheelchairUse() method’s return value to determine whether the data should be interpreted as Roll or Stand hours.\n\nThese samples use values from the HKCategoryValueAppleStandHour enumeration. They represent the data tracked by the Stand ring on Apple Watch.\n\nSee Also\nActivity\nstatic let lowCardioFitnessEvent: HKCategoryTypeIdentifier\nAn event that indicates the user’s VO2 max values consistently fall below a particular aerobic fitness threshold."
  },
  {
    "title": "distanceWalkingRunning | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquantitytypeidentifier/1615230-distancewalkingrunning",
    "html": "Discussion\n\nThese samples use length units (described in HKUnit) and measure cumulative values (described in HKQuantityAggregationStyle).\n\nSee Also\nActivity\nstatic let stepCount: HKQuantityTypeIdentifier\nA quantity sample type that measures the number of steps the user has taken.\nstatic let runningGroundContactTime: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of time the runner’s foot is in contact with the ground while running.\nstatic let runningPower: HKQuantityTypeIdentifier\nA quantity sample type that measures the rate of work required for the runner to maintain their speed.\nstatic let runningSpeed: HKQuantityTypeIdentifier\nA quantity sample type that measures the runner’s speed.\nstatic let runningStrideLength: HKQuantityTypeIdentifier\nA quantity sample type that measures the distance covered by a single step while running.\nstatic let runningVerticalOscillation: HKQuantityTypeIdentifier\nA quantity sample type measuring pelvis vertical range of motion during a single running stride.\nstatic let distanceCycling: HKQuantityTypeIdentifier\nA quantity sample type that measures the distance the user has moved by cycling.\nstatic let pushCount: HKQuantityTypeIdentifier\nA quantity sample type that measures the number of pushes that the user has performed while using a wheelchair.\nstatic let distanceWheelchair: HKQuantityTypeIdentifier\nA quantity sample type that measures the distance the user has moved using a wheelchair.\nstatic let swimmingStrokeCount: HKQuantityTypeIdentifier\nA quantity sample type that measures the number of strokes performed while swimming.\nstatic let distanceSwimming: HKQuantityTypeIdentifier\nA quantity sample type that measures the distance the user has moved while swimming.\nstatic let distanceDownhillSnowSports: HKQuantityTypeIdentifier\nA quantity sample type that measures the distance the user has traveled while skiing or snowboarding.\nstatic let basalEnergyBurned: HKQuantityTypeIdentifier\nA quantity sample type that measures the resting energy burned by the user.\nstatic let activeEnergyBurned: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of active energy the user has burned.\nstatic let flightsClimbed: HKQuantityTypeIdentifier\nA quantity sample type that measures the number flights of stairs that the user has climbed.\nstatic let nikeFuel: HKQuantityTypeIdentifier\nA quantity sample type that measures the number of NikeFuel points the user has earned.\nstatic let appleExerciseTime: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of time the user spent exercising.\nstatic let appleMoveTime: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of time the user has spent performing activities that involve full-body movements during the specified day.\nstatic let appleStandTime: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of time the user has spent standing.\nstatic let vo2Max: HKQuantityTypeIdentifier\nA quantity sample that measures the maximal oxygen consumption during exercise.\nRelated Documentation\nstruct HKQuantityTypeIdentifier\nThe identifiers that create quantity type objects.\nclass HKQuantitySample\nA sample that represents a quantity, including the value and the units.\nclass HKQuantity\nAn object that stores a value for a given unit."
  },
  {
    "title": "fitzpatrickSkinType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkcharacteristictypeidentifier/1615075-fitzpatrickskintype",
    "html": "Discussion\n\nThis type uses values from the HKFitzpatrickSkinType enum.\n\nSee Also\nCharacteristic Types\nstatic let activityMoveMode: HKCharacteristicTypeIdentifier\nA characteristic identifier for the user’s activity mode.\nstatic let biologicalSex: HKCharacteristicTypeIdentifier\nA characteristic type identifier for the user’s sex.\nstatic let bloodType: HKCharacteristicTypeIdentifier\nA characteristic type identifier for the user’s blood type.\nstatic let dateOfBirth: HKCharacteristicTypeIdentifier\nA characteristic type identifier for the user’s date of birth.\nstatic let wheelchairUse: HKCharacteristicTypeIdentifier\nA characteristic identifier for the user’s use of a wheelchair.\nRelated Documentation\nclass HKCharacteristicType\nA type that represents data that doesn’t typically change over time.\nstruct HKCharacteristicTypeIdentifier\nThe identifiers that create characteristic type objects.\nenum HKFitzpatrickSkinType\nCategories representing the user’s skin type based on the Fitzpatrick scale.\nclass HKFitzpatrickSkinTypeObject\nThis class acts as a wrapper for the enumeration."
  },
  {
    "title": "dateOfBirth | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkcharacteristictypeidentifier/1615780-dateofbirth",
    "html": "See Also\nCharacteristic Types\nstatic let activityMoveMode: HKCharacteristicTypeIdentifier\nA characteristic identifier for the user’s activity mode.\nstatic let biologicalSex: HKCharacteristicTypeIdentifier\nA characteristic type identifier for the user’s sex.\nstatic let bloodType: HKCharacteristicTypeIdentifier\nA characteristic type identifier for the user’s blood type.\nstatic let fitzpatrickSkinType: HKCharacteristicTypeIdentifier\nA characteristic type identifier for the user’s skin type.\nstatic let wheelchairUse: HKCharacteristicTypeIdentifier\nA characteristic identifier for the user’s use of a wheelchair.\nRelated Documentation\nclass HKCharacteristicType\nA type that represents data that doesn’t typically change over time.\nstruct HKCharacteristicTypeIdentifier\nThe identifiers that create characteristic type objects."
  },
  {
    "title": "wheelchairUse | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkcharacteristictypeidentifier/1648572-wheelchairuse",
    "html": "See Also\nCharacteristic Types\nstatic let activityMoveMode: HKCharacteristicTypeIdentifier\nA characteristic identifier for the user’s activity mode.\nstatic let biologicalSex: HKCharacteristicTypeIdentifier\nA characteristic type identifier for the user’s sex.\nstatic let bloodType: HKCharacteristicTypeIdentifier\nA characteristic type identifier for the user’s blood type.\nstatic let dateOfBirth: HKCharacteristicTypeIdentifier\nA characteristic type identifier for the user’s date of birth.\nstatic let fitzpatrickSkinType: HKCharacteristicTypeIdentifier\nA characteristic type identifier for the user’s skin type.\nRelated Documentation\nclass HKCharacteristicType\nA type that represents data that doesn’t typically change over time.\nstruct HKCharacteristicTypeIdentifier\nThe identifiers that create characteristic type objects."
  },
  {
    "title": "vo2Max | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquantitytypeidentifier/2867757-vo2max",
    "html": "Discussion\n\nVO2max—the maximum amount of oxygen your body can consume during exercise— is a strong predictor of overall health. Clinical tests measure VO2max by having the patient exercise on a treadmill or bike, with an intensity that increases every few minutes until exhaustion.\n\nOn Apple Watch Series 3 or later, the system automatically saves vo2Max samples to HealthKit. The watch estimates the user’s VO2max based on data gathered while the user is walking or running outdoors. For more information, see Understand Estimated Test Results.\n\nYou can also create and save your own vo2Max samples—for example, when creating an app that records the results of tests performed in a clinic. When creating vo2Max samples, use the HKMetadataKeyVO2MaxTestType metadata key to specify the type of test used to generate the sample.\n\nvo2Max samples use volume/mass/time units (described in HKUnit), measured in ml/kg /min. They measure discrete values (described in HKQuantityAggregationStyle).\n\nUnderstand Estimated Test Results\n\nApple Watch Series 3 and later estimates the user’s VO2max by measuring the user’s heart rate response to exercise. The system can generate VO2max samples after an outdoor walk, outdoor run, or hiking workout. During the outdoor activity, the user must cover relatively flat ground (a grade of less than 5% incline or decline) with adequate GPS, heart rate signal quality, and sufficient exertion. The user must maintain a heart rate approximately greater than or equal to 130% of their resting heart rate. The system can estimate VO2max ranges from 14-60 ml/kg/min\n\nThe user must wear their Apple Watch for at least one day before the system can generate the first vo2Max sample. Additionally, the system doesn’t generate a vo2Max sample on the user’s first workout. However, it can make estimates based on data collected outside a workout session.\n\nApple Watch estimates VO2max based on sub-maximal predictions rather than peakVO2. Users don’t need to achieve peak heart rate to receive an estimate; however, the system does need to estimate their peak heart rate. Users who take medications that may reduce their peak heart rate can toggle a medication switch in the Health app to enable more accurate VO2max estimates.\n\nTopics\nMetadata Keys\nlet HKMetadataKeyVO2MaxTestType: String\nThe method used to calculate the user’s VO2 max rate.\nSee Also\nActivity\nstatic let stepCount: HKQuantityTypeIdentifier\nA quantity sample type that measures the number of steps the user has taken.\nstatic let distanceWalkingRunning: HKQuantityTypeIdentifier\nA quantity sample type that measures the distance the user has moved by walking or running.\nstatic let runningGroundContactTime: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of time the runner’s foot is in contact with the ground while running.\nstatic let runningPower: HKQuantityTypeIdentifier\nA quantity sample type that measures the rate of work required for the runner to maintain their speed.\nstatic let runningSpeed: HKQuantityTypeIdentifier\nA quantity sample type that measures the runner’s speed.\nstatic let runningStrideLength: HKQuantityTypeIdentifier\nA quantity sample type that measures the distance covered by a single step while running.\nstatic let runningVerticalOscillation: HKQuantityTypeIdentifier\nA quantity sample type measuring pelvis vertical range of motion during a single running stride.\nstatic let distanceCycling: HKQuantityTypeIdentifier\nA quantity sample type that measures the distance the user has moved by cycling.\nstatic let pushCount: HKQuantityTypeIdentifier\nA quantity sample type that measures the number of pushes that the user has performed while using a wheelchair.\nstatic let distanceWheelchair: HKQuantityTypeIdentifier\nA quantity sample type that measures the distance the user has moved using a wheelchair.\nstatic let swimmingStrokeCount: HKQuantityTypeIdentifier\nA quantity sample type that measures the number of strokes performed while swimming.\nstatic let distanceSwimming: HKQuantityTypeIdentifier\nA quantity sample type that measures the distance the user has moved while swimming.\nstatic let distanceDownhillSnowSports: HKQuantityTypeIdentifier\nA quantity sample type that measures the distance the user has traveled while skiing or snowboarding.\nstatic let basalEnergyBurned: HKQuantityTypeIdentifier\nA quantity sample type that measures the resting energy burned by the user.\nstatic let activeEnergyBurned: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of active energy the user has burned.\nstatic let flightsClimbed: HKQuantityTypeIdentifier\nA quantity sample type that measures the number flights of stairs that the user has climbed.\nstatic let nikeFuel: HKQuantityTypeIdentifier\nA quantity sample type that measures the number of NikeFuel points the user has earned.\nstatic let appleExerciseTime: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of time the user spent exercising.\nstatic let appleMoveTime: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of time the user has spent performing activities that involve full-body movements during the specified day.\nstatic let appleStandTime: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of time the user has spent standing.\nRelated Documentation\nstruct HKQuantityTypeIdentifier\nThe identifiers that create quantity type objects.\nclass HKQuantitySample\nA sample that represents a quantity, including the value and the units.\nclass HKQuantity\nAn object that stores a value for a given unit."
  },
  {
    "title": "HKSourceRevision | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hksourcerevision",
    "html": "Overview\n\nThe HKSourceRevision class acts as a wrapper for the HKSource class, adding information about the source's version, operating system, and product type.\n\nSource revision objects are immutable: you set the source revision’s properties when you create the object, and they cannot change.\n\nWhen an HKObject instance is created, its sourceRevision property is set to nil. When the object is saved to the HealthKit store, HealthKit assigns a new source revision to the object’s sourceRevision property. The source revision can be accessed only on objects retrieved from the HealthKit store.\n\nSubclassing Source Revisions\n\nLike many HealthKit classes, the HKSourceRevision class is not extensible and should not be subclassed.\n\nTopics\nCreating Source Revision Objects\ninit(source: HKSource, version: String?)\nInitializes a new source revision object with the provided source and version information.\ninit(source: HKSource, version: String?, productType: String?, operatingSystemVersion: OperatingSystemVersion)\nInitializes a new source revision object with the provided source, version, product type, and operating system.\nAccessing Source and Version Information\nvar source: HKSource\nThe source for a sample.\nvar version: String?\nA string that identifies a particular version of the source.\nvar operatingSystemVersion: OperatingSystemVersion\nA string that identifies the operating system used to save a sample.\nvar productType: String?\nA string that identifies the device used to save a sample.\nRelationships\nInherits From\nNSObject\nConforms To\nNSCopying\nNSSecureCoding\nSee Also\nSources and devices\nstruct HKSourceQueryDescriptor\nA query interface that uses Swift concurrency to read the apps and devices that produced the matching samples.\nclass HKSource\nAn object indicating the app or device that created a HealthKit sample\nclass HKDevice\nA device that generates data for HealthKit.\nclass HKSourceQuery\nA query that returns a list of sources, such as apps and devices, that have saved matching queries to the HealthKit store."
  },
  {
    "title": "HKContactsPrescription | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkcontactsprescription",
    "html": "Overview\n\nTo create a sample that stores a contacts prescription, start by defining a specification for each eye. Each lens specification object requires a sphere parameter. This measures the lens’s strength for correcting either nearsightedness or farsightedness (measured in diopter() units).\n\n// The correction for farsightedness.\nlet sphere = HKQuantity(unit: .diopter(), doubleValue: -0.75)\n\n\nNext, create values for any of the prescription’s optional parameters. For example, if the prescription corrects for astigmatism, create the cylinder and axis values. The cylinder value uses diopter() units, while the axis uses degreeAngle().\n\n// The corrections for astigmatism.\nlet cylinder = HKQuantity(unit: .diopter(), doubleValue: -0.5)\nlet axis = HKQuantity(unit: .degreeAngle(), doubleValue: 155.0)\n\n\nTo add a multifocal correction for reading, create an addPower value using diopter() units.\n\n// Multifocal correction for reading.\nlet addPower = HKQuantity(unit: .diopter(), doubleValue: +2.00)\n\n\nTo add fitting information for the contact lens, create baseCurve and diameter values. Both of these values use millimeters.\n\n// The fitting information.\nlet baseCurve = HKQuantity(unit: HKUnit.meterUnit(with: .milli),\n                           doubleValue: 9.0)\n\n\nlet diameter = HKQuantity(unit: HKUnit.meterUnit(with: .milli),\n                          doubleValue: 12.0)\n\n\nThen you can create the HKContactsLensSpecification lens specification.\n\n// The prescription for the right eye.\nlet contactsRightEye = HKContactsLensSpecification(sphere: sphere,\n                                                   cylinder: cylinder,\n                                                   axis: axis,\n                                                   addPower: addPower,\n                                                   baseCurve: baseCurve,\n                                                   diameter: diameter)\n\n\nAfter you create your lens specifications, you can create an HKContactsPrescription sample.\n\n// The date the doctor issued the prescription.\nlet dateIssued = Date()\n\n\n// The date when the prescription expires.\nlet expirationDate = dateIssued.addingTimeInterval(60 * 24 * 365)\n\n\n// The contacts prescription.\nlet prescription = HKContactsPrescription(rightEyeSpecification: contactsRightEye,\n                                          leftEyeSpecification: contactsLeftEye,\n                                          brand: \"MyBrand Name\",\n                                          dateIssued: dateIssued,\n                                          expirationDate: expirationDate,\n                                          device: HKDevice.local(),\n                                          metadata: nil)\n\n\nThen save the sample to the HealthKit store.\n\n// Save the sample to the HealthKit store.\ndo {\n    try await store.save(prescription)\n} catch {\n    // Handle the error here.\n    fatalError(\"*** An error occurred while saving the prescription sample to the HealthKit store \\(error.localizedDescription) ***\")\n}\n\n\nFinally, add an image or PDF of the prescription to the sample as an attachment.\n\n// Get the attachment store.\nlet attachmentStore = HKAttachmentStore(healthStore: store)\n\n\n// Attach the image to the sample.\ndo {\n    _ = try await attachmentStore.addAttachment(to: prescription,\n                                                name: \"Glasses Prescription\",\n                                                contentType: type,\n                                                url: url)\n} catch {\n    // Handle the error.\n    fatalError(\"*** An error occurred while attaching the image: \\(error.localizedDescription) ***\")\n}\n\n\nImportant\n\nSome regions may require an image of the original prescription to validate the prescription record. You can add an image or PDF of the prescription as an attachment. For more information about how to add an attachment, see HKAttachmentStore.\n\nTopics\nCreating contacts prescription samples\ninit(rightEyeSpecification: HKContactsLensSpecification?, leftEyeSpecification: HKContactsLensSpecification?, brand: String, dateIssued: Date, expirationDate: Date?, device: HKDevice?, metadata: [String : Any]?)\nCreates a new glasses prescription sample.\nAccessing the contacts prescription data\nvar brand: String\nThe name of the prescribed brand, based on the contact lens fitting.\nvar leftEye: HKContactsLensSpecification?\nThe lens specification for the left eye.\nvar rightEye: HKContactsLensSpecification?\nThe lens specification for the right eye.\nRelationships\nInherits From\nHKVisionPrescription\nConforms To\nNSCopying\nNSSecureCoding\nSee Also\nVision prescriptions\nclass HKVisionPrescription\nA sample that stores a vision prescription.\nclass HKGlassesPrescription\nA sample that stores a prescription for glasses.\nclass HKGlassesLensSpecification\nAn object that contains the glasses prescription data for one eye.\nclass HKContactsLensSpecification\nAn object that contains the contacts prescription data for one eye.\nclass HKLensSpecification\nAn abstract superclass for lens specifications.\nclass HKVisionPrism\nPrescription data for eye alignment.\nclass HKPrescriptionType\nA type that identifies samples that store a prescription."
  },
  {
    "title": "HKCategorySample | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkcategorysample",
    "html": "Overview\n\nYou can use category samples to record sleep data using the HKCategoryValueSleepAnalysis enumeration. Individual samples represent time periods when the user is in bed or asleep. Samples with different values may have overlapping time intervals. For example, when the user is both in bed and asleep, create an in-bed sample and an asleep sample with overlapping times.\n\nThe HKCategorySample class is a concrete subclass of the HKSample class. Category samples are immutable: You set the sample’s properties when you create it, and they can’t change.\n\nExtend Category Samples\n\nLike many HealthKit classes, don’t subclass the HKCategorySample class. You may extend the HKCategorySample class by adding metadata with custom keys as appropriate for your app.\n\nFor more information, see init(type:value:start:end:metadata:).\n\nTopics\nCreating Category Samples\ninit(type: HKCategoryType, value: Int, start: Date, end: Date)\nCreates a newly instantiated category sample.\ninit(type: HKCategoryType, value: Int, start: Date, end: Date, metadata: [String : Any]?)\nCreates a newly instantiated category sample with the provided metadata.\ninit(type: HKCategoryType, value: Int, start: Date, end: Date, device: HKDevice?, metadata: [String : Any]?)\nCreates a newly instantiated category sample including the provided device and metadata.\nGetting Property Data\nvar categoryType: HKCategoryType\nThe category type for this sample.\nvar value: Int\nThe category value for this sample.\nAssigning Values\nenum HKCategoryValue\nCategories that are undefined.\nenum HKCategoryValueCervicalMucusQuality\nCategories that represent the user’s cervical mucus quality.\nenum HKCategoryValueMenstrualFlow\nCategories that indicate the amount of menstrual flow for a given sample.\nenum HKCategoryValueOvulationTestResult\nCategories that represent the result of an ovulation home test.\nenum HKCategoryValueContraceptive\nThe type of contraceptive.\nenum HKCategoryValueSleepAnalysis\nCategories that represent the result of a sleep analysis.\nenum HKCategoryValueAppetiteChanges\nCategories that represent change in appetite.\nenum HKCategoryValuePresence\nCategories that indicate whether a symptom is present.\nenum HKCategoryValueSeverity\nCategories that represent the severity of a symptom.\nenum HKCategoryValueEnvironmentalAudioExposureEvent\nExposure events for environmental audio.\nenum HKCategoryValueHeadphoneAudioExposureEvent\nExposure events for headphone audio.\nenum HKCategoryValueLowCardioFitnessEvent\nA value that indicates a low-level cardio fitness event.\nenum HKAppleWalkingSteadinessClassification\nA classification of a score based on the steadiness of the user’s gait.\nenum HKCategoryValueAppleWalkingSteadinessEvent\nThe value of an event triggered by a reduced score for the steadiness of the user’s gait.\nenum HKCategoryValuePregnancyTestResult\nCategory values that indicate the results of a home pregnancy test.\nenum HKCategoryValueProgesteroneTestResult\nA category value that indicates the result from a home progesterone test.\nenum HKCategoryValueAudioExposureEvent\nCategories that indicate audio exposure events.\nSpecifying Predicate Key Paths\nlet HKPredicateKeyPathCategoryValue: String\nThe key path for accessing the category sample’s value.\nRelationships\nInherits From\nHKSample\nSee Also\nBasic samples\nclass HKCumulativeQuantitySample\nA sample that represents a cumulative quantity.\nclass HKDiscreteQuantitySample\nA sample that represents a discrete quantity.\nclass HKQuantitySample\nA sample that represents a quantity, including the value and the units.\nclass HKCorrelation\nA sample that groups multiple related samples into a single entry.\nUnits and quantities\nObjects used to specify a quantity for a given unit, and to convert between units.\nMetadata Keys\nConstants used to add metadata to objects stored in HealthKit."
  },
  {
    "title": "HKDocumentSample | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkdocumentsample",
    "html": "Overview\n\nYou should never instantiate an HKDocumentSample object directly. Instead, you always work with a concrete subclass. In iOS 10 and watchOS 3, the only concrete class is the HKCDADocumentSample class.\n\nDocument samples are immutable: You set the sample’s properties when you create it, and they cannot change.\n\nExtend Document Samples\n\nLike many HealthKit classes, you should not create any custom subclasses of the HKDocumentSample class. You can extend the HKDocumentSample class and its subclasses by adding custom metadata keys and values to the metadata dictionary when the object is instantiated.\n\nTopics\nAccessing the Document Sample Properties\nvar documentType: HKDocumentType\nThe type of document represented by the sample.\nRelationships\nInherits From\nHKSample\nSee Also\nMedical records\nAccessing Health Records\nRead clinical record data from the HealthKit store.\nAccessing Sample Data in the Simulator\nSet up sample accounts to build and test your app.\nAccessing a User’s Clinical Records\nRequest authorization to query HealthKit for a user’s clinical records and display them in your app.\nAccessing Data from a SMART Health Card\nQuery for and validate a verifiable clinical record.\nclass HKClinicalRecord\nA sample that stores a clinical record.\nclass HKFHIRResource\nAn object containing Fast Healthcare Interoperability Resources (FHIR) data.\nclass HKVerifiableClinicalRecord\nA sample that represents the contents of a SMART Health Card or EU Digital COVID Certificate.\nclass HKVerifiableClinicalRecordSubject\nThe subject associated with a signed clinical record.\nclass HKCDADocumentSample\nA Clinical Document Architecture (CDA) sample that stores a single document.\nstatic let CDA: HKDocumentTypeIdentifier\nThe CDA Document type identifier, used when requesting permission to read or share CDA documents.\nclass HKDocumentType\nA sample type used to create queries for documents."
  },
  {
    "title": "HKFHIRResource | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkfhirresource",
    "html": "Topics\nAccessing FHIR Data\nvar identifier: String\nThe value from the FHIR resource’s id field.\nvar fhirVersion: HKFHIRVersion\nThe FHIR version used by this resource.\nclass HKFHIRVersion\nThe FHIR version.\nvar resourceType: HKFHIRResourceType\nThe value from the FHIR resource’s resourceType field.\nstruct HKFHIRResourceType\nThe FHIR resource types supported in HealthKit.\nvar sourceURL: URL?\nThe full URL for the source of the FHIR resource.\nvar data: Data\nThe JSON representation of the FHIR resource.\nRelationships\nInherits From\nNSObject\nConforms To\nNSCopying\nNSSecureCoding\nSee Also\nMedical records\nAccessing Health Records\nRead clinical record data from the HealthKit store.\nAccessing Sample Data in the Simulator\nSet up sample accounts to build and test your app.\nAccessing a User’s Clinical Records\nRequest authorization to query HealthKit for a user’s clinical records and display them in your app.\nAccessing Data from a SMART Health Card\nQuery for and validate a verifiable clinical record.\nclass HKClinicalRecord\nA sample that stores a clinical record.\nclass HKVerifiableClinicalRecord\nA sample that represents the contents of a SMART Health Card or EU Digital COVID Certificate.\nclass HKVerifiableClinicalRecordSubject\nThe subject associated with a signed clinical record.\nclass HKCDADocumentSample\nA Clinical Document Architecture (CDA) sample that stores a single document.\nclass HKDocumentSample\nAn abstract class that represents a health document in the HealthKit store.\nstatic let CDA: HKDocumentTypeIdentifier\nThe CDA Document type identifier, used when requesting permission to read or share CDA documents.\nclass HKDocumentType\nA sample type used to create queries for documents."
  },
  {
    "title": "HKClinicalRecord | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkclinicalrecord",
    "html": "Overview\n\nThe clinical record stores information about a single condition, procedure, or result. While the record’s properties expose some high-level information, the fhirResource property contains the underlying data from the user’s healthcare institution.\n\nNote that the record inherits the HKSample class’s startDate and endDate properties. However, the system does not populate these properties with information from the FHIR data; instead, the startDate and endDate reflect the time and date when the system downloaded the FHIR data to the device.\n\nTopics\nAccessing Clinical Record Data\nvar clinicalType: HKClinicalType\nAn identifier that indicates the type of record, such as an allergic reaction, a lab result, or a medical procedure.\nvar displayName: String\nThe primary display name as shown in the Health app.\nvar fhirResource: HKFHIRResource?\nThe Fast Healthcare Interoperability Resources (FHIR) data for this record.\nRelationships\nInherits From\nHKSample\nConforms To\nNSCopying\nNSSecureCoding\nSee Also\nMedical records\nAccessing Health Records\nRead clinical record data from the HealthKit store.\nAccessing Sample Data in the Simulator\nSet up sample accounts to build and test your app.\nAccessing a User’s Clinical Records\nRequest authorization to query HealthKit for a user’s clinical records and display them in your app.\nAccessing Data from a SMART Health Card\nQuery for and validate a verifiable clinical record.\nclass HKFHIRResource\nAn object containing Fast Healthcare Interoperability Resources (FHIR) data.\nclass HKVerifiableClinicalRecord\nA sample that represents the contents of a SMART Health Card or EU Digital COVID Certificate.\nclass HKVerifiableClinicalRecordSubject\nThe subject associated with a signed clinical record.\nclass HKCDADocumentSample\nA Clinical Document Architecture (CDA) sample that stores a single document.\nclass HKDocumentSample\nAn abstract class that represents a health document in the HealthKit store.\nstatic let CDA: HKDocumentTypeIdentifier\nThe CDA Document type identifier, used when requesting permission to read or share CDA documents.\nclass HKDocumentType\nA sample type used to create queries for documents.\nRelated Documentation\nclass HKClinicalType\nA type that identifies samples that contain clinical record data."
  },
  {
    "title": "HKVerifiableClinicalRecordSubject | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkverifiableclinicalrecordsubject",
    "html": "Overview\n\nHKVerifiableClinicalRecordSubject objects contain data about the subject from a SMART Health Card. These cards combine both the user’s identity and clinical data into a cryptographically-signed bundle. To protect the subject’s privacy, SMART Health Cards provide the minimum required data. For more information, see SMART Health Cards Framework.\n\nTopics\nAccessing Patient Data\nvar fullName: String\nThe subject’s full name.\nvar dateOfBirthComponents: DateComponents?\nThe subject’s birthdate.\nRelationships\nInherits From\nNSObject\nConforms To\nNSCopying\nNSSecureCoding\nSee Also\nMedical records\nAccessing Health Records\nRead clinical record data from the HealthKit store.\nAccessing Sample Data in the Simulator\nSet up sample accounts to build and test your app.\nAccessing a User’s Clinical Records\nRequest authorization to query HealthKit for a user’s clinical records and display them in your app.\nAccessing Data from a SMART Health Card\nQuery for and validate a verifiable clinical record.\nclass HKClinicalRecord\nA sample that stores a clinical record.\nclass HKFHIRResource\nAn object containing Fast Healthcare Interoperability Resources (FHIR) data.\nclass HKVerifiableClinicalRecord\nA sample that represents the contents of a SMART Health Card or EU Digital COVID Certificate.\nclass HKCDADocumentSample\nA Clinical Document Architecture (CDA) sample that stores a single document.\nclass HKDocumentSample\nAn abstract class that represents a health document in the HealthKit store.\nstatic let CDA: HKDocumentTypeIdentifier\nThe CDA Document type identifier, used when requesting permission to read or share CDA documents.\nclass HKDocumentType\nA sample type used to create queries for documents."
  },
  {
    "title": "HKCDADocumentSample | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkcdadocumentsample",
    "html": "Overview\n\nThe sample’s document property contains an HKCDADocument object, representing the underlying XML document.\n\nThe HKCDADocumentSample class is a concrete subclass of the HKDocumentSample class. Document samples are immutable. HealthKit assigns the document’s properties when the sample is created. They cannot change. If you need to update a document in HealthKit, create a new document sample with the updated CDA document.\n\nTopics\nCreating CDA Samples\ninit(data: Data, start: Date, end: Date, metadata: [String : Any]?)\nReturns a CDA document sample containing the provided XML document and metadata.\nlet HKDetailedCDAValidationErrorKey: String\nA key for accessing validation error information from an error object’s user information dictionary.\nAccessing the Document\nvar document: HKCDADocument?\nThe CDA document.\nclass HKCDADocument\nAn object representing a Clinical Document Architecture (CDA) document in HealthKit.\nAccessing Validation Errors\nlet HKDetailedCDAValidationErrorKey: String\nA key for accessing validation error information from an error object’s user information dictionary.\nSpecifying Predicate Key Paths\nlet HKPredicateKeyPathCDAAuthorName: String\nThe key path for accessing the author’s name inside a predicate format string.\nlet HKPredicateKeyPathCDACustodianName: String\nThe key path for accessing the custodian’s name inside a predicate format string.\nlet HKPredicateKeyPathCDAPatientName: String\nThe key path for accessing the patient’s name inside a predicate format string.\nlet HKPredicateKeyPathCDATitle: String\nThe key path for accessing the document’s title inside a predicate format string.\nRelationships\nInherits From\nHKDocumentSample\nSee Also\nMedical records\nAccessing Health Records\nRead clinical record data from the HealthKit store.\nAccessing Sample Data in the Simulator\nSet up sample accounts to build and test your app.\nAccessing a User’s Clinical Records\nRequest authorization to query HealthKit for a user’s clinical records and display them in your app.\nAccessing Data from a SMART Health Card\nQuery for and validate a verifiable clinical record.\nclass HKClinicalRecord\nA sample that stores a clinical record.\nclass HKFHIRResource\nAn object containing Fast Healthcare Interoperability Resources (FHIR) data.\nclass HKVerifiableClinicalRecord\nA sample that represents the contents of a SMART Health Card or EU Digital COVID Certificate.\nclass HKVerifiableClinicalRecordSubject\nThe subject associated with a signed clinical record.\nclass HKDocumentSample\nAn abstract class that represents a health document in the HealthKit store.\nstatic let CDA: HKDocumentTypeIdentifier\nThe CDA Document type identifier, used when requesting permission to read or share CDA documents.\nclass HKDocumentType\nA sample type used to create queries for documents."
  },
  {
    "title": "Accessing a User’s Clinical Records | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/samples/accessing_a_user_s_clinical_records",
    "html": "Overview\n\nThis sample demonstrates how to request access to a user’s clinical records through HealthKit. With the HealthKit framework’s clinical record support, you can read Fast Healthcare Interoperability Resources (FHIR) objects from the HealthKit store. People must first download their clinical records from one of the supported healthcare institutions before the records appear in HealthKit.\n\nConfigure the Sample Code Project\n\nTo use HealthKit, you must first enable the HealthKit capability and include the NSHealthShareUsageDescription key in your app’s Info.plist file, as described in Accessing Health Records. To access the clinical records, check the Clinical Health Records checkbox in the HealthKit capability and include the NSHealthClinicalHealthRecordsShareUsageDescription key in your app’s Info.plist file.\n\nThe sample app enables the capability and provides the usage string.\n\nBefore building and running the app:\n\nSet a valid signing team in the target’s General pane so that Xcode can create a provisioning profile containing the HealthKit entitlement when you build the app for the first time.\n\nAdd sample data to the Health app by connecting a valid patient portal account from a supported healthcare institution. If you don’t have such an account, you can add sample data within the Simulator as described in Accessing Sample Data in the Simulator.\n\nWhen you first run the app, it hasn’t requested permission to read or share any data in HealthKit. Tapping any items in the list results in an Authorization not Determined error. To authorize the app, scroll to the bottom of the list, and tap the Authorize button.\n\nDefine the Sample Types to Request\n\nThe app defines the clinical record sample types using the HKClinicalTypeIdentifier enumeration. The app must request permission to read all the types that it intends to use. Note that the app may define both clinical records and standard HealthKit sample types at the same time.\n\n/// An enumeration that defines two categories of data types: Health Records and Fitness Data.\n/// Health Records enumerates the clinical records the app would like to access and Fitness Data contains the\n/// fitness data types.\nenum Section {\n    case healthRecords\n    case fitnessData\n    \n    var displayName: String {\n        switch self {\n        case .healthRecords:\n            return \"Health Records\"\n        case .fitnessData:\n            return \"Fitness Data\"\n        }\n    }\n    \n    var types: [HKSampleType] {\n        switch self {\n        case .healthRecords:\n            return [\n                HKObjectType.clinicalType(forIdentifier: .allergyRecord)!,\n                HKObjectType.clinicalType(forIdentifier: .vitalSignRecord)!,\n                HKObjectType.clinicalType(forIdentifier: .conditionRecord)!,\n                HKObjectType.clinicalType(forIdentifier: .immunizationRecord)!,\n                HKObjectType.clinicalType(forIdentifier: .labResultRecord)!,\n                HKObjectType.clinicalType(forIdentifier: .medicationRecord)!,\n                HKObjectType.clinicalType(forIdentifier: .procedureRecord)!\n            ]\n        \n        case .fitnessData:\n            return [\n                HKObjectType.quantityType(forIdentifier: .stepCount)!,\n                HKObjectType.quantityType(forIdentifier: .distanceWalkingRunning)!\n            ]\n        }\n    }\n}\n\nRequest Authorization\n\nThe app may request authorization to access both clinical data and HealthKit data simultaneously.\n\n/// Create an instance of the health store. Use the health store to request authorization to access\n/// HealthKit records and to query for the records.\nlet healthStore = HKHealthStore()\n\n\nvar sampleTypes: Set<HKSampleType> {\n    return Set(Section.healthRecords.types + Section.fitnessData.types)\n}\n\n\n/// Before accessing clinical records and other health data from HealthKit, the app must ask the user for\n/// authorization. The health store's getRequestStatusForAuthorization method allows the app to check\n/// if user has already granted authorization. If the user hasn't granted authorization, the app\n/// requests authorization from the person using the app.\n@objc\nfunc requestAuthorizationIfNeeded(_ sender: AnyObject? = nil) {\n    healthStore.getRequestStatusForAuthorization(toShare: Set(), read: sampleTypes) { (status, error) in\n        if status == .shouldRequest {\n            self.requestAuthorization(sender)\n        } else {\n            DispatchQueue.main.async {\n                let message = \"Authorization status has been determined, no need to request authorization at this time\"\n                self.present(message: message, titled: \"Already Requested\")\n            }\n        }\n    }\n}\n\n\n/// The health store's requestAuthorization method presents a permissions sheet to the user, allowing the user to\n/// choose what data they allow the app to access.\n@objc\nfunc requestAuthorization(_ sender: AnyObject? = nil) {\n    healthStore.requestAuthorization(toShare: nil, read: sampleTypes) { (success, error) in\n        guard success else {\n            DispatchQueue.main.async {\n                self.handleError(error)\n            }\n            return\n        }\n    }\n}\n\n\nTypically, apps that read or share HealthKit data automatically request authorization–either when the app first launches or just before the app needs to access the data. However, to provide readers with complete control over the authorization process, this sample code doesn’t automatically request authorization. Instead, anyone using the app must manually request authorization, by scrolling to the bottom of the list and tapping the Authorize button.\n\nQuery for Health Records\n\nTo query for clinical records, the app uses an HKSampleQuery as shown below.\n\n/// Use HKSampleQuery to query the HealthKit store for samples by type.\nfunc queryForSamples() {\n    let sortDescriptors = [NSSortDescriptor(key: HKSampleSortIdentifierStartDate, ascending: false)]\n    let query = HKSampleQuery(sampleType: sampleType, predicate: nil, limit: 100, sortDescriptors: sortDescriptors) {(_, samplesOrNil, error) in\n        DispatchQueue.main.async {\n            guard let samples = samplesOrNil else {\n                self.handleError(error)\n                return\n            }\n            \n            self.samples = samples\n            self.tableView.reloadData()\n        }\n    }\n    \n    healthStore.execute(query)\n}\n\nAccess Elements Within a FHIR Resource\n\nAfter a person using the app has given the app access to their clinical records, the app needs to extract the relevant information from the FHIR JSON data so that it can do something useful with it. For example, to display the status of a medication in the form of a resource, the app needs to access the MedicationStatement.status element.\n\nThe app uses the FHIRModels library to parse the JSON data into Swift classes. For more details on FHIRModels, see Handling FHIR Without Getting Burned.\n\nIt uses a JSONDecoder to convert the resource’s JSON data:\n\n/// Each clincal record retrieved from HealthKit is associated with a FHIR Resource. Decode it using the FHIRModels.\nfunc decode(resource: HKFHIRResource) throws -> DisplayItemSubtitleConvertible {\n    if #available(iOS 14.0, *) {\n        switch resource.fhirVersion.fhirRelease {\n        case .dstu2:\n            return try decodeDSTU2(resource: resource)\n        case .r4:\n            return try decodeR4(resource: resource)\n        default:\n            throw FHIRResourceDecodingError.versionNotSupported(resource.fhirVersion.stringRepresentation)\n        }\n    } else {\n        return try decodeDSTU2(resource: resource) // On iOS 12 and 13, HealthKit always uses DSTU2 encoding for FHIR resources.\n    }\n}\n\n\nThis provides direct access to the status element, so that the app can display it. It appears as the subtitle of the Medication list view.\n\nextension ModelsDSTU2.MedicationStatement: DisplayItemSubtitleConvertible {\n    var displayItemSubtitle: String {\n        return self.status.value?.rawValue ?? \"unknown\"\n    }\n}\n\nSee Also\nMedical records\nAccessing Health Records\nRead clinical record data from the HealthKit store.\nAccessing Sample Data in the Simulator\nSet up sample accounts to build and test your app.\nAccessing Data from a SMART Health Card\nQuery for and validate a verifiable clinical record.\nclass HKClinicalRecord\nA sample that stores a clinical record.\nclass HKFHIRResource\nAn object containing Fast Healthcare Interoperability Resources (FHIR) data.\nclass HKVerifiableClinicalRecord\nA sample that represents the contents of a SMART Health Card or EU Digital COVID Certificate.\nclass HKVerifiableClinicalRecordSubject\nThe subject associated with a signed clinical record.\nclass HKCDADocumentSample\nA Clinical Document Architecture (CDA) sample that stores a single document.\nclass HKDocumentSample\nAn abstract class that represents a health document in the HealthKit store.\nstatic let CDA: HKDocumentTypeIdentifier\nThe CDA Document type identifier, used when requesting permission to read or share CDA documents.\nclass HKDocumentType\nA sample type used to create queries for documents."
  },
  {
    "title": "Accessing Health Records | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/samples/accessing_health_records",
    "html": "Overview\n\nUse HealthKit’s clinical record support to read Fast Healthcare Interoperability Resources (FHIR) from the HealthKit store. Users can download their FHIR records from supported healthcare institutions. The system then updates the records in the background on a regular basis.\n\nInstead of focusing on documents, FHIR breaks the user’s medical history into discrete records. HealthKit then represents each FHIR record as an HKClinicalRecord sample that stores a single condition, procedure, or result.\n\nTo use clinical records, you must request permission to read each record type. Then, use HealthKit’s queries to access the individual records. Finally, you need to parse and handle each record’s FHIR JSON data.\n\nXcode’s simulator provides sample accounts you can use when building and testing your app. For more information, see Accessing Sample Data in the Simulator.\n\nSet Up HealthKit\n\nDue to their sensitive nature, clinical records have additional setup requirements. First, when you enable your app’s HealthKit capabilities, you must also select the Clinical Health Records checkbox.\n\nNext, you must provide a Health Records Usage string for your app. Use this string to describe what your app does with the user’s records, and why it’s important for the user to share this data.\n\nFor projects created using Xcode 13 or later, set the usage key in the Target Properties list on the app’s Info tab. For projects created with Xcode 12 or earlier, set it in the apps Info.plist file. For more information, see Information Property List.\n\nYou request authorization to read clinical records using the HKClinicalTypeIdentifier enumeration. This enumeration specifies the types of FHIR data supported by HealthKit. You must request permission to read all the types that your app intends to use. Additionally, clinical records are read-only, so you can’t request authorization to share clinical record types. You can’t create or save new HKClinicalRecord objects.\n\nguard let allergiesType = HKObjectType.clinicalType(forIdentifier: .allergyRecord),\nlet medicationsType = HKObjectType.clinicalType(forIdentifier: .medicationRecord) else {\n    fatalError(\"*** Unable to create the requested types ***\")\n}\n\n\n// Clinical types are read-only.\nstore.requestAuthorization(toShare: nil, read: [allergiesType, medicationsType]) { (success, error) in\n    \n    guard success else {\n        // Handle errors here.\n        fatalError(\"*** An error occurred while requesting authorization: \\(error!.localizedDescription) ***\")\n    }\n\n\n    // You can start accessing clinical record data.\n}\n\n\nYou can request authorization of clinical record types and regular HealthKit types in the same method call; however, HealthKit presents the clinical record types in a separate permission sheet to ensure the user understands exactly what they’re approving.\n\nNote\n\nLike all HealthKit apps, apps that read clinical record data must have a valid Privacy Policy URL in the app store submission. This URL appears as a link on the clinical record permission sheet. Make sure the URL works as expected, and is both accessible and legible on supported iOS devices.\n\nApp Review may reject apps that don’t use clinical record data appropriately. For more information, see the Health and Health Research section of the App Store Review Guidelines.\n\nQuery for Health Records\n\nYou can use HealthKit’s regular queries to look up clinical records.\n\n// Get all the allergy records.\nguard let allergyType = HKObjectType.clinicalType(forIdentifier: .allergyRecord) else {\n    fatalError(\"*** Unable to create the allergy type ***\")\n}\n\n\nlet allergyQuery = HKSampleQuery(sampleType: allergyType, predicate: nil, limit: HKObjectQueryNoLimit, sortDescriptors: nil) { (query, samples, error) in\n    \n    guard let actualSamples = samples else {\n        // Handle the error here.\n        print(\"*** An error occurred: \\(error?.localizedDescription ?? \"nil\") ***\")\n        return\n    }\n    \n    let allergySamples = actualSamples as? [HKClinicalRecord]\n    // Do something with the allergy samples here...\n}\n\n\nstore.execute(allergyQuery)\n\n\nEach query returns a single clinical record type. HealthKit also provides two predicates to further refine your queries:\n\npredicateForClinicalRecords(from:fhirResourceType:identifier:)\n\nSearch for a particular FHIR record. Note that the system only guarantees that the FHIR identifier is unique for a particular resource type from a given source. To identify a record uniquely, you must check the identifier, type, and source.\n\npredicateForClinicalRecords(withFHIRResourceType:)\n\nSearch for a specific FHIR resource type. In most cases, there’s a one-to-one correspondence between the clinical record types and the FHIR resource types; therefore, most queries already return samples from a single FHIR resource type. However, queries for the medicationRecord type can return records from the medicationOrder, medicationRequest, medicationDispense, and medicationStatement FHIR resource types. You can use this predicate to limit your query to one of these FHIR types.\n\nExamine FHIR Data\n\nOnce you have an HKClinicalRecord sample, you can access the FHIR data through its fhirResource property. The HKFHIRResource object represents the underlying data from the user’s health care institution. While the resource object provides properties to access a few, useful attributes (identifier, resourceType, and sourceURL), use the data property to access the underlying JSON, which contains the complete clinical data.\n\nguard let fhirRecord = clinicalRecord.fhirResource else {\n    print(\"No FHIR record found!\")\n    return\n}\n\n\ndo {\n    let jsonDictionary = try JSONSerialization.jsonObject(with: fhirRecord.data, options: [])\n    \n    // Do something with the JSON data here.\n}\ncatch let error {\n    print(\"*** An error occurred while parsing the FHIR data: \\(error.localizedDescription) ***\")\n    // Handle JSON parse errors here.\n}\n\n\nThe HKFHIRResource object’s resourceType property contains a HKFHIRResourceType value. While the HKFHIRResourceType enumeration is similar to the HKClinicalTypeIdentifier values, there isn’t a one-to-one relationship between them.\n\nFor example, HealthKit splits the observation type into the labResultRecord and vitalSignRecord identifiers. As a result, you must query for lab results and vital signs separately.\n\nSimilarly, a medicationRecord identifier matches medicationStatement, medicationOrder, medicationRequest, and medicationDispense types. Therefore—unless you use the predicateForClinicalRecords(withFHIRResourceType:) predicate—when you query for medication, you can get a mixture of statement, order, request, and dispense records.\n\nThe following sample shows JSON data for an FHIR Condition resource:\n\n{\n    \"asserter\": {\n        \"display\": \"Juan Chavez\",\n        \"reference\": \"Practitioner/20\"\n    },\n    \"category\": {\n        \"coding\": [\n            {\n                \"code\": \"diagnosis\",\n                \"system\": \"http://hl7.org/fhir/condition-category\"\n            }\n        ]\n    },\n    \"clinicalStatus\": \"active\",\n    \"code\": {\n        \"coding\": [\n            {\n                \"code\": \"367498001\",\n                \"display\": \"Seasonal allergic rhinitis\",\n                \"system\": \"http://snomed.info/sct\"\n            }\n        ],\n        \"text\": \"Seasonal Allergic Rhinitis\"\n    },\n    \"dateRecorded\": \"2012-01-02\",\n    \"id\": \"2\",\n    \"notes\": \"Worse when visiting family in NC during the spring\",\n    \"onsetDateTime\": \"1994-05-12\",\n    \"resourceType\": \"Condition\",\n    \"verificationStatus\": \"confirmed\"\n}\n\n\nJuan Chavez recorded this resource in 2012. It describes seasonal allergic rhinitis (SNOMED code 367498001), with an onset date of May 12, 1994.\n\nThe FHIR data contains a considerable amount of additional information; however, to access this data you need to understand the FHIR specification.\n\nFor more information, see the following websites:\n\nArgonaut Data Query Implementation Guide 1.0.0\n\nFHIR specification (DSTU2, 1.0.2)\n\nFHIR Foundation\n\nSee Also\nMedical records\nAccessing Sample Data in the Simulator\nSet up sample accounts to build and test your app.\nAccessing a User’s Clinical Records\nRequest authorization to query HealthKit for a user’s clinical records and display them in your app.\nAccessing Data from a SMART Health Card\nQuery for and validate a verifiable clinical record.\nclass HKClinicalRecord\nA sample that stores a clinical record.\nclass HKFHIRResource\nAn object containing Fast Healthcare Interoperability Resources (FHIR) data.\nclass HKVerifiableClinicalRecord\nA sample that represents the contents of a SMART Health Card or EU Digital COVID Certificate.\nclass HKVerifiableClinicalRecordSubject\nThe subject associated with a signed clinical record.\nclass HKCDADocumentSample\nA Clinical Document Architecture (CDA) sample that stores a single document.\nclass HKDocumentSample\nAn abstract class that represents a health document in the HealthKit store.\nstatic let CDA: HKDocumentTypeIdentifier\nThe CDA Document type identifier, used when requesting permission to read or share CDA documents.\nclass HKDocumentType\nA sample type used to create queries for documents."
  },
  {
    "title": "endDate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hksample/1615170-enddate",
    "html": "Discussion\n\nThe sample’s end date must be equal to or later than its start date.\n\nSome samples—for example, body temperature—represent a single point in time. For these samples, both the start and the end date are the same, because they both refer to the point in time when the sample was taken.\n\nOther samples—for example, step count—represent data over a time interval. Here, the sample should use different start and end dates. These dates mark the beginning and end of the sample’s time interval, respectively.\n\nSee Also\nAccessing the Sample’s Data\nvar startDate: Date\nThe sample’s start date.\nvar hasUndeterminedDuration: Bool\nIndicates whether the sample has an unknown duration.\nvar sampleType: HKSampleType\nThe sample type."
  },
  {
    "title": "Accessing Sample Data in the Simulator | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/samples/accessing_sample_data_in_the_simulator",
    "html": "Overview\n\nYou cannot create your own HKClinicalRecord samples. When you need sample data to build or test your app, you must either download real data from a supported healthcare institution, or access existing sample data. Xcode provides three sample accounts in the simulator that you can use to build and test your app.\n\nThere are two steps to using the sample data:\n\nAdd a sample account to provide the initial data for building and testing your app.\n\nSimulate updates by adding additional accounts.\n\nAdd Sample Accounts\n\nTo access the sample accounts, open the Health app on the simulator, and navigate to Health Data > Health Records.\n\nThe Health Records view displays a message about adding accounts to healthcare institutions. Click Get Started. The system may ask to access your location, but you do not need to share that information in order to add the sample accounts. The system then shows the three sample accounts, and any supported healthcare institutions in your area if you shared your location.\n\nSelect the sample account you want to add, and the system displays the data available for that account. Select the data to add it to HealthKit.\n\nHealth then displays a confirmation showing that it has added the account to HealthKit. Click the Done button to continue, and the Health Records view shows the account that you added. You can add additional accounts, as needed.\n\nClick on the account to view the data. You can browse all the clinical records associated with the account. This data is also available to your app while it is running on the simulator.\n\nSimulate Updates\n\nWhen the user authorizes access to clinical records, they also select how the app handles new data: whether the app automatically receives the data or needs to ask for permission first. Your testing should cover both cases. For example, to test these cases manually, run your app in the simulator and enable permission to automatically receive updates. Then select Hardware > Erase All Contents and Settings, and run the app again. For this test, require your app to ask for permission to download updates.\n\nNote that the sample accounts only provide static data; all the data is received as soon as the account is added. However, you can simulate the arrival of new clinical records by adding additional accounts. From the app’s perspective, adding a new account is the same as new data coming in for an existing account. By adding a new account, you can ensure that your app properly handles incoming data.\n\nSee Also\nMedical records\nAccessing Health Records\nRead clinical record data from the HealthKit store.\nAccessing a User’s Clinical Records\nRequest authorization to query HealthKit for a user’s clinical records and display them in your app.\nAccessing Data from a SMART Health Card\nQuery for and validate a verifiable clinical record.\nclass HKClinicalRecord\nA sample that stores a clinical record.\nclass HKFHIRResource\nAn object containing Fast Healthcare Interoperability Resources (FHIR) data.\nclass HKVerifiableClinicalRecord\nA sample that represents the contents of a SMART Health Card or EU Digital COVID Certificate.\nclass HKVerifiableClinicalRecordSubject\nThe subject associated with a signed clinical record.\nclass HKCDADocumentSample\nA Clinical Document Architecture (CDA) sample that stores a single document.\nclass HKDocumentSample\nAn abstract class that represents a health document in the HealthKit store.\nstatic let CDA: HKDocumentTypeIdentifier\nThe CDA Document type identifier, used when requesting permission to read or share CDA documents.\nclass HKDocumentType\nA sample type used to create queries for documents."
  },
  {
    "title": "startDate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hksample/1615481-startdate",
    "html": "Discussion\n\nThe sample’s start date must be equal to or earlier than its end date.\n\nSome samples—for example, body temperature—represent a single point in time. For these samples, both the start and the end date are the same, because they both refer to the point in time when the sample was taken.\n\nOther samples—for example, step count—represent data over a time interval. Here, the sample should use different start and end dates. These dates mark the beginning and end of the sample’s time interval, respectively.\n\nSee Also\nAccessing the Sample’s Data\nvar endDate: Date\nThe sample’s end date.\nvar hasUndeterminedDuration: Bool\nIndicates whether the sample has an unknown duration.\nvar sampleType: HKSampleType\nThe sample type."
  },
  {
    "title": "HKAudiogramSensitivityPoint | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkaudiogramsensitivitypoint",
    "html": "Topics\nCreating Sensitivity Points\ninit(frequency: HKQuantity, leftEarSensitivity: HKQuantity?, rightEarSensitivity: HKQuantity?)\nCreates a new sensitivity point.\nAccessing Data\nvar frequency: HKQuantity\nThe frequency tested in the hearing test.\nvar leftEarSensitivity: HKQuantity?\nThe sensitivity of the left ear.\nvar rightEarSensitivity: HKQuantity?\nThe sensitivity of the right ear.\nRelationships\nInherits From\nNSObject\nSee Also\nAudiograms\nclass HKAudiogramSample\nA sample that stores an audiogram."
  },
  {
    "title": "HKAudiogramSample | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkaudiogramsample",
    "html": "Overview\n\nThis sample stores the results from a hearing test. The sample stores the audiogram data as an array of sensitivity points.\n\nTopics\nCreating Audiogram Samples\ninit(sensitivityPoints: [HKAudiogramSensitivityPoint], start: Date, end: Date, metadata: [String : Any]?)\nCreates a new audiogram sample.\nAccessing Sensitivity Point Data\nvar sensitivityPoints: [HKAudiogramSensitivityPoint]\nAn array of sensitivity point objects.\nRelationships\nInherits From\nHKSample\nSee Also\nAudiograms\nclass HKAudiogramSensitivityPoint\nA hearing sensitivity reading associated with a hearing test."
  },
  {
    "title": "HKHeartbeatSeriesSample | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkheartbeatseriessample",
    "html": "Overview\n\nUse a HKHeartbeatSeriesQuery to access the underlying heartbeat data.\n\nThe HKHeartbeatSeriesSample class is a subclass of the HKSeriesSample class. These samples are immutable; you set the sample’s properties when you build them, and they can’t change.\n\nExtend Heartbeat Samples\n\nLike many HealthKit classes, you shouldn’t subclass the HKHeartbeatSeriesSample class. You may extend this class by adding metadata with custom keys to save related data used by your app.\n\nFor more information, see addMetadata(_:completion:).\n\nTopics\nMetadata\nlet HKMetadataKeyAlgorithmVersion: String\nA key that indicates the version number of the algorithm used to calculate the sample’s value.\nRelationships\nInherits From\nHKSeriesSample\nSee Also\nSeries data\nclass HKQuantitySeriesSampleBuilder\nA builder object for incrementally building a sample that contains multiple quantities.\nclass HKHeartbeatSeriesBuilder\nA builder object for incrementally building a heartbeat series."
  },
  {
    "title": "HKQuantitySeriesSampleBuilder | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquantityseriessamplebuilder",
    "html": "Topics\nCreating a Quantity Series Builder\ninit(healthStore: HKHealthStore, quantityType: HKQuantityType, startDate: Date, device: HKDevice?)\nCreates a new quantity series builder.\nvar quantityType: HKQuantityType\nThe quantity type for the series.\nvar startDate: Date\nThe starting date and time for the sample.\nvar device: HKDevice?\nThe device providing the data.\nAdding Values\nfunc insert(HKQuantity, at: Date)\nAdds a new quantity to the series at the provided date and time.\nfunc insert(HKQuantity, for: DateInterval)\nAdds a new quantity to the series with the provided date interval.\nEnding the Collection\nfunc discard()\nDiscards all previously collected data and invalidates the builder.\nfunc finishSeries(metadata: [String : Any]?, completion: ([HKQuantitySample]?, Error?) -> Void)\nFinalizes the series and returns the resulting quantity samples.\nfunc finishSeries(metadata: [String : Any]?, endDate: Date?, completion: ([HKQuantitySample]?, Error?) -> Void)\nFinalizes the series with the provided end date, and returns the resulting quantity samples.\nRelationships\nInherits From\nNSObject\nSee Also\nSeries data\nclass HKHeartbeatSeriesBuilder\nA builder object for incrementally building a heartbeat series.\nclass HKHeartbeatSeriesSample\nA sample that represents a series of heartbeats."
  },
  {
    "title": "HKHeartbeatSeriesBuilder | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkheartbeatseriesbuilder",
    "html": "Topics\nCreating a Heartbeat Series Builder\ninit(healthStore: HKHealthStore, device: HKDevice?, start: Date)\nCreates a new heartbeat series builder.\nclass var maximumCount: Int\nThe maximum number of heartbeats you can add to the sample.\nAdding Data\nfunc addHeartbeatWithTimeInterval(sinceSeriesStartDate: TimeInterval, precededByGap: Bool, completion: (Bool, Error?) -> Void)\nAdds a heartbeat to the series.\nfunc addMetadata([String : Any], completion: (Bool, Error?) -> Void)\nAdds metadata to the sample.\nEnding the Collection\nfunc finishSeries(completion: (HKHeartbeatSeriesSample?, Error?) -> Void)\nFinalizes the series and returns the resulting heartbeat series sample.\nRelationships\nInherits From\nHKSeriesBuilder\nSee Also\nSeries data\nclass HKQuantitySeriesSampleBuilder\nA builder object for incrementally building a sample that contains multiple quantities.\nclass HKHeartbeatSeriesSample\nA sample that represents a series of heartbeats."
  },
  {
    "title": "HKWorkoutSession | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkoutsession",
    "html": "Overview\n\nThe session fine-tunes Apple Watch’s sensors for the specified activity. All workout sessions generate high-frequency heart rate samples; however, an outdoor cycling activity generates accurate location data, while an indoor cycling activity doesn’t.\n\nApple Watch runs one workout session at a time. If a second workout starts while your workout is running, your HKWorkoutSessionDelegate object receives an HKError.Code.errorAnotherWorkoutSessionStarted error, and your session ends.\n\nTopics\nCreating workout sessions\ninit(healthStore: HKHealthStore, configuration: HKWorkoutConfiguration)\nReturns a newly instantiated workout session with an associated workout builder.\nMonitoring the session\nvar delegate: HKWorkoutSessionDelegate?\nThe workout session’s delegate.\nprotocol HKWorkoutSessionDelegate\nThe session delegate protocol that defines an interface for receiving notifications about errors and changes in the workout session’s state.\nAccessing the workout builder\nfunc associatedWorkoutBuilder() -> HKLiveWorkoutBuilder\nReturns the live workout builder associated with the workout session.\nManaging the workout\nfunc prepare()\nPrepares the workout session.\nfunc startActivity(with: Date?)\nStarts the workout session activity, and sets the start date.\nfunc pause()\nPauses the workout session.\nfunc resume()\nResumes the workout session.\nfunc stopActivity(with: Date?)\nStops the workout session activity, and sets the end date.\nfunc end()\nEnds the workout session.\nWorking with remote workout sessions\nfunc startMirroringToCompanionDevice(completion: (Bool, Error?) -> Void)\nStarts mirroring the workout session to the companion iOS device.\nfunc stopMirroringToCompanionDevice(completion: (Bool, Error?) -> Void)\nStops mirroring the workout session to the companion iOS device.\nfunc sendToRemoteWorkoutSession(data: Data, completion: (Bool, Error?) -> Void)\nSends the provided data to the remote workout session.\nAccessing session data\nvar endDate: Date?\nThe ending time and date for this workout session.\nvar startDate: Date?\nThe starting time and date for this workout session.\nvar state: HKWorkoutSessionState\nThe workout session’s current state.\nvar type: HKWorkoutSessionType\nA value that indicates whether the session is a primary session or a mirrored session.\nvar workoutConfiguration: HKWorkoutConfiguration\nThe configuration object that describes this workout.\nManaging workout activities\nvar currentActivity: HKWorkoutActivity\nThe current workout activity.\nfunc beginNewActivity(configuration: HKWorkoutConfiguration, date: Date, metadata: [String : Any]?)\nBegins a new workout activity in the workout session.\nfunc endCurrentActivity(on: Date)\nEnds the current workout activity.\nDeprecated methods\ninit(activityType: HKWorkoutActivityType, locationType: HKWorkoutSessionLocationType)\nReturns a newly instantiated workout session.\nDeprecated\ninit(configuration: HKWorkoutConfiguration)\nReturns a newly instantiated workout session.\nDeprecated\nvar activityType: HKWorkoutActivityType\nThe workout activity performed during this session.\nvar locationType: HKWorkoutSessionLocationType\nA value that indicates whether the workout session occurred indoors or outdoors.\nRelationships\nInherits From\nNSObject\nConforms To\nNSSecureCoding\nSee Also\nSessions\nRunning workout sessions\nTrack a workout on Apple Watch.\nBuild a workout app for Apple Watch\nCreate your own workout app, quickly and easily, with HealthKit and SwiftUI.\nBuilding a multidevice workout app\nMirror a workout from a watchOS app to its companion iOS app, and perform bidirectional communication between them.\nclass HKWorkoutConfiguration\nAn object that contains configuration information about a workout session.\nenum HKWorkoutSessionState\nA workout session’s state.\nclass HKLiveWorkoutBuilder\nA builder object that constructs a workout incrementally based on live data from an active workout session.\nclass HKLiveWorkoutDataSource\nA data source that automatically provides live data from an active workout session."
  },
  {
    "title": "Units and quantities | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/samples/units_and_quantities",
    "html": "Topics\nUnits and quantities\nDefining and converting units and quantities\nCreate and convert units and quantities.\nclass HKQuantity\nAn object that stores a value for a given unit.\nclass HKUnit\nA class for managing the units of measure within HealthKit.\nenum HKMetricPrefix\nPrefixes that can be added to SI units to change the order of magnitude.\nSee Also\nBasic samples\nclass HKCumulativeQuantitySample\nA sample that represents a cumulative quantity.\nclass HKDiscreteQuantitySample\nA sample that represents a discrete quantity.\nclass HKQuantitySample\nA sample that represents a quantity, including the value and the units.\nclass HKCategorySample\nA sample with values from a short list of possible values.\nclass HKCorrelation\nA sample that groups multiple related samples into a single entry.\nMetadata Keys\nConstants used to add metadata to objects stored in HealthKit."
  },
  {
    "title": "Metadata Keys | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/samples/metadata_keys",
    "html": "Overview\n\nUse these keys to facilitate sharing data between apps. You can also create your own custom keys to give HealthKit objects additional app-specific data.\n\nTopics\nGeneral Keys\nlet HKMetadataKeyExternalUUID: String\nA unique identifier for an HKObject that is set by its source.\nlet HKMetadataKeyTimeZone: String\nThe user’s time zone when the HealthKit object was created.\nlet HKMetadataKeyWasUserEntered: String\nA key that indicates whether the sample was entered by the user.\nlet HKMetadataKeyQuantityClampedToLowerBound: String\nlet HKMetadataKeyQuantityClampedToUpperBound: String\nEstimate Keys\nlet HKMetadataKeyDateOfEarliestDataUsedForEstimate: String\nThe earliest date of data used to calculate the sample’s estimated value.\nlet HKMetadataKeySessionEstimate: String\nDevice Information Keys\nlet HKMetadataKeyDeviceSerialNumber: String\nThe key for the serial number of the device that generated the data.\nlet HKMetadataKeyUDIDeviceIdentifier: String\nThe device identifier portion of a device’s UDI (unique device identifier).\nlet HKMetadataKeyUDIProductionIdentifier: String\nThe production identifier portion of a device’s UDI (unique device identifier).\nlet HKMetadataKeyDigitalSignature: String\nA digital signature that can be used to validate the origin of the HealthKit object.\nlet HKMetadataKeyDeviceName: String\nThe name of the device that took this reading.\nlet HKMetadataKeyDeviceManufacturerName: String\nThe name of the manufacturer of the device that took this reading.\nlet HKMetadataKeyDevicePlacementSide: String\nThe key for metadata indicating the placement of the device that measured a sample.\nenum HKDevicePlacementSide\nValues that indicate the placement of the device that measured a sample.\nlet HKMetadataKeyAppleDeviceCalibrated: String\nThe key for metadata indicating whether the system had data from a sufficient amount of calibrated sensors when recording the sample.\nSync Keys\nlet HKMetadataKeySyncIdentifier: String\nA unique string that identifies a piece of data so it can be updated and synced.\nlet HKMetadataKeySyncVersion: String\nThe version number for a piece of data, used when updating or syncing.\nLab Keys\nlet HKMetadataKeyWasTakenInLab: String\nA key that indicates whether the sample was taken in a lab.\nlet HKMetadataKeyReferenceRangeLowerLimit: String\nA key that indicates the lower limit of the reference range for a lab result.\nlet HKMetadataKeyReferenceRangeUpperLimit: String\nA key that indicates the upper limit of the reference range for a lab result.\nWeather Keys\nlet HKMetadataKeyBarometricPressure: String\nThe metadata key for the barometric pressure associated with a sample.\nlet HKMetadataKeyWeatherCondition: String\nA key that represents the weather condition during the sample.\nlet HKMetadataKeyWeatherHumidity: String\nA key that represents the weather humidity during the sample.\nlet HKMetadataKeyWeatherTemperature: String\nA key that represents the weather temperature during the sample.\nWorkout Keys\nWorkout Metadata Keys\nConstants that can be used to add metadata to workouts.\nCardio Fitness Keys\nlet HKMetadataKeyVO2MaxValue: String\nThe maximum oxygen consumption rate during exercise of increasing intensity.\nlet HKMetadataKeyLowCardioFitnessEventThreshold: String\nThe VO2 max threshold used to categorize low-level cardio fitness events.\nMotion Keys\nlet HKMetadataKeyUserMotionContext: String\nThe person’s motion during the sample’s time period.\nNutrition Keys\nlet HKMetadataKeyFoodType: String\nThe type of food that the HealthKit object represents.\nVitals Sensors Keys\nlet HKMetadataKeyBodyTemperatureSensorLocation: String\nThe location where a specific body temperature reading was taken.\nlet HKMetadataKeyHeartRateSensorLocation: String\nThe location where a specific heart rate reading was taken.\nlet HKMetadataKeyHeartRateMotionContext: String\nThe user’s activity level when the heart rate sample was measured.\nlet HKPredicateKeyPathAverageHeartRate: String\nThe key path for the sample’s average heart rate.\nlet HKMetadataKeyHeartRateRecoveryActivityDuration: String\nlet HKMetadataKeyHeartRateRecoveryActivityType: String\nlet HKMetadataKeyHeartRateRecoveryMaxObservedRecoveryHeartRate: String\nlet HKMetadataKeyHeartRateRecoveryTestType: String\nThe type of test that the source used to calculate a person’s heart-rate recovery.\nlet HKMetadataKeyVO2MaxTestType: String\nThe method used to calculate the user’s VO2 max rate.\nAudio Event Keys\nlet HKMetadataKeyAudioExposureLevel: String\nThe audio level associated with an audio event.\nlet HKMetadataKeyAudioExposureDuration: String\nThe audio exposure event’s duration.\nlet HKMetadataKeyHeadphoneGain: String\nBlood Glucose Keys\nlet HKMetadataKeyBloodGlucoseMealTime: String\nA key that indicates the relative timing of a blood glucose reading to a meal.\nlet HKMetadataKeyInsulinDeliveryReason: String\nThe medical reason for administering insulin.\nReproductive Health Keys\nlet HKMetadataKeyMenstrualCycleStart: String\nA key that indicates whether the sample represents the start of a menstrual cycle. This metadata key is required for menstrualFlow category samples.\nlet HKMetadataKeySexualActivityProtectionUsed: String\nA key that indicates whether protection was used during sexual activity. This metadata key can be used with sexualActivity category samples.\nAlgorithm Keys\nlet HKMetadataKeyAlgorithmVersion: String\nA key that indicates the version number of the algorithm used to calculate the sample’s value.\nlet HKMetadataKeyAppleECGAlgorithmVersion: String\nA key for metadata indicating the version number of the algorithm Apple Watch uses to generate an ECG reading.\nenum HKAppleECGAlgorithmVersion\nVersion numbers for the algorithm Apple Watch uses to generate an ECG reading.\nlet HKPredicateKeyPathECGClassification: String\nThe key path for the sample’s classification.\nlet HKPredicateKeyPathECGSymptomsStatus: String\nThe key path for the sample’s symptom status.\nSee Also\nBasic samples\nclass HKCumulativeQuantitySample\nA sample that represents a cumulative quantity.\nclass HKDiscreteQuantitySample\nA sample that represents a discrete quantity.\nclass HKQuantitySample\nA sample that represents a quantity, including the value and the units.\nclass HKCategorySample\nA sample with values from a short list of possible values.\nclass HKCorrelation\nA sample that groups multiple related samples into a single entry.\nUnits and quantities\nObjects used to specify a quantity for a given unit, and to convert between units."
  },
  {
    "title": "Running workout sessions | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/workouts_and_activity_rings/running_workout_sessions#3384926",
    "html": "Overview\n\nUse workout sessions to track a user’s activity on Apple Watch. While the session runs, the system fine-tunes the watch’s sensors for the specified activity. For example, all workout sessions generate high-frequency heart rate samples; however, an outdoor cycling activity generates accurate location data, while an indoor cycling activity doesn’t.\n\nTo track workouts on Apple Watch, you must set up, start, and save a workout session. Make starting and stopping workouts on Apple Watch as easy and obvious as possible. The app must clearly indicate when a workout session is in progress, and either automatically save workout data for the user, or provide a clear option to explicitly save or discard workout data. Finally, the watchOS app should provide clear feedback when a workout is successfully saved. For more information, see Health and Fitness in watchOS Human Interface Guidelines.\n\nSet up the app\n\nBefore creating a workout session, you must set up HealthKit and request permission to read and share any health data your app intends to use. For step-by-step instructions, see Setting up HealthKit.\n\nFor workout sessions, you must request permission to share workout types. You may also want to read any data types automatically recorded by Apple Watch as part of the session.\n\n// The quantity type to write to the health store.\nlet typesToShare: Set = [\n    HKQuantityType.workoutType()\n]\n\n\n// The quantity types to read from the health store.\nlet typesToRead: Set = [\n    HKQuantityType.quantityType(forIdentifier: .heartRate)!,\n    HKQuantityType.quantityType(forIdentifier: .activeEnergyBurned)!,\n    HKQuantityType.quantityType(forIdentifier: .distanceWalkingRunning)!\n]\n\n\n// Request authorization for those quantity types.\nhealthStore.requestAuthorization(toShare: typesToShare, read: typesToRead) { (success, error) in\n    // Handle errors here.\n}\n\n\nNote\n\nIn watchOS 6 and later, users can authorize reading and sharing data on Apple Watch. As a result, you must add usage descriptions to your WatchKit App Extension. Use the NSHealthShareUsageDescription key to describe why your app needs to read the requested data. Use NSHealthUpdateUsageDescription for the data your app intends to write. For projects created using Xcode 13 or later, set these keys in the Target Properties list on the app’s Info tab. For projects created with Xcode 12 or earlier, set these keys in the apps Info.plist file. For more information, see Information Property List.\n\nApps with an active workout session can run in the background, so you need to add the background modes capability to your WatchKit App Extension.\n\nWorkout sessions require the Workout processing background mode. If your app plays audio or provides haptic feedback during the workout session, you must also add the Audio background mode.\n\nUse the AVAudioPlayer class to play short audio clips. To play long form audio in the background, see Playing Background Audio.\n\nNote\n\nWorkout apps can use the AVFoundation framework to play short audio clips in the background, such as coaching or notifications. In order to play an audio clip, an active workout session must be running; any attempt to play background audio outside a workout session are invalid.\n\nStart a session\n\nTo start a workout session, begin by creating a configuration object for the workout.\n\nlet configuration = HKWorkoutConfiguration()\nconfiguration.activityType = .running\nconfiguration.locationType = .outdoor\n\n\nUse the configuration to set the type of activity and the location for the workout. Apple Watch optimizes both the sensors and the calorimetry based on the configuration.\n\nFor example, while the session runs, Apple Watch automatically saves active energy-burned samples to the HealthKit store. HealthKit provides optimized calorie calculations for run, walk, cycle, stair-climbing, elliptical, and rowing activities. Furthermore, the calculations for run, walk, and cycle activities differ between indoor and outdoor locations. For all other activities, the system estimates calories based on the data from Apple Watch’s sensors. This rate is never lower than the brisk walk burn rate.\n\nNext, use the configuration to create your workout session and get a reference to the session’s HKLiveWorkoutBuilder object.\n\ndo {\n    session = try HKWorkoutSession(healthStore: healthStore, configuration: configuration)\n    builder = session.associatedWorkoutBuilder()\n} catch {\n    // Handle failure here.\n    return\n}\n\n\nThe HKWorkoutSession class’s initializer can throw an exception if the configuration is invalid, so you need to wrap the initializer in a do-catch block.\n\nThen, create an HKLiveWorkoutDataSource object and assign it to the workout builder.\n\nbuilder.dataSource = HKLiveWorkoutDataSource(healthStore: healthStore,\n                                             workoutConfiguration: configuration)\n\n\nUse the same configuration object for the workout session and the live data source. While the session runs, Apple Watch automatically collects data about the workout, and saves samples to the HealthKit store. For example, an outdoor running session collects and saves activeEnergyBurned, basalEnergyBurned, heartRate, and distanceWalkingRunning samples.\n\nYou can assign delegates to monitor both the workout session and the workout builder.\n\nsession.delegate = self\nbuilder.delegate = self\n\n\nYour HKWorkoutSessionDelegate receives updates whenever the session’s state changes, an event occurs, or the session fails due to an error. Your HKLiveWorkoutBuilderDelegate receives updates when either Apple Watch or your app adds a new sample or event to the builder.\n\nBy default, the workout session automatically forwards all events to the builder, so both delegates should receive the same set of events. However, you can set the builder’s shouldCollectWorkoutEvents property to false if you want to control the events set to the builder.\n\nFinally, start the session and the builder.\n\nsession.startActivity(with: Date())\nbuilder.beginCollection(withStart: Date()) { (success, error) in\n    \n    guard success else {\n        // Handle errors.\n    }\n    \n    // Indicate that the session has started.\n}\n\n\nYour app’s user interface should clearly indicate that a workout session is running. Use data passed to your HKLiveWorkoutBuilderDelegate to update information about the session.\n\nHandle samples and events\n\nWhile the session runs, Apple Watch automatically collects and adds samples and events based on the workout configuration. You can record additional information by adding your own events and samples to the workout. To add samples, call the builder’s add(_:completion:) method. To add events, call the addWorkoutEvents(_:completion:) method.\n\nTypically, you should update your app’s user interface whenever the builder receives a new sample or event. To respond to new samples, implement your HKLiveWorkoutBuilderDelegate delegate’s workoutBuilder(_:didCollectDataOf:) method.\n\nfunc workoutBuilder(_ workoutBuilder: HKLiveWorkoutBuilder, didCollectDataOf collectedTypes: Set<HKSampleType>) {\n    for type in collectedTypes {\n        guard let quantityType = type as? HKQuantityType else {\n            return // Nothing to do.\n        }\n        \n        // Calculate statistics for the type.\n        let statistics = workoutBuilder.statistics(for: quantityType)\n        let label = labelForQuantityType(quantityType)\n        \n        DispatchQueue.main.async() {\n            // Update the user interface.\n        }   \n    }\n}\n\n\nHealthKit calls this method whenever the builder receives a new sample. Your implementation should examine the samples and update your app’s user interface—for example, by updating the current distance traveled, calories burned, and pace during a run. Use the workout builder’s statistics(for:) method to calculate statistics, such as the total, average, minimum, or maximum, for any types that have new data.\n\nTo respond to new events, implement your HKLiveWorkoutBuilderDelegate delegate’s workoutBuilderDidCollectEvent(_:) method.\n\nfunc workoutBuilderDidCollectEvent(_ workoutBuilder: HKLiveWorkoutBuilder) {\n    \n    let lastEvent = workoutBuilder.workoutEvents.last\n    \n    DispatchQueue.main.async() {\n        // Update the user interface here.\n    }    \n}\n\n\nHealthKit calls this method whenever the builder receives a new event. Use the builder’s workoutEvents property to examine the last event, and update your user interface as needed. For example, when a HKWorkoutEventType.lap event occurs, you can increment the number of laps shown.\n\nRun in the background\n\nWhen your app has an active workout session, it continues to run in the background. Background execution grants your app the following abilities:\n\nYour app continues to run throughout the entire workout session, even when the user lowers their wrist or interacts with a different app. When the user raises their wrist, your app reappears, letting the user quickly check their current progress and performance.\n\nIf the user navigates back to the watch face, Apple Watch displays a small icon at the top of the screen, indicating that a workout session is running. Users can tap the icon to navigate back to your app.\n\nYour app continues to receive data from HealthKit and Apple Watch’s sensors in the background. Use this data to keep your app up to date at all times. For example, your app could display the user’s current heart rate, the distance that the user has cycled, and any other relevant statistics whenever the user raises their wrist.\n\nYour app can alert the user using audio or haptic feedback while running in the background.\n\nTo maintain high performance on Apple Watch, you must limit the amount of work your app performs in the background. If your app uses an excessive amount of CPU while in the background, watchOS may suspend it. Use Xcode’s CPU report tool or the time profiler in Instruments to test your app’s CPU usage. The system also generates a log with a backtrace whenever it terminates your app.\n\nCoordinate with the companion app\n\nIf the watchOS app has an iOS companion, be sure to keep both apps in sync. This is particularly important if the user can start workouts on either device.\n\nIf the user starts the workout in your watchOS app, and then tries to end it in the iOS companion, the iOS app should instruct the user to end the workout in your watchOS app. Otherwise, Apple Watch workout continues to run, which can lead to accidentally saving invalid data to the HealthKit store.\n\nIf the user starts a workout in the iOS companion, and then opens your watchOS app, the watchOS app should automatically start a workout session for the workout in progress. If you save the workout in the watchOS app, you can incorporate data from the iOS workout. For example, you should set the workout’s startDate to the iOS workout’s start. Also, if your app calculates its own calories, you can retroactively give credit for the calories burned before the workout session began.\n\nIf the user doesn’t start and stop a workout session in your watchOS app, don’t try to retroactively create a workout session on Apple Watch.\n\nEnd a session\n\nAfter the user finishes the workout, end the session and call the builder’s endCollection(withEnd:completion:) and finishWorkout(completion:) methods.\n\nsession.end()\nbuilder.endCollection(withEnd: Date()) { (success, error) in\n    \n    guard success else {\n        // Handle errors.\n    }\n    \n    builder.finishWorkout { (workout, error) in\n        \n        guard workout != nil else {\n            // Handle errors.\n        }\n        \n        DispatchQueue.main.async() {\n            // Update the user interface.\n        }\n    }\n}\n\n\nThe endCollection(withEnd:completion:) method sets the workout’s end date and deactivates the builder. The finishWorkout(completion:) method saves the workout and its associated data to the HealthKit store.\n\nRecover from crashes\n\nIf your app crashes during a workout session, the system calls your extension delegate’s handleActiveWorkoutRecovery() method when the app relaunches. In your implementation of this method, call the HealthKit store’s recoverActiveWorkoutSession(completion:) method. HealthKit attempts to restore the previous workout session, returning either a new session object or an error to the completion block.\n\nAs soon as you receive the session object, you must access its builder and set up your data source and delegates again.\n\nSee Also\nSessions\nBuild a workout app for Apple Watch\nCreate your own workout app, quickly and easily, with HealthKit and SwiftUI.\nBuilding a multidevice workout app\nMirror a workout from a watchOS app to its companion iOS app, and perform bidirectional communication between them.\nclass HKWorkoutSession\nA session that tracks the user’s workout on Apple Watch.\nclass HKWorkoutConfiguration\nAn object that contains configuration information about a workout session.\nenum HKWorkoutSessionState\nA workout session’s state.\nclass HKLiveWorkoutBuilder\nA builder object that constructs a workout incrementally based on live data from an active workout session.\nclass HKLiveWorkoutDataSource\nA data source that automatically provides live data from an active workout session."
  },
  {
    "title": "sleepAnalysis | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkcategorytypeidentifier/1615425-sleepanalysis",
    "html": "Discussion\n\nThese samples use values from the HKCategoryValueSleepAnalysis enum.\n\nFor best results when analyzing sleep samples, it's recommended that you use HKMetadataKeyTimeZone to store time zone metadata with your sleep sample data.\n\nSee Also\nMindfulness and Sleep\nstatic let mindfulSession: HKCategoryTypeIdentifier\nA category sample type for recording a mindful session."
  },
  {
    "title": "HKCategoryValueSleepAnalysis | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkcategoryvaluesleepanalysis",
    "html": "Overview\n\nThese values provide the set of valid categories for sleep tracking in HealthKit. To record a sleep sample, create an HKCategorySample using a sleepAnalysis identifier and a HKCategoryValueSleepAnalysis value.\n\nlet sleepSampleType = HKCategoryType(.sleepAnalysis)\nlet sleepCategory = HKCategoryValueSleepAnalysis.asleepDeep.rawValue\nlet deepSleepSample  = HKCategorySample(type: sleepSampleType,\n                                        value:sleepCategory,\n                                        start: startDate,\n                                        end: endDate)\n\n\nEach sleep analysis sample can have only one value. To track both the amount of time a person spends in bed and the quality and quantity of their sleep, use samples with overlapping times.\n\nOne set of samples tracks the amount of time the user spent in bed. Then, you can partition the in-bed time into a more-detailed set of samples. These detailed samples show when the user was awake, in core sleep, in deep sleep, or in rapid eye movement (REM) sleep. The detailed samples overlap the in-bed sample, but they don’t overlap each other.\n\nNote\n\nSamples recorded by Apple Watch only include awake samples that occur between two sleep samples. When reading sleep samples from HealthKit, there might not be any detailed samples that correspond to the beginning or ending of an in-bed sample.\n\nBy comparing the start and end times of these samples, apps can calculate secondary statistics. For example: the amount of time it took for the user to fall asleep, the percentage of sleep time spent in deep sleep, the number of times the user woke while in bed, and the total amount of time spent both in bed and asleep.\n\nTopics\nValues for Tracking Time In-Bed\ncase inBed\nThe user is in bed.\nValues for Tracking Sleep States\ncase awake\nThe user is awake.\ncase asleepCore\nThe user is in light or intermediate sleep.\ncase asleepDeep\nThe user is in deep sleep.\ncase asleepREM\nThe user is in REM sleep.\ncase asleepUnspecified\nThe user is asleep, but the specific stage isn’t known.\nstatic var allAsleepValues: Set<HKCategoryValueSleepAnalysis>\nA set of values that represents the possible stages of sleep.\nDeprecated values\nstatic var asleep: HKCategoryValueSleepAnalysis\nThe user is sleeping.\nDeprecated\nRelationships\nConforms To\nHKCategoryValuePredicateProviding\nSendable\nSee Also\nAssigning Values\nenum HKCategoryValue\nCategories that are undefined.\nenum HKCategoryValueCervicalMucusQuality\nCategories that represent the user’s cervical mucus quality.\nenum HKCategoryValueMenstrualFlow\nCategories that indicate the amount of menstrual flow for a given sample.\nenum HKCategoryValueOvulationTestResult\nCategories that represent the result of an ovulation home test.\nenum HKCategoryValueContraceptive\nThe type of contraceptive.\nenum HKCategoryValueAppetiteChanges\nCategories that represent change in appetite.\nenum HKCategoryValuePresence\nCategories that indicate whether a symptom is present.\nenum HKCategoryValueSeverity\nCategories that represent the severity of a symptom.\nenum HKCategoryValueEnvironmentalAudioExposureEvent\nExposure events for environmental audio.\nenum HKCategoryValueHeadphoneAudioExposureEvent\nExposure events for headphone audio.\nenum HKCategoryValueLowCardioFitnessEvent\nA value that indicates a low-level cardio fitness event.\nenum HKAppleWalkingSteadinessClassification\nA classification of a score based on the steadiness of the user’s gait.\nenum HKCategoryValueAppleWalkingSteadinessEvent\nThe value of an event triggered by a reduced score for the steadiness of the user’s gait.\nenum HKCategoryValuePregnancyTestResult\nCategory values that indicate the results of a home pregnancy test.\nenum HKCategoryValueProgesteroneTestResult\nA category value that indicates the result from a home progesterone test.\nenum HKCategoryValueAudioExposureEvent\nCategories that indicate audio exposure events."
  },
  {
    "title": "HKCumulativeQuantitySample | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkcumulativequantitysample",
    "html": "Overview\n\nA quantity sample contains one or more HKQuantity objects. Each quantity represents a single piece of data with a single numeric value and the value’s associated units. Use these samples to store data that accumulates over time, such as step count, active energy burned, or walking distance.\n\nThe HKCumulativeQuantitySample class is a concrete subclass of the HKQuantitySample class. Cumulative quantity samples are immutable; you set the sample’s properties when you create it, and they cannot change.\n\nExtend Cumulative Quantity Samples\n\nLike many HealthKit classes, you should not subclass the HKCumulativeQuantitySample class. You may extend this class by adding metadata with custom keys to save related data used by your app.\n\nFor more information, see init(type:quantity:start:end:metadata:).\n\nTopics\nAccessing Calculated Data\nvar sumQuantity: HKQuantity\nThe sum of all the quantities contained by the sample.\nRelationships\nInherits From\nHKQuantitySample\nSee Also\nBasic samples\nclass HKDiscreteQuantitySample\nA sample that represents a discrete quantity.\nclass HKQuantitySample\nA sample that represents a quantity, including the value and the units.\nclass HKCategorySample\nA sample with values from a short list of possible values.\nclass HKCorrelation\nA sample that groups multiple related samples into a single entry.\nUnits and quantities\nObjects used to specify a quantity for a given unit, and to convert between units.\nMetadata Keys\nConstants used to add metadata to objects stored in HealthKit."
  },
  {
    "title": "Reading and Writing HealthKit Series Data | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/samples/reading_and_writing_healthkit_series_data",
    "html": "Overview\n\nNote\n\nThis sample code project is associated with WWDC 2019 session 218: Exploring New Data Representations in HealthKit.\n\nSee Also\nEssentials\nSaving data to HealthKit\nCreate and share HealthKit samples."
  },
  {
    "title": "HKObserverQueryCompletionHandler | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkobserverquerycompletionhandler",
    "html": "Discussion\n\nThis completion handler defines a block that can be called when responding to background deliveries. If your app registers for background deliveries, HealthKit wakes your app when new data has been saved to the HealthKit store. You can specify a maximum frequency for background deliveries. HealthKit wakes your app only once during each time period that is defined by the frequency.\n\nWhen HealthKit wakes your app, it calls the update handler on any observer queries that match the new data. This block is passed to the update handler. You must call this block as soon as you are done processing the incoming data. Calling this block tells HealthKit that you have successfully received the background data. If you do not call this block, HealthKit continues to attempt to launch your app using a back off algorithm. If your app fails to respond three times, HealthKit assumes that your app cannot receive data, and stops sending you background updates.\n\nSee Also\nCreating Observer Queries\nExecuting Observer Queries\nCreate and run observer queries.\ninit(sampleType: HKSampleType, predicate: NSPredicate?, updateHandler: (HKObserverQuery, HKObserverQueryCompletionHandler, Error?) -> Void)\nInstantiates and returns a query that monitors the HealthKit store and responds to changes.\ninit(queryDescriptors: [HKQueryDescriptor], updateHandler: (HKObserverQuery, Set<HKSampleType>?, HKObserverQueryCompletionHandler, Error?) -> Void)\nCreates a query that monitors the HealthKit store and responds to any changes matching any of the query descriptors you provided.\nRelated Documentation\nfunc enableBackgroundDelivery(for: HKObjectType, frequency: HKUpdateFrequency, withCompletion: (Bool, Error?) -> Void)\nEnables the delivery of updates to an app running in the background."
  },
  {
    "title": "getRequestStatusForAuthorization(toShare:read:completion:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkhealthstore/2994346-getrequeststatusforauthorization",
    "html": "Discussion\n\nConcurrency Note\n\nYou can call this method from synchronous code using a completion handler, as shown on this page, or you can call it as an asynchronous method that has the following declaration:\n\nfunc statusForAuthorizationRequest(toShare typesToShare: Set<HKSampleType>, read typesToRead: Set<HKObjectType>) async throws -> HKAuthorizationRequestStatus\n\n\nFor information about concurrency and asynchronous code in Swift, see Calling Objective-C APIs Asynchronously.\n\nWhen working with clinical types, users may need to reauthorize access when new data is added.\n\nSee Also\nAccessing HealthKit\nfunc authorizationStatus(for: HKObjectType) -> HKAuthorizationStatus\nReturns the app’s authorization status for sharing the specified data type.\nenum HKAuthorizationStatus\nConstants indicating the authorization status for a particular data type.\nenum HKAuthorizationRequestStatus\nValues that indicate whether your app needs to request authorization from the user.\nclass func isHealthDataAvailable() -> Bool\nReturns a Boolean value that indicates whether HealthKit is available on this device.\nfunc supportsHealthRecords() -> Bool\nReturns a Boolean value that indicates whether the current device supports clinical records.\nfunc requestAuthorization(toShare: Set<HKSampleType>?, read: Set<HKObjectType>?, completion: (Bool, Error?) -> Void)\nRequests permission to save and read the specified data types.\nfunc requestAuthorization(toShare: Set<HKSampleType>, read: Set<HKObjectType>)\nAsynchronously requests permission to save and read the specified data types.\nfunc requestPerObjectReadAuthorization(for: HKObjectType, predicate: NSPredicate?, completion: (Bool, Error?) -> Void)\nAsynchronously requests permission to read a data type that requires per-object authorization (such as vision prescriptions).\nfunc handleAuthorizationForExtension(completion: (Bool, Error?) -> Void)\nRequests permission to save and read the data types specified by an extension.\nvar authorizationViewControllerPresenter: UIViewController?\nThe view controller that presents HealthKit authorization sheets."
  },
  {
    "title": "authorizationStatus(for:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkhealthstore/1614154-authorizationstatus",
    "html": "Parameters\ntype\n\nThe type of data. This can be any concrete subclass of the HKObjectType class (any of the HKCharacteristicType , HKQuantityType, HKCategoryType, HKWorkoutType or HKCorrelationType classes).\n\nReturn Value\n\nA value indicating the app’s authorization status for this type. For a list of possible values, see HKAuthorizationStatus.\n\nDiscussion\n\nThis method checks the authorization status for saving data.\n\nTo help prevent possible leaks of sensitive health information, your app cannot determine whether or not a user has granted permission to read data. If you are not given permission, it simply appears as if there is no data of the requested type in the HealthKit store. If your app is given share permission but not read permission, you see only the data that your app has written to the store. Data from other sources remains hidden.\n\nSee Also\nAccessing HealthKit\nenum HKAuthorizationStatus\nConstants indicating the authorization status for a particular data type.\nfunc getRequestStatusForAuthorization(toShare: Set<HKSampleType>, read: Set<HKObjectType>, completion: (HKAuthorizationRequestStatus, Error?) -> Void)\nIndicates whether the system presents the user with a permission sheet if your app requests authorization for the provided types.\nenum HKAuthorizationRequestStatus\nValues that indicate whether your app needs to request authorization from the user.\nclass func isHealthDataAvailable() -> Bool\nReturns a Boolean value that indicates whether HealthKit is available on this device.\nfunc supportsHealthRecords() -> Bool\nReturns a Boolean value that indicates whether the current device supports clinical records.\nfunc requestAuthorization(toShare: Set<HKSampleType>?, read: Set<HKObjectType>?, completion: (Bool, Error?) -> Void)\nRequests permission to save and read the specified data types.\nfunc requestAuthorization(toShare: Set<HKSampleType>, read: Set<HKObjectType>)\nAsynchronously requests permission to save and read the specified data types.\nfunc requestPerObjectReadAuthorization(for: HKObjectType, predicate: NSPredicate?, completion: (Bool, Error?) -> Void)\nAsynchronously requests permission to read a data type that requires per-object authorization (such as vision prescriptions).\nfunc handleAuthorizationForExtension(completion: (Bool, Error?) -> Void)\nRequests permission to save and read the data types specified by an extension.\nvar authorizationViewControllerPresenter: UIViewController?\nThe view controller that presents HealthKit authorization sheets."
  },
  {
    "title": "HKVerifiableClinicalRecordSourceType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkverifiableclinicalrecordsourcetype",
    "html": "Topics\nIdentifying Source Types\nstatic let euDigitalCOVIDCertificate: HKVerifiableClinicalRecordSourceType\nA value indicating EU Digital COVID Certificates.\nstatic let smartHealthCard: HKVerifiableClinicalRecordSourceType\nA value indicating SMART health cards.\nCreating Source Types\ninit(rawValue: String)\nCreates a source type based on the provided string.\nRelationships\nConforms To\nHashable\nRawRepresentable\nSendable\nSee Also\nClinical record queries\nstruct HKVerifiableClinicalRecordQueryDescriptor\nA query interface that provides one-time access to a SMART Health Card or EU Digital COVID Certificate using Swift concurrency.\nclass HKVerifiableClinicalRecordQuery\nA query for one-time access to a SMART Health Card or EU Digital COVID Certificate.\nstruct HKVerifiableClinicalRecordCredentialType\nThe type of record returned by a verifiable clinical record query.\nclass HKDocumentQuery\nA query that returns a snapshot of all matching documents currently saved in the HealthKit store."
  },
  {
    "title": "HKDocumentQuery | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkdocumentquery",
    "html": "Overview\n\nUse an HKDocumentQuery object to search for documents in the HealthKit store. You can provide a predicate to filter the search results, a sort order for the returned samples, or even a limit to the number of samples returned.\n\nDocument queries are immutable: The query’s properties are set when the query is first created. They cannot change.\n\nExecuting Queries\n\nTo create and execute a query, perform the following steps:\n\nCreate the document type by calling the HKObjectType class’s documentType(forIdentifier:) method.\n\n(optionally) Create an NSPredicate object to filter the search results.\n\n(optionally) Create an array of NSSortDescriptor objects to provide the sort order for the results.\n\nInstantiate a new query by calling the init(documentType:predicate:limit:sortDescriptors:includeDocumentData:resultsHandler:) method.\n\nIn the results handler, handle any errors and process the results.\n\nNote, the query returns the results in batches and may call the results handler more than once. If the done parameter is set to false, the query is still active and will call the results handler with additional results. If the done parameter is set to true, the query is complete.\n\nguard let cdaType = HKObjectType.documentType(forIdentifier: .CDA) else {\n    fatalError(\"Unable to create a CDA document type.\")\n}\n \nvar allDocuments = [HKDocumentSample]()\nlet cdaQuery = HKDocumentQuery(documentType: cdaType,\n                               predicate: nil,\n                               limit: HKObjectQueryNoLimit,\n                               sortDescriptors: nil,\n                               includeDocumentData: false) {\n                                \n                                (query, resultsOrNil, done, errorOrNil) in\n                                \n                                guard let results = resultsOrNil else {\n                                    if let queryError = errorOrNil {\n                                        // Handle the query error here...\n                                    }\n                                    \n                                    return\n                                }\n                                \n                                allDocuments += results\n                                \n                                if done {\n                                    // the allDocuments array now contains all the samples returned by the query.\n                                    // Handle the documents here...\n                                }\n}\n\nSubclassing Document Queries\n\nLike many HealthKit classes, the HKDocumentQuery class should not be subclassed.\n\nTopics\nCreating Document Queries\ninit(documentType: HKDocumentType, predicate: NSPredicate?, limit: Int, sortDescriptors: [NSSortDescriptor]?, includeDocumentData: Bool, resultsHandler: (HKDocumentQuery, [HKDocumentSample]?, Bool, Error?) -> Void)\nInstantiates and returns a document query.\nlet HKObjectQueryNoLimit: Int\nA value indicating that the query returns all the matching samples in the HealthKit store.\nAccessing the Document Query’s Properties\nvar includeDocumentData: Bool\nA Boolean value that indicates whether the sample includes the full document’s data.\nvar limit: Int\nThe maximum number of documents the receiver will return upon completion.\nvar sortDescriptors: [NSSortDescriptor]?\nAn array of sort descriptors that specify the order of the results returned by this query.\nRelationships\nInherits From\nHKQuery\nSee Also\nClinical record queries\nstruct HKVerifiableClinicalRecordQueryDescriptor\nA query interface that provides one-time access to a SMART Health Card or EU Digital COVID Certificate using Swift concurrency.\nclass HKVerifiableClinicalRecordQuery\nA query for one-time access to a SMART Health Card or EU Digital COVID Certificate.\nstruct HKVerifiableClinicalRecordSourceType\nThe source type for the verifiable clinical record.\nstruct HKVerifiableClinicalRecordCredentialType\nThe type of record returned by a verifiable clinical record query."
  },
  {
    "title": "HKVerifiableClinicalRecordCredentialType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkverifiableclinicalrecordcredentialtype",
    "html": "Topics\nIdentifying Record Types\nstatic let covid19: HKVerifiableClinicalRecordCredentialType\nA value that represents records about COVID-19.\nstatic let immunization: HKVerifiableClinicalRecordCredentialType\nA value that represents immunizations.\nstatic let laboratory: HKVerifiableClinicalRecordCredentialType\nA value that represents laboratory results.\nstatic let recovery: HKVerifiableClinicalRecordCredentialType\nA value that represents recovery information.\nCreating Record Types\ninit(rawValue: String)\nCreates a record type based on the provided string.\nRelationships\nConforms To\nHashable\nRawRepresentable\nSendable\nSee Also\nClinical record queries\nstruct HKVerifiableClinicalRecordQueryDescriptor\nA query interface that provides one-time access to a SMART Health Card or EU Digital COVID Certificate using Swift concurrency.\nclass HKVerifiableClinicalRecordQuery\nA query for one-time access to a SMART Health Card or EU Digital COVID Certificate.\nstruct HKVerifiableClinicalRecordSourceType\nThe source type for the verifiable clinical record.\nclass HKDocumentQuery\nA query that returns a snapshot of all matching documents currently saved in the HealthKit store."
  },
  {
    "title": "HKActivitySummaryType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkactivitysummarytype",
    "html": "Overview\n\nUse the activity summary type to request permission to read HKActivitySummary objects from the HealthKit store. To create an activity summary type, use the HKObjectType class’s activitySummaryType() convenience method.\n\nNote\n\nAlthough you can request permission to read HKActivitySummary objects, you can’t request permission to share them. For more information, see requestAuthorization(toShare:read:completion:).\n\nThe HKActivitySummaryType class is a concrete subclass of the HKObjectType class. Like many HealthKit classes, activity summary types aren’t extensible and you shouldn’t subclass them.\n\nAccess and Modify Activity Summaries\n\nAny workouts that you save to the HealthKit store may affect that day’s summary. For more information, see Using Workout Samples.\n\nTo query for activity summary objects, use an HKActivitySummaryQuery. You can also create your own HKActivitySummary objects (for example, to display in an HKActivityRingView), but you can’t save them to the HealthKit store.\n\nRelationships\nInherits From\nHKObjectType\nConforms To\nSendable\nSee Also\nObject type subclasses\nclass HKCharacteristicType\nA type that represents data that doesn’t typically change over time.\nclass HKQuantityType\nA type that identifies samples that store numerical values.\nclass HKCategoryType\nA type that identifies samples that contain a value from a small set of possible values.\nclass HKCorrelationType\nA type that identifies samples that group multiple subsamples.\nclass HKAudiogramSampleType\nA type that identifies samples that contain audiogram data.\nclass HKElectrocardiogramType\nA type that identifies samples containing electrocardiogram data.\nclass HKSeriesType\nA type that indicates the data stored in a series sample.\nclass HKClinicalType\nA type that identifies samples that contain clinical record data.\nclass HKWorkoutType\nA type that identifies samples that store information about a workout.\nclass HKObjectType\nAn abstract superclass with subclasses that identify a specific type of data for the HealthKit store.\nclass HKSampleType\nAn abstract superclass for all classes that identify a specific type of sample when working with the HealthKit store.\nRelated Documentation\nclass HKActivitySummary\nAn object that contains the move, exercise, and stand data for a given day.\nclass HKActivitySummaryQuery\nA query for reading activity summary objects from the HealthKit store.\nclass HKActivityRingView\nA view that uses the Move, Exercise, and Stand activity rings to display data from a HealthKit activity summary object."
  },
  {
    "title": "HKStatisticsCollectionQueryDescriptor | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkstatisticscollectionquerydescriptor",
    "html": "Overview\n\nUse HKStatisticsCollectionQueryDescriptor to run a query that calculates statistics grouped into time intervals. To get a snapshot of the current data in the store, create a descriptor and call its result(for:) method.\n\n// Create a predicate for this week's samples.\nlet calendar = Calendar(identifier: .gregorian)\nlet today = calendar.startOfDay(for: Date())\n\n\nguard let endDate = calendar.date(byAdding: .day, value: 1, to: today) else {\n    fatalError(\"*** Unable to calculate the end time ***\")\n}\n\n\nguard let startDate = calendar.date(byAdding: .day, value: -7, to: endDate) else {\n    fatalError(\"*** Unable to calculate the start time ***\")\n}\n\n\nlet thisWeek = HKQuery.predicateForSamples(withStart: startDate, end: endDate)\n\n\n// Create the query descriptor.\nlet stepType = HKQuantityType(.stepCount)\nlet stepsThisWeek = HKSamplePredicate.quantitySample(type: stepType, predicate:thisWeek)\nlet everyDay = DateComponents(day:1)\n\n\nlet sumOfStepsQuery = HKStatisticsCollectionQueryDescriptor(\n    predicate: stepsThisWeek,\n    options: .cumulativeSum,\n    anchorDate: endDate,\n    intervalComponents: everyDay)\n\n\nlet stepCounts = try await sumOfStepsQuery.result(for: store)\n\n\n// Use the statistics collection here.\n\n\nTo set up a long-running query that updates the calculations based on any new data that arrives while it’s running, call the results(for:) method instead. The first result contains calculations based on samples currently in the HealthKit store, and additional results represent updates as they occur.\n\n// Run a long-running query that updates its statistics as new data comes in.\nlet updateQueue = sumOfStepsQuery.results(for: store)\n\n\n// Wait for the initial results and updates.\nupdateTask = Task {\n    for try await results in updateQueue {\n        // Use the statistics collection here.\n    }\n}\n\n\nTopics\nCreating Query Descriptors\ntypealias HKStatisticsCollectionQueryDescriptor.Output\nThe type of data that the statistics collection query returns.\ntypealias HKStatisticsCollectionQueryDescriptor.Sequence\nThe asynchronous sequence that the statistics collection query returns.\ninit(predicate: HKSamplePredicate<HKQuantitySample>, options: HKStatisticsOptions, anchorDate: Date, intervalComponents: DateComponents)\nCreates a statistics collection query descriptor.\nRunning Queries\nfunc result(for: HKHealthStore) -> HKStatisticsCollection\nRuns a one-shot query and asynchronously returns statistics calculated from the current matching results.\nfunc results(for: HKHealthStore) -> HKStatisticsCollectionQueryDescriptor.Results\nInitiates a long-running query that returns statistics and updates using an asynchronous sequence.\nstruct HKStatisticsCollectionQueryDescriptor.Results\nAn asynchronous sequence that emits updates from a statistics collection query.\nAccessing Query Properties\nvar predicate: HKSamplePredicate<HKQuantitySample>\nA predicate that defines the set of data that the query uses to calculate the statistics.\nvar options: HKStatisticsOptions\nA list of options that define the type of statistical calculations performed and the way in which HealthKit merges data from multiple sources.\nvar anchorDate: Date\nThe date that anchors the collection’s time intervals.\nvar intervalComponents: DateComponents\nThe date components that define the time interval for each statistics object in the collection.\nRelationships\nConforms To\nHKAsyncQuery\nHKAsyncSequenceQuery\nSee Also\nStatistics\nExecuting Statistical Queries\nCreate and run statistical queries.\nExecuting Statistics Collection Queries\nCalculate statistical data for graphs and charts.\nstruct HKStatisticsQueryDescriptor\nA query descriptor that calculates the minimum, maximum, average, or sum over a set of samples from the HealthKit store.\nclass HKStatisticsQuery\nA query that performs statistical calculations over a set of matching quantity samples, and returns the results.\nclass HKStatisticsCollectionQuery\nA query that performs multiple statistics queries over a series of fixed-length time intervals.\nclass HKStatistics\nAn object that represents the result of calculating the minimum, maximum, average, or sum over a set of samples from the HealthKit store.\nclass HKStatisticsCollection\nAn object that manages a collection of statistics, representing the results calculated over separate time intervals.\nstruct HKStatisticsOptions\nOptions for specifying the statistic to calculate."
  },
  {
    "title": "HKStatisticsQueryDescriptor | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkstatisticsquerydescriptor",
    "html": "Overview\n\nUse the HKStatisticsQueryDescriptor to perform calculations over sets of samples currently saved in the HealthKit store.\n\n// Create a predicate for today's samples.\nlet calendar = Calendar(identifier: .gregorian)\nlet startDate = calendar.startOfDay(for: Date())\nlet endDate = calendar.date(byAdding: .day, value: 1, to: startDate)\nlet today = HKQuery.predicateForSamples(withStart: startDate, end: endDate)\n\n\n// Create the query descriptor.\nlet stepType = HKQuantityType(.stepCount)\nlet stepsToday = HKSamplePredicate.quantitySample(type: stepType, predicate:today)\nlet sumOfStepsQuery = HKStatisticsQueryDescriptor(predicate: stepsToday, options: .cumulativeSum)\n\n\n// Run the query.\nlet stepCount = try await sumOfStepsQuery.result(for: store)?\n    .sumQuantity()?\n    .doubleValue(for: HKUnit.count())\n\n\n// Use the step count here.\n\n\nTopics\nCreating Query Descriptors\ntypealias HKStatisticsQueryDescriptor.Output\nThe type of data that the statistics query returns.\ninit(predicate: HKSamplePredicate<HKQuantitySample>, options: HKStatisticsOptions)\nCreates a statistics query descriptor.\nRunning Queries\nfunc result(for: HKHealthStore) -> HKStatistics?\nRuns a one-shot query and asynchronously returns a snapshot of the current matching results.\nAccessing Query Properties\nvar predicate: HKSamplePredicate<HKQuantitySample>\nA predicate that defines the set of data that the query uses to calculate the statistics.\nvar options: HKStatisticsOptions\nA list of options that define the type of statistical calculations performed and the way in which HealthKit merges data from multiple sources.\nRelationships\nConforms To\nHKAsyncQuery\nSee Also\nStatistics\nExecuting Statistical Queries\nCreate and run statistical queries.\nExecuting Statistics Collection Queries\nCalculate statistical data for graphs and charts.\nclass HKStatisticsQuery\nA query that performs statistical calculations over a set of matching quantity samples, and returns the results.\nstruct HKStatisticsCollectionQueryDescriptor\nA query descriptor that gathers a collection of statistics calculated over a series of fixed-length time intervals.\nclass HKStatisticsCollectionQuery\nA query that performs multiple statistics queries over a series of fixed-length time intervals.\nclass HKStatistics\nAn object that represents the result of calculating the minimum, maximum, average, or sum over a set of samples from the HealthKit store.\nclass HKStatisticsCollection\nAn object that manages a collection of statistics, representing the results calculated over separate time intervals.\nstruct HKStatisticsOptions\nOptions for specifying the statistic to calculate."
  },
  {
    "title": "HKStatisticsQuery | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkstatisticsquery",
    "html": "Overview\n\nStatistics queries calculate common statistics over the set of matching samples. You can use statistical queries to calculate the minimum, maximum, or average value of a set of discrete quantities, or use them to calculate the sum for cumulative quantities. For the complete list of possible calculations, see HKStatisticsOptions. For more information about the available quantity types and to learn whether they are discrete or cumulative values, see Data types.\n\nYou can use statistics queries with quantity samples only. If you want to calculate statistics over workouts or correlation samples, you must perform the appropriate query and process the data yourself.\n\nStatistics queries are immutable. Their properties are set when they are first created, and they can’t change.\n\nTopics\nCreating Statistics Queries\ninit(quantityType: HKQuantityType, quantitySamplePredicate: NSPredicate?, options: HKStatisticsOptions, completionHandler: (HKStatisticsQuery, HKStatistics?, Error?) -> Void)\nInitializes a statistics query instance that performs the specified calculations over the matching samples in the HeathKit store.\nExecuting Statistical Queries\nCreate and run statistical queries.\nRelationships\nInherits From\nHKQuery\nSee Also\nStatistics\nExecuting Statistical Queries\nCreate and run statistical queries.\nExecuting Statistics Collection Queries\nCalculate statistical data for graphs and charts.\nstruct HKStatisticsQueryDescriptor\nA query descriptor that calculates the minimum, maximum, average, or sum over a set of samples from the HealthKit store.\nstruct HKStatisticsCollectionQueryDescriptor\nA query descriptor that gathers a collection of statistics calculated over a series of fixed-length time intervals.\nclass HKStatisticsCollectionQuery\nA query that performs multiple statistics queries over a series of fixed-length time intervals.\nclass HKStatistics\nAn object that represents the result of calculating the minimum, maximum, average, or sum over a set of samples from the HealthKit store.\nclass HKStatisticsCollection\nAn object that manages a collection of statistics, representing the results calculated over separate time intervals.\nstruct HKStatisticsOptions\nOptions for specifying the statistic to calculate."
  },
  {
    "title": "Executing Statistics Collection Queries | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/queries/executing_statistics_collection_queries",
    "html": "Overview\n\nProduce data for graphs and charts using statistics collection queries. For example, you might create a statistics collection query that calculates the total number of steps for each day or the average heart rate for each hour.\n\nNote\n\nHealthKit provides two types of queries for calculating statistics over sets of samples. HKStatisticsQuery calculates a single value over all matching samples, while HKStatisticsCollectionQuery partitions the samples into time intervals and calculates a value for each time interval.\n\nStatistics collection queries use an anchor point and a time interval to partition the set of matching samples into collections. The anchor point defines an arbitrary starting point. The position of this point often doesn’t matter. It could be in the future or in the past. Time intervals extend away from this anchor point in both directions.\n\nFor example, if you use a 1-day time interval, the anchor point defines the time when each collection begins. The exact date for the anchor point doesn’t matter. It could be 3:34 a.m., January 1, 1970 or 3:34 a.m., March 15, 2065. In both cases, the statistics collection query partitions the matching samples into days, starting each day at 3:34 a.m.\n\nThe statistics collection query then calculates common statistics over each time interval. You can use statistics queries to calculate the minimum, maximum, or average value of a set of discrete quantities, or to calculate the sum for cumulative quantities. Also, like observer queries, statistics collection queries can act as long-running queries, receiving updates when the HealthKit store’s content changes.\n\nCreate the Query\n\nStart by creating your anchor date and time interval. The following sample starts by creating a 1-week time interval. Next, it sets the anchor date to Monday morning at 3:00 a.m. Because the interval is 1 week long, the anchor’s exact date doesn’t matter. Each set of statistics represents exactly 1 week, starting on Monday at 3:00 a.m.\n\nlet calendar = Calendar.current\n\n\n// Create a 1-week interval.\nlet interval = DateComponents(day: 7)\n\n\n// Set the anchor for 3 a.m. on Monday.\nvar components = DateComponents(calendar: calendar,\n                                timeZone: calendar.timeZone,\n                                hour: 3,\n                                minute: 0,\n                                second: 0,\n                                weekday: 2)\n\n\nguard let anchorDate = calendar.nextDate(after: Date(),\n                                         matching: components,\n                                         matchingPolicy: .nextTime,\n                                         repeatedTimePolicy: .first,\n                                         direction: .backward) else {\n    fatalError(\"*** unable to find the previous Monday. ***\")\n}\n\n\nNext, create the quantity type and the statistics collection query. The following code creates the quantity type for step counts and then creates the query itself.\n\nguard let quantityType = HKObjectType.quantityType(forIdentifier: .stepCount) else {\n    fatalError(\"*** Unable to create a step count type ***\")\n}\n\n\n// Create the query.\nlet query = HKStatisticsCollectionQuery(quantityType: quantityType,\n                                        quantitySamplePredicate: nil,\n                                        options: .cumulativeSum,\n                                        anchorDate: anchorDate,\n                                        intervalComponents: interval)\n\n\nAdd Callback Handlers\n\nUnlike most other queries, you don’t set the callback block when you instantiate a statistics collection query. Instead, you can either set the initial result handler or the statistics update handler (or both) as needed for your app. In this case, the sample code just sets the initial results handler, letting it calculate statistics over the samples currently stored in HealthKit.\n\nIn your results handler, first check for and handle errors. Many HKError.Code values indicate that you haven’t properly set up HealthKit. Always check HealthKit’s availability and request permission to read the specified data type before creating a query. For more information, see Setting up HealthKit and Authorizing access to health data.\n\nHowever, your app may need to explicitly check for some errors, depending on its needs. For example, if your app can run a query in the background, you need to check for and handle the HKError.Code.errorDatabaseInaccessible error.\n\n// Set the results handler.\nquery.initialResultsHandler = {\n    query, results, error in\n    \n    // Handle errors here.\n    if let error = error as? HKError {\n        switch (error.code) {\n        case .errorDatabaseInaccessible:\n            // HealthKit couldn't access the database because the device is locked.\n            return\n        default:\n            // Handle other HealthKit errors here.\n            return\n        }\n    }\n    \n    guard let statsCollection = results else {\n        // You should only hit this case if you have an unhandled error. Check for bugs \n        // in your code that creates the query, or explicitly handle the error.\n        assertionFailure(\"\")\n        return\n    }\n\n\n...\n\n\nAfter you handle any errors, process the incoming statistics data, and then update your app. Be sure to dispatch code that updates the user interface to the main queue.\n\nThe following code calculates the start and end times for a 3-month window and then iterates over all the time intervals in that window. The statistics collection passes the enumeration block a statistics object for each time interval between the start and end dates. However, if the time interval doesn’t contain any samples, the provided statistics’s sumQuantity() method returns nil. Therefore, the sample must check to see whether it has a valid quantity. If it does, it adds the data; otherwise, it skips the time interval.\n\n...\n    \n    let endDate = Date()\n    let threeMonthsAgo = DateComponents(month: -3)\n    \n    guard let startDate = calendar.date(byAdding: threeMonthsAgo, to: endDate) else {\n        fatalError(\"*** Unable to calculate the start date ***\")\n    }\n    \n    // Plot the weekly step counts over the past 3 months.\n    var weeklyData = MyWeeklyData()\n    \n    // Enumerate over all the statistics objects between the start and end dates.\n    statsCollection.enumerateStatistics(from: startDate, to: endDate)\n    { (statistics, stop) in\n        if let quantity = statistics.sumQuantity() {\n            let date = statistics.startDate\n            let value = quantity.doubleValue(for: .count())\n            \n            // Extract each week's data.\n            weeklyData.addWeek(date: date, stepCount: Int(value))\n        }\n    }\n    \n    // Dispatch to the main queue to update the UI.\n    DispatchQueue.main.async {\n        myUpdateGraph(weeklyData: weeklyData)\n    }\n}\n\n\nFinally, execute the query using the HealthKit store.\n\nhealthStore.execute(query)\n\n\nSince the sample doesn’t provide an update results handler, when the initial results block finishes processing the data, the query stops automatically. If the sample had provided an update manager, the statistics collection query would continue to monitor the HealthKit store after it had generated the initial results.\n\nSee Also\nStatistics\nExecuting Statistical Queries\nCreate and run statistical queries.\nstruct HKStatisticsQueryDescriptor\nA query descriptor that calculates the minimum, maximum, average, or sum over a set of samples from the HealthKit store.\nclass HKStatisticsQuery\nA query that performs statistical calculations over a set of matching quantity samples, and returns the results.\nstruct HKStatisticsCollectionQueryDescriptor\nA query descriptor that gathers a collection of statistics calculated over a series of fixed-length time intervals.\nclass HKStatisticsCollectionQuery\nA query that performs multiple statistics queries over a series of fixed-length time intervals.\nclass HKStatistics\nAn object that represents the result of calculating the minimum, maximum, average, or sum over a set of samples from the HealthKit store.\nclass HKStatisticsCollection\nAn object that manages a collection of statistics, representing the results calculated over separate time intervals.\nstruct HKStatisticsOptions\nOptions for specifying the statistic to calculate."
  },
  {
    "title": "HKElectrocardiogramQuery | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkelectrocardiogramquery",
    "html": "Overview\n\nUse the HKElectrocardiogramQuery query to access the individual voltage measurements associated with an HKElectrocardiogram sample.\n\n// Create a query for the voltage measurements\nlet voltageQuery = HKElectrocardiogramQuery(ecgSample) { (query, result) in\n    switch(result) {\n    \n    case .measurement(let measurement):\n        if let voltageQuantity = measurement.quantity(for: .appleWatchSimilarToLeadI) {\n            // Do something with the voltage quantity here.\n\n\n        }\n    \n    case .done:\n        // No more voltages. Finish processing the existing voltages.\n\n\n    case .error(let error):\n        // Handle the error here.\n\n\n    }\n}\n\n\n// Execute the query.\nhealthStore.execute(voltageQuery)\n\n\nThe query calls the data handler once for each voltage measurement, passing a HKElectrocardiogramQuery.Result.measurement(_:) instance that contains the voltage data. After it has sent all the voltage measurements, the query calls the data handler one last time, passing HKElectrocardiogramQuery.Result.done. If an error occurs, it stops collecting voltage data and passes HKElectrocardiogramQuery.Result.error(_:) instead.\n\nElectrocardiogram queries are immutable: You set query’s properties when you create it, and they don’t change.\n\nTopics\nCreating the Query\ninit(HKElectrocardiogram, dataHandler: (HKElectrocardiogramQuery, HKElectrocardiogramQuery.Result) -> Void)\nCreates a new electrocardiogram query object.\nAccessing the Results\nenum HKElectrocardiogramQuery.Result\nPartial results for an electrocardiogram query.\nRelationships\nInherits From\nHKQuery\nSee Also\nSeries queries\nstruct HKQuantitySeriesSampleQueryDescriptor\nA query interface that reads the series data associated with quantity samples using Swift concurrency.\nclass HKQuantitySeriesSampleQuery\nA query that accesses the series data associated with a quantity sample.\nstruct HKWorkoutRouteQueryDescriptor\nA query interface that reads the location data stored in a workout route using Swift concurrency.\nclass HKWorkoutRouteQuery\nA query to access the location data stored in a workout route.\nstruct HKHeartbeatSeriesQueryDescriptor\nA query interface that reads the heartbeat series data stored in a heartbeat sample using Swift concurrency.\nclass HKHeartbeatSeriesQuery\nA query that returns the heartbeat data contained in a heartbeat series sample.\nstruct HKElectrocardiogramQueryDescriptor\nA query interface that reads the underlying voltage measurements for an electrocardiogram sample using Swift concurrency."
  },
  {
    "title": "HKActivitySummaryQuery | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkactivitysummaryquery",
    "html": "Overview\n\nActivity summary query objects are mostly immutable. You can assign the query’s updateHandler property after instantiating the object, but before executing the query. All other properties must be set when you instantiate the object, and they can’t change.\n\nTopics\nCreating activity summary queries\nExecuting Activity Summary Queries\nCreate and run activity summary queries.\ninit(predicate: NSPredicate?, resultsHandler: (HKActivitySummaryQuery, [HKActivitySummary]?, Error?) -> Void)\nInitializes a new active summary query.\nGetting property data\nvar updateHandler: ((HKActivitySummaryQuery, [HKActivitySummary]?, Error?) -> Void)?\nThe handler for monitoring updates to activity summaries saved in the HealthKit store.\nRelationships\nInherits From\nHKQuery\nSee Also\nActivity rings\nclass HKActivitySummary\nAn object that contains the move, exercise, and stand data for a given day.\nstruct HKActivitySummaryQueryDescriptor\nA query interface that reads activity summaries using Swift concurrency.\nclass HKActivityRingView\nA view that uses the Move, Exercise, and Stand activity rings to display data from a HealthKit activity summary object.\nclass HKActivityMoveModeObject\nAn object that contains a movement mode value."
  },
  {
    "title": "HKActivitySummaryQueryDescriptor | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkactivitysummaryquerydescriptor",
    "html": "Overview\n\nUse HKActivitySummaryQueryDescriptor to run a query that reads activity summary objects from the HealthKit store. To get a snapshot of activity summaries currently in the store, create a descriptor and call its result(for:) method.\n\n// Get the start and end date components.\nlet calendar = Calendar(identifier: .gregorian)\n\n\nvar startComponents = calendar.dateComponents([.day, .month, .year], from: Date())\nstartComponents.hour = 0\nstartComponents.minute = 0\nstartComponents.second = 0\n\n\nvar endComponents = startComponents\nendComponents.day = 1 + (endComponents.day ?? 0)\n\n\n\n\n// Create a predicate for the query.\nlet today = HKQuery.predicate(forActivitySummariesBetweenStart: startComponents, end: endComponents)\n\n\n// Create the descriptor.\nlet activeSummaryDescriptor = HKActivitySummaryQueryDescriptor(predicate:today)\n\n\n// Run the query.\nlet results = try await activeSummaryDescriptor.result(for: store)\n\n\nTo set up a long-running query that returns both matching values currently in the HealthKit store, and any updates that arrive while the query is running, call the results(for:) method instead.\n\n// Run a long-running query and monitor for updates.\nlet updateQueue = activeSummaryDescriptor.results(for: store)\n\n\n// Wait for the initial results and updates.\nupdateTask = Task {\n    for try await results in updateQueue {\n        // Process results here.\n    }\n}\n\n\nTopics\nCreating query descriptors\ntypealias HKActivitySummaryQueryDescriptor.Output\nThe type of data that the active summary query returns.\ntypealias HKActivitySummaryQueryDescriptor.Sequence\nThe asynchronous sequence that the active summary query returns.\ninit(predicate: NSPredicate?)\nInstantiates an activity summary query descriptor.\nRunning queries\nfunc result(for: HKHealthStore) -> [HKActivitySummary]\nRuns a one-shot query and asynchronously returns a snapshot of the current matching results.\nfunc results(for: HKHealthStore) -> HKActivitySummaryQueryDescriptor.Results\nInitiates a long-running query that returns its results using an asynchronous sequence.\nstruct HKActivitySummaryQueryDescriptor.Results\nAn asynchronous sequence that emits updates from an activity summary query.\nAccessing query properties\nvar predicate: NSPredicate?\nA predicate that limits the results that the query returned.\nRelationships\nConforms To\nHKAsyncQuery\nHKAsyncSequenceQuery\nSee Also\nActivity rings\nclass HKActivitySummary\nAn object that contains the move, exercise, and stand data for a given day.\nclass HKActivitySummaryQuery\nA query for reading activity summary objects from the HealthKit store.\nclass HKActivityRingView\nA view that uses the Move, Exercise, and Stand activity rings to display data from a HealthKit activity summary object.\nclass HKActivityMoveModeObject\nAn object that contains a movement mode value."
  },
  {
    "title": "HKCumulativeQuantitySeriesSample | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkcumulativequantityseriessample",
    "html": "Deprecated\n\nUse HKCumulativeQuantitySample instead.\n\nTopics\nAccessing Data\nvar sum: HKQuantity\nThe sum of all the quantities in the series.\nSpecifying Predicate Key Paths\nlet HKPredicateKeyPathSum: String\nThe key path for accessing the sum of a quantity series inside a predicate format string.\nRelationships\nInherits From\nHKCumulativeQuantitySample\nSee Also\nRelated Documentation\nclass HKQuantitySeriesSampleQuery\nA query that accesses the series data associated with a quantity sample."
  },
  {
    "title": "HKAttachmentDataReader | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkattachmentdatareader",
    "html": "Overview\n\nTo access the attachment’s data, get a data reader from the attachment store.\n\nlet attachmentStore = HKAttachmentStore(healthStore: store)\n\n\n// Get a data reader for the attachment.\nlet dataReader = attachmentStore.dataReader(for: myAttachment)\n\n\nYou can then asynchronously access the whole data object.\n\nlet data: Data\ndo {\n    data = try await dataReader.data\n} catch {\n    // Handle the error here.\n    fatalError(\"*** An error occurred while accessing the attachment's data. \\(error.localizedDescription) ***\")\n}\n\n\nAlternatively, you can access the file’s contents as an asynchronous sequence of bytes.\n\n// Asynchronously access the attachment's bytes.\nvar data = Data()\ndo {\n    for try await byte in dataReader.bytes {\n        // Use the bytes here.\n        data.append(byte)\n    }\n} catch {\n    // Handle the error here.\n    fatalError(\"*** An error occurred while reading the attachment's data: \\(error.localizedDescription) ***\")\n}\n\n\nTopics\nReading attachment data\nvar data: Data\nThe abstract’s data.\nvar bytes: HKAttachment.AsyncBytes\nAn asynchronous sequence that provides the attachment’s data.\nvar progress: Progress\nAn object you can use to track the progress while reading an attachment’s data.\nAccessing the attachment object\nvar attachment: HKAttachment\nAn attachment object that represents the file from which the reader is reading.\nSee Also\nAttachments\nclass HKAttachment\nA file that is attached to a sample in the HealthKit store.\nclass HKAttachmentStore\nThe access point for attachments associated with samples in the HealthKit store."
  },
  {
    "title": "Adding Digital Signatures | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/samples/adding_digital_signatures",
    "html": "Overview\n\nDevices can digitally sign the samples they create, letting other apps validate the samples and verify that they have not been altered. To facilitate this process, HealthKit provides the digital signature metadata key, HKMetadataKeyDigitalSignature. Use this key to store a digitally signed copy of the sample record. The signature is generated by the device (which should be tamper-resistant, because it stores the private signature key). This allows a data consumer to check the signature against a known public key for that device to verify that the record data has not been altered.\n\nBecause each record is signed individually, storage overhead is on the order of 1 KB per record. Thus, this metadata signature item is intended for records where the sample rate is no more than a few times per day. Higher sample rates will require signatures applied to coalesced groups of samples, which is beyond the scope of this document.\n\nTypically, a tamper-resistant measurement device provisions a private key at the time of manufacture. (Policies and mechanisms for private-key reprovisioning or certificate updating are outside the scope of this document.) The device manufacturer publishes the corresponding public key (for example, on a web page). The device communicates the sample record and signature of each sample to an iOS app, which stores them in the HealthKit database. Note that the private-public key pair is used for digital signing to provide data integrity, not for encryption. The actual values in the data record are cleartext.\n\nThe format used for the digital signature is the Cryptographic Message Syntax (CMS) specified in IETF RFC 5652. The signature is encoded using ASN.1 with Distinguished Encoding Rules (DER). The message digest used should be SHA256, and the signature cipher should be FIPS PUB 186-4 Digital Signature Standard Elliptic Curve P-256. This will ensure both strength and efficiency. In addition, the entire signature should be base64 encoded so that it can be stored in the HealthKit NSString metadata object.\n\nThe signature should be of the ASN.1 Signed-data Content Type:\n\nSignedData ::= SEQUENCE {\n  version CMSVersion,\n  digestAlgorithms DigestAlgorithmIdentifiers,\n  encapContentInfo EncasulatedContentInfo,\n  signerInfos SignerInfo }\n\n\nwhere SignerInfo type is:\n\nSignerInfo ::= SEQUENCE {\n  version CMSVersion,\n  sid SignerIdentifier,\n  digestAlgorithm DigestAlgorithmIdentifier,\n  signatureAlgorithem SignatureAlgorithmIdentifier,\n  signatureSignatureValue }\n\n\nThe digest and signature algorithms are as noted above. Optional items have been left out. The SignerIdentifier is used to retrieve the proper public key for signature verification.\n\nThe EncapsulatedContentInfo should be a copy of the relevant items from the sample record generated by the device. This copy should be encoded using ASN.1 DER, and should contain at least a sample timestamp and sample value. The record data is copied inside the signature in order to have a stable, well-defined binary encoding (ASN.1 DER) of the data, which is necessary to produce a verifiable signature. A plist structure (key-value pairs) that is ASN.1-encoded should be sufficient for most record types."
  },
  {
    "title": "HKSampleQueryDescriptor | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hksamplequerydescriptor",
    "html": "Overview\n\nUse HKSampleQueryDescriptor to run a general query that returns a snapshot of all the matching samples currently saved in the HealthKit store.\n\n// Define the type.\nlet stepType = HKQuantityType(.stepCount)\n\n\n// Create the descriptor.\nlet descriptor = HKSampleQueryDescriptor(\n    predicates:[.quantitySample(type: stepType)],\n    sortDescriptors: [SortDescriptor(\\.endDate, order: .reverse)],\n    limit: 10)\n\n\n// Launch the query and wait for the results.\n// The system automatically sets results to [HKQuantitySample].\nlet results = try await descriptor.result(for: store)\n\n\nfor result in results {\n    // Process the results here.\n}\n\n\nWhen you call the descriptor’s result(for:) method, it creates and executes an HKSampleQuery in the background, passing the results from the query’s resultsHandler as its return value.\n\nTopics\nCreating Query Descriptors\ntypealias HKSampleQueryDescriptor.Output\nThe type of data that the query returns.\ninit(predicates: [HKSamplePredicate<Sample>], sortDescriptors: [SortDescriptor<Sample>], limit: Int?)\nCreates a sample query descriptor.\nRunning Queries\nfunc result(for: HKHealthStore) -> [Sample]\nRuns a one-shot query and asynchronously returns a snapshot of the current matching results.\nAccessing Query Properties\nvar limit: Int?\nThe maximum number of samples that the query returns.\nvar predicates: [HKSamplePredicate<Sample>]\nAn array of sample predicates that define the type of data that the query returns.\nvar sortDescriptors: [SortDescriptor<Sample>]\nAn array that specifies the order of the results that the query returns.\nRelationships\nConforms To\nHKAsyncQuery\nSee Also\nBasic queries\nclass HKSampleQuery\nA general query that returns a snapshot of all the matching samples currently saved in the HealthKit store.\nclass HKCorrelationQuery\nA query that performs complex searches based on the correlation’s contents, and returns a snapshot of all matching samples.\nclass HKQueryDescriptor\nA descriptor that specifies a set of samples based on the data type and a predicate.\nclass HKQuery\nAn abstract class for all the query classes in HealthKit."
  },
  {
    "title": "errorUserCanceled | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkerror/2320685-errorusercanceled",
    "html": "See Also\nAccessing errors\nenum HKError.Code\nError codes returned by HealthKit.\nstatic var noError: HKError.Code\nNo error occurred.\nstatic var errorHealthDataUnavailable: HKError.Code\nThe user accessed HealthKit on an unsupported device.\nstatic var errorHealthDataRestricted: HKError.Code\nA Mobile Device Management (MDM) profile restricts the use of HealthKit on this device.\nstatic var errorInvalidArgument: HKError.Code\nThe app passed an invalid argument to the HealthKit API.\nstatic var errorAuthorizationDenied: HKError.Code\nThe user hasn’t given the app permission to save data.\nstatic var errorAuthorizationNotDetermined: HKError.Code\nThe app hasn’t yet asked the user for the authorization required to complete the task.\nstatic var errorRequiredAuthorizationDenied: HKError.Code\nThe user hasn’t granted the application authorization to access all the required clinical record types.\nstatic var errorDatabaseInaccessible: HKError.Code\nThe HealthKit data is unavailable because it’s protected and the device is locked.\nstatic var errorAnotherWorkoutSessionStarted: HKError.Code\nAnother app started a workout session.\nstatic var errorUserExitedWorkoutSession: HKError.Code\nThe user exited your application while a workout session was running.\nstatic var errorNoData: HKError.Code\nData is unavailable for the requested query and predicate."
  },
  {
    "title": "toothbrushingEvent | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkcategorytypeidentifier/3172591-toothbrushingevent",
    "html": "Discussion\n\nThese samples have a value of HKCategoryValue.notApplicable.\n\nSee Also\nSelf Care\nstatic let handwashingEvent: HKCategoryTypeIdentifier\nA category sample type for handwashing events."
  },
  {
    "title": "numberOfTimesFallen | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquantitytypeidentifier/1615592-numberoftimesfallen",
    "html": "Discussion\n\nThese samples use count units (described in HKUnit) and measure cumulative values (described in HKQuantityAggregationStyle).\n\nDetect and Respond to Falls\n\nThere are two approaches to detecting falls in your app. You can either query for numberOfTimesFallen samples in HealthKit, or you can use Core Motion’s CMFallDetectionManager.\n\nThe Core Motion fall detection manager is particularly useful for apps that need to respond to falls in a timely manner so that the app can provide help to the person who fell.\n\nThe fall detection manager:\n\nNotifies the app in real time\n\nNotifies the app of all fall events\n\nProvides background runtime so that your app can respond to the fall\n\nDetect and Monitor Falls Over Time\n\nThe HealthKit sample is particularly useful for apps that monitor falls over longer time periods, because there can be a delay between the fall event and HealthKit updating its samples.\n\nHealthKit provides:\n\nSamples that are available on all devices that can access the person’s HealthKit data—not just the device that detected the fall\n\nSamples for falls where the person who fell confirmed the fall, or the system escalated the fall to emergency services. If the person who fell dismisses the fall alert, HealthKit doesn’t record the fall.\n\nBoth Core Motion and HealthKit need to authorize access to fall detection before they receive any notifications; however, Core Motion requires an additional entitlement from Apple. To apply for the entitlement, see Fall Detection Entitlement Request.\n\nSee Also\nLab and test results\nstatic let bloodGlucose: HKQuantityTypeIdentifier\nA quantity sample type that measures the user’s blood glucose level.\nstatic let electrodermalActivity: HKQuantityTypeIdentifier\nA quantity sample type that measures electrodermal activity.\nstatic let forcedExpiratoryVolume1: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of air that can be forcibly exhaled from the lungs during the first second of a forced exhalation.\nstatic let forcedVitalCapacity: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of air that can be forcibly exhaled from the lungs after taking the deepest breath possible.\nstatic let inhalerUsage: HKQuantityTypeIdentifier\nA quantity sample type that measures the number of puffs the user takes from their inhaler.\nstatic let insulinDelivery: HKQuantityTypeIdentifier\nA quantity sample that measures the amount of insulin delivered.\nstatic let peakExpiratoryFlowRate: HKQuantityTypeIdentifier\nA quantity sample type that measures the user’s maximum flow rate generated during a forceful exhalation.\nstatic let peripheralPerfusionIndex: HKQuantityTypeIdentifier\nA quantity sample type that measures the user’s peripheral perfusion index."
  },
  {
    "title": "userInfo | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkerror/3727562-userinfo",
    "html": "See Also\nAccessing the errors properties\nstatic var errorDomain: String\nThe domain for all HealthKit errors.\nvar errorCode: Int\nA code that represents the error.\nvar code: Code\nA code that represents the error.\nvar errorUserInfo: [String : Any]\nA dictionary that contains additional information about the error.\nvar localizedDescription: String\nA localized description of the error."
  },
  {
    "title": "errorDomain | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkerror/2882809-errordomain",
    "html": "See Also\nAccessing the errors properties\nvar errorCode: Int\nA code that represents the error.\nvar code: Code\nA code that represents the error.\nvar errorUserInfo: [String : Any]\nA dictionary that contains additional information about the error.\nvar userInfo: [String : Any]\nA dictionary that contains additional information about the error.\nvar localizedDescription: String\nA localized description of the error."
  },
  {
    "title": "code | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkerror/3727558-code",
    "html": "See Also\nAccessing the errors properties\nstatic var errorDomain: String\nThe domain for all HealthKit errors.\nvar errorCode: Int\nA code that represents the error.\nvar errorUserInfo: [String : Any]\nA dictionary that contains additional information about the error.\nvar userInfo: [String : Any]\nA dictionary that contains additional information about the error.\nvar localizedDescription: String\nA localized description of the error."
  },
  {
    "title": "init(_:userInfo:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkerror/3727561-init",
    "html": "Parameters\ncode\n\nA code that specifies the error.\n\nuserInfo\n\nA dictionary that contains additional information about the error."
  },
  {
    "title": "resumeWorkoutSession(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkhealthstore/1650860-resumeworkoutsession",
    "html": "Parameters\nworkoutSession\n\nThe workout session to resume.\n\nDiscussion\n\nThis method resumes the provided session if it is currently paused. The workout session’s state transitions to HKWorkoutSessionState.running, and the system generates an HKWorkoutEventType.resume event and passes it to the workout session delegate’s workoutSession:didGenerateEvent: method.\n\nSee Also\nManaging workout sessions\nvar workoutSessionMirroringStartHandler: ((HKWorkoutSession) -> Void)?\nA block that the system calls when it starts a mirrored workout session.\nfunc startWatchApp(with: HKWorkoutConfiguration, completion: (Bool, Error?) -> Void)\nLaunches or wakes the companion watchOS app to create a new workout session.\nfunc pause(HKWorkoutSession)\nPauses the provided workout session."
  },
  {
    "title": "lowHeartRateEvent | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkcategorytypeidentifier/3081270-lowheartrateevent",
    "html": "Discussion\n\nThe system creates lowHeartRateEvent samples whenever Apple Watch produces a low heart rate notification. For more information, see Heart rate notifications on your Apple Watch.\n\nThe low heart rate samples are read-only. You can request permission to read the samples using this identifier, but you can’t request authorization to share them. This means you can’t save new low heart rate events to the HealthKit store. To add test data in iOS Simulator, open the Health app and select Browse > Heart > Low Heart Rate Notifications > Add Data.\n\nThese samples have a value of HKCategoryValue.notApplicable and include HKMetadataKeyHeartRateEventThreshold metadata.\n\nTopics\nMetadata Keys\nlet HKMetadataKeyHeartRateEventThreshold: String\nA key that records the threshold of high or low heart rate events in beats per minute.\nSee Also\nVital Signs\nstatic let highHeartRateEvent: HKCategoryTypeIdentifier\nA category sample type for high heart rate events.\nstatic let irregularHeartRhythmEvent: HKCategoryTypeIdentifier\nA category sample type for irregular heart rhythm events."
  },
  {
    "title": "environmentalAudioExposureEvent | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkcategorytypeidentifier/3552053-environmentalaudioexposureevent",
    "html": "Discussion\n\nApple Watch saves a environmentalAudioExposureEvent sample when it generates a noise notification, sent when the average sound level reaches or exceeds a specified threshold for three minutes. Apple Watch doesn’t record or save any sounds. Users can enable or disable these notifications, or set the threshold from Settings > Noise.\n\nEnvironmental audio exposure event samples are read-only. You can request permission to read the samples using this identifier, but you can’t request authorization to share them. This means you can’t save new environmental audio exposure events to the HealthKit store. To add test data in iOS Simulator, open the Health app and select Browse > Hearing > Noise Notifications > Add Data.\n\nSamples of this type use values from the HKCategoryValueEnvironmentalAudioExposureEvent enumeration.\n\nSee Also\nHearing\nenum HKCategoryValueEnvironmentalAudioExposureEvent\nExposure events for environmental audio.\nstatic let headphoneAudioExposureEvent: HKCategoryTypeIdentifier\nA category sample type that records exposure to potentially damaging sounds from headphones.\nenum HKCategoryValueHeadphoneAudioExposureEvent\nExposure events for headphone audio.\nstatic let audioExposureEvent: HKCategoryTypeIdentifier\nA category sample type for audio exposure events."
  },
  {
    "title": "lowCardioFitnessEvent | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkcategorytypeidentifier/3697108-lowcardiofitnessevent",
    "html": "Discussion\n\nIn iOS 14.3 and later, users with a paired Apple Watch running watchOS 7.2 or later can enable a Health app experience that classifies their cardio fitness levels as either “Low”, “Below Average”, “Above Average”, or “High”, based on individual parameters and characteristics.\n\nApple Watch can notify the user when their cardio fitness level falls into the Low category. If the user enables these notifications, they receive a notification when their VO2 max levels consistently fall below the low threshold for a period of time. The system sends low-cardio fitness notifications approximately once every four months.\n\nThe system also creates a lowCardioFitnessEvent sample to record the event. The sample contains values from the HKCategoryValueLowCardioFitnessEvent enumeration.\n\nSamples of this type have two associated metadata keys:\n\nHKMetadataKeyVO2MaxValue\n\nThis key stores the value of the VO2 max sample that triggered the event.\n\nHKMetadataKeyLowCardioFitnessEventThreshold\n\nThis key stores the threshold value used to calculate the Low cardio classification. This value varies based on certain parameters and physical characteristics, such as the user’s age.\n\nLow-cardio fitness event samples are read-only. Use this identifier to request permission to read these samples; however, you can’t request authorization to share them, and you can’t save new low-cardio fitness event samples to the HealthKit store.\n\nSee Also\nActivity\nstatic let appleStandHour: HKCategoryTypeIdentifier\nA category sample type that counts the number of hours in the day during which the user has stood and moved for at least one minute per hour."
  },
  {
    "title": "headphoneAudioExposureEvent | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkcategorytypeidentifier/3552059-headphoneaudioexposureevent",
    "html": "Discussion\n\niPhone and Apple Watch save a headphoneAudioExposureEvent sample when the device generates a notification about loud headphone audio. Both devices generate these notifications when the user listens to audio long enough and at a volume that could affect their hearing. In some regions, users can enable or disable loud headphone notifications from Settings > Sounds & Haptics > Headphone Safety.\n\nSamples of this type use values from the HKCategoryValueHeadphoneAudioExposureEvent enumeration.\n\nTopics\nMetadata Keys\nlet HKMetadataKeyAudioExposureLevel: String\nThe audio level associated with an audio event.\nlet HKMetadataKeyAudioExposureDuration: String\nThe audio exposure event’s duration.\nSee Also\nHearing\nstatic let environmentalAudioExposureEvent: HKCategoryTypeIdentifier\nA category sample type that records exposure to potentially damaging sounds from the environment.\nenum HKCategoryValueEnvironmentalAudioExposureEvent\nExposure events for environmental audio.\nenum HKCategoryValueHeadphoneAudioExposureEvent\nExposure events for headphone audio.\nstatic let audioExposureEvent: HKCategoryTypeIdentifier\nA category sample type for audio exposure events."
  },
  {
    "title": "stepCount | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquantitytypeidentifier/1615548-stepcount",
    "html": "Discussion\n\nThese samples use count units (described in HKUnit) and measure cumulative values (described in HKQuantityAggregationStyle).\n\nSee Also\nActivity\nstatic let distanceWalkingRunning: HKQuantityTypeIdentifier\nA quantity sample type that measures the distance the user has moved by walking or running.\nstatic let runningGroundContactTime: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of time the runner’s foot is in contact with the ground while running.\nstatic let runningPower: HKQuantityTypeIdentifier\nA quantity sample type that measures the rate of work required for the runner to maintain their speed.\nstatic let runningSpeed: HKQuantityTypeIdentifier\nA quantity sample type that measures the runner’s speed.\nstatic let runningStrideLength: HKQuantityTypeIdentifier\nA quantity sample type that measures the distance covered by a single step while running.\nstatic let runningVerticalOscillation: HKQuantityTypeIdentifier\nA quantity sample type measuring pelvis vertical range of motion during a single running stride.\nstatic let distanceCycling: HKQuantityTypeIdentifier\nA quantity sample type that measures the distance the user has moved by cycling.\nstatic let pushCount: HKQuantityTypeIdentifier\nA quantity sample type that measures the number of pushes that the user has performed while using a wheelchair.\nstatic let distanceWheelchair: HKQuantityTypeIdentifier\nA quantity sample type that measures the distance the user has moved using a wheelchair.\nstatic let swimmingStrokeCount: HKQuantityTypeIdentifier\nA quantity sample type that measures the number of strokes performed while swimming.\nstatic let distanceSwimming: HKQuantityTypeIdentifier\nA quantity sample type that measures the distance the user has moved while swimming.\nstatic let distanceDownhillSnowSports: HKQuantityTypeIdentifier\nA quantity sample type that measures the distance the user has traveled while skiing or snowboarding.\nstatic let basalEnergyBurned: HKQuantityTypeIdentifier\nA quantity sample type that measures the resting energy burned by the user.\nstatic let activeEnergyBurned: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of active energy the user has burned.\nstatic let flightsClimbed: HKQuantityTypeIdentifier\nA quantity sample type that measures the number flights of stairs that the user has climbed.\nstatic let nikeFuel: HKQuantityTypeIdentifier\nA quantity sample type that measures the number of NikeFuel points the user has earned.\nstatic let appleExerciseTime: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of time the user spent exercising.\nstatic let appleMoveTime: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of time the user has spent performing activities that involve full-body movements during the specified day.\nstatic let appleStandTime: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of time the user has spent standing.\nstatic let vo2Max: HKQuantityTypeIdentifier\nA quantity sample that measures the maximal oxygen consumption during exercise.\nRelated Documentation\nstruct HKQuantityTypeIdentifier\nThe identifiers that create quantity type objects.\nclass HKQuantitySample\nA sample that represents a quantity, including the value and the units.\nclass HKQuantity\nAn object that stores a value for a given unit."
  },
  {
    "title": "HKQuantitySample | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquantitysample",
    "html": "Overview\n\nA quantity sample contains one or more HKQuantity objects. Each quantity represents a single piece of data with a single numeric value and the value’s associated units. For example, you can use quantity samples to record the user’s height, the user’s current heart rate, or the number of calories in a hamburger. HealthKit provides a wide range of quantity types, letting you track many different health and fitness features.\n\nThe HKQuantitySample class is a subclass of the HKSample class. Quantity samples are immutable; you set the sample’s properties when you create it, and they cannot change.\n\nIn iOS 13 and later and watchOS 6 and later, HKQuantitySample is an abstract superclass for the HKCumulativeQuantitySample and HKDiscreteQuantitySample concrete subclasses. The system automatically selects the correct subclass based on the HKQuantityType object used to create the sample.\n\nExtend Quantity Samples\n\nLike many HealthKit classes, you should not subclass the HKQuantitySample class. You may extend this class by adding metadata with custom keys to save related data used by your app.\n\nFor more information, see init(type:quantity:start:end:metadata:).\n\nTopics\nCreating Quantity Samples\ninit(type: HKQuantityType, quantity: HKQuantity, start: Date, end: Date)\nReturns a sample containing a numeric measurement.\ninit(type: HKQuantityType, quantity: HKQuantity, start: Date, end: Date, metadata: [String : Any]?)\nReturns a sample containing a numeric measurement with the provided metadata.\ninit(type: HKQuantityType, quantity: HKQuantity, start: Date, end: Date, device: HKDevice?, metadata: [String : Any]?)\nReturns a sample containing a numeric measurement with the provided device and metadata.\nGetting Property Data\nvar quantity: HKQuantity\nThe quantity for this sample.\nvar count: Int\nThe number of quantities contained in this sample.\nvar quantityType: HKQuantityType\nThe quantity type for this sample.\nSpecifying Predicate Key Paths\nlet HKPredicateKeyPathQuantity: String\nThe key path for accessing the sample’s quantity.\nlet HKPredicateKeyPathCount: String\nA key path for the sample’s count.\nRelationships\nInherits From\nHKSample\nSee Also\nAbstract superclasses\nclass HKSample\nA HealthKit sample represents a piece of data associated with a start and end time.\nclass HKObject\nA piece of data that can be stored inside the HealthKit store."
  },
  {
    "title": "workoutSessionMirroringStartHandler | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkhealthstore/4172878-workoutsessionmirroringstarthand",
    "html": "Discussion\n\nThe system calls this block on the companion iPhone when someone starts a mirrored workout on Apple Watch. If your iOS app isn’t active, the system launches it in the background.\n\n// The HealthKit store calls this closure when Apple Watch starts a remote session.\nstore.workoutSessionMirroringStartHandler = { mirroredSession in\n    // Reset the health data.\n    self.data = HealthData()\n\n\n    // Save a reference to the workout session.\n    self.session = mirroredSession\n    logger.debug(\"*** A session started on the companion Apple Watch. ***\")\n}\n\n\nTo ensure that your app can always catch incoming mirrored workout sessions, assign this property as soon as your app launches.\n\nImportant\n\nYour app may receive multiple calls to workoutSessionMirroringStartHandler. If iPhone and Apple Watch lose their connection in the middle of a workout session, Apple Watch automatically tries to reconnect. Each call has its own HKWorkoutSession instance.\n\nThe system calls this block from an arbitrary background queue.\n\nSee Also\nManaging workout sessions\nfunc startWatchApp(with: HKWorkoutConfiguration, completion: (Bool, Error?) -> Void)\nLaunches or wakes the companion watchOS app to create a new workout session.\nfunc pause(HKWorkoutSession)\nPauses the provided workout session.\nfunc resumeWorkoutSession(HKWorkoutSession)\nResumes the provided workout session."
  },
  {
    "title": "source | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkobject/1615781-source",
    "html": "Deprecated\n\nThis property is deprecated. Use sourceRevision instead.\n\nDiscussion\n\nThe source property is only available on objects you have retrieved from the HealthKit store. When you create a new object, the source is set to nil. The system automatically sets the source property when you save the object to the HealthKit store. The source is then available the next time the object is retrieved from the store.\n\nSee Also\nAccessing Properties\nvar uuid: UUID\nThe universally unique identifier (UUID) for this HealthKit object.\nvar metadata: [String : Any]?\nThe metadata for this HealthKit object.\nvar device: HKDevice?\nThe device that generated the data for this object.\nvar sourceRevision: HKSourceRevision\nThe app or device that created this object."
  },
  {
    "title": "sourceRevision | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkobject/1615483-sourcerevision",
    "html": "Discussion\n\nFor samples saved by an app, the source revision is set to the version of the app that saved the object. For devices that write directly to HealthKit, the source revision is set to the version of the device that saved the object, while more complete device information is saved to the device property.\n\nThe source revision property is only available on objects you have retrieved from the HealthKit store. When you create a new object, the source revision is set to nil. The system automatically sets this property to represent the current version of the app that saved the object to the HealthKit store. The source revision is then available the next time the object is retrieved from the store.\n\nSee Also\nAccessing Properties\nvar uuid: UUID\nThe universally unique identifier (UUID) for this HealthKit object.\nvar metadata: [String : Any]?\nThe metadata for this HealthKit object.\nvar device: HKDevice?\nThe device that generated the data for this object.\nvar source: HKSource\nA HealthKit source, representing the app or device that created this object."
  },
  {
    "title": "HKCorrelation | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkcorrelation",
    "html": "Overview\n\nHealthKit uses correlations to represent both blood pressure and food.\n\nBlood pressure correlations always include two quantity samples, representing the systolic and diastolic values.\n\nFood correlations can contain a wide range of dietary information about the food, including information about the fat, protein, carbohydrates, energy, and vitamins consumed.\n\nIn general, a food correlation should include at least a dietaryEnergyConsumed sample. You can also add nutritional quantity samples for any other items you want to track. Use the HKMetadataKeyFoodType key to indicate the food’s name.\n\nThe HKCorrelation class is a concrete subclass of the HKSample class. Correlations are immutable: You set the correlation’s properties when the object is first created, and they cannot change.\n\nExtend Correlation Samples\n\nLike many HealthKit classes, the HKCorrelation class should not be subclassed. You can extend the correlation class by adding metadata with custom keys as appropriate for your app.\n\nFor more information, see the init(type:start:end:objects:metadata:) method.\n\nTopics\nCreating Correlations\ninit(type: HKCorrelationType, start: Date, end: Date, objects: Set<HKSample>)\nInstantiates and returns a new correlation instance.\ninit(type: HKCorrelationType, start: Date, end: Date, objects: Set<HKSample>, metadata: [String : Any]?)\nInstantiates and returns a new correlation instance with the provided metadata.\ninit(type: HKCorrelationType, start: Date, end: Date, objects: Set<HKSample>, device: HKDevice?, metadata: [String : Any]?)\nInstantiates and returns a new correlation instance with the provided device and metadata.\nGetting Correlation Data\nvar correlationType: HKCorrelationType\nThe type for this correlation.\nvar objects: Set<HKSample>\nThe set of sample objects that make up the correlation.\nfunc objects(for: HKObjectType) -> Set<HKSample>\nReturns a set containing all the objects of the specified type in the correlation.\nSpecifying Predicate Key Paths\nlet HKPredicateKeyPathCorrelation: String\nThe key path for accessing the object’s correlation inside a predicate format string.\nRelationships\nInherits From\nHKSample\nSee Also\nBasic samples\nclass HKCumulativeQuantitySample\nA sample that represents a cumulative quantity.\nclass HKDiscreteQuantitySample\nA sample that represents a discrete quantity.\nclass HKQuantitySample\nA sample that represents a quantity, including the value and the units.\nclass HKCategorySample\nA sample with values from a short list of possible values.\nUnits and quantities\nObjects used to specify a quantity for a given unit, and to convert between units.\nMetadata Keys\nConstants used to add metadata to objects stored in HealthKit."
  },
  {
    "title": "HKObject | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkobject",
    "html": "Overview\n\nThe HKObject class is an abstract class. You should never instantiate a HKObject object directly. Instead, always work with one of its concrete subclasses: HKCategorySample, HKQuantitySample, HKCorrelation, or HKWorkout.\n\nHealthKit objects are all immutable. With a few exceptions (such as the object’s source revision), the object’s properties are set when the object is first created and they cannot change.\n\nTopics\nAccessing Properties\nvar uuid: UUID\nThe universally unique identifier (UUID) for this HealthKit object.\nvar metadata: [String : Any]?\nThe metadata for this HealthKit object.\nvar device: HKDevice?\nThe device that generated the data for this object.\nvar sourceRevision: HKSourceRevision\nThe app or device that created this object.\nvar source: HKSource\nA HealthKit source, representing the app or device that created this object.\nSpecifying Predicate Key Paths\nlet HKPredicateKeyPathUUID: String\nThe key path for accessing the object’s UUID inside a predicate format string.\nlet HKPredicateKeyPathMetadata: String\nThe key path for accessing the object’s metadata dictionary inside a predicate format string.\nRelationships\nInherits From\nNSObject\nConforms To\nNSSecureCoding\nSee Also\nAbstract superclasses\nclass HKQuantitySample\nA sample that represents a quantity, including the value and the units.\nclass HKSample\nA HealthKit sample represents a piece of data associated with a start and end time."
  },
  {
    "title": "bloodGlucose | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquantitytypeidentifier/1615455-bloodglucose",
    "html": "Discussion\n\nThese samples use mass/volume units (described in HKUnit) and measure discrete values (described in HKQuantityAggregationStyle).\n\nPlease pay attention to the following issues while creating blood glucose samples:\n\nBlood glucose samples may be measured in mg/dL (milligrams per deciliter) or mmol/L (millimoles per liter), depending on the region.\n\nThe Health app lets users select their preferred units. The Health app uses these units for both the display and manual entry of blood glucose samples.\n\nYou can access the preferred units using the preferredUnits(for:completion:) method. If your app connects to a glucose meter that uses units other than the preferred units, alert the user. You can also recommend that users change their preferred units to match the glucose meter.\n\nDon’t save samples to HealthKit when the blood glucose meter is processing control solution.\n\nTopics\nMetadata Keys\nlet HKMetadataKeyBloodGlucoseMealTime: String\nA key that indicates the relative timing of a blood glucose reading to a meal.\nSee Also\nLab and test results\nstatic let electrodermalActivity: HKQuantityTypeIdentifier\nA quantity sample type that measures electrodermal activity.\nstatic let forcedExpiratoryVolume1: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of air that can be forcibly exhaled from the lungs during the first second of a forced exhalation.\nstatic let forcedVitalCapacity: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of air that can be forcibly exhaled from the lungs after taking the deepest breath possible.\nstatic let inhalerUsage: HKQuantityTypeIdentifier\nA quantity sample type that measures the number of puffs the user takes from their inhaler.\nstatic let insulinDelivery: HKQuantityTypeIdentifier\nA quantity sample that measures the amount of insulin delivered.\nstatic let numberOfTimesFallen: HKQuantityTypeIdentifier\nA quantity sample type that measures the number of times the user fell.\nstatic let peakExpiratoryFlowRate: HKQuantityTypeIdentifier\nA quantity sample type that measures the user’s maximum flow rate generated during a forceful exhalation.\nstatic let peripheralPerfusionIndex: HKQuantityTypeIdentifier\nA quantity sample type that measures the user’s peripheral perfusion index.\nRelated Documentation\nstruct HKQuantityTypeIdentifier\nThe identifiers that create quantity type objects.\nclass HKQuantitySample\nA sample that represents a quantity, including the value and the units.\nclass HKQuantity\nAn object that stores a value for a given unit."
  },
  {
    "title": "bodyMass | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquantitytypeidentifier/1615693-bodymass",
    "html": "Discussion\n\nThese samples use mass units (described in HKUnit) and measure discrete values (described in HKQuantityAggregationStyle).\n\nSee Also\nBody measurements\nstatic let height: HKQuantityTypeIdentifier\nA quantity sample type that measures the user’s height.\nstatic let bodyMassIndex: HKQuantityTypeIdentifier\nA quantity sample type that measures the user’s body mass index.\nstatic let leanBodyMass: HKQuantityTypeIdentifier\nA quantity sample type that measures the user’s lean body mass.\nstatic let bodyFatPercentage: HKQuantityTypeIdentifier\nA quantity sample type that measures the user’s body fat percentage.\nstatic let waistCircumference: HKQuantityTypeIdentifier\nA quantity sample type that measures the user’s waist circumference.\nstatic let appleSleepingWristTemperature: HKQuantityTypeIdentifier\nA quantity sample type that records the wrist temperature during sleep.\nRelated Documentation\nstruct HKQuantityTypeIdentifier\nThe identifiers that create quantity type objects.\nclass HKQuantitySample\nA sample that represents a quantity, including the value and the units.\nclass HKQuantity\nAn object that stores a value for a given unit."
  },
  {
    "title": "HKUnit | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkunit",
    "html": "Overview\n\nThe unit class supports most standard SI units (meters, seconds, and grams), SI units with prefixes (centimeters, milliseconds and kilograms) and equivalent non-SI units (feet, minutes, and pounds). HealthKit also supports creating complex units by mathematically combining existing units.\n\nYou use units when working with HealthKit quantities. Quantities store both the value (as a double data type) and its corresponding unit. You can then request the value from the quantity in any compatible units. For more information on working with quantities, see HKQuantity.\n\nNote\n\nNumber formatters that use units (for example, EnergyFormatter, LengthFormatter, and MassFormatter) use a custom enumeration to specify their units. For example, the EnergyFormatter class uses the EnergyFormatter.Unit enum. The HKUnit class provides several methods to translate between the formatter enumerations and the HealthKit units. For more information, see Working with formatter units.\n\nUsing Units\n\nLike many HealthKit classes, the HKUnit class is not extendable and should not be subclassed.\n\nThe HKUnit class is implemented using a facade design pattern. It uses custom subclasses to represent instances of the different unit types. For example, the second() convenience method actually returns an instance of the private HKTimeUnit subclass.\n\nAdditionally, the unit class uses a single unit instance to represent all copies of the same unit in your app, wherever possible. For example, two calls to the second() method return the same unit object. This helps reduce the amount of memory used by unit instances.\n\nTopics\nWorking with units\ninit(from: String)\nReturns the unit instance described by the provided string.\nvar unitString: String\nA string representation of the unit object.\nfunc isNull() -> Bool\nReturns a Boolean value indicating whether the unit is null.\nWorking with formatter units\nclass func energyFormatterUnit(from: HKUnit) -> EnergyFormatter.Unit\nConverts a HealthKit unit object into a corresponding energy formatter enumeration value.\ninit(from: EnergyFormatter.Unit)\nConverts an energy formatter enumeration value into a corresponding HealthKit unit object.\nclass func lengthFormatterUnit(from: HKUnit) -> LengthFormatter.Unit\nConverts a HealthKit unit object into a corresponding length formatter enumeration value.\ninit(from: LengthFormatter.Unit)\nConverts a length formatter enumeration value into a corresponding HealthKit object.\nclass func massFormatterUnit(from: HKUnit) -> MassFormatter.Unit\nConverts a HealthKit unit object into a corresponding mass formatter enumeration value.\ninit(from: MassFormatter.Unit)\nConverts a mass formatter enumeration value into a corresponding HealthKit unit object.\nConstructing mass units\nclass func gram() -> Self\nReturns a HealthKit unit for measuring mass in grams.\nclass func gramUnit(with: HKMetricPrefix) -> Self\nReturns a HealthKit unit for measuring mass, using gram units with the provided prefix.\nclass func ounce() -> Self\nReturns a HealthKit unit for measuring mass in ounces.\nclass func pound() -> Self\nReturns a HealthKit unit for measuring mass in pounds.\nclass func stone() -> Self\nReturns a HealthKit unit for measuring mass in stones.\nclass func moleUnit(withMolarMass: Double) -> Self\nReturns a HealthKit unit for measuring mass in moles for a given molar mass.\nclass func moleUnit(with: HKMetricPrefix, molarMass: Double) -> Self\nReturns a HealthKit unit for measuring mass in moles, with the given prefix and molar mass.\nvar HKUnitMolarMassBloodGlucose: Double\nThe molecular mass of blood glucose, typically used to create mole units for blood glucose.\nConstructing length units\nclass func meter() -> Self\nReturns a HealthKit unit for measuring length in meters.\nclass func meterUnit(with: HKMetricPrefix) -> Self\nReturns a HealthKit unit for measuring length, using meter units with the provided prefix.\nclass func inch() -> Self\nReturns a HealthKit unit for measuring length in inches.\nclass func foot() -> Self\nReturns a HealthKit unit for measuring length in feet.\nclass func yard() -> Self\nReturns a HealthKit unit for measuring length in yards.\nclass func mile() -> Self\nReturns a HealthKit unit for measuring length in miles.\nConstructing volume units\nclass func liter() -> Self\nReturns a HealthKit unit for measuring volume in liters.\nclass func literUnit(with: HKMetricPrefix) -> Self\nReturns a HealthKit unit for measuring volume, using liter units with the provided prefix.\nclass func fluidOunceUS() -> Self\nReturns a HealthKit unit for measuring volume in US fluid ounces.\nclass func fluidOunceImperial() -> Self\nReturns a HealthKit unit for measuring volume in imperial fluid ounces.\nclass func cupUS() -> Self\nReturns a HealthKit unit for measuring volume in US cups.\nclass func cupImperial() -> Self\nReturns a HealthKit unit for measuring volume in imperial cups.\nclass func pintUS() -> Self\nReturns a HealthKit unit for measuring volume in US pints.\nclass func pintImperial() -> Self\nReturns a HealthKit unit for measuring volume in imperial pints.\nConstructing pressure units\nclass func pascal() -> Self\nReturns a HealthKit unit for measuring pressure in pascals.\nclass func pascalUnit(with: HKMetricPrefix) -> Self\nReturns a HealthKit unit for measuring pressure, using pascal units with the provided prefix.\nclass func millimeterOfMercury() -> Self\nReturns a HealthKit unit for measuring pressure in millimeters of mercury.\nclass func inchesOfMercury() -> Self\nReturns a HealthKit unit for measuring pressure in inches of mercury.\nclass func centimeterOfWater() -> Self\nReturns a HealthKit unit for measuring pressure in centimeters of water.\nclass func atmosphere() -> Self\nReturns a HealthKit unit for measuring pressure in atmospheres.\nclass func decibelAWeightedSoundPressureLevel() -> Self\nReturns a HealthKit unit for measuring the difference between the local pressure and the ambient atmospheric pressure caused by sound.\nConstructing time units\nclass func second() -> Self\nReturns a HealthKit unit for measuring time in seconds.\nclass func secondUnit(with: HKMetricPrefix) -> Self\nReturns a HealthKit unit for measuring time, using second units with the provided prefix.\nclass func minute() -> Self\nReturns a HealthKit unit for measuring time in minutes.\nclass func hour() -> Self\nReturns a HealthKit unit for measuring time in hours.\nclass func day() -> Self\nReturns a HealthKit unit for measuring time in days.\nConstructing energy units\nclass func joule() -> Self\nReturns a HealthKit unit for measuring energy in joules.\nclass func jouleUnit(with: HKMetricPrefix) -> Self\nReturns a HealthKit unit for measuring energy, using joule units with the provided prefix.\nclass func kilocalorie() -> Self\nReturns a HealthKit unit for measuring energy in kilocalories.\nclass func largeCalorie() -> Self\nReturns a HealthKit unit for measuring energy in large calories (Cal).\nclass func smallCalorie() -> Self\nReturns a HealthKit unit for measuring energy in small calories (cal).\nclass func calorie() -> Self\nReturns a HealthKit unit for measuring energy in calories.\nConstructing power units\nclass func watt() -> Self\nReturns a HealthKit unit for measuring power in watts.\nclass func wattUnit(with: HKMetricPrefix) -> Self\nReturns a HealthKit unit for measuring power, using watt units with the provided prefix.\nConstructing temperature units\nclass func degreeCelsius() -> Self\nReturns a HealthKit unit for measuring temperature in degrees Celsius.\nclass func degreeFahrenheit() -> Self\nReturns a HealthKit unit for measuring temperature in degrees Fahrenheit.\nclass func kelvin() -> Self\nReturns a HealthKit unit for measuring temperature in kelvins.\nConstructing hearing sensitivity units\nclass func decibelHearingLevel() -> Self\nReturns a HealthKit unit for measuring the intensity of a sound.\nConstructing frequency units\nclass func hertz() -> Self\nReturns a HealthKit unit for measuring frequency in hertz.\nclass func hertzUnit(with: HKMetricPrefix) -> Self\nReturns a HealthKit unit for measuring frequency in hertz with the provided prefix.\nConstructing vision units\nclass func diopter() -> Self\nReturns a HealthKit unit for measuring the optical power of a lens using diopter units.\nclass func prismDiopter() -> Self\nReturns a HealthKit unit for measuring the prismatic deviation of a lens using prism diopter units.\nConstructing angle units\nclass func degreeAngle() -> Self\nReturns a HealthKit unit for measuring angles using degrees.\nclass func radianAngle() -> Self\nReturns a HealthKit unit for measuring angles using radians.\nclass func radianAngleUnit(with: HKMetricPrefix) -> Self\nReturns a HealthKit unit for measuring angles, using radian units with the provided prefix.\nConstructing electrical conductance units\nclass func siemen() -> Self\nReturns a HealthKit unit for measuring electrical conductance in siemens.\nclass func siemenUnit(with: HKMetricPrefix) -> Self\nReturns a HealthKit unit for measuring electrical conductance, using siemen units with the provided prefix.\nElectrical potential difference\nclass func volt() -> Self\nReturns a HealthKit unit for measuring the difference in electrical potential using volts.\nclass func voltUnit(with: HKMetricPrefix) -> Self\nReturns a HealthKit unit for measuring the electrical potential difference in volts with the provided prefix.\nConstructing pharmacology units\nclass func internationalUnit() -> Self\nReturns a HealthKit unit that measures the amount of a biologically active substance in international units (IU).\nConstructing scalar units\nclass func count() -> Self\nReturns a HealthKit unit for measuring counts.\nclass func percent() -> Self\nReturns a HealthKit unit for measuring percentages.\nPerforming unit math\nfunc unitMultiplied(by: HKUnit) -> HKUnit\nCreates a complex unit by multiplying the receiving unit with another unit.\nfunc unitDivided(by: HKUnit) -> HKUnit\nCreates a complex unit by dividing the receiving unit by another unit.\nfunc unitRaised(toPower: Int) -> HKUnit\nCreates a complex unit by raising the unit to the given power.\nfunc reciprocal() -> HKUnit\nReturns a complex unit representing the unit’s reciprocal.\nConstants\nenum HKMetricPrefix\nPrefixes that can be added to SI units to change the order of magnitude.\nType Methods\nclass func lux() -> Self\nclass func luxUnit(with: HKMetricPrefix) -> Self\nRelationships\nInherits From\nNSObject\nConforms To\nNSCopying\nNSSecureCoding\nSee Also\nUnits and quantities\nDefining and converting units and quantities\nCreate and convert units and quantities.\nclass HKQuantity\nAn object that stores a value for a given unit.\nenum HKMetricPrefix\nPrefixes that can be added to SI units to change the order of magnitude."
  },
  {
    "title": "HKStatisticsCollectionQuery | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkstatisticscollectionquery",
    "html": "Overview\n\nStatistics collection queries are often used to produce data for graphs and charts. For example, you might create a statistics collection query that calculates the total number of steps for each day or the average heart rate for each hour. Like observer queries, collection queries can also act as long-running queries, receiving updates when the HealthKit store’s content changes.\n\nImportant\n\nYou can only use statistics collection queries with quantity samples. If you want to calculate statistics over workouts or correlation samples, you must perform the appropriate query and process the data yourself.\n\nStatistics collection queries are mostly immutable. You can assign the query’s initialResultsHandler and statisticsUpdateHandler properties after instantiating the object. You must set all other properties when you instantiate the object, and they can’t change.\n\nFor more information about statistics queries, see HKStatisticsQuery.\n\nTopics\nCreating Statistics Collection Objects\nExecuting Statistics Collection Queries\nCalculate statistical data for graphs and charts.\ninit(quantityType: HKQuantityType, quantitySamplePredicate: NSPredicate?, options: HKStatisticsOptions, anchorDate: Date, intervalComponents: DateComponents)\nInitializes a statistics collection query to perform the specified calculations over a set of time intervals.\nGetting and Setting Results Handlers\nvar initialResultsHandler: ((HKStatisticsCollectionQuery, HKStatisticsCollection?, Error?) -> Void)?\nThe results handler for the query’s initial results.\nvar statisticsUpdateHandler: ((HKStatisticsCollectionQuery, HKStatistics?, HKStatisticsCollection?, Error?) -> Void)?\nThe results handler for monitoring updates to the HealthKit store.\nGetting Property Data\nvar anchorDate: Date\nThe anchor date for the collection’s time intervals.\nvar intervalComponents: DateComponents\nThe date components that define the time interval for each statistics object in the collection.\nvar options: HKStatisticsOptions\nA list of options that define the type of statistical calculations performed and the way in which data from multiple sources are merged.\nRelationships\nInherits From\nHKQuery\nSee Also\nStatistics\nExecuting Statistical Queries\nCreate and run statistical queries.\nExecuting Statistics Collection Queries\nCalculate statistical data for graphs and charts.\nstruct HKStatisticsQueryDescriptor\nA query descriptor that calculates the minimum, maximum, average, or sum over a set of samples from the HealthKit store.\nclass HKStatisticsQuery\nA query that performs statistical calculations over a set of matching quantity samples, and returns the results.\nstruct HKStatisticsCollectionQueryDescriptor\nA query descriptor that gathers a collection of statistics calculated over a series of fixed-length time intervals.\nclass HKStatistics\nAn object that represents the result of calculating the minimum, maximum, average, or sum over a set of samples from the HealthKit store.\nclass HKStatisticsCollection\nAn object that manages a collection of statistics, representing the results calculated over separate time intervals.\nstruct HKStatisticsOptions\nOptions for specifying the statistic to calculate."
  },
  {
    "title": "HKBloodType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkbloodtype",
    "html": "Topics\nConstants\ncase notSet\nEither the user’s blood type is not set, or the user has not granted your app permission to read the blood type.\ncase aPositive\nThe user has an A+ blood type.\ncase aNegative\nThe user has an A– blood type.\ncase bPositive\nThe user has an B+ blood type.\ncase bNegative\nThe user has an B– blood type.\ncase abPositive\nThe user has an AB+ blood type.\ncase abNegative\nThe user has an AB– blood type.\ncase oPositive\nThe user has an O+ blood type.\ncase oNegative\nThe user has an O– blood type.\nRelationships\nConforms To\nSendable\nSee Also\nPossible Values\nclass HKBloodTypeObject\nThis class acts as a wrapper for the HKBloodType enumeration."
  },
  {
    "title": "HKBloodType.notSet | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkbloodtype/notset",
    "html": "Discussion\n\nFor more information on permissions, see HealthKit."
  },
  {
    "title": "HKBiologicalSex | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkbiologicalsex",
    "html": "Overview\n\nA person's sex is a combination of bodily characteristics including: chromosomes, hormones, internal and external reproductive organs, and secondary sex characteristics.\n\nTopics\nConstants\ncase notSet\nA constant indicating that either the user’s biological sex characteristic type is not set, or the user has not granted your app permission to read that characteristic type.\ncase female\nA constant indicating that the user is female.\ncase male\nA constant indicating that the user is male.\ncase other\nA constant indicating that the user is otherwise not categorized as either male or female.\nRelationships\nConforms To\nSendable\nSee Also\nPossible Values\nclass HKBiologicalSexObject\nThis class acts as a wrapper for the HKBiologicalSex enumeration."
  },
  {
    "title": "HKBloodTypeObject | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkbloodtypeobject",
    "html": "Topics\nGetting Blood Type Data\nvar bloodType: HKBloodType\nThe blood type.\nRelationships\nInherits From\nNSObject\nConforms To\nNSCopying\nNSSecureCoding\nSee Also\nPossible Values\nenum HKBloodType\nConstants indicating the user’s blood type."
  },
  {
    "title": "HKBiologicalSexObject | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkbiologicalsexobject",
    "html": "Topics\nGetting Biological Sex Data\nvar biologicalSex: HKBiologicalSex\nThe biological sex.\nRelationships\nInherits From\nNSObject\nConforms To\nNSCopying\nNSSecureCoding\nSee Also\nPossible Values\nenum HKBiologicalSex\nConstants indicating the user’s sex."
  },
  {
    "title": "HKBiologicalSex.notSet | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkbiologicalsex/notset",
    "html": "Discussion\n\nFor more information on permissions, see HealthKit."
  },
  {
    "title": "HKQuery | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquery",
    "html": "Overview\n\nThe HKQuery class is the basis for all the query objects that retrieve data from the HealthKit store. The HKQuery class is an abstract class. You should never instantiate it directly. Instead, you always work with one of its concrete subclasses.\n\nFilter queries using predicates\n\nAll the concrete HKQuery subclasses take a predicate. You can use this predicate to filter the samples returned by the query. When HealthKit runs a query, it converts the predicate to SQL and executes the SQL on the underlying store. This has two important side effects.\n\nPredicates improve the performance of your query, both in terms of speed and memory usage. Because the store executes the predicate, it restricts the number of HealthKit objects that it instantiates and returns.\n\nSince the store executes these predicates, it limits the type of predicates that you can use. Specifically, HealthKit provides several predicate key paths (for example, HKPredicateKeyPathUUID and HKPredicateKeyPathMetadata). You can create predicates using only these key paths.\n\nTopics\nAccessing properties\nvar predicate: NSPredicate?\nA predicate used to filter the objects returned from the HealthKit store.\nvar objectType: HKObjectType?\nThe type of objects being queried.\nvar sampleType: HKSampleType?\nThe type of objects being queried.\nCreating object predicates\nclass func predicateForObject(with: UUID) -> NSPredicate\nReturns a predicate that matches an object with the specified universally unique identifier (UUID).\nclass func predicateForObjects(with: Set<UUID>) -> NSPredicate\nReturns a predicate that matches the objects with the specified universally unique identifiers (UUIDs).\nclass func predicateForObjects(from: HKSource) -> NSPredicate\nReturns a predicate that matches all the objects that were created by the provided source.\nclass func predicateForObjects(from: Set<HKSource>) -> NSPredicate\nReturns a predicate that matches all the objects that were created by any of the provided sources.\nclass func predicateForObjects(from: Set<HKDevice>) -> NSPredicate\nReturns a predicate that matches all the objects that were created by any of the provided devices.\nclass func predicateForObjects(withDeviceProperty: String, allowedValues: Set<String>) -> NSPredicate\nReturns a predicate that matches all objects created by devices with the specified properties.\nclass func predicateForObjects(from: Set<HKSourceRevision>) -> NSPredicate\nReturns a predicate that matches all the objects that were created by any of the provided source revisions.\nclass func predicateForObjects(withMetadataKey: String) -> NSPredicate\nReturns a predicate that matches any object whose metadata contains the provided key.\nclass func predicateForObjects(withMetadataKey: String, allowedValues: [Any]) -> NSPredicate\nReturns a predicate that matches objects based on the provided metadata key and an array of target values.\nclass func predicateForObjects(withMetadataKey: String, operatorType: NSComparisonPredicate.Operator, value: Any) -> NSPredicate\nReturns a predicate that matches objects based on the provided metadata key, value, and operator.\nclass func predicateForObjectsWithNoCorrelation() -> NSPredicate\nReturns a predicate that matches all objects that are not associated with a HealthKit correlation.\nCreating sample predicates\nclass func predicateForSamples(withStart: Date?, end: Date?, options: HKQueryOptions) -> NSPredicate\nReturns a predicate for samples whose start and end dates fall within the specified time interval.\nstruct HKQueryOptions\nConstants that describe how a sample’s time period overlaps with the target time period.\nCreating quantity sample predicates\nclass func predicateForQuantitySamples(with: NSComparisonPredicate.Operator, quantity: HKQuantity) -> NSPredicate\nReturns a predicate that matches samples based on the target quantity.\nCreating category sample predicates\nclass func predicateForCategorySamples(with: NSComparisonPredicate.Operator, value: Int) -> NSPredicate\nReturns a predicate that checks a category sample’s value.\nprotocol HKCategoryValuePredicateProviding\nA protocol for objects that produce predicates that match category value samples.\nCreating clinical record predicates\nclass func predicateForClinicalRecords(from: HKSource, fhirResourceType: HKFHIRResourceType, identifier: String) -> NSPredicate\nReturns a predicate for a specific FHIR resource.\nclass func predicateForClinicalRecords(withFHIRResourceType: HKFHIRResourceType) -> NSPredicate\nReturns a predicate for a specific FHIR type.\nclass func predicateForVerifiableClinicalRecords(withRelevantDateWithin: DateInterval) -> NSPredicate\nReturns a predicate that finds verifiable health records with a relevant date within the specified range.\nCreating workout predicates\nclass func predicateForObjects(from: HKWorkout) -> NSPredicate\nReturns a predicate that matches any objects that have been associated with the provided workout.\nclass func predicateForWorkouts(with: HKWorkoutActivityType) -> NSPredicate\nReturns a predicate for matching workouts based on the type of activity.\nclass func predicateForWorkouts(activityPredicate: NSPredicate) -> NSPredicate\nReturns a predicate for matching workouts based on the associated workout activities.\nclass func predicateForWorkouts(with: NSComparisonPredicate.Operator, duration: TimeInterval) -> NSPredicate\nReturns a predicate for matching workouts based on their duration.\nclass func predicateForWorkouts(operatorType: NSComparisonPredicate.Operator, quantityType: HKQuantityType, averageQuantity: HKQuantity) -> NSPredicate\nReturns a predicate for matching workouts based the average value of an associated quantity type.\nclass func predicateForWorkouts(operatorType: NSComparisonPredicate.Operator, quantityType: HKQuantityType, maximumQuantity: HKQuantity) -> NSPredicate\nReturns a predicate for matching workout activities based the maximum value of an associated quantity type.\nclass func predicateForWorkouts(operatorType: NSComparisonPredicate.Operator, quantityType: HKQuantityType, minimumQuantity: HKQuantity) -> NSPredicate\nReturns a predicate for matching workout activities based the minimum value of an associated quantity type.\nclass func predicateForWorkouts(operatorType: NSComparisonPredicate.Operator, quantityType: HKQuantityType, sumQuantity: HKQuantity) -> NSPredicate\nReturns a predicate for matching workout activities based the sum of an associated quantity type.\nclass func predicateForWorkouts(with: NSComparisonPredicate.Operator, totalDistance: HKQuantity) -> NSPredicate\nReturns a predicate for matching workouts based on the total distance traveled.\nDeprecated\nclass func predicateForWorkouts(with: NSComparisonPredicate.Operator, totalEnergyBurned: HKQuantity) -> NSPredicate\nReturns a predicate for matching workouts based on the total energy burned.\nDeprecated\nclass func predicateForWorkouts(with: NSComparisonPredicate.Operator, totalFlightsClimbed: HKQuantity) -> NSPredicate\nReturns a predicate that matches workout samples based on the number of flights climbed.\nDeprecated\nclass func predicateForWorkouts(with: NSComparisonPredicate.Operator, totalSwimmingStrokeCount: HKQuantity) -> NSPredicate\nReturns a predicate that matches workout samples based on the number of strokes while swimming.\nDeprecated\nCreating workout activity predicates\nclass func predicateForWorkoutActivities(workoutActivityType: HKWorkoutActivityType) -> NSPredicate\nReturns a predicate for workout activities based on the type of activity performed.\nclass func predicateForWorkoutActivities(operatorType: NSComparisonPredicate.Operator, duration: TimeInterval) -> NSPredicate\nReturns a predicate for matching workout activities based on their duration.\nclass func predicateForWorkoutActivities(start: Date?, end: Date?, options: HKQueryOptions) -> NSPredicate\nReturns a predicate for workout activities that occur between the start and end date.\nclass func predicateForWorkoutActivities(operatorType: NSComparisonPredicate.Operator, quantityType: HKQuantityType, averageQuantity: HKQuantity) -> NSPredicate\nReturns a predicate for matching workout activities based the average value of an associated quantity type.\nclass func predicateForWorkoutActivities(operatorType: NSComparisonPredicate.Operator, quantityType: HKQuantityType, maximumQuantity: HKQuantity) -> NSPredicate\nReturns a predicate for matching workout activities based the maximum value of an associated quantity type.\nclass func predicateForWorkoutActivities(operatorType: NSComparisonPredicate.Operator, quantityType: HKQuantityType, minimumQuantity: HKQuantity) -> NSPredicate\nReturns a predicate for matching workout activities based the minimum value of an associated quantity type.\nclass func predicateForWorkoutActivities(operatorType: NSComparisonPredicate.Operator, quantityType: HKQuantityType, sumQuantity: HKQuantity) -> NSPredicate\nReturns a predicate for matching workout activities based the sum of an associated quantity type.\nCreating activity summary predicates\nclass func predicateForActivitySummary(with: DateComponents) -> NSPredicate\nReturns a predicate that matches the activity summary for the specified day.\nclass func predicate(forActivitySummariesBetweenStart: DateComponents, end: DateComponents) -> NSPredicate\nReturns a predicate for matching all the activity summaries that fall between the days identified by the start and end date components.\nCreating electrocardiogram predicates\nclass func predicateForElectrocardiograms(classification: HKElectrocardiogram.Classification) -> NSPredicate\nReturns a predicate that matches electrocardiogram samples with the specified classification.\nclass func predicateForElectrocardiograms(symptomsStatus: HKElectrocardiogram.SymptomsStatus) -> NSPredicate\nReturns a predicate that matches electrocardiogram samples with the specified symptom status.\nclass func predicateForObjectsAssociated(electrocardiogram: HKElectrocardiogram) -> NSPredicate\nReturns a predicate that matches symptom samples associated with the specified electrocardiogram.\nCreating predicate format strings\nUse these keys when creating a predicate format string.\nPredicate format strings\nFormatting strings for creating predicates.\nCreating sort descriptors\nHealthKit sort descriptors\nIdentifiers for sorting results.\nRelationships\nInherits From\nNSObject\nSee Also\nBasic queries\nstruct HKSampleQueryDescriptor\nA query interface that reads samples using Swift concurrency.\nclass HKSampleQuery\nA general query that returns a snapshot of all the matching samples currently saved in the HealthKit store.\nclass HKCorrelationQuery\nA query that performs complex searches based on the correlation’s contents, and returns a snapshot of all matching samples.\nclass HKQueryDescriptor\nA descriptor that specifies a set of samples based on the data type and a predicate.\nRelated Documentation\nclass HKActivitySummaryQuery\nA query for reading activity summary objects from the HealthKit store.\nclass HKAnchoredObjectQuery\nA query that returns changes to the HealthKit store, including a snapshot of new changes and continuous monitoring as a long-running query.\nclass HKDocumentQuery\nA query that returns a snapshot of all matching documents currently saved in the HealthKit store.\nclass HKObserverQuery\nA long-running query that monitors the HealthKit store and updates your app when the HealthKit store saves or deletes a matching sample.\nclass HKSourceQuery\nA query that returns a list of sources, such as apps and devices, that have saved matching queries to the HealthKit store.\nclass HKStatisticsQuery\nA query that performs statistical calculations over a set of matching quantity samples, and returns the results.\nclass HKStatisticsCollectionQuery\nA query that performs multiple statistics queries over a series of fixed-length time intervals.\nclass HKWorkoutRouteQuery\nA query to access the location data stored in a workout route."
  },
  {
    "title": "HKGlassesPrescription | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkglassesprescription",
    "html": "Overview\n\nTo create a sample that stores a glasses prescription, start by defining a specification for each eye. Each lens specification object requires a sphere parameter. This measures the lens’s strength for correcting either nearsightedness or farsightedness (measured in diopter() units).\n\n// The correction for farsightedness.\nlet sphere = HKQuantity(unit: .diopter(), doubleValue: -0.75)\n\n\nNext, create values for any of the prescription’s optional parameters. For example, if the prescription corrects for astigmatism, create the cylinder and axis values. The cylinder value uses diopter() units, while the axis uses degreeAngle().\n\n// The corrections for astigmatism.\nlet cylinder = HKQuantity(unit: .diopter(), doubleValue: -0.5)\nlet axis = HKQuantity(unit: .degreeAngle(), doubleValue: 155.0)\n\n\nTo add a multifocal correction for reading, create an addPower value using diopter() units.\n\n// Multifocal correction for reading.\nlet addPower = HKQuantity(unit: .diopter(), doubleValue: +2.00)\n\n\nTo add a correction for eye alignment, create an HKVisionPrism object.\n\n// The correction for eye alignment.\nlet prismQuantity = HKQuantity(unit: .prismDiopter(), doubleValue: +0.25)\nlet angle = HKQuantity(unit: .degreeAngle(), doubleValue: 15.0)\nlet prism = HKVisionPrism(amount: prismQuantity,\n                          angle: angle,\n                          eye: .right)\n\n\nTo add information about the distance between the eye and the back of the lens, or the pupil and the center of the nose, create vertexDistance, nearDistance, and farDistance values. All of these use millimeters.\n\n// Distance between the back of the lens and the eye.\nlet vertexDistance = HKQuantity(unit: HKUnit.meterUnit(with: .milli), doubleValue: 14.0)\n\n\n// Set the distance between the pupil and the center of the nose when looking at a nearby object.\nlet nearDistance = HKQuantity(unit: HKUnit.meterUnit(with: .milli), doubleValue: 25.0)\n\n\n// Set the distance between the pupil and the center of the nose when looking far away.\nlet farDistance = HKQuantity(unit: HKUnit.meterUnit(with: .milli), doubleValue: 27.0)\n\n\nThen you can create the HKGlassesLensSpecification lens specification.\n\n// The prescription for the right eye.\nlet glassesRightEye = HKGlassesLensSpecification(sphere: sphere,\n                                                 cylinder: cylinder,\n                                                 axis: axis,\n                                                 addPower: addPower,\n                                                 vertexDistance: vertexDistance,\n                                                 prism: prism,\n                                                 farPupillaryDistance: farDistance,\n                                                 nearPupillaryDistance: nearDistance)\n\n\nAfter you create your lens specifications, you can create an HKGlassesPrescription sample.\n\n// The date the doctor issued the prescription.\nlet dateIssued = Date()\n\n\n// The date when the prescription expires.\nlet expirationDate = dateIssued.addingTimeInterval(60 * 24 * 365)\n\n\n// The glasses prescription.\nlet prescription = HKGlassesPrescription(rightEyeSpecification: glassesRightEye,\n                                         leftEyeSpecification: glassesLeftEye,\n                                         dateIssued: dateIssued,\n                                         expirationDate: expirationDate,\n                                         device: HKDevice.local(),\n                                         metadata: nil)\n\n\nThen save the sample to the HealthKit store.\n\n// Save the sample to the HealthKit store.\ndo {\n    try await store.save(prescription)\n} catch {\n    // Handle the error here.\n    fatalError(\"*** An error occurred while saving the prescription sample to the HealthKit store \\(error.localizedDescription) ***\")\n}\n\n\nFinally, add an image or PDF of the prescription to the sample as an attachment.\n\n// Get the attachment store.\nlet attachmentStore = HKAttachmentStore(healthStore: store)\n\n\n// Attach the image to the sample.\ndo {\n    _ = try await attachmentStore.addAttachment(to: prescription,\n                                                name: \"Glasses Prescription\",\n                                                contentType: type,\n                                                url: url)\n} catch {\n    // Handle the error.\n    fatalError(\"*** An error occurred while attaching the image: \\(error.localizedDescription) ***\")\n}\n\n\nImportant\n\nSome regions may require an image of the original prescription to validate the prescription record. You can add an image or PDF of the prescription as an attachment. For more information about how to add an attachment, see HKAttachmentStore.\n\nTopics\nCreating glasses prescription samples\ninit(rightEyeSpecification: HKGlassesLensSpecification?, leftEyeSpecification: HKGlassesLensSpecification?, dateIssued: Date, expirationDate: Date?, device: HKDevice?, metadata: [String : Any]?)\nCreates a new glasses prescription sample.\nAccessing the glasses prescription data\nvar leftEye: HKGlassesLensSpecification?\nThe lens specification for the left eye.\nvar rightEye: HKGlassesLensSpecification?\nThe lens specification for the right eye.\nAdding metadata\nlet HKMetadataKeyGlassesPrescriptionDescription: String\nA description of the glasses prescription.\nRelationships\nInherits From\nHKVisionPrescription\nConforms To\nNSCopying\nNSSecureCoding\nSee Also\nVision prescriptions\nclass HKVisionPrescription\nA sample that stores a vision prescription.\nclass HKContactsPrescription\nA sample that store a prescription for contacts.\nclass HKGlassesLensSpecification\nAn object that contains the glasses prescription data for one eye.\nclass HKContactsLensSpecification\nAn object that contains the contacts prescription data for one eye.\nclass HKLensSpecification\nAn abstract superclass for lens specifications.\nclass HKVisionPrism\nPrescription data for eye alignment.\nclass HKPrescriptionType\nA type that identifies samples that store a prescription."
  },
  {
    "title": "HKVisionPrescription | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkvisionprescription",
    "html": "Overview\n\nUse this class to create an image-only prescription. Here, you attach the prescription as an image or PDF to a simple sample. The sample contains only basic information about the prescription, such as the issue and expiration dates. To see the prescription data, people must view the attached image or PDF.\n\nImportant\n\nSome regions may require an image of the original prescription to validate the prescription record.\n\nTo create an image-only prescription, start by creating an HKVisionPrescription sample object.\n\n// Create a minimal prescription sample that just holds an image attachment.\nlet prescription = HKVisionPrescription(type: .glasses,\n                                        dateIssued: Date(),\n                                        expirationDate: nil,\n                                        device: HKDevice.local(),\n                                        metadata: nil)\n\n\nNext, save the sample to the HealthKit store.\n\n// Save the sample to the HealthKit store.\ndo {\n    try await store.save(prescription)\n} catch {\n    // Handle the error here.\n    fatalError(\"*** An error occurred while saving the prescription sample to the HealthKit store \\(error.localizedDescription) ***\")\n}\n\n\nThen, you can attach the image or PDF to the sample.\n\n// Get the attachment store.\nlet attachmentStore = HKAttachmentStore(healthStore: store)\n\n\n// Attach the image to the sample.\ndo {\n    _ = try await attachmentStore.addAttachment(to: prescription,\n                                                name: \"Glasses Prescription\",\n                                                contentType: type,\n                                                url: url)\n} catch {\n    // Handle the error.\n    fatalError(\"*** An error occurred while attaching the image: \\(error.localizedDescription) ***\")\n}\n\n\nFor more information about adding images or pdfs as attachments, see HKAttachmentStore. To create a vision prescription sample that contains the full data for the prescription, use HKGlassesPrescription or HKContactsPrescription instead.\n\nTopics\nCreating vision prescription samples\ninit(type: HKVisionPrescriptionType, dateIssued: Date, expirationDate: Date?, device: HKDevice?, metadata: [String : Any]?)\nCreates a new vision prescription sample.\nAccessing the prescription data\nvar prescriptionType: HKVisionPrescriptionType\nThe type of vision prescription.\nenum HKVisionPrescriptionType\nThe type of vision prescription, for example a prescription for glasses or for contacts.\nvar dateIssued: Date\nThe date when the doctor issued the prescription.\nvar expirationDate: Date?\nThe date when the prescription expires.\nRelationships\nInherits From\nHKSample\nConforms To\nNSCopying\nNSSecureCoding\nSee Also\nVision prescriptions\nclass HKGlassesPrescription\nA sample that stores a prescription for glasses.\nclass HKContactsPrescription\nA sample that store a prescription for contacts.\nclass HKGlassesLensSpecification\nAn object that contains the glasses prescription data for one eye.\nclass HKContactsLensSpecification\nAn object that contains the contacts prescription data for one eye.\nclass HKLensSpecification\nAn abstract superclass for lens specifications.\nclass HKVisionPrism\nPrescription data for eye alignment.\nclass HKPrescriptionType\nA type that identifies samples that store a prescription."
  },
  {
    "title": "HKDocumentType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkdocumenttype",
    "html": "Overview\n\nTo create a document type instance, use the HKObjectType class’s documentType(forIdentifier:) convenience method.\n\nSubclassing Notes\n\nLike many HealthKit classes, document types are not extensible and should not be subclassed.\n\nAdditionally, this class reuses the same instance whenever possible. Letting multiple queries share the same document type helps reduce the overall memory usage.\n\nTopics\nCreating Document Types\ninit(HKDocumentTypeIdentifier)\nCreates a document type using the provided identifier.\nRelationships\nInherits From\nHKSampleType\nConforms To\nSendable\nSee Also\nMedical records\nAccessing Health Records\nRead clinical record data from the HealthKit store.\nAccessing Sample Data in the Simulator\nSet up sample accounts to build and test your app.\nAccessing a User’s Clinical Records\nRequest authorization to query HealthKit for a user’s clinical records and display them in your app.\nAccessing Data from a SMART Health Card\nQuery for and validate a verifiable clinical record.\nclass HKClinicalRecord\nA sample that stores a clinical record.\nclass HKFHIRResource\nAn object containing Fast Healthcare Interoperability Resources (FHIR) data.\nclass HKVerifiableClinicalRecord\nA sample that represents the contents of a SMART Health Card or EU Digital COVID Certificate.\nclass HKVerifiableClinicalRecordSubject\nThe subject associated with a signed clinical record.\nclass HKCDADocumentSample\nA Clinical Document Architecture (CDA) sample that stores a single document.\nclass HKDocumentSample\nAn abstract class that represents a health document in the HealthKit store.\nstatic let CDA: HKDocumentTypeIdentifier\nThe CDA Document type identifier, used when requesting permission to read or share CDA documents."
  },
  {
    "title": "authorizationViewControllerPresenter | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkhealthstore/4155631-authorizationviewcontrollerprese",
    "html": "Discussion\n\nBy default, the system infers the correct view controller to show HealthKit’s authorization sheet. In some cases, you can improve the user experience by explicitly defining how the system presents the authentication sheets. In particular, consider setting this property when using HealthKit in an iPadOS app.\n\nSee Also\nAccessing HealthKit\nfunc authorizationStatus(for: HKObjectType) -> HKAuthorizationStatus\nReturns the app’s authorization status for sharing the specified data type.\nenum HKAuthorizationStatus\nConstants indicating the authorization status for a particular data type.\nfunc getRequestStatusForAuthorization(toShare: Set<HKSampleType>, read: Set<HKObjectType>, completion: (HKAuthorizationRequestStatus, Error?) -> Void)\nIndicates whether the system presents the user with a permission sheet if your app requests authorization for the provided types.\nenum HKAuthorizationRequestStatus\nValues that indicate whether your app needs to request authorization from the user.\nclass func isHealthDataAvailable() -> Bool\nReturns a Boolean value that indicates whether HealthKit is available on this device.\nfunc supportsHealthRecords() -> Bool\nReturns a Boolean value that indicates whether the current device supports clinical records.\nfunc requestAuthorization(toShare: Set<HKSampleType>?, read: Set<HKObjectType>?, completion: (Bool, Error?) -> Void)\nRequests permission to save and read the specified data types.\nfunc requestAuthorization(toShare: Set<HKSampleType>, read: Set<HKObjectType>)\nAsynchronously requests permission to save and read the specified data types.\nfunc requestPerObjectReadAuthorization(for: HKObjectType, predicate: NSPredicate?, completion: (Bool, Error?) -> Void)\nAsynchronously requests permission to read a data type that requires per-object authorization (such as vision prescriptions).\nfunc handleAuthorizationForExtension(completion: (Bool, Error?) -> Void)\nRequests permission to save and read the data types specified by an extension."
  },
  {
    "title": "HKObjectType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkobjecttype",
    "html": "Overview\n\nThe HKObjectType class is an abstract class. Don’t instantiate an HKObjectType object directly. Instead, instantiate one of the following concrete subclasses:\n\nHKActivitySummaryType\n\nHKCategoryType\n\nHKCorrelationType\n\nHKCharacteristicType\n\nHKDocumentType\n\nHKQuantityType\n\nHKSeriesType\n\nHKWorkoutType\n\nThe HKObjectType class provides a convenience method to create each of these subclasses.\n\nWork with Object Types\n\nLike many HealthKit classes, HealthKit object types aren’t extensible. Don’t subclass these classes.\n\nAdditionally, wherever possible, this class uses a single instance to represent all copies of the same type. For example, if you make two calls to the quantityType(forIdentifier:) method with the same identifier, the system returns the same instance. Reusing object types helps reduce HealthKit’s overall memory usage.\n\nTopics\nCreating quantity types\nclass func quantityType(forIdentifier: HKQuantityTypeIdentifier) -> HKQuantityType?\nReturns the shared quantity type for the provided identifier.\nstruct HKQuantityTypeIdentifier\nThe identifiers that create quantity type objects.\nCreating category types\nclass func categoryType(forIdentifier: HKCategoryTypeIdentifier) -> HKCategoryType?\nReturns the shared category type for the provided identifier.\nstruct HKCategoryTypeIdentifier\nIdentifiers for creating category types.\nCreating characteristic types\nclass func characteristicType(forIdentifier: HKCharacteristicTypeIdentifier) -> HKCharacteristicType?\nReturns the shared characteristic type for the provided identifier.\nstruct HKCharacteristicTypeIdentifier\nThe identifiers that create characteristic type objects.\nCreating correlation types\nclass func correlationType(forIdentifier: HKCorrelationTypeIdentifier) -> HKCorrelationType?\nReturns the shared correlation type for the provided identifier.\nstruct HKCorrelationTypeIdentifier\nThe identifiers that create correlation type objects.\nCreating workout types\nclass func workoutType() -> HKWorkoutType\nReturns the shared HKWorkoutType object.\nCreating activity summary types\nclass func activitySummaryType() -> HKActivitySummaryType\nReturns the shared activity summary type.\nCreating electrocardiogram types\nclass func electrocardiogramType() -> HKElectrocardiogramType\nReturns the shared electrocardiogram type.\nCreating audiogram sample types\nclass func audiogramSampleType() -> HKAudiogramSampleType\nReturns an audiogram sample type.\nCreating vision prescription types\nclass func visionPrescriptionType() -> HKPrescriptionType\nReturns a shared vision prescription type object.\nCreating clinical record types\nclass func clinicalType(forIdentifier: HKClinicalTypeIdentifier) -> HKClinicalType?\nReturns the shared clinical type for the provided identifier.\nCreating series types\nclass func seriesType(forIdentifier: String) -> HKSeriesType?\nReturns the shared series type for the provided identifier.\nCreating document types\nclass func documentType(forIdentifier: HKDocumentTypeIdentifier) -> HKDocumentType?\nReturns the shared document type for the provided identifier.\nstruct HKDocumentTypeIdentifier\nThe identifiers for documents.\nGetting property data\nvar identifier: String\nA unique string identifying the HealthKit object type.\nfunc requiresPerObjectAuthorization() -> Bool\nReturns a Boolean that indicates whether the data type requires per-object authorization.\nRelationships\nInherits From\nNSObject\nConforms To\nNSCopying\nNSSecureCoding\nSendable\nSee Also\nObject type subclasses\nclass HKCharacteristicType\nA type that represents data that doesn’t typically change over time.\nclass HKQuantityType\nA type that identifies samples that store numerical values.\nclass HKCategoryType\nA type that identifies samples that contain a value from a small set of possible values.\nclass HKCorrelationType\nA type that identifies samples that group multiple subsamples.\nclass HKActivitySummaryType\nA type that identifies activity summary objects.\nclass HKAudiogramSampleType\nA type that identifies samples that contain audiogram data.\nclass HKElectrocardiogramType\nA type that identifies samples containing electrocardiogram data.\nclass HKSeriesType\nA type that indicates the data stored in a series sample.\nclass HKClinicalType\nA type that identifies samples that contain clinical record data.\nclass HKWorkoutType\nA type that identifies samples that store information about a workout.\nclass HKSampleType\nAn abstract superclass for all classes that identify a specific type of sample when working with the HealthKit store."
  },
  {
    "title": "HKCharacteristicType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkcharacteristictype",
    "html": "Overview\n\nThe HKCharacteristicType class is a concrete subclass of the HKObjectType class. To create a characteristic type instance, use the object type’s characteristicType(forIdentifier:) convenience method.\n\nUnlike the other object types, characteristic types cannot be used to create and save new HealthKit objects. Instead, users must enter and edit their characteristic data using the Health app. Similarly, you cannot create queries for characteristic types. Instead, use the HealthKit store to access the data (see Reading characteristic data).\n\nHealthKit provides five characteristic types: biological sex, blood type, birthdate, Fitzpatrick skin type, and wheelchair use. These types are used only when asking for permission to read data from the HealthKit store.\n\nTopics\nCreating Characteristic Types\ninit(HKCharacteristicTypeIdentifier)\nCreates a characteristic type using the provided identifier.\nRelationships\nInherits From\nHKObjectType\nConforms To\nSendable\nSee Also\nObject type subclasses\nclass HKQuantityType\nA type that identifies samples that store numerical values.\nclass HKCategoryType\nA type that identifies samples that contain a value from a small set of possible values.\nclass HKCorrelationType\nA type that identifies samples that group multiple subsamples.\nclass HKActivitySummaryType\nA type that identifies activity summary objects.\nclass HKAudiogramSampleType\nA type that identifies samples that contain audiogram data.\nclass HKElectrocardiogramType\nA type that identifies samples containing electrocardiogram data.\nclass HKSeriesType\nA type that indicates the data stored in a series sample.\nclass HKClinicalType\nA type that identifies samples that contain clinical record data.\nclass HKWorkoutType\nA type that identifies samples that store information about a workout.\nclass HKObjectType\nAn abstract superclass with subclasses that identify a specific type of data for the HealthKit store.\nclass HKSampleType\nAn abstract superclass for all classes that identify a specific type of sample when working with the HealthKit store.\nRelated Documentation\nstruct HKCharacteristicTypeIdentifier\nThe identifiers that create characteristic type objects."
  },
  {
    "title": "HKCorrelationType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkcorrelationtype",
    "html": "Overview\n\nThe HKCorrelationType class is a concrete subclass of the HKObjectType class. To create a correlation type instance, use the object type’s correlationType(forIdentifier:) conveniance method.\n\nUse correlation types to:\n\nRequest permission to read or write matching quantity samples.\n\nCreate and share matching quantity samples.\n\nQuery for matching quantity samples.\n\nHealthKit provides two correlation types: blood pressure and food.\n\nUsing Correlation Types\n\nLike many HealthKit classes, correlation types are not extensible and should not be subclassed.\n\nThis class reuses the same instance whenever possible. Letting multiple queries share the same workout type helps reduce the overall memory usage.\n\nTopics\nCreating Correlation Types\ninit(HKCorrelationTypeIdentifier)\nCreates a correlation type using the provided identifier.\nRelationships\nInherits From\nHKSampleType\nConforms To\nSendable\nSee Also\nObject type subclasses\nclass HKCharacteristicType\nA type that represents data that doesn’t typically change over time.\nclass HKQuantityType\nA type that identifies samples that store numerical values.\nclass HKCategoryType\nA type that identifies samples that contain a value from a small set of possible values.\nclass HKActivitySummaryType\nA type that identifies activity summary objects.\nclass HKAudiogramSampleType\nA type that identifies samples that contain audiogram data.\nclass HKElectrocardiogramType\nA type that identifies samples containing electrocardiogram data.\nclass HKSeriesType\nA type that indicates the data stored in a series sample.\nclass HKClinicalType\nA type that identifies samples that contain clinical record data.\nclass HKWorkoutType\nA type that identifies samples that store information about a workout.\nclass HKObjectType\nAn abstract superclass with subclasses that identify a specific type of data for the HealthKit store.\nclass HKSampleType\nAn abstract superclass for all classes that identify a specific type of sample when working with the HealthKit store.\nRelated Documentation\nstruct HKCorrelationTypeIdentifier\nThe identifiers that create correlation type objects.\nclass HKCorrelation\nA sample that groups multiple related samples into a single entry."
  },
  {
    "title": "HKQuantityType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquantitytype",
    "html": "Overview\n\nThe HKQuantityType class is a concrete subclass of the HKObjectType class. To create a quantity type instance, use the object type’s quantityType(forIdentifier:) convenience method.\n\nUse quantity types to:\n\nRequest permission to read or write matching quantity samples.\n\nCreate and share matching quantity samples.\n\nQuery for matching quantity samples.\n\nTopics\nCreating Quantity Types\ninit(HKQuantityTypeIdentifier)\nCreates a quantity type using the provided identifier.\nAccessing Quantity Type Data\nvar aggregationStyle: HKQuantityAggregationStyle\nThe aggregation style for the given quantity type.\nenum HKQuantityAggregationStyle\nConstant values that describe how quantities can be aggregated over time.\nfunc `is`(compatibleWith: HKUnit) -> Bool\nReturns a Boolean value that indicates whether the quantity type is compatible with the given unit.\nRelationships\nInherits From\nHKSampleType\nConforms To\nSendable\nSee Also\nObject type subclasses\nclass HKCharacteristicType\nA type that represents data that doesn’t typically change over time.\nclass HKCategoryType\nA type that identifies samples that contain a value from a small set of possible values.\nclass HKCorrelationType\nA type that identifies samples that group multiple subsamples.\nclass HKActivitySummaryType\nA type that identifies activity summary objects.\nclass HKAudiogramSampleType\nA type that identifies samples that contain audiogram data.\nclass HKElectrocardiogramType\nA type that identifies samples containing electrocardiogram data.\nclass HKSeriesType\nA type that indicates the data stored in a series sample.\nclass HKClinicalType\nA type that identifies samples that contain clinical record data.\nclass HKWorkoutType\nA type that identifies samples that store information about a workout.\nclass HKObjectType\nAn abstract superclass with subclasses that identify a specific type of data for the HealthKit store.\nclass HKSampleType\nAn abstract superclass for all classes that identify a specific type of sample when working with the HealthKit store.\nRelated Documentation\nstruct HKQuantityTypeIdentifier\nThe identifiers that create quantity type objects.\nclass HKQuantitySample\nA sample that represents a quantity, including the value and the units."
  },
  {
    "title": "HKCategoryType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkcategorytype",
    "html": "Overview\n\nThe HKCategoryType class is a concrete subclass of the HKObjectType class. To create a category type instance, use the object type’s categoryType(forIdentifier:) convenience method.\n\nUse category types to:\n\nRequest permission to read or write matching quantity samples.\n\nCreate and share matching quantity samples.\n\nQuery for matching quantity samples.\n\nTopics\nCreating Category Types\ninit(HKCategoryTypeIdentifier)\nCreates a category type using the provided identifier.\nRelationships\nInherits From\nHKSampleType\nConforms To\nSendable\nSee Also\nObject type subclasses\nclass HKCharacteristicType\nA type that represents data that doesn’t typically change over time.\nclass HKQuantityType\nA type that identifies samples that store numerical values.\nclass HKCorrelationType\nA type that identifies samples that group multiple subsamples.\nclass HKActivitySummaryType\nA type that identifies activity summary objects.\nclass HKAudiogramSampleType\nA type that identifies samples that contain audiogram data.\nclass HKElectrocardiogramType\nA type that identifies samples containing electrocardiogram data.\nclass HKSeriesType\nA type that indicates the data stored in a series sample.\nclass HKClinicalType\nA type that identifies samples that contain clinical record data.\nclass HKWorkoutType\nA type that identifies samples that store information about a workout.\nclass HKObjectType\nAn abstract superclass with subclasses that identify a specific type of data for the HealthKit store.\nclass HKSampleType\nAn abstract superclass for all classes that identify a specific type of sample when working with the HealthKit store.\nRelated Documentation\nstruct HKCategoryTypeIdentifier\nIdentifiers for creating category types.\nclass HKCategorySample\nA sample with values from a short list of possible values."
  },
  {
    "title": "HKSampleType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hksampletype",
    "html": "Overview\n\nThe HKSampleType class is an abstract subclass of the HKObjectType class, used to represent data samples. Never instantiate an HKSampleType object directly. Instead, work with one of its concrete subclasses: HKCategoryType, HKCorrelationType, HKQuantityType, or HKWorkoutType classes.\n\nTopics\nChecking the Duration Restriction\nvar isMinimumDurationRestricted: Bool\nA Boolean value that indicates whether samples of this type have a minimum time interval between the start and end dates.\nvar minimumAllowedDuration: TimeInterval\nThe minimum duration if the sample type has a restricted duration.\nvar isMaximumDurationRestricted: Bool\nA Boolean value that indicates whether samples of this type have a maximum time interval between the start and end dates.\nvar maximumAllowedDuration: TimeInterval\nThe maximum duration if the sample type has a restricted duration.\nChecking on Recalibrating Estimates\nvar allowsRecalibrationForEstimates: Bool\nA Boolean value that indicates whether HealthKit supports recalibrating the prediction algorithm used to produce estimates for this sample type.\nRelationships\nInherits From\nHKObjectType\nConforms To\nSendable\nSee Also\nObject type subclasses\nclass HKCharacteristicType\nA type that represents data that doesn’t typically change over time.\nclass HKQuantityType\nA type that identifies samples that store numerical values.\nclass HKCategoryType\nA type that identifies samples that contain a value from a small set of possible values.\nclass HKCorrelationType\nA type that identifies samples that group multiple subsamples.\nclass HKActivitySummaryType\nA type that identifies activity summary objects.\nclass HKAudiogramSampleType\nA type that identifies samples that contain audiogram data.\nclass HKElectrocardiogramType\nA type that identifies samples containing electrocardiogram data.\nclass HKSeriesType\nA type that indicates the data stored in a series sample.\nclass HKClinicalType\nA type that identifies samples that contain clinical record data.\nclass HKWorkoutType\nA type that identifies samples that store information about a workout.\nclass HKObjectType\nAn abstract superclass with subclasses that identify a specific type of data for the HealthKit store."
  },
  {
    "title": "HKWorkoutType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkouttype",
    "html": "Overview\n\nThe HKWorkoutType class is a concrete subclass of the HKObjectType class. To create a workout type instances, use the workoutType() convenience method.\n\nAll workouts use the same workout type instance.\n\nRelationships\nInherits From\nHKSampleType\nConforms To\nSendable\nSee Also\nSamples\nAdding samples to a workout\nCreate associated samples that add details to a workout.\nAccessing condensed workout samples\nRead series data from condensed workouts.\nDividing a HealthKit workout into activities\nPartition multisport and interval workouts into activities that represent the different parts of the workout.\nclass HKWorkout\nA workout sample that stores information about a single physical activity.\nclass HKWorkoutActivity\nAn object that describes an activity within a longer workout.\nclass HKWorkoutBuilder\nA builder object that incrementally constructs a workout.\nlet HKWorkoutTypeIdentifier: String\nThe workout type identifier.\nenum HKWorkoutActivityType\nThe type of activity performed during a workout.\nenum HKWorkoutSessionType\nThe type of session.\nclass HKWorkoutEvent\nAn object representing an important event during a workout."
  },
  {
    "title": "Accessing Data from a SMART Health Card | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/samples/accessing_data_from_a_smart_health_card",
    "html": "Overview\n\nNote\n\nThis sample code project is associated with WWDC21 session 10089: Explore Verifiable Health Records.\n\nConfigure the Sample Code Project\n\nBefore you run the sample code project in Xcode:\n\nIn Simulator, open Safari, and navigate to https://spec.smarthealth.cards/examples/.\n\nDownload one of the SMART Health Cards (like example-00-e-file.smart-health-card).\n\nAfter the file downloads, tap the download arrow, then select Downloads from the pop-up menu. You can also find the downloaded SMART Health Cards in Files (Browse > On My iPhone > Downloads).\n\nSelect the health card, and follow the instructions to add the card to Health.\n\nSee Also\nMedical records\nAccessing Health Records\nRead clinical record data from the HealthKit store.\nAccessing Sample Data in the Simulator\nSet up sample accounts to build and test your app.\nAccessing a User’s Clinical Records\nRequest authorization to query HealthKit for a user’s clinical records and display them in your app.\nclass HKClinicalRecord\nA sample that stores a clinical record.\nclass HKFHIRResource\nAn object containing Fast Healthcare Interoperability Resources (FHIR) data.\nclass HKVerifiableClinicalRecord\nA sample that represents the contents of a SMART Health Card or EU Digital COVID Certificate.\nclass HKVerifiableClinicalRecordSubject\nThe subject associated with a signed clinical record.\nclass HKCDADocumentSample\nA Clinical Document Architecture (CDA) sample that stores a single document.\nclass HKDocumentSample\nAn abstract class that represents a health document in the HealthKit store.\nstatic let CDA: HKDocumentTypeIdentifier\nThe CDA Document type identifier, used when requesting permission to read or share CDA documents.\nclass HKDocumentType\nA sample type used to create queries for documents."
  },
  {
    "title": "height | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquantitytypeidentifier/1615039-height",
    "html": "Discussion\n\nThese samples use length units (described in HKUnit) and measure discrete values (described in HKQuantityAggregationStyle).\n\nSee Also\nBody measurements\nstatic let bodyMass: HKQuantityTypeIdentifier\nA quantity sample type that measures the user’s weight.\nstatic let bodyMassIndex: HKQuantityTypeIdentifier\nA quantity sample type that measures the user’s body mass index.\nstatic let leanBodyMass: HKQuantityTypeIdentifier\nA quantity sample type that measures the user’s lean body mass.\nstatic let bodyFatPercentage: HKQuantityTypeIdentifier\nA quantity sample type that measures the user’s body fat percentage.\nstatic let waistCircumference: HKQuantityTypeIdentifier\nA quantity sample type that measures the user’s waist circumference.\nstatic let appleSleepingWristTemperature: HKQuantityTypeIdentifier\nA quantity sample type that records the wrist temperature during sleep.\nRelated Documentation\nstruct HKQuantityTypeIdentifier\nThe identifiers that create quantity type objects.\nclass HKQuantitySample\nA sample that represents a quantity, including the value and the units.\nclass HKQuantity\nAn object that stores a value for a given unit."
  },
  {
    "title": "HKSample | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hksample",
    "html": "Overview\n\nThe HKSample class is an abstract class. You should never instantiate a HKSample object directly. Instead, you always work with one of its concrete subclasses: HKCategorySample, HKQuantitySample, HKCorrelation, or HKWorkout classes.\n\nHealthKit samples are all immutable: You set the sample’s properties when you create it, and they cannot change.\n\nIf the sample represents data over a duration, the start time must be earlier than the end time. If the sample represents data at a particular instant, the start and end times can be the same.\n\nTopics\nAccessing the Sample’s Data\nvar startDate: Date\nThe sample’s start date.\nvar endDate: Date\nThe sample’s end date.\nvar hasUndeterminedDuration: Bool\nIndicates whether the sample has an unknown duration.\nvar sampleType: HKSampleType\nThe sample type.\nSpecifying Sort Identifiers\nlet HKSampleSortIdentifierStartDate: String\nA constant for sorting samples based on their start date.\nlet HKSampleSortIdentifierEndDate: String\nA constant for sorting samples based on their end date.\nSpecifying Predicate Key Paths\nlet HKPredicateKeyPathStartDate: String\nThe key path for accessing the sample’s start date.\nlet HKPredicateKeyPathEndDate: String\nThe key path for accessing the sample’s end date.\nRelationships\nInherits From\nHKObject\nSee Also\nAbstract superclasses\nclass HKQuantitySample\nA sample that represents a quantity, including the value and the units.\nclass HKObject\nA piece of data that can be stored inside the HealthKit store."
  },
  {
    "title": "HKQuantity | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkquantity",
    "html": "Overview\n\nHealthKit uses quantity objects to store numerical data. When you create a quantity, you provide both the quantity’s value and unit.\n\nQuantities are immutable objects: Their values are set when the object is first created and cannot change.\n\nConverting Units\n\nYou can request the value from a quantity object in any compatible units. For example, if you create a length quantity in feet, you can then request the length in meters. The quantity object automatically converts its value to the requested units.\n\nUsing Quantities\n\nLike many HealthKit classes, the HKQuantity class is not extendible and should not be subclassed. To help promote sharing data between apps, HKQuantity objects use only the units defined by the HKUnit class.\n\nTopics\nCreating Quantities\ninit(unit: HKUnit, doubleValue: Double)\nInstantiates and returns a new quantity object.\nWorking With Units\nfunc `is`(compatibleWith: HKUnit) -> Bool\nReturns a boolean value indicating whether the quantity is compatible with the provided unit.\nfunc doubleValue(for: HKUnit) -> Double\nReturns the quantity’s value in the provided unit.\nComparing Quantities\nfunc compare(HKQuantity) -> ComparisonResult\nCompares two values after converting them to the same units.\nRelationships\nInherits From\nNSObject\nConforms To\nNSCopying\nNSSecureCoding\nSendable\nSee Also\nUnits and quantities\nDefining and converting units and quantities\nCreate and convert units and quantities.\nclass HKUnit\nA class for managing the units of measure within HealthKit.\nenum HKMetricPrefix\nPrefixes that can be added to SI units to change the order of magnitude."
  },
  {
    "title": "quantityType(forIdentifier:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkobjecttype/1615298-quantitytype",
    "html": "Parameters\nidentifier\n\nA quantity type identifier. For a list of valid identifiers, see HKQuantityTypeIdentifier.\n\nReturn Value\n\nThe shared HKQuantityType instance based on the provided identifier.\n\nDiscussion\n\nThis method returns an instance of the HKQuantityType concrete subclass. HealthKit uses quantity types to create samples that store a numerical value. Use quantity type instances to create quantity samples that you can save in the HealthKit store. For more information, see HKQuantitySample.\n\nSee Also\nCreating quantity types\nstruct HKQuantityTypeIdentifier\nThe identifiers that create quantity type objects."
  },
  {
    "title": "HKError.Code.errorAuthorizationDenied | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkerror/code/errorauthorizationdenied",
    "html": "Discussion\n\nThis error occurs only when your app attempts to save data. If your app isn’t authorized to query data, it receives only the data that the app has saved into HealthKit. For more information on setting up HealthKit, see HealthKit.\n\nSee Also\nErrors\ncase errorHealthDataUnavailable\nHealthKit accessed on an unsupported device, such as an iPad.\ncase errorHealthDataRestricted\nA Mobile Device Management (MDM) profile restricts the use of HealthKit on this device.\ncase errorInvalidArgument\nThe app passed an invalid argument to the HealthKit API.\ncase errorAuthorizationNotDetermined\nThe app hasn’t yet asked the user for the authorization required to complete the task.\ncase errorRequiredAuthorizationDenied\nThe user hasn’t granted the application authorization to access all the required clinical record types.\ncase errorDatabaseInaccessible\nThe HealthKit data is unavailable because it’s protected and the device is locked.\ncase errorUserCanceled\nThe user canceled the operation.\ncase errorAnotherWorkoutSessionStarted\nAnother app started a workout session.\ncase errorUserExitedWorkoutSession\nThe user exited your application while a workout session was running.\ncase errorNoData\nData is unavailable for the requested query and predicate."
  },
  {
    "title": "hashValue | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkerror/3727560-hashvalue",
    "html": "Discussion\n\nHash values aren’t guaranteed to be equal across different executions of your program. Don’t save hash values to use during a future execution.\n\nSee Also\nComparing errors\nstatic func == (HKError, HKError) -> Bool\nReturns a Boolean value that indicates whether two errors are the same.\nstatic func != (HKError, HKError) -> Bool\nReturns a Boolean value that indicates whether two values aren’t equal.\nfunc hash(into: inout Hasher)\nHashes the essential components of a value by feeding them to the given hasher."
  },
  {
    "title": "HealthKit Constants | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/healthkit_constants",
    "html": "Topics\nConstants\nlet HKMetadataKeyMaximumLightIntensity: String"
  },
  {
    "title": "==(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkerror/3727557",
    "html": "Parameters\nlhs\n\nAn error to compare.\n\nrhs\n\nAnother error to compare.\n\nSee Also\nComparing errors\nstatic func != (HKError, HKError) -> Bool\nReturns a Boolean value that indicates whether two values aren’t equal.\nfunc hash(into: inout Hasher)\nHashes the essential components of a value by feeding them to the given hasher.\nvar hashValue: Int\nThe hash value."
  },
  {
    "title": "hash(into:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkerror/3727559-hash",
    "html": "Parameters\nhasher\n\nThe hasher to use when combining the components of this instance.\n\nSee Also\nComparing errors\nstatic func == (HKError, HKError) -> Bool\nReturns a Boolean value that indicates whether two errors are the same.\nstatic func != (HKError, HKError) -> Bool\nReturns a Boolean value that indicates whether two values aren’t equal.\nvar hashValue: Int\nThe hash value."
  },
  {
    "title": "!=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkerror/2947130",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nInequality is the inverse of equality. For any values a and b, a != b implies that a == b is false.\n\nThis is the default implementation of the not-equal-to operator (!=) for any type that conforms to Equatable.\n\nSee Also\nComparing errors\nstatic func == (HKError, HKError) -> Bool\nReturns a Boolean value that indicates whether two errors are the same.\nfunc hash(into: inout Hasher)\nHashes the essential components of a value by feeding them to the given hasher.\nvar hashValue: Int\nThe hash value."
  },
  {
    "title": "errorNoData | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkerror/3666524-errornodata",
    "html": "Discussion\n\nThis error indicates that no data exists that corresponds to a particular query, so the system can’t calculate the query’s result. HKStatisticsQuery queries return this error when HealthKit can’t return the data needed to calculate the statistics.\n\nSee Also\nAccessing errors\nenum HKError.Code\nError codes returned by HealthKit.\nstatic var noError: HKError.Code\nNo error occurred.\nstatic var errorHealthDataUnavailable: HKError.Code\nThe user accessed HealthKit on an unsupported device.\nstatic var errorHealthDataRestricted: HKError.Code\nA Mobile Device Management (MDM) profile restricts the use of HealthKit on this device.\nstatic var errorInvalidArgument: HKError.Code\nThe app passed an invalid argument to the HealthKit API.\nstatic var errorAuthorizationDenied: HKError.Code\nThe user hasn’t given the app permission to save data.\nstatic var errorAuthorizationNotDetermined: HKError.Code\nThe app hasn’t yet asked the user for the authorization required to complete the task.\nstatic var errorRequiredAuthorizationDenied: HKError.Code\nThe user hasn’t granted the application authorization to access all the required clinical record types.\nstatic var errorDatabaseInaccessible: HKError.Code\nThe HealthKit data is unavailable because it’s protected and the device is locked.\nstatic var errorUserCanceled: HKError.Code\nThe user canceled the operation.\nstatic var errorAnotherWorkoutSessionStarted: HKError.Code\nAnother app started a workout session.\nstatic var errorUserExitedWorkoutSession: HKError.Code\nThe user exited your application while a workout session was running."
  },
  {
    "title": "errorUserExitedWorkoutSession | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkerror/2320692-erroruserexitedworkoutsession",
    "html": "Discussion\n\nWorkout sessions end when the app goes into the background.\n\nSee Also\nAccessing errors\nenum HKError.Code\nError codes returned by HealthKit.\nstatic var noError: HKError.Code\nNo error occurred.\nstatic var errorHealthDataUnavailable: HKError.Code\nThe user accessed HealthKit on an unsupported device.\nstatic var errorHealthDataRestricted: HKError.Code\nA Mobile Device Management (MDM) profile restricts the use of HealthKit on this device.\nstatic var errorInvalidArgument: HKError.Code\nThe app passed an invalid argument to the HealthKit API.\nstatic var errorAuthorizationDenied: HKError.Code\nThe user hasn’t given the app permission to save data.\nstatic var errorAuthorizationNotDetermined: HKError.Code\nThe app hasn’t yet asked the user for the authorization required to complete the task.\nstatic var errorRequiredAuthorizationDenied: HKError.Code\nThe user hasn’t granted the application authorization to access all the required clinical record types.\nstatic var errorDatabaseInaccessible: HKError.Code\nThe HealthKit data is unavailable because it’s protected and the device is locked.\nstatic var errorUserCanceled: HKError.Code\nThe user canceled the operation.\nstatic var errorAnotherWorkoutSessionStarted: HKError.Code\nAnother app started a workout session.\nstatic var errorNoData: HKError.Code\nData is unavailable for the requested query and predicate."
  },
  {
    "title": "errorDatabaseInaccessible | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkerror/2320684-errordatabaseinaccessible",
    "html": "Discussion\n\nThis error occurs when your app queries for HealthKit data while the device is locked. You can, however, still save data. This data is saved into a temporary file, which is merged with HealthKit’s data when the user unlocks their device.\n\nSee Also\nAccessing errors\nenum HKError.Code\nError codes returned by HealthKit.\nstatic var noError: HKError.Code\nNo error occurred.\nstatic var errorHealthDataUnavailable: HKError.Code\nThe user accessed HealthKit on an unsupported device.\nstatic var errorHealthDataRestricted: HKError.Code\nA Mobile Device Management (MDM) profile restricts the use of HealthKit on this device.\nstatic var errorInvalidArgument: HKError.Code\nThe app passed an invalid argument to the HealthKit API.\nstatic var errorAuthorizationDenied: HKError.Code\nThe user hasn’t given the app permission to save data.\nstatic var errorAuthorizationNotDetermined: HKError.Code\nThe app hasn’t yet asked the user for the authorization required to complete the task.\nstatic var errorRequiredAuthorizationDenied: HKError.Code\nThe user hasn’t granted the application authorization to access all the required clinical record types.\nstatic var errorUserCanceled: HKError.Code\nThe user canceled the operation.\nstatic var errorAnotherWorkoutSessionStarted: HKError.Code\nAnother app started a workout session.\nstatic var errorUserExitedWorkoutSession: HKError.Code\nThe user exited your application while a workout session was running.\nstatic var errorNoData: HKError.Code\nData is unavailable for the requested query and predicate."
  },
  {
    "title": "errorAnotherWorkoutSessionStarted | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkerror/2320687-erroranotherworkoutsessionstarte",
    "html": "Discussion\n\nThis error occurs whenever a second workout session is started. Apple Watch only runs one workout session at a time. If the user begins a second workout session in a different app, the original session receives this error message and then ends. The second session then starts.\n\nSee Also\nAccessing errors\nenum HKError.Code\nError codes returned by HealthKit.\nstatic var noError: HKError.Code\nNo error occurred.\nstatic var errorHealthDataUnavailable: HKError.Code\nThe user accessed HealthKit on an unsupported device.\nstatic var errorHealthDataRestricted: HKError.Code\nA Mobile Device Management (MDM) profile restricts the use of HealthKit on this device.\nstatic var errorInvalidArgument: HKError.Code\nThe app passed an invalid argument to the HealthKit API.\nstatic var errorAuthorizationDenied: HKError.Code\nThe user hasn’t given the app permission to save data.\nstatic var errorAuthorizationNotDetermined: HKError.Code\nThe app hasn’t yet asked the user for the authorization required to complete the task.\nstatic var errorRequiredAuthorizationDenied: HKError.Code\nThe user hasn’t granted the application authorization to access all the required clinical record types.\nstatic var errorDatabaseInaccessible: HKError.Code\nThe HealthKit data is unavailable because it’s protected and the device is locked.\nstatic var errorUserCanceled: HKError.Code\nThe user canceled the operation.\nstatic var errorUserExitedWorkoutSession: HKError.Code\nThe user exited your application while a workout session was running.\nstatic var errorNoData: HKError.Code\nData is unavailable for the requested query and predicate."
  },
  {
    "title": "errorAuthorizationNotDetermined | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkerror/2320688-errorauthorizationnotdetermined",
    "html": "Discussion\n\nThis error occurs when your app doesn’t request proper authorization before calling any other HealthKit methods. For more information on setting up HealthKit, see HealthKit.\n\nSee Also\nAccessing errors\nenum HKError.Code\nError codes returned by HealthKit.\nstatic var noError: HKError.Code\nNo error occurred.\nstatic var errorHealthDataUnavailable: HKError.Code\nThe user accessed HealthKit on an unsupported device.\nstatic var errorHealthDataRestricted: HKError.Code\nA Mobile Device Management (MDM) profile restricts the use of HealthKit on this device.\nstatic var errorInvalidArgument: HKError.Code\nThe app passed an invalid argument to the HealthKit API.\nstatic var errorAuthorizationDenied: HKError.Code\nThe user hasn’t given the app permission to save data.\nstatic var errorRequiredAuthorizationDenied: HKError.Code\nThe user hasn’t granted the application authorization to access all the required clinical record types.\nstatic var errorDatabaseInaccessible: HKError.Code\nThe HealthKit data is unavailable because it’s protected and the device is locked.\nstatic var errorUserCanceled: HKError.Code\nThe user canceled the operation.\nstatic var errorAnotherWorkoutSessionStarted: HKError.Code\nAnother app started a workout session.\nstatic var errorUserExitedWorkoutSession: HKError.Code\nThe user exited your application while a workout session was running.\nstatic var errorNoData: HKError.Code\nData is unavailable for the requested query and predicate."
  },
  {
    "title": "errorHealthDataRestricted | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkerror/2320683-errorhealthdatarestricted",
    "html": "Discussion\n\nBecause an MDM profile can disable HealthKit on a managed device, always verify that the current device supports HealthKit by calling isHealthDataAvailable() before calling any other HealthKit methods. If HealthKit is restricted (for example, in an enterprise environment), the methods fail with an errorHealthDataRestricted error.\n\nSee Also\nAccessing errors\nenum HKError.Code\nError codes returned by HealthKit.\nstatic var noError: HKError.Code\nNo error occurred.\nstatic var errorHealthDataUnavailable: HKError.Code\nThe user accessed HealthKit on an unsupported device.\nstatic var errorInvalidArgument: HKError.Code\nThe app passed an invalid argument to the HealthKit API.\nstatic var errorAuthorizationDenied: HKError.Code\nThe user hasn’t given the app permission to save data.\nstatic var errorAuthorizationNotDetermined: HKError.Code\nThe app hasn’t yet asked the user for the authorization required to complete the task.\nstatic var errorRequiredAuthorizationDenied: HKError.Code\nThe user hasn’t granted the application authorization to access all the required clinical record types.\nstatic var errorDatabaseInaccessible: HKError.Code\nThe HealthKit data is unavailable because it’s protected and the device is locked.\nstatic var errorUserCanceled: HKError.Code\nThe user canceled the operation.\nstatic var errorAnotherWorkoutSessionStarted: HKError.Code\nAnother app started a workout session.\nstatic var errorUserExitedWorkoutSession: HKError.Code\nThe user exited your application while a workout session was running.\nstatic var errorNoData: HKError.Code\nData is unavailable for the requested query and predicate."
  },
  {
    "title": "noError | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkerror/2320690-noerror",
    "html": "See Also\nAccessing errors\nenum HKError.Code\nError codes returned by HealthKit.\nstatic var errorHealthDataUnavailable: HKError.Code\nThe user accessed HealthKit on an unsupported device.\nstatic var errorHealthDataRestricted: HKError.Code\nA Mobile Device Management (MDM) profile restricts the use of HealthKit on this device.\nstatic var errorInvalidArgument: HKError.Code\nThe app passed an invalid argument to the HealthKit API.\nstatic var errorAuthorizationDenied: HKError.Code\nThe user hasn’t given the app permission to save data.\nstatic var errorAuthorizationNotDetermined: HKError.Code\nThe app hasn’t yet asked the user for the authorization required to complete the task.\nstatic var errorRequiredAuthorizationDenied: HKError.Code\nThe user hasn’t granted the application authorization to access all the required clinical record types.\nstatic var errorDatabaseInaccessible: HKError.Code\nThe HealthKit data is unavailable because it’s protected and the device is locked.\nstatic var errorUserCanceled: HKError.Code\nThe user canceled the operation.\nstatic var errorAnotherWorkoutSessionStarted: HKError.Code\nAnother app started a workout session.\nstatic var errorUserExitedWorkoutSession: HKError.Code\nThe user exited your application while a workout session was running.\nstatic var errorNoData: HKError.Code\nData is unavailable for the requested query and predicate."
  },
  {
    "title": "errorAuthorizationDenied | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkerror/2320689-errorauthorizationdenied",
    "html": "Discussion\n\nThis error occurs only when your app attempts to save data. If your app isn’t authorized to query data, it receives only the data that the app has saved into HealthKit. For more information, see Setting up HealthKit.\n\nSee Also\nAccessing errors\nenum HKError.Code\nError codes returned by HealthKit.\nstatic var noError: HKError.Code\nNo error occurred.\nstatic var errorHealthDataUnavailable: HKError.Code\nThe user accessed HealthKit on an unsupported device.\nstatic var errorHealthDataRestricted: HKError.Code\nA Mobile Device Management (MDM) profile restricts the use of HealthKit on this device.\nstatic var errorInvalidArgument: HKError.Code\nThe app passed an invalid argument to the HealthKit API.\nstatic var errorAuthorizationNotDetermined: HKError.Code\nThe app hasn’t yet asked the user for the authorization required to complete the task.\nstatic var errorRequiredAuthorizationDenied: HKError.Code\nThe user hasn’t granted the application authorization to access all the required clinical record types.\nstatic var errorDatabaseInaccessible: HKError.Code\nThe HealthKit data is unavailable because it’s protected and the device is locked.\nstatic var errorUserCanceled: HKError.Code\nThe user canceled the operation.\nstatic var errorAnotherWorkoutSessionStarted: HKError.Code\nAnother app started a workout session.\nstatic var errorUserExitedWorkoutSession: HKError.Code\nThe user exited your application while a workout session was running.\nstatic var errorNoData: HKError.Code\nData is unavailable for the requested query and predicate."
  },
  {
    "title": "errorHealthDataUnavailable | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkerror/2320691-errorhealthdataunavailable",
    "html": "Discussion\n\nBecause iOS apps can run on devices that don’t support HealthKit (for example, on an iPad), always verify that the current device supports HealthKit by calling isHealthDataAvailable() before calling any other HealthKit methods. If HealthKit isn’t available on the device, other HealthKit methods fail with an errorHealthDataUnavailable error.\n\nSee Also\nAccessing errors\nenum HKError.Code\nError codes returned by HealthKit.\nstatic var noError: HKError.Code\nNo error occurred.\nstatic var errorHealthDataRestricted: HKError.Code\nA Mobile Device Management (MDM) profile restricts the use of HealthKit on this device.\nstatic var errorInvalidArgument: HKError.Code\nThe app passed an invalid argument to the HealthKit API.\nstatic var errorAuthorizationDenied: HKError.Code\nThe user hasn’t given the app permission to save data.\nstatic var errorAuthorizationNotDetermined: HKError.Code\nThe app hasn’t yet asked the user for the authorization required to complete the task.\nstatic var errorRequiredAuthorizationDenied: HKError.Code\nThe user hasn’t granted the application authorization to access all the required clinical record types.\nstatic var errorDatabaseInaccessible: HKError.Code\nThe HealthKit data is unavailable because it’s protected and the device is locked.\nstatic var errorUserCanceled: HKError.Code\nThe user canceled the operation.\nstatic var errorAnotherWorkoutSessionStarted: HKError.Code\nAnother app started a workout session.\nstatic var errorUserExitedWorkoutSession: HKError.Code\nThe user exited your application while a workout session was running.\nstatic var errorNoData: HKError.Code\nData is unavailable for the requested query and predicate."
  },
  {
    "title": "errorInvalidArgument | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkerror/2320686-errorinvalidargument",
    "html": "See Also\nAccessing errors\nenum HKError.Code\nError codes returned by HealthKit.\nstatic var noError: HKError.Code\nNo error occurred.\nstatic var errorHealthDataUnavailable: HKError.Code\nThe user accessed HealthKit on an unsupported device.\nstatic var errorHealthDataRestricted: HKError.Code\nA Mobile Device Management (MDM) profile restricts the use of HealthKit on this device.\nstatic var errorAuthorizationDenied: HKError.Code\nThe user hasn’t given the app permission to save data.\nstatic var errorAuthorizationNotDetermined: HKError.Code\nThe app hasn’t yet asked the user for the authorization required to complete the task.\nstatic var errorRequiredAuthorizationDenied: HKError.Code\nThe user hasn’t granted the application authorization to access all the required clinical record types.\nstatic var errorDatabaseInaccessible: HKError.Code\nThe HealthKit data is unavailable because it’s protected and the device is locked.\nstatic var errorUserCanceled: HKError.Code\nThe user canceled the operation.\nstatic var errorAnotherWorkoutSessionStarted: HKError.Code\nAnother app started a workout session.\nstatic var errorUserExitedWorkoutSession: HKError.Code\nThe user exited your application while a workout session was running.\nstatic var errorNoData: HKError.Code\nData is unavailable for the requested query and predicate."
  },
  {
    "title": "errorUserInfo | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkerror/2882807-erroruserinfo",
    "html": "See Also\nAccessing the errors properties\nstatic var errorDomain: String\nThe domain for all HealthKit errors.\nvar errorCode: Int\nA code that represents the error.\nvar code: Code\nA code that represents the error.\nvar userInfo: [String : Any]\nA dictionary that contains additional information about the error.\nvar localizedDescription: String\nA localized description of the error."
  },
  {
    "title": "errorCode | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkerror/2882805-errorcode",
    "html": "See Also\nAccessing the errors properties\nstatic var errorDomain: String\nThe domain for all HealthKit errors.\nvar code: Code\nA code that represents the error.\nvar errorUserInfo: [String : Any]\nA dictionary that contains additional information about the error.\nvar userInfo: [String : Any]\nA dictionary that contains additional information about the error.\nvar localizedDescription: String\nA localized description of the error."
  },
  {
    "title": "end(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkhealthstore/1627957-end",
    "html": "Parameters\nworkoutSession\n\nA currently running workout session. If the session is not running, the system returns an invalidArgumentException exception.\n\nDiscussion\n\nThis method returns immediately; however, the work is performed asynchronously on an anonymous serial background queue. If successful, the session’s state transitions to HKWorkoutSessionState.ended, and the system calls the session delegate’s workoutSession(_:didChangeTo:from:date:) method.\n\nSee Also\nDeprecated symbols\nfunc add([HKSample], to: HKWorkout, completion: (Bool, Error?) -> Void)\nAssociates the provided samples with the specified workout.\nDeprecated\nfunc start(HKWorkoutSession)\nStarts a workout session for the current app.\nDeprecated"
  },
  {
    "title": "add(_:to:completion:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkhealthstore/1614165-add",
    "html": "Parameters\nsamples\n\nAn array containing HKCategorySample or HKQuantitySample objects.\n\nworkout\n\nThe workout object you are adding samples to.\n\ncompletion\n\nA block that this method calls as soon as the add-samples operation is complete. This block is passed the following parameters:\n\nsuccess\n\nA Boolean value. This parameter contains true if the samples were successfully added to workout; otherwise, false.\n\nerror\n\nAn error object. If an error occurred, this object contains information about the error; otherwise, it is set to nil.\n\nDiscussion\n\nConcurrency Note\n\nYou can call this method from synchronous code using a completion handler, as shown on this page, or you can call it as an asynchronous method that has the following declaration:\n\nfunc addSamples(_ samples: [HKSample], to workout: HKWorkout) async throws\n\n\nFor information about concurrency and asynchronous code in Swift, see Calling Objective-C APIs Asynchronously.\n\nThis method operates asynchronously. As soon as the add-samples operation is finished, this method calls the completion block on a background queue. You must save the workout to the HealthKit store before you can add any samples to it. You can save the samples before calling this method, but doing so is not required. This method automatically saves any unsaved samples when it successfully adds them to the workout.\n\nTo query for all the samples associated with a workout, add the workout to the query’s predicate. For example, the query’s predicateForObjects(from:) method creates a predicate object that matches only samples associated with the provided workout.\n\nFor more information on workouts and associated samples, see HKWorkout.\n\nSee Also\nDeprecated symbols\nfunc start(HKWorkoutSession)\nStarts a workout session for the current app.\nDeprecated\nfunc end(HKWorkoutSession)\nEnds a workout session for the current app.\nDeprecated"
  },
  {
    "title": "activityMoveMode() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkhealthstore/3281489-activitymovemode",
    "html": "See Also\nAccessing the move mode\nstatic let HKUserPreferencesDidChange: NSNotification.Name\nNotifies observers whenever the user changes his or her preferred units."
  },
  {
    "title": "startWatchApp(with:completion:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkhealthstore/1648358-startwatchapp",
    "html": "Parameters\nworkoutConfiguration\n\nThe configuration data for a new workout session on the watch.\n\ncompletion\n\nA block that this method calls after launching the Watch app. The system calls this block, passing the following parameters:\n\nsuccess\n\nA Boolean value. This parameter contains true if the watch app launched successfully; otherwise, false.\n\nerror\n\nAn error object. If an error occurred, this object contains information about the error; otherwise, it’s set to nil.\n\nDiscussion\n\nConcurrency Note\n\nYou can call this method from synchronous code using a completion handler, as shown on this page, or you can call it as an asynchronous method that has the following declaration:\n\nfunc startWatchApp(toHandle workoutConfiguration: HKWorkoutConfiguration) async throws\n\n\nFor information about concurrency and asynchronous code in Swift, see Calling Objective-C APIs Asynchronously.\n\nUse this method to launch the companion watchOS app on a paired Apple Watch. After launching, the system calls the handle method on the watchOS app’s delegate and passes the provided workout configuration. Use the workout configuration to start a new workout session on the watch.\n\nTo launch a mirrored workout from the iOS companion app, call this method in the iOS companion.\n\nlet configuration = HKWorkoutConfiguration()\nconfiguration.activityType = .running\nconfiguration.locationType = .outdoor\n\n\ndo {\n    try await store.startWatchApp(toHandle: configuration)\n}\ncatch {\n    // Handle the error here.\n    fatalError(\"*** An error occurred while starting a workout on Apple Watch: \\(error.localizedDescription) ***\")\n}\n\n\nlogger.debug(\"*** Workout Session Started ***\")\n\n\nNext, set up the mirrored workout in the WKApplicationDelegate object’s handle(_:) method.\n\nclass AppDelegate: NSObject, WKApplicationDelegate {\n\n\n    func handle(_ workoutConfiguration: HKWorkoutConfiguration) {\n        Task {\n            await WorkoutManager.shared.startWorkout()\n            logger.debug(\"Successfully started workout\")\n        }\n    }\n}\n\n\nextension WorkoutManager {\n    func startWorkout() async {\n\n\n        let configuration = HKWorkoutConfiguration()\n        configuration.activityType = .running\n        configuration.locationType = .outdoor\n\n\n        let session: HKWorkoutSession\n        do {\n            session = try HKWorkoutSession(healthStore: store,\n                                           configuration: configuration)\n        } catch {\n            // Handle failure here.\n            fatalError(\"*** An error occurred: \\(error.localizedDescription) ***\")\n        }\n\n\n        let builder = session.associatedWorkoutBuilder()\n\n\n        let source = HKLiveWorkoutDataSource(healthStore: store,\n                                             workoutConfiguration: configuration)\n\n\n        source.enableCollection(for: HKQuantityType(.stepCount), predicate: nil)\n        builder.dataSource = source\n\n\n        session.delegate = self\n        builder.delegate = self\n\n\n        self.session = session\n        self.builder = builder\n\n\n        let start = Date()\n\n\n        // Start the mirrored session on the companion iPhone.\n        do {\n            try await session.startMirroringToCompanionDevice()\n        }\n        catch {\n            fatalError(\"*** Unable to start the mirrored workout: \\(error.localizedDescription) ***\")\n        }\n\n\n        // Start the workout session.\n        session.startActivity(with: start)\n\n\n        do {\n            try await builder.beginCollection(at: start)\n        } catch {\n            // Handle the error here.\n            fatalError(\"*** An error occurred while starting the workout: \\(error.localizedDescription) ***\")\n        }\n\n\n        logger.debug(\"*** Workout Session Started ***\")\n    }\n}\n\n\nSee Also\nManaging workout sessions\nvar workoutSessionMirroringStartHandler: ((HKWorkoutSession) -> Void)?\nA block that the system calls when it starts a mirrored workout session.\nfunc pause(HKWorkoutSession)\nPauses the provided workout session.\nfunc resumeWorkoutSession(HKWorkoutSession)\nResumes the provided workout session."
  },
  {
    "title": "start(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkhealthstore/1627946-start",
    "html": "Parameters\nworkoutSession\n\nThe workout session to start. You cannot restart a workout session that has stopped. If you pass in a session that is running or has stopped, the system returns an invalidArgumentException exception.\n\nDiscussion\n\nWorkout sessions allow apps to run in the foreground. The current Foreground App appears when the user wakes the watch. Additionally, Apple Watch sets its sensors based on the workout activity and location types for more accurate measurements and better performance.\n\nApple Watch can only run one workout session at a time. If a second workout is started while your workout is running, your HKWorkoutSessionDelegate object receives an HKErrorAnotherWorkoutSession error, and your session ends.\n\nThis method returns immediately, however the work is performed asynchronously on an anonymous serial background queue. If successful, the session’s state transitions to HKWorkoutSessionState.running, and the system calls the session delegate’s workoutSession(_:didChangeTo:from:date:) method.\n\nSee Also\nDeprecated symbols\nfunc add([HKSample], to: HKWorkout, completion: (Bool, Error?) -> Void)\nAssociates the provided samples with the specified workout.\nDeprecated\nfunc end(HKWorkoutSession)\nEnds a workout session for the current app.\nDeprecated"
  },
  {
    "title": "recalibrateEstimates(sampleType:date:completion:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkhealthstore/3801677-recalibrateestimates",
    "html": "Parameters\nsampleType\n\nThe sample type to recalibrate.\n\ndate\n\nThe effective date for the recalibration.\n\ncompletion\n\nA completion block that the system calls after recalibrating the data used by the prediction algorithm. The system passes the following parameters:\n\nsuccess\n\nA Boolean value that indicates whether the system successfully recalibrated the sample type’s estimates.\n\nerror\n\nIf success is false, this parameter contains error information; otherwise, it’s nil.\n\nDiscussion\n\nConcurrency Note\n\nYou can call this method from synchronous code using a completion handler, as shown on this page, or you can call it as an asynchronous method that has the following declaration:\n\nfunc recalibrateEstimates(sampleType: HKSampleType, date: Date) async throws\n\n\nFor information about concurrency and asynchronous code in Swift, see Calling Objective-C APIs Asynchronously.\n\nYour app can use this method to recalibrate HealthKitʼs prediction algorithms after an event that may significantly affect their results. For example, you can recalibrate the sixMinuteWalkTestDistance type to use only data collected after a mobility-impacting health event, such as surgery or an injury. Recalibrating sixMinuteWalkTestDistance after such an event may yield more accurate estimates during the recovery period.\n\nWarning\n\nBefore calling this method, your app must include the com.apple.developer.healthkit.recalibrate-estimates entitlement. Also, you must request both share and read access to all the data types you pass to the sampleType parameter. If you haven’t completed all of these steps, recalibration fails with an HKError.Code.errorAuthorizationDenied error.\n\nCheck the HKSampleType class’s allowsRecalibrationForEstimates method to see if a given sample type supports recalibrating the algorithm.\n\nThe following sample code recalibrates the estimates for the six-minute walk test.\n\n// Access the HealthKit Store.\nlet healthStore = HKHealthStore()\n\n\n// Get the six-minute walk test type.\nlet sixMinuteWalkType = HKQuantityType(.sixMinuteWalkTestDistance)\n\n\n// Verify that the type supports resetting estimates.\nif sixMinuteWalkType.allowsRecalibrationForEstimates {\n    \n    // Reset the estimate.\n    healthStore.recalibrateEstimates(sampleType: sixMinuteWalkType, date: Date()) { (success, error) in\n        \n        // Check the success value.\n        if !success {\n            if let error = error {\n                // Handle errors here.\n            }\n        }\n    }\n}\n"
  },
  {
    "title": "pause(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkhealthstore/1650861-pause",
    "html": "Parameters\nworkoutSession\n\nThe workout session to pause.\n\nDiscussion\n\nThis method pauses the provided session if it is currently running. The workout session’s state transitions to HKWorkoutSessionStatePaused, and the system generates an HKWorkoutEventType.pause event and passes it to the workout session delegate’s workoutSession:didGenerateEvent: method.\n\nSee Also\nManaging workout sessions\nvar workoutSessionMirroringStartHandler: ((HKWorkoutSession) -> Void)?\nA block that the system calls when it starts a mirrored workout session.\nfunc startWatchApp(with: HKWorkoutConfiguration, completion: (Bool, Error?) -> Void)\nLaunches or wakes the companion watchOS app to create a new workout session.\nfunc resumeWorkoutSession(HKWorkoutSession)\nResumes the provided workout session."
  },
  {
    "title": "irregularHeartRhythmEvent | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkcategorytypeidentifier/3081269-irregularheartrhythmevent",
    "html": "Discussion\n\nThe system creates irregularHeartRhythmEvent samples whenever Apple Watch produces an irregular rhythm notification. For more information, see Heart rate notifications on your Apple Watch.\n\nThe irregular rhythm samples are read-only. You can request permission to read the samples using this identifier, but you can’t request authorization to share them. This means you can’t save new irregular rhythm events to the HealthKit store. To add test data in iOS Simulator, open the Health app and select Browse > Heart > Irregular Rhythm Notifications > Add Data.\n\nThese samples have a value of HKCategoryValue.notApplicable.\n\nSee Also\nVital Signs\nstatic let lowHeartRateEvent: HKCategoryTypeIdentifier\nA category sample type for low heart rate events.\nstatic let highHeartRateEvent: HKCategoryTypeIdentifier\nA category sample type for high heart rate events."
  },
  {
    "title": "highHeartRateEvent | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkcategorytypeidentifier/3081268-highheartrateevent",
    "html": "Discussion\n\nThe system creates highHeartRateEvent samples whenever Apple Watch produces a high heart rate notification. For more information, see Heart rate notifications on your Apple Watch.\n\nThe high heart rate samples are read-only. You can request permission to read the samples using this identifier, but you can’t request authorization to share them. This means you can’t save new high heart rate events to the HealthKit store. To add test data in iOS Simulator, open the Health app and select Browse > Heart > High Heart Rate Notifications > Add Data.\n\nThese samples have a value of HKCategoryValue.notApplicable and include HKMetadataKeyHeartRateEventThreshold metadata.\n\nTopics\nMetadata Keys\nlet HKMetadataKeyHeartRateEventThreshold: String\nA key that records the threshold of high or low heart rate events in beats per minute.\nSee Also\nVital Signs\nstatic let lowHeartRateEvent: HKCategoryTypeIdentifier\nA category sample type for low heart rate events.\nstatic let irregularHeartRhythmEvent: HKCategoryTypeIdentifier\nA category sample type for irregular heart rhythm events."
  },
  {
    "title": "Reading data from HealthKit | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/reading_data_from_healthkit",
    "html": "Overview\n\nThere are three main ways to access data from the HealthKit Store:\n\nDirect method calls. The HealthKit store provides methods to directly access characteristic data. These methods can be used only to access characteristic data. For more information, see HKHealthStore.\n\nQueries. Queries return the current snapshot of the requested data from the HealthKit store.\n\nLong-running queries. These queries continue to run in the background and update your app whenever changes are made to the HealthKit store.\n\nQueries\n\nQueries return the current snapshot of the data in the HealthKit store. All queries run on an anonymous background queue. When the query is complete, it executes the results handler on the background queue. HealthKit provides different types of queries, each designed to return different types of data from the HealthKit store.\n\nSample query. This is a general-purpose query. Use sample queries to access any type of sample data. Sample queries are particularly useful when you want to sort the results or limit the total number of samples returned. For more information, see HKSampleQuery.\n\nAnchored object query. Use this query to search for items that have been added to or deleted from the store. The first time an anchor query is run, it returns all the matching samples currently in the store. On subsequent runs, it returns only those items that have been added or deleted since the last run. For more information, see HKAnchoredObjectQuery.\n\nStatistics query. Use this query to perform statistical calculations over the set of matching samples. You can use statistics queries to calculate the sum, minimum, maximum, or average value in the set. For more information, see HKStatisticsQuery.\n\nStatistics collection query. Use this query to perform multiple statistics queries over a series of fixed-length time intervals. You will often use these queries when creating graphs. They provide a simple method for calculating things such as the total number of calories consumed each day or the number of steps taken during each five-minute interval. For more information, see HKStatisticsCollectionQuery.\n\nCorrelation query. Use this query to perform complex searches of the data contained in a correlation. These queries can contain individual predicates for each of the sample types stored in the correlation. If you just want to match the correlation type, use a sample query instead. For more information, see HKCorrelationQuery.\n\nSource query. Use this query to search for sources (apps and devices) that have saved matching samples to the HealthKit store. A source query lists all the sources that are saving a particular sample type. For more information, see HKSourceQuery.\n\nActivity summary query. Use this query to search for activity summary information for the user. Each activity summary object contains a summary of the user’s activity for a given day. You can query for either a single day or a range of days. For more information, see HKActivitySummaryQuery.\n\nDocument query. Use this query to search for health documents. For more information, see HKDocumentQuery.\n\nLong-running queries\n\nLong-running queries continue to run an anonymous background queue, and update your app whenever changes are made to the HealthKit store. In addition, observer queries can register for background delivery. This lets HealthKit wake your app in the background whenever an update occurs.\n\nHealthkit provides the following long-running queries:\n\nObserver query. This long-running query monitors the HealthKit store and alerts you to any changes to matching samples. Use an observer query when you want to be notified about changes to the store. You can register observer queries for background delivery. For more information, see HKObserverQuery.\n\nAnchored object query. In addition to returning the current snapshot of modified data, an anchored object query can act as a long-running query. If enabled, it continues to run in the background, providing updates as matching samples are added to or removed from the store. Unlike the observer query, these updates include a list of items that have been added or removed; however, anchored object queries cannot be registered for background delivery. For more information, see HKAnchoredObjectQuery.\n\nStatistics collection query. In addition to calculating the current snapshot of statistical collections, this query can act as a long-running query. If matching samples are added to or removed from the store, this query recalculates the statistics collections and updates your app. Statistics collection queries cannot be registered for background delivery. For more information, see HKStatisticsCollectionQuery.\n\nActivity summary query. In addition to calculating the current snapshot of the user’s activity summary, this query can act as a long-running query. If the user’s activity summary data changes, this query recalculates the activity summary and updates your app. Activity summary queries cannot be registered for background delivery. For more information, see HKActivitySummaryQuery.\n\nSee Also\nHealth data\nSaving data to HealthKit\nCreate and share HealthKit samples.\nData types\nSpecify the kind of data used in HealthKit.\nSamples\nCreate and save health and fitness samples.\nQueries\nQuery health and fitness data."
  },
  {
    "title": "HKError.Code.errorInvalidArgument | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkerror/code/errorinvalidargument",
    "html": "See Also\nErrors\ncase errorHealthDataUnavailable\nHealthKit accessed on an unsupported device, such as an iPad.\ncase errorHealthDataRestricted\nA Mobile Device Management (MDM) profile restricts the use of HealthKit on this device.\ncase errorAuthorizationDenied\nThe user hasn’t given the app permission to save data.\ncase errorAuthorizationNotDetermined\nThe app hasn’t yet asked the user for the authorization required to complete the task.\ncase errorRequiredAuthorizationDenied\nThe user hasn’t granted the application authorization to access all the required clinical record types.\ncase errorDatabaseInaccessible\nThe HealthKit data is unavailable because it’s protected and the device is locked.\ncase errorUserCanceled\nThe user canceled the operation.\ncase errorAnotherWorkoutSessionStarted\nAnother app started a workout session.\ncase errorUserExitedWorkoutSession\nThe user exited your application while a workout session was running.\ncase errorNoData\nData is unavailable for the requested query and predicate."
  },
  {
    "title": "HKWorkout | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkworkout",
    "html": "Overview\n\nThe HKWorkout class is a concrete subclass of the HKSample class; however, they behave somewhat differently than other sample types.\n\nYou don’t need a specific type identifier to create the HKWorkoutType instance. All workouts use the same type identifier.\n\nYou must provide an HKWorkoutActivityType value for each workout. This value defines the type of activity performed during the workout.\n\nAfter saving the workout to the HealthKit store, you must associate additional samples with the workout (for example, active energy burned or distance samples). These samples provide fine-grained details. Use the add(_:to:completion:) method to associate them with the workout.\n\nThe workout records a summary of information about a single physical activity (for example, the duration, total distance, and total energy burned). It also acts as a container for other HKSample objects. You can associate any number of samples with a workout, adding details over the course of the workout. For example, you may want to break a single run into a number of shorter intervals, and then add samples to track the user’s heart rate, energy burned, distance traveled, and steps taken for each interval. For more information, see Adding samples to a workout.\n\nNote\n\nIf a workout has summary information, it also needs a set of associated samples that add up to the summary’s total. See Adding samples to a workout.\n\nHealthKit supports a wide range of activity types. For a complete list, see HKWorkoutActivityType.\n\nWorkouts are mostly immutable. You set their properties when you instantiate the workout, and they can’t change. However, you can continue to add samples to the workouts.\n\nFill the Activity rings\n\nWorkouts can contribute to the Move and Exercise rings in the Activity app. To affect the rings, you must associate one or more active energy burned samples with the workout. Additionally:\n\nIn watchOS. Use a workout session to track the user’s activity. When the session has ended, create a workout object and the associated active energy burned samples. For more information, see HKWorkoutSession.\n\nThe system updates the Move ring based on the active energy burned samples. It updates the Exercise ring based on the amount of time the user spent actually exerting themselves during the workout session, as calculated by the watch’s sensors.\n\nIn iOS. No additional work is necessary. Workout objects automatically contribute to both the Move and Exercise rings. The Exercise ring increases by the workout’s total duration, and the Move ring increases by the number of calories in the associated active energy burned samples. HealthKit also increases the Stand ring by one hour for each wall-clock hour that the workout overlaps.\n\nCreate and save workouts on the device that makes the most sense for your application—typically the device processing the user’s workout.\n\nExtend workouts\n\nLike many HealthKit classes, the HKWorkout class should not be subclassed. You may extend workouts by adding metadata with custom keys as appropriate for your app.\n\nFor more information, see the methods init(activityType:start:end:duration:totalEnergyBurned:totalDistance:metadata:) and init(activityType:start:end:workoutEvents:totalEnergyBurned:totalDistance:metadata:).\n\nTopics\nCreating workouts\ninit(activityType: HKWorkoutActivityType, start: Date, end: Date)\nInstantiates a new workout.\nDeprecated\ninit(activityType: HKWorkoutActivityType, start: Date, end: Date, duration: TimeInterval, totalEnergyBurned: HKQuantity?, totalDistance: HKQuantity?, metadata: [String : Any]?)\nInstantiates a new workout that includes the energy burned, distance, and metadata for the workout.\nDeprecated\ninit(activityType: HKWorkoutActivityType, start: Date, end: Date, workoutEvents: [HKWorkoutEvent]?, totalEnergyBurned: HKQuantity?, totalDistance: HKQuantity?, metadata: [String : Any]?)\nInstantiates a new workout whose duration is calculated based on the start and end dates and the provided workout events.\nDeprecated\ninit(activityType: HKWorkoutActivityType, start: Date, end: Date, duration: TimeInterval, totalEnergyBurned: HKQuantity?, totalDistance: HKQuantity?, device: HKDevice?, metadata: [String : Any]?)\nInstantiates a new workout activity that includes the device that produced the sample data.\nDeprecated\ninit(activityType: HKWorkoutActivityType, start: Date, end: Date, workoutEvents: [HKWorkoutEvent]?, totalEnergyBurned: HKQuantity?, totalDistance: HKQuantity?, device: HKDevice?, metadata: [String : Any]?)\nInstantiates a workout that includes both workout events and the device that produced the sample data.\nDeprecated\ninit(activityType: HKWorkoutActivityType, start: Date, end: Date, workoutEvents: [HKWorkoutEvent]?, totalEnergyBurned: HKQuantity?, totalDistance: HKQuantity?, totalFlightsClimbed: HKQuantity?, device: HKDevice?, metadata: [String : Any]?)\nInstantiates a workout using a variety of data, including the number of flights of stairs climbed.\nDeprecated\ninit(activityType: HKWorkoutActivityType, start: Date, end: Date, workoutEvents: [HKWorkoutEvent]?, totalEnergyBurned: HKQuantity?, totalDistance: HKQuantity?, totalSwimmingStrokeCount: HKQuantity?, device: HKDevice?, metadata: [String : Any]?)\nInstantiates a workout using a variety of data, including the number of strokes while swimming.\nDeprecated\nAccessing workout data\nvar duration: TimeInterval\nThe workout’s duration.\nvar workoutActivityType: HKWorkoutActivityType\nThe type of activity performed during the workout.\nvar workoutActivities: [HKWorkoutActivity]\nvar workoutEvents: [HKWorkoutEvent]?\nAn array of workout event objects.\nfunc statistics(for: HKQuantityType) -> HKStatistics?\nReturns the workout’s statistics for the provided quantity type.\nvar allStatistics: [HKQuantityType : HKStatistics]\nA dictionary that contains all the statistics for the workout.\nvar totalDistance: HKQuantity?\nThe total distance traveled during the workout.\nDeprecated\nvar totalEnergyBurned: HKQuantity?\nThe total active energy burned during the workout.\nDeprecated\nvar totalFlightsClimbed: HKQuantity?\nThe total number of flights of stairs climbed during the workout.\nDeprecated\nvar totalSwimmingStrokeCount: HKQuantity?\nThe total stroke count for the workout.\nDeprecated\nSpecifying sort identifiers\nlet HKWorkoutSortIdentifierDuration: String\nA constant for sorting workouts based on their duration.\nlet HKWorkoutSortIdentifierTotalDistance: String\nA constant for sorting workouts based on their total distance.\nlet HKWorkoutSortIdentifierTotalEnergyBurned: String\nA constant for sorting workouts based on the total energy burned.\nSpecifying predicate key paths\nlet HKPredicateKeyPathWorkoutType: String\nThe key path for accessing the workout’s type.\nlet HKPredicateKeyPathWorkoutDuration: String\nThe key path for accessing the workout’s duration.\nlet HKPredicateKeyPathWorkoutTotalDistance: String\nThe key path for accessing the workout’s total distance.\nlet HKPredicateKeyPathWorkoutTotalEnergyBurned: String\nThe key path for accessing the workout’s total energy burned.\nlet HKPredicateKeyPathWorkoutAverageQuantity: String\nThe key path for accessing workouts with a matching average quantity.\nlet HKPredicateKeyPathWorkoutMaximumQuantity: String\nThe key path for accessing workouts with a matching maximum quantity.\nlet HKPredicateKeyPathWorkoutMinimumQuantity: String\nThe key path for accessing workouts with a matching minimum quantity.\nlet HKPredicateKeyPathWorkoutSumQuantity: String\nThe key path for accessing workouts with a matching sum.\nSpecifying metadata keys\nWorkout Metadata Keys\nConstants that can be used to add metadata to workouts.\nInstance Properties\nvar workoutPlan: WorkoutPlan?\nRelationships\nInherits From\nHKSample\nSee Also\nSamples\nAdding samples to a workout\nCreate associated samples that add details to a workout.\nAccessing condensed workout samples\nRead series data from condensed workouts.\nDividing a HealthKit workout into activities\nPartition multisport and interval workouts into activities that represent the different parts of the workout.\nclass HKWorkoutActivity\nAn object that describes an activity within a longer workout.\nclass HKWorkoutBuilder\nA builder object that incrementally constructs a workout.\nclass HKWorkoutType\nA type that identifies samples that store information about a workout.\nlet HKWorkoutTypeIdentifier: String\nThe workout type identifier.\nenum HKWorkoutActivityType\nThe type of activity performed during a workout.\nenum HKWorkoutSessionType\nThe type of session.\nclass HKWorkoutEvent\nAn object representing an important event during a workout."
  },
  {
    "title": "delete(_:withCompletion:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkhealthstore/1614163-delete",
    "html": "Parameters\nobjects\n\nAn array of objects that this app has previously saved to HealthKit. Deleting an empty array fails with an HKError.Code.errorInvalidArgument error.\n\ncompletion\n\nA block that this method calls as soon as the delete operation is complete. This block is passed the following parameters:\n\nsuccess\n\nA Boolean value. This parameter contains true if the objects were successfully deleted; otherwise, false.\n\nerror\n\nAn error object. If an error occurred, this object contains information about the error; otherwise, it is set to nil.\n\nDiscussion\n\nConcurrency Note\n\nYou can call this method from synchronous code using a completion handler, as shown on this page, or you can call it as an asynchronous method that has the following declaration:\n\nfunc delete(_ objects: [HKObject]) async throws\n\n\nFor information about concurrency and asynchronous code in Swift, see Calling Objective-C APIs Asynchronously.\n\nYour app can delete only those objects that it has previously saved to the HealthKit store. If the user revokes sharing permission for an object type, you can no longer delete those objects. This method operates asynchronously. As soon as the delete operation is finished, it calls the completion block on a background queue.\n\nIf your app has not requested permission to share an object’s data type, the method fails with an HKError.Code.errorAuthorizationNotDetermined error. If your app has been denied permission to share an object’s data type, it fails with an HKError.Code.errorAuthorizationDenied error. Deleting objects that are not stored in the HealthKit store fails with an HKError.Code.errorInvalidArgument error. When deleting multiple objects, if any object cannot be deleted, none of them are deleted.\n\nHealthKit stores temporary HKDeletedObject entries, letting you query for recently deleted objects. However, the deleted objects are periodically removed to save storage space. If you want your app to receive notifications about all the deleted objects, set up an observer query, and enable it for background delivery. In the background query’s update handler, create an anchored object query to gather the list of recently deleted objects.\n\nNote\n\nAlthough your app can manage only the objects it created and saved, the users can always delete any data they want using the Health app.\n\nSee Also\nWorking with HealthKit objects\nfunc delete(HKObject, withCompletion: (Bool, Error?) -> Void)\nDeletes the specified object from the HealthKit store.\nfunc deleteObjects(of: HKObjectType, predicate: NSPredicate, withCompletion: (Bool, Int, Error?) -> Void)\nDeletes objects saved by this application that match the provided type and predicate.\nfunc earliestPermittedSampleDate() -> Date\nReturns the earliest date permitted for samples.\nfunc save(HKObject, withCompletion: (Bool, Error?) -> Void)\nSaves the provided object to the HealthKit store.\nfunc save([HKObject], withCompletion: (Bool, Error?) -> Void)\nSaves an array of objects to the HealthKit store."
  },
  {
    "title": "splitTotalEnergy(_:start:end:resultsHandler:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkhealthstore/1614170-splittotalenergy",
    "html": "Parameters\ntotalEnergy\n\nA quantity object containing the total energy burned during the specified time period.\n\nstartDate\n\nA date object representing the activity’s start time.\n\nendDate\n\nA date object representing the activity’s end time.\n\nresultsHandler\n\nA block that is called as soon as the calculations are complete. This block is passed the following parameters:\n\nrestingEnergy\n\nA quantity object containing the resting portion of the total energy.\n\nactiveEnergy\n\nA quantity object containing the active portion of the total energy.\n\nerror\n\nAn error object. If an error occurred, this object contains information about the error; otherwise, it is set to nil.\n\nDiscussion\n\nThis method operates asynchronously. As soon as the calculation is finished, it calls the completion block on a background queue.\n\nThis method splits the total calories into the active and resting calories, based on the user’s estimated resting metabolic rate and the activity’s duration. Use the resulting values to create samples representing both the active and resting energy burned.\n\nActive energy samples contribute to Apple Watch’s activity monitoring.\n\nSee Also\nManaging workouts\nfunc recoverActiveWorkoutSession(completion: (HKWorkoutSession?, Error?) -> Void)\nRecovers an active workout session."
  },
  {
    "title": "disableAllBackgroundDelivery(completion:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkhealthstore/1614158-disableallbackgrounddelivery",
    "html": "Parameters\ncompletion\n\nA block that this method calls as soon as the background deliveries are disabled. This block is passed the following parameters:\n\nsuccess\n\nA Boolean value. This parameter contains true if the background deliveries were successfully disabled; otherwise, false.\n\nerror\n\nAn error object. If an error occurred, this object contains information about the error; otherwise, it is set to nil.\n\nDiscussion\n\nConcurrency Note\n\nYou can call this method from synchronous code using a completion handler, as shown on this page, or you can call it as an asynchronous method that has the following declaration:\n\nfunc disableAllBackgroundDelivery() async throws\n\n\nFor information about concurrency and asynchronous code in Swift, see Calling Objective-C APIs Asynchronously.\n\nCall this method to prevent your app from receiving any additional update notifications while in the background. This method operates asynchronously. As soon as the background deliveries are disabled, this method calls its completion handler on a background queue.\n\nSee Also\nManaging background delivery\nfunc enableBackgroundDelivery(for: HKObjectType, frequency: HKUpdateFrequency, withCompletion: (Bool, Error?) -> Void)\nEnables the delivery of updates to an app running in the background.\ncom.apple.developer.healthkit.background-delivery\nA Boolean value that indicates whether observer queries receive updates while running in the background.\nenum HKUpdateFrequency\nConstants that determine how often the system launches your app in response to changes to HealthKit data.\nfunc disableBackgroundDelivery(for: HKObjectType, withCompletion: (Bool, Error?) -> Void)\nDisables background deliveries of update notifications for the specified data type.\nRelated Documentation\nclass HKObserverQuery\nA long-running query that monitors the HealthKit store and updates your app when the HealthKit store saves or deletes a matching sample."
  },
  {
    "title": "disableBackgroundDelivery(for:withCompletion:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkhealthstore/1614177-disablebackgrounddelivery",
    "html": "Parameters\ntype\n\nThe type of data. This object can be any concrete subclass of the HKObjectType class (any of the classes HKCharacteristicType , HKQuantityType, HKCategoryType, HKWorkoutType or HKCorrelationType).\n\ncompletion\n\nA block that this method calls as soon as the background delivery is disabled. This block is passed the following parameters:\n\nsuccess\n\nA Boolean value. This parameter contains true if the background delivery was successfully disabled; otherwise, false.\n\nerror\n\nAn error object. If an error occurred, this object contains information about the error; otherwise, it is set to nil.\n\nDiscussion\n\nConcurrency Note\n\nYou can call this method from synchronous code using a completion handler, as shown on this page, or you can call it as an asynchronous method that has the following declaration:\n\nfunc disableBackgroundDelivery(for type: HKObjectType) async throws\n\n\nFor information about concurrency and asynchronous code in Swift, see Calling Objective-C APIs Asynchronously.\n\nCall this method to prevent your app from receiving any additional update notifications about the specified data type while in the background. This method operates asynchronously. As soon as the background delivery is disabled, this method calls its completion handler on a background queue.\n\nSee Also\nManaging background delivery\nfunc enableBackgroundDelivery(for: HKObjectType, frequency: HKUpdateFrequency, withCompletion: (Bool, Error?) -> Void)\nEnables the delivery of updates to an app running in the background.\ncom.apple.developer.healthkit.background-delivery\nA Boolean value that indicates whether observer queries receive updates while running in the background.\nenum HKUpdateFrequency\nConstants that determine how often the system launches your app in response to changes to HealthKit data.\nfunc disableAllBackgroundDelivery(completion: (Bool, Error?) -> Void)\nDisables all background deliveries of update notifications.\nRelated Documentation\nclass HKObserverQuery\nA long-running query that monitors the HealthKit store and updates your app when the HealthKit store saves or deletes a matching sample."
  },
  {
    "title": "HKUpdateFrequency | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkupdatefrequency",
    "html": "Overview\n\nFor more information, see HKObserverQuery.\n\nTopics\nConstants\ncase immediate\nThe system launches your app every time it detects a change.\ncase hourly\nThe system launches your app at most once an hour in response to changes.\ncase daily\nThe system launches your app at most once a day in response to changes.\ncase weekly\nThe system launches your app at most once per week in response to changes.\nRelationships\nConforms To\nSendable\nSee Also\nManaging background delivery\nfunc enableBackgroundDelivery(for: HKObjectType, frequency: HKUpdateFrequency, withCompletion: (Bool, Error?) -> Void)\nEnables the delivery of updates to an app running in the background.\ncom.apple.developer.healthkit.background-delivery\nA Boolean value that indicates whether observer queries receive updates while running in the background.\nfunc disableBackgroundDelivery(for: HKObjectType, withCompletion: (Bool, Error?) -> Void)\nDisables background deliveries of update notifications for the specified data type.\nfunc disableAllBackgroundDelivery(completion: (Bool, Error?) -> Void)\nDisables all background deliveries of update notifications."
  },
  {
    "title": "deleteObjects(of:predicate:withCompletion:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkhealthstore/1614162-deleteobjects",
    "html": "Parameters\nobjectType\n\nThe type of object to be deleted.\n\npredicate\n\nA predicate used to filter the objects to be deleted. This method only deletes objects that match the predicate.\n\ncompletion\n\nA block that this method calls as soon as the delete operation is complete. This block is passed the following parameters:\n\nsuccess\n\nA Boolean value. This parameter contains true if the objects were successfully deleted; otherwise, false.\n\ndeletedObjectCount\n\nThe number of objects deleted.\n\nerror\n\nAn error object. If an error occurred, this object contains information about the error; otherwise, it is set to nil.\n\nDiscussion\n\nConcurrency Note\n\nYou can call this method from synchronous code using a completion handler, as shown on this page, or you can call it as an asynchronous method that has the following declaration:\n\nfunc deleteObjects(of objectType: HKObjectType, predicate: NSPredicate) async throws -> Int\n\n\nFor information about concurrency and asynchronous code in Swift, see Calling Objective-C APIs Asynchronously.\n\nYour app can delete only those objects that it has previously saved to the HealthKit store. If the user revokes sharing permission for an object type, you can no longer delete those objects. This method operates asynchronously. As soon as the delete operation is finished, it calls the completion block on a background queue.\n\nIf your app has not requested permission to share an object’s data type, the method fails with an HKError.Code.errorAuthorizationNotDetermined error. If your app has been denied permission to share an object’s data type, it fails with an HKError.Code.errorAuthorizationDenied error. When deleting multiple objects, if any object cannot be deleted, none of them are deleted.\n\nHealthKit stores temporary HKDeletedObject entries, letting you query for recently deleted objects. However, the deleted objects are periodically removed to save storage space. If you want your app to receive notifications about all the deleted objects, set up an observer query, and enable it for background delivery. In the background query’s update handler, create an anchored object query to gather the list of recently deleted objects.\n\nNote\n\nAlthough your app can manage only the objects it created and saved, the users can always delete any data they want using the Health app.\n\nSee Also\nWorking with HealthKit objects\nfunc delete(HKObject, withCompletion: (Bool, Error?) -> Void)\nDeletes the specified object from the HealthKit store.\nfunc delete([HKObject], withCompletion: (Bool, Error?) -> Void)\nDeletes the specified objects from the HealthKit store.\nfunc earliestPermittedSampleDate() -> Date\nReturns the earliest date permitted for samples.\nfunc save(HKObject, withCompletion: (Bool, Error?) -> Void)\nSaves the provided object to the HealthKit store.\nfunc save([HKObject], withCompletion: (Bool, Error?) -> Void)\nSaves an array of objects to the HealthKit store."
  },
  {
    "title": "save(_:withCompletion:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkhealthstore/1614168-save",
    "html": "Parameters\nobject\n\nThe HealthKit object to be saved. This object can be any concrete subclass of the HKObject class (any of the HKCategorySample, HKQuantitySample, HKCorrelation, or HKWorkout classes).\n\ncompletion\n\nA block that this method calls as soon as the save operation is complete. This block is passed the following parameters:\n\nsuccess\n\nA Boolean value. This parameter contains true if the object was successfully saved to the HealthKit store; otherwise, false.\n\nerror\n\nAn error object. If an error occurred, this object contains information about the error; otherwise, it is set to nil.\n\nDiscussion\n\nConcurrency Note\n\nYou can call this method from synchronous code using a completion handler, as shown on this page, or you can call it as an asynchronous method that has the following declaration:\n\nfunc save(_ object: HKObject) async throws\n\n\nFor information about concurrency and asynchronous code in Swift, see Calling Objective-C APIs Asynchronously.\n\nThis method operates asynchronously. As soon as the save operation is finished, it calls the completion block on a background queue.\n\nIf your app has not requested permission to share the object’s data type, the method fails with an HKError.Code.errorAuthorizationNotDetermined error. If your app has been denied permission to save the object’s data type, it fails with an HKError.Code.errorAuthorizationDenied error. Saving an object with the same unique identifier as an object already in the HealthKit store fails with an HKError.Code.errorInvalidArgument error.\n\nIn iOS 9.0 and later, saving an object to the HealthKit store sets the object’s sourceRevision property to a HKSourceRevision instance representing the saving app. On earlier versions of iOS, saving an object sets the source property to a HKSource instance instead. In both cases, these values are available only after the object is retrieved from the HealthKit store. The original object is not changed.\n\nAll samples retrieved by iOS 9.0 and later are given a valid sourceRevision property. If the sample was saved using an earlier version of iOS, the source revision’s version is set to nil.\n\nSee Also\nWorking with HealthKit objects\nfunc delete(HKObject, withCompletion: (Bool, Error?) -> Void)\nDeletes the specified object from the HealthKit store.\nfunc delete([HKObject], withCompletion: (Bool, Error?) -> Void)\nDeletes the specified objects from the HealthKit store.\nfunc deleteObjects(of: HKObjectType, predicate: NSPredicate, withCompletion: (Bool, Int, Error?) -> Void)\nDeletes objects saved by this application that match the provided type and predicate.\nfunc earliestPermittedSampleDate() -> Date\nReturns the earliest date permitted for samples.\nfunc save([HKObject], withCompletion: (Bool, Error?) -> Void)\nSaves an array of objects to the HealthKit store."
  },
  {
    "title": "earliestPermittedSampleDate() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkhealthstore/1614166-earliestpermittedsampledate",
    "html": "Return Value\n\nThe earliest date that samples can use. You cannot save or query samples prior to this date.\n\nDiscussion\n\nAttempts to save samples earlier than this date fail with an HKError.Code.errorInvalidArgument error. Attempts to query samples before this date return samples after this date.\n\nSee Also\nWorking with HealthKit objects\nfunc delete(HKObject, withCompletion: (Bool, Error?) -> Void)\nDeletes the specified object from the HealthKit store.\nfunc delete([HKObject], withCompletion: (Bool, Error?) -> Void)\nDeletes the specified objects from the HealthKit store.\nfunc deleteObjects(of: HKObjectType, predicate: NSPredicate, withCompletion: (Bool, Int, Error?) -> Void)\nDeletes objects saved by this application that match the provided type and predicate.\nfunc save(HKObject, withCompletion: (Bool, Error?) -> Void)\nSaves the provided object to the HealthKit store.\nfunc save([HKObject], withCompletion: (Bool, Error?) -> Void)\nSaves an array of objects to the HealthKit store."
  },
  {
    "title": "delete(_:withCompletion:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkhealthstore/1614155-delete",
    "html": "Parameters\nobject\n\nAn object that this app has previously saved to the HealthKit store.\n\ncompletion\n\nA block that this method calls as soon as the delete operation is complete. This block is passed the following parameters:\n\nsuccess\n\nA Boolean value. This parameter contains true if the object was successfully deleted; otherwise, false.\n\nerror\n\nAn error object. If an error occurred, this object contains information about the error; otherwise, it is set to nil.\n\nDiscussion\n\nConcurrency Note\n\nYou can call this method from synchronous code using a completion handler, as shown on this page, or you can call it as an asynchronous method that has the following declaration:\n\nfunc delete(_ object: HKObject) async throws\n\n\nFor information about concurrency and asynchronous code in Swift, see Calling Objective-C APIs Asynchronously.\n\nYour app can delete only those objects that it has previously saved to the HealthKit store. If the user revokes sharing permission, you can no longer delete the object. This method operates asynchronously. As soon as the delete operation is finished, it calls the completion block on a background queue.\n\nIf your app has not requested permission to share the object’s data type, the method fails with an HKError.Code.errorAuthorizationNotDetermined error. If your app has been denied permission to share the object’s data type, it fails with an HKError.Code.errorAuthorizationDenied error.\n\nHealthKit stores a temporary HKDeletedObject entry, letting you query for recently deleted objects. However, the deleted objects are periodically removed to save storage space. If you want your app to receive notifications about all the deleted objects, set up an observer query, and enable it for background delivery. In the background query’s update handler, create an HKAnchoredObjectQuery object to gather the list of recently deleted objects.\n\nNote\n\nAlthough your app can manage only the objects it created and saved, users can always delete any data through the Health app.\n\nSee Also\nWorking with HealthKit objects\nfunc delete([HKObject], withCompletion: (Bool, Error?) -> Void)\nDeletes the specified objects from the HealthKit store.\nfunc deleteObjects(of: HKObjectType, predicate: NSPredicate, withCompletion: (Bool, Int, Error?) -> Void)\nDeletes objects saved by this application that match the provided type and predicate.\nfunc earliestPermittedSampleDate() -> Date\nReturns the earliest date permitted for samples.\nfunc save(HKObject, withCompletion: (Bool, Error?) -> Void)\nSaves the provided object to the HealthKit store.\nfunc save([HKObject], withCompletion: (Bool, Error?) -> Void)\nSaves an array of objects to the HealthKit store."
  },
  {
    "title": "wheelchairUse() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkhealthstore/1648356-wheelchairuse",
    "html": "Parameters\nerror\n\nOn input, a pointer to an error object. If an error occurs, this pointer is set to an actual error object containing information about the error. Specify nil for this parameter if you do not want to receive error information.\n\nReturn Value\n\nAn object indicating whether the user uses a wheelchair.\n\nDiscussion\n\nIf the user has not yet specified their wheelchair use, or if the user has denied your app permission to read the wheelchair use, this method returns HKWheelchairUse.notSet.\n\nTopics\nPossible Values\nclass HKWheelchairUseObject\nThis class acts as a wrapper for the wheelchair use enumeration.\nenum HKWheelchairUse\nConstants indicating the user’s wheelchair use.\nSee Also\nReading characteristic data\nfunc biologicalSex() -> HKBiologicalSexObject\nReads the user’s biological sex from the HealthKit store.\nfunc bloodType() -> HKBloodTypeObject\nReads the user’s blood type from the HealthKit store.\nfunc dateOfBirth() -> Date\nReads the user’s date of birth from the HealthKit store as a date value.\nfunc dateOfBirthComponents() -> DateComponents\nReads the user’s date of birth from the HealthKit store as date components.\nfunc fitzpatrickSkinType() -> HKFitzpatrickSkinTypeObject\nReads the user’s Fitzpatrick Skin Type from the HealthKit store."
  },
  {
    "title": "fitzpatrickSkinType() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkhealthstore/1614161-fitzpatrickskintype",
    "html": "Parameters\nerror\n\nOn input, a pointer to an error object. If an error occurs, this pointer is set to an actual error object containing information about the error. Specify nil for this parameter if you do not want to receive error information.\n\nReturn Value\n\nA skin type object representing the skin type selected by the user.\n\nDiscussion\n\nIf the user has not yet specified a skin type, or if the user has denied your app permission to read the skin type, this method returns HKFitzpatrickSkinType.notSet.\n\nHandling Errors in Swift:\n\nIn Swift, this method returns a nonoptional result and is marked with the throws keyword to indicate that it throws an error in cases of failure.\n\nYou call this method in a try expression and handle any errors in the catch clauses of a do statement, as described in Error Handling in The Swift Programming Language and About Imported Cocoa Error Parameters.\n\nTopics\nPossible Values\nclass HKFitzpatrickSkinTypeObject\nThis class acts as a wrapper for the HKFitzpatrickSkinType enumeration.\nenum HKFitzpatrickSkinType\nCategories representing the user’s skin type based on the Fitzpatrick scale.\nSee Also\nReading characteristic data\nfunc biologicalSex() -> HKBiologicalSexObject\nReads the user’s biological sex from the HealthKit store.\nfunc bloodType() -> HKBloodTypeObject\nReads the user’s blood type from the HealthKit store.\nfunc dateOfBirth() -> Date\nReads the user’s date of birth from the HealthKit store as a date value.\nfunc dateOfBirthComponents() -> DateComponents\nReads the user’s date of birth from the HealthKit store as date components.\nfunc wheelchairUse() -> HKWheelchairUseObject\nReads the user’s wheelchair use from the HealthKit store."
  },
  {
    "title": "dateOfBirthComponents() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkhealthstore/1648357-dateofbirthcomponents",
    "html": "Parameters\nerror\n\nOn input, a pointer to an error object. If an error occurs, this pointer is set to an actual error object containing information about the error. Specify nil for this parameter if you do not want to receive error information.\n\nReturn Value\n\nAn NSDateComponents object representing the user’s birthdate in the Gregorian calendar, or nil.\n\nDiscussion\n\nIf the user has not yet specified a birth date, or if the user has denied your app permission to read the birth date, this method returns nil.\n\nSee Also\nReading characteristic data\nfunc biologicalSex() -> HKBiologicalSexObject\nReads the user’s biological sex from the HealthKit store.\nfunc bloodType() -> HKBloodTypeObject\nReads the user’s blood type from the HealthKit store.\nfunc dateOfBirth() -> Date\nReads the user’s date of birth from the HealthKit store as a date value.\nfunc fitzpatrickSkinType() -> HKFitzpatrickSkinTypeObject\nReads the user’s Fitzpatrick Skin Type from the HealthKit store.\nfunc wheelchairUse() -> HKWheelchairUseObject\nReads the user’s wheelchair use from the HealthKit store."
  },
  {
    "title": "requestPerObjectReadAuthorization(for:predicate:completion:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkhealthstore/3974093-requestperobjectreadauthorizatio",
    "html": "Parameters\nobjectType\n\nThe data type you want to read.\n\npredicate\n\nA predicate that further restricts the data type.\n\ncompletion\n\nA completion handler that the system calls after the user responds to the request. The completion handler has the following parameters:\n\nsuccess\n\nA Boolean value that indicates whether the request succeeded. This value doesn’t indicate whether the user actually granted permission. The parameter is false if an error occurred while processing the request; otherwise, it’s true.\n\nerror\n\nAn error object. If an error occurred, this object contains information about the error; otherwise, the system passes nil.\n\nDiscussion\n\nConcurrency Note\n\nYou can call this method from synchronous code using a completion handler, as shown on this page, or you can call it as an asynchronous method that has the following declaration:\n\nfunc requestPerObjectReadAuthorization(for objectType: HKObjectType, predicate: NSPredicate?) async throws\n\n\nFor information about concurrency and asynchronous code in Swift, see Calling Objective-C APIs Asynchronously.\n\nSome samples require per-object authorization. For these samples, people can select which ones your app can read on a sample-by-sample basis. By default, your app can read any of the per-object authorization samples that it has saved to the HealthKit store; however, you may not always have access to those samples. People can update the authorization status for any of these samples at any time.\n\nYour app can begin by querying for any samples that it already has permission to read.\n\n// Read the newest prescription from the HealthKit store.\nlet queryDescriptor = HKSampleQueryDescriptor(predicates: [.visionPrescription()],\n  sortDescriptors: [SortDescriptor(\\.startDate, order: .reverse)],\n  limit: 1)\n\n\nlet prescription: HKVisionPrescription\n\n\ndo {\nguard let result = try await queryDescriptor.result(for: store).first else {\nprint(\"*** No prescription found. ***\")\nreturn\n}\n\n\nprescription = result\n} catch {\n// Handle the error here.\nfatalError(\"*** An error occurred while reading the most recent vision prescriptions: \\(error.localizedDescription) ***\")\n}\n\n\nBased on the results, you can then decide whether you need to request authorization for additional samples. Call requestPerObjectReadAuthorization(for:predicate:completion:) to prompt someone to modify the samples your app has access to read.\n\n// Request authorization to read vision prescriptions.\ndo {\ntry await store.requestPerObjectReadAuthorization(for: .visionPrescriptionType(),\n  predicate: nil)\n} catch HKError.errorUserCanceled {\n// Handle the user canceling the authorization request.\nprint(\"*** The user canceled the authorization request. ***\")\nreturn\n} catch {\n// Handle the error here.\nfatalError(\"*** An error occurred while requesting permission to read vision prescriptions: \\(error.localizedDescription) ***\")\n}\n\n\nImportant\n\nUsing the requestAuthorization(toShare:read:) method to request read access to any data types that require per-object authorization fails with an HKError.Code.errorInvalidArgument error.\n\nWhen your app calls this method, HealthKit displays an authorization sheet that asks for permission to read the samples that match the predicate and object type. The person using your app can then select individual samples to share with your app. The system always asks for permission, regardless of whether they previously granted it.\n\nAfter the person responds, the system calls the callback handler on an arbitrary background queue.\n\nSee Also\nAccessing HealthKit\nfunc authorizationStatus(for: HKObjectType) -> HKAuthorizationStatus\nReturns the app’s authorization status for sharing the specified data type.\nenum HKAuthorizationStatus\nConstants indicating the authorization status for a particular data type.\nfunc getRequestStatusForAuthorization(toShare: Set<HKSampleType>, read: Set<HKObjectType>, completion: (HKAuthorizationRequestStatus, Error?) -> Void)\nIndicates whether the system presents the user with a permission sheet if your app requests authorization for the provided types.\nenum HKAuthorizationRequestStatus\nValues that indicate whether your app needs to request authorization from the user.\nclass func isHealthDataAvailable() -> Bool\nReturns a Boolean value that indicates whether HealthKit is available on this device.\nfunc supportsHealthRecords() -> Bool\nReturns a Boolean value that indicates whether the current device supports clinical records.\nfunc requestAuthorization(toShare: Set<HKSampleType>?, read: Set<HKObjectType>?, completion: (Bool, Error?) -> Void)\nRequests permission to save and read the specified data types.\nfunc requestAuthorization(toShare: Set<HKSampleType>, read: Set<HKObjectType>)\nAsynchronously requests permission to save and read the specified data types.\nfunc handleAuthorizationForExtension(completion: (Bool, Error?) -> Void)\nRequests permission to save and read the data types specified by an extension.\nvar authorizationViewControllerPresenter: UIViewController?\nThe view controller that presents HealthKit authorization sheets."
  },
  {
    "title": "dateOfBirth() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkhealthstore/1614160-dateofbirth",
    "html": "Deprecated\n\nUse dateOfBirthComponents() instead.\n\nParameters\nerror\n\nOn input, a pointer to an error object. If an error occurs, this pointer is set to an actual error object containing information about the error. Specify nil for this parameter if you do not want to receive error information.\n\nReturn Value\n\nAn NSDate object representing the user’s birthdate, or nil.\n\nDiscussion\n\nIf the user has not yet specified a birth date, or if the user has denied your app permission to read the birth date, this method returns nil.\n\nHandling Errors in Swift:\n\nIn Swift, this method returns a nonoptional result and is marked with the throws keyword to indicate that it throws an error in cases of failure.\n\nYou call this method in a try expression and handle any errors in the catch clauses of a do statement, as described in Error Handling in The Swift Programming Language and About Imported Cocoa Error Parameters.\n\nSee Also\nReading characteristic data\nfunc biologicalSex() -> HKBiologicalSexObject\nReads the user’s biological sex from the HealthKit store.\nfunc bloodType() -> HKBloodTypeObject\nReads the user’s blood type from the HealthKit store.\nfunc dateOfBirthComponents() -> DateComponents\nReads the user’s date of birth from the HealthKit store as date components.\nfunc fitzpatrickSkinType() -> HKFitzpatrickSkinTypeObject\nReads the user’s Fitzpatrick Skin Type from the HealthKit store.\nfunc wheelchairUse() -> HKWheelchairUseObject\nReads the user’s wheelchair use from the HealthKit store."
  },
  {
    "title": "handleAuthorizationForExtension(completion:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkhealthstore/1614153-handleauthorizationforextension",
    "html": "Parameters\ncompletion\n\nA block that is called after the user finishes responding to the request. This block is passed the following parameters:\n\nsuccess\n\nA Boolean value that indicates whether the user responded to the prompt (if any). This value does not indicate whether permission was actually granted. This parameter is false if the user canceled the prompt without selecting permissions; otherwise, true.\n\nerror\n\nAn error object. If an error occurred, this object contains information about the error; otherwise, it is set to nil.\n\nDiscussion\n\nConcurrency Note\n\nYou can call this method from synchronous code using a completion handler, as shown on this page, or you can call it as an asynchronous method that has the following declaration:\n\nfunc handleAuthorizationForExtension() async throws\n\n\nFor information about concurrency and asynchronous code in Swift, see Calling Objective-C APIs Asynchronously.\n\nThe host app must implement the application delegate’s applicationShouldRequestHealthAuthorization(_:) method. This delegate method is called after an app extension calls requestAuthorization(toShare:read:completion:). The host app is then responsible for calling handleAuthorizationForExtension(completion:). This method prompts the user to authorize both the app and its extensions for the types that the extension requested.\n\nThe system performs this request asynchronously. After the user has finished responding, this method calls its completion block on a background queue. If the user has already chosen to grant or prohibit access to all of the types specified, the completion is called without prompting the user.\n\nSee Also\nAccessing HealthKit\nfunc authorizationStatus(for: HKObjectType) -> HKAuthorizationStatus\nReturns the app’s authorization status for sharing the specified data type.\nenum HKAuthorizationStatus\nConstants indicating the authorization status for a particular data type.\nfunc getRequestStatusForAuthorization(toShare: Set<HKSampleType>, read: Set<HKObjectType>, completion: (HKAuthorizationRequestStatus, Error?) -> Void)\nIndicates whether the system presents the user with a permission sheet if your app requests authorization for the provided types.\nenum HKAuthorizationRequestStatus\nValues that indicate whether your app needs to request authorization from the user.\nclass func isHealthDataAvailable() -> Bool\nReturns a Boolean value that indicates whether HealthKit is available on this device.\nfunc supportsHealthRecords() -> Bool\nReturns a Boolean value that indicates whether the current device supports clinical records.\nfunc requestAuthorization(toShare: Set<HKSampleType>?, read: Set<HKObjectType>?, completion: (Bool, Error?) -> Void)\nRequests permission to save and read the specified data types.\nfunc requestAuthorization(toShare: Set<HKSampleType>, read: Set<HKObjectType>)\nAsynchronously requests permission to save and read the specified data types.\nfunc requestPerObjectReadAuthorization(for: HKObjectType, predicate: NSPredicate?, completion: (Bool, Error?) -> Void)\nAsynchronously requests permission to read a data type that requires per-object authorization (such as vision prescriptions).\nvar authorizationViewControllerPresenter: UIViewController?\nThe view controller that presents HealthKit authorization sheets."
  },
  {
    "title": "execute(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkhealthstore/1614179-execute",
    "html": "Parameters\nquery\n\nA concrete subclass of the HKQuery class (any of the classes HKSampleQuery, HKAnchoredObjectQuery, HKCorrelationQuery, HKObserverQuery, HKSourceQuery, HKStatisticsQuery, or HKStatisticsCollectionQuery).\n\nDiscussion\n\nHealthKit executes queries asynchronously on a background queue. Most queries automatically stop after they have finished executing. However, long-running queries—such as observer queries and some statistics collection queries—continue to execute in the background. To stop long-running queries, call the stop(_:) method.\n\nSee Also\nQuerying HealthKit data\nfunc stop(HKQuery)\nStops a long-running query."
  },
  {
    "title": "HKAuthorizationRequestStatus | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkauthorizationrequeststatus",
    "html": "Topics\nStatuses\ncase unknown\nThe authorization request status could not be determined because an error occurred.\ncase shouldRequest\nThe application has not yet requested authorization for all the specified data types.\ncase unnecessary\nThe application has already requested authorization for all the specified data types.\nRelationships\nConforms To\nSendable\nSee Also\nAccessing HealthKit\nfunc authorizationStatus(for: HKObjectType) -> HKAuthorizationStatus\nReturns the app’s authorization status for sharing the specified data type.\nenum HKAuthorizationStatus\nConstants indicating the authorization status for a particular data type.\nfunc getRequestStatusForAuthorization(toShare: Set<HKSampleType>, read: Set<HKObjectType>, completion: (HKAuthorizationRequestStatus, Error?) -> Void)\nIndicates whether the system presents the user with a permission sheet if your app requests authorization for the provided types.\nclass func isHealthDataAvailable() -> Bool\nReturns a Boolean value that indicates whether HealthKit is available on this device.\nfunc supportsHealthRecords() -> Bool\nReturns a Boolean value that indicates whether the current device supports clinical records.\nfunc requestAuthorization(toShare: Set<HKSampleType>?, read: Set<HKObjectType>?, completion: (Bool, Error?) -> Void)\nRequests permission to save and read the specified data types.\nfunc requestAuthorization(toShare: Set<HKSampleType>, read: Set<HKObjectType>)\nAsynchronously requests permission to save and read the specified data types.\nfunc requestPerObjectReadAuthorization(for: HKObjectType, predicate: NSPredicate?, completion: (Bool, Error?) -> Void)\nAsynchronously requests permission to read a data type that requires per-object authorization (such as vision prescriptions).\nfunc handleAuthorizationForExtension(completion: (Bool, Error?) -> Void)\nRequests permission to save and read the data types specified by an extension.\nvar authorizationViewControllerPresenter: UIViewController?\nThe view controller that presents HealthKit authorization sheets."
  },
  {
    "title": "supportsHealthRecords() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkhealthstore/3020713-supportshealthrecords",
    "html": "Discussion\n\nThis method returns true if the device is set to a locale where clinical records are supported, or if the user already has clinical records downloaded to their HealthKit store. Otherwise, it returns false.\n\nThis method lets users switch their locale without losing their health records.\n\nSee Also\nAccessing HealthKit\nfunc authorizationStatus(for: HKObjectType) -> HKAuthorizationStatus\nReturns the app’s authorization status for sharing the specified data type.\nenum HKAuthorizationStatus\nConstants indicating the authorization status for a particular data type.\nfunc getRequestStatusForAuthorization(toShare: Set<HKSampleType>, read: Set<HKObjectType>, completion: (HKAuthorizationRequestStatus, Error?) -> Void)\nIndicates whether the system presents the user with a permission sheet if your app requests authorization for the provided types.\nenum HKAuthorizationRequestStatus\nValues that indicate whether your app needs to request authorization from the user.\nclass func isHealthDataAvailable() -> Bool\nReturns a Boolean value that indicates whether HealthKit is available on this device.\nfunc requestAuthorization(toShare: Set<HKSampleType>?, read: Set<HKObjectType>?, completion: (Bool, Error?) -> Void)\nRequests permission to save and read the specified data types.\nfunc requestAuthorization(toShare: Set<HKSampleType>, read: Set<HKObjectType>)\nAsynchronously requests permission to save and read the specified data types.\nfunc requestPerObjectReadAuthorization(for: HKObjectType, predicate: NSPredicate?, completion: (Bool, Error?) -> Void)\nAsynchronously requests permission to read a data type that requires per-object authorization (such as vision prescriptions).\nfunc handleAuthorizationForExtension(completion: (Bool, Error?) -> Void)\nRequests permission to save and read the data types specified by an extension.\nvar authorizationViewControllerPresenter: UIViewController?\nThe view controller that presents HealthKit authorization sheets."
  },
  {
    "title": "isHealthDataAvailable() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkhealthstore/1614180-ishealthdataavailable",
    "html": "Return Value\n\ntrue if HealthKit is available; otherwise, false.\n\nDiscussion\n\nBy default, HealthKit data is available on iOS and watchOS. HealthKit data is also available on iPadOS 17 or later. However, devices running in an enterprise environment may restrict access to HealthKit data.\n\nAdditionally, while the HealthKit framework is available on iPadOS 16 and earlier and on MacOS 13 and later, these devices don’t have a copy of the HealthKit store. This means you can include HealthKit code in apps running on these devices, simplifying the creation of multiplatform apps. However, they can’t read or write HealthKit data, and calls to isHealthDataAvailable() return false.\n\nSee Also\nAccessing HealthKit\nfunc authorizationStatus(for: HKObjectType) -> HKAuthorizationStatus\nReturns the app’s authorization status for sharing the specified data type.\nenum HKAuthorizationStatus\nConstants indicating the authorization status for a particular data type.\nfunc getRequestStatusForAuthorization(toShare: Set<HKSampleType>, read: Set<HKObjectType>, completion: (HKAuthorizationRequestStatus, Error?) -> Void)\nIndicates whether the system presents the user with a permission sheet if your app requests authorization for the provided types.\nenum HKAuthorizationRequestStatus\nValues that indicate whether your app needs to request authorization from the user.\nfunc supportsHealthRecords() -> Bool\nReturns a Boolean value that indicates whether the current device supports clinical records.\nfunc requestAuthorization(toShare: Set<HKSampleType>?, read: Set<HKObjectType>?, completion: (Bool, Error?) -> Void)\nRequests permission to save and read the specified data types.\nfunc requestAuthorization(toShare: Set<HKSampleType>, read: Set<HKObjectType>)\nAsynchronously requests permission to save and read the specified data types.\nfunc requestPerObjectReadAuthorization(for: HKObjectType, predicate: NSPredicate?, completion: (Bool, Error?) -> Void)\nAsynchronously requests permission to read a data type that requires per-object authorization (such as vision prescriptions).\nfunc handleAuthorizationForExtension(completion: (Bool, Error?) -> Void)\nRequests permission to save and read the data types specified by an extension.\nvar authorizationViewControllerPresenter: UIViewController?\nThe view controller that presents HealthKit authorization sheets."
  },
  {
    "title": "HKAuthorizationStatus | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkauthorizationstatus",
    "html": "Overview\n\nThis status indicates whether the user has authorized your app to save data of the given type.\n\nTo help maintain the privacy of sensitive health data, HealthKit does not tell you when the user denies your app permission to query data. Instead, it simply appears as if HealthKit does not have any data matching your query. Your app will receive only the data that it has written to HealthKit. Data from other sources remains hidden from your app. For more information on privacy in HealthKit, see HealthKit.\n\nTopics\nConstants\ncase notDetermined\nThe user has not yet chosen to authorize access to the specified data type.\ncase sharingDenied\nThe user has explicitly denied your app permission to save data of the specified type.\ncase sharingAuthorized\nThe user has explicitly authorized your app to save data of the specified type.\nRelationships\nConforms To\nSendable\nSee Also\nAccessing HealthKit\nfunc authorizationStatus(for: HKObjectType) -> HKAuthorizationStatus\nReturns the app’s authorization status for sharing the specified data type.\nfunc getRequestStatusForAuthorization(toShare: Set<HKSampleType>, read: Set<HKObjectType>, completion: (HKAuthorizationRequestStatus, Error?) -> Void)\nIndicates whether the system presents the user with a permission sheet if your app requests authorization for the provided types.\nenum HKAuthorizationRequestStatus\nValues that indicate whether your app needs to request authorization from the user.\nclass func isHealthDataAvailable() -> Bool\nReturns a Boolean value that indicates whether HealthKit is available on this device.\nfunc supportsHealthRecords() -> Bool\nReturns a Boolean value that indicates whether the current device supports clinical records.\nfunc requestAuthorization(toShare: Set<HKSampleType>?, read: Set<HKObjectType>?, completion: (Bool, Error?) -> Void)\nRequests permission to save and read the specified data types.\nfunc requestAuthorization(toShare: Set<HKSampleType>, read: Set<HKObjectType>)\nAsynchronously requests permission to save and read the specified data types.\nfunc requestPerObjectReadAuthorization(for: HKObjectType, predicate: NSPredicate?, completion: (Bool, Error?) -> Void)\nAsynchronously requests permission to read a data type that requires per-object authorization (such as vision prescriptions).\nfunc handleAuthorizationForExtension(completion: (Bool, Error?) -> Void)\nRequests permission to save and read the data types specified by an extension.\nvar authorizationViewControllerPresenter: UIViewController?\nThe view controller that presents HealthKit authorization sheets."
  },
  {
    "title": "HKClinicalTypeIdentifier | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkclinicaltypeidentifier",
    "html": "Overview\n\nClinical record samples are read-only, so you can’t request authorization to share clinical record types. You can’t create or save new HKClinicalRecord objects.\n\nFor additional information, see Accessing Health Records.\n\nTopics\nClinical Record Type Identifiers\nstatic let allergyRecord: HKClinicalTypeIdentifier\nA type identifier for records of allergic or intolerant reactions.\nstatic let clinicalNoteRecord: HKClinicalTypeIdentifier\nA type identifier for records of clinical notes.\nstatic let conditionRecord: HKClinicalTypeIdentifier\nA type identifier for records of a condition, problem, diagnosis, or other event.\nstatic let immunizationRecord: HKClinicalTypeIdentifier\nA type identifier for records of the current or historical administration of vaccines.\nstatic let labResultRecord: HKClinicalTypeIdentifier\nA type identifier for records of lab results.\nstatic let medicationRecord: HKClinicalTypeIdentifier\nA type identifier for records of medication.\nstatic let procedureRecord: HKClinicalTypeIdentifier\nA type identifier for records of procedures.\nstatic let vitalSignRecord: HKClinicalTypeIdentifier\nA type identifier for records of vital signs.\nstatic let coverageRecord: HKClinicalTypeIdentifier\nA type identifier for records containing information about the user’s insurance coverage.\nInitializers\ninit(rawValue: String)\nReturns a new clinical record type identifier for the provided string.\nRelationships\nConforms To\nHashable\nRawRepresentable\nSendable"
  },
  {
    "title": "Setting up HealthKit | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/setting_up_healthkit",
    "html": "Overview\n\nBefore using HealthKit, you must perform the following steps:\n\nEnable HealthKit in your app.\n\nEnsure HealthKit is available on the current device.\n\nCreate your app’s HealthKit store.\n\nRequest permission to read and share data.\n\nThe following sections describe the first three steps in detail. For more information on requesting authorization, see Authorizing access to health data. For a practical example of how to set up and use HealthKit, see Build a workout app for Apple Watch.\n\nEnable HealthKit\n\nBefore you can use HealthKit, you must enable the HealthKit capabilities for your app. In Xcode, select the project and add the HealthKit capability. Only select the Clinical Health Records checkbox if your app needs to access the user’s clinical records. App Review may reject apps that enable the Clinical Health Records capability if the app doesn’t actually use the health record data. For more information, see Accessing Health Records.\n\nFor a detailed discussion about enabling capabilities, see Configuring HealthKit access.\n\nWhen you enable the HealthKit capabilities on an iOS app, Xcode adds HealthKit to the list of required device capabilities, which prevents users from purchasing or installing the app on devices that don’t support HealthKit.\n\nIf HealthKit isn’t required for the correct operation of your app, delete the healthkit entry from the “Required device capabilities” array. Delete this entry from either the Target Properties list on the app’s Info tab or from the app’s Info.plist file.\n\nNote\n\nThe healthkit entry isn’t used by watchOS apps.\n\nFor more information on required device capabilities, see the UIRequiredDeviceCapabilities.\n\nEnsure HealthKit’s availability\n\nCall the isHealthDataAvailable() method to confirm that HealthKit is available on the user’s device.\n\nif HKHealthStore.isHealthDataAvailable() {\n    // Add code to use HealthKit here.\n}\n\n\nCall this method before calling any other HealthKit methods. If HealthKit isn’t available on the device (for example, on iPadOS 16 or earlier, or macOS), other HealthKit methods fail with an errorHealthDataUnavailable error. If HealthKit is restricted (for example, in an enterprise environment), the methods fail with an errorHealthDataRestricted error.\n\nCreate the HealthKit store\n\nIf HealthKit is both enabled and available, instantiate an HKHealthStore object for your app as shown:\n\nlet healthStore = HKHealthStore()\n\n\nYou need only a single HealthKit store per app. These are long-lived objects; you create the store once, and keep a reference for later use.\n\nTopics\nEntitlements\nHealthKit Entitlement\nA Boolean value that indicates whether the app may request user authorization to access health and activity data that appears in the Health app.\nKey: com.apple.developer.healthkit\nHealthKit Capabilities Entitlement\nHealth data types that require additional permission.\nKey: com.apple.developer.healthkit.access\nInformation property list keys\nproperty list key NSHealthUpdateUsageDescription\nA message to the user that explains why the app requested permission to save samples to the HealthKit store.\nName: Privacy - Health Update Usage Description\nproperty list key NSHealthShareUsageDescription\nA message to the user that explains why the app requested permission to read samples from the HealthKit store.\nName: Privacy - Health Share Usage Description\nproperty list key NSHealthRequiredReadAuthorizationTypeIdentifiers\nThe clinical record data types that your app must get permission to read.\nproperty list key NSHealthClinicalHealthRecordsShareUsageDescription\nA message to the user that explains why the app requested permission to read clinical records.\nName: Privacy - Health Records Usage Description\nSee Also\nEssentials\nAbout the HealthKit framework\nLearn about the architecture and design of the HealthKit framework.\nAuthorizing access to health data\nRequest permission to read and share data in your app.\nProtecting user privacy\nRespect and safeguard your user’s privacy.\nHealthKit updates\nLearn about important changes to HealthKit.\nclass HKHealthStore\nThe access point for all data managed by HealthKit.\nCreating a Mobility Health App\nCreate a health app that allows a clinical care team to send and receive mobility data."
  },
  {
    "title": "About the HealthKit framework | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/about_the_healthkit_framework",
    "html": "Overview\n\nShare health and fitness data between apps using the HealthKit framework. Rather than developers creating custom data types and units, HealthKit constrains data types and units to a predefined list. This ensures that all apps understand what the data means and how they can use it.\n\nAdditionally, the framework uses a large number of subclasses, producing deep hierarchies of similar classes. Often, these classes have subtle but important differences between them. For example, you use an HKQuantitySample object to store data with a numeric value and an HKCategorySample object to store a value selected from an enumeration.\n\nHealthKit also uses pairs of closely related classes that you need to use together. For example, the HKObject and HKObjectType abstract classes have largely parallel hierarchies of concrete subclasses. When working with objects and object types, you must use matching subclasses.\n\nHealthKit data\n\nHealthKit saves a variety of data types in the HealthKit Store:\n\nCharacteristic data\n\nCharacteristics that typically don’t change, such as the user’s birthdate, blood type, biological sex, and skin type. You can read this data directly from the HealthKit store, using the dateOfBirth(), bloodType(), biologicalSex(), and fitzpatrickSkinType() methods. Your application can’t save characteristic data. The user must enter or modify this data using the Health app.\n\nSample data\n\nSamples that represent a measurement at a particular point in time. All sample classes are subclasses of the HKSample class, which is a subclass of the HKObject class. For more information, see Samples.\n\nWorkout data\n\nSamples that store information about fitness and exercise activities. While HKWorkout is a subclass of HKSample, it behaves somewhat differently than other sample subclasses. For more information, see Workout data.\n\nSource data\n\nInformation about a sample’s source. The HKSourceRevision object contains information about the app or device that saved the sample. The HKDevice object contains information about the hardware device that generated the data.\n\nDeleted objects\n\nAn object that represents a sample after something deletes it from the HealthKit store. HealthKit uses an HKDeletedObject instance to temporarily store the UUID of deleted samples. You can use deleted objects to respond when the user or another app deletes an object. For more information, see HKAnchoredObjectQuery and HKDeletedObject.\n\nProperties of objects and samples\n\nThe HKObject class is the superclass of all HealthKit sample types. All HKObject subclasses are immutable. Each object has the following properties:\n\nUUID\n\nA unique identifier for that particular entry.\n\nMetadata\n\nA dictionary containing additional information about the entry. The metadata can contain both predefined and custom keys. The predefined keys facilitate the sharing of data between apps. Custom keys help extend a given HealthKit object type, adding app-specific data to the entry.\n\nSource Revision\n\nThe source of the sample. The source can be a device that directly saves data into HealthKit or an app. HealthKit automatically records each object’s source and version when it saves the data to the HealthKit store. This property is available only on objects retrieved from the store.\n\nDevice\n\nThe hardware device that generated the data stored in this sample.\n\nThe HKSample class is a subclass of HKObject. Sample objects represent data at a particular point in time, and all sample objects are subclasses of the HKSample class. They have the following properties:\n\nType\n\nThe sample type, such as a sleep analysis sample, a height sample, or a step count sample.\n\nStart date\n\nThe sample’s start time.\n\nEnd date\n\nThe sample’s end time. If the sample represents a single point in time, the end time should equal the start time. If the sample represents data collected over a time interval, the end time should occur after the start time.\n\nSamples are further divided into four concrete subclasses:\n\nCategory samples\n\nData that can you can classify into a finite set of categories. See HKCategorySample.\n\nQuantity samples\n\nData that you can store as numeric values. Quantity samples are the most common data types in HealthKit. These include the user’s height and weight, as well as other data such as the number of steps taken, the user’s temperature, and their pulse rate. See HKQuantitySample.\n\nCorrelations\n\nComposite data containing one or more samples. HealthKit uses correlations to represent food and blood pressure. You should always use a correlation when creating food or blood pressure data. See HKCorrelation.\n\nWorkouts\n\nData representing a physical activity, like running, swimming, or even play. Workouts often have type, duration, distance, and energy burned properties. You can also associate a workout with additional, fine-grained samples. Unlike correlations, the workout doesn’t contain these samples; however, you can query for them using the workout. For more information, see HKWorkout.\n\nThreading\n\nThe HealthKit store is thread-safe, and most HealthKit objects are immutable. In general, you can use HealthKit safely in a multithreaded environment.\n\nNote\n\nAll the HealthKit API’s completion handlers execute on private background queues. You typically dispatch this data back to the main queue before updating your user interface or changing any other resources that you can only safely modify from the main thread.\n\nFor more information about multithreading and concurrent programming, see Concurrency Programming Guide.\n\nSyncing data between devices\n\niPhone and Apple Watch each have their own HealthKit store. iPadOS 17 and later also has its own HealthKit store. HealthKit automatically syncs data between these devices. To save space, old data is periodically purged from Apple Watch. Use earliestPermittedSampleDate() to determine the earliest samples available on Apple Watch.\n\nWhile the HealthKit framework is available on iPadOS 16 and earlier and on MacOS 13 and later, these devices don’t have a copy of the HealthKit store. This means you can include HealthKit code in apps running on these devices, simplifying the creation of multiplatform apps. However, they can’t read or write HealthKit data, and calls to isHealthDataAvailable() return false.\n\nSee Also\nEssentials\nSetting up HealthKit\nSet up and configure your HealthKit store.\nAuthorizing access to health data\nRequest permission to read and share data in your app.\nProtecting user privacy\nRespect and safeguard your user’s privacy.\nHealthKit updates\nLearn about important changes to HealthKit.\nclass HKHealthStore\nThe access point for all data managed by HealthKit.\nCreating a Mobility Health App\nCreate a health app that allows a clinical care team to send and receive mobility data."
  },
  {
    "title": "HKError.Code | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkerror/code",
    "html": "Topics\nErrors\ncase errorHealthDataUnavailable\nHealthKit accessed on an unsupported device, such as an iPad.\ncase errorHealthDataRestricted\nA Mobile Device Management (MDM) profile restricts the use of HealthKit on this device.\ncase errorInvalidArgument\nThe app passed an invalid argument to the HealthKit API.\ncase errorAuthorizationDenied\nThe user hasn’t given the app permission to save data.\ncase errorAuthorizationNotDetermined\nThe app hasn’t yet asked the user for the authorization required to complete the task.\ncase errorRequiredAuthorizationDenied\nThe user hasn’t granted the application authorization to access all the required clinical record types.\ncase errorDatabaseInaccessible\nThe HealthKit data is unavailable because it’s protected and the device is locked.\ncase errorUserCanceled\nThe user canceled the operation.\ncase errorAnotherWorkoutSessionStarted\nAnother app started a workout session.\ncase errorUserExitedWorkoutSession\nThe user exited your application while a workout session was running.\ncase errorNoData\nData is unavailable for the requested query and predicate.\nEnumeration Cases\ncase errorBackgroundWorkoutSessionNotAllowed\ncase errorDataSizeExceeded\ncase errorWorkoutActivityNotAllowed\ncase unknownError\nType Properties\nstatic var noError: HKError.Code\nRelationships\nConforms To\nSendable\nSee Also\nAccessing errors\nstatic var noError: HKError.Code\nNo error occurred.\nstatic var errorHealthDataUnavailable: HKError.Code\nThe user accessed HealthKit on an unsupported device.\nstatic var errorHealthDataRestricted: HKError.Code\nA Mobile Device Management (MDM) profile restricts the use of HealthKit on this device.\nstatic var errorInvalidArgument: HKError.Code\nThe app passed an invalid argument to the HealthKit API.\nstatic var errorAuthorizationDenied: HKError.Code\nThe user hasn’t given the app permission to save data.\nstatic var errorAuthorizationNotDetermined: HKError.Code\nThe app hasn’t yet asked the user for the authorization required to complete the task.\nstatic var errorRequiredAuthorizationDenied: HKError.Code\nThe user hasn’t granted the application authorization to access all the required clinical record types.\nstatic var errorDatabaseInaccessible: HKError.Code\nThe HealthKit data is unavailable because it’s protected and the device is locked.\nstatic var errorUserCanceled: HKError.Code\nThe user canceled the operation.\nstatic var errorAnotherWorkoutSessionStarted: HKError.Code\nAnother app started a workout session.\nstatic var errorUserExitedWorkoutSession: HKError.Code\nThe user exited your application while a workout session was running.\nstatic var errorNoData: HKError.Code\nData is unavailable for the requested query and predicate."
  },
  {
    "title": "Workouts and activity rings | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/workouts_and_activity_rings",
    "html": "Overview\n\nA workout is a sample that contains data about an exercise or fitness activity. You save workout data using the HKWorkout class. In many ways, workouts are identical to any other HealthKit sample—the same advice and APIs apply to both workouts and samples. However, workouts do have a number of unique features, described in HKWorkout.\n\nWorkout sessions let you track the user’s activity on Apple Watch. While a workout session is active, your app can continue to run in the background. This lets your app monitor the user and gather data throughout the activity. Additionally, it ensures that your app appears whenever the user checks their watch. After the session ends, your app saves the activity’s data as a workout sample. For more information on setting up and running workout sessions, see HKWorkoutSession.\n\nThe Activity Rings display a summary of the user’s daily activity on Apple Watch and in the Activity app. Activity summaries provide access to the data displayed in the user’s Move, Exercise, and Stand rings. To see how your workout samples contribute to these rings, see Fill the Activity rings. To learn more about accessing and displaying activity data in your app, see Activity rings.\n\nFinally, workout routes record the user’s path during an outdoor activity (for example, while walking, running, or cycling). Routes can be associated with a workout sample. For more information, see Creating a workout route and Reading route data.\n\nTopics\nSamples\nAdding samples to a workout\nCreate associated samples that add details to a workout.\nAccessing condensed workout samples\nRead series data from condensed workouts.\nDividing a HealthKit workout into activities\nPartition multisport and interval workouts into activities that represent the different parts of the workout.\nclass HKWorkout\nA workout sample that stores information about a single physical activity.\nclass HKWorkoutActivity\nAn object that describes an activity within a longer workout.\nclass HKWorkoutBuilder\nA builder object that incrementally constructs a workout.\nclass HKWorkoutType\nA type that identifies samples that store information about a workout.\nlet HKWorkoutTypeIdentifier: String\nThe workout type identifier.\nenum HKWorkoutActivityType\nThe type of activity performed during a workout.\nenum HKWorkoutSessionType\nThe type of session.\nclass HKWorkoutEvent\nAn object representing an important event during a workout.\nSessions\nRunning workout sessions\nTrack a workout on Apple Watch.\nBuild a workout app for Apple Watch\nCreate your own workout app, quickly and easily, with HealthKit and SwiftUI.\nBuilding a multidevice workout app\nMirror a workout from a watchOS app to its companion iOS app, and perform bidirectional communication between them.\nclass HKWorkoutSession\nA session that tracks the user’s workout on Apple Watch.\nclass HKWorkoutConfiguration\nAn object that contains configuration information about a workout session.\nenum HKWorkoutSessionState\nA workout session’s state.\nclass HKLiveWorkoutBuilder\nA builder object that constructs a workout incrementally based on live data from an active workout session.\nclass HKLiveWorkoutDataSource\nA data source that automatically provides live data from an active workout session.\nActivity rings\nclass HKActivitySummary\nAn object that contains the move, exercise, and stand data for a given day.\nstruct HKActivitySummaryQueryDescriptor\nA query interface that reads activity summaries using Swift concurrency.\nclass HKActivitySummaryQuery\nA query for reading activity summary objects from the HealthKit store.\nclass HKActivityRingView\nA view that uses the Move, Exercise, and Stand activity rings to display data from a HealthKit activity summary object.\nclass HKActivityMoveModeObject\nAn object that contains a movement mode value.\nRoute data\nCreating a workout route\nRecord the user’s route during a workout.\nReading route data\nAccess the user’s route for a workout.\nclass HKWorkoutRouteBuilder\nA builder object that incrementally constructs a workout route.\nclass HKWorkoutRoute\nA sample that contains a workout’s route data.\nstruct HKWorkoutRouteQueryDescriptor\nA query interface that reads the location data stored in a workout route using Swift concurrency.\nclass HKWorkoutRouteQuery\nA query to access the location data stored in a workout route.\nlet HKWorkoutRouteTypeIdentifier: String\nA series sample containing location data that defines the route the user took during a workout.\nclass HKSeriesBuilder\nAn abstract base class for building series samples.\nclass HKSeriesSample\nAn abstract base class that defines samples that contain a series of items."
  },
  {
    "title": "errorRequiredAuthorizationDenied | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkerror/2980715-errorrequiredauthorizationdenied",
    "html": "Discussion\n\nYou can specify required clinical record types using the NSHealthRequiredReadAuthorizationTypeIdentifiers Info.plist key.\n\nSee Also\nAccessing errors\nenum HKError.Code\nError codes returned by HealthKit.\nstatic var noError: HKError.Code\nNo error occurred.\nstatic var errorHealthDataUnavailable: HKError.Code\nThe user accessed HealthKit on an unsupported device.\nstatic var errorHealthDataRestricted: HKError.Code\nA Mobile Device Management (MDM) profile restricts the use of HealthKit on this device.\nstatic var errorInvalidArgument: HKError.Code\nThe app passed an invalid argument to the HealthKit API.\nstatic var errorAuthorizationDenied: HKError.Code\nThe user hasn’t given the app permission to save data.\nstatic var errorAuthorizationNotDetermined: HKError.Code\nThe app hasn’t yet asked the user for the authorization required to complete the task.\nstatic var errorDatabaseInaccessible: HKError.Code\nThe HealthKit data is unavailable because it’s protected and the device is locked.\nstatic var errorUserCanceled: HKError.Code\nThe user canceled the operation.\nstatic var errorAnotherWorkoutSessionStarted: HKError.Code\nAnother app started a workout session.\nstatic var errorUserExitedWorkoutSession: HKError.Code\nThe user exited your application while a workout session was running.\nstatic var errorNoData: HKError.Code\nData is unavailable for the requested query and predicate."
  },
  {
    "title": "localizedDescription | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkerror/2882806-localizeddescription",
    "html": "See Also\nAccessing the errors properties\nstatic var errorDomain: String\nThe domain for all HealthKit errors.\nvar errorCode: Int\nA code that represents the error.\nvar code: Code\nA code that represents the error.\nvar errorUserInfo: [String : Any]\nA dictionary that contains additional information about the error.\nvar userInfo: [String : Any]\nA dictionary that contains additional information about the error."
  },
  {
    "title": "Data types | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/data_types",
    "html": "Overview\n\nHealthKit uses HKObjectType subclasses to identify the different types of data stored in HealthKit, from inherent data that doesn’t typically change over time to complex data types that combine multiple samples or compute values over sets of samples.\n\nTo create a type object, call the appropriate HKObjectType class method, and pass in the desired type identifier.\n\nlet bloodType = HKObjectType.characteristicType(forIdentifier: .bloodType)\n\n\nlet caloriesConsumed = HKObjectType.quantityType(forIdentifier: .dietaryEnergyConsumed)\n\n\nlet sleepAnalysis = HKObjectType.categoryType(forIdentifier: .sleepAnalysis)\n\n\nYou can use the resulting object types to request permission to access the data, save new data to the HealthKit store, or read data from the HealthKit store.\n\nTopics\nObject type subclasses\nclass HKCharacteristicType\nA type that represents data that doesn’t typically change over time.\nclass HKQuantityType\nA type that identifies samples that store numerical values.\nclass HKCategoryType\nA type that identifies samples that contain a value from a small set of possible values.\nclass HKCorrelationType\nA type that identifies samples that group multiple subsamples.\nclass HKActivitySummaryType\nA type that identifies activity summary objects.\nclass HKAudiogramSampleType\nA type that identifies samples that contain audiogram data.\nclass HKElectrocardiogramType\nA type that identifies samples containing electrocardiogram data.\nclass HKSeriesType\nA type that indicates the data stored in a series sample.\nclass HKClinicalType\nA type that identifies samples that contain clinical record data.\nclass HKWorkoutType\nA type that identifies samples that store information about a workout.\nclass HKObjectType\nAn abstract superclass with subclasses that identify a specific type of data for the HealthKit store.\nclass HKSampleType\nAn abstract superclass for all classes that identify a specific type of sample when working with the HealthKit store.\nCharacteristic identifiers\nstatic let activityMoveMode: HKCharacteristicTypeIdentifier\nA characteristic identifier for the user’s activity mode.\nstatic let biologicalSex: HKCharacteristicTypeIdentifier\nA characteristic type identifier for the user’s sex.\nstatic let bloodType: HKCharacteristicTypeIdentifier\nA characteristic type identifier for the user’s blood type.\nstatic let dateOfBirth: HKCharacteristicTypeIdentifier\nA characteristic type identifier for the user’s date of birth.\nstatic let fitzpatrickSkinType: HKCharacteristicTypeIdentifier\nA characteristic type identifier for the user’s skin type.\nstatic let wheelchairUse: HKCharacteristicTypeIdentifier\nA characteristic identifier for the user’s use of a wheelchair.\nActivity\nstatic let stepCount: HKQuantityTypeIdentifier\nA quantity sample type that measures the number of steps the user has taken.\nstatic let distanceWalkingRunning: HKQuantityTypeIdentifier\nA quantity sample type that measures the distance the user has moved by walking or running.\nstatic let runningSpeed: HKQuantityTypeIdentifier\nA quantity sample type that measures the runner’s speed.\nstatic let runningStrideLength: HKQuantityTypeIdentifier\nA quantity sample type that measures the distance covered by a single step while running.\nstatic let runningPower: HKQuantityTypeIdentifier\nA quantity sample type that measures the rate of work required for the runner to maintain their speed.\nstatic let runningGroundContactTime: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of time the runner’s foot is in contact with the ground while running.\nstatic let runningVerticalOscillation: HKQuantityTypeIdentifier\nA quantity sample type measuring pelvis vertical range of motion during a single running stride.\nstatic let distanceCycling: HKQuantityTypeIdentifier\nA quantity sample type that measures the distance the user has moved by cycling.\nstatic let pushCount: HKQuantityTypeIdentifier\nA quantity sample type that measures the number of pushes that the user has performed while using a wheelchair.\nstatic let distanceWheelchair: HKQuantityTypeIdentifier\nA quantity sample type that measures the distance the user has moved using a wheelchair.\nstatic let swimmingStrokeCount: HKQuantityTypeIdentifier\nA quantity sample type that measures the number of strokes performed while swimming.\nstatic let distanceSwimming: HKQuantityTypeIdentifier\nA quantity sample type that measures the distance the user has moved while swimming.\nstatic let distanceDownhillSnowSports: HKQuantityTypeIdentifier\nA quantity sample type that measures the distance the user has traveled while skiing or snowboarding.\nstatic let basalEnergyBurned: HKQuantityTypeIdentifier\nA quantity sample type that measures the resting energy burned by the user.\nstatic let activeEnergyBurned: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of active energy the user has burned.\nstatic let flightsClimbed: HKQuantityTypeIdentifier\nA quantity sample type that measures the number flights of stairs that the user has climbed.\nstatic let nikeFuel: HKQuantityTypeIdentifier\nA quantity sample type that measures the number of NikeFuel points the user has earned.\nstatic let appleExerciseTime: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of time the user spent exercising.\nstatic let appleMoveTime: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of time the user has spent performing activities that involve full-body movements during the specified day.\nstatic let appleStandHour: HKCategoryTypeIdentifier\nA category sample type that counts the number of hours in the day during which the user has stood and moved for at least one minute per hour.\nstatic let appleStandTime: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of time the user has spent standing.\nstatic let vo2Max: HKQuantityTypeIdentifier\nA quantity sample that measures the maximal oxygen consumption during exercise.\nstatic let lowCardioFitnessEvent: HKCategoryTypeIdentifier\nAn event that indicates the user’s VO2 max values consistently fall below a particular aerobic fitness threshold.\nAttachments\nclass HKAttachment\nA file that is attached to a sample in the HealthKit store.\nclass HKAttachmentStore\nThe access point for attachments associated with samples in the HealthKit store.\nclass HKAttachmentDataReader\nA reader that provides access to an attachment’s data.\nBody measurements\nstatic let height: HKQuantityTypeIdentifier\nA quantity sample type that measures the user’s height.\nstatic let bodyMass: HKQuantityTypeIdentifier\nA quantity sample type that measures the user’s weight.\nstatic let bodyMassIndex: HKQuantityTypeIdentifier\nA quantity sample type that measures the user’s body mass index.\nstatic let leanBodyMass: HKQuantityTypeIdentifier\nA quantity sample type that measures the user’s lean body mass.\nstatic let bodyFatPercentage: HKQuantityTypeIdentifier\nA quantity sample type that measures the user’s body fat percentage.\nstatic let waistCircumference: HKQuantityTypeIdentifier\nA quantity sample type that measures the user’s waist circumference.\nstatic let appleSleepingWristTemperature: HKQuantityTypeIdentifier\nA quantity sample type that records the wrist temperature during sleep.\nReproductive health\nstatic let menstrualFlow: HKCategoryTypeIdentifier\nA category sample type that records menstrual cycles.\nstatic let intermenstrualBleeding: HKCategoryTypeIdentifier\nA category sample type that records spotting outside the normal menstruation period.\nstatic let infrequentMenstrualCycles: HKCategoryTypeIdentifier\nA category sample that indicates an infrequent menstrual cycle.\nstatic let irregularMenstrualCycles: HKCategoryTypeIdentifier\nA category sample that indicates an irregular menstrual cycle.\nstatic let persistentIntermenstrualBleeding: HKCategoryTypeIdentifier\nA category sample that indicates persistent intermenstrual bleeding.\nstatic let prolongedMenstrualPeriods: HKCategoryTypeIdentifier\nA category sample that indicates a prolonged menstrual cycle.\nstatic let basalBodyTemperature: HKQuantityTypeIdentifier\nA quantity sample type that records the user’s basal body temperature.\nstatic let cervicalMucusQuality: HKCategoryTypeIdentifier\nA category sample type that records the quality of the user’s cervical mucus.\nstatic let ovulationTestResult: HKCategoryTypeIdentifier\nA category sample type that records the result of an ovulation home test.\nstatic let progesteroneTestResult: HKCategoryTypeIdentifier\nA category type that represents the results from a home progesterone test.\nstatic let sexualActivity: HKCategoryTypeIdentifier\nA category sample type that records sexual activity.\nstatic let contraceptive: HKCategoryTypeIdentifier\nA category sample type that records the use of contraceptives.\nstatic let pregnancy: HKCategoryTypeIdentifier\nA category type that records pregnancy.\nstatic let pregnancyTestResult: HKCategoryTypeIdentifier\nA category type that represents the results from a home pregnancy test.\nstatic let lactation: HKCategoryTypeIdentifier\nA category type that records lactation.\nHearing\nstatic let environmentalAudioExposure: HKQuantityTypeIdentifier\nA quantity sample type that measures audio exposure to sounds in the environment.\nstatic let headphoneAudioExposure: HKQuantityTypeIdentifier\nA quantity sample type that measures audio exposure from headphones.\nstatic let environmentalAudioExposureEvent: HKCategoryTypeIdentifier\nA category sample type that records exposure to potentially damaging sounds from the environment.\nstatic let headphoneAudioExposureEvent: HKCategoryTypeIdentifier\nA category sample type that records exposure to potentially damaging sounds from headphones.\nstatic let audioExposureEvent: HKCategoryTypeIdentifier\nA category sample type for audio exposure events.\nVital signs\nstatic let heartRate: HKQuantityTypeIdentifier\nA quantity sample type that measures the user’s heart rate.\nstatic let lowHeartRateEvent: HKCategoryTypeIdentifier\nA category sample type for low heart rate events.\nstatic let highHeartRateEvent: HKCategoryTypeIdentifier\nA category sample type for high heart rate events.\nstatic let irregularHeartRhythmEvent: HKCategoryTypeIdentifier\nA category sample type for irregular heart rhythm events.\nstatic let restingHeartRate: HKQuantityTypeIdentifier\nA quantity sample type that measures the user’s resting heart rate.\nstatic let heartRateVariabilitySDNN: HKQuantityTypeIdentifier\nA quantity sample type that measures the standard deviation of heartbeat intervals.\nstatic let heartRateRecoveryOneMinute: HKQuantityTypeIdentifier\nA quantity sample that records the reduction in heart rate from the peak exercise rate to the rate one minute after exercising ended.\nstatic let atrialFibrillationBurden: HKQuantityTypeIdentifier\nA quantity type that measures an estimate of the percentage of time a person’s heart shows signs of atrial fibrillation (AFib) while wearing Apple Watch.\nstatic let walkingHeartRateAverage: HKQuantityTypeIdentifier\nA quantity sample type that measures the user’s heart rate while walking.\nlet HKDataTypeIdentifierHeartbeatSeries: String\nA series sample containing heartbeat data.\nclass HKElectrocardiogramType\nA type that identifies samples containing electrocardiogram data.\nstatic let oxygenSaturation: HKQuantityTypeIdentifier\nA quantity sample type that measures the user’s oxygen saturation.\nstatic let bodyTemperature: HKQuantityTypeIdentifier\nA quantity sample type that measures the user’s body temperature.\nstatic let bloodPressure: HKCorrelationTypeIdentifier\nA correlation sample that combines a systolic sample and a diastolic sample into a single blood pressure reading.\nstatic let bloodPressureSystolic: HKQuantityTypeIdentifier\nA quantity sample type that measures the user’s systolic blood pressure.\nstatic let bloodPressureDiastolic: HKQuantityTypeIdentifier\nA quantity sample type that measures the user’s diastolic blood pressure.\nstatic let respiratoryRate: HKQuantityTypeIdentifier\nA quantity sample type that measures the user’s respiratory rate.\nNutrition\nNutrition Type Identifiers\nType identifiers used for tracking diet and nutrition.\nAlcohol consumption\nstatic let bloodAlcoholContent: HKQuantityTypeIdentifier\nA quantity sample type that measures the user’s blood alcohol content.\nstatic let numberOfAlcoholicBeverages: HKQuantityTypeIdentifier\nA quantity sample type that measures the number of standard alcoholic drinks that the user has consumed.\nMobility\nstatic let appleWalkingSteadiness: HKQuantityTypeIdentifier\nA quantity sample type that measures the steadiness of the user’s gait.\nstatic let appleWalkingSteadinessEvent: HKCategoryTypeIdentifier\nA category sample type that records an incident where the user showed a reduced score for their gait’s steadiness.\nstatic let sixMinuteWalkTestDistance: HKQuantityTypeIdentifier\nA quantity sample type that stores the distance a user can walk during a six-minute walk test.\nstatic let walkingSpeed: HKQuantityTypeIdentifier\nA quantity sample type that measures the user’s average speed when walking steadily over flat ground.\nstatic let walkingStepLength: HKQuantityTypeIdentifier\nA quantity sample type that measures the average length of the user’s step when walking steadily over flat ground.\nstatic let walkingAsymmetryPercentage: HKQuantityTypeIdentifier\nA quantity sample type that measures the percentage of steps in which one foot moves at a different speed than the other when walking on flat ground.\nstatic let walkingDoubleSupportPercentage: HKQuantityTypeIdentifier\nA quantity sample type that measures the percentage of time when both of the user’s feet touch the ground while walking steadily over flat ground.\nstatic let stairAscentSpeed: HKQuantityTypeIdentifier\nA quantity sample type measuring the user’s speed while climbing a flight of stairs.\nstatic let stairDescentSpeed: HKQuantityTypeIdentifier\nA quantity sample type measuring the user’s speed while descending a flight of stairs.\nSymptoms\nSymptom Type Identifiers\nIdentifiers for medical symptoms.\nLab and test results\nstatic let bloodAlcoholContent: HKQuantityTypeIdentifier\nA quantity sample type that measures the user’s blood alcohol content.\nstatic let bloodGlucose: HKQuantityTypeIdentifier\nA quantity sample type that measures the user’s blood glucose level.\nstatic let electrodermalActivity: HKQuantityTypeIdentifier\nA quantity sample type that measures electrodermal activity.\nstatic let forcedExpiratoryVolume1: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of air that can be forcibly exhaled from the lungs during the first second of a forced exhalation.\nstatic let forcedVitalCapacity: HKQuantityTypeIdentifier\nA quantity sample type that measures the amount of air that can be forcibly exhaled from the lungs after taking the deepest breath possible.\nstatic let inhalerUsage: HKQuantityTypeIdentifier\nA quantity sample type that measures the number of puffs the user takes from their inhaler.\nstatic let insulinDelivery: HKQuantityTypeIdentifier\nA quantity sample that measures the amount of insulin delivered.\nstatic let numberOfTimesFallen: HKQuantityTypeIdentifier\nA quantity sample type that measures the number of times the user fell.\nstatic let peakExpiratoryFlowRate: HKQuantityTypeIdentifier\nA quantity sample type that measures the user’s maximum flow rate generated during a forceful exhalation.\nstatic let peripheralPerfusionIndex: HKQuantityTypeIdentifier\nA quantity sample type that measures the user’s peripheral perfusion index.\nMindfulness and sleep\nstatic let mindfulSession: HKCategoryTypeIdentifier\nA category sample type for recording a mindful session.\nstatic let sleepAnalysis: HKCategoryTypeIdentifier\nA category sample type for sleep analysis information.\nSelf care\nstatic let toothbrushingEvent: HKCategoryTypeIdentifier\nA category sample type for toothbrushing events.\nstatic let handwashingEvent: HKCategoryTypeIdentifier\nA category sample type for handwashing events.\nWorkouts\nlet HKWorkoutTypeIdentifier: String\nThe workout type identifier.\nlet HKWorkoutRouteTypeIdentifier: String\nA series sample containing location data that defines the route the user took during a workout.\nClinical records\nstruct HKClinicalTypeIdentifier\nA type identifier for the different categories of clinical records.\nUV exposure\nstatic let uvExposure: HKQuantityTypeIdentifier\nA quantity sample type that measures the user’s exposure to UV radiation.\nVision\nlet HKVisionPrescriptionTypeIdentifier: String\nA type identifier for vision prescription samples.\nDiving\nstatic let underwaterDepth: HKQuantityTypeIdentifier\nA quantity sample that records a person’s depth underwater.\nstatic let waterTemperature: HKQuantityTypeIdentifier\nA quantity sample that records the water temperature.\nUtilities\nstruct BufferedAsyncByteIterator\nAn asynchronous iterator for byte data.\nSee Also\nHealth data\nSaving data to HealthKit\nCreate and share HealthKit samples.\nReading data from HealthKit\nUse queries to request sample data from HealthKit.\nSamples\nCreate and save health and fitness samples.\nQueries\nQuery health and fitness data."
  },
  {
    "title": "Queries | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/queries",
    "html": "Overview\n\nUse queries to read sample data from the HealthKit store. You can also use queries to list all the sources for a particular data type, or to perform statistical calculations for a data type. For example, statistical queries can calculate the minimum and maximum heart rate for a given week, or the total step count for a given day.\n\nYou run a query by calling the HealthKit store’s execute(_:) method. HealthKit returns a snapshot of the current results to the query’s results handler. Long-running queries continue to monitor the HealthKit store, and return any relevant changes to the query’s update handler. To return sorted or filtered results, give the query a sort descriptor or predicate.\n\nTopics\nEssentials\nReading data from HealthKit\nUse queries to request sample data from HealthKit.\nSwift concurrency support\nRunning Queries with Swift Concurrency\nUse Swift concurrency to manage one-shot and long-running queries.\nprotocol HKAsyncQuery\nA protocol that defines an asynchronous method for running queries.\nprotocol HKAsyncSequenceQuery\nA protocol that defines a method for running queries that returns results using an asynchronous sequence.\nstruct HKSamplePredicate\nA predicate for queries that return a collection of matching sample objects.\nBasic queries\nstruct HKSampleQueryDescriptor\nA query interface that reads samples using Swift concurrency.\nclass HKSampleQuery\nA general query that returns a snapshot of all the matching samples currently saved in the HealthKit store.\nclass HKCorrelationQuery\nA query that performs complex searches based on the correlation’s contents, and returns a snapshot of all matching samples.\nclass HKQueryDescriptor\nA descriptor that specifies a set of samples based on the data type and a predicate.\nclass HKQuery\nAn abstract class for all the query classes in HealthKit.\nSeries queries\nstruct HKQuantitySeriesSampleQueryDescriptor\nA query interface that reads the series data associated with quantity samples using Swift concurrency.\nclass HKQuantitySeriesSampleQuery\nA query that accesses the series data associated with a quantity sample.\nstruct HKWorkoutRouteQueryDescriptor\nA query interface that reads the location data stored in a workout route using Swift concurrency.\nclass HKWorkoutRouteQuery\nA query to access the location data stored in a workout route.\nstruct HKHeartbeatSeriesQueryDescriptor\nA query interface that reads the heartbeat series data stored in a heartbeat sample using Swift concurrency.\nclass HKHeartbeatSeriesQuery\nA query that returns the heartbeat data contained in a heartbeat series sample.\nstruct HKElectrocardiogramQueryDescriptor\nA query interface that reads the underlying voltage measurements for an electrocardiogram sample using Swift concurrency.\nclass HKElectrocardiogramQuery\nA query that returns the underlying voltage measurements for an electrocardiogram sample.\nLong-running queries\nstruct HKActivitySummaryQueryDescriptor\nA query interface that reads activity summaries using Swift concurrency.\nclass HKActivitySummaryQuery\nA query for reading activity summary objects from the HealthKit store.\nstruct HKAnchoredObjectQueryDescriptor\nA query interface that runs anchored object queries using Swift concurrency.\nclass HKAnchoredObjectQuery\nA query that returns changes to the HealthKit store, including a snapshot of new changes and continuous monitoring as a long-running query.\nclass HKObserverQuery\nA long-running query that monitors the HealthKit store and updates your app when the HealthKit store saves or deletes a matching sample.\nSources and devices\nstruct HKSourceQueryDescriptor\nA query interface that uses Swift concurrency to read the apps and devices that produced the matching samples.\nclass HKSourceRevision\nAn object indicating the source of a HealthKit sample.\nclass HKSource\nAn object indicating the app or device that created a HealthKit sample\nclass HKDevice\nA device that generates data for HealthKit.\nclass HKSourceQuery\nA query that returns a list of sources, such as apps and devices, that have saved matching queries to the HealthKit store.\nStatistics\nExecuting Statistical Queries\nCreate and run statistical queries.\nExecuting Statistics Collection Queries\nCalculate statistical data for graphs and charts.\nstruct HKStatisticsQueryDescriptor\nA query descriptor that calculates the minimum, maximum, average, or sum over a set of samples from the HealthKit store.\nclass HKStatisticsQuery\nA query that performs statistical calculations over a set of matching quantity samples, and returns the results.\nstruct HKStatisticsCollectionQueryDescriptor\nA query descriptor that gathers a collection of statistics calculated over a series of fixed-length time intervals.\nclass HKStatisticsCollectionQuery\nA query that performs multiple statistics queries over a series of fixed-length time intervals.\nclass HKStatistics\nAn object that represents the result of calculating the minimum, maximum, average, or sum over a set of samples from the HealthKit store.\nclass HKStatisticsCollection\nAn object that manages a collection of statistics, representing the results calculated over separate time intervals.\nstruct HKStatisticsOptions\nOptions for specifying the statistic to calculate.\nClinical record queries\nstruct HKVerifiableClinicalRecordQueryDescriptor\nA query interface that provides one-time access to a SMART Health Card or EU Digital COVID Certificate using Swift concurrency.\nclass HKVerifiableClinicalRecordQuery\nA query for one-time access to a SMART Health Card or EU Digital COVID Certificate.\nstruct HKVerifiableClinicalRecordSourceType\nThe source type for the verifiable clinical record.\nstruct HKVerifiableClinicalRecordCredentialType\nThe type of record returned by a verifiable clinical record query.\nclass HKDocumentQuery\nA query that returns a snapshot of all matching documents currently saved in the HealthKit store.\nSee Also\nHealth data\nSaving data to HealthKit\nCreate and share HealthKit samples.\nReading data from HealthKit\nUse queries to request sample data from HealthKit.\nData types\nSpecify the kind of data used in HealthKit.\nSamples\nCreate and save health and fitness samples."
  },
  {
    "title": "Samples | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/samples",
    "html": "Overview\n\nThe HealthKit store saves most health and fitness data using HKSample subclasses. All sample subclasses record information at a specified time. If the sample’s startDate and endDate properties are the same, the sample represents a point in time. If the endDate is after the startDate, the sample represents a time interval.\n\nHealthKit uses different HKSample subclasses to store different types of data:\n\nHKQuantitySample objects store quantities—a numerical value and units. Most HealthKit data types use quantity samples. For example, height, heart rate, and dietary energy consumed all use quantity samples.\n\nHKCategorySample objects store a single option selected from a short list. For example, category samples record sleep data (the user can be in bed, asleep, or awake).\n\nHKCorrelation samples combine two or more samples into a single value. For example, correlation samples represent food intake and blood pressure samples. A food sample contains any number of nutrition samples, while a blood pressure sample contains both a systolic and a diastolic sample.\n\nHealthKit represents specialized data types with sample subclasses such as HKCDADocumentSample, HKWorkoutRoute, and HKWorkout.\n\nTopics\nEssentials\nSaving data to HealthKit\nCreate and share HealthKit samples.\nReading and Writing HealthKit Series Data\nShare and read heartbeat and quantity series data using series builders and queries.\nBasic samples\nclass HKCumulativeQuantitySample\nA sample that represents a cumulative quantity.\nclass HKDiscreteQuantitySample\nA sample that represents a discrete quantity.\nclass HKQuantitySample\nA sample that represents a quantity, including the value and the units.\nclass HKCategorySample\nA sample with values from a short list of possible values.\nclass HKCorrelation\nA sample that groups multiple related samples into a single entry.\nUnits and quantities\nObjects used to specify a quantity for a given unit, and to convert between units.\nMetadata Keys\nConstants used to add metadata to objects stored in HealthKit.\nSeries data\nclass HKQuantitySeriesSampleBuilder\nA builder object for incrementally building a sample that contains multiple quantities.\nclass HKHeartbeatSeriesBuilder\nA builder object for incrementally building a heartbeat series.\nclass HKHeartbeatSeriesSample\nA sample that represents a series of heartbeats.\nElectrocardiograms\nclass HKElectrocardiogram\nA sample for electrocardiogram data.\nclass HKElectrocardiogram.VoltageMeasurement\nThe voltage for all leads at a single point in time.\nAudiograms\nclass HKAudiogramSample\nA sample that stores an audiogram.\nclass HKAudiogramSensitivityPoint\nA hearing sensitivity reading associated with a hearing test.\nMedical records\nAccessing Health Records\nRead clinical record data from the HealthKit store.\nAccessing Sample Data in the Simulator\nSet up sample accounts to build and test your app.\nAccessing a User’s Clinical Records\nRequest authorization to query HealthKit for a user’s clinical records and display them in your app.\nAccessing Data from a SMART Health Card\nQuery for and validate a verifiable clinical record.\nclass HKClinicalRecord\nA sample that stores a clinical record.\nclass HKFHIRResource\nAn object containing Fast Healthcare Interoperability Resources (FHIR) data.\nclass HKVerifiableClinicalRecord\nA sample that represents the contents of a SMART Health Card or EU Digital COVID Certificate.\nclass HKVerifiableClinicalRecordSubject\nThe subject associated with a signed clinical record.\nclass HKCDADocumentSample\nA Clinical Document Architecture (CDA) sample that stores a single document.\nclass HKDocumentSample\nAn abstract class that represents a health document in the HealthKit store.\nstatic let CDA: HKDocumentTypeIdentifier\nThe CDA Document type identifier, used when requesting permission to read or share CDA documents.\nclass HKDocumentType\nA sample type used to create queries for documents.\nVision prescriptions\nclass HKVisionPrescription\nA sample that stores a vision prescription.\nclass HKGlassesPrescription\nA sample that stores a prescription for glasses.\nclass HKContactsPrescription\nA sample that store a prescription for contacts.\nclass HKGlassesLensSpecification\nAn object that contains the glasses prescription data for one eye.\nclass HKContactsLensSpecification\nAn object that contains the contacts prescription data for one eye.\nclass HKLensSpecification\nAn abstract superclass for lens specifications.\nclass HKVisionPrism\nPrescription data for eye alignment.\nclass HKPrescriptionType\nA type that identifies samples that store a prescription.\nAttachments\nclass HKAttachment\nA file that is attached to a sample in the HealthKit store.\nclass HKAttachmentStore\nThe access point for attachments associated with samples in the HealthKit store.\nclass HKAttachmentDataReader\nA reader that provides access to an attachment’s data.\nDigital signatures\nAdding Digital Signatures\nCryptographically sign samples.\nAbstract superclasses\nclass HKQuantitySample\nA sample that represents a quantity, including the value and the units.\nclass HKSample\nA HealthKit sample represents a piece of data associated with a start and end time.\nclass HKObject\nA piece of data that can be stored inside the HealthKit store.\nDeprecated classes\nclass HKCumulativeQuantitySeriesSample\nA sample representing a series of cumulative quantity values.\nSee Also\nHealth data\nSaving data to HealthKit\nCreate and share HealthKit samples.\nReading data from HealthKit\nUse queries to request sample data from HealthKit.\nData types\nSpecify the kind of data used in HealthKit.\nQueries\nQuery health and fitness data."
  },
  {
    "title": "recoverActiveWorkoutSession(completion:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkhealthstore/2962889-recoveractiveworkoutsession",
    "html": "Discussion\n\nConcurrency Note\n\nYou can call this method from synchronous code using a completion handler, as shown on this page, or you can call it as an asynchronous method that has the following declaration:\n\nfunc recoverActiveWorkoutSession() async throws -> HKWorkoutSession?\n\n\nFor information about concurrency and asynchronous code in Swift, see Calling Objective-C APIs Asynchronously.\n\nIf your app crashes during an active workout session, the system calls your extension delegate’s handleActiveWorkoutRecovery() method the next time your app launches. To recover the workout session, call recoverActiveWorkoutSession(completion:) from your extension delegate’s handleActiveWorkoutRecovery() method. HealthKit then attempts to restore the previous workout session, returning either a new session object or an error to the completion block.\n\nAs soon as you receive the session object, you must access its builder and set up your data source and delegates again, as described in Start a session.\n\nSee Also\nManaging workouts\nfunc splitTotalEnergy(HKQuantity, start: Date, end: Date, resultsHandler: (HKQuantity?, HKQuantity?, Error?) -> Void)\nCalculates the active and resting energy burned based on the total energy burned over the given duration."
  },
  {
    "title": "Saving data to HealthKit | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/saving_data_to_healthkit",
    "html": "Overview\n\nYour app can create new samples and add them to the HealthKit store. Although all sample types follow a similar procedure, each type has its own variations:\n\nLook up the type identifier for your data. For example, to record the user’s weight, you use the bodyMass type identifier. For the complete list of type identifiers, see Data types.\n\nUse the convenience methods on the HKObjectType class to create the correct object type for your data. For example, to save the user’s weight, you’d create an HKQuantityType object using the quantityType(forIdentifier:) method. For a list of convenience methods, see HKObjectType.\n\nInstantiate an object of the matching HKSample subclass using the object type.\n\nSave the object to the HealthKit store using the save(_:withCompletion:) method.\n\nEach HKSample subclass has its own convenience methods for instantiating sample objects, which modify the steps described in the list above.\n\nFor quantity samples, create an instance of the HKQuantity class. The quantity’s units must correspond to the allowable units described in the type identifier’s documentation. For example, the height documentation states that it uses length units. Therefore, your quantity must use centimeters, meters, feet, inches, or another compatible unit. For more information, see HKQuantitySample.\n\nFor category samples, the sample’s value must correspond to the enum described in the type identifier’s documentation. For example, the sleepAnalysis documentation states that it uses the HKCategoryValueSleepAnalysis enum. Therefore, you must pass a value from this enum when creating this sample. For more information, see HKCategorySample.\n\nFor correlations, you must first create all the sample objects that the correlation will contain. The correlation’s type identifier describes both the type and the number of objects that can be contained. Do not save the contained objects into the HealthKit store. They are stored as part of the correlation. For more information, see HKCorrelation.\n\nImportant\n\nIn iOS 17 and later, the Journal app encourages people to reflect on their day-to-day experiences, such as their physical accomplishments including workouts. If your app saves data to HealthKit, high-level summaries of that data can appear as suggestions in the Journal app, or in other apps that use the Journaling Suggestions framework.\n\nBalance performance and details\n\nWhen saving data to the HealthKit store, you often need to choose between using a single sample to represent the data or splitting the data across multiple, smaller samples. A single, long sample is better from a performance perspective; however, multiple smaller samples gives the user a more detailed look into how their data changes over time. Ideally, you want to find a sample size that is granular enough to provide the user with useful historical data.\n\nWhen recording a workout, you can use high frequency data (a minute or less per sample) to provide intensity charts and otherwise analyze the user’s performance over the workout. For less intensive activity, like daily step counts, samples of an hour or less often work best. This lets you produce meaningful daily and hourly graphs.\n\nApps should avoid saving samples that are 24 hours long or longer.\n\nWork with data in the Health app\n\nThe Health app gives users access to all of the data in their HealthKit store. Users can view, add, delete, and manage their data.\n\nSpecifically, users can:\n\nSee a dashboard containing their current health data.\n\nAccess all the data stored in HealthKit. Users can view the data by type, by app, or by device.\n\nManage each app’s permission to read and write from the HealthKit store.\n\nAs a result, the Health app has a few important impacts on developing HealthKit apps. First, remember that users can always modify their data outside your app or even change your permission to access their data. As a result, your app should always query for the current data in the HealthKit store or perform background queries to track changes to the store.\n\nSecond, you can also use the Health app to view the data your app is saving to the HealthKit store. This can be particularly useful during early testing, to verify that your app is saving everything as expected.\n\nSee Also\nHealth data\nReading data from HealthKit\nUse queries to request sample data from HealthKit.\nData types\nSpecify the kind of data used in HealthKit.\nSamples\nCreate and save health and fitness samples.\nQueries\nQuery health and fitness data."
  },
  {
    "title": "enableBackgroundDelivery(for:frequency:withCompletion:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkhealthstore/1614175-enablebackgrounddelivery",
    "html": "Parameters\ntype\n\nThe type of data to observe. This object can be any concrete subclass of the HKObjectType class (such as HKCharacteristicType , HKQuantityType, HKCategoryType, HKWorkoutType, or HKCorrelationType).\n\nfrequency\n\nThe maximum frequency of the updates. The system wakes your app from the background at most once per time period specified. For a complete list of valid frequencies, see HKUpdateFrequency.\n\ncompletion\n\nA block that this method calls as soon as it enables background delivery. It passes the following parameters:\n\nsuccess\n\nA Boolean value. This parameter contains true if the system successfully enabled background delivery; otherwise, false.\n\nerror\n\nAn error object. If an error occurred, this object contains information about the error; otherwise, it is nil.\n\nDiscussion\n\nConcurrency Note\n\nYou can call this method from synchronous code using a completion handler, as shown on this page, or you can call it as an asynchronous method that has the following declaration:\n\nfunc enableBackgroundDelivery(for type: HKObjectType, frequency: HKUpdateFrequency) async throws\n\n\nFor information about concurrency and asynchronous code in Swift, see Calling Objective-C APIs Asynchronously.\n\nCall this method to register your app for background updates.\n\nImportant\n\nFor iOS 15 and watchOS 8, you must enable the HealthKit Background Delivery by adding the com.apple.developer.healthkit.background-delivery entitlement to your app. If your app doesn’t have this entitlement, the enableBackgroundDelivery(for:frequency:withCompletion:) method fails with an HKError.Code.errorAuthorizationDenied error.\n\nHealthKit wakes your app whenever a process saves or deletes samples of the specified type. The system wakes your app at most once per time period defined by the specified frequency. Some sample types have a maximum frequency of HKUpdateFrequency.hourly. The system enforces this frequency transparently.\n\nFor example, on iOS, stepCount samples have an hourly maximum frequency.\n\nIn watchOS, most data types have an hourly maximum frequency; however, the following data types can receive updates at HKUpdateFrequency.immediate:\n\nhighHeartRateEvent\n\nlowHeartRateEvent\n\nirregularHeartRhythmEvent\n\nenvironmentalAudioExposureEvent\n\nheadphoneAudioExposureEvent\n\nlowCardioFitnessEvent\n\nnumberOfTimesFallen\n\nvo2Max\n\nhandwashingEvent\n\ntoothbrushingEvent\n\nAlso, in watchOS, the background updates share a budget with WKApplicationRefreshBackgroundTask tasks. Your app can receive four updates (or background app refresh tasks) an hour, as long as it has a complication on the active watch face.\n\nReceive Background Updates\n\nAs soon as your app launches, HealthKit calls the update handler for any observer queries that match the newly saved data. If you plan on supporting background delivery, set up all your observer queries in your app delegate’s application(_:didFinishLaunchingWithOptions:) method. By setting up the queries in application(_:didFinishLaunchingWithOptions:), you ensure that you’ve instantiated your queries, and they’re ready to use before HealthKit delivers the updates.\n\nAfter your observer queries have finished processing the new data, you must call the update’s completion handler. This lets HealthKit know that your app successfully received the background delivery. If you don’t call the update’s completion handler, HealthKit continues to attempt to launch your app using a backoff algorithm to increase the delay between attempts. If your app fails to respond three times, HealthKit assumes your app can’t receive data and stops sending background updates.\n\nFor more information on the background delivery completion handler, see HKObserverQueryCompletionHandler.\n\nSee Also\nManaging background delivery\ncom.apple.developer.healthkit.background-delivery\nA Boolean value that indicates whether observer queries receive updates while running in the background.\nenum HKUpdateFrequency\nConstants that determine how often the system launches your app in response to changes to HealthKit data.\nfunc disableBackgroundDelivery(for: HKObjectType, withCompletion: (Bool, Error?) -> Void)\nDisables background deliveries of update notifications for the specified data type.\nfunc disableAllBackgroundDelivery(completion: (Bool, Error?) -> Void)\nDisables all background deliveries of update notifications.\nRelated Documentation\nclass HKObserverQuery\nA long-running query that monitors the HealthKit store and updates your app when the HealthKit store saves or deletes a matching sample."
  },
  {
    "title": "save(_:withCompletion:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkhealthstore/1614176-save",
    "html": "Parameters\nobjects\n\nAn array containing concrete subclasses of the HKObject class (any of the HKCategorySample, HKQuantitySample, HKCorrelation, or HKWorkout classes).\n\ncompletion\n\nA block that this method calls as soon as the save operation is complete. This block is passed the following parameters:\n\nsuccess\n\nA Boolean value. This parameter contains true if the objects were successfully saved to the HealthKit store; otherwise, false.\n\nerror\n\nAn error object. If an error occurred, this object contains information about the error; otherwise, it is set to nil.\n\nDiscussion\n\nConcurrency Note\n\nYou can call this method from synchronous code using a completion handler, as shown on this page, or you can call it as an asynchronous method that has the following declaration:\n\nfunc save(_ objects: [HKObject]) async throws\n\n\nFor information about concurrency and asynchronous code in Swift, see Calling Objective-C APIs Asynchronously.\n\nThis method operates asynchronously. As soon as the save operation is finished, it calls the completion block on a background queue.\n\nIf your app has not requested permission to share the object’s data type, the method fails with an HKError.Code.errorAuthorizationNotDetermined error. If your app has been denied permission to save the object’s data type, it fails with an HKError.Code.errorAuthorizationDenied error. Saving an object with the same unique identifier as an object already in the HealthKit store fails with an HKError.Code.errorInvalidArgument error. When saving multiple objects, if any object cannot be saved, none of them are saved.\n\nIn iOS 9.0 and later, saving an object to the HealthKit store sets the object’s sourceRevision property to a HKSourceRevision instance representing the saving app. On earlier versions of iOS, saving an object sets the source property to a HKSource instance instead. In both cases, these values are available only after the object is retrieved from the HealthKit store. The original object is not changed.\n\nAll samples retrieved by iOS 9.0 and later are given a valid sourceRevision property. If the sample was saved using an earlier version of iOS, the source revision’s version is set to nil.\n\nSee Also\nWorking with HealthKit objects\nfunc delete(HKObject, withCompletion: (Bool, Error?) -> Void)\nDeletes the specified object from the HealthKit store.\nfunc delete([HKObject], withCompletion: (Bool, Error?) -> Void)\nDeletes the specified objects from the HealthKit store.\nfunc deleteObjects(of: HKObjectType, predicate: NSPredicate, withCompletion: (Bool, Int, Error?) -> Void)\nDeletes objects saved by this application that match the provided type and predicate.\nfunc earliestPermittedSampleDate() -> Date\nReturns the earliest date permitted for samples.\nfunc save(HKObject, withCompletion: (Bool, Error?) -> Void)\nSaves the provided object to the HealthKit store."
  },
  {
    "title": "preferredUnits(for:completion:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkhealthstore/1614172-preferredunits",
    "html": "Parameters\nquantityTypes\n\nA set of HKQuantityType identifiers. These identifiers represent the quantity types to be examined. Before calling this method, your app must request read or share access to all the types in this set.\n\ncompletion\n\nA block that this method calls as soon as it finishes looking up the preferred units. This block is passed the following parameters:\n\npreferredUnits\n\nIf the lookup is successful, this parameter contains a dictionary with HKQuantityType identifiers for the keys and HKUnit objects for the values. The keys match those passed to the quantityTypes parameter. If an error occurs, this parameter is set to nil.\n\nerror\n\nAn error object. This method returns an error if the preferred units are inaccessible or if your app has not yet requested permission to access the quantity types; otherwise, this parameter is set to nil.\n\nDiscussion\n\nConcurrency Note\n\nYou can call this method from synchronous code using a completion handler, as shown on this page, or you can call it as an asynchronous method that has the following declaration:\n\nfunc preferredUnits(for quantityTypes: Set<HKQuantityType>) async throws -> [HKQuantityType : HKUnit]\n\n\nFor information about concurrency and asynchronous code in Swift, see Calling Objective-C APIs Asynchronously.\n\nThis method runs asynchronously. As soon as it finishes looking up the preferred units, it calls the completion block on an anonymous background queue.\n\nBy default, the preferred units are based on the device’s current locale. For example, in the US, the preferred units for the bodyMass identifier are pounds. Other regions may use kilograms or stones. However, users can change their preferred units in the Health app at any time.\n\nYour app should present HealthKit data using the current preferred units (see the bloodGlucose results identifier for an exception). You should also observe the HKUserPreferencesDidChange notification, and update the user interface whenever the user changes his or her preferred units.\n\nNote\n\nThe results returned by this method are based on your app’s permissions:\n\nIf you have never requested access for a type, this method returns an authorization not determined error.\n\nIf the user denied access to a type, this method returns the default units for the device’s current locale for that type.\n\nIf the user granted either read or share access, this method returns the current preferred units for that type (which may or may not be the default units).\n\nSee Also\nAccessing the preferred units\nstatic let HKUserPreferencesDidChange: NSNotification.Name\nNotifies observers whenever the user changes his or her preferred units."
  },
  {
    "title": "bloodType() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkhealthstore/1614164-bloodtype",
    "html": "Parameters\nerror\n\nOn input, a pointer to an error object. If an error occurs, this pointer is set to an actual error object containing information about the error. Specify nil for this parameter if you do not want to receive error information.\n\nReturn Value\n\nA blood type object that contains information about the user’s blood type.\n\nDiscussion\n\nIf the user has not specified a blood type or if the user has denied your app permission to read the blood type, this method returns an HKBloodType.notSet value.\n\nHandling Errors in Swift:\n\nIn Swift, this method returns a nonoptional result and is marked with the throws keyword to indicate that it throws an error in cases of failure.\n\nYou call this method in a try expression and handle any errors in the catch clauses of a do statement, as described in Error Handling in The Swift Programming Language and About Imported Cocoa Error Parameters.\n\nTopics\nPossible Values\nclass HKBloodTypeObject\nThis class acts as a wrapper for the HKBloodType enumeration.\nenum HKBloodType\nConstants indicating the user’s blood type.\nSee Also\nReading characteristic data\nfunc biologicalSex() -> HKBiologicalSexObject\nReads the user’s biological sex from the HealthKit store.\nfunc dateOfBirth() -> Date\nReads the user’s date of birth from the HealthKit store as a date value.\nfunc dateOfBirthComponents() -> DateComponents\nReads the user’s date of birth from the HealthKit store as date components.\nfunc fitzpatrickSkinType() -> HKFitzpatrickSkinTypeObject\nReads the user’s Fitzpatrick Skin Type from the HealthKit store.\nfunc wheelchairUse() -> HKWheelchairUseObject\nReads the user’s wheelchair use from the HealthKit store."
  },
  {
    "title": "biologicalSex() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkhealthstore/1614171-biologicalsex",
    "html": "Parameters\nerror\n\nOn input, a pointer to an error object. If an error occurs, this pointer is set to an actual error object containing information about the error. Specify nil for this parameter if you do not want to receive error information.\n\nReturn Value\n\nA biological sex object containing information about the user’s biological sex.\n\nDiscussion\n\nIf the user has not yet set his or her biological sex or if they have denied your app permission to read the biological sex, this method returns an HKBiologicalSex.notSet value.\n\nHandling Errors in Swift:\n\nIn Swift, this method returns a nonoptional result and is marked with the throws keyword to indicate that it throws an error in cases of failure.\n\nYou call this method in a try expression and handle any errors in the catch clauses of a do statement, as described in Error Handling in The Swift Programming Language and About Imported Cocoa Error Parameters.\n\nTopics\nPossible Values\nclass HKBiologicalSexObject\nThis class acts as a wrapper for the HKBiologicalSex enumeration.\nenum HKBiologicalSex\nConstants indicating the user’s sex.\nSee Also\nReading characteristic data\nfunc bloodType() -> HKBloodTypeObject\nReads the user’s blood type from the HealthKit store.\nfunc dateOfBirth() -> Date\nReads the user’s date of birth from the HealthKit store as a date value.\nfunc dateOfBirthComponents() -> DateComponents\nReads the user’s date of birth from the HealthKit store as date components.\nfunc fitzpatrickSkinType() -> HKFitzpatrickSkinTypeObject\nReads the user’s Fitzpatrick Skin Type from the HealthKit store.\nfunc wheelchairUse() -> HKWheelchairUseObject\nReads the user’s wheelchair use from the HealthKit store."
  },
  {
    "title": "stop(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkhealthstore/1614173-stop",
    "html": "Parameters\nquery\n\nEither an HKObserverQuery instance or an HKStatisticsCollectionQuery instance.\n\nDiscussion\n\nUse this method on long-running queries only. Most queries automatically stop after they have gathered the requested data. Long-running queries continue to operate on a background thread, watching the HealthKit store for updates. You can cancel these queries by using this method.\n\nSee Also\nQuerying HealthKit data\nfunc execute(HKQuery)\nStarts executing the provided query."
  },
  {
    "title": "requestAuthorization(toShare:read:completion:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkhealthstore/1614152-requestauthorization",
    "html": "Parameters\ntypesToShare\n\nA set containing the data types you want to share. This set can contain any concrete subclass of the HKSampleType class (any of the HKQuantityType, HKCategoryType, HKWorkoutType, or HKCorrelationType classes ). If the user grants permission, your app can create and save these data types to the HealthKit store.\n\ntypesToRead\n\nA set containing the data types you want to read. This set can contain any concrete subclass of the HKObjectType class (any of the HKCharacteristicType , HKQuantityType, HKCategoryType, HKWorkoutType, or HKCorrelationType classes). If the user grants permission, your app can read these data types from the HealthKit store.\n\ncompletion\n\nA block called after the user finishes responding to the request. The system calls this block with the following parameters:\n\nsuccess\n\nA Boolean value that indicates whether the request succeeded. This value doesn’t indicate whether the user actually granted permission. The parameter is false if an error occurred while processing the request; otherwise, it’s true.\n\nerror\n\nAn error object. If an error occurred, this object contains information about the error; otherwise, it’s set to nil.\n\nDiscussion\n\nHealthKit performs these requests asynchronously. If you call this method with a new data type (a type of data that the user hasn’t previously granted or denied permission for in this app), the system automatically displays the permission form, listing all the requested permissions. After the user has finished responding, this method calls its completion block on a background queue. If the user has already chosen to grant or prohibit access to all of the types specified, HealthKit calls the completion without prompting the user.\n\nImportant\n\nIn watchOS 6 and later, this method displays the permission form on Apple Watch, enabling independent HealthKit apps. In watchOS 5 and earlier, this method prompts the user to authorize the app on their paired iPhone. For more information, see Creating Independent watchOS Apps.\n\nEach data type has two separate permissions, one to read it and one to share it. You can make a single request, and include all the data types your app needs.\n\nCustomize the messages displayed on the permissions sheet by setting the following keys:\n\nNSHealthShareUsageDescription customizes the message for reading data.\n\nNSHealthUpdateUsageDescription customizes the message for writing data.\n\nWarning\n\nYou must set the usage keys, or your app will crash when you request authorization.\n\nFor projects created using Xcode 13 or later, set these keys in the Target Properties list on the app’s Info tab. For projects created with Xcode 12 or earlier, set these keys in the apps Info.plist file. For more information, see Information Property List.\n\nAfter users have set the permissions for your app, they can always change them using either the Settings or the Health app. Your app appears in the Health app’s Sources tab, even if the user didn’t allow permission to read or share data.\n\nSee Also\nAccessing HealthKit\nfunc authorizationStatus(for: HKObjectType) -> HKAuthorizationStatus\nReturns the app’s authorization status for sharing the specified data type.\nenum HKAuthorizationStatus\nConstants indicating the authorization status for a particular data type.\nfunc getRequestStatusForAuthorization(toShare: Set<HKSampleType>, read: Set<HKObjectType>, completion: (HKAuthorizationRequestStatus, Error?) -> Void)\nIndicates whether the system presents the user with a permission sheet if your app requests authorization for the provided types.\nenum HKAuthorizationRequestStatus\nValues that indicate whether your app needs to request authorization from the user.\nclass func isHealthDataAvailable() -> Bool\nReturns a Boolean value that indicates whether HealthKit is available on this device.\nfunc supportsHealthRecords() -> Bool\nReturns a Boolean value that indicates whether the current device supports clinical records.\nfunc requestAuthorization(toShare: Set<HKSampleType>, read: Set<HKObjectType>)\nAsynchronously requests permission to save and read the specified data types.\nfunc requestPerObjectReadAuthorization(for: HKObjectType, predicate: NSPredicate?, completion: (Bool, Error?) -> Void)\nAsynchronously requests permission to read a data type that requires per-object authorization (such as vision prescriptions).\nfunc handleAuthorizationForExtension(completion: (Bool, Error?) -> Void)\nRequests permission to save and read the data types specified by an extension.\nvar authorizationViewControllerPresenter: UIViewController?\nThe view controller that presents HealthKit authorization sheets."
  },
  {
    "title": "requestAuthorization(toShare:read:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkhealthstore/3795607-requestauthorization",
    "html": "Parameters\ntypesToShare\n\nA set containing the data types you want to share. This set can contain any concrete subclass of the HKSampleType class (any of the HKQuantityType, HKCategoryType, HKWorkoutType, or HKCorrelationType classes). If the user grants permission, your app can create and save these data types to the HealthKit store.\n\ntypesToRead\n\nA set containing the data types you want to read. This set can contain any concrete subclass of the HKObjectType class (any of the HKCharacteristicType , HKQuantityType, HKCategoryType, HKWorkoutType, or HKCorrelationType classes ). If the user grants permission, your app can read these data types from the HealthKit store.\n\nDiscussion\n\nHealthKit performs these requests asynchronously. If you call this method with a new data type (a type of data that the user hasn’t previously granted or denied permission for in this app), the system automatically displays the permission form, listing all the requested permissions. After the user has finished responding, this method calls its completion block on a background queue. If the user has already chosen to grant or prohibit access to all of the types specified, HealthKit calls the completion without prompting the user.\n\nImportant\n\nIn watchOS 6 and later, this method displays the permission form on Apple Watch, enabling independent HealthKit apps. In watchOS 5 and earlier, this method prompts the user to authorize the app on their paired iPhone. For more information, see Creating Independent watchOS Apps.\n\nEach data type has two separate permissions, one to read it and one to share it. You can make a single request, and include all the data types your app needs.\n\nCustomize the messages displayed on the permissions sheet by setting the following keys:\n\nNSHealthShareUsageDescription customizes the message for reading data.\n\nNSHealthUpdateUsageDescription customizes the message for writing data.\n\nWarning\n\nYou must set the usage keys, or your app will crash when you request authorization.\n\nFor projects created using Xcode 13 or later, set these keys in the Target Properties list on the app’s Info tab. For projects created with Xcode 12 or earlier, set these keys in the apps Info.plist file. For more information, see Information Property List.\n\nAfter users have set the permissions for your app, they can always change them using either the Settings or the Health app. Your app appears in the Health app’s Sources tab, even if the user didn’t allow permission to read or share data.\n\nSee Also\nAccessing HealthKit\nfunc authorizationStatus(for: HKObjectType) -> HKAuthorizationStatus\nReturns the app’s authorization status for sharing the specified data type.\nenum HKAuthorizationStatus\nConstants indicating the authorization status for a particular data type.\nfunc getRequestStatusForAuthorization(toShare: Set<HKSampleType>, read: Set<HKObjectType>, completion: (HKAuthorizationRequestStatus, Error?) -> Void)\nIndicates whether the system presents the user with a permission sheet if your app requests authorization for the provided types.\nenum HKAuthorizationRequestStatus\nValues that indicate whether your app needs to request authorization from the user.\nclass func isHealthDataAvailable() -> Bool\nReturns a Boolean value that indicates whether HealthKit is available on this device.\nfunc supportsHealthRecords() -> Bool\nReturns a Boolean value that indicates whether the current device supports clinical records.\nfunc requestAuthorization(toShare: Set<HKSampleType>?, read: Set<HKObjectType>?, completion: (Bool, Error?) -> Void)\nRequests permission to save and read the specified data types.\nfunc requestPerObjectReadAuthorization(for: HKObjectType, predicate: NSPredicate?, completion: (Bool, Error?) -> Void)\nAsynchronously requests permission to read a data type that requires per-object authorization (such as vision prescriptions).\nfunc handleAuthorizationForExtension(completion: (Bool, Error?) -> Void)\nRequests permission to save and read the data types specified by an extension.\nvar authorizationViewControllerPresenter: UIViewController?\nThe view controller that presents HealthKit authorization sheets."
  },
  {
    "title": "Protecting user privacy | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/protecting_user_privacy",
    "html": "Overview\n\nBecause health data can be sensitive, HealthKit provides users with fine-grained control over the information that apps can share. The user must explicitly grant each app permission to read and write data to the HealthKit store. Users can grant or deny permission separately for each type of data.\n\nFor example, a user could let your app read step count data, but prevent it from reading blood glucose levels. To prevent possible information leaks, an app isn’t aware when the user denies permission to read data. From the app’s point of view, no data of that type exists.\n\nImportant\n\nApps must include usage descriptions, or it will crash when you request authorization to access HealthKit data. Include the NSHealthShareUsageDescription key to read, and NSHealthUpdateUsageDescription key to write data to Healthkit. For projects created using Xcode 13 or later, set these keys in the Target Properties list on the app’s Info tab. For projects created with Xcode 12 or earlier, set these keys in the apps Info.plist file. For more information, see Information Property List.\n\nAccess encrypted data\n\nThe user’s device stores all HealthKit data locally. For security, the device encrypts the HealthKit store when the user locks the device. As a result, your app may not be able to read data from the store when it runs in the background. However, your app can still write to the store, even when the phone is locked. HealthKit temporarily caches the data and saves it to the encrypted store as soon as the user unlocks the phone.\n\nSpecify how your app uses the health data\n\nIn addition, your app must not access the HealthKit APIs unless the use is for health or fitness purposes and this usage is clear in both your marketing text and your user interface. Specifically, the following guidelines apply to all HealthKit apps:\n\nYour app may not use information gained through the use of the HealthKit framework for advertising or similar services. Note that you may still serve advertising in an app that uses the HealthKit framework, but you can’t use data from the HealthKit store to serve ads.\n\nYou must not disclose any information gained through HealthKit to a third party without express permission from the user. Even with permission, you can only share information to a third party if they also provide a health or fitness service to the user.\n\nYou can’t sell information gained through HealthKit to advertising platforms, data brokers, or information resellers.\n\nIf the user consents, you may share their HealthKit data with a third party for medical research.\n\nYou must clearly disclose to the user how you and your app will use their HealthKit data.\n\nProvide a privacy policy\n\nYou must also provide a privacy policy for any app that uses the HealthKit framework. You can find guidance on creating a privacy policy at the following sites:\n\nPersonal Health Record model (for non-HIPAA apps): http://www.healthit.gov/policy-researchers-implementers/personal-health-record-phr-model-privacy-notice\n\nHIPAA model (for HIPAA covered apps): http://www.hhs.gov/ocr/privacy/hipaa/modelnotices.html\n\nThese models, developed by the Office of the National Coordinator for Health Information Technology (ONC), are designed to improve user experience and comprehension with plain language and approachable designs that explain how your app collects and shares user data. These models aren’t intended to replace a web-based privacy policy, and developers should consult ONC guidance regarding which model is appropriate for a given app. These models are provided for your reference only, and Apple expressly disclaims all liability for your use of such models.\n\nNote\n\nIt’s essential that you understand Apple’s requirements for working with HealthKit and the user’s health-related data. To learn about these requirements, see the HealthKit section in App Store Review Guidelines and the relevant sections in the Apple Developer Program License Agreement. The App Store Review Guidelines are also available from the App Review page.\n\nFor additional technical information about working with sensitive user data, see Preparing your UI to run in the background.\n\nSee Also\nEssentials\nAbout the HealthKit framework\nLearn about the architecture and design of the HealthKit framework.\nSetting up HealthKit\nSet up and configure your HealthKit store.\nAuthorizing access to health data\nRequest permission to read and share data in your app.\nHealthKit updates\nLearn about important changes to HealthKit.\nclass HKHealthStore\nThe access point for all data managed by HealthKit.\nCreating a Mobility Health App\nCreate a health app that allows a clinical care team to send and receive mobility data."
  },
  {
    "title": "Authorizing access to health data | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/authorizing_access_to_health_data",
    "html": "Overview\n\nTo help protect the user’s privacy, HealthKit requires fine-grained authorization. You must request permission to both read and share each data type used by your app before you attempt to access or save the data. However, you don’t need to request permission for all data types at once. Instead, it may make more sense to wait until you need to access the data before asking for permission.\n\nRequest permission from the user\n\nThe example below shows the SpeedySloth app asking for permission to read and share energy burned, cycling distance, walking or running distance, and heart rate samples.\n\nlet allTypes = Set([HKObjectType.workoutType(),\n                    HKObjectType.quantityType(forIdentifier: .activeEnergyBurned)!,\n                    HKObjectType.quantityType(forIdentifier: .distanceCycling)!,\n                    HKObjectType.quantityType(forIdentifier: .distanceWalkingRunning)!,\n                    HKObjectType.quantityType(forIdentifier: .heartRate)!])\n\n\nhealthStore.requestAuthorization(toShare: allTypes, read: allTypes) { (success, error) in\n    if !success {\n        // Handle the error here.\n    }\n}\n\n\nAny time your app requests new permissions, the system displays a form with all the requested data types shown. The user can toggle individual read and share permissions on and off, as in Figure 1. To learn how to provide a great user experience when asking for permissions, see Human Interface Guidelines > HealthKit.\n\nFigure 1 Request permission for the Fit app\n\nImportant\n\nIn iOS 17 and later, the Journal app encourages people to reflect on their day-to-day experiences, such as their physical accomplishments including workouts. If someone authorizes your app to save data to HealthKit, high-level summaries of that data can appear as suggestions in the Journal app, or in other apps that use the Journaling Suggestions framework.\n\nYou must also provide custom messages for the permissions sheet. Xcode requires a separate custom message for reading and writing HealthKit data. Set the NSHealthShareUsageDescription key to customize the message for reading data, and the NSHealthUpdateUsageDescription key to customize the message for writing data. For projects created using Xcode 13 or later, set these keys in the Target Properties list on the app’s Info tab. For projects created with Xcode 12 or earlier, set these keys in the apps Info.plist file. For more information, see Information Property List.\n\nNote\n\nUsers can change the permissions for your app at any time using either the Settings or the Health app. Your app appears in the Health app’s Sources tab, even if the user didn’t allow permission to read or share data.\n\nCheck for authorization before saving data\n\nIf the user grants permission to share a data type, you can create new samples of that type and save them to the HealthKit store. However, before attempting to save any data, check to see if your app is authorized to share that data type by calling the authorizationStatus(for:) method. If you have not yet requested permission, any attempts to save fail with an HKError.Code.errorAuthorizationNotDetermined error. If the user has denied permission, attempts to save fail with an HKError.Code.errorAuthorizationDenied error.\n\nTo help protect the user’s privacy, your app doesn’t know whether the user granted or denied permission to read data from HealthKit. If the user denied permission, attempts to query data from HealthKit return only samples that your app successfully saved to the HealthKit store.\n\nRequesting permission to read and share data is only one part of protecting your user’s privacy. For more information, see Protecting user privacy.\n\nSpecify required clinical record types\n\nIf your app requires access to specific clinical record data to function properly, specify the required clinical record types in your app’s Info.plist file using the NSHealthRequiredReadAuthorizationTypeIdentifiers key. This key defines the data types that your app must have permission to read. Set the value to an array of strings containing the type identifiers for your required types. For a list of type identifiers, see HKClinicalTypeIdentifier.\n\nTo protect the user’s privacy, you must specify three or more required clinical record types. If the user denies authorization to any of the types, authorization fails with an HKError.Code.errorRequiredAuthorizationDenied error; your app is not told the record types to which the user denied access.\n\nSee Also\nEssentials\nAbout the HealthKit framework\nLearn about the architecture and design of the HealthKit framework.\nSetting up HealthKit\nSet up and configure your HealthKit store.\nProtecting user privacy\nRespect and safeguard your user’s privacy.\nHealthKit updates\nLearn about important changes to HealthKit.\nclass HKHealthStore\nThe access point for all data managed by HealthKit.\nCreating a Mobility Health App\nCreate a health app that allows a clinical care team to send and receive mobility data."
  },
  {
    "title": "HKError | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkerror",
    "html": "Topics\nCreating errors\ninit(Code, userInfo: [String : Any])\nCreates a HealthKit error from a code and user info dictionary.\nAccessing the errors properties\nstatic var errorDomain: String\nThe domain for all HealthKit errors.\nvar errorCode: Int\nA code that represents the error.\nvar code: Code\nA code that represents the error.\nvar errorUserInfo: [String : Any]\nA dictionary that contains additional information about the error.\nvar userInfo: [String : Any]\nA dictionary that contains additional information about the error.\nvar localizedDescription: String\nA localized description of the error.\nAccessing errors\nenum HKError.Code\nError codes returned by HealthKit.\nstatic var noError: HKError.Code\nNo error occurred.\nstatic var errorHealthDataUnavailable: HKError.Code\nThe user accessed HealthKit on an unsupported device.\nstatic var errorHealthDataRestricted: HKError.Code\nA Mobile Device Management (MDM) profile restricts the use of HealthKit on this device.\nstatic var errorInvalidArgument: HKError.Code\nThe app passed an invalid argument to the HealthKit API.\nstatic var errorAuthorizationDenied: HKError.Code\nThe user hasn’t given the app permission to save data.\nstatic var errorAuthorizationNotDetermined: HKError.Code\nThe app hasn’t yet asked the user for the authorization required to complete the task.\nstatic var errorRequiredAuthorizationDenied: HKError.Code\nThe user hasn’t granted the application authorization to access all the required clinical record types.\nstatic var errorDatabaseInaccessible: HKError.Code\nThe HealthKit data is unavailable because it’s protected and the device is locked.\nstatic var errorUserCanceled: HKError.Code\nThe user canceled the operation.\nstatic var errorAnotherWorkoutSessionStarted: HKError.Code\nAnother app started a workout session.\nstatic var errorUserExitedWorkoutSession: HKError.Code\nThe user exited your application while a workout session was running.\nstatic var errorNoData: HKError.Code\nData is unavailable for the requested query and predicate.\nComparing errors\nstatic func == (HKError, HKError) -> Bool\nReturns a Boolean value that indicates whether two errors are the same.\nstatic func != (HKError, HKError) -> Bool\nReturns a Boolean value that indicates whether two values aren’t equal.\nfunc hash(into: inout Hasher)\nHashes the essential components of a value by feeding them to the given hasher.\nvar hashValue: Int\nThe hash value.\nType Properties\nstatic var errorBackgroundWorkoutSessionNotAllowed: HKError.Code\nstatic var errorDataSizeExceeded: HKError.Code\nstatic var errorWorkoutActivityNotAllowed: HKError.Code\nstatic var unknownError: HKError.Code\nSee Also\nErrors\nlet HKErrorDomain: String\nThe domain for all HealthKit errors.\nenum HKError.Code\nError codes returned by HealthKit."
  },
  {
    "title": "HKErrorDomain | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkerrordomain",
    "html": "See Also\nErrors\nstruct HKError\nAn error returned from a HealthKit method.\nenum HKError.Code\nError codes returned by HealthKit."
  },
  {
    "title": "HKHealthStore | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/hkhealthstore",
    "html": "Overview\n\nUse a HKHealthStore object to request permission to share or read HealthKit data. After you have permission, you can use the HealthKit store to save new samples to the store, or to manage the samples that your app saved. Additionally, you can use the HealthKit store to start, stop, and manage queries.\n\nFor more information, see Setting up HealthKit.\n\nTopics\nAccessing HealthKit\nfunc authorizationStatus(for: HKObjectType) -> HKAuthorizationStatus\nReturns the app’s authorization status for sharing the specified data type.\nenum HKAuthorizationStatus\nConstants indicating the authorization status for a particular data type.\nfunc getRequestStatusForAuthorization(toShare: Set<HKSampleType>, read: Set<HKObjectType>, completion: (HKAuthorizationRequestStatus, Error?) -> Void)\nIndicates whether the system presents the user with a permission sheet if your app requests authorization for the provided types.\nenum HKAuthorizationRequestStatus\nValues that indicate whether your app needs to request authorization from the user.\nclass func isHealthDataAvailable() -> Bool\nReturns a Boolean value that indicates whether HealthKit is available on this device.\nfunc supportsHealthRecords() -> Bool\nReturns a Boolean value that indicates whether the current device supports clinical records.\nfunc requestAuthorization(toShare: Set<HKSampleType>?, read: Set<HKObjectType>?, completion: (Bool, Error?) -> Void)\nRequests permission to save and read the specified data types.\nfunc requestAuthorization(toShare: Set<HKSampleType>, read: Set<HKObjectType>)\nAsynchronously requests permission to save and read the specified data types.\nfunc requestPerObjectReadAuthorization(for: HKObjectType, predicate: NSPredicate?, completion: (Bool, Error?) -> Void)\nAsynchronously requests permission to read a data type that requires per-object authorization (such as vision prescriptions).\nfunc handleAuthorizationForExtension(completion: (Bool, Error?) -> Void)\nRequests permission to save and read the data types specified by an extension.\nvar authorizationViewControllerPresenter: UIViewController?\nThe view controller that presents HealthKit authorization sheets.\nQuerying HealthKit data\nfunc execute(HKQuery)\nStarts executing the provided query.\nfunc stop(HKQuery)\nStops a long-running query.\nReading characteristic data\nfunc biologicalSex() -> HKBiologicalSexObject\nReads the user’s biological sex from the HealthKit store.\nfunc bloodType() -> HKBloodTypeObject\nReads the user’s blood type from the HealthKit store.\nfunc dateOfBirth() -> Date\nReads the user’s date of birth from the HealthKit store as a date value.\nfunc dateOfBirthComponents() -> DateComponents\nReads the user’s date of birth from the HealthKit store as date components.\nfunc fitzpatrickSkinType() -> HKFitzpatrickSkinTypeObject\nReads the user’s Fitzpatrick Skin Type from the HealthKit store.\nfunc wheelchairUse() -> HKWheelchairUseObject\nReads the user’s wheelchair use from the HealthKit store.\nWorking with HealthKit objects\nfunc delete(HKObject, withCompletion: (Bool, Error?) -> Void)\nDeletes the specified object from the HealthKit store.\nfunc delete([HKObject], withCompletion: (Bool, Error?) -> Void)\nDeletes the specified objects from the HealthKit store.\nfunc deleteObjects(of: HKObjectType, predicate: NSPredicate, withCompletion: (Bool, Int, Error?) -> Void)\nDeletes objects saved by this application that match the provided type and predicate.\nfunc earliestPermittedSampleDate() -> Date\nReturns the earliest date permitted for samples.\nfunc save(HKObject, withCompletion: (Bool, Error?) -> Void)\nSaves the provided object to the HealthKit store.\nfunc save([HKObject], withCompletion: (Bool, Error?) -> Void)\nSaves an array of objects to the HealthKit store.\nAccessing the preferred units\nfunc preferredUnits(for: Set<HKQuantityType>, completion: ([HKQuantityType : HKUnit], Error?) -> Void)\nReturns the user’s preferred units for the given quantity types.\nstatic let HKUserPreferencesDidChange: NSNotification.Name\nNotifies observers whenever the user changes his or her preferred units.\nManaging background delivery\nfunc enableBackgroundDelivery(for: HKObjectType, frequency: HKUpdateFrequency, withCompletion: (Bool, Error?) -> Void)\nEnables the delivery of updates to an app running in the background.\ncom.apple.developer.healthkit.background-delivery\nA Boolean value that indicates whether observer queries receive updates while running in the background.\nenum HKUpdateFrequency\nConstants that determine how often the system launches your app in response to changes to HealthKit data.\nfunc disableBackgroundDelivery(for: HKObjectType, withCompletion: (Bool, Error?) -> Void)\nDisables background deliveries of update notifications for the specified data type.\nfunc disableAllBackgroundDelivery(completion: (Bool, Error?) -> Void)\nDisables all background deliveries of update notifications.\nManaging workouts\nfunc splitTotalEnergy(HKQuantity, start: Date, end: Date, resultsHandler: (HKQuantity?, HKQuantity?, Error?) -> Void)\nCalculates the active and resting energy burned based on the total energy burned over the given duration.\nfunc recoverActiveWorkoutSession(completion: (HKWorkoutSession?, Error?) -> Void)\nRecovers an active workout session.\nManaging workout sessions\nvar workoutSessionMirroringStartHandler: ((HKWorkoutSession) -> Void)?\nA block that the system calls when it starts a mirrored workout session.\nfunc startWatchApp(with: HKWorkoutConfiguration, completion: (Bool, Error?) -> Void)\nLaunches or wakes the companion watchOS app to create a new workout session.\nfunc pause(HKWorkoutSession)\nPauses the provided workout session.\nfunc resumeWorkoutSession(HKWorkoutSession)\nResumes the provided workout session.\nManaging estimates\nfunc recalibrateEstimates(sampleType: HKSampleType, date: Date, completion: (Bool, Error?) -> Void)\nRecalibrates the prediction algorithm used to calculate the specified sample type.\nAccessing the move mode\nfunc activityMoveMode() -> HKActivityMoveModeObject\nReturns the activity move mode for the current user.\nstatic let HKUserPreferencesDidChange: NSNotification.Name\nNotifies observers whenever the user changes his or her preferred units.\nDeprecated symbols\nfunc add([HKSample], to: HKWorkout, completion: (Bool, Error?) -> Void)\nAssociates the provided samples with the specified workout.\nDeprecated\nfunc start(HKWorkoutSession)\nStarts a workout session for the current app.\nDeprecated\nfunc end(HKWorkoutSession)\nEnds a workout session for the current app.\nDeprecated\nRelationships\nInherits From\nNSObject\nConforms To\nSendable\nSee Also\nEssentials\nAbout the HealthKit framework\nLearn about the architecture and design of the HealthKit framework.\nSetting up HealthKit\nSet up and configure your HealthKit store.\nAuthorizing access to health data\nRequest permission to read and share data in your app.\nProtecting user privacy\nRespect and safeguard your user’s privacy.\nHealthKit updates\nLearn about important changes to HealthKit.\nCreating a Mobility Health App\nCreate a health app that allows a clinical care team to send and receive mobility data."
  },
  {
    "title": "Creating a Mobility Health App | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/creating_a_mobility_health_app",
    "html": "Overview\n\nNote\n\nThis sample code project is associated with WWDC20 session 10664: Getting Started in HealthKit and WWDC20 session 10184: Synchronizing Your Health Data with HealthKit.\n\nConfigure the Sample Code Project\n\nBefore you run the sample code project in Xcode:\n\nDownload the latest version of Xcode with the iOS 14 SDK. The sample code project requires this version of Xcode.\n\nConfirm that CareKit is included as a dependency in Swift Packages.\n\nSee Also\nEssentials\nAbout the HealthKit framework\nLearn about the architecture and design of the HealthKit framework.\nSetting up HealthKit\nSet up and configure your HealthKit store.\nAuthorizing access to health data\nRequest permission to read and share data in your app.\nProtecting user privacy\nRespect and safeguard your user’s privacy.\nHealthKit updates\nLearn about important changes to HealthKit.\nclass HKHealthStore\nThe access point for all data managed by HealthKit."
  },
  {
    "title": "HealthKit | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/healthkit/",
    "html": "Overview\n\nHealthKit provides a central repository for health and fitness data on iPhone and Apple Watch. With the user’s permission, apps communicate with the HealthKit store to access and share this data.\n\nCreating a complete, personalized health and fitness experience includes a variety of tasks:\n\nCollecting and storing health and fitness data\n\nAnalyzing and visualizing the data\n\nEnabling social interactions\n\nHealthKit apps take a collaborative approach to building this experience. Your app doesn’t need to provide all of these features. Instead, you can focus just on the subset of tasks that most interests you.\n\nFor example, users can select their favorite weight-tracking, step-counting, and health challenge app, each calibrated to their personal needs. Because HealthKit apps freely exchange data (with user permission), the combined suite provides a more customized experience than any single app on its own. For example, when a group of friends joins a daily step-counting challenge, each person can use their preferred hardware device and app to track their steps, while everyone in the group uses the same social app for the challenge.\n\nHealthKit is also designed to manage and merge data from multiple sources. For example, users can view and manage all of their data in the Health App, including adding data, deleting data, and changing an app’s permissions. Therefore, your app needs to handle these changes, even when they occur outside your app.\n\nNote\n\nBecause health data may contain sensitive, personal information, apps must receive permission from the user to read data from or write data to the HealthKit store. They must also take steps to protect that data at all times. For more information, see Protecting user privacy.\n\nTopics\nEssentials\nAbout the HealthKit framework\nLearn about the architecture and design of the HealthKit framework.\nSetting up HealthKit\nSet up and configure your HealthKit store.\nAuthorizing access to health data\nRequest permission to read and share data in your app.\nProtecting user privacy\nRespect and safeguard your user’s privacy.\nHealthKit updates\nLearn about important changes to HealthKit.\nclass HKHealthStore\nThe access point for all data managed by HealthKit.\nCreating a Mobility Health App\nCreate a health app that allows a clinical care team to send and receive mobility data.\nHealth data\nSaving data to HealthKit\nCreate and share HealthKit samples.\nReading data from HealthKit\nUse queries to request sample data from HealthKit.\nData types\nSpecify the kind of data used in HealthKit.\nSamples\nCreate and save health and fitness samples.\nQueries\nQuery health and fitness data.\nWorkout data\nWorkouts and activity rings\nManage workouts, workout sessions, and activity summaries.\nErrors\nstruct HKError\nAn error returned from a HealthKit method.\nlet HKErrorDomain: String\nThe domain for all HealthKit errors.\nenum HKError.Code\nError codes returned by HealthKit.\nReference\nHealthKit Constants"
  }
]