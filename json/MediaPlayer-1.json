[
  {
    "title": "MPErrorNotFound",
    "url": "https://developer.apple.com/documentation/mediaplayer/mperrorcode/mperrornotfound",
    "html": "See Also\nError codes\nMPErrorCancelled\nAn error that indicates the system canceled the requested operation before it completed.\nMPErrorCloudServiceCapabilityMissing\nAn error that indicates the operation can’t complete because iCloud services aren’t enabled.\nMPErrorNetworkConnectionFailed\nAn error that indicates the operation failed because the device can’t connect to the network.\nMPErrorNotSupported\nAn error that indicates the requested operation failed because the system doesn’t support it.\nMPErrorPermissionDenied\nAn error that indicates the operation can’t complete because the user doesn’t have permission to execute the operation.\nMPErrorRequestTimedOut\nAn error that indicates the requested operation timed out.\nMPErrorUnknown\nAn error that indicates the requested operation can’t complete due to an unknown error."
  },
  {
    "title": "MPErrorNetworkConnectionFailed",
    "url": "https://developer.apple.com/documentation/mediaplayer/mperrorcode/mperrornetworkconnectionfailed",
    "html": "See Also\nError codes\nMPErrorCancelled\nAn error that indicates the system canceled the requested operation before it completed.\nMPErrorCloudServiceCapabilityMissing\nAn error that indicates the operation can’t complete because iCloud services aren’t enabled.\nMPErrorNotFound\nAn error that indicates the operation failed because the system can’t find the requested identifier in the current storefront.\nMPErrorNotSupported\nAn error that indicates the requested operation failed because the system doesn’t support it.\nMPErrorPermissionDenied\nAn error that indicates the operation can’t complete because the user doesn’t have permission to execute the operation.\nMPErrorRequestTimedOut\nAn error that indicates the requested operation timed out.\nMPErrorUnknown\nAn error that indicates the requested operation can’t complete due to an unknown error."
  },
  {
    "title": "MPErrorCancelled",
    "url": "https://developer.apple.com/documentation/mediaplayer/mperrorcode/mperrorcancelled",
    "html": "See Also\nError codes\nMPErrorCloudServiceCapabilityMissing\nAn error that indicates the operation can’t complete because iCloud services aren’t enabled.\nMPErrorNetworkConnectionFailed\nAn error that indicates the operation failed because the device can’t connect to the network.\nMPErrorNotFound\nAn error that indicates the operation failed because the system can’t find the requested identifier in the current storefront.\nMPErrorNotSupported\nAn error that indicates the requested operation failed because the system doesn’t support it.\nMPErrorPermissionDenied\nAn error that indicates the operation can’t complete because the user doesn’t have permission to execute the operation.\nMPErrorRequestTimedOut\nAn error that indicates the requested operation timed out.\nMPErrorUnknown\nAn error that indicates the requested operation can’t complete due to an unknown error."
  },
  {
    "title": "MPErrorNotSupported",
    "url": "https://developer.apple.com/documentation/mediaplayer/mperrorcode/mperrornotsupported",
    "html": "Discussion\n\nAn example of this is trying to add a media item to a smart playlist.\n\nSee Also\nError codes\nMPErrorCancelled\nAn error that indicates the system canceled the requested operation before it completed.\nMPErrorCloudServiceCapabilityMissing\nAn error that indicates the operation can’t complete because iCloud services aren’t enabled.\nMPErrorNetworkConnectionFailed\nAn error that indicates the operation failed because the device can’t connect to the network.\nMPErrorNotFound\nAn error that indicates the operation failed because the system can’t find the requested identifier in the current storefront.\nMPErrorPermissionDenied\nAn error that indicates the operation can’t complete because the user doesn’t have permission to execute the operation.\nMPErrorRequestTimedOut\nAn error that indicates the requested operation timed out.\nMPErrorUnknown\nAn error that indicates the requested operation can’t complete due to an unknown error."
  },
  {
    "title": "MPErrorUnknown",
    "url": "https://developer.apple.com/documentation/mediaplayer/mperrorcode/mperrorunknown",
    "html": "See Also\nError codes\nMPErrorCancelled\nAn error that indicates the system canceled the requested operation before it completed.\nMPErrorCloudServiceCapabilityMissing\nAn error that indicates the operation can’t complete because iCloud services aren’t enabled.\nMPErrorNetworkConnectionFailed\nAn error that indicates the operation failed because the device can’t connect to the network.\nMPErrorNotFound\nAn error that indicates the operation failed because the system can’t find the requested identifier in the current storefront.\nMPErrorNotSupported\nAn error that indicates the requested operation failed because the system doesn’t support it.\nMPErrorPermissionDenied\nAn error that indicates the operation can’t complete because the user doesn’t have permission to execute the operation.\nMPErrorRequestTimedOut\nAn error that indicates the requested operation timed out."
  },
  {
    "title": "MPErrorPermissionDenied",
    "url": "https://developer.apple.com/documentation/mediaplayer/mperrorcode/mperrorpermissiondenied",
    "html": "See Also\nError codes\nMPErrorCancelled\nAn error that indicates the system canceled the requested operation before it completed.\nMPErrorCloudServiceCapabilityMissing\nAn error that indicates the operation can’t complete because iCloud services aren’t enabled.\nMPErrorNetworkConnectionFailed\nAn error that indicates the operation failed because the device can’t connect to the network.\nMPErrorNotFound\nAn error that indicates the operation failed because the system can’t find the requested identifier in the current storefront.\nMPErrorNotSupported\nAn error that indicates the requested operation failed because the system doesn’t support it.\nMPErrorRequestTimedOut\nAn error that indicates the requested operation timed out.\nMPErrorUnknown\nAn error that indicates the requested operation can’t complete due to an unknown error."
  },
  {
    "title": "MPErrorCloudServiceCapabilityMissing",
    "url": "https://developer.apple.com/documentation/mediaplayer/mperrorcode/mperrorcloudservicecapabilitymissing",
    "html": "See Also\nError codes\nMPErrorCancelled\nAn error that indicates the system canceled the requested operation before it completed.\nMPErrorNetworkConnectionFailed\nAn error that indicates the operation failed because the device can’t connect to the network.\nMPErrorNotFound\nAn error that indicates the operation failed because the system can’t find the requested identifier in the current storefront.\nMPErrorNotSupported\nAn error that indicates the requested operation failed because the system doesn’t support it.\nMPErrorPermissionDenied\nAn error that indicates the operation can’t complete because the user doesn’t have permission to execute the operation.\nMPErrorRequestTimedOut\nAn error that indicates the requested operation timed out.\nMPErrorUnknown\nAn error that indicates the requested operation can’t complete due to an unknown error."
  },
  {
    "title": "MPErrorRequestTimedOut",
    "url": "https://developer.apple.com/documentation/mediaplayer/mperrorcode/mperrorrequesttimedout",
    "html": "See Also\nError codes\nMPErrorCancelled\nAn error that indicates the system canceled the requested operation before it completed.\nMPErrorCloudServiceCapabilityMissing\nAn error that indicates the operation can’t complete because iCloud services aren’t enabled.\nMPErrorNetworkConnectionFailed\nAn error that indicates the operation failed because the device can’t connect to the network.\nMPErrorNotFound\nAn error that indicates the operation failed because the system can’t find the requested identifier in the current storefront.\nMPErrorNotSupported\nAn error that indicates the requested operation failed because the system doesn’t support it.\nMPErrorPermissionDenied\nAn error that indicates the operation can’t complete because the user doesn’t have permission to execute the operation.\nMPErrorUnknown\nAn error that indicates the requested operation can’t complete due to an unknown error."
  },
  {
    "title": "maximumVolumeSliderImageForState:",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpvolumeview/1620072-maximumvolumesliderimageforstate",
    "html": "Parameters\nstate\n\nThe control state whose maximum volume image you want. You should specify only one control state value for this parameter.\n\nReturn Value\n\nThe maximum volume image associated with the specified state, or nil if an appropriate image could not be retrieved. This method might return nil if you specify multiple control states in the state parameter.\n\nDiscussion\n\nFor a description of slider and thumb images, see Customizing the volume slider’s appearance.\n\nSee Also\nCustomizing the volume slider\n- minimumVolumeSliderImageForState:\nReturns the minimum volume image associated with the specified control state.\n- setMaximumVolumeSliderImage:forState:\nAssigns a maximum volume slider image to the specified control states.\n- setMinimumVolumeSliderImage:forState:\nAssigns a minimum volume slider image to the specified control states.\n- setVolumeThumbImage:forState:\nAssigns a thumb image to the specified control states.\n- volumeSliderRectForBounds:\nReturns the drawing rectangle for the slider’s track.\n- volumeThumbImageForState:\nReturns the thumb image associated with the specified control state.\n- volumeThumbRectForBounds:volumeSliderRect:value:\nReturns the drawing rectangle for the volume slider’s thumb image."
  },
  {
    "title": "minimumVolumeSliderImageForState:",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpvolumeview/1620076-minimumvolumesliderimageforstate",
    "html": "Parameters\nstate\n\nThe control state whose minimum volume image you want. You should specify only one control state value for this parameter.\n\nReturn Value\n\nThe maximum volume image associated with the specified state, or nil if an appropriate image could not be retrieved. This method might return nil if you specify multiple control states in the state parameter.\n\nDiscussion\n\nFor a description of slider and thumb images, see Customizing the volume slider’s appearance.\n\nSee Also\nCustomizing the volume slider\n- maximumVolumeSliderImageForState:\nReturns the maximum volume image associated with the specified control state.\n- setMaximumVolumeSliderImage:forState:\nAssigns a maximum volume slider image to the specified control states.\n- setMinimumVolumeSliderImage:forState:\nAssigns a minimum volume slider image to the specified control states.\n- setVolumeThumbImage:forState:\nAssigns a thumb image to the specified control states.\n- volumeSliderRectForBounds:\nReturns the drawing rectangle for the slider’s track.\n- volumeThumbImageForState:\nReturns the thumb image associated with the specified control state.\n- volumeThumbRectForBounds:volumeSliderRect:value:\nReturns the drawing rectangle for the volume slider’s thumb image."
  },
  {
    "title": "initWithBoundsSize:requestHandler:",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmediaitemartwork/1649704-initwithboundssize",
    "html": "Parameters\nboundsSize\n\nThe original size of the artwork.\n\nrequestHandler\n\nA handler that the system calls for the requested artwork.\n\nsize\n\nThe new size for the image.\n\nReturn Value\n\nThe newly resized artwork.\n\nDiscussion\n\nThe request handler returns the image in the newly requested size. The requested size must be less than the boundsSize parameter."
  },
  {
    "title": "volumeThumbImageForState:",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpvolumeview/1620064-volumethumbimageforstate",
    "html": "Parameters\nstate\n\nThe control state whose thumb image you want. You should specify only one control state value for this parameter.\n\nReturn Value\n\nThe thumb image associated with the specified state, or nil if an appropriate image could not be retrieved. This method might return nil if you specify multiple control states in the state parameter.\n\nDiscussion\n\nFor a description of slider and thumb images, see Customizing the volume slider’s appearance.\n\nSee Also\nCustomizing the volume slider\n- maximumVolumeSliderImageForState:\nReturns the maximum volume image associated with the specified control state.\n- minimumVolumeSliderImageForState:\nReturns the minimum volume image associated with the specified control state.\n- setMaximumVolumeSliderImage:forState:\nAssigns a maximum volume slider image to the specified control states.\n- setMinimumVolumeSliderImage:forState:\nAssigns a minimum volume slider image to the specified control states.\n- setVolumeThumbImage:forState:\nAssigns a thumb image to the specified control states.\n- volumeSliderRectForBounds:\nReturns the drawing rectangle for the slider’s track.\n- volumeThumbRectForBounds:volumeSliderRect:value:\nReturns the drawing rectangle for the volume slider’s thumb image."
  },
  {
    "title": "imageWithSize:",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmediaitemartwork/1621736-imagewithsize",
    "html": "Parameters\nsize\n\nThe size, in points, for the new UIImage object.\n\nReturn Value\n\nThe artwork at the requested size.\n\nDiscussion\n\nThe returned image is the smallest available image that’s at least as large as the requested size.\n\nSee Also\nUsing a media item image\nbounds\nThe maximum size, in points, of the image associated with the media item artwork.\nRelated Documentation\niPod Library Access Programming Guide"
  },
  {
    "title": "volumeSliderRectForBounds:",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpvolumeview/1620080-volumesliderrectforbounds",
    "html": "Parameters\nbounds\n\nThe bounding rectangle of the receiver.\n\nReturn Value\n\nThe computed drawing rectangle for the volume slider track. This rectangle corresponds to the entire length of the track between the minimum and maximum value images.\n\nDiscussion\n\nThe system uses the rectangle to scale the track and thumb images during drawing.\n\nSee Also\nCustomizing the volume slider\n- maximumVolumeSliderImageForState:\nReturns the maximum volume image associated with the specified control state.\n- minimumVolumeSliderImageForState:\nReturns the minimum volume image associated with the specified control state.\n- setMaximumVolumeSliderImage:forState:\nAssigns a maximum volume slider image to the specified control states.\n- setMinimumVolumeSliderImage:forState:\nAssigns a minimum volume slider image to the specified control states.\n- setVolumeThumbImage:forState:\nAssigns a thumb image to the specified control states.\n- volumeThumbImageForState:\nReturns the thumb image associated with the specified control state.\n- volumeThumbRectForBounds:volumeSliderRect:value:\nReturns the drawing rectangle for the volume slider’s thumb image."
  },
  {
    "title": "volumeThumbRectForBounds:volumeSliderRect:value:",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpvolumeview/1620067-volumethumbrectforbounds",
    "html": "Parameters\nbounds\n\nThe bounding rectangle of the thumb image.\n\nrect\n\nThe drawing rectangle for the receiver’s track, as returned by the volumeSliderRectForBounds: method.\n\nvalue\n\nThe current value of the volume slider.\n\nReturn Value\n\nThe computed drawing rectangle for the thumb image.\n\nDiscussion\n\nThe rectangle you return should reflect the size of your thumb image and its current position on the slider’s track.\n\nSee Also\nCustomizing the volume slider\n- maximumVolumeSliderImageForState:\nReturns the maximum volume image associated with the specified control state.\n- minimumVolumeSliderImageForState:\nReturns the minimum volume image associated with the specified control state.\n- setMaximumVolumeSliderImage:forState:\nAssigns a maximum volume slider image to the specified control states.\n- setMinimumVolumeSliderImage:forState:\nAssigns a minimum volume slider image to the specified control states.\n- setVolumeThumbImage:forState:\nAssigns a thumb image to the specified control states.\n- volumeSliderRectForBounds:\nReturns the drawing rectangle for the slider’s track.\n- volumeThumbImageForState:\nReturns the thumb image associated with the specified control state."
  },
  {
    "title": "routeButtonRectForBounds:",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpvolumeview/1620077-routebuttonrectforbounds",
    "html": "Parameters\nbounds\n\nThe bounding rectangle of the receiver.\n\nReturn Value\n\nThe computed drawing rectangle for the route button.\n\nDiscussion\n\nUse this method to retrieve the bounding rectangle for the route button.\n\nSee Also\nDeprecated\nvolumeWarningSliderImage\nThe image used to designate the European Union volume limit.\nDeprecated\nshowsRouteButton\nA Boolean value that indicates whether the route button is visible in the volume view.\nDeprecated\nwirelessRoutesAvailable\nA Boolean value indicating wireless routes are available.\nDeprecated\nwirelessRouteActive\nA Boolean value that indicates whether the wireless route is active.\nDeprecated\n- routeButtonImageForState:\nReturns the button image associated with the specified control state.\nDeprecated\n- setRouteButtonImage:forState:\nAssigns a button image to the specified control states.\nDeprecated"
  },
  {
    "title": "initWithImage:",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmediaitemartwork/1621747-initwithimage",
    "html": "Parameters\nimage\n\nThe image to use to initialize the media item artwork instance.\n\nDiscussion\n\nThis method assumes that the crop rectangle of the image matches the bounds of the image, as defined by the image’s size in points. That is, this method assumes the image you supply is tightly cropped.\n\nSee Also\nDeprecated symbols\nMPMovieAccessLog\nKey metrics about network playback for an associated movie player that’s playing streamed content.\nDeprecated\nMPMovieAccessLogEvent\nA single piece of information for a movie access log.\nDeprecated\nMPMovieErrorLog\nData describing network resource playback failures for the associated movie player, including timestamps indicating when each failure occurred.\nDeprecated\nMPMovieErrorLogEvent\nA single piece of information for a movie error log.\nDeprecated\nMPMovieLoadState\nConstants describing the network load state of the movie player.\nDeprecated\nMPMovieMediaTypeMask\nThe types of content available in the movie file.\nDeprecated\nMPMoviePlayerController\nA type of movie player that manages the playback of a movie from a file or a network stream.\nDeprecated\nMPMoviePlayerViewController\nA simple view controller for displaying full-screen movies.\nDeprecated\nMPTimedMetadata\nA timed metadata object that carries time-based information within HTTP streamed media.\nDeprecated\nMPPlayableContentManager\nA shared content manager for controlling interactions between your media app and system-provided or external media player interfaces.\nDeprecated\nMPPlayableContentManagerContext\nAn object representing the current state of the playable endpoint.\nDeprecated\niPodMusicPlayer\nReturns the iPod music player, which controls the iPod app’s state.\nDeprecated\nimageCropRect\nThe bounds, in points, of the content area for the full size image associated with the media item artwork.\nshowsRouteButton\nA Boolean value that indicates whether the route button is visible in the volume view.\nDeprecated\n- routeButtonImageForState:\nReturns the button image associated with the specified control state.\nDeprecated\n- routeButtonRectForBounds:\nReturns the drawing rectangle for the route button.\nDeprecated\n- setRouteButtonImage:forState:\nAssigns a button image to the specified control states.\nDeprecated\nwirelessRoutesAvailable\nA Boolean value indicating wireless routes are available.\nDeprecated\nwirelessRouteActive\nA Boolean value that indicates whether the wireless route is active.\nDeprecated\nMPVolumeViewWirelessRouteActiveDidChangeNotification\nIndicates the active wireless route changed.\nDeprecated\nMPVolumeViewWirelessRoutesAvailableDidChangeNotification\nIndicates the available wireless routes changed.\nDeprecated\nGlobal volume setting methods\nGlobal functions for setting the volume alert window status."
  },
  {
    "title": "MPVolumeViewWirelessRoutesAvailableDidChangeNotification",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpvolumeviewwirelessroutesavailabledidchangenotification",
    "html": "Discussion\n\nThe system posts this notification when the wirelessRoutesAvailable property changes.\n\nSee Also\nDeprecated symbols\nMPMovieAccessLog\nKey metrics about network playback for an associated movie player that’s playing streamed content.\nDeprecated\nMPMovieAccessLogEvent\nA single piece of information for a movie access log.\nDeprecated\nMPMovieErrorLog\nData describing network resource playback failures for the associated movie player, including timestamps indicating when each failure occurred.\nDeprecated\nMPMovieErrorLogEvent\nA single piece of information for a movie error log.\nDeprecated\nMPMovieLoadState\nConstants describing the network load state of the movie player.\nDeprecated\nMPMovieMediaTypeMask\nThe types of content available in the movie file.\nDeprecated\nMPMoviePlayerController\nA type of movie player that manages the playback of a movie from a file or a network stream.\nDeprecated\nMPMoviePlayerViewController\nA simple view controller for displaying full-screen movies.\nDeprecated\nMPTimedMetadata\nA timed metadata object that carries time-based information within HTTP streamed media.\nDeprecated\nMPPlayableContentManager\nA shared content manager for controlling interactions between your media app and system-provided or external media player interfaces.\nDeprecated\nMPPlayableContentManagerContext\nAn object representing the current state of the playable endpoint.\nDeprecated\niPodMusicPlayer\nReturns the iPod music player, which controls the iPod app’s state.\nDeprecated\n- initWithImage:\nInitializes a media item artwork instance with a full-size image.\nDeprecated\nimageCropRect\nThe bounds, in points, of the content area for the full size image associated with the media item artwork.\nshowsRouteButton\nA Boolean value that indicates whether the route button is visible in the volume view.\nDeprecated\n- routeButtonImageForState:\nReturns the button image associated with the specified control state.\nDeprecated\n- routeButtonRectForBounds:\nReturns the drawing rectangle for the route button.\nDeprecated\n- setRouteButtonImage:forState:\nAssigns a button image to the specified control states.\nDeprecated\nwirelessRoutesAvailable\nA Boolean value indicating wireless routes are available.\nDeprecated\nwirelessRouteActive\nA Boolean value that indicates whether the wireless route is active.\nDeprecated\nMPVolumeViewWirelessRouteActiveDidChangeNotification\nIndicates the active wireless route changed.\nDeprecated\nGlobal volume setting methods\nGlobal functions for setting the volume alert window status."
  },
  {
    "title": "MPErrorCode",
    "url": "https://developer.apple.com/documentation/mediaplayer/mperrorcode",
    "html": "Topics\nError codes\nMPErrorCancelled\nAn error that indicates the system canceled the requested operation before it completed.\nMPErrorCloudServiceCapabilityMissing\nAn error that indicates the operation can’t complete because iCloud services aren’t enabled.\nMPErrorNetworkConnectionFailed\nAn error that indicates the operation failed because the device can’t connect to the network.\nMPErrorNotFound\nAn error that indicates the operation failed because the system can’t find the requested identifier in the current storefront.\nMPErrorNotSupported\nAn error that indicates the requested operation failed because the system doesn’t support it.\nMPErrorPermissionDenied\nAn error that indicates the operation can’t complete because the user doesn’t have permission to execute the operation.\nMPErrorRequestTimedOut\nAn error that indicates the requested operation timed out.\nMPErrorUnknown\nAn error that indicates the requested operation can’t complete due to an unknown error."
  },
  {
    "title": "MPMovieMediaTypeMaskVideo",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmoviemediatypemask/mpmoviemediatypemaskvideo",
    "html": "Discussion\n\nThe movie file contains video media."
  },
  {
    "title": "MPMovieMediaTypeMaskAudio",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmoviemediatypemask/mpmoviemediatypemaskaudio",
    "html": "Discussion\n\nThe movie file contains audio media."
  },
  {
    "title": "routeButtonImageForState:",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpvolumeview/1620078-routebuttonimageforstate",
    "html": "Parameters\nstate\n\nThe control state whose thumb image you want. You should specify only one control state value for this parameter.\n\nReturn Value\n\nThe button image associated with the specified state, or nil if an appropriate image could not be retrieved. This method might return nil if you specify multiple control states in the state parameter.\n\nDiscussion\n\nUse this method to retrieve the corresponding button image for a specific state.\n\nSee Also\nDeprecated\nvolumeWarningSliderImage\nThe image used to designate the European Union volume limit.\nDeprecated\nshowsRouteButton\nA Boolean value that indicates whether the route button is visible in the volume view.\nDeprecated\nwirelessRoutesAvailable\nA Boolean value indicating wireless routes are available.\nDeprecated\nwirelessRouteActive\nA Boolean value that indicates whether the wireless route is active.\nDeprecated\n- routeButtonRectForBounds:\nReturns the drawing rectangle for the route button.\nDeprecated\n- setRouteButtonImage:forState:\nAssigns a button image to the specified control states.\nDeprecated"
  },
  {
    "title": "wirelessRoutesAvailable",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpvolumeview/1620073-wirelessroutesavailable",
    "html": "Discussion\n\nWhen set to YES, a wireless route is available for user selection. Some types of wireless routes are only discovered when the view is present in the window hierarchy.\n\nSee Also\nDeprecated\nvolumeWarningSliderImage\nThe image used to designate the European Union volume limit.\nDeprecated\nshowsRouteButton\nA Boolean value that indicates whether the route button is visible in the volume view.\nDeprecated\nwirelessRouteActive\nA Boolean value that indicates whether the wireless route is active.\nDeprecated\n- routeButtonImageForState:\nReturns the button image associated with the specified control state.\nDeprecated\n- routeButtonRectForBounds:\nReturns the drawing rectangle for the route button.\nDeprecated\n- setRouteButtonImage:forState:\nAssigns a button image to the specified control states.\nDeprecated"
  },
  {
    "title": "MPVolumeViewWirelessRouteActiveDidChangeNotification",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpvolumeviewwirelessrouteactivedidchangenotification",
    "html": "Discussion\n\nThe system posts this notification when the wirelessRouteActive property changes.\n\nSee Also\nDeprecated symbols\nMPMovieAccessLog\nKey metrics about network playback for an associated movie player that’s playing streamed content.\nDeprecated\nMPMovieAccessLogEvent\nA single piece of information for a movie access log.\nDeprecated\nMPMovieErrorLog\nData describing network resource playback failures for the associated movie player, including timestamps indicating when each failure occurred.\nDeprecated\nMPMovieErrorLogEvent\nA single piece of information for a movie error log.\nDeprecated\nMPMovieLoadState\nConstants describing the network load state of the movie player.\nDeprecated\nMPMovieMediaTypeMask\nThe types of content available in the movie file.\nDeprecated\nMPMoviePlayerController\nA type of movie player that manages the playback of a movie from a file or a network stream.\nDeprecated\nMPMoviePlayerViewController\nA simple view controller for displaying full-screen movies.\nDeprecated\nMPTimedMetadata\nA timed metadata object that carries time-based information within HTTP streamed media.\nDeprecated\nMPPlayableContentManager\nA shared content manager for controlling interactions between your media app and system-provided or external media player interfaces.\nDeprecated\nMPPlayableContentManagerContext\nAn object representing the current state of the playable endpoint.\nDeprecated\niPodMusicPlayer\nReturns the iPod music player, which controls the iPod app’s state.\nDeprecated\n- initWithImage:\nInitializes a media item artwork instance with a full-size image.\nDeprecated\nimageCropRect\nThe bounds, in points, of the content area for the full size image associated with the media item artwork.\nshowsRouteButton\nA Boolean value that indicates whether the route button is visible in the volume view.\nDeprecated\n- routeButtonImageForState:\nReturns the button image associated with the specified control state.\nDeprecated\n- routeButtonRectForBounds:\nReturns the drawing rectangle for the route button.\nDeprecated\n- setRouteButtonImage:forState:\nAssigns a button image to the specified control states.\nDeprecated\nwirelessRoutesAvailable\nA Boolean value indicating wireless routes are available.\nDeprecated\nwirelessRouteActive\nA Boolean value that indicates whether the wireless route is active.\nDeprecated\nMPVolumeViewWirelessRoutesAvailableDidChangeNotification\nIndicates the available wireless routes changed.\nDeprecated\nGlobal volume setting methods\nGlobal functions for setting the volume alert window status."
  },
  {
    "title": "MPMediaPlaylistPropertyAuthorDisplayName",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmediaplaylistpropertyauthordisplayname",
    "html": "Discussion\n\nThis is required for 3rd party apps. Defaults to the app display name when not defined.\n\nSee Also\nProperty keys\nlet MPMediaPlaylistPropertyName: String\nThe name of the playlist.\nlet MPMediaPlaylistPropertyDescriptionText: String\nDescriptive text for the playlist.\nlet MPMediaPlaylistPropertyPersistentID: String\nThe persistent identifier for the playlist.\nlet MPMediaPlaylistPropertyPlaylistAttributes: String\nThe attributes associated with the playlist.\nlet MPMediaPlaylistPropertyCloudGlobalID: String\nThe cloud identifier for the playlist.\nlet MPMediaPlaylistPropertySeedItems: String\nThe items seeded to generate the playlist; applies only to Genius playlists."
  },
  {
    "title": "MPMoviePlaybackState.interrupted",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmovieplaybackstate/interrupted",
    "html": "Discussion\n\nPlayback is temporarily interrupted, perhaps because the buffer ran out of content."
  },
  {
    "title": "MPMovieFinishReason.playbackEnded",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmoviefinishreason/playbackended",
    "html": "Discussion\n\nThe end of the movie was reached."
  },
  {
    "title": "MPMoviePlaybackState.playing",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmovieplaybackstate/playing",
    "html": "Discussion\n\nPlayback is currently under way."
  },
  {
    "title": "pauseCommand",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpremotecommandcenter/1618979-pausecommand",
    "html": "Discussion\n\nUse the object in this property to register your app’s handler for pausing the currently playing track. In your handler, pause playback of the current item but maintain the current play position. You can disable the command if your app does not support it.\n\nSee Also\nPlayback commands\nvar playCommand: MPRemoteCommand\nThe command object for starting playback of the current item.\nvar stopCommand: MPRemoteCommand\nThe command object for stopping playback of the current item.\nvar togglePlayPauseCommand: MPRemoteCommand\nThe command object for toggling between playing and pausing the current item."
  },
  {
    "title": "MPRemoteCommandHandlerStatus.deviceNotFound",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpremotecommandhandlerstatus/devicenotfound",
    "html": "Discussion\n\nCommands that require a device to perform their action should return this status when the device is unavailable. For example, you’d return this status if your command requires headphones, but none are available."
  },
  {
    "title": "MPChangeLanguageOptionSetting.permanent",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpchangelanguageoptionsetting/permanent",
    "html": "See Also\nLanguage option settings\ncase none\nNo language option change is to be made.\ncase nowPlayingItemOnly\nThe language option change is applied to the now playing item only."
  },
  {
    "title": "MPChangeLanguageOptionSetting.none",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpchangelanguageoptionsetting/none",
    "html": "See Also\nLanguage option settings\ncase nowPlayingItemOnly\nThe language option change is applied to the now playing item only.\ncase permanent\nThe language option change is applied to all future playback items."
  },
  {
    "title": "childItemsDisplayPlaybackProgress(at:)",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpplayablecontentdatasource/1619509-childitemsdisplayplaybackprogres",
    "html": "Parameters\nindexPath\n\nThe index of the media item being queried.\n\nReturn Value\n\nReturns true if the indicated media item supports displaying playback progress.\n\nDiscussion\n\nIf this method isn't implemented, playback progress is not supported for any media item. If any media item does support displaying the playback progress, you must implement this method.\n\nSee Also\nWorking with child nodes\nfunc beginLoadingChildItems(at: IndexPath, completionHandler: ((any Error)?) -> Void)\nStarts to load the children of the indicated index.\nDeprecated\nfunc numberOfChildItems(at: IndexPath) -> Int\nProvides the number of child nodes for the indicated node.\n\nRequired\n\nDeprecated"
  },
  {
    "title": "MPChangeLanguageOptionSetting.nowPlayingItemOnly",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpchangelanguageoptionsetting/nowplayingitemonly",
    "html": "See Also\nLanguage option settings\ncase none\nNo language option change is to be made.\ncase permanent\nThe language option change is applied to all future playback items."
  },
  {
    "title": "MPMovieMediaTypeMaskNone",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmoviemediatypemask/mpmoviemediatypemasknone",
    "html": "Discussion\n\nThe types of media available in the media are not yet known."
  },
  {
    "title": "Media player enumerations",
    "url": "https://developer.apple.com/documentation/mediaplayer/media_player_enumerations",
    "html": "Topics\nEnumerations\nMPErrorCode\nAn enumeration that represents error codes for framework operations."
  },
  {
    "title": "preservesShuffleMode",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpchangeshufflemodecommandevent/2097552-preservesshufflemode",
    "html": "Discussion\n\nWhen set to true, the shuffle mode is preserved between playback sessions.\n\nSee Also\nChanging the shuffle mode\nvar shuffleType: MPShuffleType\nThe shuffle type used when fulfilling the event request."
  },
  {
    "title": "MPMediaPlaylistPropertyDescriptionText",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmediaplaylistpropertydescriptiontext",
    "html": "Discussion\n\nValue is an NSString object.\n\nSee Also\nProperty keys\nlet MPMediaPlaylistPropertyAuthorDisplayName: String\nApp defined name for the playlist.\nlet MPMediaPlaylistPropertyName: String\nThe name of the playlist.\nlet MPMediaPlaylistPropertyPersistentID: String\nThe persistent identifier for the playlist.\nlet MPMediaPlaylistPropertyPlaylistAttributes: String\nThe attributes associated with the playlist.\nlet MPMediaPlaylistPropertyCloudGlobalID: String\nThe cloud identifier for the playlist.\nlet MPMediaPlaylistPropertySeedItems: String\nThe items seeded to generate the playlist; applies only to Genius playlists."
  },
  {
    "title": "MPMovieTimeOption.nearestKeyFrame",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmovietimeoption/nearestkeyframe",
    "html": "Discussion\n\nGenerate a thumbnail image using the nearest key frame. This frame could be several frames away from the current frame. This option generally offers better performance than trying to find the exact frame."
  },
  {
    "title": "MPMovieTimeOption.exact",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmovietimeoption/exact",
    "html": "Discussion\n\nUse the exact current frame."
  },
  {
    "title": "MPMovieSourceType.file",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmoviesourcetype/file",
    "html": "Discussion\n\nThe movie is a local file or is a file that can be downloaded from the network."
  },
  {
    "title": "MPMovieSourceType.streaming",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmoviesourcetype/streaming",
    "html": "Discussion\n\nThe movie is a live or on-demand stream."
  },
  {
    "title": "MPMoviePlaybackState.stopped",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmovieplaybackstate/stopped",
    "html": "Discussion\n\nPlayback is currently stopped. Playback will commence from the beginning of the movie."
  },
  {
    "title": "MPMoviePlaybackState.paused",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmovieplaybackstate/paused",
    "html": "Discussion\n\nPlayback is currently paused. Playback will resume from the point where it was paused."
  },
  {
    "title": "contentItem(at:)",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpplayablecontentdatasource/1619505-contentitem",
    "html": "Required\n\nParameters\nindexPath\n\nThe index for the media item to be retrieved.\n\nReturn Value\n\nThe media item at the indicated index.\n\nSee Also\nRetrieving a media item\nfunc contentItem(forIdentifier: String, completionHandler: (MPContentItem?, (any Error)?) -> Void)\nRetrieves the content item associated with the provided identifier.\nDeprecated"
  },
  {
    "title": "MPMoviePlaybackState.seekingBackward",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmovieplaybackstate/seekingbackward",
    "html": "Discussion\n\nThe movie player is currently seeking towards the beginning of the movie."
  },
  {
    "title": "MPMoviePlaybackState.seekingForward",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmovieplaybackstate/seekingforward",
    "html": "Discussion\n\nThe movie player is currently seeking towards the end of the movie."
  },
  {
    "title": "shared()",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpremotecommandcenter/1618994-shared",
    "html": "Return Value\n\nThe shared instance of the MPRemoteCommandCenter class."
  },
  {
    "title": "beginLoadingChildItems(at:completionHandler:)",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpplayablecontentdatasource/1619508-beginloadingchilditems",
    "html": "Parameters\nindexPath\n\nThe index of the current item.\n\ncompletionHandler\n\nA block to be called after all loading is completed.\n\nThe block receives the following parameter:\n\nerror\n\nContains an error message if there was an error trying to load the children of the indicated item; otherwise, contains nil.\n\nDiscussion\n\nConcurrency Note\n\nYou can call this method from synchronous code using a completion handler, as shown on this page, or you can call it as an asynchronous method that has the following declaration:\n\noptional func beginLoadingChildItems(at indexPath: IndexPath) async throws\n\n\nFor information about concurrency and asynchronous code in Swift, see Calling Objective-C APIs Asynchronously.\n\nCall this method to start asynchronous batch loading of media items. The app can load content before the media player needs to display the next media items. When you use this method, the client app must call the completion handler after loading has finished.\n\nSee Also\nWorking with child nodes\nfunc childItemsDisplayPlaybackProgress(at: IndexPath) -> Bool\nReturns a Boolean value indicating whether the provided content supports playback progress.\nDeprecated\nfunc numberOfChildItems(at: IndexPath) -> Int\nProvides the number of child nodes for the indicated node.\n\nRequired\n\nDeprecated"
  },
  {
    "title": "playableContentManager(_:initiatePlaybackOfContentItemAt:completionHandler:)",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpplayablecontentdelegate/1620292-playablecontentmanager",
    "html": "Parameters\ncontentManager\n\nThe content manager that initiated the request.\n\nindexPath\n\nThe index for the indicated item.\n\ncompletionHandler\n\nA block that the system calls after initiating a playback request. The block takes the following parameter:\n\nerror\n\nPass nil if playback successfully began. If playback can’t begin, pass an error to indicate the reason.\n\nDiscussion\n\nConcurrency Note\n\nYou can call this method from synchronous code using a completion handler, as shown on this page, or you can call it as an asynchronous method that has the following declaration:\n\noptional func playableContentManager(_ contentManager: MPPlayableContentManager, initiatePlaybackOfContentItemAt indexPath: IndexPath) async throws\n\n\nFor information about concurrency and asynchronous code in Swift, see Calling Objective-C APIs Asynchronously.\n\nThe system calls this method when a media player interface needs to play a media item. Your app responds by beginning playback of the requested media item. After beginning playback, call the provided completionHandler block with an argument of nil; or, if your app can’t begin playback, call the completion handler with an error that indicates the reason.\n\nImportant\n\nDon’t automatically restart playback when the media item is already playing. In most cases, it’s better for your app to do nothing and continue to play the current media item."
  },
  {
    "title": "numberOfChildItems(at:)",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpplayablecontentdatasource/1619506-numberofchilditems",
    "html": "Required\n\nParameters\nindexPath\n\nThe index for the node to be queried.\n\nReturn Value\n\nAn NSInteger value representing the number of child nodes associated with the indicated node.\n\nSee Also\nWorking with child nodes\nfunc beginLoadingChildItems(at: IndexPath, completionHandler: ((any Error)?) -> Void)\nStarts to load the children of the indicated index.\nDeprecated\nfunc childItemsDisplayPlaybackProgress(at: IndexPath) -> Bool\nReturns a Boolean value indicating whether the provided content supports playback progress.\nDeprecated"
  },
  {
    "title": "playableContentManager(_:initializePlaybackQueueWithContentItems:completionHandler:)",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpplayablecontentdelegate/1648205-playablecontentmanager",
    "html": "Parameters\ncontentManager\n\nThe content manager that initiated the request.\n\ncontentItems\n\nThe content items to load.\n\ncompletionHandler\n\nA block that the system calls after content is ready for playback. The block takes the following parameter:\n\nerror\n\nPass nil if playback successfully began. If playback can’t begin, pass an error to indicate the reason.\n\nDiscussion\n\nConcurrency Note\n\nYou can call this method from synchronous code using a completion handler, as shown on this page, or you can call it as an asynchronous method that has the following declaration:\n\noptional func playableContentManager(_ contentManager: MPPlayableContentManager, initializePlaybackQueueWithContentItems contentItems: [Any]?) async throws\n\n\nFor information about concurrency and asynchronous code in Swift, see Calling Objective-C APIs Asynchronously.\n\niOS calls this method when the user performs an action that, in context, might indicate intent to begin playing content using your app. For example, if the user frequently listens to audio content in your app with headphones while at a particular location, iOS might call this method upon plugging in headphones when the user is at that location. Your app responds by choosing appropriate content, performing any app-specific actions necessary to prepare the content for playback, and setting the nowPlayingInfo property of the shared MPNowPlayingInfoCenter object to indicate to the user that this content is ready to play.\n\nUse this method only to suggest content. Don’t begin playback of content in this method—do so only upon receiving a Play command or when the playable content manager requests to play something else.\n\nAfter preparing content for playing, call the provided completionHandler block with an argument of nil; or, if your app can’t prepare content, call the completion handler an error that indicates the reason.\n\nSee Also\nSuggesting content for playback\nfunc playableContentManager(MPPlayableContentManager, initializePlaybackQueueWithCompletionHandler: ((any Error)?) -> Void)\nAsks the delegate to prepare suggested content for playback.\nDeprecated"
  },
  {
    "title": "playableContentManager(_:initializePlaybackQueueWithCompletionHandler:)",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpplayablecontentdelegate/1620294-playablecontentmanager",
    "html": "Parameters\ncontentManager\n\nThe content manager that initiated the request.\n\ncompletionHandler\n\nA block that the system calls after content is ready for playback. The block takes the following parameter:\n\nerror\n\nPass nil if playback successfully began. If playback can’t begin, pass an error to indicate the reason.\n\nDiscussion\n\nConcurrency Note\n\nYou can call this method from synchronous code using a completion handler, as shown on this page, or you can call it as an asynchronous method that has the following declaration:\n\noptional func playableContentManagerInitializePlaybackQueue(_ contentManager: MPPlayableContentManager) async throws\n\n\nFor information about concurrency and asynchronous code in Swift, see Calling Objective-C APIs Asynchronously.\n\niOS calls this method when the user performs an action that, in context, might indicate intent to begin playing content using your app. For example, if the user frequently listens to audio content in your app with headphones while at a particular location, iOS might call this method upon plugging in headphones when the user is at that location. Your app responds by choosing appropriate content, performing any app-specific actions necessary to prepare the content for playback, and setting the nowPlayingInfo property of the shared MPNowPlayingInfoCenter object to indicate to the user that this content is ready to play.\n\nNote\n\nUse this method only to suggest content. Don’t begin playback of content in this method—do so only upon receiving a Play command or when the playable content manager requests to play something else.\n\nAfter preparing content for playing, call the provided completionHandler block with an argument of nil; or, if your app can’t prepare content, call the completion handler an error that indicates the reason.\n\nSee Also\nSuggesting content for playback\nfunc playableContentManager(MPPlayableContentManager, initializePlaybackQueueWithContentItems: [Any]?, completionHandler: ((any Error)?) -> Void)\nAsks the delegate to prepare suggested content for playback.\nDeprecated"
  },
  {
    "title": "MPRepeatType.all",
    "url": "https://developer.apple.com/documentation/mediaplayer/mprepeattype/all",
    "html": "See Also\nRepeat types\ncase off\nNothing is repeated during playback.\ncase one\nA single item is repeated indefinitely."
  },
  {
    "title": "playableContentManager(_:didUpdate:)",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpplayablecontentdelegate/1620291-playablecontentmanager",
    "html": "Parameters\ncontentManager\n\nThe content manager whose current context has changed.\n\ncontext\n\nThe new context of the content manager.\n\nDiscussion\n\nA playable content manager’s context provides information about the current playback environment of an external media player, such as whether that media player limits the amount of content to display. Use the content manager’s context property to examine attributes of the new context after the change."
  },
  {
    "title": "MPRepeatType.off",
    "url": "https://developer.apple.com/documentation/mediaplayer/mprepeattype/off",
    "html": "See Also\nRepeat types\ncase one\nA single item is repeated indefinitely.\ncase all\nThe current container or playlist is repeated indefinitely."
  },
  {
    "title": "MPRepeatType.one",
    "url": "https://developer.apple.com/documentation/mediaplayer/mprepeattype/one",
    "html": "See Also\nRepeat types\ncase off\nNothing is repeated during playback.\ncase all\nThe current container or playlist is repeated indefinitely."
  },
  {
    "title": "MPMoviePlayerFullscreenAnimationDurationUserInfoKey",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmovieplayerfullscreenanimationdurationuserinfokey",
    "html": "Discussion\n\nThe value of this key is an NSNumber containing a double value. This value represents the duration (measured in seconds) of the animation used to transition in or out of full-screen mode."
  },
  {
    "title": "MPShuffleType.collections",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpshuffletype/collections",
    "html": "See Also\nShuffle types\ncase off\nNothing is shuffled during playback.\ncase items\nIndividual items are shuffled during playback."
  },
  {
    "title": "endpointAvailable",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpplayablecontentmanagercontext/1623569-endpointavailable",
    "html": "Discussion\n\nWhen set to true, the content server is available.\n\nSee Also\nInspecting content manager properties\nvar contentLimitsEnforced: Bool\nA Boolean value that indicates whether the content server enforces content limits.\nDeprecated\nvar enforcedContentItemsCount: Int\nReturns the number of content items to display during content limiting.\nDeprecated\nvar enforcedContentTreeDepth: Int\nThe maximum depth of the navigation hierarchy allowed by the content server.\nDeprecated\nvar contentLimitsEnabled: Bool\nA Boolean value that indicates whether the content server enables content limits.\nDeprecated"
  },
  {
    "title": "MPMoviePlayerThumbnailTimeKey",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmovieplayerthumbnailtimekey",
    "html": "Discussion\n\nThe value of this key is a NSNumber object containing a double value. This value represents the actual time (measured in seconds) from the beginning of the movie at which the image was captured."
  },
  {
    "title": "MPMoviePlayerThumbnailImageKey",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmovieplayerthumbnailimagekey",
    "html": "Discussion\n\nThe value of this key is a UIImage object containing the image that was obtained for the desired frame."
  },
  {
    "title": "uri",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmovieerrorlogevent/1620913-uri",
    "html": "See Also\nMovie error log event properties\nvar date: Date!\nThe date and time when the error occurred.\nDeprecated\nvar serverAddress: String!\nThe IP address of the web server that was the source of the error.\nDeprecated\nvar playbackSessionID: String!\nA globally unique identifier (GUID) for the playback session.\nDeprecated\nvar errorStatusCode: Int\nA unique error code identifier.\nDeprecated\nvar errorDomain: String!\nThe network domain of the error.\nDeprecated\nvar errorComment: String!\nA description of the error.\nDeprecated"
  },
  {
    "title": "MPMoviePlayerFullscreenAnimationCurveUserInfoKey",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmovieplayerfullscreenanimationcurveuserinfokey",
    "html": "Discussion\n\nThe value of this key is an NSNumber containing an integer value that represents one of the UIView.AnimationCurve constants."
  },
  {
    "title": "shuffleType",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpchangeshufflemodecommandevent/1649696-shuffletype",
    "html": "See Also\nChanging the shuffle mode\nvar preservesShuffleMode: Bool\nA Boolean value that indicates whether the shuffle mode is preserved between playback sessions."
  },
  {
    "title": "date",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmovieerrorlogevent/1620794-date",
    "html": "See Also\nMovie error log event properties\nvar uri: String!\nThe URI of the item playing when the error occurred.\nDeprecated\nvar serverAddress: String!\nThe IP address of the web server that was the source of the error.\nDeprecated\nvar playbackSessionID: String!\nA globally unique identifier (GUID) for the playback session.\nDeprecated\nvar errorStatusCode: Int\nA unique error code identifier.\nDeprecated\nvar errorDomain: String!\nThe network domain of the error.\nDeprecated\nvar errorComment: String!\nA description of the error.\nDeprecated"
  },
  {
    "title": "serverAddress",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmovieerrorlogevent/1620908-serveraddress",
    "html": "See Also\nMovie error log event properties\nvar date: Date!\nThe date and time when the error occurred.\nDeprecated\nvar uri: String!\nThe URI of the item playing when the error occurred.\nDeprecated\nvar playbackSessionID: String!\nA globally unique identifier (GUID) for the playback session.\nDeprecated\nvar errorStatusCode: Int\nA unique error code identifier.\nDeprecated\nvar errorDomain: String!\nThe network domain of the error.\nDeprecated\nvar errorComment: String!\nA description of the error.\nDeprecated"
  },
  {
    "title": "errorStatusCode",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmovieerrorlogevent/1620782-errorstatuscode",
    "html": "Discussion\n\nIf the error is unknown, the value of this property is negative.\n\nSee Also\nMovie error log event properties\nvar date: Date!\nThe date and time when the error occurred.\nDeprecated\nvar uri: String!\nThe URI of the item playing when the error occurred.\nDeprecated\nvar serverAddress: String!\nThe IP address of the web server that was the source of the error.\nDeprecated\nvar playbackSessionID: String!\nA globally unique identifier (GUID) for the playback session.\nDeprecated\nvar errorDomain: String!\nThe network domain of the error.\nDeprecated\nvar errorComment: String!\nA description of the error.\nDeprecated"
  },
  {
    "title": "playbackSessionID",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmovieerrorlogevent/1620890-playbacksessionid",
    "html": "Discussion\n\nHTTP requests use the GUID.\n\nSee Also\nMovie error log event properties\nvar date: Date!\nThe date and time when the error occurred.\nDeprecated\nvar uri: String!\nThe URI of the item playing when the error occurred.\nDeprecated\nvar serverAddress: String!\nThe IP address of the web server that was the source of the error.\nDeprecated\nvar errorStatusCode: Int\nA unique error code identifier.\nDeprecated\nvar errorDomain: String!\nThe network domain of the error.\nDeprecated\nvar errorComment: String!\nA description of the error.\nDeprecated"
  },
  {
    "title": "MPMediaPlaylistPropertySeedItems",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmediaplaylistpropertyseeditems",
    "html": "Discussion\n\nValue is an NSArray object containing one or more MPMediaItem objects. Value is nil for playlists that don’t have the genius flag set.\n\nSee Also\nProperty keys\nlet MPMediaPlaylistPropertyAuthorDisplayName: String\nApp defined name for the playlist.\nlet MPMediaPlaylistPropertyName: String\nThe name of the playlist.\nlet MPMediaPlaylistPropertyDescriptionText: String\nDescriptive text for the playlist.\nlet MPMediaPlaylistPropertyPersistentID: String\nThe persistent identifier for the playlist.\nlet MPMediaPlaylistPropertyPlaylistAttributes: String\nThe attributes associated with the playlist.\nlet MPMediaPlaylistPropertyCloudGlobalID: String\nThe cloud identifier for the playlist."
  },
  {
    "title": "MPMediaPlaylistPropertyCloudGlobalID",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmediaplaylistpropertycloudglobalid",
    "html": "See Also\nProperty keys\nlet MPMediaPlaylistPropertyAuthorDisplayName: String\nApp defined name for the playlist.\nlet MPMediaPlaylistPropertyName: String\nThe name of the playlist.\nlet MPMediaPlaylistPropertyDescriptionText: String\nDescriptive text for the playlist.\nlet MPMediaPlaylistPropertyPersistentID: String\nThe persistent identifier for the playlist.\nlet MPMediaPlaylistPropertyPlaylistAttributes: String\nThe attributes associated with the playlist.\nlet MPMediaPlaylistPropertySeedItems: String\nThe items seeded to generate the playlist; applies only to Genius playlists."
  },
  {
    "title": "MPMovieControlStyle.none",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmoviecontrolstyle/none",
    "html": "Discussion\n\nNo controls are displayed."
  },
  {
    "title": "MPMediaPlaylistPropertyPersistentID",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmediaplaylistpropertypersistentid",
    "html": "Discussion\n\nValue is an NSNumber object containing a UInt64_t (unsigned long long). Can be used to build a media property predicate as described in MPMediaQuery.\n\nSee Also\nProperty keys\nlet MPMediaPlaylistPropertyAuthorDisplayName: String\nApp defined name for the playlist.\nlet MPMediaPlaylistPropertyName: String\nThe name of the playlist.\nlet MPMediaPlaylistPropertyDescriptionText: String\nDescriptive text for the playlist.\nlet MPMediaPlaylistPropertyPlaylistAttributes: String\nThe attributes associated with the playlist.\nlet MPMediaPlaylistPropertyCloudGlobalID: String\nThe cloud identifier for the playlist.\nlet MPMediaPlaylistPropertySeedItems: String\nThe items seeded to generate the playlist; applies only to Genius playlists."
  },
  {
    "title": "MPMovieControlStyle.fullscreen",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmoviecontrolstyle/fullscreen",
    "html": "Discussion\n\nControls for fullscreen playback are displayed. The controls include a start/pause button, a scrubber bar, forward and reverse seeking buttons, a button for toggling between fullscreen and embedded display modes, a button for toggling the aspect fill mode, and a Done button. Tapping the done button pauses the video and exits fullscreen mode."
  },
  {
    "title": "MPMediaPlaylistPropertyName",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmediaplaylistpropertyname",
    "html": "Discussion\n\nValue is an NSString object. Can be used to build a media property predicate as described in MPMediaQuery.\n\nSee Also\nProperty keys\nlet MPMediaPlaylistPropertyAuthorDisplayName: String\nApp defined name for the playlist.\nlet MPMediaPlaylistPropertyDescriptionText: String\nDescriptive text for the playlist.\nlet MPMediaPlaylistPropertyPersistentID: String\nThe persistent identifier for the playlist.\nlet MPMediaPlaylistPropertyPlaylistAttributes: String\nThe attributes associated with the playlist.\nlet MPMediaPlaylistPropertyCloudGlobalID: String\nThe cloud identifier for the playlist.\nlet MPMediaPlaylistPropertySeedItems: String\nThe items seeded to generate the playlist; applies only to Genius playlists."
  },
  {
    "title": "MPMovieControlStyle.embedded",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmoviecontrolstyle/embedded",
    "html": "Discussion\n\nControls for an embedded view are displayed. The controls include a start/pause button, a scrubber bar, and a button for toggling between fullscreen and embedded display modes."
  },
  {
    "title": "contentItem(forIdentifier:completionHandler:)",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpplayablecontentdatasource/1649672-contentitem",
    "html": "Parameters\nidentifier\n\nThe String that identifies a content item.\n\ncompletionHandler\n\nA block that is called after the content item has been loaded.\n\ncontentItem\n\nThe content item associated with the identifier. If there is no content item, the value of this parameter is nil.\n\nerror\n\nIf an error occurred, this parameter holds the error object that explains the error. Otherwise, the value of this parameter is nil.\n\nDiscussion\n\nConcurrency Note\n\nYou can call this method from synchronous code using a completion handler, as shown on this page, or you can call it as an asynchronous method that has the following declaration:\n\noptional func contentItem(forIdentifier identifier: String) async throws -> MPContentItem\n\n\nFor information about concurrency and asynchronous code in Swift, see Calling Objective-C APIs Asynchronously.\n\nClient apps should always call the completion handler after loading has finished.\n\nSee Also\nRetrieving a media item\nfunc contentItem(at: IndexPath) -> MPContentItem?\nRetrieves the media item at the specified index.\n\nRequired\n\nDeprecated"
  },
  {
    "title": "segmentsDownloadedDuration",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmovieaccesslogevent/1620944-segmentsdownloadedduration",
    "html": "Discussion\n\nIf the accumulated media duration is unknown, this property’s value is negative.\n\nSee Also\nMovie access log event properties\nvar numberOfSegmentsDownloaded: Int\nA count of media segments downloaded from the web server to your app.\nDeprecated\nvar playbackStartDate: Date!\nThe timestamp for when playback began for the movie log access event.\nDeprecated\nvar uri: String!\nThe URI of the playback item.\nDeprecated\nvar serverAddress: String!\nThe IPv4 or IPv6 address of the web server that was the source of the last delivered media segment.\nDeprecated\nvar numberOfServerAddressChanges: Int\nA count of changes to the serverAddress property over the last uninterrupted period of playback.\nDeprecated\nvar playbackSessionID: String!\nA GUID that identifies the playback session to use in HTTP requests.\nDeprecated\nvar playbackStartOffset: TimeInterval\nAn offset into the playlist where the last uninterrupted period of playback began, in seconds.\nDeprecated\nvar durationWatched: TimeInterval\nThe accumulated duration of the media played, in seconds.\nDeprecated\nvar numberOfStalls: Int\nThe total number of playback stalls encountered.\nDeprecated\nvar numberOfBytesTransferred: Int64\nThe accumulated number of bytes transferred.\nDeprecated\nvar observedBitrate: Double\nThe empirical throughput across all media downloaded for the movie player, in bits per second.\nDeprecated\nvar indicatedBitrate: Double\nThe throughput required to play the stream, as advertised by the web server, in bits per second.\nDeprecated\nvar numberOfDroppedVideoFrames: Int\nThe total number of dropped video frames.\nDeprecated"
  },
  {
    "title": "MPMovieRepeatMode.one",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmovierepeatmode/one",
    "html": "Discussion\n\nThe current movie is repeated when it finishes."
  },
  {
    "title": "MPMovieRepeatMode.none",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmovierepeatmode/none",
    "html": "Discussion\n\nContent is not repeated when playback finishes"
  },
  {
    "title": "errorDomain",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmovieerrorlogevent/1620818-errordomain",
    "html": "See Also\nMovie error log event properties\nvar date: Date!\nThe date and time when the error occurred.\nDeprecated\nvar uri: String!\nThe URI of the item playing when the error occurred.\nDeprecated\nvar serverAddress: String!\nThe IP address of the web server that was the source of the error.\nDeprecated\nvar playbackSessionID: String!\nA globally unique identifier (GUID) for the playback session.\nDeprecated\nvar errorStatusCode: Int\nA unique error code identifier.\nDeprecated\nvar errorComment: String!\nA description of the error.\nDeprecated"
  },
  {
    "title": "MPMovieFinishReason.playbackError",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmoviefinishreason/playbackerror",
    "html": "Discussion\n\nThere was an error during playback."
  },
  {
    "title": "errorComment",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmovieerrorlogevent/1620941-errorcomment",
    "html": "See Also\nMovie error log event properties\nvar date: Date!\nThe date and time when the error occurred.\nDeprecated\nvar uri: String!\nThe URI of the item playing when the error occurred.\nDeprecated\nvar serverAddress: String!\nThe IP address of the web server that was the source of the error.\nDeprecated\nvar playbackSessionID: String!\nA globally unique identifier (GUID) for the playback session.\nDeprecated\nvar errorStatusCode: Int\nA unique error code identifier.\nDeprecated\nvar errorDomain: String!\nThe network domain of the error.\nDeprecated"
  },
  {
    "title": "init(_:)",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpadtimerange/3986076-init",
    "html": "Parameters\ntimeRange\n\nA Core Media time range."
  },
  {
    "title": "default",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmoviecontrolstyle/1620785-default",
    "html": "Discussion\n\nFullscreen controls are displayed by default."
  },
  {
    "title": "preservesRepeatMode",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpchangerepeatmodecommandevent/2097553-preservesrepeatmode",
    "html": "Discussion\n\nWhen set to true, the chosen repeat mode is preserved between playback sessions.\n\nSee Also\nChanging the repeat type\nvar repeatType: MPRepeatType\nThe repeat type used when fulfilling the event request."
  },
  {
    "title": "repeatType",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpchangerepeatmodecommandevent/1649689-repeattype",
    "html": "See Also\nChanging the repeat type\nvar preservesRepeatMode: Bool\nA Boolean value that indicates whether the chosen repeat mode is preserved between playback sessions."
  },
  {
    "title": "MPNowPlayingInfoLanguageOptionType.legible",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpnowplayinginfolanguageoptiontype/legible",
    "html": "See Also\nLanguage option types\ncase audible\nIndicates an audible language option is used."
  },
  {
    "title": "removeTarget(_:)",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpremotecommand/1622903-removetarget",
    "html": "Parameters\ntarget\n\nThe object that currently is a recipient of action messages sent by this object. Specify nil to remove all targets.\n\nDiscussion\n\nCall the removeTarget(_:) method to remove the specified target and all actions associated with the target.\n\nSee Also\nHandling events\nfunc addTarget(handler: (MPRemoteCommandEvent) -> MPRemoteCommandHandlerStatus) -> Any\nAdds a block to be called when an event is received.\nfunc addTarget(Any, action: Selector)\nAdds a target object to be called when an event is received.\nfunc removeTarget(Any, action: Selector?)\nRemoves a target and action from a remote command object.\nenum MPRemoteCommandHandlerStatus\nConstants indicating the status of a command."
  },
  {
    "title": "MPRemoteCommandHandlerStatus",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpremotecommandhandlerstatus",
    "html": "Topics\nConstants\ncase success\nThe requested command executed successfully.\ncase noSuchContent\nThe requested command couldn’t execute because its required content isn’t available.\ncase noActionableNowPlayingItem\nThe requested command couldn’t execute because no Now Playing item is available.\ncase deviceNotFound\nThe requested command couldn’t execute because a required device isn’t available.\ncase commandFailed\nThe requested command failed to execute.\nRelationships\nConforms To\nSendable\nSee Also\nHandling events\nfunc addTarget(handler: (MPRemoteCommandEvent) -> MPRemoteCommandHandlerStatus) -> Any\nAdds a block to be called when an event is received.\nfunc addTarget(Any, action: Selector)\nAdds a target object to be called when an event is received.\nfunc removeTarget(Any?)\nRemoves a target from the remote command object.\nfunc removeTarget(Any, action: Selector?)\nRemoves a target and action from a remote command object."
  },
  {
    "title": "addTarget(handler:)",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpremotecommand/1622910-addtarget",
    "html": "Parameters\nhandler\n\nA block object to handle the MPRemoteCommandEvent.\n\nReturn Value\n\nAn opaque object associated with the designated handler.\n\nDiscussion\n\nCall the addTarget(handler:) method to add a block to be called. Remove the handler by calling the removeTarget(_:) method, passing in the object returned by this method.\n\nSee Also\nHandling events\nfunc addTarget(Any, action: Selector)\nAdds a target object to be called when an event is received.\nfunc removeTarget(Any?)\nRemoves a target from the remote command object.\nfunc removeTarget(Any, action: Selector?)\nRemoves a target and action from a remote command object.\nenum MPRemoteCommandHandlerStatus\nConstants indicating the status of a command."
  },
  {
    "title": "removeTarget(_:action:)",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpremotecommand/1622896-removetarget",
    "html": "Parameters\ntarget\n\nThe object that currently is a recipient of action messages sent by this object. Specify nil to remove all targets.\n\naction\n\nA selector identifying a method on the target. Specify NULL to remove all actions.\n\nDiscussion\n\nCall the removeTarget(_:action:) method to remove the specified target-action pair. Passing nil for target matches all targets and passing NULL for action matches all actions.\n\nSee Also\nHandling events\nfunc addTarget(handler: (MPRemoteCommandEvent) -> MPRemoteCommandHandlerStatus) -> Any\nAdds a block to be called when an event is received.\nfunc addTarget(Any, action: Selector)\nAdds a target object to be called when an event is received.\nfunc removeTarget(Any?)\nRemoves a target from the remote command object.\nenum MPRemoteCommandHandlerStatus\nConstants indicating the status of a command."
  },
  {
    "title": "MPNowPlayingInfoLanguageOptionType.audible",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpnowplayinginfolanguageoptiontype/audible",
    "html": "See Also\nLanguage option types\ncase legible\nIndicates a written language option is used."
  },
  {
    "title": "togglePlayPauseCommand",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpremotecommandcenter/1618992-toggleplaypausecommand",
    "html": "Discussion\n\nUse the object in this property to register your app’s handler for toggling between playing and pausing the current track. In your handler, perform the appropriate task based on the current state of the media item. If the item is currently playing, pause it. If it is paused, resume playing it. You can disable the command if your app does not support it.\n\nSee Also\nPlayback commands\nvar pauseCommand: MPRemoteCommand\nThe command object for pausing playback of the current item.\nvar playCommand: MPRemoteCommand\nThe command object for starting playback of the current item.\nvar stopCommand: MPRemoteCommand\nThe command object for stopping playback of the current item."
  },
  {
    "title": "playCommand",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpremotecommandcenter/1619000-playcommand",
    "html": "Discussion\n\nUse the object in this property to register your app’s handler for pausing the currently playing track. In your handler, play the current item from the point at which the track was paused, or from the beginning if the item was not paused. You can disable the command if your app does not support it.\n\nSee Also\nPlayback commands\nvar pauseCommand: MPRemoteCommand\nThe command object for pausing playback of the current item.\nvar stopCommand: MPRemoteCommand\nThe command object for stopping playback of the current item.\nvar togglePlayPauseCommand: MPRemoteCommand\nThe command object for toggling between playing and pausing the current item."
  },
  {
    "title": "nextTrackCommand",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpremotecommandcenter/1618999-nexttrackcommand",
    "html": "Discussion\n\nUse the object in this property to register your app’s handler for selecting the next track. In your handler, select the media item that follows the current media item. You can disable the command if your app does not support it.\n\nSee Also\nNavigating between tracks\nvar previousTrackCommand: MPRemoteCommand\nThe command object for selecting the previous track.\nvar changeRepeatModeCommand: MPChangeRepeatModeCommand\nThe command object for changing the repeat mode.\nvar changeShuffleModeCommand: MPChangeShuffleModeCommand\nThe command object for changing the shuffle mode."
  },
  {
    "title": "stopCommand",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpremotecommandcenter/1618984-stopcommand",
    "html": "Discussion\n\nUse the object in this property to register your app’s handler for stopping playback of the current track. In your handler, stop playback the current item. You can disable the command if your app does not support it.\n\nSee Also\nPlayback commands\nvar pauseCommand: MPRemoteCommand\nThe command object for pausing playback of the current item.\nvar playCommand: MPRemoteCommand\nThe command object for starting playback of the current item.\nvar togglePlayPauseCommand: MPRemoteCommand\nThe command object for toggling between playing and pausing the current item."
  },
  {
    "title": "seekForwardCommand",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpremotecommandcenter/1618981-seekforwardcommand",
    "html": "Discussion\n\nUse the object in this property to register your app’s handler for seeking forward in the current track. In your handler, begin seeking forward through the current media item. You can disable the command if your app does not support it.\n\nSee Also\nNavigating a track’s contents\nvar changePlaybackRateCommand: MPChangePlaybackRateCommand\nThe command object for changing the playback rate of the current media item.\nvar seekBackwardCommand: MPRemoteCommand\nThe command object for seeking backward through a single media item.\nvar skipBackwardCommand: MPSkipIntervalCommand\nThe command object for playing a previous point in a media item.\nvar skipForwardCommand: MPSkipIntervalCommand\nThe command object for playing a future point in a media item.\nvar changePlaybackPositionCommand: MPChangePlaybackPositionCommand\nThe command object for changing the playback position in a media item."
  },
  {
    "title": "skipBackwardCommand",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpremotecommandcenter/1618996-skipbackwardcommand",
    "html": "Discussion\n\nUse the object in this property to register your app’s handler for jumping to a previous point in the current track. In your handler, skip backwards by the amount specified in the event’s interval property. You can disable the command if your app does not support it.\n\nSee Also\nNavigating a track’s contents\nvar changePlaybackRateCommand: MPChangePlaybackRateCommand\nThe command object for changing the playback rate of the current media item.\nvar seekBackwardCommand: MPRemoteCommand\nThe command object for seeking backward through a single media item.\nvar seekForwardCommand: MPRemoteCommand\nThe command object for seeking forward through a single media item.\nvar skipForwardCommand: MPSkipIntervalCommand\nThe command object for playing a future point in a media item.\nvar changePlaybackPositionCommand: MPChangePlaybackPositionCommand\nThe command object for changing the playback position in a media item."
  },
  {
    "title": "ratingCommand",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpremotecommandcenter/1618986-ratingcommand",
    "html": "Discussion\n\nUse the object in this property to register your app’s handler for rating the current track. In your handler, apply the specified rating to the track. You can disable the command if your app does not support it.\n\nSee Also\nRating a media item\nvar likeCommand: MPFeedbackCommand\nThe command object for indicating that a user likes what is currently playing.\nvar dislikeCommand: MPFeedbackCommand\nThe command object for indicating that a user dislikes what is currently playing."
  },
  {
    "title": "skipForwardCommand",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpremotecommandcenter/1618990-skipforwardcommand",
    "html": "Discussion\n\nUse the object in this property to register your app’s handler for jumping to a future point in the current track. In your handler, skip forward by the amount specified in the event’s interval property. You can disable the command if your app does not support it.\n\nSee Also\nNavigating a track’s contents\nvar changePlaybackRateCommand: MPChangePlaybackRateCommand\nThe command object for changing the playback rate of the current media item.\nvar seekBackwardCommand: MPRemoteCommand\nThe command object for seeking backward through a single media item.\nvar seekForwardCommand: MPRemoteCommand\nThe command object for seeking forward through a single media item.\nvar skipBackwardCommand: MPSkipIntervalCommand\nThe command object for playing a previous point in a media item.\nvar changePlaybackPositionCommand: MPChangePlaybackPositionCommand\nThe command object for changing the playback position in a media item."
  },
  {
    "title": "changePlaybackPositionCommand",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpremotecommandcenter/1618997-changeplaybackpositioncommand",
    "html": "Discussion\n\nUse the object in this property to register your app’s handler for changing the playback position for the playlist. In your handler, change the playback position to the new value. You can disable the command if your app does not support it.\n\nSee Also\nNavigating a track’s contents\nvar changePlaybackRateCommand: MPChangePlaybackRateCommand\nThe command object for changing the playback rate of the current media item.\nvar seekBackwardCommand: MPRemoteCommand\nThe command object for seeking backward through a single media item.\nvar seekForwardCommand: MPRemoteCommand\nThe command object for seeking forward through a single media item.\nvar skipBackwardCommand: MPSkipIntervalCommand\nThe command object for playing a previous point in a media item.\nvar skipForwardCommand: MPSkipIntervalCommand\nThe command object for playing a future point in a media item."
  },
  {
    "title": "likeCommand",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpremotecommandcenter/1618998-likecommand",
    "html": "Discussion\n\nUse the object in this property to register your app’s handler for liking an item. Use your handler to register the user’s preference for a track, artist, or whatever is appropriate for your app. You can disable the command if your app does not support it.\n\nIn addition to registering a handler, you can use the command object to provide a localized string to communicate what is being liked to the user.\n\nSee Also\nRating a media item\nvar ratingCommand: MPRatingCommand\nThe command object for rating a media item.\nvar dislikeCommand: MPFeedbackCommand\nThe command object for indicating that a user dislikes what is currently playing."
  },
  {
    "title": "bookmarkCommand",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpremotecommandcenter/1619002-bookmarkcommand",
    "html": "Discussion\n\nUse the object in this property to register your app’s handler for bookmarking the current track. In your handler, add the track to the user’s list of bookmarks. You can disable the command if your app does not support it.\n\nIn addition to registering a handler, you can use the command object to provide a localized string to communicate what is being bookmarked to the user."
  },
  {
    "title": "MPShuffleType.items",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpshuffletype/items",
    "html": "See Also\nShuffle types\ncase off\nNothing is shuffled during playback.\ncase collections\nCollections of items are shuffled during playback."
  },
  {
    "title": "MPChangeLanguageOptionSetting",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpchangelanguageoptionsetting",
    "html": "Topics\nLanguage option settings\ncase none\nNo language option change is to be made.\ncase nowPlayingItemOnly\nThe language option change is applied to the now playing item only.\ncase permanent\nThe language option change is applied to all future playback items.\nRelationships\nConforms To\nSendable\nSee Also\nChanging the language option\nvar languageOption: MPNowPlayingInfoLanguageOption\nThe requested language option to change.\nvar setting: MPChangeLanguageOptionSetting\nThe extent of the language setting change."
  },
  {
    "title": "setting",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpchangelanguageoptioncommandevent/1649697-setting",
    "html": "See Also\nChanging the language option\nvar languageOption: MPNowPlayingInfoLanguageOption\nThe requested language option to change.\nenum MPChangeLanguageOptionSetting\nThe states that determine when language option changes take effect."
  },
  {
    "title": "languageOption",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpchangelanguageoptioncommandevent/1616769-languageoption",
    "html": "Discussion\n\nThe supplied language option may be the Automatic Legible Language Option, which requests the best legible language based on the user's preferences. See isAutomaticLegibleLanguageOption().\n\nSee Also\nChanging the language option\nvar setting: MPChangeLanguageOptionSetting\nThe extent of the language setting change.\nenum MPChangeLanguageOptionSetting\nThe states that determine when language option changes take effect."
  },
  {
    "title": "playbackRate",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpchangeplaybackratecommandevent/1616782-playbackrate",
    "html": "Discussion\n\nThe playbackRate property is equal to a value stored in the supportedPlaybackRates array."
  },
  {
    "title": "MPShuffleType.off",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpshuffletype/off",
    "html": "See Also\nShuffle types\ncase items\nIndividual items are shuffled during playback.\ncase collections\nCollections of items are shuffled during playback."
  },
  {
    "title": "MPMovieSourceType.unknown",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmoviesourcetype/unknown",
    "html": "Discussion\n\nThe movie type is not yet known."
  },
  {
    "title": "MPMoviePlayerThumbnailErrorKey",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmovieplayerthumbnailerrorkey",
    "html": "Discussion\n\nThe value of this key is an NSError object identifying the error that occurred, if any."
  },
  {
    "title": "MPSeekCommandEventType.endSeeking",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpseekcommandeventtype/endseeking",
    "html": "See Also\nEvent types\ncase beginSeeking\nIndicates the external media player began seeking."
  },
  {
    "title": "initWithMediaTypes:",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmediapickercontroller/1614663-initwithmediatypes",
    "html": "Parameters\nmediaTypes\n\nA set representing the media types for the media item picker. See the MPMediaType enumeration.\n\nReturn Value\n\nA new media item picker.\n\nSee Also\nInitializing a media item picker\ninit\nInitializes a media item picker for all media types."
  },
  {
    "title": "MPSeekCommandEventType.beginSeeking",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpseekcommandeventtype/beginseeking",
    "html": "See Also\nEvent types\ncase endSeeking\nIndicates the external media player stopped seeking."
  },
  {
    "title": "unknown",
    "url": "https://developer.apple.com/documentation/mediaplayer/mperror/2335089-unknown",
    "html": "See Also\nError code constants\nstatic var cancelled: MPError.Code\nThe system cancels the requested operation before it completes.\nstatic var cloudServiceCapabilityMissing: MPError.Code\nThe operation can’t complete because iCloud services aren’t in an enabled state.\nstatic var networkConnectionFailed: MPError.Code\nThe operation fails because the device can’t connect to the network.\nstatic var notFound: MPError.Code\nThe operation fails because the system can’t find the requested identifier in the current storefront.\nstatic var notSupported: MPError.Code\nThe requested operation fails because the system doesn’t support it.\nstatic var permissionDenied: MPError.Code\nThe operation can’t complete because the user doesn’t have permission for the request.\nstatic var requestTimedOut: MPError.Code\nThe requested operation times out."
  },
  {
    "title": "contentLimitsEnforced",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpplayablecontentmanagercontext/1623570-contentlimitsenforced",
    "html": "See Also\nInspecting content manager properties\nvar endpointAvailable: Bool\nReturns a Boolean that indicates whether the content server is available.\nDeprecated\nvar enforcedContentItemsCount: Int\nReturns the number of content items to display during content limiting.\nDeprecated\nvar enforcedContentTreeDepth: Int\nThe maximum depth of the navigation hierarchy allowed by the content server.\nDeprecated\nvar contentLimitsEnabled: Bool\nA Boolean value that indicates whether the content server enables content limits.\nDeprecated"
  },
  {
    "title": "timestamp",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpremotecommandevent/1616784-timestamp",
    "html": "See Also\nRetrieving command information\nvar command: MPRemoteCommand\nThe command that sent the event."
  },
  {
    "title": "enableLanguageOptionCommand",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpremotecommandcenter/1618980-enablelanguageoptioncommand",
    "html": "Discussion\n\nUse the object in this property to register your app’s handler for enabling the language option for the media item. In your handler, change the language option to the new value. You can disable the command if your app does not support it.\n\nSee Also\nEnabling language options\nvar disableLanguageOptionCommand: MPRemoteCommand\nThe command object for disabling a language option"
  },
  {
    "title": "command",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpremotecommandevent/1616776-command",
    "html": "See Also\nRetrieving command information\nvar timestamp: TimeInterval\nThe time the event occurred."
  },
  {
    "title": "enforcedContentTreeDepth",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpplayablecontentmanagercontext/1623572-enforcedcontenttreedepth",
    "html": "Discussion\n\nExceeding the limit contained by this property causes your app to terminate.\n\nSee Also\nInspecting content manager properties\nvar contentLimitsEnforced: Bool\nA Boolean value that indicates whether the content server enforces content limits.\nDeprecated\nvar endpointAvailable: Bool\nReturns a Boolean that indicates whether the content server is available.\nDeprecated\nvar enforcedContentItemsCount: Int\nReturns the number of content items to display during content limiting.\nDeprecated\nvar contentLimitsEnabled: Bool\nA Boolean value that indicates whether the content server enables content limits.\nDeprecated"
  },
  {
    "title": "contentLimitsEnabled",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpplayablecontentmanagercontext/1623567-contentlimitsenabled",
    "html": "See Also\nInspecting content manager properties\nvar contentLimitsEnforced: Bool\nA Boolean value that indicates whether the content server enforces content limits.\nDeprecated\nvar endpointAvailable: Bool\nReturns a Boolean that indicates whether the content server is available.\nDeprecated\nvar enforcedContentItemsCount: Int\nReturns the number of content items to display during content limiting.\nDeprecated\nvar enforcedContentTreeDepth: Int\nThe maximum depth of the navigation hierarchy allowed by the content server.\nDeprecated"
  },
  {
    "title": "init(contentURL:)",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmovieplayerviewcontroller/1622348-init",
    "html": "Parameters\ncontentURL\n\nThe URL that points to the content to be played.\n\nReturn Value\n\nA movie player view controller initialized with the specified URL.\n\nSee Also\nNew methods\nvar moviePlayer: MPMoviePlayerController!\nThe movie player controller object used to present the movie.\nDeprecated"
  },
  {
    "title": "video",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmoviemediatypemask/1620863-video",
    "html": "Discussion\n\nThe movie file contains video media."
  },
  {
    "title": "audio",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmoviemediatypemask/1620867-audio",
    "html": "Discussion\n\nThe movie file contains audio media."
  },
  {
    "title": "playable",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmovieloadstate/1620892-playable",
    "html": "Discussion\n\nThe buffer has enough data that playback can begin, but it may run out of data before playback finishes."
  },
  {
    "title": "numberOfServerAddressChanges",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmovieaccesslogevent/1620801-numberofserveraddresschanges",
    "html": "See Also\nMovie access log event properties\nvar numberOfSegmentsDownloaded: Int\nA count of media segments downloaded from the web server to your app.\nDeprecated\nvar playbackStartDate: Date!\nThe timestamp for when playback began for the movie log access event.\nDeprecated\nvar uri: String!\nThe URI of the playback item.\nDeprecated\nvar serverAddress: String!\nThe IPv4 or IPv6 address of the web server that was the source of the last delivered media segment.\nDeprecated\nvar playbackSessionID: String!\nA GUID that identifies the playback session to use in HTTP requests.\nDeprecated\nvar playbackStartOffset: TimeInterval\nAn offset into the playlist where the last uninterrupted period of playback began, in seconds.\nDeprecated\nvar segmentsDownloadedDuration: TimeInterval\nThe accumulated duration of the media downloaded, in seconds.\nDeprecated\nvar durationWatched: TimeInterval\nThe accumulated duration of the media played, in seconds.\nDeprecated\nvar numberOfStalls: Int\nThe total number of playback stalls encountered.\nDeprecated\nvar numberOfBytesTransferred: Int64\nThe accumulated number of bytes transferred.\nDeprecated\nvar observedBitrate: Double\nThe empirical throughput across all media downloaded for the movie player, in bits per second.\nDeprecated\nvar indicatedBitrate: Double\nThe throughput required to play the stream, as advertised by the web server, in bits per second.\nDeprecated\nvar numberOfDroppedVideoFrames: Int\nThe total number of dropped video frames.\nDeprecated"
  },
  {
    "title": "MPMoviePlayerTimedMetadataUserInfoKey",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmovieplayertimedmetadatauserinfokey",
    "html": "See Also\nNotifications\nstatic let MPMoviePlayerTimedMetadataUpdated: NSNotification.Name\nPosted when new timed metadata arrives.\nDeprecated"
  },
  {
    "title": "stalled",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmovieloadstate/1620939-stalled",
    "html": "Discussion\n\nThe buffering of data has stalled. If started now, playback may pause automatically if the player runs out of buffered data."
  },
  {
    "title": "playthroughOK",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmovieloadstate/1620865-playthroughok",
    "html": "Discussion\n\nEnough data has been buffered for playback to continue uninterrupted."
  },
  {
    "title": "playbackSessionID",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmovieaccesslogevent/1620926-playbacksessionid",
    "html": "See Also\nMovie access log event properties\nvar numberOfSegmentsDownloaded: Int\nA count of media segments downloaded from the web server to your app.\nDeprecated\nvar playbackStartDate: Date!\nThe timestamp for when playback began for the movie log access event.\nDeprecated\nvar uri: String!\nThe URI of the playback item.\nDeprecated\nvar serverAddress: String!\nThe IPv4 or IPv6 address of the web server that was the source of the last delivered media segment.\nDeprecated\nvar numberOfServerAddressChanges: Int\nA count of changes to the serverAddress property over the last uninterrupted period of playback.\nDeprecated\nvar playbackStartOffset: TimeInterval\nAn offset into the playlist where the last uninterrupted period of playback began, in seconds.\nDeprecated\nvar segmentsDownloadedDuration: TimeInterval\nThe accumulated duration of the media downloaded, in seconds.\nDeprecated\nvar durationWatched: TimeInterval\nThe accumulated duration of the media played, in seconds.\nDeprecated\nvar numberOfStalls: Int\nThe total number of playback stalls encountered.\nDeprecated\nvar numberOfBytesTransferred: Int64\nThe accumulated number of bytes transferred.\nDeprecated\nvar observedBitrate: Double\nThe empirical throughput across all media downloaded for the movie player, in bits per second.\nDeprecated\nvar indicatedBitrate: Double\nThe throughput required to play the stream, as advertised by the web server, in bits per second.\nDeprecated\nvar numberOfDroppedVideoFrames: Int\nThe total number of dropped video frames.\nDeprecated"
  },
  {
    "title": "playbackStartOffset",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmovieaccesslogevent/1620902-playbackstartoffset",
    "html": "Discussion\n\nIf the playback start offset is unknown, this property’s value is negative.\n\nSee Also\nMovie access log event properties\nvar numberOfSegmentsDownloaded: Int\nA count of media segments downloaded from the web server to your app.\nDeprecated\nvar playbackStartDate: Date!\nThe timestamp for when playback began for the movie log access event.\nDeprecated\nvar uri: String!\nThe URI of the playback item.\nDeprecated\nvar serverAddress: String!\nThe IPv4 or IPv6 address of the web server that was the source of the last delivered media segment.\nDeprecated\nvar numberOfServerAddressChanges: Int\nA count of changes to the serverAddress property over the last uninterrupted period of playback.\nDeprecated\nvar playbackSessionID: String!\nA GUID that identifies the playback session to use in HTTP requests.\nDeprecated\nvar segmentsDownloadedDuration: TimeInterval\nThe accumulated duration of the media downloaded, in seconds.\nDeprecated\nvar durationWatched: TimeInterval\nThe accumulated duration of the media played, in seconds.\nDeprecated\nvar numberOfStalls: Int\nThe total number of playback stalls encountered.\nDeprecated\nvar numberOfBytesTransferred: Int64\nThe accumulated number of bytes transferred.\nDeprecated\nvar observedBitrate: Double\nThe empirical throughput across all media downloaded for the movie player, in bits per second.\nDeprecated\nvar indicatedBitrate: Double\nThe throughput required to play the stream, as advertised by the web server, in bits per second.\nDeprecated\nvar numberOfDroppedVideoFrames: Int\nThe total number of dropped video frames.\nDeprecated"
  },
  {
    "title": "durationWatched",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmovieaccesslogevent/1620880-durationwatched",
    "html": "See Also\nMovie access log event properties\nvar numberOfSegmentsDownloaded: Int\nA count of media segments downloaded from the web server to your app.\nDeprecated\nvar playbackStartDate: Date!\nThe timestamp for when playback began for the movie log access event.\nDeprecated\nvar uri: String!\nThe URI of the playback item.\nDeprecated\nvar serverAddress: String!\nThe IPv4 or IPv6 address of the web server that was the source of the last delivered media segment.\nDeprecated\nvar numberOfServerAddressChanges: Int\nA count of changes to the serverAddress property over the last uninterrupted period of playback.\nDeprecated\nvar playbackSessionID: String!\nA GUID that identifies the playback session to use in HTTP requests.\nDeprecated\nvar playbackStartOffset: TimeInterval\nAn offset into the playlist where the last uninterrupted period of playback began, in seconds.\nDeprecated\nvar segmentsDownloadedDuration: TimeInterval\nThe accumulated duration of the media downloaded, in seconds.\nDeprecated\nvar numberOfStalls: Int\nThe total number of playback stalls encountered.\nDeprecated\nvar numberOfBytesTransferred: Int64\nThe accumulated number of bytes transferred.\nDeprecated\nvar observedBitrate: Double\nThe empirical throughput across all media downloaded for the movie player, in bits per second.\nDeprecated\nvar indicatedBitrate: Double\nThe throughput required to play the stream, as advertised by the web server, in bits per second.\nDeprecated\nvar numberOfDroppedVideoFrames: Int\nThe total number of dropped video frames.\nDeprecated"
  },
  {
    "title": "isFullscreen",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmovieplayercontroller/1620875-isfullscreen",
    "html": "Discussion\n\nThe default value of this property is false. Changing the value of this property causes the movie player to enter or exit full-screen mode immediately. If you want to animate the transition to full-screen mode, use the setFullscreen(_:animated:) method instead.\n\nWhenever the movie player enters or exits full-screen mode, it posts appropriate notifications to reflect the change. For example, upon entering full-screen mode, it posts MPMoviePlayerWillEnterFullscreen and MPMoviePlayerDidEnterFullscreen notifications. Upon exiting from full-screen mode, it posts MPMoviePlayerWillExitFullscreen and MPMoviePlayerDidExitFullscreen notifications.\n\nThe value of this property may also change as a result of the user interacting with the movie player controls.\n\nSee Also\nAccessing movie properties\nvar contentURL: URL!\nThe URL that points to the movie file.\nDeprecated\nvar movieSourceType: MPMovieSourceType\nThe playback type of the movie.\nDeprecated\nvar movieMediaTypes: MPMovieMediaTypeMask\nThe types of media available in the movie.\nDeprecated\nvar allowsAirPlay: Bool\nSpecifies whether the movie player allows AirPlay movie playback.\nDeprecated\nvar isAirPlayVideoActive: Bool\nIndicates whether the movie player is currently playing video via AirPlay.\nDeprecated\nvar naturalSize: CGSize\nThe width and height of the movie frame.\nDeprecated\nfunc setFullscreen(Bool, animated: Bool)\nCauses the movie player to enter or exit full-screen mode.\nDeprecated\nvar scalingMode: MPMovieScalingMode\nThe scaling mode to use when displaying the movie.\nDeprecated\nvar controlStyle: MPMovieControlStyle\nThe style of the playback controls.\nDeprecated\nvar useApplicationAudioSession: Bool\nA Boolean value that indicates whether the movie player should use the app’s audio session.\nDeprecated"
  },
  {
    "title": "events",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmovieaccesslog/1620820-events",
    "html": "Discussion\n\nAn ordered collection of MPMovieAccessLogEvent instances that represent the chronological sequence of events in the movie access log.\n\nSee Also\nMovie access log properties\nvar extendedLogData: Data!\nA textual version of the web server access log for the associated movie player.\nDeprecated\nvar extendedLogDataStringEncoding: UInt\nThe string encoding for the extendedLogData property.\nDeprecated"
  },
  {
    "title": "numberOfStalls",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmovieaccesslogevent/1620925-numberofstalls",
    "html": "Discussion\n\nIf the number of playback stalls is unknown, this property’s value is negative.\n\nSee Also\nMovie access log event properties\nvar numberOfSegmentsDownloaded: Int\nA count of media segments downloaded from the web server to your app.\nDeprecated\nvar playbackStartDate: Date!\nThe timestamp for when playback began for the movie log access event.\nDeprecated\nvar uri: String!\nThe URI of the playback item.\nDeprecated\nvar serverAddress: String!\nThe IPv4 or IPv6 address of the web server that was the source of the last delivered media segment.\nDeprecated\nvar numberOfServerAddressChanges: Int\nA count of changes to the serverAddress property over the last uninterrupted period of playback.\nDeprecated\nvar playbackSessionID: String!\nA GUID that identifies the playback session to use in HTTP requests.\nDeprecated\nvar playbackStartOffset: TimeInterval\nAn offset into the playlist where the last uninterrupted period of playback began, in seconds.\nDeprecated\nvar segmentsDownloadedDuration: TimeInterval\nThe accumulated duration of the media downloaded, in seconds.\nDeprecated\nvar durationWatched: TimeInterval\nThe accumulated duration of the media played, in seconds.\nDeprecated\nvar numberOfBytesTransferred: Int64\nThe accumulated number of bytes transferred.\nDeprecated\nvar observedBitrate: Double\nThe empirical throughput across all media downloaded for the movie player, in bits per second.\nDeprecated\nvar indicatedBitrate: Double\nThe throughput required to play the stream, as advertised by the web server, in bits per second.\nDeprecated\nvar numberOfDroppedVideoFrames: Int\nThe total number of dropped video frames.\nDeprecated"
  },
  {
    "title": "extendedLogData",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmovieaccesslog/1620870-extendedlogdata",
    "html": "Discussion\n\nThe web server access log in a textual format that conforms to the W3C Extended Log File Format for web server log files. For more information, see http://www.w3.org/pub/WWW/TR/WD-logfile.html.\n\nSee Also\nMovie access log properties\nvar extendedLogDataStringEncoding: UInt\nThe string encoding for the extendedLogData property.\nDeprecated\nvar events: [Any]!\nThe events in the movie access log.\nDeprecated"
  },
  {
    "title": "extendedLogData",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmovieerrorlog/1620797-extendedlogdata",
    "html": "Discussion\n\nThe web server error log in a textual format that conforms to the W3C Extended Log File Format for web server log files.\n\nSee Also\nMovie error log properties\nvar extendedLogDataStringEncoding: UInt\nThe string encoding for the extended log data property.\nDeprecated\nvar events: [Any]!\nThe events in the movie error log.\nDeprecated"
  },
  {
    "title": "extendedLogDataStringEncoding",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmovieaccesslog/1620814-extendedlogdatastringencoding",
    "html": "Discussion\n\nFor possible string encodings, see String_Encodings.\n\nSee Also\nMovie access log properties\nvar extendedLogData: Data!\nA textual version of the web server access log for the associated movie player.\nDeprecated\nvar events: [Any]!\nThe events in the movie access log.\nDeprecated"
  },
  {
    "title": "MPMovieFinishReason.userExited",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmoviefinishreason/userexited",
    "html": "Discussion\n\nThe user stopped playback."
  },
  {
    "title": "isEnabled",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpremotecommand/1622908-isenabled",
    "html": "Discussion\n\nWhen set to true, the designated element is enabled so users can interact with it. When set to false, events for this command are not sent to your app, and the user interface may be changed to reflect this when your app is the Now Playing app. The default value is true."
  },
  {
    "title": "addTarget(_:action:)",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpremotecommand/1622895-addtarget",
    "html": "Parameters\ntarget\n\nThe object to receive action messages sent by the receiver when the represented remote command is triggered. The value must not be nil.\n\naction\n\nA selector identifying the method on the target to be called. The value must not be NULL.\n\nThe method to be called must have the following signature:\n\n- (MPRemoteCommandHandlerStatus) handleCommand: (MPRemoteCommandEvent*) event;\n\nDiscussion\n\nCall the addTarget(_:action:) method multiple times to specify multiple target-action pairs. If a specific target-action pair has already been added, the request is ignored. You can add multiple actions for a single target by calling this method multiple times using the same target, but different actions.\n\nThe command object does not keep a strong reference to the target; you should remove the target before the target is deallocated.\n\nSee Also\nHandling events\nfunc addTarget(handler: (MPRemoteCommandEvent) -> MPRemoteCommandHandlerStatus) -> Any\nAdds a block to be called when an event is received.\nfunc removeTarget(Any?)\nRemoves a target from the remote command object.\nfunc removeTarget(Any, action: Selector?)\nRemoves a target and action from a remote command object.\nenum MPRemoteCommandHandlerStatus\nConstants indicating the status of a command."
  },
  {
    "title": "changeRepeatModeCommand",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpremotecommandcenter/1649694-changerepeatmodecommand",
    "html": "Discussion\n\nUse the object in this property to register your app’s handler for changing the repeat mode for the playlist. In your handler, change the repeat mode to the new value. You can disable the command if your app does not support it.\n\nSee Also\nNavigating between tracks\nvar nextTrackCommand: MPRemoteCommand\nThe command object for selecting the next track.\nvar previousTrackCommand: MPRemoteCommand\nThe command object for selecting the previous track.\nvar changeShuffleModeCommand: MPChangeShuffleModeCommand\nThe command object for changing the shuffle mode."
  },
  {
    "title": "previousTrackCommand",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpremotecommandcenter/1618978-previoustrackcommand",
    "html": "Discussion\n\nUse the object in this property to register your app’s handler for selecting the previous track. In your handler, select the media item that precedes the current media item. You can disable the command if your app does not support it.\n\nSee Also\nNavigating between tracks\nvar nextTrackCommand: MPRemoteCommand\nThe command object for selecting the next track.\nvar changeRepeatModeCommand: MPChangeRepeatModeCommand\nThe command object for changing the repeat mode.\nvar changeShuffleModeCommand: MPChangeShuffleModeCommand\nThe command object for changing the shuffle mode."
  },
  {
    "title": "changeShuffleModeCommand",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpremotecommandcenter/1649692-changeshufflemodecommand",
    "html": "Discussion\n\nUse the object in this property to register your app’s handler for changing the shuffle mode for the playlist. In your handler, change the shuffle mode to the new value. You can disable the command if your app does not support it.\n\nSee Also\nNavigating between tracks\nvar nextTrackCommand: MPRemoteCommand\nThe command object for selecting the next track.\nvar previousTrackCommand: MPRemoteCommand\nThe command object for selecting the previous track.\nvar changeRepeatModeCommand: MPChangeRepeatModeCommand\nThe command object for changing the repeat mode."
  },
  {
    "title": "seekBackwardCommand",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpremotecommandcenter/1618982-seekbackwardcommand",
    "html": "Discussion\n\nUse the object in this property to register your app’s handler for seeking backward in the current track. In your handler, begin seeking backward through the current media item. You can disable the command if your app does not support it.\n\nSee Also\nNavigating a track’s contents\nvar changePlaybackRateCommand: MPChangePlaybackRateCommand\nThe command object for changing the playback rate of the current media item.\nvar seekForwardCommand: MPRemoteCommand\nThe command object for seeking forward through a single media item.\nvar skipBackwardCommand: MPSkipIntervalCommand\nThe command object for playing a previous point in a media item.\nvar skipForwardCommand: MPSkipIntervalCommand\nThe command object for playing a future point in a media item.\nvar changePlaybackPositionCommand: MPChangePlaybackPositionCommand\nThe command object for changing the playback position in a media item."
  },
  {
    "title": "changePlaybackRateCommand",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpremotecommandcenter/1618991-changeplaybackratecommand",
    "html": "Discussion\n\nUse the object in this property to register your app’s handler for changing the playback rate of the current track. In your handler, change the playback rate to the new value. The current playback rate cannot be negative. You can disable the command if your app does not support it.\n\nSee Also\nNavigating a track’s contents\nvar seekBackwardCommand: MPRemoteCommand\nThe command object for seeking backward through a single media item.\nvar seekForwardCommand: MPRemoteCommand\nThe command object for seeking forward through a single media item.\nvar skipBackwardCommand: MPSkipIntervalCommand\nThe command object for playing a previous point in a media item.\nvar skipForwardCommand: MPSkipIntervalCommand\nThe command object for playing a future point in a media item.\nvar changePlaybackPositionCommand: MPChangePlaybackPositionCommand\nThe command object for changing the playback position in a media item."
  },
  {
    "title": "dislikeCommand",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpremotecommandcenter/1618995-dislikecommand",
    "html": "Discussion\n\nUse the object in this property to register your app’s handler for disliking the current track. Use your handler to register the user’s dislike for a track, artist, or whatever is appropriate for your app. You can disable the command if your app does not support it.\n\nIn addition to registering a handler, you can use the command object to provide a localized string to communicate what is being liked to the user.\n\nSee Also\nRating a media item\nvar ratingCommand: MPRatingCommand\nThe command object for rating a media item.\nvar likeCommand: MPFeedbackCommand\nThe command object for indicating that a user likes what is currently playing."
  },
  {
    "title": "nowPlayingSessionDidChangeCanBecomeActive(_:)",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpnowplayingsessiondelegate/3547934-nowplayingsessiondidchangecanbec",
    "html": "Parameters\nnowPlayingSession\n\nThe Now Playing session that changed.\n\nSee Also\nResponding to state changes\nfunc nowPlayingSessionDidChangeActive(MPNowPlayingSession)\nTells the delegate that the session changed its active status.\nRelated Documentation\nvar canBecomeActive: Bool\nA Boolean value that indicates whether the session can become the app’s active Now Playing session."
  },
  {
    "title": "interval",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpskipintervalcommandevent/1616767-interval",
    "html": "Discussion\n\nThe interval property provides the number of seconds to be skipped when a skip command is executed."
  },
  {
    "title": "MPMediaPlaylistPropertyPlaylistAttributes",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmediaplaylistpropertyplaylistattributes",
    "html": "Discussion\n\nValue is an NSNumber object containing an NSInteger data type. Fields in the NSInteger identify the attributes of the playlist. A playlist may have any combination of attributes described in MPMediaPlaylistAttribute. Can be used to build a media property predicate as described in MPMediaQuery.\n\nSee Also\nProperty keys\nlet MPMediaPlaylistPropertyAuthorDisplayName: String\nApp defined name for the playlist.\nlet MPMediaPlaylistPropertyName: String\nThe name of the playlist.\nlet MPMediaPlaylistPropertyDescriptionText: String\nDescriptive text for the playlist.\nlet MPMediaPlaylistPropertyPersistentID: String\nThe persistent identifier for the playlist.\nlet MPMediaPlaylistPropertyCloudGlobalID: String\nThe cloud identifier for the playlist.\nlet MPMediaPlaylistPropertySeedItems: String\nThe items seeded to generate the playlist; applies only to Genius playlists."
  },
  {
    "title": "MPMovieScalingMode",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmoviescalingmode",
    "html": "Topics\nConstants\ncase none\nDo not scale the movie.\ncase aspectFit\nScale the movie uniformly until one dimension fits the visible bounds of the view exactly. In the other dimension, the region between the edge of the movie and the edge of the view is filled with a black bar. The aspect ratio of the movie is preserved.\ncase aspectFill\nScale the movie uniformly until the movie fills the visible bounds of the view. Content at the edges of the larger of the two dimensions is clipped so that the other dimension fits the view exactly. The aspect ratio of the movie is preserved.\ncase fill\nScale the movie until both dimensions fit the visible bounds of the view exactly. The aspect ratio of the movie is not preserved.\nRelationships\nConforms To\nSendable"
  },
  {
    "title": "MPMovieControlStyle",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmoviecontrolstyle",
    "html": "Topics\nConstants\ncase none\ncase embedded\ncase fullscreen\nstatic var `default`: MPMovieControlStyle\nRelationships\nConforms To\nSendable"
  },
  {
    "title": "MPMovieTimeOption",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmovietimeoption",
    "html": "Topics\nConstants\ncase nearestKeyFrame\ncase exact\nRelationships\nConforms To\nSendable"
  },
  {
    "title": "MPVolumeSettingsAlertHide()",
    "url": "https://developer.apple.com/documentation/mediaplayer/1623909-mpvolumesettingsalerthide",
    "html": "See Also\nGlobal volume setting methods\nfunc MPVolumeSettingsAlertShow()\nDisplays an alert panel for controlling the system volume.\nDeprecated\nfunc MPVolumeSettingsAlertIsVisible() -> Bool\nReturns a Boolean value indicating whether the volume alert panel is currently visible.\nDeprecated"
  },
  {
    "title": "dataSource",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpplayablecontentmanager/1614805-datasource",
    "html": "Discussion\n\nThis property ensures support for random access of media items through the MPPlayableContentDataSource protocol, whose methods are callable at any point during the app’s lifetime. Set this property as soon as the data is available.\n\nSee Also\nProviding playable content\nprotocol MPPlayableContentDataSource\nThe data source providing media metadata to external media players so they can build user interfaces displaying your app’s content.\nDeprecated"
  },
  {
    "title": "MPError.Code.permissionDenied",
    "url": "https://developer.apple.com/documentation/mediaplayer/mperror/code/permissiondenied",
    "html": "See Also\nError codes\ncase cancelled\nAn error that indicates the system canceled the requested operation before it completed.\ncase cloudServiceCapabilityMissing\nAn error that indicates the operation can’t complete because iCloud services aren’t enabled.\ncase networkConnectionFailed\nAn error that indicates the operation failed because the device can’t connect to the network.\ncase notFound\nAn error that indicates the operation failed because the system can’t find the requested identifier in the current storefront.\ncase notSupported\nAn error that indicates the requested operation failed because the system doesn’t support it.\ncase requestTimedOut\nAn error that indicates the requested operation timed out.\ncase unknown\nAn error that indicates the requested operation can’t complete due to an unknown error."
  },
  {
    "title": "extendedLogDataStringEncoding",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmovieerrorlog/1620806-extendedlogdatastringencoding",
    "html": "See Also\nMovie error log properties\nvar extendedLogData: Data!\nA textual version of the web server error log.\nDeprecated\nvar events: [Any]!\nThe events in the movie error log.\nDeprecated"
  },
  {
    "title": "MPError.Code.unknown",
    "url": "https://developer.apple.com/documentation/mediaplayer/mperror/code/unknown",
    "html": "See Also\nError codes\ncase cancelled\nAn error that indicates the system canceled the requested operation before it completed.\ncase cloudServiceCapabilityMissing\nAn error that indicates the operation can’t complete because iCloud services aren’t enabled.\ncase networkConnectionFailed\nAn error that indicates the operation failed because the device can’t connect to the network.\ncase notFound\nAn error that indicates the operation failed because the system can’t find the requested identifier in the current storefront.\ncase notSupported\nAn error that indicates the requested operation failed because the system doesn’t support it.\ncase permissionDenied\nAn error that indicates the operation can’t complete because the user doesn’t have permission to execute the operation.\ncase requestTimedOut\nAn error that indicates the requested operation timed out."
  },
  {
    "title": "MPError.Code.requestTimedOut",
    "url": "https://developer.apple.com/documentation/mediaplayer/mperror/code/requesttimedout",
    "html": "See Also\nError codes\ncase cancelled\nAn error that indicates the system canceled the requested operation before it completed.\ncase cloudServiceCapabilityMissing\nAn error that indicates the operation can’t complete because iCloud services aren’t enabled.\ncase networkConnectionFailed\nAn error that indicates the operation failed because the device can’t connect to the network.\ncase notFound\nAn error that indicates the operation failed because the system can’t find the requested identifier in the current storefront.\ncase notSupported\nAn error that indicates the requested operation failed because the system doesn’t support it.\ncase permissionDenied\nAn error that indicates the operation can’t complete because the user doesn’t have permission to execute the operation.\ncase unknown\nAn error that indicates the requested operation can’t complete due to an unknown error."
  },
  {
    "title": "cancelled",
    "url": "https://developer.apple.com/documentation/mediaplayer/mperror/2582436-cancelled",
    "html": "See Also\nError code constants\nstatic var cloudServiceCapabilityMissing: MPError.Code\nThe operation can’t complete because iCloud services aren’t in an enabled state.\nstatic var unknown: MPError.Code\nThe requested operation can’t complete due to an unknown error.\nstatic var networkConnectionFailed: MPError.Code\nThe operation fails because the device can’t connect to the network.\nstatic var notFound: MPError.Code\nThe operation fails because the system can’t find the requested identifier in the current storefront.\nstatic var notSupported: MPError.Code\nThe requested operation fails because the system doesn’t support it.\nstatic var permissionDenied: MPError.Code\nThe operation can’t complete because the user doesn’t have permission for the request.\nstatic var requestTimedOut: MPError.Code\nThe requested operation times out."
  },
  {
    "title": "cloudServiceCapabilityMissing",
    "url": "https://developer.apple.com/documentation/mediaplayer/mperror/2335085-cloudservicecapabilitymissing",
    "html": "See Also\nError code constants\nstatic var cancelled: MPError.Code\nThe system cancels the requested operation before it completes.\nstatic var unknown: MPError.Code\nThe requested operation can’t complete due to an unknown error.\nstatic var networkConnectionFailed: MPError.Code\nThe operation fails because the device can’t connect to the network.\nstatic var notFound: MPError.Code\nThe operation fails because the system can’t find the requested identifier in the current storefront.\nstatic var notSupported: MPError.Code\nThe requested operation fails because the system doesn’t support it.\nstatic var permissionDenied: MPError.Code\nThe operation can’t complete because the user doesn’t have permission for the request.\nstatic var requestTimedOut: MPError.Code\nThe requested operation times out."
  },
  {
    "title": "notFound",
    "url": "https://developer.apple.com/documentation/mediaplayer/mperror/2335090-notfound",
    "html": "See Also\nError code constants\nstatic var cancelled: MPError.Code\nThe system cancels the requested operation before it completes.\nstatic var cloudServiceCapabilityMissing: MPError.Code\nThe operation can’t complete because iCloud services aren’t in an enabled state.\nstatic var unknown: MPError.Code\nThe requested operation can’t complete due to an unknown error.\nstatic var networkConnectionFailed: MPError.Code\nThe operation fails because the device can’t connect to the network.\nstatic var notSupported: MPError.Code\nThe requested operation fails because the system doesn’t support it.\nstatic var permissionDenied: MPError.Code\nThe operation can’t complete because the user doesn’t have permission for the request.\nstatic var requestTimedOut: MPError.Code\nThe requested operation times out."
  },
  {
    "title": "networkConnectionFailed",
    "url": "https://developer.apple.com/documentation/mediaplayer/mperror/2335086-networkconnectionfailed",
    "html": "See Also\nError code constants\nstatic var cancelled: MPError.Code\nThe system cancels the requested operation before it completes.\nstatic var cloudServiceCapabilityMissing: MPError.Code\nThe operation can’t complete because iCloud services aren’t in an enabled state.\nstatic var unknown: MPError.Code\nThe requested operation can’t complete due to an unknown error.\nstatic var notFound: MPError.Code\nThe operation fails because the system can’t find the requested identifier in the current storefront.\nstatic var notSupported: MPError.Code\nThe requested operation fails because the system doesn’t support it.\nstatic var permissionDenied: MPError.Code\nThe operation can’t complete because the user doesn’t have permission for the request.\nstatic var requestTimedOut: MPError.Code\nThe requested operation times out."
  },
  {
    "title": "notSupported",
    "url": "https://developer.apple.com/documentation/mediaplayer/mperror/2335087-notsupported",
    "html": "Discussion\n\nAn example of this is trying to add a media item to a smart playlist.\n\nSee Also\nError code constants\nstatic var cancelled: MPError.Code\nThe system cancels the requested operation before it completes.\nstatic var cloudServiceCapabilityMissing: MPError.Code\nThe operation can’t complete because iCloud services aren’t in an enabled state.\nstatic var unknown: MPError.Code\nThe requested operation can’t complete due to an unknown error.\nstatic var networkConnectionFailed: MPError.Code\nThe operation fails because the device can’t connect to the network.\nstatic var notFound: MPError.Code\nThe operation fails because the system can’t find the requested identifier in the current storefront.\nstatic var permissionDenied: MPError.Code\nThe operation can’t complete because the user doesn’t have permission for the request.\nstatic var requestTimedOut: MPError.Code\nThe requested operation times out."
  },
  {
    "title": "disableLanguageOptionCommand",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpremotecommandcenter/1618988-disablelanguageoptioncommand",
    "html": "Discussion\n\nUse the object in this property to register your app’s handler for disabling the language option for the media item. In your handler, change the language option to the new value. You can disable the command if your app does not support it.\n\nSee Also\nEnabling language options\nvar enableLanguageOptionCommand: MPRemoteCommand\nThe command object for enabling a language option."
  },
  {
    "title": "requestTimedOut",
    "url": "https://developer.apple.com/documentation/mediaplayer/mperror/2806864-requesttimedout",
    "html": "See Also\nError code constants\nstatic var cancelled: MPError.Code\nThe system cancels the requested operation before it completes.\nstatic var cloudServiceCapabilityMissing: MPError.Code\nThe operation can’t complete because iCloud services aren’t in an enabled state.\nstatic var unknown: MPError.Code\nThe requested operation can’t complete due to an unknown error.\nstatic var networkConnectionFailed: MPError.Code\nThe operation fails because the device can’t connect to the network.\nstatic var notFound: MPError.Code\nThe operation fails because the system can’t find the requested identifier in the current storefront.\nstatic var notSupported: MPError.Code\nThe requested operation fails because the system doesn’t support it.\nstatic var permissionDenied: MPError.Code\nThe operation can’t complete because the user doesn’t have permission for the request."
  },
  {
    "title": "maximumRating",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpratingcommand/1622898-maximumrating",
    "html": "Discussion\n\nThe maximumRating property must be greater than the minimumRating property.\n\nSee Also\nDefining maximum and minimum ratings\nvar minimumRating: Float\nThe minimum rating for a command."
  },
  {
    "title": "keyspace",
    "url": "https://developer.apple.com/documentation/mediaplayer/mptimedmetadata/1620846-keyspace",
    "html": "See Also\nExtracting timed metadata from a stream\nvar allMetadata: [AnyHashable : Any]!\nA dictionary containing all the metadata in the object.\nDeprecated\nvar key: String!\nA key that identifies a piece of timed metadata.\nDeprecated\nvar timestamp: TimeInterval\nThe timestamp of the metadata, in the timebase of the media stream.\nDeprecated\nvar value: Any!\nThe timed metadata.\nDeprecated"
  },
  {
    "title": "allMetadata",
    "url": "https://developer.apple.com/documentation/mediaplayer/mptimedmetadata/1620856-allmetadata",
    "html": "Discussion\n\nTo retrieve metadata from the dictionary, use the keys described in Timed metadata dictionary keys.\n\nSee Also\nExtracting timed metadata from a stream\nvar key: String!\nA key that identifies a piece of timed metadata.\nDeprecated\nvar keyspace: String!\nThe namespace of the identifying key.\nDeprecated\nvar timestamp: TimeInterval\nThe timestamp of the metadata, in the timebase of the media stream.\nDeprecated\nvar value: Any!\nThe timed metadata.\nDeprecated"
  },
  {
    "title": "timestamp",
    "url": "https://developer.apple.com/documentation/mediaplayer/mptimedmetadata/1620918-timestamp",
    "html": "See Also\nExtracting timed metadata from a stream\nvar allMetadata: [AnyHashable : Any]!\nA dictionary containing all the metadata in the object.\nDeprecated\nvar key: String!\nA key that identifies a piece of timed metadata.\nDeprecated\nvar keyspace: String!\nThe namespace of the identifying key.\nDeprecated\nvar value: Any!\nThe timed metadata.\nDeprecated"
  },
  {
    "title": "Timed metadata dictionary keys",
    "url": "https://developer.apple.com/documentation/mediaplayer/mptimedmetadata/timed_metadata_dictionary_keys",
    "html": "Topics\nConstants\nlet MPMoviePlayerTimedMetadataKeyName: String\nThe name of the timed metadata key.\nDeprecated\nlet MPMoviePlayerTimedMetadataKeyInfo: String\nArbitrary information about the timed metadata.\nDeprecated\nlet MPMoviePlayerTimedMetadataKeyMIMEType: String\nThe MIME type for the timed metadata.\nDeprecated\nlet MPMoviePlayerTimedMetadataKeyDataType: String\nThe data type of the timed metadata.\nDeprecated\nlet MPMoviePlayerTimedMetadataKeyLanguageCode: String\nThe metadata language, expressed using ISO 639-2, in a string object.\nDeprecated"
  },
  {
    "title": "key",
    "url": "https://developer.apple.com/documentation/mediaplayer/mptimedmetadata/1620834-key",
    "html": "See Also\nExtracting timed metadata from a stream\nvar allMetadata: [AnyHashable : Any]!\nA dictionary containing all the metadata in the object.\nDeprecated\nvar keyspace: String!\nThe namespace of the identifying key.\nDeprecated\nvar timestamp: TimeInterval\nThe timestamp of the metadata, in the timebase of the media stream.\nDeprecated\nvar value: Any!\nThe timed metadata.\nDeprecated"
  },
  {
    "title": "value",
    "url": "https://developer.apple.com/documentation/mediaplayer/mptimedmetadata/1620866-value",
    "html": "See Also\nExtracting timed metadata from a stream\nvar allMetadata: [AnyHashable : Any]!\nA dictionary containing all the metadata in the object.\nDeprecated\nvar key: String!\nA key that identifies a piece of timed metadata.\nDeprecated\nvar keyspace: String!\nThe namespace of the identifying key.\nDeprecated\nvar timestamp: TimeInterval\nThe timestamp of the metadata, in the timebase of the media stream.\nDeprecated"
  },
  {
    "title": "enforcedContentItemsCount",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpplayablecontentmanagercontext/1623568-enforcedcontentitemscount",
    "html": "Discussion\n\nThis property returns NSIntegerMax when the content server doesn’t limit the maximum number of items.\n\nSee Also\nInspecting content manager properties\nvar contentLimitsEnforced: Bool\nA Boolean value that indicates whether the content server enforces content limits.\nDeprecated\nvar endpointAvailable: Bool\nReturns a Boolean that indicates whether the content server is available.\nDeprecated\nvar enforcedContentTreeDepth: Int\nThe maximum depth of the navigation hierarchy allowed by the content server.\nDeprecated\nvar contentLimitsEnabled: Bool\nA Boolean value that indicates whether the content server enables content limits.\nDeprecated"
  },
  {
    "title": "moviePlayer",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmovieplayerviewcontroller/1622346-movieplayer",
    "html": "Discussion\n\nThe MPMoviePlayerController object in this property is created automatically by the receiver and cannot be changed. However, you can use the object to manage the presentation and configuration of the movie playback.\n\nSee Also\nNew methods\ninit!(contentURL: URL!)\nReturns a movie player view controller initialized with the specified movie.\nDeprecated"
  },
  {
    "title": "uri",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmovieaccesslogevent/1620959-uri",
    "html": "See Also\nMovie access log event properties\nvar numberOfSegmentsDownloaded: Int\nA count of media segments downloaded from the web server to your app.\nDeprecated\nvar playbackStartDate: Date!\nThe timestamp for when playback began for the movie log access event.\nDeprecated\nvar serverAddress: String!\nThe IPv4 or IPv6 address of the web server that was the source of the last delivered media segment.\nDeprecated\nvar numberOfServerAddressChanges: Int\nA count of changes to the serverAddress property over the last uninterrupted period of playback.\nDeprecated\nvar playbackSessionID: String!\nA GUID that identifies the playback session to use in HTTP requests.\nDeprecated\nvar playbackStartOffset: TimeInterval\nAn offset into the playlist where the last uninterrupted period of playback began, in seconds.\nDeprecated\nvar segmentsDownloadedDuration: TimeInterval\nThe accumulated duration of the media downloaded, in seconds.\nDeprecated\nvar durationWatched: TimeInterval\nThe accumulated duration of the media played, in seconds.\nDeprecated\nvar numberOfStalls: Int\nThe total number of playback stalls encountered.\nDeprecated\nvar numberOfBytesTransferred: Int64\nThe accumulated number of bytes transferred.\nDeprecated\nvar observedBitrate: Double\nThe empirical throughput across all media downloaded for the movie player, in bits per second.\nDeprecated\nvar indicatedBitrate: Double\nThe throughput required to play the stream, as advertised by the web server, in bits per second.\nDeprecated\nvar numberOfDroppedVideoFrames: Int\nThe total number of dropped video frames.\nDeprecated"
  },
  {
    "title": "playbackStartDate",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmovieaccesslogevent/1620868-playbackstartdate",
    "html": "See Also\nMovie access log event properties\nvar numberOfSegmentsDownloaded: Int\nA count of media segments downloaded from the web server to your app.\nDeprecated\nvar uri: String!\nThe URI of the playback item.\nDeprecated\nvar serverAddress: String!\nThe IPv4 or IPv6 address of the web server that was the source of the last delivered media segment.\nDeprecated\nvar numberOfServerAddressChanges: Int\nA count of changes to the serverAddress property over the last uninterrupted period of playback.\nDeprecated\nvar playbackSessionID: String!\nA GUID that identifies the playback session to use in HTTP requests.\nDeprecated\nvar playbackStartOffset: TimeInterval\nAn offset into the playlist where the last uninterrupted period of playback began, in seconds.\nDeprecated\nvar segmentsDownloadedDuration: TimeInterval\nThe accumulated duration of the media downloaded, in seconds.\nDeprecated\nvar durationWatched: TimeInterval\nThe accumulated duration of the media played, in seconds.\nDeprecated\nvar numberOfStalls: Int\nThe total number of playback stalls encountered.\nDeprecated\nvar numberOfBytesTransferred: Int64\nThe accumulated number of bytes transferred.\nDeprecated\nvar observedBitrate: Double\nThe empirical throughput across all media downloaded for the movie player, in bits per second.\nDeprecated\nvar indicatedBitrate: Double\nThe throughput required to play the stream, as advertised by the web server, in bits per second.\nDeprecated\nvar numberOfDroppedVideoFrames: Int\nThe total number of dropped video frames.\nDeprecated"
  },
  {
    "title": "numberOfSegmentsDownloaded",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmovieaccesslogevent/1620937-numberofsegmentsdownloaded",
    "html": "See Also\nMovie access log event properties\nvar playbackStartDate: Date!\nThe timestamp for when playback began for the movie log access event.\nDeprecated\nvar uri: String!\nThe URI of the playback item.\nDeprecated\nvar serverAddress: String!\nThe IPv4 or IPv6 address of the web server that was the source of the last delivered media segment.\nDeprecated\nvar numberOfServerAddressChanges: Int\nA count of changes to the serverAddress property over the last uninterrupted period of playback.\nDeprecated\nvar playbackSessionID: String!\nA GUID that identifies the playback session to use in HTTP requests.\nDeprecated\nvar playbackStartOffset: TimeInterval\nAn offset into the playlist where the last uninterrupted period of playback began, in seconds.\nDeprecated\nvar segmentsDownloadedDuration: TimeInterval\nThe accumulated duration of the media downloaded, in seconds.\nDeprecated\nvar durationWatched: TimeInterval\nThe accumulated duration of the media played, in seconds.\nDeprecated\nvar numberOfStalls: Int\nThe total number of playback stalls encountered.\nDeprecated\nvar numberOfBytesTransferred: Int64\nThe accumulated number of bytes transferred.\nDeprecated\nvar observedBitrate: Double\nThe empirical throughput across all media downloaded for the movie player, in bits per second.\nDeprecated\nvar indicatedBitrate: Double\nThe throughput required to play the stream, as advertised by the web server, in bits per second.\nDeprecated\nvar numberOfDroppedVideoFrames: Int\nThe total number of dropped video frames.\nDeprecated"
  },
  {
    "title": "serverAddress",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmovieaccesslogevent/1620862-serveraddress",
    "html": "See Also\nMovie access log event properties\nvar numberOfSegmentsDownloaded: Int\nA count of media segments downloaded from the web server to your app.\nDeprecated\nvar playbackStartDate: Date!\nThe timestamp for when playback began for the movie log access event.\nDeprecated\nvar uri: String!\nThe URI of the playback item.\nDeprecated\nvar numberOfServerAddressChanges: Int\nA count of changes to the serverAddress property over the last uninterrupted period of playback.\nDeprecated\nvar playbackSessionID: String!\nA GUID that identifies the playback session to use in HTTP requests.\nDeprecated\nvar playbackStartOffset: TimeInterval\nAn offset into the playlist where the last uninterrupted period of playback began, in seconds.\nDeprecated\nvar segmentsDownloadedDuration: TimeInterval\nThe accumulated duration of the media downloaded, in seconds.\nDeprecated\nvar durationWatched: TimeInterval\nThe accumulated duration of the media played, in seconds.\nDeprecated\nvar numberOfStalls: Int\nThe total number of playback stalls encountered.\nDeprecated\nvar numberOfBytesTransferred: Int64\nThe accumulated number of bytes transferred.\nDeprecated\nvar observedBitrate: Double\nThe empirical throughput across all media downloaded for the movie player, in bits per second.\nDeprecated\nvar indicatedBitrate: Double\nThe throughput required to play the stream, as advertised by the web server, in bits per second.\nDeprecated\nvar numberOfDroppedVideoFrames: Int\nThe total number of dropped video frames.\nDeprecated"
  },
  {
    "title": "observedBitrate",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmovieaccesslogevent/1620827-observedbitrate",
    "html": "See Also\nMovie access log event properties\nvar numberOfSegmentsDownloaded: Int\nA count of media segments downloaded from the web server to your app.\nDeprecated\nvar playbackStartDate: Date!\nThe timestamp for when playback began for the movie log access event.\nDeprecated\nvar uri: String!\nThe URI of the playback item.\nDeprecated\nvar serverAddress: String!\nThe IPv4 or IPv6 address of the web server that was the source of the last delivered media segment.\nDeprecated\nvar numberOfServerAddressChanges: Int\nA count of changes to the serverAddress property over the last uninterrupted period of playback.\nDeprecated\nvar playbackSessionID: String!\nA GUID that identifies the playback session to use in HTTP requests.\nDeprecated\nvar playbackStartOffset: TimeInterval\nAn offset into the playlist where the last uninterrupted period of playback began, in seconds.\nDeprecated\nvar segmentsDownloadedDuration: TimeInterval\nThe accumulated duration of the media downloaded, in seconds.\nDeprecated\nvar durationWatched: TimeInterval\nThe accumulated duration of the media played, in seconds.\nDeprecated\nvar numberOfStalls: Int\nThe total number of playback stalls encountered.\nDeprecated\nvar numberOfBytesTransferred: Int64\nThe accumulated number of bytes transferred.\nDeprecated\nvar indicatedBitrate: Double\nThe throughput required to play the stream, as advertised by the web server, in bits per second.\nDeprecated\nvar numberOfDroppedVideoFrames: Int\nThe total number of dropped video frames.\nDeprecated"
  },
  {
    "title": "numberOfDroppedVideoFrames",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmovieaccesslogevent/1620884-numberofdroppedvideoframes",
    "html": "See Also\nMovie access log event properties\nvar numberOfSegmentsDownloaded: Int\nA count of media segments downloaded from the web server to your app.\nDeprecated\nvar playbackStartDate: Date!\nThe timestamp for when playback began for the movie log access event.\nDeprecated\nvar uri: String!\nThe URI of the playback item.\nDeprecated\nvar serverAddress: String!\nThe IPv4 or IPv6 address of the web server that was the source of the last delivered media segment.\nDeprecated\nvar numberOfServerAddressChanges: Int\nA count of changes to the serverAddress property over the last uninterrupted period of playback.\nDeprecated\nvar playbackSessionID: String!\nA GUID that identifies the playback session to use in HTTP requests.\nDeprecated\nvar playbackStartOffset: TimeInterval\nAn offset into the playlist where the last uninterrupted period of playback began, in seconds.\nDeprecated\nvar segmentsDownloadedDuration: TimeInterval\nThe accumulated duration of the media downloaded, in seconds.\nDeprecated\nvar durationWatched: TimeInterval\nThe accumulated duration of the media played, in seconds.\nDeprecated\nvar numberOfStalls: Int\nThe total number of playback stalls encountered.\nDeprecated\nvar numberOfBytesTransferred: Int64\nThe accumulated number of bytes transferred.\nDeprecated\nvar observedBitrate: Double\nThe empirical throughput across all media downloaded for the movie player, in bits per second.\nDeprecated\nvar indicatedBitrate: Double\nThe throughput required to play the stream, as advertised by the web server, in bits per second.\nDeprecated"
  },
  {
    "title": "indicatedBitrate",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmovieaccesslogevent/1620932-indicatedbitrate",
    "html": "See Also\nMovie access log event properties\nvar numberOfSegmentsDownloaded: Int\nA count of media segments downloaded from the web server to your app.\nDeprecated\nvar playbackStartDate: Date!\nThe timestamp for when playback began for the movie log access event.\nDeprecated\nvar uri: String!\nThe URI of the playback item.\nDeprecated\nvar serverAddress: String!\nThe IPv4 or IPv6 address of the web server that was the source of the last delivered media segment.\nDeprecated\nvar numberOfServerAddressChanges: Int\nA count of changes to the serverAddress property over the last uninterrupted period of playback.\nDeprecated\nvar playbackSessionID: String!\nA GUID that identifies the playback session to use in HTTP requests.\nDeprecated\nvar playbackStartOffset: TimeInterval\nAn offset into the playlist where the last uninterrupted period of playback began, in seconds.\nDeprecated\nvar segmentsDownloadedDuration: TimeInterval\nThe accumulated duration of the media downloaded, in seconds.\nDeprecated\nvar durationWatched: TimeInterval\nThe accumulated duration of the media played, in seconds.\nDeprecated\nvar numberOfStalls: Int\nThe total number of playback stalls encountered.\nDeprecated\nvar numberOfBytesTransferred: Int64\nThe accumulated number of bytes transferred.\nDeprecated\nvar observedBitrate: Double\nThe empirical throughput across all media downloaded for the movie player, in bits per second.\nDeprecated\nvar numberOfDroppedVideoFrames: Int\nThe total number of dropped video frames.\nDeprecated"
  },
  {
    "title": "numberOfBytesTransferred",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmovieaccesslogevent/1620949-numberofbytestransferred",
    "html": "Discussion\n\nIf the number of bytes transferred is unknown, this property’s value is negative.\n\nSee Also\nMovie access log event properties\nvar numberOfSegmentsDownloaded: Int\nA count of media segments downloaded from the web server to your app.\nDeprecated\nvar playbackStartDate: Date!\nThe timestamp for when playback began for the movie log access event.\nDeprecated\nvar uri: String!\nThe URI of the playback item.\nDeprecated\nvar serverAddress: String!\nThe IPv4 or IPv6 address of the web server that was the source of the last delivered media segment.\nDeprecated\nvar numberOfServerAddressChanges: Int\nA count of changes to the serverAddress property over the last uninterrupted period of playback.\nDeprecated\nvar playbackSessionID: String!\nA GUID that identifies the playback session to use in HTTP requests.\nDeprecated\nvar playbackStartOffset: TimeInterval\nAn offset into the playlist where the last uninterrupted period of playback began, in seconds.\nDeprecated\nvar segmentsDownloadedDuration: TimeInterval\nThe accumulated duration of the media downloaded, in seconds.\nDeprecated\nvar durationWatched: TimeInterval\nThe accumulated duration of the media played, in seconds.\nDeprecated\nvar numberOfStalls: Int\nThe total number of playback stalls encountered.\nDeprecated\nvar observedBitrate: Double\nThe empirical throughput across all media downloaded for the movie player, in bits per second.\nDeprecated\nvar indicatedBitrate: Double\nThe throughput required to play the stream, as advertised by the web server, in bits per second.\nDeprecated\nvar numberOfDroppedVideoFrames: Int\nThe total number of dropped video frames.\nDeprecated"
  },
  {
    "title": "requestThumbnailImages(atTimes:timeOption:)",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmovieplayercontroller/1620805-requestthumbnailimages",
    "html": "Parameters\nplaybackTimes\n\nAn array of NSNumber objects containing the times at which to capture the thumbnail images. Each time value represents the number of seconds from the beginning of the current movie.\n\noption\n\nThe option to use when determining which specific frame to use for each thumbnail image. For a list of possible values, see MPMovieTimeOption.\n\nDiscussion\n\nThis method processes each thumbnail request separately and asynchronously. When the results for a single image arrive, the movie player posts a MPMoviePlayerThumbnailImageRequestDidFinish notification with the results for that image. Notifications are posted regardless of whether the image capture was successful or failed. You should register for this notification prior to calling this method.\n\nNote\n\nThis method is not not called when the source URL is an HTTP Live Streaming (HLS) content source. See HTTP Live Streaming Overview.\n\nSee Also\nGenerating thumbnail images\nfunc thumbnailImage(atTime: TimeInterval, timeOption: MPMovieTimeOption) -> UIImage!\nCaptures and returns a thumbnail image from the current movie.\nDeprecated\nfunc cancelAllThumbnailImageRequests()\nCancels all pending asynchronous thumbnail image requests.\nDeprecated"
  },
  {
    "title": "timedMetadata",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmovieplayercontroller/1620853-timedmetadata",
    "html": "Return Value\n\nAn array of the most recent MPTimedMetadata objects provided by the streamed movie.\n\nSee Also\nControlling and monitoring playback\nvar loadState: MPMovieLoadState\nThe network load state of the movie player.\nDeprecated\nvar playbackState: MPMoviePlaybackState\nThe current playback state of the movie player.\nDeprecated\nvar initialPlaybackTime: TimeInterval\nThe time, specified in seconds within the video timeline, when playback should start.\nDeprecated\nvar endPlaybackTime: TimeInterval\nThe end time (measured in seconds) for playback of the movie.\nDeprecated\nvar shouldAutoplay: Bool\nA Boolean that indicates whether a movie should begin playback automatically.\nDeprecated\nvar readyForDisplay: Bool\nA Boolean that indicates whether the first video frame of the movie is ready to be displayed.\nDeprecated\nvar repeatMode: MPMovieRepeatMode\nDetermines how the movie player repeats the playback of the movie.\nDeprecated"
  },
  {
    "title": "localizedTitle",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpfeedbackcommand/1622905-localizedtitle",
    "html": "Discussion\n\nUse this property to store the text you want shown to the user in conjunction with this command. For example, you might assign the string “I like this” to this property for the command associated with a Like button. The text you specify is displayed to the user at appropriate times by the system.\n\nSee Also\nRetrieving information about a feedback command\nvar isActive: Bool\nA Boolean value that indicates whether the feedback’s action is on or off.\nvar localizedShortTitle: String\nA shortened version of the string used to describe the context of a command."
  },
  {
    "title": "minimumRating",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpratingcommand/1622902-minimumrating",
    "html": "Discussion\n\nThe minimumRating property must be less than the maximumRating property.\n\nSee Also\nDefining maximum and minimum ratings\nvar maximumRating: Float\nThe maximum rating for a command."
  },
  {
    "title": "rating",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpratingcommandevent/1616764-rating",
    "html": "Discussion\n\nThe rating property must be between the minimum and maximum ratings defined by the maximumRating and minimumRating properties."
  },
  {
    "title": "isNegative",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpfeedbackcommandevent/1616773-isnegative",
    "html": "Discussion\n\nWhen set to true, the designated element has a negative operation performed on the element. The performance of the negative command varies depending on the element it is referencing. For example, a negative command for a bookmark indicates that the bookmark should be removed. However, a negative command for a Like command could just lower the frequency that the designated element is played. This behavior differs from a Dislike command, which would put the designated element on a deny list and never play it again.\n\nIt’s up to the app to determine exactly what should be done when a negative command is received."
  },
  {
    "title": "isActive",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpfeedbackcommand/1622900-isactive",
    "html": "Discussion\n\nWhen set to true, feedback is available. Use this property to get or set the current state of the given feedback. An example of an active feedback command is a Like button that has been enabled by the user. In that scenario, toggling the button on and off would similarly toggle the value in this property.\n\nSee Also\nRetrieving information about a feedback command\nvar localizedTitle: String\nA localized string used to describe the context of a command.\nvar localizedShortTitle: String\nA shortened version of the string used to describe the context of a command."
  },
  {
    "title": "localizedShortTitle",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpfeedbackcommand/1622916-localizedshorttitle",
    "html": "Discussion\n\nUse this property to provide information about a feedback command that is suitable for display when screen space is more constrained. For example, Apple Watch uses this string instead of the string in the localizedTitle property.\n\nSee Also\nRetrieving information about a feedback command\nvar isActive: Bool\nA Boolean value that indicates whether the feedback’s action is on or off.\nvar localizedTitle: String\nA localized string used to describe the context of a command."
  },
  {
    "title": "preferredIntervals",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpskipintervalcommand/1622899-preferredintervals",
    "html": "Discussion\n\nThe preferredIntervals property holds an array of TimeInterval objects that designate different skip intervals for a media item. The skip intervals are defined in seconds."
  },
  {
    "title": "nowPlayingSessionDidChangeActive(_:)",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpnowplayingsessiondelegate/3547933-nowplayingsessiondidchangeactive",
    "html": "Parameters\nnowPlayingSession\n\nThe Now Playing session that changed.\n\nSee Also\nResponding to state changes\nfunc nowPlayingSessionDidChangeCanBecomeActive(MPNowPlayingSession)\nTells the delegate that the session is eligible to become active.\nRelated Documentation\nvar isActive: Bool\nA Boolean value that indicates whether the session is the app’s active Now Playing session."
  },
  {
    "title": "MPMovieSourceType",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmoviesourcetype",
    "html": "Topics\nConstants\ncase unknown\ncase file\ncase streaming\nRelationships\nConforms To\nSendable"
  },
  {
    "title": "MPMoviePlaybackState",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmovieplaybackstate",
    "html": "Topics\nConstants\ncase stopped\ncase playing\ncase paused\ncase interrupted\ncase seekingForward\ncase seekingBackward\nRelationships\nConforms To\nSendable"
  },
  {
    "title": "setStartTime(_:for:)",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmusicplayermediaitemqueuedescriptor/2582428-setstarttime",
    "html": "Parameters\nstartTime\n\nThe TimeInterval describing when the media item starts playing.\n\nmediaItem\n\nThe media item in the queue that has a changed start time.\n\nSee Also\nSetting start and end times\nfunc setEndTime(TimeInterval, for: MPMediaItem)\nThe time the designated media item is to stop playing."
  },
  {
    "title": "shared()",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpplayablecontentmanager/1614806-shared",
    "html": "Return Value\n\nThe current content manager.\n\nDiscussion\n\nCall this method to create a new content manager. Set the dataSource and delegate immediately after creating the content manager."
  },
  {
    "title": "MPNowPlayingPlaybackState.paused",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpnowplayingplaybackstate/paused",
    "html": "See Also\nPlayback states\ncase unknown\nThe current state of the app is unknown.\ncase playing\nThe app is currently playing a media item.\ncase stopped\nThe app has stopped playing.\ncase interrupted\nThe app has been interrupted during playback."
  },
  {
    "title": "MPNowPlayingPlaybackState.playing",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpnowplayingplaybackstate/playing",
    "html": "See Also\nPlayback states\ncase unknown\nThe current state of the app is unknown.\ncase paused\nThe app is currently paused.\ncase stopped\nThe app has stopped playing.\ncase interrupted\nThe app has been interrupted during playback."
  },
  {
    "title": "MPPlayableContentDataSource",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpplayablecontentdatasource",
    "html": "Overview\n\nTo support external media players, create a class that conforms to the MPPlayableContentDataSource protocol. When your app launches, create an instance of this class and assign it to the shared dataSource property. This data source provides media metadata to external media players so that they can build user interfaces displaying your app’s content. It’s best to set this data source as early as possible in your app’s lifecycle, as iOS may start asking for content right away.\n\nImportant\n\nThis class is only used for CarPlay. Using it requires a special entitlement issued by Apple. Apps without the correct entitlement won’t appear on the CarPlay home screen. See http://www.apple.com/ios/carplay/ for more information.\n\nTopics\nRetrieving a media item\nfunc contentItem(at: IndexPath) -> MPContentItem?\nRetrieves the media item at the specified index.\n\nRequired\n\nfunc contentItem(forIdentifier: String, completionHandler: (MPContentItem?, (any Error)?) -> Void)\nRetrieves the content item associated with the provided identifier.\nWorking with child nodes\nfunc beginLoadingChildItems(at: IndexPath, completionHandler: ((any Error)?) -> Void)\nStarts to load the children of the indicated index.\nfunc childItemsDisplayPlaybackProgress(at: IndexPath) -> Bool\nReturns a Boolean value indicating whether the provided content supports playback progress.\nfunc numberOfChildItems(at: IndexPath) -> Int\nProvides the number of child nodes for the indicated node.\n\nRequired\n\nRelationships\nInherits From\nNSObjectProtocol\nSee Also\nProviding playable content\nvar dataSource: (any MPPlayableContentDataSource)?\nThe data source provided by the app.\nDeprecated"
  },
  {
    "title": "context",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpplayablecontentmanager/1614800-context",
    "html": "See Also\nRetrieving information on currently playing items\nvar nowPlayingIdentifiers: [String]\nThe content items currently playing based on their identifiers.\nDeprecated"
  },
  {
    "title": "MPPlayableContentDelegate",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpplayablecontentdelegate",
    "html": "Overview\n\nAfter the media player determines that a media item should play, the app’s content delegate requests to initiate playback.\n\nImportant\n\nSome features of this protocol are specific to CarPlay, which requires a special entitlement issued by Apple. Apps without the correct entitlement won’t appear on the CarPlay home screen. See http://www.apple.com/ios/carplay/ for more information.\n\nWhen creating your CarPlay app, keep the following in mind:\n\nTransition to the Now Playing screen only when content is ready to play. Due to buffering and network conditions, it may take several seconds for audio to begin playing after a user selects it. The user’s selection remains highlighted, and the system displays a spinning activity indicator until your app informs the system that the audio is ready to play.\n\nStart playback as soon as possible. Playback should begin as soon as audio has sufficiently loaded, even if descriptive information is still loading. Continue loading descriptive information in the background and show it once available.\n\nAvoid beginning playback automatically. Unless your app’s purpose is to play a single source of audio, it shouldn’t begin playback until the user initiates it.\n\nTopics\nPlaying a specific media item\nfunc playableContentManager(MPPlayableContentManager, initiatePlaybackOfContentItemAt: IndexPath, completionHandler: ((any Error)?) -> Void)\nAsks the delegate to begin playback of the specified content item.\nSuggesting content for playback\nfunc playableContentManager(MPPlayableContentManager, initializePlaybackQueueWithContentItems: [Any]?, completionHandler: ((any Error)?) -> Void)\nAsks the delegate to prepare suggested content for playback.\nfunc playableContentManager(MPPlayableContentManager, initializePlaybackQueueWithCompletionHandler: ((any Error)?) -> Void)\nAsks the delegate to prepare suggested content for playback.\nResponding to context changes\nfunc playableContentManager(MPPlayableContentManager, didUpdate: MPPlayableContentManagerContext)\nNotifies the delegate that the playable content manager’s context information has changed.\nRelationships\nInherits From\nNSObjectProtocol\nSee Also\nResponding to playback events\nvar delegate: (any MPPlayableContentDelegate)?\nA delegate that lets the media player manage the app’s playback queue.\nDeprecated"
  },
  {
    "title": "reloadData()",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpplayablecontentmanager/1614807-reloaddata",
    "html": "Discussion\n\nCall this method when the data source changed, which notifies the content manager to reload the data from the data source.\n\nSee Also\nUpdating data\nfunc beginUpdates()\nUpdates several Media Player content items at once.\nDeprecated\nfunc endUpdates()\nEnds a synchronized update.\nDeprecated"
  },
  {
    "title": "events",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmovieerrorlog/1620929-events",
    "html": "Discussion\n\nAn ordered collection of MPMovieErrorLogEvent instances that represent the chronological sequence of events in the movie error log.\n\nSee Also\nMovie error log properties\nvar extendedLogData: Data!\nA textual version of the web server error log.\nDeprecated\nvar extendedLogDataStringEncoding: UInt\nThe string encoding for the extended log data property.\nDeprecated"
  },
  {
    "title": "delegate",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpplayablecontentmanager/1614803-delegate",
    "html": "Discussion\n\nThe delegate responds to external events that trigger a change in the media item that’s playing. An example of such an event would be choosing to play a song from a different album, or requesting suggested content to play next. The app must be able to respond to these events at any time.\n\nTo instead respond to events that affect the playback state of the currently playing item, use the MPRemoteCommandEvent class.\n\nSee Also\nResponding to playback events\nprotocol MPPlayableContentDelegate\nThe protocol used to let external media players send playback commands to an app.\nDeprecated"
  },
  {
    "title": "MPError.Code.notFound",
    "url": "https://developer.apple.com/documentation/mediaplayer/mperror/code/notfound",
    "html": "See Also\nError codes\ncase cancelled\nAn error that indicates the system canceled the requested operation before it completed.\ncase cloudServiceCapabilityMissing\nAn error that indicates the operation can’t complete because iCloud services aren’t enabled.\ncase networkConnectionFailed\nAn error that indicates the operation failed because the device can’t connect to the network.\ncase notSupported\nAn error that indicates the requested operation failed because the system doesn’t support it.\ncase permissionDenied\nAn error that indicates the operation can’t complete because the user doesn’t have permission to execute the operation.\ncase requestTimedOut\nAn error that indicates the requested operation timed out.\ncase unknown\nAn error that indicates the requested operation can’t complete due to an unknown error."
  },
  {
    "title": "nowPlayingIdentifiers",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpplayablecontentmanager/1649434-nowplayingidentifiers",
    "html": "See Also\nRetrieving information on currently playing items\nvar context: MPPlayableContentManagerContext\nThe current state of the playable content endpoint.\nDeprecated"
  },
  {
    "title": "MPError.Code.cancelled",
    "url": "https://developer.apple.com/documentation/mediaplayer/mperror/code/cancelled",
    "html": "See Also\nError codes\ncase cloudServiceCapabilityMissing\nAn error that indicates the operation can’t complete because iCloud services aren’t enabled.\ncase networkConnectionFailed\nAn error that indicates the operation failed because the device can’t connect to the network.\ncase notFound\nAn error that indicates the operation failed because the system can’t find the requested identifier in the current storefront.\ncase notSupported\nAn error that indicates the requested operation failed because the system doesn’t support it.\ncase permissionDenied\nAn error that indicates the operation can’t complete because the user doesn’t have permission to execute the operation.\ncase requestTimedOut\nAn error that indicates the requested operation timed out.\ncase unknown\nAn error that indicates the requested operation can’t complete due to an unknown error."
  },
  {
    "title": "MPError.Code.networkConnectionFailed",
    "url": "https://developer.apple.com/documentation/mediaplayer/mperror/code/networkconnectionfailed",
    "html": "See Also\nError codes\ncase cancelled\nAn error that indicates the system canceled the requested operation before it completed.\ncase cloudServiceCapabilityMissing\nAn error that indicates the operation can’t complete because iCloud services aren’t enabled.\ncase notFound\nAn error that indicates the operation failed because the system can’t find the requested identifier in the current storefront.\ncase notSupported\nAn error that indicates the requested operation failed because the system doesn’t support it.\ncase permissionDenied\nAn error that indicates the operation can’t complete because the user doesn’t have permission to execute the operation.\ncase requestTimedOut\nAn error that indicates the requested operation timed out.\ncase unknown\nAn error that indicates the requested operation can’t complete due to an unknown error."
  },
  {
    "title": "MPError.Code.cloudServiceCapabilityMissing",
    "url": "https://developer.apple.com/documentation/mediaplayer/mperror/code/cloudservicecapabilitymissing",
    "html": "See Also\nError codes\ncase cancelled\nAn error that indicates the system canceled the requested operation before it completed.\ncase networkConnectionFailed\nAn error that indicates the operation failed because the device can’t connect to the network.\ncase notFound\nAn error that indicates the operation failed because the system can’t find the requested identifier in the current storefront.\ncase notSupported\nAn error that indicates the requested operation failed because the system doesn’t support it.\ncase permissionDenied\nAn error that indicates the operation can’t complete because the user doesn’t have permission to execute the operation.\ncase requestTimedOut\nAn error that indicates the requested operation timed out.\ncase unknown\nAn error that indicates the requested operation can’t complete due to an unknown error."
  },
  {
    "title": "MPError.Code.notSupported",
    "url": "https://developer.apple.com/documentation/mediaplayer/mperror/code/notsupported",
    "html": "Discussion\n\nAn example of this is trying to add a media item to a smart playlist.\n\nSee Also\nError codes\ncase cancelled\nAn error that indicates the system canceled the requested operation before it completed.\ncase cloudServiceCapabilityMissing\nAn error that indicates the operation can’t complete because iCloud services aren’t enabled.\ncase networkConnectionFailed\nAn error that indicates the operation failed because the device can’t connect to the network.\ncase notFound\nAn error that indicates the operation failed because the system can’t find the requested identifier in the current storefront.\ncase permissionDenied\nAn error that indicates the operation can’t complete because the user doesn’t have permission to execute the operation.\ncase requestTimedOut\nAn error that indicates the requested operation timed out.\ncase unknown\nAn error that indicates the requested operation can’t complete due to an unknown error."
  },
  {
    "title": "supportedPlaybackRates",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpchangeplaybackratecommand/1622915-supportedplaybackrates",
    "html": "Discussion\n\nContains an array of NSNumber objects. Each object is of type float and designates a supported playback rate. For example, a value of 2.0 would indicate the media item plays at double speed. Negative values are not supported."
  },
  {
    "title": "MPNowPlayingInfoMediaType.none",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpnowplayinginfomediatype/none",
    "html": "See Also\nMedia types\ncase audio\nThe now playing media item is an audio item.\ncase video\nThe now playing media item is a video item."
  },
  {
    "title": "MPNowPlayingInfoMediaType.video",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpnowplayinginfomediatype/video",
    "html": "See Also\nMedia types\ncase none\nThere is no now playing media item.\ncase audio\nThe now playing media item is an audio item."
  },
  {
    "title": "allowsAirPlay",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmovieplayercontroller/1620781-allowsairplay",
    "html": "Discussion\n\nA movie player supports wireless movie playback to AirPlay-enabled hardware. When enabled, the user can select AirPlay-enabled hardware in the Control Panel when such hardware is in range.\n\nThe default value is true. To disable AirPlay movie playback, set this property’s value to false.\n\nSee Also\nAccessing movie properties\nvar contentURL: URL!\nThe URL that points to the movie file.\nDeprecated\nvar movieSourceType: MPMovieSourceType\nThe playback type of the movie.\nDeprecated\nvar movieMediaTypes: MPMovieMediaTypeMask\nThe types of media available in the movie.\nDeprecated\nvar isAirPlayVideoActive: Bool\nIndicates whether the movie player is currently playing video via AirPlay.\nDeprecated\nvar naturalSize: CGSize\nThe width and height of the movie frame.\nDeprecated\nvar isFullscreen: Bool\nA Boolean that indicates whether the movie player is in full-screen mode.\nDeprecated\nfunc setFullscreen(Bool, animated: Bool)\nCauses the movie player to enter or exit full-screen mode.\nDeprecated\nvar scalingMode: MPMovieScalingMode\nThe scaling mode to use when displaying the movie.\nDeprecated\nvar controlStyle: MPMovieControlStyle\nThe style of the playback controls.\nDeprecated\nvar useApplicationAudioSession: Bool\nA Boolean value that indicates whether the movie player should use the app’s audio session.\nDeprecated"
  },
  {
    "title": "MPRepeatType",
    "url": "https://developer.apple.com/documentation/mediaplayer/mprepeattype",
    "html": "Topics\nRepeat types\ncase off\nNothing is repeated during playback.\ncase one\nA single item is repeated indefinitely.\ncase all\nThe current container or playlist is repeated indefinitely.\nRelationships\nConforms To\nSendable\nSee Also\nResponding to changes to media playback mode events\nclass MPChangePlaybackRateCommand\nAn object that responds to requests to change the playback rate of the playing item.\nclass MPChangePlaybackRateCommandEvent\nAn event requesting a change in the playback rate.\nclass MPChangeLanguageOptionCommandEvent\nAn event requesting a change in the language option.\nclass MPChangeRepeatModeCommand\nAn object that responds to requests to change the current repeat mode used during playback.\nclass MPChangeRepeatModeCommandEvent\nAn event requesting a change in the repeat mode.\nclass MPChangeShuffleModeCommand\nAn object that responds to requests to change the current shuffle mode used during playback.\nclass MPChangeShuffleModeCommandEvent\nAn event requesting a change in the shuffle mode.\nenum MPShuffleType\nIndicates which item types to shuffle."
  },
  {
    "title": "isAirPlayVideoActive",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmovieplayercontroller/1620906-isairplayvideoactive",
    "html": "Discussion\n\nYou can query this property after receiving an MPMoviePlayerIsAirPlayVideoActiveDidChange notification to find out whether the AirPlay video started or stopped.\n\nSee Also\nAccessing movie properties\nvar contentURL: URL!\nThe URL that points to the movie file.\nDeprecated\nvar movieSourceType: MPMovieSourceType\nThe playback type of the movie.\nDeprecated\nvar movieMediaTypes: MPMovieMediaTypeMask\nThe types of media available in the movie.\nDeprecated\nvar allowsAirPlay: Bool\nSpecifies whether the movie player allows AirPlay movie playback.\nDeprecated\nvar naturalSize: CGSize\nThe width and height of the movie frame.\nDeprecated\nvar isFullscreen: Bool\nA Boolean that indicates whether the movie player is in full-screen mode.\nDeprecated\nfunc setFullscreen(Bool, animated: Bool)\nCauses the movie player to enter or exit full-screen mode.\nDeprecated\nvar scalingMode: MPMovieScalingMode\nThe scaling mode to use when displaying the movie.\nDeprecated\nvar controlStyle: MPMovieControlStyle\nThe style of the playback controls.\nDeprecated\nvar useApplicationAudioSession: Bool\nA Boolean value that indicates whether the movie player should use the app’s audio session.\nDeprecated"
  },
  {
    "title": "MPShuffleType",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpshuffletype",
    "html": "Topics\nShuffle types\ncase off\nNothing is shuffled during playback.\ncase items\nIndividual items are shuffled during playback.\ncase collections\nCollections of items are shuffled during playback.\nRelationships\nConforms To\nSendable\nSee Also\nResponding to changes to media playback mode events\nclass MPChangePlaybackRateCommand\nAn object that responds to requests to change the playback rate of the playing item.\nclass MPChangePlaybackRateCommandEvent\nAn event requesting a change in the playback rate.\nclass MPChangeLanguageOptionCommandEvent\nAn event requesting a change in the language option.\nclass MPChangeRepeatModeCommand\nAn object that responds to requests to change the current repeat mode used during playback.\nclass MPChangeRepeatModeCommandEvent\nAn event requesting a change in the repeat mode.\nclass MPChangeShuffleModeCommand\nAn object that responds to requests to change the current shuffle mode used during playback.\nclass MPChangeShuffleModeCommandEvent\nAn event requesting a change in the shuffle mode.\nenum MPRepeatType\nIndicates which items to play repeatedly."
  },
  {
    "title": "MPChangeLanguageOptionCommandEvent",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpchangelanguageoptioncommandevent",
    "html": "Topics\nChanging the language option\nvar languageOption: MPNowPlayingInfoLanguageOption\nThe requested language option to change.\nvar setting: MPChangeLanguageOptionSetting\nThe extent of the language setting change.\nenum MPChangeLanguageOptionSetting\nThe states that determine when language option changes take effect.\nRelationships\nInherits From\nMPRemoteCommandEvent\nSee Also\nResponding to changes to media playback mode events\nclass MPChangePlaybackRateCommand\nAn object that responds to requests to change the playback rate of the playing item.\nclass MPChangePlaybackRateCommandEvent\nAn event requesting a change in the playback rate.\nclass MPChangeRepeatModeCommand\nAn object that responds to requests to change the current repeat mode used during playback.\nclass MPChangeRepeatModeCommandEvent\nAn event requesting a change in the repeat mode.\nclass MPChangeShuffleModeCommand\nAn object that responds to requests to change the current shuffle mode used during playback.\nclass MPChangeShuffleModeCommandEvent\nAn event requesting a change in the shuffle mode.\nenum MPRepeatType\nIndicates which items to play repeatedly.\nenum MPShuffleType\nIndicates which item types to shuffle."
  },
  {
    "title": "MPChangePlaybackRateCommandEvent",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpchangeplaybackratecommandevent",
    "html": "Topics\nRetrieving the playback rate\nvar playbackRate: Float\nThe chosen playback rate for the command event.\nRelationships\nInherits From\nMPRemoteCommandEvent\nSee Also\nResponding to changes to media playback mode events\nclass MPChangePlaybackRateCommand\nAn object that responds to requests to change the playback rate of the playing item.\nclass MPChangeLanguageOptionCommandEvent\nAn event requesting a change in the language option.\nclass MPChangeRepeatModeCommand\nAn object that responds to requests to change the current repeat mode used during playback.\nclass MPChangeRepeatModeCommandEvent\nAn event requesting a change in the repeat mode.\nclass MPChangeShuffleModeCommand\nAn object that responds to requests to change the current shuffle mode used during playback.\nclass MPChangeShuffleModeCommandEvent\nAn event requesting a change in the shuffle mode.\nenum MPRepeatType\nIndicates which items to play repeatedly.\nenum MPShuffleType\nIndicates which item types to shuffle."
  },
  {
    "title": "MPChangeShuffleModeCommand",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpchangeshufflemodecommand",
    "html": "Topics\nRetrieving the current shuffle mode\nvar currentShuffleType: MPShuffleType\nThe current shuffle mode for a media item.\nRelationships\nInherits From\nMPRemoteCommand\nSee Also\nResponding to changes to media playback mode events\nclass MPChangePlaybackRateCommand\nAn object that responds to requests to change the playback rate of the playing item.\nclass MPChangePlaybackRateCommandEvent\nAn event requesting a change in the playback rate.\nclass MPChangeLanguageOptionCommandEvent\nAn event requesting a change in the language option.\nclass MPChangeRepeatModeCommand\nAn object that responds to requests to change the current repeat mode used during playback.\nclass MPChangeRepeatModeCommandEvent\nAn event requesting a change in the repeat mode.\nclass MPChangeShuffleModeCommandEvent\nAn event requesting a change in the shuffle mode.\nenum MPRepeatType\nIndicates which items to play repeatedly.\nenum MPShuffleType\nIndicates which item types to shuffle."
  },
  {
    "title": "MPChangeShuffleModeCommandEvent",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpchangeshufflemodecommandevent",
    "html": "Topics\nChanging the shuffle mode\nvar shuffleType: MPShuffleType\nThe shuffle type used when fulfilling the event request.\nvar preservesShuffleMode: Bool\nA Boolean value that indicates whether the shuffle mode is preserved between playback sessions.\nRelationships\nInherits From\nMPRemoteCommandEvent\nSee Also\nResponding to changes to media playback mode events\nclass MPChangePlaybackRateCommand\nAn object that responds to requests to change the playback rate of the playing item.\nclass MPChangePlaybackRateCommandEvent\nAn event requesting a change in the playback rate.\nclass MPChangeLanguageOptionCommandEvent\nAn event requesting a change in the language option.\nclass MPChangeRepeatModeCommand\nAn object that responds to requests to change the current repeat mode used during playback.\nclass MPChangeRepeatModeCommandEvent\nAn event requesting a change in the repeat mode.\nclass MPChangeShuffleModeCommand\nAn object that responds to requests to change the current shuffle mode used during playback.\nenum MPRepeatType\nIndicates which items to play repeatedly.\nenum MPShuffleType\nIndicates which item types to shuffle."
  },
  {
    "title": "movieSourceType",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmovieplayercontroller/1620793-moviesourcetype",
    "html": "Discussion\n\nThe default value of this property is MPMovieSourceType.unknown. This property provides a clue to the playback system as to how it should download and buffer the movie content. If you know the source type of the movie, setting the value of this property before playback begins can improve the load times for the movie content. If you do not set the source type explicitly before playback, the movie player controller must gather this information, which might delay playback.\n\nSee Also\nAccessing movie properties\nvar contentURL: URL!\nThe URL that points to the movie file.\nDeprecated\nvar movieMediaTypes: MPMovieMediaTypeMask\nThe types of media available in the movie.\nDeprecated\nvar allowsAirPlay: Bool\nSpecifies whether the movie player allows AirPlay movie playback.\nDeprecated\nvar isAirPlayVideoActive: Bool\nIndicates whether the movie player is currently playing video via AirPlay.\nDeprecated\nvar naturalSize: CGSize\nThe width and height of the movie frame.\nDeprecated\nvar isFullscreen: Bool\nA Boolean that indicates whether the movie player is in full-screen mode.\nDeprecated\nfunc setFullscreen(Bool, animated: Bool)\nCauses the movie player to enter or exit full-screen mode.\nDeprecated\nvar scalingMode: MPMovieScalingMode\nThe scaling mode to use when displaying the movie.\nDeprecated\nvar controlStyle: MPMovieControlStyle\nThe style of the playback controls.\nDeprecated\nvar useApplicationAudioSession: Bool\nA Boolean value that indicates whether the movie player should use the app’s audio session.\nDeprecated"
  },
  {
    "title": "languageOptionCharacteristics",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpnowplayinginfolanguageoption/1623152-languageoptioncharacteristics",
    "html": "Discussion\n\nThis property contains an array of characteristics that describes the language option. See Language option characteristic constants for the most commonly used characteristics.\n\nSee Also\nRetrieving language option properties\nvar displayName: String?\nThe display name for a language option.\nvar identifier: String?\nThe unique identifier for the language option.\nvar languageTag: String?\nThe abbreviated language code for the language option.\nvar languageOptionType: MPNowPlayingInfoLanguageOptionType\nThe type of language option.\nenum MPNowPlayingInfoLanguageOptionType\nThe language option type to use for the Now Playing item."
  },
  {
    "title": "movieMediaTypes",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmovieplayercontroller/1620821-moviemediatypes",
    "html": "Discussion\n\nMovies can contain a combination of audio, video, or a combination of the two. The default value of this property is none. See the MPMovieMediaTypeMask enumeration for possible values of this property.\n\nSee Also\nAccessing movie properties\nvar contentURL: URL!\nThe URL that points to the movie file.\nDeprecated\nvar movieSourceType: MPMovieSourceType\nThe playback type of the movie.\nDeprecated\nvar allowsAirPlay: Bool\nSpecifies whether the movie player allows AirPlay movie playback.\nDeprecated\nvar isAirPlayVideoActive: Bool\nIndicates whether the movie player is currently playing video via AirPlay.\nDeprecated\nvar naturalSize: CGSize\nThe width and height of the movie frame.\nDeprecated\nvar isFullscreen: Bool\nA Boolean that indicates whether the movie player is in full-screen mode.\nDeprecated\nfunc setFullscreen(Bool, animated: Bool)\nCauses the movie player to enter or exit full-screen mode.\nDeprecated\nvar scalingMode: MPMovieScalingMode\nThe scaling mode to use when displaying the movie.\nDeprecated\nvar controlStyle: MPMovieControlStyle\nThe style of the playback controls.\nDeprecated\nvar useApplicationAudioSession: Bool\nA Boolean value that indicates whether the movie player should use the app’s audio session.\nDeprecated"
  },
  {
    "title": "languageOptionType",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpnowplayinginfolanguageoption/1623153-languageoptiontype",
    "html": "See Also\nRetrieving language option properties\nvar displayName: String?\nThe display name for a language option.\nvar identifier: String?\nThe unique identifier for the language option.\nvar languageOptionCharacteristics: [String]?\nThe characteristics that describe the content of the language option.\nvar languageTag: String?\nThe abbreviated language code for the language option.\nenum MPNowPlayingInfoLanguageOptionType\nThe language option type to use for the Now Playing item."
  },
  {
    "title": "isAutomaticAudibleLanguageOption()",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpnowplayinginfolanguageoption/1623151-isautomaticaudiblelanguageoption",
    "html": "Return Value\n\ntrue if the framework uses the system preferences to determine the best audible language option; otherwise false.\n\nSee Also\nRetrieving a language option based on system preferences\nfunc isAutomaticLegibleLanguageOption() -> Bool\nReturns a Boolean value that determines whether to use the best legible language option based on the system preferences."
  },
  {
    "title": "setFullscreen(_:animated:)",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmovieplayercontroller/1620844-setfullscreen",
    "html": "Parameters\nfullscreen\n\nSpecify true to enter full-screen mode or false to exit full-screen mode.\n\nanimated\n\nSpecify true to animate the transition between modes or false to switch immediately to the new mode.\n\nSee Also\nAccessing movie properties\nvar contentURL: URL!\nThe URL that points to the movie file.\nDeprecated\nvar movieSourceType: MPMovieSourceType\nThe playback type of the movie.\nDeprecated\nvar movieMediaTypes: MPMovieMediaTypeMask\nThe types of media available in the movie.\nDeprecated\nvar allowsAirPlay: Bool\nSpecifies whether the movie player allows AirPlay movie playback.\nDeprecated\nvar isAirPlayVideoActive: Bool\nIndicates whether the movie player is currently playing video via AirPlay.\nDeprecated\nvar naturalSize: CGSize\nThe width and height of the movie frame.\nDeprecated\nvar isFullscreen: Bool\nA Boolean that indicates whether the movie player is in full-screen mode.\nDeprecated\nvar scalingMode: MPMovieScalingMode\nThe scaling mode to use when displaying the movie.\nDeprecated\nvar controlStyle: MPMovieControlStyle\nThe style of the playback controls.\nDeprecated\nvar useApplicationAudioSession: Bool\nA Boolean value that indicates whether the movie player should use the app’s audio session.\nDeprecated"
  },
  {
    "title": "naturalSize",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmovieplayercontroller/1620877-naturalsize",
    "html": "Discussion\n\nThis property reports the clean aperture of the video in square pixels. Thus, the reported dimensions take into account anamorphic content and aperture modes.\n\nIt is possible for the natural size of a movie to change during playback. This typically happens when the bit-rate of streaming content changes or when playback toggles between audio-only and a combination of audio and video.\n\nSee Also\nAccessing movie properties\nvar contentURL: URL!\nThe URL that points to the movie file.\nDeprecated\nvar movieSourceType: MPMovieSourceType\nThe playback type of the movie.\nDeprecated\nvar movieMediaTypes: MPMovieMediaTypeMask\nThe types of media available in the movie.\nDeprecated\nvar allowsAirPlay: Bool\nSpecifies whether the movie player allows AirPlay movie playback.\nDeprecated\nvar isAirPlayVideoActive: Bool\nIndicates whether the movie player is currently playing video via AirPlay.\nDeprecated\nvar isFullscreen: Bool\nA Boolean that indicates whether the movie player is in full-screen mode.\nDeprecated\nfunc setFullscreen(Bool, animated: Bool)\nCauses the movie player to enter or exit full-screen mode.\nDeprecated\nvar scalingMode: MPMovieScalingMode\nThe scaling mode to use when displaying the movie.\nDeprecated\nvar controlStyle: MPMovieControlStyle\nThe style of the playback controls.\nDeprecated\nvar useApplicationAudioSession: Bool\nA Boolean value that indicates whether the movie player should use the app’s audio session.\nDeprecated"
  },
  {
    "title": "scalingMode",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmovieplayercontroller/1620943-scalingmode",
    "html": "Discussion\n\nChanging this property while the movie player is visible causes the current movie to animate to the new scaling mode.\n\nThe default value of this property is MPMovieScalingMode.aspectFit. For a list of available scaling modes, see MPMovieScalingMode.\n\nSee Also\nAccessing movie properties\nvar contentURL: URL!\nThe URL that points to the movie file.\nDeprecated\nvar movieSourceType: MPMovieSourceType\nThe playback type of the movie.\nDeprecated\nvar movieMediaTypes: MPMovieMediaTypeMask\nThe types of media available in the movie.\nDeprecated\nvar allowsAirPlay: Bool\nSpecifies whether the movie player allows AirPlay movie playback.\nDeprecated\nvar isAirPlayVideoActive: Bool\nIndicates whether the movie player is currently playing video via AirPlay.\nDeprecated\nvar naturalSize: CGSize\nThe width and height of the movie frame.\nDeprecated\nvar isFullscreen: Bool\nA Boolean that indicates whether the movie player is in full-screen mode.\nDeprecated\nfunc setFullscreen(Bool, animated: Bool)\nCauses the movie player to enter or exit full-screen mode.\nDeprecated\nvar controlStyle: MPMovieControlStyle\nThe style of the playback controls.\nDeprecated\nvar useApplicationAudioSession: Bool\nA Boolean value that indicates whether the movie player should use the app’s audio session.\nDeprecated"
  },
  {
    "title": "useApplicationAudioSession",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmovieplayercontroller/1620897-useapplicationaudiosession",
    "html": "Deprecated\n\nThere is not replacement for this property and its use is discouraged.\n\nDiscussion\n\nThe default value of this property is true. Setting this property to false causes the movie player to use a system-supplied audio session with a non-mixable playback category.\n\nWhen this property is true, the movie player shares the app’s audio session. This give you control over how the movie player content interacts with your audio and with audio from other apps, such as the iPod. For important guidance on using this feature, see Audio Session Programming Guide in Audio Session Programming Guide.\n\nChanging the value of this property does not affect the currently playing movie. For the new setting to take effect, you must stop playback and then start it again.\n\nSpecial considerations\n\nIn iOS 3.1 and earlier, a movie player always uses a system-supplied audio session. To obtain that same behavior in iOS 3.2 and newer, you must set this property’s value to false.\n\nSee Also\nAccessing movie properties\nvar contentURL: URL!\nThe URL that points to the movie file.\nDeprecated\nvar movieSourceType: MPMovieSourceType\nThe playback type of the movie.\nDeprecated\nvar movieMediaTypes: MPMovieMediaTypeMask\nThe types of media available in the movie.\nDeprecated\nvar allowsAirPlay: Bool\nSpecifies whether the movie player allows AirPlay movie playback.\nDeprecated\nvar isAirPlayVideoActive: Bool\nIndicates whether the movie player is currently playing video via AirPlay.\nDeprecated\nvar naturalSize: CGSize\nThe width and height of the movie frame.\nDeprecated\nvar isFullscreen: Bool\nA Boolean that indicates whether the movie player is in full-screen mode.\nDeprecated\nfunc setFullscreen(Bool, animated: Bool)\nCauses the movie player to enter or exit full-screen mode.\nDeprecated\nvar scalingMode: MPMovieScalingMode\nThe scaling mode to use when displaying the movie.\nDeprecated\nvar controlStyle: MPMovieControlStyle\nThe style of the playback controls.\nDeprecated"
  },
  {
    "title": "readyForDisplay",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmovieplayercontroller/1620831-readyfordisplay",
    "html": "Discussion\n\nThe default value of this property is false. This property returns true if the first video frame is ready to be displayed and returns false if there are no video tracks associated. When the value of this property changes to true, a MPMoviePlayerReadyForDisplayDidChange is sent.\n\nSee Also\nControlling and monitoring playback\nvar loadState: MPMovieLoadState\nThe network load state of the movie player.\nDeprecated\nvar playbackState: MPMoviePlaybackState\nThe current playback state of the movie player.\nDeprecated\nvar initialPlaybackTime: TimeInterval\nThe time, specified in seconds within the video timeline, when playback should start.\nDeprecated\nvar endPlaybackTime: TimeInterval\nThe end time (measured in seconds) for playback of the movie.\nDeprecated\nvar shouldAutoplay: Bool\nA Boolean that indicates whether a movie should begin playback automatically.\nDeprecated\nvar repeatMode: MPMovieRepeatMode\nDetermines how the movie player repeats the playback of the movie.\nDeprecated\nvar timedMetadata: [Any]!\nObtains the most recent time-based metadata provided by the streamed movie.\nDeprecated"
  },
  {
    "title": "endPlaybackTime",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmovieplayercontroller/1620895-endplaybacktime",
    "html": "Discussion\n\nThe default value of this property is -1, which indicates the natural end time of the movie. This property is not applicable for streamed content.\n\nSee Also\nControlling and monitoring playback\nvar loadState: MPMovieLoadState\nThe network load state of the movie player.\nDeprecated\nvar playbackState: MPMoviePlaybackState\nThe current playback state of the movie player.\nDeprecated\nvar initialPlaybackTime: TimeInterval\nThe time, specified in seconds within the video timeline, when playback should start.\nDeprecated\nvar shouldAutoplay: Bool\nA Boolean that indicates whether a movie should begin playback automatically.\nDeprecated\nvar readyForDisplay: Bool\nA Boolean that indicates whether the first video frame of the movie is ready to be displayed.\nDeprecated\nvar repeatMode: MPMovieRepeatMode\nDetermines how the movie player repeats the playback of the movie.\nDeprecated\nvar timedMetadata: [Any]!\nObtains the most recent time-based metadata provided by the streamed movie.\nDeprecated"
  },
  {
    "title": "repeatMode",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmovieplayercontroller/1620962-repeatmode",
    "html": "Discussion\n\nThe default value of this property is MPMovieRepeatMode.none. For a list of available repeat modes, see MPMovieRepeatMode.\n\nSee Also\nControlling and monitoring playback\nvar loadState: MPMovieLoadState\nThe network load state of the movie player.\nDeprecated\nvar playbackState: MPMoviePlaybackState\nThe current playback state of the movie player.\nDeprecated\nvar initialPlaybackTime: TimeInterval\nThe time, specified in seconds within the video timeline, when playback should start.\nDeprecated\nvar endPlaybackTime: TimeInterval\nThe end time (measured in seconds) for playback of the movie.\nDeprecated\nvar shouldAutoplay: Bool\nA Boolean that indicates whether a movie should begin playback automatically.\nDeprecated\nvar readyForDisplay: Bool\nA Boolean that indicates whether the first video frame of the movie is ready to be displayed.\nDeprecated\nvar timedMetadata: [Any]!\nObtains the most recent time-based metadata provided by the streamed movie.\nDeprecated"
  },
  {
    "title": "shouldAutoplay",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmovieplayercontroller/1620812-shouldautoplay",
    "html": "Discussion\n\nThe default value of this property is true. This property determines whether the playback of network-based content begins automatically when there is enough buffered data to ensure uninterrupted playback.\n\nSee Also\nControlling and monitoring playback\nvar loadState: MPMovieLoadState\nThe network load state of the movie player.\nDeprecated\nvar playbackState: MPMoviePlaybackState\nThe current playback state of the movie player.\nDeprecated\nvar initialPlaybackTime: TimeInterval\nThe time, specified in seconds within the video timeline, when playback should start.\nDeprecated\nvar endPlaybackTime: TimeInterval\nThe end time (measured in seconds) for playback of the movie.\nDeprecated\nvar readyForDisplay: Bool\nA Boolean that indicates whether the first video frame of the movie is ready to be displayed.\nDeprecated\nvar repeatMode: MPMovieRepeatMode\nDetermines how the movie player repeats the playback of the movie.\nDeprecated\nvar timedMetadata: [Any]!\nObtains the most recent time-based metadata provided by the streamed movie.\nDeprecated"
  },
  {
    "title": "initialPlaybackTime",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmovieplayercontroller/1620796-initialplaybacktime",
    "html": "Discussion\n\nFor progressively downloaded content, playback starts at the closest key frame prior to the provided time. For video-on-demand content, playback starts at the nearest segment boundary to the provided time. For live video streams, the playback start time is measured from the start of the current playlist and is rounded to the nearest segment boundary.\n\nThe default value of this property is -1, which indicates the natural start time of the movie.\n\nSee Also\nControlling and monitoring playback\nvar loadState: MPMovieLoadState\nThe network load state of the movie player.\nDeprecated\nvar playbackState: MPMoviePlaybackState\nThe current playback state of the movie player.\nDeprecated\nvar endPlaybackTime: TimeInterval\nThe end time (measured in seconds) for playback of the movie.\nDeprecated\nvar shouldAutoplay: Bool\nA Boolean that indicates whether a movie should begin playback automatically.\nDeprecated\nvar readyForDisplay: Bool\nA Boolean that indicates whether the first video frame of the movie is ready to be displayed.\nDeprecated\nvar repeatMode: MPMovieRepeatMode\nDetermines how the movie player repeats the playback of the movie.\nDeprecated\nvar timedMetadata: [Any]!\nObtains the most recent time-based metadata provided by the streamed movie.\nDeprecated"
  },
  {
    "title": "accessLog",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmovieplayercontroller/1620922-accesslog",
    "html": "Discussion\n\nCan be nil. For information about movie access logs, refer to MPMovieAccessLog.\n\nSee Also\nRetrieving movie logs\nvar errorLog: MPMovieErrorLog!\nA snapshot of the playback failure error log for the movie player if it is playing a network stream.\nDeprecated"
  },
  {
    "title": "thumbnailImage(atTime:timeOption:)",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmovieplayercontroller/1620954-thumbnailimage",
    "html": "Parameters\nplaybackTime\n\nThe time at which to capture the thumbnail image. The time value represents the number of seconds from the beginning of the current movie.\n\noption\n\nThe option to use when determining which specific frame to use for the thumbnail image. For a list of possible values, see MPMovieTimeOption.\n\nReturn Value\n\nAn image object containing the image from the movie or nil if the thumbnail could not be captured.\n\nDiscussion\n\nThis method captures the thumbnail image synchronously from the current movie (which is accessible from the MPMovieSourceType.unknown property).\n\nNote\n\nThis method is not successful when the source URL is an HTTP Live Streaming (HLS) content source. The returned value for an HLS source is an empty UIImage object. See HTTP Live Streaming Overview.\n\nSee Also\nGenerating thumbnail images\nfunc requestThumbnailImages(atTimes: [Any]!, timeOption: MPMovieTimeOption)\nCaptures one or more thumbnail images asynchronously from the current movie.\nDeprecated\nfunc cancelAllThumbnailImageRequests()\nCancels all pending asynchronous thumbnail image requests.\nDeprecated"
  },
  {
    "title": "cancelAllThumbnailImageRequests()",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmovieplayercontroller/1620811-cancelallthumbnailimagerequests",
    "html": "Discussion\n\nThis method cancels only requests made using the requestThumbnailImages(atTimes:timeOption:) method. It does not cancel requests made synchronously using the thumbnailImage(atTime:timeOption:) method.\n\nSee Also\nGenerating thumbnail images\nfunc thumbnailImage(atTime: TimeInterval, timeOption: MPMovieTimeOption) -> UIImage!\nCaptures and returns a thumbnail image from the current movie.\nDeprecated\nfunc requestThumbnailImages(atTimes: [Any]!, timeOption: MPMovieTimeOption)\nCaptures one or more thumbnail images asynchronously from the current movie.\nDeprecated"
  },
  {
    "title": "errorLog",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmovieplayercontroller/1620798-errorlog",
    "html": "Discussion\n\nCan be nil. For information about movie error logs, refer to MPMovieErrorLog.\n\nSee Also\nRetrieving movie logs\nvar accessLog: MPMovieAccessLog!\nA snapshot of the network playback log for the movie player if it is playing a network stream.\nDeprecated"
  },
  {
    "title": "init(from:)",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmusicplayerplayparameters/2920442-init",
    "html": "Relationships\nFrom Protocol\nDecodable\nSee Also\nEncoding and decoding\nfunc encode(to: any Encoder)\nEncodes the parameters object into the given encoder."
  },
  {
    "title": "encode(to:)",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmusicplayerplayparameters/2920443-encode",
    "html": "Relationships\nFrom Protocol\nEncodable\nSee Also\nEncoding and decoding\ninit(from: any Decoder)\nCreates a new parameters object by decoding from the given decoder."
  },
  {
    "title": "init(dictionary:)",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmusicplayerplayparameters/2919975-init",
    "html": "Parameters\ndictionary\n\nThe JSON information returned from a MusicKit query.\n\nReturn Value\n\nA new play parameters object consisting of the information retrieved from MusicKit.\n\nDiscussion\n\nCreate a new MPMusicPlayerPlayParameters object using the JSON information returned from a MusicKit query."
  },
  {
    "title": "type",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpseekcommandevent/1616783-type",
    "html": "Discussion\n\nThe type property declares if a seek command is beginning or ending."
  },
  {
    "title": "MPSeekCommandEventType",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpseekcommandeventtype",
    "html": "Topics\nEvent types\ncase beginSeeking\nIndicates the external media player began seeking.\ncase endSeeking\nIndicates the external media player stopped seeking.\nRelationships\nConforms To\nSendable"
  },
  {
    "title": "init",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmediapickercontroller/1808935-init",
    "html": "Return Value\n\nA new media item picker.\n\nOverview\n\nThe default media type for a media item picker is MPMediaTypeAny.\n\nSee Also\nInitializing a media item picker\n- initWithMediaTypes:\nInitializes a media item picker for specified media types."
  },
  {
    "title": "Playback finished notification key",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmovieplayercontroller/playback_finished_notification_key",
    "html": "Topics\nConstants\nlet MPMoviePlayerPlaybackDidFinishReasonUserInfoKey: String\nDeprecated"
  },
  {
    "title": "Thumbnail notification user info keys",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmovieplayercontroller/thumbnail_notification_user_info_keys",
    "html": "Topics\nConstants\nlet MPMoviePlayerThumbnailImageKey: String\nDeprecated\nlet MPMoviePlayerThumbnailTimeKey: String\nDeprecated\nlet MPMoviePlayerThumbnailErrorKey: String\nDeprecated"
  },
  {
    "title": "MPMoviePlayerPlaybackDidFinishReasonUserInfoKey",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmovieplayerplaybackdidfinishreasonuserinfokey",
    "html": "Discussion\n\nThe value of this key is an NSNumber containing an integer value that represents one of the MPMovieFinishReason constants."
  },
  {
    "title": "Fullscreen notification keys",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmovieplayercontroller/fullscreen_notification_keys",
    "html": "Topics\nConstants\nlet MPMoviePlayerFullscreenAnimationDurationUserInfoKey: String\nDeprecated\nlet MPMoviePlayerFullscreenAnimationCurveUserInfoKey: String\nDeprecated"
  },
  {
    "title": "MPMovieErrorLogEvent",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmovieerrorlogevent",
    "html": "Overview\n\nAll movie error log event properties are read-only. For a description of movie error logs, see MPMovieErrorLog.\n\nTopics\nMovie error log event properties\nvar date: Date!\nThe date and time when the error occurred.\nvar uri: String!\nThe URI of the item playing when the error occurred.\nvar serverAddress: String!\nThe IP address of the web server that was the source of the error.\nvar playbackSessionID: String!\nA globally unique identifier (GUID) for the playback session.\nvar errorStatusCode: Int\nA unique error code identifier.\nvar errorDomain: String!\nThe network domain of the error.\nvar errorComment: String!\nA description of the error.\nRelationships\nInherits From\nNSObject\nConforms To\nNSCopying\nSee Also\nDeprecated symbols\nclass MPMovieAccessLog\nKey metrics about network playback for an associated movie player that’s playing streamed content.\nDeprecated\nclass MPMovieAccessLogEvent\nA single piece of information for a movie access log.\nDeprecated\nclass MPMovieErrorLog\nData describing network resource playback failures for the associated movie player, including timestamps indicating when each failure occurred.\nDeprecated\nstruct MPMovieLoadState\nConstants describing the network load state of the movie player.\nDeprecated\nstruct MPMovieMediaTypeMask\nThe types of content available in the movie file.\nDeprecated\nclass MPMoviePlayerController\nA type of movie player that manages the playback of a movie from a file or a network stream.\nDeprecated\nclass MPMoviePlayerViewController\nA simple view controller for displaying full-screen movies.\nDeprecated\nclass MPTimedMetadata\nA timed metadata object that carries time-based information within HTTP streamed media.\nDeprecated\nclass MPPlayableContentManager\nA shared content manager for controlling interactions between your media app and system-provided or external media player interfaces.\nDeprecated\nclass MPPlayableContentManagerContext\nAn object representing the current state of the playable endpoint.\nDeprecated\nclass var iPodMusicPlayer: MPMusicPlayerController\nReturns the iPod music player, which controls the iPod app’s state.\nDeprecated\ninit(image: UIImage)\nInitializes a media item artwork instance with a full-size image.\nDeprecated\nvar imageCropRect: CGRect\nThe bounds, in points, of the content area for the full size image associated with the media item artwork.\nvar showsRouteButton: Bool\nA Boolean value that indicates whether the route button is visible in the volume view.\nDeprecated\nfunc routeButtonImage(for: UIControl.State) -> UIImage?\nReturns the button image associated with the specified control state.\nDeprecated\nfunc routeButtonRect(forBounds: CGRect) -> CGRect\nReturns the drawing rectangle for the route button.\nDeprecated\nfunc setRouteButtonImage(UIImage?, for: UIControl.State)\nAssigns a button image to the specified control states.\nDeprecated\nvar areWirelessRoutesAvailable: Bool\nA Boolean value indicating wireless routes are available.\nDeprecated\nvar isWirelessRouteActive: Bool\nA Boolean value that indicates whether the wireless route is active.\nDeprecated\nstatic let MPVolumeViewWirelessRouteActiveDidChange: NSNotification.Name\nIndicates the active wireless route changed.\nDeprecated\nstatic let MPVolumeViewWirelessRoutesAvailableDidChange: NSNotification.Name\nIndicates the available wireless routes changed.\nDeprecated\nGlobal volume setting methods\nGlobal functions for setting the volume alert window status."
  },
  {
    "title": "MPVolumeSettingsAlertIsVisible()",
    "url": "https://developer.apple.com/documentation/mediaplayer/1623910-mpvolumesettingsalertisvisible",
    "html": "Return Value\n\ntrue if the volume alert is visible; otherwise, false.\n\nSee Also\nGlobal volume setting methods\nfunc MPVolumeSettingsAlertShow()\nDisplays an alert panel for controlling the system volume.\nDeprecated\nfunc MPVolumeSettingsAlertHide()\nHides the alert panel that controls the system volume.\nDeprecated"
  },
  {
    "title": "MPMovieFinishReason",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmoviefinishreason",
    "html": "Topics\nConstants\ncase playbackEnded\ncase playbackError\ncase userExited\nRelationships\nConforms To\nSendable"
  },
  {
    "title": "MPMovieRepeatMode",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmovierepeatmode",
    "html": "Topics\nConstants\ncase none\ncase one\nRelationships\nConforms To\nSendable"
  },
  {
    "title": "init(contentURL:)",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmovieplayercontroller/1620850-init",
    "html": "Parameters\nurl\n\nThe location of the movie file. This file must be located either in your app directory or on a remote server.\n\nReturn Value\n\nThe movie player object.\n\nDiscussion\n\nThis method initializes a movie player, but does not prepare it for playback. To prepare a new movie player for playback, call the prepareToPlay() method, described in MPMediaPlayback.\n\nTo be notified when a new movie player is ready to play, register for the MPMoviePlayerLoadStateDidChange notification. You can then check load state by accessing the loadState property.\n\nTo check for errors in URL loading, register for the MPMoviePlayerPlaybackDidFinish notification. On error, this notification contains an NSError object available using the @\"error\" key in the notification’s userInfo dictionary."
  },
  {
    "title": "MPNowPlayingPlaybackState.stopped",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpnowplayingplaybackstate/stopped",
    "html": "See Also\nPlayback states\ncase unknown\nThe current state of the app is unknown.\ncase playing\nThe app is currently playing a media item.\ncase paused\nThe app is currently paused.\ncase interrupted\nThe app has been interrupted during playback."
  },
  {
    "title": "MPNowPlayingPlaybackState.interrupted",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpnowplayingplaybackstate/interrupted",
    "html": "See Also\nPlayback states\ncase unknown\nThe current state of the app is unknown.\ncase playing\nThe app is currently playing a media item.\ncase paused\nThe app is currently paused.\ncase stopped\nThe app has stopped playing."
  },
  {
    "title": "MPNowPlayingInfoMediaType.audio",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpnowplayinginfomediatype/audio",
    "html": "See Also\nMedia types\ncase none\nThere is no now playing media item.\ncase video\nThe now playing media item is a video item."
  },
  {
    "title": "MPMediaGrouping.albumArtist",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmediagrouping/albumartist",
    "html": "See Also\nMedia query keys\ncase title\nGroups and sorts media item collections by title. For songs, for example, the title is the song name. This is the default grouping key.\ncase album\nGroups and sorts media item collections by album, and sorts songs within an album by track order.\ncase artist\nGroups and sorts media item collections by performing artist.\ncase composer\nGroups and sorts media item collections by composer.\ncase genre\nGroups and sorts media item collections by musical or film genre.\ncase playlist\nGroups and sorts media item collections by playlist.\ncase podcastTitle\nGroups and sorts media item collections by podcast title."
  },
  {
    "title": "MPAdTimeRange",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpadtimerange",
    "html": "Overview\n\nThis value must be in bounds of the duration of the current player item.\n\nTopics\nCreating an Ad Time Range\ninit(CMTimeRange)\nCreates a Media Player time range that indicates where an ad break exists in the current player.\nInspecting an Ad Time Range\nvar timeRange: CMTimeRange\nA Media Player time range that indicates where an ad break exists in the current player.\nRelationships\nInherits From\nNSObject\nConforms To\nNSCopying"
  },
  {
    "title": "MPChangeRepeatModeCommand",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpchangerepeatmodecommand",
    "html": "Topics\nRetrieving the current repeat option\nvar currentRepeatType: MPRepeatType\nThe current repeat option for a media item.\nRelationships\nInherits From\nMPRemoteCommand\nSee Also\nResponding to changes to media playback mode events\nclass MPChangePlaybackRateCommand\nAn object that responds to requests to change the playback rate of the playing item.\nclass MPChangePlaybackRateCommandEvent\nAn event requesting a change in the playback rate.\nclass MPChangeLanguageOptionCommandEvent\nAn event requesting a change in the language option.\nclass MPChangeRepeatModeCommandEvent\nAn event requesting a change in the repeat mode.\nclass MPChangeShuffleModeCommand\nAn object that responds to requests to change the current shuffle mode used during playback.\nclass MPChangeShuffleModeCommandEvent\nAn event requesting a change in the shuffle mode.\nenum MPRepeatType\nIndicates which items to play repeatedly.\nenum MPShuffleType\nIndicates which item types to shuffle."
  },
  {
    "title": "MPLanguageOptionCharacteristicDubbedTranslation",
    "url": "https://developer.apple.com/documentation/mediaplayer/mplanguageoptioncharacteristicdubbedtranslation",
    "html": "See Also\nLanguage option characteristic constants\nlet MPLanguageOptionCharacteristicContainsOnlyForcedSubtitles: String\nIndicates that the language option presents only forced subtitles.\nlet MPLanguageOptionCharacteristicDescribesMusicAndSound: String\nIndicates that the language option includes legible content in the language of its specified locale that describes music and sound effects occurring in program audio.\nlet MPLanguageOptionCharacteristicDescribesVideo: String\nIndicates that the language option includes audible content that describes the visual portion of the presentation.\nlet MPLanguageOptionCharacteristicEasyToRead: String\nIndicates that the language option provides legible content in the language of its specified locale and that the content was edited for ease of reading.\nlet MPLanguageOptionCharacteristicIsAuxiliaryContent: String\nIndicates that the language option includes content that’s marked by the content author as auxiliary to the presentation of the language option.\nlet MPLanguageOptionCharacteristicIsMainProgramContent: String\nIndicates that the language option includes content that’s marked by the content author as intrinsic to the presentation of the language option.\nlet MPLanguageOptionCharacteristicLanguageTranslation: String\nIndicates that the language option contains a translation in the language of its specified locale.\nlet MPLanguageOptionCharacteristicTranscribesSpokenDialog: String\nIndicates that the language option includes legible content in the language of its specified locale that transcribes spoken dialog.\nlet MPLanguageOptionCharacteristicVoiceOverTranslation: String\nIndicates that the language option includes voice over content in the language of its specified locale describes translated dialog."
  },
  {
    "title": "MPChangeRepeatModeCommandEvent",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpchangerepeatmodecommandevent",
    "html": "Topics\nChanging the repeat type\nvar repeatType: MPRepeatType\nThe repeat type used when fulfilling the event request.\nvar preservesRepeatMode: Bool\nA Boolean value that indicates whether the chosen repeat mode is preserved between playback sessions.\nRelationships\nInherits From\nMPRemoteCommandEvent\nSee Also\nResponding to changes to media playback mode events\nclass MPChangePlaybackRateCommand\nAn object that responds to requests to change the playback rate of the playing item.\nclass MPChangePlaybackRateCommandEvent\nAn event requesting a change in the playback rate.\nclass MPChangeLanguageOptionCommandEvent\nAn event requesting a change in the language option.\nclass MPChangeRepeatModeCommand\nAn object that responds to requests to change the current repeat mode used during playback.\nclass MPChangeShuffleModeCommand\nAn object that responds to requests to change the current shuffle mode used during playback.\nclass MPChangeShuffleModeCommandEvent\nAn event requesting a change in the shuffle mode.\nenum MPRepeatType\nIndicates which items to play repeatedly.\nenum MPShuffleType\nIndicates which item types to shuffle."
  },
  {
    "title": "MPMediaItemPropertyDateAdded",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmediaitempropertydateadded",
    "html": "Discussion\n\nValue is a NSDate object.\n\nSee Also\nUser-defined property keys\nlet MPMediaItemPropertySkipCount: String\nThe number of times the user has skipped playing the item.\nlet MPMediaItemPropertyRating: String\nThe user-specified rating of the object in the range [0...5], where a value of 5 indicates the most favorable rating.\nlet MPMediaItemPropertyLastPlayedDate: String\nThe most recent calendar date on which the user played the media item.\nlet MPMediaItemPropertyUserGrouping: String\nCorresponds to the “Grouping” field in the Info tab in the Get Info dialog in iTunes.\nlet MPMediaItemPropertyBookmarkTime: String\nThe user’s place in the media item the most recent time it was played."
  },
  {
    "title": "MPLanguageOptionCharacteristicIsMainProgramContent",
    "url": "https://developer.apple.com/documentation/mediaplayer/mplanguageoptioncharacteristicismainprogramcontent",
    "html": "Discussion\n\nAn option that presents the main program audio for the presentation, regardless of locale, would typically have this characteristic. The system infers the presence of this characteristic for a language option and considers any option that doesn’t have the characteristic MPLanguageOptionCharacteristicIsAuxiliaryContent to have the characteristic.\n\nSee Also\nLanguage option characteristic constants\nlet MPLanguageOptionCharacteristicContainsOnlyForcedSubtitles: String\nIndicates that the language option presents only forced subtitles.\nlet MPLanguageOptionCharacteristicDescribesMusicAndSound: String\nIndicates that the language option includes legible content in the language of its specified locale that describes music and sound effects occurring in program audio.\nlet MPLanguageOptionCharacteristicDescribesVideo: String\nIndicates that the language option includes audible content that describes the visual portion of the presentation.\nlet MPLanguageOptionCharacteristicDubbedTranslation: String\nIndicates that the language option includes content that contains a dubbed translation.\nlet MPLanguageOptionCharacteristicEasyToRead: String\nIndicates that the language option provides legible content in the language of its specified locale and that the content was edited for ease of reading.\nlet MPLanguageOptionCharacteristicIsAuxiliaryContent: String\nIndicates that the language option includes content that’s marked by the content author as auxiliary to the presentation of the language option.\nlet MPLanguageOptionCharacteristicLanguageTranslation: String\nIndicates that the language option contains a translation in the language of its specified locale.\nlet MPLanguageOptionCharacteristicTranscribesSpokenDialog: String\nIndicates that the language option includes legible content in the language of its specified locale that transcribes spoken dialog.\nlet MPLanguageOptionCharacteristicVoiceOverTranslation: String\nIndicates that the language option includes voice over content in the language of its specified locale describes translated dialog."
  },
  {
    "title": "MPLanguageOptionCharacteristicLanguageTranslation",
    "url": "https://developer.apple.com/documentation/mediaplayer/mplanguageoptioncharacteristiclanguagetranslation",
    "html": "See Also\nLanguage option characteristic constants\nlet MPLanguageOptionCharacteristicContainsOnlyForcedSubtitles: String\nIndicates that the language option presents only forced subtitles.\nlet MPLanguageOptionCharacteristicDescribesMusicAndSound: String\nIndicates that the language option includes legible content in the language of its specified locale that describes music and sound effects occurring in program audio.\nlet MPLanguageOptionCharacteristicDescribesVideo: String\nIndicates that the language option includes audible content that describes the visual portion of the presentation.\nlet MPLanguageOptionCharacteristicDubbedTranslation: String\nIndicates that the language option includes content that contains a dubbed translation.\nlet MPLanguageOptionCharacteristicEasyToRead: String\nIndicates that the language option provides legible content in the language of its specified locale and that the content was edited for ease of reading.\nlet MPLanguageOptionCharacteristicIsAuxiliaryContent: String\nIndicates that the language option includes content that’s marked by the content author as auxiliary to the presentation of the language option.\nlet MPLanguageOptionCharacteristicIsMainProgramContent: String\nIndicates that the language option includes content that’s marked by the content author as intrinsic to the presentation of the language option.\nlet MPLanguageOptionCharacteristicTranscribesSpokenDialog: String\nIndicates that the language option includes legible content in the language of its specified locale that transcribes spoken dialog.\nlet MPLanguageOptionCharacteristicVoiceOverTranslation: String\nIndicates that the language option includes voice over content in the language of its specified locale describes translated dialog."
  },
  {
    "title": "MPLanguageOptionCharacteristicVoiceOverTranslation",
    "url": "https://developer.apple.com/documentation/mediaplayer/mplanguageoptioncharacteristicvoiceovertranslation",
    "html": "See Also\nLanguage option characteristic constants\nlet MPLanguageOptionCharacteristicContainsOnlyForcedSubtitles: String\nIndicates that the language option presents only forced subtitles.\nlet MPLanguageOptionCharacteristicDescribesMusicAndSound: String\nIndicates that the language option includes legible content in the language of its specified locale that describes music and sound effects occurring in program audio.\nlet MPLanguageOptionCharacteristicDescribesVideo: String\nIndicates that the language option includes audible content that describes the visual portion of the presentation.\nlet MPLanguageOptionCharacteristicDubbedTranslation: String\nIndicates that the language option includes content that contains a dubbed translation.\nlet MPLanguageOptionCharacteristicEasyToRead: String\nIndicates that the language option provides legible content in the language of its specified locale and that the content was edited for ease of reading.\nlet MPLanguageOptionCharacteristicIsAuxiliaryContent: String\nIndicates that the language option includes content that’s marked by the content author as auxiliary to the presentation of the language option.\nlet MPLanguageOptionCharacteristicIsMainProgramContent: String\nIndicates that the language option includes content that’s marked by the content author as intrinsic to the presentation of the language option.\nlet MPLanguageOptionCharacteristicLanguageTranslation: String\nIndicates that the language option contains a translation in the language of its specified locale.\nlet MPLanguageOptionCharacteristicTranscribesSpokenDialog: String\nIndicates that the language option includes legible content in the language of its specified locale that transcribes spoken dialog."
  },
  {
    "title": "MPLanguageOptionCharacteristicTranscribesSpokenDialog",
    "url": "https://developer.apple.com/documentation/mediaplayer/mplanguageoptioncharacteristictranscribesspokendialog",
    "html": "Discussion\n\nIt’s possible for a legible option to include both transcriptions of spoken dialog and descriptions of music and sound effects.\n\nSee Also\nLanguage option characteristic constants\nlet MPLanguageOptionCharacteristicContainsOnlyForcedSubtitles: String\nIndicates that the language option presents only forced subtitles.\nlet MPLanguageOptionCharacteristicDescribesMusicAndSound: String\nIndicates that the language option includes legible content in the language of its specified locale that describes music and sound effects occurring in program audio.\nlet MPLanguageOptionCharacteristicDescribesVideo: String\nIndicates that the language option includes audible content that describes the visual portion of the presentation.\nlet MPLanguageOptionCharacteristicDubbedTranslation: String\nIndicates that the language option includes content that contains a dubbed translation.\nlet MPLanguageOptionCharacteristicEasyToRead: String\nIndicates that the language option provides legible content in the language of its specified locale and that the content was edited for ease of reading.\nlet MPLanguageOptionCharacteristicIsAuxiliaryContent: String\nIndicates that the language option includes content that’s marked by the content author as auxiliary to the presentation of the language option.\nlet MPLanguageOptionCharacteristicIsMainProgramContent: String\nIndicates that the language option includes content that’s marked by the content author as intrinsic to the presentation of the language option.\nlet MPLanguageOptionCharacteristicLanguageTranslation: String\nIndicates that the language option contains a translation in the language of its specified locale.\nlet MPLanguageOptionCharacteristicVoiceOverTranslation: String\nIndicates that the language option includes voice over content in the language of its specified locale describes translated dialog."
  },
  {
    "title": "displayName",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpnowplayinginfolanguageoption/1623145-displayname",
    "html": "See Also\nRetrieving language option properties\nvar identifier: String?\nThe unique identifier for the language option.\nvar languageOptionCharacteristics: [String]?\nThe characteristics that describe the content of the language option.\nvar languageTag: String?\nThe abbreviated language code for the language option.\nvar languageOptionType: MPNowPlayingInfoLanguageOptionType\nThe type of language option.\nenum MPNowPlayingInfoLanguageOptionType\nThe language option type to use for the Now Playing item."
  },
  {
    "title": "MPNowPlayingInfoLanguageOptionType",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpnowplayinginfolanguageoptiontype",
    "html": "Topics\nLanguage option types\ncase audible\nIndicates an audible language option is used.\ncase legible\nIndicates a written language option is used.\nRelationships\nConforms To\nSendable\nSee Also\nRetrieving language option properties\nvar displayName: String?\nThe display name for a language option.\nvar identifier: String?\nThe unique identifier for the language option.\nvar languageOptionCharacteristics: [String]?\nThe characteristics that describe the content of the language option.\nvar languageTag: String?\nThe abbreviated language code for the language option.\nvar languageOptionType: MPNowPlayingInfoLanguageOptionType\nThe type of language option."
  },
  {
    "title": "init(type:languageTag:characteristics:displayName:identifier:)",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpnowplayinginfolanguageoption/1623159-init",
    "html": "Parameters\nlanguageOptionType\n\nThe type, audio or legible, for the language option.\n\nlanguageTag\n\nThe IETF BCP 47 language tag for the language option.\n\nlanguageOptionCharacteristics\n\nAn array of characteristics that describes the language option.\n\ndisplayName\n\nThe name for displaying the language option.\n\nidentifier\n\nA unique identifier for the language option.\n\nReturn Value\n\nA newly created language option containing the passed characteristics."
  },
  {
    "title": "identifier",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpnowplayinginfolanguageoption/1623135-identifier",
    "html": "See Also\nRetrieving language option properties\nvar displayName: String?\nThe display name for a language option.\nvar languageOptionCharacteristics: [String]?\nThe characteristics that describe the content of the language option.\nvar languageTag: String?\nThe abbreviated language code for the language option.\nvar languageOptionType: MPNowPlayingInfoLanguageOptionType\nThe type of language option.\nenum MPNowPlayingInfoLanguageOptionType\nThe language option type to use for the Now Playing item."
  },
  {
    "title": "languageTag",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpnowplayinginfolanguageoption/1623160-languagetag",
    "html": "Discussion\n\nThis property contains the IETF BCP 47 language code for the language option. A value of nil indicates that this option is disabled.\n\nSee Also\nRetrieving language option properties\nvar displayName: String?\nThe display name for a language option.\nvar identifier: String?\nThe unique identifier for the language option.\nvar languageOptionCharacteristics: [String]?\nThe characteristics that describe the content of the language option.\nvar languageOptionType: MPNowPlayingInfoLanguageOptionType\nThe type of language option.\nenum MPNowPlayingInfoLanguageOptionType\nThe language option type to use for the Now Playing item."
  },
  {
    "title": "MPRemoteCommand",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpremotecommand",
    "html": "Overview\n\nThe Media Player framework defines a standard set of remote command objects for handling media-related events. When an accessory or iOS user interface generates a remote control event, the system notifies the corresponding command object on the shared MPRemoteCommandCenter instance. That command object executes any attached handlers.\n\nTo respond to a particular event, register a handler with the appropriate MPRemoteCommand object.\n\nListing 1 Registering a remote control event handler\n// Get the shared command center.\nlet commandCenter = MPRemoteCommandCenter.shared()\n\n\n// Add a handler for the play command.\ncommandCenter.playCommand.addTarget { [unowned self] event in\n    if self.player.rate == 0.0 {\n        self.player.play()\n        return .success\n    }\n    return .commandFailed\n}\n\n\nIf you explicitly don’t want to enable a given command, fetch the command object and set its enabled property to false. Disabling a remote command lets the system know that it shouldn’t display any related UI for that command when your app is the Now Playing app.\n\nThe framework defines many subclasses to handle specific kinds of commands. Sometimes, these subclasses let you specify other information related to the command. For example, feedback commands let you specify a localized string that describes the meaning of the feedback. When supporting a particular command, be sure to look up the specific class used to handle those events.\n\nTopics\nHandling events\nfunc addTarget(handler: (MPRemoteCommandEvent) -> MPRemoteCommandHandlerStatus) -> Any\nAdds a block to be called when an event is received.\nfunc addTarget(Any, action: Selector)\nAdds a target object to be called when an event is received.\nfunc removeTarget(Any?)\nRemoves a target from the remote command object.\nfunc removeTarget(Any, action: Selector?)\nRemoves a target and action from a remote command object.\nenum MPRemoteCommandHandlerStatus\nConstants indicating the status of a command.\nEnabling a command object\nvar isEnabled: Bool\nA Boolean value that indicates whether a user can interact with the displayed element.\nRelationships\nInherits From\nNSObject\nSee Also\nSetting up the remote event handler\nBecoming a now playable app\nEnsure your app is eligible to become the Now Playing app by adopting best practices for providing Now Playing info and registering for remote command center actions.\nclass MPRemoteCommandCenter\nAn object that responds to remote control events sent by external accessories and system controls.\nclass MPRemoteCommandEvent\nA description of a command sent by an external media player."
  },
  {
    "title": "isAutomaticLegibleLanguageOption()",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpnowplayinginfolanguageoption/1623144-isautomaticlegiblelanguageoption",
    "html": "Return Value\n\ntrue if the framework uses the system preferences to determine the best legible language option; otherwise false.\n\nSee Also\nRetrieving a language option based on system preferences\nfunc isAutomaticAudibleLanguageOption() -> Bool\nReturns a Boolean value that determines whether to use the best audible language option based on the system preferences."
  },
  {
    "title": "controlStyle",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmovieplayercontroller/1620935-controlstyle",
    "html": "Discussion\n\nThe default value of this property is default. You can change the value of this property to change the style of the controls or to hide the controls altogether. For a list of available control styles, see MPMovieControlStyle.\n\nSee Also\nAccessing movie properties\nvar contentURL: URL!\nThe URL that points to the movie file.\nDeprecated\nvar movieSourceType: MPMovieSourceType\nThe playback type of the movie.\nDeprecated\nvar movieMediaTypes: MPMovieMediaTypeMask\nThe types of media available in the movie.\nDeprecated\nvar allowsAirPlay: Bool\nSpecifies whether the movie player allows AirPlay movie playback.\nDeprecated\nvar isAirPlayVideoActive: Bool\nIndicates whether the movie player is currently playing video via AirPlay.\nDeprecated\nvar naturalSize: CGSize\nThe width and height of the movie frame.\nDeprecated\nvar isFullscreen: Bool\nA Boolean that indicates whether the movie player is in full-screen mode.\nDeprecated\nfunc setFullscreen(Bool, animated: Bool)\nCauses the movie player to enter or exit full-screen mode.\nDeprecated\nvar scalingMode: MPMovieScalingMode\nThe scaling mode to use when displaying the movie.\nDeprecated\nvar useApplicationAudioSession: Bool\nA Boolean value that indicates whether the movie player should use the app’s audio session.\nDeprecated"
  },
  {
    "title": "view",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmovieplayercontroller/1620869-view",
    "html": "Discussion\n\nThis property contains the view used for presenting the video content. This view incorporates all the background, content, and controls needed to display movies. You can incorporate this view into your own view hierarchies or present it by itself using a view controller.\n\nTo embed the view into your own view hierarchies, add it as a subview to one of your existing views. A good place to do this is in the loadView() or viewDidLoad() method of the custom view controller that presents your view hierarchy. You are free to change the view’s frame rectangle to accommodate the space available in your view hierarchy. The movie player uses the value in the scalingMode property to scale the movie content to match the frame you specify.\n\nIf you want to present the view by itself—that is, without embedding it in an existing view hierarchy—you can use an instance of the MPMoviePlayerViewController class to manage the presentation of the view. That class works directly with the movie player controller to present the view by itself.\n\nYou can add subviews to the view in this property. You might do this in cases where you want to display custom playback controls or add other custom content that is relevant to your app.\n\nSee Also\nAccessing the view\nvar backgroundView: UIView!\nA customizable view that is displayed behind the movie content.\nDeprecated"
  },
  {
    "title": "duration",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmovieplayercontroller/1620784-duration",
    "html": "Discussion\n\nIf the duration of the movie is not known, the value in this property is 0.0. If the duration is subsequently determined, this property is updated and a MPMovieDurationAvailable notification is posted.\n\nSee Also\nAccessing the movie duration\nvar playableDuration: TimeInterval\nThe amount of currently playable content.\nDeprecated"
  },
  {
    "title": "loadState",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmovieplayercontroller/1620879-loadstate",
    "html": "Discussion\n\nSee the MPMovieLoadState enumeration for possible values of this property. To be notified of changes to the load state of a movie player, register for the MPMoviePlayerLoadStateDidChange notification.\n\nSee Also\nControlling and monitoring playback\nvar playbackState: MPMoviePlaybackState\nThe current playback state of the movie player.\nDeprecated\nvar initialPlaybackTime: TimeInterval\nThe time, specified in seconds within the video timeline, when playback should start.\nDeprecated\nvar endPlaybackTime: TimeInterval\nThe end time (measured in seconds) for playback of the movie.\nDeprecated\nvar shouldAutoplay: Bool\nA Boolean that indicates whether a movie should begin playback automatically.\nDeprecated\nvar readyForDisplay: Bool\nA Boolean that indicates whether the first video frame of the movie is ready to be displayed.\nDeprecated\nvar repeatMode: MPMovieRepeatMode\nDetermines how the movie player repeats the playback of the movie.\nDeprecated\nvar timedMetadata: [Any]!\nObtains the most recent time-based metadata provided by the streamed movie.\nDeprecated"
  },
  {
    "title": "playableDuration",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmovieplayercontroller/1620803-playableduration",
    "html": "Discussion\n\nFor progressively downloaded network content, this property reflects the amount of content that can be played now.\n\nSee Also\nAccessing the movie duration\nvar duration: TimeInterval\nThe duration of the movie, measured in seconds.\nDeprecated"
  },
  {
    "title": "playbackState",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmovieplayercontroller/1620841-playbackstate",
    "html": "Discussion\n\nThe playback state is affected by programmatic calls to play, pause, or stop the movie player. It can also be affected by user interactions or by the network, in cases where streaming content cannot be buffered fast enough.\n\nSee the MPMoviePlaybackState enumeration for possible values of this property. To be notified of changes to the playback state of a movie player, register for the MPMoviePlayerPlaybackStateDidChange notification.\n\nSee Also\nControlling and monitoring playback\nvar loadState: MPMovieLoadState\nThe network load state of the movie player.\nDeprecated\nvar initialPlaybackTime: TimeInterval\nThe time, specified in seconds within the video timeline, when playback should start.\nDeprecated\nvar endPlaybackTime: TimeInterval\nThe end time (measured in seconds) for playback of the movie.\nDeprecated\nvar shouldAutoplay: Bool\nA Boolean that indicates whether a movie should begin playback automatically.\nDeprecated\nvar readyForDisplay: Bool\nA Boolean that indicates whether the first video frame of the movie is ready to be displayed.\nDeprecated\nvar repeatMode: MPMovieRepeatMode\nDetermines how the movie player repeats the playback of the movie.\nDeprecated\nvar timedMetadata: [Any]!\nObtains the most recent time-based metadata provided by the streamed movie.\nDeprecated"
  },
  {
    "title": "backgroundView",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmovieplayercontroller/1620819-backgroundview",
    "html": "Discussion\n\nThis view provides the backing content, on top of which the movie content is displayed. You can add subviews to the background view if you want to display custom background content.\n\nThis view is part of the view hierarchy returned by the view property.\n\nSee Also\nAccessing the view\nvar view: UIView!\nThe view containing the movie content and controls.\nDeprecated"
  },
  {
    "title": "MPPlayableContentManager",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpplayablecontentmanager",
    "html": "Overview\n\nImportant\n\nSome features of this class are specific to CarPlay, which requires a special entitlement issued by Apple. Apps without the correct entitlement won’t appear on the CarPlay home screen. See http://www.apple.com/ios/carplay/ for more information.\n\nThe app provides data to the content manager so that the media player can browse the content provided. A delegate provides the media player the ability to perform actions that manage the app’s playback queue.\n\nYou don’t create a new content manager directly, instead you grab the shared content manager using the shared() method. After getting the shared content manager, your next step depends on the features your app supports:\n\nTo provide content navigation and suggested content for CarPlay, immediately set both the dataSource and delegate properties. After setting these properties, use the beginUpdates() and endUpdates() methods to load the information from the data source.\n\nTo provide suggested content when the user connects headphones, a Bluetooth stereo, or another output device, set only the delegate property. After you set a delegate, iOS automatically calls methods in the MPPlayableContentDelegate protocol allowing you to suggest appropriate content.\n\nTopics\nProviding playable content\nvar dataSource: (any MPPlayableContentDataSource)?\nThe data source provided by the app.\nprotocol MPPlayableContentDataSource\nThe data source providing media metadata to external media players so they can build user interfaces displaying your app’s content.\nResponding to playback events\nvar delegate: (any MPPlayableContentDelegate)?\nA delegate that lets the media player manage the app’s playback queue.\nprotocol MPPlayableContentDelegate\nThe protocol used to let external media players send playback commands to an app.\nSetting the content manager\nclass func shared() -> Self\nReturns the current content manager instance.\nUpdating data\nfunc beginUpdates()\nUpdates several Media Player content items at once.\nfunc endUpdates()\nEnds a synchronized update.\nfunc reloadData()\nReloads the data from the data source.\nRetrieving information on currently playing items\nvar context: MPPlayableContentManagerContext\nThe current state of the playable content endpoint.\nvar nowPlayingIdentifiers: [String]\nThe content items currently playing based on their identifiers.\nRelationships\nInherits From\nNSObject\nSee Also\nDeprecated symbols\nclass MPMovieAccessLog\nKey metrics about network playback for an associated movie player that’s playing streamed content.\nDeprecated\nclass MPMovieAccessLogEvent\nA single piece of information for a movie access log.\nDeprecated\nclass MPMovieErrorLog\nData describing network resource playback failures for the associated movie player, including timestamps indicating when each failure occurred.\nDeprecated\nclass MPMovieErrorLogEvent\nA single piece of information for a movie error log.\nDeprecated\nstruct MPMovieLoadState\nConstants describing the network load state of the movie player.\nDeprecated\nstruct MPMovieMediaTypeMask\nThe types of content available in the movie file.\nDeprecated\nclass MPMoviePlayerController\nA type of movie player that manages the playback of a movie from a file or a network stream.\nDeprecated\nclass MPMoviePlayerViewController\nA simple view controller for displaying full-screen movies.\nDeprecated\nclass MPTimedMetadata\nA timed metadata object that carries time-based information within HTTP streamed media.\nDeprecated\nclass MPPlayableContentManagerContext\nAn object representing the current state of the playable endpoint.\nDeprecated\nclass var iPodMusicPlayer: MPMusicPlayerController\nReturns the iPod music player, which controls the iPod app’s state.\nDeprecated\ninit(image: UIImage)\nInitializes a media item artwork instance with a full-size image.\nDeprecated\nvar imageCropRect: CGRect\nThe bounds, in points, of the content area for the full size image associated with the media item artwork.\nvar showsRouteButton: Bool\nA Boolean value that indicates whether the route button is visible in the volume view.\nDeprecated\nfunc routeButtonImage(for: UIControl.State) -> UIImage?\nReturns the button image associated with the specified control state.\nDeprecated\nfunc routeButtonRect(forBounds: CGRect) -> CGRect\nReturns the drawing rectangle for the route button.\nDeprecated\nfunc setRouteButtonImage(UIImage?, for: UIControl.State)\nAssigns a button image to the specified control states.\nDeprecated\nvar areWirelessRoutesAvailable: Bool\nA Boolean value indicating wireless routes are available.\nDeprecated\nvar isWirelessRouteActive: Bool\nA Boolean value that indicates whether the wireless route is active.\nDeprecated\nstatic let MPVolumeViewWirelessRouteActiveDidChange: NSNotification.Name\nIndicates the active wireless route changed.\nDeprecated\nstatic let MPVolumeViewWirelessRoutesAvailableDidChange: NSNotification.Name\nIndicates the available wireless routes changed.\nDeprecated\nGlobal volume setting methods\nGlobal functions for setting the volume alert window status."
  },
  {
    "title": "init(identifier:)",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpcontentitem/1620152-init",
    "html": "Parameters\nidentifier\n\nA unique identifier for the content item.\n\nReturn Value\n\nThe created MPContentItem object.\n\nDiscussion\n\nEach media item identifier must be unique. The use of nonunique identifiers can prevent media items from updating properly. Create a new identifier when creating an MPContentItem object."
  },
  {
    "title": "identifier",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpcontentitem/1620157-identifier",
    "html": "Discussion\n\nAll media items must have a unique identifier. Identifiers must be unique so that Media Player can properly update existing media items or add new media items. Media items won’t update properly if multiple media items have the same identifier.\n\nSee Also\nRetrieving information about a media item\nvar artwork: MPMediaItemArtwork?\nA single image that’s associated with the media item.\nvar isContainer: Bool\nA Boolean value that indicates whether a media item is container of other items.\nvar isExplicitContent: Bool\nA Boolean value that indicates whether the media item contains explicit content.\nvar isPlayable: Bool\nA Boolean value that indicates whether a media item is able to be played.\nvar isStreamingContent: Bool\nA Boolean value that indicates whether the content item is streaming content.\nvar playbackProgress: Float\nThe amount of content played for the media item.\nvar subtitle: String?\nA secondary designator for the media item.\nvar title: String?\nThe public name of the media item.\nRelated Documentation\ninit(identifier: String)\nSets the identifier for a media item."
  },
  {
    "title": "MPRemoteCommandCenter",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpremotecommandcenter",
    "html": "Overview\n\nDon’t create instances of this class yourself. Instead, use the shared() method to retrieve the shared command center object. The properties of the shared command center object contain MPRemoteCommand objects that respond to the various kinds of remote control events. You configure these objects to respond to the events you’re interested to handle in your app.\n\nTopics\nRetrieving the shared instance\nclass func shared() -> MPRemoteCommandCenter\nReturns the shared object you use to access the system’s remote command objects.\nPlayback commands\nvar pauseCommand: MPRemoteCommand\nThe command object for pausing playback of the current item.\nvar playCommand: MPRemoteCommand\nThe command object for starting playback of the current item.\nvar stopCommand: MPRemoteCommand\nThe command object for stopping playback of the current item.\nvar togglePlayPauseCommand: MPRemoteCommand\nThe command object for toggling between playing and pausing the current item.\nNavigating between tracks\nvar nextTrackCommand: MPRemoteCommand\nThe command object for selecting the next track.\nvar previousTrackCommand: MPRemoteCommand\nThe command object for selecting the previous track.\nvar changeRepeatModeCommand: MPChangeRepeatModeCommand\nThe command object for changing the repeat mode.\nvar changeShuffleModeCommand: MPChangeShuffleModeCommand\nThe command object for changing the shuffle mode.\nNavigating a track’s contents\nvar changePlaybackRateCommand: MPChangePlaybackRateCommand\nThe command object for changing the playback rate of the current media item.\nvar seekBackwardCommand: MPRemoteCommand\nThe command object for seeking backward through a single media item.\nvar seekForwardCommand: MPRemoteCommand\nThe command object for seeking forward through a single media item.\nvar skipBackwardCommand: MPSkipIntervalCommand\nThe command object for playing a previous point in a media item.\nvar skipForwardCommand: MPSkipIntervalCommand\nThe command object for playing a future point in a media item.\nvar changePlaybackPositionCommand: MPChangePlaybackPositionCommand\nThe command object for changing the playback position in a media item.\nRating a media item\nvar ratingCommand: MPRatingCommand\nThe command object for rating a media item.\nvar likeCommand: MPFeedbackCommand\nThe command object for indicating that a user likes what is currently playing.\nvar dislikeCommand: MPFeedbackCommand\nThe command object for indicating that a user dislikes what is currently playing.\nBookmarking a media item\nvar bookmarkCommand: MPFeedbackCommand\nThe command object for indicating that a user wants to remember a media item.\nEnabling language options\nvar enableLanguageOptionCommand: MPRemoteCommand\nThe command object for enabling a language option.\nvar disableLanguageOptionCommand: MPRemoteCommand\nThe command object for disabling a language option\nRelationships\nInherits From\nNSObject\nSee Also\nSetting up the remote event handler\nBecoming a now playable app\nEnsure your app is eligible to become the Now Playing app by adopting best practices for providing Now Playing info and registering for remote command center actions.\nclass MPRemoteCommand\nAn object that responds to remote command events.\nclass MPRemoteCommandEvent\nA description of a command sent by an external media player."
  },
  {
    "title": "isExplicitContent",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpcontentitem/1771744-isexplicitcontent",
    "html": "Discussion\n\nWhen set to true, the designated content item’s identified as containing explicit content.\n\nSee Also\nRetrieving information about a media item\nvar artwork: MPMediaItemArtwork?\nA single image that’s associated with the media item.\nvar isContainer: Bool\nA Boolean value that indicates whether a media item is container of other items.\nvar identifier: String\nThe unique identifier for the media item.\nvar isPlayable: Bool\nA Boolean value that indicates whether a media item is able to be played.\nvar isStreamingContent: Bool\nA Boolean value that indicates whether the content item is streaming content.\nvar playbackProgress: Float\nThe amount of content played for the media item.\nvar subtitle: String?\nA secondary designator for the media item.\nvar title: String?\nThe public name of the media item."
  },
  {
    "title": "MPMediaLibraryAuthorizationStatus.authorized",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmedialibraryauthorizationstatus/authorized",
    "html": "See Also\nAuthorization statuses\ncase notDetermined\nThe user hasn't determined whether to authorize the use of their media library.\ncase denied\nThe app may not access the items in the user's media library.\ncase restricted\nThe app may access some of the content in the user's media library."
  },
  {
    "title": "hashValue",
    "url": "https://developer.apple.com/documentation/mediaplayer/mperror/3726625-hashvalue",
    "html": "See Also\nAccessing hash values\nfunc hash(into: inout Hasher)\nHashes the essential components of the value by passing them into the hasher."
  },
  {
    "title": "code",
    "url": "https://developer.apple.com/documentation/mediaplayer/mperror/3726623-code",
    "html": "See Also\nInspecting an error\nstatic var errorDomain: String\nA static string representation of the error domain.\nenum MPError.Code\nAn enumeration that represents error codes for framework operations.\nError constants\nError code constants for framework operations.\nvar errorCode: Int\nThe integer error code.\nvar userInfo: [String : Any]\nThe user information for the error.\nvar errorUserInfo: [String : Any]\nThe error user information for the error.\nvar localizedDescription: String\nA localized description of the error."
  },
  {
    "title": "MPRemoteCommandEvent",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpremotecommandevent",
    "html": "Topics\nRetrieving command information\nvar command: MPRemoteCommand\nThe command that sent the event.\nvar timestamp: TimeInterval\nThe time the event occurred.\nRelationships\nInherits From\nNSObject\nSee Also\nSetting up the remote event handler\nBecoming a now playable app\nEnsure your app is eligible to become the Now Playing app by adopting best practices for providing Now Playing info and registering for remote command center actions.\nclass MPRemoteCommandCenter\nAn object that responds to remote control events sent by external accessories and system controls.\nclass MPRemoteCommand\nAn object that responds to remote command events."
  },
  {
    "title": "MPMediaItemPropertyPlaybackStoreID",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmediaitempropertyplaybackstoreid",
    "html": "Discussion\n\nMatches the identifier used by MPMusicPlayerController to enqueue store tracks.\n\nSee Also\nProperty keys\nlet MPMediaItemPropertyPlaybackDuration: String\nThe playback duration of the media item.\nlet MPMediaItemPropertyAlbumTrackNumber: String\nThe track number of the media item, for a media item that is part of an album.\nlet MPMediaItemPropertyAlbumTrackCount: String\nThe number of tracks for the album that contains the media item.\nlet MPMediaItemPropertyDiscNumber: String\nThe disc number of the media item, for a media item that is part of a multidisc album.\nlet MPMediaItemPropertyDiscCount: String\nThe number of discs for the album that contains the media item.\nlet MPMediaItemPropertyArtwork: String\nThe artwork image for the media item.\nlet MPMediaItemPropertyLyrics: String\nThe lyrics for the media item.\nlet MPMediaItemPropertyReleaseDate: String\nThe date of the media item’s first public release.\nlet MPMediaItemPropertyBeatsPerMinute: String\nThe number of musical beats per minute for the media item.\nlet MPMediaItemPropertyComments: String\nTextual information about the media item.\nlet MPMediaItemPropertyAssetURL: String\nA URL that points to the media item.\nlet MPMediaItemPropertyIsExplicit: String\nA Boolean value that indicates whether the media item contains explicit (adult) lyrics or language.\nlet MPMediaItemPropertyIsPreorder: String\nA Boolean value that indicates whether the media item is a preorder."
  },
  {
    "title": "MPMediaItemPropertyLyrics",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmediaitempropertylyrics",
    "html": "Discussion\n\nThis value is an NSString object.\n\nSee Also\nProperty keys\nlet MPMediaItemPropertyPlaybackDuration: String\nThe playback duration of the media item.\nlet MPMediaItemPropertyAlbumTrackNumber: String\nThe track number of the media item, for a media item that is part of an album.\nlet MPMediaItemPropertyAlbumTrackCount: String\nThe number of tracks for the album that contains the media item.\nlet MPMediaItemPropertyDiscNumber: String\nThe disc number of the media item, for a media item that is part of a multidisc album.\nlet MPMediaItemPropertyDiscCount: String\nThe number of discs for the album that contains the media item.\nlet MPMediaItemPropertyArtwork: String\nThe artwork image for the media item.\nlet MPMediaItemPropertyReleaseDate: String\nThe date of the media item’s first public release.\nlet MPMediaItemPropertyBeatsPerMinute: String\nThe number of musical beats per minute for the media item.\nlet MPMediaItemPropertyComments: String\nTextual information about the media item.\nlet MPMediaItemPropertyAssetURL: String\nA URL that points to the media item.\nlet MPMediaItemPropertyIsExplicit: String\nA Boolean value that indicates whether the media item contains explicit (adult) lyrics or language.\nlet MPMediaItemPropertyIsPreorder: String\nA Boolean value that indicates whether the media item is a preorder.\nlet MPMediaItemPropertyPlaybackStoreID: String\nThe identifier for enqueueing store tracks."
  },
  {
    "title": "MPPlayableContentManagerContext",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpplayablecontentmanagercontext",
    "html": "Topics\nInspecting content manager properties\nvar contentLimitsEnforced: Bool\nA Boolean value that indicates whether the content server enforces content limits.\nvar endpointAvailable: Bool\nReturns a Boolean that indicates whether the content server is available.\nvar enforcedContentItemsCount: Int\nReturns the number of content items to display during content limiting.\nvar enforcedContentTreeDepth: Int\nThe maximum depth of the navigation hierarchy allowed by the content server.\nvar contentLimitsEnabled: Bool\nA Boolean value that indicates whether the content server enables content limits.\nRelationships\nInherits From\nNSObject\nSee Also\nDeprecated symbols\nclass MPMovieAccessLog\nKey metrics about network playback for an associated movie player that’s playing streamed content.\nDeprecated\nclass MPMovieAccessLogEvent\nA single piece of information for a movie access log.\nDeprecated\nclass MPMovieErrorLog\nData describing network resource playback failures for the associated movie player, including timestamps indicating when each failure occurred.\nDeprecated\nclass MPMovieErrorLogEvent\nA single piece of information for a movie error log.\nDeprecated\nstruct MPMovieLoadState\nConstants describing the network load state of the movie player.\nDeprecated\nstruct MPMovieMediaTypeMask\nThe types of content available in the movie file.\nDeprecated\nclass MPMoviePlayerController\nA type of movie player that manages the playback of a movie from a file or a network stream.\nDeprecated\nclass MPMoviePlayerViewController\nA simple view controller for displaying full-screen movies.\nDeprecated\nclass MPTimedMetadata\nA timed metadata object that carries time-based information within HTTP streamed media.\nDeprecated\nclass MPPlayableContentManager\nA shared content manager for controlling interactions between your media app and system-provided or external media player interfaces.\nDeprecated\nclass var iPodMusicPlayer: MPMusicPlayerController\nReturns the iPod music player, which controls the iPod app’s state.\nDeprecated\ninit(image: UIImage)\nInitializes a media item artwork instance with a full-size image.\nDeprecated\nvar imageCropRect: CGRect\nThe bounds, in points, of the content area for the full size image associated with the media item artwork.\nvar showsRouteButton: Bool\nA Boolean value that indicates whether the route button is visible in the volume view.\nDeprecated\nfunc routeButtonImage(for: UIControl.State) -> UIImage?\nReturns the button image associated with the specified control state.\nDeprecated\nfunc routeButtonRect(forBounds: CGRect) -> CGRect\nReturns the drawing rectangle for the route button.\nDeprecated\nfunc setRouteButtonImage(UIImage?, for: UIControl.State)\nAssigns a button image to the specified control states.\nDeprecated\nvar areWirelessRoutesAvailable: Bool\nA Boolean value indicating wireless routes are available.\nDeprecated\nvar isWirelessRouteActive: Bool\nA Boolean value that indicates whether the wireless route is active.\nDeprecated\nstatic let MPVolumeViewWirelessRouteActiveDidChange: NSNotification.Name\nIndicates the active wireless route changed.\nDeprecated\nstatic let MPVolumeViewWirelessRoutesAvailableDidChange: NSNotification.Name\nIndicates the available wireless routes changed.\nDeprecated\nGlobal volume setting methods\nGlobal functions for setting the volume alert window status."
  },
  {
    "title": "MPMoviePlayerViewController",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmovieplayerviewcontroller",
    "html": "Overview\n\nImportant\n\nThe MPMoviePlayerViewController class is formally deprecated in iOS 9. (The MPMoviePlayerController class is also formally deprecated.) To play video content in iOS 9 and later, instead use the AVPictureInPictureController or AVPlayerViewController class from the AVKit framework, or the WKWebView class from WebKit.\n\nUnlike using an MPMoviePlayerController object on its own to present a movie immediately, you can incorporate a movie player view controller wherever you would normally use a view controller. For example, you can present it using a tab bar or navigation bar-based interface, taking advantage of the transitions offered by those interfaces.\n\nTo present a movie player view controller modally, you typically use the presentMoviePlayerViewControllerAnimated(_:) method. This method is part of a category on the UIViewController class and is implemented by the Media Player framework. The presentMoviePlayerViewControllerAnimated(_:) method presents a movie player view controller using the standard transition animations for presenting video content. To dismiss a modally presented movie player view controller, call the dismissMoviePlayerViewControllerAnimated() method.\n\nTopics\nNew methods\ninit!(contentURL: URL!)\nReturns a movie player view controller initialized with the specified movie.\nvar moviePlayer: MPMoviePlayerController!\nThe movie player controller object used to present the movie.\nRelationships\nInherits From\nUIViewController\nSee Also\nDeprecated symbols\nclass MPMovieAccessLog\nKey metrics about network playback for an associated movie player that’s playing streamed content.\nDeprecated\nclass MPMovieAccessLogEvent\nA single piece of information for a movie access log.\nDeprecated\nclass MPMovieErrorLog\nData describing network resource playback failures for the associated movie player, including timestamps indicating when each failure occurred.\nDeprecated\nclass MPMovieErrorLogEvent\nA single piece of information for a movie error log.\nDeprecated\nstruct MPMovieLoadState\nConstants describing the network load state of the movie player.\nDeprecated\nstruct MPMovieMediaTypeMask\nThe types of content available in the movie file.\nDeprecated\nclass MPMoviePlayerController\nA type of movie player that manages the playback of a movie from a file or a network stream.\nDeprecated\nclass MPTimedMetadata\nA timed metadata object that carries time-based information within HTTP streamed media.\nDeprecated\nclass MPPlayableContentManager\nA shared content manager for controlling interactions between your media app and system-provided or external media player interfaces.\nDeprecated\nclass MPPlayableContentManagerContext\nAn object representing the current state of the playable endpoint.\nDeprecated\nclass var iPodMusicPlayer: MPMusicPlayerController\nReturns the iPod music player, which controls the iPod app’s state.\nDeprecated\ninit(image: UIImage)\nInitializes a media item artwork instance with a full-size image.\nDeprecated\nvar imageCropRect: CGRect\nThe bounds, in points, of the content area for the full size image associated with the media item artwork.\nvar showsRouteButton: Bool\nA Boolean value that indicates whether the route button is visible in the volume view.\nDeprecated\nfunc routeButtonImage(for: UIControl.State) -> UIImage?\nReturns the button image associated with the specified control state.\nDeprecated\nfunc routeButtonRect(forBounds: CGRect) -> CGRect\nReturns the drawing rectangle for the route button.\nDeprecated\nfunc setRouteButtonImage(UIImage?, for: UIControl.State)\nAssigns a button image to the specified control states.\nDeprecated\nvar areWirelessRoutesAvailable: Bool\nA Boolean value indicating wireless routes are available.\nDeprecated\nvar isWirelessRouteActive: Bool\nA Boolean value that indicates whether the wireless route is active.\nDeprecated\nstatic let MPVolumeViewWirelessRouteActiveDidChange: NSNotification.Name\nIndicates the active wireless route changed.\nDeprecated\nstatic let MPVolumeViewWirelessRoutesAvailableDidChange: NSNotification.Name\nIndicates the available wireless routes changed.\nDeprecated\nGlobal volume setting methods\nGlobal functions for setting the volume alert window status."
  },
  {
    "title": "MPTimedMetadata",
    "url": "https://developer.apple.com/documentation/mediaplayer/mptimedmetadata",
    "html": "Overview\n\nContent providers can embed these objects when creating a stream. The properties and constants in this class let you extract the metadata as you play the stream using an MPMoviePlayerController object. For example, the provider of a live sports video stream could use MPTimedMetadata instances to embed game scores, with timestamps, in the stream. On the client side—that is, on the user’s device—their application could employ the properties of this class to update their app’s user interface in real time during the game.\n\nA Javascript implementation of this class is also available for use by web-based applications.\n\nTopics\nExtracting timed metadata from a stream\nvar allMetadata: [AnyHashable : Any]!\nA dictionary containing all the metadata in the object.\nvar key: String!\nA key that identifies a piece of timed metadata.\nvar keyspace: String!\nThe namespace of the identifying key.\nvar timestamp: TimeInterval\nThe timestamp of the metadata, in the timebase of the media stream.\nvar value: Any!\nThe timed metadata.\nConstants\nTimed metadata dictionary keys\nDictionary keys for use with the allMetadata property. All keys are optional.\nNotifications\nstatic let MPMoviePlayerTimedMetadataUpdated: NSNotification.Name\nPosted when new timed metadata arrives.\nlet MPMoviePlayerTimedMetadataUserInfoKey: String\nAn NSDictionary object containing the most recent MPTimedMetadata objects.\nRelationships\nInherits From\nNSObject\nSee Also\nDeprecated symbols\nclass MPMovieAccessLog\nKey metrics about network playback for an associated movie player that’s playing streamed content.\nDeprecated\nclass MPMovieAccessLogEvent\nA single piece of information for a movie access log.\nDeprecated\nclass MPMovieErrorLog\nData describing network resource playback failures for the associated movie player, including timestamps indicating when each failure occurred.\nDeprecated\nclass MPMovieErrorLogEvent\nA single piece of information for a movie error log.\nDeprecated\nstruct MPMovieLoadState\nConstants describing the network load state of the movie player.\nDeprecated\nstruct MPMovieMediaTypeMask\nThe types of content available in the movie file.\nDeprecated\nclass MPMoviePlayerController\nA type of movie player that manages the playback of a movie from a file or a network stream.\nDeprecated\nclass MPMoviePlayerViewController\nA simple view controller for displaying full-screen movies.\nDeprecated\nclass MPPlayableContentManager\nA shared content manager for controlling interactions between your media app and system-provided or external media player interfaces.\nDeprecated\nclass MPPlayableContentManagerContext\nAn object representing the current state of the playable endpoint.\nDeprecated\nclass var iPodMusicPlayer: MPMusicPlayerController\nReturns the iPod music player, which controls the iPod app’s state.\nDeprecated\ninit(image: UIImage)\nInitializes a media item artwork instance with a full-size image.\nDeprecated\nvar imageCropRect: CGRect\nThe bounds, in points, of the content area for the full size image associated with the media item artwork.\nvar showsRouteButton: Bool\nA Boolean value that indicates whether the route button is visible in the volume view.\nDeprecated\nfunc routeButtonImage(for: UIControl.State) -> UIImage?\nReturns the button image associated with the specified control state.\nDeprecated\nfunc routeButtonRect(forBounds: CGRect) -> CGRect\nReturns the drawing rectangle for the route button.\nDeprecated\nfunc setRouteButtonImage(UIImage?, for: UIControl.State)\nAssigns a button image to the specified control states.\nDeprecated\nvar areWirelessRoutesAvailable: Bool\nA Boolean value indicating wireless routes are available.\nDeprecated\nvar isWirelessRouteActive: Bool\nA Boolean value that indicates whether the wireless route is active.\nDeprecated\nstatic let MPVolumeViewWirelessRouteActiveDidChange: NSNotification.Name\nIndicates the active wireless route changed.\nDeprecated\nstatic let MPVolumeViewWirelessRoutesAvailableDidChange: NSNotification.Name\nIndicates the available wireless routes changed.\nDeprecated\nGlobal volume setting methods\nGlobal functions for setting the volume alert window status."
  },
  {
    "title": "MPMediaItemPropertyAssetURL",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmediaitempropertyasseturl",
    "html": "Discussion\n\nThis value is an NSURL object. The URL has the custom scheme of ipod-library. For example, a URL might look like this:\n\nipod-library://item/item.m4a?id=12345\n\n\nSee Also\nProperty keys\nlet MPMediaItemPropertyPlaybackDuration: String\nThe playback duration of the media item.\nlet MPMediaItemPropertyAlbumTrackNumber: String\nThe track number of the media item, for a media item that is part of an album.\nlet MPMediaItemPropertyAlbumTrackCount: String\nThe number of tracks for the album that contains the media item.\nlet MPMediaItemPropertyDiscNumber: String\nThe disc number of the media item, for a media item that is part of a multidisc album.\nlet MPMediaItemPropertyDiscCount: String\nThe number of discs for the album that contains the media item.\nlet MPMediaItemPropertyArtwork: String\nThe artwork image for the media item.\nlet MPMediaItemPropertyLyrics: String\nThe lyrics for the media item.\nlet MPMediaItemPropertyReleaseDate: String\nThe date of the media item’s first public release.\nlet MPMediaItemPropertyBeatsPerMinute: String\nThe number of musical beats per minute for the media item.\nlet MPMediaItemPropertyComments: String\nTextual information about the media item.\nlet MPMediaItemPropertyIsExplicit: String\nA Boolean value that indicates whether the media item contains explicit (adult) lyrics or language.\nlet MPMediaItemPropertyIsPreorder: String\nA Boolean value that indicates whether the media item is a preorder.\nlet MPMediaItemPropertyPlaybackStoreID: String\nThe identifier for enqueueing store tracks."
  },
  {
    "title": "MPMovieMediaTypeMask",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmoviemediatypemask",
    "html": "Overview\n\nYou can OR the specified constants together to specify a movie.\n\nTopics\nConstants\nstatic var video: MPMovieMediaTypeMask\nstatic var audio: MPMovieMediaTypeMask\nInitializers\ninit(rawValue: UInt)\nCreates a new instance with the specified raw value.\nRelationships\nConforms To\nOptionSet\nSendable\nSee Also\nDeprecated symbols\nclass MPMovieAccessLog\nKey metrics about network playback for an associated movie player that’s playing streamed content.\nDeprecated\nclass MPMovieAccessLogEvent\nA single piece of information for a movie access log.\nDeprecated\nclass MPMovieErrorLog\nData describing network resource playback failures for the associated movie player, including timestamps indicating when each failure occurred.\nDeprecated\nclass MPMovieErrorLogEvent\nA single piece of information for a movie error log.\nDeprecated\nstruct MPMovieLoadState\nConstants describing the network load state of the movie player.\nDeprecated\nclass MPMoviePlayerController\nA type of movie player that manages the playback of a movie from a file or a network stream.\nDeprecated\nclass MPMoviePlayerViewController\nA simple view controller for displaying full-screen movies.\nDeprecated\nclass MPTimedMetadata\nA timed metadata object that carries time-based information within HTTP streamed media.\nDeprecated\nclass MPPlayableContentManager\nA shared content manager for controlling interactions between your media app and system-provided or external media player interfaces.\nDeprecated\nclass MPPlayableContentManagerContext\nAn object representing the current state of the playable endpoint.\nDeprecated\nclass var iPodMusicPlayer: MPMusicPlayerController\nReturns the iPod music player, which controls the iPod app’s state.\nDeprecated\ninit(image: UIImage)\nInitializes a media item artwork instance with a full-size image.\nDeprecated\nvar imageCropRect: CGRect\nThe bounds, in points, of the content area for the full size image associated with the media item artwork.\nvar showsRouteButton: Bool\nA Boolean value that indicates whether the route button is visible in the volume view.\nDeprecated\nfunc routeButtonImage(for: UIControl.State) -> UIImage?\nReturns the button image associated with the specified control state.\nDeprecated\nfunc routeButtonRect(forBounds: CGRect) -> CGRect\nReturns the drawing rectangle for the route button.\nDeprecated\nfunc setRouteButtonImage(UIImage?, for: UIControl.State)\nAssigns a button image to the specified control states.\nDeprecated\nvar areWirelessRoutesAvailable: Bool\nA Boolean value indicating wireless routes are available.\nDeprecated\nvar isWirelessRouteActive: Bool\nA Boolean value that indicates whether the wireless route is active.\nDeprecated\nstatic let MPVolumeViewWirelessRouteActiveDidChange: NSNotification.Name\nIndicates the active wireless route changed.\nDeprecated\nstatic let MPVolumeViewWirelessRoutesAvailableDidChange: NSNotification.Name\nIndicates the available wireless routes changed.\nDeprecated\nGlobal volume setting methods\nGlobal functions for setting the volume alert window status."
  },
  {
    "title": "MPMovieLoadState",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmovieloadstate",
    "html": "Topics\nConstants\nstatic var playable: MPMovieLoadState\nstatic var playthroughOK: MPMovieLoadState\nstatic var stalled: MPMovieLoadState\nInitializers\ninit(rawValue: UInt)\nCreates a new instance with the specified raw value.\nRelationships\nConforms To\nOptionSet\nSendable\nSee Also\nDeprecated symbols\nclass MPMovieAccessLog\nKey metrics about network playback for an associated movie player that’s playing streamed content.\nDeprecated\nclass MPMovieAccessLogEvent\nA single piece of information for a movie access log.\nDeprecated\nclass MPMovieErrorLog\nData describing network resource playback failures for the associated movie player, including timestamps indicating when each failure occurred.\nDeprecated\nclass MPMovieErrorLogEvent\nA single piece of information for a movie error log.\nDeprecated\nstruct MPMovieMediaTypeMask\nThe types of content available in the movie file.\nDeprecated\nclass MPMoviePlayerController\nA type of movie player that manages the playback of a movie from a file or a network stream.\nDeprecated\nclass MPMoviePlayerViewController\nA simple view controller for displaying full-screen movies.\nDeprecated\nclass MPTimedMetadata\nA timed metadata object that carries time-based information within HTTP streamed media.\nDeprecated\nclass MPPlayableContentManager\nA shared content manager for controlling interactions between your media app and system-provided or external media player interfaces.\nDeprecated\nclass MPPlayableContentManagerContext\nAn object representing the current state of the playable endpoint.\nDeprecated\nclass var iPodMusicPlayer: MPMusicPlayerController\nReturns the iPod music player, which controls the iPod app’s state.\nDeprecated\ninit(image: UIImage)\nInitializes a media item artwork instance with a full-size image.\nDeprecated\nvar imageCropRect: CGRect\nThe bounds, in points, of the content area for the full size image associated with the media item artwork.\nvar showsRouteButton: Bool\nA Boolean value that indicates whether the route button is visible in the volume view.\nDeprecated\nfunc routeButtonImage(for: UIControl.State) -> UIImage?\nReturns the button image associated with the specified control state.\nDeprecated\nfunc routeButtonRect(forBounds: CGRect) -> CGRect\nReturns the drawing rectangle for the route button.\nDeprecated\nfunc setRouteButtonImage(UIImage?, for: UIControl.State)\nAssigns a button image to the specified control states.\nDeprecated\nvar areWirelessRoutesAvailable: Bool\nA Boolean value indicating wireless routes are available.\nDeprecated\nvar isWirelessRouteActive: Bool\nA Boolean value that indicates whether the wireless route is active.\nDeprecated\nstatic let MPVolumeViewWirelessRouteActiveDidChange: NSNotification.Name\nIndicates the active wireless route changed.\nDeprecated\nstatic let MPVolumeViewWirelessRoutesAvailableDidChange: NSNotification.Name\nIndicates the available wireless routes changed.\nDeprecated\nGlobal volume setting methods\nGlobal functions for setting the volume alert window status."
  },
  {
    "title": "MPMovieAccessLogEvent",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmovieaccesslogevent",
    "html": "Overview\n\nFor a description of movie access logs, see MPMovieAccessLog.\n\nTopics\nMovie access log event properties\nvar numberOfSegmentsDownloaded: Int\nA count of media segments downloaded from the web server to your app.\nvar playbackStartDate: Date!\nThe timestamp for when playback began for the movie log access event.\nvar uri: String!\nThe URI of the playback item.\nvar serverAddress: String!\nThe IPv4 or IPv6 address of the web server that was the source of the last delivered media segment.\nvar numberOfServerAddressChanges: Int\nA count of changes to the serverAddress property over the last uninterrupted period of playback.\nvar playbackSessionID: String!\nA GUID that identifies the playback session to use in HTTP requests.\nvar playbackStartOffset: TimeInterval\nAn offset into the playlist where the last uninterrupted period of playback began, in seconds.\nvar segmentsDownloadedDuration: TimeInterval\nThe accumulated duration of the media downloaded, in seconds.\nvar durationWatched: TimeInterval\nThe accumulated duration of the media played, in seconds.\nvar numberOfStalls: Int\nThe total number of playback stalls encountered.\nvar numberOfBytesTransferred: Int64\nThe accumulated number of bytes transferred.\nvar observedBitrate: Double\nThe empirical throughput across all media downloaded for the movie player, in bits per second.\nvar indicatedBitrate: Double\nThe throughput required to play the stream, as advertised by the web server, in bits per second.\nvar numberOfDroppedVideoFrames: Int\nThe total number of dropped video frames.\nRelationships\nInherits From\nNSObject\nConforms To\nNSCopying\nSee Also\nDeprecated symbols\nclass MPMovieAccessLog\nKey metrics about network playback for an associated movie player that’s playing streamed content.\nDeprecated\nclass MPMovieErrorLog\nData describing network resource playback failures for the associated movie player, including timestamps indicating when each failure occurred.\nDeprecated\nclass MPMovieErrorLogEvent\nA single piece of information for a movie error log.\nDeprecated\nstruct MPMovieLoadState\nConstants describing the network load state of the movie player.\nDeprecated\nstruct MPMovieMediaTypeMask\nThe types of content available in the movie file.\nDeprecated\nclass MPMoviePlayerController\nA type of movie player that manages the playback of a movie from a file or a network stream.\nDeprecated\nclass MPMoviePlayerViewController\nA simple view controller for displaying full-screen movies.\nDeprecated\nclass MPTimedMetadata\nA timed metadata object that carries time-based information within HTTP streamed media.\nDeprecated\nclass MPPlayableContentManager\nA shared content manager for controlling interactions between your media app and system-provided or external media player interfaces.\nDeprecated\nclass MPPlayableContentManagerContext\nAn object representing the current state of the playable endpoint.\nDeprecated\nclass var iPodMusicPlayer: MPMusicPlayerController\nReturns the iPod music player, which controls the iPod app’s state.\nDeprecated\ninit(image: UIImage)\nInitializes a media item artwork instance with a full-size image.\nDeprecated\nvar imageCropRect: CGRect\nThe bounds, in points, of the content area for the full size image associated with the media item artwork.\nvar showsRouteButton: Bool\nA Boolean value that indicates whether the route button is visible in the volume view.\nDeprecated\nfunc routeButtonImage(for: UIControl.State) -> UIImage?\nReturns the button image associated with the specified control state.\nDeprecated\nfunc routeButtonRect(forBounds: CGRect) -> CGRect\nReturns the drawing rectangle for the route button.\nDeprecated\nfunc setRouteButtonImage(UIImage?, for: UIControl.State)\nAssigns a button image to the specified control states.\nDeprecated\nvar areWirelessRoutesAvailable: Bool\nA Boolean value indicating wireless routes are available.\nDeprecated\nvar isWirelessRouteActive: Bool\nA Boolean value that indicates whether the wireless route is active.\nDeprecated\nstatic let MPVolumeViewWirelessRouteActiveDidChange: NSNotification.Name\nIndicates the active wireless route changed.\nDeprecated\nstatic let MPVolumeViewWirelessRoutesAvailableDidChange: NSNotification.Name\nIndicates the available wireless routes changed.\nDeprecated\nGlobal volume setting methods\nGlobal functions for setting the volume alert window status."
  },
  {
    "title": "MPMovieAccessLog",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmovieaccesslog",
    "html": "Overview\n\nThe log presents these metrics as a collection of MPMovieAccessLogEvent instances and also makes it available in a textual format. A movie access log describes one uninterrupted period of playback. A movie player (an instance of the MPMoviePlayerController class) can access this log from its accessLog property. All movie access log properties are read-only.\n\nTopics\nMovie access log properties\nvar extendedLogData: Data!\nA textual version of the web server access log for the associated movie player.\nvar extendedLogDataStringEncoding: UInt\nThe string encoding for the extendedLogData property.\nvar events: [Any]!\nThe events in the movie access log.\nRelationships\nInherits From\nNSObject\nConforms To\nNSCopying\nSee Also\nDeprecated symbols\nclass MPMovieAccessLogEvent\nA single piece of information for a movie access log.\nDeprecated\nclass MPMovieErrorLog\nData describing network resource playback failures for the associated movie player, including timestamps indicating when each failure occurred.\nDeprecated\nclass MPMovieErrorLogEvent\nA single piece of information for a movie error log.\nDeprecated\nstruct MPMovieLoadState\nConstants describing the network load state of the movie player.\nDeprecated\nstruct MPMovieMediaTypeMask\nThe types of content available in the movie file.\nDeprecated\nclass MPMoviePlayerController\nA type of movie player that manages the playback of a movie from a file or a network stream.\nDeprecated\nclass MPMoviePlayerViewController\nA simple view controller for displaying full-screen movies.\nDeprecated\nclass MPTimedMetadata\nA timed metadata object that carries time-based information within HTTP streamed media.\nDeprecated\nclass MPPlayableContentManager\nA shared content manager for controlling interactions between your media app and system-provided or external media player interfaces.\nDeprecated\nclass MPPlayableContentManagerContext\nAn object representing the current state of the playable endpoint.\nDeprecated\nclass var iPodMusicPlayer: MPMusicPlayerController\nReturns the iPod music player, which controls the iPod app’s state.\nDeprecated\ninit(image: UIImage)\nInitializes a media item artwork instance with a full-size image.\nDeprecated\nvar imageCropRect: CGRect\nThe bounds, in points, of the content area for the full size image associated with the media item artwork.\nvar showsRouteButton: Bool\nA Boolean value that indicates whether the route button is visible in the volume view.\nDeprecated\nfunc routeButtonImage(for: UIControl.State) -> UIImage?\nReturns the button image associated with the specified control state.\nDeprecated\nfunc routeButtonRect(forBounds: CGRect) -> CGRect\nReturns the drawing rectangle for the route button.\nDeprecated\nfunc setRouteButtonImage(UIImage?, for: UIControl.State)\nAssigns a button image to the specified control states.\nDeprecated\nvar areWirelessRoutesAvailable: Bool\nA Boolean value indicating wireless routes are available.\nDeprecated\nvar isWirelessRouteActive: Bool\nA Boolean value that indicates whether the wireless route is active.\nDeprecated\nstatic let MPVolumeViewWirelessRouteActiveDidChange: NSNotification.Name\nIndicates the active wireless route changed.\nDeprecated\nstatic let MPVolumeViewWirelessRoutesAvailableDidChange: NSNotification.Name\nIndicates the available wireless routes changed.\nDeprecated\nGlobal volume setting methods\nGlobal functions for setting the volume alert window status."
  },
  {
    "title": "MPMovieErrorLog",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmovieerrorlog",
    "html": "Overview\n\nAll movie error log properties are read-only.\n\nTopics\nMovie error log properties\nvar extendedLogData: Data!\nA textual version of the web server error log.\nvar extendedLogDataStringEncoding: UInt\nThe string encoding for the extended log data property.\nvar events: [Any]!\nThe events in the movie error log.\nRelationships\nInherits From\nNSObject\nConforms To\nNSCopying\nSee Also\nDeprecated symbols\nclass MPMovieAccessLog\nKey metrics about network playback for an associated movie player that’s playing streamed content.\nDeprecated\nclass MPMovieAccessLogEvent\nA single piece of information for a movie access log.\nDeprecated\nclass MPMovieErrorLogEvent\nA single piece of information for a movie error log.\nDeprecated\nstruct MPMovieLoadState\nConstants describing the network load state of the movie player.\nDeprecated\nstruct MPMovieMediaTypeMask\nThe types of content available in the movie file.\nDeprecated\nclass MPMoviePlayerController\nA type of movie player that manages the playback of a movie from a file or a network stream.\nDeprecated\nclass MPMoviePlayerViewController\nA simple view controller for displaying full-screen movies.\nDeprecated\nclass MPTimedMetadata\nA timed metadata object that carries time-based information within HTTP streamed media.\nDeprecated\nclass MPPlayableContentManager\nA shared content manager for controlling interactions between your media app and system-provided or external media player interfaces.\nDeprecated\nclass MPPlayableContentManagerContext\nAn object representing the current state of the playable endpoint.\nDeprecated\nclass var iPodMusicPlayer: MPMusicPlayerController\nReturns the iPod music player, which controls the iPod app’s state.\nDeprecated\ninit(image: UIImage)\nInitializes a media item artwork instance with a full-size image.\nDeprecated\nvar imageCropRect: CGRect\nThe bounds, in points, of the content area for the full size image associated with the media item artwork.\nvar showsRouteButton: Bool\nA Boolean value that indicates whether the route button is visible in the volume view.\nDeprecated\nfunc routeButtonImage(for: UIControl.State) -> UIImage?\nReturns the button image associated with the specified control state.\nDeprecated\nfunc routeButtonRect(forBounds: CGRect) -> CGRect\nReturns the drawing rectangle for the route button.\nDeprecated\nfunc setRouteButtonImage(UIImage?, for: UIControl.State)\nAssigns a button image to the specified control states.\nDeprecated\nvar areWirelessRoutesAvailable: Bool\nA Boolean value indicating wireless routes are available.\nDeprecated\nvar isWirelessRouteActive: Bool\nA Boolean value that indicates whether the wireless route is active.\nDeprecated\nstatic let MPVolumeViewWirelessRouteActiveDidChange: NSNotification.Name\nIndicates the active wireless route changed.\nDeprecated\nstatic let MPVolumeViewWirelessRoutesAvailableDidChange: NSNotification.Name\nIndicates the available wireless routes changed.\nDeprecated\nGlobal volume setting methods\nGlobal functions for setting the volume alert window status."
  },
  {
    "title": "MPMediaItemPropertyReleaseDate",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmediaitempropertyreleasedate",
    "html": "Discussion\n\nThis value is an NSDate object.\n\nSee Also\nProperty keys\nlet MPMediaItemPropertyPlaybackDuration: String\nThe playback duration of the media item.\nlet MPMediaItemPropertyAlbumTrackNumber: String\nThe track number of the media item, for a media item that is part of an album.\nlet MPMediaItemPropertyAlbumTrackCount: String\nThe number of tracks for the album that contains the media item.\nlet MPMediaItemPropertyDiscNumber: String\nThe disc number of the media item, for a media item that is part of a multidisc album.\nlet MPMediaItemPropertyDiscCount: String\nThe number of discs for the album that contains the media item.\nlet MPMediaItemPropertyArtwork: String\nThe artwork image for the media item.\nlet MPMediaItemPropertyLyrics: String\nThe lyrics for the media item.\nlet MPMediaItemPropertyBeatsPerMinute: String\nThe number of musical beats per minute for the media item.\nlet MPMediaItemPropertyComments: String\nTextual information about the media item.\nlet MPMediaItemPropertyAssetURL: String\nA URL that points to the media item.\nlet MPMediaItemPropertyIsExplicit: String\nA Boolean value that indicates whether the media item contains explicit (adult) lyrics or language.\nlet MPMediaItemPropertyIsPreorder: String\nA Boolean value that indicates whether the media item is a preorder.\nlet MPMediaItemPropertyPlaybackStoreID: String\nThe identifier for enqueueing store tracks."
  },
  {
    "title": "MPMediaItemPropertyIsExplicit",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmediaitempropertyisexplicit",
    "html": "Discussion\n\nThis value is an NSNumber object that represents a BOOL data type.\n\nSee Also\nProperty keys\nlet MPMediaItemPropertyPlaybackDuration: String\nThe playback duration of the media item.\nlet MPMediaItemPropertyAlbumTrackNumber: String\nThe track number of the media item, for a media item that is part of an album.\nlet MPMediaItemPropertyAlbumTrackCount: String\nThe number of tracks for the album that contains the media item.\nlet MPMediaItemPropertyDiscNumber: String\nThe disc number of the media item, for a media item that is part of a multidisc album.\nlet MPMediaItemPropertyDiscCount: String\nThe number of discs for the album that contains the media item.\nlet MPMediaItemPropertyArtwork: String\nThe artwork image for the media item.\nlet MPMediaItemPropertyLyrics: String\nThe lyrics for the media item.\nlet MPMediaItemPropertyReleaseDate: String\nThe date of the media item’s first public release.\nlet MPMediaItemPropertyBeatsPerMinute: String\nThe number of musical beats per minute for the media item.\nlet MPMediaItemPropertyComments: String\nTextual information about the media item.\nlet MPMediaItemPropertyAssetURL: String\nA URL that points to the media item.\nlet MPMediaItemPropertyIsPreorder: String\nA Boolean value that indicates whether the media item is a preorder.\nlet MPMediaItemPropertyPlaybackStoreID: String\nThe identifier for enqueueing store tracks."
  },
  {
    "title": "MPMediaItemPropertyBeatsPerMinute",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmediaitempropertybeatsperminute",
    "html": "Discussion\n\nThis value is an NSNumber object that represents an NSUInteger data type.\n\nSee Also\nProperty keys\nlet MPMediaItemPropertyPlaybackDuration: String\nThe playback duration of the media item.\nlet MPMediaItemPropertyAlbumTrackNumber: String\nThe track number of the media item, for a media item that is part of an album.\nlet MPMediaItemPropertyAlbumTrackCount: String\nThe number of tracks for the album that contains the media item.\nlet MPMediaItemPropertyDiscNumber: String\nThe disc number of the media item, for a media item that is part of a multidisc album.\nlet MPMediaItemPropertyDiscCount: String\nThe number of discs for the album that contains the media item.\nlet MPMediaItemPropertyArtwork: String\nThe artwork image for the media item.\nlet MPMediaItemPropertyLyrics: String\nThe lyrics for the media item.\nlet MPMediaItemPropertyReleaseDate: String\nThe date of the media item’s first public release.\nlet MPMediaItemPropertyComments: String\nTextual information about the media item.\nlet MPMediaItemPropertyAssetURL: String\nA URL that points to the media item.\nlet MPMediaItemPropertyIsExplicit: String\nA Boolean value that indicates whether the media item contains explicit (adult) lyrics or language.\nlet MPMediaItemPropertyIsPreorder: String\nA Boolean value that indicates whether the media item is a preorder.\nlet MPMediaItemPropertyPlaybackStoreID: String\nThe identifier for enqueueing store tracks."
  },
  {
    "title": "MPMediaItemPropertyPodcastPersistentID",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmediaitempropertypodcastpersistentid",
    "html": "Discussion\n\nThis value is an NSNumber object that contains a uint64_t (unsigned long long). The value of the MPMediaItemPropertyPodcastPersistentID identifier persists across application launches and across syncs that do not change the sync status of the media item. The value is not guaranteed to persist across a sync/unsync/sync cycle.\n\nCan be used to build a media property predicate as described in MPMediaPropertyPredicate.\n\nSee Also\nFilterable property keys\nlet MPMediaItemPropertyAlbumArtist: String\nThe primary performing artist for an album.\nlet MPMediaItemPropertyAlbumArtistPersistentID: String\nThe persistent identifier for an album artist.\nlet MPMediaItemPropertyAlbumPersistentID: String\nThe key for the persistent identifier for an album.\nlet MPMediaItemPropertyAlbumTitle: String\nThe title of an album.\nlet MPMediaItemPropertyArtist: String\nThe performing artists for a media item — which may vary from the primary artist for the album that a media item belongs to.\nlet MPMediaItemPropertyArtistPersistentID: String\nThe key for the persistent identifier for an artist.\nlet MPMediaItemPropertyComposer: String\nThe musical composer for the media item.\nlet MPMediaItemPropertyComposerPersistentID: String\nThe persistent identifier for a composer.\nlet MPMediaItemPropertyGenre: String\nThe music or film genre of the media item.\nlet MPMediaItemPropertyGenrePersistentID: String\nThe persistent identifier for a genre.\nlet MPMediaItemPropertyHasProtectedAsset: String\nA Boolean value that indicates the media item has DRM protection so it can’t play through a standard playback API.\nlet MPMediaItemPropertyIsCompilation: String\nA Boolean value that indicates whether the media item is part of a compilation.\nlet MPMediaItemPropertyIsCloudItem: String\nA Boolean value that indicates whether the media item is an iCloud item.\nlet MPMediaItemPropertyMediaType: String\nThe media type of the media item.\nlet MPMediaItemPropertyPersistentID: String\nThe key for the persistent identifier for the media item.\nlet MPMediaItemPropertyPlayCount: String\nThe number of times the user plays the media item.\nlet MPMediaItemPropertyPodcastTitle: String\nThe title of a podcast.\nlet MPMediaItemPropertyTitle: String\nThe title or name of the media item."
  },
  {
    "title": "MPMediaItemPropertyPlayCount",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmediaitempropertyplaycount",
    "html": "Discussion\n\nThis value is an NSNumber object that represents a NSUInteger data type.\n\nSee Also\nFilterable property keys\nlet MPMediaItemPropertyAlbumArtist: String\nThe primary performing artist for an album.\nlet MPMediaItemPropertyAlbumArtistPersistentID: String\nThe persistent identifier for an album artist.\nlet MPMediaItemPropertyAlbumPersistentID: String\nThe key for the persistent identifier for an album.\nlet MPMediaItemPropertyAlbumTitle: String\nThe title of an album.\nlet MPMediaItemPropertyArtist: String\nThe performing artists for a media item — which may vary from the primary artist for the album that a media item belongs to.\nlet MPMediaItemPropertyArtistPersistentID: String\nThe key for the persistent identifier for an artist.\nlet MPMediaItemPropertyComposer: String\nThe musical composer for the media item.\nlet MPMediaItemPropertyComposerPersistentID: String\nThe persistent identifier for a composer.\nlet MPMediaItemPropertyGenre: String\nThe music or film genre of the media item.\nlet MPMediaItemPropertyGenrePersistentID: String\nThe persistent identifier for a genre.\nlet MPMediaItemPropertyHasProtectedAsset: String\nA Boolean value that indicates the media item has DRM protection so it can’t play through a standard playback API.\nlet MPMediaItemPropertyIsCompilation: String\nA Boolean value that indicates whether the media item is part of a compilation.\nlet MPMediaItemPropertyIsCloudItem: String\nA Boolean value that indicates whether the media item is an iCloud item.\nlet MPMediaItemPropertyMediaType: String\nThe media type of the media item.\nlet MPMediaItemPropertyPersistentID: String\nThe key for the persistent identifier for the media item.\nlet MPMediaItemPropertyPodcastPersistentID: String\nThe persistent identifier for an audio podcast.\nlet MPMediaItemPropertyPodcastTitle: String\nThe title of a podcast.\nlet MPMediaItemPropertyTitle: String\nThe title or name of the media item."
  },
  {
    "title": "MPMediaItemPropertyPodcastTitle",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmediaitempropertypodcasttitle",
    "html": "Discussion\n\nThe property contains the title of a podcast, such as “This Martian Drudgery”, as opposed to the title of an individual episode of a podcast such as “Episode 12: Another Cold Day At The Pole” (which you specify using the MPMediaItemPropertyTitle property). Value is an NSString object.\n\nCan be used to build a media property predicate as described in MPMediaPropertyPredicate.\n\nSee Also\nFilterable property keys\nlet MPMediaItemPropertyAlbumArtist: String\nThe primary performing artist for an album.\nlet MPMediaItemPropertyAlbumArtistPersistentID: String\nThe persistent identifier for an album artist.\nlet MPMediaItemPropertyAlbumPersistentID: String\nThe key for the persistent identifier for an album.\nlet MPMediaItemPropertyAlbumTitle: String\nThe title of an album.\nlet MPMediaItemPropertyArtist: String\nThe performing artists for a media item — which may vary from the primary artist for the album that a media item belongs to.\nlet MPMediaItemPropertyArtistPersistentID: String\nThe key for the persistent identifier for an artist.\nlet MPMediaItemPropertyComposer: String\nThe musical composer for the media item.\nlet MPMediaItemPropertyComposerPersistentID: String\nThe persistent identifier for a composer.\nlet MPMediaItemPropertyGenre: String\nThe music or film genre of the media item.\nlet MPMediaItemPropertyGenrePersistentID: String\nThe persistent identifier for a genre.\nlet MPMediaItemPropertyHasProtectedAsset: String\nA Boolean value that indicates the media item has DRM protection so it can’t play through a standard playback API.\nlet MPMediaItemPropertyIsCompilation: String\nA Boolean value that indicates whether the media item is part of a compilation.\nlet MPMediaItemPropertyIsCloudItem: String\nA Boolean value that indicates whether the media item is an iCloud item.\nlet MPMediaItemPropertyMediaType: String\nThe media type of the media item.\nlet MPMediaItemPropertyPersistentID: String\nThe key for the persistent identifier for the media item.\nlet MPMediaItemPropertyPlayCount: String\nThe number of times the user plays the media item.\nlet MPMediaItemPropertyPodcastPersistentID: String\nThe persistent identifier for an audio podcast.\nlet MPMediaItemPropertyTitle: String\nThe title or name of the media item."
  },
  {
    "title": "MPVolumeSettingsAlertShow()",
    "url": "https://developer.apple.com/documentation/mediaplayer/1623908-mpvolumesettingsalertshow",
    "html": "Discussion\n\nThe alert panel displayed by this function floats above the contents of the current window. It contains a slider for adjusting the system volume setting and a Done button so that the user can dismiss the panel. You can also dismiss the panel programmatically using the MPVolumeSettingsAlertHide() function.\n\nSee Also\nGlobal volume setting methods\nfunc MPVolumeSettingsAlertHide()\nHides the alert panel that controls the system volume.\nDeprecated\nfunc MPVolumeSettingsAlertIsVisible() -> Bool\nReturns a Boolean value indicating whether the volume alert panel is currently visible.\nDeprecated"
  },
  {
    "title": "setEndTime(_:for:)",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmusicplayermediaitemqueuedescriptor/2582431-setendtime",
    "html": "Parameters\nendTime\n\nThe TimeInterval describing when the media item stops playing.\n\nmediaItem\n\nThe media item in the queue that has a changed end time.\n\nSee Also\nSetting start and end times\nfunc setStartTime(TimeInterval, for: MPMediaItem)\nThe time the designated media item is to start playing."
  },
  {
    "title": "MPNowPlayingPlaybackState.unknown",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpnowplayingplaybackstate/unknown",
    "html": "See Also\nPlayback states\ncase playing\nThe app is currently playing a media item.\ncase paused\nThe app is currently paused.\ncase stopped\nThe app has stopped playing.\ncase interrupted\nThe app has been interrupted during playback."
  },
  {
    "title": "players",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpnowplayingsession/3547929-players",
    "html": "See Also\nManaging players\nfunc addPlayer(AVPlayer)\nAdds a player to the session.\nfunc removePlayer(AVPlayer)\nRemoves a player from the session."
  },
  {
    "title": "query",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmusicplayermediaitemqueuedescriptor/2582439-query",
    "html": "See Also\nMedia item queue descriptor properties\nvar itemCollection: MPMediaItemCollection\nContains the media item collection used to create the queue descriptor.\nvar startItem: MPMediaItem?\nDesignates the media item to play first."
  },
  {
    "title": "startItem",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmusicplayermediaitemqueuedescriptor/2582433-startitem",
    "html": "Discussion\n\nWhen this property isn’t set, the value is nil and the first item in the queue is the first item to play.\n\nSee Also\nMedia item queue descriptor properties\nvar itemCollection: MPMediaItemCollection\nContains the media item collection used to create the queue descriptor.\nvar query: MPMediaQuery\nContains the media items found by the query used to create the queue descriptor."
  },
  {
    "title": "MPChangePlaybackRateCommand",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpchangeplaybackratecommand",
    "html": "Overview\n\nApps can change the current playback rate of a media item to one of the supported rates defined by the supportedPlaybackRates property.\n\nTopics\nRetrieving playback rates\nvar supportedPlaybackRates: [NSNumber]\nThe supported playback rates for a media item.\nRelationships\nInherits From\nMPRemoteCommand\nSee Also\nResponding to changes to media playback mode events\nclass MPChangePlaybackRateCommandEvent\nAn event requesting a change in the playback rate.\nclass MPChangeLanguageOptionCommandEvent\nAn event requesting a change in the language option.\nclass MPChangeRepeatModeCommand\nAn object that responds to requests to change the current repeat mode used during playback.\nclass MPChangeRepeatModeCommandEvent\nAn event requesting a change in the repeat mode.\nclass MPChangeShuffleModeCommand\nAn object that responds to requests to change the current shuffle mode used during playback.\nclass MPChangeShuffleModeCommandEvent\nAn event requesting a change in the shuffle mode.\nenum MPRepeatType\nIndicates which items to play repeatedly.\nenum MPShuffleType\nIndicates which item types to shuffle."
  },
  {
    "title": "MPMediaItemPropertySkipCount",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmediaitempropertyskipcount",
    "html": "Discussion\n\nValue is an NSNumber object representing an NSUInteger data type.\n\nSee Also\nUser-defined property keys\nlet MPMediaItemPropertyRating: String\nThe user-specified rating of the object in the range [0...5], where a value of 5 indicates the most favorable rating.\nlet MPMediaItemPropertyLastPlayedDate: String\nThe most recent calendar date on which the user played the media item.\nlet MPMediaItemPropertyUserGrouping: String\nCorresponds to the “Grouping” field in the Info tab in the Get Info dialog in iTunes.\nlet MPMediaItemPropertyBookmarkTime: String\nThe user’s place in the media item the most recent time it was played.\nlet MPMediaItemPropertyDateAdded: String\nThe date the media item was added to the user's Media library."
  },
  {
    "title": "MPMediaItemPropertyRating",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmediaitempropertyrating",
    "html": "Discussion\n\nValue is an NSNumber object representing an NSUInteger data type.\n\nSee Also\nUser-defined property keys\nlet MPMediaItemPropertySkipCount: String\nThe number of times the user has skipped playing the item.\nlet MPMediaItemPropertyLastPlayedDate: String\nThe most recent calendar date on which the user played the media item.\nlet MPMediaItemPropertyUserGrouping: String\nCorresponds to the “Grouping” field in the Info tab in the Get Info dialog in iTunes.\nlet MPMediaItemPropertyBookmarkTime: String\nThe user’s place in the media item the most recent time it was played.\nlet MPMediaItemPropertyDateAdded: String\nThe date the media item was added to the user's Media library."
  },
  {
    "title": "MPMediaItemPropertyLastPlayedDate",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmediaitempropertylastplayeddate",
    "html": "Discussion\n\nValue is an NSDate object.\n\nSee Also\nUser-defined property keys\nlet MPMediaItemPropertySkipCount: String\nThe number of times the user has skipped playing the item.\nlet MPMediaItemPropertyRating: String\nThe user-specified rating of the object in the range [0...5], where a value of 5 indicates the most favorable rating.\nlet MPMediaItemPropertyUserGrouping: String\nCorresponds to the “Grouping” field in the Info tab in the Get Info dialog in iTunes.\nlet MPMediaItemPropertyBookmarkTime: String\nThe user’s place in the media item the most recent time it was played.\nlet MPMediaItemPropertyDateAdded: String\nThe date the media item was added to the user's Media library."
  },
  {
    "title": "MPMediaItemPropertyUserGrouping",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmediaitempropertyusergrouping",
    "html": "Discussion\n\nValue is an NSString object.\n\nSee Also\nUser-defined property keys\nlet MPMediaItemPropertySkipCount: String\nThe number of times the user has skipped playing the item.\nlet MPMediaItemPropertyRating: String\nThe user-specified rating of the object in the range [0...5], where a value of 5 indicates the most favorable rating.\nlet MPMediaItemPropertyLastPlayedDate: String\nThe most recent calendar date on which the user played the media item.\nlet MPMediaItemPropertyBookmarkTime: String\nThe user’s place in the media item the most recent time it was played.\nlet MPMediaItemPropertyDateAdded: String\nThe date the media item was added to the user's Media library."
  },
  {
    "title": "MPMediaItemPropertyBookmarkTime",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmediaitempropertybookmarktime",
    "html": "Discussion\n\nValue is an NSNumber object representing a duration in seconds as an TimeInterval.\n\nSee Also\nUser-defined property keys\nlet MPMediaItemPropertySkipCount: String\nThe number of times the user has skipped playing the item.\nlet MPMediaItemPropertyRating: String\nThe user-specified rating of the object in the range [0...5], where a value of 5 indicates the most favorable rating.\nlet MPMediaItemPropertyLastPlayedDate: String\nThe most recent calendar date on which the user played the media item.\nlet MPMediaItemPropertyUserGrouping: String\nCorresponds to the “Grouping” field in the Info tab in the Get Info dialog in iTunes.\nlet MPMediaItemPropertyDateAdded: String\nThe date the media item was added to the user's Media library."
  },
  {
    "title": "MPLanguageOptionCharacteristicIsAuxiliaryContent",
    "url": "https://developer.apple.com/documentation/mediaplayer/mplanguageoptioncharacteristicisauxiliarycontent",
    "html": "Discussion\n\nA language option that presents audio containing commentary on the presentation would typically have this characteristic.\n\nSee Also\nLanguage option characteristic constants\nlet MPLanguageOptionCharacteristicContainsOnlyForcedSubtitles: String\nIndicates that the language option presents only forced subtitles.\nlet MPLanguageOptionCharacteristicDescribesMusicAndSound: String\nIndicates that the language option includes legible content in the language of its specified locale that describes music and sound effects occurring in program audio.\nlet MPLanguageOptionCharacteristicDescribesVideo: String\nIndicates that the language option includes audible content that describes the visual portion of the presentation.\nlet MPLanguageOptionCharacteristicDubbedTranslation: String\nIndicates that the language option includes content that contains a dubbed translation.\nlet MPLanguageOptionCharacteristicEasyToRead: String\nIndicates that the language option provides legible content in the language of its specified locale and that the content was edited for ease of reading.\nlet MPLanguageOptionCharacteristicIsMainProgramContent: String\nIndicates that the language option includes content that’s marked by the content author as intrinsic to the presentation of the language option.\nlet MPLanguageOptionCharacteristicLanguageTranslation: String\nIndicates that the language option contains a translation in the language of its specified locale.\nlet MPLanguageOptionCharacteristicTranscribesSpokenDialog: String\nIndicates that the language option includes legible content in the language of its specified locale that transcribes spoken dialog.\nlet MPLanguageOptionCharacteristicVoiceOverTranslation: String\nIndicates that the language option includes voice over content in the language of its specified locale describes translated dialog."
  },
  {
    "title": "MPLanguageOptionCharacteristicContainsOnlyForcedSubtitles",
    "url": "https://developer.apple.com/documentation/mediaplayer/mplanguageoptioncharacteristiccontainsonlyforcedsubtitles",
    "html": "Discussion\n\nLanguage options with forced-only subtitles are typically selected when the user hasn’t selected a legible option with an accessibility characteristic or an auxiliary purpose and its locale matches the locale of the selected audible language option. The system infers the presence of this characteristic for a legible language option from the format description of the associated track that presents the subtitle media.\n\nSee Also\nLanguage option characteristic constants\nlet MPLanguageOptionCharacteristicDescribesMusicAndSound: String\nIndicates that the language option includes legible content in the language of its specified locale that describes music and sound effects occurring in program audio.\nlet MPLanguageOptionCharacteristicDescribesVideo: String\nIndicates that the language option includes audible content that describes the visual portion of the presentation.\nlet MPLanguageOptionCharacteristicDubbedTranslation: String\nIndicates that the language option includes content that contains a dubbed translation.\nlet MPLanguageOptionCharacteristicEasyToRead: String\nIndicates that the language option provides legible content in the language of its specified locale and that the content was edited for ease of reading.\nlet MPLanguageOptionCharacteristicIsAuxiliaryContent: String\nIndicates that the language option includes content that’s marked by the content author as auxiliary to the presentation of the language option.\nlet MPLanguageOptionCharacteristicIsMainProgramContent: String\nIndicates that the language option includes content that’s marked by the content author as intrinsic to the presentation of the language option.\nlet MPLanguageOptionCharacteristicLanguageTranslation: String\nIndicates that the language option contains a translation in the language of its specified locale.\nlet MPLanguageOptionCharacteristicTranscribesSpokenDialog: String\nIndicates that the language option includes legible content in the language of its specified locale that transcribes spoken dialog.\nlet MPLanguageOptionCharacteristicVoiceOverTranslation: String\nIndicates that the language option includes voice over content in the language of its specified locale describes translated dialog."
  },
  {
    "title": "MPLanguageOptionCharacteristicDescribesVideo",
    "url": "https://developer.apple.com/documentation/mediaplayer/mplanguageoptioncharacteristicdescribesvideo",
    "html": "Discussion\n\nIt’s possible for a legible language option to include both transcriptions of spoken dialog and descriptions of music and sound effects.\n\nSee Also\nLanguage option characteristic constants\nlet MPLanguageOptionCharacteristicContainsOnlyForcedSubtitles: String\nIndicates that the language option presents only forced subtitles.\nlet MPLanguageOptionCharacteristicDescribesMusicAndSound: String\nIndicates that the language option includes legible content in the language of its specified locale that describes music and sound effects occurring in program audio.\nlet MPLanguageOptionCharacteristicDubbedTranslation: String\nIndicates that the language option includes content that contains a dubbed translation.\nlet MPLanguageOptionCharacteristicEasyToRead: String\nIndicates that the language option provides legible content in the language of its specified locale and that the content was edited for ease of reading.\nlet MPLanguageOptionCharacteristicIsAuxiliaryContent: String\nIndicates that the language option includes content that’s marked by the content author as auxiliary to the presentation of the language option.\nlet MPLanguageOptionCharacteristicIsMainProgramContent: String\nIndicates that the language option includes content that’s marked by the content author as intrinsic to the presentation of the language option.\nlet MPLanguageOptionCharacteristicLanguageTranslation: String\nIndicates that the language option contains a translation in the language of its specified locale.\nlet MPLanguageOptionCharacteristicTranscribesSpokenDialog: String\nIndicates that the language option includes legible content in the language of its specified locale that transcribes spoken dialog.\nlet MPLanguageOptionCharacteristicVoiceOverTranslation: String\nIndicates that the language option includes voice over content in the language of its specified locale describes translated dialog."
  },
  {
    "title": "MPLanguageOptionCharacteristicEasyToRead",
    "url": "https://developer.apple.com/documentation/mediaplayer/mplanguageoptioncharacteristiceasytoread",
    "html": "Discussion\n\nClosed caption tracks that carry easy reader captions (per the CEA-608 specification) should have this characteristic tag. Subtitle tracks can also have this characteristic tag, where appropriate.\n\nSee Also\nLanguage option characteristic constants\nlet MPLanguageOptionCharacteristicContainsOnlyForcedSubtitles: String\nIndicates that the language option presents only forced subtitles.\nlet MPLanguageOptionCharacteristicDescribesMusicAndSound: String\nIndicates that the language option includes legible content in the language of its specified locale that describes music and sound effects occurring in program audio.\nlet MPLanguageOptionCharacteristicDescribesVideo: String\nIndicates that the language option includes audible content that describes the visual portion of the presentation.\nlet MPLanguageOptionCharacteristicDubbedTranslation: String\nIndicates that the language option includes content that contains a dubbed translation.\nlet MPLanguageOptionCharacteristicIsAuxiliaryContent: String\nIndicates that the language option includes content that’s marked by the content author as auxiliary to the presentation of the language option.\nlet MPLanguageOptionCharacteristicIsMainProgramContent: String\nIndicates that the language option includes content that’s marked by the content author as intrinsic to the presentation of the language option.\nlet MPLanguageOptionCharacteristicLanguageTranslation: String\nIndicates that the language option contains a translation in the language of its specified locale.\nlet MPLanguageOptionCharacteristicTranscribesSpokenDialog: String\nIndicates that the language option includes legible content in the language of its specified locale that transcribes spoken dialog.\nlet MPLanguageOptionCharacteristicVoiceOverTranslation: String\nIndicates that the language option includes voice over content in the language of its specified locale describes translated dialog."
  },
  {
    "title": "MPLanguageOptionCharacteristicDescribesMusicAndSound",
    "url": "https://developer.apple.com/documentation/mediaplayer/mplanguageoptioncharacteristicdescribesmusicandsound",
    "html": "Discussion\n\nIt’s possible for a legible language option to include both transcriptions of spoken dialog and descriptions of music and sound effects.\n\nSee Also\nLanguage option characteristic constants\nlet MPLanguageOptionCharacteristicContainsOnlyForcedSubtitles: String\nIndicates that the language option presents only forced subtitles.\nlet MPLanguageOptionCharacteristicDescribesVideo: String\nIndicates that the language option includes audible content that describes the visual portion of the presentation.\nlet MPLanguageOptionCharacteristicDubbedTranslation: String\nIndicates that the language option includes content that contains a dubbed translation.\nlet MPLanguageOptionCharacteristicEasyToRead: String\nIndicates that the language option provides legible content in the language of its specified locale and that the content was edited for ease of reading.\nlet MPLanguageOptionCharacteristicIsAuxiliaryContent: String\nIndicates that the language option includes content that’s marked by the content author as auxiliary to the presentation of the language option.\nlet MPLanguageOptionCharacteristicIsMainProgramContent: String\nIndicates that the language option includes content that’s marked by the content author as intrinsic to the presentation of the language option.\nlet MPLanguageOptionCharacteristicLanguageTranslation: String\nIndicates that the language option contains a translation in the language of its specified locale.\nlet MPLanguageOptionCharacteristicTranscribesSpokenDialog: String\nIndicates that the language option includes legible content in the language of its specified locale that transcribes spoken dialog.\nlet MPLanguageOptionCharacteristicVoiceOverTranslation: String\nIndicates that the language option includes voice over content in the language of its specified locale describes translated dialog."
  },
  {
    "title": "init(languageOptions:defaultLanguageOption:allowEmptySelection:)",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpnowplayinginfolanguageoptiongroup/1623138-init",
    "html": "Parameters\nlanguageOptions\n\nAn array containing the language options to associate with the language option group.\n\ndefaultLanguageOption\n\nThe default language option for the group. Set this parameter to nil to denote there’s no default language option.\n\nallowEmptySelection\n\nA Boolean that indicates whether the system requires a selection for the language option group.\n\nReturn Value\n\nA newly created language option group with the passed attributes."
  },
  {
    "title": "maximumVolumeSliderImage(for:)",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpvolumeview/1620072-maximumvolumesliderimage",
    "html": "Parameters\nstate\n\nThe control state whose maximum volume image you want. You should specify only one control state value for this parameter.\n\nReturn Value\n\nThe maximum volume image associated with the specified state, or nil if an appropriate image could not be retrieved. This method might return nil if you specify multiple control states in the state parameter.\n\nDiscussion\n\nFor a description of slider and thumb images, see Customizing the volume slider’s appearance.\n\nSee Also\nCustomizing the volume slider\nfunc minimumVolumeSliderImage(for: UIControl.State) -> UIImage?\nReturns the minimum volume image associated with the specified control state.\nfunc setMaximumVolumeSliderImage(UIImage?, for: UIControl.State)\nAssigns a maximum volume slider image to the specified control states.\nfunc setMinimumVolumeSliderImage(UIImage?, for: UIControl.State)\nAssigns a minimum volume slider image to the specified control states.\nfunc setVolumeThumbImage(UIImage?, for: UIControl.State)\nAssigns a thumb image to the specified control states.\nfunc volumeSliderRect(forBounds: CGRect) -> CGRect\nReturns the drawing rectangle for the slider’s track.\nfunc volumeThumbImage(for: UIControl.State) -> UIImage?\nReturns the thumb image associated with the specified control state.\nfunc volumeThumbRect(forBounds: CGRect, volumeSliderRect: CGRect, value: Float) -> CGRect\nReturns the drawing rectangle for the volume slider’s thumb image."
  },
  {
    "title": "setVolumeThumbImage(_:for:)",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpvolumeview/1620062-setvolumethumbimage",
    "html": "Parameters\nimage\n\nThe thumb image to associate with the specified states.\n\nstate\n\nThe control state with which to associate the image.\n\nDiscussion\n\nFor a description of slider and thumb images, see Customizing the volume slider’s appearance.\n\nSee Also\nCustomizing the volume slider\nfunc maximumVolumeSliderImage(for: UIControl.State) -> UIImage?\nReturns the maximum volume image associated with the specified control state.\nfunc minimumVolumeSliderImage(for: UIControl.State) -> UIImage?\nReturns the minimum volume image associated with the specified control state.\nfunc setMaximumVolumeSliderImage(UIImage?, for: UIControl.State)\nAssigns a maximum volume slider image to the specified control states.\nfunc setMinimumVolumeSliderImage(UIImage?, for: UIControl.State)\nAssigns a minimum volume slider image to the specified control states.\nfunc volumeSliderRect(forBounds: CGRect) -> CGRect\nReturns the drawing rectangle for the slider’s track.\nfunc volumeThumbImage(for: UIControl.State) -> UIImage?\nReturns the thumb image associated with the specified control state.\nfunc volumeThumbRect(forBounds: CGRect, volumeSliderRect: CGRect, value: Float) -> CGRect\nReturns the drawing rectangle for the volume slider’s thumb image."
  },
  {
    "title": "setMinimumVolumeSliderImage(_:for:)",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpvolumeview/1620063-setminimumvolumesliderimage",
    "html": "Parameters\nimage\n\nThe minimum volume slider image to associate with the specified states.\n\nstate\n\nThe control state with which to associate the image.\n\nDiscussion\n\nThe orientation of the track image must match the orientation of the slider control. To facilitate the stretching of the image to fill the space between the thumb and end point, track images are usually defined in three regions. A stretchable region sits between two end cap regions. The end caps define the portions of the image that remain as is and aren’t stretched. The stretchable region is a 1-point wide area between the end caps that the system can replicate to make the image appear longer.\n\nTo define the end cap sizes for a slider, assign an appropriate value to the image’s capInsets property. For more information about how this value defines the regions of the slider, see the UIImage.\n\nFor a description of slider and thumb images, see Customizing the volume slider’s appearance.\n\nSee Also\nCustomizing the volume slider\nfunc maximumVolumeSliderImage(for: UIControl.State) -> UIImage?\nReturns the maximum volume image associated with the specified control state.\nfunc minimumVolumeSliderImage(for: UIControl.State) -> UIImage?\nReturns the minimum volume image associated with the specified control state.\nfunc setMaximumVolumeSliderImage(UIImage?, for: UIControl.State)\nAssigns a maximum volume slider image to the specified control states.\nfunc setVolumeThumbImage(UIImage?, for: UIControl.State)\nAssigns a thumb image to the specified control states.\nfunc volumeSliderRect(forBounds: CGRect) -> CGRect\nReturns the drawing rectangle for the slider’s track.\nfunc volumeThumbImage(for: UIControl.State) -> UIImage?\nReturns the thumb image associated with the specified control state.\nfunc volumeThumbRect(forBounds: CGRect, volumeSliderRect: CGRect, value: Float) -> CGRect\nReturns the drawing rectangle for the volume slider’s thumb image."
  },
  {
    "title": "init(query:)",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmusicplayermediaitemqueuedescriptor/2582441-init",
    "html": "Parameters\nquery\n\nThe query used to create the new queue descriptor.\n\nReturn Value\n\nA new queue descriptor consisting of the media items contained in the designated query.\n\nDiscussion\n\nAfter creating a new queue descriptor, you can modify when individual media items start and stop playing, and which item in the queue plays first when playback begins.\n\nSee Also\nCreating a new media item queue descriptor\ninit(itemCollection: MPMediaItemCollection)\nCreates a new queue descriptor using the designated collection."
  },
  {
    "title": "MPMediaLibraryAuthorizationStatus.restricted",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmedialibraryauthorizationstatus/restricted",
    "html": "See Also\nAuthorization statuses\ncase notDetermined\nThe user hasn't determined whether to authorize the use of their media library.\ncase denied\nThe app may not access the items in the user's media library.\ncase authorized\nYour app may access items in the user's media library."
  },
  {
    "title": "MPMediaLibraryAuthorizationStatus.denied",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmedialibraryauthorizationstatus/denied",
    "html": "See Also\nAuthorization statuses\ncase notDetermined\nThe user hasn't determined whether to authorize the use of their media library.\ncase restricted\nThe app may access some of the content in the user's media library.\ncase authorized\nYour app may access items in the user's media library."
  },
  {
    "title": "beginUpdates()",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpplayablecontentmanager/1614801-beginupdates",
    "html": "Discussion\n\nCall this method to start a synchronized batch update of MPContentItems objects.\n\nSee Also\nUpdating data\nfunc endUpdates()\nEnds a synchronized update.\nDeprecated\nfunc reloadData()\nReloads the data from the data source.\nDeprecated"
  },
  {
    "title": "endUpdates()",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpplayablecontentmanager/1614804-endupdates",
    "html": "Discussion\n\nCall this method upon completion of the batch updates. If you call this method in the middle of an update, all updates stop and you’ll need to apply remaining updates at a later time.\n\nSee Also\nUpdating data\nfunc beginUpdates()\nUpdates several Media Player content items at once.\nDeprecated\nfunc reloadData()\nReloads the data from the data source.\nDeprecated"
  },
  {
    "title": "MPMediaLibraryAuthorizationStatus.notDetermined",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmedialibraryauthorizationstatus/notdetermined",
    "html": "See Also\nAuthorization statuses\ncase denied\nThe app may not access the items in the user's media library.\ncase restricted\nThe app may access some of the content in the user's media library.\ncase authorized\nYour app may access items in the user's media library."
  },
  {
    "title": "artwork",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpcontentitem/1620160-artwork",
    "html": "Discussion\n\nAn image that’s displayed with the media item. A song would have an album cover image, whereas a movie could have a movie poster image associated with it.\n\nSee Also\nRetrieving information about a media item\nvar isContainer: Bool\nA Boolean value that indicates whether a media item is container of other items.\nvar isExplicitContent: Bool\nA Boolean value that indicates whether the media item contains explicit content.\nvar identifier: String\nThe unique identifier for the media item.\nvar isPlayable: Bool\nA Boolean value that indicates whether a media item is able to be played.\nvar isStreamingContent: Bool\nA Boolean value that indicates whether the content item is streaming content.\nvar playbackProgress: Float\nThe amount of content played for the media item.\nvar subtitle: String?\nA secondary designator for the media item.\nvar title: String?\nThe public name of the media item."
  },
  {
    "title": "isContainer",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpcontentitem/1620154-iscontainer",
    "html": "Discussion\n\nWhen set to true, the designated content item’s identified as being able to contain other content items. For example, an album is a container that holds multiple songs.\n\nSee Also\nRetrieving information about a media item\nvar artwork: MPMediaItemArtwork?\nA single image that’s associated with the media item.\nvar isExplicitContent: Bool\nA Boolean value that indicates whether the media item contains explicit content.\nvar identifier: String\nThe unique identifier for the media item.\nvar isPlayable: Bool\nA Boolean value that indicates whether a media item is able to be played.\nvar isStreamingContent: Bool\nA Boolean value that indicates whether the content item is streaming content.\nvar playbackProgress: Float\nThe amount of content played for the media item.\nvar subtitle: String?\nA secondary designator for the media item.\nvar title: String?\nThe public name of the media item."
  },
  {
    "title": "MPMediaItemPropertyIsCloudItem",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmediaitempropertyisclouditem",
    "html": "Discussion\n\nA media item is an iCloud item if it’s available in the iCloud Music Library, or if it’s part of the Apple Music subscription service and isn’t already on the device. This value is an NSNumber object that represents a BOOL data type.\n\nSee Also\nFilterable property keys\nlet MPMediaItemPropertyAlbumArtist: String\nThe primary performing artist for an album.\nlet MPMediaItemPropertyAlbumArtistPersistentID: String\nThe persistent identifier for an album artist.\nlet MPMediaItemPropertyAlbumPersistentID: String\nThe key for the persistent identifier for an album.\nlet MPMediaItemPropertyAlbumTitle: String\nThe title of an album.\nlet MPMediaItemPropertyArtist: String\nThe performing artists for a media item — which may vary from the primary artist for the album that a media item belongs to.\nlet MPMediaItemPropertyArtistPersistentID: String\nThe key for the persistent identifier for an artist.\nlet MPMediaItemPropertyComposer: String\nThe musical composer for the media item.\nlet MPMediaItemPropertyComposerPersistentID: String\nThe persistent identifier for a composer.\nlet MPMediaItemPropertyGenre: String\nThe music or film genre of the media item.\nlet MPMediaItemPropertyGenrePersistentID: String\nThe persistent identifier for a genre.\nlet MPMediaItemPropertyHasProtectedAsset: String\nA Boolean value that indicates the media item has DRM protection so it can’t play through a standard playback API.\nlet MPMediaItemPropertyIsCompilation: String\nA Boolean value that indicates whether the media item is part of a compilation.\nlet MPMediaItemPropertyMediaType: String\nThe media type of the media item.\nlet MPMediaItemPropertyPersistentID: String\nThe key for the persistent identifier for the media item.\nlet MPMediaItemPropertyPlayCount: String\nThe number of times the user plays the media item.\nlet MPMediaItemPropertyPodcastPersistentID: String\nThe persistent identifier for an audio podcast.\nlet MPMediaItemPropertyPodcastTitle: String\nThe title of a podcast.\nlet MPMediaItemPropertyTitle: String\nThe title or name of the media item."
  },
  {
    "title": "isPlayable",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpcontentitem/1620158-isplayable",
    "html": "Discussion\n\nWhen set to true, the designated content item is able to be played. Containers and individual content items can set this property to true. For example, a playlist with multiple songs in it. The playlist is a container that can be played, or the user could choose a song from inside of the playlist.\n\nSee Also\nRetrieving information about a media item\nvar artwork: MPMediaItemArtwork?\nA single image that’s associated with the media item.\nvar isContainer: Bool\nA Boolean value that indicates whether a media item is container of other items.\nvar isExplicitContent: Bool\nA Boolean value that indicates whether the media item contains explicit content.\nvar identifier: String\nThe unique identifier for the media item.\nvar isStreamingContent: Bool\nA Boolean value that indicates whether the content item is streaming content.\nvar playbackProgress: Float\nThe amount of content played for the media item.\nvar subtitle: String?\nA secondary designator for the media item.\nvar title: String?\nThe public name of the media item."
  },
  {
    "title": "playbackProgress",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpcontentitem/1620153-playbackprogress",
    "html": "Discussion\n\nThe value of this property ranges from 0.0 to 1.0. A value 0.0 indicates that the media item hasn’t played, while 1.0 indicates that the media item has completely played. The default value is –1.0 indicates that the progress indicator isn’t displayed. The system displays a progress indicator automatically if this property has a value between 0.0 and 1.0.\n\nSee Also\nRetrieving information about a media item\nvar artwork: MPMediaItemArtwork?\nA single image that’s associated with the media item.\nvar isContainer: Bool\nA Boolean value that indicates whether a media item is container of other items.\nvar isExplicitContent: Bool\nA Boolean value that indicates whether the media item contains explicit content.\nvar identifier: String\nThe unique identifier for the media item.\nvar isPlayable: Bool\nA Boolean value that indicates whether a media item is able to be played.\nvar isStreamingContent: Bool\nA Boolean value that indicates whether the content item is streaming content.\nvar subtitle: String?\nA secondary designator for the media item.\nvar title: String?\nThe public name of the media item."
  },
  {
    "title": "isStreamingContent",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpcontentitem/1771745-isstreamingcontent",
    "html": "Discussion\n\nWhen set to true, the designated content item is identified as being streamable.\n\nSee Also\nRetrieving information about a media item\nvar artwork: MPMediaItemArtwork?\nA single image that’s associated with the media item.\nvar isContainer: Bool\nA Boolean value that indicates whether a media item is container of other items.\nvar isExplicitContent: Bool\nA Boolean value that indicates whether the media item contains explicit content.\nvar identifier: String\nThe unique identifier for the media item.\nvar isPlayable: Bool\nA Boolean value that indicates whether a media item is able to be played.\nvar playbackProgress: Float\nThe amount of content played for the media item.\nvar subtitle: String?\nA secondary designator for the media item.\nvar title: String?\nThe public name of the media item."
  },
  {
    "title": "subtitle",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpcontentitem/1620155-subtitle",
    "html": "Discussion\n\nA subtitle is another public designator for the media item. For a song track, the subtitle is often the artist or album name.\n\nSee Also\nRetrieving information about a media item\nvar artwork: MPMediaItemArtwork?\nA single image that’s associated with the media item.\nvar isContainer: Bool\nA Boolean value that indicates whether a media item is container of other items.\nvar isExplicitContent: Bool\nA Boolean value that indicates whether the media item contains explicit content.\nvar identifier: String\nThe unique identifier for the media item.\nvar isPlayable: Bool\nA Boolean value that indicates whether a media item is able to be played.\nvar isStreamingContent: Bool\nA Boolean value that indicates whether the content item is streaming content.\nvar playbackProgress: Float\nThe amount of content played for the media item.\nvar title: String?\nThe public name of the media item."
  },
  {
    "title": "init(_:userInfo:)",
    "url": "https://developer.apple.com/documentation/mediaplayer/mperror/3726626-init",
    "html": "Parameters\ncode\n\nThe error code.\n\nuserInfo\n\nThe user info associated with the error."
  },
  {
    "title": "!=(_:_:)",
    "url": "https://developer.apple.com/documentation/mediaplayer/mperror/2943690",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nInequality is the inverse of equality. For any values a and b, a != b implies that a == b is false.\n\nThis is the default implementation of the not-equal-to operator (!=) for any type that conforms to Equatable.\n\nSee Also\nComparing errors\nstatic func == (MPError, MPError) -> Bool\nReturns a Boolean value that indicates whether two values are equal."
  },
  {
    "title": "localizedDescription",
    "url": "https://developer.apple.com/documentation/mediaplayer/mperror/2887569-localizeddescription",
    "html": "See Also\nInspecting an error\nstatic var errorDomain: String\nA static string representation of the error domain.\nvar code: Code\nThe error code.\nenum MPError.Code\nAn enumeration that represents error codes for framework operations.\nError constants\nError code constants for framework operations.\nvar errorCode: Int\nThe integer error code.\nvar userInfo: [String : Any]\nThe user information for the error.\nvar errorUserInfo: [String : Any]\nThe error user information for the error."
  },
  {
    "title": "hash(into:)",
    "url": "https://developer.apple.com/documentation/mediaplayer/mperror/3726624-hash",
    "html": "Parameters\nhasher\n\nThe hasher to use when combining the components of this instance.\n\nSee Also\nAccessing hash values\nvar hashValue: Int\nThe hash value."
  },
  {
    "title": "userInfo",
    "url": "https://developer.apple.com/documentation/mediaplayer/mperror/3726627-userinfo",
    "html": "See Also\nInspecting an error\nstatic var errorDomain: String\nA static string representation of the error domain.\nvar code: Code\nThe error code.\nenum MPError.Code\nAn enumeration that represents error codes for framework operations.\nError constants\nError code constants for framework operations.\nvar errorCode: Int\nThe integer error code.\nvar errorUserInfo: [String : Any]\nThe error user information for the error.\nvar localizedDescription: String\nA localized description of the error."
  },
  {
    "title": "==(_:_:)",
    "url": "https://developer.apple.com/documentation/mediaplayer/mperror/3726622",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nReturn Value\n\ntrue if the errors are equal; otherwise false.\n\nSee Also\nComparing errors\nstatic func != (MPError, MPError) -> Bool\nReturns a Boolean value indicating whether two values are not equal."
  },
  {
    "title": "MPError.Code",
    "url": "https://developer.apple.com/documentation/mediaplayer/mperror/code",
    "html": "Topics\nError codes\ncase cancelled\nAn error that indicates the system canceled the requested operation before it completed.\ncase cloudServiceCapabilityMissing\nAn error that indicates the operation can’t complete because iCloud services aren’t enabled.\ncase networkConnectionFailed\nAn error that indicates the operation failed because the device can’t connect to the network.\ncase notFound\nAn error that indicates the operation failed because the system can’t find the requested identifier in the current storefront.\ncase notSupported\nAn error that indicates the requested operation failed because the system doesn’t support it.\ncase permissionDenied\nAn error that indicates the operation can’t complete because the user doesn’t have permission to execute the operation.\ncase requestTimedOut\nAn error that indicates the requested operation timed out.\ncase unknown\nAn error that indicates the requested operation can’t complete due to an unknown error.\nRelationships\nConforms To\nSendable\nSee Also\nInspecting an error\nstatic var errorDomain: String\nA static string representation of the error domain.\nvar code: Code\nThe error code.\nError constants\nError code constants for framework operations.\nvar errorCode: Int\nThe integer error code.\nvar userInfo: [String : Any]\nThe user information for the error.\nvar errorUserInfo: [String : Any]\nThe error user information for the error.\nvar localizedDescription: String\nA localized description of the error."
  },
  {
    "title": "errorCode",
    "url": "https://developer.apple.com/documentation/mediaplayer/mperror/2887570-errorcode",
    "html": "See Also\nInspecting an error\nstatic var errorDomain: String\nA static string representation of the error domain.\nvar code: Code\nThe error code.\nenum MPError.Code\nAn enumeration that represents error codes for framework operations.\nError constants\nError code constants for framework operations.\nvar userInfo: [String : Any]\nThe user information for the error.\nvar errorUserInfo: [String : Any]\nThe error user information for the error.\nvar localizedDescription: String\nA localized description of the error."
  },
  {
    "title": "Error constants",
    "url": "https://developer.apple.com/documentation/mediaplayer/mperror/error_constants",
    "html": "Topics\nError code constants\nstatic var cancelled: MPError.Code\nThe system cancels the requested operation before it completes.\nstatic var cloudServiceCapabilityMissing: MPError.Code\nThe operation can’t complete because iCloud services aren’t in an enabled state.\nstatic var unknown: MPError.Code\nThe requested operation can’t complete due to an unknown error.\nstatic var networkConnectionFailed: MPError.Code\nThe operation fails because the device can’t connect to the network.\nstatic var notFound: MPError.Code\nThe operation fails because the system can’t find the requested identifier in the current storefront.\nstatic var notSupported: MPError.Code\nThe requested operation fails because the system doesn’t support it.\nstatic var permissionDenied: MPError.Code\nThe operation can’t complete because the user doesn’t have permission for the request.\nstatic var requestTimedOut: MPError.Code\nThe requested operation times out.\nSee Also\nInspecting an error\nstatic var errorDomain: String\nA static string representation of the error domain.\nvar code: Code\nThe error code.\nenum MPError.Code\nAn enumeration that represents error codes for framework operations.\nvar errorCode: Int\nThe integer error code.\nvar userInfo: [String : Any]\nThe user information for the error.\nvar errorUserInfo: [String : Any]\nThe error user information for the error.\nvar localizedDescription: String\nA localized description of the error."
  },
  {
    "title": "errorDomain",
    "url": "https://developer.apple.com/documentation/mediaplayer/mperror/2887571-errordomain",
    "html": "See Also\nInspecting an error\nvar code: Code\nThe error code.\nenum MPError.Code\nAn enumeration that represents error codes for framework operations.\nError constants\nError code constants for framework operations.\nvar errorCode: Int\nThe integer error code.\nvar userInfo: [String : Any]\nThe user information for the error.\nvar errorUserInfo: [String : Any]\nThe error user information for the error.\nvar localizedDescription: String\nA localized description of the error."
  },
  {
    "title": "MPRatingCommand",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpratingcommand",
    "html": "Topics\nDefining maximum and minimum ratings\nvar maximumRating: Float\nThe maximum rating for a command.\nvar minimumRating: Float\nThe minimum rating for a command.\nRelationships\nInherits From\nMPRemoteCommand\nSee Also\nResponding to feedback and rating events\nclass MPFeedbackCommand\nAn object that reflects the feedback state for the playing item.\nclass MPFeedbackCommandEvent\nAn event requesting a change in the feedback setting.\nclass MPRatingCommandEvent\nAn event requesting a change in the rating."
  },
  {
    "title": "MPFeedbackCommand",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpfeedbackcommand",
    "html": "Overview\n\nThe shared MPRemoteCommandCenter object vends feedback objects for liking, disliking, and bookmarking media items. Use these objects to register handlers for the types of feedback your app supports and to perform the appropriate tasks when that feedback changes. When the currently playing item changes, you can also use this object to set the feedback state for the new item.\n\nWhen the state of a feedback item changes, the system delivers an appropriate event to registered handlers of this object. Your handler code must determine which media item receives the feedback and then apply the update the feedback state for that item. You might also perform other tasks related to receiving feedback. For example, if the user likes the currently playing song, you might update the appropriate UI in your app or use the information to recommend similar songs.\n\nTopics\nRetrieving information about a feedback command\nvar isActive: Bool\nA Boolean value that indicates whether the feedback’s action is on or off.\nvar localizedTitle: String\nA localized string used to describe the context of a command.\nvar localizedShortTitle: String\nA shortened version of the string used to describe the context of a command.\nRelationships\nInherits From\nMPRemoteCommand\nSee Also\nResponding to feedback and rating events\nclass MPFeedbackCommandEvent\nAn event requesting a change in the feedback setting.\nclass MPRatingCommand\nAn object that provides a detailed rating for the playing item.\nclass MPRatingCommandEvent\nAn event requesting a change in the rating."
  },
  {
    "title": "MPFeedbackCommandEvent",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpfeedbackcommandevent",
    "html": "Topics\nDetermining the type of feedback action\nvar isNegative: Bool\nA Boolean value that indicates whether an app should perform a negative command appropriate to the target.\nRelationships\nInherits From\nMPRemoteCommandEvent\nSee Also\nResponding to feedback and rating events\nclass MPFeedbackCommand\nAn object that reflects the feedback state for the playing item.\nclass MPRatingCommand\nAn object that provides a detailed rating for the playing item.\nclass MPRatingCommandEvent\nAn event requesting a change in the rating."
  },
  {
    "title": "MPRatingCommandEvent",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpratingcommandevent",
    "html": "Topics\nRating a media item\nvar rating: Float\nThe rating for the command event.\nRelationships\nInherits From\nMPRemoteCommandEvent\nSee Also\nResponding to feedback and rating events\nclass MPFeedbackCommand\nAn object that reflects the feedback state for the playing item.\nclass MPFeedbackCommandEvent\nAn event requesting a change in the feedback setting.\nclass MPRatingCommand\nAn object that provides a detailed rating for the playing item."
  },
  {
    "title": "MPMediaItemPropertyComments",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmediaitempropertycomments",
    "html": "Discussion\n\nThis value is an NSString object.\n\nSee Also\nProperty keys\nlet MPMediaItemPropertyPlaybackDuration: String\nThe playback duration of the media item.\nlet MPMediaItemPropertyAlbumTrackNumber: String\nThe track number of the media item, for a media item that is part of an album.\nlet MPMediaItemPropertyAlbumTrackCount: String\nThe number of tracks for the album that contains the media item.\nlet MPMediaItemPropertyDiscNumber: String\nThe disc number of the media item, for a media item that is part of a multidisc album.\nlet MPMediaItemPropertyDiscCount: String\nThe number of discs for the album that contains the media item.\nlet MPMediaItemPropertyArtwork: String\nThe artwork image for the media item.\nlet MPMediaItemPropertyLyrics: String\nThe lyrics for the media item.\nlet MPMediaItemPropertyReleaseDate: String\nThe date of the media item’s first public release.\nlet MPMediaItemPropertyBeatsPerMinute: String\nThe number of musical beats per minute for the media item.\nlet MPMediaItemPropertyAssetURL: String\nA URL that points to the media item.\nlet MPMediaItemPropertyIsExplicit: String\nA Boolean value that indicates whether the media item contains explicit (adult) lyrics or language.\nlet MPMediaItemPropertyIsPreorder: String\nA Boolean value that indicates whether the media item is a preorder.\nlet MPMediaItemPropertyPlaybackStoreID: String\nThe identifier for enqueueing store tracks."
  },
  {
    "title": "MPMediaItemPropertyAlbumArtistPersistentID",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmediaitempropertyalbumartistpersistentid",
    "html": "Discussion\n\nThis value is an NSNumber object that contains a uint64_t (unsigned long long). The value of the MPMediaItemPropertyAlbumArtistPersistentID identifier persists across application launches and across syncs that do not change the sync status of the media item. The value is not guaranteed to persist across a sync/unsync/sync cycle.\n\nCan be used to build a media property predicate as described in MPMediaPropertyPredicate.\n\nSee Also\nFilterable property keys\nlet MPMediaItemPropertyAlbumArtist: String\nThe primary performing artist for an album.\nlet MPMediaItemPropertyAlbumPersistentID: String\nThe key for the persistent identifier for an album.\nlet MPMediaItemPropertyAlbumTitle: String\nThe title of an album.\nlet MPMediaItemPropertyArtist: String\nThe performing artists for a media item — which may vary from the primary artist for the album that a media item belongs to.\nlet MPMediaItemPropertyArtistPersistentID: String\nThe key for the persistent identifier for an artist.\nlet MPMediaItemPropertyComposer: String\nThe musical composer for the media item.\nlet MPMediaItemPropertyComposerPersistentID: String\nThe persistent identifier for a composer.\nlet MPMediaItemPropertyGenre: String\nThe music or film genre of the media item.\nlet MPMediaItemPropertyGenrePersistentID: String\nThe persistent identifier for a genre.\nlet MPMediaItemPropertyHasProtectedAsset: String\nA Boolean value that indicates the media item has DRM protection so it can’t play through a standard playback API.\nlet MPMediaItemPropertyIsCompilation: String\nA Boolean value that indicates whether the media item is part of a compilation.\nlet MPMediaItemPropertyIsCloudItem: String\nA Boolean value that indicates whether the media item is an iCloud item.\nlet MPMediaItemPropertyMediaType: String\nThe media type of the media item.\nlet MPMediaItemPropertyPersistentID: String\nThe key for the persistent identifier for the media item.\nlet MPMediaItemPropertyPlayCount: String\nThe number of times the user plays the media item.\nlet MPMediaItemPropertyPodcastPersistentID: String\nThe persistent identifier for an audio podcast.\nlet MPMediaItemPropertyPodcastTitle: String\nThe title of a podcast.\nlet MPMediaItemPropertyTitle: String\nThe title or name of the media item."
  },
  {
    "title": "MPMediaItemPropertyAlbumPersistentID",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmediaitempropertyalbumpersistentid",
    "html": "Discussion\n\nThis value is an NSNumber object that contains a MPMediaEntityPersistentID. The value of the MPMediaItemPropertyAlbumPersistentID identifier persists across application launches and across syncs that do not change the sync status of the media item. The value is not guaranteed to persist across a sync/unsync/sync cycle.\n\nCan be used to build a media property predicate as described in MPMediaPropertyPredicate.\n\nSee Also\nFilterable property keys\nlet MPMediaItemPropertyAlbumArtist: String\nThe primary performing artist for an album.\nlet MPMediaItemPropertyAlbumArtistPersistentID: String\nThe persistent identifier for an album artist.\nlet MPMediaItemPropertyAlbumTitle: String\nThe title of an album.\nlet MPMediaItemPropertyArtist: String\nThe performing artists for a media item — which may vary from the primary artist for the album that a media item belongs to.\nlet MPMediaItemPropertyArtistPersistentID: String\nThe key for the persistent identifier for an artist.\nlet MPMediaItemPropertyComposer: String\nThe musical composer for the media item.\nlet MPMediaItemPropertyComposerPersistentID: String\nThe persistent identifier for a composer.\nlet MPMediaItemPropertyGenre: String\nThe music or film genre of the media item.\nlet MPMediaItemPropertyGenrePersistentID: String\nThe persistent identifier for a genre.\nlet MPMediaItemPropertyHasProtectedAsset: String\nA Boolean value that indicates the media item has DRM protection so it can’t play through a standard playback API.\nlet MPMediaItemPropertyIsCompilation: String\nA Boolean value that indicates whether the media item is part of a compilation.\nlet MPMediaItemPropertyIsCloudItem: String\nA Boolean value that indicates whether the media item is an iCloud item.\nlet MPMediaItemPropertyMediaType: String\nThe media type of the media item.\nlet MPMediaItemPropertyPersistentID: String\nThe key for the persistent identifier for the media item.\nlet MPMediaItemPropertyPlayCount: String\nThe number of times the user plays the media item.\nlet MPMediaItemPropertyPodcastPersistentID: String\nThe persistent identifier for an audio podcast.\nlet MPMediaItemPropertyPodcastTitle: String\nThe title of a podcast.\nlet MPMediaItemPropertyTitle: String\nThe title or name of the media item."
  },
  {
    "title": "MPMediaItemPropertyIsPreorder",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmediaitempropertyispreorder",
    "html": "Discussion\n\nThis value is an NSNumber object that represents a BOOL data type.\n\nSee Also\nProperty keys\nlet MPMediaItemPropertyPlaybackDuration: String\nThe playback duration of the media item.\nlet MPMediaItemPropertyAlbumTrackNumber: String\nThe track number of the media item, for a media item that is part of an album.\nlet MPMediaItemPropertyAlbumTrackCount: String\nThe number of tracks for the album that contains the media item.\nlet MPMediaItemPropertyDiscNumber: String\nThe disc number of the media item, for a media item that is part of a multidisc album.\nlet MPMediaItemPropertyDiscCount: String\nThe number of discs for the album that contains the media item.\nlet MPMediaItemPropertyArtwork: String\nThe artwork image for the media item.\nlet MPMediaItemPropertyLyrics: String\nThe lyrics for the media item.\nlet MPMediaItemPropertyReleaseDate: String\nThe date of the media item’s first public release.\nlet MPMediaItemPropertyBeatsPerMinute: String\nThe number of musical beats per minute for the media item.\nlet MPMediaItemPropertyComments: String\nTextual information about the media item.\nlet MPMediaItemPropertyAssetURL: String\nA URL that points to the media item.\nlet MPMediaItemPropertyIsExplicit: String\nA Boolean value that indicates whether the media item contains explicit (adult) lyrics or language.\nlet MPMediaItemPropertyPlaybackStoreID: String\nThe identifier for enqueueing store tracks."
  },
  {
    "title": "MPMediaItemPropertyAlbumArtist",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmediaitempropertyalbumartist",
    "html": "Discussion\n\nThis value is an NSString object.\n\nCan be used to build a media property predicate as described in MPMediaPropertyPredicate.\n\nSee Also\nFilterable property keys\nlet MPMediaItemPropertyAlbumArtistPersistentID: String\nThe persistent identifier for an album artist.\nlet MPMediaItemPropertyAlbumPersistentID: String\nThe key for the persistent identifier for an album.\nlet MPMediaItemPropertyAlbumTitle: String\nThe title of an album.\nlet MPMediaItemPropertyArtist: String\nThe performing artists for a media item — which may vary from the primary artist for the album that a media item belongs to.\nlet MPMediaItemPropertyArtistPersistentID: String\nThe key for the persistent identifier for an artist.\nlet MPMediaItemPropertyComposer: String\nThe musical composer for the media item.\nlet MPMediaItemPropertyComposerPersistentID: String\nThe persistent identifier for a composer.\nlet MPMediaItemPropertyGenre: String\nThe music or film genre of the media item.\nlet MPMediaItemPropertyGenrePersistentID: String\nThe persistent identifier for a genre.\nlet MPMediaItemPropertyHasProtectedAsset: String\nA Boolean value that indicates the media item has DRM protection so it can’t play through a standard playback API.\nlet MPMediaItemPropertyIsCompilation: String\nA Boolean value that indicates whether the media item is part of a compilation.\nlet MPMediaItemPropertyIsCloudItem: String\nA Boolean value that indicates whether the media item is an iCloud item.\nlet MPMediaItemPropertyMediaType: String\nThe media type of the media item.\nlet MPMediaItemPropertyPersistentID: String\nThe key for the persistent identifier for the media item.\nlet MPMediaItemPropertyPlayCount: String\nThe number of times the user plays the media item.\nlet MPMediaItemPropertyPodcastPersistentID: String\nThe persistent identifier for an audio podcast.\nlet MPMediaItemPropertyPodcastTitle: String\nThe title of a podcast.\nlet MPMediaItemPropertyTitle: String\nThe title or name of the media item."
  },
  {
    "title": "MPSkipIntervalCommand",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpskipintervalcommand",
    "html": "Overview\n\nYou use a skip interval to move the playback of a media item, forward or backward, the indicated number of seconds. For example, a forward skip interval of 30 seconds at 2 minutes and 30 seconds into a song would immediately jump to 3 minutes into the song and continue playing. The skipped content isn’t played.\n\nTopics\nRetrieving skip intervals\nvar preferredIntervals: [NSNumber]\nThe available skip intervals, in seconds, for a media item.\nRelationships\nInherits From\nMPRemoteCommand\nSee Also\nResponding to track navigation events\nclass MPChangePlaybackPositionCommand\nAn object that responds to requests to change the current playback position of the playing item.\nclass MPChangePlaybackPositionCommandEvent\nAn event requesting a change in the playback position.\nclass MPSeekCommandEvent\nAn event requesting that the player seek to a new position.\nclass MPSkipIntervalCommandEvent\nAn event requesting a change in the current skip interval."
  },
  {
    "title": "MPMediaItemPropertyArtistPersistentID",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmediaitempropertyartistpersistentid",
    "html": "Discussion\n\nThis value is an NSNumber object that contains a MPMediaEntityPersistentID. The value of the MPMediaItemPropertyArtistPersistentID identifier persists across application launches and across syncs that do not change the sync status of the media item. The value is not guaranteed to persist across a sync/unsync/sync cycle.\n\nCan be used to build a media property predicate as described in MPMediaPropertyPredicate.\n\nSee Also\nFilterable property keys\nlet MPMediaItemPropertyAlbumArtist: String\nThe primary performing artist for an album.\nlet MPMediaItemPropertyAlbumArtistPersistentID: String\nThe persistent identifier for an album artist.\nlet MPMediaItemPropertyAlbumPersistentID: String\nThe key for the persistent identifier for an album.\nlet MPMediaItemPropertyAlbumTitle: String\nThe title of an album.\nlet MPMediaItemPropertyArtist: String\nThe performing artists for a media item — which may vary from the primary artist for the album that a media item belongs to.\nlet MPMediaItemPropertyComposer: String\nThe musical composer for the media item.\nlet MPMediaItemPropertyComposerPersistentID: String\nThe persistent identifier for a composer.\nlet MPMediaItemPropertyGenre: String\nThe music or film genre of the media item.\nlet MPMediaItemPropertyGenrePersistentID: String\nThe persistent identifier for a genre.\nlet MPMediaItemPropertyHasProtectedAsset: String\nA Boolean value that indicates the media item has DRM protection so it can’t play through a standard playback API.\nlet MPMediaItemPropertyIsCompilation: String\nA Boolean value that indicates whether the media item is part of a compilation.\nlet MPMediaItemPropertyIsCloudItem: String\nA Boolean value that indicates whether the media item is an iCloud item.\nlet MPMediaItemPropertyMediaType: String\nThe media type of the media item.\nlet MPMediaItemPropertyPersistentID: String\nThe key for the persistent identifier for the media item.\nlet MPMediaItemPropertyPlayCount: String\nThe number of times the user plays the media item.\nlet MPMediaItemPropertyPodcastPersistentID: String\nThe persistent identifier for an audio podcast.\nlet MPMediaItemPropertyPodcastTitle: String\nThe title of a podcast.\nlet MPMediaItemPropertyTitle: String\nThe title or name of the media item."
  },
  {
    "title": "MPMediaItemPropertyHasProtectedAsset",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmediaitempropertyhasprotectedasset",
    "html": "Discussion\n\nThis value is an NSNumber object that represents a BOOL data type.\n\nSee Also\nFilterable property keys\nlet MPMediaItemPropertyAlbumArtist: String\nThe primary performing artist for an album.\nlet MPMediaItemPropertyAlbumArtistPersistentID: String\nThe persistent identifier for an album artist.\nlet MPMediaItemPropertyAlbumPersistentID: String\nThe key for the persistent identifier for an album.\nlet MPMediaItemPropertyAlbumTitle: String\nThe title of an album.\nlet MPMediaItemPropertyArtist: String\nThe performing artists for a media item — which may vary from the primary artist for the album that a media item belongs to.\nlet MPMediaItemPropertyArtistPersistentID: String\nThe key for the persistent identifier for an artist.\nlet MPMediaItemPropertyComposer: String\nThe musical composer for the media item.\nlet MPMediaItemPropertyComposerPersistentID: String\nThe persistent identifier for a composer.\nlet MPMediaItemPropertyGenre: String\nThe music or film genre of the media item.\nlet MPMediaItemPropertyGenrePersistentID: String\nThe persistent identifier for a genre.\nlet MPMediaItemPropertyIsCompilation: String\nA Boolean value that indicates whether the media item is part of a compilation.\nlet MPMediaItemPropertyIsCloudItem: String\nA Boolean value that indicates whether the media item is an iCloud item.\nlet MPMediaItemPropertyMediaType: String\nThe media type of the media item.\nlet MPMediaItemPropertyPersistentID: String\nThe key for the persistent identifier for the media item.\nlet MPMediaItemPropertyPlayCount: String\nThe number of times the user plays the media item.\nlet MPMediaItemPropertyPodcastPersistentID: String\nThe persistent identifier for an audio podcast.\nlet MPMediaItemPropertyPodcastTitle: String\nThe title of a podcast.\nlet MPMediaItemPropertyTitle: String\nThe title or name of the media item."
  },
  {
    "title": "MPMediaItemPropertyGenrePersistentID",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmediaitempropertygenrepersistentid",
    "html": "Discussion\n\nThis value is an NSNumber object that contains a uint64_t (unsigned long long). The value of the MPMediaItemPropertyGenrePersistentID identifier persists across application launches and across syncs that do not change the sync status of the media item. The value is not guaranteed to persist across a sync/unsync/sync cycle.\n\nCan be used to build a media property predicate as described in MPMediaPropertyPredicate.\n\nSee Also\nFilterable property keys\nlet MPMediaItemPropertyAlbumArtist: String\nThe primary performing artist for an album.\nlet MPMediaItemPropertyAlbumArtistPersistentID: String\nThe persistent identifier for an album artist.\nlet MPMediaItemPropertyAlbumPersistentID: String\nThe key for the persistent identifier for an album.\nlet MPMediaItemPropertyAlbumTitle: String\nThe title of an album.\nlet MPMediaItemPropertyArtist: String\nThe performing artists for a media item — which may vary from the primary artist for the album that a media item belongs to.\nlet MPMediaItemPropertyArtistPersistentID: String\nThe key for the persistent identifier for an artist.\nlet MPMediaItemPropertyComposer: String\nThe musical composer for the media item.\nlet MPMediaItemPropertyComposerPersistentID: String\nThe persistent identifier for a composer.\nlet MPMediaItemPropertyGenre: String\nThe music or film genre of the media item.\nlet MPMediaItemPropertyHasProtectedAsset: String\nA Boolean value that indicates the media item has DRM protection so it can’t play through a standard playback API.\nlet MPMediaItemPropertyIsCompilation: String\nA Boolean value that indicates whether the media item is part of a compilation.\nlet MPMediaItemPropertyIsCloudItem: String\nA Boolean value that indicates whether the media item is an iCloud item.\nlet MPMediaItemPropertyMediaType: String\nThe media type of the media item.\nlet MPMediaItemPropertyPersistentID: String\nThe key for the persistent identifier for the media item.\nlet MPMediaItemPropertyPlayCount: String\nThe number of times the user plays the media item.\nlet MPMediaItemPropertyPodcastPersistentID: String\nThe persistent identifier for an audio podcast.\nlet MPMediaItemPropertyPodcastTitle: String\nThe title of a podcast.\nlet MPMediaItemPropertyTitle: String\nThe title or name of the media item."
  },
  {
    "title": "MPMediaItemPropertyComposerPersistentID",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmediaitempropertycomposerpersistentid",
    "html": "Discussion\n\nThis value is an NSNumber object that contains a uint64_t (unsigned long long). The value of the MPMediaItemPropertyComposerPersistentID identifier persists across application launches and across syncs that do not change the sync status of the media item. The value is not guaranteed to persist across a sync/unsync/sync cycle.\n\nCan be used to build a media property predicate as described in MPMediaPropertyPredicate.\n\nSee Also\nFilterable property keys\nlet MPMediaItemPropertyAlbumArtist: String\nThe primary performing artist for an album.\nlet MPMediaItemPropertyAlbumArtistPersistentID: String\nThe persistent identifier for an album artist.\nlet MPMediaItemPropertyAlbumPersistentID: String\nThe key for the persistent identifier for an album.\nlet MPMediaItemPropertyAlbumTitle: String\nThe title of an album.\nlet MPMediaItemPropertyArtist: String\nThe performing artists for a media item — which may vary from the primary artist for the album that a media item belongs to.\nlet MPMediaItemPropertyArtistPersistentID: String\nThe key for the persistent identifier for an artist.\nlet MPMediaItemPropertyComposer: String\nThe musical composer for the media item.\nlet MPMediaItemPropertyGenre: String\nThe music or film genre of the media item.\nlet MPMediaItemPropertyGenrePersistentID: String\nThe persistent identifier for a genre.\nlet MPMediaItemPropertyHasProtectedAsset: String\nA Boolean value that indicates the media item has DRM protection so it can’t play through a standard playback API.\nlet MPMediaItemPropertyIsCompilation: String\nA Boolean value that indicates whether the media item is part of a compilation.\nlet MPMediaItemPropertyIsCloudItem: String\nA Boolean value that indicates whether the media item is an iCloud item.\nlet MPMediaItemPropertyMediaType: String\nThe media type of the media item.\nlet MPMediaItemPropertyPersistentID: String\nThe key for the persistent identifier for the media item.\nlet MPMediaItemPropertyPlayCount: String\nThe number of times the user plays the media item.\nlet MPMediaItemPropertyPodcastPersistentID: String\nThe persistent identifier for an audio podcast.\nlet MPMediaItemPropertyPodcastTitle: String\nThe title of a podcast.\nlet MPMediaItemPropertyTitle: String\nThe title or name of the media item."
  },
  {
    "title": "delegate",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpnowplayingsession/3547926-delegate",
    "html": "See Also\nAccessing the delegate object\nprotocol MPNowPlayingSessionDelegate\nA protocol that defines the delegate interface for a Now Playing session."
  },
  {
    "title": "MPChangePlaybackPositionCommand",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpchangeplaybackpositioncommand",
    "html": "Relationships\nInherits From\nMPRemoteCommand\nSee Also\nResponding to track navigation events\nclass MPChangePlaybackPositionCommandEvent\nAn event requesting a change in the playback position.\nclass MPSeekCommandEvent\nAn event requesting that the player seek to a new position.\nclass MPSkipIntervalCommand\nAn object that defines the skip intervals for the player.\nclass MPSkipIntervalCommandEvent\nAn event requesting a change in the current skip interval."
  },
  {
    "title": "MPChangePlaybackPositionCommandEvent",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpchangeplaybackpositioncommandevent",
    "html": "Topics\nRetrieving the position time\nvar positionTime: TimeInterval\nThe playback position used when setting the current time of the player.\nRelationships\nInherits From\nMPRemoteCommandEvent\nSee Also\nResponding to track navigation events\nclass MPChangePlaybackPositionCommand\nAn object that responds to requests to change the current playback position of the playing item.\nclass MPSeekCommandEvent\nAn event requesting that the player seek to a new position.\nclass MPSkipIntervalCommand\nAn object that defines the skip intervals for the player.\nclass MPSkipIntervalCommandEvent\nAn event requesting a change in the current skip interval."
  },
  {
    "title": "MPNowPlayingSessionDelegate",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpnowplayingsessiondelegate",
    "html": "Topics\nResponding to state changes\nfunc nowPlayingSessionDidChangeActive(MPNowPlayingSession)\nTells the delegate that the session changed its active status.\nfunc nowPlayingSessionDidChangeCanBecomeActive(MPNowPlayingSession)\nTells the delegate that the session is eligible to become active.\nRelationships\nInherits From\nNSObjectProtocol\nSee Also\nAccessing the delegate object\nvar delegate: (any MPNowPlayingSessionDelegate)?\nThe Now Playing session’s delegate object."
  },
  {
    "title": "MPSeekCommandEvent",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpseekcommandevent",
    "html": "Topics\nChanging the current seek behavior\nvar type: MPSeekCommandEventType\nThe type of seek command event.\nConstants\nenum MPSeekCommandEventType\nDefines the beginning and ending of seek events.\nRelationships\nInherits From\nMPRemoteCommandEvent\nSee Also\nResponding to track navigation events\nclass MPChangePlaybackPositionCommand\nAn object that responds to requests to change the current playback position of the playing item.\nclass MPChangePlaybackPositionCommandEvent\nAn event requesting a change in the playback position.\nclass MPSkipIntervalCommand\nAn object that defines the skip intervals for the player.\nclass MPSkipIntervalCommandEvent\nAn event requesting a change in the current skip interval."
  },
  {
    "title": "MPSkipIntervalCommandEvent",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpskipintervalcommandevent",
    "html": "Topics\nRetrieving the skip interval\nvar interval: TimeInterval\nThe chosen interval, in seconds, for the skip command event.\nRelationships\nInherits From\nMPRemoteCommandEvent\nSee Also\nResponding to track navigation events\nclass MPChangePlaybackPositionCommand\nAn object that responds to requests to change the current playback position of the playing item.\nclass MPChangePlaybackPositionCommandEvent\nAn event requesting a change in the playback position.\nclass MPSeekCommandEvent\nAn event requesting that the player seek to a new position.\nclass MPSkipIntervalCommand\nAn object that defines the skip intervals for the player."
  },
  {
    "title": "init(players:)",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpnowplayingsession/3547927-init",
    "html": "Parameters\nplayers\n\nAn array of player objects. Passing an empty array raises an error."
  },
  {
    "title": "MPMediaPickerControllerDelegate",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmediapickercontrollerdelegate",
    "html": "Overview\n\nThe delegate for a media item picker can respond to a user making media item selections. The delegate is also responsible for dismissing the media item picker from the parent view controller. The methods in this protocol are optional.\n\nMPMediaItem describes the media items and MPMediaPickerController describes the media item pickers.\n\nTopics\nResponding to user actions\nfunc mediaPicker(MPMediaPickerController, didPickMediaItems: MPMediaItemCollection)\nA method that the system calls when a user selects a set of media items.\nfunc mediaPickerDidCancel(MPMediaPickerController)\nA method that the system calls when a user taps Cancel to dismiss a media item picker.\nRelationships\nInherits From\nNSObjectProtocol\nSee Also\nResponding to media item picker selections\nvar delegate: (any MPMediaPickerControllerDelegate)?\nThe delegate for a media item picker."
  },
  {
    "title": "name",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmediaplaylistcreationmetadata/1618703-name",
    "html": "See Also\nMetadata for a playlist\nvar authorDisplayName: String!\nApp defined display name for the playlist.\nvar descriptionText: String\nThe descriptive text for the playlist."
  },
  {
    "title": "becomeActiveIfPossible(completion:)",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpnowplayingsession/3547924-becomeactiveifpossible",
    "html": "Parameters\ncompletion\n\nThe completion handler the system calls after it processes the request.\n\nDiscussion\n\nConcurrency Note\n\nYou can call this method from synchronous code using a completion handler, as shown on this page, or you can call it as an asynchronous method that has the following declaration:\n\nfunc becomeActiveIfPossible() async -> Bool\n\n\nFor information about concurrency and asynchronous code in Swift, see Calling Objective-C APIs Asynchronously.\n\nSee Also\nManaging the active state\nvar isActive: Bool\nA Boolean value that indicates whether the session is the app’s active Now Playing session.\nvar canBecomeActive: Bool\nA Boolean value that indicates whether the session can become the app’s active Now Playing session."
  },
  {
    "title": "canBecomeActive",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpnowplayingsession/3547925-canbecomeactive",
    "html": "See Also\nManaging the active state\nvar isActive: Bool\nA Boolean value that indicates whether the session is the app’s active Now Playing session.\nfunc becomeActiveIfPossible(completion: ((Bool) -> Void)?)\nTells the system to make the session the active Now Playing session if possible."
  },
  {
    "title": "addPlayer(_:)",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpnowplayingsession/3547923-addplayer",
    "html": "Parameters\nplayer\n\nThe player instance to add to the session.\n\nSee Also\nManaging players\nvar players: [AVPlayer]\nThe array of players associated with the session.\nfunc removePlayer(AVPlayer)\nRemoves a player from the session."
  },
  {
    "title": "playbackState",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmusicplayercontroller/1624173-playbackstate",
    "html": "Discussion\n\nIf you configure a music player as a system music player, the playback state matches the playback state of the built-in Music app. This is true whether the Music app is using the device Music library or a home shared library. Note, however, that when the Music app is using a home shared library, the music player’s nowPlayingItem property is nil.\n\nFor the available playback states, see MPMusicPlaybackState.\n\nSee Also\nManaging playback mode and state\nvar nowPlayingItem: MPMediaItem?\nThe currently-playing media item, or the media item in a queue that you designated to begin playback with.\nvar indexOfNowPlayingItem: Int\nThe index of the now playing item in the current playback queue.\nvar repeatMode: MPMusicRepeatMode\nThe current repeat mode of the music player.\nvar shuffleMode: MPMusicShuffleMode\nThe current shuffle mode of the music player.\nenum MPMusicPlaybackState\nThe music player playback state modes.\nenum MPMusicRepeatMode\nThe repeat modes for the media player.\nenum MPMusicShuffleMode\nThe shuffle modes for the media player.\nvar volume: Float\nThe audio playback volume for the music player, in the range from 0.0 (silent) through 1.0 (maximum volume).\nDeprecated"
  },
  {
    "title": "removePlayer(_:)",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpnowplayingsession/3547931-removeplayer",
    "html": "Parameters\nplayer\n\nThe player to remove from the session.\n\nSee Also\nManaging players\nvar players: [AVPlayer]\nThe array of players associated with the session.\nfunc addPlayer(AVPlayer)\nAdds a player to the session."
  },
  {
    "title": "automaticallyPublishesNowPlayingInfo",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpnowplayingsession/4076567-automaticallypublishesnowplaying",
    "html": "Discussion\n\nYou can set Now Playing information keys for automatic publishing on nowPlayingInfo.\n\nImportant\n\nIf you set automaticallyPublishesNowPlayingInfo to true, don’t use nowPlayingInfoCenter.\n\nSee Also\nConfiguring Now Playing information\nvar nowPlayingInfoCenter: MPNowPlayingInfoCenter\nThe Now Playing information center associated with the session."
  },
  {
    "title": "isActive",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpnowplayingsession/3547922-isactive",
    "html": "See Also\nManaging the active state\nvar canBecomeActive: Bool\nA Boolean value that indicates whether the session can become the app’s active Now Playing session.\nfunc becomeActiveIfPossible(completion: ((Bool) -> Void)?)\nTells the system to make the session the active Now Playing session if possible."
  },
  {
    "title": "nowPlayingInfoCenter",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpnowplayingsession/3547928-nowplayinginfocenter",
    "html": "See Also\nConfiguring Now Playing information\nvar automaticallyPublishesNowPlayingInfo: Bool\nA Boolean that indicates whether Now Playing info automatically publishes."
  },
  {
    "title": "allowEmptySelection",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpnowplayinginfolanguageoptiongroup/1623161-allowemptyselection",
    "html": "Discussion\n\nWhen set to true, there must be a language option in the language option group.\n\nSee Also\nRetrieving language option group information\nvar defaultLanguageOption: MPNowPlayingInfoLanguageOption?\nThe default language option for the group.\nvar languageOptions: [MPNowPlayingInfoLanguageOption]\nThe available language options for the group."
  },
  {
    "title": "defaultLanguageOption",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpnowplayinginfolanguageoptiongroup/1623142-defaultlanguageoption",
    "html": "Discussion\n\nThe value of this property is nil when there’s no default language option.\n\nSee Also\nRetrieving language option group information\nvar allowEmptySelection: Bool\nA Boolean that indicates whether the system requires a selection for the language option group.\nvar languageOptions: [MPNowPlayingInfoLanguageOption]\nThe available language options for the group."
  },
  {
    "title": "minimumVolumeSliderImage(for:)",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpvolumeview/1620076-minimumvolumesliderimage",
    "html": "Parameters\nstate\n\nThe control state whose minimum volume image you want. You should specify only one control state value for this parameter.\n\nReturn Value\n\nThe maximum volume image associated with the specified state, or nil if an appropriate image could not be retrieved. This method might return nil if you specify multiple control states in the state parameter.\n\nDiscussion\n\nFor a description of slider and thumb images, see Customizing the volume slider’s appearance.\n\nSee Also\nCustomizing the volume slider\nfunc maximumVolumeSliderImage(for: UIControl.State) -> UIImage?\nReturns the maximum volume image associated with the specified control state.\nfunc setMaximumVolumeSliderImage(UIImage?, for: UIControl.State)\nAssigns a maximum volume slider image to the specified control states.\nfunc setMinimumVolumeSliderImage(UIImage?, for: UIControl.State)\nAssigns a minimum volume slider image to the specified control states.\nfunc setVolumeThumbImage(UIImage?, for: UIControl.State)\nAssigns a thumb image to the specified control states.\nfunc volumeSliderRect(forBounds: CGRect) -> CGRect\nReturns the drawing rectangle for the slider’s track.\nfunc volumeThumbImage(for: UIControl.State) -> UIImage?\nReturns the thumb image associated with the specified control state.\nfunc volumeThumbRect(forBounds: CGRect, volumeSliderRect: CGRect, value: Float) -> CGRect\nReturns the drawing rectangle for the volume slider’s thumb image."
  },
  {
    "title": "languageOptions",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpnowplayinginfolanguageoptiongroup/1623157-languageoptions",
    "html": "Discussion\n\nThis property contains an array of available language options for the group.\n\nSee Also\nRetrieving language option group information\nvar allowEmptySelection: Bool\nA Boolean that indicates whether the system requires a selection for the language option group.\nvar defaultLanguageOption: MPNowPlayingInfoLanguageOption?\nThe default language option for the group."
  },
  {
    "title": "MPMediaItemPropertyAlbumTrackNumber",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmediaitempropertyalbumtracknumber",
    "html": "Discussion\n\nThis value is an NSNumber object representing an NSUInteger data type.\n\nSee Also\nProperty keys\nlet MPMediaItemPropertyPlaybackDuration: String\nThe playback duration of the media item.\nlet MPMediaItemPropertyAlbumTrackCount: String\nThe number of tracks for the album that contains the media item.\nlet MPMediaItemPropertyDiscNumber: String\nThe disc number of the media item, for a media item that is part of a multidisc album.\nlet MPMediaItemPropertyDiscCount: String\nThe number of discs for the album that contains the media item.\nlet MPMediaItemPropertyArtwork: String\nThe artwork image for the media item.\nlet MPMediaItemPropertyLyrics: String\nThe lyrics for the media item.\nlet MPMediaItemPropertyReleaseDate: String\nThe date of the media item’s first public release.\nlet MPMediaItemPropertyBeatsPerMinute: String\nThe number of musical beats per minute for the media item.\nlet MPMediaItemPropertyComments: String\nTextual information about the media item.\nlet MPMediaItemPropertyAssetURL: String\nA URL that points to the media item.\nlet MPMediaItemPropertyIsExplicit: String\nA Boolean value that indicates whether the media item contains explicit (adult) lyrics or language.\nlet MPMediaItemPropertyIsPreorder: String\nA Boolean value that indicates whether the media item is a preorder.\nlet MPMediaItemPropertyPlaybackStoreID: String\nThe identifier for enqueueing store tracks."
  },
  {
    "title": "setMaximumVolumeSliderImage(_:for:)",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpvolumeview/1620074-setmaximumvolumesliderimage",
    "html": "Parameters\nimage\n\nThe maximum volume slider image to associate with the specified states.\n\nstate\n\nThe control state with which to associate the image.\n\nDiscussion\n\nThe orientation of the track image must match the orientation of the slider control. To facilitate the stretching of the image to fill the space between the thumb and end point, track images are usually defined in three regions. A stretchable region sits between two end cap regions. The end caps define the portions of the image that remain as is and aren’t stretched. The stretchable region is a 1-point wide area between the end caps that the system can replicate to make the image appear longer.\n\nTo define the end cap sizes for a slider, assign an appropriate value to the image’s capInsets property. For more information about how this value defines the regions of the slider, see the UIImage.\n\nFor a description of slider and thumb images, see Customizing the volume slider’s appearance.\n\nSee Also\nCustomizing the volume slider\nfunc maximumVolumeSliderImage(for: UIControl.State) -> UIImage?\nReturns the maximum volume image associated with the specified control state.\nfunc minimumVolumeSliderImage(for: UIControl.State) -> UIImage?\nReturns the minimum volume image associated with the specified control state.\nfunc setMinimumVolumeSliderImage(UIImage?, for: UIControl.State)\nAssigns a minimum volume slider image to the specified control states.\nfunc setVolumeThumbImage(UIImage?, for: UIControl.State)\nAssigns a thumb image to the specified control states.\nfunc volumeSliderRect(forBounds: CGRect) -> CGRect\nReturns the drawing rectangle for the slider’s track.\nfunc volumeThumbImage(for: UIControl.State) -> UIImage?\nReturns the thumb image associated with the specified control state.\nfunc volumeThumbRect(forBounds: CGRect, volumeSliderRect: CGRect, value: Float) -> CGRect\nReturns the drawing rectangle for the volume slider’s thumb image."
  },
  {
    "title": "setRouteButtonImage(_:for:)",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpvolumeview/1620069-setroutebuttonimage",
    "html": "Parameters\nimage\n\nThe image to associate with the specified states.\n\nstate\n\nThe control state with which to associate the image.\n\nDiscussion\n\nUse this to customize the appearance of the route button for various states such as enabled, disabled, and highlighted.\n\nSee Also\nDeprecated\nvar volumeWarningSliderImage: UIImage?\nThe image used to designate the European Union volume limit.\nDeprecated\nvar showsRouteButton: Bool\nA Boolean value that indicates whether the route button is visible in the volume view.\nDeprecated\nvar areWirelessRoutesAvailable: Bool\nA Boolean value indicating wireless routes are available.\nDeprecated\nvar isWirelessRouteActive: Bool\nA Boolean value that indicates whether the wireless route is active.\nDeprecated\nfunc routeButtonImage(for: UIControl.State) -> UIImage?\nReturns the button image associated with the specified control state.\nDeprecated\nfunc routeButtonRect(forBounds: CGRect) -> CGRect\nReturns the drawing rectangle for the route button.\nDeprecated"
  },
  {
    "title": "mediaPickerDidCancel(_:)",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmediapickercontrollerdelegate/1614667-mediapickerdidcancel",
    "html": "Parameters\nmediaPicker\n\nThe media item picker to dismiss.\n\nSee Also\nResponding to user actions\nfunc mediaPicker(MPMediaPickerController, didPickMediaItems: MPMediaItemCollection)\nA method that the system calls when a user selects a set of media items."
  },
  {
    "title": "volumeSliderRect(forBounds:)",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpvolumeview/1620080-volumesliderrect",
    "html": "Parameters\nbounds\n\nThe bounding rectangle of the receiver.\n\nReturn Value\n\nThe computed drawing rectangle for the volume slider track. This rectangle corresponds to the entire length of the track between the minimum and maximum value images.\n\nDiscussion\n\nThe system uses the rectangle to scale the track and thumb images during drawing.\n\nSee Also\nCustomizing the volume slider\nfunc maximumVolumeSliderImage(for: UIControl.State) -> UIImage?\nReturns the maximum volume image associated with the specified control state.\nfunc minimumVolumeSliderImage(for: UIControl.State) -> UIImage?\nReturns the minimum volume image associated with the specified control state.\nfunc setMaximumVolumeSliderImage(UIImage?, for: UIControl.State)\nAssigns a maximum volume slider image to the specified control states.\nfunc setMinimumVolumeSliderImage(UIImage?, for: UIControl.State)\nAssigns a minimum volume slider image to the specified control states.\nfunc setVolumeThumbImage(UIImage?, for: UIControl.State)\nAssigns a thumb image to the specified control states.\nfunc volumeThumbImage(for: UIControl.State) -> UIImage?\nReturns the thumb image associated with the specified control state.\nfunc volumeThumbRect(forBounds: CGRect, volumeSliderRect: CGRect, value: Float) -> CGRect\nReturns the drawing rectangle for the volume slider’s thumb image."
  },
  {
    "title": "volumeThumbRect(forBounds:volumeSliderRect:value:)",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpvolumeview/1620067-volumethumbrect",
    "html": "Parameters\nbounds\n\nThe bounding rectangle of the thumb image.\n\nrect\n\nThe drawing rectangle for the receiver’s track, as returned by the volumeSliderRect(forBounds:) method.\n\nvalue\n\nThe current value of the volume slider.\n\nReturn Value\n\nThe computed drawing rectangle for the thumb image.\n\nDiscussion\n\nThe rectangle you return should reflect the size of your thumb image and its current position on the slider’s track.\n\nSee Also\nCustomizing the volume slider\nfunc maximumVolumeSliderImage(for: UIControl.State) -> UIImage?\nReturns the maximum volume image associated with the specified control state.\nfunc minimumVolumeSliderImage(for: UIControl.State) -> UIImage?\nReturns the minimum volume image associated with the specified control state.\nfunc setMaximumVolumeSliderImage(UIImage?, for: UIControl.State)\nAssigns a maximum volume slider image to the specified control states.\nfunc setMinimumVolumeSliderImage(UIImage?, for: UIControl.State)\nAssigns a minimum volume slider image to the specified control states.\nfunc setVolumeThumbImage(UIImage?, for: UIControl.State)\nAssigns a thumb image to the specified control states.\nfunc volumeSliderRect(forBounds: CGRect) -> CGRect\nReturns the drawing rectangle for the slider’s track.\nfunc volumeThumbImage(for: UIControl.State) -> UIImage?\nReturns the thumb image associated with the specified control state."
  },
  {
    "title": "routeButtonRect(forBounds:)",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpvolumeview/1620077-routebuttonrect",
    "html": "Parameters\nbounds\n\nThe bounding rectangle of the receiver.\n\nReturn Value\n\nThe computed drawing rectangle for the route button.\n\nDiscussion\n\nUse this method to retrieve the bounding rectangle for the route button.\n\nSee Also\nDeprecated\nvar volumeWarningSliderImage: UIImage?\nThe image used to designate the European Union volume limit.\nDeprecated\nvar showsRouteButton: Bool\nA Boolean value that indicates whether the route button is visible in the volume view.\nDeprecated\nvar areWirelessRoutesAvailable: Bool\nA Boolean value indicating wireless routes are available.\nDeprecated\nvar isWirelessRouteActive: Bool\nA Boolean value that indicates whether the wireless route is active.\nDeprecated\nfunc routeButtonImage(for: UIControl.State) -> UIImage?\nReturns the button image associated with the specified control state.\nDeprecated\nfunc setRouteButtonImage(UIImage?, for: UIControl.State)\nAssigns a button image to the specified control states.\nDeprecated"
  },
  {
    "title": "mediaPicker(_:didPickMediaItems:)",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmediapickercontrollerdelegate/1614657-mediapicker",
    "html": "Parameters\nmediaPicker\n\nThe media item picker to dismiss.\n\nmediaItemCollection\n\nThe selected media items.\n\nSee Also\nResponding to user actions\nfunc mediaPickerDidCancel(MPMediaPickerController)\nA method that the system calls when a user taps Cancel to dismiss a media item picker.\nRelated Documentation\niPod Library Access Programming Guide"
  },
  {
    "title": "itemCollection",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmusicplayermediaitemqueuedescriptor/2582438-itemcollection",
    "html": "See Also\nMedia item queue descriptor properties\nvar query: MPMediaQuery\nContains the media items found by the query used to create the queue descriptor.\nvar startItem: MPMediaItem?\nDesignates the media item to play first."
  },
  {
    "title": "init(itemCollection:)",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmusicplayermediaitemqueuedescriptor/2582437-init",
    "html": "Parameters\nitemCollection\n\nThe collection of media items used to create the new queue descriptor.\n\nReturn Value\n\nA new queue descriptor consisting of the media items contained in the designated collection.\n\nDiscussion\n\nAfter creating a new queue descriptor, you can modify when individual media items start and stop playing, and which item in the queue plays first when playback begins.\n\nSee Also\nCreating a new media item queue descriptor\ninit(query: MPMediaQuery)\nCreates a new queue descriptor using the designated query."
  },
  {
    "title": "play()",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmediaplayback/1616255-play",
    "html": "Required\n\nDiscussion\n\nIf playback was previously paused, this method resumes playback where it left off; otherwise, this method plays the first available item, from the beginning.\n\nIf a media player isn’t prepared for playback when you call this method, this method first prepares the media player and then starts playback. To minimize playback delay, call the prepareToPlay() method before you call this method.\n\nTo receive a notification when a movie player is ready to play, register for the MPMoviePlayerLoadStateDidChange notification. You can then check load state by accessing the movie player’s loadState property.\n\nSee Also\nStarting and stopping playback\nfunc pause()\nPauses playback of the current item.\n\nRequired\n\nfunc stop()\nEnds playback of the current item.\n\nRequired\n\nfunc prepareToPlay()\nPrepares a media player for playback.\n\nRequired\n\nvar isPreparedToPlay: Bool\nA Boolean value indicating whether a media player is ready to play.\n\nRequired"
  },
  {
    "title": "init(mediaTypes:)",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmediapickercontroller/1614663-init",
    "html": "Parameters\nmediaTypes\n\nA set representing the media types for the media item picker. See the MPMediaType enumeration.\n\nReturn Value\n\nA new media item picker.\n\nSee Also\nRelated Documentation\ninit\nInitializes a media item picker for all media types."
  },
  {
    "title": "title",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpcontentitem/1620156-title",
    "html": "Discussion\n\nThe main public designation of a media item is its title. For example, for a music track the title would be the song title. If the media item is a podcast, the title would be the episode name of a particular podcast.\n\nSee Also\nRetrieving information about a media item\nvar artwork: MPMediaItemArtwork?\nA single image that’s associated with the media item.\nvar isContainer: Bool\nA Boolean value that indicates whether a media item is container of other items.\nvar isExplicitContent: Bool\nA Boolean value that indicates whether the media item contains explicit content.\nvar identifier: String\nThe unique identifier for the media item.\nvar isPlayable: Bool\nA Boolean value that indicates whether a media item is able to be played.\nvar isStreamingContent: Bool\nA Boolean value that indicates whether the content item is streaming content.\nvar playbackProgress: Float\nThe amount of content played for the media item.\nvar subtitle: String?\nA secondary designator for the media item."
  },
  {
    "title": "errorUserInfo",
    "url": "https://developer.apple.com/documentation/mediaplayer/mperror/2887572-erroruserinfo",
    "html": "See Also\nInspecting an error\nstatic var errorDomain: String\nA static string representation of the error domain.\nvar code: Code\nThe error code.\nenum MPError.Code\nAn enumeration that represents error codes for framework operations.\nError constants\nError code constants for framework operations.\nvar errorCode: Int\nThe integer error code.\nvar userInfo: [String : Any]\nThe user information for the error.\nvar localizedDescription: String\nA localized description of the error."
  },
  {
    "title": "MPMediaItemPropertyIsCompilation",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmediaitempropertyiscompilation",
    "html": "Discussion\n\nThis property corresponds to the “Part of a compilation” checkbox in the Info tab of the Get Info dialog in iTunes. Its associated value is an NSNumber object representing a Boolean value.\n\nSee Also\nFilterable property keys\nlet MPMediaItemPropertyAlbumArtist: String\nThe primary performing artist for an album.\nlet MPMediaItemPropertyAlbumArtistPersistentID: String\nThe persistent identifier for an album artist.\nlet MPMediaItemPropertyAlbumPersistentID: String\nThe key for the persistent identifier for an album.\nlet MPMediaItemPropertyAlbumTitle: String\nThe title of an album.\nlet MPMediaItemPropertyArtist: String\nThe performing artists for a media item — which may vary from the primary artist for the album that a media item belongs to.\nlet MPMediaItemPropertyArtistPersistentID: String\nThe key for the persistent identifier for an artist.\nlet MPMediaItemPropertyComposer: String\nThe musical composer for the media item.\nlet MPMediaItemPropertyComposerPersistentID: String\nThe persistent identifier for a composer.\nlet MPMediaItemPropertyGenre: String\nThe music or film genre of the media item.\nlet MPMediaItemPropertyGenrePersistentID: String\nThe persistent identifier for a genre.\nlet MPMediaItemPropertyHasProtectedAsset: String\nA Boolean value that indicates the media item has DRM protection so it can’t play through a standard playback API.\nlet MPMediaItemPropertyIsCloudItem: String\nA Boolean value that indicates whether the media item is an iCloud item.\nlet MPMediaItemPropertyMediaType: String\nThe media type of the media item.\nlet MPMediaItemPropertyPersistentID: String\nThe key for the persistent identifier for the media item.\nlet MPMediaItemPropertyPlayCount: String\nThe number of times the user plays the media item.\nlet MPMediaItemPropertyPodcastPersistentID: String\nThe persistent identifier for an audio podcast.\nlet MPMediaItemPropertyPodcastTitle: String\nThe title of a podcast.\nlet MPMediaItemPropertyTitle: String\nThe title or name of the media item."
  },
  {
    "title": "MPNowPlayingInfoPropertyPlaybackProgress",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpnowplayinginfopropertyplaybackprogress",
    "html": "Discussion\n\nValue is an NSNumber object configured as a float. A value of 0.0 indicates the item isn’t watched, while a value of 1.0 indicates the item was fully watched. This is a high-level indicator. Use MPNowPlayingInfoPropertyElapsedPlaybackTime for detailed information about how much of the item the user watched.\n\nSee Also\nAccessing Now Playing metadata properties\nlet MPNowPlayingInfoCollectionIdentifier: String\nThe identifier of the collection the Now Playing item belongs to.\nlet MPNowPlayingInfoPropertyAdTimeRanges: String\nA list of ad breaks in the Now Playing item.\nlet MPNowPlayingInfoPropertyAvailableLanguageOptions: String\nThe available language option groups for the Now Playing item.\nlet MPNowPlayingInfoPropertyAssetURL: String\nThe URL pointing to the Now Playing item’s underlying asset.\nlet MPNowPlayingInfoPropertyChapterCount: String\nThe total number of chapters in the Now Playing item.\nlet MPNowPlayingInfoPropertyChapterNumber: String\nThe number corresponding to the currently playing chapter.\nlet MPNowPlayingInfoPropertyCreditsStartTime: String\nThe start time for the credits, in seconds, without ads, for the Now Playing item.\nlet MPNowPlayingInfoPropertyCurrentLanguageOptions: String\nThe currently active language options for the Now Playing item.\nlet MPNowPlayingInfoPropertyCurrentPlaybackDate: String\nThe date associated with the current elapsed playback time.\nlet MPNowPlayingInfoPropertyDefaultPlaybackRate: String\nThe default playback rate for the Now Playing item.\nlet MPNowPlayingInfoPropertyElapsedPlaybackTime: String\nThe elapsed time of the Now Playing item, in seconds.\nlet MPNowPlayingInfoPropertyExternalContentIdentifier: String\nThe opaque identifier that uniquely identifies the Now Playing item, even through app relaunches.\nlet MPNowPlayingInfoPropertyExternalUserProfileIdentifier: String\nThe opaque identifier that uniquely identifies the profile the Now Playing item plays from, even through app relaunches.\nlet MPNowPlayingInfoPropertyIsLiveStream: String\nA number that denotes whether the Now Playing item is a live stream.\nlet MPNowPlayingInfoPropertyMediaType: String\nThe media type of the Now Playing item.\nlet MPNowPlayingInfoPropertyPlaybackRate: String\nThe playback rate of the Now Playing item.\nlet MPNowPlayingInfoPropertyPlaybackQueueCount: String\nThe total number of items in the app’s playback queue.\nlet MPNowPlayingInfoPropertyPlaybackQueueIndex: String\nThe index of the Now Playing item in the app’s playback queue.\nlet MPNowPlayingInfoPropertyServiceIdentifier: String\nThe service provider associated with the Now Playing item."
  },
  {
    "title": "podcasts()",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmediaquery/1621793-podcasts",
    "html": "Return Value\n\nA media query that matches media items of type podcast and that has a grouping type of MPMediaGrouping.podcastTitle. This query only returns podcasts downloaded to the user's library.\n\nDiscussion\n\nA media item can have more than one media type; for example, an item could be of types “music” and “podcast.” A podcasts() query matches all podcast items, whether or not they’re also of other media types.\n\nSee Also\nCreating media queries\nclass func albums() -> MPMediaQuery\nCreates a media query that matches music items and that groups and sorts collections by album name.\nclass func artists() -> MPMediaQuery\nCreates a media query that matches music items and that groups and sorts collections by artist name.\nclass func songs() -> MPMediaQuery\nCreates a media query that matches music items and that groups and sorts collections by song name.\nclass func playlists() -> MPMediaQuery\nCreates a media query that matches the entire library and that groups and sorts collections by playlist name.\nclass func audiobooks() -> MPMediaQuery\nCreates a media query that matches audio book items and that groups and sorts collections by audio book name.\nclass func compilations() -> MPMediaQuery\nCreates a media query that matches compilation items and that groups and sorts collections by album name.\nclass func composers() -> MPMediaQuery\nCreates a media query that matches all media items and that groups and sorts collections by composer name.\nclass func genres() -> MPMediaQuery\nCreates a media query that matches all media items and that groups and sorts collections by genre name.\ninit(filterPredicates: Set<MPMediaPredicate>?)\nInitializes a media query with a set of media property predicates."
  },
  {
    "title": "MPMusicShuffleMode",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmusicshufflemode",
    "html": "Topics\nConstants\ncase `default`\nThe user’s preferred shuffle mode.\ncase off\nThe playlist is not shuffled.\ncase songs\nThe playlist is shuffled by song.\ncase albums\nThe playlist is shuffled by album.\nRelationships\nConforms To\nSendable\nSee Also\nManaging playback mode and state\nvar nowPlayingItem: MPMediaItem?\nThe currently-playing media item, or the media item in a queue that you designated to begin playback with.\nvar indexOfNowPlayingItem: Int\nThe index of the now playing item in the current playback queue.\nvar playbackState: MPMusicPlaybackState\nThe current playback state of the music player.\nvar repeatMode: MPMusicRepeatMode\nThe current repeat mode of the music player.\nvar shuffleMode: MPMusicShuffleMode\nThe current shuffle mode of the music player.\nenum MPMusicPlaybackState\nThe music player playback state modes.\nenum MPMusicRepeatMode\nThe repeat modes for the media player.\nvar volume: Float\nThe audio playback volume for the music player, in the range from 0.0 (silent) through 1.0 (maximum volume).\nDeprecated"
  },
  {
    "title": "skipToBeginning()",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmusicplayercontroller/1624133-skiptobeginning",
    "html": "See Also\nControlling playback\nfunc skipToNextItem()\nStarts playback of the next media item in the playback queue, or if the music player isn’t playing, designates the next media item as the next item to play.\nfunc skipToPreviousItem()\nStarts playback of the previous media item in the playback queue, or if the music player isn’t playing, designates the previous media item as the next to play.\nfunc append(MPMusicPlayerQueueDescriptor)\nInserts the media items defined by the queue descriptor after the last media item in the current queue.\nfunc prepend(MPMusicPlayerQueueDescriptor)\nInserts the media items defined by the queue descriptor into the current queue immediately after the currently playing media item."
  },
  {
    "title": "MPNowPlayingInfoPropertyAssetURL",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpnowplayinginfopropertyasseturl",
    "html": "Discussion\n\nThe system UI uses this constant when video thumbnails or audio waveform visualizations are applicable.\n\nSee Also\nAccessing Now Playing metadata properties\nlet MPNowPlayingInfoCollectionIdentifier: String\nThe identifier of the collection the Now Playing item belongs to.\nlet MPNowPlayingInfoPropertyAdTimeRanges: String\nA list of ad breaks in the Now Playing item.\nlet MPNowPlayingInfoPropertyAvailableLanguageOptions: String\nThe available language option groups for the Now Playing item.\nlet MPNowPlayingInfoPropertyChapterCount: String\nThe total number of chapters in the Now Playing item.\nlet MPNowPlayingInfoPropertyChapterNumber: String\nThe number corresponding to the currently playing chapter.\nlet MPNowPlayingInfoPropertyCreditsStartTime: String\nThe start time for the credits, in seconds, without ads, for the Now Playing item.\nlet MPNowPlayingInfoPropertyCurrentLanguageOptions: String\nThe currently active language options for the Now Playing item.\nlet MPNowPlayingInfoPropertyCurrentPlaybackDate: String\nThe date associated with the current elapsed playback time.\nlet MPNowPlayingInfoPropertyDefaultPlaybackRate: String\nThe default playback rate for the Now Playing item.\nlet MPNowPlayingInfoPropertyElapsedPlaybackTime: String\nThe elapsed time of the Now Playing item, in seconds.\nlet MPNowPlayingInfoPropertyExternalContentIdentifier: String\nThe opaque identifier that uniquely identifies the Now Playing item, even through app relaunches.\nlet MPNowPlayingInfoPropertyExternalUserProfileIdentifier: String\nThe opaque identifier that uniquely identifies the profile the Now Playing item plays from, even through app relaunches.\nlet MPNowPlayingInfoPropertyIsLiveStream: String\nA number that denotes whether the Now Playing item is a live stream.\nlet MPNowPlayingInfoPropertyMediaType: String\nThe media type of the Now Playing item.\nlet MPNowPlayingInfoPropertyPlaybackProgress: String\nThe current progress of the Now Playing item.\nlet MPNowPlayingInfoPropertyPlaybackRate: String\nThe playback rate of the Now Playing item.\nlet MPNowPlayingInfoPropertyPlaybackQueueCount: String\nThe total number of items in the app’s playback queue.\nlet MPNowPlayingInfoPropertyPlaybackQueueIndex: String\nThe index of the Now Playing item in the app’s playback queue.\nlet MPNowPlayingInfoPropertyServiceIdentifier: String\nThe service provider associated with the Now Playing item."
  },
  {
    "title": "skipToPreviousItem()",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmusicplayercontroller/1624252-skiptopreviousitem",
    "html": "Discussion\n\nCalling this method when already at the first item in the playback queue ends playback.\n\nSee Also\nControlling playback\nfunc skipToNextItem()\nStarts playback of the next media item in the playback queue, or if the music player isn’t playing, designates the next media item as the next item to play.\nfunc skipToBeginning()\nRestarts playback at the beginning of the currently playing media item.\nfunc append(MPMusicPlayerQueueDescriptor)\nInserts the media items defined by the queue descriptor after the last media item in the current queue.\nfunc prepend(MPMusicPlayerQueueDescriptor)\nInserts the media items defined by the queue descriptor into the current queue immediately after the currently playing media item.\nRelated Documentation\nvar nowPlayingItem: MPMediaItem?\nThe currently-playing media item, or the media item in a queue that you designated to begin playback with."
  },
  {
    "title": "MPMusicPlaybackState",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmusicplaybackstate",
    "html": "Overview\n\nYou determine a music player’s state by checking the playbackState property. Depending on the property’s value, you can update your application’s user interface or take other appropriate action.\n\nTopics\nConstants\ncase stopped\nThe music player is stopped.\ncase playing\nThe music player is playing.\ncase paused\nThe music player is paused.\ncase interrupted\nThe music player has been interrupted, such as by an incoming phone call.\ncase seekingForward\nThe music player is seeking forward.\ncase seekingBackward\nThe music player is seeking backward.\nRelationships\nConforms To\nSendable\nSee Also\nManaging playback mode and state\nvar nowPlayingItem: MPMediaItem?\nThe currently-playing media item, or the media item in a queue that you designated to begin playback with.\nvar indexOfNowPlayingItem: Int\nThe index of the now playing item in the current playback queue.\nvar playbackState: MPMusicPlaybackState\nThe current playback state of the music player.\nvar repeatMode: MPMusicRepeatMode\nThe current repeat mode of the music player.\nvar shuffleMode: MPMusicShuffleMode\nThe current shuffle mode of the music player.\nenum MPMusicRepeatMode\nThe repeat modes for the media player.\nenum MPMusicShuffleMode\nThe shuffle modes for the media player.\nvar volume: Float\nThe audio playback volume for the music player, in the range from 0.0 (silent) through 1.0 (maximum volume).\nDeprecated"
  },
  {
    "title": "volume",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmusicplayercontroller/1624567-volume",
    "html": "Deprecated\n\nTo provide UI for adjusting system playback volume, use the MPVolumeView class, which provides media playback controls that iOS users expect and whose appearance you can customize.\n\nSee Also\nManaging playback mode and state\nvar nowPlayingItem: MPMediaItem?\nThe currently-playing media item, or the media item in a queue that you designated to begin playback with.\nvar indexOfNowPlayingItem: Int\nThe index of the now playing item in the current playback queue.\nvar playbackState: MPMusicPlaybackState\nThe current playback state of the music player.\nvar repeatMode: MPMusicRepeatMode\nThe current repeat mode of the music player.\nvar shuffleMode: MPMusicShuffleMode\nThe current shuffle mode of the music player.\nenum MPMusicPlaybackState\nThe music player playback state modes.\nenum MPMusicRepeatMode\nThe repeat modes for the media player.\nenum MPMusicShuffleMode\nThe shuffle modes for the media player."
  },
  {
    "title": "append(_:)",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmusicplayercontroller/2817539-append",
    "html": "Parameters\ndescriptor\n\nA queue descriptor the system uses to append media items to the playback queue.\n\nSee Also\nControlling playback\nfunc skipToNextItem()\nStarts playback of the next media item in the playback queue, or if the music player isn’t playing, designates the next media item as the next item to play.\nfunc skipToBeginning()\nRestarts playback at the beginning of the currently playing media item.\nfunc skipToPreviousItem()\nStarts playback of the previous media item in the playback queue, or if the music player isn’t playing, designates the previous media item as the next to play.\nfunc prepend(MPMusicPlayerQueueDescriptor)\nInserts the media items defined by the queue descriptor into the current queue immediately after the currently playing media item."
  },
  {
    "title": "MPMusicRepeatMode",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmusicrepeatmode",
    "html": "Topics\nConstants\ncase `default`\nThe user’s preferred repeat mode.\ncase none\nThe music player will not repeat the current song or playlist.\ncase one\nThe music player will repeat the current song.\ncase all\nThe music player will repeat the current playlist.\nRelationships\nConforms To\nSendable\nSee Also\nManaging playback mode and state\nvar nowPlayingItem: MPMediaItem?\nThe currently-playing media item, or the media item in a queue that you designated to begin playback with.\nvar indexOfNowPlayingItem: Int\nThe index of the now playing item in the current playback queue.\nvar playbackState: MPMusicPlaybackState\nThe current playback state of the music player.\nvar repeatMode: MPMusicRepeatMode\nThe current repeat mode of the music player.\nvar shuffleMode: MPMusicShuffleMode\nThe current shuffle mode of the music player.\nenum MPMusicPlaybackState\nThe music player playback state modes.\nenum MPMusicShuffleMode\nThe shuffle modes for the media player.\nvar volume: Float\nThe audio playback volume for the music player, in the range from 0.0 (silent) through 1.0 (maximum volume).\nDeprecated"
  },
  {
    "title": "mediaTypes",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmediapickercontroller/1614661-mediatypes",
    "html": "Discussion\n\nMPMediaType lists the available media types.\n\nSee Also\nUsing a media item picker\nvar allowsPickingMultipleItems: Bool\nA Boolean value specifying the default selection behavior for a media item picker.\nvar showsCloudItems: Bool\nA Boolean value specifying whether to display iCloud Media Library items for a media picker.\nvar prompt: String?\nA prompt, for the user, that appears above the navigation bar buttons.\nvar showsItemsWithProtectedAssets: Bool\nA Boolean value that specifies whether the media item picker displays protected assets."
  },
  {
    "title": "showsCloudItems",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmediapickercontroller/1614675-showsclouditems",
    "html": "Discussion\n\nWhen set to true, the picker shows available iCloud Music Library items, including purchased items, imported content, and Apple Music subscription content. When set to false, the picker only shows content downloaded to the device. The default value is true.\n\nSee Also\nUsing a media item picker\nvar allowsPickingMultipleItems: Bool\nA Boolean value specifying the default selection behavior for a media item picker.\nvar mediaTypes: MPMediaType\nThe media types that media item picker presents.\nvar prompt: String?\nA prompt, for the user, that appears above the navigation bar buttons.\nvar showsItemsWithProtectedAssets: Bool\nA Boolean value that specifies whether the media item picker displays protected assets."
  },
  {
    "title": "shuffleMode",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmusicplayercontroller/1624167-shufflemode",
    "html": "Discussion\n\nFor the available shuffle modes, see MPMusicShuffleMode. If not explicitly set, shuffleMode defaults to MPMusicShuffleMode.default.\n\nSee Also\nManaging playback mode and state\nvar nowPlayingItem: MPMediaItem?\nThe currently-playing media item, or the media item in a queue that you designated to begin playback with.\nvar indexOfNowPlayingItem: Int\nThe index of the now playing item in the current playback queue.\nvar playbackState: MPMusicPlaybackState\nThe current playback state of the music player.\nvar repeatMode: MPMusicRepeatMode\nThe current repeat mode of the music player.\nenum MPMusicPlaybackState\nThe music player playback state modes.\nenum MPMusicRepeatMode\nThe repeat modes for the media player.\nenum MPMusicShuffleMode\nThe shuffle modes for the media player.\nvar volume: Float\nThe audio playback volume for the music player, in the range from 0.0 (silent) through 1.0 (maximum volume).\nDeprecated"
  },
  {
    "title": "showsItemsWithProtectedAssets",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmediapickercontroller/1614665-showsitemswithprotectedassets",
    "html": "Discussion\n\nWhen set to true, the media item picker displays media items with DRM. The default value for this property is true.\n\nSee Also\nUsing a media item picker\nvar allowsPickingMultipleItems: Bool\nA Boolean value specifying the default selection behavior for a media item picker.\nvar showsCloudItems: Bool\nA Boolean value specifying whether to display iCloud Media Library items for a media picker.\nvar mediaTypes: MPMediaType\nThe media types that media item picker presents.\nvar prompt: String?\nA prompt, for the user, that appears above the navigation bar buttons."
  },
  {
    "title": "allowsPickingMultipleItems",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmediapickercontroller/1614671-allowspickingmultipleitems",
    "html": "Discussion\n\nWhen set to true, the media item picker allows the selection of multiple media items. When set to false, the media picker only allows the selection of a single media item. The label for the button that dismisses the picker is “Done” when this value is true and “Cancel” when it’s false.\n\nSee Also\nUsing a media item picker\nvar showsCloudItems: Bool\nA Boolean value specifying whether to display iCloud Media Library items for a media picker.\nvar mediaTypes: MPMediaType\nThe media types that media item picker presents.\nvar prompt: String?\nA prompt, for the user, that appears above the navigation bar buttons.\nvar showsItemsWithProtectedAssets: Bool\nA Boolean value that specifies whether the media item picker displays protected assets."
  },
  {
    "title": "prompt",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmediapickercontroller/1614669-prompt",
    "html": "See Also\nUsing a media item picker\nvar allowsPickingMultipleItems: Bool\nA Boolean value specifying the default selection behavior for a media item picker.\nvar showsCloudItems: Bool\nA Boolean value specifying whether to display iCloud Media Library items for a media picker.\nvar mediaTypes: MPMediaType\nThe media types that media item picker presents.\nvar showsItemsWithProtectedAssets: Bool\nA Boolean value that specifies whether the media item picker displays protected assets."
  },
  {
    "title": "add(_:completionHandler:)",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmediaplaylist/1618710-add",
    "html": "Parameters\nmediaItems\n\nThe array of media items to add to the end of the playlist.\n\ncompletionHandler\n\nA block that the system calls after it adds the media items to the playlist.\n\nerror\n\nIf an error occurred, this parameter holds the error object that explains the error. Otherwise, the value of this parameter is nil.\n\nDiscussion\n\nConcurrency Note\n\nYou can call this method from synchronous code using a completion handler, as shown on this page, or you can call it as an asynchronous method that has the following declaration:\n\nfunc add(_ mediaItems: [MPMediaItem]) async throws\n\n\nFor information about concurrency and asynchronous code in Swift, see Calling Objective-C APIs Asynchronously.\n\nSee Also\nAdding media items to a playlist\nfunc addItem(withProductID: String, completionHandler: (((any Error)?) -> Void)?)\nAdds the item associated with the product identifier to the end of the playlist."
  },
  {
    "title": "authorDisplayName",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmediaplaylist/1618702-authordisplayname",
    "html": "Discussion\n\nThe system requires this property for 3rd party apps. Defaults to the app display name when not defined.\n\nSee Also\nRetrieving information about a playlist\nvar descriptionText: String?\nUser supplied text that describes the playlist.\nvar name: String?\nThe name of the playlist.\nvar persistentID: MPMediaEntityPersistentID\nThe persistent identifier for the playlist.\nvar cloudGlobalID: String?\nThe cloud identifier for the playlist.\nvar playlistAttributes: MPMediaPlaylistAttribute\nThe attributes associated with the playlist.\nstruct MPMediaPlaylistAttribute\nAttributes define the type of playlist.\nvar seedItems: [MPMediaItem]?\nThe items seeded to generate the playlist; applies only to Genius playlists."
  },
  {
    "title": "authorDisplayName",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmediaplaylistcreationmetadata/1618699-authordisplayname",
    "html": "Discussion\n\nThe system requires this property for 3rd party apps. Defaults to the app display name when not defined.\n\nSee Also\nMetadata for a playlist\nvar descriptionText: String\nThe descriptive text for the playlist.\nvar name: String\nThe playlist’s displayed name."
  },
  {
    "title": "descriptionText",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmediaplaylistcreationmetadata/1618713-descriptiontext",
    "html": "See Also\nMetadata for a playlist\nvar authorDisplayName: String!\nApp defined display name for the playlist.\nvar name: String\nThe playlist’s displayed name."
  },
  {
    "title": "init(name:)",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmediaplaylistcreationmetadata/1618723-init",
    "html": "Parameters\nname\n\nThe name to assign to the new playlist."
  },
  {
    "title": "name",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmediaplaylist/1618716-name",
    "html": "See Also\nRetrieving information about a playlist\nvar authorDisplayName: String?\nThe display name for the playlist defined in the app.\nvar descriptionText: String?\nUser supplied text that describes the playlist.\nvar persistentID: MPMediaEntityPersistentID\nThe persistent identifier for the playlist.\nvar cloudGlobalID: String?\nThe cloud identifier for the playlist.\nvar playlistAttributes: MPMediaPlaylistAttribute\nThe attributes associated with the playlist.\nstruct MPMediaPlaylistAttribute\nAttributes define the type of playlist.\nvar seedItems: [MPMediaItem]?\nThe items seeded to generate the playlist; applies only to Genius playlists."
  },
  {
    "title": "descriptionText",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmediaplaylist/1618715-descriptiontext",
    "html": "See Also\nRetrieving information about a playlist\nvar authorDisplayName: String?\nThe display name for the playlist defined in the app.\nvar name: String?\nThe name of the playlist.\nvar persistentID: MPMediaEntityPersistentID\nThe persistent identifier for the playlist.\nvar cloudGlobalID: String?\nThe cloud identifier for the playlist.\nvar playlistAttributes: MPMediaPlaylistAttribute\nThe attributes associated with the playlist.\nstruct MPMediaPlaylistAttribute\nAttributes define the type of playlist.\nvar seedItems: [MPMediaItem]?\nThe items seeded to generate the playlist; applies only to Genius playlists."
  },
  {
    "title": "persistentID",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmediaplaylist/1618718-persistentid",
    "html": "See Also\nRetrieving information about a playlist\nvar authorDisplayName: String?\nThe display name for the playlist defined in the app.\nvar descriptionText: String?\nUser supplied text that describes the playlist.\nvar name: String?\nThe name of the playlist.\nvar cloudGlobalID: String?\nThe cloud identifier for the playlist.\nvar playlistAttributes: MPMediaPlaylistAttribute\nThe attributes associated with the playlist.\nstruct MPMediaPlaylistAttribute\nAttributes define the type of playlist.\nvar seedItems: [MPMediaItem]?\nThe items seeded to generate the playlist; applies only to Genius playlists."
  },
  {
    "title": "setStartTime(_:forItemWith:)",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmusicplayerplayparametersqueuedescriptor/2909015-setstarttime",
    "html": "Parameters\nstartTime\n\nThe TimeInterval describing when the item with designated play parameters starts playing.\n\nplayParameters\n\nThe play parameters associated with the item in the queue that has a changed start time.\n\nSee Also\nSetting start and end times\nfunc setEndTime(TimeInterval, forItemWith: MPMusicPlayerPlayParameters)\nSets the time the item with the associated play parameters is to stop playing."
  },
  {
    "title": "MPMediaPlaylistAttribute",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmediaplaylistattribute",
    "html": "Overview\n\nPlaylist attributes to use as possible values for the MPMediaPlaylistPropertyPlaylistAttributes property.\n\nTopics\nConstants\nstatic var onTheGo: MPMediaPlaylistAttribute\nA playlist created on a device rather than synced from the Music app.\nstatic var smart: MPMediaPlaylistAttribute\nA smart playlist includes items that match one or more user-specified rules.\nstatic var genius: MPMediaPlaylistAttribute\nA Genius playlist includes items related to other items in your Music library.\nInitializers\ninit(rawValue: UInt)\nCreates a new instance with the specified raw value.\nRelationships\nConforms To\nOptionSet\nSendable\nSee Also\nRetrieving information about a playlist\nvar authorDisplayName: String?\nThe display name for the playlist defined in the app.\nvar descriptionText: String?\nUser supplied text that describes the playlist.\nvar name: String?\nThe name of the playlist.\nvar persistentID: MPMediaEntityPersistentID\nThe persistent identifier for the playlist.\nvar cloudGlobalID: String?\nThe cloud identifier for the playlist.\nvar playlistAttributes: MPMediaPlaylistAttribute\nThe attributes associated with the playlist.\nvar seedItems: [MPMediaItem]?\nThe items seeded to generate the playlist; applies only to Genius playlists."
  },
  {
    "title": "cloudGlobalID",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmediaplaylist/3547919-cloudglobalid",
    "html": "See Also\nRetrieving information about a playlist\nvar authorDisplayName: String?\nThe display name for the playlist defined in the app.\nvar descriptionText: String?\nUser supplied text that describes the playlist.\nvar name: String?\nThe name of the playlist.\nvar persistentID: MPMediaEntityPersistentID\nThe persistent identifier for the playlist.\nvar playlistAttributes: MPMediaPlaylistAttribute\nThe attributes associated with the playlist.\nstruct MPMediaPlaylistAttribute\nAttributes define the type of playlist.\nvar seedItems: [MPMediaItem]?\nThe items seeded to generate the playlist; applies only to Genius playlists."
  },
  {
    "title": "seedItems",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmediaplaylist/1618720-seeditems",
    "html": "See Also\nRetrieving information about a playlist\nvar authorDisplayName: String?\nThe display name for the playlist defined in the app.\nvar descriptionText: String?\nUser supplied text that describes the playlist.\nvar name: String?\nThe name of the playlist.\nvar persistentID: MPMediaEntityPersistentID\nThe persistent identifier for the playlist.\nvar cloudGlobalID: String?\nThe cloud identifier for the playlist.\nvar playlistAttributes: MPMediaPlaylistAttribute\nThe attributes associated with the playlist.\nstruct MPMediaPlaylistAttribute\nAttributes define the type of playlist."
  },
  {
    "title": "MPMoviePlayerController",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmovieplayercontroller",
    "html": "Overview\n\nImportant\n\nThe MPMoviePlayerController class is formally deprecated in iOS 9. (The MPMoviePlayerViewController class is also formally deprecated.) To play video content in iOS 9 and later, instead use the AVPictureInPictureController or AVPlayerViewController class from the AVKit framework, or the WKWebView class from WebKit.\n\nPlayback occurs in a view owned by the movie player and takes place either fullscreen or inline. You can incorporate a movie player’s view into a view hierarchy owned by your app, or use an MPMoviePlayerViewController object to manage the presentation for you.\n\nMovie players support wireless movie playback to AirPlay-enabled hardware such as Apple TV. AirPlay playback is enabled by default. To disable AirPlay in your app, set the allowsAirPlay property to false. In iOS 8.0 and later, users access AirPlay compatible hardware through the Control Panel; no AirPlay control is displayed by the movie player.\n\nWhen you add a movie player’s view to your app’s view hierarchy, be sure to size the frame correctly, as shown here:\n\nMPMoviePlayerController *player =\n        [[MPMoviePlayerController alloc] initWithContentURL: myURL];\n[player prepareToPlay];\n[player.view setFrame: myView.bounds];  // player's frame must match parent's\n[myView addSubview: player.view];\n// ...\n[player play];\n\n\nConsider a movie player view to be an opaque structure. You can add your own custom subviews to layer content on top of the movie but you must never modify any of its existing subviews.\n\nIn addition to layering content on top of a movie, you can provide custom background content by adding subviews to the view in the backgroundView property. Custom subviews are supported in both inline and fullscreen playback modes but you must adjust the positions of your views when entering or exiting fullscreen mode. Use the MPMoviePlayerWillEnterFullscreen and MPMoviePlayerWillExitFullscreen notifications to detect changes to and from fullscreen mode.\n\nThis class supports programmatic control of movie playback, and user-based control via buttons supplied by the movie player. You can control most aspects of playback programmatically using the methods and properties of the MPMediaPlayback protocol, to which this class conforms. The methods and properties of that protocol let you start and stop playback, seek forward and backward through the movie’s content, and even change the playback rate. In addition, the controlStyle property of this class lets you display a set of standard system controls that allow the user to manipulate playback. You can also set the shouldAutoplay property for network-based content to start automatically.\n\nYou typically specify the movie you want to play when you create a new MPMoviePlayerController object. However, you can also change the currently playing movie by changing the value in the contentURL property. Changing this property lets you reuse the same movie player controller object in multiple places. For performance reasons you may want to play movies as local files. Do this by first downloading them to a local directory.\n\nNote\n\nAlthough you can create multiple MPMoviePlayerController objects and present their views in your interface, only one movie player at a time can play its movie.\n\nTo facilitate the creation of video bookmarks or chapter links for a long movie, the MPMoviePlayerController class defines methods for generating thumbnail images at specific times within a movie. You can request a single thumbnail image using the thumbnailImage(atTime:timeOption:) method or request multiple thumbnail images using the requestThumbnailImages(atTimes:timeOption:) method.\n\nTo play a network stream whose URL requires access credentials, first create an appropriate URLCredential object. Do this by calling, for example, the init(user:password:persistence:) method, as shown here:\n\nNSURLCredential *credential = [[NSURLCredential alloc]\n                        initWithUser: @\"userName\"\n                            password: @\"password\"\n                         persistence: NSURLCredentialPersistenceForSession];\n \nself.credential = credential;\n[credential release];\n\n\nIn addition, create an appropriate URLProtectionSpace object, as shown here. Make appropriate modifications for the realm you are accessing:\n\nNSURLProtectionSpace *protectionSpace = [[NSURLProtectionSpace alloc]\n                            initWithHost: \"@streams.mydomain.com\"\n                                    port: 80\n                                protocol: @\"http\"\n                                   realm: @\"mydomain.com\"\n                    authenticationMethod: NSURLAuthenticationMethodDefault];\n \nself.protectionSpace = protectionSpace;\n[protectionSpace release];\n\n\nAdd the URL credential and the protection space to the Singleton URLCredentialStorage object. Do this by calling, for example, the set(_:for:) method, as shown here:\n\n[[NSURLCredentialStorage sharedCredentialStorage]\n                    setDefaultCredential: credential\n                      forProtectionSpace: protectionSpace];\n\n\nWith the credential and protection space information in place, you can then play the protected stream.\n\nMovie player notifications\n\nA movie player generates notifications to keep your app informed about the state of movie playback. In addition to being notified when playback finishes, your app can be notified in the following situations:\n\nWhen the movie player begins playing, is paused, or begins seeking forward or backward\n\nWhen AirPlay playback starts or ends\n\nWhen the scaling mode of the movie changes\n\nWhen the movie enters or exits fullscreen mode\n\nWhen the load state for network-based movies changes\n\nWhen meta-information about the movie itself becomes available\n\nFor more information, see the Notifications section in this document.\n\nTopics\nCreating and initializing the object\ninit!(contentURL: URL!)\nReturns a MPMoviePlayerController object initialized with the movie at the specified URL.\nAccessing movie properties\nvar contentURL: URL!\nThe URL that points to the movie file.\nvar movieSourceType: MPMovieSourceType\nThe playback type of the movie.\nvar movieMediaTypes: MPMovieMediaTypeMask\nThe types of media available in the movie.\nvar allowsAirPlay: Bool\nSpecifies whether the movie player allows AirPlay movie playback.\nvar isAirPlayVideoActive: Bool\nIndicates whether the movie player is currently playing video via AirPlay.\nvar naturalSize: CGSize\nThe width and height of the movie frame.\nvar isFullscreen: Bool\nA Boolean that indicates whether the movie player is in full-screen mode.\nfunc setFullscreen(Bool, animated: Bool)\nCauses the movie player to enter or exit full-screen mode.\nvar scalingMode: MPMovieScalingMode\nThe scaling mode to use when displaying the movie.\nvar controlStyle: MPMovieControlStyle\nThe style of the playback controls.\nvar useApplicationAudioSession: Bool\nA Boolean value that indicates whether the movie player should use the app’s audio session.\nAccessing the movie duration\nvar duration: TimeInterval\nThe duration of the movie, measured in seconds.\nvar playableDuration: TimeInterval\nThe amount of currently playable content.\nAccessing the view\nvar view: UIView!\nThe view containing the movie content and controls.\nvar backgroundView: UIView!\nA customizable view that is displayed behind the movie content.\nControlling and monitoring playback\nSee also the methods of the MPMediaPlayback protocol.\nvar loadState: MPMovieLoadState\nThe network load state of the movie player.\nvar playbackState: MPMoviePlaybackState\nThe current playback state of the movie player.\nvar initialPlaybackTime: TimeInterval\nThe time, specified in seconds within the video timeline, when playback should start.\nvar endPlaybackTime: TimeInterval\nThe end time (measured in seconds) for playback of the movie.\nvar shouldAutoplay: Bool\nA Boolean that indicates whether a movie should begin playback automatically.\nvar readyForDisplay: Bool\nA Boolean that indicates whether the first video frame of the movie is ready to be displayed.\nvar repeatMode: MPMovieRepeatMode\nDetermines how the movie player repeats the playback of the movie.\nvar timedMetadata: [Any]!\nObtains the most recent time-based metadata provided by the streamed movie.\nGenerating thumbnail images\nfunc thumbnailImage(atTime: TimeInterval, timeOption: MPMovieTimeOption) -> UIImage!\nCaptures and returns a thumbnail image from the current movie.\nfunc requestThumbnailImages(atTimes: [Any]!, timeOption: MPMovieTimeOption)\nCaptures one or more thumbnail images asynchronously from the current movie.\nfunc cancelAllThumbnailImageRequests()\nCancels all pending asynchronous thumbnail image requests.\nRetrieving movie logs\nvar accessLog: MPMovieAccessLog!\nA snapshot of the network playback log for the movie player if it is playing a network stream.\nvar errorLog: MPMovieErrorLog!\nA snapshot of the playback failure error log for the movie player if it is playing a network stream.\nConstants\nstruct MPMovieLoadState\nConstants describing the network load state of the movie player.\nenum MPMovieControlStyle\nConstants describing the style of the playback controls.\nenum MPMovieFinishReason\nConstants describing the reason that playback ended.\nenum MPMoviePlaybackState\nConstants describing the current playback state of the movie player.\nenum MPMovieRepeatMode\nConstants describing how the movie player repeats content at the end of playback.\nenum MPMovieScalingMode\nConstants describing how the movie content is scaled to fit the frame of its view.\nenum MPMovieTimeOption\nConstants describing which frame to use when generating thumbnail images.\nstruct MPMovieMediaTypeMask\nThe types of content available in the movie file.\nenum MPMovieSourceType\nSpecifies the type of the movie file.\nThumbnail notification user info keys\nThe following keys may be found in the userInfo dictionary of a MPMoviePlayerThumbnailImageRequestDidFinish notification.\nFullscreen notification keys\nThe following keys may be found in the userInfo dictionary of notifications for transitioning in or out of full-screen mode.\nPlayback finished notification key\nThe following key may be found in the userInfo dictionary of a MPMoviePlayerPlaybackDidFinish notification.\nNotifications\nstatic let MPMoviePlayerDidEnterFullscreen: NSNotification.Name\nPosted when a movie player has entered full-screen mode. There is no userInfo dictionary.\nstatic let MPMoviePlayerDidExitFullscreen: NSNotification.Name\nPosted when a movie player has exited full-screen mode. There is no userInfo dictionary.\nstatic let MPMoviePlayerIsAirPlayVideoActiveDidChange: NSNotification.Name\nPosted when a movie player has started or ended playing a movie via AirPlay. There is no userInfo dictionary.\nstatic let MPMoviePlayerLoadStateDidChange: NSNotification.Name\nPosted when a movie player’s network buffering state has changed. There is no userInfo dictionary.\nstatic let MPMoviePlayerNowPlayingMovieDidChange: NSNotification.Name\nPosted when the currently playing movie has changed. There is no userInfo dictionary.\nstatic let MPMoviePlayerPlaybackDidFinish: NSNotification.Name\nPosted when a movie has finished playing. The userInfo dictionary of this notification contains the MPMoviePlayerPlaybackDidFinishReasonUserInfoKey key, which indicates the reason that playback finished. This notification is also sent when playback fails because of an error.\nstatic let MPMoviePlayerPlaybackStateDidChange: NSNotification.Name\nPosted when a movie player’s playback state has changed. There is no userInfo dictionary.\nstatic let MPMoviePlayerReadyForDisplayDidChange: NSNotification.Name\nPosted when the ready for display state changes.\nstatic let MPMoviePlayerScalingModeDidChange: NSNotification.Name\nPosted when the scaling mode of a movie player has changed. There is no userInfo dictionary.\nstatic let MPMoviePlayerThumbnailImageRequestDidFinish: NSNotification.Name\nPosted when a request to capture a thumbnail from a movie has finished whether the request succeeded or failed. Upon successful capture of a thumbnail, the userInfo dictionary contains values for the following keys:\nstatic let MPMoviePlayerTimedMetadataUpdated: NSNotification.Name\nPosted when new timed metadata arrives.\nstatic let MPMoviePlayerWillEnterFullscreen: NSNotification.Name\nPosted when a movie player is about to enter full-screen mode. The userInfo dictionary contains keys whose values describe the transition animation used to enter full-screen mode. See Fullscreen notification keys.\nstatic let MPMoviePlayerWillExitFullscreen: NSNotification.Name\nPosted when a movie player is about to exit full-screen mode. The userInfo dictionary contains keys whose values describe the transition animation used to exit full-screen mode. See Fullscreen notification keys.\nstatic let MPMovieDurationAvailable: NSNotification.Name\nPosted when the duration of a movie has been determined. There is no userInfo dictionary.\nstatic let MPMovieMediaTypesAvailable: NSNotification.Name\nPosted when the available media types in a movie are determined. There is no userInfo dictionary.\nstatic let MPMovieNaturalSizeAvailable: NSNotification.Name\nPosted when the natural frame size of a movie is first determined or subsequently changes. There is no userInfo dictionary.\nstatic let MPMovieSourceTypeAvailable: NSNotification.Name\nPosted when the source type of a movie was previously unknown and is newly available. There is no userInfo dictionary.\nRelationships\nInherits From\nNSObject\nConforms To\nMPMediaPlayback\nSee Also\nDeprecated symbols\nclass MPMovieAccessLog\nKey metrics about network playback for an associated movie player that’s playing streamed content.\nDeprecated\nclass MPMovieAccessLogEvent\nA single piece of information for a movie access log.\nDeprecated\nclass MPMovieErrorLog\nData describing network resource playback failures for the associated movie player, including timestamps indicating when each failure occurred.\nDeprecated\nclass MPMovieErrorLogEvent\nA single piece of information for a movie error log.\nDeprecated\nstruct MPMovieLoadState\nConstants describing the network load state of the movie player.\nDeprecated\nstruct MPMovieMediaTypeMask\nThe types of content available in the movie file.\nDeprecated\nclass MPMoviePlayerViewController\nA simple view controller for displaying full-screen movies.\nDeprecated\nclass MPTimedMetadata\nA timed metadata object that carries time-based information within HTTP streamed media.\nDeprecated\nclass MPPlayableContentManager\nA shared content manager for controlling interactions between your media app and system-provided or external media player interfaces.\nDeprecated\nclass MPPlayableContentManagerContext\nAn object representing the current state of the playable endpoint.\nDeprecated\nclass var iPodMusicPlayer: MPMusicPlayerController\nReturns the iPod music player, which controls the iPod app’s state.\nDeprecated\ninit(image: UIImage)\nInitializes a media item artwork instance with a full-size image.\nDeprecated\nvar imageCropRect: CGRect\nThe bounds, in points, of the content area for the full size image associated with the media item artwork.\nvar showsRouteButton: Bool\nA Boolean value that indicates whether the route button is visible in the volume view.\nDeprecated\nfunc routeButtonImage(for: UIControl.State) -> UIImage?\nReturns the button image associated with the specified control state.\nDeprecated\nfunc routeButtonRect(forBounds: CGRect) -> CGRect\nReturns the drawing rectangle for the route button.\nDeprecated\nfunc setRouteButtonImage(UIImage?, for: UIControl.State)\nAssigns a button image to the specified control states.\nDeprecated\nvar areWirelessRoutesAvailable: Bool\nA Boolean value indicating wireless routes are available.\nDeprecated\nvar isWirelessRouteActive: Bool\nA Boolean value that indicates whether the wireless route is active.\nDeprecated\nstatic let MPVolumeViewWirelessRouteActiveDidChange: NSNotification.Name\nIndicates the active wireless route changed.\nDeprecated\nstatic let MPVolumeViewWirelessRoutesAvailableDidChange: NSNotification.Name\nIndicates the available wireless routes changed.\nDeprecated\nGlobal volume setting methods\nGlobal functions for setting the volume alert window status."
  },
  {
    "title": "persistentID",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmediaentity/1620126-persistentid",
    "html": "See Also\nWorking with media properties\nclass func canFilter(byProperty: String) -> Bool\nIndicates whether you can use the media property key that you specify to construct a media property predicate.\nfunc enumerateValues(forProperties: Set<String>, using: (String, Any, UnsafeMutablePointer<ObjCBool>) -> Void)\nExecutes a provided block with the fetched values for the given item properties.\nsubscript(Any) -> Any?\nReturns the object specified by the key.\nfunc value(forProperty: String) -> Any?\nRetrieves the value for a specified media property key.\ntypealias MPMediaEntityPersistentID\nDefines the type for storing a persistent identifier to a particular entity."
  },
  {
    "title": "subscript(_:)",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmediaentity/1620124-subscript",
    "html": "Parameters\nkey\n\nThe key associated with the retrieved object.\n\nReturn Value\n\nThe object that is specified by the key.\n\nDiscussion\n\nThe method provides read-only support for Objective-C subscripting syntax with MPMediaEntity property constants.\n\nSee Also\nWorking with media properties\nclass func canFilter(byProperty: String) -> Bool\nIndicates whether you can use the media property key that you specify to construct a media property predicate.\nfunc enumerateValues(forProperties: Set<String>, using: (String, Any, UnsafeMutablePointer<ObjCBool>) -> Void)\nExecutes a provided block with the fetched values for the given item properties.\nvar persistentID: MPMediaEntityPersistentID\nThe persistent identifier for a media entity.\nfunc value(forProperty: String) -> Any?\nRetrieves the value for a specified media property key.\ntypealias MPMediaEntityPersistentID\nDefines the type for storing a persistent identifier to a particular entity."
  },
  {
    "title": "MPMusicPlayerPlayParameters",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmusicplayerplayparameters",
    "html": "Topics\nCreating the play parameters\ninit?(dictionary: [String : Any])\nReturns a new play parameters object using information from MusicKit.\nAccessing the play parameters\nvar dictionary: [String : Any]\nThe information returned from a MusicKit query and stored in a play parameters object.\nEncoding and decoding\ninit(from: any Decoder)\nCreates a new parameters object by decoding from the given decoder.\nfunc encode(to: any Encoder)\nEncodes the parameters object into the given encoder.\nRelationships\nInherits From\nNSObject\nConforms To\nDecodable\nEncodable\nSee Also\nCreating a new play parameters queue descriptor\ninit(playParametersQueue: [MPMusicPlayerPlayParameters])\nCreates a new queue descriptor using the designated queue of play parameters."
  },
  {
    "title": "MPMediaEntityPersistentID",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmediaentitypersistentid",
    "html": "Discussion\n\nThe value persists across application launches and across syncs that don’t change the sync status of the media item. The value isn’t guaranteed to persist across a sync/unsync/sync cycle.\n\nSee Also\nWorking with media properties\nclass func canFilter(byProperty: String) -> Bool\nIndicates whether you can use the media property key that you specify to construct a media property predicate.\nfunc enumerateValues(forProperties: Set<String>, using: (String, Any, UnsafeMutablePointer<ObjCBool>) -> Void)\nExecutes a provided block with the fetched values for the given item properties.\nvar persistentID: MPMediaEntityPersistentID\nThe persistent identifier for a media entity.\nsubscript(Any) -> Any?\nReturns the object specified by the key.\nfunc value(forProperty: String) -> Any?\nRetrieves the value for a specified media property key."
  },
  {
    "title": "setEndTime(_:forItemWithStoreID:)",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmusicplayerstorequeuedescriptor/2582434-setendtime",
    "html": "Parameters\nendTime\n\nThe TimeInterval describing when the store item stops playing.\n\nstoreID\n\nThe store identifier associated with the item in the queue that has a changed end time.\n\nSee Also\nSetting start and end times\nfunc setStartTime(TimeInterval, forItemWithStoreID: String)\nSets the time the designated store item is to start playing."
  },
  {
    "title": "init(playParametersQueue:)",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmusicplayerplayparametersqueuedescriptor/2909014-init",
    "html": "Parameters\nplayParametersQueue\n\nAn array of play parameters created from the JSON information returned from a MusicKit query and used to populate the queue descriptor.\n\nReturn Value\n\nA new queue descriptor consisting of the items described by the play parameters.\n\nSee Also\nCreating a new play parameters queue descriptor\nclass MPMusicPlayerPlayParameters\nThe MusicKit parameters that describe items to play."
  },
  {
    "title": "startItemPlayParameters",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmusicplayerplayparametersqueuedescriptor/2919978-startitemplayparameters",
    "html": "Discussion\n\nWhen this property isn’t set, the value is nil and the first item in the queue is the first item to play.\n\nSee Also\nAccessing the play parameters\nvar playParametersQueue: [MPMusicPlayerPlayParameters]\nAn array containing the play parameters returned from querying MusicKit.\nclass MPMusicPlayerPlayParameters\nThe MusicKit parameters that describe items to play."
  },
  {
    "title": "storeIDs",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmusicplayerstorequeuedescriptor/2582426-storeids",
    "html": "See Also\nStore identifier queue descriptor properties\nvar startItemID: String?\nThe item identified by the store identifier to play first."
  },
  {
    "title": "setEndTime(_:forItemWith:)",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmusicplayerplayparametersqueuedescriptor/2909016-setendtime",
    "html": "Parameters\nendTime\n\nThe TimeInterval describing when the item with designated play parameters stops playing.\n\nplayParameters\n\nThe play parameters associated with the item in the queue that has a changed end time.\n\nSee Also\nSetting start and end times\nfunc setStartTime(TimeInterval, forItemWith: MPMusicPlayerPlayParameters)\nSets the time the item with the associated play parameters is to start playing."
  },
  {
    "title": "init(storeIDs:)",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmusicplayerstorequeuedescriptor/2582435-init",
    "html": "Parameters\nstoreIDs\n\nAn array of store identifiers used to populate the queue descriptor.\n\nReturn Value\n\nA new queue descriptor consisting of the media items identified by the designated store identifiers."
  },
  {
    "title": "MPMediaPredicateComparison",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmediapredicatecomparison",
    "html": "Topics\nConstants\ncase equalTo\nMatches when a media item’s value for a given property is equal to the value in the media property predicate.\ncase contains\nMatches when a media item’s value for a given property is contained in the value of the media property predicate.\nRelationships\nConforms To\nSendable"
  },
  {
    "title": "remove(_:)",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmusicplayercontrollermutablequeue/2815053-remove",
    "html": "Parameters\nitem\n\nThe media item to remove from the queue.\n\nSee Also\nAdding and removing items\nfunc insert(MPMusicPlayerQueueDescriptor, after: MPMediaItem?)\nInserts a modified queue after the designated media item."
  },
  {
    "title": "value",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmediapropertypredicate/1621772-value",
    "html": "See Also\nExamining media property predicates\nvar property: String\nThe property that the media property predicate uses when you invoke a query.\nvar comparisonType: MPMediaPredicateComparison\nThe type of matching comparison that the media property predicate performs when you invoke a query."
  },
  {
    "title": "insert(_:after:)",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmusicplayercontrollermutablequeue/2815057-insert",
    "html": "Parameters\nqueueDescriptor\n\nA queue descriptor the system uses to insert media items in the playback queue.\n\nafterItem\n\nThe media item before the insertion point for the modified queue.\n\nSee Also\nAdding and removing items\nfunc remove(MPMediaItem)\nRemoves a media item from the music player’s queue."
  },
  {
    "title": "Global volume setting methods",
    "url": "https://developer.apple.com/documentation/mediaplayer/deprecated_types/global_volume_setting_methods",
    "html": "Topics\nGlobal volume setting methods\nfunc MPVolumeSettingsAlertShow()\nDisplays an alert panel for controlling the system volume.\nDeprecated\nfunc MPVolumeSettingsAlertHide()\nHides the alert panel that controls the system volume.\nDeprecated\nfunc MPVolumeSettingsAlertIsVisible() -> Bool\nReturns a Boolean value indicating whether the volume alert panel is currently visible.\nDeprecated\nSee Also\nDeprecated symbols\nclass MPMovieAccessLog\nKey metrics about network playback for an associated movie player that’s playing streamed content.\nDeprecated\nclass MPMovieAccessLogEvent\nA single piece of information for a movie access log.\nDeprecated\nclass MPMovieErrorLog\nData describing network resource playback failures for the associated movie player, including timestamps indicating when each failure occurred.\nDeprecated\nclass MPMovieErrorLogEvent\nA single piece of information for a movie error log.\nDeprecated\nstruct MPMovieLoadState\nConstants describing the network load state of the movie player.\nDeprecated\nstruct MPMovieMediaTypeMask\nThe types of content available in the movie file.\nDeprecated\nclass MPMoviePlayerController\nA type of movie player that manages the playback of a movie from a file or a network stream.\nDeprecated\nclass MPMoviePlayerViewController\nA simple view controller for displaying full-screen movies.\nDeprecated\nclass MPTimedMetadata\nA timed metadata object that carries time-based information within HTTP streamed media.\nDeprecated\nclass MPPlayableContentManager\nA shared content manager for controlling interactions between your media app and system-provided or external media player interfaces.\nDeprecated\nclass MPPlayableContentManagerContext\nAn object representing the current state of the playable endpoint.\nDeprecated\nclass var iPodMusicPlayer: MPMusicPlayerController\nReturns the iPod music player, which controls the iPod app’s state.\nDeprecated\ninit(image: UIImage)\nInitializes a media item artwork instance with a full-size image.\nDeprecated\nvar imageCropRect: CGRect\nThe bounds, in points, of the content area for the full size image associated with the media item artwork.\nvar showsRouteButton: Bool\nA Boolean value that indicates whether the route button is visible in the volume view.\nDeprecated\nfunc routeButtonImage(for: UIControl.State) -> UIImage?\nReturns the button image associated with the specified control state.\nDeprecated\nfunc routeButtonRect(forBounds: CGRect) -> CGRect\nReturns the drawing rectangle for the route button.\nDeprecated\nfunc setRouteButtonImage(UIImage?, for: UIControl.State)\nAssigns a button image to the specified control states.\nDeprecated\nvar areWirelessRoutesAvailable: Bool\nA Boolean value indicating wireless routes are available.\nDeprecated\nvar isWirelessRouteActive: Bool\nA Boolean value that indicates whether the wireless route is active.\nDeprecated\nstatic let MPVolumeViewWirelessRouteActiveDidChange: NSNotification.Name\nIndicates the active wireless route changed.\nDeprecated\nstatic let MPVolumeViewWirelessRoutesAvailableDidChange: NSNotification.Name\nIndicates the available wireless routes changed.\nDeprecated"
  },
  {
    "title": "comparisonType",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmediapropertypredicate/1621799-comparisontype",
    "html": "Discussion\n\nFor comparison types, see MPMediaPredicateComparison.\n\nSee Also\nExamining media property predicates\nvar property: String\nThe property that the media property predicate uses when you invoke a query.\nvar value: Any?\nThe value that the media property predicate matches against when you invoke a query."
  },
  {
    "title": "showsVolumeSlider",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpvolumeview/1620079-showsvolumeslider",
    "html": "Discussion\n\nThe volume slider is visible by default. To hide the volume slider, set this property’s value to false."
  },
  {
    "title": "volumeWarningSliderImage",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpvolumeview/1620066-volumewarningsliderimage",
    "html": "Discussion\n\nThe system displays the image contained by this property on top of the maximumVolumeSliderImage(for:). The image must be visually distinct from the maximumVolumeSliderImage and use a color similar to the default in order to convey a sense of warning to the user.\n\nFor testing purposes, set the EU Volume Limit setting in the Developer menu of the Settings app to always enable the volume limit.\n\nSee Also\nDeprecated\nvar showsRouteButton: Bool\nA Boolean value that indicates whether the route button is visible in the volume view.\nDeprecated\nvar areWirelessRoutesAvailable: Bool\nA Boolean value indicating wireless routes are available.\nDeprecated\nvar isWirelessRouteActive: Bool\nA Boolean value that indicates whether the wireless route is active.\nDeprecated\nfunc routeButtonImage(for: UIControl.State) -> UIImage?\nReturns the button image associated with the specified control state.\nDeprecated\nfunc routeButtonRect(forBounds: CGRect) -> CGRect\nReturns the drawing rectangle for the route button.\nDeprecated\nfunc setRouteButtonImage(UIImage?, for: UIControl.State)\nAssigns a button image to the specified control states.\nDeprecated"
  },
  {
    "title": "volumeThumbImage(for:)",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpvolumeview/1620064-volumethumbimage",
    "html": "Parameters\nstate\n\nThe control state whose thumb image you want. You should specify only one control state value for this parameter.\n\nReturn Value\n\nThe thumb image associated with the specified state, or nil if an appropriate image could not be retrieved. This method might return nil if you specify multiple control states in the state parameter.\n\nDiscussion\n\nFor a description of slider and thumb images, see Customizing the volume slider’s appearance.\n\nSee Also\nCustomizing the volume slider\nfunc maximumVolumeSliderImage(for: UIControl.State) -> UIImage?\nReturns the maximum volume image associated with the specified control state.\nfunc minimumVolumeSliderImage(for: UIControl.State) -> UIImage?\nReturns the minimum volume image associated with the specified control state.\nfunc setMaximumVolumeSliderImage(UIImage?, for: UIControl.State)\nAssigns a maximum volume slider image to the specified control states.\nfunc setMinimumVolumeSliderImage(UIImage?, for: UIControl.State)\nAssigns a minimum volume slider image to the specified control states.\nfunc setVolumeThumbImage(UIImage?, for: UIControl.State)\nAssigns a thumb image to the specified control states.\nfunc volumeSliderRect(forBounds: CGRect) -> CGRect\nReturns the drawing rectangle for the slider’s track.\nfunc volumeThumbRect(forBounds: CGRect, volumeSliderRect: CGRect, value: Float) -> CGRect\nReturns the drawing rectangle for the volume slider’s thumb image."
  },
  {
    "title": "routeButtonImage(for:)",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpvolumeview/1620078-routebuttonimage",
    "html": "Parameters\nstate\n\nThe control state whose thumb image you want. You should specify only one control state value for this parameter.\n\nReturn Value\n\nThe button image associated with the specified state, or nil if an appropriate image could not be retrieved. This method might return nil if you specify multiple control states in the state parameter.\n\nDiscussion\n\nUse this method to retrieve the corresponding button image for a specific state.\n\nSee Also\nDeprecated\nvar volumeWarningSliderImage: UIImage?\nThe image used to designate the European Union volume limit.\nDeprecated\nvar showsRouteButton: Bool\nA Boolean value that indicates whether the route button is visible in the volume view.\nDeprecated\nvar areWirelessRoutesAvailable: Bool\nA Boolean value indicating wireless routes are available.\nDeprecated\nvar isWirelessRouteActive: Bool\nA Boolean value that indicates whether the wireless route is active.\nDeprecated\nfunc routeButtonRect(forBounds: CGRect) -> CGRect\nReturns the drawing rectangle for the route button.\nDeprecated\nfunc setRouteButtonImage(UIImage?, for: UIControl.State)\nAssigns a button image to the specified control states.\nDeprecated"
  },
  {
    "title": "showsRouteButton",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpvolumeview/1620075-showsroutebutton",
    "html": "Discussion\n\nThe route button is visible by default when there’s more than one audio output route available. To hide the route button, set this property’s value to false.\n\nSee Also\nDeprecated\nvar volumeWarningSliderImage: UIImage?\nThe image used to designate the European Union volume limit.\nDeprecated\nvar areWirelessRoutesAvailable: Bool\nA Boolean value indicating wireless routes are available.\nDeprecated\nvar isWirelessRouteActive: Bool\nA Boolean value that indicates whether the wireless route is active.\nDeprecated\nfunc routeButtonImage(for: UIControl.State) -> UIImage?\nReturns the button image associated with the specified control state.\nDeprecated\nfunc routeButtonRect(forBounds: CGRect) -> CGRect\nReturns the drawing rectangle for the route button.\nDeprecated\nfunc setRouteButtonImage(UIImage?, for: UIControl.State)\nAssigns a button image to the specified control states.\nDeprecated"
  },
  {
    "title": "isWirelessRouteActive",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpvolumeview/1620071-iswirelessrouteactive",
    "html": "Discussion\n\nWhen set to true, the wireless route is active.\n\nSee Also\nDeprecated\nvar volumeWarningSliderImage: UIImage?\nThe image used to designate the European Union volume limit.\nDeprecated\nvar showsRouteButton: Bool\nA Boolean value that indicates whether the route button is visible in the volume view.\nDeprecated\nvar areWirelessRoutesAvailable: Bool\nA Boolean value indicating wireless routes are available.\nDeprecated\nfunc routeButtonImage(for: UIControl.State) -> UIImage?\nReturns the button image associated with the specified control state.\nDeprecated\nfunc routeButtonRect(forBounds: CGRect) -> CGRect\nReturns the drawing rectangle for the route button.\nDeprecated\nfunc setRouteButtonImage(UIImage?, for: UIControl.State)\nAssigns a button image to the specified control states.\nDeprecated"
  },
  {
    "title": "areWirelessRoutesAvailable",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpvolumeview/1620073-arewirelessroutesavailable",
    "html": "Discussion\n\nWhen set to true, a wireless route is available for user selection. Some types of wireless routes are only discovered when the view is present in the window hierarchy.\n\nSee Also\nDeprecated\nvar volumeWarningSliderImage: UIImage?\nThe image used to designate the European Union volume limit.\nDeprecated\nvar showsRouteButton: Bool\nA Boolean value that indicates whether the route button is visible in the volume view.\nDeprecated\nvar isWirelessRouteActive: Bool\nA Boolean value that indicates whether the wireless route is active.\nDeprecated\nfunc routeButtonImage(for: UIControl.State) -> UIImage?\nReturns the button image associated with the specified control state.\nDeprecated\nfunc routeButtonRect(forBounds: CGRect) -> CGRect\nReturns the drawing rectangle for the route button.\nDeprecated\nfunc setRouteButtonImage(UIImage?, for: UIControl.State)\nAssigns a button image to the specified control states.\nDeprecated"
  },
  {
    "title": "playCount",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmediaitem/1621694-playcount",
    "html": "See Also\nMedia item properties\nvar albumArtist: String?\nThe primary performing artist for an album.\nvar albumArtistPersistentID: MPMediaEntityPersistentID\nThe persistent identifier for the primary performing artist for an album.\nvar albumPersistentID: MPMediaEntityPersistentID\nThe persistent identifier for an album.\nvar albumTitle: String?\nThe title of an album, such as Live on Mars, rather than the title of an individual song on the album, such as “Crater Dance.”\nvar albumTrackCount: Int\nThe number of tracks for the album that contains the media item.\nvar albumTrackNumber: Int\nThe track number of the media item, for a media item that’s part of an album.\nvar artist: String?\nThe performing artists for a media item, which may vary from the primary artist for the album that a media item belongs to.\nvar artistPersistentID: MPMediaEntityPersistentID\nThe persistent identifier for an artist.\nvar artwork: MPMediaItemArtwork?\nThe artwork image for the media item.\nvar assetURL: URL?\nThe URL that points to the media item.\nvar beatsPerMinute: Int\nThe number of musical beats per minute for the media item.\nvar bookmarkTime: TimeInterval\nThe time of the user’s most recent interaction with the bookmark in the media item.\nvar isCloudItem: Bool\nA Boolean value that indicates whether the media item is an iCloud Music Library item.\nvar comments: String?\nTextual information about the media item.\nvar isCompilation: Bool\nA Boolean value that indicates whether the media item is part of a compilation.\nvar isPreorder: Bool\nA Boolean value that indicates whether the media item is a preorder.\nvar composer: String?\nThe musical composer for the media item.\nvar composerPersistentID: MPMediaEntityPersistentID\nThe persistent identifier for a composer.\nvar dateAdded: Date\nThe date the user adds the media item to the library.\nvar discCount: Int\nThe number of discs for the album that contains the media item.\nvar discNumber: Int\nThe disc number of the media item, for a media item that’s part of a multidisc album.\nvar isExplicitItem: Bool\nA Boolean value that indicates whether the media item has explicit (adult) lyrics or language.\nvar genre: String?\nThe music or film genre of the media item.\nvar genrePersistentID: MPMediaEntityPersistentID\nThe persistent identifier for a genre.\nvar lastPlayedDate: Date?\nThe most recent play date of the media item.\nvar lyrics: String?\nThe lyrics for the media item.\nvar mediaType: MPMediaType\nThe media type of the media item.\nvar persistentID: MPMediaEntityPersistentID\nThe persistent identifier for the media item.\nvar playbackDuration: TimeInterval\nThe playback duration of the media item.\nvar playbackStoreID: String\nThe ID of a media item from the Apple Music catalog.\nvar podcastPersistentID: MPMediaEntityPersistentID\nThe persistent identifier for an audio podcast.\nvar podcastTitle: String?\nThe title of a podcast, such as This Martian Drudgery, rather than the title of an individual episode of a podcast, such as “Episode 12: Another Cold Day at the Pole.”\nvar hasProtectedAsset: Bool\nA Boolean value that indicates whether the media item has a protected asset.\nvar rating: Int\nThe user-specified rating of the media item.\nvar releaseDate: Date?\nThe date of the media item’s first public release.\nvar skipCount: Int\nThe number of times the user skips playing the media item.\nvar title: String?\nThe title or name of the media item.\nvar userGrouping: String?\nGrouping information for the media item."
  },
  {
    "title": "playbackState",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpnowplayinginfocenter/2588243-playbackstate",
    "html": "Discussion\n\nThis property only applies to macOS. You must set this property every time the app begins or halts playback, otherwise remote control functionality may not work as expected.\n\nSee Also\nSetting the playback state in macOS\nenum MPNowPlayingPlaybackState\nThe playback state of the app."
  },
  {
    "title": "MPMediaGrouping.podcastTitle",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmediagrouping/podcasttitle",
    "html": "See Also\nMedia query keys\ncase title\nGroups and sorts media item collections by title. For songs, for example, the title is the song name. This is the default grouping key.\ncase album\nGroups and sorts media item collections by album, and sorts songs within an album by track order.\ncase artist\nGroups and sorts media item collections by performing artist.\ncase albumArtist\nGroups and sorts media item collections by album artist (the primary performing artist for an album as a whole).\ncase composer\nGroups and sorts media item collections by composer.\ncase genre\nGroups and sorts media item collections by musical or film genre.\ncase playlist\nGroups and sorts media item collections by playlist."
  },
  {
    "title": "items",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmediaquery/1621770-items",
    "html": "Discussion\n\nIf no items match the predicate, this method returns an empty array. On error, returns nil.\n\nSee Also\nPerforming media queries\nvar collections: [MPMediaItemCollection]?\nAn array of media item collections whose contained items match the query’s media property predicate."
  },
  {
    "title": "property",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmediapropertypredicate/1621801-property",
    "html": "See Also\nExamining media property predicates\nvar value: Any?\nThe value that the media property predicate matches against when you invoke a query.\nvar comparisonType: MPMediaPredicateComparison\nThe type of matching comparison that the media property predicate performs when you invoke a query."
  },
  {
    "title": "range",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmediaquerysection/1624166-range",
    "html": "See Also\nWorking with media query sections\nvar title: String\nThe localized title of the media query section."
  },
  {
    "title": "items",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmusicplayercontrollerqueue/2815066-items",
    "html": "Discussion\n\nThis property contains an array of media items currently in the playing queue."
  },
  {
    "title": "title",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmediaquerysection/1624170-title",
    "html": "See Also\nWorking with media query sections\nvar range: NSRange\nThe range in the media query’s items or collections array that the media query section represents."
  },
  {
    "title": "endGeneratingPlaybackNotifications()",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmusicplayercontroller/1624247-endgeneratingplaybacknotificatio",
    "html": "See Also\nUsing music player notifications\nfunc beginGeneratingPlaybackNotifications()\nStarts the generation of playback notifications.\nstatic let MPMusicPlayerControllerPlaybackStateDidChange: NSNotification.Name\nPosted when the playback state changes programmatically or by user action.\nstatic let MPMusicPlayerControllerNowPlayingItemDidChange: NSNotification.Name\nPosted when the currently playing media item has changed.\nstatic let MPMusicPlayerControllerVolumeDidChange: NSNotification.Name\nPosted when the audio playback volume for the music player has changed."
  },
  {
    "title": "iPodMusicPlayer",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmusicplayercontroller/1624206-ipodmusicplayer",
    "html": "Deprecated\n\nThe iPod app was renamed. Use the systemMusicPlayer method instead.\n\nReturn Value\n\nThe iPod music player.\n\nDiscussion\n\nThe iPod music player employs the iPod app on your behalf. On instantiation, it takes on the current iPod app state and controls that state as your app runs. Specifically, the shared state includes the following:\n\nRepeat mode (see MPMusicRepeatMode)\n\nShuffle mode (see MPMusicShuffleMode\n\nNow-playing item (see nowPlayingItem)\n\nPlayback state (see playbackState)\n\nOther aspects of iPod state, such as the on-the-go playlist, aren’t shared. Music that’s playing continues to play when your app moves to the background.\n\nSee Also\nDeprecated symbols\nclass MPMovieAccessLog\nKey metrics about network playback for an associated movie player that’s playing streamed content.\nDeprecated\nclass MPMovieAccessLogEvent\nA single piece of information for a movie access log.\nDeprecated\nclass MPMovieErrorLog\nData describing network resource playback failures for the associated movie player, including timestamps indicating when each failure occurred.\nDeprecated\nclass MPMovieErrorLogEvent\nA single piece of information for a movie error log.\nDeprecated\nstruct MPMovieLoadState\nConstants describing the network load state of the movie player.\nDeprecated\nstruct MPMovieMediaTypeMask\nThe types of content available in the movie file.\nDeprecated\nclass MPMoviePlayerController\nA type of movie player that manages the playback of a movie from a file or a network stream.\nDeprecated\nclass MPMoviePlayerViewController\nA simple view controller for displaying full-screen movies.\nDeprecated\nclass MPTimedMetadata\nA timed metadata object that carries time-based information within HTTP streamed media.\nDeprecated\nclass MPPlayableContentManager\nA shared content manager for controlling interactions between your media app and system-provided or external media player interfaces.\nDeprecated\nclass MPPlayableContentManagerContext\nAn object representing the current state of the playable endpoint.\nDeprecated\ninit(image: UIImage)\nInitializes a media item artwork instance with a full-size image.\nDeprecated\nvar imageCropRect: CGRect\nThe bounds, in points, of the content area for the full size image associated with the media item artwork.\nvar showsRouteButton: Bool\nA Boolean value that indicates whether the route button is visible in the volume view.\nDeprecated\nfunc routeButtonImage(for: UIControl.State) -> UIImage?\nReturns the button image associated with the specified control state.\nDeprecated\nfunc routeButtonRect(forBounds: CGRect) -> CGRect\nReturns the drawing rectangle for the route button.\nDeprecated\nfunc setRouteButtonImage(UIImage?, for: UIControl.State)\nAssigns a button image to the specified control states.\nDeprecated\nvar areWirelessRoutesAvailable: Bool\nA Boolean value indicating wireless routes are available.\nDeprecated\nvar isWirelessRouteActive: Bool\nA Boolean value that indicates whether the wireless route is active.\nDeprecated\nstatic let MPVolumeViewWirelessRouteActiveDidChange: NSNotification.Name\nIndicates the active wireless route changed.\nDeprecated\nstatic let MPVolumeViewWirelessRoutesAvailableDidChange: NSNotification.Name\nIndicates the available wireless routes changed.\nDeprecated\nGlobal volume setting methods\nGlobal functions for setting the volume alert window status."
  },
  {
    "title": "MPMediaGrouping.title",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmediagrouping/title",
    "html": "See Also\nMedia query keys\ncase album\nGroups and sorts media item collections by album, and sorts songs within an album by track order.\ncase artist\nGroups and sorts media item collections by performing artist.\ncase albumArtist\nGroups and sorts media item collections by album artist (the primary performing artist for an album as a whole).\ncase composer\nGroups and sorts media item collections by composer.\ncase genre\nGroups and sorts media item collections by musical or film genre.\ncase playlist\nGroups and sorts media item collections by playlist.\ncase podcastTitle\nGroups and sorts media item collections by podcast title."
  },
  {
    "title": "beginGeneratingPlaybackNotifications()",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmusicplayercontroller/1624199-begingeneratingplaybacknotificat",
    "html": "See Also\nUsing music player notifications\nfunc endGeneratingPlaybackNotifications()\nEnds the generation of playback notifications.\nstatic let MPMusicPlayerControllerPlaybackStateDidChange: NSNotification.Name\nPosted when the playback state changes programmatically or by user action.\nstatic let MPMusicPlayerControllerNowPlayingItemDidChange: NSNotification.Name\nPosted when the currently playing media item has changed.\nstatic let MPMusicPlayerControllerVolumeDidChange: NSNotification.Name\nPosted when the audio playback volume for the music player has changed."
  },
  {
    "title": "compilations()",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmediaquery/1621786-compilations",
    "html": "Return Value\n\nA media query that matches any media item that has the MPMediaItemPropertyIsCompilation property; the returned query has a grouping type of MPMediaGrouping.album.\n\nDiscussion\n\nA media item can have more than one media type; for example, an item could be of types “music” and “podcast.” A compilations() query matches all media items that have the MPMediaItemPropertyIsCompilation property, irrespective of their media types.\n\nSee Also\nCreating media queries\nclass func albums() -> MPMediaQuery\nCreates a media query that matches music items and that groups and sorts collections by album name.\nclass func artists() -> MPMediaQuery\nCreates a media query that matches music items and that groups and sorts collections by artist name.\nclass func songs() -> MPMediaQuery\nCreates a media query that matches music items and that groups and sorts collections by song name.\nclass func playlists() -> MPMediaQuery\nCreates a media query that matches the entire library and that groups and sorts collections by playlist name.\nclass func podcasts() -> MPMediaQuery\nCreates a media query that matches podcast items and that groups and sorts collections by podcast name.\nclass func audiobooks() -> MPMediaQuery\nCreates a media query that matches audio book items and that groups and sorts collections by audio book name.\nclass func composers() -> MPMediaQuery\nCreates a media query that matches all media items and that groups and sorts collections by composer name.\nclass func genres() -> MPMediaQuery\nCreates a media query that matches all media items and that groups and sorts collections by genre name.\ninit(filterPredicates: Set<MPMediaPredicate>?)\nInitializes a media query with a set of media property predicates."
  },
  {
    "title": "MPMediaGrouping.album",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmediagrouping/album",
    "html": "See Also\nMedia query keys\ncase title\nGroups and sorts media item collections by title. For songs, for example, the title is the song name. This is the default grouping key.\ncase artist\nGroups and sorts media item collections by performing artist.\ncase albumArtist\nGroups and sorts media item collections by album artist (the primary performing artist for an album as a whole).\ncase composer\nGroups and sorts media item collections by composer.\ncase genre\nGroups and sorts media item collections by musical or film genre.\ncase playlist\nGroups and sorts media item collections by playlist.\ncase podcastTitle\nGroups and sorts media item collections by podcast title."
  },
  {
    "title": "playlists()",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmediaquery/1621803-playlists",
    "html": "Return Value\n\nA media query that matches all media items and that has a grouping type of MPMediaGrouping.playlist.\n\nSee Also\nCreating media queries\nclass func albums() -> MPMediaQuery\nCreates a media query that matches music items and that groups and sorts collections by album name.\nclass func artists() -> MPMediaQuery\nCreates a media query that matches music items and that groups and sorts collections by artist name.\nclass func songs() -> MPMediaQuery\nCreates a media query that matches music items and that groups and sorts collections by song name.\nclass func podcasts() -> MPMediaQuery\nCreates a media query that matches podcast items and that groups and sorts collections by podcast name.\nclass func audiobooks() -> MPMediaQuery\nCreates a media query that matches audio book items and that groups and sorts collections by audio book name.\nclass func compilations() -> MPMediaQuery\nCreates a media query that matches compilation items and that groups and sorts collections by album name.\nclass func composers() -> MPMediaQuery\nCreates a media query that matches all media items and that groups and sorts collections by composer name.\nclass func genres() -> MPMediaQuery\nCreates a media query that matches all media items and that groups and sorts collections by genre name.\ninit(filterPredicates: Set<MPMediaPredicate>?)\nInitializes a media query with a set of media property predicates."
  },
  {
    "title": "albums()",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmediaquery/1621780-albums",
    "html": "Return Value\n\nA media query that matches media items of type music and has a grouping type of MPMediaGrouping.album.\n\nDiscussion\n\nA media item can have more than one media type; for example, an item could be of types “music” and “podcast.” An albums() query matches all music items, whether or not they’re also of other media types.\n\nSee Also\nCreating media queries\nclass func artists() -> MPMediaQuery\nCreates a media query that matches music items and that groups and sorts collections by artist name.\nclass func songs() -> MPMediaQuery\nCreates a media query that matches music items and that groups and sorts collections by song name.\nclass func playlists() -> MPMediaQuery\nCreates a media query that matches the entire library and that groups and sorts collections by playlist name.\nclass func podcasts() -> MPMediaQuery\nCreates a media query that matches podcast items and that groups and sorts collections by podcast name.\nclass func audiobooks() -> MPMediaQuery\nCreates a media query that matches audio book items and that groups and sorts collections by audio book name.\nclass func compilations() -> MPMediaQuery\nCreates a media query that matches compilation items and that groups and sorts collections by album name.\nclass func composers() -> MPMediaQuery\nCreates a media query that matches all media items and that groups and sorts collections by composer name.\nclass func genres() -> MPMediaQuery\nCreates a media query that matches all media items and that groups and sorts collections by genre name.\ninit(filterPredicates: Set<MPMediaPredicate>?)\nInitializes a media query with a set of media property predicates."
  },
  {
    "title": "audiobooks()",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmediaquery/1621783-audiobooks",
    "html": "Return Value\n\nA media query that matches media items of type audioBook and that uses the default grouping type of MPMediaGrouping.title.\n\nDiscussion\n\nA media item can have more than one media type; for example, an item could be of types “music” and “podcast.” An audiobooks() query matches all audioBook items, whether or not they’re also of other media types.\n\nSee Also\nCreating media queries\nclass func albums() -> MPMediaQuery\nCreates a media query that matches music items and that groups and sorts collections by album name.\nclass func artists() -> MPMediaQuery\nCreates a media query that matches music items and that groups and sorts collections by artist name.\nclass func songs() -> MPMediaQuery\nCreates a media query that matches music items and that groups and sorts collections by song name.\nclass func playlists() -> MPMediaQuery\nCreates a media query that matches the entire library and that groups and sorts collections by playlist name.\nclass func podcasts() -> MPMediaQuery\nCreates a media query that matches podcast items and that groups and sorts collections by podcast name.\nclass func compilations() -> MPMediaQuery\nCreates a media query that matches compilation items and that groups and sorts collections by album name.\nclass func composers() -> MPMediaQuery\nCreates a media query that matches all media items and that groups and sorts collections by composer name.\nclass func genres() -> MPMediaQuery\nCreates a media query that matches all media items and that groups and sorts collections by genre name.\ninit(filterPredicates: Set<MPMediaPredicate>?)\nInitializes a media query with a set of media property predicates."
  },
  {
    "title": "artists()",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmediaquery/1621787-artists",
    "html": "Return Value\n\nA media query that matches media items of type music and has a grouping type of MPMediaGrouping.artist.\n\nDiscussion\n\nA media item can have more than one media type; for example, an item could be of types “music” and “podcast.” An artists() query matches all music items, whether or not they’re also of other media types.\n\nSee Also\nCreating media queries\nclass func albums() -> MPMediaQuery\nCreates a media query that matches music items and that groups and sorts collections by album name.\nclass func songs() -> MPMediaQuery\nCreates a media query that matches music items and that groups and sorts collections by song name.\nclass func playlists() -> MPMediaQuery\nCreates a media query that matches the entire library and that groups and sorts collections by playlist name.\nclass func podcasts() -> MPMediaQuery\nCreates a media query that matches podcast items and that groups and sorts collections by podcast name.\nclass func audiobooks() -> MPMediaQuery\nCreates a media query that matches audio book items and that groups and sorts collections by audio book name.\nclass func compilations() -> MPMediaQuery\nCreates a media query that matches compilation items and that groups and sorts collections by album name.\nclass func composers() -> MPMediaQuery\nCreates a media query that matches all media items and that groups and sorts collections by composer name.\nclass func genres() -> MPMediaQuery\nCreates a media query that matches all media items and that groups and sorts collections by genre name.\ninit(filterPredicates: Set<MPMediaPredicate>?)\nInitializes a media query with a set of media property predicates."
  },
  {
    "title": "prepend(_:)",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmusicplayercontroller/2817538-prepend",
    "html": "Parameters\ndescriptor\n\nA queue descriptor the system uses to prepend media items to the playback queue.\n\nSee Also\nControlling playback\nfunc skipToNextItem()\nStarts playback of the next media item in the playback queue, or if the music player isn’t playing, designates the next media item as the next item to play.\nfunc skipToBeginning()\nRestarts playback at the beginning of the currently playing media item.\nfunc skipToPreviousItem()\nStarts playback of the previous media item in the playback queue, or if the music player isn’t playing, designates the previous media item as the next to play.\nfunc append(MPMusicPlayerQueueDescriptor)\nInserts the media items defined by the queue descriptor after the last media item in the current queue."
  },
  {
    "title": "skipToNextItem()",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmusicplayercontroller/1624169-skiptonextitem",
    "html": "Discussion\n\nCalling this method when already at the last item in the playback queue ends playback.\n\nSee Also\nControlling playback\nfunc skipToBeginning()\nRestarts playback at the beginning of the currently playing media item.\nfunc skipToPreviousItem()\nStarts playback of the previous media item in the playback queue, or if the music player isn’t playing, designates the previous media item as the next to play.\nfunc append(MPMusicPlayerQueueDescriptor)\nInserts the media items defined by the queue descriptor after the last media item in the current queue.\nfunc prepend(MPMusicPlayerQueueDescriptor)\nInserts the media items defined by the queue descriptor into the current queue immediately after the currently playing media item.\nRelated Documentation\nvar nowPlayingItem: MPMediaItem?\nThe currently-playing media item, or the media item in a queue that you designated to begin playback with."
  },
  {
    "title": "MPNowPlayingInfoPropertyExternalUserProfileIdentifier",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpnowplayinginfopropertyexternaluserprofileidentifier",
    "html": "Discussion\n\nThis is only used to reference the profile to the Now Playing app and can be in any format.\n\nSee Also\nAccessing Now Playing metadata properties\nlet MPNowPlayingInfoCollectionIdentifier: String\nThe identifier of the collection the Now Playing item belongs to.\nlet MPNowPlayingInfoPropertyAdTimeRanges: String\nA list of ad breaks in the Now Playing item.\nlet MPNowPlayingInfoPropertyAvailableLanguageOptions: String\nThe available language option groups for the Now Playing item.\nlet MPNowPlayingInfoPropertyAssetURL: String\nThe URL pointing to the Now Playing item’s underlying asset.\nlet MPNowPlayingInfoPropertyChapterCount: String\nThe total number of chapters in the Now Playing item.\nlet MPNowPlayingInfoPropertyChapterNumber: String\nThe number corresponding to the currently playing chapter.\nlet MPNowPlayingInfoPropertyCreditsStartTime: String\nThe start time for the credits, in seconds, without ads, for the Now Playing item.\nlet MPNowPlayingInfoPropertyCurrentLanguageOptions: String\nThe currently active language options for the Now Playing item.\nlet MPNowPlayingInfoPropertyCurrentPlaybackDate: String\nThe date associated with the current elapsed playback time.\nlet MPNowPlayingInfoPropertyDefaultPlaybackRate: String\nThe default playback rate for the Now Playing item.\nlet MPNowPlayingInfoPropertyElapsedPlaybackTime: String\nThe elapsed time of the Now Playing item, in seconds.\nlet MPNowPlayingInfoPropertyExternalContentIdentifier: String\nThe opaque identifier that uniquely identifies the Now Playing item, even through app relaunches.\nlet MPNowPlayingInfoPropertyIsLiveStream: String\nA number that denotes whether the Now Playing item is a live stream.\nlet MPNowPlayingInfoPropertyMediaType: String\nThe media type of the Now Playing item.\nlet MPNowPlayingInfoPropertyPlaybackProgress: String\nThe current progress of the Now Playing item.\nlet MPNowPlayingInfoPropertyPlaybackRate: String\nThe playback rate of the Now Playing item.\nlet MPNowPlayingInfoPropertyPlaybackQueueCount: String\nThe total number of items in the app’s playback queue.\nlet MPNowPlayingInfoPropertyPlaybackQueueIndex: String\nThe index of the Now Playing item in the app’s playback queue.\nlet MPNowPlayingInfoPropertyServiceIdentifier: String\nThe service provider associated with the Now Playing item."
  },
  {
    "title": "addItem(withProductID:completionHandler:)",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmediaplaylist/1618706-additem",
    "html": "Parameters\nproductID\n\nThe product identifier for the item to add.\n\ncompletionHandler\n\nA block that the system calls after it adds the item to the playlist.\n\nerror\n\nIf an error occurred, this parameter holds the error object that explains the error. Otherwise, the value of this parameter is nil.\n\nDiscussion\n\nConcurrency Note\n\nYou can call this method from synchronous code using a completion handler, as shown on this page, or you can call it as an asynchronous method that has the following declaration:\n\nfunc addItem(withProductID productID: String) async throws\n\n\nFor information about concurrency and asynchronous code in Swift, see Calling Objective-C APIs Asynchronously.\n\nThe method adds a single media item associated with the product identifier to the playlist.\n\nSee Also\nAdding media items to a playlist\nfunc add([MPMediaItem], completionHandler: (((any Error)?) -> Void)?)\nAdds an array of media items to the end of the playlist."
  },
  {
    "title": "playlistAttributes",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmediaplaylist/1618709-playlistattributes",
    "html": "See Also\nRetrieving information about a playlist\nvar authorDisplayName: String?\nThe display name for the playlist defined in the app.\nvar descriptionText: String?\nUser supplied text that describes the playlist.\nvar name: String?\nThe name of the playlist.\nvar persistentID: MPMediaEntityPersistentID\nThe persistent identifier for the playlist.\nvar cloudGlobalID: String?\nThe cloud identifier for the playlist.\nstruct MPMediaPlaylistAttribute\nAttributes define the type of playlist.\nvar seedItems: [MPMediaItem]?\nThe items seeded to generate the playlist; applies only to Genius playlists."
  },
  {
    "title": "canFilter(byProperty:)",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmediaentity/1620123-canfilter",
    "html": "Parameters\nproperty\n\nThe key for the media property that you want to examine.\n\nReturn Value\n\ntrue if the property you are testing can be used to construct a media property predicate of type MPMediaPropertyPredicate; otherwise, false.\n\nDiscussion\n\nTo see which media property keys you can use with this method, refer to Media entity property keys, General media item property keys, Playlist property keys, and User-defined property keys.\n\nSee Also\nWorking with media properties\nfunc enumerateValues(forProperties: Set<String>, using: (String, Any, UnsafeMutablePointer<ObjCBool>) -> Void)\nExecutes a provided block with the fetched values for the given item properties.\nvar persistentID: MPMediaEntityPersistentID\nThe persistent identifier for a media entity.\nsubscript(Any) -> Any?\nReturns the object specified by the key.\nfunc value(forProperty: String) -> Any?\nRetrieves the value for a specified media property key.\ntypealias MPMediaEntityPersistentID\nDefines the type for storing a persistent identifier to a particular entity."
  },
  {
    "title": "MPMediaItemPropertyPersistentID",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmediaitempropertypersistentid",
    "html": "Discussion\n\nThe corresponding value is an NSNumber object that contains a MPMediaEntityPersistentID. The value of the MPMediaItemPropertyPersistentID identifier persists across application launches and across syncs that do not change the sync status of the media item. The value is not guaranteed to persist across a sync/unsync/sync cycle.\n\nCan be used to build a media property predicate as described in MPMediaPropertyPredicate.\n\nSee Also\nFilterable property keys\nlet MPMediaItemPropertyAlbumArtist: String\nThe primary performing artist for an album.\nlet MPMediaItemPropertyAlbumArtistPersistentID: String\nThe persistent identifier for an album artist.\nlet MPMediaItemPropertyAlbumPersistentID: String\nThe key for the persistent identifier for an album.\nlet MPMediaItemPropertyAlbumTitle: String\nThe title of an album.\nlet MPMediaItemPropertyArtist: String\nThe performing artists for a media item — which may vary from the primary artist for the album that a media item belongs to.\nlet MPMediaItemPropertyArtistPersistentID: String\nThe key for the persistent identifier for an artist.\nlet MPMediaItemPropertyComposer: String\nThe musical composer for the media item.\nlet MPMediaItemPropertyComposerPersistentID: String\nThe persistent identifier for a composer.\nlet MPMediaItemPropertyGenre: String\nThe music or film genre of the media item.\nlet MPMediaItemPropertyGenrePersistentID: String\nThe persistent identifier for a genre.\nlet MPMediaItemPropertyHasProtectedAsset: String\nA Boolean value that indicates the media item has DRM protection so it can’t play through a standard playback API.\nlet MPMediaItemPropertyIsCompilation: String\nA Boolean value that indicates whether the media item is part of a compilation.\nlet MPMediaItemPropertyIsCloudItem: String\nA Boolean value that indicates whether the media item is an iCloud item.\nlet MPMediaItemPropertyMediaType: String\nThe media type of the media item.\nlet MPMediaItemPropertyPlayCount: String\nThe number of times the user plays the media item.\nlet MPMediaItemPropertyPodcastPersistentID: String\nThe persistent identifier for an audio podcast.\nlet MPMediaItemPropertyPodcastTitle: String\nThe title of a podcast.\nlet MPMediaItemPropertyTitle: String\nThe title or name of the media item."
  },
  {
    "title": "MPMediaType",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmediatype",
    "html": "Overview\n\nMedia item types are possible values for the MPMediaItemPropertyMediaType property. A media item can have more than one media item type.\n\nTopics\nConstants\nstatic var music: MPMediaType\nThe media item contains music.\nstatic var podcast: MPMediaType\nThe media item contains a podcast.\nstatic var audioBook: MPMediaType\nThe media item contains an audio book.\nstatic var audioITunesU: MPMediaType\nThe media item contains an iTunes U audio lesson.\nstatic var anyAudio: MPMediaType\nThe media item contains an unspecified type of audio content.\nstatic var movie: MPMediaType\nThe media item contains a movie.\nstatic var tvShow: MPMediaType\nThe media item contains a TV show.\nstatic var videoPodcast: MPMediaType\nThe media item contains a video podcast.\nstatic var musicVideo: MPMediaType\nThe media item contains a music video.\nstatic var videoITunesU: MPMediaType\nThe media item contains an iTunes U video.\nstatic var homeVideo: MPMediaType\nThe media item contains a home video.\nstatic var anyVideo: MPMediaType\nThe media item contains an unspecified type of video content.\nstatic var any: MPMediaType\nThe media item contains an unspecified type of media content.\nInitializers\ninit(rawValue: UInt)\nCreates a new instance with the specified raw value.\nRelationships\nConforms To\nOptionSet\nSendable\nSee Also\nMedia item types and keys\nGeneral media item property keys\nSystem-defined properties for obtaining the metadata for a media item.\nUser-defined property keys\nProperties for obtaining user-defined metadata for a media item."
  },
  {
    "title": "MPNowPlayingInfoPropertyPlaybackRate",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpnowplayinginfopropertyplaybackrate",
    "html": "Discussion\n\nValue is an NSNumber object configured as a double. The default value is 1.0, which indicates a normal playback rate. A playback rate value of 2.0 means twice the normal playback rate; a piece of media played at this rate would take half as long to play to completion. A value of 0.5 means half the normal playback rate; a piece of media played at this rate would take twice as long to play to completion.\n\nSee Also\nAccessing Now Playing metadata properties\nlet MPNowPlayingInfoCollectionIdentifier: String\nThe identifier of the collection the Now Playing item belongs to.\nlet MPNowPlayingInfoPropertyAdTimeRanges: String\nA list of ad breaks in the Now Playing item.\nlet MPNowPlayingInfoPropertyAvailableLanguageOptions: String\nThe available language option groups for the Now Playing item.\nlet MPNowPlayingInfoPropertyAssetURL: String\nThe URL pointing to the Now Playing item’s underlying asset.\nlet MPNowPlayingInfoPropertyChapterCount: String\nThe total number of chapters in the Now Playing item.\nlet MPNowPlayingInfoPropertyChapterNumber: String\nThe number corresponding to the currently playing chapter.\nlet MPNowPlayingInfoPropertyCreditsStartTime: String\nThe start time for the credits, in seconds, without ads, for the Now Playing item.\nlet MPNowPlayingInfoPropertyCurrentLanguageOptions: String\nThe currently active language options for the Now Playing item.\nlet MPNowPlayingInfoPropertyCurrentPlaybackDate: String\nThe date associated with the current elapsed playback time.\nlet MPNowPlayingInfoPropertyDefaultPlaybackRate: String\nThe default playback rate for the Now Playing item.\nlet MPNowPlayingInfoPropertyElapsedPlaybackTime: String\nThe elapsed time of the Now Playing item, in seconds.\nlet MPNowPlayingInfoPropertyExternalContentIdentifier: String\nThe opaque identifier that uniquely identifies the Now Playing item, even through app relaunches.\nlet MPNowPlayingInfoPropertyExternalUserProfileIdentifier: String\nThe opaque identifier that uniquely identifies the profile the Now Playing item plays from, even through app relaunches.\nlet MPNowPlayingInfoPropertyIsLiveStream: String\nA number that denotes whether the Now Playing item is a live stream.\nlet MPNowPlayingInfoPropertyMediaType: String\nThe media type of the Now Playing item.\nlet MPNowPlayingInfoPropertyPlaybackProgress: String\nThe current progress of the Now Playing item.\nlet MPNowPlayingInfoPropertyPlaybackQueueCount: String\nThe total number of items in the app’s playback queue.\nlet MPNowPlayingInfoPropertyPlaybackQueueIndex: String\nThe index of the Now Playing item in the app’s playback queue.\nlet MPNowPlayingInfoPropertyServiceIdentifier: String\nThe service provider associated with the Now Playing item."
  },
  {
    "title": "setStartTime(_:forItemWithStoreID:)",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmusicplayerstorequeuedescriptor/2582432-setstarttime",
    "html": "Parameters\nstartTime\n\nThe TimeInterval describing when the store item starts playing.\n\nstoreID\n\nThe store identifier associated with the item in the queue that has a changed start time.\n\nSee Also\nSetting start and end times\nfunc setEndTime(TimeInterval, forItemWithStoreID: String)\nSets the time the designated store item is to stop playing."
  },
  {
    "title": "albumPersistentID",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmediaitem/1621703-albumpersistentid",
    "html": "See Also\nMedia item properties\nvar albumArtist: String?\nThe primary performing artist for an album.\nvar albumArtistPersistentID: MPMediaEntityPersistentID\nThe persistent identifier for the primary performing artist for an album.\nvar albumTitle: String?\nThe title of an album, such as Live on Mars, rather than the title of an individual song on the album, such as “Crater Dance.”\nvar albumTrackCount: Int\nThe number of tracks for the album that contains the media item.\nvar albumTrackNumber: Int\nThe track number of the media item, for a media item that’s part of an album.\nvar artist: String?\nThe performing artists for a media item, which may vary from the primary artist for the album that a media item belongs to.\nvar artistPersistentID: MPMediaEntityPersistentID\nThe persistent identifier for an artist.\nvar artwork: MPMediaItemArtwork?\nThe artwork image for the media item.\nvar assetURL: URL?\nThe URL that points to the media item.\nvar beatsPerMinute: Int\nThe number of musical beats per minute for the media item.\nvar bookmarkTime: TimeInterval\nThe time of the user’s most recent interaction with the bookmark in the media item.\nvar isCloudItem: Bool\nA Boolean value that indicates whether the media item is an iCloud Music Library item.\nvar comments: String?\nTextual information about the media item.\nvar isCompilation: Bool\nA Boolean value that indicates whether the media item is part of a compilation.\nvar isPreorder: Bool\nA Boolean value that indicates whether the media item is a preorder.\nvar composer: String?\nThe musical composer for the media item.\nvar composerPersistentID: MPMediaEntityPersistentID\nThe persistent identifier for a composer.\nvar dateAdded: Date\nThe date the user adds the media item to the library.\nvar discCount: Int\nThe number of discs for the album that contains the media item.\nvar discNumber: Int\nThe disc number of the media item, for a media item that’s part of a multidisc album.\nvar isExplicitItem: Bool\nA Boolean value that indicates whether the media item has explicit (adult) lyrics or language.\nvar genre: String?\nThe music or film genre of the media item.\nvar genrePersistentID: MPMediaEntityPersistentID\nThe persistent identifier for a genre.\nvar lastPlayedDate: Date?\nThe most recent play date of the media item.\nvar lyrics: String?\nThe lyrics for the media item.\nvar mediaType: MPMediaType\nThe media type of the media item.\nvar persistentID: MPMediaEntityPersistentID\nThe persistent identifier for the media item.\nvar playCount: Int\nThe number of times the user plays the media item.\nvar playbackDuration: TimeInterval\nThe playback duration of the media item.\nvar playbackStoreID: String\nThe ID of a media item from the Apple Music catalog.\nvar podcastPersistentID: MPMediaEntityPersistentID\nThe persistent identifier for an audio podcast.\nvar podcastTitle: String?\nThe title of a podcast, such as This Martian Drudgery, rather than the title of an individual episode of a podcast, such as “Episode 12: Another Cold Day at the Pole.”\nvar hasProtectedAsset: Bool\nA Boolean value that indicates whether the media item has a protected asset.\nvar rating: Int\nThe user-specified rating of the media item.\nvar releaseDate: Date?\nThe date of the media item’s first public release.\nvar skipCount: Int\nThe number of times the user skips playing the media item.\nvar title: String?\nThe title or name of the media item.\nvar userGrouping: String?\nGrouping information for the media item."
  },
  {
    "title": "startItemID",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmusicplayerstorequeuedescriptor/2582430-startitemid",
    "html": "Discussion\n\nWhen this property isn’t set, the value is nil and the first item in the queue is the first item to play.\n\nSee Also\nStore identifier queue descriptor properties\nvar storeIDs: [String]?\nAn array containing the store identifiers found by the query used to create the queue descriptor."
  },
  {
    "title": "playParametersQueue",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmusicplayerplayparametersqueuedescriptor/2909018-playparametersqueue",
    "html": "See Also\nAccessing the play parameters\nvar startItemPlayParameters: MPMusicPlayerPlayParameters?\nThe item identified by the play parameters to play first.\nclass MPMusicPlayerPlayParameters\nThe MusicKit parameters that describe items to play."
  },
  {
    "title": "repeatMode",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmusicplayercontroller/1624241-repeatmode",
    "html": "Discussion\n\nFor the available repeat modes, see MPMusicRepeatMode. If not explicitly set, repeatMode defaults to MPMusicRepeatMode.default.\n\nSee Also\nManaging playback mode and state\nvar nowPlayingItem: MPMediaItem?\nThe currently-playing media item, or the media item in a queue that you designated to begin playback with.\nvar indexOfNowPlayingItem: Int\nThe index of the now playing item in the current playback queue.\nvar playbackState: MPMusicPlaybackState\nThe current playback state of the music player.\nvar shuffleMode: MPMusicShuffleMode\nThe current shuffle mode of the music player.\nenum MPMusicPlaybackState\nThe music player playback state modes.\nenum MPMusicRepeatMode\nThe repeat modes for the media player.\nenum MPMusicShuffleMode\nThe shuffle modes for the media player.\nvar volume: Float\nThe audio playback volume for the music player, in the range from 0.0 (silent) through 1.0 (maximum volume).\nDeprecated"
  },
  {
    "title": "indexOfNowPlayingItem",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmusicplayercontroller/1624246-indexofnowplayingitem",
    "html": "Discussion\n\nThis property’s value is NSNotFound if the index isn’t valid, for example, if the playback queue is empty.\n\nSee Also\nManaging playback mode and state\nvar nowPlayingItem: MPMediaItem?\nThe currently-playing media item, or the media item in a queue that you designated to begin playback with.\nvar playbackState: MPMusicPlaybackState\nThe current playback state of the music player.\nvar repeatMode: MPMusicRepeatMode\nThe current repeat mode of the music player.\nvar shuffleMode: MPMusicShuffleMode\nThe current shuffle mode of the music player.\nenum MPMusicPlaybackState\nThe music player playback state modes.\nenum MPMusicRepeatMode\nThe repeat modes for the media player.\nenum MPMusicShuffleMode\nThe shuffle modes for the media player.\nvar volume: Float\nThe audio playback volume for the music player, in the range from 0.0 (silent) through 1.0 (maximum volume).\nDeprecated"
  },
  {
    "title": "currentPlaybackTime",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmediaplayback/1616253-currentplaybacktime",
    "html": "Required\n\nDiscussion\n\nFor video-on-demand or progressively downloaded content, this value measures seconds from the beginning of the current item. Changing the value of this property moves the playhead to the new location. For content streamed live from a server, this value represents the time from the beginning of the playlist when it was first loaded. The system returns NaN if the CMTime is invalid or indefinite.\n\nSee Also\nAccessing playback attributes\nvar currentPlaybackRate: Float\nThe current playback rate for the player.\n\nRequired"
  },
  {
    "title": "nowPlayingItem",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmusicplayercontroller/1624245-nowplayingitem",
    "html": "Discussion\n\nTo specify that playback should begin at a particular media item in the playback queue, set this property to that item while the music player is in a stopped or paused state.\n\nIf no media item is playing or designated to play, this property’s value is nil.\n\nIf you use the system music player and the user plays an item from another library using Home Sharing, the value of this property is nil.\n\nSee Also\nManaging playback mode and state\nvar indexOfNowPlayingItem: Int\nThe index of the now playing item in the current playback queue.\nvar playbackState: MPMusicPlaybackState\nThe current playback state of the music player.\nvar repeatMode: MPMusicRepeatMode\nThe current repeat mode of the music player.\nvar shuffleMode: MPMusicShuffleMode\nThe current shuffle mode of the music player.\nenum MPMusicPlaybackState\nThe music player playback state modes.\nenum MPMusicRepeatMode\nThe repeat modes for the media player.\nenum MPMusicShuffleMode\nThe shuffle modes for the media player.\nvar volume: Float\nThe audio playback volume for the music player, in the range from 0.0 (silent) through 1.0 (maximum volume).\nDeprecated"
  },
  {
    "title": "prepareToPlay(completionHandler:)",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmusicplayercontroller/2582424-preparetoplay",
    "html": "Parameters\ncompletionHandler\n\nA block that the system call after it buffers the first item in the queue and it’s ready to play.\n\nerror\n\nIf an error occurred, this parameter holds the error object that explains the error. Otherwise, the value of this parameter is nil.\n\nDiscussion\n\nConcurrency Note\n\nYou can call this method from synchronous code using a completion handler, as shown on this page, or you can call it as an asynchronous method that has the following declaration:\n\nfunc prepareToPlay() async throws\n\n\nFor information about concurrency and asynchronous code in Swift, see Calling Objective-C APIs Asynchronously.\n\nCall this function to ensure that the system buffers the first item in the queue and it’s ready to play. The system executes the code in the completion handler after it buffers the first item in the queue."
  },
  {
    "title": "setQueue(with:)",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmusicplayercontroller/2582423-setqueue",
    "html": "Parameters\ndescriptor\n\nA queue descriptor the system uses to add media items to the playback queue.\n\nDiscussion\n\nTo begin playback after establishing a playback queue, call prepareToPlay().\n\nSee Also\nSetting up a playback queue\nfunc setQueue(with: MPMediaQuery)\nSets a music player’s playback queue based on a media query.\nfunc setQueue(with: MPMediaItemCollection)\nSets a music player’s playback queue using a media item collection.\nfunc setQueue(with: [String])\nSets a music player’s playback queue using with media items identified by the store identifiers."
  },
  {
    "title": "MPMediaItemPropertyTitle",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmediaitempropertytitle",
    "html": "Discussion\n\nThis property is unrelated to the MPMediaItemPropertyAlbumTitle property. Value is an NSString object.\n\nCan be used to build a media property predicate as described in MPMediaPropertyPredicate.\n\nSee Also\nFilterable property keys\nlet MPMediaItemPropertyAlbumArtist: String\nThe primary performing artist for an album.\nlet MPMediaItemPropertyAlbumArtistPersistentID: String\nThe persistent identifier for an album artist.\nlet MPMediaItemPropertyAlbumPersistentID: String\nThe key for the persistent identifier for an album.\nlet MPMediaItemPropertyAlbumTitle: String\nThe title of an album.\nlet MPMediaItemPropertyArtist: String\nThe performing artists for a media item — which may vary from the primary artist for the album that a media item belongs to.\nlet MPMediaItemPropertyArtistPersistentID: String\nThe key for the persistent identifier for an artist.\nlet MPMediaItemPropertyComposer: String\nThe musical composer for the media item.\nlet MPMediaItemPropertyComposerPersistentID: String\nThe persistent identifier for a composer.\nlet MPMediaItemPropertyGenre: String\nThe music or film genre of the media item.\nlet MPMediaItemPropertyGenrePersistentID: String\nThe persistent identifier for a genre.\nlet MPMediaItemPropertyHasProtectedAsset: String\nA Boolean value that indicates the media item has DRM protection so it can’t play through a standard playback API.\nlet MPMediaItemPropertyIsCompilation: String\nA Boolean value that indicates whether the media item is part of a compilation.\nlet MPMediaItemPropertyIsCloudItem: String\nA Boolean value that indicates whether the media item is an iCloud item.\nlet MPMediaItemPropertyMediaType: String\nThe media type of the media item.\nlet MPMediaItemPropertyPersistentID: String\nThe key for the persistent identifier for the media item.\nlet MPMediaItemPropertyPlayCount: String\nThe number of times the user plays the media item.\nlet MPMediaItemPropertyPodcastPersistentID: String\nThe persistent identifier for an audio podcast.\nlet MPMediaItemPropertyPodcastTitle: String\nThe title of a podcast."
  },
  {
    "title": "currentPlaybackRate",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmediaplayback/1616256-currentplaybackrate",
    "html": "Required\n\nDiscussion\n\nThis value represents a multiplier for the default playback rate of the current item. A value of 0.0 indicates that playback is stopped, while a value of 1.0 indicates that playback is occurring at normal speed. Positive values indicate forward playback while negative values indicate reverse playback.\n\nSetting the value of this property changes the playback rate accordingly.\n\nSee Also\nAccessing playback attributes\nvar currentPlaybackTime: TimeInterval\nThe current position of the playhead.\n\nRequired"
  },
  {
    "title": "beginSeekingForward()",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmediaplayback/1616247-beginseekingforward",
    "html": "Required\n\nDiscussion\n\nUse this method to move the current playback position forward in time at an accelerated rate. Seeking begins when you call this method and continues until you call the endSeeking() method.\n\nThis method has no effect on streamed content.\n\nSee Also\nSeeking within media\nfunc beginSeekingBackward()\nBegins seeking backward through the media content.\n\nRequired\n\nfunc endSeeking()\nEnds forward and backward seeking through the media content.\n\nRequired"
  },
  {
    "title": "setQueue(with:)",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmusicplayercontroller/1624171-setqueue",
    "html": "Parameters\nitemCollection\n\nA media item collection that you want as the playback queue. See MPMediaItemCollection for a description of media item collections and how to use them.\n\nDiscussion\n\nTo begin playback after establishing a playback queue, call prepareToPlay().\n\nSee Also\nSetting up a playback queue\nfunc setQueue(with: MPMediaQuery)\nSets a music player’s playback queue based on a media query.\nfunc setQueue(with: [String])\nSets a music player’s playback queue using with media items identified by the store identifiers.\nfunc setQueue(with: MPMusicPlayerQueueDescriptor)\nSet the music player’s playback queue using media items that fit the queue descriptor properties."
  },
  {
    "title": "MPMediaItemPropertyArtist",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmediaitempropertyartist",
    "html": "Discussion\n\nFor example, if the album artist is “Joseph Fable,” the artist for one of the songs in the album may be “Joseph Fable featuring Thomas Smithson”. Value is an NSString object.\n\nCan be used to build a media property predicate as described in MPMediaPropertyPredicate.\n\nSee Also\nFilterable property keys\nlet MPMediaItemPropertyAlbumArtist: String\nThe primary performing artist for an album.\nlet MPMediaItemPropertyAlbumArtistPersistentID: String\nThe persistent identifier for an album artist.\nlet MPMediaItemPropertyAlbumPersistentID: String\nThe key for the persistent identifier for an album.\nlet MPMediaItemPropertyAlbumTitle: String\nThe title of an album.\nlet MPMediaItemPropertyArtistPersistentID: String\nThe key for the persistent identifier for an artist.\nlet MPMediaItemPropertyComposer: String\nThe musical composer for the media item.\nlet MPMediaItemPropertyComposerPersistentID: String\nThe persistent identifier for a composer.\nlet MPMediaItemPropertyGenre: String\nThe music or film genre of the media item.\nlet MPMediaItemPropertyGenrePersistentID: String\nThe persistent identifier for a genre.\nlet MPMediaItemPropertyHasProtectedAsset: String\nA Boolean value that indicates the media item has DRM protection so it can’t play through a standard playback API.\nlet MPMediaItemPropertyIsCompilation: String\nA Boolean value that indicates whether the media item is part of a compilation.\nlet MPMediaItemPropertyIsCloudItem: String\nA Boolean value that indicates whether the media item is an iCloud item.\nlet MPMediaItemPropertyMediaType: String\nThe media type of the media item.\nlet MPMediaItemPropertyPersistentID: String\nThe key for the persistent identifier for the media item.\nlet MPMediaItemPropertyPlayCount: String\nThe number of times the user plays the media item.\nlet MPMediaItemPropertyPodcastPersistentID: String\nThe persistent identifier for an audio podcast.\nlet MPMediaItemPropertyPodcastTitle: String\nThe title of a podcast.\nlet MPMediaItemPropertyTitle: String\nThe title or name of the media item."
  },
  {
    "title": "MPMediaItemPropertyAlbumTrackCount",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmediaitempropertyalbumtrackcount",
    "html": "Discussion\n\nThis value is an NSNumber object that represents an NSUInteger data type. For an audio streaming app, the system provides a default value of 1 for this property.\n\nSee Also\nProperty keys\nlet MPMediaItemPropertyPlaybackDuration: String\nThe playback duration of the media item.\nlet MPMediaItemPropertyAlbumTrackNumber: String\nThe track number of the media item, for a media item that is part of an album.\nlet MPMediaItemPropertyDiscNumber: String\nThe disc number of the media item, for a media item that is part of a multidisc album.\nlet MPMediaItemPropertyDiscCount: String\nThe number of discs for the album that contains the media item.\nlet MPMediaItemPropertyArtwork: String\nThe artwork image for the media item.\nlet MPMediaItemPropertyLyrics: String\nThe lyrics for the media item.\nlet MPMediaItemPropertyReleaseDate: String\nThe date of the media item’s first public release.\nlet MPMediaItemPropertyBeatsPerMinute: String\nThe number of musical beats per minute for the media item.\nlet MPMediaItemPropertyComments: String\nTextual information about the media item.\nlet MPMediaItemPropertyAssetURL: String\nA URL that points to the media item.\nlet MPMediaItemPropertyIsExplicit: String\nA Boolean value that indicates whether the media item contains explicit (adult) lyrics or language.\nlet MPMediaItemPropertyIsPreorder: String\nA Boolean value that indicates whether the media item is a preorder.\nlet MPMediaItemPropertyPlaybackStoreID: String\nThe identifier for enqueueing store tracks."
  },
  {
    "title": "MPMediaItemPropertyGenre",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmediaitempropertygenre",
    "html": "Discussion\n\nThis value is an NSString object.\n\nCan be used to build a media property predicate as described in MPMediaPropertyPredicate.\n\nSee Also\nFilterable property keys\nlet MPMediaItemPropertyAlbumArtist: String\nThe primary performing artist for an album.\nlet MPMediaItemPropertyAlbumArtistPersistentID: String\nThe persistent identifier for an album artist.\nlet MPMediaItemPropertyAlbumPersistentID: String\nThe key for the persistent identifier for an album.\nlet MPMediaItemPropertyAlbumTitle: String\nThe title of an album.\nlet MPMediaItemPropertyArtist: String\nThe performing artists for a media item — which may vary from the primary artist for the album that a media item belongs to.\nlet MPMediaItemPropertyArtistPersistentID: String\nThe key for the persistent identifier for an artist.\nlet MPMediaItemPropertyComposer: String\nThe musical composer for the media item.\nlet MPMediaItemPropertyComposerPersistentID: String\nThe persistent identifier for a composer.\nlet MPMediaItemPropertyGenrePersistentID: String\nThe persistent identifier for a genre.\nlet MPMediaItemPropertyHasProtectedAsset: String\nA Boolean value that indicates the media item has DRM protection so it can’t play through a standard playback API.\nlet MPMediaItemPropertyIsCompilation: String\nA Boolean value that indicates whether the media item is part of a compilation.\nlet MPMediaItemPropertyIsCloudItem: String\nA Boolean value that indicates whether the media item is an iCloud item.\nlet MPMediaItemPropertyMediaType: String\nThe media type of the media item.\nlet MPMediaItemPropertyPersistentID: String\nThe key for the persistent identifier for the media item.\nlet MPMediaItemPropertyPlayCount: String\nThe number of times the user plays the media item.\nlet MPMediaItemPropertyPodcastPersistentID: String\nThe persistent identifier for an audio podcast.\nlet MPMediaItemPropertyPodcastTitle: String\nThe title of a podcast.\nlet MPMediaItemPropertyTitle: String\nThe title or name of the media item."
  },
  {
    "title": "isExplicitItem",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmediaitem/1649691-isexplicititem",
    "html": "Discussion\n\nWhen set to true, the media item contains explicit content.\n\nSee Also\nMedia item properties\nvar albumArtist: String?\nThe primary performing artist for an album.\nvar albumArtistPersistentID: MPMediaEntityPersistentID\nThe persistent identifier for the primary performing artist for an album.\nvar albumPersistentID: MPMediaEntityPersistentID\nThe persistent identifier for an album.\nvar albumTitle: String?\nThe title of an album, such as Live on Mars, rather than the title of an individual song on the album, such as “Crater Dance.”\nvar albumTrackCount: Int\nThe number of tracks for the album that contains the media item.\nvar albumTrackNumber: Int\nThe track number of the media item, for a media item that’s part of an album.\nvar artist: String?\nThe performing artists for a media item, which may vary from the primary artist for the album that a media item belongs to.\nvar artistPersistentID: MPMediaEntityPersistentID\nThe persistent identifier for an artist.\nvar artwork: MPMediaItemArtwork?\nThe artwork image for the media item.\nvar assetURL: URL?\nThe URL that points to the media item.\nvar beatsPerMinute: Int\nThe number of musical beats per minute for the media item.\nvar bookmarkTime: TimeInterval\nThe time of the user’s most recent interaction with the bookmark in the media item.\nvar isCloudItem: Bool\nA Boolean value that indicates whether the media item is an iCloud Music Library item.\nvar comments: String?\nTextual information about the media item.\nvar isCompilation: Bool\nA Boolean value that indicates whether the media item is part of a compilation.\nvar isPreorder: Bool\nA Boolean value that indicates whether the media item is a preorder.\nvar composer: String?\nThe musical composer for the media item.\nvar composerPersistentID: MPMediaEntityPersistentID\nThe persistent identifier for a composer.\nvar dateAdded: Date\nThe date the user adds the media item to the library.\nvar discCount: Int\nThe number of discs for the album that contains the media item.\nvar discNumber: Int\nThe disc number of the media item, for a media item that’s part of a multidisc album.\nvar genre: String?\nThe music or film genre of the media item.\nvar genrePersistentID: MPMediaEntityPersistentID\nThe persistent identifier for a genre.\nvar lastPlayedDate: Date?\nThe most recent play date of the media item.\nvar lyrics: String?\nThe lyrics for the media item.\nvar mediaType: MPMediaType\nThe media type of the media item.\nvar persistentID: MPMediaEntityPersistentID\nThe persistent identifier for the media item.\nvar playCount: Int\nThe number of times the user plays the media item.\nvar playbackDuration: TimeInterval\nThe playback duration of the media item.\nvar playbackStoreID: String\nThe ID of a media item from the Apple Music catalog.\nvar podcastPersistentID: MPMediaEntityPersistentID\nThe persistent identifier for an audio podcast.\nvar podcastTitle: String?\nThe title of a podcast, such as This Martian Drudgery, rather than the title of an individual episode of a podcast, such as “Episode 12: Another Cold Day at the Pole.”\nvar hasProtectedAsset: Bool\nA Boolean value that indicates whether the media item has a protected asset.\nvar rating: Int\nThe user-specified rating of the media item.\nvar releaseDate: Date?\nThe date of the media item’s first public release.\nvar skipCount: Int\nThe number of times the user skips playing the media item.\nvar title: String?\nThe title or name of the media item.\nvar userGrouping: String?\nGrouping information for the media item."
  },
  {
    "title": "MPMediaItemPropertyAlbumTitle",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmediaitempropertyalbumtitle",
    "html": "Discussion\n\nThis value property contains the album title, such as “Live On Mars”, as opposed to the title of an individual song on the album, such as “Crater Dance (radio edit)” (which you specify using the MPMediaItemPropertyTitle property). Value is an NSString object.\n\nCan be used to build a media property predicate as described in MPMediaPropertyPredicate.\n\nSee Also\nFilterable property keys\nlet MPMediaItemPropertyAlbumArtist: String\nThe primary performing artist for an album.\nlet MPMediaItemPropertyAlbumArtistPersistentID: String\nThe persistent identifier for an album artist.\nlet MPMediaItemPropertyAlbumPersistentID: String\nThe key for the persistent identifier for an album.\nlet MPMediaItemPropertyArtist: String\nThe performing artists for a media item — which may vary from the primary artist for the album that a media item belongs to.\nlet MPMediaItemPropertyArtistPersistentID: String\nThe key for the persistent identifier for an artist.\nlet MPMediaItemPropertyComposer: String\nThe musical composer for the media item.\nlet MPMediaItemPropertyComposerPersistentID: String\nThe persistent identifier for a composer.\nlet MPMediaItemPropertyGenre: String\nThe music or film genre of the media item.\nlet MPMediaItemPropertyGenrePersistentID: String\nThe persistent identifier for a genre.\nlet MPMediaItemPropertyHasProtectedAsset: String\nA Boolean value that indicates the media item has DRM protection so it can’t play through a standard playback API.\nlet MPMediaItemPropertyIsCompilation: String\nA Boolean value that indicates whether the media item is part of a compilation.\nlet MPMediaItemPropertyIsCloudItem: String\nA Boolean value that indicates whether the media item is an iCloud item.\nlet MPMediaItemPropertyMediaType: String\nThe media type of the media item.\nlet MPMediaItemPropertyPersistentID: String\nThe key for the persistent identifier for the media item.\nlet MPMediaItemPropertyPlayCount: String\nThe number of times the user plays the media item.\nlet MPMediaItemPropertyPodcastPersistentID: String\nThe persistent identifier for an audio podcast.\nlet MPMediaItemPropertyPodcastTitle: String\nThe title of a podcast.\nlet MPMediaItemPropertyTitle: String\nThe title or name of the media item."
  },
  {
    "title": "setQueue(with:)",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmusicplayercontroller/1624180-setqueue",
    "html": "Parameters\nquery\n\nA media query that specifies the collection of media items that you want as the playback queue. See MPMediaQuery for a description of query types and how to create them.\n\nDiscussion\n\nTo begin playback after establishing a playback queue, call prepareToPlay().\n\nSee Also\nSetting up a playback queue\nfunc setQueue(with: MPMediaItemCollection)\nSets a music player’s playback queue using a media item collection.\nfunc setQueue(with: [String])\nSets a music player’s playback queue using with media items identified by the store identifiers.\nfunc setQueue(with: MPMusicPlayerQueueDescriptor)\nSet the music player’s playback queue using media items that fit the queue descriptor properties."
  },
  {
    "title": "MPNowPlayingInfoCollectionIdentifier",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpnowplayinginfocollectionidentifier",
    "html": "Discussion\n\nThe identifier can be an album, artist, playlist, etc.\n\nSee Also\nAccessing Now Playing metadata properties\nlet MPNowPlayingInfoPropertyAdTimeRanges: String\nA list of ad breaks in the Now Playing item.\nlet MPNowPlayingInfoPropertyAvailableLanguageOptions: String\nThe available language option groups for the Now Playing item.\nlet MPNowPlayingInfoPropertyAssetURL: String\nThe URL pointing to the Now Playing item’s underlying asset.\nlet MPNowPlayingInfoPropertyChapterCount: String\nThe total number of chapters in the Now Playing item.\nlet MPNowPlayingInfoPropertyChapterNumber: String\nThe number corresponding to the currently playing chapter.\nlet MPNowPlayingInfoPropertyCreditsStartTime: String\nThe start time for the credits, in seconds, without ads, for the Now Playing item.\nlet MPNowPlayingInfoPropertyCurrentLanguageOptions: String\nThe currently active language options for the Now Playing item.\nlet MPNowPlayingInfoPropertyCurrentPlaybackDate: String\nThe date associated with the current elapsed playback time.\nlet MPNowPlayingInfoPropertyDefaultPlaybackRate: String\nThe default playback rate for the Now Playing item.\nlet MPNowPlayingInfoPropertyElapsedPlaybackTime: String\nThe elapsed time of the Now Playing item, in seconds.\nlet MPNowPlayingInfoPropertyExternalContentIdentifier: String\nThe opaque identifier that uniquely identifies the Now Playing item, even through app relaunches.\nlet MPNowPlayingInfoPropertyExternalUserProfileIdentifier: String\nThe opaque identifier that uniquely identifies the profile the Now Playing item plays from, even through app relaunches.\nlet MPNowPlayingInfoPropertyIsLiveStream: String\nA number that denotes whether the Now Playing item is a live stream.\nlet MPNowPlayingInfoPropertyMediaType: String\nThe media type of the Now Playing item.\nlet MPNowPlayingInfoPropertyPlaybackProgress: String\nThe current progress of the Now Playing item.\nlet MPNowPlayingInfoPropertyPlaybackRate: String\nThe playback rate of the Now Playing item.\nlet MPNowPlayingInfoPropertyPlaybackQueueCount: String\nThe total number of items in the app’s playback queue.\nlet MPNowPlayingInfoPropertyPlaybackQueueIndex: String\nThe index of the Now Playing item in the app’s playback queue.\nlet MPNowPlayingInfoPropertyServiceIdentifier: String\nThe service provider associated with the Now Playing item."
  },
  {
    "title": "songs()",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmediaquery/1621791-songs",
    "html": "Return Value\n\nA media query that matches media items of type music and has a grouping type of MPMediaGrouping.title.\n\nDiscussion\n\nA media item can have more than one media type; for example, an item could be of types “music” and “podcast.” A songs() query matches all music items, whether or not they’re also of other media types.\n\nSee Also\nCreating media queries\nclass func albums() -> MPMediaQuery\nCreates a media query that matches music items and that groups and sorts collections by album name.\nclass func artists() -> MPMediaQuery\nCreates a media query that matches music items and that groups and sorts collections by artist name.\nclass func playlists() -> MPMediaQuery\nCreates a media query that matches the entire library and that groups and sorts collections by playlist name.\nclass func podcasts() -> MPMediaQuery\nCreates a media query that matches podcast items and that groups and sorts collections by podcast name.\nclass func audiobooks() -> MPMediaQuery\nCreates a media query that matches audio book items and that groups and sorts collections by audio book name.\nclass func compilations() -> MPMediaQuery\nCreates a media query that matches compilation items and that groups and sorts collections by album name.\nclass func composers() -> MPMediaQuery\nCreates a media query that matches all media items and that groups and sorts collections by composer name.\nclass func genres() -> MPMediaQuery\nCreates a media query that matches all media items and that groups and sorts collections by genre name.\ninit(filterPredicates: Set<MPMediaPredicate>?)\nInitializes a media query with a set of media property predicates."
  },
  {
    "title": "prepareToPlay()",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmediaplayback/1616251-preparetoplay",
    "html": "Required\n\nDiscussion\n\nIf a media player isn’t already prepared to play when you call the play() method, that method automatically calls this method. However, to minimize playback delay, call this method before you call play().\n\nCalling this method may interrupt the media player’s audio session. For information on interruptions and how to respond to them, see Audio Session Programming Guide.\n\nSee Also\nStarting and stopping playback\nfunc play()\nInitiates playback of the current item.\n\nRequired\n\nfunc pause()\nPauses playback of the current item.\n\nRequired\n\nfunc stop()\nEnds playback of the current item.\n\nRequired\n\nvar isPreparedToPlay: Bool\nA Boolean value indicating whether a media player is ready to play.\n\nRequired"
  },
  {
    "title": "MPNowPlayingPlaybackState",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpnowplayingplaybackstate",
    "html": "Topics\nPlayback states\ncase unknown\nThe current state of the app is unknown.\ncase playing\nThe app is currently playing a media item.\ncase paused\nThe app is currently paused.\ncase stopped\nThe app has stopped playing.\ncase interrupted\nThe app has been interrupted during playback.\nRelationships\nConforms To\nSendable\nSee Also\nSetting the playback state in macOS\nvar playbackState: MPNowPlayingPlaybackState\nThe current playback state of the app."
  },
  {
    "title": "applicationMusicPlayer",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmusicplayercontroller/1624156-applicationmusicplayer",
    "html": "Return Value\n\nThe application music player.\n\nDiscussion\n\nThe application music player plays music locally within your app. The music player doesn’t affect the Music app’s state. When your app moves to the background, the music player stops playing the current media.\n\nSee Also\nGetting a music player\nclass var applicationQueuePlayer: MPMusicPlayerApplicationController\nReturns the application queue music player.\nclass var systemMusicPlayer: any MPMusicPlayerController & MPSystemMusicPlayerController\nReturns the system music player, which controls the Music app’s state."
  },
  {
    "title": "default()",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpnowplayinginfocenter/1615899-default",
    "html": "Return Value\n\nThe now playing info center singleton.\n\nDiscussion\n\nThe default now playing info center holds Now Playing information for the app that’s designated to receive remote control events. For information on how to configure your app to receive remote control events, see Handling external player events notifications.\n\nSee Also\nWorking with the default Now Playing info center\nvar nowPlayingInfo: [String : Any]?\nThe current Now Playing information for the default Now Playing info center.\nenum MPNowPlayingInfoMediaType\nThe type of media currently playing."
  },
  {
    "title": "nowPlayingInfo",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpnowplayinginfocenter/1615903-nowplayinginfo",
    "html": "Discussion\n\nTo clear the now playing info center dictionary, set it to nil.\n\nSee Also\nWorking with the default Now Playing info center\nclass func `default`() -> MPNowPlayingInfoCenter\nReturns the singleton Now Playing info center.\nenum MPNowPlayingInfoMediaType\nThe type of media currently playing."
  },
  {
    "title": "MPNowPlayingInfoMediaType",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpnowplayinginfomediatype",
    "html": "Topics\nMedia types\ncase none\nThere is no now playing media item.\ncase audio\nThe now playing media item is an audio item.\ncase video\nThe now playing media item is a video item.\nRelationships\nConforms To\nSendable\nSee Also\nWorking with the default Now Playing info center\nclass func `default`() -> MPNowPlayingInfoCenter\nReturns the singleton Now Playing info center.\nvar nowPlayingInfo: [String : Any]?\nThe current Now Playing information for the default Now Playing info center."
  },
  {
    "title": "pause()",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmediaplayback/1616258-pause",
    "html": "Required\n\nDiscussion\n\nIf the current item isn’t playing, this method has no effect. To resume playback of the current item from the pause point, call the play() method.\n\nSee Also\nStarting and stopping playback\nfunc play()\nInitiates playback of the current item.\n\nRequired\n\nfunc stop()\nEnds playback of the current item.\n\nRequired\n\nfunc prepareToPlay()\nPrepares a media player for playback.\n\nRequired\n\nvar isPreparedToPlay: Bool\nA Boolean value indicating whether a media player is ready to play.\n\nRequired"
  },
  {
    "title": "MPMediaGrouping.playlist",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmediagrouping/playlist",
    "html": "See Also\nMedia query keys\ncase title\nGroups and sorts media item collections by title. For songs, for example, the title is the song name. This is the default grouping key.\ncase album\nGroups and sorts media item collections by album, and sorts songs within an album by track order.\ncase artist\nGroups and sorts media item collections by performing artist.\ncase albumArtist\nGroups and sorts media item collections by album artist (the primary performing artist for an album as a whole).\ncase composer\nGroups and sorts media item collections by composer.\ncase genre\nGroups and sorts media item collections by musical or film genre.\ncase podcastTitle\nGroups and sorts media item collections by podcast title."
  },
  {
    "title": "init(value:forProperty:comparisonType:)",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmediapropertypredicate/1621798-init",
    "html": "Parameters\nvalue\n\nThe property value that you want to match when you query the Music library. For example, if you specify the MPMediaItemPropertyArtist constant in the forProperty parameter, in this parameter you supply a string containing the artist name.\n\nproperty\n\nA property to use to build a media property predicate. See General Media Item Property Keys and Podcast Item Property Keys in MPMediaItem.\n\ncomparisonType:\n\nThe logical comparison type for the predicate. See MPMediaPredicateComparison.\n\nReturn Value\n\nA media property predicate.\n\nSee Also\nCreating media property predicates\ninit(value: Any?, forProperty: String)\nCreates a media property predicate with the default comparison type."
  },
  {
    "title": "init(value:forProperty:)",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmediapropertypredicate/1621790-init",
    "html": "Parameters\nvalue\n\nThe property value that you want to match when you query the Music library. For example, if you specify the MPMediaItemPropertyArtist constant in the forProperty parameter, in this parameter you supply a string containing the artist name.\n\nproperty\n\nA property to use to build a media property predicate. See Media item types and keys.\n\nReturn Value\n\nA media property predicate.\n\nDiscussion\n\nThis is a convenience method that uses the default logical comparison type of MPMediaPredicateComparison.equalTo.\n\nSee Also\nCreating media property predicates\ninit(value: Any?, forProperty: String, comparisonType: MPMediaPredicateComparison)\nCreates a media property predicate with a specified comparison type."
  },
  {
    "title": "MPMediaGrouping.genre",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmediagrouping/genre",
    "html": "See Also\nMedia query keys\ncase title\nGroups and sorts media item collections by title. For songs, for example, the title is the song name. This is the default grouping key.\ncase album\nGroups and sorts media item collections by album, and sorts songs within an album by track order.\ncase artist\nGroups and sorts media item collections by performing artist.\ncase albumArtist\nGroups and sorts media item collections by album artist (the primary performing artist for an album as a whole).\ncase composer\nGroups and sorts media item collections by composer.\ncase playlist\nGroups and sorts media item collections by playlist.\ncase podcastTitle\nGroups and sorts media item collections by podcast title."
  },
  {
    "title": "MPMediaGrouping.artist",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmediagrouping/artist",
    "html": "See Also\nMedia query keys\ncase title\nGroups and sorts media item collections by title. For songs, for example, the title is the song name. This is the default grouping key.\ncase album\nGroups and sorts media item collections by album, and sorts songs within an album by track order.\ncase albumArtist\nGroups and sorts media item collections by album artist (the primary performing artist for an album as a whole).\ncase composer\nGroups and sorts media item collections by composer.\ncase genre\nGroups and sorts media item collections by musical or film genre.\ncase playlist\nGroups and sorts media item collections by playlist.\ncase podcastTitle\nGroups and sorts media item collections by podcast title."
  },
  {
    "title": "genres()",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmediaquery/1621788-genres",
    "html": "Return Value\n\nA media query that matches all media items and that has a grouping type of MPMediaGrouping.genre.\n\nSee Also\nCreating media queries\nclass func albums() -> MPMediaQuery\nCreates a media query that matches music items and that groups and sorts collections by album name.\nclass func artists() -> MPMediaQuery\nCreates a media query that matches music items and that groups and sorts collections by artist name.\nclass func songs() -> MPMediaQuery\nCreates a media query that matches music items and that groups and sorts collections by song name.\nclass func playlists() -> MPMediaQuery\nCreates a media query that matches the entire library and that groups and sorts collections by playlist name.\nclass func podcasts() -> MPMediaQuery\nCreates a media query that matches podcast items and that groups and sorts collections by podcast name.\nclass func audiobooks() -> MPMediaQuery\nCreates a media query that matches audio book items and that groups and sorts collections by audio book name.\nclass func compilations() -> MPMediaQuery\nCreates a media query that matches compilation items and that groups and sorts collections by album name.\nclass func composers() -> MPMediaQuery\nCreates a media query that matches all media items and that groups and sorts collections by composer name.\ninit(filterPredicates: Set<MPMediaPredicate>?)\nInitializes a media query with a set of media property predicates."
  },
  {
    "title": "MPMediaGrouping",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmediagrouping",
    "html": "Overview\n\nThe following code snippet shows how to apply a grouping key:\n\nlet everything = MPMediaQuery()\neverything.groupingType = MPMediaGrouping.album\nlet collections = [everything]\n\n\nAfter running these code lines, the collections array contains all the matched media items grouped and sorted according to album name.\n\nTo obtain a sorted list of songs, configure a media query with the MPMediaGroupingTitle key, or take advantage of the title key being the default for a media query. In either case, each obtained media item is, in effect, its own collection.\n\nCollections sort according to the same rules used by iTunes on the desktop. This includes respecting the primary system language chosen by the user. The system ignores leading articles during sorting, including “A,” “An,” and “The” when using English, or “L’,” “La,” and “Le” when using French. If you need precise control over sorting, implement it in your application.\n\nTopics\nMedia query keys\ncase title\nGroups and sorts media item collections by title. For songs, for example, the title is the song name. This is the default grouping key.\ncase album\nGroups and sorts media item collections by album, and sorts songs within an album by track order.\ncase artist\nGroups and sorts media item collections by performing artist.\ncase albumArtist\nGroups and sorts media item collections by album artist (the primary performing artist for an album as a whole).\ncase composer\nGroups and sorts media item collections by composer.\ncase genre\nGroups and sorts media item collections by musical or film genre.\ncase playlist\nGroups and sorts media item collections by playlist.\ncase podcastTitle\nGroups and sorts media item collections by podcast title.\nRelationships\nConforms To\nSendable\nSee Also\nConfiguring media queries\nvar filterPredicates: Set<MPMediaPredicate>?\nThe media property predicates of the media query.\nfunc addFilterPredicate(MPMediaPredicate)\nAdds a media property predicate to a query.\nfunc removeFilterPredicate(MPMediaPredicate)\nRemoves a filter predicate from a query.\nvar groupingType: MPMediaGrouping\nThe grouping for collections retrieved with the media query.\nvar itemSections: [MPMediaQuerySection]?\nAn array representing the section grouping of the query’s specified media items.\nvar collectionSections: [MPMediaQuerySection]?\nAn array representing the section grouping of the query’s specified media item collections."
  },
  {
    "title": "collectionSections",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmediaquery/1621779-collectionsections",
    "html": "Discussion\n\nThe value of this property may be nil if there’s no appropriate section grouping of the media item collections.\n\nSee Also\nConfiguring media queries\nvar filterPredicates: Set<MPMediaPredicate>?\nThe media property predicates of the media query.\nfunc addFilterPredicate(MPMediaPredicate)\nAdds a media property predicate to a query.\nfunc removeFilterPredicate(MPMediaPredicate)\nRemoves a filter predicate from a query.\nvar groupingType: MPMediaGrouping\nThe grouping for collections retrieved with the media query.\nvar itemSections: [MPMediaQuerySection]?\nAn array representing the section grouping of the query’s specified media items.\nenum MPMediaGrouping\nKeys used to configure a media query."
  },
  {
    "title": "groupingType",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmediaquery/1621782-groupingtype",
    "html": "Discussion\n\nThe default grouping type is MPMediaGrouping.title. See MPMediaGrouping for the list of available grouping types.\n\nSee Also\nConfiguring media queries\nvar filterPredicates: Set<MPMediaPredicate>?\nThe media property predicates of the media query.\nfunc addFilterPredicate(MPMediaPredicate)\nAdds a media property predicate to a query.\nfunc removeFilterPredicate(MPMediaPredicate)\nRemoves a filter predicate from a query.\nvar itemSections: [MPMediaQuerySection]?\nAn array representing the section grouping of the query’s specified media items.\nvar collectionSections: [MPMediaQuerySection]?\nAn array representing the section grouping of the query’s specified media item collections.\nenum MPMediaGrouping\nKeys used to configure a media query."
  },
  {
    "title": "init(filterPredicates:)",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmediaquery/1621771-init",
    "html": "Parameters\nfilterPredicates\n\nThe set of media property predicates to use as a filter on the library.\n\nReturn Value\n\nAn initialized media query.\n\nDiscussion\n\nMPMediaPropertyPredicate describes how to create media property predicates. The General media item property keys and Podcast Item Property Keys enumerations in MPMediaItem contain the keys you can use to construct predicates.\n\nSee Also\nCreating media queries\nclass func albums() -> MPMediaQuery\nCreates a media query that matches music items and that groups and sorts collections by album name.\nclass func artists() -> MPMediaQuery\nCreates a media query that matches music items and that groups and sorts collections by artist name.\nclass func songs() -> MPMediaQuery\nCreates a media query that matches music items and that groups and sorts collections by song name.\nclass func playlists() -> MPMediaQuery\nCreates a media query that matches the entire library and that groups and sorts collections by playlist name.\nclass func podcasts() -> MPMediaQuery\nCreates a media query that matches podcast items and that groups and sorts collections by podcast name.\nclass func audiobooks() -> MPMediaQuery\nCreates a media query that matches audio book items and that groups and sorts collections by audio book name.\nclass func compilations() -> MPMediaQuery\nCreates a media query that matches compilation items and that groups and sorts collections by album name.\nclass func composers() -> MPMediaQuery\nCreates a media query that matches all media items and that groups and sorts collections by composer name.\nclass func genres() -> MPMediaQuery\nCreates a media query that matches all media items and that groups and sorts collections by genre name."
  },
  {
    "title": "removeFilterPredicate(_:)",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmediaquery/1621785-removefilterpredicate",
    "html": "Parameters\npredicate\n\nThe media predicate to remove from the set of predicates for the query.\n\nSee Also\nConfiguring media queries\nvar filterPredicates: Set<MPMediaPredicate>?\nThe media property predicates of the media query.\nfunc addFilterPredicate(MPMediaPredicate)\nAdds a media property predicate to a query.\nvar groupingType: MPMediaGrouping\nThe grouping for collections retrieved with the media query.\nvar itemSections: [MPMediaQuerySection]?\nAn array representing the section grouping of the query’s specified media items.\nvar collectionSections: [MPMediaQuerySection]?\nAn array representing the section grouping of the query’s specified media item collections.\nenum MPMediaGrouping\nKeys used to configure a media query."
  },
  {
    "title": "filterPredicates",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmediaquery/1621781-filterpredicates",
    "html": "Discussion\n\nThe General Media Item Property Keys and Podcast Item Property Keys enumerations in MPMediaItem contain the keys you can use to construct predicates.\n\nSee Also\nConfiguring media queries\nfunc addFilterPredicate(MPMediaPredicate)\nAdds a media property predicate to a query.\nfunc removeFilterPredicate(MPMediaPredicate)\nRemoves a filter predicate from a query.\nvar groupingType: MPMediaGrouping\nThe grouping for collections retrieved with the media query.\nvar itemSections: [MPMediaQuerySection]?\nAn array representing the section grouping of the query’s specified media items.\nvar collectionSections: [MPMediaQuerySection]?\nAn array representing the section grouping of the query’s specified media item collections.\nenum MPMediaGrouping\nKeys used to configure a media query."
  },
  {
    "title": "addFilterPredicate(_:)",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmediaquery/1621773-addfilterpredicate",
    "html": "Parameters\npredicate\n\nThe media predicate to add to the set of predicates for the query.\n\nSee Also\nConfiguring media queries\nvar filterPredicates: Set<MPMediaPredicate>?\nThe media property predicates of the media query.\nfunc removeFilterPredicate(MPMediaPredicate)\nRemoves a filter predicate from a query.\nvar groupingType: MPMediaGrouping\nThe grouping for collections retrieved with the media query.\nvar itemSections: [MPMediaQuerySection]?\nAn array representing the section grouping of the query’s specified media items.\nvar collectionSections: [MPMediaQuerySection]?\nAn array representing the section grouping of the query’s specified media item collections.\nenum MPMediaGrouping\nKeys used to configure a media query."
  },
  {
    "title": "itemSections",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmediaquery/1621797-itemsections",
    "html": "Discussion\n\nThis property consists of an array of MPMediaQuerySection instances. The value of this property may be nil if there’s no appropriate section grouping of the media items.\n\nSee Also\nConfiguring media queries\nvar filterPredicates: Set<MPMediaPredicate>?\nThe media property predicates of the media query.\nfunc addFilterPredicate(MPMediaPredicate)\nAdds a media property predicate to a query.\nfunc removeFilterPredicate(MPMediaPredicate)\nRemoves a filter predicate from a query.\nvar groupingType: MPMediaGrouping\nThe grouping for collections retrieved with the media query.\nvar collectionSections: [MPMediaQuerySection]?\nAn array representing the section grouping of the query’s specified media item collections.\nenum MPMediaGrouping\nKeys used to configure a media query."
  },
  {
    "title": "composers()",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmediaquery/1621796-composers",
    "html": "Return Value\n\nA media query that matches all media items and that has a grouping type of MPMediaGrouping.composer.\n\nSee Also\nCreating media queries\nclass func albums() -> MPMediaQuery\nCreates a media query that matches music items and that groups and sorts collections by album name.\nclass func artists() -> MPMediaQuery\nCreates a media query that matches music items and that groups and sorts collections by artist name.\nclass func songs() -> MPMediaQuery\nCreates a media query that matches music items and that groups and sorts collections by song name.\nclass func playlists() -> MPMediaQuery\nCreates a media query that matches the entire library and that groups and sorts collections by playlist name.\nclass func podcasts() -> MPMediaQuery\nCreates a media query that matches podcast items and that groups and sorts collections by podcast name.\nclass func audiobooks() -> MPMediaQuery\nCreates a media query that matches audio book items and that groups and sorts collections by audio book name.\nclass func compilations() -> MPMediaQuery\nCreates a media query that matches compilation items and that groups and sorts collections by album name.\nclass func genres() -> MPMediaQuery\nCreates a media query that matches all media items and that groups and sorts collections by genre name.\ninit(filterPredicates: Set<MPMediaPredicate>?)\nInitializes a media query with a set of media property predicates."
  },
  {
    "title": "Deprecated types",
    "url": "https://developer.apple.com/documentation/mediaplayer/deprecated_types",
    "html": "Topics\nDeprecated symbols\nclass MPMovieAccessLog\nKey metrics about network playback for an associated movie player that’s playing streamed content.\nDeprecated\nclass MPMovieAccessLogEvent\nA single piece of information for a movie access log.\nDeprecated\nclass MPMovieErrorLog\nData describing network resource playback failures for the associated movie player, including timestamps indicating when each failure occurred.\nDeprecated\nclass MPMovieErrorLogEvent\nA single piece of information for a movie error log.\nDeprecated\nstruct MPMovieLoadState\nConstants describing the network load state of the movie player.\nDeprecated\nstruct MPMovieMediaTypeMask\nThe types of content available in the movie file.\nDeprecated\nclass MPMoviePlayerController\nA type of movie player that manages the playback of a movie from a file or a network stream.\nDeprecated\nclass MPMoviePlayerViewController\nA simple view controller for displaying full-screen movies.\nDeprecated\nclass MPTimedMetadata\nA timed metadata object that carries time-based information within HTTP streamed media.\nDeprecated\nclass MPPlayableContentManager\nA shared content manager for controlling interactions between your media app and system-provided or external media player interfaces.\nDeprecated\nclass MPPlayableContentManagerContext\nAn object representing the current state of the playable endpoint.\nDeprecated\nclass var iPodMusicPlayer: MPMusicPlayerController\nReturns the iPod music player, which controls the iPod app’s state.\nDeprecated\ninit(image: UIImage)\nInitializes a media item artwork instance with a full-size image.\nDeprecated\nvar imageCropRect: CGRect\nThe bounds, in points, of the content area for the full size image associated with the media item artwork.\nvar showsRouteButton: Bool\nA Boolean value that indicates whether the route button is visible in the volume view.\nDeprecated\nfunc routeButtonImage(for: UIControl.State) -> UIImage?\nReturns the button image associated with the specified control state.\nDeprecated\nfunc routeButtonRect(forBounds: CGRect) -> CGRect\nReturns the drawing rectangle for the route button.\nDeprecated\nfunc setRouteButtonImage(UIImage?, for: UIControl.State)\nAssigns a button image to the specified control states.\nDeprecated\nvar areWirelessRoutesAvailable: Bool\nA Boolean value indicating wireless routes are available.\nDeprecated\nvar isWirelessRouteActive: Bool\nA Boolean value that indicates whether the wireless route is active.\nDeprecated\nstatic let MPVolumeViewWirelessRouteActiveDidChange: NSNotification.Name\nIndicates the active wireless route changed.\nDeprecated\nstatic let MPVolumeViewWirelessRoutesAvailableDidChange: NSNotification.Name\nIndicates the available wireless routes changed.\nDeprecated\nGlobal volume setting methods\nGlobal functions for setting the volume alert window status."
  },
  {
    "title": "openToPlay(_:)",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpsystemmusicplayercontroller/2919985-opentoplay",
    "html": "Required\n\nParameters\nqueueDescriptor\n\nThe queue descriptor that contains the video items to play.\n\nDiscussion\n\nThis method launches the user’s Music app, opens to the Now Playing screen, and begins playback of the video. If the Music app isn’t installed on the device, the system ignores this method and doesn’t play the videos."
  },
  {
    "title": "MPNowPlayingInfoPropertyAvailableLanguageOptions",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpnowplayinginfopropertyavailablelanguageoptions",
    "html": "Discussion\n\nValue is an array of MPNowPlayingInfoLanguageOptionGroup items. The system can play only one language option in a given group at a time.\n\nSee Also\nAccessing Now Playing metadata properties\nlet MPNowPlayingInfoCollectionIdentifier: String\nThe identifier of the collection the Now Playing item belongs to.\nlet MPNowPlayingInfoPropertyAdTimeRanges: String\nA list of ad breaks in the Now Playing item.\nlet MPNowPlayingInfoPropertyAssetURL: String\nThe URL pointing to the Now Playing item’s underlying asset.\nlet MPNowPlayingInfoPropertyChapterCount: String\nThe total number of chapters in the Now Playing item.\nlet MPNowPlayingInfoPropertyChapterNumber: String\nThe number corresponding to the currently playing chapter.\nlet MPNowPlayingInfoPropertyCreditsStartTime: String\nThe start time for the credits, in seconds, without ads, for the Now Playing item.\nlet MPNowPlayingInfoPropertyCurrentLanguageOptions: String\nThe currently active language options for the Now Playing item.\nlet MPNowPlayingInfoPropertyCurrentPlaybackDate: String\nThe date associated with the current elapsed playback time.\nlet MPNowPlayingInfoPropertyDefaultPlaybackRate: String\nThe default playback rate for the Now Playing item.\nlet MPNowPlayingInfoPropertyElapsedPlaybackTime: String\nThe elapsed time of the Now Playing item, in seconds.\nlet MPNowPlayingInfoPropertyExternalContentIdentifier: String\nThe opaque identifier that uniquely identifies the Now Playing item, even through app relaunches.\nlet MPNowPlayingInfoPropertyExternalUserProfileIdentifier: String\nThe opaque identifier that uniquely identifies the profile the Now Playing item plays from, even through app relaunches.\nlet MPNowPlayingInfoPropertyIsLiveStream: String\nA number that denotes whether the Now Playing item is a live stream.\nlet MPNowPlayingInfoPropertyMediaType: String\nThe media type of the Now Playing item.\nlet MPNowPlayingInfoPropertyPlaybackProgress: String\nThe current progress of the Now Playing item.\nlet MPNowPlayingInfoPropertyPlaybackRate: String\nThe playback rate of the Now Playing item.\nlet MPNowPlayingInfoPropertyPlaybackQueueCount: String\nThe total number of items in the app’s playback queue.\nlet MPNowPlayingInfoPropertyPlaybackQueueIndex: String\nThe index of the Now Playing item in the app’s playback queue.\nlet MPNowPlayingInfoPropertyServiceIdentifier: String\nThe service provider associated with the Now Playing item."
  },
  {
    "title": "MPNowPlayingInfoPropertyAdTimeRanges",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpnowplayinginfopropertyadtimeranges",
    "html": "Topics\nAd time ranges\nclass MPAdTimeRange\nAn object that represents a time range where an ad break exists in the current player.\nSee Also\nAccessing Now Playing metadata properties\nlet MPNowPlayingInfoCollectionIdentifier: String\nThe identifier of the collection the Now Playing item belongs to.\nlet MPNowPlayingInfoPropertyAvailableLanguageOptions: String\nThe available language option groups for the Now Playing item.\nlet MPNowPlayingInfoPropertyAssetURL: String\nThe URL pointing to the Now Playing item’s underlying asset.\nlet MPNowPlayingInfoPropertyChapterCount: String\nThe total number of chapters in the Now Playing item.\nlet MPNowPlayingInfoPropertyChapterNumber: String\nThe number corresponding to the currently playing chapter.\nlet MPNowPlayingInfoPropertyCreditsStartTime: String\nThe start time for the credits, in seconds, without ads, for the Now Playing item.\nlet MPNowPlayingInfoPropertyCurrentLanguageOptions: String\nThe currently active language options for the Now Playing item.\nlet MPNowPlayingInfoPropertyCurrentPlaybackDate: String\nThe date associated with the current elapsed playback time.\nlet MPNowPlayingInfoPropertyDefaultPlaybackRate: String\nThe default playback rate for the Now Playing item.\nlet MPNowPlayingInfoPropertyElapsedPlaybackTime: String\nThe elapsed time of the Now Playing item, in seconds.\nlet MPNowPlayingInfoPropertyExternalContentIdentifier: String\nThe opaque identifier that uniquely identifies the Now Playing item, even through app relaunches.\nlet MPNowPlayingInfoPropertyExternalUserProfileIdentifier: String\nThe opaque identifier that uniquely identifies the profile the Now Playing item plays from, even through app relaunches.\nlet MPNowPlayingInfoPropertyIsLiveStream: String\nA number that denotes whether the Now Playing item is a live stream.\nlet MPNowPlayingInfoPropertyMediaType: String\nThe media type of the Now Playing item.\nlet MPNowPlayingInfoPropertyPlaybackProgress: String\nThe current progress of the Now Playing item.\nlet MPNowPlayingInfoPropertyPlaybackRate: String\nThe playback rate of the Now Playing item.\nlet MPNowPlayingInfoPropertyPlaybackQueueCount: String\nThe total number of items in the app’s playback queue.\nlet MPNowPlayingInfoPropertyPlaybackQueueIndex: String\nThe index of the Now Playing item in the app’s playback queue.\nlet MPNowPlayingInfoPropertyServiceIdentifier: String\nThe service provider associated with the Now Playing item."
  },
  {
    "title": "Media playback mode events",
    "url": "https://developer.apple.com/documentation/mediaplayer/media_playback_mode_events",
    "html": "Topics\nResponding to changes to media playback mode events\nclass MPChangePlaybackRateCommand\nAn object that responds to requests to change the playback rate of the playing item.\nclass MPChangePlaybackRateCommandEvent\nAn event requesting a change in the playback rate.\nclass MPChangeLanguageOptionCommandEvent\nAn event requesting a change in the language option.\nclass MPChangeRepeatModeCommand\nAn object that responds to requests to change the current repeat mode used during playback.\nclass MPChangeRepeatModeCommandEvent\nAn event requesting a change in the repeat mode.\nclass MPChangeShuffleModeCommand\nAn object that responds to requests to change the current shuffle mode used during playback.\nclass MPChangeShuffleModeCommandEvent\nAn event requesting a change in the shuffle mode.\nenum MPRepeatType\nIndicates which items to play repeatedly.\nenum MPShuffleType\nIndicates which item types to shuffle.\nSee Also\nExternal player and system event handling\nHandling external player events notifications\nHandle events for external media players.\nRemote command center events\nSet up the remote command center to handle media player events.\nTrack navigation events\nRespond to requests to change which part of a media item plays.\nFeedback and rating events\nRespond to incoming feedback and rating events."
  },
  {
    "title": "representativeItem",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmediaitemcollection/1614439-representativeitem",
    "html": "Discussion\n\nThe media items in a collection typically share common property values, owing to how you built the collection. For example, if you build a collection based on a predicate that uses the MPMediaItemPropertyArtist property, all items in the collection share the same artist name. You can use the representativeItem property to efficiently obtain values for such common properties—often more efficiently than fetching an item from the items array.\n\nSee Also\nUsing a media item collection\nvar items: [MPMediaItem]\nThe media items in a media item collection.\nvar count: Int\nThe number of media items in a collection.\nvar mediaTypes: MPMediaType\nThe types of the media items in a collection."
  },
  {
    "title": "MPNowPlayingInfoPropertyChapterCount",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpnowplayinginfopropertychaptercount",
    "html": "Discussion\n\nValue is an NSNumber object configured as an NSUInteger.\n\nSee Also\nAccessing Now Playing metadata properties\nlet MPNowPlayingInfoCollectionIdentifier: String\nThe identifier of the collection the Now Playing item belongs to.\nlet MPNowPlayingInfoPropertyAdTimeRanges: String\nA list of ad breaks in the Now Playing item.\nlet MPNowPlayingInfoPropertyAvailableLanguageOptions: String\nThe available language option groups for the Now Playing item.\nlet MPNowPlayingInfoPropertyAssetURL: String\nThe URL pointing to the Now Playing item’s underlying asset.\nlet MPNowPlayingInfoPropertyChapterNumber: String\nThe number corresponding to the currently playing chapter.\nlet MPNowPlayingInfoPropertyCreditsStartTime: String\nThe start time for the credits, in seconds, without ads, for the Now Playing item.\nlet MPNowPlayingInfoPropertyCurrentLanguageOptions: String\nThe currently active language options for the Now Playing item.\nlet MPNowPlayingInfoPropertyCurrentPlaybackDate: String\nThe date associated with the current elapsed playback time.\nlet MPNowPlayingInfoPropertyDefaultPlaybackRate: String\nThe default playback rate for the Now Playing item.\nlet MPNowPlayingInfoPropertyElapsedPlaybackTime: String\nThe elapsed time of the Now Playing item, in seconds.\nlet MPNowPlayingInfoPropertyExternalContentIdentifier: String\nThe opaque identifier that uniquely identifies the Now Playing item, even through app relaunches.\nlet MPNowPlayingInfoPropertyExternalUserProfileIdentifier: String\nThe opaque identifier that uniquely identifies the profile the Now Playing item plays from, even through app relaunches.\nlet MPNowPlayingInfoPropertyIsLiveStream: String\nA number that denotes whether the Now Playing item is a live stream.\nlet MPNowPlayingInfoPropertyMediaType: String\nThe media type of the Now Playing item.\nlet MPNowPlayingInfoPropertyPlaybackProgress: String\nThe current progress of the Now Playing item.\nlet MPNowPlayingInfoPropertyPlaybackRate: String\nThe playback rate of the Now Playing item.\nlet MPNowPlayingInfoPropertyPlaybackQueueCount: String\nThe total number of items in the app’s playback queue.\nlet MPNowPlayingInfoPropertyPlaybackQueueIndex: String\nThe index of the Now Playing item in the app’s playback queue.\nlet MPNowPlayingInfoPropertyServiceIdentifier: String\nThe service provider associated with the Now Playing item."
  },
  {
    "title": "MPNowPlayingInfoPropertyExternalContentIdentifier",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpnowplayinginfopropertyexternalcontentidentifier",
    "html": "Discussion\n\nThis is only used to reference the item to the Now Playing app and can be in any format.\n\nSee Also\nAccessing Now Playing metadata properties\nlet MPNowPlayingInfoCollectionIdentifier: String\nThe identifier of the collection the Now Playing item belongs to.\nlet MPNowPlayingInfoPropertyAdTimeRanges: String\nA list of ad breaks in the Now Playing item.\nlet MPNowPlayingInfoPropertyAvailableLanguageOptions: String\nThe available language option groups for the Now Playing item.\nlet MPNowPlayingInfoPropertyAssetURL: String\nThe URL pointing to the Now Playing item’s underlying asset.\nlet MPNowPlayingInfoPropertyChapterCount: String\nThe total number of chapters in the Now Playing item.\nlet MPNowPlayingInfoPropertyChapterNumber: String\nThe number corresponding to the currently playing chapter.\nlet MPNowPlayingInfoPropertyCreditsStartTime: String\nThe start time for the credits, in seconds, without ads, for the Now Playing item.\nlet MPNowPlayingInfoPropertyCurrentLanguageOptions: String\nThe currently active language options for the Now Playing item.\nlet MPNowPlayingInfoPropertyCurrentPlaybackDate: String\nThe date associated with the current elapsed playback time.\nlet MPNowPlayingInfoPropertyDefaultPlaybackRate: String\nThe default playback rate for the Now Playing item.\nlet MPNowPlayingInfoPropertyElapsedPlaybackTime: String\nThe elapsed time of the Now Playing item, in seconds.\nlet MPNowPlayingInfoPropertyExternalUserProfileIdentifier: String\nThe opaque identifier that uniquely identifies the profile the Now Playing item plays from, even through app relaunches.\nlet MPNowPlayingInfoPropertyIsLiveStream: String\nA number that denotes whether the Now Playing item is a live stream.\nlet MPNowPlayingInfoPropertyMediaType: String\nThe media type of the Now Playing item.\nlet MPNowPlayingInfoPropertyPlaybackProgress: String\nThe current progress of the Now Playing item.\nlet MPNowPlayingInfoPropertyPlaybackRate: String\nThe playback rate of the Now Playing item.\nlet MPNowPlayingInfoPropertyPlaybackQueueCount: String\nThe total number of items in the app’s playback queue.\nlet MPNowPlayingInfoPropertyPlaybackQueueIndex: String\nThe index of the Now Playing item in the app’s playback queue.\nlet MPNowPlayingInfoPropertyServiceIdentifier: String\nThe service provider associated with the Now Playing item."
  },
  {
    "title": "MPNowPlayingInfoPropertyIsLiveStream",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpnowplayinginfopropertyislivestream",
    "html": "Discussion\n\nValue is an NSNumber object configured as a boolean. A value of 1.0 indicates the now playing item is a live stream.\n\nSee Also\nAccessing Now Playing metadata properties\nlet MPNowPlayingInfoCollectionIdentifier: String\nThe identifier of the collection the Now Playing item belongs to.\nlet MPNowPlayingInfoPropertyAdTimeRanges: String\nA list of ad breaks in the Now Playing item.\nlet MPNowPlayingInfoPropertyAvailableLanguageOptions: String\nThe available language option groups for the Now Playing item.\nlet MPNowPlayingInfoPropertyAssetURL: String\nThe URL pointing to the Now Playing item’s underlying asset.\nlet MPNowPlayingInfoPropertyChapterCount: String\nThe total number of chapters in the Now Playing item.\nlet MPNowPlayingInfoPropertyChapterNumber: String\nThe number corresponding to the currently playing chapter.\nlet MPNowPlayingInfoPropertyCreditsStartTime: String\nThe start time for the credits, in seconds, without ads, for the Now Playing item.\nlet MPNowPlayingInfoPropertyCurrentLanguageOptions: String\nThe currently active language options for the Now Playing item.\nlet MPNowPlayingInfoPropertyCurrentPlaybackDate: String\nThe date associated with the current elapsed playback time.\nlet MPNowPlayingInfoPropertyDefaultPlaybackRate: String\nThe default playback rate for the Now Playing item.\nlet MPNowPlayingInfoPropertyElapsedPlaybackTime: String\nThe elapsed time of the Now Playing item, in seconds.\nlet MPNowPlayingInfoPropertyExternalContentIdentifier: String\nThe opaque identifier that uniquely identifies the Now Playing item, even through app relaunches.\nlet MPNowPlayingInfoPropertyExternalUserProfileIdentifier: String\nThe opaque identifier that uniquely identifies the profile the Now Playing item plays from, even through app relaunches.\nlet MPNowPlayingInfoPropertyMediaType: String\nThe media type of the Now Playing item.\nlet MPNowPlayingInfoPropertyPlaybackProgress: String\nThe current progress of the Now Playing item.\nlet MPNowPlayingInfoPropertyPlaybackRate: String\nThe playback rate of the Now Playing item.\nlet MPNowPlayingInfoPropertyPlaybackQueueCount: String\nThe total number of items in the app’s playback queue.\nlet MPNowPlayingInfoPropertyPlaybackQueueIndex: String\nThe index of the Now Playing item in the app’s playback queue.\nlet MPNowPlayingInfoPropertyServiceIdentifier: String\nThe service provider associated with the Now Playing item."
  },
  {
    "title": "MPNowPlayingInfoPropertyMediaType",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpnowplayinginfopropertymediatype",
    "html": "Discussion\n\nValue is an NSNumber object configured as a MPNowPlayingInfoMediaType.\n\nSee Also\nAccessing Now Playing metadata properties\nlet MPNowPlayingInfoCollectionIdentifier: String\nThe identifier of the collection the Now Playing item belongs to.\nlet MPNowPlayingInfoPropertyAdTimeRanges: String\nA list of ad breaks in the Now Playing item.\nlet MPNowPlayingInfoPropertyAvailableLanguageOptions: String\nThe available language option groups for the Now Playing item.\nlet MPNowPlayingInfoPropertyAssetURL: String\nThe URL pointing to the Now Playing item’s underlying asset.\nlet MPNowPlayingInfoPropertyChapterCount: String\nThe total number of chapters in the Now Playing item.\nlet MPNowPlayingInfoPropertyChapterNumber: String\nThe number corresponding to the currently playing chapter.\nlet MPNowPlayingInfoPropertyCreditsStartTime: String\nThe start time for the credits, in seconds, without ads, for the Now Playing item.\nlet MPNowPlayingInfoPropertyCurrentLanguageOptions: String\nThe currently active language options for the Now Playing item.\nlet MPNowPlayingInfoPropertyCurrentPlaybackDate: String\nThe date associated with the current elapsed playback time.\nlet MPNowPlayingInfoPropertyDefaultPlaybackRate: String\nThe default playback rate for the Now Playing item.\nlet MPNowPlayingInfoPropertyElapsedPlaybackTime: String\nThe elapsed time of the Now Playing item, in seconds.\nlet MPNowPlayingInfoPropertyExternalContentIdentifier: String\nThe opaque identifier that uniquely identifies the Now Playing item, even through app relaunches.\nlet MPNowPlayingInfoPropertyExternalUserProfileIdentifier: String\nThe opaque identifier that uniquely identifies the profile the Now Playing item plays from, even through app relaunches.\nlet MPNowPlayingInfoPropertyIsLiveStream: String\nA number that denotes whether the Now Playing item is a live stream.\nlet MPNowPlayingInfoPropertyPlaybackProgress: String\nThe current progress of the Now Playing item.\nlet MPNowPlayingInfoPropertyPlaybackRate: String\nThe playback rate of the Now Playing item.\nlet MPNowPlayingInfoPropertyPlaybackQueueCount: String\nThe total number of items in the app’s playback queue.\nlet MPNowPlayingInfoPropertyPlaybackQueueIndex: String\nThe index of the Now Playing item in the app’s playback queue.\nlet MPNowPlayingInfoPropertyServiceIdentifier: String\nThe service provider associated with the Now Playing item."
  },
  {
    "title": "MPNowPlayingInfoPropertyPlaybackQueueCount",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpnowplayinginfopropertyplaybackqueuecount",
    "html": "Discussion\n\nValue is an NSNumber object configured as an NSUInteger.\n\nSee Also\nAccessing Now Playing metadata properties\nlet MPNowPlayingInfoCollectionIdentifier: String\nThe identifier of the collection the Now Playing item belongs to.\nlet MPNowPlayingInfoPropertyAdTimeRanges: String\nA list of ad breaks in the Now Playing item.\nlet MPNowPlayingInfoPropertyAvailableLanguageOptions: String\nThe available language option groups for the Now Playing item.\nlet MPNowPlayingInfoPropertyAssetURL: String\nThe URL pointing to the Now Playing item’s underlying asset.\nlet MPNowPlayingInfoPropertyChapterCount: String\nThe total number of chapters in the Now Playing item.\nlet MPNowPlayingInfoPropertyChapterNumber: String\nThe number corresponding to the currently playing chapter.\nlet MPNowPlayingInfoPropertyCreditsStartTime: String\nThe start time for the credits, in seconds, without ads, for the Now Playing item.\nlet MPNowPlayingInfoPropertyCurrentLanguageOptions: String\nThe currently active language options for the Now Playing item.\nlet MPNowPlayingInfoPropertyCurrentPlaybackDate: String\nThe date associated with the current elapsed playback time.\nlet MPNowPlayingInfoPropertyDefaultPlaybackRate: String\nThe default playback rate for the Now Playing item.\nlet MPNowPlayingInfoPropertyElapsedPlaybackTime: String\nThe elapsed time of the Now Playing item, in seconds.\nlet MPNowPlayingInfoPropertyExternalContentIdentifier: String\nThe opaque identifier that uniquely identifies the Now Playing item, even through app relaunches.\nlet MPNowPlayingInfoPropertyExternalUserProfileIdentifier: String\nThe opaque identifier that uniquely identifies the profile the Now Playing item plays from, even through app relaunches.\nlet MPNowPlayingInfoPropertyIsLiveStream: String\nA number that denotes whether the Now Playing item is a live stream.\nlet MPNowPlayingInfoPropertyMediaType: String\nThe media type of the Now Playing item.\nlet MPNowPlayingInfoPropertyPlaybackProgress: String\nThe current progress of the Now Playing item.\nlet MPNowPlayingInfoPropertyPlaybackRate: String\nThe playback rate of the Now Playing item.\nlet MPNowPlayingInfoPropertyPlaybackQueueIndex: String\nThe index of the Now Playing item in the app’s playback queue.\nlet MPNowPlayingInfoPropertyServiceIdentifier: String\nThe service provider associated with the Now Playing item."
  },
  {
    "title": "addItem(withProductID:completionHandler:)",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmedialibrary/1621278-additem",
    "html": "Parameters\nproductID\n\nThe product identifier for the media item to add.\n\ncompletionHandler\n\nA block that the system calls after it plays the media item.\n\nentities\n\nAn array containing the media items added to the user’s music library.\n\nerror\n\nIf an error occurred, this parameter holds the error object that explains the error. Otherwise, the value of this parameter is nil.\n\nDiscussion\n\nConcurrency Note\n\nYou can call this method from synchronous code using a completion handler, as shown on this page, or you can call it as an asynchronous method that has the following declaration:\n\nfunc addItem(withProductID productID: String) async throws -> [MPMediaEntity]\n\n\nFor information about concurrency and asynchronous code in Swift, see Calling Objective-C APIs Asynchronously.\n\nUse this method to add media items to a user’s music library. Use the Apple Music API Reference to search for content contained in the iTunes, App, Book, and Mac App stores.\n\nNote\n\nThis method only works for 64-bit apps."
  },
  {
    "title": "MPNowPlayingInfoPropertyPlaybackQueueIndex",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpnowplayinginfopropertyplaybackqueueindex",
    "html": "Discussion\n\nValue is an NSNumber object configured as an NSUInteger. The playback queue uses zero-based indexing. For example, to display first item in the queue as “item 1 of 10,” set the item’s index to 0.\n\nSee Also\nAccessing Now Playing metadata properties\nlet MPNowPlayingInfoCollectionIdentifier: String\nThe identifier of the collection the Now Playing item belongs to.\nlet MPNowPlayingInfoPropertyAdTimeRanges: String\nA list of ad breaks in the Now Playing item.\nlet MPNowPlayingInfoPropertyAvailableLanguageOptions: String\nThe available language option groups for the Now Playing item.\nlet MPNowPlayingInfoPropertyAssetURL: String\nThe URL pointing to the Now Playing item’s underlying asset.\nlet MPNowPlayingInfoPropertyChapterCount: String\nThe total number of chapters in the Now Playing item.\nlet MPNowPlayingInfoPropertyChapterNumber: String\nThe number corresponding to the currently playing chapter.\nlet MPNowPlayingInfoPropertyCreditsStartTime: String\nThe start time for the credits, in seconds, without ads, for the Now Playing item.\nlet MPNowPlayingInfoPropertyCurrentLanguageOptions: String\nThe currently active language options for the Now Playing item.\nlet MPNowPlayingInfoPropertyCurrentPlaybackDate: String\nThe date associated with the current elapsed playback time.\nlet MPNowPlayingInfoPropertyDefaultPlaybackRate: String\nThe default playback rate for the Now Playing item.\nlet MPNowPlayingInfoPropertyElapsedPlaybackTime: String\nThe elapsed time of the Now Playing item, in seconds.\nlet MPNowPlayingInfoPropertyExternalContentIdentifier: String\nThe opaque identifier that uniquely identifies the Now Playing item, even through app relaunches.\nlet MPNowPlayingInfoPropertyExternalUserProfileIdentifier: String\nThe opaque identifier that uniquely identifies the profile the Now Playing item plays from, even through app relaunches.\nlet MPNowPlayingInfoPropertyIsLiveStream: String\nA number that denotes whether the Now Playing item is a live stream.\nlet MPNowPlayingInfoPropertyMediaType: String\nThe media type of the Now Playing item.\nlet MPNowPlayingInfoPropertyPlaybackProgress: String\nThe current progress of the Now Playing item.\nlet MPNowPlayingInfoPropertyPlaybackRate: String\nThe playback rate of the Now Playing item.\nlet MPNowPlayingInfoPropertyPlaybackQueueCount: String\nThe total number of items in the app’s playback queue.\nlet MPNowPlayingInfoPropertyServiceIdentifier: String\nThe service provider associated with the Now Playing item."
  },
  {
    "title": "title",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmediaitem/1621713-title",
    "html": "See Also\nMedia item properties\nvar albumArtist: String?\nThe primary performing artist for an album.\nvar albumArtistPersistentID: MPMediaEntityPersistentID\nThe persistent identifier for the primary performing artist for an album.\nvar albumPersistentID: MPMediaEntityPersistentID\nThe persistent identifier for an album.\nvar albumTitle: String?\nThe title of an album, such as Live on Mars, rather than the title of an individual song on the album, such as “Crater Dance.”\nvar albumTrackCount: Int\nThe number of tracks for the album that contains the media item.\nvar albumTrackNumber: Int\nThe track number of the media item, for a media item that’s part of an album.\nvar artist: String?\nThe performing artists for a media item, which may vary from the primary artist for the album that a media item belongs to.\nvar artistPersistentID: MPMediaEntityPersistentID\nThe persistent identifier for an artist.\nvar artwork: MPMediaItemArtwork?\nThe artwork image for the media item.\nvar assetURL: URL?\nThe URL that points to the media item.\nvar beatsPerMinute: Int\nThe number of musical beats per minute for the media item.\nvar bookmarkTime: TimeInterval\nThe time of the user’s most recent interaction with the bookmark in the media item.\nvar isCloudItem: Bool\nA Boolean value that indicates whether the media item is an iCloud Music Library item.\nvar comments: String?\nTextual information about the media item.\nvar isCompilation: Bool\nA Boolean value that indicates whether the media item is part of a compilation.\nvar isPreorder: Bool\nA Boolean value that indicates whether the media item is a preorder.\nvar composer: String?\nThe musical composer for the media item.\nvar composerPersistentID: MPMediaEntityPersistentID\nThe persistent identifier for a composer.\nvar dateAdded: Date\nThe date the user adds the media item to the library.\nvar discCount: Int\nThe number of discs for the album that contains the media item.\nvar discNumber: Int\nThe disc number of the media item, for a media item that’s part of a multidisc album.\nvar isExplicitItem: Bool\nA Boolean value that indicates whether the media item has explicit (adult) lyrics or language.\nvar genre: String?\nThe music or film genre of the media item.\nvar genrePersistentID: MPMediaEntityPersistentID\nThe persistent identifier for a genre.\nvar lastPlayedDate: Date?\nThe most recent play date of the media item.\nvar lyrics: String?\nThe lyrics for the media item.\nvar mediaType: MPMediaType\nThe media type of the media item.\nvar persistentID: MPMediaEntityPersistentID\nThe persistent identifier for the media item.\nvar playCount: Int\nThe number of times the user plays the media item.\nvar playbackDuration: TimeInterval\nThe playback duration of the media item.\nvar playbackStoreID: String\nThe ID of a media item from the Apple Music catalog.\nvar podcastPersistentID: MPMediaEntityPersistentID\nThe persistent identifier for an audio podcast.\nvar podcastTitle: String?\nThe title of a podcast, such as This Martian Drudgery, rather than the title of an individual episode of a podcast, such as “Episode 12: Another Cold Day at the Pole.”\nvar hasProtectedAsset: Bool\nA Boolean value that indicates whether the media item has a protected asset.\nvar rating: Int\nThe user-specified rating of the media item.\nvar releaseDate: Date?\nThe date of the media item’s first public release.\nvar skipCount: Int\nThe number of times the user skips playing the media item.\nvar userGrouping: String?\nGrouping information for the media item."
  },
  {
    "title": "userGrouping",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmediaitem/1621716-usergrouping",
    "html": "Discussion\n\nCorresponds to the “Grouping” field in the Info tab in the Get Info dialog in iTunes.\n\nSee Also\nMedia item properties\nvar albumArtist: String?\nThe primary performing artist for an album.\nvar albumArtistPersistentID: MPMediaEntityPersistentID\nThe persistent identifier for the primary performing artist for an album.\nvar albumPersistentID: MPMediaEntityPersistentID\nThe persistent identifier for an album.\nvar albumTitle: String?\nThe title of an album, such as Live on Mars, rather than the title of an individual song on the album, such as “Crater Dance.”\nvar albumTrackCount: Int\nThe number of tracks for the album that contains the media item.\nvar albumTrackNumber: Int\nThe track number of the media item, for a media item that’s part of an album.\nvar artist: String?\nThe performing artists for a media item, which may vary from the primary artist for the album that a media item belongs to.\nvar artistPersistentID: MPMediaEntityPersistentID\nThe persistent identifier for an artist.\nvar artwork: MPMediaItemArtwork?\nThe artwork image for the media item.\nvar assetURL: URL?\nThe URL that points to the media item.\nvar beatsPerMinute: Int\nThe number of musical beats per minute for the media item.\nvar bookmarkTime: TimeInterval\nThe time of the user’s most recent interaction with the bookmark in the media item.\nvar isCloudItem: Bool\nA Boolean value that indicates whether the media item is an iCloud Music Library item.\nvar comments: String?\nTextual information about the media item.\nvar isCompilation: Bool\nA Boolean value that indicates whether the media item is part of a compilation.\nvar isPreorder: Bool\nA Boolean value that indicates whether the media item is a preorder.\nvar composer: String?\nThe musical composer for the media item.\nvar composerPersistentID: MPMediaEntityPersistentID\nThe persistent identifier for a composer.\nvar dateAdded: Date\nThe date the user adds the media item to the library.\nvar discCount: Int\nThe number of discs for the album that contains the media item.\nvar discNumber: Int\nThe disc number of the media item, for a media item that’s part of a multidisc album.\nvar isExplicitItem: Bool\nA Boolean value that indicates whether the media item has explicit (adult) lyrics or language.\nvar genre: String?\nThe music or film genre of the media item.\nvar genrePersistentID: MPMediaEntityPersistentID\nThe persistent identifier for a genre.\nvar lastPlayedDate: Date?\nThe most recent play date of the media item.\nvar lyrics: String?\nThe lyrics for the media item.\nvar mediaType: MPMediaType\nThe media type of the media item.\nvar persistentID: MPMediaEntityPersistentID\nThe persistent identifier for the media item.\nvar playCount: Int\nThe number of times the user plays the media item.\nvar playbackDuration: TimeInterval\nThe playback duration of the media item.\nvar playbackStoreID: String\nThe ID of a media item from the Apple Music catalog.\nvar podcastPersistentID: MPMediaEntityPersistentID\nThe persistent identifier for an audio podcast.\nvar podcastTitle: String?\nThe title of a podcast, such as This Martian Drudgery, rather than the title of an individual episode of a podcast, such as “Episode 12: Another Cold Day at the Pole.”\nvar hasProtectedAsset: Bool\nA Boolean value that indicates whether the media item has a protected asset.\nvar rating: Int\nThe user-specified rating of the media item.\nvar releaseDate: Date?\nThe date of the media item’s first public release.\nvar skipCount: Int\nThe number of times the user skips playing the media item.\nvar title: String?\nThe title or name of the media item."
  },
  {
    "title": "podcastPersistentID",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmediaitem/1621695-podcastpersistentid",
    "html": "See Also\nMedia item properties\nvar albumArtist: String?\nThe primary performing artist for an album.\nvar albumArtistPersistentID: MPMediaEntityPersistentID\nThe persistent identifier for the primary performing artist for an album.\nvar albumPersistentID: MPMediaEntityPersistentID\nThe persistent identifier for an album.\nvar albumTitle: String?\nThe title of an album, such as Live on Mars, rather than the title of an individual song on the album, such as “Crater Dance.”\nvar albumTrackCount: Int\nThe number of tracks for the album that contains the media item.\nvar albumTrackNumber: Int\nThe track number of the media item, for a media item that’s part of an album.\nvar artist: String?\nThe performing artists for a media item, which may vary from the primary artist for the album that a media item belongs to.\nvar artistPersistentID: MPMediaEntityPersistentID\nThe persistent identifier for an artist.\nvar artwork: MPMediaItemArtwork?\nThe artwork image for the media item.\nvar assetURL: URL?\nThe URL that points to the media item.\nvar beatsPerMinute: Int\nThe number of musical beats per minute for the media item.\nvar bookmarkTime: TimeInterval\nThe time of the user’s most recent interaction with the bookmark in the media item.\nvar isCloudItem: Bool\nA Boolean value that indicates whether the media item is an iCloud Music Library item.\nvar comments: String?\nTextual information about the media item.\nvar isCompilation: Bool\nA Boolean value that indicates whether the media item is part of a compilation.\nvar isPreorder: Bool\nA Boolean value that indicates whether the media item is a preorder.\nvar composer: String?\nThe musical composer for the media item.\nvar composerPersistentID: MPMediaEntityPersistentID\nThe persistent identifier for a composer.\nvar dateAdded: Date\nThe date the user adds the media item to the library.\nvar discCount: Int\nThe number of discs for the album that contains the media item.\nvar discNumber: Int\nThe disc number of the media item, for a media item that’s part of a multidisc album.\nvar isExplicitItem: Bool\nA Boolean value that indicates whether the media item has explicit (adult) lyrics or language.\nvar genre: String?\nThe music or film genre of the media item.\nvar genrePersistentID: MPMediaEntityPersistentID\nThe persistent identifier for a genre.\nvar lastPlayedDate: Date?\nThe most recent play date of the media item.\nvar lyrics: String?\nThe lyrics for the media item.\nvar mediaType: MPMediaType\nThe media type of the media item.\nvar persistentID: MPMediaEntityPersistentID\nThe persistent identifier for the media item.\nvar playCount: Int\nThe number of times the user plays the media item.\nvar playbackDuration: TimeInterval\nThe playback duration of the media item.\nvar playbackStoreID: String\nThe ID of a media item from the Apple Music catalog.\nvar podcastTitle: String?\nThe title of a podcast, such as This Martian Drudgery, rather than the title of an individual episode of a podcast, such as “Episode 12: Another Cold Day at the Pole.”\nvar hasProtectedAsset: Bool\nA Boolean value that indicates whether the media item has a protected asset.\nvar rating: Int\nThe user-specified rating of the media item.\nvar releaseDate: Date?\nThe date of the media item’s first public release.\nvar skipCount: Int\nThe number of times the user skips playing the media item.\nvar title: String?\nThe title or name of the media item.\nvar userGrouping: String?\nGrouping information for the media item."
  },
  {
    "title": "User-defined property keys",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmediaitem/user-defined_property_keys",
    "html": "Overview\n\nObtain user-defined metadata for a media item by calling the value(forProperty:) method with these property keys. Don’t use user-defined properties to build media property predicates.\n\nTopics\nUser-defined property keys\nlet MPMediaItemPropertySkipCount: String\nThe number of times the user has skipped playing the item.\nlet MPMediaItemPropertyRating: String\nThe user-specified rating of the object in the range [0...5], where a value of 5 indicates the most favorable rating.\nlet MPMediaItemPropertyLastPlayedDate: String\nThe most recent calendar date on which the user played the media item.\nlet MPMediaItemPropertyUserGrouping: String\nCorresponds to the “Grouping” field in the Info tab in the Get Info dialog in iTunes.\nlet MPMediaItemPropertyBookmarkTime: String\nThe user’s place in the media item the most recent time it was played.\nlet MPMediaItemPropertyDateAdded: String\nThe date the media item was added to the user's Media library.\nSee Also\nMedia item types and keys\nstruct MPMediaType\nThe properties for defining the type for a media item.\nGeneral media item property keys\nSystem-defined properties for obtaining the metadata for a media item."
  },
  {
    "title": "Language option characteristic constants",
    "url": "https://developer.apple.com/documentation/mediaplayer/language_option_characteristic_constants",
    "html": "Topics\nLanguage option characteristic constants\nlet MPLanguageOptionCharacteristicContainsOnlyForcedSubtitles: String\nIndicates that the language option presents only forced subtitles.\nlet MPLanguageOptionCharacteristicDescribesMusicAndSound: String\nIndicates that the language option includes legible content in the language of its specified locale that describes music and sound effects occurring in program audio.\nlet MPLanguageOptionCharacteristicDescribesVideo: String\nIndicates that the language option includes audible content that describes the visual portion of the presentation.\nlet MPLanguageOptionCharacteristicDubbedTranslation: String\nIndicates that the language option includes content that contains a dubbed translation.\nlet MPLanguageOptionCharacteristicEasyToRead: String\nIndicates that the language option provides legible content in the language of its specified locale and that the content was edited for ease of reading.\nlet MPLanguageOptionCharacteristicIsAuxiliaryContent: String\nIndicates that the language option includes content that’s marked by the content author as auxiliary to the presentation of the language option.\nlet MPLanguageOptionCharacteristicIsMainProgramContent: String\nIndicates that the language option includes content that’s marked by the content author as intrinsic to the presentation of the language option.\nlet MPLanguageOptionCharacteristicLanguageTranslation: String\nIndicates that the language option contains a translation in the language of its specified locale.\nlet MPLanguageOptionCharacteristicTranscribesSpokenDialog: String\nIndicates that the language option includes legible content in the language of its specified locale that transcribes spoken dialog.\nlet MPLanguageOptionCharacteristicVoiceOverTranslation: String\nIndicates that the language option includes voice over content in the language of its specified locale describes translated dialog.\nSee Also\nNow Playing information\nBecoming a now playable app\nEnsure your app is eligible to become the Now Playing app by adopting best practices for providing Now Playing info and registering for remote command center actions.\nclass MPNowPlayingSession\nAn object that manages Now Playing information and remote commands for multiple players.\nclass MPNowPlayingInfoCenter\nAn object for setting the Now Playing information for media that your app plays.\nclass MPNowPlayingInfoLanguageOption\nA set of interfaces for setting the language option for the Now Playing item.\nclass MPNowPlayingInfoLanguageOptionGroup\nA grouped set of language options where only a single language option can be active at a time."
  },
  {
    "title": "persistentIDProperty(forGroupingType:)",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmediaitem/1621805-persistentidproperty",
    "html": "Parameters\ngroupingType\n\nThe grouping type that you want the persistent identifier key for.\n\nReturn Value\n\nThe identifier for the group type.\n\nDiscussion\n\nUse this convenience method to obtain the key for a specific persistent identifier based on a grouping type. You can use that key, in turn, to obtain the value of a specific persistent ID of a media item, such as album title or artist name. Using this method simplifies such tasks as drilling down from an artist, to albums by that artist, to a specific album.\n\nFor example, the following statement returns the persistent identifier key for the album grouping type:\n\nlet albumIDKey = [MPMediaItem.persistentIDProperty(forGroupingType: MPMediaGrouping.album)]\n\n\nYou could then obtain the specific persistent ID that you want by using the value(forProperty:) method. MPMediaGrouping describes grouping keys.\n\nSee Also\nObtaining group properties\nclass func titleProperty(forGroupingType: MPMediaGrouping) -> String\nObtains the title key for a specified grouping type."
  },
  {
    "title": "MPNowPlayingInfoLanguageOption",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpnowplayinginfolanguageoption",
    "html": "Overview\n\nThe MPNowPlayingInfoLanguageOption and MPNowPlayingInfoLanguageOptionGroup classes provide interfaces for setting information about language options, for example, audio and subtitles, in the Now Playing information area.\n\nTopics\nCreating a new language option\ninit(type: MPNowPlayingInfoLanguageOptionType, languageTag: String, characteristics: [String]?, displayName: String, identifier: String)\nCreates a single language option.\nRetrieving language option properties\nvar displayName: String?\nThe display name for a language option.\nvar identifier: String?\nThe unique identifier for the language option.\nvar languageOptionCharacteristics: [String]?\nThe characteristics that describe the content of the language option.\nvar languageTag: String?\nThe abbreviated language code for the language option.\nvar languageOptionType: MPNowPlayingInfoLanguageOptionType\nThe type of language option.\nenum MPNowPlayingInfoLanguageOptionType\nThe language option type to use for the Now Playing item.\nRetrieving a language option based on system preferences\nfunc isAutomaticAudibleLanguageOption() -> Bool\nReturns a Boolean value that determines whether to use the best audible language option based on the system preferences.\nfunc isAutomaticLegibleLanguageOption() -> Bool\nReturns a Boolean value that determines whether to use the best legible language option based on the system preferences.\nRelationships\nInherits From\nNSObject\nSee Also\nNow Playing information\nBecoming a now playable app\nEnsure your app is eligible to become the Now Playing app by adopting best practices for providing Now Playing info and registering for remote command center actions.\nclass MPNowPlayingSession\nAn object that manages Now Playing information and remote commands for multiple players.\nclass MPNowPlayingInfoCenter\nAn object for setting the Now Playing information for media that your app plays.\nclass MPNowPlayingInfoLanguageOptionGroup\nA grouped set of language options where only a single language option can be active at a time.\nLanguage option characteristic constants\nThe constants for defining language characteristics."
  },
  {
    "title": "titleProperty(forGroupingType:)",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmediaitem/1621775-titleproperty",
    "html": "Parameters\ngroupingType\n\nThe grouping type that you want the title key for.\n\nReturn Value\n\nThe title key for the group type.\n\nDiscussion\n\nUse this convenience method to obtain the key for the title that corresponds to a specified grouping type. For example, the following statement obtains the title key for the album grouping type:\n\nlet titleIDKey = [MPMediaItem.persistentIDProperty(forGroupingType: MPMediaGrouping.album)]\n\n\nYou could then obtain the specific title that you want by using the value(forProperty:) method. MPMediaGrouping describes grouping keys.\n\nSee Also\nObtaining group properties\nclass func persistentIDProperty(forGroupingType: MPMediaGrouping) -> String\nObtains the persistent identifier key for a specified grouping type."
  },
  {
    "title": "MPMediaEntity",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmediaentity",
    "html": "Overview\n\nThis is the superclass for MPMediaItem and MPMediaItemCollection instances, and in turn for MPMediaPlaylist instances.\n\nTopics\nWorking with media properties\nclass func canFilter(byProperty: String) -> Bool\nIndicates whether you can use the media property key that you specify to construct a media property predicate.\nfunc enumerateValues(forProperties: Set<String>, using: (String, Any, UnsafeMutablePointer<ObjCBool>) -> Void)\nExecutes a provided block with the fetched values for the given item properties.\nvar persistentID: MPMediaEntityPersistentID\nThe persistent identifier for a media entity.\nsubscript(Any) -> Any?\nReturns the object specified by the key.\nfunc value(forProperty: String) -> Any?\nRetrieves the value for a specified media property key.\ntypealias MPMediaEntityPersistentID\nDefines the type for storing a persistent identifier to a particular entity.\nMedia entity property keys\nMedia entity property keys\nThe property keys used to retrieve metadata for media entities.\nRelationships\nInherits From\nNSObject\nConforms To\nNSSecureCoding\nSee Also\nMedia items and playlists\nclass MPMediaItem\nA collection of properties that represents a single item in the media library.\nclass MPMediaItemArtwork\nA graphical image, such as music album cover art, associated with a media item.\nclass MPMediaItemCollection\nA sorted set of media items from the media library.\nclass MPMediaPlaylist\nA playable collection of related media items.\nclass MPMediaPlaylistCreationMetadata\nA set of attributes for describing a playlist when creating it."
  },
  {
    "title": "albumArtist",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmediaitem/1621734-albumartist",
    "html": "See Also\nMedia item properties\nvar albumArtistPersistentID: MPMediaEntityPersistentID\nThe persistent identifier for the primary performing artist for an album.\nvar albumPersistentID: MPMediaEntityPersistentID\nThe persistent identifier for an album.\nvar albumTitle: String?\nThe title of an album, such as Live on Mars, rather than the title of an individual song on the album, such as “Crater Dance.”\nvar albumTrackCount: Int\nThe number of tracks for the album that contains the media item.\nvar albumTrackNumber: Int\nThe track number of the media item, for a media item that’s part of an album.\nvar artist: String?\nThe performing artists for a media item, which may vary from the primary artist for the album that a media item belongs to.\nvar artistPersistentID: MPMediaEntityPersistentID\nThe persistent identifier for an artist.\nvar artwork: MPMediaItemArtwork?\nThe artwork image for the media item.\nvar assetURL: URL?\nThe URL that points to the media item.\nvar beatsPerMinute: Int\nThe number of musical beats per minute for the media item.\nvar bookmarkTime: TimeInterval\nThe time of the user’s most recent interaction with the bookmark in the media item.\nvar isCloudItem: Bool\nA Boolean value that indicates whether the media item is an iCloud Music Library item.\nvar comments: String?\nTextual information about the media item.\nvar isCompilation: Bool\nA Boolean value that indicates whether the media item is part of a compilation.\nvar isPreorder: Bool\nA Boolean value that indicates whether the media item is a preorder.\nvar composer: String?\nThe musical composer for the media item.\nvar composerPersistentID: MPMediaEntityPersistentID\nThe persistent identifier for a composer.\nvar dateAdded: Date\nThe date the user adds the media item to the library.\nvar discCount: Int\nThe number of discs for the album that contains the media item.\nvar discNumber: Int\nThe disc number of the media item, for a media item that’s part of a multidisc album.\nvar isExplicitItem: Bool\nA Boolean value that indicates whether the media item has explicit (adult) lyrics or language.\nvar genre: String?\nThe music or film genre of the media item.\nvar genrePersistentID: MPMediaEntityPersistentID\nThe persistent identifier for a genre.\nvar lastPlayedDate: Date?\nThe most recent play date of the media item.\nvar lyrics: String?\nThe lyrics for the media item.\nvar mediaType: MPMediaType\nThe media type of the media item.\nvar persistentID: MPMediaEntityPersistentID\nThe persistent identifier for the media item.\nvar playCount: Int\nThe number of times the user plays the media item.\nvar playbackDuration: TimeInterval\nThe playback duration of the media item.\nvar playbackStoreID: String\nThe ID of a media item from the Apple Music catalog.\nvar podcastPersistentID: MPMediaEntityPersistentID\nThe persistent identifier for an audio podcast.\nvar podcastTitle: String?\nThe title of a podcast, such as This Martian Drudgery, rather than the title of an individual episode of a podcast, such as “Episode 12: Another Cold Day at the Pole.”\nvar hasProtectedAsset: Bool\nA Boolean value that indicates whether the media item has a protected asset.\nvar rating: Int\nThe user-specified rating of the media item.\nvar releaseDate: Date?\nThe date of the media item’s first public release.\nvar skipCount: Int\nThe number of times the user skips playing the media item.\nvar title: String?\nThe title or name of the media item.\nvar userGrouping: String?\nGrouping information for the media item."
  },
  {
    "title": "albumArtistPersistentID",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmediaitem/1621740-albumartistpersistentid",
    "html": "See Also\nMedia item properties\nvar albumArtist: String?\nThe primary performing artist for an album.\nvar albumPersistentID: MPMediaEntityPersistentID\nThe persistent identifier for an album.\nvar albumTitle: String?\nThe title of an album, such as Live on Mars, rather than the title of an individual song on the album, such as “Crater Dance.”\nvar albumTrackCount: Int\nThe number of tracks for the album that contains the media item.\nvar albumTrackNumber: Int\nThe track number of the media item, for a media item that’s part of an album.\nvar artist: String?\nThe performing artists for a media item, which may vary from the primary artist for the album that a media item belongs to.\nvar artistPersistentID: MPMediaEntityPersistentID\nThe persistent identifier for an artist.\nvar artwork: MPMediaItemArtwork?\nThe artwork image for the media item.\nvar assetURL: URL?\nThe URL that points to the media item.\nvar beatsPerMinute: Int\nThe number of musical beats per minute for the media item.\nvar bookmarkTime: TimeInterval\nThe time of the user’s most recent interaction with the bookmark in the media item.\nvar isCloudItem: Bool\nA Boolean value that indicates whether the media item is an iCloud Music Library item.\nvar comments: String?\nTextual information about the media item.\nvar isCompilation: Bool\nA Boolean value that indicates whether the media item is part of a compilation.\nvar isPreorder: Bool\nA Boolean value that indicates whether the media item is a preorder.\nvar composer: String?\nThe musical composer for the media item.\nvar composerPersistentID: MPMediaEntityPersistentID\nThe persistent identifier for a composer.\nvar dateAdded: Date\nThe date the user adds the media item to the library.\nvar discCount: Int\nThe number of discs for the album that contains the media item.\nvar discNumber: Int\nThe disc number of the media item, for a media item that’s part of a multidisc album.\nvar isExplicitItem: Bool\nA Boolean value that indicates whether the media item has explicit (adult) lyrics or language.\nvar genre: String?\nThe music or film genre of the media item.\nvar genrePersistentID: MPMediaEntityPersistentID\nThe persistent identifier for a genre.\nvar lastPlayedDate: Date?\nThe most recent play date of the media item.\nvar lyrics: String?\nThe lyrics for the media item.\nvar mediaType: MPMediaType\nThe media type of the media item.\nvar persistentID: MPMediaEntityPersistentID\nThe persistent identifier for the media item.\nvar playCount: Int\nThe number of times the user plays the media item.\nvar playbackDuration: TimeInterval\nThe playback duration of the media item.\nvar playbackStoreID: String\nThe ID of a media item from the Apple Music catalog.\nvar podcastPersistentID: MPMediaEntityPersistentID\nThe persistent identifier for an audio podcast.\nvar podcastTitle: String?\nThe title of a podcast, such as This Martian Drudgery, rather than the title of an individual episode of a podcast, such as “Episode 12: Another Cold Day at the Pole.”\nvar hasProtectedAsset: Bool\nA Boolean value that indicates whether the media item has a protected asset.\nvar rating: Int\nThe user-specified rating of the media item.\nvar releaseDate: Date?\nThe date of the media item’s first public release.\nvar skipCount: Int\nThe number of times the user skips playing the media item.\nvar title: String?\nThe title or name of the media item.\nvar userGrouping: String?\nGrouping information for the media item."
  },
  {
    "title": "MPMediaEntityPropertyPersistentID",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmediaentitypropertypersistentid",
    "html": "Discussion\n\nThis value contains a uint64_t (unsigned long long) which you can use to build a media property predicate, as described in MPMediaPropertyPredicate."
  },
  {
    "title": "Remote command center events",
    "url": "https://developer.apple.com/documentation/mediaplayer/remote_command_center_events",
    "html": "Topics\nSetting up the remote event handler\nBecoming a now playable app\nEnsure your app is eligible to become the Now Playing app by adopting best practices for providing Now Playing info and registering for remote command center actions.\nclass MPRemoteCommandCenter\nAn object that responds to remote control events sent by external accessories and system controls.\nclass MPRemoteCommand\nAn object that responds to remote command events.\nclass MPRemoteCommandEvent\nA description of a command sent by an external media player.\nSee Also\nExternal player and system event handling\nHandling external player events notifications\nHandle events for external media players.\nTrack navigation events\nRespond to requests to change which part of a media item plays.\nMedia playback mode events\nRespond to changes in the way media items play.\nFeedback and rating events\nRespond to incoming feedback and rating events."
  },
  {
    "title": "Media entity property keys",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmediaentity/media_entity_property_keys",
    "html": "Overview\n\nYou obtain metadata for a media entity by calling the value(forProperty:) method with these property keys. You can also use some properties to build media property predicates, as described in MPMediaPropertyPredicate. These properties are filterable.\n\nTopics\nConstants\nlet MPMediaEntityPropertyPersistentID: String\nThe persistent identifier for a media entity."
  },
  {
    "title": "composerPersistentID",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmediaitem/1621709-composerpersistentid",
    "html": "See Also\nMedia item properties\nvar albumArtist: String?\nThe primary performing artist for an album.\nvar albumArtistPersistentID: MPMediaEntityPersistentID\nThe persistent identifier for the primary performing artist for an album.\nvar albumPersistentID: MPMediaEntityPersistentID\nThe persistent identifier for an album.\nvar albumTitle: String?\nThe title of an album, such as Live on Mars, rather than the title of an individual song on the album, such as “Crater Dance.”\nvar albumTrackCount: Int\nThe number of tracks for the album that contains the media item.\nvar albumTrackNumber: Int\nThe track number of the media item, for a media item that’s part of an album.\nvar artist: String?\nThe performing artists for a media item, which may vary from the primary artist for the album that a media item belongs to.\nvar artistPersistentID: MPMediaEntityPersistentID\nThe persistent identifier for an artist.\nvar artwork: MPMediaItemArtwork?\nThe artwork image for the media item.\nvar assetURL: URL?\nThe URL that points to the media item.\nvar beatsPerMinute: Int\nThe number of musical beats per minute for the media item.\nvar bookmarkTime: TimeInterval\nThe time of the user’s most recent interaction with the bookmark in the media item.\nvar isCloudItem: Bool\nA Boolean value that indicates whether the media item is an iCloud Music Library item.\nvar comments: String?\nTextual information about the media item.\nvar isCompilation: Bool\nA Boolean value that indicates whether the media item is part of a compilation.\nvar isPreorder: Bool\nA Boolean value that indicates whether the media item is a preorder.\nvar composer: String?\nThe musical composer for the media item.\nvar dateAdded: Date\nThe date the user adds the media item to the library.\nvar discCount: Int\nThe number of discs for the album that contains the media item.\nvar discNumber: Int\nThe disc number of the media item, for a media item that’s part of a multidisc album.\nvar isExplicitItem: Bool\nA Boolean value that indicates whether the media item has explicit (adult) lyrics or language.\nvar genre: String?\nThe music or film genre of the media item.\nvar genrePersistentID: MPMediaEntityPersistentID\nThe persistent identifier for a genre.\nvar lastPlayedDate: Date?\nThe most recent play date of the media item.\nvar lyrics: String?\nThe lyrics for the media item.\nvar mediaType: MPMediaType\nThe media type of the media item.\nvar persistentID: MPMediaEntityPersistentID\nThe persistent identifier for the media item.\nvar playCount: Int\nThe number of times the user plays the media item.\nvar playbackDuration: TimeInterval\nThe playback duration of the media item.\nvar playbackStoreID: String\nThe ID of a media item from the Apple Music catalog.\nvar podcastPersistentID: MPMediaEntityPersistentID\nThe persistent identifier for an audio podcast.\nvar podcastTitle: String?\nThe title of a podcast, such as This Martian Drudgery, rather than the title of an individual episode of a podcast, such as “Episode 12: Another Cold Day at the Pole.”\nvar hasProtectedAsset: Bool\nA Boolean value that indicates whether the media item has a protected asset.\nvar rating: Int\nThe user-specified rating of the media item.\nvar releaseDate: Date?\nThe date of the media item’s first public release.\nvar skipCount: Int\nThe number of times the user skips playing the media item.\nvar title: String?\nThe title or name of the media item.\nvar userGrouping: String?\nGrouping information for the media item."
  },
  {
    "title": "isCompilation",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmediaitem/1621745-iscompilation",
    "html": "Discussion\n\nWhen the value is true, the media item is part of a compilation.\n\nSee Also\nMedia item properties\nvar albumArtist: String?\nThe primary performing artist for an album.\nvar albumArtistPersistentID: MPMediaEntityPersistentID\nThe persistent identifier for the primary performing artist for an album.\nvar albumPersistentID: MPMediaEntityPersistentID\nThe persistent identifier for an album.\nvar albumTitle: String?\nThe title of an album, such as Live on Mars, rather than the title of an individual song on the album, such as “Crater Dance.”\nvar albumTrackCount: Int\nThe number of tracks for the album that contains the media item.\nvar albumTrackNumber: Int\nThe track number of the media item, for a media item that’s part of an album.\nvar artist: String?\nThe performing artists for a media item, which may vary from the primary artist for the album that a media item belongs to.\nvar artistPersistentID: MPMediaEntityPersistentID\nThe persistent identifier for an artist.\nvar artwork: MPMediaItemArtwork?\nThe artwork image for the media item.\nvar assetURL: URL?\nThe URL that points to the media item.\nvar beatsPerMinute: Int\nThe number of musical beats per minute for the media item.\nvar bookmarkTime: TimeInterval\nThe time of the user’s most recent interaction with the bookmark in the media item.\nvar isCloudItem: Bool\nA Boolean value that indicates whether the media item is an iCloud Music Library item.\nvar comments: String?\nTextual information about the media item.\nvar isPreorder: Bool\nA Boolean value that indicates whether the media item is a preorder.\nvar composer: String?\nThe musical composer for the media item.\nvar composerPersistentID: MPMediaEntityPersistentID\nThe persistent identifier for a composer.\nvar dateAdded: Date\nThe date the user adds the media item to the library.\nvar discCount: Int\nThe number of discs for the album that contains the media item.\nvar discNumber: Int\nThe disc number of the media item, for a media item that’s part of a multidisc album.\nvar isExplicitItem: Bool\nA Boolean value that indicates whether the media item has explicit (adult) lyrics or language.\nvar genre: String?\nThe music or film genre of the media item.\nvar genrePersistentID: MPMediaEntityPersistentID\nThe persistent identifier for a genre.\nvar lastPlayedDate: Date?\nThe most recent play date of the media item.\nvar lyrics: String?\nThe lyrics for the media item.\nvar mediaType: MPMediaType\nThe media type of the media item.\nvar persistentID: MPMediaEntityPersistentID\nThe persistent identifier for the media item.\nvar playCount: Int\nThe number of times the user plays the media item.\nvar playbackDuration: TimeInterval\nThe playback duration of the media item.\nvar playbackStoreID: String\nThe ID of a media item from the Apple Music catalog.\nvar podcastPersistentID: MPMediaEntityPersistentID\nThe persistent identifier for an audio podcast.\nvar podcastTitle: String?\nThe title of a podcast, such as This Martian Drudgery, rather than the title of an individual episode of a podcast, such as “Episode 12: Another Cold Day at the Pole.”\nvar hasProtectedAsset: Bool\nA Boolean value that indicates whether the media item has a protected asset.\nvar rating: Int\nThe user-specified rating of the media item.\nvar releaseDate: Date?\nThe date of the media item’s first public release.\nvar skipCount: Int\nThe number of times the user skips playing the media item.\nvar title: String?\nThe title or name of the media item.\nvar userGrouping: String?\nGrouping information for the media item."
  },
  {
    "title": "beatsPerMinute",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmediaitem/1621751-beatsperminute",
    "html": "Discussion\n\nThis property corresponds to the “BPM” field in the Info tab in the Get Info dialog in iTunes.\n\nSee Also\nMedia item properties\nvar albumArtist: String?\nThe primary performing artist for an album.\nvar albumArtistPersistentID: MPMediaEntityPersistentID\nThe persistent identifier for the primary performing artist for an album.\nvar albumPersistentID: MPMediaEntityPersistentID\nThe persistent identifier for an album.\nvar albumTitle: String?\nThe title of an album, such as Live on Mars, rather than the title of an individual song on the album, such as “Crater Dance.”\nvar albumTrackCount: Int\nThe number of tracks for the album that contains the media item.\nvar albumTrackNumber: Int\nThe track number of the media item, for a media item that’s part of an album.\nvar artist: String?\nThe performing artists for a media item, which may vary from the primary artist for the album that a media item belongs to.\nvar artistPersistentID: MPMediaEntityPersistentID\nThe persistent identifier for an artist.\nvar artwork: MPMediaItemArtwork?\nThe artwork image for the media item.\nvar assetURL: URL?\nThe URL that points to the media item.\nvar bookmarkTime: TimeInterval\nThe time of the user’s most recent interaction with the bookmark in the media item.\nvar isCloudItem: Bool\nA Boolean value that indicates whether the media item is an iCloud Music Library item.\nvar comments: String?\nTextual information about the media item.\nvar isCompilation: Bool\nA Boolean value that indicates whether the media item is part of a compilation.\nvar isPreorder: Bool\nA Boolean value that indicates whether the media item is a preorder.\nvar composer: String?\nThe musical composer for the media item.\nvar composerPersistentID: MPMediaEntityPersistentID\nThe persistent identifier for a composer.\nvar dateAdded: Date\nThe date the user adds the media item to the library.\nvar discCount: Int\nThe number of discs for the album that contains the media item.\nvar discNumber: Int\nThe disc number of the media item, for a media item that’s part of a multidisc album.\nvar isExplicitItem: Bool\nA Boolean value that indicates whether the media item has explicit (adult) lyrics or language.\nvar genre: String?\nThe music or film genre of the media item.\nvar genrePersistentID: MPMediaEntityPersistentID\nThe persistent identifier for a genre.\nvar lastPlayedDate: Date?\nThe most recent play date of the media item.\nvar lyrics: String?\nThe lyrics for the media item.\nvar mediaType: MPMediaType\nThe media type of the media item.\nvar persistentID: MPMediaEntityPersistentID\nThe persistent identifier for the media item.\nvar playCount: Int\nThe number of times the user plays the media item.\nvar playbackDuration: TimeInterval\nThe playback duration of the media item.\nvar playbackStoreID: String\nThe ID of a media item from the Apple Music catalog.\nvar podcastPersistentID: MPMediaEntityPersistentID\nThe persistent identifier for an audio podcast.\nvar podcastTitle: String?\nThe title of a podcast, such as This Martian Drudgery, rather than the title of an individual episode of a podcast, such as “Episode 12: Another Cold Day at the Pole.”\nvar hasProtectedAsset: Bool\nA Boolean value that indicates whether the media item has a protected asset.\nvar rating: Int\nThe user-specified rating of the media item.\nvar releaseDate: Date?\nThe date of the media item’s first public release.\nvar skipCount: Int\nThe number of times the user skips playing the media item.\nvar title: String?\nThe title or name of the media item.\nvar userGrouping: String?\nGrouping information for the media item."
  },
  {
    "title": "isPreorder",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmediaitem/3726256-ispreorder",
    "html": "See Also\nMedia item properties\nvar albumArtist: String?\nThe primary performing artist for an album.\nvar albumArtistPersistentID: MPMediaEntityPersistentID\nThe persistent identifier for the primary performing artist for an album.\nvar albumPersistentID: MPMediaEntityPersistentID\nThe persistent identifier for an album.\nvar albumTitle: String?\nThe title of an album, such as Live on Mars, rather than the title of an individual song on the album, such as “Crater Dance.”\nvar albumTrackCount: Int\nThe number of tracks for the album that contains the media item.\nvar albumTrackNumber: Int\nThe track number of the media item, for a media item that’s part of an album.\nvar artist: String?\nThe performing artists for a media item, which may vary from the primary artist for the album that a media item belongs to.\nvar artistPersistentID: MPMediaEntityPersistentID\nThe persistent identifier for an artist.\nvar artwork: MPMediaItemArtwork?\nThe artwork image for the media item.\nvar assetURL: URL?\nThe URL that points to the media item.\nvar beatsPerMinute: Int\nThe number of musical beats per minute for the media item.\nvar bookmarkTime: TimeInterval\nThe time of the user’s most recent interaction with the bookmark in the media item.\nvar isCloudItem: Bool\nA Boolean value that indicates whether the media item is an iCloud Music Library item.\nvar comments: String?\nTextual information about the media item.\nvar isCompilation: Bool\nA Boolean value that indicates whether the media item is part of a compilation.\nvar composer: String?\nThe musical composer for the media item.\nvar composerPersistentID: MPMediaEntityPersistentID\nThe persistent identifier for a composer.\nvar dateAdded: Date\nThe date the user adds the media item to the library.\nvar discCount: Int\nThe number of discs for the album that contains the media item.\nvar discNumber: Int\nThe disc number of the media item, for a media item that’s part of a multidisc album.\nvar isExplicitItem: Bool\nA Boolean value that indicates whether the media item has explicit (adult) lyrics or language.\nvar genre: String?\nThe music or film genre of the media item.\nvar genrePersistentID: MPMediaEntityPersistentID\nThe persistent identifier for a genre.\nvar lastPlayedDate: Date?\nThe most recent play date of the media item.\nvar lyrics: String?\nThe lyrics for the media item.\nvar mediaType: MPMediaType\nThe media type of the media item.\nvar persistentID: MPMediaEntityPersistentID\nThe persistent identifier for the media item.\nvar playCount: Int\nThe number of times the user plays the media item.\nvar playbackDuration: TimeInterval\nThe playback duration of the media item.\nvar playbackStoreID: String\nThe ID of a media item from the Apple Music catalog.\nvar podcastPersistentID: MPMediaEntityPersistentID\nThe persistent identifier for an audio podcast.\nvar podcastTitle: String?\nThe title of a podcast, such as This Martian Drudgery, rather than the title of an individual episode of a podcast, such as “Episode 12: Another Cold Day at the Pole.”\nvar hasProtectedAsset: Bool\nA Boolean value that indicates whether the media item has a protected asset.\nvar rating: Int\nThe user-specified rating of the media item.\nvar releaseDate: Date?\nThe date of the media item’s first public release.\nvar skipCount: Int\nThe number of times the user skips playing the media item.\nvar title: String?\nThe title or name of the media item.\nvar userGrouping: String?\nGrouping information for the media item."
  },
  {
    "title": "isCloudItem",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmediaitem/1621697-isclouditem",
    "html": "Discussion\n\nWhen set to true, the media item is an iCloud Music Library item.\n\nSee Also\nMedia item properties\nvar albumArtist: String?\nThe primary performing artist for an album.\nvar albumArtistPersistentID: MPMediaEntityPersistentID\nThe persistent identifier for the primary performing artist for an album.\nvar albumPersistentID: MPMediaEntityPersistentID\nThe persistent identifier for an album.\nvar albumTitle: String?\nThe title of an album, such as Live on Mars, rather than the title of an individual song on the album, such as “Crater Dance.”\nvar albumTrackCount: Int\nThe number of tracks for the album that contains the media item.\nvar albumTrackNumber: Int\nThe track number of the media item, for a media item that’s part of an album.\nvar artist: String?\nThe performing artists for a media item, which may vary from the primary artist for the album that a media item belongs to.\nvar artistPersistentID: MPMediaEntityPersistentID\nThe persistent identifier for an artist.\nvar artwork: MPMediaItemArtwork?\nThe artwork image for the media item.\nvar assetURL: URL?\nThe URL that points to the media item.\nvar beatsPerMinute: Int\nThe number of musical beats per minute for the media item.\nvar bookmarkTime: TimeInterval\nThe time of the user’s most recent interaction with the bookmark in the media item.\nvar comments: String?\nTextual information about the media item.\nvar isCompilation: Bool\nA Boolean value that indicates whether the media item is part of a compilation.\nvar isPreorder: Bool\nA Boolean value that indicates whether the media item is a preorder.\nvar composer: String?\nThe musical composer for the media item.\nvar composerPersistentID: MPMediaEntityPersistentID\nThe persistent identifier for a composer.\nvar dateAdded: Date\nThe date the user adds the media item to the library.\nvar discCount: Int\nThe number of discs for the album that contains the media item.\nvar discNumber: Int\nThe disc number of the media item, for a media item that’s part of a multidisc album.\nvar isExplicitItem: Bool\nA Boolean value that indicates whether the media item has explicit (adult) lyrics or language.\nvar genre: String?\nThe music or film genre of the media item.\nvar genrePersistentID: MPMediaEntityPersistentID\nThe persistent identifier for a genre.\nvar lastPlayedDate: Date?\nThe most recent play date of the media item.\nvar lyrics: String?\nThe lyrics for the media item.\nvar mediaType: MPMediaType\nThe media type of the media item.\nvar persistentID: MPMediaEntityPersistentID\nThe persistent identifier for the media item.\nvar playCount: Int\nThe number of times the user plays the media item.\nvar playbackDuration: TimeInterval\nThe playback duration of the media item.\nvar playbackStoreID: String\nThe ID of a media item from the Apple Music catalog.\nvar podcastPersistentID: MPMediaEntityPersistentID\nThe persistent identifier for an audio podcast.\nvar podcastTitle: String?\nThe title of a podcast, such as This Martian Drudgery, rather than the title of an individual episode of a podcast, such as “Episode 12: Another Cold Day at the Pole.”\nvar hasProtectedAsset: Bool\nA Boolean value that indicates whether the media item has a protected asset.\nvar rating: Int\nThe user-specified rating of the media item.\nvar releaseDate: Date?\nThe date of the media item’s first public release.\nvar skipCount: Int\nThe number of times the user skips playing the media item.\nvar title: String?\nThe title or name of the media item.\nvar userGrouping: String?\nGrouping information for the media item."
  },
  {
    "title": "artistPersistentID",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmediaitem/1621742-artistpersistentid",
    "html": "See Also\nMedia item properties\nvar albumArtist: String?\nThe primary performing artist for an album.\nvar albumArtistPersistentID: MPMediaEntityPersistentID\nThe persistent identifier for the primary performing artist for an album.\nvar albumPersistentID: MPMediaEntityPersistentID\nThe persistent identifier for an album.\nvar albumTitle: String?\nThe title of an album, such as Live on Mars, rather than the title of an individual song on the album, such as “Crater Dance.”\nvar albumTrackCount: Int\nThe number of tracks for the album that contains the media item.\nvar albumTrackNumber: Int\nThe track number of the media item, for a media item that’s part of an album.\nvar artist: String?\nThe performing artists for a media item, which may vary from the primary artist for the album that a media item belongs to.\nvar artwork: MPMediaItemArtwork?\nThe artwork image for the media item.\nvar assetURL: URL?\nThe URL that points to the media item.\nvar beatsPerMinute: Int\nThe number of musical beats per minute for the media item.\nvar bookmarkTime: TimeInterval\nThe time of the user’s most recent interaction with the bookmark in the media item.\nvar isCloudItem: Bool\nA Boolean value that indicates whether the media item is an iCloud Music Library item.\nvar comments: String?\nTextual information about the media item.\nvar isCompilation: Bool\nA Boolean value that indicates whether the media item is part of a compilation.\nvar isPreorder: Bool\nA Boolean value that indicates whether the media item is a preorder.\nvar composer: String?\nThe musical composer for the media item.\nvar composerPersistentID: MPMediaEntityPersistentID\nThe persistent identifier for a composer.\nvar dateAdded: Date\nThe date the user adds the media item to the library.\nvar discCount: Int\nThe number of discs for the album that contains the media item.\nvar discNumber: Int\nThe disc number of the media item, for a media item that’s part of a multidisc album.\nvar isExplicitItem: Bool\nA Boolean value that indicates whether the media item has explicit (adult) lyrics or language.\nvar genre: String?\nThe music or film genre of the media item.\nvar genrePersistentID: MPMediaEntityPersistentID\nThe persistent identifier for a genre.\nvar lastPlayedDate: Date?\nThe most recent play date of the media item.\nvar lyrics: String?\nThe lyrics for the media item.\nvar mediaType: MPMediaType\nThe media type of the media item.\nvar persistentID: MPMediaEntityPersistentID\nThe persistent identifier for the media item.\nvar playCount: Int\nThe number of times the user plays the media item.\nvar playbackDuration: TimeInterval\nThe playback duration of the media item.\nvar playbackStoreID: String\nThe ID of a media item from the Apple Music catalog.\nvar podcastPersistentID: MPMediaEntityPersistentID\nThe persistent identifier for an audio podcast.\nvar podcastTitle: String?\nThe title of a podcast, such as This Martian Drudgery, rather than the title of an individual episode of a podcast, such as “Episode 12: Another Cold Day at the Pole.”\nvar hasProtectedAsset: Bool\nA Boolean value that indicates whether the media item has a protected asset.\nvar rating: Int\nThe user-specified rating of the media item.\nvar releaseDate: Date?\nThe date of the media item’s first public release.\nvar skipCount: Int\nThe number of times the user skips playing the media item.\nvar title: String?\nThe title or name of the media item.\nvar userGrouping: String?\nGrouping information for the media item."
  },
  {
    "title": "albumTitle",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmediaitem/1621756-albumtitle",
    "html": "See Also\nMedia item properties\nvar albumArtist: String?\nThe primary performing artist for an album.\nvar albumArtistPersistentID: MPMediaEntityPersistentID\nThe persistent identifier for the primary performing artist for an album.\nvar albumPersistentID: MPMediaEntityPersistentID\nThe persistent identifier for an album.\nvar albumTrackCount: Int\nThe number of tracks for the album that contains the media item.\nvar albumTrackNumber: Int\nThe track number of the media item, for a media item that’s part of an album.\nvar artist: String?\nThe performing artists for a media item, which may vary from the primary artist for the album that a media item belongs to.\nvar artistPersistentID: MPMediaEntityPersistentID\nThe persistent identifier for an artist.\nvar artwork: MPMediaItemArtwork?\nThe artwork image for the media item.\nvar assetURL: URL?\nThe URL that points to the media item.\nvar beatsPerMinute: Int\nThe number of musical beats per minute for the media item.\nvar bookmarkTime: TimeInterval\nThe time of the user’s most recent interaction with the bookmark in the media item.\nvar isCloudItem: Bool\nA Boolean value that indicates whether the media item is an iCloud Music Library item.\nvar comments: String?\nTextual information about the media item.\nvar isCompilation: Bool\nA Boolean value that indicates whether the media item is part of a compilation.\nvar isPreorder: Bool\nA Boolean value that indicates whether the media item is a preorder.\nvar composer: String?\nThe musical composer for the media item.\nvar composerPersistentID: MPMediaEntityPersistentID\nThe persistent identifier for a composer.\nvar dateAdded: Date\nThe date the user adds the media item to the library.\nvar discCount: Int\nThe number of discs for the album that contains the media item.\nvar discNumber: Int\nThe disc number of the media item, for a media item that’s part of a multidisc album.\nvar isExplicitItem: Bool\nA Boolean value that indicates whether the media item has explicit (adult) lyrics or language.\nvar genre: String?\nThe music or film genre of the media item.\nvar genrePersistentID: MPMediaEntityPersistentID\nThe persistent identifier for a genre.\nvar lastPlayedDate: Date?\nThe most recent play date of the media item.\nvar lyrics: String?\nThe lyrics for the media item.\nvar mediaType: MPMediaType\nThe media type of the media item.\nvar persistentID: MPMediaEntityPersistentID\nThe persistent identifier for the media item.\nvar playCount: Int\nThe number of times the user plays the media item.\nvar playbackDuration: TimeInterval\nThe playback duration of the media item.\nvar playbackStoreID: String\nThe ID of a media item from the Apple Music catalog.\nvar podcastPersistentID: MPMediaEntityPersistentID\nThe persistent identifier for an audio podcast.\nvar podcastTitle: String?\nThe title of a podcast, such as This Martian Drudgery, rather than the title of an individual episode of a podcast, such as “Episode 12: Another Cold Day at the Pole.”\nvar hasProtectedAsset: Bool\nA Boolean value that indicates whether the media item has a protected asset.\nvar rating: Int\nThe user-specified rating of the media item.\nvar releaseDate: Date?\nThe date of the media item’s first public release.\nvar skipCount: Int\nThe number of times the user skips playing the media item.\nvar title: String?\nThe title or name of the media item.\nvar userGrouping: String?\nGrouping information for the media item."
  },
  {
    "title": "assetURL",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmediaitem/1621707-asseturl",
    "html": "Discussion\n\nA URL pointing to the media item, which you can use to create an AVAsset object or other URL-based AVFoundation object.\n\nSee Also\nMedia item properties\nvar albumArtist: String?\nThe primary performing artist for an album.\nvar albumArtistPersistentID: MPMediaEntityPersistentID\nThe persistent identifier for the primary performing artist for an album.\nvar albumPersistentID: MPMediaEntityPersistentID\nThe persistent identifier for an album.\nvar albumTitle: String?\nThe title of an album, such as Live on Mars, rather than the title of an individual song on the album, such as “Crater Dance.”\nvar albumTrackCount: Int\nThe number of tracks for the album that contains the media item.\nvar albumTrackNumber: Int\nThe track number of the media item, for a media item that’s part of an album.\nvar artist: String?\nThe performing artists for a media item, which may vary from the primary artist for the album that a media item belongs to.\nvar artistPersistentID: MPMediaEntityPersistentID\nThe persistent identifier for an artist.\nvar artwork: MPMediaItemArtwork?\nThe artwork image for the media item.\nvar beatsPerMinute: Int\nThe number of musical beats per minute for the media item.\nvar bookmarkTime: TimeInterval\nThe time of the user’s most recent interaction with the bookmark in the media item.\nvar isCloudItem: Bool\nA Boolean value that indicates whether the media item is an iCloud Music Library item.\nvar comments: String?\nTextual information about the media item.\nvar isCompilation: Bool\nA Boolean value that indicates whether the media item is part of a compilation.\nvar isPreorder: Bool\nA Boolean value that indicates whether the media item is a preorder.\nvar composer: String?\nThe musical composer for the media item.\nvar composerPersistentID: MPMediaEntityPersistentID\nThe persistent identifier for a composer.\nvar dateAdded: Date\nThe date the user adds the media item to the library.\nvar discCount: Int\nThe number of discs for the album that contains the media item.\nvar discNumber: Int\nThe disc number of the media item, for a media item that’s part of a multidisc album.\nvar isExplicitItem: Bool\nA Boolean value that indicates whether the media item has explicit (adult) lyrics or language.\nvar genre: String?\nThe music or film genre of the media item.\nvar genrePersistentID: MPMediaEntityPersistentID\nThe persistent identifier for a genre.\nvar lastPlayedDate: Date?\nThe most recent play date of the media item.\nvar lyrics: String?\nThe lyrics for the media item.\nvar mediaType: MPMediaType\nThe media type of the media item.\nvar persistentID: MPMediaEntityPersistentID\nThe persistent identifier for the media item.\nvar playCount: Int\nThe number of times the user plays the media item.\nvar playbackDuration: TimeInterval\nThe playback duration of the media item.\nvar playbackStoreID: String\nThe ID of a media item from the Apple Music catalog.\nvar podcastPersistentID: MPMediaEntityPersistentID\nThe persistent identifier for an audio podcast.\nvar podcastTitle: String?\nThe title of a podcast, such as This Martian Drudgery, rather than the title of an individual episode of a podcast, such as “Episode 12: Another Cold Day at the Pole.”\nvar hasProtectedAsset: Bool\nA Boolean value that indicates whether the media item has a protected asset.\nvar rating: Int\nThe user-specified rating of the media item.\nvar releaseDate: Date?\nThe date of the media item’s first public release.\nvar skipCount: Int\nThe number of times the user skips playing the media item.\nvar title: String?\nThe title or name of the media item.\nvar userGrouping: String?\nGrouping information for the media item."
  },
  {
    "title": "artist",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmediaitem/1621714-artist",
    "html": "Discussion\n\nFor example, if the album artist is “Joseph Fable,” the artist for one of the songs in the album may be “Joseph Fable featuring Thomas Smithson”.\n\nSee Also\nMedia item properties\nvar albumArtist: String?\nThe primary performing artist for an album.\nvar albumArtistPersistentID: MPMediaEntityPersistentID\nThe persistent identifier for the primary performing artist for an album.\nvar albumPersistentID: MPMediaEntityPersistentID\nThe persistent identifier for an album.\nvar albumTitle: String?\nThe title of an album, such as Live on Mars, rather than the title of an individual song on the album, such as “Crater Dance.”\nvar albumTrackCount: Int\nThe number of tracks for the album that contains the media item.\nvar albumTrackNumber: Int\nThe track number of the media item, for a media item that’s part of an album.\nvar artistPersistentID: MPMediaEntityPersistentID\nThe persistent identifier for an artist.\nvar artwork: MPMediaItemArtwork?\nThe artwork image for the media item.\nvar assetURL: URL?\nThe URL that points to the media item.\nvar beatsPerMinute: Int\nThe number of musical beats per minute for the media item.\nvar bookmarkTime: TimeInterval\nThe time of the user’s most recent interaction with the bookmark in the media item.\nvar isCloudItem: Bool\nA Boolean value that indicates whether the media item is an iCloud Music Library item.\nvar comments: String?\nTextual information about the media item.\nvar isCompilation: Bool\nA Boolean value that indicates whether the media item is part of a compilation.\nvar isPreorder: Bool\nA Boolean value that indicates whether the media item is a preorder.\nvar composer: String?\nThe musical composer for the media item.\nvar composerPersistentID: MPMediaEntityPersistentID\nThe persistent identifier for a composer.\nvar dateAdded: Date\nThe date the user adds the media item to the library.\nvar discCount: Int\nThe number of discs for the album that contains the media item.\nvar discNumber: Int\nThe disc number of the media item, for a media item that’s part of a multidisc album.\nvar isExplicitItem: Bool\nA Boolean value that indicates whether the media item has explicit (adult) lyrics or language.\nvar genre: String?\nThe music or film genre of the media item.\nvar genrePersistentID: MPMediaEntityPersistentID\nThe persistent identifier for a genre.\nvar lastPlayedDate: Date?\nThe most recent play date of the media item.\nvar lyrics: String?\nThe lyrics for the media item.\nvar mediaType: MPMediaType\nThe media type of the media item.\nvar persistentID: MPMediaEntityPersistentID\nThe persistent identifier for the media item.\nvar playCount: Int\nThe number of times the user plays the media item.\nvar playbackDuration: TimeInterval\nThe playback duration of the media item.\nvar playbackStoreID: String\nThe ID of a media item from the Apple Music catalog.\nvar podcastPersistentID: MPMediaEntityPersistentID\nThe persistent identifier for an audio podcast.\nvar podcastTitle: String?\nThe title of a podcast, such as This Martian Drudgery, rather than the title of an individual episode of a podcast, such as “Episode 12: Another Cold Day at the Pole.”\nvar hasProtectedAsset: Bool\nA Boolean value that indicates whether the media item has a protected asset.\nvar rating: Int\nThe user-specified rating of the media item.\nvar releaseDate: Date?\nThe date of the media item’s first public release.\nvar skipCount: Int\nThe number of times the user skips playing the media item.\nvar title: String?\nThe title or name of the media item.\nvar userGrouping: String?\nGrouping information for the media item."
  },
  {
    "title": "artwork",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmediaitem/1621743-artwork",
    "html": "See Also\nMedia item properties\nvar albumArtist: String?\nThe primary performing artist for an album.\nvar albumArtistPersistentID: MPMediaEntityPersistentID\nThe persistent identifier for the primary performing artist for an album.\nvar albumPersistentID: MPMediaEntityPersistentID\nThe persistent identifier for an album.\nvar albumTitle: String?\nThe title of an album, such as Live on Mars, rather than the title of an individual song on the album, such as “Crater Dance.”\nvar albumTrackCount: Int\nThe number of tracks for the album that contains the media item.\nvar albumTrackNumber: Int\nThe track number of the media item, for a media item that’s part of an album.\nvar artist: String?\nThe performing artists for a media item, which may vary from the primary artist for the album that a media item belongs to.\nvar artistPersistentID: MPMediaEntityPersistentID\nThe persistent identifier for an artist.\nvar assetURL: URL?\nThe URL that points to the media item.\nvar beatsPerMinute: Int\nThe number of musical beats per minute for the media item.\nvar bookmarkTime: TimeInterval\nThe time of the user’s most recent interaction with the bookmark in the media item.\nvar isCloudItem: Bool\nA Boolean value that indicates whether the media item is an iCloud Music Library item.\nvar comments: String?\nTextual information about the media item.\nvar isCompilation: Bool\nA Boolean value that indicates whether the media item is part of a compilation.\nvar isPreorder: Bool\nA Boolean value that indicates whether the media item is a preorder.\nvar composer: String?\nThe musical composer for the media item.\nvar composerPersistentID: MPMediaEntityPersistentID\nThe persistent identifier for a composer.\nvar dateAdded: Date\nThe date the user adds the media item to the library.\nvar discCount: Int\nThe number of discs for the album that contains the media item.\nvar discNumber: Int\nThe disc number of the media item, for a media item that’s part of a multidisc album.\nvar isExplicitItem: Bool\nA Boolean value that indicates whether the media item has explicit (adult) lyrics or language.\nvar genre: String?\nThe music or film genre of the media item.\nvar genrePersistentID: MPMediaEntityPersistentID\nThe persistent identifier for a genre.\nvar lastPlayedDate: Date?\nThe most recent play date of the media item.\nvar lyrics: String?\nThe lyrics for the media item.\nvar mediaType: MPMediaType\nThe media type of the media item.\nvar persistentID: MPMediaEntityPersistentID\nThe persistent identifier for the media item.\nvar playCount: Int\nThe number of times the user plays the media item.\nvar playbackDuration: TimeInterval\nThe playback duration of the media item.\nvar playbackStoreID: String\nThe ID of a media item from the Apple Music catalog.\nvar podcastPersistentID: MPMediaEntityPersistentID\nThe persistent identifier for an audio podcast.\nvar podcastTitle: String?\nThe title of a podcast, such as This Martian Drudgery, rather than the title of an individual episode of a podcast, such as “Episode 12: Another Cold Day at the Pole.”\nvar hasProtectedAsset: Bool\nA Boolean value that indicates whether the media item has a protected asset.\nvar rating: Int\nThe user-specified rating of the media item.\nvar releaseDate: Date?\nThe date of the media item’s first public release.\nvar skipCount: Int\nThe number of times the user skips playing the media item.\nvar title: String?\nThe title or name of the media item.\nvar userGrouping: String?\nGrouping information for the media item."
  },
  {
    "title": "bookmarkTime",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmediaitem/1621727-bookmarktime",
    "html": "See Also\nMedia item properties\nvar albumArtist: String?\nThe primary performing artist for an album.\nvar albumArtistPersistentID: MPMediaEntityPersistentID\nThe persistent identifier for the primary performing artist for an album.\nvar albumPersistentID: MPMediaEntityPersistentID\nThe persistent identifier for an album.\nvar albumTitle: String?\nThe title of an album, such as Live on Mars, rather than the title of an individual song on the album, such as “Crater Dance.”\nvar albumTrackCount: Int\nThe number of tracks for the album that contains the media item.\nvar albumTrackNumber: Int\nThe track number of the media item, for a media item that’s part of an album.\nvar artist: String?\nThe performing artists for a media item, which may vary from the primary artist for the album that a media item belongs to.\nvar artistPersistentID: MPMediaEntityPersistentID\nThe persistent identifier for an artist.\nvar artwork: MPMediaItemArtwork?\nThe artwork image for the media item.\nvar assetURL: URL?\nThe URL that points to the media item.\nvar beatsPerMinute: Int\nThe number of musical beats per minute for the media item.\nvar isCloudItem: Bool\nA Boolean value that indicates whether the media item is an iCloud Music Library item.\nvar comments: String?\nTextual information about the media item.\nvar isCompilation: Bool\nA Boolean value that indicates whether the media item is part of a compilation.\nvar isPreorder: Bool\nA Boolean value that indicates whether the media item is a preorder.\nvar composer: String?\nThe musical composer for the media item.\nvar composerPersistentID: MPMediaEntityPersistentID\nThe persistent identifier for a composer.\nvar dateAdded: Date\nThe date the user adds the media item to the library.\nvar discCount: Int\nThe number of discs for the album that contains the media item.\nvar discNumber: Int\nThe disc number of the media item, for a media item that’s part of a multidisc album.\nvar isExplicitItem: Bool\nA Boolean value that indicates whether the media item has explicit (adult) lyrics or language.\nvar genre: String?\nThe music or film genre of the media item.\nvar genrePersistentID: MPMediaEntityPersistentID\nThe persistent identifier for a genre.\nvar lastPlayedDate: Date?\nThe most recent play date of the media item.\nvar lyrics: String?\nThe lyrics for the media item.\nvar mediaType: MPMediaType\nThe media type of the media item.\nvar persistentID: MPMediaEntityPersistentID\nThe persistent identifier for the media item.\nvar playCount: Int\nThe number of times the user plays the media item.\nvar playbackDuration: TimeInterval\nThe playback duration of the media item.\nvar playbackStoreID: String\nThe ID of a media item from the Apple Music catalog.\nvar podcastPersistentID: MPMediaEntityPersistentID\nThe persistent identifier for an audio podcast.\nvar podcastTitle: String?\nThe title of a podcast, such as This Martian Drudgery, rather than the title of an individual episode of a podcast, such as “Episode 12: Another Cold Day at the Pole.”\nvar hasProtectedAsset: Bool\nA Boolean value that indicates whether the media item has a protected asset.\nvar rating: Int\nThe user-specified rating of the media item.\nvar releaseDate: Date?\nThe date of the media item’s first public release.\nvar skipCount: Int\nThe number of times the user skips playing the media item.\nvar title: String?\nThe title or name of the media item.\nvar userGrouping: String?\nGrouping information for the media item."
  },
  {
    "title": "albumTrackCount",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmediaitem/1621757-albumtrackcount",
    "html": "See Also\nMedia item properties\nvar albumArtist: String?\nThe primary performing artist for an album.\nvar albumArtistPersistentID: MPMediaEntityPersistentID\nThe persistent identifier for the primary performing artist for an album.\nvar albumPersistentID: MPMediaEntityPersistentID\nThe persistent identifier for an album.\nvar albumTitle: String?\nThe title of an album, such as Live on Mars, rather than the title of an individual song on the album, such as “Crater Dance.”\nvar albumTrackNumber: Int\nThe track number of the media item, for a media item that’s part of an album.\nvar artist: String?\nThe performing artists for a media item, which may vary from the primary artist for the album that a media item belongs to.\nvar artistPersistentID: MPMediaEntityPersistentID\nThe persistent identifier for an artist.\nvar artwork: MPMediaItemArtwork?\nThe artwork image for the media item.\nvar assetURL: URL?\nThe URL that points to the media item.\nvar beatsPerMinute: Int\nThe number of musical beats per minute for the media item.\nvar bookmarkTime: TimeInterval\nThe time of the user’s most recent interaction with the bookmark in the media item.\nvar isCloudItem: Bool\nA Boolean value that indicates whether the media item is an iCloud Music Library item.\nvar comments: String?\nTextual information about the media item.\nvar isCompilation: Bool\nA Boolean value that indicates whether the media item is part of a compilation.\nvar isPreorder: Bool\nA Boolean value that indicates whether the media item is a preorder.\nvar composer: String?\nThe musical composer for the media item.\nvar composerPersistentID: MPMediaEntityPersistentID\nThe persistent identifier for a composer.\nvar dateAdded: Date\nThe date the user adds the media item to the library.\nvar discCount: Int\nThe number of discs for the album that contains the media item.\nvar discNumber: Int\nThe disc number of the media item, for a media item that’s part of a multidisc album.\nvar isExplicitItem: Bool\nA Boolean value that indicates whether the media item has explicit (adult) lyrics or language.\nvar genre: String?\nThe music or film genre of the media item.\nvar genrePersistentID: MPMediaEntityPersistentID\nThe persistent identifier for a genre.\nvar lastPlayedDate: Date?\nThe most recent play date of the media item.\nvar lyrics: String?\nThe lyrics for the media item.\nvar mediaType: MPMediaType\nThe media type of the media item.\nvar persistentID: MPMediaEntityPersistentID\nThe persistent identifier for the media item.\nvar playCount: Int\nThe number of times the user plays the media item.\nvar playbackDuration: TimeInterval\nThe playback duration of the media item.\nvar playbackStoreID: String\nThe ID of a media item from the Apple Music catalog.\nvar podcastPersistentID: MPMediaEntityPersistentID\nThe persistent identifier for an audio podcast.\nvar podcastTitle: String?\nThe title of a podcast, such as This Martian Drudgery, rather than the title of an individual episode of a podcast, such as “Episode 12: Another Cold Day at the Pole.”\nvar hasProtectedAsset: Bool\nA Boolean value that indicates whether the media item has a protected asset.\nvar rating: Int\nThe user-specified rating of the media item.\nvar releaseDate: Date?\nThe date of the media item’s first public release.\nvar skipCount: Int\nThe number of times the user skips playing the media item.\nvar title: String?\nThe title or name of the media item.\nvar userGrouping: String?\nGrouping information for the media item."
  },
  {
    "title": "albumTrackNumber",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmediaitem/1621729-albumtracknumber",
    "html": "See Also\nMedia item properties\nvar albumArtist: String?\nThe primary performing artist for an album.\nvar albumArtistPersistentID: MPMediaEntityPersistentID\nThe persistent identifier for the primary performing artist for an album.\nvar albumPersistentID: MPMediaEntityPersistentID\nThe persistent identifier for an album.\nvar albumTitle: String?\nThe title of an album, such as Live on Mars, rather than the title of an individual song on the album, such as “Crater Dance.”\nvar albumTrackCount: Int\nThe number of tracks for the album that contains the media item.\nvar artist: String?\nThe performing artists for a media item, which may vary from the primary artist for the album that a media item belongs to.\nvar artistPersistentID: MPMediaEntityPersistentID\nThe persistent identifier for an artist.\nvar artwork: MPMediaItemArtwork?\nThe artwork image for the media item.\nvar assetURL: URL?\nThe URL that points to the media item.\nvar beatsPerMinute: Int\nThe number of musical beats per minute for the media item.\nvar bookmarkTime: TimeInterval\nThe time of the user’s most recent interaction with the bookmark in the media item.\nvar isCloudItem: Bool\nA Boolean value that indicates whether the media item is an iCloud Music Library item.\nvar comments: String?\nTextual information about the media item.\nvar isCompilation: Bool\nA Boolean value that indicates whether the media item is part of a compilation.\nvar isPreorder: Bool\nA Boolean value that indicates whether the media item is a preorder.\nvar composer: String?\nThe musical composer for the media item.\nvar composerPersistentID: MPMediaEntityPersistentID\nThe persistent identifier for a composer.\nvar dateAdded: Date\nThe date the user adds the media item to the library.\nvar discCount: Int\nThe number of discs for the album that contains the media item.\nvar discNumber: Int\nThe disc number of the media item, for a media item that’s part of a multidisc album.\nvar isExplicitItem: Bool\nA Boolean value that indicates whether the media item has explicit (adult) lyrics or language.\nvar genre: String?\nThe music or film genre of the media item.\nvar genrePersistentID: MPMediaEntityPersistentID\nThe persistent identifier for a genre.\nvar lastPlayedDate: Date?\nThe most recent play date of the media item.\nvar lyrics: String?\nThe lyrics for the media item.\nvar mediaType: MPMediaType\nThe media type of the media item.\nvar persistentID: MPMediaEntityPersistentID\nThe persistent identifier for the media item.\nvar playCount: Int\nThe number of times the user plays the media item.\nvar playbackDuration: TimeInterval\nThe playback duration of the media item.\nvar playbackStoreID: String\nThe ID of a media item from the Apple Music catalog.\nvar podcastPersistentID: MPMediaEntityPersistentID\nThe persistent identifier for an audio podcast.\nvar podcastTitle: String?\nThe title of a podcast, such as This Martian Drudgery, rather than the title of an individual episode of a podcast, such as “Episode 12: Another Cold Day at the Pole.”\nvar hasProtectedAsset: Bool\nA Boolean value that indicates whether the media item has a protected asset.\nvar rating: Int\nThe user-specified rating of the media item.\nvar releaseDate: Date?\nThe date of the media item’s first public release.\nvar skipCount: Int\nThe number of times the user skips playing the media item.\nvar title: String?\nThe title or name of the media item.\nvar userGrouping: String?\nGrouping information for the media item."
  },
  {
    "title": "comments",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmediaitem/1621767-comments",
    "html": "Discussion\n\nThe contents of this property correspond to the “Comments” field in the Info tab in the Get Info dialog in iTunes.\n\nSee Also\nMedia item properties\nvar albumArtist: String?\nThe primary performing artist for an album.\nvar albumArtistPersistentID: MPMediaEntityPersistentID\nThe persistent identifier for the primary performing artist for an album.\nvar albumPersistentID: MPMediaEntityPersistentID\nThe persistent identifier for an album.\nvar albumTitle: String?\nThe title of an album, such as Live on Mars, rather than the title of an individual song on the album, such as “Crater Dance.”\nvar albumTrackCount: Int\nThe number of tracks for the album that contains the media item.\nvar albumTrackNumber: Int\nThe track number of the media item, for a media item that’s part of an album.\nvar artist: String?\nThe performing artists for a media item, which may vary from the primary artist for the album that a media item belongs to.\nvar artistPersistentID: MPMediaEntityPersistentID\nThe persistent identifier for an artist.\nvar artwork: MPMediaItemArtwork?\nThe artwork image for the media item.\nvar assetURL: URL?\nThe URL that points to the media item.\nvar beatsPerMinute: Int\nThe number of musical beats per minute for the media item.\nvar bookmarkTime: TimeInterval\nThe time of the user’s most recent interaction with the bookmark in the media item.\nvar isCloudItem: Bool\nA Boolean value that indicates whether the media item is an iCloud Music Library item.\nvar isCompilation: Bool\nA Boolean value that indicates whether the media item is part of a compilation.\nvar isPreorder: Bool\nA Boolean value that indicates whether the media item is a preorder.\nvar composer: String?\nThe musical composer for the media item.\nvar composerPersistentID: MPMediaEntityPersistentID\nThe persistent identifier for a composer.\nvar dateAdded: Date\nThe date the user adds the media item to the library.\nvar discCount: Int\nThe number of discs for the album that contains the media item.\nvar discNumber: Int\nThe disc number of the media item, for a media item that’s part of a multidisc album.\nvar isExplicitItem: Bool\nA Boolean value that indicates whether the media item has explicit (adult) lyrics or language.\nvar genre: String?\nThe music or film genre of the media item.\nvar genrePersistentID: MPMediaEntityPersistentID\nThe persistent identifier for a genre.\nvar lastPlayedDate: Date?\nThe most recent play date of the media item.\nvar lyrics: String?\nThe lyrics for the media item.\nvar mediaType: MPMediaType\nThe media type of the media item.\nvar persistentID: MPMediaEntityPersistentID\nThe persistent identifier for the media item.\nvar playCount: Int\nThe number of times the user plays the media item.\nvar playbackDuration: TimeInterval\nThe playback duration of the media item.\nvar playbackStoreID: String\nThe ID of a media item from the Apple Music catalog.\nvar podcastPersistentID: MPMediaEntityPersistentID\nThe persistent identifier for an audio podcast.\nvar podcastTitle: String?\nThe title of a podcast, such as This Martian Drudgery, rather than the title of an individual episode of a podcast, such as “Episode 12: Another Cold Day at the Pole.”\nvar hasProtectedAsset: Bool\nA Boolean value that indicates whether the media item has a protected asset.\nvar rating: Int\nThe user-specified rating of the media item.\nvar releaseDate: Date?\nThe date of the media item’s first public release.\nvar skipCount: Int\nThe number of times the user skips playing the media item.\nvar title: String?\nThe title or name of the media item.\nvar userGrouping: String?\nGrouping information for the media item."
  },
  {
    "title": "setQueue(with:)",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmusicplayercontroller/1624253-setqueue",
    "html": "Parameters\nstoreIDs\n\nAn array of store identifiers associated with the media items to add to the queue.\n\nDiscussion\n\nTo begin playback after establishing a playback queue, call prepareToPlay().\n\nSee Also\nSetting up a playback queue\nfunc setQueue(with: MPMediaQuery)\nSets a music player’s playback queue based on a media query.\nfunc setQueue(with: MPMediaItemCollection)\nSets a music player’s playback queue using a media item collection.\nfunc setQueue(with: MPMusicPlayerQueueDescriptor)\nSet the music player’s playback queue using media items that fit the queue descriptor properties."
  },
  {
    "title": "MPMediaItemPropertyDiscNumber",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmediaitempropertydiscnumber",
    "html": "Discussion\n\nThis value is an NSNumber object that represents an NSUInteger data type.\n\nSee Also\nProperty keys\nlet MPMediaItemPropertyPlaybackDuration: String\nThe playback duration of the media item.\nlet MPMediaItemPropertyAlbumTrackNumber: String\nThe track number of the media item, for a media item that is part of an album.\nlet MPMediaItemPropertyAlbumTrackCount: String\nThe number of tracks for the album that contains the media item.\nlet MPMediaItemPropertyDiscCount: String\nThe number of discs for the album that contains the media item.\nlet MPMediaItemPropertyArtwork: String\nThe artwork image for the media item.\nlet MPMediaItemPropertyLyrics: String\nThe lyrics for the media item.\nlet MPMediaItemPropertyReleaseDate: String\nThe date of the media item’s first public release.\nlet MPMediaItemPropertyBeatsPerMinute: String\nThe number of musical beats per minute for the media item.\nlet MPMediaItemPropertyComments: String\nTextual information about the media item.\nlet MPMediaItemPropertyAssetURL: String\nA URL that points to the media item.\nlet MPMediaItemPropertyIsExplicit: String\nA Boolean value that indicates whether the media item contains explicit (adult) lyrics or language.\nlet MPMediaItemPropertyIsPreorder: String\nA Boolean value that indicates whether the media item is a preorder.\nlet MPMediaItemPropertyPlaybackStoreID: String\nThe identifier for enqueueing store tracks."
  },
  {
    "title": "endSeeking()",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmediaplayback/1616249-endseeking",
    "html": "Required\n\nDiscussion\n\nYou must call this method to end a seeking operation begun by calling either the beginSeekingBackward() or beginSeekingForward() method. After calling this method, the player returns to the same state it was in prior to seeking. In other words, if the item was playing before seeking began, it continues playing from the new playhead position after calling this method.\n\nThis method has no effect on streamed content.\n\nSee Also\nSeeking within media\nfunc beginSeekingBackward()\nBegins seeking backward through the media content.\n\nRequired\n\nfunc beginSeekingForward()\nBegins seeking forward through the media content.\n\nRequired"
  },
  {
    "title": "MPMediaItemPropertyPlaybackDuration",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmediaitempropertyplaybackduration",
    "html": "Discussion\n\nThis value is an NSNumber object representing a duration in seconds as an TimeInterval.\n\nSee Also\nProperty keys\nlet MPMediaItemPropertyAlbumTrackNumber: String\nThe track number of the media item, for a media item that is part of an album.\nlet MPMediaItemPropertyAlbumTrackCount: String\nThe number of tracks for the album that contains the media item.\nlet MPMediaItemPropertyDiscNumber: String\nThe disc number of the media item, for a media item that is part of a multidisc album.\nlet MPMediaItemPropertyDiscCount: String\nThe number of discs for the album that contains the media item.\nlet MPMediaItemPropertyArtwork: String\nThe artwork image for the media item.\nlet MPMediaItemPropertyLyrics: String\nThe lyrics for the media item.\nlet MPMediaItemPropertyReleaseDate: String\nThe date of the media item’s first public release.\nlet MPMediaItemPropertyBeatsPerMinute: String\nThe number of musical beats per minute for the media item.\nlet MPMediaItemPropertyComments: String\nTextual information about the media item.\nlet MPMediaItemPropertyAssetURL: String\nA URL that points to the media item.\nlet MPMediaItemPropertyIsExplicit: String\nA Boolean value that indicates whether the media item contains explicit (adult) lyrics or language.\nlet MPMediaItemPropertyIsPreorder: String\nA Boolean value that indicates whether the media item is a preorder.\nlet MPMediaItemPropertyPlaybackStoreID: String\nThe identifier for enqueueing store tracks."
  },
  {
    "title": "MPMediaItemPropertyComposer",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmediaitempropertycomposer",
    "html": "Discussion\n\nThis value is an NSString object.\n\nCan be used to build a media property predicate as described in MPMediaPropertyPredicate.\n\nSee Also\nFilterable property keys\nlet MPMediaItemPropertyAlbumArtist: String\nThe primary performing artist for an album.\nlet MPMediaItemPropertyAlbumArtistPersistentID: String\nThe persistent identifier for an album artist.\nlet MPMediaItemPropertyAlbumPersistentID: String\nThe key for the persistent identifier for an album.\nlet MPMediaItemPropertyAlbumTitle: String\nThe title of an album.\nlet MPMediaItemPropertyArtist: String\nThe performing artists for a media item — which may vary from the primary artist for the album that a media item belongs to.\nlet MPMediaItemPropertyArtistPersistentID: String\nThe key for the persistent identifier for an artist.\nlet MPMediaItemPropertyComposerPersistentID: String\nThe persistent identifier for a composer.\nlet MPMediaItemPropertyGenre: String\nThe music or film genre of the media item.\nlet MPMediaItemPropertyGenrePersistentID: String\nThe persistent identifier for a genre.\nlet MPMediaItemPropertyHasProtectedAsset: String\nA Boolean value that indicates the media item has DRM protection so it can’t play through a standard playback API.\nlet MPMediaItemPropertyIsCompilation: String\nA Boolean value that indicates whether the media item is part of a compilation.\nlet MPMediaItemPropertyIsCloudItem: String\nA Boolean value that indicates whether the media item is an iCloud item.\nlet MPMediaItemPropertyMediaType: String\nThe media type of the media item.\nlet MPMediaItemPropertyPersistentID: String\nThe key for the persistent identifier for the media item.\nlet MPMediaItemPropertyPlayCount: String\nThe number of times the user plays the media item.\nlet MPMediaItemPropertyPodcastPersistentID: String\nThe persistent identifier for an audio podcast.\nlet MPMediaItemPropertyPodcastTitle: String\nThe title of a podcast.\nlet MPMediaItemPropertyTitle: String\nThe title or name of the media item."
  },
  {
    "title": "MPMediaItemPropertyDiscCount",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmediaitempropertydisccount",
    "html": "Discussion\n\nThis value is an NSNumber object that represents an NSUInteger data type.\n\nSee Also\nProperty keys\nlet MPMediaItemPropertyPlaybackDuration: String\nThe playback duration of the media item.\nlet MPMediaItemPropertyAlbumTrackNumber: String\nThe track number of the media item, for a media item that is part of an album.\nlet MPMediaItemPropertyAlbumTrackCount: String\nThe number of tracks for the album that contains the media item.\nlet MPMediaItemPropertyDiscNumber: String\nThe disc number of the media item, for a media item that is part of a multidisc album.\nlet MPMediaItemPropertyArtwork: String\nThe artwork image for the media item.\nlet MPMediaItemPropertyLyrics: String\nThe lyrics for the media item.\nlet MPMediaItemPropertyReleaseDate: String\nThe date of the media item’s first public release.\nlet MPMediaItemPropertyBeatsPerMinute: String\nThe number of musical beats per minute for the media item.\nlet MPMediaItemPropertyComments: String\nTextual information about the media item.\nlet MPMediaItemPropertyAssetURL: String\nA URL that points to the media item.\nlet MPMediaItemPropertyIsExplicit: String\nA Boolean value that indicates whether the media item contains explicit (adult) lyrics or language.\nlet MPMediaItemPropertyIsPreorder: String\nA Boolean value that indicates whether the media item is a preorder.\nlet MPMediaItemPropertyPlaybackStoreID: String\nThe identifier for enqueueing store tracks."
  },
  {
    "title": "MPMediaItemPropertyMediaType",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmediaitempropertymediatype",
    "html": "Discussion\n\nThis value is an NSNumber object that represents an NSInteger data type. The NSInteger value represents a bit field flag, or set of flags, from MPMediaType.\n\nCan be used to build a media property predicate as described in MPMediaPropertyPredicate.\n\nSee Also\nFilterable property keys\nlet MPMediaItemPropertyAlbumArtist: String\nThe primary performing artist for an album.\nlet MPMediaItemPropertyAlbumArtistPersistentID: String\nThe persistent identifier for an album artist.\nlet MPMediaItemPropertyAlbumPersistentID: String\nThe key for the persistent identifier for an album.\nlet MPMediaItemPropertyAlbumTitle: String\nThe title of an album.\nlet MPMediaItemPropertyArtist: String\nThe performing artists for a media item — which may vary from the primary artist for the album that a media item belongs to.\nlet MPMediaItemPropertyArtistPersistentID: String\nThe key for the persistent identifier for an artist.\nlet MPMediaItemPropertyComposer: String\nThe musical composer for the media item.\nlet MPMediaItemPropertyComposerPersistentID: String\nThe persistent identifier for a composer.\nlet MPMediaItemPropertyGenre: String\nThe music or film genre of the media item.\nlet MPMediaItemPropertyGenrePersistentID: String\nThe persistent identifier for a genre.\nlet MPMediaItemPropertyHasProtectedAsset: String\nA Boolean value that indicates the media item has DRM protection so it can’t play through a standard playback API.\nlet MPMediaItemPropertyIsCompilation: String\nA Boolean value that indicates whether the media item is part of a compilation.\nlet MPMediaItemPropertyIsCloudItem: String\nA Boolean value that indicates whether the media item is an iCloud item.\nlet MPMediaItemPropertyPersistentID: String\nThe key for the persistent identifier for the media item.\nlet MPMediaItemPropertyPlayCount: String\nThe number of times the user plays the media item.\nlet MPMediaItemPropertyPodcastPersistentID: String\nThe persistent identifier for an audio podcast.\nlet MPMediaItemPropertyPodcastTitle: String\nThe title of a podcast.\nlet MPMediaItemPropertyTitle: String\nThe title or name of the media item."
  },
  {
    "title": "isPreparedToPlay",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmediaplayback/1616254-ispreparedtoplay",
    "html": "Required\n\nDiscussion\n\nWhen set to true, the media player is ready to begin playing the queued media items.\n\nSee Also\nStarting and stopping playback\nfunc play()\nInitiates playback of the current item.\n\nRequired\n\nfunc pause()\nPauses playback of the current item.\n\nRequired\n\nfunc stop()\nEnds playback of the current item.\n\nRequired\n\nfunc prepareToPlay()\nPrepares a media player for playback.\n\nRequired"
  },
  {
    "title": "MPMediaItemPropertyArtwork",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmediaitempropertyartwork",
    "html": "Discussion\n\nThis value is a media item image, described in MPMediaItemArtwork.\n\nSee Also\nProperty keys\nlet MPMediaItemPropertyPlaybackDuration: String\nThe playback duration of the media item.\nlet MPMediaItemPropertyAlbumTrackNumber: String\nThe track number of the media item, for a media item that is part of an album.\nlet MPMediaItemPropertyAlbumTrackCount: String\nThe number of tracks for the album that contains the media item.\nlet MPMediaItemPropertyDiscNumber: String\nThe disc number of the media item, for a media item that is part of a multidisc album.\nlet MPMediaItemPropertyDiscCount: String\nThe number of discs for the album that contains the media item.\nlet MPMediaItemPropertyLyrics: String\nThe lyrics for the media item.\nlet MPMediaItemPropertyReleaseDate: String\nThe date of the media item’s first public release.\nlet MPMediaItemPropertyBeatsPerMinute: String\nThe number of musical beats per minute for the media item.\nlet MPMediaItemPropertyComments: String\nTextual information about the media item.\nlet MPMediaItemPropertyAssetURL: String\nA URL that points to the media item.\nlet MPMediaItemPropertyIsExplicit: String\nA Boolean value that indicates whether the media item contains explicit (adult) lyrics or language.\nlet MPMediaItemPropertyIsPreorder: String\nA Boolean value that indicates whether the media item is a preorder.\nlet MPMediaItemPropertyPlaybackStoreID: String\nThe identifier for enqueueing store tracks."
  },
  {
    "title": "applicationQueuePlayer",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmusicplayercontroller/2817540-applicationqueueplayer",
    "html": "Return Value\n\nThe application queue music player.\n\nDiscussion\n\nThe application queue music player plays music locally within your app. The application queue music player provides more functionality and greater control over the music played than the application music player.\n\nThe music player doesn’t affect the Music app’s state. When your app moves to the background, the music player stops playing the current media.\n\nSee Also\nGetting a music player\nclass var applicationMusicPlayer: MPMusicPlayerController\nReturns the application music player.\nclass var systemMusicPlayer: any MPMusicPlayerController & MPSystemMusicPlayerController\nReturns the system music player, which controls the Music app’s state."
  },
  {
    "title": "beginSeekingBackward()",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmediaplayback/1616248-beginseekingbackward",
    "html": "Required\n\nDiscussion\n\nUse this method to move the current playback position backward in time at an accelerated rate. Seeking begins when you call this method and continues until you call the endSeeking() method.\n\nThis method has no effect on streamed content.\n\nSee Also\nSeeking within media\nfunc beginSeekingForward()\nBegins seeking forward through the media content.\n\nRequired\n\nfunc endSeeking()\nEnds forward and backward seeking through the media content.\n\nRequired"
  },
  {
    "title": "stop()",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmediaplayback/1616257-stop",
    "html": "Required\n\nDiscussion\n\nThis method stops playback of the current item and clears the playback queue. You must provide a new playback queue before playing new media items.\n\nSee Also\nStarting and stopping playback\nfunc play()\nInitiates playback of the current item.\n\nRequired\n\nfunc pause()\nPauses playback of the current item.\n\nRequired\n\nfunc prepareToPlay()\nPrepares a media player for playback.\n\nRequired\n\nvar isPreparedToPlay: Bool\nA Boolean value indicating whether a media player is ready to play.\n\nRequired"
  },
  {
    "title": "systemMusicPlayer",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmusicplayercontroller/1624179-systemmusicplayer",
    "html": "Return Value\n\nThe system music player.\n\nDiscussion\n\nThe System music player employs the Music app on your behalf. On instantiation, it takes on the current Music app state and controls that state as your app runs. Specifically, the shared state includes the following:\n\nRepeat mode (see MPMusicRepeatMode)\n\nShuffle mode (see MPMusicShuffleMode)\n\nNow-playing item (see nowPlayingItem)\n\nPlayback state (see playbackState)\n\nOther aspects of the Music app’s state aren’t shared. Music that’s playing continues to play when your app moves to the background.\n\nSee Also\nGetting a music player\nclass var applicationMusicPlayer: MPMusicPlayerController\nReturns the application music player.\nclass var applicationQueuePlayer: MPMusicPlayerApplicationController\nReturns the application queue music player."
  },
  {
    "title": "genre",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmediaitem/1621762-genre",
    "html": "See Also\nMedia item properties\nvar albumArtist: String?\nThe primary performing artist for an album.\nvar albumArtistPersistentID: MPMediaEntityPersistentID\nThe persistent identifier for the primary performing artist for an album.\nvar albumPersistentID: MPMediaEntityPersistentID\nThe persistent identifier for an album.\nvar albumTitle: String?\nThe title of an album, such as Live on Mars, rather than the title of an individual song on the album, such as “Crater Dance.”\nvar albumTrackCount: Int\nThe number of tracks for the album that contains the media item.\nvar albumTrackNumber: Int\nThe track number of the media item, for a media item that’s part of an album.\nvar artist: String?\nThe performing artists for a media item, which may vary from the primary artist for the album that a media item belongs to.\nvar artistPersistentID: MPMediaEntityPersistentID\nThe persistent identifier for an artist.\nvar artwork: MPMediaItemArtwork?\nThe artwork image for the media item.\nvar assetURL: URL?\nThe URL that points to the media item.\nvar beatsPerMinute: Int\nThe number of musical beats per minute for the media item.\nvar bookmarkTime: TimeInterval\nThe time of the user’s most recent interaction with the bookmark in the media item.\nvar isCloudItem: Bool\nA Boolean value that indicates whether the media item is an iCloud Music Library item.\nvar comments: String?\nTextual information about the media item.\nvar isCompilation: Bool\nA Boolean value that indicates whether the media item is part of a compilation.\nvar isPreorder: Bool\nA Boolean value that indicates whether the media item is a preorder.\nvar composer: String?\nThe musical composer for the media item.\nvar composerPersistentID: MPMediaEntityPersistentID\nThe persistent identifier for a composer.\nvar dateAdded: Date\nThe date the user adds the media item to the library.\nvar discCount: Int\nThe number of discs for the album that contains the media item.\nvar discNumber: Int\nThe disc number of the media item, for a media item that’s part of a multidisc album.\nvar isExplicitItem: Bool\nA Boolean value that indicates whether the media item has explicit (adult) lyrics or language.\nvar genrePersistentID: MPMediaEntityPersistentID\nThe persistent identifier for a genre.\nvar lastPlayedDate: Date?\nThe most recent play date of the media item.\nvar lyrics: String?\nThe lyrics for the media item.\nvar mediaType: MPMediaType\nThe media type of the media item.\nvar persistentID: MPMediaEntityPersistentID\nThe persistent identifier for the media item.\nvar playCount: Int\nThe number of times the user plays the media item.\nvar playbackDuration: TimeInterval\nThe playback duration of the media item.\nvar playbackStoreID: String\nThe ID of a media item from the Apple Music catalog.\nvar podcastPersistentID: MPMediaEntityPersistentID\nThe persistent identifier for an audio podcast.\nvar podcastTitle: String?\nThe title of a podcast, such as This Martian Drudgery, rather than the title of an individual episode of a podcast, such as “Episode 12: Another Cold Day at the Pole.”\nvar hasProtectedAsset: Bool\nA Boolean value that indicates whether the media item has a protected asset.\nvar rating: Int\nThe user-specified rating of the media item.\nvar releaseDate: Date?\nThe date of the media item’s first public release.\nvar skipCount: Int\nThe number of times the user skips playing the media item.\nvar title: String?\nThe title or name of the media item.\nvar userGrouping: String?\nGrouping information for the media item."
  },
  {
    "title": "discNumber",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmediaitem/1621749-discnumber",
    "html": "See Also\nMedia item properties\nvar albumArtist: String?\nThe primary performing artist for an album.\nvar albumArtistPersistentID: MPMediaEntityPersistentID\nThe persistent identifier for the primary performing artist for an album.\nvar albumPersistentID: MPMediaEntityPersistentID\nThe persistent identifier for an album.\nvar albumTitle: String?\nThe title of an album, such as Live on Mars, rather than the title of an individual song on the album, such as “Crater Dance.”\nvar albumTrackCount: Int\nThe number of tracks for the album that contains the media item.\nvar albumTrackNumber: Int\nThe track number of the media item, for a media item that’s part of an album.\nvar artist: String?\nThe performing artists for a media item, which may vary from the primary artist for the album that a media item belongs to.\nvar artistPersistentID: MPMediaEntityPersistentID\nThe persistent identifier for an artist.\nvar artwork: MPMediaItemArtwork?\nThe artwork image for the media item.\nvar assetURL: URL?\nThe URL that points to the media item.\nvar beatsPerMinute: Int\nThe number of musical beats per minute for the media item.\nvar bookmarkTime: TimeInterval\nThe time of the user’s most recent interaction with the bookmark in the media item.\nvar isCloudItem: Bool\nA Boolean value that indicates whether the media item is an iCloud Music Library item.\nvar comments: String?\nTextual information about the media item.\nvar isCompilation: Bool\nA Boolean value that indicates whether the media item is part of a compilation.\nvar isPreorder: Bool\nA Boolean value that indicates whether the media item is a preorder.\nvar composer: String?\nThe musical composer for the media item.\nvar composerPersistentID: MPMediaEntityPersistentID\nThe persistent identifier for a composer.\nvar dateAdded: Date\nThe date the user adds the media item to the library.\nvar discCount: Int\nThe number of discs for the album that contains the media item.\nvar isExplicitItem: Bool\nA Boolean value that indicates whether the media item has explicit (adult) lyrics or language.\nvar genre: String?\nThe music or film genre of the media item.\nvar genrePersistentID: MPMediaEntityPersistentID\nThe persistent identifier for a genre.\nvar lastPlayedDate: Date?\nThe most recent play date of the media item.\nvar lyrics: String?\nThe lyrics for the media item.\nvar mediaType: MPMediaType\nThe media type of the media item.\nvar persistentID: MPMediaEntityPersistentID\nThe persistent identifier for the media item.\nvar playCount: Int\nThe number of times the user plays the media item.\nvar playbackDuration: TimeInterval\nThe playback duration of the media item.\nvar playbackStoreID: String\nThe ID of a media item from the Apple Music catalog.\nvar podcastPersistentID: MPMediaEntityPersistentID\nThe persistent identifier for an audio podcast.\nvar podcastTitle: String?\nThe title of a podcast, such as This Martian Drudgery, rather than the title of an individual episode of a podcast, such as “Episode 12: Another Cold Day at the Pole.”\nvar hasProtectedAsset: Bool\nA Boolean value that indicates whether the media item has a protected asset.\nvar rating: Int\nThe user-specified rating of the media item.\nvar releaseDate: Date?\nThe date of the media item’s first public release.\nvar skipCount: Int\nThe number of times the user skips playing the media item.\nvar title: String?\nThe title or name of the media item.\nvar userGrouping: String?\nGrouping information for the media item."
  },
  {
    "title": "discCount",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmediaitem/1621702-disccount",
    "html": "See Also\nMedia item properties\nvar albumArtist: String?\nThe primary performing artist for an album.\nvar albumArtistPersistentID: MPMediaEntityPersistentID\nThe persistent identifier for the primary performing artist for an album.\nvar albumPersistentID: MPMediaEntityPersistentID\nThe persistent identifier for an album.\nvar albumTitle: String?\nThe title of an album, such as Live on Mars, rather than the title of an individual song on the album, such as “Crater Dance.”\nvar albumTrackCount: Int\nThe number of tracks for the album that contains the media item.\nvar albumTrackNumber: Int\nThe track number of the media item, for a media item that’s part of an album.\nvar artist: String?\nThe performing artists for a media item, which may vary from the primary artist for the album that a media item belongs to.\nvar artistPersistentID: MPMediaEntityPersistentID\nThe persistent identifier for an artist.\nvar artwork: MPMediaItemArtwork?\nThe artwork image for the media item.\nvar assetURL: URL?\nThe URL that points to the media item.\nvar beatsPerMinute: Int\nThe number of musical beats per minute for the media item.\nvar bookmarkTime: TimeInterval\nThe time of the user’s most recent interaction with the bookmark in the media item.\nvar isCloudItem: Bool\nA Boolean value that indicates whether the media item is an iCloud Music Library item.\nvar comments: String?\nTextual information about the media item.\nvar isCompilation: Bool\nA Boolean value that indicates whether the media item is part of a compilation.\nvar isPreorder: Bool\nA Boolean value that indicates whether the media item is a preorder.\nvar composer: String?\nThe musical composer for the media item.\nvar composerPersistentID: MPMediaEntityPersistentID\nThe persistent identifier for a composer.\nvar dateAdded: Date\nThe date the user adds the media item to the library.\nvar discNumber: Int\nThe disc number of the media item, for a media item that’s part of a multidisc album.\nvar isExplicitItem: Bool\nA Boolean value that indicates whether the media item has explicit (adult) lyrics or language.\nvar genre: String?\nThe music or film genre of the media item.\nvar genrePersistentID: MPMediaEntityPersistentID\nThe persistent identifier for a genre.\nvar lastPlayedDate: Date?\nThe most recent play date of the media item.\nvar lyrics: String?\nThe lyrics for the media item.\nvar mediaType: MPMediaType\nThe media type of the media item.\nvar persistentID: MPMediaEntityPersistentID\nThe persistent identifier for the media item.\nvar playCount: Int\nThe number of times the user plays the media item.\nvar playbackDuration: TimeInterval\nThe playback duration of the media item.\nvar playbackStoreID: String\nThe ID of a media item from the Apple Music catalog.\nvar podcastPersistentID: MPMediaEntityPersistentID\nThe persistent identifier for an audio podcast.\nvar podcastTitle: String?\nThe title of a podcast, such as This Martian Drudgery, rather than the title of an individual episode of a podcast, such as “Episode 12: Another Cold Day at the Pole.”\nvar hasProtectedAsset: Bool\nA Boolean value that indicates whether the media item has a protected asset.\nvar rating: Int\nThe user-specified rating of the media item.\nvar releaseDate: Date?\nThe date of the media item’s first public release.\nvar skipCount: Int\nThe number of times the user skips playing the media item.\nvar title: String?\nThe title or name of the media item.\nvar userGrouping: String?\nGrouping information for the media item."
  },
  {
    "title": "dateAdded",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmediaitem/2213358-dateadded",
    "html": "See Also\nMedia item properties\nvar albumArtist: String?\nThe primary performing artist for an album.\nvar albumArtistPersistentID: MPMediaEntityPersistentID\nThe persistent identifier for the primary performing artist for an album.\nvar albumPersistentID: MPMediaEntityPersistentID\nThe persistent identifier for an album.\nvar albumTitle: String?\nThe title of an album, such as Live on Mars, rather than the title of an individual song on the album, such as “Crater Dance.”\nvar albumTrackCount: Int\nThe number of tracks for the album that contains the media item.\nvar albumTrackNumber: Int\nThe track number of the media item, for a media item that’s part of an album.\nvar artist: String?\nThe performing artists for a media item, which may vary from the primary artist for the album that a media item belongs to.\nvar artistPersistentID: MPMediaEntityPersistentID\nThe persistent identifier for an artist.\nvar artwork: MPMediaItemArtwork?\nThe artwork image for the media item.\nvar assetURL: URL?\nThe URL that points to the media item.\nvar beatsPerMinute: Int\nThe number of musical beats per minute for the media item.\nvar bookmarkTime: TimeInterval\nThe time of the user’s most recent interaction with the bookmark in the media item.\nvar isCloudItem: Bool\nA Boolean value that indicates whether the media item is an iCloud Music Library item.\nvar comments: String?\nTextual information about the media item.\nvar isCompilation: Bool\nA Boolean value that indicates whether the media item is part of a compilation.\nvar isPreorder: Bool\nA Boolean value that indicates whether the media item is a preorder.\nvar composer: String?\nThe musical composer for the media item.\nvar composerPersistentID: MPMediaEntityPersistentID\nThe persistent identifier for a composer.\nvar discCount: Int\nThe number of discs for the album that contains the media item.\nvar discNumber: Int\nThe disc number of the media item, for a media item that’s part of a multidisc album.\nvar isExplicitItem: Bool\nA Boolean value that indicates whether the media item has explicit (adult) lyrics or language.\nvar genre: String?\nThe music or film genre of the media item.\nvar genrePersistentID: MPMediaEntityPersistentID\nThe persistent identifier for a genre.\nvar lastPlayedDate: Date?\nThe most recent play date of the media item.\nvar lyrics: String?\nThe lyrics for the media item.\nvar mediaType: MPMediaType\nThe media type of the media item.\nvar persistentID: MPMediaEntityPersistentID\nThe persistent identifier for the media item.\nvar playCount: Int\nThe number of times the user plays the media item.\nvar playbackDuration: TimeInterval\nThe playback duration of the media item.\nvar playbackStoreID: String\nThe ID of a media item from the Apple Music catalog.\nvar podcastPersistentID: MPMediaEntityPersistentID\nThe persistent identifier for an audio podcast.\nvar podcastTitle: String?\nThe title of a podcast, such as This Martian Drudgery, rather than the title of an individual episode of a podcast, such as “Episode 12: Another Cold Day at the Pole.”\nvar hasProtectedAsset: Bool\nA Boolean value that indicates whether the media item has a protected asset.\nvar rating: Int\nThe user-specified rating of the media item.\nvar releaseDate: Date?\nThe date of the media item’s first public release.\nvar skipCount: Int\nThe number of times the user skips playing the media item.\nvar title: String?\nThe title or name of the media item.\nvar userGrouping: String?\nGrouping information for the media item."
  },
  {
    "title": "genrePersistentID",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmediaitem/1621738-genrepersistentid",
    "html": "See Also\nMedia item properties\nvar albumArtist: String?\nThe primary performing artist for an album.\nvar albumArtistPersistentID: MPMediaEntityPersistentID\nThe persistent identifier for the primary performing artist for an album.\nvar albumPersistentID: MPMediaEntityPersistentID\nThe persistent identifier for an album.\nvar albumTitle: String?\nThe title of an album, such as Live on Mars, rather than the title of an individual song on the album, such as “Crater Dance.”\nvar albumTrackCount: Int\nThe number of tracks for the album that contains the media item.\nvar albumTrackNumber: Int\nThe track number of the media item, for a media item that’s part of an album.\nvar artist: String?\nThe performing artists for a media item, which may vary from the primary artist for the album that a media item belongs to.\nvar artistPersistentID: MPMediaEntityPersistentID\nThe persistent identifier for an artist.\nvar artwork: MPMediaItemArtwork?\nThe artwork image for the media item.\nvar assetURL: URL?\nThe URL that points to the media item.\nvar beatsPerMinute: Int\nThe number of musical beats per minute for the media item.\nvar bookmarkTime: TimeInterval\nThe time of the user’s most recent interaction with the bookmark in the media item.\nvar isCloudItem: Bool\nA Boolean value that indicates whether the media item is an iCloud Music Library item.\nvar comments: String?\nTextual information about the media item.\nvar isCompilation: Bool\nA Boolean value that indicates whether the media item is part of a compilation.\nvar isPreorder: Bool\nA Boolean value that indicates whether the media item is a preorder.\nvar composer: String?\nThe musical composer for the media item.\nvar composerPersistentID: MPMediaEntityPersistentID\nThe persistent identifier for a composer.\nvar dateAdded: Date\nThe date the user adds the media item to the library.\nvar discCount: Int\nThe number of discs for the album that contains the media item.\nvar discNumber: Int\nThe disc number of the media item, for a media item that’s part of a multidisc album.\nvar isExplicitItem: Bool\nA Boolean value that indicates whether the media item has explicit (adult) lyrics or language.\nvar genre: String?\nThe music or film genre of the media item.\nvar lastPlayedDate: Date?\nThe most recent play date of the media item.\nvar lyrics: String?\nThe lyrics for the media item.\nvar mediaType: MPMediaType\nThe media type of the media item.\nvar persistentID: MPMediaEntityPersistentID\nThe persistent identifier for the media item.\nvar playCount: Int\nThe number of times the user plays the media item.\nvar playbackDuration: TimeInterval\nThe playback duration of the media item.\nvar playbackStoreID: String\nThe ID of a media item from the Apple Music catalog.\nvar podcastPersistentID: MPMediaEntityPersistentID\nThe persistent identifier for an audio podcast.\nvar podcastTitle: String?\nThe title of a podcast, such as This Martian Drudgery, rather than the title of an individual episode of a podcast, such as “Episode 12: Another Cold Day at the Pole.”\nvar hasProtectedAsset: Bool\nA Boolean value that indicates whether the media item has a protected asset.\nvar rating: Int\nThe user-specified rating of the media item.\nvar releaseDate: Date?\nThe date of the media item’s first public release.\nvar skipCount: Int\nThe number of times the user skips playing the media item.\nvar title: String?\nThe title or name of the media item.\nvar userGrouping: String?\nGrouping information for the media item."
  },
  {
    "title": "lastPlayedDate",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmediaitem/1621719-lastplayeddate",
    "html": "See Also\nMedia item properties\nvar albumArtist: String?\nThe primary performing artist for an album.\nvar albumArtistPersistentID: MPMediaEntityPersistentID\nThe persistent identifier for the primary performing artist for an album.\nvar albumPersistentID: MPMediaEntityPersistentID\nThe persistent identifier for an album.\nvar albumTitle: String?\nThe title of an album, such as Live on Mars, rather than the title of an individual song on the album, such as “Crater Dance.”\nvar albumTrackCount: Int\nThe number of tracks for the album that contains the media item.\nvar albumTrackNumber: Int\nThe track number of the media item, for a media item that’s part of an album.\nvar artist: String?\nThe performing artists for a media item, which may vary from the primary artist for the album that a media item belongs to.\nvar artistPersistentID: MPMediaEntityPersistentID\nThe persistent identifier for an artist.\nvar artwork: MPMediaItemArtwork?\nThe artwork image for the media item.\nvar assetURL: URL?\nThe URL that points to the media item.\nvar beatsPerMinute: Int\nThe number of musical beats per minute for the media item.\nvar bookmarkTime: TimeInterval\nThe time of the user’s most recent interaction with the bookmark in the media item.\nvar isCloudItem: Bool\nA Boolean value that indicates whether the media item is an iCloud Music Library item.\nvar comments: String?\nTextual information about the media item.\nvar isCompilation: Bool\nA Boolean value that indicates whether the media item is part of a compilation.\nvar isPreorder: Bool\nA Boolean value that indicates whether the media item is a preorder.\nvar composer: String?\nThe musical composer for the media item.\nvar composerPersistentID: MPMediaEntityPersistentID\nThe persistent identifier for a composer.\nvar dateAdded: Date\nThe date the user adds the media item to the library.\nvar discCount: Int\nThe number of discs for the album that contains the media item.\nvar discNumber: Int\nThe disc number of the media item, for a media item that’s part of a multidisc album.\nvar isExplicitItem: Bool\nA Boolean value that indicates whether the media item has explicit (adult) lyrics or language.\nvar genre: String?\nThe music or film genre of the media item.\nvar genrePersistentID: MPMediaEntityPersistentID\nThe persistent identifier for a genre.\nvar lyrics: String?\nThe lyrics for the media item.\nvar mediaType: MPMediaType\nThe media type of the media item.\nvar persistentID: MPMediaEntityPersistentID\nThe persistent identifier for the media item.\nvar playCount: Int\nThe number of times the user plays the media item.\nvar playbackDuration: TimeInterval\nThe playback duration of the media item.\nvar playbackStoreID: String\nThe ID of a media item from the Apple Music catalog.\nvar podcastPersistentID: MPMediaEntityPersistentID\nThe persistent identifier for an audio podcast.\nvar podcastTitle: String?\nThe title of a podcast, such as This Martian Drudgery, rather than the title of an individual episode of a podcast, such as “Episode 12: Another Cold Day at the Pole.”\nvar hasProtectedAsset: Bool\nA Boolean value that indicates whether the media item has a protected asset.\nvar rating: Int\nThe user-specified rating of the media item.\nvar releaseDate: Date?\nThe date of the media item’s first public release.\nvar skipCount: Int\nThe number of times the user skips playing the media item.\nvar title: String?\nThe title or name of the media item.\nvar userGrouping: String?\nGrouping information for the media item."
  },
  {
    "title": "mediaType",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmediaitem/1621753-mediatype",
    "html": "See Also\nMedia item properties\nvar albumArtist: String?\nThe primary performing artist for an album.\nvar albumArtistPersistentID: MPMediaEntityPersistentID\nThe persistent identifier for the primary performing artist for an album.\nvar albumPersistentID: MPMediaEntityPersistentID\nThe persistent identifier for an album.\nvar albumTitle: String?\nThe title of an album, such as Live on Mars, rather than the title of an individual song on the album, such as “Crater Dance.”\nvar albumTrackCount: Int\nThe number of tracks for the album that contains the media item.\nvar albumTrackNumber: Int\nThe track number of the media item, for a media item that’s part of an album.\nvar artist: String?\nThe performing artists for a media item, which may vary from the primary artist for the album that a media item belongs to.\nvar artistPersistentID: MPMediaEntityPersistentID\nThe persistent identifier for an artist.\nvar artwork: MPMediaItemArtwork?\nThe artwork image for the media item.\nvar assetURL: URL?\nThe URL that points to the media item.\nvar beatsPerMinute: Int\nThe number of musical beats per minute for the media item.\nvar bookmarkTime: TimeInterval\nThe time of the user’s most recent interaction with the bookmark in the media item.\nvar isCloudItem: Bool\nA Boolean value that indicates whether the media item is an iCloud Music Library item.\nvar comments: String?\nTextual information about the media item.\nvar isCompilation: Bool\nA Boolean value that indicates whether the media item is part of a compilation.\nvar isPreorder: Bool\nA Boolean value that indicates whether the media item is a preorder.\nvar composer: String?\nThe musical composer for the media item.\nvar composerPersistentID: MPMediaEntityPersistentID\nThe persistent identifier for a composer.\nvar dateAdded: Date\nThe date the user adds the media item to the library.\nvar discCount: Int\nThe number of discs for the album that contains the media item.\nvar discNumber: Int\nThe disc number of the media item, for a media item that’s part of a multidisc album.\nvar isExplicitItem: Bool\nA Boolean value that indicates whether the media item has explicit (adult) lyrics or language.\nvar genre: String?\nThe music or film genre of the media item.\nvar genrePersistentID: MPMediaEntityPersistentID\nThe persistent identifier for a genre.\nvar lastPlayedDate: Date?\nThe most recent play date of the media item.\nvar lyrics: String?\nThe lyrics for the media item.\nvar persistentID: MPMediaEntityPersistentID\nThe persistent identifier for the media item.\nvar playCount: Int\nThe number of times the user plays the media item.\nvar playbackDuration: TimeInterval\nThe playback duration of the media item.\nvar playbackStoreID: String\nThe ID of a media item from the Apple Music catalog.\nvar podcastPersistentID: MPMediaEntityPersistentID\nThe persistent identifier for an audio podcast.\nvar podcastTitle: String?\nThe title of a podcast, such as This Martian Drudgery, rather than the title of an individual episode of a podcast, such as “Episode 12: Another Cold Day at the Pole.”\nvar hasProtectedAsset: Bool\nA Boolean value that indicates whether the media item has a protected asset.\nvar rating: Int\nThe user-specified rating of the media item.\nvar releaseDate: Date?\nThe date of the media item’s first public release.\nvar skipCount: Int\nThe number of times the user skips playing the media item.\nvar title: String?\nThe title or name of the media item.\nvar userGrouping: String?\nGrouping information for the media item."
  },
  {
    "title": "lyrics",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmediaitem/1621684-lyrics",
    "html": "See Also\nMedia item properties\nvar albumArtist: String?\nThe primary performing artist for an album.\nvar albumArtistPersistentID: MPMediaEntityPersistentID\nThe persistent identifier for the primary performing artist for an album.\nvar albumPersistentID: MPMediaEntityPersistentID\nThe persistent identifier for an album.\nvar albumTitle: String?\nThe title of an album, such as Live on Mars, rather than the title of an individual song on the album, such as “Crater Dance.”\nvar albumTrackCount: Int\nThe number of tracks for the album that contains the media item.\nvar albumTrackNumber: Int\nThe track number of the media item, for a media item that’s part of an album.\nvar artist: String?\nThe performing artists for a media item, which may vary from the primary artist for the album that a media item belongs to.\nvar artistPersistentID: MPMediaEntityPersistentID\nThe persistent identifier for an artist.\nvar artwork: MPMediaItemArtwork?\nThe artwork image for the media item.\nvar assetURL: URL?\nThe URL that points to the media item.\nvar beatsPerMinute: Int\nThe number of musical beats per minute for the media item.\nvar bookmarkTime: TimeInterval\nThe time of the user’s most recent interaction with the bookmark in the media item.\nvar isCloudItem: Bool\nA Boolean value that indicates whether the media item is an iCloud Music Library item.\nvar comments: String?\nTextual information about the media item.\nvar isCompilation: Bool\nA Boolean value that indicates whether the media item is part of a compilation.\nvar isPreorder: Bool\nA Boolean value that indicates whether the media item is a preorder.\nvar composer: String?\nThe musical composer for the media item.\nvar composerPersistentID: MPMediaEntityPersistentID\nThe persistent identifier for a composer.\nvar dateAdded: Date\nThe date the user adds the media item to the library.\nvar discCount: Int\nThe number of discs for the album that contains the media item.\nvar discNumber: Int\nThe disc number of the media item, for a media item that’s part of a multidisc album.\nvar isExplicitItem: Bool\nA Boolean value that indicates whether the media item has explicit (adult) lyrics or language.\nvar genre: String?\nThe music or film genre of the media item.\nvar genrePersistentID: MPMediaEntityPersistentID\nThe persistent identifier for a genre.\nvar lastPlayedDate: Date?\nThe most recent play date of the media item.\nvar mediaType: MPMediaType\nThe media type of the media item.\nvar persistentID: MPMediaEntityPersistentID\nThe persistent identifier for the media item.\nvar playCount: Int\nThe number of times the user plays the media item.\nvar playbackDuration: TimeInterval\nThe playback duration of the media item.\nvar playbackStoreID: String\nThe ID of a media item from the Apple Music catalog.\nvar podcastPersistentID: MPMediaEntityPersistentID\nThe persistent identifier for an audio podcast.\nvar podcastTitle: String?\nThe title of a podcast, such as This Martian Drudgery, rather than the title of an individual episode of a podcast, such as “Episode 12: Another Cold Day at the Pole.”\nvar hasProtectedAsset: Bool\nA Boolean value that indicates whether the media item has a protected asset.\nvar rating: Int\nThe user-specified rating of the media item.\nvar releaseDate: Date?\nThe date of the media item’s first public release.\nvar skipCount: Int\nThe number of times the user skips playing the media item.\nvar title: String?\nThe title or name of the media item.\nvar userGrouping: String?\nGrouping information for the media item."
  },
  {
    "title": "persistentID",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmediaitem/1621766-persistentid",
    "html": "See Also\nMedia item properties\nvar albumArtist: String?\nThe primary performing artist for an album.\nvar albumArtistPersistentID: MPMediaEntityPersistentID\nThe persistent identifier for the primary performing artist for an album.\nvar albumPersistentID: MPMediaEntityPersistentID\nThe persistent identifier for an album.\nvar albumTitle: String?\nThe title of an album, such as Live on Mars, rather than the title of an individual song on the album, such as “Crater Dance.”\nvar albumTrackCount: Int\nThe number of tracks for the album that contains the media item.\nvar albumTrackNumber: Int\nThe track number of the media item, for a media item that’s part of an album.\nvar artist: String?\nThe performing artists for a media item, which may vary from the primary artist for the album that a media item belongs to.\nvar artistPersistentID: MPMediaEntityPersistentID\nThe persistent identifier for an artist.\nvar artwork: MPMediaItemArtwork?\nThe artwork image for the media item.\nvar assetURL: URL?\nThe URL that points to the media item.\nvar beatsPerMinute: Int\nThe number of musical beats per minute for the media item.\nvar bookmarkTime: TimeInterval\nThe time of the user’s most recent interaction with the bookmark in the media item.\nvar isCloudItem: Bool\nA Boolean value that indicates whether the media item is an iCloud Music Library item.\nvar comments: String?\nTextual information about the media item.\nvar isCompilation: Bool\nA Boolean value that indicates whether the media item is part of a compilation.\nvar isPreorder: Bool\nA Boolean value that indicates whether the media item is a preorder.\nvar composer: String?\nThe musical composer for the media item.\nvar composerPersistentID: MPMediaEntityPersistentID\nThe persistent identifier for a composer.\nvar dateAdded: Date\nThe date the user adds the media item to the library.\nvar discCount: Int\nThe number of discs for the album that contains the media item.\nvar discNumber: Int\nThe disc number of the media item, for a media item that’s part of a multidisc album.\nvar isExplicitItem: Bool\nA Boolean value that indicates whether the media item has explicit (adult) lyrics or language.\nvar genre: String?\nThe music or film genre of the media item.\nvar genrePersistentID: MPMediaEntityPersistentID\nThe persistent identifier for a genre.\nvar lastPlayedDate: Date?\nThe most recent play date of the media item.\nvar lyrics: String?\nThe lyrics for the media item.\nvar mediaType: MPMediaType\nThe media type of the media item.\nvar playCount: Int\nThe number of times the user plays the media item.\nvar playbackDuration: TimeInterval\nThe playback duration of the media item.\nvar playbackStoreID: String\nThe ID of a media item from the Apple Music catalog.\nvar podcastPersistentID: MPMediaEntityPersistentID\nThe persistent identifier for an audio podcast.\nvar podcastTitle: String?\nThe title of a podcast, such as This Martian Drudgery, rather than the title of an individual episode of a podcast, such as “Episode 12: Another Cold Day at the Pole.”\nvar hasProtectedAsset: Bool\nA Boolean value that indicates whether the media item has a protected asset.\nvar rating: Int\nThe user-specified rating of the media item.\nvar releaseDate: Date?\nThe date of the media item’s first public release.\nvar skipCount: Int\nThe number of times the user skips playing the media item.\nvar title: String?\nThe title or name of the media item.\nvar userGrouping: String?\nGrouping information for the media item."
  },
  {
    "title": "count",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmediaitemcollection/1614436-count",
    "html": "Discussion\n\nIn some cases, using this property is more efficient than fetching the items array and asking for the count.\n\nSee Also\nUsing a media item collection\nvar items: [MPMediaItem]\nThe media items in a media item collection.\nvar representativeItem: MPMediaItem?\nA media item whose properties are representative of the other media items in a collection.\nvar mediaTypes: MPMediaType\nThe types of the media items in a collection."
  },
  {
    "title": "init(image:)",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmediaitemartwork/1621747-init",
    "html": "Parameters\nimage\n\nThe image to use to initialize the media item artwork instance.\n\nDiscussion\n\nThis method assumes that the crop rectangle of the image matches the bounds of the image, as defined by the image’s size in points. That is, this method assumes the image you supply is tightly cropped.\n\nSee Also\nDeprecated symbols\nclass MPMovieAccessLog\nKey metrics about network playback for an associated movie player that’s playing streamed content.\nDeprecated\nclass MPMovieAccessLogEvent\nA single piece of information for a movie access log.\nDeprecated\nclass MPMovieErrorLog\nData describing network resource playback failures for the associated movie player, including timestamps indicating when each failure occurred.\nDeprecated\nclass MPMovieErrorLogEvent\nA single piece of information for a movie error log.\nDeprecated\nstruct MPMovieLoadState\nConstants describing the network load state of the movie player.\nDeprecated\nstruct MPMovieMediaTypeMask\nThe types of content available in the movie file.\nDeprecated\nclass MPMoviePlayerController\nA type of movie player that manages the playback of a movie from a file or a network stream.\nDeprecated\nclass MPMoviePlayerViewController\nA simple view controller for displaying full-screen movies.\nDeprecated\nclass MPTimedMetadata\nA timed metadata object that carries time-based information within HTTP streamed media.\nDeprecated\nclass MPPlayableContentManager\nA shared content manager for controlling interactions between your media app and system-provided or external media player interfaces.\nDeprecated\nclass MPPlayableContentManagerContext\nAn object representing the current state of the playable endpoint.\nDeprecated\nclass var iPodMusicPlayer: MPMusicPlayerController\nReturns the iPod music player, which controls the iPod app’s state.\nDeprecated\nvar imageCropRect: CGRect\nThe bounds, in points, of the content area for the full size image associated with the media item artwork.\nvar showsRouteButton: Bool\nA Boolean value that indicates whether the route button is visible in the volume view.\nDeprecated\nfunc routeButtonImage(for: UIControl.State) -> UIImage?\nReturns the button image associated with the specified control state.\nDeprecated\nfunc routeButtonRect(forBounds: CGRect) -> CGRect\nReturns the drawing rectangle for the route button.\nDeprecated\nfunc setRouteButtonImage(UIImage?, for: UIControl.State)\nAssigns a button image to the specified control states.\nDeprecated\nvar areWirelessRoutesAvailable: Bool\nA Boolean value indicating wireless routes are available.\nDeprecated\nvar isWirelessRouteActive: Bool\nA Boolean value that indicates whether the wireless route is active.\nDeprecated\nstatic let MPVolumeViewWirelessRouteActiveDidChange: NSNotification.Name\nIndicates the active wireless route changed.\nDeprecated\nstatic let MPVolumeViewWirelessRoutesAvailableDidChange: NSNotification.Name\nIndicates the available wireless routes changed.\nDeprecated\nGlobal volume setting methods\nGlobal functions for setting the volume alert window status."
  },
  {
    "title": "image(at:)",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmediaitemartwork/1621736-image",
    "html": "Parameters\nsize\n\nThe size, in points, for the new UIImage object.\n\nReturn Value\n\nThe artwork at the requested size.\n\nDiscussion\n\nThe returned image is the smallest available image that’s at least as large as the requested size.\n\nSee Also\nUsing a media item image\nvar bounds: CGRect\nThe maximum size, in points, of the image associated with the media item artwork.\nRelated Documentation\niPod Library Access Programming Guide"
  },
  {
    "title": "mediaTypes",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmediaitemcollection/1614437-mediatypes",
    "html": "Discussion\n\nThe MPMediaType enumeration in MPMediaItem lists the media types.\n\nSee Also\nUsing a media item collection\nvar items: [MPMediaItem]\nThe media items in a media item collection.\nvar representativeItem: MPMediaItem?\nA media item whose properties are representative of the other media items in a collection.\nvar count: Int\nThe number of media items in a collection."
  },
  {
    "title": "imageCropRect",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmediaitemartwork/1621760-imagecroprect",
    "html": "See Also\nDeprecated symbols\nclass MPMovieAccessLog\nKey metrics about network playback for an associated movie player that’s playing streamed content.\nDeprecated\nclass MPMovieAccessLogEvent\nA single piece of information for a movie access log.\nDeprecated\nclass MPMovieErrorLog\nData describing network resource playback failures for the associated movie player, including timestamps indicating when each failure occurred.\nDeprecated\nclass MPMovieErrorLogEvent\nA single piece of information for a movie error log.\nDeprecated\nstruct MPMovieLoadState\nConstants describing the network load state of the movie player.\nDeprecated\nstruct MPMovieMediaTypeMask\nThe types of content available in the movie file.\nDeprecated\nclass MPMoviePlayerController\nA type of movie player that manages the playback of a movie from a file or a network stream.\nDeprecated\nclass MPMoviePlayerViewController\nA simple view controller for displaying full-screen movies.\nDeprecated\nclass MPTimedMetadata\nA timed metadata object that carries time-based information within HTTP streamed media.\nDeprecated\nclass MPPlayableContentManager\nA shared content manager for controlling interactions between your media app and system-provided or external media player interfaces.\nDeprecated\nclass MPPlayableContentManagerContext\nAn object representing the current state of the playable endpoint.\nDeprecated\nclass var iPodMusicPlayer: MPMusicPlayerController\nReturns the iPod music player, which controls the iPod app’s state.\nDeprecated\ninit(image: UIImage)\nInitializes a media item artwork instance with a full-size image.\nDeprecated\nvar showsRouteButton: Bool\nA Boolean value that indicates whether the route button is visible in the volume view.\nDeprecated\nfunc routeButtonImage(for: UIControl.State) -> UIImage?\nReturns the button image associated with the specified control state.\nDeprecated\nfunc routeButtonRect(forBounds: CGRect) -> CGRect\nReturns the drawing rectangle for the route button.\nDeprecated\nfunc setRouteButtonImage(UIImage?, for: UIControl.State)\nAssigns a button image to the specified control states.\nDeprecated\nvar areWirelessRoutesAvailable: Bool\nA Boolean value indicating wireless routes are available.\nDeprecated\nvar isWirelessRouteActive: Bool\nA Boolean value that indicates whether the wireless route is active.\nDeprecated\nstatic let MPVolumeViewWirelessRouteActiveDidChange: NSNotification.Name\nIndicates the active wireless route changed.\nDeprecated\nstatic let MPVolumeViewWirelessRoutesAvailableDidChange: NSNotification.Name\nIndicates the available wireless routes changed.\nDeprecated\nGlobal volume setting methods\nGlobal functions for setting the volume alert window status."
  },
  {
    "title": "bounds",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmediaitemartwork/1621723-bounds",
    "html": "See Also\nUsing a media item image\nfunc image(at: CGSize) -> UIImage?\nReturns the artwork image for an item at the given size."
  },
  {
    "title": "init(boundsSize:requestHandler:)",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmediaitemartwork/1649704-init",
    "html": "Parameters\nboundsSize\n\nThe original size of the artwork.\n\nrequestHandler\n\nA handler that the system calls for the requested artwork.\n\nsize\n\nThe new size for the image.\n\nReturn Value\n\nThe newly resized artwork.\n\nDiscussion\n\nThe request handler returns the image in the newly requested size. The requested size must be less than the boundsSize parameter."
  },
  {
    "title": "General media item property keys",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmediaitem/general_media_item_property_keys",
    "html": "Overview\n\nObtain metadata for a media item by calling the value(forProperty:) method with these property keys. You can use the filterable property keys to build media property predicates, which MPMediaPropertyPredicate describes.\n\nTopics\nProperty keys\nlet MPMediaItemPropertyPlaybackDuration: String\nThe playback duration of the media item.\nlet MPMediaItemPropertyAlbumTrackNumber: String\nThe track number of the media item, for a media item that is part of an album.\nlet MPMediaItemPropertyAlbumTrackCount: String\nThe number of tracks for the album that contains the media item.\nlet MPMediaItemPropertyDiscNumber: String\nThe disc number of the media item, for a media item that is part of a multidisc album.\nlet MPMediaItemPropertyDiscCount: String\nThe number of discs for the album that contains the media item.\nlet MPMediaItemPropertyArtwork: String\nThe artwork image for the media item.\nlet MPMediaItemPropertyLyrics: String\nThe lyrics for the media item.\nlet MPMediaItemPropertyReleaseDate: String\nThe date of the media item’s first public release.\nlet MPMediaItemPropertyBeatsPerMinute: String\nThe number of musical beats per minute for the media item.\nlet MPMediaItemPropertyComments: String\nTextual information about the media item.\nlet MPMediaItemPropertyAssetURL: String\nA URL that points to the media item.\nlet MPMediaItemPropertyIsExplicit: String\nA Boolean value that indicates whether the media item contains explicit (adult) lyrics or language.\nlet MPMediaItemPropertyIsPreorder: String\nA Boolean value that indicates whether the media item is a preorder.\nlet MPMediaItemPropertyPlaybackStoreID: String\nThe identifier for enqueueing store tracks.\nFilterable property keys\nlet MPMediaItemPropertyAlbumArtist: String\nThe primary performing artist for an album.\nlet MPMediaItemPropertyAlbumArtistPersistentID: String\nThe persistent identifier for an album artist.\nlet MPMediaItemPropertyAlbumPersistentID: String\nThe key for the persistent identifier for an album.\nlet MPMediaItemPropertyAlbumTitle: String\nThe title of an album.\nlet MPMediaItemPropertyArtist: String\nThe performing artists for a media item — which may vary from the primary artist for the album that a media item belongs to.\nlet MPMediaItemPropertyArtistPersistentID: String\nThe key for the persistent identifier for an artist.\nlet MPMediaItemPropertyComposer: String\nThe musical composer for the media item.\nlet MPMediaItemPropertyComposerPersistentID: String\nThe persistent identifier for a composer.\nlet MPMediaItemPropertyGenre: String\nThe music or film genre of the media item.\nlet MPMediaItemPropertyGenrePersistentID: String\nThe persistent identifier for a genre.\nlet MPMediaItemPropertyHasProtectedAsset: String\nA Boolean value that indicates the media item has DRM protection so it can’t play through a standard playback API.\nlet MPMediaItemPropertyIsCompilation: String\nA Boolean value that indicates whether the media item is part of a compilation.\nlet MPMediaItemPropertyIsCloudItem: String\nA Boolean value that indicates whether the media item is an iCloud item.\nlet MPMediaItemPropertyMediaType: String\nThe media type of the media item.\nlet MPMediaItemPropertyPersistentID: String\nThe key for the persistent identifier for the media item.\nlet MPMediaItemPropertyPlayCount: String\nThe number of times the user plays the media item.\nlet MPMediaItemPropertyPodcastPersistentID: String\nThe persistent identifier for an audio podcast.\nlet MPMediaItemPropertyPodcastTitle: String\nThe title of a podcast.\nlet MPMediaItemPropertyTitle: String\nThe title or name of the media item.\nSee Also\nMedia item types and keys\nstruct MPMediaType\nThe properties for defining the type for a media item.\nUser-defined property keys\nProperties for obtaining user-defined metadata for a media item."
  },
  {
    "title": "MPMusicPlayerMediaItemQueueDescriptor",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmusicplayermediaitemqueuedescriptor",
    "html": "Overview\n\nUse this class to modify the player queue created by a query before the queue begins to play. You can modify when individual items start and stop playing, along with setting the first item to play.\n\nTopics\nCreating a new media item queue descriptor\ninit(itemCollection: MPMediaItemCollection)\nCreates a new queue descriptor using the designated collection.\ninit(query: MPMediaQuery)\nCreates a new queue descriptor using the designated query.\nMedia item queue descriptor properties\nvar itemCollection: MPMediaItemCollection\nContains the media item collection used to create the queue descriptor.\nvar query: MPMediaQuery\nContains the media items found by the query used to create the queue descriptor.\nvar startItem: MPMediaItem?\nDesignates the media item to play first.\nSetting start and end times\nfunc setStartTime(TimeInterval, for: MPMediaItem)\nThe time the designated media item is to start playing.\nfunc setEndTime(TimeInterval, for: MPMediaItem)\nThe time the designated media item is to stop playing.\nRelationships\nInherits From\nMPMusicPlayerQueueDescriptor\nSee Also\nMedia player queues\nclass MPMusicPlayerControllerQueue\nAn immutable queue containing the media items to play.\nclass MPMusicPlayerControllerMutableQueue\nA mutable queue containing the media items to play.\nclass MPMusicPlayerApplicationController\nA media player object that you use to revise the queue that’s currently playing.\nclass MPMusicPlayerStoreQueueDescriptor\nA set of properties and methods for modifying items, based on their store identifier, in the player’s queue.\nclass MPMusicPlayerPlayParametersQueueDescriptor\nA set of properties and methods for modifying how to play items, based on play parameters the framework returns.\nclass MPMusicPlayerQueueDescriptor\nThe abstract base class for audio media item and store queue descriptors."
  },
  {
    "title": "perform(queueTransaction:completionHandler:)",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmusicplayerapplicationcontroller/2815055-perform",
    "html": "Parameters\nqueueTransaction\n\nA block that the system calls while it creates the queue.\n\nqueue\n\nThe queue to modify.\n\ncompletionHandler\n\nA block that the system calls after the user accepts the new queue.\n\nqueue\n\nThe newly modified queue that the user accepted.\n\nerror\n\nIf an error occurred, this parameter holds the error object that explains the error. Otherwise, the value of this parameter is nil.\n\nDiscussion\n\nConcurrency Note\n\nYou can call this method from synchronous code using a completion handler, as shown on this page, or you can call it as an asynchronous method that has the following declaration:\n\nfunc perform(queueTransaction: @escaping (MPMusicPlayerControllerMutableQueue) -> Void) async throws -> MPMusicPlayerControllerQueue\n\n\nFor information about concurrency and asynchronous code in Swift, see Calling Objective-C APIs Asynchronously.\n\nPerform all of your queue modifications inside of the queue transition block. After the system modifies the queue inside of the queue transition block, it returns the new queue from the completion handler after the user accepts the new queue. Don’t access the completion handler’s queue outside of the completion handler.\n\nIf you modify the queue outside of the completion handler, register for the MPMusicPlayerControllerQueueDidChange notification and ensure your app responds accordingly.\n\nSee Also\nChanging the queue contents\nstatic let MPMusicPlayerControllerQueueDidChange: NSNotification.Name\nIndicates the music player’s queue changed."
  },
  {
    "title": "MPErrorDomain",
    "url": "https://developer.apple.com/documentation/mediaplayer/mperrordomain",
    "html": "See Also\nMedia player errors\nstruct MPError\nA structure that represents a framework error."
  },
  {
    "title": "beginGeneratingLibraryChangeNotifications()",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmedialibrary/1621272-begingeneratinglibrarychangenoti",
    "html": "Discussion\n\nThis method is nestable, that is, you can call it multiple times. To turn off notifications, call endGeneratingLibraryChangeNotifications() the same number of times that you called beginGeneratingLibraryChangeNotifications().\n\nSee Also\nReceiving notifications when the user's library changes\nfunc endGeneratingLibraryChangeNotifications()\nAsks the media library to turn off notifications for whenever the library changes.\nstatic let MPMediaLibraryDidChange: NSNotification.Name\nIndicates the media library has changed.\nvar lastModifiedDate: Date\nThe calendar date on which the media library was last modified."
  },
  {
    "title": "default()",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmedialibrary/1621269-default",
    "html": "Return Value\n\nThe user's default media library.\n\nSee Also\nGetting the default media library\nclass func requestAuthorization((MPMediaLibraryAuthorizationStatus) -> Void)\nDisplays a user interface so that the user can authorize whether your app may view the media library’s contents.\nclass func authorizationStatus() -> MPMediaLibraryAuthorizationStatus\nReturns whether the app can access the user’s media library.\nenum MPMediaLibraryAuthorizationStatus\nThe list of possible states for authorization to access to the user’s media library."
  },
  {
    "title": "requestAuthorization(_:)",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmedialibrary/1621276-requestauthorization",
    "html": "Parameters\nhandler\n\nA block that the system calls after the user chooses whether to authorize the app.\n\nstatus\n\nThe status chosen by the user.\n\nDiscussion\n\nConcurrency Note\n\nYou can call this method from synchronous code using a completion handler, as shown on this page, or you can call it as an asynchronous method that has the following declaration:\n\nclass func requestAuthorization() async -> MPMediaLibraryAuthorizationStatus\n\n\nFor information about concurrency and asynchronous code in Swift, see Calling Objective-C APIs Asynchronously.\n\nSee Also\nGetting the default media library\nclass func authorizationStatus() -> MPMediaLibraryAuthorizationStatus\nReturns whether the app can access the user’s media library.\nenum MPMediaLibraryAuthorizationStatus\nThe list of possible states for authorization to access to the user’s media library.\nclass func `default`() -> MPMediaLibrary\nReturns an instance of the default media library."
  },
  {
    "title": "MPMediaLibraryAuthorizationStatus",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmedialibraryauthorizationstatus",
    "html": "Topics\nAuthorization statuses\ncase notDetermined\nThe user hasn't determined whether to authorize the use of their media library.\ncase denied\nThe app may not access the items in the user's media library.\ncase restricted\nThe app may access some of the content in the user's media library.\ncase authorized\nYour app may access items in the user's media library.\nRelationships\nConforms To\nSendable\nSee Also\nGetting the default media library\nclass func requestAuthorization((MPMediaLibraryAuthorizationStatus) -> Void)\nDisplays a user interface so that the user can authorize whether your app may view the media library’s contents.\nclass func authorizationStatus() -> MPMediaLibraryAuthorizationStatus\nReturns whether the app can access the user’s media library.\nclass func `default`() -> MPMediaLibrary\nReturns an instance of the default media library."
  },
  {
    "title": "MPContentItem",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpcontentitem",
    "html": "Overview\n\nThis object represents a media item such as a song, movie, radio station, or podcast episode. The media player displays the information stored in it.\n\nUpdate this object by changing its properties during runtime or by creating a new MPContentItem object with new property values, but with the same identifier as the object to change. Use the beginUpdates() and endUpdates() methods found in MPPlayableContentManager to update several MPContentItem objects at once.\n\nImportant\n\nThis class is only used for CarPlay. Using it requires a special entitlement issued by Apple. Apps without the correct entitlement won’t appear on the CarPlay home screen. See http://www.apple.com/ios/carplay/ for more information.\n\nTopics\nSetting a unique identifier\ninit(identifier: String)\nSets the identifier for a media item.\nRetrieving information about a media item\nvar artwork: MPMediaItemArtwork?\nA single image that’s associated with the media item.\nvar isContainer: Bool\nA Boolean value that indicates whether a media item is container of other items.\nvar isExplicitContent: Bool\nA Boolean value that indicates whether the media item contains explicit content.\nvar identifier: String\nThe unique identifier for the media item.\nvar isPlayable: Bool\nA Boolean value that indicates whether a media item is able to be played.\nvar isStreamingContent: Bool\nA Boolean value that indicates whether the content item is streaming content.\nvar playbackProgress: Float\nThe amount of content played for the media item.\nvar subtitle: String?\nA secondary designator for the media item.\nvar title: String?\nThe public name of the media item.\nRelationships\nInherits From\nNSObject"
  },
  {
    "title": "authorizationStatus()",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmedialibrary/1621282-authorizationstatus",
    "html": "Return Value\n\nThe status representing whether the app has access to the user's media library.\n\nSee Also\nGetting the default media library\nclass func requestAuthorization((MPMediaLibraryAuthorizationStatus) -> Void)\nDisplays a user interface so that the user can authorize whether your app may view the media library’s contents.\nenum MPMediaLibraryAuthorizationStatus\nThe list of possible states for authorization to access to the user’s media library.\nclass func `default`() -> MPMediaLibrary\nReturns an instance of the default media library."
  },
  {
    "title": "MPError",
    "url": "https://developer.apple.com/documentation/mediaplayer/mperror",
    "html": "Topics\nInspecting an error\nstatic var errorDomain: String\nA static string representation of the error domain.\nvar code: Code\nThe error code.\nenum MPError.Code\nAn enumeration that represents error codes for framework operations.\nError constants\nError code constants for framework operations.\nvar errorCode: Int\nThe integer error code.\nvar userInfo: [String : Any]\nThe user information for the error.\nvar errorUserInfo: [String : Any]\nThe error user information for the error.\nvar localizedDescription: String\nA localized description of the error.\nComparing errors\nstatic func == (MPError, MPError) -> Bool\nReturns a Boolean value that indicates whether two values are equal.\nstatic func != (MPError, MPError) -> Bool\nReturns a Boolean value indicating whether two values are not equal.\nAccessing hash values\nfunc hash(into: inout Hasher)\nHashes the essential components of the value by passing them into the hasher.\nvar hashValue: Int\nThe hash value.\nInitializers\ninit(Code, userInfo: [String : Any])\nCreates a player error with an error code and user information.\nSee Also\nMedia player errors\nlet MPErrorDomain: String\nThe Media Player framework error domain."
  },
  {
    "title": "Feedback and rating events",
    "url": "https://developer.apple.com/documentation/mediaplayer/feedback_and_rating_events",
    "html": "Topics\nResponding to feedback and rating events\nclass MPFeedbackCommand\nAn object that reflects the feedback state for the playing item.\nclass MPFeedbackCommandEvent\nAn event requesting a change in the feedback setting.\nclass MPRatingCommand\nAn object that provides a detailed rating for the playing item.\nclass MPRatingCommandEvent\nAn event requesting a change in the rating.\nSee Also\nExternal player and system event handling\nHandling external player events notifications\nHandle events for external media players.\nRemote command center events\nSet up the remote command center to handle media player events.\nTrack navigation events\nRespond to requests to change which part of a media item plays.\nMedia playback mode events\nRespond to changes in the way media items play."
  },
  {
    "title": "MPNowPlayingInfoPropertyCurrentLanguageOptions",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpnowplayinginfopropertycurrentlanguageoptions",
    "html": "Discussion\n\nValue is an array of MPNowPlayingInfoLanguageOption items.\n\nSee Also\nAccessing Now Playing metadata properties\nlet MPNowPlayingInfoCollectionIdentifier: String\nThe identifier of the collection the Now Playing item belongs to.\nlet MPNowPlayingInfoPropertyAdTimeRanges: String\nA list of ad breaks in the Now Playing item.\nlet MPNowPlayingInfoPropertyAvailableLanguageOptions: String\nThe available language option groups for the Now Playing item.\nlet MPNowPlayingInfoPropertyAssetURL: String\nThe URL pointing to the Now Playing item’s underlying asset.\nlet MPNowPlayingInfoPropertyChapterCount: String\nThe total number of chapters in the Now Playing item.\nlet MPNowPlayingInfoPropertyChapterNumber: String\nThe number corresponding to the currently playing chapter.\nlet MPNowPlayingInfoPropertyCreditsStartTime: String\nThe start time for the credits, in seconds, without ads, for the Now Playing item.\nlet MPNowPlayingInfoPropertyCurrentPlaybackDate: String\nThe date associated with the current elapsed playback time.\nlet MPNowPlayingInfoPropertyDefaultPlaybackRate: String\nThe default playback rate for the Now Playing item.\nlet MPNowPlayingInfoPropertyElapsedPlaybackTime: String\nThe elapsed time of the Now Playing item, in seconds.\nlet MPNowPlayingInfoPropertyExternalContentIdentifier: String\nThe opaque identifier that uniquely identifies the Now Playing item, even through app relaunches.\nlet MPNowPlayingInfoPropertyExternalUserProfileIdentifier: String\nThe opaque identifier that uniquely identifies the profile the Now Playing item plays from, even through app relaunches.\nlet MPNowPlayingInfoPropertyIsLiveStream: String\nA number that denotes whether the Now Playing item is a live stream.\nlet MPNowPlayingInfoPropertyMediaType: String\nThe media type of the Now Playing item.\nlet MPNowPlayingInfoPropertyPlaybackProgress: String\nThe current progress of the Now Playing item.\nlet MPNowPlayingInfoPropertyPlaybackRate: String\nThe playback rate of the Now Playing item.\nlet MPNowPlayingInfoPropertyPlaybackQueueCount: String\nThe total number of items in the app’s playback queue.\nlet MPNowPlayingInfoPropertyPlaybackQueueIndex: String\nThe index of the Now Playing item in the app’s playback queue.\nlet MPNowPlayingInfoPropertyServiceIdentifier: String\nThe service provider associated with the Now Playing item."
  },
  {
    "title": "MPNowPlayingInfoPropertyChapterNumber",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpnowplayinginfopropertychapternumber",
    "html": "Discussion\n\nValue is an NSNumber object configured as an NSUInteger. Chapter numbering uses zero-based indexing. For example, to display the first chapter in the Now Playing item as “Chapter 1,” set the chapter number to 0.\n\nSee Also\nAccessing Now Playing metadata properties\nlet MPNowPlayingInfoCollectionIdentifier: String\nThe identifier of the collection the Now Playing item belongs to.\nlet MPNowPlayingInfoPropertyAdTimeRanges: String\nA list of ad breaks in the Now Playing item.\nlet MPNowPlayingInfoPropertyAvailableLanguageOptions: String\nThe available language option groups for the Now Playing item.\nlet MPNowPlayingInfoPropertyAssetURL: String\nThe URL pointing to the Now Playing item’s underlying asset.\nlet MPNowPlayingInfoPropertyChapterCount: String\nThe total number of chapters in the Now Playing item.\nlet MPNowPlayingInfoPropertyCreditsStartTime: String\nThe start time for the credits, in seconds, without ads, for the Now Playing item.\nlet MPNowPlayingInfoPropertyCurrentLanguageOptions: String\nThe currently active language options for the Now Playing item.\nlet MPNowPlayingInfoPropertyCurrentPlaybackDate: String\nThe date associated with the current elapsed playback time.\nlet MPNowPlayingInfoPropertyDefaultPlaybackRate: String\nThe default playback rate for the Now Playing item.\nlet MPNowPlayingInfoPropertyElapsedPlaybackTime: String\nThe elapsed time of the Now Playing item, in seconds.\nlet MPNowPlayingInfoPropertyExternalContentIdentifier: String\nThe opaque identifier that uniquely identifies the Now Playing item, even through app relaunches.\nlet MPNowPlayingInfoPropertyExternalUserProfileIdentifier: String\nThe opaque identifier that uniquely identifies the profile the Now Playing item plays from, even through app relaunches.\nlet MPNowPlayingInfoPropertyIsLiveStream: String\nA number that denotes whether the Now Playing item is a live stream.\nlet MPNowPlayingInfoPropertyMediaType: String\nThe media type of the Now Playing item.\nlet MPNowPlayingInfoPropertyPlaybackProgress: String\nThe current progress of the Now Playing item.\nlet MPNowPlayingInfoPropertyPlaybackRate: String\nThe playback rate of the Now Playing item.\nlet MPNowPlayingInfoPropertyPlaybackQueueCount: String\nThe total number of items in the app’s playback queue.\nlet MPNowPlayingInfoPropertyPlaybackQueueIndex: String\nThe index of the Now Playing item in the app’s playback queue.\nlet MPNowPlayingInfoPropertyServiceIdentifier: String\nThe service provider associated with the Now Playing item."
  },
  {
    "title": "MPNowPlayingInfoPropertyDefaultPlaybackRate",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpnowplayinginfopropertydefaultplaybackrate",
    "html": "Discussion\n\nValue is an NSNumber object configured as a double. Set this property if your app is playing a media item at a playback rate other than 1.0 as its default rate.\n\nSee Also\nAccessing Now Playing metadata properties\nlet MPNowPlayingInfoCollectionIdentifier: String\nThe identifier of the collection the Now Playing item belongs to.\nlet MPNowPlayingInfoPropertyAdTimeRanges: String\nA list of ad breaks in the Now Playing item.\nlet MPNowPlayingInfoPropertyAvailableLanguageOptions: String\nThe available language option groups for the Now Playing item.\nlet MPNowPlayingInfoPropertyAssetURL: String\nThe URL pointing to the Now Playing item’s underlying asset.\nlet MPNowPlayingInfoPropertyChapterCount: String\nThe total number of chapters in the Now Playing item.\nlet MPNowPlayingInfoPropertyChapterNumber: String\nThe number corresponding to the currently playing chapter.\nlet MPNowPlayingInfoPropertyCreditsStartTime: String\nThe start time for the credits, in seconds, without ads, for the Now Playing item.\nlet MPNowPlayingInfoPropertyCurrentLanguageOptions: String\nThe currently active language options for the Now Playing item.\nlet MPNowPlayingInfoPropertyCurrentPlaybackDate: String\nThe date associated with the current elapsed playback time.\nlet MPNowPlayingInfoPropertyElapsedPlaybackTime: String\nThe elapsed time of the Now Playing item, in seconds.\nlet MPNowPlayingInfoPropertyExternalContentIdentifier: String\nThe opaque identifier that uniquely identifies the Now Playing item, even through app relaunches.\nlet MPNowPlayingInfoPropertyExternalUserProfileIdentifier: String\nThe opaque identifier that uniquely identifies the profile the Now Playing item plays from, even through app relaunches.\nlet MPNowPlayingInfoPropertyIsLiveStream: String\nA number that denotes whether the Now Playing item is a live stream.\nlet MPNowPlayingInfoPropertyMediaType: String\nThe media type of the Now Playing item.\nlet MPNowPlayingInfoPropertyPlaybackProgress: String\nThe current progress of the Now Playing item.\nlet MPNowPlayingInfoPropertyPlaybackRate: String\nThe playback rate of the Now Playing item.\nlet MPNowPlayingInfoPropertyPlaybackQueueCount: String\nThe total number of items in the app’s playback queue.\nlet MPNowPlayingInfoPropertyPlaybackQueueIndex: String\nThe index of the Now Playing item in the app’s playback queue.\nlet MPNowPlayingInfoPropertyServiceIdentifier: String\nThe service provider associated with the Now Playing item."
  },
  {
    "title": "MPNowPlayingInfoPropertyCreditsStartTime",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpnowplayinginfopropertycreditsstarttime",
    "html": "See Also\nAccessing Now Playing metadata properties\nlet MPNowPlayingInfoCollectionIdentifier: String\nThe identifier of the collection the Now Playing item belongs to.\nlet MPNowPlayingInfoPropertyAdTimeRanges: String\nA list of ad breaks in the Now Playing item.\nlet MPNowPlayingInfoPropertyAvailableLanguageOptions: String\nThe available language option groups for the Now Playing item.\nlet MPNowPlayingInfoPropertyAssetURL: String\nThe URL pointing to the Now Playing item’s underlying asset.\nlet MPNowPlayingInfoPropertyChapterCount: String\nThe total number of chapters in the Now Playing item.\nlet MPNowPlayingInfoPropertyChapterNumber: String\nThe number corresponding to the currently playing chapter.\nlet MPNowPlayingInfoPropertyCurrentLanguageOptions: String\nThe currently active language options for the Now Playing item.\nlet MPNowPlayingInfoPropertyCurrentPlaybackDate: String\nThe date associated with the current elapsed playback time.\nlet MPNowPlayingInfoPropertyDefaultPlaybackRate: String\nThe default playback rate for the Now Playing item.\nlet MPNowPlayingInfoPropertyElapsedPlaybackTime: String\nThe elapsed time of the Now Playing item, in seconds.\nlet MPNowPlayingInfoPropertyExternalContentIdentifier: String\nThe opaque identifier that uniquely identifies the Now Playing item, even through app relaunches.\nlet MPNowPlayingInfoPropertyExternalUserProfileIdentifier: String\nThe opaque identifier that uniquely identifies the profile the Now Playing item plays from, even through app relaunches.\nlet MPNowPlayingInfoPropertyIsLiveStream: String\nA number that denotes whether the Now Playing item is a live stream.\nlet MPNowPlayingInfoPropertyMediaType: String\nThe media type of the Now Playing item.\nlet MPNowPlayingInfoPropertyPlaybackProgress: String\nThe current progress of the Now Playing item.\nlet MPNowPlayingInfoPropertyPlaybackRate: String\nThe playback rate of the Now Playing item.\nlet MPNowPlayingInfoPropertyPlaybackQueueCount: String\nThe total number of items in the app’s playback queue.\nlet MPNowPlayingInfoPropertyPlaybackQueueIndex: String\nThe index of the Now Playing item in the app’s playback queue.\nlet MPNowPlayingInfoPropertyServiceIdentifier: String\nThe service provider associated with the Now Playing item."
  },
  {
    "title": "MPNowPlayingInfoPropertyElapsedPlaybackTime",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpnowplayinginfopropertyelapsedplaybacktime",
    "html": "Discussion\n\nValue is an NSNumber object configured as a double. Elapsed time is automatically calculated, by the system, from the previously provided elapsed time and the playback rate. It isn’t necessary to update this property frequently.\n\nSee Also\nAccessing Now Playing metadata properties\nlet MPNowPlayingInfoCollectionIdentifier: String\nThe identifier of the collection the Now Playing item belongs to.\nlet MPNowPlayingInfoPropertyAdTimeRanges: String\nA list of ad breaks in the Now Playing item.\nlet MPNowPlayingInfoPropertyAvailableLanguageOptions: String\nThe available language option groups for the Now Playing item.\nlet MPNowPlayingInfoPropertyAssetURL: String\nThe URL pointing to the Now Playing item’s underlying asset.\nlet MPNowPlayingInfoPropertyChapterCount: String\nThe total number of chapters in the Now Playing item.\nlet MPNowPlayingInfoPropertyChapterNumber: String\nThe number corresponding to the currently playing chapter.\nlet MPNowPlayingInfoPropertyCreditsStartTime: String\nThe start time for the credits, in seconds, without ads, for the Now Playing item.\nlet MPNowPlayingInfoPropertyCurrentLanguageOptions: String\nThe currently active language options for the Now Playing item.\nlet MPNowPlayingInfoPropertyCurrentPlaybackDate: String\nThe date associated with the current elapsed playback time.\nlet MPNowPlayingInfoPropertyDefaultPlaybackRate: String\nThe default playback rate for the Now Playing item.\nlet MPNowPlayingInfoPropertyExternalContentIdentifier: String\nThe opaque identifier that uniquely identifies the Now Playing item, even through app relaunches.\nlet MPNowPlayingInfoPropertyExternalUserProfileIdentifier: String\nThe opaque identifier that uniquely identifies the profile the Now Playing item plays from, even through app relaunches.\nlet MPNowPlayingInfoPropertyIsLiveStream: String\nA number that denotes whether the Now Playing item is a live stream.\nlet MPNowPlayingInfoPropertyMediaType: String\nThe media type of the Now Playing item.\nlet MPNowPlayingInfoPropertyPlaybackProgress: String\nThe current progress of the Now Playing item.\nlet MPNowPlayingInfoPropertyPlaybackRate: String\nThe playback rate of the Now Playing item.\nlet MPNowPlayingInfoPropertyPlaybackQueueCount: String\nThe total number of items in the app’s playback queue.\nlet MPNowPlayingInfoPropertyPlaybackQueueIndex: String\nThe index of the Now Playing item in the app’s playback queue.\nlet MPNowPlayingInfoPropertyServiceIdentifier: String\nThe service provider associated with the Now Playing item."
  },
  {
    "title": "MPNowPlayingInfoPropertyCurrentPlaybackDate",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpnowplayinginfopropertycurrentplaybackdate",
    "html": "Discussion\n\nThe value of this property is an NSDate object.\n\nSee Also\nAccessing Now Playing metadata properties\nlet MPNowPlayingInfoCollectionIdentifier: String\nThe identifier of the collection the Now Playing item belongs to.\nlet MPNowPlayingInfoPropertyAdTimeRanges: String\nA list of ad breaks in the Now Playing item.\nlet MPNowPlayingInfoPropertyAvailableLanguageOptions: String\nThe available language option groups for the Now Playing item.\nlet MPNowPlayingInfoPropertyAssetURL: String\nThe URL pointing to the Now Playing item’s underlying asset.\nlet MPNowPlayingInfoPropertyChapterCount: String\nThe total number of chapters in the Now Playing item.\nlet MPNowPlayingInfoPropertyChapterNumber: String\nThe number corresponding to the currently playing chapter.\nlet MPNowPlayingInfoPropertyCreditsStartTime: String\nThe start time for the credits, in seconds, without ads, for the Now Playing item.\nlet MPNowPlayingInfoPropertyCurrentLanguageOptions: String\nThe currently active language options for the Now Playing item.\nlet MPNowPlayingInfoPropertyDefaultPlaybackRate: String\nThe default playback rate for the Now Playing item.\nlet MPNowPlayingInfoPropertyElapsedPlaybackTime: String\nThe elapsed time of the Now Playing item, in seconds.\nlet MPNowPlayingInfoPropertyExternalContentIdentifier: String\nThe opaque identifier that uniquely identifies the Now Playing item, even through app relaunches.\nlet MPNowPlayingInfoPropertyExternalUserProfileIdentifier: String\nThe opaque identifier that uniquely identifies the profile the Now Playing item plays from, even through app relaunches.\nlet MPNowPlayingInfoPropertyIsLiveStream: String\nA number that denotes whether the Now Playing item is a live stream.\nlet MPNowPlayingInfoPropertyMediaType: String\nThe media type of the Now Playing item.\nlet MPNowPlayingInfoPropertyPlaybackProgress: String\nThe current progress of the Now Playing item.\nlet MPNowPlayingInfoPropertyPlaybackRate: String\nThe playback rate of the Now Playing item.\nlet MPNowPlayingInfoPropertyPlaybackQueueCount: String\nThe total number of items in the app’s playback queue.\nlet MPNowPlayingInfoPropertyPlaybackQueueIndex: String\nThe index of the Now Playing item in the app’s playback queue.\nlet MPNowPlayingInfoPropertyServiceIdentifier: String\nThe service provider associated with the Now Playing item."
  },
  {
    "title": "MPNowPlayingInfoPropertyServiceIdentifier",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpnowplayinginfopropertyserviceidentifier",
    "html": "Discussion\n\nValue is a unique NSString that identifies the service provider for the now-playing item. If the Now Playing item belongs to a channel or subscription service, you can use this key to coordinate various types of Now Playing content from the service provider.\n\nSee Also\nAccessing Now Playing metadata properties\nlet MPNowPlayingInfoCollectionIdentifier: String\nThe identifier of the collection the Now Playing item belongs to.\nlet MPNowPlayingInfoPropertyAdTimeRanges: String\nA list of ad breaks in the Now Playing item.\nlet MPNowPlayingInfoPropertyAvailableLanguageOptions: String\nThe available language option groups for the Now Playing item.\nlet MPNowPlayingInfoPropertyAssetURL: String\nThe URL pointing to the Now Playing item’s underlying asset.\nlet MPNowPlayingInfoPropertyChapterCount: String\nThe total number of chapters in the Now Playing item.\nlet MPNowPlayingInfoPropertyChapterNumber: String\nThe number corresponding to the currently playing chapter.\nlet MPNowPlayingInfoPropertyCreditsStartTime: String\nThe start time for the credits, in seconds, without ads, for the Now Playing item.\nlet MPNowPlayingInfoPropertyCurrentLanguageOptions: String\nThe currently active language options for the Now Playing item.\nlet MPNowPlayingInfoPropertyCurrentPlaybackDate: String\nThe date associated with the current elapsed playback time.\nlet MPNowPlayingInfoPropertyDefaultPlaybackRate: String\nThe default playback rate for the Now Playing item.\nlet MPNowPlayingInfoPropertyElapsedPlaybackTime: String\nThe elapsed time of the Now Playing item, in seconds.\nlet MPNowPlayingInfoPropertyExternalContentIdentifier: String\nThe opaque identifier that uniquely identifies the Now Playing item, even through app relaunches.\nlet MPNowPlayingInfoPropertyExternalUserProfileIdentifier: String\nThe opaque identifier that uniquely identifies the profile the Now Playing item plays from, even through app relaunches.\nlet MPNowPlayingInfoPropertyIsLiveStream: String\nA number that denotes whether the Now Playing item is a live stream.\nlet MPNowPlayingInfoPropertyMediaType: String\nThe media type of the Now Playing item.\nlet MPNowPlayingInfoPropertyPlaybackProgress: String\nThe current progress of the Now Playing item.\nlet MPNowPlayingInfoPropertyPlaybackRate: String\nThe playback rate of the Now Playing item.\nlet MPNowPlayingInfoPropertyPlaybackQueueCount: String\nThe total number of items in the app’s playback queue.\nlet MPNowPlayingInfoPropertyPlaybackQueueIndex: String\nThe index of the Now Playing item in the app’s playback queue."
  },
  {
    "title": "Handling external player events notifications",
    "url": "https://developer.apple.com/documentation/mediaplayer/handling_external_player_events_notifications",
    "html": "Overview\n\nApps that play audio or video content receive player events to start and stop playback, change tracks, and even rate an item. All iOS apps that create their own media player, macOS apps, and external media apps should support these events.\n\nNote\n\nWhen you use either the system or application player, you don’t get event notifications because those players automatically handle events.\n\nTo receive player event notifications, do the following:\n\n• Use the shared MPRemoteCommandCenter object to register handlers for the events you wish to handle and to disable the events you’re not interested to receive.\n\n• Begin playing your content. Your app must be the Now Playing app. An app doesn’t receive remote control events until it begins playing content. Test that your app is properly receiving and handling remote control events with Control Center, which you access by swiping up from the bottom edge of your screen. These controls send remote control events to the app that’s currently or was most recently playing. You can also access the playback controls from the lock screen of the device.\n\nYou can ensure that your app interacts well with other apps handling remote control events by following the best practices laid out in the Becoming a now playable app sample code project.\n\nSee Also\nExternal player and system event handling\nRemote command center events\nSet up the remote command center to handle media player events.\nTrack navigation events\nRespond to requests to change which part of a media item plays.\nMedia playback mode events\nRespond to changes in the way media items play.\nFeedback and rating events\nRespond to incoming feedback and rating events."
  },
  {
    "title": "Track navigation events",
    "url": "https://developer.apple.com/documentation/mediaplayer/track_navigation_events",
    "html": "Topics\nResponding to track navigation events\nclass MPChangePlaybackPositionCommand\nAn object that responds to requests to change the current playback position of the playing item.\nclass MPChangePlaybackPositionCommandEvent\nAn event requesting a change in the playback position.\nclass MPSeekCommandEvent\nAn event requesting that the player seek to a new position.\nclass MPSkipIntervalCommand\nAn object that defines the skip intervals for the player.\nclass MPSkipIntervalCommandEvent\nAn event requesting a change in the current skip interval.\nSee Also\nExternal player and system event handling\nHandling external player events notifications\nHandle events for external media players.\nRemote command center events\nSet up the remote command center to handle media player events.\nMedia playback mode events\nRespond to changes in the way media items play.\nFeedback and rating events\nRespond to incoming feedback and rating events."
  },
  {
    "title": "MPNowPlayingSession",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpnowplayingsession",
    "html": "Overview\n\nAn AVPlayer object can have only one Now Playing session. An AVPlayerViewController manages its own player and Now Playing session, so you can’t add your own Now Playing session.\n\nImportant\n\nIf you create an MPNowPlayingSession object, don’t attempt to use it with the AVPlayer that an AVPlayerViewController presents. Create your own AVPlayer instance with custom playback controls to use with your Now Playing session.\n\nTopics\nCreating a session\ninit(players: [AVPlayer])\nCreates a Now Playing session object.\nAccessing the delegate object\nvar delegate: (any MPNowPlayingSessionDelegate)?\nThe Now Playing session’s delegate object.\nprotocol MPNowPlayingSessionDelegate\nA protocol that defines the delegate interface for a Now Playing session.\nManaging players\nvar players: [AVPlayer]\nThe array of players associated with the session.\nfunc addPlayer(AVPlayer)\nAdds a player to the session.\nfunc removePlayer(AVPlayer)\nRemoves a player from the session.\nManaging the active state\nvar isActive: Bool\nA Boolean value that indicates whether the session is the app’s active Now Playing session.\nvar canBecomeActive: Bool\nA Boolean value that indicates whether the session can become the app’s active Now Playing session.\nfunc becomeActiveIfPossible(completion: ((Bool) -> Void)?)\nTells the system to make the session the active Now Playing session if possible.\nConfiguring Now Playing information\nvar automaticallyPublishesNowPlayingInfo: Bool\nA Boolean that indicates whether Now Playing info automatically publishes.\nvar nowPlayingInfoCenter: MPNowPlayingInfoCenter\nThe Now Playing information center associated with the session.\nHandling remote commands\nvar remoteCommandCenter: MPRemoteCommandCenter\nThe remote command center associated with the session.\nRelationships\nInherits From\nNSObject\nSee Also\nNow Playing information\nBecoming a now playable app\nEnsure your app is eligible to become the Now Playing app by adopting best practices for providing Now Playing info and registering for remote command center actions.\nclass MPNowPlayingInfoCenter\nAn object for setting the Now Playing information for media that your app plays.\nclass MPNowPlayingInfoLanguageOption\nA set of interfaces for setting the language option for the Now Playing item.\nclass MPNowPlayingInfoLanguageOptionGroup\nA grouped set of language options where only a single language option can be active at a time.\nLanguage option characteristic constants\nThe constants for defining language characteristics."
  },
  {
    "title": "MPNowPlayingInfoLanguageOptionGroup",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpnowplayinginfolanguageoptiongroup",
    "html": "Overview\n\nThe MPNowPlayingInfoLanguageOptionGroup and MPNowPlayingInfoLanguageOption classes provide interfaces for setting information about language options, for example, audio and subtitles, in the Now Playing information area.\n\nTopics\nCreating a new language option group\ninit(languageOptions: [MPNowPlayingInfoLanguageOption], defaultLanguageOption: MPNowPlayingInfoLanguageOption?, allowEmptySelection: Bool)\nCreates a new language option group with the supplied language options.\nRetrieving language option group information\nvar allowEmptySelection: Bool\nA Boolean that indicates whether the system requires a selection for the language option group.\nvar defaultLanguageOption: MPNowPlayingInfoLanguageOption?\nThe default language option for the group.\nvar languageOptions: [MPNowPlayingInfoLanguageOption]\nThe available language options for the group.\nRelationships\nInherits From\nNSObject\nSee Also\nNow Playing information\nBecoming a now playable app\nEnsure your app is eligible to become the Now Playing app by adopting best practices for providing Now Playing info and registering for remote command center actions.\nclass MPNowPlayingSession\nAn object that manages Now Playing information and remote commands for multiple players.\nclass MPNowPlayingInfoCenter\nAn object for setting the Now Playing information for media that your app plays.\nclass MPNowPlayingInfoLanguageOption\nA set of interfaces for setting the language option for the Now Playing item.\nLanguage option characteristic constants\nThe constants for defining language characteristics."
  },
  {
    "title": "MPVolumeView",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpvolumeview",
    "html": "Overview\n\nUse a volume view to present the user with a slider control for setting the system audio output volume, and a button for choosing the audio output route when the option is available. When first displayed, the slider’s position reflects the current system audio output volume. As the user drags the slider, the changes update the volume view. If the user presses the device volume buttons while sound is playing, the slider moves to reflect the new volume.\n\nIf there’s an Apple TV or other AirPlay-enabled device in range, the route button allows the user to choose it. If there’s only one audio output route available, the view doesn’t display the route button. The view also doesn’t display a route button when the app runs in visionOS.\n\nImportant\n\nYou can’t change the volume or choose a route with this class while testing in the Simulator. These abilities only work on a device.\n\nUse this class by embedding an instance of it in your view hierarchy. The following code snippet assumes you’ve placed an instance of the UIView class on a view using Interface Builder, sizing and positioning it as desired to contain the volume view. Point to the UIView instance with an outlet variable—named, in the case of this example, mpVolumeViewParentView. You’d typically place code like that shown in Listing 1 in your viewDidLoad method.\n\nListing 1 Adding a volume view to your view hierarchy\nparentView.backgroundColor = .clear\nlet volumeView = MPVolumeView(frame: parentView.bounds)\nparentView.addSubview(volumeView)\n\n\nWhen an audio output route that doesn’t support volume control, such as a car head unit, is active, the system replaces the volume slider with the route name.\n\nTo instead display a volume slider as an alert, use the functions described in Global volume setting methods.\n\nNote\n\nYou can’t subclass the MPVolumeView class.\n\nCustomizing the volume slider’s appearance\n\nThe volume slider is a UISlider object. Sliders are always displayed as horizontal bars and an indicator, or thumb, notes the current value of the slider, which the user can move to change the setting.\n\nSlider controls draw the volume slider track using two distinct images, which are customizable. The system draws the region between the thumb and the end of the track associated with the slider’s minimum value using the minimum volume slider image. The system region between the thumb and the end of the track associated with the slider’s maximum value using the maximum volume slider image. You can assign different images to customize the appearance of the slider for its various states, such as enabled, disabled, and highlighted.\n\nYou can also customize the volume thumb image for the slider.\n\nNote\n\nThe volume slider control provides a set of default images for both the track and thumb. The system uses the default images if you don’t specify any custom images.\n\nTopics\nManaging visibility of controls\nvar showsVolumeSlider: Bool\nA Boolean value that indicates the volume slider is visible in the volume view.\nCustomizing the volume slider\nfunc maximumVolumeSliderImage(for: UIControl.State) -> UIImage?\nReturns the maximum volume image associated with the specified control state.\nfunc minimumVolumeSliderImage(for: UIControl.State) -> UIImage?\nReturns the minimum volume image associated with the specified control state.\nfunc setMaximumVolumeSliderImage(UIImage?, for: UIControl.State)\nAssigns a maximum volume slider image to the specified control states.\nfunc setMinimumVolumeSliderImage(UIImage?, for: UIControl.State)\nAssigns a minimum volume slider image to the specified control states.\nfunc setVolumeThumbImage(UIImage?, for: UIControl.State)\nAssigns a thumb image to the specified control states.\nfunc volumeSliderRect(forBounds: CGRect) -> CGRect\nReturns the drawing rectangle for the slider’s track.\nfunc volumeThumbImage(for: UIControl.State) -> UIImage?\nReturns the thumb image associated with the specified control state.\nfunc volumeThumbRect(forBounds: CGRect, volumeSliderRect: CGRect, value: Float) -> CGRect\nReturns the drawing rectangle for the volume slider’s thumb image.\nDeprecated\nvar volumeWarningSliderImage: UIImage?\nThe image used to designate the European Union volume limit.\nDeprecated\nvar showsRouteButton: Bool\nA Boolean value that indicates whether the route button is visible in the volume view.\nDeprecated\nvar areWirelessRoutesAvailable: Bool\nA Boolean value indicating wireless routes are available.\nDeprecated\nvar isWirelessRouteActive: Bool\nA Boolean value that indicates whether the wireless route is active.\nDeprecated\nfunc routeButtonImage(for: UIControl.State) -> UIImage?\nReturns the button image associated with the specified control state.\nDeprecated\nfunc routeButtonRect(forBounds: CGRect) -> CGRect\nReturns the drawing rectangle for the route button.\nDeprecated\nfunc setRouteButtonImage(UIImage?, for: UIControl.State)\nAssigns a button image to the specified control states.\nDeprecated\nRelationships\nInherits From\nUIView\nConforms To\nNSCoding\nSee Also\nMedia player user interface\nDisplaying a media picker from your app\nLet users choose the music they want to play by displaying a media picker interface from within your app.\nclass MPMediaPickerController\nA specialized view controller that provides a graphical interface for selecting media items."
  },
  {
    "title": "Becoming a now playable app",
    "url": "https://developer.apple.com/documentation/mediaplayer/becoming_a_now_playable_app",
    "html": "Overview\n\nNote\n\nThis sample code project is associated with WWDC 2019 session 501: Reaching the Big Screen with AirPlay 2.\n\nConfigure the sample code project\n\nBefore you run the sample code project in Xcode:\n\nSee the comments for the NowPlayable protocol in file NowPlayable.swift, to learn what settings and configuration you may want to customize for your use-case.\n\nUse the platform-specific NowPlayableBehavior class to implement your customizations to the standard behavior.\n\nSee Also\nNow Playing information\nclass MPNowPlayingSession\nAn object that manages Now Playing information and remote commands for multiple players.\nclass MPNowPlayingInfoCenter\nAn object for setting the Now Playing information for media that your app plays.\nclass MPNowPlayingInfoLanguageOption\nA set of interfaces for setting the language option for the Now Playing item.\nclass MPNowPlayingInfoLanguageOptionGroup\nA grouped set of language options where only a single language option can be active at a time.\nLanguage option characteristic constants\nThe constants for defining language characteristics."
  },
  {
    "title": "Displaying a media picker from your app",
    "url": "https://developer.apple.com/documentation/mediaplayer/displaying_a_media_picker_from_your_app",
    "html": "Overview\n\nAdd a media picker view controller to your app to enable users to choose music items from their Apple Music library without leaving your app. You can configure the media picker to accept single or multiple items from the user.\n\nImportant\n\nYour app’s Info.plist file must include the NSAppleMusicUsageDescription key prior to accessing the user’s music library. If that key isn’t present, displaying the media picker causes your app to exit.\n\nAdopt the Protocol, and Create the System Music Player\n\nTo enable your app to respond to user input, adopt the MPMediaPickerControllerDelegate protocol.\n\nclass ViewController: UIViewController, MPMediaPickerControllerDelegate {\n    ...\n}\n\n\nAdd the media picker view controller\n\nSet the media picker view controller as a popover presentation controller when you target an iPad. Set the source view and delegate, and present the media picker. In this example, the media picker allows the user to select multiple items, and the source view is a button object.\n\n@IBAction func selectSongs(_ sender: UIButton) {\n    let controller = MPMediaPickerController(mediaTypes: .music)\n    controller.allowsPickingMultipleItems = true\n    controller.popoverPresentationController?.sourceView = sender\n    controller.delegate = self\n    present(controller, animated: true)\n}\n\nAdd a select music button, and target the previously created function\n\nTo create a button that gives the user access to their Apple Music library from within your app:\n\nAdd a UIButton object, and name it Select Songs.\n\nAttach restraints to center the button in the display.\n\nControl-drag from the new button object to View Controller in the Outline view, and select selectSongs: from the menu that appears.\n\nThe Select Songs button is the source view for the media picker that the view controller presents modally. The media picker displays the user’s Apple Music library, which allows them to choose the music they want to play.\n\nImplement the protocol methods\n\nImplement two methods from the MPMediaPickerControllerDelegate protocol: mediaPicker(_:didPickMediaItems:) and mediaPickerDidCancel(_:). Inside these methods, add code to handle the user’s choice of items to create a music queue, and code to dismiss the view controller. The following code shows how to set the music player queue, begin playing the user’s choices, and dismiss the view controller if the user doesn’t choose any media items:\n\nfunc mediaPicker(_ mediaPicker: MPMediaPickerController,\n                 didPickMediaItems mediaItemCollection: MPMediaItemCollection) {\n    // Get the system music player.\n    let musicPlayer = MPMusicPlayerController.systemMusicPlayer\n    musicPlayer.setQueue(with: mediaItemCollection)\n    mediaPicker.dismiss(animated: true)\n    // Begin playback.\n    musicPlayer.play()\n}\n\n\nfunc mediaPickerDidCancel(_ mediaPicker: MPMediaPickerController) {\n    mediaPicker.dismiss(animated: true)\n}\n\nSee Also\nMedia player user interface\nclass MPMediaPickerController\nA specialized view controller that provides a graphical interface for selecting media items.\nclass MPVolumeView\nA slider control for setting the system audio output volume, and a button for choosing the audio output route.\nRelated Documentation\nPlaying audio using the built-in music player\nCreate a media player inside your app to play audio from the user’s media library."
  },
  {
    "title": "MPMediaPickerController",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmediapickercontroller",
    "html": "Overview\n\nAn MPMediaPickerController object, or media item picker, is a specialized view controller that you employ to provide a graphical interface for selecting media items. To display a media item picker, present it modally on an existing view controller. Presenting an MPMediaPickerController in non-modal mode; for example, pushing a MPMediaPickerController onto an existing UINavigationController stack causes your app to crash. MPMediaItem describes media items.\n\nTo respond to user selections and to dismiss a media item picker, use the MPMediaPickerControllerDelegate protocol.\n\nNotes\n\nThe MPMediaPickerController class supports portrait mode only. This class doesn’t support subclassing, and don’t modify the view hierarchy, which is private. In a compatible iPad or iPhone app in visionOS, presenting this picker displays an alert notifying the person that picking media items isn’t supported.\n\nTopics\nInitializing a media item picker\ninit(mediaTypes: MPMediaType)\nInitializes a media item picker for specified media types.\nResponding to media item picker selections\nvar delegate: (any MPMediaPickerControllerDelegate)?\nThe delegate for a media item picker.\nprotocol MPMediaPickerControllerDelegate\nThe protocol you implement so that a media item picker can respond to a user making media item selections.\nUsing a media item picker\nvar allowsPickingMultipleItems: Bool\nA Boolean value specifying the default selection behavior for a media item picker.\nvar showsCloudItems: Bool\nA Boolean value specifying whether to display iCloud Media Library items for a media picker.\nvar mediaTypes: MPMediaType\nThe media types that media item picker presents.\nvar prompt: String?\nA prompt, for the user, that appears above the navigation bar buttons.\nvar showsItemsWithProtectedAssets: Bool\nA Boolean value that specifies whether the media item picker displays protected assets.\nRelationships\nInherits From\nUIViewController\nSee Also\nMedia player user interface\nDisplaying a media picker from your app\nLet users choose the music they want to play by displaying a media picker interface from within your app.\nclass MPVolumeView\nA slider control for setting the system audio output volume, and a button for choosing the audio output route."
  },
  {
    "title": "hasProtectedAsset",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmediaitem/1621678-hasprotectedasset",
    "html": "Discussion\n\nWhen the value is true, the media item has DRM protection.\n\nSee Also\nMedia item properties\nvar albumArtist: String?\nThe primary performing artist for an album.\nvar albumArtistPersistentID: MPMediaEntityPersistentID\nThe persistent identifier for the primary performing artist for an album.\nvar albumPersistentID: MPMediaEntityPersistentID\nThe persistent identifier for an album.\nvar albumTitle: String?\nThe title of an album, such as Live on Mars, rather than the title of an individual song on the album, such as “Crater Dance.”\nvar albumTrackCount: Int\nThe number of tracks for the album that contains the media item.\nvar albumTrackNumber: Int\nThe track number of the media item, for a media item that’s part of an album.\nvar artist: String?\nThe performing artists for a media item, which may vary from the primary artist for the album that a media item belongs to.\nvar artistPersistentID: MPMediaEntityPersistentID\nThe persistent identifier for an artist.\nvar artwork: MPMediaItemArtwork?\nThe artwork image for the media item.\nvar assetURL: URL?\nThe URL that points to the media item.\nvar beatsPerMinute: Int\nThe number of musical beats per minute for the media item.\nvar bookmarkTime: TimeInterval\nThe time of the user’s most recent interaction with the bookmark in the media item.\nvar isCloudItem: Bool\nA Boolean value that indicates whether the media item is an iCloud Music Library item.\nvar comments: String?\nTextual information about the media item.\nvar isCompilation: Bool\nA Boolean value that indicates whether the media item is part of a compilation.\nvar isPreorder: Bool\nA Boolean value that indicates whether the media item is a preorder.\nvar composer: String?\nThe musical composer for the media item.\nvar composerPersistentID: MPMediaEntityPersistentID\nThe persistent identifier for a composer.\nvar dateAdded: Date\nThe date the user adds the media item to the library.\nvar discCount: Int\nThe number of discs for the album that contains the media item.\nvar discNumber: Int\nThe disc number of the media item, for a media item that’s part of a multidisc album.\nvar isExplicitItem: Bool\nA Boolean value that indicates whether the media item has explicit (adult) lyrics or language.\nvar genre: String?\nThe music or film genre of the media item.\nvar genrePersistentID: MPMediaEntityPersistentID\nThe persistent identifier for a genre.\nvar lastPlayedDate: Date?\nThe most recent play date of the media item.\nvar lyrics: String?\nThe lyrics for the media item.\nvar mediaType: MPMediaType\nThe media type of the media item.\nvar persistentID: MPMediaEntityPersistentID\nThe persistent identifier for the media item.\nvar playCount: Int\nThe number of times the user plays the media item.\nvar playbackDuration: TimeInterval\nThe playback duration of the media item.\nvar playbackStoreID: String\nThe ID of a media item from the Apple Music catalog.\nvar podcastPersistentID: MPMediaEntityPersistentID\nThe persistent identifier for an audio podcast.\nvar podcastTitle: String?\nThe title of a podcast, such as This Martian Drudgery, rather than the title of an individual episode of a podcast, such as “Episode 12: Another Cold Day at the Pole.”\nvar rating: Int\nThe user-specified rating of the media item.\nvar releaseDate: Date?\nThe date of the media item’s first public release.\nvar skipCount: Int\nThe number of times the user skips playing the media item.\nvar title: String?\nThe title or name of the media item.\nvar userGrouping: String?\nGrouping information for the media item."
  },
  {
    "title": "releaseDate",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmediaitem/1621682-releasedate",
    "html": "See Also\nMedia item properties\nvar albumArtist: String?\nThe primary performing artist for an album.\nvar albumArtistPersistentID: MPMediaEntityPersistentID\nThe persistent identifier for the primary performing artist for an album.\nvar albumPersistentID: MPMediaEntityPersistentID\nThe persistent identifier for an album.\nvar albumTitle: String?\nThe title of an album, such as Live on Mars, rather than the title of an individual song on the album, such as “Crater Dance.”\nvar albumTrackCount: Int\nThe number of tracks for the album that contains the media item.\nvar albumTrackNumber: Int\nThe track number of the media item, for a media item that’s part of an album.\nvar artist: String?\nThe performing artists for a media item, which may vary from the primary artist for the album that a media item belongs to.\nvar artistPersistentID: MPMediaEntityPersistentID\nThe persistent identifier for an artist.\nvar artwork: MPMediaItemArtwork?\nThe artwork image for the media item.\nvar assetURL: URL?\nThe URL that points to the media item.\nvar beatsPerMinute: Int\nThe number of musical beats per minute for the media item.\nvar bookmarkTime: TimeInterval\nThe time of the user’s most recent interaction with the bookmark in the media item.\nvar isCloudItem: Bool\nA Boolean value that indicates whether the media item is an iCloud Music Library item.\nvar comments: String?\nTextual information about the media item.\nvar isCompilation: Bool\nA Boolean value that indicates whether the media item is part of a compilation.\nvar isPreorder: Bool\nA Boolean value that indicates whether the media item is a preorder.\nvar composer: String?\nThe musical composer for the media item.\nvar composerPersistentID: MPMediaEntityPersistentID\nThe persistent identifier for a composer.\nvar dateAdded: Date\nThe date the user adds the media item to the library.\nvar discCount: Int\nThe number of discs for the album that contains the media item.\nvar discNumber: Int\nThe disc number of the media item, for a media item that’s part of a multidisc album.\nvar isExplicitItem: Bool\nA Boolean value that indicates whether the media item has explicit (adult) lyrics or language.\nvar genre: String?\nThe music or film genre of the media item.\nvar genrePersistentID: MPMediaEntityPersistentID\nThe persistent identifier for a genre.\nvar lastPlayedDate: Date?\nThe most recent play date of the media item.\nvar lyrics: String?\nThe lyrics for the media item.\nvar mediaType: MPMediaType\nThe media type of the media item.\nvar persistentID: MPMediaEntityPersistentID\nThe persistent identifier for the media item.\nvar playCount: Int\nThe number of times the user plays the media item.\nvar playbackDuration: TimeInterval\nThe playback duration of the media item.\nvar playbackStoreID: String\nThe ID of a media item from the Apple Music catalog.\nvar podcastPersistentID: MPMediaEntityPersistentID\nThe persistent identifier for an audio podcast.\nvar podcastTitle: String?\nThe title of a podcast, such as This Martian Drudgery, rather than the title of an individual episode of a podcast, such as “Episode 12: Another Cold Day at the Pole.”\nvar hasProtectedAsset: Bool\nA Boolean value that indicates whether the media item has a protected asset.\nvar rating: Int\nThe user-specified rating of the media item.\nvar skipCount: Int\nThe number of times the user skips playing the media item.\nvar title: String?\nThe title or name of the media item.\nvar userGrouping: String?\nGrouping information for the media item."
  },
  {
    "title": "podcastTitle",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmediaitem/1621715-podcasttitle",
    "html": "See Also\nMedia item properties\nvar albumArtist: String?\nThe primary performing artist for an album.\nvar albumArtistPersistentID: MPMediaEntityPersistentID\nThe persistent identifier for the primary performing artist for an album.\nvar albumPersistentID: MPMediaEntityPersistentID\nThe persistent identifier for an album.\nvar albumTitle: String?\nThe title of an album, such as Live on Mars, rather than the title of an individual song on the album, such as “Crater Dance.”\nvar albumTrackCount: Int\nThe number of tracks for the album that contains the media item.\nvar albumTrackNumber: Int\nThe track number of the media item, for a media item that’s part of an album.\nvar artist: String?\nThe performing artists for a media item, which may vary from the primary artist for the album that a media item belongs to.\nvar artistPersistentID: MPMediaEntityPersistentID\nThe persistent identifier for an artist.\nvar artwork: MPMediaItemArtwork?\nThe artwork image for the media item.\nvar assetURL: URL?\nThe URL that points to the media item.\nvar beatsPerMinute: Int\nThe number of musical beats per minute for the media item.\nvar bookmarkTime: TimeInterval\nThe time of the user’s most recent interaction with the bookmark in the media item.\nvar isCloudItem: Bool\nA Boolean value that indicates whether the media item is an iCloud Music Library item.\nvar comments: String?\nTextual information about the media item.\nvar isCompilation: Bool\nA Boolean value that indicates whether the media item is part of a compilation.\nvar isPreorder: Bool\nA Boolean value that indicates whether the media item is a preorder.\nvar composer: String?\nThe musical composer for the media item.\nvar composerPersistentID: MPMediaEntityPersistentID\nThe persistent identifier for a composer.\nvar dateAdded: Date\nThe date the user adds the media item to the library.\nvar discCount: Int\nThe number of discs for the album that contains the media item.\nvar discNumber: Int\nThe disc number of the media item, for a media item that’s part of a multidisc album.\nvar isExplicitItem: Bool\nA Boolean value that indicates whether the media item has explicit (adult) lyrics or language.\nvar genre: String?\nThe music or film genre of the media item.\nvar genrePersistentID: MPMediaEntityPersistentID\nThe persistent identifier for a genre.\nvar lastPlayedDate: Date?\nThe most recent play date of the media item.\nvar lyrics: String?\nThe lyrics for the media item.\nvar mediaType: MPMediaType\nThe media type of the media item.\nvar persistentID: MPMediaEntityPersistentID\nThe persistent identifier for the media item.\nvar playCount: Int\nThe number of times the user plays the media item.\nvar playbackDuration: TimeInterval\nThe playback duration of the media item.\nvar playbackStoreID: String\nThe ID of a media item from the Apple Music catalog.\nvar podcastPersistentID: MPMediaEntityPersistentID\nThe persistent identifier for an audio podcast.\nvar hasProtectedAsset: Bool\nA Boolean value that indicates whether the media item has a protected asset.\nvar rating: Int\nThe user-specified rating of the media item.\nvar releaseDate: Date?\nThe date of the media item’s first public release.\nvar skipCount: Int\nThe number of times the user skips playing the media item.\nvar title: String?\nThe title or name of the media item.\nvar userGrouping: String?\nGrouping information for the media item."
  },
  {
    "title": "rating",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmediaitem/1621750-rating",
    "html": "Discussion\n\nThis value is in the range [0...5], where a value of 5 indicates the most favorable rating.\n\nSee Also\nMedia item properties\nvar albumArtist: String?\nThe primary performing artist for an album.\nvar albumArtistPersistentID: MPMediaEntityPersistentID\nThe persistent identifier for the primary performing artist for an album.\nvar albumPersistentID: MPMediaEntityPersistentID\nThe persistent identifier for an album.\nvar albumTitle: String?\nThe title of an album, such as Live on Mars, rather than the title of an individual song on the album, such as “Crater Dance.”\nvar albumTrackCount: Int\nThe number of tracks for the album that contains the media item.\nvar albumTrackNumber: Int\nThe track number of the media item, for a media item that’s part of an album.\nvar artist: String?\nThe performing artists for a media item, which may vary from the primary artist for the album that a media item belongs to.\nvar artistPersistentID: MPMediaEntityPersistentID\nThe persistent identifier for an artist.\nvar artwork: MPMediaItemArtwork?\nThe artwork image for the media item.\nvar assetURL: URL?\nThe URL that points to the media item.\nvar beatsPerMinute: Int\nThe number of musical beats per minute for the media item.\nvar bookmarkTime: TimeInterval\nThe time of the user’s most recent interaction with the bookmark in the media item.\nvar isCloudItem: Bool\nA Boolean value that indicates whether the media item is an iCloud Music Library item.\nvar comments: String?\nTextual information about the media item.\nvar isCompilation: Bool\nA Boolean value that indicates whether the media item is part of a compilation.\nvar isPreorder: Bool\nA Boolean value that indicates whether the media item is a preorder.\nvar composer: String?\nThe musical composer for the media item.\nvar composerPersistentID: MPMediaEntityPersistentID\nThe persistent identifier for a composer.\nvar dateAdded: Date\nThe date the user adds the media item to the library.\nvar discCount: Int\nThe number of discs for the album that contains the media item.\nvar discNumber: Int\nThe disc number of the media item, for a media item that’s part of a multidisc album.\nvar isExplicitItem: Bool\nA Boolean value that indicates whether the media item has explicit (adult) lyrics or language.\nvar genre: String?\nThe music or film genre of the media item.\nvar genrePersistentID: MPMediaEntityPersistentID\nThe persistent identifier for a genre.\nvar lastPlayedDate: Date?\nThe most recent play date of the media item.\nvar lyrics: String?\nThe lyrics for the media item.\nvar mediaType: MPMediaType\nThe media type of the media item.\nvar persistentID: MPMediaEntityPersistentID\nThe persistent identifier for the media item.\nvar playCount: Int\nThe number of times the user plays the media item.\nvar playbackDuration: TimeInterval\nThe playback duration of the media item.\nvar playbackStoreID: String\nThe ID of a media item from the Apple Music catalog.\nvar podcastPersistentID: MPMediaEntityPersistentID\nThe persistent identifier for an audio podcast.\nvar podcastTitle: String?\nThe title of a podcast, such as This Martian Drudgery, rather than the title of an individual episode of a podcast, such as “Episode 12: Another Cold Day at the Pole.”\nvar hasProtectedAsset: Bool\nA Boolean value that indicates whether the media item has a protected asset.\nvar releaseDate: Date?\nThe date of the media item’s first public release.\nvar skipCount: Int\nThe number of times the user skips playing the media item.\nvar title: String?\nThe title or name of the media item.\nvar userGrouping: String?\nGrouping information for the media item."
  },
  {
    "title": "skipCount",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmediaitem/1621693-skipcount",
    "html": "See Also\nMedia item properties\nvar albumArtist: String?\nThe primary performing artist for an album.\nvar albumArtistPersistentID: MPMediaEntityPersistentID\nThe persistent identifier for the primary performing artist for an album.\nvar albumPersistentID: MPMediaEntityPersistentID\nThe persistent identifier for an album.\nvar albumTitle: String?\nThe title of an album, such as Live on Mars, rather than the title of an individual song on the album, such as “Crater Dance.”\nvar albumTrackCount: Int\nThe number of tracks for the album that contains the media item.\nvar albumTrackNumber: Int\nThe track number of the media item, for a media item that’s part of an album.\nvar artist: String?\nThe performing artists for a media item, which may vary from the primary artist for the album that a media item belongs to.\nvar artistPersistentID: MPMediaEntityPersistentID\nThe persistent identifier for an artist.\nvar artwork: MPMediaItemArtwork?\nThe artwork image for the media item.\nvar assetURL: URL?\nThe URL that points to the media item.\nvar beatsPerMinute: Int\nThe number of musical beats per minute for the media item.\nvar bookmarkTime: TimeInterval\nThe time of the user’s most recent interaction with the bookmark in the media item.\nvar isCloudItem: Bool\nA Boolean value that indicates whether the media item is an iCloud Music Library item.\nvar comments: String?\nTextual information about the media item.\nvar isCompilation: Bool\nA Boolean value that indicates whether the media item is part of a compilation.\nvar isPreorder: Bool\nA Boolean value that indicates whether the media item is a preorder.\nvar composer: String?\nThe musical composer for the media item.\nvar composerPersistentID: MPMediaEntityPersistentID\nThe persistent identifier for a composer.\nvar dateAdded: Date\nThe date the user adds the media item to the library.\nvar discCount: Int\nThe number of discs for the album that contains the media item.\nvar discNumber: Int\nThe disc number of the media item, for a media item that’s part of a multidisc album.\nvar isExplicitItem: Bool\nA Boolean value that indicates whether the media item has explicit (adult) lyrics or language.\nvar genre: String?\nThe music or film genre of the media item.\nvar genrePersistentID: MPMediaEntityPersistentID\nThe persistent identifier for a genre.\nvar lastPlayedDate: Date?\nThe most recent play date of the media item.\nvar lyrics: String?\nThe lyrics for the media item.\nvar mediaType: MPMediaType\nThe media type of the media item.\nvar persistentID: MPMediaEntityPersistentID\nThe persistent identifier for the media item.\nvar playCount: Int\nThe number of times the user plays the media item.\nvar playbackDuration: TimeInterval\nThe playback duration of the media item.\nvar playbackStoreID: String\nThe ID of a media item from the Apple Music catalog.\nvar podcastPersistentID: MPMediaEntityPersistentID\nThe persistent identifier for an audio podcast.\nvar podcastTitle: String?\nThe title of a podcast, such as This Martian Drudgery, rather than the title of an individual episode of a podcast, such as “Episode 12: Another Cold Day at the Pole.”\nvar hasProtectedAsset: Bool\nA Boolean value that indicates whether the media item has a protected asset.\nvar rating: Int\nThe user-specified rating of the media item.\nvar releaseDate: Date?\nThe date of the media item’s first public release.\nvar title: String?\nThe title or name of the media item.\nvar userGrouping: String?\nGrouping information for the media item."
  },
  {
    "title": "MPMediaPlaylistCreationMetadata",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmediaplaylistcreationmetadata",
    "html": "Overview\n\nUse this class when creating a new playlist using the getPlaylist(with:creationMetadata:completionHandler:) method. The system adds the metadata to the playlist when you create it, however it ignores the metadata if the playlist already exists.\n\nTopics\nCreating metadata for a playlist\ninit(name: String)\nCreates a new playlist metadata object with the designated name.\nMetadata for a playlist\nvar authorDisplayName: String!\nApp defined display name for the playlist.\nvar descriptionText: String\nThe descriptive text for the playlist.\nvar name: String\nThe playlist’s displayed name.\nRelationships\nInherits From\nNSObject\nSee Also\nMedia items and playlists\nclass MPMediaItem\nA collection of properties that represents a single item in the media library.\nclass MPMediaItemArtwork\nA graphical image, such as music album cover art, associated with a media item.\nclass MPMediaItemCollection\nA sorted set of media items from the media library.\nclass MPMediaPlaylist\nA playable collection of related media items.\nclass MPMediaEntity\nThe abstract superclass for media items, media item collections, and media playlist instances."
  },
  {
    "title": "MPMediaPlaylist",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmediaplaylist",
    "html": "Overview\n\nEach playlist has a name, a set of attributes, and a unique identifier that persists across application launches.\n\nUsers configure playlists using iTunes or by creating a playlist on the device. Playlists are read-only to your iOS app. To obtain playlists, configure a media query that’s grouped by playlist. Each returned media item collection is a media playlist. The following code snippet illustrates this by logging playlist and song names to the Xcode debugger console:\n\nlet myPlaylistQuery = MPMediaQuery.playlists()\nlet playlists = myPlaylistQuery.collections\nfor playlist in playlists! {\n    print(playlist.value(forProperty: MPMediaPlaylistPropertyName)!)\n            \n    let songs = playlist.items\n    for song in songs {\n        let songTitle = song.value(forProperty: MPMediaItemPropertyTitle)\n        print(\"\\t\\t\", songTitle!)\n    }\n}\n\n\nMPMediaPropertyPredicate and MPMediaQuery describe the API for building a media query. MPMediaEntity describes the methods for querying media playlist property values.\n\nTopics\nAdding media items to a playlist\nfunc addItem(withProductID: String, completionHandler: (((any Error)?) -> Void)?)\nAdds the item associated with the product identifier to the end of the playlist.\nfunc add([MPMediaItem], completionHandler: (((any Error)?) -> Void)?)\nAdds an array of media items to the end of the playlist.\nRetrieving information about a playlist\nvar authorDisplayName: String?\nThe display name for the playlist defined in the app.\nvar descriptionText: String?\nUser supplied text that describes the playlist.\nvar name: String?\nThe name of the playlist.\nvar persistentID: MPMediaEntityPersistentID\nThe persistent identifier for the playlist.\nvar cloudGlobalID: String?\nThe cloud identifier for the playlist.\nvar playlistAttributes: MPMediaPlaylistAttribute\nThe attributes associated with the playlist.\nstruct MPMediaPlaylistAttribute\nAttributes define the type of playlist.\nvar seedItems: [MPMediaItem]?\nThe items seeded to generate the playlist; applies only to Genius playlists.\nProperty keys\nPlaylist property keys\nKeys that contain information about a playlist.\nRelationships\nInherits From\nMPMediaItemCollection\nSee Also\nMedia items and playlists\nclass MPMediaItem\nA collection of properties that represents a single item in the media library.\nclass MPMediaItemArtwork\nA graphical image, such as music album cover art, associated with a media item.\nclass MPMediaItemCollection\nA sorted set of media items from the media library.\nclass MPMediaPlaylistCreationMetadata\nA set of attributes for describing a playlist when creating it.\nclass MPMediaEntity\nThe abstract superclass for media items, media item collections, and media playlist instances."
  },
  {
    "title": "composer",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmediaitem/1621681-composer",
    "html": "See Also\nMedia item properties\nvar albumArtist: String?\nThe primary performing artist for an album.\nvar albumArtistPersistentID: MPMediaEntityPersistentID\nThe persistent identifier for the primary performing artist for an album.\nvar albumPersistentID: MPMediaEntityPersistentID\nThe persistent identifier for an album.\nvar albumTitle: String?\nThe title of an album, such as Live on Mars, rather than the title of an individual song on the album, such as “Crater Dance.”\nvar albumTrackCount: Int\nThe number of tracks for the album that contains the media item.\nvar albumTrackNumber: Int\nThe track number of the media item, for a media item that’s part of an album.\nvar artist: String?\nThe performing artists for a media item, which may vary from the primary artist for the album that a media item belongs to.\nvar artistPersistentID: MPMediaEntityPersistentID\nThe persistent identifier for an artist.\nvar artwork: MPMediaItemArtwork?\nThe artwork image for the media item.\nvar assetURL: URL?\nThe URL that points to the media item.\nvar beatsPerMinute: Int\nThe number of musical beats per minute for the media item.\nvar bookmarkTime: TimeInterval\nThe time of the user’s most recent interaction with the bookmark in the media item.\nvar isCloudItem: Bool\nA Boolean value that indicates whether the media item is an iCloud Music Library item.\nvar comments: String?\nTextual information about the media item.\nvar isCompilation: Bool\nA Boolean value that indicates whether the media item is part of a compilation.\nvar isPreorder: Bool\nA Boolean value that indicates whether the media item is a preorder.\nvar composerPersistentID: MPMediaEntityPersistentID\nThe persistent identifier for a composer.\nvar dateAdded: Date\nThe date the user adds the media item to the library.\nvar discCount: Int\nThe number of discs for the album that contains the media item.\nvar discNumber: Int\nThe disc number of the media item, for a media item that’s part of a multidisc album.\nvar isExplicitItem: Bool\nA Boolean value that indicates whether the media item has explicit (adult) lyrics or language.\nvar genre: String?\nThe music or film genre of the media item.\nvar genrePersistentID: MPMediaEntityPersistentID\nThe persistent identifier for a genre.\nvar lastPlayedDate: Date?\nThe most recent play date of the media item.\nvar lyrics: String?\nThe lyrics for the media item.\nvar mediaType: MPMediaType\nThe media type of the media item.\nvar persistentID: MPMediaEntityPersistentID\nThe persistent identifier for the media item.\nvar playCount: Int\nThe number of times the user plays the media item.\nvar playbackDuration: TimeInterval\nThe playback duration of the media item.\nvar playbackStoreID: String\nThe ID of a media item from the Apple Music catalog.\nvar podcastPersistentID: MPMediaEntityPersistentID\nThe persistent identifier for an audio podcast.\nvar podcastTitle: String?\nThe title of a podcast, such as This Martian Drudgery, rather than the title of an individual episode of a podcast, such as “Episode 12: Another Cold Day at the Pole.”\nvar hasProtectedAsset: Bool\nA Boolean value that indicates whether the media item has a protected asset.\nvar rating: Int\nThe user-specified rating of the media item.\nvar releaseDate: Date?\nThe date of the media item’s first public release.\nvar skipCount: Int\nThe number of times the user skips playing the media item.\nvar title: String?\nThe title or name of the media item.\nvar userGrouping: String?\nGrouping information for the media item."
  },
  {
    "title": "playbackDuration",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmediaitem/1621732-playbackduration",
    "html": "See Also\nMedia item properties\nvar albumArtist: String?\nThe primary performing artist for an album.\nvar albumArtistPersistentID: MPMediaEntityPersistentID\nThe persistent identifier for the primary performing artist for an album.\nvar albumPersistentID: MPMediaEntityPersistentID\nThe persistent identifier for an album.\nvar albumTitle: String?\nThe title of an album, such as Live on Mars, rather than the title of an individual song on the album, such as “Crater Dance.”\nvar albumTrackCount: Int\nThe number of tracks for the album that contains the media item.\nvar albumTrackNumber: Int\nThe track number of the media item, for a media item that’s part of an album.\nvar artist: String?\nThe performing artists for a media item, which may vary from the primary artist for the album that a media item belongs to.\nvar artistPersistentID: MPMediaEntityPersistentID\nThe persistent identifier for an artist.\nvar artwork: MPMediaItemArtwork?\nThe artwork image for the media item.\nvar assetURL: URL?\nThe URL that points to the media item.\nvar beatsPerMinute: Int\nThe number of musical beats per minute for the media item.\nvar bookmarkTime: TimeInterval\nThe time of the user’s most recent interaction with the bookmark in the media item.\nvar isCloudItem: Bool\nA Boolean value that indicates whether the media item is an iCloud Music Library item.\nvar comments: String?\nTextual information about the media item.\nvar isCompilation: Bool\nA Boolean value that indicates whether the media item is part of a compilation.\nvar isPreorder: Bool\nA Boolean value that indicates whether the media item is a preorder.\nvar composer: String?\nThe musical composer for the media item.\nvar composerPersistentID: MPMediaEntityPersistentID\nThe persistent identifier for a composer.\nvar dateAdded: Date\nThe date the user adds the media item to the library.\nvar discCount: Int\nThe number of discs for the album that contains the media item.\nvar discNumber: Int\nThe disc number of the media item, for a media item that’s part of a multidisc album.\nvar isExplicitItem: Bool\nA Boolean value that indicates whether the media item has explicit (adult) lyrics or language.\nvar genre: String?\nThe music or film genre of the media item.\nvar genrePersistentID: MPMediaEntityPersistentID\nThe persistent identifier for a genre.\nvar lastPlayedDate: Date?\nThe most recent play date of the media item.\nvar lyrics: String?\nThe lyrics for the media item.\nvar mediaType: MPMediaType\nThe media type of the media item.\nvar persistentID: MPMediaEntityPersistentID\nThe persistent identifier for the media item.\nvar playCount: Int\nThe number of times the user plays the media item.\nvar playbackStoreID: String\nThe ID of a media item from the Apple Music catalog.\nvar podcastPersistentID: MPMediaEntityPersistentID\nThe persistent identifier for an audio podcast.\nvar podcastTitle: String?\nThe title of a podcast, such as This Martian Drudgery, rather than the title of an individual episode of a podcast, such as “Episode 12: Another Cold Day at the Pole.”\nvar hasProtectedAsset: Bool\nA Boolean value that indicates whether the media item has a protected asset.\nvar rating: Int\nThe user-specified rating of the media item.\nvar releaseDate: Date?\nThe date of the media item’s first public release.\nvar skipCount: Int\nThe number of times the user skips playing the media item.\nvar title: String?\nThe title or name of the media item.\nvar userGrouping: String?\nGrouping information for the media item."
  },
  {
    "title": "playbackStoreID",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmediaitem/2813404-playbackstoreid",
    "html": "Discussion\n\nMPMusicPlayerController uses this ID to enqueue Apple Music media items. This value is 0 for media items that are only present in the user’s media library.\n\nSee Also\nMedia item properties\nvar albumArtist: String?\nThe primary performing artist for an album.\nvar albumArtistPersistentID: MPMediaEntityPersistentID\nThe persistent identifier for the primary performing artist for an album.\nvar albumPersistentID: MPMediaEntityPersistentID\nThe persistent identifier for an album.\nvar albumTitle: String?\nThe title of an album, such as Live on Mars, rather than the title of an individual song on the album, such as “Crater Dance.”\nvar albumTrackCount: Int\nThe number of tracks for the album that contains the media item.\nvar albumTrackNumber: Int\nThe track number of the media item, for a media item that’s part of an album.\nvar artist: String?\nThe performing artists for a media item, which may vary from the primary artist for the album that a media item belongs to.\nvar artistPersistentID: MPMediaEntityPersistentID\nThe persistent identifier for an artist.\nvar artwork: MPMediaItemArtwork?\nThe artwork image for the media item.\nvar assetURL: URL?\nThe URL that points to the media item.\nvar beatsPerMinute: Int\nThe number of musical beats per minute for the media item.\nvar bookmarkTime: TimeInterval\nThe time of the user’s most recent interaction with the bookmark in the media item.\nvar isCloudItem: Bool\nA Boolean value that indicates whether the media item is an iCloud Music Library item.\nvar comments: String?\nTextual information about the media item.\nvar isCompilation: Bool\nA Boolean value that indicates whether the media item is part of a compilation.\nvar isPreorder: Bool\nA Boolean value that indicates whether the media item is a preorder.\nvar composer: String?\nThe musical composer for the media item.\nvar composerPersistentID: MPMediaEntityPersistentID\nThe persistent identifier for a composer.\nvar dateAdded: Date\nThe date the user adds the media item to the library.\nvar discCount: Int\nThe number of discs for the album that contains the media item.\nvar discNumber: Int\nThe disc number of the media item, for a media item that’s part of a multidisc album.\nvar isExplicitItem: Bool\nA Boolean value that indicates whether the media item has explicit (adult) lyrics or language.\nvar genre: String?\nThe music or film genre of the media item.\nvar genrePersistentID: MPMediaEntityPersistentID\nThe persistent identifier for a genre.\nvar lastPlayedDate: Date?\nThe most recent play date of the media item.\nvar lyrics: String?\nThe lyrics for the media item.\nvar mediaType: MPMediaType\nThe media type of the media item.\nvar persistentID: MPMediaEntityPersistentID\nThe persistent identifier for the media item.\nvar playCount: Int\nThe number of times the user plays the media item.\nvar playbackDuration: TimeInterval\nThe playback duration of the media item.\nvar podcastPersistentID: MPMediaEntityPersistentID\nThe persistent identifier for an audio podcast.\nvar podcastTitle: String?\nThe title of a podcast, such as This Martian Drudgery, rather than the title of an individual episode of a podcast, such as “Episode 12: Another Cold Day at the Pole.”\nvar hasProtectedAsset: Bool\nA Boolean value that indicates whether the media item has a protected asset.\nvar rating: Int\nThe user-specified rating of the media item.\nvar releaseDate: Date?\nThe date of the media item’s first public release.\nvar skipCount: Int\nThe number of times the user skips playing the media item.\nvar title: String?\nThe title or name of the media item.\nvar userGrouping: String?\nGrouping information for the media item."
  },
  {
    "title": "enumerateValues(forProperties:using:)",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmediaentity/1620122-enumeratevalues",
    "html": "Parameters\nproperties\n\nA set of property keys that you want the values for.\n\nblock\n\nA block object that executes for each fetched property value.\n\nDiscussion\n\nUse this method to get property values in a batch fashion. Anytime the app accesses more than one property, enumerating over a set of property keys is more efficient than fetching each individual property with value(forProperty:).\n\nTo see which media property keys you can use with this method, refer to Media entity property keys, General media item property keys, Playlist property keys, and User-defined property keys.\n\nSee Also\nWorking with media properties\nclass func canFilter(byProperty: String) -> Bool\nIndicates whether you can use the media property key that you specify to construct a media property predicate.\nvar persistentID: MPMediaEntityPersistentID\nThe persistent identifier for a media entity.\nsubscript(Any) -> Any?\nReturns the object specified by the key.\nfunc value(forProperty: String) -> Any?\nRetrieves the value for a specified media property key.\ntypealias MPMediaEntityPersistentID\nDefines the type for storing a persistent identifier to a particular entity."
  },
  {
    "title": "collections",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmediaquery/1621806-collections",
    "html": "Discussion\n\nThe system groups and sorts the returned array of collections by the groupingType of the media query. The following code listing demonstrates how to use this property:\n\n// Specify a media query. This one matches the entire library because it\n// doesn't contain a media property predicate.\nlet everything = MPMediaQuery()\n \n// Configure the media query to group its media items; here, grouped by artist.\neverything.groupingType = MPMediaGrouping.artist\n \n// Obtain the media item collections from the query.\nlet collections = [everything]\n\n\nEach element of the collections array now contains a media item collection. Each collection contains the media items from the library by a particular artist. The system sorts elements of the array by the artist name.\n\nFor the available grouping types, see MPMediaGrouping.\n\nSee Also\nPerforming media queries\nvar items: [MPMediaItem]?\nAn array of media items that match the media query’s predicate."
  },
  {
    "title": "init(items:)",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmediaitemcollection/1614440-init",
    "html": "Parameters\nitems\n\nThe array of items you assign to the media item collection.\n\nReturn Value\n\nThe newly created media item collection."
  },
  {
    "title": "value(forProperty:)",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmediaentity/1620128-value",
    "html": "Parameters\nproperty\n\nThe media property key that you want the corresponding value of.\n\nReturn Value\n\nThe value for the media property key.\n\nDiscussion\n\nUse enumerateValues(forProperties:using:) to efficiently access more than one property at a time.\n\nTo see which media property keys you can use with this method, refer to Media entity property keys, General media item property keys, Playlist property keys, and User-defined property keys.\n\nSee Also\nWorking with media properties\nclass func canFilter(byProperty: String) -> Bool\nIndicates whether you can use the media property key that you specify to construct a media property predicate.\nfunc enumerateValues(forProperties: Set<String>, using: (String, Any, UnsafeMutablePointer<ObjCBool>) -> Void)\nExecutes a provided block with the fetched values for the given item properties.\nvar persistentID: MPMediaEntityPersistentID\nThe persistent identifier for a media entity.\nsubscript(Any) -> Any?\nReturns the object specified by the key.\ntypealias MPMediaEntityPersistentID\nDefines the type for storing a persistent identifier to a particular entity."
  },
  {
    "title": "items",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmediaitemcollection/1614441-items",
    "html": "See Also\nUsing a media item collection\nvar representativeItem: MPMediaItem?\nA media item whose properties are representative of the other media items in a collection.\nvar count: Int\nThe number of media items in a collection.\nvar mediaTypes: MPMediaType\nThe types of the media items in a collection."
  },
  {
    "title": "MPMusicPlayerPlayParametersQueueDescriptor",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmusicplayerplayparametersqueuedescriptor",
    "html": "Overview\n\nUse this class to modify the player queue created by a query before the queue begins to play. You can modify when individual items start and stop playing, along with setting the first item for playing.\n\nTopics\nCreating a new play parameters queue descriptor\ninit(playParametersQueue: [MPMusicPlayerPlayParameters])\nCreates a new queue descriptor using the designated queue of play parameters.\nclass MPMusicPlayerPlayParameters\nThe MusicKit parameters that describe items to play.\nAccessing the play parameters\nvar playParametersQueue: [MPMusicPlayerPlayParameters]\nAn array containing the play parameters returned from querying MusicKit.\nvar startItemPlayParameters: MPMusicPlayerPlayParameters?\nThe item identified by the play parameters to play first.\nclass MPMusicPlayerPlayParameters\nThe MusicKit parameters that describe items to play.\nSetting start and end times\nfunc setStartTime(TimeInterval, forItemWith: MPMusicPlayerPlayParameters)\nSets the time the item with the associated play parameters is to start playing.\nfunc setEndTime(TimeInterval, forItemWith: MPMusicPlayerPlayParameters)\nSets the time the item with the associated play parameters is to stop playing.\nRelationships\nInherits From\nMPMusicPlayerQueueDescriptor\nSee Also\nMedia player queues\nclass MPMusicPlayerControllerQueue\nAn immutable queue containing the media items to play.\nclass MPMusicPlayerControllerMutableQueue\nA mutable queue containing the media items to play.\nclass MPMusicPlayerApplicationController\nA media player object that you use to revise the queue that’s currently playing.\nclass MPMusicPlayerMediaItemQueueDescriptor\nA set of properties and methods for modifying audio media items in the player’s media queue.\nclass MPMusicPlayerStoreQueueDescriptor\nA set of properties and methods for modifying items, based on their store identifier, in the player’s queue.\nclass MPMusicPlayerQueueDescriptor\nThe abstract base class for audio media item and store queue descriptors."
  },
  {
    "title": "MPMusicPlayerQueueDescriptor",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmusicplayerqueuedescriptor",
    "html": "Relationships\nInherits From\nNSObject\nSee Also\nMedia player queues\nclass MPMusicPlayerControllerQueue\nAn immutable queue containing the media items to play.\nclass MPMusicPlayerControllerMutableQueue\nA mutable queue containing the media items to play.\nclass MPMusicPlayerApplicationController\nA media player object that you use to revise the queue that’s currently playing.\nclass MPMusicPlayerMediaItemQueueDescriptor\nA set of properties and methods for modifying audio media items in the player’s media queue.\nclass MPMusicPlayerStoreQueueDescriptor\nA set of properties and methods for modifying items, based on their store identifier, in the player’s queue.\nclass MPMusicPlayerPlayParametersQueueDescriptor\nA set of properties and methods for modifying how to play items, based on play parameters the framework returns."
  },
  {
    "title": "MPMusicPlayerStoreQueueDescriptor",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmusicplayerstorequeuedescriptor",
    "html": "Overview\n\nUse this class to modify the player queue created by a query before the queue begins to play. You can modify when individual items start and stop playing, along with setting the first item to play.\n\nTopics\nCreating a new store queue descriptor\ninit(storeIDs: [String])\nCreates a new queue descriptor using the designated store identifiers.\nStore identifier queue descriptor properties\nvar startItemID: String?\nThe item identified by the store identifier to play first.\nvar storeIDs: [String]?\nAn array containing the store identifiers found by the query used to create the queue descriptor.\nSetting start and end times\nfunc setStartTime(TimeInterval, forItemWithStoreID: String)\nSets the time the designated store item is to start playing.\nfunc setEndTime(TimeInterval, forItemWithStoreID: String)\nSets the time the designated store item is to stop playing.\nRelationships\nInherits From\nMPMusicPlayerQueueDescriptor\nSee Also\nMedia player queues\nclass MPMusicPlayerControllerQueue\nAn immutable queue containing the media items to play.\nclass MPMusicPlayerControllerMutableQueue\nA mutable queue containing the media items to play.\nclass MPMusicPlayerApplicationController\nA media player object that you use to revise the queue that’s currently playing.\nclass MPMusicPlayerMediaItemQueueDescriptor\nA set of properties and methods for modifying audio media items in the player’s media queue.\nclass MPMusicPlayerPlayParametersQueueDescriptor\nA set of properties and methods for modifying how to play items, based on play parameters the framework returns.\nclass MPMusicPlayerQueueDescriptor\nThe abstract base class for audio media item and store queue descriptors."
  },
  {
    "title": "MPMusicPlayerControllerMutableQueue",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmusicplayercontrollermutablequeue",
    "html": "Topics\nAdding and removing items\nfunc insert(MPMusicPlayerQueueDescriptor, after: MPMediaItem?)\nInserts a modified queue after the designated media item.\nfunc remove(MPMediaItem)\nRemoves a media item from the music player’s queue.\nRelationships\nInherits From\nMPMusicPlayerControllerQueue\nSee Also\nMedia player queues\nclass MPMusicPlayerControllerQueue\nAn immutable queue containing the media items to play.\nclass MPMusicPlayerApplicationController\nA media player object that you use to revise the queue that’s currently playing.\nclass MPMusicPlayerMediaItemQueueDescriptor\nA set of properties and methods for modifying audio media items in the player’s media queue.\nclass MPMusicPlayerStoreQueueDescriptor\nA set of properties and methods for modifying items, based on their store identifier, in the player’s queue.\nclass MPMusicPlayerPlayParametersQueueDescriptor\nA set of properties and methods for modifying how to play items, based on play parameters the framework returns.\nclass MPMusicPlayerQueueDescriptor\nThe abstract base class for audio media item and store queue descriptors."
  },
  {
    "title": "MPMediaPredicate",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmediapredicate",
    "html": "Overview\n\nIn media queries, a predicate is a statement of a logical condition that you want to test each media item against. The system returns the media items that satisfy the condition in the query result. Use this class’s concrete subclass, described in MPMediaPropertyPredicate, to define the filter in a media query to retrieve a subset of media items from the library. For more information about media queries, see MPMediaQuery.\n\nRelationships\nInherits From\nNSObject\nConforms To\nNSSecureCoding\nSee Also\nMedia item queries\nUsing filters to create specialized queries\nAdd a filter set to a query before populating a music player queue.\nclass MPMediaQuery\nA query that specifies a set of media items from the device’s media library using a filter and a grouping type.\nclass MPMediaQuerySection\nA range of media items or media item collections from within a media query.\nclass MPMediaPropertyPredicate\nA set of predicates for defining a filter in a media query."
  },
  {
    "title": "MPMediaPropertyPredicate",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmediapropertypredicate",
    "html": "Overview\n\nUse one or more MPMediaPropertyPredicate objects to define the filter in a media query to retrieve a subset of media items from the Music library. A predicate in this context is a statement of a logical condition that you want to test each media item against. The query retrieves the items that satisfy that condition.\n\nYou define Music library queries, and retrieve query results, using the MPMediaQuery class. MPMediaItem and MPMediaItemCollection describe the media items and media item collections that you can retrieve with a query.\n\nTopics\nCreating media property predicates\ninit(value: Any?, forProperty: String)\nCreates a media property predicate with the default comparison type.\ninit(value: Any?, forProperty: String, comparisonType: MPMediaPredicateComparison)\nCreates a media property predicate with a specified comparison type.\nExamining media property predicates\nvar property: String\nThe property that the media property predicate uses when you invoke a query.\nvar value: Any?\nThe value that the media property predicate matches against when you invoke a query.\nvar comparisonType: MPMediaPredicateComparison\nThe type of matching comparison that the media property predicate performs when you invoke a query.\nSupporting types\nenum MPMediaPredicateComparison\nLogical comparison types for media queries.\nRelationships\nInherits From\nMPMediaPredicate\nSee Also\nMedia item queries\nUsing filters to create specialized queries\nAdd a filter set to a query before populating a music player queue.\nclass MPMediaQuery\nA query that specifies a set of media items from the device’s media library using a filter and a grouping type.\nclass MPMediaQuerySection\nA range of media items or media item collections from within a media query.\nclass MPMediaPredicate\nAn abstract class that defines classes for filtering media in a media query."
  },
  {
    "title": "MPMusicPlayerControllerQueue",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmusicplayercontrollerqueue",
    "html": "Overview\n\nAn MPMusicPlayerControllerQueue object contains the current queue for an application queue music player. To add or remove media items from a playing queue, use perform(queueTransaction:completionHandler:). The results of the method is an MPMusicPlayerControllerQueue object that updates the playing queue. You don’t create your own instance of this class.\n\nTopics\nInspecting queue media items\nvar items: [MPMediaItem]\nThe media items in the queue.\nRelationships\nInherits From\nNSObject\nSee Also\nMedia player queues\nclass MPMusicPlayerControllerMutableQueue\nA mutable queue containing the media items to play.\nclass MPMusicPlayerApplicationController\nA media player object that you use to revise the queue that’s currently playing.\nclass MPMusicPlayerMediaItemQueueDescriptor\nA set of properties and methods for modifying audio media items in the player’s media queue.\nclass MPMusicPlayerStoreQueueDescriptor\nA set of properties and methods for modifying items, based on their store identifier, in the player’s queue.\nclass MPMusicPlayerPlayParametersQueueDescriptor\nA set of properties and methods for modifying how to play items, based on play parameters the framework returns.\nclass MPMusicPlayerQueueDescriptor\nThe abstract base class for audio media item and store queue descriptors."
  },
  {
    "title": "MPMediaQuerySection",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmediaquerysection",
    "html": "Overview\n\nYou can use sections when displaying a query’s items or collections in your app’s user interface. You obtain an array of media query sections by using the itemSections or collectionSections properties of a media query (an instance of the MPMediaQuery class). The property values of a media query section are read-only.\n\nTopics\nWorking with media query sections\nvar title: String\nThe localized title of the media query section.\nvar range: NSRange\nThe range in the media query’s items or collections array that the media query section represents.\nRelationships\nInherits From\nNSObject\nConforms To\nNSCopying\nNSSecureCoding\nSee Also\nMedia item queries\nUsing filters to create specialized queries\nAdd a filter set to a query before populating a music player queue.\nclass MPMediaQuery\nA query that specifies a set of media items from the device’s media library using a filter and a grouping type.\nclass MPMediaPropertyPredicate\nA set of predicates for defining a filter in a media query.\nclass MPMediaPredicate\nAn abstract class that defines classes for filtering media in a media query."
  },
  {
    "title": "MPMediaQuery",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmediaquery",
    "html": "Overview\n\nFilter and grouping types are both optional; an unqualified query matches the entire library.\n\nA query has at most one grouping type. A query’s filter can consist of any number of media property predicates. You build filters using MPMediaPropertyPredicate objects, based on property keys described in MPMediaItem.\n\nAfter creating and configuring a query, you use it to retrieve media items or media item collections. You can also use a query to retrieve an array of MPMediaQuerySection instances, useful for displaying the results of a query in the user interface of your app. See the itemSections and collectionSections properties.\n\nThis class includes several convenience constructors that each apply a grouping type and, in most cases, match a subset of the library. Table 1 summarizes the features of these constructors. See MPMediaItem for descriptions of the entries in the Filter column. See MPMediaGrouping for descriptions of the entries in the Grouping type column.\n\nTable 1 Convenience constructors from the MPMediaQuery class\n\nConstructor name\n\n\t\n\nMatches entire library\n\n\t\n\nFilter\n\n\t\n\nGrouping type\n\n\n\n\nalbums()\n\n\t\n\n-\n\n\t\n\nmusic\n\n\t\n\nMPMediaGrouping.album\n\n\n\n\nartists()\n\n\t\n\n-\n\n\t\n\nmusic\n\n\t\n\nMPMediaGrouping.artist\n\n\n\n\naudiobooks()\n\n\t\n\n-\n\n\t\n\naudioBook\n\n\t\n\nMPMediaGrouping.title\n\n\n\n\ncompilations()\n\n\t\n\n-\n\n\t\n\nany with MPMediaItemPropertyIsCompilation\n\n\t\n\nMPMediaGrouping.album\n\n\n\n\ncomposers()\n\n\t\n\nYes\n\n\t\n\nany\n\n\t\n\nMPMediaGrouping.composer\n\n\n\n\ngenres()\n\n\t\n\nYes\n\n\t\n\nany\n\n\t\n\nMPMediaGrouping.genre\n\n\n\n\nplaylists()\n\n\t\n\nYes\n\n\t\n\nany\n\n\t\n\nMPMediaGrouping.playlist\n\n\n\n\npodcasts()\n\n\t\n\n-\n\n\t\n\npodcast\n\n\t\n\nMPMediaGrouping.podcastTitle\n\n\n\n\nsongs()\n\n\t\n\n-\n\n\t\n\nmusic\n\n\t\n\nMPMediaGrouping.title\n\nTopics\nCreating media queries\nThe class methods in this section create queries which you can use directly or modify as described in Configuring media queries.\n\nFor each class method, the system sets the query’s groupingType property automatically according to the name of the method. For example, the albums() method assigns a grouping type of MPMediaGrouping.album. The grouping type specifies the nature of the media item collections you can then retrieve from the query. Some class methods match the entire Music library while others match a subset, as described in the Discussion sections for each method.\n\nclass func albums() -> MPMediaQuery\nCreates a media query that matches music items and that groups and sorts collections by album name.\nclass func artists() -> MPMediaQuery\nCreates a media query that matches music items and that groups and sorts collections by artist name.\nclass func songs() -> MPMediaQuery\nCreates a media query that matches music items and that groups and sorts collections by song name.\nclass func playlists() -> MPMediaQuery\nCreates a media query that matches the entire library and that groups and sorts collections by playlist name.\nclass func podcasts() -> MPMediaQuery\nCreates a media query that matches podcast items and that groups and sorts collections by podcast name.\nclass func audiobooks() -> MPMediaQuery\nCreates a media query that matches audio book items and that groups and sorts collections by audio book name.\nclass func compilations() -> MPMediaQuery\nCreates a media query that matches compilation items and that groups and sorts collections by album name.\nclass func composers() -> MPMediaQuery\nCreates a media query that matches all media items and that groups and sorts collections by composer name.\nclass func genres() -> MPMediaQuery\nCreates a media query that matches all media items and that groups and sorts collections by genre name.\ninit(filterPredicates: Set<MPMediaPredicate>?)\nInitializes a media query with a set of media property predicates.\nConfiguring media queries\nvar filterPredicates: Set<MPMediaPredicate>?\nThe media property predicates of the media query.\nfunc addFilterPredicate(MPMediaPredicate)\nAdds a media property predicate to a query.\nfunc removeFilterPredicate(MPMediaPredicate)\nRemoves a filter predicate from a query.\nvar groupingType: MPMediaGrouping\nThe grouping for collections retrieved with the media query.\nvar itemSections: [MPMediaQuerySection]?\nAn array representing the section grouping of the query’s specified media items.\nvar collectionSections: [MPMediaQuerySection]?\nAn array representing the section grouping of the query’s specified media item collections.\nenum MPMediaGrouping\nKeys used to configure a media query.\nPerforming media queries\nYou obtain a specified array of media items or media item collections from the iPod library by calling the items or collections accessor methods.\nvar items: [MPMediaItem]?\nAn array of media items that match the media query’s predicate.\nvar collections: [MPMediaItemCollection]?\nAn array of media item collections whose contained items match the query’s media property predicate.\nRelationships\nInherits From\nNSObject\nConforms To\nNSCopying\nNSSecureCoding\nSee Also\nMedia item queries\nUsing filters to create specialized queries\nAdd a filter set to a query before populating a music player queue.\nclass MPMediaQuerySection\nA range of media items or media item collections from within a media query.\nclass MPMediaPropertyPredicate\nA set of predicates for defining a filter in a media query.\nclass MPMediaPredicate\nAn abstract class that defines classes for filtering media in a media query."
  },
  {
    "title": "getPlaylist(with:creationMetadata:completionHandler:)",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmedialibrary/1621273-getplaylist",
    "html": "Parameters\nuuid\n\nThe unique identifier for the playlist.\n\ncreationMetadata\n\nThe metadata that the system uses to create a new playlist, which it ignores if a playlist already exists.\n\ncompletionHandler\n\nA block that the system calls after it retrieves or creates the playlist.\n\nplaylist\n\nContains the playlist identified by the UUID or the newly created playlist.\n\nerror\n\nIf an error occurred, this parameter holds the error object that explains the error. Otherwise, the value of this parameter is nil.\n\nDiscussion\n\nConcurrency Note\n\nYou can call this method from synchronous code using a completion handler, as shown on this page, or you can call it as an asynchronous method that has the following declaration:\n\nfunc getPlaylist(with uuid: UUID, creationMetadata: MPMediaPlaylistCreationMetadata?) async throws -> MPMediaPlaylist\n\n\nFor information about concurrency and asynchronous code in Swift, see Calling Objective-C APIs Asynchronously.\n\nThis function retrieves the playlist associated with the UUID. Create a static instance of the UUID using a previously generated UUID. Creating a new UUID using init(uuidString:) to retrieve a playlist doesn’t guarantee its retrieval.\n\nWhen there’s no playlist associated with the UUID, the system creates a new playlist with the UUID and the creation metadata. The system ignores this metadata when the playlist already exists."
  },
  {
    "title": "lastModifiedDate",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmedialibrary/1621279-lastmodifieddate",
    "html": "See Also\nReceiving notifications when the user's library changes\nfunc beginGeneratingLibraryChangeNotifications()\nAsks the media library to turn on notifications for whenever the library changes.\nfunc endGeneratingLibraryChangeNotifications()\nAsks the media library to turn off notifications for whenever the library changes.\nstatic let MPMediaLibraryDidChange: NSNotification.Name\nIndicates the media library has changed."
  },
  {
    "title": "MPSystemMusicPlayerController",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpsystemmusicplayercontroller",
    "html": "Topics\nPlaying video in the music app\nfunc openToPlay(MPMusicPlayerQueueDescriptor)\nOpens the Music app and plays the designated videos.\n\nRequired\n\nRelationships\nInherits From\nNSObjectProtocol\nSee Also\nBuilt-in music playback\nPlaying audio using the built-in music player\nCreate a media player inside your app to play audio from the user’s media library.\nclass MPMusicPlayerController\nAn object that plays audio media items from the device’s Music app library.\nprotocol MPMediaPlayback\nA protocol that defines the interface for controlling audio media playback."
  },
  {
    "title": "endGeneratingLibraryChangeNotifications()",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmedialibrary/1621271-endgeneratinglibrarychangenotifi",
    "html": "Discussion\n\nTo completely turn off notifications, you must call this method the same number of times that you called beginGeneratingLibraryChangeNotifications().\n\nSee Also\nReceiving notifications when the user's library changes\nfunc beginGeneratingLibraryChangeNotifications()\nAsks the media library to turn on notifications for whenever the library changes.\nstatic let MPMediaLibraryDidChange: NSNotification.Name\nIndicates the media library has changed.\nvar lastModifiedDate: Date\nThe calendar date on which the media library was last modified."
  },
  {
    "title": "MPMusicPlayerController",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmusicplayercontroller",
    "html": "Overview\n\nCreate an instance of a music player to play media items in your app. There are two types of music players:\n\nAn application music player plays music locally within your app. It isn’t aware of the Music app’s Now Playing item, nor does it affect the Music app’s state. There are two application music players: applicationMusicPlayer and applicationQueuePlayer. The application queue player provides greater control over the contents of the queue and is the preferred player.\n\nThe system music player employs the built-in Music app on your behalf. On instantiation, it takes on the current Music app state, such as the identification of the Now Playing item. If a user switches away from your app while music is playing, that music continues to play. The Music app then has your music player’s most recently-set repeat mode, shuffle mode, playback state, and Now Playing item.\n\nCreating a new instance of MPMusicPlayerController and not specifying the player type returns a system music player.\n\nImportant\n\nOnly use a music player on the app’s main thread.\n\nAccessing limited playback information while using Home Sharing\n\nThe built-in Music and Videos apps can play media from shared libraries using Home Sharing. However, third-party apps using the Media Player framework only have access to the device music library. This means that your app can’t display the title of a home-shared song in your user interface. Specifically, if the Music app is playing a home-shared song, and you’re using a system music player, the value of the nowPlayingItem property of your music player is nil. However, other playback information is available when playing shared media. For example, the framework updates the value of the playbackState property when the system music player plays a home-shared item.\n\nChoosing how the system handles remote control events\n\nUsers can initiate audio playback commands through an external headset or accessory.\n\nIf you use an application music player, the system sends these commands as remote control events to your app, but you don’t provide code to handle them. The framework receives and handles the remote control events.\n\nIf you use the system music player, your app uses the Music app to play audio, which means that the Music app is the Now Playing app. The Music app receives and handles the remote control events. For example, if your app plays audio using the system music player, and the user switches from your app to the iOS device’s Now Playing controls, the controls work as expected. That is, they can play or pause audio, or skip to the next and previous items.\n\nTopics\nGetting a music player\nclass var applicationMusicPlayer: MPMusicPlayerController\nReturns the application music player.\nclass var applicationQueuePlayer: MPMusicPlayerApplicationController\nReturns the application queue music player.\nclass var systemMusicPlayer: any MPMusicPlayerController & MPSystemMusicPlayerController\nReturns the system music player, which controls the Music app’s state.\nSetting up a playback queue\nBefore a music player can produce sound, it needs a playback queue. You provide the music player with its playback queue, which specifies the media items to play.\nfunc setQueue(with: MPMediaQuery)\nSets a music player’s playback queue based on a media query.\nfunc setQueue(with: MPMediaItemCollection)\nSets a music player’s playback queue using a media item collection.\nfunc setQueue(with: [String])\nSets a music player’s playback queue using with media items identified by the store identifiers.\nfunc setQueue(with: MPMusicPlayerQueueDescriptor)\nSet the music player’s playback queue using media items that fit the queue descriptor properties.\nPlaying a media item\nfunc prepareToPlay(completionHandler: ((any Error)?) -> Void)\nPrepares a music player for playback.\nManaging playback mode and state\nvar nowPlayingItem: MPMediaItem?\nThe currently-playing media item, or the media item in a queue that you designated to begin playback with.\nvar indexOfNowPlayingItem: Int\nThe index of the now playing item in the current playback queue.\nvar playbackState: MPMusicPlaybackState\nThe current playback state of the music player.\nvar repeatMode: MPMusicRepeatMode\nThe current repeat mode of the music player.\nvar shuffleMode: MPMusicShuffleMode\nThe current shuffle mode of the music player.\nenum MPMusicPlaybackState\nThe music player playback state modes.\nenum MPMusicRepeatMode\nThe repeat modes for the media player.\nenum MPMusicShuffleMode\nThe shuffle modes for the media player.\nvar volume: Float\nThe audio playback volume for the music player, in the range from 0.0 (silent) through 1.0 (maximum volume).\nDeprecated\nControlling playback\nfunc skipToNextItem()\nStarts playback of the next media item in the playback queue, or if the music player isn’t playing, designates the next media item as the next item to play.\nfunc skipToBeginning()\nRestarts playback at the beginning of the currently playing media item.\nfunc skipToPreviousItem()\nStarts playback of the previous media item in the playback queue, or if the music player isn’t playing, designates the previous media item as the next to play.\nfunc append(MPMusicPlayerQueueDescriptor)\nInserts the media items defined by the queue descriptor after the last media item in the current queue.\nfunc prepend(MPMusicPlayerQueueDescriptor)\nInserts the media items defined by the queue descriptor into the current queue immediately after the currently playing media item.\nUsing music player notifications\nThese methods control the posting of playback notifications. You can nest calls to start or end these notifications.\nfunc beginGeneratingPlaybackNotifications()\nStarts the generation of playback notifications.\nfunc endGeneratingPlaybackNotifications()\nEnds the generation of playback notifications.\nstatic let MPMusicPlayerControllerPlaybackStateDidChange: NSNotification.Name\nPosted when the playback state changes programmatically or by user action.\nstatic let MPMusicPlayerControllerNowPlayingItemDidChange: NSNotification.Name\nPosted when the currently playing media item has changed.\nstatic let MPMusicPlayerControllerVolumeDidChange: NSNotification.Name\nPosted when the audio playback volume for the music player has changed.\nType Properties\nclass var iPodMusicPlayer: MPMusicPlayerController\nReturns the iPod music player, which controls the iPod app’s state.\nDeprecated\nRelationships\nInherits From\nNSObject\nConforms To\nMPMediaPlayback\nSee Also\nBuilt-in music playback\nPlaying audio using the built-in music player\nCreate a media player inside your app to play audio from the user’s media library.\nprotocol MPMediaPlayback\nA protocol that defines the interface for controlling audio media playback.\nprotocol MPSystemMusicPlayerController\nA protocol for playing videos in the Music app."
  },
  {
    "title": "MPMediaPlayback",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmediaplayback",
    "html": "Overview\n\nThis protocol supports basic transport operations including start, stop, and pause, and also lets you seek forward and back through media or to a specific point in its timeline.\n\nTopics\nStarting and stopping playback\nfunc play()\nInitiates playback of the current item.\n\nRequired\n\nfunc pause()\nPauses playback of the current item.\n\nRequired\n\nfunc stop()\nEnds playback of the current item.\n\nRequired\n\nfunc prepareToPlay()\nPrepares a media player for playback.\n\nRequired\n\nvar isPreparedToPlay: Bool\nA Boolean value indicating whether a media player is ready to play.\n\nRequired\n\nSeeking within media\nfunc beginSeekingBackward()\nBegins seeking backward through the media content.\n\nRequired\n\nfunc beginSeekingForward()\nBegins seeking forward through the media content.\n\nRequired\n\nfunc endSeeking()\nEnds forward and backward seeking through the media content.\n\nRequired\n\nAccessing playback attributes\nvar currentPlaybackRate: Float\nThe current playback rate for the player.\n\nRequired\n\nvar currentPlaybackTime: TimeInterval\nThe current position of the playhead.\n\nRequired\n\nNotifications\nstatic let MPMediaPlaybackIsPreparedToPlayDidChange: NSNotification.Name\nIndicates that the prepared to play status of the media player has changed.\nRelationships\nConforming Types\nMPMoviePlayerController\nMPMusicPlayerController\nSee Also\nBuilt-in music playback\nPlaying audio using the built-in music player\nCreate a media player inside your app to play audio from the user’s media library.\nclass MPMusicPlayerController\nAn object that plays audio media items from the device’s Music app library.\nprotocol MPSystemMusicPlayerController\nA protocol for playing videos in the Music app."
  },
  {
    "title": "Playing audio using the built-in music player",
    "url": "https://developer.apple.com/documentation/mediaplayer/playing_audio_using_the_built-in_music_player",
    "html": "Overview\n\nThere are many reasons you might want to let users play music from their music library inside your app. For example, you might want them to listen to their own music while playing a particular level in your game. Add a built-in music player to quickly play audio tracks from the user’s music library while your app is running.\n\nNote\n\nTo follow these steps, you must have a provisioned iOS device. Simulator has no access to a device’s music library.\n\nSpecify a usage description string\n\nTo give the user control over their personal data, apps must obtain permission to access the person’s music library. The first time your app tries to access someone’s media library, the system displays an alert that prompts them to grant or deny access to their music. The alert message includes your app’s usage-description string, which is a text description of how you plan to use the music.\n\nTo specify the usage-description string for your app, add the NSAppleMusicUsageDescription key to your app’s Info.plist file. Set the value of the key to your description of how you intend to use the music. Make your description as concise as possible, and no more than one or two sentences. For example, the usage-description string for a game might explain that its soundtrack incorporates the person’s music at different points in the gameplay.\n\nImportant\n\nIf your app’s Info.plist file doesn’t include the NSAppleMusicUsageDescription key, the system forces your app to exit when it attempts to access the current music library. To fix the problem, add the key to your Info.plist file, and set the key’s value to an appropriate description.\n\nUsers can deny access to their media library, so design your app to run even without that access. If your app requires music, devise a backup plan that doesn’t involve asking the person to reconsider their decision. For example, include some default music in your app’s bundle.\n\nConfigure the media player contents\n\nTo play the user’s music, your app needs an MPMusicPlayerController object. The Media Player framework defines several player controllers, each of which serves a different purpose. To manage a queue of songs that’s specific to your app, create an application queue player, and fill it with one or more songs.\n\nTo access the songs in the user’s music library, construct an MPMediaQuery object for the items you want. The class has constructors that let you request the user’s playlists, podcasts, songs, and other media content. To get the current songs, use the songs() constructor, as shown in the following example.\n\n// Get the music player.\nlet musicPlayer = MPMusicPlayerApplicationController.applicationQueuePlayer\n// Add a playback queue containing all songs on the device.\nmusicPlayer.setQueue(with: .songs())\n\n\nIf you don’t want all the items in a collection, filter the list by adding one or more predicates to your MPMediaQuery. For example, you might specify a predicate to match only songs with a specific word in the title. For more information about configuring media queries, see MPMediaQuery.\n\nPlay and pause the music\n\nAfter you add one or more songs to your music player, begin playback by calling the play() method. Media players adopt the MPMediaPlayback protocol and support all of the normal methods to play, pause, and stop playback. You can also use the methods of that protocol to change the playback speed and seek within a media item.\n\nFor more information about controlling the playback of your items, see MPMediaPlayback.\n\nSee Also\nBuilt-in music playback\nclass MPMusicPlayerController\nAn object that plays audio media items from the device’s Music app library.\nprotocol MPMediaPlayback\nA protocol that defines the interface for controlling audio media playback.\nprotocol MPSystemMusicPlayerController\nA protocol for playing videos in the Music app.\nRelated Documentation\nDisplaying a media picker from your app\nLet users choose the music they want to play by displaying a media picker interface from within your app."
  },
  {
    "title": "MPNowPlayingInfoCenter",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpnowplayinginfocenter",
    "html": "Overview\n\nIf your app also provides Now Playing information containing information about the current track, use this object to update that information at appropriate times. This object contains a nowPlayingInfo dictionary describing the playing item.\n\nImportant\n\nSiri can provide suggestions in search, News, Safari, and other apps using on-device information that you contribute through the Now Playing APIs. Users can control Siri on-device learning through Siri and Search settings for your app.\n\nThe system displays Now Playing information on the device’s Lock Screen and in the media controls in Control Center. If the user directs playback of your media to Apple TV using AirPlay, the Now Playing information appears on the television screen. If the user connects a device to an iPod accessory, such as in a car, the accessory may display Now Playing information.\n\nImportant\n\nTo ensure that your app interacts successfully with the widest possible range of accessories, provide values for as many information properties as you can in the nowPlayingInfo dictionary.\n\nThe information you can specify includes all of the Now Playing metadata properties (see the Accessing Now Playing metadata properties topic group below), and the following subset of MPMediaItem properties:\n\nMPMediaItemPropertyAlbumTitle\n\nMPMediaItemPropertyAlbumTrackCount\n\nMPMediaItemPropertyAlbumTrackNumber\n\nMPMediaItemPropertyArtist\n\nMPMediaItemPropertyArtwork\n\nMPMediaItemPropertyComposer\n\nMPMediaItemPropertyDiscCount\n\nMPMediaItemPropertyDiscNumber\n\nMPMediaItemPropertyGenre\n\nMPMediaItemPropertyMediaType\n\nMPMediaItemPropertyPersistentID\n\nMPMediaItemPropertyPlaybackDuration\n\nMPMediaItemPropertyTitle\n\nYou don’t have direct control over what information the system displays, or its formatting. You set the values in the nowPlayingInfo dictionary and the system or the connected accessory handles displaying the information in a consistent manner for all apps.\n\nYou can ensure that your app interacts well with other apps providing Now Playing information by following the best practices in the Becoming a now playable app sample code project.\n\nTopics\nWorking with the default Now Playing info center\nclass func `default`() -> MPNowPlayingInfoCenter\nReturns the singleton Now Playing info center.\nvar nowPlayingInfo: [String : Any]?\nThe current Now Playing information for the default Now Playing info center.\nenum MPNowPlayingInfoMediaType\nThe type of media currently playing.\nSetting the playback state in macOS\nvar playbackState: MPNowPlayingPlaybackState\nThe current playback state of the app.\nenum MPNowPlayingPlaybackState\nThe playback state of the app.\nAccessing Now Playing metadata properties\nProvide specific details about the currently playing item.\nlet MPNowPlayingInfoCollectionIdentifier: String\nThe identifier of the collection the Now Playing item belongs to.\nlet MPNowPlayingInfoPropertyAdTimeRanges: String\nA list of ad breaks in the Now Playing item.\nlet MPNowPlayingInfoPropertyAvailableLanguageOptions: String\nThe available language option groups for the Now Playing item.\nlet MPNowPlayingInfoPropertyAssetURL: String\nThe URL pointing to the Now Playing item’s underlying asset.\nlet MPNowPlayingInfoPropertyChapterCount: String\nThe total number of chapters in the Now Playing item.\nlet MPNowPlayingInfoPropertyChapterNumber: String\nThe number corresponding to the currently playing chapter.\nlet MPNowPlayingInfoPropertyCreditsStartTime: String\nThe start time for the credits, in seconds, without ads, for the Now Playing item.\nlet MPNowPlayingInfoPropertyCurrentLanguageOptions: String\nThe currently active language options for the Now Playing item.\nlet MPNowPlayingInfoPropertyCurrentPlaybackDate: String\nThe date associated with the current elapsed playback time.\nlet MPNowPlayingInfoPropertyDefaultPlaybackRate: String\nThe default playback rate for the Now Playing item.\nlet MPNowPlayingInfoPropertyElapsedPlaybackTime: String\nThe elapsed time of the Now Playing item, in seconds.\nlet MPNowPlayingInfoPropertyExternalContentIdentifier: String\nThe opaque identifier that uniquely identifies the Now Playing item, even through app relaunches.\nlet MPNowPlayingInfoPropertyExternalUserProfileIdentifier: String\nThe opaque identifier that uniquely identifies the profile the Now Playing item plays from, even through app relaunches.\nlet MPNowPlayingInfoPropertyIsLiveStream: String\nA number that denotes whether the Now Playing item is a live stream.\nlet MPNowPlayingInfoPropertyMediaType: String\nThe media type of the Now Playing item.\nlet MPNowPlayingInfoPropertyPlaybackProgress: String\nThe current progress of the Now Playing item.\nlet MPNowPlayingInfoPropertyPlaybackRate: String\nThe playback rate of the Now Playing item.\nlet MPNowPlayingInfoPropertyPlaybackQueueCount: String\nThe total number of items in the app’s playback queue.\nlet MPNowPlayingInfoPropertyPlaybackQueueIndex: String\nThe index of the Now Playing item in the app’s playback queue.\nlet MPNowPlayingInfoPropertyServiceIdentifier: String\nThe service provider associated with the Now Playing item.\nRelationships\nInherits From\nNSObject\nSee Also\nNow Playing information\nBecoming a now playable app\nEnsure your app is eligible to become the Now Playing app by adopting best practices for providing Now Playing info and registering for remote command center actions.\nclass MPNowPlayingSession\nAn object that manages Now Playing information and remote commands for multiple players.\nclass MPNowPlayingInfoLanguageOption\nA set of interfaces for setting the language option for the Now Playing item.\nclass MPNowPlayingInfoLanguageOptionGroup\nA grouped set of language options where only a single language option can be active at a time.\nLanguage option characteristic constants\nThe constants for defining language characteristics."
  },
  {
    "title": "MPMediaItem",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmediaitem",
    "html": "Overview\n\nA media item has an overall unique identifier, accessed using the MPMediaItemPropertyPersistentID property key, as well as specific identifiers for its metadata. These identifiers persists across application launches.\n\nA media item can have a wide range of metadata associated with it. You access this metadata using the value(forProperty:) method along with the property keys described in this document. You can also access metadata in a batch fashion using the enumerateValues(forProperties:using:) method. Anytime the app accesses more than one property, enumerating over a set of property keys is more efficient than fetching each individual property. MPMediaEntity defines both of these methods, the abstract superclass of MPMediaItemCollection, and described in MPMediaEntity.\n\nYou use attributes of media items to build media queries for searching the Media library. MPMediaType, General media item property keys, and Podcast Item Property Keys describe these attributes. In addition, Media entity property keys describes the MPMediaEntityPropertyPersistentID property, and MPMediaQuery describes media queries.\n\nTopics\nMedia item properties\nvar albumArtist: String?\nThe primary performing artist for an album.\nvar albumArtistPersistentID: MPMediaEntityPersistentID\nThe persistent identifier for the primary performing artist for an album.\nvar albumPersistentID: MPMediaEntityPersistentID\nThe persistent identifier for an album.\nvar albumTitle: String?\nThe title of an album, such as Live on Mars, rather than the title of an individual song on the album, such as “Crater Dance.”\nvar albumTrackCount: Int\nThe number of tracks for the album that contains the media item.\nvar albumTrackNumber: Int\nThe track number of the media item, for a media item that’s part of an album.\nvar artist: String?\nThe performing artists for a media item, which may vary from the primary artist for the album that a media item belongs to.\nvar artistPersistentID: MPMediaEntityPersistentID\nThe persistent identifier for an artist.\nvar artwork: MPMediaItemArtwork?\nThe artwork image for the media item.\nvar assetURL: URL?\nThe URL that points to the media item.\nvar beatsPerMinute: Int\nThe number of musical beats per minute for the media item.\nvar bookmarkTime: TimeInterval\nThe time of the user’s most recent interaction with the bookmark in the media item.\nvar isCloudItem: Bool\nA Boolean value that indicates whether the media item is an iCloud Music Library item.\nvar comments: String?\nTextual information about the media item.\nvar isCompilation: Bool\nA Boolean value that indicates whether the media item is part of a compilation.\nvar isPreorder: Bool\nA Boolean value that indicates whether the media item is a preorder.\nvar composer: String?\nThe musical composer for the media item.\nvar composerPersistentID: MPMediaEntityPersistentID\nThe persistent identifier for a composer.\nvar dateAdded: Date\nThe date the user adds the media item to the library.\nvar discCount: Int\nThe number of discs for the album that contains the media item.\nvar discNumber: Int\nThe disc number of the media item, for a media item that’s part of a multidisc album.\nvar isExplicitItem: Bool\nA Boolean value that indicates whether the media item has explicit (adult) lyrics or language.\nvar genre: String?\nThe music or film genre of the media item.\nvar genrePersistentID: MPMediaEntityPersistentID\nThe persistent identifier for a genre.\nvar lastPlayedDate: Date?\nThe most recent play date of the media item.\nvar lyrics: String?\nThe lyrics for the media item.\nvar mediaType: MPMediaType\nThe media type of the media item.\nvar persistentID: MPMediaEntityPersistentID\nThe persistent identifier for the media item.\nvar playCount: Int\nThe number of times the user plays the media item.\nvar playbackDuration: TimeInterval\nThe playback duration of the media item.\nvar playbackStoreID: String\nThe ID of a media item from the Apple Music catalog.\nvar podcastPersistentID: MPMediaEntityPersistentID\nThe persistent identifier for an audio podcast.\nvar podcastTitle: String?\nThe title of a podcast, such as This Martian Drudgery, rather than the title of an individual episode of a podcast, such as “Episode 12: Another Cold Day at the Pole.”\nvar hasProtectedAsset: Bool\nA Boolean value that indicates whether the media item has a protected asset.\nvar rating: Int\nThe user-specified rating of the media item.\nvar releaseDate: Date?\nThe date of the media item’s first public release.\nvar skipCount: Int\nThe number of times the user skips playing the media item.\nvar title: String?\nThe title or name of the media item.\nvar userGrouping: String?\nGrouping information for the media item.\nObtaining group properties\nclass func persistentIDProperty(forGroupingType: MPMediaGrouping) -> String\nObtains the persistent identifier key for a specified grouping type.\nclass func titleProperty(forGroupingType: MPMediaGrouping) -> String\nObtains the title key for a specified grouping type.\nMedia item types and keys\nstruct MPMediaType\nThe properties for defining the type for a media item.\nGeneral media item property keys\nSystem-defined properties for obtaining the metadata for a media item.\nUser-defined property keys\nProperties for obtaining user-defined metadata for a media item.\nRelationships\nInherits From\nMPMediaEntity\nSee Also\nMedia items and playlists\nclass MPMediaItemArtwork\nA graphical image, such as music album cover art, associated with a media item.\nclass MPMediaItemCollection\nA sorted set of media items from the media library.\nclass MPMediaPlaylist\nA playable collection of related media items.\nclass MPMediaPlaylistCreationMetadata\nA set of attributes for describing a playlist when creating it.\nclass MPMediaEntity\nThe abstract superclass for media items, media item collections, and media playlist instances."
  },
  {
    "title": "MPMediaItemCollection",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmediaitemcollection",
    "html": "Overview\n\nTypically, you use this class by requesting an array of collections from a media query by way of its collections property. MPMediaQuery describes media queries.\n\nThe grouping type for the media query determines the arrangement of the media items you obtain. You also use the media query collections property to obtain synced playlists, as described in MPMediaPlaylist.\n\nA media item collection can have a wide range of metadata associated with it. You access this metadata using the value(forProperty:) method along with the property keys described in this document. You can also access metadata in a batch fashion using the enumerateValues(forProperties:using:) method. In some cases, this is more efficient. MPMediaEntity defines and describes both of these methods.\n\nTopics\nCreating a media item collection\ninit(items: [MPMediaItem])\nInitializes a media item collection with an array of media items.\nUsing a media item collection\nvar items: [MPMediaItem]\nThe media items in a media item collection.\nvar representativeItem: MPMediaItem?\nA media item whose properties are representative of the other media items in a collection.\nvar count: Int\nThe number of media items in a collection.\nvar mediaTypes: MPMediaType\nThe types of the media items in a collection.\nRelationships\nInherits From\nMPMediaEntity\nSee Also\nMedia items and playlists\nclass MPMediaItem\nA collection of properties that represents a single item in the media library.\nclass MPMediaItemArtwork\nA graphical image, such as music album cover art, associated with a media item.\nclass MPMediaPlaylist\nA playable collection of related media items.\nclass MPMediaPlaylistCreationMetadata\nA set of attributes for describing a playlist when creating it.\nclass MPMediaEntity\nThe abstract superclass for media items, media item collections, and media playlist instances."
  },
  {
    "title": "MPMediaItemArtwork",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmediaitemartwork",
    "html": "Topics\nResizing existing artwork\ninit(boundsSize: CGSize, requestHandler: (CGSize) -> UIImage)\nCreates a new image from existing artwork with the specified bounds.\nUsing a media item image\nfunc image(at: CGSize) -> UIImage?\nReturns the artwork image for an item at the given size.\nvar bounds: CGRect\nThe maximum size, in points, of the image associated with the media item artwork.\nInitializers\ninit(image: UIImage)\nInitializes a media item artwork instance with a full-size image.\nDeprecated\nInstance Properties\nvar imageCropRect: CGRect\nThe bounds, in points, of the content area for the full size image associated with the media item artwork.\nRelationships\nInherits From\nNSObject\nSee Also\nMedia items and playlists\nclass MPMediaItem\nA collection of properties that represents a single item in the media library.\nclass MPMediaItemCollection\nA sorted set of media items from the media library.\nclass MPMediaPlaylist\nA playable collection of related media items.\nclass MPMediaPlaylistCreationMetadata\nA set of attributes for describing a playlist when creating it.\nclass MPMediaEntity\nThe abstract superclass for media items, media item collections, and media playlist instances."
  },
  {
    "title": "MPMusicPlayerApplicationController",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmusicplayerapplicationcontroller",
    "html": "Topics\nChanging the queue contents\nfunc perform(queueTransaction: (MPMusicPlayerControllerMutableQueue) -> Void, completionHandler: (MPMusicPlayerControllerQueue, (any Error)?) -> Void)\nChanges the contents of the media items in the queue.\nstatic let MPMusicPlayerControllerQueueDidChange: NSNotification.Name\nIndicates the music player’s queue changed.\nRelationships\nInherits From\nMPMusicPlayerController\nSee Also\nMedia player queues\nclass MPMusicPlayerControllerQueue\nAn immutable queue containing the media items to play.\nclass MPMusicPlayerControllerMutableQueue\nA mutable queue containing the media items to play.\nclass MPMusicPlayerMediaItemQueueDescriptor\nA set of properties and methods for modifying audio media items in the player’s media queue.\nclass MPMusicPlayerStoreQueueDescriptor\nA set of properties and methods for modifying items, based on their store identifier, in the player’s queue.\nclass MPMusicPlayerPlayParametersQueueDescriptor\nA set of properties and methods for modifying how to play items, based on play parameters the framework returns.\nclass MPMusicPlayerQueueDescriptor\nThe abstract base class for audio media item and store queue descriptors."
  },
  {
    "title": "MPMediaLibrary",
    "url": "https://developer.apple.com/documentation/mediaplayer/mpmedialibrary",
    "html": "Overview\n\nA user may sync their device, changing the contents on the device, while your app is running. You can use the notification provided by this class to ensure that your app’s cache of the user’s library is up-to-date.\n\nTo retrieve media items from the media library, build a custom query as described in MPMediaPropertyPredicate and MPMediaQuery.\n\nTopics\nGetting the default media library\nclass func requestAuthorization((MPMediaLibraryAuthorizationStatus) -> Void)\nDisplays a user interface so that the user can authorize whether your app may view the media library’s contents.\nclass func authorizationStatus() -> MPMediaLibraryAuthorizationStatus\nReturns whether the app can access the user’s media library.\nenum MPMediaLibraryAuthorizationStatus\nThe list of possible states for authorization to access to the user’s media library.\nclass func `default`() -> MPMediaLibrary\nReturns an instance of the default media library.\nReceiving notifications when the user's library changes\nfunc beginGeneratingLibraryChangeNotifications()\nAsks the media library to turn on notifications for whenever the library changes.\nfunc endGeneratingLibraryChangeNotifications()\nAsks the media library to turn off notifications for whenever the library changes.\nstatic let MPMediaLibraryDidChange: NSNotification.Name\nIndicates the media library has changed.\nvar lastModifiedDate: Date\nThe calendar date on which the media library was last modified.\nRetrieving a playlist from the media library\nfunc getPlaylist(with: UUID, creationMetadata: MPMediaPlaylistCreationMetadata?, completionHandler: (MPMediaPlaylist?, (any Error)?) -> Void)\nRetrieves an app maintained existing playlist or creates a new playlist when no playlist exists.\nAdding an item to the media library\nfunc addItem(withProductID: String, completionHandler: (([MPMediaEntity], (any Error)?) -> Void)?)\nAdds the designated item to the user’s music library.\nRelationships\nInherits From\nNSObject\nConforms To\nNSSecureCoding"
  },
  {
    "title": "Using filters to create specialized queries",
    "url": "https://developer.apple.com/documentation/mediaplayer/using_filters_to_create_specialized_queries",
    "html": "Overview\n\nCreating a queue and adding it to a music player is a straightforward task. You populate the music player queue by creating a basic query and searching the user’s music library for items that match the query. However, you can create filters and add them at query creation to refine the player’s music queue. Filter for an album, artist, song, or any of a variety of other options. For a list of keys you can use as filters, see General media item property keys.\n\nCreate one or more filters\n\nYou need to create a new filter for each item you want to filter on. For example, if you want to filter for a specific album and all songs that contain a certain word from that album, you need two separate filters.\n\nlet albumTitleFilter =\n    MPMediaPropertyPredicate(value: \"Album Title\",\n                             forProperty: MPMediaItemPropertyAlbumTitle,\n                             comparisonType: .equalTo)\n\n\nlet songTitleFilter =\n    MPMediaPropertyPredicate(value: \"Song Title\",\n                             forProperty: MPMediaItemPropertyTitle,\n                             comparisonType: .contains)\n\nCombine the filters into a filter set\n\nCombine the filters into a filter set before you assign it to a query.\n\nlet filterSet = Set([albumTitleFilter, songTitleFilter])\n\nCreate a query using the filter set\n\nCreate a new query using the newly created filter set, and set the music player’s queue.\n\nlet query = MPMediaQuery(filterPredicates: filterSet)\nmusicPlayer.setQueue(with: query)\n\nSee Also\nMedia item queries\nclass MPMediaQuery\nA query that specifies a set of media items from the device’s media library using a filter and a grouping type.\nclass MPMediaQuerySection\nA range of media items or media item collections from within a media query.\nclass MPMediaPropertyPredicate\nA set of predicates for defining a filter in a media query.\nclass MPMediaPredicate\nAn abstract class that defines classes for filtering media in a media query."
  },
  {
    "title": "Media Player",
    "url": "https://developer.apple.com/documentation/mediaplayer",
    "html": "Overview\n\nUse the Media Player framework, which is part of MusicKit, to control playback of the user’s media from your app. If your app incorporates music, you can use this framework to search for audio content, such as songs, podcasts, and books, in the user’s library. You can then play that content directly or ask the system Music app to play it. For example, a game might give users the option to play their own music while completing a particular game level.\n\nImportant\n\nTo protect user privacy, users need to grant permission for your app to access their media library. Add the NSAppleMusicUsageDescription key to your app’s Info.plist file, and include a description of how you intend to use the user’s library. If this key isn’t present, the system terminates your app when it tries to access the user’s library.\n\nTo play content from the user’s library using the Media Player framework, use one of the built-in MPMusicPlayerController objects:\n\nAn application player plays music locally within your app. Use this player when you want greater control over the audio you play for the user. This player doesn’t change the state of the built-in Music app.\n\nThe system player employs the Music app to play audio on your behalf. Use this player when you want audio to continue playing even when the user switches away from your app.\n\nUse media queries to retrieve the items you want to play and to populate the queue for the media player you select. After a user gives your app permission to access their Apple Music account, it can add songs, create playlists, and play songs from Apple Music. If your app detects that the user isn’t an Apple Music subscriber, it can offer a trial.\n\nYou can’t play video media items directly using the Media Player framework. To play videos containing MPMediaItem objects, use an AVPlayer object from AVFoundation. The system player also provides a way to play video items using the system apps.\n\nImportant\n\nOnly use this framework to facilitate playback of the user’s audio content within your app. Don’t gather information about the user’s audio content for any other purpose. For more information about accessing Apple Music content, see the App Store review guidelines.\n\nTopics\nEssentials\nproperty list key NSAppleMusicUsageDescription\nA message that tells the user why the app is requesting access to the user’s media library.\nName: Privacy - Media Library Usage Description\nBuilt-in music playback\nPlaying audio using the built-in music player\nCreate a media player inside your app to play audio from the user’s media library.\nclass MPMusicPlayerController\nAn object that plays audio media items from the device’s Music app library.\nprotocol MPMediaPlayback\nA protocol that defines the interface for controlling audio media playback.\nprotocol MPSystemMusicPlayerController\nA protocol for playing videos in the Music app.\nMedia library synchronization\nclass MPMediaLibrary\nAn object that represents the state of synced media items on a device.\nMedia item queries\nUsing filters to create specialized queries\nAdd a filter set to a query before populating a music player queue.\nclass MPMediaQuery\nA query that specifies a set of media items from the device’s media library using a filter and a grouping type.\nclass MPMediaQuerySection\nA range of media items or media item collections from within a media query.\nclass MPMediaPropertyPredicate\nA set of predicates for defining a filter in a media query.\nclass MPMediaPredicate\nAn abstract class that defines classes for filtering media in a media query.\nMedia player queues\nclass MPMusicPlayerControllerQueue\nAn immutable queue containing the media items to play.\nclass MPMusicPlayerControllerMutableQueue\nA mutable queue containing the media items to play.\nclass MPMusicPlayerApplicationController\nA media player object that you use to revise the queue that’s currently playing.\nclass MPMusicPlayerMediaItemQueueDescriptor\nA set of properties and methods for modifying audio media items in the player’s media queue.\nclass MPMusicPlayerStoreQueueDescriptor\nA set of properties and methods for modifying items, based on their store identifier, in the player’s queue.\nclass MPMusicPlayerPlayParametersQueueDescriptor\nA set of properties and methods for modifying how to play items, based on play parameters the framework returns.\nclass MPMusicPlayerQueueDescriptor\nThe abstract base class for audio media item and store queue descriptors.\nMedia items and playlists\nclass MPMediaItem\nA collection of properties that represents a single item in the media library.\nclass MPMediaItemArtwork\nA graphical image, such as music album cover art, associated with a media item.\nclass MPMediaItemCollection\nA sorted set of media items from the media library.\nclass MPMediaPlaylist\nA playable collection of related media items.\nclass MPMediaPlaylistCreationMetadata\nA set of attributes for describing a playlist when creating it.\nclass MPMediaEntity\nThe abstract superclass for media items, media item collections, and media playlist instances.\nMedia player user interface\nDisplaying a media picker from your app\nLet users choose the music they want to play by displaying a media picker interface from within your app.\nclass MPMediaPickerController\nA specialized view controller that provides a graphical interface for selecting media items.\nclass MPVolumeView\nA slider control for setting the system audio output volume, and a button for choosing the audio output route.\nNow Playing information\nProvide information about the current track.\nBecoming a now playable app\nEnsure your app is eligible to become the Now Playing app by adopting best practices for providing Now Playing info and registering for remote command center actions.\nclass MPNowPlayingSession\nAn object that manages Now Playing information and remote commands for multiple players.\nclass MPNowPlayingInfoCenter\nAn object for setting the Now Playing information for media that your app plays.\nclass MPNowPlayingInfoLanguageOption\nA set of interfaces for setting the language option for the Now Playing item.\nclass MPNowPlayingInfoLanguageOptionGroup\nA grouped set of language options where only a single language option can be active at a time.\nLanguage option characteristic constants\nThe constants for defining language characteristics.\nExternal player and system event handling\nSupport playback controls on external media players or system-provided controls.\nHandling external player events notifications\nHandle events for external media players.\nRemote command center events\nSet up the remote command center to handle media player events.\nTrack navigation events\nRespond to requests to change which part of a media item plays.\nMedia playback mode events\nRespond to changes in the way media items play.\nFeedback and rating events\nRespond to incoming feedback and rating events.\nExternal media player items\nProvide content and interact with external media players.\nclass MPContentItem\nAn object that contains the information for a displayed media item.\nMedia player errors\nstruct MPError\nA structure that represents a framework error.\nlet MPErrorDomain: String\nThe Media Player framework error domain.\nDeprecated\nDeprecated types\nReview deprecated symbols and avoid using them in your app."
  }
]