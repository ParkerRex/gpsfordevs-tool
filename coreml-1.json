[
  {
    "title": "pixelsHigh | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlimagesize/2994301-pixelshigh",
    "html": "See Also\nAccessing an Image Size\nvar pixelsWide: Int\nThe width of an image feature in pixels."
  },
  {
    "title": "pixelsWide | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlimagesize/2994302-pixelswide",
    "html": "See Also\nAccessing an Image Size\nvar pixelsHigh: Int\nThe height of an image feature in pixels."
  },
  {
    "title": "pixelsHighRange | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlimagesizeconstraint/2994305-pixelshighrange",
    "html": "See Also\nAccessing the Image Size Ranges\nvar pixelsWideRange: NSRange\nThe range of widths a model's image feature accepts as input or produces as output."
  },
  {
    "title": "flatMap(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarrayslice/3763426-flatmap",
    "html": "Parameters\ntransform\n\nA closure that accepts an element of this sequence as its argument and returns a sequence or collection.\n\nReturn Value\n\nThe resulting flattened array.\n\nDiscussion\n\nUse this method to receive a single-level collection when your transformation produces a sequence or collection for each element.\n\nIn this example, note the difference in the result of using map and flatMap with a transformation that returns an array.\n\nlet numbers = [1, 2, 3, 4]\n\n\nlet mapped = numbers.map { Array(repeating: $0, count: $0) }\n// [[1], [2, 2], [3, 3, 3], [4, 4, 4, 4]]\n\n\nlet flatMapped = numbers.flatMap { Array(repeating: $0, count: $0) }\n// [1, 2, 2, 3, 3, 3, 4, 4, 4, 4]\n\n\nIn fact, s.flatMap(transform) is equivalent to Array(s.map(transform).joined()).\n\nComplexity: O(m + n), where n is the length of this sequence and m is the length of the result.\n\nSee Also\nTransforming a Shaped Array Slice\nfunc map<T>((MLShapedArraySlice<Scalar>) -> T) -> [T]\nReturns an array containing the results of mapping the given closure over the sequence’s elements.\nfunc compactMap<ElementOfResult>((MLShapedArraySlice<Scalar>) -> ElementOfResult?) -> [ElementOfResult]\nReturns an array containing the non-nil results of calling the given transformation with each element of this sequence.\nfunc flatMap<ElementOfResult>((MLShapedArraySlice<Scalar>) -> ElementOfResult?) -> [ElementOfResult]\nGenerates an array that concatenates the sequences from a transform closure that returns an optional.\nDeprecated\nfunc filter((MLShapedArraySlice<Scalar>) -> Bool) -> [MLShapedArraySlice<Scalar>]\nReturns an array containing, in order, the elements of the sequence that satisfy the given predicate.\nfunc filter(Predicate<MLShapedArraySlice<Scalar>>) -> [MLShapedArraySlice<Scalar>]\nfunc reduce<Result>(Result, (Result, MLShapedArraySlice<Scalar>) -> Result) -> Result\nReturns the result of combining the elements of the sequence using the given closure.\nfunc reduce<Result>(into: Result, (inout Result, MLShapedArraySlice<Scalar>) -> ()) -> Result\nReturns the result of combining the elements of the sequence using the given closure.\nfunc split(separator: MLShapedArraySlice<Scalar>, maxSplits: Int, omittingEmptySubsequences: Bool) -> [ArraySlice<MLShapedArraySlice<Scalar>>]\nReturns the longest possible subsequences of the sequence, in order, around elements equal to the given element.\nfunc split<C>(separator: C, maxSplits: Int, omittingEmptySubsequences: Bool) -> [MLShapedArraySlice<Scalar>]\nReturns the longest possible subsequences of the collection, in order, around elements equal to the given separator.\nfunc split(separator: MLShapedArraySlice<Scalar>, maxSplits: Int, omittingEmptySubsequences: Bool) -> [MLShapedArraySlice<Scalar>]\nReturns the longest possible subsequences of the collection, in order, around elements equal to the given element."
  },
  {
    "title": "compactMap(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarrayslice/3763398-compactmap",
    "html": "Parameters\ntransform\n\nA closure that accepts an element of this sequence as its argument and returns an optional value.\n\nReturn Value\n\nAn array of the non-nil results of calling transform with each element of the sequence.\n\nDiscussion\n\nUse this method to receive an array of non-optional values when your transformation produces an optional value.\n\nIn this example, note the difference in the result of using map and compactMap with a transformation that returns an optional Int value.\n\nlet possibleNumbers = [\"1\", \"2\", \"three\", \"///4///\", \"5\"]\n\n\nlet mapped: [Int?] = possibleNumbers.map { str in Int(str) }\n// [1, 2, nil, nil, 5]\n\n\nlet compactMapped: [Int] = possibleNumbers.compactMap { str in Int(str) }\n// [1, 2, 5]\n\n\nComplexity: O(n), where n is the length of this sequence.\n\nSee Also\nTransforming a Shaped Array Slice\nfunc map<T>((MLShapedArraySlice<Scalar>) -> T) -> [T]\nReturns an array containing the results of mapping the given closure over the sequence’s elements.\nfunc flatMap<SegmentOfResult>((MLShapedArraySlice<Scalar>) -> SegmentOfResult) -> [SegmentOfResult.Element]\nReturns an array containing the concatenated results of calling the given transformation with each element of this sequence.\nfunc flatMap<ElementOfResult>((MLShapedArraySlice<Scalar>) -> ElementOfResult?) -> [ElementOfResult]\nGenerates an array that concatenates the sequences from a transform closure that returns an optional.\nDeprecated\nfunc filter((MLShapedArraySlice<Scalar>) -> Bool) -> [MLShapedArraySlice<Scalar>]\nReturns an array containing, in order, the elements of the sequence that satisfy the given predicate.\nfunc filter(Predicate<MLShapedArraySlice<Scalar>>) -> [MLShapedArraySlice<Scalar>]\nfunc reduce<Result>(Result, (Result, MLShapedArraySlice<Scalar>) -> Result) -> Result\nReturns the result of combining the elements of the sequence using the given closure.\nfunc reduce<Result>(into: Result, (inout Result, MLShapedArraySlice<Scalar>) -> ()) -> Result\nReturns the result of combining the elements of the sequence using the given closure.\nfunc split(separator: MLShapedArraySlice<Scalar>, maxSplits: Int, omittingEmptySubsequences: Bool) -> [ArraySlice<MLShapedArraySlice<Scalar>>]\nReturns the longest possible subsequences of the sequence, in order, around elements equal to the given element.\nfunc split<C>(separator: C, maxSplits: Int, omittingEmptySubsequences: Bool) -> [MLShapedArraySlice<Scalar>]\nReturns the longest possible subsequences of the collection, in order, around elements equal to the given separator.\nfunc split(separator: MLShapedArraySlice<Scalar>, maxSplits: Int, omittingEmptySubsequences: Bool) -> [MLShapedArraySlice<Scalar>]\nReturns the longest possible subsequences of the collection, in order, around elements equal to the given element."
  },
  {
    "title": "min(by:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarrayslice/3763475-min",
    "html": "Parameters\nareInIncreasingOrder\n\nA predicate that returns true if its first argument should be ordered before its second argument; otherwise, false.\n\nReturn Value\n\nThe sequence’s minimum element, according to areInIncreasingOrder. If the sequence has no elements, returns nil.\n\nDiscussion\n\nThe predicate must be a strict weak ordering over the elements. That is, for any elements a, b, and c, the following conditions must hold:\n\nareInIncreasingOrder(a, a) is always false. (Irreflexivity)\n\nIf areInIncreasingOrder(a, b) and areInIncreasingOrder(b, c) are both true, then areInIncreasingOrder(a, c) is also true. (Transitive comparability)\n\nTwo elements are incomparable if neither is ordered before the other according to the predicate. If a and b are incomparable, and b and c are incomparable, then a and c are also incomparable. (Transitive incomparability)\n\nThis example shows how to use the min(by:) method on a dictionary to find the key-value pair with the lowest value.\n\nlet hues = [\"Heliotrope\": 296, \"Coral\": 16, \"Aquamarine\": 156]\nlet leastHue = hues.min { a, b in a.value < b.value }\nprint(leastHue)\n// Prints \"Optional((key: \"Coral\", value: 16))\"\n\n\nComplexity: O(n), where n is the length of the sequence.\n\nSee Also\nGenerating a Shaped Array Slice\nfunc first(where: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>?\nReturns the first element of the sequence that satisfies the given predicate.\nfunc last(where: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>?\nReturns the last element of the sequence that satisfies the given predicate.\nfunc dropFirst(Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence containing all but the given number of initial elements.\nfunc dropLast(Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence containing all but the specified number of final elements.\nfunc drop(while: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>\nReturns a subsequence by skipping elements while predicate returns true and returning the remaining elements.\nfunc joined() -> FlattenSequence<MLShapedArraySlice<Scalar>>\nReturns the elements of this sequence of sequences, concatenated.\nfunc joined<Separator>(separator: Separator) -> JoinedSequence<MLShapedArraySlice<Scalar>>\nReturns the concatenated elements of this sequence of sequences, inserting the given separator between each element.\nfunc max(by: (MLShapedArraySlice<Scalar>, MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>?\nReturns the maximum element in the sequence, using the given predicate as the comparison between elements.\nfunc prefix(Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence, up to the specified maximum length, containing the initial elements of the collection.\nfunc prefix(upTo: Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence from the start of the collection up to, but not including, the specified position.\nfunc prefix(through: Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence from the start of the collection through the specified position.\nfunc prefix(while: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>\nReturns a subsequence containing the initial elements until predicate returns false and skipping the remaining elements.\nfunc suffix(Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence, up to the given maximum length, containing the final elements of the collection.\nfunc suffix(from: Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence from the specified position to the end of the collection.\nfunc trimPrefix<Prefix>(Prefix)\nRemoves the initial elements that satisfy the given predicate from the start of the sequence.\nfunc trimPrefix(while: (MLShapedArraySlice<Scalar>) -> Bool)\nTrims the array slice using a predicate.\nfunc trimmingPrefix<Prefix>(Prefix) -> MLShapedArraySlice<Scalar>\nReturns a new collection of the same type by removing initial elements that satisfy the given predicate from the start.\nfunc trimmingPrefix(while: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>\nfunc reversed() -> ReversedCollection<MLShapedArraySlice<Scalar>>\nReturns a view presenting the elements of the collection in reverse order.\nfunc shuffled() -> [MLShapedArraySlice<Scalar>]\nReturns the elements of the sequence, shuffled.\nfunc shuffled<T>(using: inout T) -> [MLShapedArraySlice<Scalar>]\nReturns the elements of the sequence, shuffled using the given generator as a source for randomness.\nfunc sorted<Comparator>(using: Comparator) -> [MLShapedArraySlice<Scalar>]\nGenerates a copy of the shaped array slice by sorting its slices with a comparator.\nfunc sorted<S, Comparator>(using: S) -> [MLShapedArraySlice<Scalar>]\nGenerates a copy of the shaped array slice by sorting its slices with a sequence of comparators.\nfunc sorted(by: (MLShapedArraySlice<Scalar>, MLShapedArraySlice<Scalar>) -> Bool) -> [MLShapedArraySlice<Scalar>]\nReturns the elements of the sequence, sorted using the given predicate as the comparison between elements.\nfunc split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (MLShapedArraySlice<Scalar>) -> Bool) -> [MLShapedArraySlice<Scalar>]\nReturns the longest possible subsequences of the collection, in order, that don’t contain elements satisfying the given predicate."
  },
  {
    "title": "sorted(using:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarrayslice/3802068-sorted",
    "html": "Parameters\ncomparator\n\nA shaped-array slice comparator.\n\nSee Also\nGenerating a Shaped Array Slice\nfunc first(where: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>?\nReturns the first element of the sequence that satisfies the given predicate.\nfunc last(where: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>?\nReturns the last element of the sequence that satisfies the given predicate.\nfunc dropFirst(Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence containing all but the given number of initial elements.\nfunc dropLast(Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence containing all but the specified number of final elements.\nfunc drop(while: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>\nReturns a subsequence by skipping elements while predicate returns true and returning the remaining elements.\nfunc joined() -> FlattenSequence<MLShapedArraySlice<Scalar>>\nReturns the elements of this sequence of sequences, concatenated.\nfunc joined<Separator>(separator: Separator) -> JoinedSequence<MLShapedArraySlice<Scalar>>\nReturns the concatenated elements of this sequence of sequences, inserting the given separator between each element.\nfunc min(by: (MLShapedArraySlice<Scalar>, MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>?\nReturns the minimum element in the sequence, using the given predicate as the comparison between elements.\nfunc max(by: (MLShapedArraySlice<Scalar>, MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>?\nReturns the maximum element in the sequence, using the given predicate as the comparison between elements.\nfunc prefix(Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence, up to the specified maximum length, containing the initial elements of the collection.\nfunc prefix(upTo: Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence from the start of the collection up to, but not including, the specified position.\nfunc prefix(through: Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence from the start of the collection through the specified position.\nfunc prefix(while: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>\nReturns a subsequence containing the initial elements until predicate returns false and skipping the remaining elements.\nfunc suffix(Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence, up to the given maximum length, containing the final elements of the collection.\nfunc suffix(from: Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence from the specified position to the end of the collection.\nfunc trimPrefix<Prefix>(Prefix)\nRemoves the initial elements that satisfy the given predicate from the start of the sequence.\nfunc trimPrefix(while: (MLShapedArraySlice<Scalar>) -> Bool)\nTrims the array slice using a predicate.\nfunc trimmingPrefix<Prefix>(Prefix) -> MLShapedArraySlice<Scalar>\nReturns a new collection of the same type by removing initial elements that satisfy the given predicate from the start.\nfunc trimmingPrefix(while: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>\nfunc reversed() -> ReversedCollection<MLShapedArraySlice<Scalar>>\nReturns a view presenting the elements of the collection in reverse order.\nfunc shuffled() -> [MLShapedArraySlice<Scalar>]\nReturns the elements of the sequence, shuffled.\nfunc shuffled<T>(using: inout T) -> [MLShapedArraySlice<Scalar>]\nReturns the elements of the sequence, shuffled using the given generator as a source for randomness.\nfunc sorted<S, Comparator>(using: S) -> [MLShapedArraySlice<Scalar>]\nGenerates a copy of the shaped array slice by sorting its slices with a sequence of comparators.\nfunc sorted(by: (MLShapedArraySlice<Scalar>, MLShapedArraySlice<Scalar>) -> Bool) -> [MLShapedArraySlice<Scalar>]\nReturns the elements of the sequence, sorted using the given predicate as the comparison between elements.\nfunc split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (MLShapedArraySlice<Scalar>) -> Bool) -> [MLShapedArraySlice<Scalar>]\nReturns the longest possible subsequences of the collection, in order, that don’t contain elements satisfying the given predicate."
  },
  {
    "title": "drop(while:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarrayslice/3763405-drop",
    "html": "Parameters\npredicate\n\nA closure that takes an element of the sequence as its argument and returns true if the element should be skipped or false if it should be included. Once the predicate returns false it will not be called again.\n\nDiscussion\n\nComplexity: O(n), where n is the length of the collection.\n\nSee Also\nGenerating a Shaped Array Slice\nfunc first(where: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>?\nReturns the first element of the sequence that satisfies the given predicate.\nfunc last(where: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>?\nReturns the last element of the sequence that satisfies the given predicate.\nfunc dropFirst(Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence containing all but the given number of initial elements.\nfunc dropLast(Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence containing all but the specified number of final elements.\nfunc joined() -> FlattenSequence<MLShapedArraySlice<Scalar>>\nReturns the elements of this sequence of sequences, concatenated.\nfunc joined<Separator>(separator: Separator) -> JoinedSequence<MLShapedArraySlice<Scalar>>\nReturns the concatenated elements of this sequence of sequences, inserting the given separator between each element.\nfunc min(by: (MLShapedArraySlice<Scalar>, MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>?\nReturns the minimum element in the sequence, using the given predicate as the comparison between elements.\nfunc max(by: (MLShapedArraySlice<Scalar>, MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>?\nReturns the maximum element in the sequence, using the given predicate as the comparison between elements.\nfunc prefix(Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence, up to the specified maximum length, containing the initial elements of the collection.\nfunc prefix(upTo: Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence from the start of the collection up to, but not including, the specified position.\nfunc prefix(through: Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence from the start of the collection through the specified position.\nfunc prefix(while: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>\nReturns a subsequence containing the initial elements until predicate returns false and skipping the remaining elements.\nfunc suffix(Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence, up to the given maximum length, containing the final elements of the collection.\nfunc suffix(from: Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence from the specified position to the end of the collection.\nfunc trimPrefix<Prefix>(Prefix)\nRemoves the initial elements that satisfy the given predicate from the start of the sequence.\nfunc trimPrefix(while: (MLShapedArraySlice<Scalar>) -> Bool)\nTrims the array slice using a predicate.\nfunc trimmingPrefix<Prefix>(Prefix) -> MLShapedArraySlice<Scalar>\nReturns a new collection of the same type by removing initial elements that satisfy the given predicate from the start.\nfunc trimmingPrefix(while: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>\nfunc reversed() -> ReversedCollection<MLShapedArraySlice<Scalar>>\nReturns a view presenting the elements of the collection in reverse order.\nfunc shuffled() -> [MLShapedArraySlice<Scalar>]\nReturns the elements of the sequence, shuffled.\nfunc shuffled<T>(using: inout T) -> [MLShapedArraySlice<Scalar>]\nReturns the elements of the sequence, shuffled using the given generator as a source for randomness.\nfunc sorted<Comparator>(using: Comparator) -> [MLShapedArraySlice<Scalar>]\nGenerates a copy of the shaped array slice by sorting its slices with a comparator.\nfunc sorted<S, Comparator>(using: S) -> [MLShapedArraySlice<Scalar>]\nGenerates a copy of the shaped array slice by sorting its slices with a sequence of comparators.\nfunc sorted(by: (MLShapedArraySlice<Scalar>, MLShapedArraySlice<Scalar>) -> Bool) -> [MLShapedArraySlice<Scalar>]\nReturns the elements of the sequence, sorted using the given predicate as the comparison between elements.\nfunc split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (MLShapedArraySlice<Scalar>) -> Bool) -> [MLShapedArraySlice<Scalar>]\nReturns the longest possible subsequences of the collection, in order, that don’t contain elements satisfying the given predicate."
  },
  {
    "title": "MLImageSizeConstraintType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlimagesizeconstrainttype",
    "html": "Topics\nEnumeration Cases\ncase range\nThe image feature accepts image sizes defined by a range of widths and a range of heights.\ncase enumerated\nThe image feature accepts image sizes listed in an array.\ncase unspecified\nThe image size constraint is not configured and should be ignored.\nRelationships\nConforms To\nSendable\nSee Also\nDetermining Relevant Constraints\nvar type: MLImageSizeConstraintType\nIndicator of which properties to inspect for this image size constraint."
  },
  {
    "title": "pixelsWideRange | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlimagesizeconstraint/2994306-pixelswiderange",
    "html": "See Also\nAccessing the Image Size Ranges\nvar pixelsHighRange: NSRange\nThe range of heights a model's image feature accepts as input or produces as output."
  },
  {
    "title": "enumeratedImageSizes | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlimagesizeconstraint/2994304-enumeratedimagesizes",
    "html": "See Also\nAccessing the Enumerated Image Sizes\nclass MLImageSize\nThe width and height of an image feature size."
  },
  {
    "title": "MLImageSize | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlimagesize",
    "html": "Topics\nAccessing an Image Size\nvar pixelsHigh: Int\nThe height of an image feature in pixels.\nvar pixelsWide: Int\nThe width of an image feature in pixels.\nRelationships\nInherits From\nNSObject\nConforms To\nNSSecureCoding\nSee Also\nAccessing the Enumerated Image Sizes\nvar enumeratedImageSizes: [MLImageSize]\nAn array of image sizes a model's image feature accepts as input or produces as output."
  },
  {
    "title": "enumeratedShapes | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlmultiarrayshapeconstraint/2994313-enumeratedshapes",
    "html": "See Also\nAccessing the Constraints\nvar sizeRangeForDimension: [NSValue]\nThe allowable range for a dimention of the multiarray.\nvar type: MLMultiArrayShapeConstraintType\nThe type of the shape constraint.\nenum MLMultiArrayShapeConstraintType\nThe possible types of shape constraints."
  },
  {
    "title": "contains(where:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarrayslice/3763400-contains",
    "html": "Parameters\npredicate\n\nA closure that takes an element of the sequence as its argument and returns a Boolean value that indicates whether the passed element represents a match.\n\nReturn Value\n\ntrue if the sequence contains an element that satisfies predicate; otherwise, false.\n\nDiscussion\n\nYou can use the predicate to check for an element of a type that doesn’t conform to the Equatable protocol, such as the HTTPResponse enumeration in this example.\n\nenum HTTPResponse {\n    case ok\n    case error(Int)\n}\n\n\nlet lastThreeResponses: [HTTPResponse] = [.ok, .ok, .error(404)]\nlet hadError = lastThreeResponses.contains { element in\n    if case .error = element {\n        return true\n    } else {\n        return false\n    }\n}\n// 'hadError' == true\n\n\nAlternatively, a predicate can be satisfied by a range of Equatable elements or a general condition. This example shows how you can check an array for an expense greater than $100.\n\nlet expenses = [21.37, 55.21, 9.32, 10.18, 388.77, 11.41]\nlet hasBigPurchase = expenses.contains { $0 > 100 }\n// 'hasBigPurchase' == true\n\n\nComplexity: O(n), where n is the length of the sequence.\n\nSee Also\nInspecting a Slice of a Shaped Array Slice\nfunc allSatisfy((MLShapedArraySlice<Scalar>) -> Bool) -> Bool\nReturns a Boolean value indicating whether every element of a sequence satisfies a given predicate.\nfunc contains(MLShapedArraySlice<Scalar>) -> Bool\nReturns a Boolean value indicating whether the sequence contains the given element.\nfunc contains<C>(C) -> Bool\nReturns a Boolean value indicating whether the collection contains the given sequence.\nsubscript<R>(R) -> MLShapedArraySlice<Scalar>\nAccesses the contiguous subrange of the collection’s elements specified by a range expression.\nfunc makeIterator() -> IndexingIterator<MLShapedArraySlice<Scalar>>\nReturns an iterator over the elements of the collection.\nfunc forEach((MLShapedArraySlice<Scalar>) -> Void)\nCalls the given closure on each element in the sequence in the same order as a for-in loop.\nfunc enumerated() -> EnumeratedSequence<MLShapedArraySlice<Scalar>>\nReturns a sequence of pairs (n, x), where n represents a consecutive integer starting at zero and x represents an element of the sequence.\nfunc randomElement() -> MLShapedArraySlice<Scalar>?\nReturns a random element of the collection.\nfunc randomElement<T>(using: inout T) -> MLShapedArraySlice<Scalar>?\nReturns a random element of the collection, using the given generator as a source for randomness.\nfunc withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<MLShapedArraySlice<Scalar>>) -> R) -> R?\nExecutes a closure on the sequence’s contiguous storage."
  },
  {
    "title": "randomElement(using:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarrayslice/3763495-randomelement",
    "html": "Parameters\ngenerator\n\nThe random number generator to use when choosing a random element.\n\nReturn Value\n\nA random element from the collection. If the collection is empty, the method returns nil.\n\nDiscussion\n\nCall randomElement(using:) to select a random element from an array or another collection when you are using a custom random number generator. This example picks a name at random from an array:\n\nlet names = [\"Zoey\", \"Chloe\", \"Amani\", \"Amaia\"]\nlet randomName = names.randomElement(using: &myGenerator)!\n// randomName == \"Amani\"\n\n\nComplexity: O(1) if the collection conforms to RandomAccessCollection; otherwise, O(n), where n is the length of the collection.\n\nNote\n\nThe algorithm used to select a random element may change in a future version of Swift. If you’re passing a generator that results in the same sequence of elements each time you run your program, that sequence may change when your program is compiled using a different version of Swift.\n\nSee Also\nInspecting a Slice of a Shaped Array Slice\nfunc allSatisfy((MLShapedArraySlice<Scalar>) -> Bool) -> Bool\nReturns a Boolean value indicating whether every element of a sequence satisfies a given predicate.\nfunc contains(where: (MLShapedArraySlice<Scalar>) -> Bool) -> Bool\nReturns a Boolean value indicating whether the sequence contains an element that satisfies the given predicate.\nfunc contains(MLShapedArraySlice<Scalar>) -> Bool\nReturns a Boolean value indicating whether the sequence contains the given element.\nfunc contains<C>(C) -> Bool\nReturns a Boolean value indicating whether the collection contains the given sequence.\nsubscript<R>(R) -> MLShapedArraySlice<Scalar>\nAccesses the contiguous subrange of the collection’s elements specified by a range expression.\nfunc makeIterator() -> IndexingIterator<MLShapedArraySlice<Scalar>>\nReturns an iterator over the elements of the collection.\nfunc forEach((MLShapedArraySlice<Scalar>) -> Void)\nCalls the given closure on each element in the sequence in the same order as a for-in loop.\nfunc enumerated() -> EnumeratedSequence<MLShapedArraySlice<Scalar>>\nReturns a sequence of pairs (n, x), where n represents a consecutive integer starting at zero and x represents an element of the sequence.\nfunc randomElement() -> MLShapedArraySlice<Scalar>?\nReturns a random element of the collection.\nfunc withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<MLShapedArraySlice<Scalar>>) -> R) -> R?\nExecutes a closure on the sequence’s contiguous storage."
  },
  {
    "title": "enumerated() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarrayslice/3763412-enumerated",
    "html": "Return Value\n\nA sequence of pairs enumerating the sequence.\n\nDiscussion\n\nThis example enumerates the characters of the string “Swift” and prints each character along with its place in the string.\n\nfor (n, c) in \"Swift\".enumerated() {\n    print(\"\\(n): '\\(c)'\")\n}\n// Prints \"0: 'S'\"\n// Prints \"1: 'w'\"\n// Prints \"2: 'i'\"\n// Prints \"3: 'f'\"\n// Prints \"4: 't'\"\n\n\nWhen you enumerate a collection, the integer part of each pair is a counter for the enumeration, but is not necessarily the index of the paired value. These counters can be used as indices only in instances of zero-based, integer-indexed collections, such as Array and ContiguousArray. For other collections the counters may be out of range or of the wrong type to use as an index. To iterate over the elements of a collection with its indices, use the zip(_:_:) function.\n\nThis example iterates over the indices and elements of a set, building a list consisting of indices of names with five or fewer letters.\n\nlet names: Set = [\"Sofia\", \"Camilla\", \"Martina\", \"Mateo\", \"Nicolás\"]\nvar shorterIndices: [Set<String>.Index] = []\nfor (i, name) in zip(names.indices, names) {\n    if name.count <= 5 {\n        shorterIndices.append(i)\n    }\n}\n\n\nNow that the shorterIndices array holds the indices of the shorter names in the names set, you can use those indices to access elements in the set.\n\nfor i in shorterIndices {\n    print(names[i])\n}\n// Prints \"Sofia\"\n// Prints \"Mateo\"\n\n\nComplexity: O(1)\n\nSee Also\nInspecting a Slice of a Shaped Array Slice\nfunc allSatisfy((MLShapedArraySlice<Scalar>) -> Bool) -> Bool\nReturns a Boolean value indicating whether every element of a sequence satisfies a given predicate.\nfunc contains(where: (MLShapedArraySlice<Scalar>) -> Bool) -> Bool\nReturns a Boolean value indicating whether the sequence contains an element that satisfies the given predicate.\nfunc contains(MLShapedArraySlice<Scalar>) -> Bool\nReturns a Boolean value indicating whether the sequence contains the given element.\nfunc contains<C>(C) -> Bool\nReturns a Boolean value indicating whether the collection contains the given sequence.\nsubscript<R>(R) -> MLShapedArraySlice<Scalar>\nAccesses the contiguous subrange of the collection’s elements specified by a range expression.\nfunc makeIterator() -> IndexingIterator<MLShapedArraySlice<Scalar>>\nReturns an iterator over the elements of the collection.\nfunc forEach((MLShapedArraySlice<Scalar>) -> Void)\nCalls the given closure on each element in the sequence in the same order as a for-in loop.\nfunc randomElement() -> MLShapedArraySlice<Scalar>?\nReturns a random element of the collection.\nfunc randomElement<T>(using: inout T) -> MLShapedArraySlice<Scalar>?\nReturns a random element of the collection, using the given generator as a source for randomness.\nfunc withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<MLShapedArraySlice<Scalar>>) -> R) -> R?\nExecutes a closure on the sequence’s contiguous storage."
  },
  {
    "title": "MLMultiArrayShapeConstraintType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlmultiarrayshapeconstrainttype",
    "html": "Topics\nEnumeration Cases\ncase enumerated\nThe constraint is an array of allowed shapes.\ncase range\nThe constraint is a set of ranges allowed for the array shape.\ncase unspecified\nThe constraint type is undefined.\nRelationships\nConforms To\nSendable\nSee Also\nAccessing the Constraints\nvar enumeratedShapes: [[NSNumber]]\nArray of allowed shapes for a multiarray feature.\nvar sizeRangeForDimension: [NSValue]\nThe allowable range for a dimention of the multiarray.\nvar type: MLMultiArrayShapeConstraintType\nThe type of the shape constraint."
  },
  {
    "title": "minNumber | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlnumericconstraint/3180066-minnumber",
    "html": "See Also\nNumeric Constraints\nvar maxNumber: NSNumber\nThe largest numerical value allowed by this constraint.\nvar enumeratedNumbers: Set<NSNumber>?\nA set of the numbers allowed in this constraint."
  },
  {
    "title": "maxNumber | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlnumericconstraint/3180065-maxnumber",
    "html": "See Also\nNumeric Constraints\nvar minNumber: NSNumber\nThe smallest numerical value allowed by this constraint.\nvar enumeratedNumbers: Set<NSNumber>?\nA set of the numbers allowed in this constraint."
  },
  {
    "title": "split(separator:maxSplits:omittingEmptySubsequences:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarrayslice/4135049-split",
    "html": "Parameters\nseparator\n\nThe element that should be split upon.\n\nmaxSplits\n\nThe maximum number of times to split the collection, or one less than the number of subsequences to return. If maxSplits + 1 subsequences are returned, the last one is a suffix of the original collection containing the remaining elements. maxSplits must be greater than or equal to zero. The default value is Int.max.\n\nomittingEmptySubsequences\n\nIf false, an empty subsequence is returned in the result for each consecutive pair of separator elements in the collection and for each instance of separator at the start or end of the collection. If true, only nonempty subsequences are returned. The default value is true.\n\nReturn Value\n\nAn array of subsequences, split from this collection’s elements.\n\nDiscussion\n\nThe resulting array consists of at most maxSplits + 1 subsequences. Elements that are used to split the collection are not returned as part of any subsequence.\n\nThe following examples show the effects of the maxSplits and omittingEmptySubsequences parameters when splitting a string at each space character (” “). The first use of split returns each word that was originally separated by one or more spaces.\n\nlet line = \"BLANCHE:   I don't want realism. I want magic!\"\nprint(line.split(separator: \" \"))\n// Prints \"[\"BLANCHE:\", \"I\", \"don\\'t\", \"want\", \"realism.\", \"I\", \"want\", \"magic!\"]\"\n\n\nThe second example passes 1 for the maxSplits parameter, so the original string is split just once, into two new strings.\n\nprint(line.split(separator: \" \", maxSplits: 1))\n// Prints \"[\"BLANCHE:\", \"  I don\\'t want realism. I want magic!\"]\"\n\n\nThe final example passes false for the omittingEmptySubsequences parameter, so the returned array contains empty strings where spaces were repeated.\n\nprint(line.split(separator: \" \", omittingEmptySubsequences: false))\n// Prints \"[\"BLANCHE:\", \"\", \"\", \"I\", \"don\\'t\", \"want\", \"realism.\", \"I\", \"want\", \"magic!\"]\"\n\n\nComplexity: O(n), where n is the length of the collection.\n\nSee Also\nTransforming a Shaped Array Slice\nfunc map<T>((MLShapedArraySlice<Scalar>) -> T) -> [T]\nReturns an array containing the results of mapping the given closure over the sequence’s elements.\nfunc compactMap<ElementOfResult>((MLShapedArraySlice<Scalar>) -> ElementOfResult?) -> [ElementOfResult]\nReturns an array containing the non-nil results of calling the given transformation with each element of this sequence.\nfunc flatMap<SegmentOfResult>((MLShapedArraySlice<Scalar>) -> SegmentOfResult) -> [SegmentOfResult.Element]\nReturns an array containing the concatenated results of calling the given transformation with each element of this sequence.\nfunc flatMap<ElementOfResult>((MLShapedArraySlice<Scalar>) -> ElementOfResult?) -> [ElementOfResult]\nGenerates an array that concatenates the sequences from a transform closure that returns an optional.\nDeprecated\nfunc filter((MLShapedArraySlice<Scalar>) -> Bool) -> [MLShapedArraySlice<Scalar>]\nReturns an array containing, in order, the elements of the sequence that satisfy the given predicate.\nfunc filter(Predicate<MLShapedArraySlice<Scalar>>) -> [MLShapedArraySlice<Scalar>]\nfunc reduce<Result>(Result, (Result, MLShapedArraySlice<Scalar>) -> Result) -> Result\nReturns the result of combining the elements of the sequence using the given closure.\nfunc reduce<Result>(into: Result, (inout Result, MLShapedArraySlice<Scalar>) -> ()) -> Result\nReturns the result of combining the elements of the sequence using the given closure.\nfunc split(separator: MLShapedArraySlice<Scalar>, maxSplits: Int, omittingEmptySubsequences: Bool) -> [ArraySlice<MLShapedArraySlice<Scalar>>]\nReturns the longest possible subsequences of the sequence, in order, around elements equal to the given element.\nfunc split<C>(separator: C, maxSplits: Int, omittingEmptySubsequences: Bool) -> [MLShapedArraySlice<Scalar>]\nReturns the longest possible subsequences of the collection, in order, around elements equal to the given separator."
  },
  {
    "title": "enumeratedNumbers | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlnumericconstraint/3180064-enumeratednumbers",
    "html": "See Also\nNumeric Constraints\nvar minNumber: NSNumber\nThe smallest numerical value allowed by this constraint.\nvar maxNumber: NSNumber\nThe largest numerical value allowed by this constraint."
  },
  {
    "title": "split(separator:maxSplits:omittingEmptySubsequences:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarrayslice/4135044-split",
    "html": "Parameters\nseparator\n\nThe element that should be split upon.\n\nmaxSplits\n\nThe maximum number of times to split the sequence, or one less than the number of subsequences to return. If maxSplits + 1 subsequences are returned, the last one is a suffix of the original sequence containing the remaining elements. maxSplits must be greater than or equal to zero. The default value is Int.max.\n\nomittingEmptySubsequences\n\nIf false, an empty subsequence is returned in the result for each consecutive pair of separator elements in the sequence and for each instance of separator at the start or end of the sequence. If true, only nonempty subsequences are returned. The default value is true.\n\nReturn Value\n\nAn array of subsequences, split from this sequence’s elements.\n\nDiscussion\n\nThe resulting array consists of at most maxSplits + 1 subsequences. Elements that are used to split the sequence are not returned as part of any subsequence.\n\nThe following examples show the effects of the maxSplits and omittingEmptySubsequences parameters when splitting a string at each space character (” “). The first use of split returns each word that was originally separated by one or more spaces.\n\nlet line = \"BLANCHE:   I don't want realism. I want magic!\"\nprint(line.split(separator: \" \")\n          .map(String.init))\n// Prints \"[\"BLANCHE:\", \"I\", \"don\\'t\", \"want\", \"realism.\", \"I\", \"want\", \"magic!\"]\"\n\n\nThe second example passes 1 for the maxSplits parameter, so the original string is split just once, into two new strings.\n\nprint(line.split(separator: \" \", maxSplits: 1)\n          .map(String.init))\n// Prints \"[\"BLANCHE:\", \"  I don\\'t want realism. I want magic!\"]\"\n\n\nThe final example passes false for the omittingEmptySubsequences parameter, so the returned array contains empty strings where spaces were repeated.\n\nprint(line.split(separator: \" \", omittingEmptySubsequences: false)\n          .map(String.init))\n// Prints \"[\"BLANCHE:\", \"\", \"\", \"I\", \"don\\'t\", \"want\", \"realism.\", \"I\", \"want\", \"magic!\"]\"\n\n\nComplexity: O(n), where n is the length of the sequence.\n\nSee Also\nTransforming a Shaped Array Slice\nfunc map<T>((MLShapedArraySlice<Scalar>) -> T) -> [T]\nReturns an array containing the results of mapping the given closure over the sequence’s elements.\nfunc compactMap<ElementOfResult>((MLShapedArraySlice<Scalar>) -> ElementOfResult?) -> [ElementOfResult]\nReturns an array containing the non-nil results of calling the given transformation with each element of this sequence.\nfunc flatMap<SegmentOfResult>((MLShapedArraySlice<Scalar>) -> SegmentOfResult) -> [SegmentOfResult.Element]\nReturns an array containing the concatenated results of calling the given transformation with each element of this sequence.\nfunc flatMap<ElementOfResult>((MLShapedArraySlice<Scalar>) -> ElementOfResult?) -> [ElementOfResult]\nGenerates an array that concatenates the sequences from a transform closure that returns an optional.\nDeprecated\nfunc filter((MLShapedArraySlice<Scalar>) -> Bool) -> [MLShapedArraySlice<Scalar>]\nReturns an array containing, in order, the elements of the sequence that satisfy the given predicate.\nfunc filter(Predicate<MLShapedArraySlice<Scalar>>) -> [MLShapedArraySlice<Scalar>]\nfunc reduce<Result>(Result, (Result, MLShapedArraySlice<Scalar>) -> Result) -> Result\nReturns the result of combining the elements of the sequence using the given closure.\nfunc reduce<Result>(into: Result, (inout Result, MLShapedArraySlice<Scalar>) -> ()) -> Result\nReturns the result of combining the elements of the sequence using the given closure.\nfunc split<C>(separator: C, maxSplits: Int, omittingEmptySubsequences: Bool) -> [MLShapedArraySlice<Scalar>]\nReturns the longest possible subsequences of the collection, in order, around elements equal to the given separator.\nfunc split(separator: MLShapedArraySlice<Scalar>, maxSplits: Int, omittingEmptySubsequences: Bool) -> [MLShapedArraySlice<Scalar>]\nReturns the longest possible subsequences of the collection, in order, around elements equal to the given element."
  },
  {
    "title": "split(separator:maxSplits:omittingEmptySubsequences:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarrayslice/4135048-split",
    "html": "Parameters\nseparator\n\nThe element to be split upon.\n\nReturn Value\n\nA collection of subsequences, split from this collection’s elements.\n\nSee Also\nTransforming a Shaped Array Slice\nfunc map<T>((MLShapedArraySlice<Scalar>) -> T) -> [T]\nReturns an array containing the results of mapping the given closure over the sequence’s elements.\nfunc compactMap<ElementOfResult>((MLShapedArraySlice<Scalar>) -> ElementOfResult?) -> [ElementOfResult]\nReturns an array containing the non-nil results of calling the given transformation with each element of this sequence.\nfunc flatMap<SegmentOfResult>((MLShapedArraySlice<Scalar>) -> SegmentOfResult) -> [SegmentOfResult.Element]\nReturns an array containing the concatenated results of calling the given transformation with each element of this sequence.\nfunc flatMap<ElementOfResult>((MLShapedArraySlice<Scalar>) -> ElementOfResult?) -> [ElementOfResult]\nGenerates an array that concatenates the sequences from a transform closure that returns an optional.\nDeprecated\nfunc filter((MLShapedArraySlice<Scalar>) -> Bool) -> [MLShapedArraySlice<Scalar>]\nReturns an array containing, in order, the elements of the sequence that satisfy the given predicate.\nfunc filter(Predicate<MLShapedArraySlice<Scalar>>) -> [MLShapedArraySlice<Scalar>]\nfunc reduce<Result>(Result, (Result, MLShapedArraySlice<Scalar>) -> Result) -> Result\nReturns the result of combining the elements of the sequence using the given closure.\nfunc reduce<Result>(into: Result, (inout Result, MLShapedArraySlice<Scalar>) -> ()) -> Result\nReturns the result of combining the elements of the sequence using the given closure.\nfunc split(separator: MLShapedArraySlice<Scalar>, maxSplits: Int, omittingEmptySubsequences: Bool) -> [ArraySlice<MLShapedArraySlice<Scalar>>]\nReturns the longest possible subsequences of the sequence, in order, around elements equal to the given element.\nfunc split(separator: MLShapedArraySlice<Scalar>, maxSplits: Int, omittingEmptySubsequences: Bool) -> [MLShapedArraySlice<Scalar>]\nReturns the longest possible subsequences of the collection, in order, around elements equal to the given element."
  },
  {
    "title": "formatted(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarrayslice/3763435-formatted",
    "html": "Parameters\nstyle\n\nA format style."
  },
  {
    "title": "reduce(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarrayslice/3763497-reduce",
    "html": "Parameters\ninitialResult\n\nThe value to use as the initial accumulating value. initialResult is passed to nextPartialResult the first time the closure is executed.\n\nnextPartialResult\n\nA closure that combines an accumulating value and an element of the sequence into a new accumulating value, to be used in the next call of the nextPartialResult closure or returned to the caller.\n\nReturn Value\n\nThe final accumulated value. If the sequence has no elements, the result is initialResult.\n\nDiscussion\n\nUse the reduce(_:_:) method to produce a single value from the elements of an entire sequence. For example, you can use this method on an array of numbers to find their sum or product.\n\nThe nextPartialResult closure is called sequentially with an accumulating value initialized to initialResult and each element of the sequence. This example shows how to find the sum of an array of numbers.\n\nlet numbers = [1, 2, 3, 4]\nlet numberSum = numbers.reduce(0, { x, y in\n    x + y\n})\n// numberSum == 10\n\n\nWhen numbers.reduce(_:_:) is called, the following steps occur:\n\nThe nextPartialResult closure is called with initialResult—0 in this case—and the first element of numbers, returning the sum: 1.\n\nThe closure is called again repeatedly with the previous call’s return value and each element of the sequence.\n\nWhen the sequence is exhausted, the last value returned from the closure is returned to the caller.\n\nIf the sequence has no elements, nextPartialResult is never executed and initialResult is the result of the call to reduce(_:_:).\n\nComplexity: O(n), where n is the length of the sequence.\n\nSee Also\nTransforming a Shaped Array Slice\nfunc map<T>((MLShapedArraySlice<Scalar>) -> T) -> [T]\nReturns an array containing the results of mapping the given closure over the sequence’s elements.\nfunc compactMap<ElementOfResult>((MLShapedArraySlice<Scalar>) -> ElementOfResult?) -> [ElementOfResult]\nReturns an array containing the non-nil results of calling the given transformation with each element of this sequence.\nfunc flatMap<SegmentOfResult>((MLShapedArraySlice<Scalar>) -> SegmentOfResult) -> [SegmentOfResult.Element]\nReturns an array containing the concatenated results of calling the given transformation with each element of this sequence.\nfunc flatMap<ElementOfResult>((MLShapedArraySlice<Scalar>) -> ElementOfResult?) -> [ElementOfResult]\nGenerates an array that concatenates the sequences from a transform closure that returns an optional.\nDeprecated\nfunc filter((MLShapedArraySlice<Scalar>) -> Bool) -> [MLShapedArraySlice<Scalar>]\nReturns an array containing, in order, the elements of the sequence that satisfy the given predicate.\nfunc filter(Predicate<MLShapedArraySlice<Scalar>>) -> [MLShapedArraySlice<Scalar>]\nfunc reduce<Result>(into: Result, (inout Result, MLShapedArraySlice<Scalar>) -> ()) -> Result\nReturns the result of combining the elements of the sequence using the given closure.\nfunc split(separator: MLShapedArraySlice<Scalar>, maxSplits: Int, omittingEmptySubsequences: Bool) -> [ArraySlice<MLShapedArraySlice<Scalar>>]\nReturns the longest possible subsequences of the sequence, in order, around elements equal to the given element.\nfunc split<C>(separator: C, maxSplits: Int, omittingEmptySubsequences: Bool) -> [MLShapedArraySlice<Scalar>]\nReturns the longest possible subsequences of the collection, in order, around elements equal to the given separator.\nfunc split(separator: MLShapedArraySlice<Scalar>, maxSplits: Int, omittingEmptySubsequences: Bool) -> [MLShapedArraySlice<Scalar>]\nReturns the longest possible subsequences of the collection, in order, around elements equal to the given element."
  },
  {
    "title": "reduce(into:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarrayslice/3763499-reduce",
    "html": "Parameters\ninitialResult\n\nThe value to use as the initial accumulating value.\n\nupdateAccumulatingResult\n\nA closure that updates the accumulating value with an element of the sequence.\n\nReturn Value\n\nThe final accumulated value. If the sequence has no elements, the result is initialResult.\n\nDiscussion\n\nUse the reduce(into:_:) method to produce a single value from the elements of an entire sequence. For example, you can use this method on an array of integers to filter adjacent equal entries or count frequencies.\n\nThis method is preferred over reduce(_:_:) for efficiency when the result is a copy-on-write type, for example an Array or a Dictionary.\n\nThe updateAccumulatingResult closure is called sequentially with a mutable accumulating value initialized to initialResult and each element of the sequence. This example shows how to build a dictionary of letter frequencies of a string.\n\nlet letters = \"abracadabra\"\nlet letterCount = letters.reduce(into: [:]) { counts, letter in\n    counts[letter, default: 0] += 1\n}\n// letterCount == [\"a\": 5, \"b\": 2, \"r\": 2, \"c\": 1, \"d\": 1]\n\n\nWhen letters.reduce(into:_:) is called, the following steps occur:\n\nThe updateAccumulatingResult closure is called with the initial accumulating value—[:] in this case—and the first character of letters, modifying the accumulating value by setting 1 for the key \"a\".\n\nThe closure is called again repeatedly with the updated accumulating value and each element of the sequence.\n\nWhen the sequence is exhausted, the accumulating value is returned to the caller.\n\nIf the sequence has no elements, updateAccumulatingResult is never executed and initialResult is the result of the call to reduce(into:_:).\n\nComplexity: O(n), where n is the length of the sequence.\n\nSee Also\nTransforming a Shaped Array Slice\nfunc map<T>((MLShapedArraySlice<Scalar>) -> T) -> [T]\nReturns an array containing the results of mapping the given closure over the sequence’s elements.\nfunc compactMap<ElementOfResult>((MLShapedArraySlice<Scalar>) -> ElementOfResult?) -> [ElementOfResult]\nReturns an array containing the non-nil results of calling the given transformation with each element of this sequence.\nfunc flatMap<SegmentOfResult>((MLShapedArraySlice<Scalar>) -> SegmentOfResult) -> [SegmentOfResult.Element]\nReturns an array containing the concatenated results of calling the given transformation with each element of this sequence.\nfunc flatMap<ElementOfResult>((MLShapedArraySlice<Scalar>) -> ElementOfResult?) -> [ElementOfResult]\nGenerates an array that concatenates the sequences from a transform closure that returns an optional.\nDeprecated\nfunc filter((MLShapedArraySlice<Scalar>) -> Bool) -> [MLShapedArraySlice<Scalar>]\nReturns an array containing, in order, the elements of the sequence that satisfy the given predicate.\nfunc filter(Predicate<MLShapedArraySlice<Scalar>>) -> [MLShapedArraySlice<Scalar>]\nfunc reduce<Result>(Result, (Result, MLShapedArraySlice<Scalar>) -> Result) -> Result\nReturns the result of combining the elements of the sequence using the given closure.\nfunc split(separator: MLShapedArraySlice<Scalar>, maxSplits: Int, omittingEmptySubsequences: Bool) -> [ArraySlice<MLShapedArraySlice<Scalar>>]\nReturns the longest possible subsequences of the sequence, in order, around elements equal to the given element.\nfunc split<C>(separator: C, maxSplits: Int, omittingEmptySubsequences: Bool) -> [MLShapedArraySlice<Scalar>]\nReturns the longest possible subsequences of the collection, in order, around elements equal to the given separator.\nfunc split(separator: MLShapedArraySlice<Scalar>, maxSplits: Int, omittingEmptySubsequences: Bool) -> [MLShapedArraySlice<Scalar>]\nReturns the longest possible subsequences of the collection, in order, around elements equal to the given element."
  },
  {
    "title": "flatMap(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarrayslice/3763428-flatmap",
    "html": "Parameters\ntransform\n\nA closure that takes a shaped array slice and returns a sequence of optional values.\n\nSee Also\nTransforming a Shaped Array Slice\nfunc map<T>((MLShapedArraySlice<Scalar>) -> T) -> [T]\nReturns an array containing the results of mapping the given closure over the sequence’s elements.\nfunc compactMap<ElementOfResult>((MLShapedArraySlice<Scalar>) -> ElementOfResult?) -> [ElementOfResult]\nReturns an array containing the non-nil results of calling the given transformation with each element of this sequence.\nfunc flatMap<SegmentOfResult>((MLShapedArraySlice<Scalar>) -> SegmentOfResult) -> [SegmentOfResult.Element]\nReturns an array containing the concatenated results of calling the given transformation with each element of this sequence.\nfunc filter((MLShapedArraySlice<Scalar>) -> Bool) -> [MLShapedArraySlice<Scalar>]\nReturns an array containing, in order, the elements of the sequence that satisfy the given predicate.\nfunc filter(Predicate<MLShapedArraySlice<Scalar>>) -> [MLShapedArraySlice<Scalar>]\nfunc reduce<Result>(Result, (Result, MLShapedArraySlice<Scalar>) -> Result) -> Result\nReturns the result of combining the elements of the sequence using the given closure.\nfunc reduce<Result>(into: Result, (inout Result, MLShapedArraySlice<Scalar>) -> ()) -> Result\nReturns the result of combining the elements of the sequence using the given closure.\nfunc split(separator: MLShapedArraySlice<Scalar>, maxSplits: Int, omittingEmptySubsequences: Bool) -> [ArraySlice<MLShapedArraySlice<Scalar>>]\nReturns the longest possible subsequences of the sequence, in order, around elements equal to the given element.\nfunc split<C>(separator: C, maxSplits: Int, omittingEmptySubsequences: Bool) -> [MLShapedArraySlice<Scalar>]\nReturns the longest possible subsequences of the collection, in order, around elements equal to the given separator.\nfunc split(separator: MLShapedArraySlice<Scalar>, maxSplits: Int, omittingEmptySubsequences: Bool) -> [MLShapedArraySlice<Scalar>]\nReturns the longest possible subsequences of the collection, in order, around elements equal to the given element."
  },
  {
    "title": "filter(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarrayslice/4162290-filter",
    "html": "See Also\nTransforming a Shaped Array Slice\nfunc map<T>((MLShapedArraySlice<Scalar>) -> T) -> [T]\nReturns an array containing the results of mapping the given closure over the sequence’s elements.\nfunc compactMap<ElementOfResult>((MLShapedArraySlice<Scalar>) -> ElementOfResult?) -> [ElementOfResult]\nReturns an array containing the non-nil results of calling the given transformation with each element of this sequence.\nfunc flatMap<SegmentOfResult>((MLShapedArraySlice<Scalar>) -> SegmentOfResult) -> [SegmentOfResult.Element]\nReturns an array containing the concatenated results of calling the given transformation with each element of this sequence.\nfunc flatMap<ElementOfResult>((MLShapedArraySlice<Scalar>) -> ElementOfResult?) -> [ElementOfResult]\nGenerates an array that concatenates the sequences from a transform closure that returns an optional.\nDeprecated\nfunc filter((MLShapedArraySlice<Scalar>) -> Bool) -> [MLShapedArraySlice<Scalar>]\nReturns an array containing, in order, the elements of the sequence that satisfy the given predicate.\nfunc reduce<Result>(Result, (Result, MLShapedArraySlice<Scalar>) -> Result) -> Result\nReturns the result of combining the elements of the sequence using the given closure.\nfunc reduce<Result>(into: Result, (inout Result, MLShapedArraySlice<Scalar>) -> ()) -> Result\nReturns the result of combining the elements of the sequence using the given closure.\nfunc split(separator: MLShapedArraySlice<Scalar>, maxSplits: Int, omittingEmptySubsequences: Bool) -> [ArraySlice<MLShapedArraySlice<Scalar>>]\nReturns the longest possible subsequences of the sequence, in order, around elements equal to the given element.\nfunc split<C>(separator: C, maxSplits: Int, omittingEmptySubsequences: Bool) -> [MLShapedArraySlice<Scalar>]\nReturns the longest possible subsequences of the collection, in order, around elements equal to the given separator.\nfunc split(separator: MLShapedArraySlice<Scalar>, maxSplits: Int, omittingEmptySubsequences: Bool) -> [MLShapedArraySlice<Scalar>]\nReturns the longest possible subsequences of the collection, in order, around elements equal to the given element."
  },
  {
    "title": "filter(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarrayslice/3763418-filter",
    "html": "Parameters\nisIncluded\n\nA closure that takes an element of the sequence as its argument and returns a Boolean value indicating whether the element should be included in the returned array.\n\nReturn Value\n\nAn array of the elements that isIncluded allowed.\n\nDiscussion\n\nIn this example, filter(_:) is used to include only names shorter than five characters.\n\nlet cast = [\"Vivien\", \"Marlon\", \"Kim\", \"Karl\"]\nlet shortNames = cast.filter { $0.count < 5 }\nprint(shortNames)\n// Prints \"[\"Kim\", \"Karl\"]\"\n\n\nComplexity: O(n), where n is the length of the sequence.\n\nSee Also\nTransforming a Shaped Array Slice\nfunc map<T>((MLShapedArraySlice<Scalar>) -> T) -> [T]\nReturns an array containing the results of mapping the given closure over the sequence’s elements.\nfunc compactMap<ElementOfResult>((MLShapedArraySlice<Scalar>) -> ElementOfResult?) -> [ElementOfResult]\nReturns an array containing the non-nil results of calling the given transformation with each element of this sequence.\nfunc flatMap<SegmentOfResult>((MLShapedArraySlice<Scalar>) -> SegmentOfResult) -> [SegmentOfResult.Element]\nReturns an array containing the concatenated results of calling the given transformation with each element of this sequence.\nfunc flatMap<ElementOfResult>((MLShapedArraySlice<Scalar>) -> ElementOfResult?) -> [ElementOfResult]\nGenerates an array that concatenates the sequences from a transform closure that returns an optional.\nDeprecated\nfunc filter(Predicate<MLShapedArraySlice<Scalar>>) -> [MLShapedArraySlice<Scalar>]\nfunc reduce<Result>(Result, (Result, MLShapedArraySlice<Scalar>) -> Result) -> Result\nReturns the result of combining the elements of the sequence using the given closure.\nfunc reduce<Result>(into: Result, (inout Result, MLShapedArraySlice<Scalar>) -> ()) -> Result\nReturns the result of combining the elements of the sequence using the given closure.\nfunc split(separator: MLShapedArraySlice<Scalar>, maxSplits: Int, omittingEmptySubsequences: Bool) -> [ArraySlice<MLShapedArraySlice<Scalar>>]\nReturns the longest possible subsequences of the sequence, in order, around elements equal to the given element.\nfunc split<C>(separator: C, maxSplits: Int, omittingEmptySubsequences: Bool) -> [MLShapedArraySlice<Scalar>]\nReturns the longest possible subsequences of the collection, in order, around elements equal to the given separator.\nfunc split(separator: MLShapedArraySlice<Scalar>, maxSplits: Int, omittingEmptySubsequences: Bool) -> [MLShapedArraySlice<Scalar>]\nReturns the longest possible subsequences of the collection, in order, around elements equal to the given element."
  },
  {
    "title": "sorted(using:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarrayslice/3802069-sorted",
    "html": "Parameters\ncomparators\n\nA sequence of shaped-array slice comparators.\n\nSee Also\nGenerating a Shaped Array Slice\nfunc first(where: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>?\nReturns the first element of the sequence that satisfies the given predicate.\nfunc last(where: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>?\nReturns the last element of the sequence that satisfies the given predicate.\nfunc dropFirst(Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence containing all but the given number of initial elements.\nfunc dropLast(Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence containing all but the specified number of final elements.\nfunc drop(while: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>\nReturns a subsequence by skipping elements while predicate returns true and returning the remaining elements.\nfunc joined() -> FlattenSequence<MLShapedArraySlice<Scalar>>\nReturns the elements of this sequence of sequences, concatenated.\nfunc joined<Separator>(separator: Separator) -> JoinedSequence<MLShapedArraySlice<Scalar>>\nReturns the concatenated elements of this sequence of sequences, inserting the given separator between each element.\nfunc min(by: (MLShapedArraySlice<Scalar>, MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>?\nReturns the minimum element in the sequence, using the given predicate as the comparison between elements.\nfunc max(by: (MLShapedArraySlice<Scalar>, MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>?\nReturns the maximum element in the sequence, using the given predicate as the comparison between elements.\nfunc prefix(Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence, up to the specified maximum length, containing the initial elements of the collection.\nfunc prefix(upTo: Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence from the start of the collection up to, but not including, the specified position.\nfunc prefix(through: Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence from the start of the collection through the specified position.\nfunc prefix(while: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>\nReturns a subsequence containing the initial elements until predicate returns false and skipping the remaining elements.\nfunc suffix(Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence, up to the given maximum length, containing the final elements of the collection.\nfunc suffix(from: Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence from the specified position to the end of the collection.\nfunc trimPrefix<Prefix>(Prefix)\nRemoves the initial elements that satisfy the given predicate from the start of the sequence.\nfunc trimPrefix(while: (MLShapedArraySlice<Scalar>) -> Bool)\nTrims the array slice using a predicate.\nfunc trimmingPrefix<Prefix>(Prefix) -> MLShapedArraySlice<Scalar>\nReturns a new collection of the same type by removing initial elements that satisfy the given predicate from the start.\nfunc trimmingPrefix(while: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>\nfunc reversed() -> ReversedCollection<MLShapedArraySlice<Scalar>>\nReturns a view presenting the elements of the collection in reverse order.\nfunc shuffled() -> [MLShapedArraySlice<Scalar>]\nReturns the elements of the sequence, shuffled.\nfunc shuffled<T>(using: inout T) -> [MLShapedArraySlice<Scalar>]\nReturns the elements of the sequence, shuffled using the given generator as a source for randomness.\nfunc sorted<Comparator>(using: Comparator) -> [MLShapedArraySlice<Scalar>]\nGenerates a copy of the shaped array slice by sorting its slices with a comparator.\nfunc sorted(by: (MLShapedArraySlice<Scalar>, MLShapedArraySlice<Scalar>) -> Bool) -> [MLShapedArraySlice<Scalar>]\nReturns the elements of the sequence, sorted using the given predicate as the comparison between elements.\nfunc split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (MLShapedArraySlice<Scalar>) -> Bool) -> [MLShapedArraySlice<Scalar>]\nReturns the longest possible subsequences of the collection, in order, that don’t contain elements satisfying the given predicate."
  },
  {
    "title": "trimmingPrefix(while:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarrayslice/4048918-trimmingprefix",
    "html": "See Also\nGenerating a Shaped Array Slice\nfunc first(where: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>?\nReturns the first element of the sequence that satisfies the given predicate.\nfunc last(where: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>?\nReturns the last element of the sequence that satisfies the given predicate.\nfunc dropFirst(Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence containing all but the given number of initial elements.\nfunc dropLast(Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence containing all but the specified number of final elements.\nfunc drop(while: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>\nReturns a subsequence by skipping elements while predicate returns true and returning the remaining elements.\nfunc joined() -> FlattenSequence<MLShapedArraySlice<Scalar>>\nReturns the elements of this sequence of sequences, concatenated.\nfunc joined<Separator>(separator: Separator) -> JoinedSequence<MLShapedArraySlice<Scalar>>\nReturns the concatenated elements of this sequence of sequences, inserting the given separator between each element.\nfunc min(by: (MLShapedArraySlice<Scalar>, MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>?\nReturns the minimum element in the sequence, using the given predicate as the comparison between elements.\nfunc max(by: (MLShapedArraySlice<Scalar>, MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>?\nReturns the maximum element in the sequence, using the given predicate as the comparison between elements.\nfunc prefix(Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence, up to the specified maximum length, containing the initial elements of the collection.\nfunc prefix(upTo: Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence from the start of the collection up to, but not including, the specified position.\nfunc prefix(through: Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence from the start of the collection through the specified position.\nfunc prefix(while: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>\nReturns a subsequence containing the initial elements until predicate returns false and skipping the remaining elements.\nfunc suffix(Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence, up to the given maximum length, containing the final elements of the collection.\nfunc suffix(from: Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence from the specified position to the end of the collection.\nfunc trimPrefix<Prefix>(Prefix)\nRemoves the initial elements that satisfy the given predicate from the start of the sequence.\nfunc trimPrefix(while: (MLShapedArraySlice<Scalar>) -> Bool)\nTrims the array slice using a predicate.\nfunc trimmingPrefix<Prefix>(Prefix) -> MLShapedArraySlice<Scalar>\nReturns a new collection of the same type by removing initial elements that satisfy the given predicate from the start.\nfunc reversed() -> ReversedCollection<MLShapedArraySlice<Scalar>>\nReturns a view presenting the elements of the collection in reverse order.\nfunc shuffled() -> [MLShapedArraySlice<Scalar>]\nReturns the elements of the sequence, shuffled.\nfunc shuffled<T>(using: inout T) -> [MLShapedArraySlice<Scalar>]\nReturns the elements of the sequence, shuffled using the given generator as a source for randomness.\nfunc sorted<Comparator>(using: Comparator) -> [MLShapedArraySlice<Scalar>]\nGenerates a copy of the shaped array slice by sorting its slices with a comparator.\nfunc sorted<S, Comparator>(using: S) -> [MLShapedArraySlice<Scalar>]\nGenerates a copy of the shaped array slice by sorting its slices with a sequence of comparators.\nfunc sorted(by: (MLShapedArraySlice<Scalar>, MLShapedArraySlice<Scalar>) -> Bool) -> [MLShapedArraySlice<Scalar>]\nReturns the elements of the sequence, sorted using the given predicate as the comparison between elements.\nfunc split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (MLShapedArraySlice<Scalar>) -> Bool) -> [MLShapedArraySlice<Scalar>]\nReturns the longest possible subsequences of the collection, in order, that don’t contain elements satisfying the given predicate."
  },
  {
    "title": "map(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarrayslice/3763471-map",
    "html": "Parameters\ntransform\n\nA mapping closure. transform accepts an element of this sequence as its parameter and returns a transformed value of the same or of a different type.\n\nReturn Value\n\nAn array containing the transformed elements of this sequence.\n\nDiscussion\n\nIn this example, map is used first to convert the names in the array to lowercase strings and then to count their characters.\n\nlet cast = [\"Vivien\", \"Marlon\", \"Kim\", \"Karl\"]\nlet lowercaseNames = cast.map { $0.lowercased() }\n// 'lowercaseNames' == [\"vivien\", \"marlon\", \"kim\", \"karl\"]\nlet letterCounts = cast.map { $0.count }\n// 'letterCounts' == [6, 6, 3, 4]\n\nSee Also\nTransforming a Shaped Array Slice\nfunc compactMap<ElementOfResult>((MLShapedArraySlice<Scalar>) -> ElementOfResult?) -> [ElementOfResult]\nReturns an array containing the non-nil results of calling the given transformation with each element of this sequence.\nfunc flatMap<SegmentOfResult>((MLShapedArraySlice<Scalar>) -> SegmentOfResult) -> [SegmentOfResult.Element]\nReturns an array containing the concatenated results of calling the given transformation with each element of this sequence.\nfunc flatMap<ElementOfResult>((MLShapedArraySlice<Scalar>) -> ElementOfResult?) -> [ElementOfResult]\nGenerates an array that concatenates the sequences from a transform closure that returns an optional.\nDeprecated\nfunc filter((MLShapedArraySlice<Scalar>) -> Bool) -> [MLShapedArraySlice<Scalar>]\nReturns an array containing, in order, the elements of the sequence that satisfy the given predicate.\nfunc filter(Predicate<MLShapedArraySlice<Scalar>>) -> [MLShapedArraySlice<Scalar>]\nfunc reduce<Result>(Result, (Result, MLShapedArraySlice<Scalar>) -> Result) -> Result\nReturns the result of combining the elements of the sequence using the given closure.\nfunc reduce<Result>(into: Result, (inout Result, MLShapedArraySlice<Scalar>) -> ()) -> Result\nReturns the result of combining the elements of the sequence using the given closure.\nfunc split(separator: MLShapedArraySlice<Scalar>, maxSplits: Int, omittingEmptySubsequences: Bool) -> [ArraySlice<MLShapedArraySlice<Scalar>>]\nReturns the longest possible subsequences of the sequence, in order, around elements equal to the given element.\nfunc split<C>(separator: C, maxSplits: Int, omittingEmptySubsequences: Bool) -> [MLShapedArraySlice<Scalar>]\nReturns the longest possible subsequences of the collection, in order, around elements equal to the given separator.\nfunc split(separator: MLShapedArraySlice<Scalar>, maxSplits: Int, omittingEmptySubsequences: Bool) -> [MLShapedArraySlice<Scalar>]\nReturns the longest possible subsequences of the collection, in order, around elements equal to the given element."
  },
  {
    "title": "shuffled(using:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarrayslice/3763520-shuffled",
    "html": "Parameters\ngenerator\n\nThe random number generator to use when shuffling the sequence.\n\nReturn Value\n\nAn array of this sequence’s elements in a shuffled order.\n\nDiscussion\n\nYou use this method to randomize the elements of a sequence when you are using a custom random number generator. For example, you can shuffle the numbers between 0 and 9 by calling the shuffled(using:) method on that range:\n\nlet numbers = 0...9\nlet shuffledNumbers = numbers.shuffled(using: &myGenerator)\n// shuffledNumbers == [8, 9, 4, 3, 2, 6, 7, 0, 5, 1]\n\n\nComplexity: O(n), where n is the length of the sequence.\n\nNote\n\nThe algorithm used to shuffle a sequence may change in a future version of Swift. If you’re passing a generator that results in the same shuffled order each time you run your program, that sequence may change when your program is compiled using a different version of Swift.\n\nSee Also\nGenerating a Shaped Array Slice\nfunc first(where: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>?\nReturns the first element of the sequence that satisfies the given predicate.\nfunc last(where: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>?\nReturns the last element of the sequence that satisfies the given predicate.\nfunc dropFirst(Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence containing all but the given number of initial elements.\nfunc dropLast(Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence containing all but the specified number of final elements.\nfunc drop(while: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>\nReturns a subsequence by skipping elements while predicate returns true and returning the remaining elements.\nfunc joined() -> FlattenSequence<MLShapedArraySlice<Scalar>>\nReturns the elements of this sequence of sequences, concatenated.\nfunc joined<Separator>(separator: Separator) -> JoinedSequence<MLShapedArraySlice<Scalar>>\nReturns the concatenated elements of this sequence of sequences, inserting the given separator between each element.\nfunc min(by: (MLShapedArraySlice<Scalar>, MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>?\nReturns the minimum element in the sequence, using the given predicate as the comparison between elements.\nfunc max(by: (MLShapedArraySlice<Scalar>, MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>?\nReturns the maximum element in the sequence, using the given predicate as the comparison between elements.\nfunc prefix(Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence, up to the specified maximum length, containing the initial elements of the collection.\nfunc prefix(upTo: Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence from the start of the collection up to, but not including, the specified position.\nfunc prefix(through: Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence from the start of the collection through the specified position.\nfunc prefix(while: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>\nReturns a subsequence containing the initial elements until predicate returns false and skipping the remaining elements.\nfunc suffix(Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence, up to the given maximum length, containing the final elements of the collection.\nfunc suffix(from: Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence from the specified position to the end of the collection.\nfunc trimPrefix<Prefix>(Prefix)\nRemoves the initial elements that satisfy the given predicate from the start of the sequence.\nfunc trimPrefix(while: (MLShapedArraySlice<Scalar>) -> Bool)\nTrims the array slice using a predicate.\nfunc trimmingPrefix<Prefix>(Prefix) -> MLShapedArraySlice<Scalar>\nReturns a new collection of the same type by removing initial elements that satisfy the given predicate from the start.\nfunc trimmingPrefix(while: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>\nfunc reversed() -> ReversedCollection<MLShapedArraySlice<Scalar>>\nReturns a view presenting the elements of the collection in reverse order.\nfunc shuffled() -> [MLShapedArraySlice<Scalar>]\nReturns the elements of the sequence, shuffled.\nfunc sorted<Comparator>(using: Comparator) -> [MLShapedArraySlice<Scalar>]\nGenerates a copy of the shaped array slice by sorting its slices with a comparator.\nfunc sorted<S, Comparator>(using: S) -> [MLShapedArraySlice<Scalar>]\nGenerates a copy of the shaped array slice by sorting its slices with a sequence of comparators.\nfunc sorted(by: (MLShapedArraySlice<Scalar>, MLShapedArraySlice<Scalar>) -> Bool) -> [MLShapedArraySlice<Scalar>]\nReturns the elements of the sequence, sorted using the given predicate as the comparison between elements.\nfunc split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (MLShapedArraySlice<Scalar>) -> Bool) -> [MLShapedArraySlice<Scalar>]\nReturns the longest possible subsequences of the collection, in order, that don’t contain elements satisfying the given predicate."
  },
  {
    "title": "shuffled() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarrayslice/3763518-shuffled",
    "html": "Return Value\n\nA shuffled array of this sequence’s elements.\n\nDiscussion\n\nFor example, you can shuffle the numbers between 0 and 9 by calling the shuffled() method on that range:\n\nlet numbers = 0...9\nlet shuffledNumbers = numbers.shuffled()\n// shuffledNumbers == [1, 7, 6, 2, 8, 9, 4, 3, 5, 0]\n\n\nThis method is equivalent to calling shuffled(using:), passing in the system’s default random generator.\n\nComplexity: O(n), where n is the length of the sequence.\n\nSee Also\nGenerating a Shaped Array Slice\nfunc first(where: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>?\nReturns the first element of the sequence that satisfies the given predicate.\nfunc last(where: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>?\nReturns the last element of the sequence that satisfies the given predicate.\nfunc dropFirst(Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence containing all but the given number of initial elements.\nfunc dropLast(Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence containing all but the specified number of final elements.\nfunc drop(while: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>\nReturns a subsequence by skipping elements while predicate returns true and returning the remaining elements.\nfunc joined() -> FlattenSequence<MLShapedArraySlice<Scalar>>\nReturns the elements of this sequence of sequences, concatenated.\nfunc joined<Separator>(separator: Separator) -> JoinedSequence<MLShapedArraySlice<Scalar>>\nReturns the concatenated elements of this sequence of sequences, inserting the given separator between each element.\nfunc min(by: (MLShapedArraySlice<Scalar>, MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>?\nReturns the minimum element in the sequence, using the given predicate as the comparison between elements.\nfunc max(by: (MLShapedArraySlice<Scalar>, MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>?\nReturns the maximum element in the sequence, using the given predicate as the comparison between elements.\nfunc prefix(Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence, up to the specified maximum length, containing the initial elements of the collection.\nfunc prefix(upTo: Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence from the start of the collection up to, but not including, the specified position.\nfunc prefix(through: Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence from the start of the collection through the specified position.\nfunc prefix(while: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>\nReturns a subsequence containing the initial elements until predicate returns false and skipping the remaining elements.\nfunc suffix(Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence, up to the given maximum length, containing the final elements of the collection.\nfunc suffix(from: Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence from the specified position to the end of the collection.\nfunc trimPrefix<Prefix>(Prefix)\nRemoves the initial elements that satisfy the given predicate from the start of the sequence.\nfunc trimPrefix(while: (MLShapedArraySlice<Scalar>) -> Bool)\nTrims the array slice using a predicate.\nfunc trimmingPrefix<Prefix>(Prefix) -> MLShapedArraySlice<Scalar>\nReturns a new collection of the same type by removing initial elements that satisfy the given predicate from the start.\nfunc trimmingPrefix(while: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>\nfunc reversed() -> ReversedCollection<MLShapedArraySlice<Scalar>>\nReturns a view presenting the elements of the collection in reverse order.\nfunc shuffled<T>(using: inout T) -> [MLShapedArraySlice<Scalar>]\nReturns the elements of the sequence, shuffled using the given generator as a source for randomness.\nfunc sorted<Comparator>(using: Comparator) -> [MLShapedArraySlice<Scalar>]\nGenerates a copy of the shaped array slice by sorting its slices with a comparator.\nfunc sorted<S, Comparator>(using: S) -> [MLShapedArraySlice<Scalar>]\nGenerates a copy of the shaped array slice by sorting its slices with a sequence of comparators.\nfunc sorted(by: (MLShapedArraySlice<Scalar>, MLShapedArraySlice<Scalar>) -> Bool) -> [MLShapedArraySlice<Scalar>]\nReturns the elements of the sequence, sorted using the given predicate as the comparison between elements.\nfunc split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (MLShapedArraySlice<Scalar>) -> Bool) -> [MLShapedArraySlice<Scalar>]\nReturns the longest possible subsequences of the collection, in order, that don’t contain elements satisfying the given predicate."
  },
  {
    "title": "reversed() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarrayslice/3763507-reversed",
    "html": "Discussion\n\nYou can reverse a collection without allocating new space for its elements by calling this reversed() method. A ReversedCollection instance wraps an underlying collection and provides access to its elements in reverse order. This example prints the characters of a string in reverse order:\n\nlet word = \"Backwards\"\nfor char in word.reversed() {\n    print(char, terminator: \"\")\n}\n// Prints \"sdrawkcaB\"\n\n\nIf you need a reversed collection of the same type, you may be able to use the collection’s sequence-based or collection-based initializer. For example, to get the reversed version of a string, reverse its characters and initialize a new String instance from the result.\n\nlet reversedWord = String(word.reversed())\nprint(reversedWord)\n// Prints \"sdrawkcaB\"\n\n\nComplexity: O(1)\n\nSee Also\nGenerating a Shaped Array Slice\nfunc first(where: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>?\nReturns the first element of the sequence that satisfies the given predicate.\nfunc last(where: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>?\nReturns the last element of the sequence that satisfies the given predicate.\nfunc dropFirst(Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence containing all but the given number of initial elements.\nfunc dropLast(Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence containing all but the specified number of final elements.\nfunc drop(while: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>\nReturns a subsequence by skipping elements while predicate returns true and returning the remaining elements.\nfunc joined() -> FlattenSequence<MLShapedArraySlice<Scalar>>\nReturns the elements of this sequence of sequences, concatenated.\nfunc joined<Separator>(separator: Separator) -> JoinedSequence<MLShapedArraySlice<Scalar>>\nReturns the concatenated elements of this sequence of sequences, inserting the given separator between each element.\nfunc min(by: (MLShapedArraySlice<Scalar>, MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>?\nReturns the minimum element in the sequence, using the given predicate as the comparison between elements.\nfunc max(by: (MLShapedArraySlice<Scalar>, MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>?\nReturns the maximum element in the sequence, using the given predicate as the comparison between elements.\nfunc prefix(Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence, up to the specified maximum length, containing the initial elements of the collection.\nfunc prefix(upTo: Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence from the start of the collection up to, but not including, the specified position.\nfunc prefix(through: Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence from the start of the collection through the specified position.\nfunc prefix(while: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>\nReturns a subsequence containing the initial elements until predicate returns false and skipping the remaining elements.\nfunc suffix(Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence, up to the given maximum length, containing the final elements of the collection.\nfunc suffix(from: Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence from the specified position to the end of the collection.\nfunc trimPrefix<Prefix>(Prefix)\nRemoves the initial elements that satisfy the given predicate from the start of the sequence.\nfunc trimPrefix(while: (MLShapedArraySlice<Scalar>) -> Bool)\nTrims the array slice using a predicate.\nfunc trimmingPrefix<Prefix>(Prefix) -> MLShapedArraySlice<Scalar>\nReturns a new collection of the same type by removing initial elements that satisfy the given predicate from the start.\nfunc trimmingPrefix(while: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>\nfunc shuffled() -> [MLShapedArraySlice<Scalar>]\nReturns the elements of the sequence, shuffled.\nfunc shuffled<T>(using: inout T) -> [MLShapedArraySlice<Scalar>]\nReturns the elements of the sequence, shuffled using the given generator as a source for randomness.\nfunc sorted<Comparator>(using: Comparator) -> [MLShapedArraySlice<Scalar>]\nGenerates a copy of the shaped array slice by sorting its slices with a comparator.\nfunc sorted<S, Comparator>(using: S) -> [MLShapedArraySlice<Scalar>]\nGenerates a copy of the shaped array slice by sorting its slices with a sequence of comparators.\nfunc sorted(by: (MLShapedArraySlice<Scalar>, MLShapedArraySlice<Scalar>) -> Bool) -> [MLShapedArraySlice<Scalar>]\nReturns the elements of the sequence, sorted using the given predicate as the comparison between elements.\nfunc split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (MLShapedArraySlice<Scalar>) -> Bool) -> [MLShapedArraySlice<Scalar>]\nReturns the longest possible subsequences of the collection, in order, that don’t contain elements satisfying the given predicate."
  },
  {
    "title": "trimmingPrefix(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarrayslice/4135057-trimmingprefix",
    "html": "Parameters\npredicate\n\nA closure that takes an element of the sequence as its argument and returns a Boolean value indicating whether the element should be removed from the collection.\n\nReturn Value\n\nA collection containing the elements of the collection that are not removed by predicate.\n\nSee Also\nGenerating a Shaped Array Slice\nfunc first(where: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>?\nReturns the first element of the sequence that satisfies the given predicate.\nfunc last(where: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>?\nReturns the last element of the sequence that satisfies the given predicate.\nfunc dropFirst(Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence containing all but the given number of initial elements.\nfunc dropLast(Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence containing all but the specified number of final elements.\nfunc drop(while: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>\nReturns a subsequence by skipping elements while predicate returns true and returning the remaining elements.\nfunc joined() -> FlattenSequence<MLShapedArraySlice<Scalar>>\nReturns the elements of this sequence of sequences, concatenated.\nfunc joined<Separator>(separator: Separator) -> JoinedSequence<MLShapedArraySlice<Scalar>>\nReturns the concatenated elements of this sequence of sequences, inserting the given separator between each element.\nfunc min(by: (MLShapedArraySlice<Scalar>, MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>?\nReturns the minimum element in the sequence, using the given predicate as the comparison between elements.\nfunc max(by: (MLShapedArraySlice<Scalar>, MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>?\nReturns the maximum element in the sequence, using the given predicate as the comparison between elements.\nfunc prefix(Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence, up to the specified maximum length, containing the initial elements of the collection.\nfunc prefix(upTo: Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence from the start of the collection up to, but not including, the specified position.\nfunc prefix(through: Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence from the start of the collection through the specified position.\nfunc prefix(while: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>\nReturns a subsequence containing the initial elements until predicate returns false and skipping the remaining elements.\nfunc suffix(Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence, up to the given maximum length, containing the final elements of the collection.\nfunc suffix(from: Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence from the specified position to the end of the collection.\nfunc trimPrefix<Prefix>(Prefix)\nRemoves the initial elements that satisfy the given predicate from the start of the sequence.\nfunc trimPrefix(while: (MLShapedArraySlice<Scalar>) -> Bool)\nTrims the array slice using a predicate.\nfunc trimmingPrefix(while: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>\nfunc reversed() -> ReversedCollection<MLShapedArraySlice<Scalar>>\nReturns a view presenting the elements of the collection in reverse order.\nfunc shuffled() -> [MLShapedArraySlice<Scalar>]\nReturns the elements of the sequence, shuffled.\nfunc shuffled<T>(using: inout T) -> [MLShapedArraySlice<Scalar>]\nReturns the elements of the sequence, shuffled using the given generator as a source for randomness.\nfunc sorted<Comparator>(using: Comparator) -> [MLShapedArraySlice<Scalar>]\nGenerates a copy of the shaped array slice by sorting its slices with a comparator.\nfunc sorted<S, Comparator>(using: S) -> [MLShapedArraySlice<Scalar>]\nGenerates a copy of the shaped array slice by sorting its slices with a sequence of comparators.\nfunc sorted(by: (MLShapedArraySlice<Scalar>, MLShapedArraySlice<Scalar>) -> Bool) -> [MLShapedArraySlice<Scalar>]\nReturns the elements of the sequence, sorted using the given predicate as the comparison between elements.\nfunc split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (MLShapedArraySlice<Scalar>) -> Bool) -> [MLShapedArraySlice<Scalar>]\nReturns the longest possible subsequences of the collection, in order, that don’t contain elements satisfying the given predicate."
  },
  {
    "title": "trimPrefix(while:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarrayslice/3995223-trimprefix",
    "html": "Parameters\npredicate\n\nThe predicate that contains the rules for trimming the array slice.\n\nSee Also\nGenerating a Shaped Array Slice\nfunc first(where: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>?\nReturns the first element of the sequence that satisfies the given predicate.\nfunc last(where: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>?\nReturns the last element of the sequence that satisfies the given predicate.\nfunc dropFirst(Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence containing all but the given number of initial elements.\nfunc dropLast(Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence containing all but the specified number of final elements.\nfunc drop(while: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>\nReturns a subsequence by skipping elements while predicate returns true and returning the remaining elements.\nfunc joined() -> FlattenSequence<MLShapedArraySlice<Scalar>>\nReturns the elements of this sequence of sequences, concatenated.\nfunc joined<Separator>(separator: Separator) -> JoinedSequence<MLShapedArraySlice<Scalar>>\nReturns the concatenated elements of this sequence of sequences, inserting the given separator between each element.\nfunc min(by: (MLShapedArraySlice<Scalar>, MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>?\nReturns the minimum element in the sequence, using the given predicate as the comparison between elements.\nfunc max(by: (MLShapedArraySlice<Scalar>, MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>?\nReturns the maximum element in the sequence, using the given predicate as the comparison between elements.\nfunc prefix(Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence, up to the specified maximum length, containing the initial elements of the collection.\nfunc prefix(upTo: Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence from the start of the collection up to, but not including, the specified position.\nfunc prefix(through: Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence from the start of the collection through the specified position.\nfunc prefix(while: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>\nReturns a subsequence containing the initial elements until predicate returns false and skipping the remaining elements.\nfunc suffix(Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence, up to the given maximum length, containing the final elements of the collection.\nfunc suffix(from: Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence from the specified position to the end of the collection.\nfunc trimPrefix<Prefix>(Prefix)\nRemoves the initial elements that satisfy the given predicate from the start of the sequence.\nfunc trimmingPrefix<Prefix>(Prefix) -> MLShapedArraySlice<Scalar>\nReturns a new collection of the same type by removing initial elements that satisfy the given predicate from the start.\nfunc trimmingPrefix(while: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>\nfunc reversed() -> ReversedCollection<MLShapedArraySlice<Scalar>>\nReturns a view presenting the elements of the collection in reverse order.\nfunc shuffled() -> [MLShapedArraySlice<Scalar>]\nReturns the elements of the sequence, shuffled.\nfunc shuffled<T>(using: inout T) -> [MLShapedArraySlice<Scalar>]\nReturns the elements of the sequence, shuffled using the given generator as a source for randomness.\nfunc sorted<Comparator>(using: Comparator) -> [MLShapedArraySlice<Scalar>]\nGenerates a copy of the shaped array slice by sorting its slices with a comparator.\nfunc sorted<S, Comparator>(using: S) -> [MLShapedArraySlice<Scalar>]\nGenerates a copy of the shaped array slice by sorting its slices with a sequence of comparators.\nfunc sorted(by: (MLShapedArraySlice<Scalar>, MLShapedArraySlice<Scalar>) -> Bool) -> [MLShapedArraySlice<Scalar>]\nReturns the elements of the sequence, sorted using the given predicate as the comparison between elements.\nfunc split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (MLShapedArraySlice<Scalar>) -> Bool) -> [MLShapedArraySlice<Scalar>]\nReturns the longest possible subsequences of the collection, in order, that don’t contain elements satisfying the given predicate."
  },
  {
    "title": "max(by:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarrayslice/3763473-max",
    "html": "Parameters\nareInIncreasingOrder\n\nA predicate that returns true if its first argument should be ordered before its second argument; otherwise, false.\n\nReturn Value\n\nThe sequence’s maximum element if the sequence is not empty; otherwise, nil.\n\nDiscussion\n\nThe predicate must be a strict weak ordering over the elements. That is, for any elements a, b, and c, the following conditions must hold:\n\nareInIncreasingOrder(a, a) is always false. (Irreflexivity)\n\nIf areInIncreasingOrder(a, b) and areInIncreasingOrder(b, c) are both true, then areInIncreasingOrder(a, c) is also true. (Transitive comparability)\n\nTwo elements are incomparable if neither is ordered before the other according to the predicate. If a and b are incomparable, and b and c are incomparable, then a and c are also incomparable. (Transitive incomparability)\n\nThis example shows how to use the max(by:) method on a dictionary to find the key-value pair with the highest value.\n\nlet hues = [\"Heliotrope\": 296, \"Coral\": 16, \"Aquamarine\": 156]\nlet greatestHue = hues.max { a, b in a.value < b.value }\nprint(greatestHue)\n// Prints \"Optional((key: \"Heliotrope\", value: 296))\"\n\n\nComplexity: O(n), where n is the length of the sequence.\n\nSee Also\nGenerating a Shaped Array Slice\nfunc first(where: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>?\nReturns the first element of the sequence that satisfies the given predicate.\nfunc last(where: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>?\nReturns the last element of the sequence that satisfies the given predicate.\nfunc dropFirst(Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence containing all but the given number of initial elements.\nfunc dropLast(Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence containing all but the specified number of final elements.\nfunc drop(while: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>\nReturns a subsequence by skipping elements while predicate returns true and returning the remaining elements.\nfunc joined() -> FlattenSequence<MLShapedArraySlice<Scalar>>\nReturns the elements of this sequence of sequences, concatenated.\nfunc joined<Separator>(separator: Separator) -> JoinedSequence<MLShapedArraySlice<Scalar>>\nReturns the concatenated elements of this sequence of sequences, inserting the given separator between each element.\nfunc min(by: (MLShapedArraySlice<Scalar>, MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>?\nReturns the minimum element in the sequence, using the given predicate as the comparison between elements.\nfunc prefix(Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence, up to the specified maximum length, containing the initial elements of the collection.\nfunc prefix(upTo: Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence from the start of the collection up to, but not including, the specified position.\nfunc prefix(through: Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence from the start of the collection through the specified position.\nfunc prefix(while: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>\nReturns a subsequence containing the initial elements until predicate returns false and skipping the remaining elements.\nfunc suffix(Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence, up to the given maximum length, containing the final elements of the collection.\nfunc suffix(from: Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence from the specified position to the end of the collection.\nfunc trimPrefix<Prefix>(Prefix)\nRemoves the initial elements that satisfy the given predicate from the start of the sequence.\nfunc trimPrefix(while: (MLShapedArraySlice<Scalar>) -> Bool)\nTrims the array slice using a predicate.\nfunc trimmingPrefix<Prefix>(Prefix) -> MLShapedArraySlice<Scalar>\nReturns a new collection of the same type by removing initial elements that satisfy the given predicate from the start.\nfunc trimmingPrefix(while: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>\nfunc reversed() -> ReversedCollection<MLShapedArraySlice<Scalar>>\nReturns a view presenting the elements of the collection in reverse order.\nfunc shuffled() -> [MLShapedArraySlice<Scalar>]\nReturns the elements of the sequence, shuffled.\nfunc shuffled<T>(using: inout T) -> [MLShapedArraySlice<Scalar>]\nReturns the elements of the sequence, shuffled using the given generator as a source for randomness.\nfunc sorted<Comparator>(using: Comparator) -> [MLShapedArraySlice<Scalar>]\nGenerates a copy of the shaped array slice by sorting its slices with a comparator.\nfunc sorted<S, Comparator>(using: S) -> [MLShapedArraySlice<Scalar>]\nGenerates a copy of the shaped array slice by sorting its slices with a sequence of comparators.\nfunc sorted(by: (MLShapedArraySlice<Scalar>, MLShapedArraySlice<Scalar>) -> Bool) -> [MLShapedArraySlice<Scalar>]\nReturns the elements of the sequence, sorted using the given predicate as the comparison between elements.\nfunc split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (MLShapedArraySlice<Scalar>) -> Bool) -> [MLShapedArraySlice<Scalar>]\nReturns the longest possible subsequences of the collection, in order, that don’t contain elements satisfying the given predicate."
  },
  {
    "title": "suffix(from:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarrayslice/3763557-suffix",
    "html": "Parameters\nstart\n\nThe index at which to start the resulting subsequence. start must be a valid index of the collection.\n\nReturn Value\n\nA subsequence starting at the start position.\n\nDiscussion\n\nThe following example searches for the index of the number 40 in an array of integers, and then prints the suffix of the array starting at that index:\n\nlet numbers = [10, 20, 30, 40, 50, 60]\nif let i = numbers.firstIndex(of: 40) {\n    print(numbers.suffix(from: i))\n}\n// Prints \"[40, 50, 60]\"\n\n\nPassing the collection’s endIndex as the start parameter results in an empty subsequence.\n\nprint(numbers.suffix(from: numbers.endIndex))\n// Prints \"[]\"\n\n\nUsing the suffix(from:) method is equivalent to using a partial range from the index as the collection’s subscript. The subscript notation is preferred over suffix(from:).\n\nif let i = numbers.firstIndex(of: 40) {\n    print(numbers[i...])\n}\n// Prints \"[40, 50, 60]\"\n\n\nComplexity: O(1)\n\nSee Also\nGenerating a Shaped Array Slice\nfunc first(where: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>?\nReturns the first element of the sequence that satisfies the given predicate.\nfunc last(where: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>?\nReturns the last element of the sequence that satisfies the given predicate.\nfunc dropFirst(Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence containing all but the given number of initial elements.\nfunc dropLast(Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence containing all but the specified number of final elements.\nfunc drop(while: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>\nReturns a subsequence by skipping elements while predicate returns true and returning the remaining elements.\nfunc joined() -> FlattenSequence<MLShapedArraySlice<Scalar>>\nReturns the elements of this sequence of sequences, concatenated.\nfunc joined<Separator>(separator: Separator) -> JoinedSequence<MLShapedArraySlice<Scalar>>\nReturns the concatenated elements of this sequence of sequences, inserting the given separator between each element.\nfunc min(by: (MLShapedArraySlice<Scalar>, MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>?\nReturns the minimum element in the sequence, using the given predicate as the comparison between elements.\nfunc max(by: (MLShapedArraySlice<Scalar>, MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>?\nReturns the maximum element in the sequence, using the given predicate as the comparison between elements.\nfunc prefix(Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence, up to the specified maximum length, containing the initial elements of the collection.\nfunc prefix(upTo: Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence from the start of the collection up to, but not including, the specified position.\nfunc prefix(through: Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence from the start of the collection through the specified position.\nfunc prefix(while: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>\nReturns a subsequence containing the initial elements until predicate returns false and skipping the remaining elements.\nfunc suffix(Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence, up to the given maximum length, containing the final elements of the collection.\nfunc trimPrefix<Prefix>(Prefix)\nRemoves the initial elements that satisfy the given predicate from the start of the sequence.\nfunc trimPrefix(while: (MLShapedArraySlice<Scalar>) -> Bool)\nTrims the array slice using a predicate.\nfunc trimmingPrefix<Prefix>(Prefix) -> MLShapedArraySlice<Scalar>\nReturns a new collection of the same type by removing initial elements that satisfy the given predicate from the start.\nfunc trimmingPrefix(while: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>\nfunc reversed() -> ReversedCollection<MLShapedArraySlice<Scalar>>\nReturns a view presenting the elements of the collection in reverse order.\nfunc shuffled() -> [MLShapedArraySlice<Scalar>]\nReturns the elements of the sequence, shuffled.\nfunc shuffled<T>(using: inout T) -> [MLShapedArraySlice<Scalar>]\nReturns the elements of the sequence, shuffled using the given generator as a source for randomness.\nfunc sorted<Comparator>(using: Comparator) -> [MLShapedArraySlice<Scalar>]\nGenerates a copy of the shaped array slice by sorting its slices with a comparator.\nfunc sorted<S, Comparator>(using: S) -> [MLShapedArraySlice<Scalar>]\nGenerates a copy of the shaped array slice by sorting its slices with a sequence of comparators.\nfunc sorted(by: (MLShapedArraySlice<Scalar>, MLShapedArraySlice<Scalar>) -> Bool) -> [MLShapedArraySlice<Scalar>]\nReturns the elements of the sequence, sorted using the given predicate as the comparison between elements.\nfunc split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (MLShapedArraySlice<Scalar>) -> Bool) -> [MLShapedArraySlice<Scalar>]\nReturns the longest possible subsequences of the collection, in order, that don’t contain elements satisfying the given predicate."
  },
  {
    "title": "trimPrefix(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarrayslice/4135056-trimprefix",
    "html": "Parameters\npredicate\n\nA closure that takes an element of the sequence as its argument and returns a Boolean value indicating whether the element should be removed from the collection.\n\nSee Also\nGenerating a Shaped Array Slice\nfunc first(where: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>?\nReturns the first element of the sequence that satisfies the given predicate.\nfunc last(where: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>?\nReturns the last element of the sequence that satisfies the given predicate.\nfunc dropFirst(Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence containing all but the given number of initial elements.\nfunc dropLast(Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence containing all but the specified number of final elements.\nfunc drop(while: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>\nReturns a subsequence by skipping elements while predicate returns true and returning the remaining elements.\nfunc joined() -> FlattenSequence<MLShapedArraySlice<Scalar>>\nReturns the elements of this sequence of sequences, concatenated.\nfunc joined<Separator>(separator: Separator) -> JoinedSequence<MLShapedArraySlice<Scalar>>\nReturns the concatenated elements of this sequence of sequences, inserting the given separator between each element.\nfunc min(by: (MLShapedArraySlice<Scalar>, MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>?\nReturns the minimum element in the sequence, using the given predicate as the comparison between elements.\nfunc max(by: (MLShapedArraySlice<Scalar>, MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>?\nReturns the maximum element in the sequence, using the given predicate as the comparison between elements.\nfunc prefix(Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence, up to the specified maximum length, containing the initial elements of the collection.\nfunc prefix(upTo: Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence from the start of the collection up to, but not including, the specified position.\nfunc prefix(through: Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence from the start of the collection through the specified position.\nfunc prefix(while: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>\nReturns a subsequence containing the initial elements until predicate returns false and skipping the remaining elements.\nfunc suffix(Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence, up to the given maximum length, containing the final elements of the collection.\nfunc suffix(from: Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence from the specified position to the end of the collection.\nfunc trimPrefix(while: (MLShapedArraySlice<Scalar>) -> Bool)\nTrims the array slice using a predicate.\nfunc trimmingPrefix<Prefix>(Prefix) -> MLShapedArraySlice<Scalar>\nReturns a new collection of the same type by removing initial elements that satisfy the given predicate from the start.\nfunc trimmingPrefix(while: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>\nfunc reversed() -> ReversedCollection<MLShapedArraySlice<Scalar>>\nReturns a view presenting the elements of the collection in reverse order.\nfunc shuffled() -> [MLShapedArraySlice<Scalar>]\nReturns the elements of the sequence, shuffled.\nfunc shuffled<T>(using: inout T) -> [MLShapedArraySlice<Scalar>]\nReturns the elements of the sequence, shuffled using the given generator as a source for randomness.\nfunc sorted<Comparator>(using: Comparator) -> [MLShapedArraySlice<Scalar>]\nGenerates a copy of the shaped array slice by sorting its slices with a comparator.\nfunc sorted<S, Comparator>(using: S) -> [MLShapedArraySlice<Scalar>]\nGenerates a copy of the shaped array slice by sorting its slices with a sequence of comparators.\nfunc sorted(by: (MLShapedArraySlice<Scalar>, MLShapedArraySlice<Scalar>) -> Bool) -> [MLShapedArraySlice<Scalar>]\nReturns the elements of the sequence, sorted using the given predicate as the comparison between elements.\nfunc split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (MLShapedArraySlice<Scalar>) -> Bool) -> [MLShapedArraySlice<Scalar>]\nReturns the longest possible subsequences of the collection, in order, that don’t contain elements satisfying the given predicate."
  },
  {
    "title": "suffix(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarrayslice/3763555-suffix",
    "html": "Parameters\nmaxLength\n\nThe maximum number of elements to return. maxLength must be greater than or equal to zero.\n\nReturn Value\n\nA subsequence terminating at the end of the collection with at most maxLength elements.\n\nDiscussion\n\nIf the maximum length exceeds the number of elements in the collection, the result contains the entire collection.\n\nlet numbers = [1, 2, 3, 4, 5]\nprint(numbers.suffix(2))\n// Prints \"[4, 5]\"\nprint(numbers.suffix(10))\n// Prints \"[1, 2, 3, 4, 5]\"\n\n\nComplexity: O(1) if the collection conforms to RandomAccessCollection; otherwise, O(k), where k is equal to maxLength.\n\nSee Also\nGenerating a Shaped Array Slice\nfunc first(where: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>?\nReturns the first element of the sequence that satisfies the given predicate.\nfunc last(where: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>?\nReturns the last element of the sequence that satisfies the given predicate.\nfunc dropFirst(Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence containing all but the given number of initial elements.\nfunc dropLast(Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence containing all but the specified number of final elements.\nfunc drop(while: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>\nReturns a subsequence by skipping elements while predicate returns true and returning the remaining elements.\nfunc joined() -> FlattenSequence<MLShapedArraySlice<Scalar>>\nReturns the elements of this sequence of sequences, concatenated.\nfunc joined<Separator>(separator: Separator) -> JoinedSequence<MLShapedArraySlice<Scalar>>\nReturns the concatenated elements of this sequence of sequences, inserting the given separator between each element.\nfunc min(by: (MLShapedArraySlice<Scalar>, MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>?\nReturns the minimum element in the sequence, using the given predicate as the comparison between elements.\nfunc max(by: (MLShapedArraySlice<Scalar>, MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>?\nReturns the maximum element in the sequence, using the given predicate as the comparison between elements.\nfunc prefix(Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence, up to the specified maximum length, containing the initial elements of the collection.\nfunc prefix(upTo: Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence from the start of the collection up to, but not including, the specified position.\nfunc prefix(through: Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence from the start of the collection through the specified position.\nfunc prefix(while: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>\nReturns a subsequence containing the initial elements until predicate returns false and skipping the remaining elements.\nfunc suffix(from: Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence from the specified position to the end of the collection.\nfunc trimPrefix<Prefix>(Prefix)\nRemoves the initial elements that satisfy the given predicate from the start of the sequence.\nfunc trimPrefix(while: (MLShapedArraySlice<Scalar>) -> Bool)\nTrims the array slice using a predicate.\nfunc trimmingPrefix<Prefix>(Prefix) -> MLShapedArraySlice<Scalar>\nReturns a new collection of the same type by removing initial elements that satisfy the given predicate from the start.\nfunc trimmingPrefix(while: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>\nfunc reversed() -> ReversedCollection<MLShapedArraySlice<Scalar>>\nReturns a view presenting the elements of the collection in reverse order.\nfunc shuffled() -> [MLShapedArraySlice<Scalar>]\nReturns the elements of the sequence, shuffled.\nfunc shuffled<T>(using: inout T) -> [MLShapedArraySlice<Scalar>]\nReturns the elements of the sequence, shuffled using the given generator as a source for randomness.\nfunc sorted<Comparator>(using: Comparator) -> [MLShapedArraySlice<Scalar>]\nGenerates a copy of the shaped array slice by sorting its slices with a comparator.\nfunc sorted<S, Comparator>(using: S) -> [MLShapedArraySlice<Scalar>]\nGenerates a copy of the shaped array slice by sorting its slices with a sequence of comparators.\nfunc sorted(by: (MLShapedArraySlice<Scalar>, MLShapedArraySlice<Scalar>) -> Bool) -> [MLShapedArraySlice<Scalar>]\nReturns the elements of the sequence, sorted using the given predicate as the comparison between elements.\nfunc split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (MLShapedArraySlice<Scalar>) -> Bool) -> [MLShapedArraySlice<Scalar>]\nReturns the longest possible subsequences of the collection, in order, that don’t contain elements satisfying the given predicate."
  },
  {
    "title": "prefix(while:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarrayslice/3763491-prefix",
    "html": "Parameters\npredicate\n\nA closure that takes an element of the sequence as its argument and returns true if the element should be included or false if it should be excluded. Once the predicate returns false it will not be called again.\n\nDiscussion\n\nComplexity: O(n), where n is the length of the collection.\n\nSee Also\nGenerating a Shaped Array Slice\nfunc first(where: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>?\nReturns the first element of the sequence that satisfies the given predicate.\nfunc last(where: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>?\nReturns the last element of the sequence that satisfies the given predicate.\nfunc dropFirst(Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence containing all but the given number of initial elements.\nfunc dropLast(Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence containing all but the specified number of final elements.\nfunc drop(while: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>\nReturns a subsequence by skipping elements while predicate returns true and returning the remaining elements.\nfunc joined() -> FlattenSequence<MLShapedArraySlice<Scalar>>\nReturns the elements of this sequence of sequences, concatenated.\nfunc joined<Separator>(separator: Separator) -> JoinedSequence<MLShapedArraySlice<Scalar>>\nReturns the concatenated elements of this sequence of sequences, inserting the given separator between each element.\nfunc min(by: (MLShapedArraySlice<Scalar>, MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>?\nReturns the minimum element in the sequence, using the given predicate as the comparison between elements.\nfunc max(by: (MLShapedArraySlice<Scalar>, MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>?\nReturns the maximum element in the sequence, using the given predicate as the comparison between elements.\nfunc prefix(Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence, up to the specified maximum length, containing the initial elements of the collection.\nfunc prefix(upTo: Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence from the start of the collection up to, but not including, the specified position.\nfunc prefix(through: Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence from the start of the collection through the specified position.\nfunc suffix(Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence, up to the given maximum length, containing the final elements of the collection.\nfunc suffix(from: Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence from the specified position to the end of the collection.\nfunc trimPrefix<Prefix>(Prefix)\nRemoves the initial elements that satisfy the given predicate from the start of the sequence.\nfunc trimPrefix(while: (MLShapedArraySlice<Scalar>) -> Bool)\nTrims the array slice using a predicate.\nfunc trimmingPrefix<Prefix>(Prefix) -> MLShapedArraySlice<Scalar>\nReturns a new collection of the same type by removing initial elements that satisfy the given predicate from the start.\nfunc trimmingPrefix(while: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>\nfunc reversed() -> ReversedCollection<MLShapedArraySlice<Scalar>>\nReturns a view presenting the elements of the collection in reverse order.\nfunc shuffled() -> [MLShapedArraySlice<Scalar>]\nReturns the elements of the sequence, shuffled.\nfunc shuffled<T>(using: inout T) -> [MLShapedArraySlice<Scalar>]\nReturns the elements of the sequence, shuffled using the given generator as a source for randomness.\nfunc sorted<Comparator>(using: Comparator) -> [MLShapedArraySlice<Scalar>]\nGenerates a copy of the shaped array slice by sorting its slices with a comparator.\nfunc sorted<S, Comparator>(using: S) -> [MLShapedArraySlice<Scalar>]\nGenerates a copy of the shaped array slice by sorting its slices with a sequence of comparators.\nfunc sorted(by: (MLShapedArraySlice<Scalar>, MLShapedArraySlice<Scalar>) -> Bool) -> [MLShapedArraySlice<Scalar>]\nReturns the elements of the sequence, sorted using the given predicate as the comparison between elements.\nfunc split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (MLShapedArraySlice<Scalar>) -> Bool) -> [MLShapedArraySlice<Scalar>]\nReturns the longest possible subsequences of the collection, in order, that don’t contain elements satisfying the given predicate."
  },
  {
    "title": "joined() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarrayslice/3763458-joined",
    "html": "Return Value\n\nA flattened view of the elements of this sequence of sequences.\n\nDiscussion\n\nIn this example, an array of three ranges is flattened so that the elements of each range can be iterated in turn.\n\nlet ranges = [0..<3, 8..<10, 15..<17]\n\n\n// A for-in loop over 'ranges' accesses each range:\nfor range in ranges {\n  print(range)\n}\n// Prints \"0..<3\"\n// Prints \"8..<10\"\n// Prints \"15..<17\"\n\n\n// Use 'joined()' to access each element of each range:\nfor index in ranges.joined() {\n    print(index, terminator: \" \")\n}\n// Prints: \"0 1 2 8 9 15 16\"\n\nSee Also\nGenerating a Shaped Array Slice\nfunc first(where: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>?\nReturns the first element of the sequence that satisfies the given predicate.\nfunc last(where: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>?\nReturns the last element of the sequence that satisfies the given predicate.\nfunc dropFirst(Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence containing all but the given number of initial elements.\nfunc dropLast(Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence containing all but the specified number of final elements.\nfunc drop(while: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>\nReturns a subsequence by skipping elements while predicate returns true and returning the remaining elements.\nfunc joined<Separator>(separator: Separator) -> JoinedSequence<MLShapedArraySlice<Scalar>>\nReturns the concatenated elements of this sequence of sequences, inserting the given separator between each element.\nfunc min(by: (MLShapedArraySlice<Scalar>, MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>?\nReturns the minimum element in the sequence, using the given predicate as the comparison between elements.\nfunc max(by: (MLShapedArraySlice<Scalar>, MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>?\nReturns the maximum element in the sequence, using the given predicate as the comparison between elements.\nfunc prefix(Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence, up to the specified maximum length, containing the initial elements of the collection.\nfunc prefix(upTo: Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence from the start of the collection up to, but not including, the specified position.\nfunc prefix(through: Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence from the start of the collection through the specified position.\nfunc prefix(while: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>\nReturns a subsequence containing the initial elements until predicate returns false and skipping the remaining elements.\nfunc suffix(Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence, up to the given maximum length, containing the final elements of the collection.\nfunc suffix(from: Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence from the specified position to the end of the collection.\nfunc trimPrefix<Prefix>(Prefix)\nRemoves the initial elements that satisfy the given predicate from the start of the sequence.\nfunc trimPrefix(while: (MLShapedArraySlice<Scalar>) -> Bool)\nTrims the array slice using a predicate.\nfunc trimmingPrefix<Prefix>(Prefix) -> MLShapedArraySlice<Scalar>\nReturns a new collection of the same type by removing initial elements that satisfy the given predicate from the start.\nfunc trimmingPrefix(while: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>\nfunc reversed() -> ReversedCollection<MLShapedArraySlice<Scalar>>\nReturns a view presenting the elements of the collection in reverse order.\nfunc shuffled() -> [MLShapedArraySlice<Scalar>]\nReturns the elements of the sequence, shuffled.\nfunc shuffled<T>(using: inout T) -> [MLShapedArraySlice<Scalar>]\nReturns the elements of the sequence, shuffled using the given generator as a source for randomness.\nfunc sorted<Comparator>(using: Comparator) -> [MLShapedArraySlice<Scalar>]\nGenerates a copy of the shaped array slice by sorting its slices with a comparator.\nfunc sorted<S, Comparator>(using: S) -> [MLShapedArraySlice<Scalar>]\nGenerates a copy of the shaped array slice by sorting its slices with a sequence of comparators.\nfunc sorted(by: (MLShapedArraySlice<Scalar>, MLShapedArraySlice<Scalar>) -> Bool) -> [MLShapedArraySlice<Scalar>]\nReturns the elements of the sequence, sorted using the given predicate as the comparison between elements.\nfunc split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (MLShapedArraySlice<Scalar>) -> Bool) -> [MLShapedArraySlice<Scalar>]\nReturns the longest possible subsequences of the collection, in order, that don’t contain elements satisfying the given predicate."
  },
  {
    "title": "joined(separator:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarrayslice/3763460-joined",
    "html": "Parameters\nseparator\n\nA sequence to insert between each of this sequence’s elements.\n\nReturn Value\n\nThe joined sequence of elements.\n\nDiscussion\n\nThis example shows how an array of [Int] instances can be joined, using another [Int] instance as the separator:\n\nlet nestedNumbers = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nlet joined = nestedNumbers.joined(separator: [-1, -2])\nprint(Array(joined))\n// Prints \"[1, 2, 3, -1, -2, 4, 5, 6, -1, -2, 7, 8, 9]\"\n\nSee Also\nGenerating a Shaped Array Slice\nfunc first(where: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>?\nReturns the first element of the sequence that satisfies the given predicate.\nfunc last(where: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>?\nReturns the last element of the sequence that satisfies the given predicate.\nfunc dropFirst(Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence containing all but the given number of initial elements.\nfunc dropLast(Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence containing all but the specified number of final elements.\nfunc drop(while: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>\nReturns a subsequence by skipping elements while predicate returns true and returning the remaining elements.\nfunc joined() -> FlattenSequence<MLShapedArraySlice<Scalar>>\nReturns the elements of this sequence of sequences, concatenated.\nfunc min(by: (MLShapedArraySlice<Scalar>, MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>?\nReturns the minimum element in the sequence, using the given predicate as the comparison between elements.\nfunc max(by: (MLShapedArraySlice<Scalar>, MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>?\nReturns the maximum element in the sequence, using the given predicate as the comparison between elements.\nfunc prefix(Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence, up to the specified maximum length, containing the initial elements of the collection.\nfunc prefix(upTo: Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence from the start of the collection up to, but not including, the specified position.\nfunc prefix(through: Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence from the start of the collection through the specified position.\nfunc prefix(while: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>\nReturns a subsequence containing the initial elements until predicate returns false and skipping the remaining elements.\nfunc suffix(Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence, up to the given maximum length, containing the final elements of the collection.\nfunc suffix(from: Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence from the specified position to the end of the collection.\nfunc trimPrefix<Prefix>(Prefix)\nRemoves the initial elements that satisfy the given predicate from the start of the sequence.\nfunc trimPrefix(while: (MLShapedArraySlice<Scalar>) -> Bool)\nTrims the array slice using a predicate.\nfunc trimmingPrefix<Prefix>(Prefix) -> MLShapedArraySlice<Scalar>\nReturns a new collection of the same type by removing initial elements that satisfy the given predicate from the start.\nfunc trimmingPrefix(while: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>\nfunc reversed() -> ReversedCollection<MLShapedArraySlice<Scalar>>\nReturns a view presenting the elements of the collection in reverse order.\nfunc shuffled() -> [MLShapedArraySlice<Scalar>]\nReturns the elements of the sequence, shuffled.\nfunc shuffled<T>(using: inout T) -> [MLShapedArraySlice<Scalar>]\nReturns the elements of the sequence, shuffled using the given generator as a source for randomness.\nfunc sorted<Comparator>(using: Comparator) -> [MLShapedArraySlice<Scalar>]\nGenerates a copy of the shaped array slice by sorting its slices with a comparator.\nfunc sorted<S, Comparator>(using: S) -> [MLShapedArraySlice<Scalar>]\nGenerates a copy of the shaped array slice by sorting its slices with a sequence of comparators.\nfunc sorted(by: (MLShapedArraySlice<Scalar>, MLShapedArraySlice<Scalar>) -> Bool) -> [MLShapedArraySlice<Scalar>]\nReturns the elements of the sequence, sorted using the given predicate as the comparison between elements.\nfunc split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (MLShapedArraySlice<Scalar>) -> Bool) -> [MLShapedArraySlice<Scalar>]\nReturns the longest possible subsequences of the collection, in order, that don’t contain elements satisfying the given predicate."
  },
  {
    "title": "dropFirst(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarrayslice/3763406-dropfirst",
    "html": "Parameters\nk\n\nThe number of elements to drop from the beginning of the collection. k must be greater than or equal to zero.\n\nReturn Value\n\nA subsequence starting after the specified number of elements.\n\nDiscussion\n\nIf the number of elements to drop exceeds the number of elements in the collection, the result is an empty subsequence.\n\nlet numbers = [1, 2, 3, 4, 5]\nprint(numbers.dropFirst(2))\n// Prints \"[3, 4, 5]\"\nprint(numbers.dropFirst(10))\n// Prints \"[]\"\n\n\nComplexity: O(1) if the collection conforms to RandomAccessCollection; otherwise, O(k), where k is the number of elements to drop from the beginning of the collection.\n\nSee Also\nGenerating a Shaped Array Slice\nfunc first(where: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>?\nReturns the first element of the sequence that satisfies the given predicate.\nfunc last(where: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>?\nReturns the last element of the sequence that satisfies the given predicate.\nfunc dropLast(Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence containing all but the specified number of final elements.\nfunc drop(while: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>\nReturns a subsequence by skipping elements while predicate returns true and returning the remaining elements.\nfunc joined() -> FlattenSequence<MLShapedArraySlice<Scalar>>\nReturns the elements of this sequence of sequences, concatenated.\nfunc joined<Separator>(separator: Separator) -> JoinedSequence<MLShapedArraySlice<Scalar>>\nReturns the concatenated elements of this sequence of sequences, inserting the given separator between each element.\nfunc min(by: (MLShapedArraySlice<Scalar>, MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>?\nReturns the minimum element in the sequence, using the given predicate as the comparison between elements.\nfunc max(by: (MLShapedArraySlice<Scalar>, MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>?\nReturns the maximum element in the sequence, using the given predicate as the comparison between elements.\nfunc prefix(Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence, up to the specified maximum length, containing the initial elements of the collection.\nfunc prefix(upTo: Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence from the start of the collection up to, but not including, the specified position.\nfunc prefix(through: Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence from the start of the collection through the specified position.\nfunc prefix(while: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>\nReturns a subsequence containing the initial elements until predicate returns false and skipping the remaining elements.\nfunc suffix(Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence, up to the given maximum length, containing the final elements of the collection.\nfunc suffix(from: Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence from the specified position to the end of the collection.\nfunc trimPrefix<Prefix>(Prefix)\nRemoves the initial elements that satisfy the given predicate from the start of the sequence.\nfunc trimPrefix(while: (MLShapedArraySlice<Scalar>) -> Bool)\nTrims the array slice using a predicate.\nfunc trimmingPrefix<Prefix>(Prefix) -> MLShapedArraySlice<Scalar>\nReturns a new collection of the same type by removing initial elements that satisfy the given predicate from the start.\nfunc trimmingPrefix(while: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>\nfunc reversed() -> ReversedCollection<MLShapedArraySlice<Scalar>>\nReturns a view presenting the elements of the collection in reverse order.\nfunc shuffled() -> [MLShapedArraySlice<Scalar>]\nReturns the elements of the sequence, shuffled.\nfunc shuffled<T>(using: inout T) -> [MLShapedArraySlice<Scalar>]\nReturns the elements of the sequence, shuffled using the given generator as a source for randomness.\nfunc sorted<Comparator>(using: Comparator) -> [MLShapedArraySlice<Scalar>]\nGenerates a copy of the shaped array slice by sorting its slices with a comparator.\nfunc sorted<S, Comparator>(using: S) -> [MLShapedArraySlice<Scalar>]\nGenerates a copy of the shaped array slice by sorting its slices with a sequence of comparators.\nfunc sorted(by: (MLShapedArraySlice<Scalar>, MLShapedArraySlice<Scalar>) -> Bool) -> [MLShapedArraySlice<Scalar>]\nReturns the elements of the sequence, sorted using the given predicate as the comparison between elements.\nfunc split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (MLShapedArraySlice<Scalar>) -> Bool) -> [MLShapedArraySlice<Scalar>]\nReturns the longest possible subsequences of the collection, in order, that don’t contain elements satisfying the given predicate."
  },
  {
    "title": "first(where:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarrayslice/3763422-first",
    "html": "Parameters\npredicate\n\nA closure that takes an element of the sequence as its argument and returns a Boolean value indicating whether the element is a match.\n\nReturn Value\n\nThe first element of the sequence that satisfies predicate, or nil if there is no element that satisfies predicate.\n\nDiscussion\n\nThe following example uses the first(where:) method to find the first negative number in an array of integers:\n\nlet numbers = [3, 7, 4, -2, 9, -6, 10, 1]\nif let firstNegative = numbers.first(where: { $0 < 0 }) {\n    print(\"The first negative number is \\(firstNegative).\")\n}\n// Prints \"The first negative number is -2.\"\n\n\nComplexity: O(n), where n is the length of the sequence.\n\nSee Also\nGenerating a Shaped Array Slice\nfunc last(where: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>?\nReturns the last element of the sequence that satisfies the given predicate.\nfunc dropFirst(Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence containing all but the given number of initial elements.\nfunc dropLast(Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence containing all but the specified number of final elements.\nfunc drop(while: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>\nReturns a subsequence by skipping elements while predicate returns true and returning the remaining elements.\nfunc joined() -> FlattenSequence<MLShapedArraySlice<Scalar>>\nReturns the elements of this sequence of sequences, concatenated.\nfunc joined<Separator>(separator: Separator) -> JoinedSequence<MLShapedArraySlice<Scalar>>\nReturns the concatenated elements of this sequence of sequences, inserting the given separator between each element.\nfunc min(by: (MLShapedArraySlice<Scalar>, MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>?\nReturns the minimum element in the sequence, using the given predicate as the comparison between elements.\nfunc max(by: (MLShapedArraySlice<Scalar>, MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>?\nReturns the maximum element in the sequence, using the given predicate as the comparison between elements.\nfunc prefix(Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence, up to the specified maximum length, containing the initial elements of the collection.\nfunc prefix(upTo: Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence from the start of the collection up to, but not including, the specified position.\nfunc prefix(through: Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence from the start of the collection through the specified position.\nfunc prefix(while: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>\nReturns a subsequence containing the initial elements until predicate returns false and skipping the remaining elements.\nfunc suffix(Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence, up to the given maximum length, containing the final elements of the collection.\nfunc suffix(from: Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence from the specified position to the end of the collection.\nfunc trimPrefix<Prefix>(Prefix)\nRemoves the initial elements that satisfy the given predicate from the start of the sequence.\nfunc trimPrefix(while: (MLShapedArraySlice<Scalar>) -> Bool)\nTrims the array slice using a predicate.\nfunc trimmingPrefix<Prefix>(Prefix) -> MLShapedArraySlice<Scalar>\nReturns a new collection of the same type by removing initial elements that satisfy the given predicate from the start.\nfunc trimmingPrefix(while: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>\nfunc reversed() -> ReversedCollection<MLShapedArraySlice<Scalar>>\nReturns a view presenting the elements of the collection in reverse order.\nfunc shuffled() -> [MLShapedArraySlice<Scalar>]\nReturns the elements of the sequence, shuffled.\nfunc shuffled<T>(using: inout T) -> [MLShapedArraySlice<Scalar>]\nReturns the elements of the sequence, shuffled using the given generator as a source for randomness.\nfunc sorted<Comparator>(using: Comparator) -> [MLShapedArraySlice<Scalar>]\nGenerates a copy of the shaped array slice by sorting its slices with a comparator.\nfunc sorted<S, Comparator>(using: S) -> [MLShapedArraySlice<Scalar>]\nGenerates a copy of the shaped array slice by sorting its slices with a sequence of comparators.\nfunc sorted(by: (MLShapedArraySlice<Scalar>, MLShapedArraySlice<Scalar>) -> Bool) -> [MLShapedArraySlice<Scalar>]\nReturns the elements of the sequence, sorted using the given predicate as the comparison between elements.\nfunc split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (MLShapedArraySlice<Scalar>) -> Bool) -> [MLShapedArraySlice<Scalar>]\nReturns the longest possible subsequences of the collection, in order, that don’t contain elements satisfying the given predicate."
  },
  {
    "title": "dropLast(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarrayslice/3763408-droplast",
    "html": "Parameters\nk\n\nThe number of elements to drop off the end of the collection. k must be greater than or equal to zero.\n\nReturn Value\n\nA subsequence that leaves off k elements from the end.\n\nDiscussion\n\nIf the number of elements to drop exceeds the number of elements in the collection, the result is an empty subsequence.\n\nlet numbers = [1, 2, 3, 4, 5]\nprint(numbers.dropLast(2))\n// Prints \"[1, 2, 3]\"\nprint(numbers.dropLast(10))\n// Prints \"[]\"\n\n\nComplexity: O(1) if the collection conforms to RandomAccessCollection; otherwise, O(k), where k is the number of elements to drop.\n\nSee Also\nGenerating a Shaped Array Slice\nfunc first(where: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>?\nReturns the first element of the sequence that satisfies the given predicate.\nfunc last(where: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>?\nReturns the last element of the sequence that satisfies the given predicate.\nfunc dropFirst(Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence containing all but the given number of initial elements.\nfunc drop(while: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>\nReturns a subsequence by skipping elements while predicate returns true and returning the remaining elements.\nfunc joined() -> FlattenSequence<MLShapedArraySlice<Scalar>>\nReturns the elements of this sequence of sequences, concatenated.\nfunc joined<Separator>(separator: Separator) -> JoinedSequence<MLShapedArraySlice<Scalar>>\nReturns the concatenated elements of this sequence of sequences, inserting the given separator between each element.\nfunc min(by: (MLShapedArraySlice<Scalar>, MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>?\nReturns the minimum element in the sequence, using the given predicate as the comparison between elements.\nfunc max(by: (MLShapedArraySlice<Scalar>, MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>?\nReturns the maximum element in the sequence, using the given predicate as the comparison between elements.\nfunc prefix(Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence, up to the specified maximum length, containing the initial elements of the collection.\nfunc prefix(upTo: Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence from the start of the collection up to, but not including, the specified position.\nfunc prefix(through: Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence from the start of the collection through the specified position.\nfunc prefix(while: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>\nReturns a subsequence containing the initial elements until predicate returns false and skipping the remaining elements.\nfunc suffix(Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence, up to the given maximum length, containing the final elements of the collection.\nfunc suffix(from: Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence from the specified position to the end of the collection.\nfunc trimPrefix<Prefix>(Prefix)\nRemoves the initial elements that satisfy the given predicate from the start of the sequence.\nfunc trimPrefix(while: (MLShapedArraySlice<Scalar>) -> Bool)\nTrims the array slice using a predicate.\nfunc trimmingPrefix<Prefix>(Prefix) -> MLShapedArraySlice<Scalar>\nReturns a new collection of the same type by removing initial elements that satisfy the given predicate from the start.\nfunc trimmingPrefix(while: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>\nfunc reversed() -> ReversedCollection<MLShapedArraySlice<Scalar>>\nReturns a view presenting the elements of the collection in reverse order.\nfunc shuffled() -> [MLShapedArraySlice<Scalar>]\nReturns the elements of the sequence, shuffled.\nfunc shuffled<T>(using: inout T) -> [MLShapedArraySlice<Scalar>]\nReturns the elements of the sequence, shuffled using the given generator as a source for randomness.\nfunc sorted<Comparator>(using: Comparator) -> [MLShapedArraySlice<Scalar>]\nGenerates a copy of the shaped array slice by sorting its slices with a comparator.\nfunc sorted<S, Comparator>(using: S) -> [MLShapedArraySlice<Scalar>]\nGenerates a copy of the shaped array slice by sorting its slices with a sequence of comparators.\nfunc sorted(by: (MLShapedArraySlice<Scalar>, MLShapedArraySlice<Scalar>) -> Bool) -> [MLShapedArraySlice<Scalar>]\nReturns the elements of the sequence, sorted using the given predicate as the comparison between elements.\nfunc split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (MLShapedArraySlice<Scalar>) -> Bool) -> [MLShapedArraySlice<Scalar>]\nReturns the longest possible subsequences of the collection, in order, that don’t contain elements satisfying the given predicate."
  },
  {
    "title": "reverse() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarrayslice/3763505-reverse",
    "html": "Discussion\n\nThe following example reverses the elements of an array of characters:\n\nvar characters: [Character] = [\"C\", \"a\", \"f\", \"é\"]\ncharacters.reverse()\nprint(characters)\n// Prints \"[\"é\", \"f\", \"a\", \"C\"]\"\n\n\nComplexity: O(n), where n is the number of elements in the collection.\n\nSee Also\nModifying a Shaped Array Slice\nsubscript(Range<Int>) -> MLShapedArraySlice<Scalar>\nAccesses a slice with a range in the shaped array’s first dimension.\nfunc swapAt(Int, Int)\nExchanges the values at the specified indices of the collection.\nfunc partition(by: (MLShapedArraySlice<Scalar>) -> Bool) -> Int\nReorders the elements of the collection such that all the elements that match the given predicate are after all the elements that don’t match.\nfunc sort<Comparator>(using: Comparator)\nReorders a shaped array slice by sorting its slices with a comparator.\nfunc sort<S, Comparator>(using: S)\nReorders a shaped array slice by sorting its slices with a sequence of comparators.\nfunc sort(by: (MLShapedArraySlice<Scalar>, MLShapedArraySlice<Scalar>) -> Bool)\nSorts the collection in place, using the given predicate as the comparison between elements.\nfunc popFirst() -> MLShapedArraySlice<Scalar>?\nRemoves and returns the first element of the collection.\nfunc popLast() -> MLShapedArraySlice<Scalar>?\nRemoves and returns the last element of the collection.\nfunc removeFirst() -> MLShapedArraySlice<Scalar>\nRemoves and returns the first element of the collection.\nfunc removeLast() -> MLShapedArraySlice<Scalar>\nRemoves and returns the last element of the collection.\nfunc removeFirst(Int)\nRemoves the specified number of elements from the beginning of the collection.\nfunc removeLast(Int)\nRemoves the given number of elements from the end of the collection.\nfunc shuffle()\nShuffles the collection in place.\nfunc shuffle<T>(using: inout T)\nShuffles the collection in place, using the given generator as a source for randomness.\nfunc withContiguousMutableStorageIfAvailable<R>((inout UnsafeMutableBufferPointer<MLShapedArraySlice<Scalar>>) -> R) -> R?\nExecutes a closure on the collection’s contiguous storage."
  },
  {
    "title": "shuffle(using:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarrayslice/3763516-shuffle",
    "html": "Parameters\ngenerator\n\nThe random number generator to use when shuffling the collection.\n\nDiscussion\n\nYou use this method to randomize the elements of a collection when you are using a custom random number generator. For example, you can use the shuffle(using:) method to randomly reorder the elements of an array.\n\nvar names = [\"Alejandro\", \"Camila\", \"Diego\", \"Luciana\", \"Luis\", \"Sofía\"]\nnames.shuffle(using: &myGenerator)\n// names == [\"Sofía\", \"Alejandro\", \"Camila\", \"Luis\", \"Diego\", \"Luciana\"]\n\n\nComplexity: O(n), where n is the length of the collection.\n\nNote\n\nThe algorithm used to shuffle a collection may change in a future version of Swift. If you’re passing a generator that results in the same shuffled order each time you run your program, that sequence may change when your program is compiled using a different version of Swift.\n\nSee Also\nModifying a Shaped Array Slice\nsubscript(Range<Int>) -> MLShapedArraySlice<Scalar>\nAccesses a slice with a range in the shaped array’s first dimension.\nfunc swapAt(Int, Int)\nExchanges the values at the specified indices of the collection.\nfunc partition(by: (MLShapedArraySlice<Scalar>) -> Bool) -> Int\nReorders the elements of the collection such that all the elements that match the given predicate are after all the elements that don’t match.\nfunc sort<Comparator>(using: Comparator)\nReorders a shaped array slice by sorting its slices with a comparator.\nfunc sort<S, Comparator>(using: S)\nReorders a shaped array slice by sorting its slices with a sequence of comparators.\nfunc sort(by: (MLShapedArraySlice<Scalar>, MLShapedArraySlice<Scalar>) -> Bool)\nSorts the collection in place, using the given predicate as the comparison between elements.\nfunc popFirst() -> MLShapedArraySlice<Scalar>?\nRemoves and returns the first element of the collection.\nfunc popLast() -> MLShapedArraySlice<Scalar>?\nRemoves and returns the last element of the collection.\nfunc removeFirst() -> MLShapedArraySlice<Scalar>\nRemoves and returns the first element of the collection.\nfunc removeLast() -> MLShapedArraySlice<Scalar>\nRemoves and returns the last element of the collection.\nfunc removeFirst(Int)\nRemoves the specified number of elements from the beginning of the collection.\nfunc removeLast(Int)\nRemoves the given number of elements from the end of the collection.\nfunc reverse()\nReverses the elements of the collection in place.\nfunc shuffle()\nShuffles the collection in place.\nfunc withContiguousMutableStorageIfAvailable<R>((inout UnsafeMutableBufferPointer<MLShapedArraySlice<Scalar>>) -> R) -> R?\nExecutes a closure on the collection’s contiguous storage."
  },
  {
    "title": "removeLast(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarrayslice/3763504-removelast",
    "html": "Parameters\nk\n\nThe number of elements to remove. k must be greater than or equal to zero, and must be less than or equal to the number of elements in the collection.\n\nDiscussion\n\nComplexity: O(1) if the collection conforms to RandomAccessCollection; otherwise, O(k), where k is the number of elements to remove.\n\nSee Also\nModifying a Shaped Array Slice\nsubscript(Range<Int>) -> MLShapedArraySlice<Scalar>\nAccesses a slice with a range in the shaped array’s first dimension.\nfunc swapAt(Int, Int)\nExchanges the values at the specified indices of the collection.\nfunc partition(by: (MLShapedArraySlice<Scalar>) -> Bool) -> Int\nReorders the elements of the collection such that all the elements that match the given predicate are after all the elements that don’t match.\nfunc sort<Comparator>(using: Comparator)\nReorders a shaped array slice by sorting its slices with a comparator.\nfunc sort<S, Comparator>(using: S)\nReorders a shaped array slice by sorting its slices with a sequence of comparators.\nfunc sort(by: (MLShapedArraySlice<Scalar>, MLShapedArraySlice<Scalar>) -> Bool)\nSorts the collection in place, using the given predicate as the comparison between elements.\nfunc popFirst() -> MLShapedArraySlice<Scalar>?\nRemoves and returns the first element of the collection.\nfunc popLast() -> MLShapedArraySlice<Scalar>?\nRemoves and returns the last element of the collection.\nfunc removeFirst() -> MLShapedArraySlice<Scalar>\nRemoves and returns the first element of the collection.\nfunc removeLast() -> MLShapedArraySlice<Scalar>\nRemoves and returns the last element of the collection.\nfunc removeFirst(Int)\nRemoves the specified number of elements from the beginning of the collection.\nfunc reverse()\nReverses the elements of the collection in place.\nfunc shuffle()\nShuffles the collection in place.\nfunc shuffle<T>(using: inout T)\nShuffles the collection in place, using the given generator as a source for randomness.\nfunc withContiguousMutableStorageIfAvailable<R>((inout UnsafeMutableBufferPointer<MLShapedArraySlice<Scalar>>) -> R) -> R?\nExecutes a closure on the collection’s contiguous storage."
  },
  {
    "title": "removeFirst(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarrayslice/3763502-removefirst",
    "html": "Parameters\nk\n\nThe number of elements to remove. k must be greater than or equal to zero, and must be less than or equal to the number of elements in the collection.\n\nDiscussion\n\nComplexity: O(1) if the collection conforms to RandomAccessCollection; otherwise, O(k), where k is the specified number of elements.\n\nSee Also\nModifying a Shaped Array Slice\nsubscript(Range<Int>) -> MLShapedArraySlice<Scalar>\nAccesses a slice with a range in the shaped array’s first dimension.\nfunc swapAt(Int, Int)\nExchanges the values at the specified indices of the collection.\nfunc partition(by: (MLShapedArraySlice<Scalar>) -> Bool) -> Int\nReorders the elements of the collection such that all the elements that match the given predicate are after all the elements that don’t match.\nfunc sort<Comparator>(using: Comparator)\nReorders a shaped array slice by sorting its slices with a comparator.\nfunc sort<S, Comparator>(using: S)\nReorders a shaped array slice by sorting its slices with a sequence of comparators.\nfunc sort(by: (MLShapedArraySlice<Scalar>, MLShapedArraySlice<Scalar>) -> Bool)\nSorts the collection in place, using the given predicate as the comparison between elements.\nfunc popFirst() -> MLShapedArraySlice<Scalar>?\nRemoves and returns the first element of the collection.\nfunc popLast() -> MLShapedArraySlice<Scalar>?\nRemoves and returns the last element of the collection.\nfunc removeFirst() -> MLShapedArraySlice<Scalar>\nRemoves and returns the first element of the collection.\nfunc removeLast() -> MLShapedArraySlice<Scalar>\nRemoves and returns the last element of the collection.\nfunc removeLast(Int)\nRemoves the given number of elements from the end of the collection.\nfunc reverse()\nReverses the elements of the collection in place.\nfunc shuffle()\nShuffles the collection in place.\nfunc shuffle<T>(using: inout T)\nShuffles the collection in place, using the given generator as a source for randomness.\nfunc withContiguousMutableStorageIfAvailable<R>((inout UnsafeMutableBufferPointer<MLShapedArraySlice<Scalar>>) -> R) -> R?\nExecutes a closure on the collection’s contiguous storage."
  },
  {
    "title": "removeLast() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarrayslice/3763503-removelast",
    "html": "Return Value\n\nThe last element of the collection.\n\nDiscussion\n\nThe collection must not be empty. To remove the last element of a collection that might be empty, use the popLast() method instead.\n\nComplexity: O(1)\n\nSee Also\nModifying a Shaped Array Slice\nsubscript(Range<Int>) -> MLShapedArraySlice<Scalar>\nAccesses a slice with a range in the shaped array’s first dimension.\nfunc swapAt(Int, Int)\nExchanges the values at the specified indices of the collection.\nfunc partition(by: (MLShapedArraySlice<Scalar>) -> Bool) -> Int\nReorders the elements of the collection such that all the elements that match the given predicate are after all the elements that don’t match.\nfunc sort<Comparator>(using: Comparator)\nReorders a shaped array slice by sorting its slices with a comparator.\nfunc sort<S, Comparator>(using: S)\nReorders a shaped array slice by sorting its slices with a sequence of comparators.\nfunc sort(by: (MLShapedArraySlice<Scalar>, MLShapedArraySlice<Scalar>) -> Bool)\nSorts the collection in place, using the given predicate as the comparison between elements.\nfunc popFirst() -> MLShapedArraySlice<Scalar>?\nRemoves and returns the first element of the collection.\nfunc popLast() -> MLShapedArraySlice<Scalar>?\nRemoves and returns the last element of the collection.\nfunc removeFirst() -> MLShapedArraySlice<Scalar>\nRemoves and returns the first element of the collection.\nfunc removeFirst(Int)\nRemoves the specified number of elements from the beginning of the collection.\nfunc removeLast(Int)\nRemoves the given number of elements from the end of the collection.\nfunc reverse()\nReverses the elements of the collection in place.\nfunc shuffle()\nShuffles the collection in place.\nfunc shuffle<T>(using: inout T)\nShuffles the collection in place, using the given generator as a source for randomness.\nfunc withContiguousMutableStorageIfAvailable<R>((inout UnsafeMutableBufferPointer<MLShapedArraySlice<Scalar>>) -> R) -> R?\nExecutes a closure on the collection’s contiguous storage."
  },
  {
    "title": "popFirst() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarrayslice/3763480-popfirst",
    "html": "Return Value\n\nThe first element of the collection if the collection is not empty; otherwise, nil.\n\nDiscussion\n\nComplexity: O(1)\n\nSee Also\nModifying a Shaped Array Slice\nsubscript(Range<Int>) -> MLShapedArraySlice<Scalar>\nAccesses a slice with a range in the shaped array’s first dimension.\nfunc swapAt(Int, Int)\nExchanges the values at the specified indices of the collection.\nfunc partition(by: (MLShapedArraySlice<Scalar>) -> Bool) -> Int\nReorders the elements of the collection such that all the elements that match the given predicate are after all the elements that don’t match.\nfunc sort<Comparator>(using: Comparator)\nReorders a shaped array slice by sorting its slices with a comparator.\nfunc sort<S, Comparator>(using: S)\nReorders a shaped array slice by sorting its slices with a sequence of comparators.\nfunc sort(by: (MLShapedArraySlice<Scalar>, MLShapedArraySlice<Scalar>) -> Bool)\nSorts the collection in place, using the given predicate as the comparison between elements.\nfunc popLast() -> MLShapedArraySlice<Scalar>?\nRemoves and returns the last element of the collection.\nfunc removeFirst() -> MLShapedArraySlice<Scalar>\nRemoves and returns the first element of the collection.\nfunc removeLast() -> MLShapedArraySlice<Scalar>\nRemoves and returns the last element of the collection.\nfunc removeFirst(Int)\nRemoves the specified number of elements from the beginning of the collection.\nfunc removeLast(Int)\nRemoves the given number of elements from the end of the collection.\nfunc reverse()\nReverses the elements of the collection in place.\nfunc shuffle()\nShuffles the collection in place.\nfunc shuffle<T>(using: inout T)\nShuffles the collection in place, using the given generator as a source for randomness.\nfunc withContiguousMutableStorageIfAvailable<R>((inout UnsafeMutableBufferPointer<MLShapedArraySlice<Scalar>>) -> R) -> R?\nExecutes a closure on the collection’s contiguous storage."
  },
  {
    "title": "removeFirst() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarrayslice/3763501-removefirst",
    "html": "Return Value\n\nThe first element of the collection.\n\nDiscussion\n\nThe collection must not be empty.\n\nComplexity: O(1)\n\nSee Also\nModifying a Shaped Array Slice\nsubscript(Range<Int>) -> MLShapedArraySlice<Scalar>\nAccesses a slice with a range in the shaped array’s first dimension.\nfunc swapAt(Int, Int)\nExchanges the values at the specified indices of the collection.\nfunc partition(by: (MLShapedArraySlice<Scalar>) -> Bool) -> Int\nReorders the elements of the collection such that all the elements that match the given predicate are after all the elements that don’t match.\nfunc sort<Comparator>(using: Comparator)\nReorders a shaped array slice by sorting its slices with a comparator.\nfunc sort<S, Comparator>(using: S)\nReorders a shaped array slice by sorting its slices with a sequence of comparators.\nfunc sort(by: (MLShapedArraySlice<Scalar>, MLShapedArraySlice<Scalar>) -> Bool)\nSorts the collection in place, using the given predicate as the comparison between elements.\nfunc popFirst() -> MLShapedArraySlice<Scalar>?\nRemoves and returns the first element of the collection.\nfunc popLast() -> MLShapedArraySlice<Scalar>?\nRemoves and returns the last element of the collection.\nfunc removeLast() -> MLShapedArraySlice<Scalar>\nRemoves and returns the last element of the collection.\nfunc removeFirst(Int)\nRemoves the specified number of elements from the beginning of the collection.\nfunc removeLast(Int)\nRemoves the given number of elements from the end of the collection.\nfunc reverse()\nReverses the elements of the collection in place.\nfunc shuffle()\nShuffles the collection in place.\nfunc shuffle<T>(using: inout T)\nShuffles the collection in place, using the given generator as a source for randomness.\nfunc withContiguousMutableStorageIfAvailable<R>((inout UnsafeMutableBufferPointer<MLShapedArraySlice<Scalar>>) -> R) -> R?\nExecutes a closure on the collection’s contiguous storage."
  },
  {
    "title": "popLast() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarrayslice/3763481-poplast",
    "html": "Return Value\n\nThe last element of the collection if the collection has one or more elements; otherwise, nil.\n\nDiscussion\n\nYou can use popLast() to remove the last element of a collection that might be empty. The removeLast() method must be used only on a nonempty collection.\n\nComplexity: O(1)\n\nSee Also\nModifying a Shaped Array Slice\nsubscript(Range<Int>) -> MLShapedArraySlice<Scalar>\nAccesses a slice with a range in the shaped array’s first dimension.\nfunc swapAt(Int, Int)\nExchanges the values at the specified indices of the collection.\nfunc partition(by: (MLShapedArraySlice<Scalar>) -> Bool) -> Int\nReorders the elements of the collection such that all the elements that match the given predicate are after all the elements that don’t match.\nfunc sort<Comparator>(using: Comparator)\nReorders a shaped array slice by sorting its slices with a comparator.\nfunc sort<S, Comparator>(using: S)\nReorders a shaped array slice by sorting its slices with a sequence of comparators.\nfunc sort(by: (MLShapedArraySlice<Scalar>, MLShapedArraySlice<Scalar>) -> Bool)\nSorts the collection in place, using the given predicate as the comparison between elements.\nfunc popFirst() -> MLShapedArraySlice<Scalar>?\nRemoves and returns the first element of the collection.\nfunc removeFirst() -> MLShapedArraySlice<Scalar>\nRemoves and returns the first element of the collection.\nfunc removeLast() -> MLShapedArraySlice<Scalar>\nRemoves and returns the last element of the collection.\nfunc removeFirst(Int)\nRemoves the specified number of elements from the beginning of the collection.\nfunc removeLast(Int)\nRemoves the given number of elements from the end of the collection.\nfunc reverse()\nReverses the elements of the collection in place.\nfunc shuffle()\nShuffles the collection in place.\nfunc shuffle<T>(using: inout T)\nShuffles the collection in place, using the given generator as a source for randomness.\nfunc withContiguousMutableStorageIfAvailable<R>((inout UnsafeMutableBufferPointer<MLShapedArraySlice<Scalar>>) -> R) -> R?\nExecutes a closure on the collection’s contiguous storage."
  },
  {
    "title": "sort(by:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarrayslice/3763522-sort",
    "html": "Parameters\nareInIncreasingOrder\n\nA predicate that returns true if its first argument should be ordered before its second argument; otherwise, false. If areInIncreasingOrder throws an error during the sort, the elements may be in a different order, but none will be lost.\n\nDiscussion\n\nWhen you want to sort a collection of elements that don’t conform to the Comparable protocol, pass a closure to this method that returns true when the first element should be ordered before the second.\n\nIn the following example, the closure provides an ordering for an array of a custom enumeration that describes an HTTP response. The predicate orders errors before successes and sorts the error responses by their error code.\n\nenum HTTPResponse {\n    case ok\n    case error(Int)\n}\n\n\nvar responses: [HTTPResponse] = [.error(500), .ok, .ok, .error(404), .error(403)]\nresponses.sort {\n    switch ($0, $1) {\n    // Order errors by code\n    case let (.error(aCode), .error(bCode)):\n        return aCode < bCode\n\n\n    // All successes are equivalent, so none is before any other\n    case (.ok, .ok): return false\n\n\n    // Order errors before successes\n    case (.error, .ok): return true\n    case (.ok, .error): return false\n    }\n}\nprint(responses)\n// Prints \"[.error(403), .error(404), .error(500), .ok, .ok]\"\n\n\nAlternatively, use this method to sort a collection of elements that do conform to Comparable when you want the sort to be descending instead of ascending. Pass the greater-than operator (>) operator as the predicate.\n\nvar students = [\"Kofi\", \"Abena\", \"Peter\", \"Kweku\", \"Akosua\"]\nstudents.sort(by: >)\nprint(students)\n// Prints \"[\"Peter\", \"Kweku\", \"Kofi\", \"Akosua\", \"Abena\"]\"\n\n\nareInIncreasingOrder must be a strict weak ordering over the elements. That is, for any elements a, b, and c, the following conditions must hold:\n\nareInIncreasingOrder(a, a) is always false. (Irreflexivity)\n\nIf areInIncreasingOrder(a, b) and areInIncreasingOrder(b, c) are both true, then areInIncreasingOrder(a, c) is also true. (Transitive comparability)\n\nTwo elements are incomparable if neither is ordered before the other according to the predicate. If a and b are incomparable, and b and c are incomparable, then a and c are also incomparable. (Transitive incomparability)\n\nThe sorting algorithm is guaranteed to be stable. A stable sort preserves the relative order of elements for which areInIncreasingOrder does not establish an order.\n\nComplexity: O(n log n), where n is the length of the collection.\n\nSee Also\nModifying a Shaped Array Slice\nsubscript(Range<Int>) -> MLShapedArraySlice<Scalar>\nAccesses a slice with a range in the shaped array’s first dimension.\nfunc swapAt(Int, Int)\nExchanges the values at the specified indices of the collection.\nfunc partition(by: (MLShapedArraySlice<Scalar>) -> Bool) -> Int\nReorders the elements of the collection such that all the elements that match the given predicate are after all the elements that don’t match.\nfunc sort<Comparator>(using: Comparator)\nReorders a shaped array slice by sorting its slices with a comparator.\nfunc sort<S, Comparator>(using: S)\nReorders a shaped array slice by sorting its slices with a sequence of comparators.\nfunc popFirst() -> MLShapedArraySlice<Scalar>?\nRemoves and returns the first element of the collection.\nfunc popLast() -> MLShapedArraySlice<Scalar>?\nRemoves and returns the last element of the collection.\nfunc removeFirst() -> MLShapedArraySlice<Scalar>\nRemoves and returns the first element of the collection.\nfunc removeLast() -> MLShapedArraySlice<Scalar>\nRemoves and returns the last element of the collection.\nfunc removeFirst(Int)\nRemoves the specified number of elements from the beginning of the collection.\nfunc removeLast(Int)\nRemoves the given number of elements from the end of the collection.\nfunc reverse()\nReverses the elements of the collection in place.\nfunc shuffle()\nShuffles the collection in place.\nfunc shuffle<T>(using: inout T)\nShuffles the collection in place, using the given generator as a source for randomness.\nfunc withContiguousMutableStorageIfAvailable<R>((inout UnsafeMutableBufferPointer<MLShapedArraySlice<Scalar>>) -> R) -> R?\nExecutes a closure on the collection’s contiguous storage."
  },
  {
    "title": "type | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlimagesizeconstraint/2994307-type",
    "html": "See Also\nDetermining Relevant Constraints\nenum MLImageSizeConstraintType\nThe modes that determine how the model defines a feature's image size constraint."
  },
  {
    "title": "max(by:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarray/3763261-max",
    "html": "Parameters\nareInIncreasingOrder\n\nA predicate that returns true if its first argument should be ordered before its second argument; otherwise, false.\n\nReturn Value\n\nThe sequence’s maximum element if the sequence is not empty; otherwise, nil.\n\nDiscussion\n\nThe predicate must be a strict weak ordering over the elements. That is, for any elements a, b, and c, the following conditions must hold:\n\nareInIncreasingOrder(a, a) is always false. (Irreflexivity)\n\nIf areInIncreasingOrder(a, b) and areInIncreasingOrder(b, c) are both true, then areInIncreasingOrder(a, c) is also true. (Transitive comparability)\n\nTwo elements are incomparable if neither is ordered before the other according to the predicate. If a and b are incomparable, and b and c are incomparable, then a and c are also incomparable. (Transitive incomparability)\n\nThis example shows how to use the max(by:) method on a dictionary to find the key-value pair with the highest value.\n\nlet hues = [\"Heliotrope\": 296, \"Coral\": 16, \"Aquamarine\": 156]\nlet greatestHue = hues.max { a, b in a.value < b.value }\nprint(greatestHue)\n// Prints \"Optional((key: \"Heliotrope\", value: 296))\"\n\n\nComplexity: O(n), where n is the length of the sequence.\n\nSee Also\nGenerating a Shaped Array Slice\nfunc first(where: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>?\nReturns the first element of the sequence that satisfies the given predicate.\nfunc last(where: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>?\nReturns the last element of the sequence that satisfies the given predicate.\nfunc dropFirst(Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence containing all but the given number of initial elements.\nfunc dropLast(Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence containing all but the specified number of final elements.\nfunc drop(while: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>\nReturns a subsequence by skipping elements while predicate returns true and returning the remaining elements.\nfunc min(by: (MLShapedArraySlice<Scalar>, MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>?\nReturns the minimum element in the sequence, using the given predicate as the comparison between elements.\nfunc prefix(Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence, up to the specified maximum length, containing the initial elements of the collection.\nfunc prefix(upTo: Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence from the start of the collection up to, but not including, the specified position.\nfunc prefix(through: Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence from the start of the collection through the specified position.\nfunc prefix(while: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>\nReturns a subsequence containing the initial elements until predicate returns false and skipping the remaining elements.\nfunc suffix(Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence, up to the given maximum length, containing the final elements of the collection.\nfunc suffix(from: Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence from the specified position to the end of the collection.\nfunc sorted<Comparator>(using: Comparator) -> [MLShapedArraySlice<Scalar>]\nGenerates a copy of the shaped array by sorting its slices with a comparator.\nfunc sorted<S, Comparator>(using: S) -> [MLShapedArraySlice<Scalar>]\nGenerates a copy of the shaped array by sorting its slices with a sequence of comparators.\nfunc sorted(by: (MLShapedArraySlice<Scalar>, MLShapedArraySlice<Scalar>) -> Bool) -> [MLShapedArraySlice<Scalar>]\nReturns the elements of the sequence, sorted using the given predicate as the comparison between elements.\nfunc shuffled() -> [MLShapedArraySlice<Scalar>]\nReturns the elements of the sequence, shuffled.\nfunc shuffled<T>(using: inout T) -> [MLShapedArraySlice<Scalar>]\nReturns the elements of the sequence, shuffled using the given generator as a source for randomness.\nfunc trimmingPrefix<Prefix>(Prefix) -> MLShapedArraySlice<Scalar>\nReturns a new collection of the same type by removing initial elements that satisfy the given predicate from the start.\nfunc trimmingPrefix(while: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>"
  },
  {
    "title": "prefix(upTo:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarray/3763273-prefix",
    "html": "Parameters\nend\n\nThe “past the end” index of the resulting subsequence. end must be a valid index of the collection.\n\nReturn Value\n\nA subsequence up to, but not including, the end position.\n\nDiscussion\n\nThe resulting subsequence does not include the element at the position end. The following example searches for the index of the number 40 in an array of integers, and then prints the prefix of the array up to, but not including, that index:\n\nlet numbers = [10, 20, 30, 40, 50, 60]\nif let i = numbers.firstIndex(of: 40) {\n    print(numbers.prefix(upTo: i))\n}\n// Prints \"[10, 20, 30]\"\n\n\nPassing the collection’s starting index as the end parameter results in an empty subsequence.\n\nprint(numbers.prefix(upTo: numbers.startIndex))\n// Prints \"[]\"\n\n\nUsing the prefix(upTo:) method is equivalent to using a partial half-open range as the collection’s subscript. The subscript notation is preferred over prefix(upTo:).\n\nif let i = numbers.firstIndex(of: 40) {\n    print(numbers[..<i])\n}\n// Prints \"[10, 20, 30]\"\n\n\nComplexity: O(1)\n\nSee Also\nGenerating a Shaped Array Slice\nfunc first(where: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>?\nReturns the first element of the sequence that satisfies the given predicate.\nfunc last(where: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>?\nReturns the last element of the sequence that satisfies the given predicate.\nfunc dropFirst(Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence containing all but the given number of initial elements.\nfunc dropLast(Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence containing all but the specified number of final elements.\nfunc drop(while: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>\nReturns a subsequence by skipping elements while predicate returns true and returning the remaining elements.\nfunc min(by: (MLShapedArraySlice<Scalar>, MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>?\nReturns the minimum element in the sequence, using the given predicate as the comparison between elements.\nfunc max(by: (MLShapedArraySlice<Scalar>, MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>?\nReturns the maximum element in the sequence, using the given predicate as the comparison between elements.\nfunc prefix(Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence, up to the specified maximum length, containing the initial elements of the collection.\nfunc prefix(through: Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence from the start of the collection through the specified position.\nfunc prefix(while: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>\nReturns a subsequence containing the initial elements until predicate returns false and skipping the remaining elements.\nfunc suffix(Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence, up to the given maximum length, containing the final elements of the collection.\nfunc suffix(from: Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence from the specified position to the end of the collection.\nfunc sorted<Comparator>(using: Comparator) -> [MLShapedArraySlice<Scalar>]\nGenerates a copy of the shaped array by sorting its slices with a comparator.\nfunc sorted<S, Comparator>(using: S) -> [MLShapedArraySlice<Scalar>]\nGenerates a copy of the shaped array by sorting its slices with a sequence of comparators.\nfunc sorted(by: (MLShapedArraySlice<Scalar>, MLShapedArraySlice<Scalar>) -> Bool) -> [MLShapedArraySlice<Scalar>]\nReturns the elements of the sequence, sorted using the given predicate as the comparison between elements.\nfunc shuffled() -> [MLShapedArraySlice<Scalar>]\nReturns the elements of the sequence, shuffled.\nfunc shuffled<T>(using: inout T) -> [MLShapedArraySlice<Scalar>]\nReturns the elements of the sequence, shuffled using the given generator as a source for randomness.\nfunc trimmingPrefix<Prefix>(Prefix) -> MLShapedArraySlice<Scalar>\nReturns a new collection of the same type by removing initial elements that satisfy the given predicate from the start.\nfunc trimmingPrefix(while: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>"
  },
  {
    "title": "reversed() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarray/3763289-reversed",
    "html": "Discussion\n\nYou can reverse a collection without allocating new space for its elements by calling this reversed() method. A ReversedCollection instance wraps an underlying collection and provides access to its elements in reverse order. This example prints the characters of a string in reverse order:\n\nlet word = \"Backwards\"\nfor char in word.reversed() {\n    print(char, terminator: \"\")\n}\n// Prints \"sdrawkcaB\"\n\n\nIf you need a reversed collection of the same type, you may be able to use the collection’s sequence-based or collection-based initializer. For example, to get the reversed version of a string, reverse its characters and initialize a new String instance from the result.\n\nlet reversedWord = String(word.reversed())\nprint(reversedWord)\n// Prints \"sdrawkcaB\"\n\n\nComplexity: O(1)\n\nSee Also\nGenerating a Shaped Array\nfunc joined() -> FlattenSequence<MLShapedArray<Scalar>>\nReturns the elements of this sequence of sequences, concatenated.\nfunc joined<Separator>(separator: Separator) -> JoinedSequence<MLShapedArray<Scalar>>\nReturns the concatenated elements of this sequence of sequences, inserting the given separator between each element.\nfunc split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (MLShapedArraySlice<Scalar>) -> Bool) -> [MLShapedArraySlice<Scalar>]\nReturns the longest possible subsequences of the collection, in order, that don’t contain elements satisfying the given predicate.\nfunc split<C>(separator: C, maxSplits: Int, omittingEmptySubsequences: Bool) -> [MLShapedArraySlice<Scalar>]\nReturns the longest possible subsequences of the collection, in order, around elements equal to the given separator.\nfunc split(separator: MLShapedArraySlice<Scalar>, maxSplits: Int, omittingEmptySubsequences: Bool) -> [ArraySlice<MLShapedArraySlice<Scalar>>]\nReturns the longest possible subsequences of the sequence, in order, around elements equal to the given element.\nfunc split(separator: MLShapedArraySlice<Scalar>, maxSplits: Int, omittingEmptySubsequences: Bool) -> [MLShapedArraySlice<Scalar>]\nReturns the longest possible subsequences of the collection, in order, around elements equal to the given element."
  },
  {
    "title": "sort(by:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarray/3763304-sort",
    "html": "Parameters\nareInIncreasingOrder\n\nA predicate that returns true if its first argument should be ordered before its second argument; otherwise, false. If areInIncreasingOrder throws an error during the sort, the elements may be in a different order, but none will be lost.\n\nDiscussion\n\nWhen you want to sort a collection of elements that don’t conform to the Comparable protocol, pass a closure to this method that returns true when the first element should be ordered before the second.\n\nIn the following example, the closure provides an ordering for an array of a custom enumeration that describes an HTTP response. The predicate orders errors before successes and sorts the error responses by their error code.\n\nenum HTTPResponse {\n    case ok\n    case error(Int)\n}\n\n\nvar responses: [HTTPResponse] = [.error(500), .ok, .ok, .error(404), .error(403)]\nresponses.sort {\n    switch ($0, $1) {\n    // Order errors by code\n    case let (.error(aCode), .error(bCode)):\n        return aCode < bCode\n\n\n    // All successes are equivalent, so none is before any other\n    case (.ok, .ok): return false\n\n\n    // Order errors before successes\n    case (.error, .ok): return true\n    case (.ok, .error): return false\n    }\n}\nprint(responses)\n// Prints \"[.error(403), .error(404), .error(500), .ok, .ok]\"\n\n\nAlternatively, use this method to sort a collection of elements that do conform to Comparable when you want the sort to be descending instead of ascending. Pass the greater-than operator (>) operator as the predicate.\n\nvar students = [\"Kofi\", \"Abena\", \"Peter\", \"Kweku\", \"Akosua\"]\nstudents.sort(by: >)\nprint(students)\n// Prints \"[\"Peter\", \"Kweku\", \"Kofi\", \"Akosua\", \"Abena\"]\"\n\n\nareInIncreasingOrder must be a strict weak ordering over the elements. That is, for any elements a, b, and c, the following conditions must hold:\n\nareInIncreasingOrder(a, a) is always false. (Irreflexivity)\n\nIf areInIncreasingOrder(a, b) and areInIncreasingOrder(b, c) are both true, then areInIncreasingOrder(a, c) is also true. (Transitive comparability)\n\nTwo elements are incomparable if neither is ordered before the other according to the predicate. If a and b are incomparable, and b and c are incomparable, then a and c are also incomparable. (Transitive incomparability)\n\nThe sorting algorithm is guaranteed to be stable. A stable sort preserves the relative order of elements for which areInIncreasingOrder does not establish an order.\n\nComplexity: O(n log n), where n is the length of the collection.\n\nSee Also\nModifying a Shaped Array\nfunc swapAt(Int, Int)\nExchanges the values at the specified indices of the collection.\nfunc partition(by: (MLShapedArraySlice<Scalar>) -> Bool) -> Int\nReorders the elements of the collection such that all the elements that match the given predicate are after all the elements that don’t match.\nfunc sort<Comparator>(using: Comparator)\nReorders a shaped array by sorting its slices with a comparator.\nfunc sort<S, Comparator>(using: S)\nReorders a shaped array by sorting its slices with a sequence of comparators.\nfunc reverse()\nReverses the elements of the collection in place.\nfunc shuffle()\nShuffles the collection in place.\nfunc shuffle<T>(using: inout T)\nShuffles the collection in place, using the given generator as a source for randomness.\nfunc withContiguousMutableStorageIfAvailable<R>((inout UnsafeMutableBufferPointer<MLShapedArraySlice<Scalar>>) -> R) -> R?\nExecutes a closure on the collection’s contiguous storage."
  },
  {
    "title": "swapAt(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarrayslice/3763561-swapat",
    "html": "Parameters\ni\n\nThe index of the first value to swap.\n\nj\n\nThe index of the second value to swap.\n\nDiscussion\n\nBoth parameters must be valid indices of the collection that are not equal to endIndex. Calling swapAt(_:_:) with the same index as both i and j has no effect.\n\nComplexity: O(1)\n\nSee Also\nModifying a Shaped Array Slice\nsubscript(Range<Int>) -> MLShapedArraySlice<Scalar>\nAccesses a slice with a range in the shaped array’s first dimension.\nfunc partition(by: (MLShapedArraySlice<Scalar>) -> Bool) -> Int\nReorders the elements of the collection such that all the elements that match the given predicate are after all the elements that don’t match.\nfunc sort<Comparator>(using: Comparator)\nReorders a shaped array slice by sorting its slices with a comparator.\nfunc sort<S, Comparator>(using: S)\nReorders a shaped array slice by sorting its slices with a sequence of comparators.\nfunc sort(by: (MLShapedArraySlice<Scalar>, MLShapedArraySlice<Scalar>) -> Bool)\nSorts the collection in place, using the given predicate as the comparison between elements.\nfunc popFirst() -> MLShapedArraySlice<Scalar>?\nRemoves and returns the first element of the collection.\nfunc popLast() -> MLShapedArraySlice<Scalar>?\nRemoves and returns the last element of the collection.\nfunc removeFirst() -> MLShapedArraySlice<Scalar>\nRemoves and returns the first element of the collection.\nfunc removeLast() -> MLShapedArraySlice<Scalar>\nRemoves and returns the last element of the collection.\nfunc removeFirst(Int)\nRemoves the specified number of elements from the beginning of the collection.\nfunc removeLast(Int)\nRemoves the given number of elements from the end of the collection.\nfunc reverse()\nReverses the elements of the collection in place.\nfunc shuffle()\nShuffles the collection in place.\nfunc shuffle<T>(using: inout T)\nShuffles the collection in place, using the given generator as a source for randomness.\nfunc withContiguousMutableStorageIfAvailable<R>((inout UnsafeMutableBufferPointer<MLShapedArraySlice<Scalar>>) -> R) -> R?\nExecutes a closure on the collection’s contiguous storage."
  },
  {
    "title": "sort(using:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarray/3802061-sort",
    "html": "Parameters\ncomparator\n\nA shaped-array slice comparator.\n\nSee Also\nModifying a Shaped Array\nfunc swapAt(Int, Int)\nExchanges the values at the specified indices of the collection.\nfunc partition(by: (MLShapedArraySlice<Scalar>) -> Bool) -> Int\nReorders the elements of the collection such that all the elements that match the given predicate are after all the elements that don’t match.\nfunc sort<S, Comparator>(using: S)\nReorders a shaped array by sorting its slices with a sequence of comparators.\nfunc sort(by: (MLShapedArraySlice<Scalar>, MLShapedArraySlice<Scalar>) -> Bool)\nSorts the collection in place, using the given predicate as the comparison between elements.\nfunc reverse()\nReverses the elements of the collection in place.\nfunc shuffle()\nShuffles the collection in place.\nfunc shuffle<T>(using: inout T)\nShuffles the collection in place, using the given generator as a source for randomness.\nfunc withContiguousMutableStorageIfAvailable<R>((inout UnsafeMutableBufferPointer<MLShapedArraySlice<Scalar>>) -> R) -> R?\nExecutes a closure on the collection’s contiguous storage."
  },
  {
    "title": "ranges(of:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarrayslice/4135043-ranges",
    "html": "Parameters\nother\n\nThe sequence to search for.\n\nReturn Value\n\nA collection of ranges of all occurrences of other. Returns an empty collection if other is not found.\n\nSee Also\nFinding an Index in a Shaped Array Slice\nvar startIndex: Int\nThe index of the first element in the shaped array slice.\nvar endIndex: Int\nThe index of the last element in the shaped array slice.\nfunc index(after: Int) -> Int\nReturns the index immediately after an index you provide.\nfunc index(Int, offsetBy: Int) -> Int\nReturns the index at a relative distance to an index you provide.\nfunc index(Int, offsetBy: Int, limitedBy: Int) -> Int?\nReturns an index that is the specified distance from the given index, unless that distance is beyond a given limiting index.\nfunc index(of: MLShapedArraySlice<Scalar>) -> Int?\nReturns the first index where the specified value appears in the collection.\nDeprecated\nfunc formIndex(before: inout Int)\nReplaces the given index with its predecessor.\nfunc formIndex(after: inout Int)\nReplaces the given index with its successor.\nfunc formIndex(inout Int, offsetBy: Int)\nOffsets the given index by the specified distance.\nfunc formIndex(inout Int, offsetBy: Int, limitedBy: Int) -> Bool\nOffsets the given index by the specified distance, or so that it equals the given limiting index.\nfunc firstIndex(where: (MLShapedArraySlice<Scalar>) -> Bool) -> Int?\nReturns the first index in which an element of the collection satisfies the given predicate.\nfunc firstIndex(of: MLShapedArraySlice<Scalar>) -> Int?\nReturns the first index where the specified value appears in the collection.\nfunc firstRange<C>(of: C) -> Range<Int>?\nFinds and returns the range of the first occurrence of a given collection within this collection.\nfunc lastIndex(where: (MLShapedArraySlice<Scalar>) -> Bool) -> Int?\nReturns the index of the last element in the collection that matches the given predicate.\nfunc lastIndex(of: MLShapedArraySlice<Scalar>) -> Int?\nReturns the last index where the specified value appears in the collection.\nfunc starts<PossiblePrefix>(with: PossiblePrefix) -> Bool\nReturns a Boolean value indicating whether the initial elements of the sequence are the same as the elements in another sequence."
  },
  {
    "title": "firstIndex(where:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarrayslice/3763424-firstindex",
    "html": "Parameters\npredicate\n\nA closure that takes an element as its argument and returns a Boolean value that indicates whether the passed element represents a match.\n\nReturn Value\n\nThe index of the first element for which predicate returns true. If no elements in the collection satisfy the given predicate, returns nil.\n\nDiscussion\n\nYou can use the predicate to find an element of a type that doesn’t conform to the Equatable protocol or to find an element that matches particular criteria. Here’s an example that finds a student name that begins with the letter “A”:\n\nlet students = [\"Kofi\", \"Abena\", \"Peter\", \"Kweku\", \"Akosua\"]\nif let i = students.firstIndex(where: { $0.hasPrefix(\"A\") }) {\n    print(\"\\(students[i]) starts with 'A'!\")\n}\n// Prints \"Abena starts with 'A'!\"\n\n\nComplexity: O(n), where n is the length of the collection.\n\nSee Also\nFinding an Index in a Shaped Array Slice\nvar startIndex: Int\nThe index of the first element in the shaped array slice.\nvar endIndex: Int\nThe index of the last element in the shaped array slice.\nfunc index(after: Int) -> Int\nReturns the index immediately after an index you provide.\nfunc index(Int, offsetBy: Int) -> Int\nReturns the index at a relative distance to an index you provide.\nfunc index(Int, offsetBy: Int, limitedBy: Int) -> Int?\nReturns an index that is the specified distance from the given index, unless that distance is beyond a given limiting index.\nfunc index(of: MLShapedArraySlice<Scalar>) -> Int?\nReturns the first index where the specified value appears in the collection.\nDeprecated\nfunc formIndex(before: inout Int)\nReplaces the given index with its predecessor.\nfunc formIndex(after: inout Int)\nReplaces the given index with its successor.\nfunc formIndex(inout Int, offsetBy: Int)\nOffsets the given index by the specified distance.\nfunc formIndex(inout Int, offsetBy: Int, limitedBy: Int) -> Bool\nOffsets the given index by the specified distance, or so that it equals the given limiting index.\nfunc firstIndex(of: MLShapedArraySlice<Scalar>) -> Int?\nReturns the first index where the specified value appears in the collection.\nfunc firstRange<C>(of: C) -> Range<Int>?\nFinds and returns the range of the first occurrence of a given collection within this collection.\nfunc lastIndex(where: (MLShapedArraySlice<Scalar>) -> Bool) -> Int?\nReturns the index of the last element in the collection that matches the given predicate.\nfunc lastIndex(of: MLShapedArraySlice<Scalar>) -> Int?\nReturns the last index where the specified value appears in the collection.\nfunc ranges<C>(of: C) -> [Range<Int>]\nFinds and returns the ranges of the all occurrences of a given sequence within the collection.\nfunc starts<PossiblePrefix>(with: PossiblePrefix) -> Bool\nReturns a Boolean value indicating whether the initial elements of the sequence are the same as the elements in another sequence."
  },
  {
    "title": "lastIndex(of:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarrayslice/4135041-lastindex",
    "html": "Parameters\nelement\n\nAn element to search for in the collection.\n\nReturn Value\n\nThe last index where element is found. If element is not found in the collection, this method returns nil.\n\nDiscussion\n\nAfter using lastIndex(of:) to find the position of the last instance of a particular element in a collection, you can use it to access the element by subscripting. This example shows how you can modify one of the names in an array of students.\n\nvar students = [\"Ben\", \"Ivy\", \"Jordell\", \"Ben\", \"Maxime\"]\nif let i = students.lastIndex(of: \"Ben\") {\n    students[i] = \"Benjamin\"\n}\nprint(students)\n// Prints \"[\"Ben\", \"Ivy\", \"Jordell\", \"Benjamin\", \"Max\"]\"\n\n\nComplexity: O(n), where n is the length of the collection.\n\nSee Also\nFinding an Index in a Shaped Array Slice\nvar startIndex: Int\nThe index of the first element in the shaped array slice.\nvar endIndex: Int\nThe index of the last element in the shaped array slice.\nfunc index(after: Int) -> Int\nReturns the index immediately after an index you provide.\nfunc index(Int, offsetBy: Int) -> Int\nReturns the index at a relative distance to an index you provide.\nfunc index(Int, offsetBy: Int, limitedBy: Int) -> Int?\nReturns an index that is the specified distance from the given index, unless that distance is beyond a given limiting index.\nfunc index(of: MLShapedArraySlice<Scalar>) -> Int?\nReturns the first index where the specified value appears in the collection.\nDeprecated\nfunc formIndex(before: inout Int)\nReplaces the given index with its predecessor.\nfunc formIndex(after: inout Int)\nReplaces the given index with its successor.\nfunc formIndex(inout Int, offsetBy: Int)\nOffsets the given index by the specified distance.\nfunc formIndex(inout Int, offsetBy: Int, limitedBy: Int) -> Bool\nOffsets the given index by the specified distance, or so that it equals the given limiting index.\nfunc firstIndex(where: (MLShapedArraySlice<Scalar>) -> Bool) -> Int?\nReturns the first index in which an element of the collection satisfies the given predicate.\nfunc firstIndex(of: MLShapedArraySlice<Scalar>) -> Int?\nReturns the first index where the specified value appears in the collection.\nfunc firstRange<C>(of: C) -> Range<Int>?\nFinds and returns the range of the first occurrence of a given collection within this collection.\nfunc lastIndex(where: (MLShapedArraySlice<Scalar>) -> Bool) -> Int?\nReturns the index of the last element in the collection that matches the given predicate.\nfunc ranges<C>(of: C) -> [Range<Int>]\nFinds and returns the ranges of the all occurrences of a given sequence within the collection.\nfunc starts<PossiblePrefix>(with: PossiblePrefix) -> Bool\nReturns a Boolean value indicating whether the initial elements of the sequence are the same as the elements in another sequence."
  },
  {
    "title": "lastIndex(where:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarrayslice/3763466-lastindex",
    "html": "Parameters\npredicate\n\nA closure that takes an element as its argument and returns a Boolean value that indicates whether the passed element represents a match.\n\nReturn Value\n\nThe index of the last element in the collection that matches predicate, or nil if no elements match.\n\nDiscussion\n\nYou can use the predicate to find an element of a type that doesn’t conform to the Equatable protocol or to find an element that matches particular criteria. This example finds the index of the last name that begins with the letter A:\n\nlet students = [\"Kofi\", \"Abena\", \"Peter\", \"Kweku\", \"Akosua\"]\nif let i = students.lastIndex(where: { $0.hasPrefix(\"A\") }) {\n    print(\"\\(students[i]) starts with 'A'!\")\n}\n// Prints \"Akosua starts with 'A'!\"\n\n\nComplexity: O(n), where n is the length of the collection.\n\nSee Also\nFinding an Index in a Shaped Array Slice\nvar startIndex: Int\nThe index of the first element in the shaped array slice.\nvar endIndex: Int\nThe index of the last element in the shaped array slice.\nfunc index(after: Int) -> Int\nReturns the index immediately after an index you provide.\nfunc index(Int, offsetBy: Int) -> Int\nReturns the index at a relative distance to an index you provide.\nfunc index(Int, offsetBy: Int, limitedBy: Int) -> Int?\nReturns an index that is the specified distance from the given index, unless that distance is beyond a given limiting index.\nfunc index(of: MLShapedArraySlice<Scalar>) -> Int?\nReturns the first index where the specified value appears in the collection.\nDeprecated\nfunc formIndex(before: inout Int)\nReplaces the given index with its predecessor.\nfunc formIndex(after: inout Int)\nReplaces the given index with its successor.\nfunc formIndex(inout Int, offsetBy: Int)\nOffsets the given index by the specified distance.\nfunc formIndex(inout Int, offsetBy: Int, limitedBy: Int) -> Bool\nOffsets the given index by the specified distance, or so that it equals the given limiting index.\nfunc firstIndex(where: (MLShapedArraySlice<Scalar>) -> Bool) -> Int?\nReturns the first index in which an element of the collection satisfies the given predicate.\nfunc firstIndex(of: MLShapedArraySlice<Scalar>) -> Int?\nReturns the first index where the specified value appears in the collection.\nfunc firstRange<C>(of: C) -> Range<Int>?\nFinds and returns the range of the first occurrence of a given collection within this collection.\nfunc lastIndex(of: MLShapedArraySlice<Scalar>) -> Int?\nReturns the last index where the specified value appears in the collection.\nfunc ranges<C>(of: C) -> [Range<Int>]\nFinds and returns the ranges of the all occurrences of a given sequence within the collection.\nfunc starts<PossiblePrefix>(with: PossiblePrefix) -> Bool\nReturns a Boolean value indicating whether the initial elements of the sequence are the same as the elements in another sequence."
  },
  {
    "title": "firstRange(of:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarrayslice/4135039-firstrange",
    "html": "Parameters\nother\n\nThe collection to search for.\n\nReturn Value\n\nA range in the collection of the first occurrence of sequence. Returns nil if sequence is not found.\n\nSee Also\nFinding an Index in a Shaped Array Slice\nvar startIndex: Int\nThe index of the first element in the shaped array slice.\nvar endIndex: Int\nThe index of the last element in the shaped array slice.\nfunc index(after: Int) -> Int\nReturns the index immediately after an index you provide.\nfunc index(Int, offsetBy: Int) -> Int\nReturns the index at a relative distance to an index you provide.\nfunc index(Int, offsetBy: Int, limitedBy: Int) -> Int?\nReturns an index that is the specified distance from the given index, unless that distance is beyond a given limiting index.\nfunc index(of: MLShapedArraySlice<Scalar>) -> Int?\nReturns the first index where the specified value appears in the collection.\nDeprecated\nfunc formIndex(before: inout Int)\nReplaces the given index with its predecessor.\nfunc formIndex(after: inout Int)\nReplaces the given index with its successor.\nfunc formIndex(inout Int, offsetBy: Int)\nOffsets the given index by the specified distance.\nfunc formIndex(inout Int, offsetBy: Int, limitedBy: Int) -> Bool\nOffsets the given index by the specified distance, or so that it equals the given limiting index.\nfunc firstIndex(where: (MLShapedArraySlice<Scalar>) -> Bool) -> Int?\nReturns the first index in which an element of the collection satisfies the given predicate.\nfunc firstIndex(of: MLShapedArraySlice<Scalar>) -> Int?\nReturns the first index where the specified value appears in the collection.\nfunc lastIndex(where: (MLShapedArraySlice<Scalar>) -> Bool) -> Int?\nReturns the index of the last element in the collection that matches the given predicate.\nfunc lastIndex(of: MLShapedArraySlice<Scalar>) -> Int?\nReturns the last index where the specified value appears in the collection.\nfunc ranges<C>(of: C) -> [Range<Int>]\nFinds and returns the ranges of the all occurrences of a given sequence within the collection.\nfunc starts<PossiblePrefix>(with: PossiblePrefix) -> Bool\nReturns a Boolean value indicating whether the initial elements of the sequence are the same as the elements in another sequence."
  },
  {
    "title": "firstIndex(of:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarrayslice/4135037-firstindex",
    "html": "Parameters\nelement\n\nAn element to search for in the collection.\n\nReturn Value\n\nThe first index where element is found. If element is not found in the collection, returns nil.\n\nDiscussion\n\nAfter using firstIndex(of:) to find the position of a particular element in a collection, you can use it to access the element by subscripting. This example shows how you can modify one of the names in an array of students.\n\nvar students = [\"Ben\", \"Ivy\", \"Jordell\", \"Maxime\"]\nif let i = students.firstIndex(of: \"Maxime\") {\n    students[i] = \"Max\"\n}\nprint(students)\n// Prints \"[\"Ben\", \"Ivy\", \"Jordell\", \"Max\"]\"\n\n\nComplexity: O(n), where n is the length of the collection.\n\nSee Also\nFinding an Index in a Shaped Array Slice\nvar startIndex: Int\nThe index of the first element in the shaped array slice.\nvar endIndex: Int\nThe index of the last element in the shaped array slice.\nfunc index(after: Int) -> Int\nReturns the index immediately after an index you provide.\nfunc index(Int, offsetBy: Int) -> Int\nReturns the index at a relative distance to an index you provide.\nfunc index(Int, offsetBy: Int, limitedBy: Int) -> Int?\nReturns an index that is the specified distance from the given index, unless that distance is beyond a given limiting index.\nfunc index(of: MLShapedArraySlice<Scalar>) -> Int?\nReturns the first index where the specified value appears in the collection.\nDeprecated\nfunc formIndex(before: inout Int)\nReplaces the given index with its predecessor.\nfunc formIndex(after: inout Int)\nReplaces the given index with its successor.\nfunc formIndex(inout Int, offsetBy: Int)\nOffsets the given index by the specified distance.\nfunc formIndex(inout Int, offsetBy: Int, limitedBy: Int) -> Bool\nOffsets the given index by the specified distance, or so that it equals the given limiting index.\nfunc firstIndex(where: (MLShapedArraySlice<Scalar>) -> Bool) -> Int?\nReturns the first index in which an element of the collection satisfies the given predicate.\nfunc firstRange<C>(of: C) -> Range<Int>?\nFinds and returns the range of the first occurrence of a given collection within this collection.\nfunc lastIndex(where: (MLShapedArraySlice<Scalar>) -> Bool) -> Int?\nReturns the index of the last element in the collection that matches the given predicate.\nfunc lastIndex(of: MLShapedArraySlice<Scalar>) -> Int?\nReturns the last index where the specified value appears in the collection.\nfunc ranges<C>(of: C) -> [Range<Int>]\nFinds and returns the ranges of the all occurrences of a given sequence within the collection.\nfunc starts<PossiblePrefix>(with: PossiblePrefix) -> Bool\nReturns a Boolean value indicating whether the initial elements of the sequence are the same as the elements in another sequence."
  },
  {
    "title": "last | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarrayslice/3763462-last",
    "html": "Discussion\n\nIf the collection is empty, the value of this property is nil.\n\nlet numbers = [10, 20, 30, 40, 50]\nif let lastNumber = numbers.last {\n    print(lastNumber)\n}\n// Prints \"50\"\n\n\nComplexity: O(1)\n\nSee Also\nInspecting a Shaped Array’s Scalars\nvar first: MLShapedArraySlice<Scalar>?\nThe first element of the collection.\nvar publisher: Publishers.Sequence<MLShapedArraySlice<Scalar>, Never>\nA publisher that produces the element in the shaped array slice as separate values.\nvar lazy: LazySequence<MLShapedArraySlice<Scalar>>\nA sequence containing the same elements as this sequence, but on which some operations, such as map and filter, are implemented lazily."
  },
  {
    "title": "lazy | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarrayslice/3763468-lazy",
    "html": "See Also\nInspecting a Shaped Array’s Scalars\nvar first: MLShapedArraySlice<Scalar>?\nThe first element of the collection.\nvar last: MLShapedArraySlice<Scalar>?\nThe last element of the collection.\nvar publisher: Publishers.Sequence<MLShapedArraySlice<Scalar>, Never>\nA publisher that produces the element in the shaped array slice as separate values."
  },
  {
    "title": "allSatisfy(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarrayslice/3763396-allsatisfy",
    "html": "Parameters\npredicate\n\nA closure that takes an element of the sequence as its argument and returns a Boolean value that indicates whether the passed element satisfies a condition.\n\nReturn Value\n\ntrue if the sequence contains only elements that satisfy predicate; otherwise, false.\n\nDiscussion\n\nThe following code uses this method to test whether all the names in an array have at least five characters:\n\nlet names = [\"Sofia\", \"Camilla\", \"Martina\", \"Mateo\", \"Nicolás\"]\nlet allHaveAtLeastFive = names.allSatisfy({ $0.count >= 5 })\n// allHaveAtLeastFive == true\n\n\nIf the sequence is empty, this method returns true.\n\nComplexity: O(n), where n is the length of the sequence.\n\nSee Also\nInspecting a Slice of a Shaped Array Slice\nfunc contains(where: (MLShapedArraySlice<Scalar>) -> Bool) -> Bool\nReturns a Boolean value indicating whether the sequence contains an element that satisfies the given predicate.\nfunc contains(MLShapedArraySlice<Scalar>) -> Bool\nReturns a Boolean value indicating whether the sequence contains the given element.\nfunc contains<C>(C) -> Bool\nReturns a Boolean value indicating whether the collection contains the given sequence.\nsubscript<R>(R) -> MLShapedArraySlice<Scalar>\nAccesses the contiguous subrange of the collection’s elements specified by a range expression.\nfunc makeIterator() -> IndexingIterator<MLShapedArraySlice<Scalar>>\nReturns an iterator over the elements of the collection.\nfunc forEach((MLShapedArraySlice<Scalar>) -> Void)\nCalls the given closure on each element in the sequence in the same order as a for-in loop.\nfunc enumerated() -> EnumeratedSequence<MLShapedArraySlice<Scalar>>\nReturns a sequence of pairs (n, x), where n represents a consecutive integer starting at zero and x represents an element of the sequence.\nfunc randomElement() -> MLShapedArraySlice<Scalar>?\nReturns a random element of the collection.\nfunc randomElement<T>(using: inout T) -> MLShapedArraySlice<Scalar>?\nReturns a random element of the collection, using the given generator as a source for randomness.\nfunc withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<MLShapedArraySlice<Scalar>>) -> R) -> R?\nExecutes a closure on the sequence’s contiguous storage."
  },
  {
    "title": "contains(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarrayslice/4135033-contains",
    "html": "Parameters\nother\n\nA sequence to search for within this collection.\n\nReturn Value\n\ntrue if the collection contains the specified sequence, otherwise false.\n\nSee Also\nInspecting a Slice of a Shaped Array Slice\nfunc allSatisfy((MLShapedArraySlice<Scalar>) -> Bool) -> Bool\nReturns a Boolean value indicating whether every element of a sequence satisfies a given predicate.\nfunc contains(where: (MLShapedArraySlice<Scalar>) -> Bool) -> Bool\nReturns a Boolean value indicating whether the sequence contains an element that satisfies the given predicate.\nfunc contains(MLShapedArraySlice<Scalar>) -> Bool\nReturns a Boolean value indicating whether the sequence contains the given element.\nsubscript<R>(R) -> MLShapedArraySlice<Scalar>\nAccesses the contiguous subrange of the collection’s elements specified by a range expression.\nfunc makeIterator() -> IndexingIterator<MLShapedArraySlice<Scalar>>\nReturns an iterator over the elements of the collection.\nfunc forEach((MLShapedArraySlice<Scalar>) -> Void)\nCalls the given closure on each element in the sequence in the same order as a for-in loop.\nfunc enumerated() -> EnumeratedSequence<MLShapedArraySlice<Scalar>>\nReturns a sequence of pairs (n, x), where n represents a consecutive integer starting at zero and x represents an element of the sequence.\nfunc randomElement() -> MLShapedArraySlice<Scalar>?\nReturns a random element of the collection.\nfunc randomElement<T>(using: inout T) -> MLShapedArraySlice<Scalar>?\nReturns a random element of the collection, using the given generator as a source for randomness.\nfunc withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<MLShapedArraySlice<Scalar>>) -> R) -> R?\nExecutes a closure on the sequence’s contiguous storage."
  },
  {
    "title": "contains(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarrayslice/4135031-contains",
    "html": "Parameters\nelement\n\nThe element to find in the sequence.\n\nReturn Value\n\ntrue if the element was found in the sequence; otherwise, false.\n\nDiscussion\n\nThis example checks to see whether a favorite actor is in an array storing a movie’s cast.\n\nlet cast = [\"Vivien\", \"Marlon\", \"Kim\", \"Karl\"]\nprint(cast.contains(\"Marlon\"))\n// Prints \"true\"\nprint(cast.contains(\"James\"))\n// Prints \"false\"\n\n\nComplexity: O(n), where n is the length of the sequence.\n\nSee Also\nInspecting a Slice of a Shaped Array Slice\nfunc allSatisfy((MLShapedArraySlice<Scalar>) -> Bool) -> Bool\nReturns a Boolean value indicating whether every element of a sequence satisfies a given predicate.\nfunc contains(where: (MLShapedArraySlice<Scalar>) -> Bool) -> Bool\nReturns a Boolean value indicating whether the sequence contains an element that satisfies the given predicate.\nfunc contains<C>(C) -> Bool\nReturns a Boolean value indicating whether the collection contains the given sequence.\nsubscript<R>(R) -> MLShapedArraySlice<Scalar>\nAccesses the contiguous subrange of the collection’s elements specified by a range expression.\nfunc makeIterator() -> IndexingIterator<MLShapedArraySlice<Scalar>>\nReturns an iterator over the elements of the collection.\nfunc forEach((MLShapedArraySlice<Scalar>) -> Void)\nCalls the given closure on each element in the sequence in the same order as a for-in loop.\nfunc enumerated() -> EnumeratedSequence<MLShapedArraySlice<Scalar>>\nReturns a sequence of pairs (n, x), where n represents a consecutive integer starting at zero and x represents an element of the sequence.\nfunc randomElement() -> MLShapedArraySlice<Scalar>?\nReturns a random element of the collection.\nfunc randomElement<T>(using: inout T) -> MLShapedArraySlice<Scalar>?\nReturns a random element of the collection, using the given generator as a source for randomness.\nfunc withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<MLShapedArraySlice<Scalar>>) -> R) -> R?\nExecutes a closure on the sequence’s contiguous storage."
  },
  {
    "title": "subscript(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarrayslice/3763549-subscript",
    "html": "Parameters\nbounds\n\nA range of the collection’s indices. The bounds of the range must be valid indices of the collection.\n\nDiscussion\n\nThe range expression is converted to a concrete subrange relative to this collection. For example, using a PartialRangeFrom range expression with an array accesses the subrange from the start of the range expression until the end of the array.\n\nlet streets = [\"Adams\", \"Bryant\", \"Channing\", \"Douglas\", \"Evarts\"]\nlet streetsSlice = streets[2...]\nprint(streetsSlice)\n// [\"Channing\", \"Douglas\", \"Evarts\"]\n\n\nThe accessed slice uses the same indices for the same elements as the original collection uses. This example searches streetsSlice for one of the strings in the slice, and then uses that index in the original array.\n\nlet index = streetsSlice.firstIndex(of: \"Evarts\")    // 4\nprint(streets[index!])\n// \"Evarts\"\n\n\nAlways use the slice’s startIndex property instead of assuming that its indices start at a particular value. Attempting to access an element by using an index outside the bounds of the slice’s indices may result in a runtime error, even if that index is valid for the original collection.\n\nprint(streetsSlice.startIndex)\n// 2\nprint(streetsSlice[2])\n// \"Channing\"\n\n\nprint(streetsSlice[0])\n// error: Index out of bounds\n\n\nComplexity: O(1)\n\nSee Also\nInspecting a Slice of a Shaped Array Slice\nfunc allSatisfy((MLShapedArraySlice<Scalar>) -> Bool) -> Bool\nReturns a Boolean value indicating whether every element of a sequence satisfies a given predicate.\nfunc contains(where: (MLShapedArraySlice<Scalar>) -> Bool) -> Bool\nReturns a Boolean value indicating whether the sequence contains an element that satisfies the given predicate.\nfunc contains(MLShapedArraySlice<Scalar>) -> Bool\nReturns a Boolean value indicating whether the sequence contains the given element.\nfunc contains<C>(C) -> Bool\nReturns a Boolean value indicating whether the collection contains the given sequence.\nfunc makeIterator() -> IndexingIterator<MLShapedArraySlice<Scalar>>\nReturns an iterator over the elements of the collection.\nfunc forEach((MLShapedArraySlice<Scalar>) -> Void)\nCalls the given closure on each element in the sequence in the same order as a for-in loop.\nfunc enumerated() -> EnumeratedSequence<MLShapedArraySlice<Scalar>>\nReturns a sequence of pairs (n, x), where n represents a consecutive integer starting at zero and x represents an element of the sequence.\nfunc randomElement() -> MLShapedArraySlice<Scalar>?\nReturns a random element of the collection.\nfunc randomElement<T>(using: inout T) -> MLShapedArraySlice<Scalar>?\nReturns a random element of the collection, using the given generator as a source for randomness.\nfunc withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<MLShapedArraySlice<Scalar>>) -> R) -> R?\nExecutes a closure on the sequence’s contiguous storage."
  },
  {
    "title": "makeIterator() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarrayslice/3763470-makeiterator",
    "html": "See Also\nInspecting a Slice of a Shaped Array Slice\nfunc allSatisfy((MLShapedArraySlice<Scalar>) -> Bool) -> Bool\nReturns a Boolean value indicating whether every element of a sequence satisfies a given predicate.\nfunc contains(where: (MLShapedArraySlice<Scalar>) -> Bool) -> Bool\nReturns a Boolean value indicating whether the sequence contains an element that satisfies the given predicate.\nfunc contains(MLShapedArraySlice<Scalar>) -> Bool\nReturns a Boolean value indicating whether the sequence contains the given element.\nfunc contains<C>(C) -> Bool\nReturns a Boolean value indicating whether the collection contains the given sequence.\nsubscript<R>(R) -> MLShapedArraySlice<Scalar>\nAccesses the contiguous subrange of the collection’s elements specified by a range expression.\nfunc forEach((MLShapedArraySlice<Scalar>) -> Void)\nCalls the given closure on each element in the sequence in the same order as a for-in loop.\nfunc enumerated() -> EnumeratedSequence<MLShapedArraySlice<Scalar>>\nReturns a sequence of pairs (n, x), where n represents a consecutive integer starting at zero and x represents an element of the sequence.\nfunc randomElement() -> MLShapedArraySlice<Scalar>?\nReturns a random element of the collection.\nfunc randomElement<T>(using: inout T) -> MLShapedArraySlice<Scalar>?\nReturns a random element of the collection, using the given generator as a source for randomness.\nfunc withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<MLShapedArraySlice<Scalar>>) -> R) -> R?\nExecutes a closure on the sequence’s contiguous storage."
  },
  {
    "title": "randomElement() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarrayslice/3763493-randomelement",
    "html": "Return Value\n\nA random element from the collection. If the collection is empty, the method returns nil.\n\nDiscussion\n\nCall randomElement() to select a random element from an array or another collection. This example picks a name at random from an array:\n\nlet names = [\"Zoey\", \"Chloe\", \"Amani\", \"Amaia\"]\nlet randomName = names.randomElement()!\n// randomName == \"Amani\"\n\n\nThis method is equivalent to calling randomElement(using:), passing in the system’s default random generator.\n\nComplexity: O(1) if the collection conforms to RandomAccessCollection; otherwise, O(n), where n is the length of the collection.\n\nSee Also\nInspecting a Slice of a Shaped Array Slice\nfunc allSatisfy((MLShapedArraySlice<Scalar>) -> Bool) -> Bool\nReturns a Boolean value indicating whether every element of a sequence satisfies a given predicate.\nfunc contains(where: (MLShapedArraySlice<Scalar>) -> Bool) -> Bool\nReturns a Boolean value indicating whether the sequence contains an element that satisfies the given predicate.\nfunc contains(MLShapedArraySlice<Scalar>) -> Bool\nReturns a Boolean value indicating whether the sequence contains the given element.\nfunc contains<C>(C) -> Bool\nReturns a Boolean value indicating whether the collection contains the given sequence.\nsubscript<R>(R) -> MLShapedArraySlice<Scalar>\nAccesses the contiguous subrange of the collection’s elements specified by a range expression.\nfunc makeIterator() -> IndexingIterator<MLShapedArraySlice<Scalar>>\nReturns an iterator over the elements of the collection.\nfunc forEach((MLShapedArraySlice<Scalar>) -> Void)\nCalls the given closure on each element in the sequence in the same order as a for-in loop.\nfunc enumerated() -> EnumeratedSequence<MLShapedArraySlice<Scalar>>\nReturns a sequence of pairs (n, x), where n represents a consecutive integer starting at zero and x represents an element of the sequence.\nfunc randomElement<T>(using: inout T) -> MLShapedArraySlice<Scalar>?\nReturns a random element of the collection, using the given generator as a source for randomness.\nfunc withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<MLShapedArraySlice<Scalar>>) -> R) -> R?\nExecutes a closure on the sequence’s contiguous storage."
  },
  {
    "title": "compare(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarrayslice/3802065-compare",
    "html": "Parameters\nlhs\n\nA shaped array slice.\n\nrhs\n\nAnother shaped array slice.\n\nSee Also\nComparing Shaped Array Slices\nfunc difference<C>(from: C, by: (C.Element, MLShapedArraySlice<Scalar>) -> Bool) -> CollectionDifference<MLShapedArraySlice<Scalar>>\nReturns the difference needed to produce this collection’s ordered elements from the given collection, using the given predicate as an equivalence test.\nfunc difference<C>(from: C) -> CollectionDifference<MLShapedArraySlice<Scalar>>\nReturns the difference needed to produce this collection’s ordered elements from the given collection.\nfunc elementsEqual<OtherSequence>(OtherSequence, by: (MLShapedArraySlice<Scalar>, OtherSequence.Element) -> Bool) -> Bool\nReturns a Boolean value indicating whether this sequence and another sequence contain equivalent elements in the same order, using the given predicate as the equivalence test.\nfunc elementsEqual<OtherSequence>(OtherSequence) -> Bool\nReturns a Boolean value indicating whether this sequence and another sequence contain the same elements in the same order.\nfunc starts<PossiblePrefix>(with: PossiblePrefix, by: (MLShapedArraySlice<Scalar>, PossiblePrefix.Element) -> Bool) -> Bool\nReturns a Boolean value indicating whether the initial elements of the sequence are equivalent to the elements in another sequence, using the given predicate as the equivalence test.\nfunc lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (MLShapedArraySlice<Scalar>, MLShapedArraySlice<Scalar>) -> Bool) -> Bool\nReturns a Boolean value indicating whether the sequence precedes another sequence in a lexicographical (dictionary) ordering, using the given predicate to compare elements."
  },
  {
    "title": "withContiguousStorageIfAvailable(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarrayslice/3763564-withcontiguousstorageifavailable",
    "html": "Parameters\nbody\n\nA closure that receives an UnsafeBufferPointer to the sequence’s contiguous storage.\n\nReturn Value\n\nThe value returned from body, unless the sequence doesn’t support contiguous storage, in which case the method ignores body and returns nil.\n\nDiscussion\n\nThis method calls body(buffer), where buffer is a pointer to the collection’s contiguous storage. If the contiguous storage doesn’t exist, the collection creates it. If the collection doesn’t support an internal representation in a form of contiguous storage, the method doesn’t call body — it immediately returns nil.\n\nThe optimizer can often eliminate bounds- and uniqueness-checking within an algorithm. When that fails, however, invoking the same algorithm on the buffer argument may let you trade safety for speed.\n\nSuccessive calls to this method may provide a different pointer on each call. Don’t store buffer outside of this method.\n\nA Collection that provides its own implementation of this method must provide contiguous storage to its elements in the same order as they appear in the collection. This guarantees that it’s possible to generate contiguous mutable storage to any of its subsequences by slicing buffer with a range formed from the distances to the subsequence’s startIndex and endIndex, respectively.\n\nNote\n\nThis documentation comment was inherited from Sequence.\n\nSee Also\nInspecting a Slice of a Shaped Array Slice\nfunc allSatisfy((MLShapedArraySlice<Scalar>) -> Bool) -> Bool\nReturns a Boolean value indicating whether every element of a sequence satisfies a given predicate.\nfunc contains(where: (MLShapedArraySlice<Scalar>) -> Bool) -> Bool\nReturns a Boolean value indicating whether the sequence contains an element that satisfies the given predicate.\nfunc contains(MLShapedArraySlice<Scalar>) -> Bool\nReturns a Boolean value indicating whether the sequence contains the given element.\nfunc contains<C>(C) -> Bool\nReturns a Boolean value indicating whether the collection contains the given sequence.\nsubscript<R>(R) -> MLShapedArraySlice<Scalar>\nAccesses the contiguous subrange of the collection’s elements specified by a range expression.\nfunc makeIterator() -> IndexingIterator<MLShapedArraySlice<Scalar>>\nReturns an iterator over the elements of the collection.\nfunc forEach((MLShapedArraySlice<Scalar>) -> Void)\nCalls the given closure on each element in the sequence in the same order as a for-in loop.\nfunc enumerated() -> EnumeratedSequence<MLShapedArraySlice<Scalar>>\nReturns a sequence of pairs (n, x), where n represents a consecutive integer starting at zero and x represents an element of the sequence.\nfunc randomElement() -> MLShapedArraySlice<Scalar>?\nReturns a random element of the collection.\nfunc randomElement<T>(using: inout T) -> MLShapedArraySlice<Scalar>?\nReturns a random element of the collection, using the given generator as a source for randomness."
  },
  {
    "title": "difference(from:by:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarrayslice/3763404-difference",
    "html": "Parameters\nother\n\nThe base state.\n\nareEquivalent\n\nA closure that returns a Boolean value indicating whether two elements are equivalent.\n\nReturn Value\n\nThe difference needed to produce the receiver’s state from the parameter’s state.\n\nDiscussion\n\nThis function does not infer element moves. If you need to infer moves, call the inferringMoves() method on the resulting difference.\n\nComplexity: Worst case performance is O(n * m), where n is the count of this collection and m is other.count. You can expect faster execution when the collections share many common elements.\n\nSee Also\nComparing Shaped Array Slices\nfunc compare<Comparator>(Comparator.Compared, Comparator.Compared) -> ComparisonResult\nReturns a comparison result by comparing two shaped array slices.\nfunc difference<C>(from: C) -> CollectionDifference<MLShapedArraySlice<Scalar>>\nReturns the difference needed to produce this collection’s ordered elements from the given collection.\nfunc elementsEqual<OtherSequence>(OtherSequence, by: (MLShapedArraySlice<Scalar>, OtherSequence.Element) -> Bool) -> Bool\nReturns a Boolean value indicating whether this sequence and another sequence contain equivalent elements in the same order, using the given predicate as the equivalence test.\nfunc elementsEqual<OtherSequence>(OtherSequence) -> Bool\nReturns a Boolean value indicating whether this sequence and another sequence contain the same elements in the same order.\nfunc starts<PossiblePrefix>(with: PossiblePrefix, by: (MLShapedArraySlice<Scalar>, PossiblePrefix.Element) -> Bool) -> Bool\nReturns a Boolean value indicating whether the initial elements of the sequence are equivalent to the elements in another sequence, using the given predicate as the equivalence test.\nfunc lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (MLShapedArraySlice<Scalar>, MLShapedArraySlice<Scalar>) -> Bool) -> Bool\nReturns a Boolean value indicating whether the sequence precedes another sequence in a lexicographical (dictionary) ordering, using the given predicate to compare elements."
  },
  {
    "title": "formIndex(_:offsetBy:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarrayslice/3763431-formindex",
    "html": "Parameters\ni\n\nA valid index of the collection.\n\ndistance\n\nThe distance to offset i. distance must not be negative unless the collection conforms to the BidirectionalCollection protocol.\n\nDiscussion\n\nThe value passed as distance must not offset i beyond the bounds of the collection.\n\nComplexity: O(1) if the collection conforms to RandomAccessCollection; otherwise, O(k), where k is the absolute value of distance.\n\nSee Also\nFinding an Index in a Shaped Array Slice\nvar startIndex: Int\nThe index of the first element in the shaped array slice.\nvar endIndex: Int\nThe index of the last element in the shaped array slice.\nfunc index(after: Int) -> Int\nReturns the index immediately after an index you provide.\nfunc index(Int, offsetBy: Int) -> Int\nReturns the index at a relative distance to an index you provide.\nfunc index(Int, offsetBy: Int, limitedBy: Int) -> Int?\nReturns an index that is the specified distance from the given index, unless that distance is beyond a given limiting index.\nfunc index(of: MLShapedArraySlice<Scalar>) -> Int?\nReturns the first index where the specified value appears in the collection.\nDeprecated\nfunc formIndex(before: inout Int)\nReplaces the given index with its predecessor.\nfunc formIndex(after: inout Int)\nReplaces the given index with its successor.\nfunc formIndex(inout Int, offsetBy: Int, limitedBy: Int) -> Bool\nOffsets the given index by the specified distance, or so that it equals the given limiting index.\nfunc firstIndex(where: (MLShapedArraySlice<Scalar>) -> Bool) -> Int?\nReturns the first index in which an element of the collection satisfies the given predicate.\nfunc firstIndex(of: MLShapedArraySlice<Scalar>) -> Int?\nReturns the first index where the specified value appears in the collection.\nfunc firstRange<C>(of: C) -> Range<Int>?\nFinds and returns the range of the first occurrence of a given collection within this collection.\nfunc lastIndex(where: (MLShapedArraySlice<Scalar>) -> Bool) -> Int?\nReturns the index of the last element in the collection that matches the given predicate.\nfunc lastIndex(of: MLShapedArraySlice<Scalar>) -> Int?\nReturns the last index where the specified value appears in the collection.\nfunc ranges<C>(of: C) -> [Range<Int>]\nFinds and returns the ranges of the all occurrences of a given sequence within the collection.\nfunc starts<PossiblePrefix>(with: PossiblePrefix) -> Bool\nReturns a Boolean value indicating whether the initial elements of the sequence are the same as the elements in another sequence."
  },
  {
    "title": "index(of:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarrayslice/4135040-index",
    "html": "See Also\nFinding an Index in a Shaped Array Slice\nvar startIndex: Int\nThe index of the first element in the shaped array slice.\nvar endIndex: Int\nThe index of the last element in the shaped array slice.\nfunc index(after: Int) -> Int\nReturns the index immediately after an index you provide.\nfunc index(Int, offsetBy: Int) -> Int\nReturns the index at a relative distance to an index you provide.\nfunc index(Int, offsetBy: Int, limitedBy: Int) -> Int?\nReturns an index that is the specified distance from the given index, unless that distance is beyond a given limiting index.\nfunc formIndex(before: inout Int)\nReplaces the given index with its predecessor.\nfunc formIndex(after: inout Int)\nReplaces the given index with its successor.\nfunc formIndex(inout Int, offsetBy: Int)\nOffsets the given index by the specified distance.\nfunc formIndex(inout Int, offsetBy: Int, limitedBy: Int) -> Bool\nOffsets the given index by the specified distance, or so that it equals the given limiting index.\nfunc firstIndex(where: (MLShapedArraySlice<Scalar>) -> Bool) -> Int?\nReturns the first index in which an element of the collection satisfies the given predicate.\nfunc firstIndex(of: MLShapedArraySlice<Scalar>) -> Int?\nReturns the first index where the specified value appears in the collection.\nfunc firstRange<C>(of: C) -> Range<Int>?\nFinds and returns the range of the first occurrence of a given collection within this collection.\nfunc lastIndex(where: (MLShapedArraySlice<Scalar>) -> Bool) -> Int?\nReturns the index of the last element in the collection that matches the given predicate.\nfunc lastIndex(of: MLShapedArraySlice<Scalar>) -> Int?\nReturns the last index where the specified value appears in the collection.\nfunc ranges<C>(of: C) -> [Range<Int>]\nFinds and returns the ranges of the all occurrences of a given sequence within the collection.\nfunc starts<PossiblePrefix>(with: PossiblePrefix) -> Bool\nReturns a Boolean value indicating whether the initial elements of the sequence are the same as the elements in another sequence."
  },
  {
    "title": "difference(from:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarrayslice/4135034-difference",
    "html": "Parameters\nother\n\nThe base state.\n\nReturn Value\n\nThe difference needed to produce this collection’s ordered elements from the given collection.\n\nDiscussion\n\nThis function does not infer element moves. If you need to infer moves, call the inferringMoves() method on the resulting difference.\n\nComplexity: Worst case performance is O(n * m), where n is the count of this collection and m is other.count. You can expect faster execution when the collections share many common elements, or if Element conforms to Hashable.\n\nSee Also\nComparing Shaped Array Slices\nfunc compare<Comparator>(Comparator.Compared, Comparator.Compared) -> ComparisonResult\nReturns a comparison result by comparing two shaped array slices.\nfunc difference<C>(from: C, by: (C.Element, MLShapedArraySlice<Scalar>) -> Bool) -> CollectionDifference<MLShapedArraySlice<Scalar>>\nReturns the difference needed to produce this collection’s ordered elements from the given collection, using the given predicate as an equivalence test.\nfunc elementsEqual<OtherSequence>(OtherSequence, by: (MLShapedArraySlice<Scalar>, OtherSequence.Element) -> Bool) -> Bool\nReturns a Boolean value indicating whether this sequence and another sequence contain equivalent elements in the same order, using the given predicate as the equivalence test.\nfunc elementsEqual<OtherSequence>(OtherSequence) -> Bool\nReturns a Boolean value indicating whether this sequence and another sequence contain the same elements in the same order.\nfunc starts<PossiblePrefix>(with: PossiblePrefix, by: (MLShapedArraySlice<Scalar>, PossiblePrefix.Element) -> Bool) -> Bool\nReturns a Boolean value indicating whether the initial elements of the sequence are equivalent to the elements in another sequence, using the given predicate as the equivalence test.\nfunc lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (MLShapedArraySlice<Scalar>, MLShapedArraySlice<Scalar>) -> Bool) -> Bool\nReturns a Boolean value indicating whether the sequence precedes another sequence in a lexicographical (dictionary) ordering, using the given predicate to compare elements."
  },
  {
    "title": "index(after:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarrayslice/3763441-index",
    "html": "Parameters\nafter\n\nAn index in the shaped array slice.\n\nSee Also\nFinding an Index in a Shaped Array Slice\nvar startIndex: Int\nThe index of the first element in the shaped array slice.\nvar endIndex: Int\nThe index of the last element in the shaped array slice.\nfunc index(Int, offsetBy: Int) -> Int\nReturns the index at a relative distance to an index you provide.\nfunc index(Int, offsetBy: Int, limitedBy: Int) -> Int?\nReturns an index that is the specified distance from the given index, unless that distance is beyond a given limiting index.\nfunc index(of: MLShapedArraySlice<Scalar>) -> Int?\nReturns the first index where the specified value appears in the collection.\nDeprecated\nfunc formIndex(before: inout Int)\nReplaces the given index with its predecessor.\nfunc formIndex(after: inout Int)\nReplaces the given index with its successor.\nfunc formIndex(inout Int, offsetBy: Int)\nOffsets the given index by the specified distance.\nfunc formIndex(inout Int, offsetBy: Int, limitedBy: Int) -> Bool\nOffsets the given index by the specified distance, or so that it equals the given limiting index.\nfunc firstIndex(where: (MLShapedArraySlice<Scalar>) -> Bool) -> Int?\nReturns the first index in which an element of the collection satisfies the given predicate.\nfunc firstIndex(of: MLShapedArraySlice<Scalar>) -> Int?\nReturns the first index where the specified value appears in the collection.\nfunc firstRange<C>(of: C) -> Range<Int>?\nFinds and returns the range of the first occurrence of a given collection within this collection.\nfunc lastIndex(where: (MLShapedArraySlice<Scalar>) -> Bool) -> Int?\nReturns the index of the last element in the collection that matches the given predicate.\nfunc lastIndex(of: MLShapedArraySlice<Scalar>) -> Int?\nReturns the last index where the specified value appears in the collection.\nfunc ranges<C>(of: C) -> [Range<Int>]\nFinds and returns the ranges of the all occurrences of a given sequence within the collection.\nfunc starts<PossiblePrefix>(with: PossiblePrefix) -> Bool\nReturns a Boolean value indicating whether the initial elements of the sequence are the same as the elements in another sequence."
  },
  {
    "title": "lexicographicallyPrecedes(_:by:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarrayslice/3763469-lexicographicallyprecedes",
    "html": "Parameters\nother\n\nA sequence to compare to this sequence.\n\nareInIncreasingOrder\n\nA predicate that returns true if its first argument should be ordered before its second argument; otherwise, false.\n\nReturn Value\n\ntrue if this sequence precedes other in a dictionary ordering as ordered by areInIncreasingOrder; otherwise, false.\n\nDiscussion\n\nThe predicate must be a strict weak ordering over the elements. That is, for any elements a, b, and c, the following conditions must hold:\n\nNote\n\nThis method implements the mathematical notion of lexicographical ordering, which has no connection to Unicode. If you are sorting strings to present to the end user, use String APIs that perform localized comparison instead.\n\nComplexity: O(m), where m is the lesser of the length of the sequence and the length of other.\n\nareInIncreasingOrder(a, a) is always false. (Irreflexivity)\n\nIf areInIncreasingOrder(a, b) and areInIncreasingOrder(b, c) are both true, then areInIncreasingOrder(a, c) is also true. (Transitive comparability)\n\nTwo elements are incomparable if neither is ordered before the other according to the predicate. If a and b are incomparable, and b and c are incomparable, then a and c are also incomparable. (Transitive incomparability)\n\nSee Also\nComparing Shaped Array Slices\nfunc compare<Comparator>(Comparator.Compared, Comparator.Compared) -> ComparisonResult\nReturns a comparison result by comparing two shaped array slices.\nfunc difference<C>(from: C, by: (C.Element, MLShapedArraySlice<Scalar>) -> Bool) -> CollectionDifference<MLShapedArraySlice<Scalar>>\nReturns the difference needed to produce this collection’s ordered elements from the given collection, using the given predicate as an equivalence test.\nfunc difference<C>(from: C) -> CollectionDifference<MLShapedArraySlice<Scalar>>\nReturns the difference needed to produce this collection’s ordered elements from the given collection.\nfunc elementsEqual<OtherSequence>(OtherSequence, by: (MLShapedArraySlice<Scalar>, OtherSequence.Element) -> Bool) -> Bool\nReturns a Boolean value indicating whether this sequence and another sequence contain equivalent elements in the same order, using the given predicate as the equivalence test.\nfunc elementsEqual<OtherSequence>(OtherSequence) -> Bool\nReturns a Boolean value indicating whether this sequence and another sequence contain the same elements in the same order.\nfunc starts<PossiblePrefix>(with: PossiblePrefix, by: (MLShapedArraySlice<Scalar>, PossiblePrefix.Element) -> Bool) -> Bool\nReturns a Boolean value indicating whether the initial elements of the sequence are equivalent to the elements in another sequence, using the given predicate as the equivalence test."
  },
  {
    "title": "startIndex | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarrayslice/3763533-startindex",
    "html": "Relationships\nFrom Protocol\nBidirectionalCollection\nCollection\nRandomAccessCollection\nSee Also\nFinding an Index in a Shaped Array Slice\nvar endIndex: Int\nThe index of the last element in the shaped array slice.\nfunc index(after: Int) -> Int\nReturns the index immediately after an index you provide.\nfunc index(Int, offsetBy: Int) -> Int\nReturns the index at a relative distance to an index you provide.\nfunc index(Int, offsetBy: Int, limitedBy: Int) -> Int?\nReturns an index that is the specified distance from the given index, unless that distance is beyond a given limiting index.\nfunc index(of: MLShapedArraySlice<Scalar>) -> Int?\nReturns the first index where the specified value appears in the collection.\nDeprecated\nfunc formIndex(before: inout Int)\nReplaces the given index with its predecessor.\nfunc formIndex(after: inout Int)\nReplaces the given index with its successor.\nfunc formIndex(inout Int, offsetBy: Int)\nOffsets the given index by the specified distance.\nfunc formIndex(inout Int, offsetBy: Int, limitedBy: Int) -> Bool\nOffsets the given index by the specified distance, or so that it equals the given limiting index.\nfunc firstIndex(where: (MLShapedArraySlice<Scalar>) -> Bool) -> Int?\nReturns the first index in which an element of the collection satisfies the given predicate.\nfunc firstIndex(of: MLShapedArraySlice<Scalar>) -> Int?\nReturns the first index where the specified value appears in the collection.\nfunc firstRange<C>(of: C) -> Range<Int>?\nFinds and returns the range of the first occurrence of a given collection within this collection.\nfunc lastIndex(where: (MLShapedArraySlice<Scalar>) -> Bool) -> Int?\nReturns the index of the last element in the collection that matches the given predicate.\nfunc lastIndex(of: MLShapedArraySlice<Scalar>) -> Int?\nReturns the last index where the specified value appears in the collection.\nfunc ranges<C>(of: C) -> [Range<Int>]\nFinds and returns the ranges of the all occurrences of a given sequence within the collection.\nfunc starts<PossiblePrefix>(with: PossiblePrefix) -> Bool\nReturns a Boolean value indicating whether the initial elements of the sequence are the same as the elements in another sequence."
  },
  {
    "title": "endIndex | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarrayslice/3763411-endindex",
    "html": "Relationships\nFrom Protocol\nBidirectionalCollection\nCollection\nRandomAccessCollection\nSee Also\nFinding an Index in a Shaped Array Slice\nvar startIndex: Int\nThe index of the first element in the shaped array slice.\nfunc index(after: Int) -> Int\nReturns the index immediately after an index you provide.\nfunc index(Int, offsetBy: Int) -> Int\nReturns the index at a relative distance to an index you provide.\nfunc index(Int, offsetBy: Int, limitedBy: Int) -> Int?\nReturns an index that is the specified distance from the given index, unless that distance is beyond a given limiting index.\nfunc index(of: MLShapedArraySlice<Scalar>) -> Int?\nReturns the first index where the specified value appears in the collection.\nDeprecated\nfunc formIndex(before: inout Int)\nReplaces the given index with its predecessor.\nfunc formIndex(after: inout Int)\nReplaces the given index with its successor.\nfunc formIndex(inout Int, offsetBy: Int)\nOffsets the given index by the specified distance.\nfunc formIndex(inout Int, offsetBy: Int, limitedBy: Int) -> Bool\nOffsets the given index by the specified distance, or so that it equals the given limiting index.\nfunc firstIndex(where: (MLShapedArraySlice<Scalar>) -> Bool) -> Int?\nReturns the first index in which an element of the collection satisfies the given predicate.\nfunc firstIndex(of: MLShapedArraySlice<Scalar>) -> Int?\nReturns the first index where the specified value appears in the collection.\nfunc firstRange<C>(of: C) -> Range<Int>?\nFinds and returns the range of the first occurrence of a given collection within this collection.\nfunc lastIndex(where: (MLShapedArraySlice<Scalar>) -> Bool) -> Int?\nReturns the index of the last element in the collection that matches the given predicate.\nfunc lastIndex(of: MLShapedArraySlice<Scalar>) -> Int?\nReturns the last index where the specified value appears in the collection.\nfunc ranges<C>(of: C) -> [Range<Int>]\nFinds and returns the ranges of the all occurrences of a given sequence within the collection.\nfunc starts<PossiblePrefix>(with: PossiblePrefix) -> Bool\nReturns a Boolean value indicating whether the initial elements of the sequence are the same as the elements in another sequence."
  },
  {
    "title": "index(_:offsetBy:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarrayslice/3763437-index",
    "html": "Parameters\nindex\n\nAn index in the shaped array slice.\n\ndistance\n\nAn integer that represents a relative distance from index.\n\nSee Also\nFinding an Index in a Shaped Array Slice\nvar startIndex: Int\nThe index of the first element in the shaped array slice.\nvar endIndex: Int\nThe index of the last element in the shaped array slice.\nfunc index(after: Int) -> Int\nReturns the index immediately after an index you provide.\nfunc index(Int, offsetBy: Int, limitedBy: Int) -> Int?\nReturns an index that is the specified distance from the given index, unless that distance is beyond a given limiting index.\nfunc index(of: MLShapedArraySlice<Scalar>) -> Int?\nReturns the first index where the specified value appears in the collection.\nDeprecated\nfunc formIndex(before: inout Int)\nReplaces the given index with its predecessor.\nfunc formIndex(after: inout Int)\nReplaces the given index with its successor.\nfunc formIndex(inout Int, offsetBy: Int)\nOffsets the given index by the specified distance.\nfunc formIndex(inout Int, offsetBy: Int, limitedBy: Int) -> Bool\nOffsets the given index by the specified distance, or so that it equals the given limiting index.\nfunc firstIndex(where: (MLShapedArraySlice<Scalar>) -> Bool) -> Int?\nReturns the first index in which an element of the collection satisfies the given predicate.\nfunc firstIndex(of: MLShapedArraySlice<Scalar>) -> Int?\nReturns the first index where the specified value appears in the collection.\nfunc firstRange<C>(of: C) -> Range<Int>?\nFinds and returns the range of the first occurrence of a given collection within this collection.\nfunc lastIndex(where: (MLShapedArraySlice<Scalar>) -> Bool) -> Int?\nReturns the index of the last element in the collection that matches the given predicate.\nfunc lastIndex(of: MLShapedArraySlice<Scalar>) -> Int?\nReturns the last index where the specified value appears in the collection.\nfunc ranges<C>(of: C) -> [Range<Int>]\nFinds and returns the ranges of the all occurrences of a given sequence within the collection.\nfunc starts<PossiblePrefix>(with: PossiblePrefix) -> Bool\nReturns a Boolean value indicating whether the initial elements of the sequence are the same as the elements in another sequence."
  },
  {
    "title": "formIndex(before:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarrayslice/3763434-formindex",
    "html": "Parameters\ni\n\nA valid index of the collection. i must be greater than startIndex.\n\nDiscussion\n\nNote\n\nThis documentation comment was inherited from BidirectionalCollection.\n\nSee Also\nFinding an Index in a Shaped Array Slice\nvar startIndex: Int\nThe index of the first element in the shaped array slice.\nvar endIndex: Int\nThe index of the last element in the shaped array slice.\nfunc index(after: Int) -> Int\nReturns the index immediately after an index you provide.\nfunc index(Int, offsetBy: Int) -> Int\nReturns the index at a relative distance to an index you provide.\nfunc index(Int, offsetBy: Int, limitedBy: Int) -> Int?\nReturns an index that is the specified distance from the given index, unless that distance is beyond a given limiting index.\nfunc index(of: MLShapedArraySlice<Scalar>) -> Int?\nReturns the first index where the specified value appears in the collection.\nDeprecated\nfunc formIndex(after: inout Int)\nReplaces the given index with its successor.\nfunc formIndex(inout Int, offsetBy: Int)\nOffsets the given index by the specified distance.\nfunc formIndex(inout Int, offsetBy: Int, limitedBy: Int) -> Bool\nOffsets the given index by the specified distance, or so that it equals the given limiting index.\nfunc firstIndex(where: (MLShapedArraySlice<Scalar>) -> Bool) -> Int?\nReturns the first index in which an element of the collection satisfies the given predicate.\nfunc firstIndex(of: MLShapedArraySlice<Scalar>) -> Int?\nReturns the first index where the specified value appears in the collection.\nfunc firstRange<C>(of: C) -> Range<Int>?\nFinds and returns the range of the first occurrence of a given collection within this collection.\nfunc lastIndex(where: (MLShapedArraySlice<Scalar>) -> Bool) -> Int?\nReturns the index of the last element in the collection that matches the given predicate.\nfunc lastIndex(of: MLShapedArraySlice<Scalar>) -> Int?\nReturns the last index where the specified value appears in the collection.\nfunc ranges<C>(of: C) -> [Range<Int>]\nFinds and returns the ranges of the all occurrences of a given sequence within the collection.\nfunc starts<PossiblePrefix>(with: PossiblePrefix) -> Bool\nReturns a Boolean value indicating whether the initial elements of the sequence are the same as the elements in another sequence."
  },
  {
    "title": "formIndex(_:offsetBy:limitedBy:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarrayslice/3763432-formindex",
    "html": "Parameters\ni\n\nA valid index of the collection.\n\ndistance\n\nThe distance to offset i. distance must not be negative unless the collection conforms to the BidirectionalCollection protocol.\n\nlimit\n\nA valid index of the collection to use as a limit. If distance > 0, a limit that is less than i has no effect. Likewise, if distance < 0, a limit that is greater than i has no effect.\n\nReturn Value\n\ntrue if i has been offset by exactly distance steps without going beyond limit; otherwise, false. When the return value is false, the value of i is equal to limit.\n\nDiscussion\n\nThe value passed as distance must not offset i beyond the bounds of the collection, unless the index passed as limit prevents offsetting beyond those bounds.\n\nComplexity: O(1) if the collection conforms to RandomAccessCollection; otherwise, O(k), where k is the absolute value of distance.\n\nSee Also\nFinding an Index in a Shaped Array Slice\nvar startIndex: Int\nThe index of the first element in the shaped array slice.\nvar endIndex: Int\nThe index of the last element in the shaped array slice.\nfunc index(after: Int) -> Int\nReturns the index immediately after an index you provide.\nfunc index(Int, offsetBy: Int) -> Int\nReturns the index at a relative distance to an index you provide.\nfunc index(Int, offsetBy: Int, limitedBy: Int) -> Int?\nReturns an index that is the specified distance from the given index, unless that distance is beyond a given limiting index.\nfunc index(of: MLShapedArraySlice<Scalar>) -> Int?\nReturns the first index where the specified value appears in the collection.\nDeprecated\nfunc formIndex(before: inout Int)\nReplaces the given index with its predecessor.\nfunc formIndex(after: inout Int)\nReplaces the given index with its successor.\nfunc formIndex(inout Int, offsetBy: Int)\nOffsets the given index by the specified distance.\nfunc firstIndex(where: (MLShapedArraySlice<Scalar>) -> Bool) -> Int?\nReturns the first index in which an element of the collection satisfies the given predicate.\nfunc firstIndex(of: MLShapedArraySlice<Scalar>) -> Int?\nReturns the first index where the specified value appears in the collection.\nfunc firstRange<C>(of: C) -> Range<Int>?\nFinds and returns the range of the first occurrence of a given collection within this collection.\nfunc lastIndex(where: (MLShapedArraySlice<Scalar>) -> Bool) -> Int?\nReturns the index of the last element in the collection that matches the given predicate.\nfunc lastIndex(of: MLShapedArraySlice<Scalar>) -> Int?\nReturns the last index where the specified value appears in the collection.\nfunc ranges<C>(of: C) -> [Range<Int>]\nFinds and returns the ranges of the all occurrences of a given sequence within the collection.\nfunc starts<PossiblePrefix>(with: PossiblePrefix) -> Bool\nReturns a Boolean value indicating whether the initial elements of the sequence are the same as the elements in another sequence."
  },
  {
    "title": "index(_:offsetBy:limitedBy:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarrayslice/3763438-index",
    "html": "Parameters\ni\n\nA valid index of the array.\n\ndistance\n\nThe distance to offset i.\n\nlimit\n\nA valid index of the collection to use as a limit. If distance > 0, limit should be greater than i to have any effect. Likewise, if distance < 0, limit should be less than i to have any effect.\n\nReturn Value\n\nAn index offset by distance from the index i, unless that index would be beyond limit in the direction of movement. In that case, the method returns nil.\n\nDiscussion\n\nThe following example obtains an index advanced four positions from an array’s starting index and then prints the element at that position. The operation doesn’t require going beyond the limiting numbers.endIndex value, so it succeeds.\n\nlet numbers = [10, 20, 30, 40, 50]\nlet i = numbers.index(numbers.startIndex, offsetBy: 4)\nprint(numbers[i])\n// Prints \"50\"\n\n\nThe next example attempts to retrieve an index ten positions from numbers.startIndex, but fails, because that distance is beyond the index passed as limit.\n\nlet j = numbers.index(numbers.startIndex,\n                      offsetBy: 10,\n                      limitedBy: numbers.endIndex)\nprint(j)\n// Prints \"nil\"\n\n\nThe value passed as distance must not offset i beyond the bounds of the collection, unless the index passed as limit prevents offsetting beyond those bounds.\n\nComplexity: O(1)\n\nSee Also\nFinding an Index in a Shaped Array Slice\nvar startIndex: Int\nThe index of the first element in the shaped array slice.\nvar endIndex: Int\nThe index of the last element in the shaped array slice.\nfunc index(after: Int) -> Int\nReturns the index immediately after an index you provide.\nfunc index(Int, offsetBy: Int) -> Int\nReturns the index at a relative distance to an index you provide.\nfunc index(of: MLShapedArraySlice<Scalar>) -> Int?\nReturns the first index where the specified value appears in the collection.\nDeprecated\nfunc formIndex(before: inout Int)\nReplaces the given index with its predecessor.\nfunc formIndex(after: inout Int)\nReplaces the given index with its successor.\nfunc formIndex(inout Int, offsetBy: Int)\nOffsets the given index by the specified distance.\nfunc formIndex(inout Int, offsetBy: Int, limitedBy: Int) -> Bool\nOffsets the given index by the specified distance, or so that it equals the given limiting index.\nfunc firstIndex(where: (MLShapedArraySlice<Scalar>) -> Bool) -> Int?\nReturns the first index in which an element of the collection satisfies the given predicate.\nfunc firstIndex(of: MLShapedArraySlice<Scalar>) -> Int?\nReturns the first index where the specified value appears in the collection.\nfunc firstRange<C>(of: C) -> Range<Int>?\nFinds and returns the range of the first occurrence of a given collection within this collection.\nfunc lastIndex(where: (MLShapedArraySlice<Scalar>) -> Bool) -> Int?\nReturns the index of the last element in the collection that matches the given predicate.\nfunc lastIndex(of: MLShapedArraySlice<Scalar>) -> Int?\nReturns the last index where the specified value appears in the collection.\nfunc ranges<C>(of: C) -> [Range<Int>]\nFinds and returns the ranges of the all occurrences of a given sequence within the collection.\nfunc starts<PossiblePrefix>(with: PossiblePrefix) -> Bool\nReturns a Boolean value indicating whether the initial elements of the sequence are the same as the elements in another sequence."
  },
  {
    "title": "formIndex(after:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarrayslice/3763433-formindex",
    "html": "Parameters\ni\n\nA valid index of the collection. i must be less than endIndex.\n\nSee Also\nFinding an Index in a Shaped Array Slice\nvar startIndex: Int\nThe index of the first element in the shaped array slice.\nvar endIndex: Int\nThe index of the last element in the shaped array slice.\nfunc index(after: Int) -> Int\nReturns the index immediately after an index you provide.\nfunc index(Int, offsetBy: Int) -> Int\nReturns the index at a relative distance to an index you provide.\nfunc index(Int, offsetBy: Int, limitedBy: Int) -> Int?\nReturns an index that is the specified distance from the given index, unless that distance is beyond a given limiting index.\nfunc index(of: MLShapedArraySlice<Scalar>) -> Int?\nReturns the first index where the specified value appears in the collection.\nDeprecated\nfunc formIndex(before: inout Int)\nReplaces the given index with its predecessor.\nfunc formIndex(inout Int, offsetBy: Int)\nOffsets the given index by the specified distance.\nfunc formIndex(inout Int, offsetBy: Int, limitedBy: Int) -> Bool\nOffsets the given index by the specified distance, or so that it equals the given limiting index.\nfunc firstIndex(where: (MLShapedArraySlice<Scalar>) -> Bool) -> Int?\nReturns the first index in which an element of the collection satisfies the given predicate.\nfunc firstIndex(of: MLShapedArraySlice<Scalar>) -> Int?\nReturns the first index where the specified value appears in the collection.\nfunc firstRange<C>(of: C) -> Range<Int>?\nFinds and returns the range of the first occurrence of a given collection within this collection.\nfunc lastIndex(where: (MLShapedArraySlice<Scalar>) -> Bool) -> Int?\nReturns the index of the last element in the collection that matches the given predicate.\nfunc lastIndex(of: MLShapedArraySlice<Scalar>) -> Int?\nReturns the last index where the specified value appears in the collection.\nfunc ranges<C>(of: C) -> [Range<Int>]\nFinds and returns the ranges of the all occurrences of a given sequence within the collection.\nfunc starts<PossiblePrefix>(with: PossiblePrefix) -> Bool\nReturns a Boolean value indicating whether the initial elements of the sequence are the same as the elements in another sequence."
  },
  {
    "title": "type | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlmultiarrayshapeconstraint/2994315-type",
    "html": "See Also\nAccessing the Constraints\nvar enumeratedShapes: [[NSNumber]]\nArray of allowed shapes for a multiarray feature.\nvar sizeRangeForDimension: [NSValue]\nThe allowable range for a dimention of the multiarray.\nenum MLMultiArrayShapeConstraintType\nThe possible types of shape constraints."
  },
  {
    "title": "sizeRangeForDimension | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlmultiarrayshapeconstraint/2994314-sizerangefordimension",
    "html": "See Also\nAccessing the Constraints\nvar enumeratedShapes: [[NSNumber]]\nArray of allowed shapes for a multiarray feature.\nvar type: MLMultiArrayShapeConstraintType\nThe type of the shape constraint.\nenum MLMultiArrayShapeConstraintType\nThe possible types of shape constraints."
  },
  {
    "title": "split(maxSplits:omittingEmptySubsequences:whereSeparator:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarrayslice/3763529-split",
    "html": "Parameters\nmaxSplits\n\nThe maximum number of times to split the collection, or one less than the number of subsequences to return. If maxSplits + 1 subsequences are returned, the last one is a suffix of the original collection containing the remaining elements. maxSplits must be greater than or equal to zero. The default value is Int.max.\n\nomittingEmptySubsequences\n\nIf false, an empty subsequence is returned in the result for each pair of consecutive elements satisfying the isSeparator predicate and for each element at the start or end of the collection satisfying the isSeparator predicate. The default value is true.\n\nisSeparator\n\nA closure that takes an element as an argument and returns a Boolean value indicating whether the collection should be split at that element.\n\nReturn Value\n\nAn array of subsequences, split from this collection’s elements.\n\nDiscussion\n\nThe resulting array consists of at most maxSplits + 1 subsequences. Elements that are used to split the sequence are not returned as part of any subsequence.\n\nThe following examples show the effects of the maxSplits and omittingEmptySubsequences parameters when splitting a string using a closure that matches spaces. The first use of split returns each word that was originally separated by one or more spaces.\n\nlet line = \"BLANCHE:   I don't want realism. I want magic!\"\nprint(line.split(whereSeparator: { $0 == \" \" }))\n// Prints \"[\"BLANCHE:\", \"I\", \"don\\'t\", \"want\", \"realism.\", \"I\", \"want\", \"magic!\"]\"\n\n\nThe second example passes 1 for the maxSplits parameter, so the original string is split just once, into two new strings.\n\nprint(line.split(maxSplits: 1, whereSeparator: { $0 == \" \" }))\n// Prints \"[\"BLANCHE:\", \"  I don\\'t want realism. I want magic!\"]\"\n\n\nThe final example passes false for the omittingEmptySubsequences parameter, so the returned array contains empty strings where spaces were repeated.\n\nprint(line.split(omittingEmptySubsequences: false, whereSeparator: { $0 == \" \" }))\n// Prints \"[\"BLANCHE:\", \"\", \"\", \"I\", \"don\\'t\", \"want\", \"realism.\", \"I\", \"want\", \"magic!\"]\"\n\n\nComplexity: O(n), where n is the length of the collection.\n\nSee Also\nGenerating a Shaped Array Slice\nfunc first(where: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>?\nReturns the first element of the sequence that satisfies the given predicate.\nfunc last(where: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>?\nReturns the last element of the sequence that satisfies the given predicate.\nfunc dropFirst(Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence containing all but the given number of initial elements.\nfunc dropLast(Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence containing all but the specified number of final elements.\nfunc drop(while: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>\nReturns a subsequence by skipping elements while predicate returns true and returning the remaining elements.\nfunc joined() -> FlattenSequence<MLShapedArraySlice<Scalar>>\nReturns the elements of this sequence of sequences, concatenated.\nfunc joined<Separator>(separator: Separator) -> JoinedSequence<MLShapedArraySlice<Scalar>>\nReturns the concatenated elements of this sequence of sequences, inserting the given separator between each element.\nfunc min(by: (MLShapedArraySlice<Scalar>, MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>?\nReturns the minimum element in the sequence, using the given predicate as the comparison between elements.\nfunc max(by: (MLShapedArraySlice<Scalar>, MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>?\nReturns the maximum element in the sequence, using the given predicate as the comparison between elements.\nfunc prefix(Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence, up to the specified maximum length, containing the initial elements of the collection.\nfunc prefix(upTo: Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence from the start of the collection up to, but not including, the specified position.\nfunc prefix(through: Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence from the start of the collection through the specified position.\nfunc prefix(while: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>\nReturns a subsequence containing the initial elements until predicate returns false and skipping the remaining elements.\nfunc suffix(Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence, up to the given maximum length, containing the final elements of the collection.\nfunc suffix(from: Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence from the specified position to the end of the collection.\nfunc trimPrefix<Prefix>(Prefix)\nRemoves the initial elements that satisfy the given predicate from the start of the sequence.\nfunc trimPrefix(while: (MLShapedArraySlice<Scalar>) -> Bool)\nTrims the array slice using a predicate.\nfunc trimmingPrefix<Prefix>(Prefix) -> MLShapedArraySlice<Scalar>\nReturns a new collection of the same type by removing initial elements that satisfy the given predicate from the start.\nfunc trimmingPrefix(while: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>\nfunc reversed() -> ReversedCollection<MLShapedArraySlice<Scalar>>\nReturns a view presenting the elements of the collection in reverse order.\nfunc shuffled() -> [MLShapedArraySlice<Scalar>]\nReturns the elements of the sequence, shuffled.\nfunc shuffled<T>(using: inout T) -> [MLShapedArraySlice<Scalar>]\nReturns the elements of the sequence, shuffled using the given generator as a source for randomness.\nfunc sorted<Comparator>(using: Comparator) -> [MLShapedArraySlice<Scalar>]\nGenerates a copy of the shaped array slice by sorting its slices with a comparator.\nfunc sorted<S, Comparator>(using: S) -> [MLShapedArraySlice<Scalar>]\nGenerates a copy of the shaped array slice by sorting its slices with a sequence of comparators.\nfunc sorted(by: (MLShapedArraySlice<Scalar>, MLShapedArraySlice<Scalar>) -> Bool) -> [MLShapedArraySlice<Scalar>]\nReturns the elements of the sequence, sorted using the given predicate as the comparison between elements."
  },
  {
    "title": "sorted(by:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarrayslice/3763525-sorted",
    "html": "Parameters\nareInIncreasingOrder\n\nA predicate that returns true if its first argument should be ordered before its second argument; otherwise, false.\n\nReturn Value\n\nA sorted array of the sequence’s elements.\n\nDiscussion\n\nWhen you want to sort a sequence of elements that don’t conform to the Comparable protocol, pass a predicate to this method that returns true when the first element should be ordered before the second. The elements of the resulting array are ordered according to the given predicate.\n\nIn the following example, the predicate provides an ordering for an array of a custom HTTPResponse type. The predicate orders errors before successes and sorts the error responses by their error code.\n\nenum HTTPResponse {\n    case ok\n    case error(Int)\n}\n\n\nlet responses: [HTTPResponse] = [.error(500), .ok, .ok, .error(404), .error(403)]\nlet sortedResponses = responses.sorted {\n    switch ($0, $1) {\n    // Order errors by code\n    case let (.error(aCode), .error(bCode)):\n        return aCode < bCode\n\n\n    // All successes are equivalent, so none is before any other\n    case (.ok, .ok): return false\n\n\n    // Order errors before successes\n    case (.error, .ok): return true\n    case (.ok, .error): return false\n    }\n}\nprint(sortedResponses)\n// Prints \"[.error(403), .error(404), .error(500), .ok, .ok]\"\n\n\nYou also use this method to sort elements that conform to the Comparable protocol in descending order. To sort your sequence in descending order, pass the greater-than operator (>) as the areInIncreasingOrder parameter.\n\nlet students: Set = [\"Kofi\", \"Abena\", \"Peter\", \"Kweku\", \"Akosua\"]\nlet descendingStudents = students.sorted(by: >)\nprint(descendingStudents)\n// Prints \"[\"Peter\", \"Kweku\", \"Kofi\", \"Akosua\", \"Abena\"]\"\n\n\nCalling the related sorted() method is equivalent to calling this method and passing the less-than operator (<) as the predicate.\n\nprint(students.sorted())\n// Prints \"[\"Abena\", \"Akosua\", \"Kofi\", \"Kweku\", \"Peter\"]\"\nprint(students.sorted(by: <))\n// Prints \"[\"Abena\", \"Akosua\", \"Kofi\", \"Kweku\", \"Peter\"]\"\n\n\nThe predicate must be a strict weak ordering over the elements. That is, for any elements a, b, and c, the following conditions must hold:\n\nareInIncreasingOrder(a, a) is always false. (Irreflexivity)\n\nIf areInIncreasingOrder(a, b) and areInIncreasingOrder(b, c) are both true, then areInIncreasingOrder(a, c) is also true. (Transitive comparability)\n\nTwo elements are incomparable if neither is ordered before the other according to the predicate. If a and b are incomparable, and b and c are incomparable, then a and c are also incomparable. (Transitive incomparability)\n\nThe sorting algorithm is guaranteed to be stable. A stable sort preserves the relative order of elements for which areInIncreasingOrder does not establish an order.\n\nComplexity: O(n log n), where n is the length of the sequence.\n\nSee Also\nGenerating a Shaped Array Slice\nfunc first(where: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>?\nReturns the first element of the sequence that satisfies the given predicate.\nfunc last(where: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>?\nReturns the last element of the sequence that satisfies the given predicate.\nfunc dropFirst(Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence containing all but the given number of initial elements.\nfunc dropLast(Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence containing all but the specified number of final elements.\nfunc drop(while: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>\nReturns a subsequence by skipping elements while predicate returns true and returning the remaining elements.\nfunc joined() -> FlattenSequence<MLShapedArraySlice<Scalar>>\nReturns the elements of this sequence of sequences, concatenated.\nfunc joined<Separator>(separator: Separator) -> JoinedSequence<MLShapedArraySlice<Scalar>>\nReturns the concatenated elements of this sequence of sequences, inserting the given separator between each element.\nfunc min(by: (MLShapedArraySlice<Scalar>, MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>?\nReturns the minimum element in the sequence, using the given predicate as the comparison between elements.\nfunc max(by: (MLShapedArraySlice<Scalar>, MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>?\nReturns the maximum element in the sequence, using the given predicate as the comparison between elements.\nfunc prefix(Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence, up to the specified maximum length, containing the initial elements of the collection.\nfunc prefix(upTo: Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence from the start of the collection up to, but not including, the specified position.\nfunc prefix(through: Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence from the start of the collection through the specified position.\nfunc prefix(while: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>\nReturns a subsequence containing the initial elements until predicate returns false and skipping the remaining elements.\nfunc suffix(Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence, up to the given maximum length, containing the final elements of the collection.\nfunc suffix(from: Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence from the specified position to the end of the collection.\nfunc trimPrefix<Prefix>(Prefix)\nRemoves the initial elements that satisfy the given predicate from the start of the sequence.\nfunc trimPrefix(while: (MLShapedArraySlice<Scalar>) -> Bool)\nTrims the array slice using a predicate.\nfunc trimmingPrefix<Prefix>(Prefix) -> MLShapedArraySlice<Scalar>\nReturns a new collection of the same type by removing initial elements that satisfy the given predicate from the start.\nfunc trimmingPrefix(while: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>\nfunc reversed() -> ReversedCollection<MLShapedArraySlice<Scalar>>\nReturns a view presenting the elements of the collection in reverse order.\nfunc shuffled() -> [MLShapedArraySlice<Scalar>]\nReturns the elements of the sequence, shuffled.\nfunc shuffled<T>(using: inout T) -> [MLShapedArraySlice<Scalar>]\nReturns the elements of the sequence, shuffled using the given generator as a source for randomness.\nfunc sorted<Comparator>(using: Comparator) -> [MLShapedArraySlice<Scalar>]\nGenerates a copy of the shaped array slice by sorting its slices with a comparator.\nfunc sorted<S, Comparator>(using: S) -> [MLShapedArraySlice<Scalar>]\nGenerates a copy of the shaped array slice by sorting its slices with a sequence of comparators.\nfunc split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (MLShapedArraySlice<Scalar>) -> Bool) -> [MLShapedArraySlice<Scalar>]\nReturns the longest possible subsequences of the collection, in order, that don’t contain elements satisfying the given predicate."
  },
  {
    "title": "prefix(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarrayslice/3763482-prefix",
    "html": "Parameters\nmaxLength\n\nThe maximum number of elements to return. maxLength must be greater than or equal to zero.\n\nReturn Value\n\nA subsequence starting at the beginning of this collection with at most maxLength elements.\n\nDiscussion\n\nIf the maximum length exceeds the number of elements in the collection, the result contains all the elements in the collection.\n\nlet numbers = [1, 2, 3, 4, 5]\nprint(numbers.prefix(2))\n// Prints \"[1, 2]\"\nprint(numbers.prefix(10))\n// Prints \"[1, 2, 3, 4, 5]\"\n\n\nComplexity: O(1) if the collection conforms to RandomAccessCollection; otherwise, O(k), where k is the number of elements to select from the beginning of the collection.\n\nSee Also\nGenerating a Shaped Array Slice\nfunc first(where: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>?\nReturns the first element of the sequence that satisfies the given predicate.\nfunc last(where: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>?\nReturns the last element of the sequence that satisfies the given predicate.\nfunc dropFirst(Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence containing all but the given number of initial elements.\nfunc dropLast(Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence containing all but the specified number of final elements.\nfunc drop(while: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>\nReturns a subsequence by skipping elements while predicate returns true and returning the remaining elements.\nfunc joined() -> FlattenSequence<MLShapedArraySlice<Scalar>>\nReturns the elements of this sequence of sequences, concatenated.\nfunc joined<Separator>(separator: Separator) -> JoinedSequence<MLShapedArraySlice<Scalar>>\nReturns the concatenated elements of this sequence of sequences, inserting the given separator between each element.\nfunc min(by: (MLShapedArraySlice<Scalar>, MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>?\nReturns the minimum element in the sequence, using the given predicate as the comparison between elements.\nfunc max(by: (MLShapedArraySlice<Scalar>, MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>?\nReturns the maximum element in the sequence, using the given predicate as the comparison between elements.\nfunc prefix(upTo: Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence from the start of the collection up to, but not including, the specified position.\nfunc prefix(through: Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence from the start of the collection through the specified position.\nfunc prefix(while: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>\nReturns a subsequence containing the initial elements until predicate returns false and skipping the remaining elements.\nfunc suffix(Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence, up to the given maximum length, containing the final elements of the collection.\nfunc suffix(from: Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence from the specified position to the end of the collection.\nfunc trimPrefix<Prefix>(Prefix)\nRemoves the initial elements that satisfy the given predicate from the start of the sequence.\nfunc trimPrefix(while: (MLShapedArraySlice<Scalar>) -> Bool)\nTrims the array slice using a predicate.\nfunc trimmingPrefix<Prefix>(Prefix) -> MLShapedArraySlice<Scalar>\nReturns a new collection of the same type by removing initial elements that satisfy the given predicate from the start.\nfunc trimmingPrefix(while: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>\nfunc reversed() -> ReversedCollection<MLShapedArraySlice<Scalar>>\nReturns a view presenting the elements of the collection in reverse order.\nfunc shuffled() -> [MLShapedArraySlice<Scalar>]\nReturns the elements of the sequence, shuffled.\nfunc shuffled<T>(using: inout T) -> [MLShapedArraySlice<Scalar>]\nReturns the elements of the sequence, shuffled using the given generator as a source for randomness.\nfunc sorted<Comparator>(using: Comparator) -> [MLShapedArraySlice<Scalar>]\nGenerates a copy of the shaped array slice by sorting its slices with a comparator.\nfunc sorted<S, Comparator>(using: S) -> [MLShapedArraySlice<Scalar>]\nGenerates a copy of the shaped array slice by sorting its slices with a sequence of comparators.\nfunc sorted(by: (MLShapedArraySlice<Scalar>, MLShapedArraySlice<Scalar>) -> Bool) -> [MLShapedArraySlice<Scalar>]\nReturns the elements of the sequence, sorted using the given predicate as the comparison between elements.\nfunc split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (MLShapedArraySlice<Scalar>) -> Bool) -> [MLShapedArraySlice<Scalar>]\nReturns the longest possible subsequences of the collection, in order, that don’t contain elements satisfying the given predicate."
  },
  {
    "title": "prefix(upTo:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarrayslice/3763487-prefix",
    "html": "Parameters\nend\n\nThe “past the end” index of the resulting subsequence. end must be a valid index of the collection.\n\nReturn Value\n\nA subsequence up to, but not including, the end position.\n\nDiscussion\n\nThe resulting subsequence does not include the element at the position end. The following example searches for the index of the number 40 in an array of integers, and then prints the prefix of the array up to, but not including, that index:\n\nlet numbers = [10, 20, 30, 40, 50, 60]\nif let i = numbers.firstIndex(of: 40) {\n    print(numbers.prefix(upTo: i))\n}\n// Prints \"[10, 20, 30]\"\n\n\nPassing the collection’s starting index as the end parameter results in an empty subsequence.\n\nprint(numbers.prefix(upTo: numbers.startIndex))\n// Prints \"[]\"\n\n\nUsing the prefix(upTo:) method is equivalent to using a partial half-open range as the collection’s subscript. The subscript notation is preferred over prefix(upTo:).\n\nif let i = numbers.firstIndex(of: 40) {\n    print(numbers[..<i])\n}\n// Prints \"[10, 20, 30]\"\n\n\nComplexity: O(1)\n\nSee Also\nGenerating a Shaped Array Slice\nfunc first(where: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>?\nReturns the first element of the sequence that satisfies the given predicate.\nfunc last(where: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>?\nReturns the last element of the sequence that satisfies the given predicate.\nfunc dropFirst(Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence containing all but the given number of initial elements.\nfunc dropLast(Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence containing all but the specified number of final elements.\nfunc drop(while: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>\nReturns a subsequence by skipping elements while predicate returns true and returning the remaining elements.\nfunc joined() -> FlattenSequence<MLShapedArraySlice<Scalar>>\nReturns the elements of this sequence of sequences, concatenated.\nfunc joined<Separator>(separator: Separator) -> JoinedSequence<MLShapedArraySlice<Scalar>>\nReturns the concatenated elements of this sequence of sequences, inserting the given separator between each element.\nfunc min(by: (MLShapedArraySlice<Scalar>, MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>?\nReturns the minimum element in the sequence, using the given predicate as the comparison between elements.\nfunc max(by: (MLShapedArraySlice<Scalar>, MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>?\nReturns the maximum element in the sequence, using the given predicate as the comparison between elements.\nfunc prefix(Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence, up to the specified maximum length, containing the initial elements of the collection.\nfunc prefix(through: Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence from the start of the collection through the specified position.\nfunc prefix(while: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>\nReturns a subsequence containing the initial elements until predicate returns false and skipping the remaining elements.\nfunc suffix(Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence, up to the given maximum length, containing the final elements of the collection.\nfunc suffix(from: Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence from the specified position to the end of the collection.\nfunc trimPrefix<Prefix>(Prefix)\nRemoves the initial elements that satisfy the given predicate from the start of the sequence.\nfunc trimPrefix(while: (MLShapedArraySlice<Scalar>) -> Bool)\nTrims the array slice using a predicate.\nfunc trimmingPrefix<Prefix>(Prefix) -> MLShapedArraySlice<Scalar>\nReturns a new collection of the same type by removing initial elements that satisfy the given predicate from the start.\nfunc trimmingPrefix(while: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>\nfunc reversed() -> ReversedCollection<MLShapedArraySlice<Scalar>>\nReturns a view presenting the elements of the collection in reverse order.\nfunc shuffled() -> [MLShapedArraySlice<Scalar>]\nReturns the elements of the sequence, shuffled.\nfunc shuffled<T>(using: inout T) -> [MLShapedArraySlice<Scalar>]\nReturns the elements of the sequence, shuffled using the given generator as a source for randomness.\nfunc sorted<Comparator>(using: Comparator) -> [MLShapedArraySlice<Scalar>]\nGenerates a copy of the shaped array slice by sorting its slices with a comparator.\nfunc sorted<S, Comparator>(using: S) -> [MLShapedArraySlice<Scalar>]\nGenerates a copy of the shaped array slice by sorting its slices with a sequence of comparators.\nfunc sorted(by: (MLShapedArraySlice<Scalar>, MLShapedArraySlice<Scalar>) -> Bool) -> [MLShapedArraySlice<Scalar>]\nReturns the elements of the sequence, sorted using the given predicate as the comparison between elements.\nfunc split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (MLShapedArraySlice<Scalar>) -> Bool) -> [MLShapedArraySlice<Scalar>]\nReturns the longest possible subsequences of the collection, in order, that don’t contain elements satisfying the given predicate."
  },
  {
    "title": "prefix(through:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarrayslice/3763484-prefix",
    "html": "Parameters\nposition\n\nThe index of the last element to include in the resulting subsequence. position must be a valid index of the collection that is not equal to the endIndex property.\n\nReturn Value\n\nA subsequence up to, and including, the given position.\n\nDiscussion\n\nThe resulting subsequence includes the element at the position specified by the through parameter. The following example searches for the index of the number 40 in an array of integers, and then prints the prefix of the array up to, and including, that index:\n\nlet numbers = [10, 20, 30, 40, 50, 60]\nif let i = numbers.firstIndex(of: 40) {\n    print(numbers.prefix(through: i))\n}\n// Prints \"[10, 20, 30, 40]\"\n\n\nUsing the prefix(through:) method is equivalent to using a partial closed range as the collection’s subscript. The subscript notation is preferred over prefix(through:).\n\nif let i = numbers.firstIndex(of: 40) {\n    print(numbers[...i])\n}\n// Prints \"[10, 20, 30, 40]\"\n\n\nComplexity: O(1)\n\nSee Also\nGenerating a Shaped Array Slice\nfunc first(where: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>?\nReturns the first element of the sequence that satisfies the given predicate.\nfunc last(where: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>?\nReturns the last element of the sequence that satisfies the given predicate.\nfunc dropFirst(Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence containing all but the given number of initial elements.\nfunc dropLast(Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence containing all but the specified number of final elements.\nfunc drop(while: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>\nReturns a subsequence by skipping elements while predicate returns true and returning the remaining elements.\nfunc joined() -> FlattenSequence<MLShapedArraySlice<Scalar>>\nReturns the elements of this sequence of sequences, concatenated.\nfunc joined<Separator>(separator: Separator) -> JoinedSequence<MLShapedArraySlice<Scalar>>\nReturns the concatenated elements of this sequence of sequences, inserting the given separator between each element.\nfunc min(by: (MLShapedArraySlice<Scalar>, MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>?\nReturns the minimum element in the sequence, using the given predicate as the comparison between elements.\nfunc max(by: (MLShapedArraySlice<Scalar>, MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>?\nReturns the maximum element in the sequence, using the given predicate as the comparison between elements.\nfunc prefix(Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence, up to the specified maximum length, containing the initial elements of the collection.\nfunc prefix(upTo: Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence from the start of the collection up to, but not including, the specified position.\nfunc prefix(while: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>\nReturns a subsequence containing the initial elements until predicate returns false and skipping the remaining elements.\nfunc suffix(Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence, up to the given maximum length, containing the final elements of the collection.\nfunc suffix(from: Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence from the specified position to the end of the collection.\nfunc trimPrefix<Prefix>(Prefix)\nRemoves the initial elements that satisfy the given predicate from the start of the sequence.\nfunc trimPrefix(while: (MLShapedArraySlice<Scalar>) -> Bool)\nTrims the array slice using a predicate.\nfunc trimmingPrefix<Prefix>(Prefix) -> MLShapedArraySlice<Scalar>\nReturns a new collection of the same type by removing initial elements that satisfy the given predicate from the start.\nfunc trimmingPrefix(while: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>\nfunc reversed() -> ReversedCollection<MLShapedArraySlice<Scalar>>\nReturns a view presenting the elements of the collection in reverse order.\nfunc shuffled() -> [MLShapedArraySlice<Scalar>]\nReturns the elements of the sequence, shuffled.\nfunc shuffled<T>(using: inout T) -> [MLShapedArraySlice<Scalar>]\nReturns the elements of the sequence, shuffled using the given generator as a source for randomness.\nfunc sorted<Comparator>(using: Comparator) -> [MLShapedArraySlice<Scalar>]\nGenerates a copy of the shaped array slice by sorting its slices with a comparator.\nfunc sorted<S, Comparator>(using: S) -> [MLShapedArraySlice<Scalar>]\nGenerates a copy of the shaped array slice by sorting its slices with a sequence of comparators.\nfunc sorted(by: (MLShapedArraySlice<Scalar>, MLShapedArraySlice<Scalar>) -> Bool) -> [MLShapedArraySlice<Scalar>]\nReturns the elements of the sequence, sorted using the given predicate as the comparison between elements.\nfunc split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (MLShapedArraySlice<Scalar>) -> Bool) -> [MLShapedArraySlice<Scalar>]\nReturns the longest possible subsequences of the collection, in order, that don’t contain elements satisfying the given predicate."
  },
  {
    "title": "last(where:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarrayslice/3763464-last",
    "html": "Parameters\npredicate\n\nA closure that takes an element of the sequence as its argument and returns a Boolean value indicating whether the element is a match.\n\nReturn Value\n\nThe last element of the sequence that satisfies predicate, or nil if there is no element that satisfies predicate.\n\nDiscussion\n\nThis example uses the last(where:) method to find the last negative number in an array of integers:\n\nlet numbers = [3, 7, 4, -2, 9, -6, 10, 1]\nif let lastNegative = numbers.last(where: { $0 < 0 }) {\n    print(\"The last negative number is \\(lastNegative).\")\n}\n// Prints \"The last negative number is -6.\"\n\n\nComplexity: O(n), where n is the length of the collection.\n\nSee Also\nGenerating a Shaped Array Slice\nfunc first(where: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>?\nReturns the first element of the sequence that satisfies the given predicate.\nfunc dropFirst(Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence containing all but the given number of initial elements.\nfunc dropLast(Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence containing all but the specified number of final elements.\nfunc drop(while: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>\nReturns a subsequence by skipping elements while predicate returns true and returning the remaining elements.\nfunc joined() -> FlattenSequence<MLShapedArraySlice<Scalar>>\nReturns the elements of this sequence of sequences, concatenated.\nfunc joined<Separator>(separator: Separator) -> JoinedSequence<MLShapedArraySlice<Scalar>>\nReturns the concatenated elements of this sequence of sequences, inserting the given separator between each element.\nfunc min(by: (MLShapedArraySlice<Scalar>, MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>?\nReturns the minimum element in the sequence, using the given predicate as the comparison between elements.\nfunc max(by: (MLShapedArraySlice<Scalar>, MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>?\nReturns the maximum element in the sequence, using the given predicate as the comparison between elements.\nfunc prefix(Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence, up to the specified maximum length, containing the initial elements of the collection.\nfunc prefix(upTo: Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence from the start of the collection up to, but not including, the specified position.\nfunc prefix(through: Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence from the start of the collection through the specified position.\nfunc prefix(while: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>\nReturns a subsequence containing the initial elements until predicate returns false and skipping the remaining elements.\nfunc suffix(Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence, up to the given maximum length, containing the final elements of the collection.\nfunc suffix(from: Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence from the specified position to the end of the collection.\nfunc trimPrefix<Prefix>(Prefix)\nRemoves the initial elements that satisfy the given predicate from the start of the sequence.\nfunc trimPrefix(while: (MLShapedArraySlice<Scalar>) -> Bool)\nTrims the array slice using a predicate.\nfunc trimmingPrefix<Prefix>(Prefix) -> MLShapedArraySlice<Scalar>\nReturns a new collection of the same type by removing initial elements that satisfy the given predicate from the start.\nfunc trimmingPrefix(while: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>\nfunc reversed() -> ReversedCollection<MLShapedArraySlice<Scalar>>\nReturns a view presenting the elements of the collection in reverse order.\nfunc shuffled() -> [MLShapedArraySlice<Scalar>]\nReturns the elements of the sequence, shuffled.\nfunc shuffled<T>(using: inout T) -> [MLShapedArraySlice<Scalar>]\nReturns the elements of the sequence, shuffled using the given generator as a source for randomness.\nfunc sorted<Comparator>(using: Comparator) -> [MLShapedArraySlice<Scalar>]\nGenerates a copy of the shaped array slice by sorting its slices with a comparator.\nfunc sorted<S, Comparator>(using: S) -> [MLShapedArraySlice<Scalar>]\nGenerates a copy of the shaped array slice by sorting its slices with a sequence of comparators.\nfunc sorted(by: (MLShapedArraySlice<Scalar>, MLShapedArraySlice<Scalar>) -> Bool) -> [MLShapedArraySlice<Scalar>]\nReturns the elements of the sequence, sorted using the given predicate as the comparison between elements.\nfunc split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (MLShapedArraySlice<Scalar>) -> Bool) -> [MLShapedArraySlice<Scalar>]\nReturns the longest possible subsequences of the collection, in order, that don’t contain elements satisfying the given predicate."
  },
  {
    "title": "shuffle() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarrayslice/3763514-shuffle",
    "html": "Discussion\n\nUse the shuffle() method to randomly reorder the elements of an array.\n\nvar names = [\"Alejandro\", \"Camila\", \"Diego\", \"Luciana\", \"Luis\", \"Sofía\"]\nnames.shuffle()\n// names == [\"Luis\", \"Camila\", \"Luciana\", \"Sofía\", \"Alejandro\", \"Diego\"]\n\n\nThis method is equivalent to calling shuffle(using:), passing in the system’s default random generator.\n\nComplexity: O(n), where n is the length of the collection.\n\nSee Also\nModifying a Shaped Array Slice\nsubscript(Range<Int>) -> MLShapedArraySlice<Scalar>\nAccesses a slice with a range in the shaped array’s first dimension.\nfunc swapAt(Int, Int)\nExchanges the values at the specified indices of the collection.\nfunc partition(by: (MLShapedArraySlice<Scalar>) -> Bool) -> Int\nReorders the elements of the collection such that all the elements that match the given predicate are after all the elements that don’t match.\nfunc sort<Comparator>(using: Comparator)\nReorders a shaped array slice by sorting its slices with a comparator.\nfunc sort<S, Comparator>(using: S)\nReorders a shaped array slice by sorting its slices with a sequence of comparators.\nfunc sort(by: (MLShapedArraySlice<Scalar>, MLShapedArraySlice<Scalar>) -> Bool)\nSorts the collection in place, using the given predicate as the comparison between elements.\nfunc popFirst() -> MLShapedArraySlice<Scalar>?\nRemoves and returns the first element of the collection.\nfunc popLast() -> MLShapedArraySlice<Scalar>?\nRemoves and returns the last element of the collection.\nfunc removeFirst() -> MLShapedArraySlice<Scalar>\nRemoves and returns the first element of the collection.\nfunc removeLast() -> MLShapedArraySlice<Scalar>\nRemoves and returns the last element of the collection.\nfunc removeFirst(Int)\nRemoves the specified number of elements from the beginning of the collection.\nfunc removeLast(Int)\nRemoves the given number of elements from the end of the collection.\nfunc reverse()\nReverses the elements of the collection in place.\nfunc shuffle<T>(using: inout T)\nShuffles the collection in place, using the given generator as a source for randomness.\nfunc withContiguousMutableStorageIfAvailable<R>((inout UnsafeMutableBufferPointer<MLShapedArraySlice<Scalar>>) -> R) -> R?\nExecutes a closure on the collection’s contiguous storage."
  },
  {
    "title": "withContiguousMutableStorageIfAvailable(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarrayslice/3763563-withcontiguousmutablestorageifav",
    "html": "Parameters\nbody\n\nA closure that receives an in-out UnsafeMutableBufferPointer to the collection’s contiguous storage.\n\nReturn Value\n\nThe value returned from body, unless the collection doesn’t support contiguous storage, in which case the method ignores body and returns nil.\n\nDiscussion\n\nThis method calls body(buffer), where buffer provides access to the contiguous mutable storage of the entire collection. If the contiguous storage doesn’t exist, the collection creates it. If the collection doesn’t support an internal representation in the form of contiguous mutable storage, this method doesn’t call body — it immediately returns nil.\n\nThe optimizer can often eliminate bounds- and uniqueness-checking within an algorithm. When that fails, however, invoking the same algorithm on the buffer argument may let you trade safety for speed.\n\nAlways perform any necessary cleanup in the closure, because the method makes no guarantees about the state of the collection if the closure throws an error. Your changes to the collection may be absent from the collection after throwing the error, because the closure could receive a temporary copy rather than direct access to the collection’s storage.\n\nWarning\n\nYour body closure must not replace buffer. This leads to a crash in all implementations of this method within the standard library.\n\nSuccessive calls to this method may provide a different pointer on each call. Don’t store buffer outside of this method.\n\nA Collection that provides its own implementation of this method must provide contiguous storage to its elements in the same order as they appear in the collection. This guarantees that it’s possible to generate contiguous mutable storage to any of its subsequences by slicing buffer with a range formed from the distances to the subsequence’s startIndex and endIndex, respectively.\n\nNote\n\nThis documentation comment was inherited from MutableCollection.\n\nSee Also\nModifying a Shaped Array Slice\nsubscript(Range<Int>) -> MLShapedArraySlice<Scalar>\nAccesses a slice with a range in the shaped array’s first dimension.\nfunc swapAt(Int, Int)\nExchanges the values at the specified indices of the collection.\nfunc partition(by: (MLShapedArraySlice<Scalar>) -> Bool) -> Int\nReorders the elements of the collection such that all the elements that match the given predicate are after all the elements that don’t match.\nfunc sort<Comparator>(using: Comparator)\nReorders a shaped array slice by sorting its slices with a comparator.\nfunc sort<S, Comparator>(using: S)\nReorders a shaped array slice by sorting its slices with a sequence of comparators.\nfunc sort(by: (MLShapedArraySlice<Scalar>, MLShapedArraySlice<Scalar>) -> Bool)\nSorts the collection in place, using the given predicate as the comparison between elements.\nfunc popFirst() -> MLShapedArraySlice<Scalar>?\nRemoves and returns the first element of the collection.\nfunc popLast() -> MLShapedArraySlice<Scalar>?\nRemoves and returns the last element of the collection.\nfunc removeFirst() -> MLShapedArraySlice<Scalar>\nRemoves and returns the first element of the collection.\nfunc removeLast() -> MLShapedArraySlice<Scalar>\nRemoves and returns the last element of the collection.\nfunc removeFirst(Int)\nRemoves the specified number of elements from the beginning of the collection.\nfunc removeLast(Int)\nRemoves the given number of elements from the end of the collection.\nfunc reverse()\nReverses the elements of the collection in place.\nfunc shuffle()\nShuffles the collection in place.\nfunc shuffle<T>(using: inout T)\nShuffles the collection in place, using the given generator as a source for randomness."
  },
  {
    "title": "swapAt(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarray/3763343-swapat",
    "html": "Parameters\ni\n\nThe index of the first value to swap.\n\nj\n\nThe index of the second value to swap.\n\nDiscussion\n\nBoth parameters must be valid indices of the collection that are not equal to endIndex. Calling swapAt(_:_:) with the same index as both i and j has no effect.\n\nComplexity: O(1)\n\nSee Also\nModifying a Shaped Array\nfunc partition(by: (MLShapedArraySlice<Scalar>) -> Bool) -> Int\nReorders the elements of the collection such that all the elements that match the given predicate are after all the elements that don’t match.\nfunc sort<Comparator>(using: Comparator)\nReorders a shaped array by sorting its slices with a comparator.\nfunc sort<S, Comparator>(using: S)\nReorders a shaped array by sorting its slices with a sequence of comparators.\nfunc sort(by: (MLShapedArraySlice<Scalar>, MLShapedArraySlice<Scalar>) -> Bool)\nSorts the collection in place, using the given predicate as the comparison between elements.\nfunc reverse()\nReverses the elements of the collection in place.\nfunc shuffle()\nShuffles the collection in place.\nfunc shuffle<T>(using: inout T)\nShuffles the collection in place, using the given generator as a source for randomness.\nfunc withContiguousMutableStorageIfAvailable<R>((inout UnsafeMutableBufferPointer<MLShapedArraySlice<Scalar>>) -> R) -> R?\nExecutes a closure on the collection’s contiguous storage."
  },
  {
    "title": "filter(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarray/4162289-filter",
    "html": "See Also\nFinding an Index in a Shaped Array\nvar startIndex: Int\nThe index of the first element in the shaped array.\nvar endIndex: Int\nThe index of the last element in the shaped array.\nvar indices: Range<Int>\nThe index range of all the elements in the shaped array.\nfunc index(after: Int) -> Int\nReturns the index immediately after an index you provide.\nfunc index(Int, offsetBy: Int) -> Int\nReturns the index at a relative distance to an index you provide.\nfunc index(Int, offsetBy: Int, limitedBy: Int) -> Int?\nReturns an index that is the specified distance from the given index, unless that distance is beyond a given limiting index.\nfunc index(of: MLShapedArraySlice<Scalar>) -> Int?\nReturns the first index where the specified value appears in the collection.\nDeprecated\nfunc formIndex(before: inout Int)\nReplaces the given index with its predecessor.\nfunc formIndex(after: inout Int)\nReplaces the given index with its successor.\nfunc formIndex(inout Int, offsetBy: Int)\nOffsets the given index by the specified distance.\nfunc formIndex(inout Int, offsetBy: Int, limitedBy: Int) -> Bool\nOffsets the given index by the specified distance, or so that it equals the given limiting index.\nfunc firstIndex(where: (MLShapedArraySlice<Scalar>) -> Bool) -> Int?\nReturns the first index in which an element of the collection satisfies the given predicate.\nfunc firstIndex(of: MLShapedArraySlice<Scalar>) -> Int?\nReturns the first index where the specified value appears in the collection.\nfunc lastIndex(where: (MLShapedArraySlice<Scalar>) -> Bool) -> Int?\nReturns the index of the last element in the collection that matches the given predicate.\nfunc lastIndex(of: MLShapedArraySlice<Scalar>) -> Int?\nReturns the last index where the specified value appears in the collection.\nfunc ranges<C>(of: C) -> [Range<Int>]\nFinds and returns the ranges of the all occurrences of a given sequence within the collection.\nfunc starts<PossiblePrefix>(with: PossiblePrefix) -> Bool\nReturns a Boolean value indicating whether the initial elements of the sequence are the same as the elements in another sequence.\nfunc firstRange<C>(of: C) -> Range<Int>?\nFinds and returns the range of the first occurrence of a given collection within this collection."
  },
  {
    "title": "index(_:offsetBy:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarray/3763224-index",
    "html": "Parameters\nindex\n\nAn index in the shaped array.\n\ndistance\n\nAn integer that represents a relative distance from index.\n\nSee Also\nFinding an Index in a Shaped Array\nvar startIndex: Int\nThe index of the first element in the shaped array.\nvar endIndex: Int\nThe index of the last element in the shaped array.\nvar indices: Range<Int>\nThe index range of all the elements in the shaped array.\nfunc index(after: Int) -> Int\nReturns the index immediately after an index you provide.\nfunc index(Int, offsetBy: Int, limitedBy: Int) -> Int?\nReturns an index that is the specified distance from the given index, unless that distance is beyond a given limiting index.\nfunc index(of: MLShapedArraySlice<Scalar>) -> Int?\nReturns the first index where the specified value appears in the collection.\nDeprecated\nfunc filter(Predicate<MLShapedArraySlice<Scalar>>) -> [MLShapedArraySlice<Scalar>]\nfunc formIndex(before: inout Int)\nReplaces the given index with its predecessor.\nfunc formIndex(after: inout Int)\nReplaces the given index with its successor.\nfunc formIndex(inout Int, offsetBy: Int)\nOffsets the given index by the specified distance.\nfunc formIndex(inout Int, offsetBy: Int, limitedBy: Int) -> Bool\nOffsets the given index by the specified distance, or so that it equals the given limiting index.\nfunc firstIndex(where: (MLShapedArraySlice<Scalar>) -> Bool) -> Int?\nReturns the first index in which an element of the collection satisfies the given predicate.\nfunc firstIndex(of: MLShapedArraySlice<Scalar>) -> Int?\nReturns the first index where the specified value appears in the collection.\nfunc lastIndex(where: (MLShapedArraySlice<Scalar>) -> Bool) -> Int?\nReturns the index of the last element in the collection that matches the given predicate.\nfunc lastIndex(of: MLShapedArraySlice<Scalar>) -> Int?\nReturns the last index where the specified value appears in the collection.\nfunc ranges<C>(of: C) -> [Range<Int>]\nFinds and returns the ranges of the all occurrences of a given sequence within the collection.\nfunc starts<PossiblePrefix>(with: PossiblePrefix) -> Bool\nReturns a Boolean value indicating whether the initial elements of the sequence are the same as the elements in another sequence.\nfunc firstRange<C>(of: C) -> Range<Int>?\nFinds and returns the range of the first occurrence of a given collection within this collection."
  },
  {
    "title": "first | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarray/3763207-first",
    "html": "Discussion\n\nIf the collection is empty, the value of this property is nil.\n\nlet numbers = [10, 20, 30, 40, 50]\nif let firstNumber = numbers.first {\n    print(firstNumber)\n}\n// Prints \"10\"\n\nSee Also\nInspecting a Shaped Array’s Scalars\nvar last: MLShapedArraySlice<Scalar>?\nThe last element of the collection.\nvar publisher: Publishers.Sequence<MLShapedArray<Scalar>, Never>\nA publisher that produces the element in the shaped array as separate values.\nvar lazy: LazySequence<MLShapedArray<Scalar>>\nA sequence containing the same elements as this sequence, but on which some operations, such as map and filter, are implemented lazily."
  },
  {
    "title": "contains(where:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarray/3763186-contains",
    "html": "Parameters\npredicate\n\nA closure that takes an element of the sequence as its argument and returns a Boolean value that indicates whether the passed element represents a match.\n\nReturn Value\n\ntrue if the sequence contains an element that satisfies predicate; otherwise, false.\n\nDiscussion\n\nYou can use the predicate to check for an element of a type that doesn’t conform to the Equatable protocol, such as the HTTPResponse enumeration in this example.\n\nenum HTTPResponse {\n    case ok\n    case error(Int)\n}\n\n\nlet lastThreeResponses: [HTTPResponse] = [.ok, .ok, .error(404)]\nlet hadError = lastThreeResponses.contains { element in\n    if case .error = element {\n        return true\n    } else {\n        return false\n    }\n}\n// 'hadError' == true\n\n\nAlternatively, a predicate can be satisfied by a range of Equatable elements or a general condition. This example shows how you can check an array for an expense greater than $100.\n\nlet expenses = [21.37, 55.21, 9.32, 10.18, 388.77, 11.41]\nlet hasBigPurchase = expenses.contains { $0 > 100 }\n// 'hasBigPurchase' == true\n\n\nComplexity: O(n), where n is the length of the sequence.\n\nSee Also\nInspecting a Slice of a Shaped Array\nfunc allSatisfy((MLShapedArraySlice<Scalar>) -> Bool) -> Bool\nReturns a Boolean value indicating whether every element of a sequence satisfies a given predicate.\nfunc contains<C>(C) -> Bool\nReturns a Boolean value indicating whether the collection contains the given sequence.\nfunc contains(MLShapedArraySlice<Scalar>) -> Bool\nReturns a Boolean value indicating whether the sequence contains the given element.\nsubscript<R>(R) -> MLShapedArraySlice<Scalar>\nAccesses the contiguous subrange of the collection’s elements specified by a range expression.\nfunc makeIterator() -> IndexingIterator<MLShapedArray<Scalar>>\nReturns an iterator over the elements of the collection.\nfunc forEach((MLShapedArraySlice<Scalar>) -> Void)\nCalls the given closure on each element in the sequence in the same order as a for-in loop.\nfunc enumerated() -> EnumeratedSequence<MLShapedArray<Scalar>>\nReturns a sequence of pairs (n, x), where n represents a consecutive integer starting at zero and x represents an element of the sequence.\nfunc randomElement() -> MLShapedArraySlice<Scalar>?\nReturns a random element of the collection.\nfunc randomElement<T>(using: inout T) -> MLShapedArraySlice<Scalar>?\nReturns a random element of the collection, using the given generator as a source for randomness.\nfunc withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<MLShapedArraySlice<Scalar>>) -> R) -> R?\nExecutes a closure on the sequence’s contiguous storage."
  },
  {
    "title": "difference(from:by:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarray/3763191-difference",
    "html": "Parameters\nother\n\nThe base state.\n\nareEquivalent\n\nA closure that returns a Boolean value indicating whether two elements are equivalent.\n\nReturn Value\n\nThe difference needed to produce the receiver’s state from the parameter’s state.\n\nDiscussion\n\nThis function does not infer element moves. If you need to infer moves, call the inferringMoves() method on the resulting difference.\n\nComplexity: Worst case performance is O(n * m), where n is the count of this collection and m is other.count. You can expect faster execution when the collections share many common elements.\n\nSee Also\nComparing Shaped Arrays\nfunc compare<Comparator>(Comparator.Compared, Comparator.Compared) -> ComparisonResult\nReturns a comparison result by comparing two shaped array slices.\nfunc difference<C>(from: C) -> CollectionDifference<MLShapedArraySlice<Scalar>>\nReturns the difference needed to produce this collection’s ordered elements from the given collection.\nfunc elementsEqual<OtherSequence>(OtherSequence, by: (MLShapedArraySlice<Scalar>, OtherSequence.Element) -> Bool) -> Bool\nReturns a Boolean value indicating whether this sequence and another sequence contain equivalent elements in the same order, using the given predicate as the equivalence test.\nfunc elementsEqual<OtherSequence>(OtherSequence) -> Bool\nReturns a Boolean value indicating whether this sequence and another sequence contain the same elements in the same order.\nfunc starts<PossiblePrefix>(with: PossiblePrefix, by: (MLShapedArraySlice<Scalar>, PossiblePrefix.Element) -> Bool) -> Bool\nReturns a Boolean value indicating whether the initial elements of the sequence are equivalent to the elements in another sequence, using the given predicate as the equivalence test.\nfunc lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (MLShapedArraySlice<Scalar>, MLShapedArraySlice<Scalar>) -> Bool) -> Bool\nReturns a Boolean value indicating whether the sequence precedes another sequence in a lexicographical (dictionary) ordering, using the given predicate to compare elements."
  },
  {
    "title": "subscript(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarrayprotocol/3763376-subscript",
    "html": "See Also\nMLShapedArrayProtocol Implementations\nsubscript(MLShapedArrayRangeExpression) -> MLShapedArraySlice<Self.Scalar>\nsubscript(MLShapedArrayRangeExpression...) -> MLShapedArraySlice<Self.Scalar>\nsubscript(Int) -> MLShapedArraySlice<Self.Scalar>\nsubscript(Int...) -> MLShapedArraySlice<Self.Scalar>\nsubscript<C>(C) -> MLShapedArraySlice<Self.Scalar>\nsubscript((UnboundedRange_) -> Void) -> MLShapedArraySlice<Self.Scalar>"
  },
  {
    "title": "formatted(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarray/3763222-formatted",
    "html": "Parameters\nstyle\n\nA format style."
  },
  {
    "title": "filter(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarray/3763205-filter",
    "html": "Parameters\nisIncluded\n\nA closure that takes an element of the sequence as its argument and returns a Boolean value indicating whether the element should be included in the returned array.\n\nReturn Value\n\nAn array of the elements that isIncluded allowed.\n\nDiscussion\n\nIn this example, filter(_:) is used to include only names shorter than five characters.\n\nlet cast = [\"Vivien\", \"Marlon\", \"Kim\", \"Karl\"]\nlet shortNames = cast.filter { $0.count < 5 }\nprint(shortNames)\n// Prints \"[\"Kim\", \"Karl\"]\"\n\n\nComplexity: O(n), where n is the length of the sequence.\n\nSee Also\nTransforming a Shaped Array\nfunc map<T>((MLShapedArraySlice<Scalar>) -> T) -> [T]\nReturns an array containing the results of mapping the given closure over the sequence’s elements.\nfunc compactMap<ElementOfResult>((MLShapedArraySlice<Scalar>) -> ElementOfResult?) -> [ElementOfResult]\nReturns an array containing the non-nil results of calling the given transformation with each element of this sequence.\nfunc flatMap<SegmentOfResult>((MLShapedArraySlice<Scalar>) -> SegmentOfResult) -> [SegmentOfResult.Element]\nReturns an array containing the concatenated results of calling the given transformation with each element of this sequence.\nfunc flatMap<ElementOfResult>((MLShapedArraySlice<Scalar>) -> ElementOfResult?) -> [ElementOfResult]\nGenerates an array that concatenates the sequences from a transform closure that returns an optional.\nDeprecated\nfunc reduce<Result>(Result, (Result, MLShapedArraySlice<Scalar>) -> Result) -> Result\nReturns the result of combining the elements of the sequence using the given closure.\nfunc reduce<Result>(into: Result, (inout Result, MLShapedArraySlice<Scalar>) -> ()) -> Result\nReturns the result of combining the elements of the sequence using the given closure."
  },
  {
    "title": "flatMap(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarray/3763213-flatmap",
    "html": "Parameters\ntransform\n\nA closure that accepts an element of this sequence as its argument and returns a sequence or collection.\n\nReturn Value\n\nThe resulting flattened array.\n\nDiscussion\n\nUse this method to receive a single-level collection when your transformation produces a sequence or collection for each element.\n\nIn this example, note the difference in the result of using map and flatMap with a transformation that returns an array.\n\nlet numbers = [1, 2, 3, 4]\n\n\nlet mapped = numbers.map { Array(repeating: $0, count: $0) }\n// [[1], [2, 2], [3, 3, 3], [4, 4, 4, 4]]\n\n\nlet flatMapped = numbers.flatMap { Array(repeating: $0, count: $0) }\n// [1, 2, 2, 3, 3, 3, 4, 4, 4, 4]\n\n\nIn fact, s.flatMap(transform) is equivalent to Array(s.map(transform).joined()).\n\nComplexity: O(m + n), where n is the length of this sequence and m is the length of the result.\n\nSee Also\nTransforming a Shaped Array\nfunc map<T>((MLShapedArraySlice<Scalar>) -> T) -> [T]\nReturns an array containing the results of mapping the given closure over the sequence’s elements.\nfunc compactMap<ElementOfResult>((MLShapedArraySlice<Scalar>) -> ElementOfResult?) -> [ElementOfResult]\nReturns an array containing the non-nil results of calling the given transformation with each element of this sequence.\nfunc flatMap<ElementOfResult>((MLShapedArraySlice<Scalar>) -> ElementOfResult?) -> [ElementOfResult]\nGenerates an array that concatenates the sequences from a transform closure that returns an optional.\nDeprecated\nfunc filter((MLShapedArraySlice<Scalar>) -> Bool) -> [MLShapedArraySlice<Scalar>]\nReturns an array containing, in order, the elements of the sequence that satisfy the given predicate.\nfunc reduce<Result>(Result, (Result, MLShapedArraySlice<Scalar>) -> Result) -> Result\nReturns the result of combining the elements of the sequence using the given closure.\nfunc reduce<Result>(into: Result, (inout Result, MLShapedArraySlice<Scalar>) -> ()) -> Result\nReturns the result of combining the elements of the sequence using the given closure."
  },
  {
    "title": "trimmingPrefix(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarray/4135028-trimmingprefix",
    "html": "Parameters\npredicate\n\nA closure that takes an element of the sequence as its argument and returns a Boolean value indicating whether the element should be removed from the collection.\n\nReturn Value\n\nA collection containing the elements of the collection that are not removed by predicate.\n\nSee Also\nGenerating a Shaped Array Slice\nfunc first(where: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>?\nReturns the first element of the sequence that satisfies the given predicate.\nfunc last(where: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>?\nReturns the last element of the sequence that satisfies the given predicate.\nfunc dropFirst(Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence containing all but the given number of initial elements.\nfunc dropLast(Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence containing all but the specified number of final elements.\nfunc drop(while: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>\nReturns a subsequence by skipping elements while predicate returns true and returning the remaining elements.\nfunc min(by: (MLShapedArraySlice<Scalar>, MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>?\nReturns the minimum element in the sequence, using the given predicate as the comparison between elements.\nfunc max(by: (MLShapedArraySlice<Scalar>, MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>?\nReturns the maximum element in the sequence, using the given predicate as the comparison between elements.\nfunc prefix(Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence, up to the specified maximum length, containing the initial elements of the collection.\nfunc prefix(upTo: Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence from the start of the collection up to, but not including, the specified position.\nfunc prefix(through: Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence from the start of the collection through the specified position.\nfunc prefix(while: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>\nReturns a subsequence containing the initial elements until predicate returns false and skipping the remaining elements.\nfunc suffix(Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence, up to the given maximum length, containing the final elements of the collection.\nfunc suffix(from: Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence from the specified position to the end of the collection.\nfunc sorted<Comparator>(using: Comparator) -> [MLShapedArraySlice<Scalar>]\nGenerates a copy of the shaped array by sorting its slices with a comparator.\nfunc sorted<S, Comparator>(using: S) -> [MLShapedArraySlice<Scalar>]\nGenerates a copy of the shaped array by sorting its slices with a sequence of comparators.\nfunc sorted(by: (MLShapedArraySlice<Scalar>, MLShapedArraySlice<Scalar>) -> Bool) -> [MLShapedArraySlice<Scalar>]\nReturns the elements of the sequence, sorted using the given predicate as the comparison between elements.\nfunc shuffled() -> [MLShapedArraySlice<Scalar>]\nReturns the elements of the sequence, shuffled.\nfunc shuffled<T>(using: inout T) -> [MLShapedArraySlice<Scalar>]\nReturns the elements of the sequence, shuffled using the given generator as a source for randomness.\nfunc trimmingPrefix(while: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>"
  },
  {
    "title": "map(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarray/3763259-map",
    "html": "Parameters\ntransform\n\nA mapping closure. transform accepts an element of this sequence as its parameter and returns a transformed value of the same or of a different type.\n\nReturn Value\n\nAn array containing the transformed elements of this sequence.\n\nDiscussion\n\nIn this example, map is used first to convert the names in the array to lowercase strings and then to count their characters.\n\nlet cast = [\"Vivien\", \"Marlon\", \"Kim\", \"Karl\"]\nlet lowercaseNames = cast.map { $0.lowercased() }\n// 'lowercaseNames' == [\"vivien\", \"marlon\", \"kim\", \"karl\"]\nlet letterCounts = cast.map { $0.count }\n// 'letterCounts' == [6, 6, 3, 4]\n\nSee Also\nTransforming a Shaped Array\nfunc compactMap<ElementOfResult>((MLShapedArraySlice<Scalar>) -> ElementOfResult?) -> [ElementOfResult]\nReturns an array containing the non-nil results of calling the given transformation with each element of this sequence.\nfunc flatMap<SegmentOfResult>((MLShapedArraySlice<Scalar>) -> SegmentOfResult) -> [SegmentOfResult.Element]\nReturns an array containing the concatenated results of calling the given transformation with each element of this sequence.\nfunc flatMap<ElementOfResult>((MLShapedArraySlice<Scalar>) -> ElementOfResult?) -> [ElementOfResult]\nGenerates an array that concatenates the sequences from a transform closure that returns an optional.\nDeprecated\nfunc filter((MLShapedArraySlice<Scalar>) -> Bool) -> [MLShapedArraySlice<Scalar>]\nReturns an array containing, in order, the elements of the sequence that satisfy the given predicate.\nfunc reduce<Result>(Result, (Result, MLShapedArraySlice<Scalar>) -> Result) -> Result\nReturns the result of combining the elements of the sequence using the given closure.\nfunc reduce<Result>(into: Result, (inout Result, MLShapedArraySlice<Scalar>) -> ()) -> Result\nReturns the result of combining the elements of the sequence using the given closure."
  },
  {
    "title": "shuffled() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarray/3763300-shuffled",
    "html": "Return Value\n\nA shuffled array of this sequence’s elements.\n\nDiscussion\n\nFor example, you can shuffle the numbers between 0 and 9 by calling the shuffled() method on that range:\n\nlet numbers = 0...9\nlet shuffledNumbers = numbers.shuffled()\n// shuffledNumbers == [1, 7, 6, 2, 8, 9, 4, 3, 5, 0]\n\n\nThis method is equivalent to calling shuffled(using:), passing in the system’s default random generator.\n\nComplexity: O(n), where n is the length of the sequence.\n\nSee Also\nGenerating a Shaped Array Slice\nfunc first(where: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>?\nReturns the first element of the sequence that satisfies the given predicate.\nfunc last(where: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>?\nReturns the last element of the sequence that satisfies the given predicate.\nfunc dropFirst(Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence containing all but the given number of initial elements.\nfunc dropLast(Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence containing all but the specified number of final elements.\nfunc drop(while: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>\nReturns a subsequence by skipping elements while predicate returns true and returning the remaining elements.\nfunc min(by: (MLShapedArraySlice<Scalar>, MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>?\nReturns the minimum element in the sequence, using the given predicate as the comparison between elements.\nfunc max(by: (MLShapedArraySlice<Scalar>, MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>?\nReturns the maximum element in the sequence, using the given predicate as the comparison between elements.\nfunc prefix(Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence, up to the specified maximum length, containing the initial elements of the collection.\nfunc prefix(upTo: Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence from the start of the collection up to, but not including, the specified position.\nfunc prefix(through: Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence from the start of the collection through the specified position.\nfunc prefix(while: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>\nReturns a subsequence containing the initial elements until predicate returns false and skipping the remaining elements.\nfunc suffix(Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence, up to the given maximum length, containing the final elements of the collection.\nfunc suffix(from: Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence from the specified position to the end of the collection.\nfunc sorted<Comparator>(using: Comparator) -> [MLShapedArraySlice<Scalar>]\nGenerates a copy of the shaped array by sorting its slices with a comparator.\nfunc sorted<S, Comparator>(using: S) -> [MLShapedArraySlice<Scalar>]\nGenerates a copy of the shaped array by sorting its slices with a sequence of comparators.\nfunc sorted(by: (MLShapedArraySlice<Scalar>, MLShapedArraySlice<Scalar>) -> Bool) -> [MLShapedArraySlice<Scalar>]\nReturns the elements of the sequence, sorted using the given predicate as the comparison between elements.\nfunc shuffled<T>(using: inout T) -> [MLShapedArraySlice<Scalar>]\nReturns the elements of the sequence, shuffled using the given generator as a source for randomness.\nfunc trimmingPrefix<Prefix>(Prefix) -> MLShapedArraySlice<Scalar>\nReturns a new collection of the same type by removing initial elements that satisfy the given predicate from the start.\nfunc trimmingPrefix(while: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>"
  },
  {
    "title": "prefix(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarray/3763268-prefix",
    "html": "Parameters\nmaxLength\n\nThe maximum number of elements to return. maxLength must be greater than or equal to zero.\n\nReturn Value\n\nA subsequence starting at the beginning of this collection with at most maxLength elements.\n\nDiscussion\n\nIf the maximum length exceeds the number of elements in the collection, the result contains all the elements in the collection.\n\nlet numbers = [1, 2, 3, 4, 5]\nprint(numbers.prefix(2))\n// Prints \"[1, 2]\"\nprint(numbers.prefix(10))\n// Prints \"[1, 2, 3, 4, 5]\"\n\n\nComplexity: O(1) if the collection conforms to RandomAccessCollection; otherwise, O(k), where k is the number of elements to select from the beginning of the collection.\n\nSee Also\nGenerating a Shaped Array Slice\nfunc first(where: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>?\nReturns the first element of the sequence that satisfies the given predicate.\nfunc last(where: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>?\nReturns the last element of the sequence that satisfies the given predicate.\nfunc dropFirst(Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence containing all but the given number of initial elements.\nfunc dropLast(Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence containing all but the specified number of final elements.\nfunc drop(while: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>\nReturns a subsequence by skipping elements while predicate returns true and returning the remaining elements.\nfunc min(by: (MLShapedArraySlice<Scalar>, MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>?\nReturns the minimum element in the sequence, using the given predicate as the comparison between elements.\nfunc max(by: (MLShapedArraySlice<Scalar>, MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>?\nReturns the maximum element in the sequence, using the given predicate as the comparison between elements.\nfunc prefix(upTo: Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence from the start of the collection up to, but not including, the specified position.\nfunc prefix(through: Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence from the start of the collection through the specified position.\nfunc prefix(while: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>\nReturns a subsequence containing the initial elements until predicate returns false and skipping the remaining elements.\nfunc suffix(Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence, up to the given maximum length, containing the final elements of the collection.\nfunc suffix(from: Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence from the specified position to the end of the collection.\nfunc sorted<Comparator>(using: Comparator) -> [MLShapedArraySlice<Scalar>]\nGenerates a copy of the shaped array by sorting its slices with a comparator.\nfunc sorted<S, Comparator>(using: S) -> [MLShapedArraySlice<Scalar>]\nGenerates a copy of the shaped array by sorting its slices with a sequence of comparators.\nfunc sorted(by: (MLShapedArraySlice<Scalar>, MLShapedArraySlice<Scalar>) -> Bool) -> [MLShapedArraySlice<Scalar>]\nReturns the elements of the sequence, sorted using the given predicate as the comparison between elements.\nfunc shuffled() -> [MLShapedArraySlice<Scalar>]\nReturns the elements of the sequence, shuffled.\nfunc shuffled<T>(using: inout T) -> [MLShapedArraySlice<Scalar>]\nReturns the elements of the sequence, shuffled using the given generator as a source for randomness.\nfunc trimmingPrefix<Prefix>(Prefix) -> MLShapedArraySlice<Scalar>\nReturns a new collection of the same type by removing initial elements that satisfy the given predicate from the start.\nfunc trimmingPrefix(while: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>"
  },
  {
    "title": "trimmingPrefix(while:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarray/4048917-trimmingprefix",
    "html": "See Also\nGenerating a Shaped Array Slice\nfunc first(where: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>?\nReturns the first element of the sequence that satisfies the given predicate.\nfunc last(where: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>?\nReturns the last element of the sequence that satisfies the given predicate.\nfunc dropFirst(Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence containing all but the given number of initial elements.\nfunc dropLast(Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence containing all but the specified number of final elements.\nfunc drop(while: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>\nReturns a subsequence by skipping elements while predicate returns true and returning the remaining elements.\nfunc min(by: (MLShapedArraySlice<Scalar>, MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>?\nReturns the minimum element in the sequence, using the given predicate as the comparison between elements.\nfunc max(by: (MLShapedArraySlice<Scalar>, MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>?\nReturns the maximum element in the sequence, using the given predicate as the comparison between elements.\nfunc prefix(Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence, up to the specified maximum length, containing the initial elements of the collection.\nfunc prefix(upTo: Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence from the start of the collection up to, but not including, the specified position.\nfunc prefix(through: Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence from the start of the collection through the specified position.\nfunc prefix(while: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>\nReturns a subsequence containing the initial elements until predicate returns false and skipping the remaining elements.\nfunc suffix(Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence, up to the given maximum length, containing the final elements of the collection.\nfunc suffix(from: Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence from the specified position to the end of the collection.\nfunc sorted<Comparator>(using: Comparator) -> [MLShapedArraySlice<Scalar>]\nGenerates a copy of the shaped array by sorting its slices with a comparator.\nfunc sorted<S, Comparator>(using: S) -> [MLShapedArraySlice<Scalar>]\nGenerates a copy of the shaped array by sorting its slices with a sequence of comparators.\nfunc sorted(by: (MLShapedArraySlice<Scalar>, MLShapedArraySlice<Scalar>) -> Bool) -> [MLShapedArraySlice<Scalar>]\nReturns the elements of the sequence, sorted using the given predicate as the comparison between elements.\nfunc shuffled() -> [MLShapedArraySlice<Scalar>]\nReturns the elements of the sequence, shuffled.\nfunc shuffled<T>(using: inout T) -> [MLShapedArraySlice<Scalar>]\nReturns the elements of the sequence, shuffled using the given generator as a source for randomness.\nfunc trimmingPrefix<Prefix>(Prefix) -> MLShapedArraySlice<Scalar>\nReturns a new collection of the same type by removing initial elements that satisfy the given predicate from the start."
  },
  {
    "title": "suffix(from:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarray/3763339-suffix",
    "html": "Parameters\nstart\n\nThe index at which to start the resulting subsequence. start must be a valid index of the collection.\n\nReturn Value\n\nA subsequence starting at the start position.\n\nDiscussion\n\nThe following example searches for the index of the number 40 in an array of integers, and then prints the suffix of the array starting at that index:\n\nlet numbers = [10, 20, 30, 40, 50, 60]\nif let i = numbers.firstIndex(of: 40) {\n    print(numbers.suffix(from: i))\n}\n// Prints \"[40, 50, 60]\"\n\n\nPassing the collection’s endIndex as the start parameter results in an empty subsequence.\n\nprint(numbers.suffix(from: numbers.endIndex))\n// Prints \"[]\"\n\n\nUsing the suffix(from:) method is equivalent to using a partial range from the index as the collection’s subscript. The subscript notation is preferred over suffix(from:).\n\nif let i = numbers.firstIndex(of: 40) {\n    print(numbers[i...])\n}\n// Prints \"[40, 50, 60]\"\n\n\nComplexity: O(1)\n\nSee Also\nGenerating a Shaped Array Slice\nfunc first(where: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>?\nReturns the first element of the sequence that satisfies the given predicate.\nfunc last(where: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>?\nReturns the last element of the sequence that satisfies the given predicate.\nfunc dropFirst(Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence containing all but the given number of initial elements.\nfunc dropLast(Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence containing all but the specified number of final elements.\nfunc drop(while: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>\nReturns a subsequence by skipping elements while predicate returns true and returning the remaining elements.\nfunc min(by: (MLShapedArraySlice<Scalar>, MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>?\nReturns the minimum element in the sequence, using the given predicate as the comparison between elements.\nfunc max(by: (MLShapedArraySlice<Scalar>, MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>?\nReturns the maximum element in the sequence, using the given predicate as the comparison between elements.\nfunc prefix(Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence, up to the specified maximum length, containing the initial elements of the collection.\nfunc prefix(upTo: Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence from the start of the collection up to, but not including, the specified position.\nfunc prefix(through: Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence from the start of the collection through the specified position.\nfunc prefix(while: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>\nReturns a subsequence containing the initial elements until predicate returns false and skipping the remaining elements.\nfunc suffix(Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence, up to the given maximum length, containing the final elements of the collection.\nfunc sorted<Comparator>(using: Comparator) -> [MLShapedArraySlice<Scalar>]\nGenerates a copy of the shaped array by sorting its slices with a comparator.\nfunc sorted<S, Comparator>(using: S) -> [MLShapedArraySlice<Scalar>]\nGenerates a copy of the shaped array by sorting its slices with a sequence of comparators.\nfunc sorted(by: (MLShapedArraySlice<Scalar>, MLShapedArraySlice<Scalar>) -> Bool) -> [MLShapedArraySlice<Scalar>]\nReturns the elements of the sequence, sorted using the given predicate as the comparison between elements.\nfunc shuffled() -> [MLShapedArraySlice<Scalar>]\nReturns the elements of the sequence, shuffled.\nfunc shuffled<T>(using: inout T) -> [MLShapedArraySlice<Scalar>]\nReturns the elements of the sequence, shuffled using the given generator as a source for randomness.\nfunc trimmingPrefix<Prefix>(Prefix) -> MLShapedArraySlice<Scalar>\nReturns a new collection of the same type by removing initial elements that satisfy the given predicate from the start.\nfunc trimmingPrefix(while: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>"
  },
  {
    "title": "suffix(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarray/3763337-suffix",
    "html": "Parameters\nmaxLength\n\nThe maximum number of elements to return. maxLength must be greater than or equal to zero.\n\nReturn Value\n\nA subsequence terminating at the end of the collection with at most maxLength elements.\n\nDiscussion\n\nIf the maximum length exceeds the number of elements in the collection, the result contains the entire collection.\n\nlet numbers = [1, 2, 3, 4, 5]\nprint(numbers.suffix(2))\n// Prints \"[4, 5]\"\nprint(numbers.suffix(10))\n// Prints \"[1, 2, 3, 4, 5]\"\n\n\nComplexity: O(1) if the collection conforms to RandomAccessCollection; otherwise, O(k), where k is equal to maxLength.\n\nSee Also\nGenerating a Shaped Array Slice\nfunc first(where: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>?\nReturns the first element of the sequence that satisfies the given predicate.\nfunc last(where: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>?\nReturns the last element of the sequence that satisfies the given predicate.\nfunc dropFirst(Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence containing all but the given number of initial elements.\nfunc dropLast(Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence containing all but the specified number of final elements.\nfunc drop(while: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>\nReturns a subsequence by skipping elements while predicate returns true and returning the remaining elements.\nfunc min(by: (MLShapedArraySlice<Scalar>, MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>?\nReturns the minimum element in the sequence, using the given predicate as the comparison between elements.\nfunc max(by: (MLShapedArraySlice<Scalar>, MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>?\nReturns the maximum element in the sequence, using the given predicate as the comparison between elements.\nfunc prefix(Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence, up to the specified maximum length, containing the initial elements of the collection.\nfunc prefix(upTo: Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence from the start of the collection up to, but not including, the specified position.\nfunc prefix(through: Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence from the start of the collection through the specified position.\nfunc prefix(while: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>\nReturns a subsequence containing the initial elements until predicate returns false and skipping the remaining elements.\nfunc suffix(from: Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence from the specified position to the end of the collection.\nfunc sorted<Comparator>(using: Comparator) -> [MLShapedArraySlice<Scalar>]\nGenerates a copy of the shaped array by sorting its slices with a comparator.\nfunc sorted<S, Comparator>(using: S) -> [MLShapedArraySlice<Scalar>]\nGenerates a copy of the shaped array by sorting its slices with a sequence of comparators.\nfunc sorted(by: (MLShapedArraySlice<Scalar>, MLShapedArraySlice<Scalar>) -> Bool) -> [MLShapedArraySlice<Scalar>]\nReturns the elements of the sequence, sorted using the given predicate as the comparison between elements.\nfunc shuffled() -> [MLShapedArraySlice<Scalar>]\nReturns the elements of the sequence, shuffled.\nfunc shuffled<T>(using: inout T) -> [MLShapedArraySlice<Scalar>]\nReturns the elements of the sequence, shuffled using the given generator as a source for randomness.\nfunc trimmingPrefix<Prefix>(Prefix) -> MLShapedArraySlice<Scalar>\nReturns a new collection of the same type by removing initial elements that satisfy the given predicate from the start.\nfunc trimmingPrefix(while: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>"
  },
  {
    "title": "prefix(through:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarray/3763270-prefix",
    "html": "Parameters\nposition\n\nThe index of the last element to include in the resulting subsequence. position must be a valid index of the collection that is not equal to the endIndex property.\n\nReturn Value\n\nA subsequence up to, and including, the given position.\n\nDiscussion\n\nThe resulting subsequence includes the element at the position specified by the through parameter. The following example searches for the index of the number 40 in an array of integers, and then prints the prefix of the array up to, and including, that index:\n\nlet numbers = [10, 20, 30, 40, 50, 60]\nif let i = numbers.firstIndex(of: 40) {\n    print(numbers.prefix(through: i))\n}\n// Prints \"[10, 20, 30, 40]\"\n\n\nUsing the prefix(through:) method is equivalent to using a partial closed range as the collection’s subscript. The subscript notation is preferred over prefix(through:).\n\nif let i = numbers.firstIndex(of: 40) {\n    print(numbers[...i])\n}\n// Prints \"[10, 20, 30, 40]\"\n\n\nComplexity: O(1)\n\nSee Also\nGenerating a Shaped Array Slice\nfunc first(where: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>?\nReturns the first element of the sequence that satisfies the given predicate.\nfunc last(where: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>?\nReturns the last element of the sequence that satisfies the given predicate.\nfunc dropFirst(Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence containing all but the given number of initial elements.\nfunc dropLast(Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence containing all but the specified number of final elements.\nfunc drop(while: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>\nReturns a subsequence by skipping elements while predicate returns true and returning the remaining elements.\nfunc min(by: (MLShapedArraySlice<Scalar>, MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>?\nReturns the minimum element in the sequence, using the given predicate as the comparison between elements.\nfunc max(by: (MLShapedArraySlice<Scalar>, MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>?\nReturns the maximum element in the sequence, using the given predicate as the comparison between elements.\nfunc prefix(Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence, up to the specified maximum length, containing the initial elements of the collection.\nfunc prefix(upTo: Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence from the start of the collection up to, but not including, the specified position.\nfunc prefix(while: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>\nReturns a subsequence containing the initial elements until predicate returns false and skipping the remaining elements.\nfunc suffix(Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence, up to the given maximum length, containing the final elements of the collection.\nfunc suffix(from: Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence from the specified position to the end of the collection.\nfunc sorted<Comparator>(using: Comparator) -> [MLShapedArraySlice<Scalar>]\nGenerates a copy of the shaped array by sorting its slices with a comparator.\nfunc sorted<S, Comparator>(using: S) -> [MLShapedArraySlice<Scalar>]\nGenerates a copy of the shaped array by sorting its slices with a sequence of comparators.\nfunc sorted(by: (MLShapedArraySlice<Scalar>, MLShapedArraySlice<Scalar>) -> Bool) -> [MLShapedArraySlice<Scalar>]\nReturns the elements of the sequence, sorted using the given predicate as the comparison between elements.\nfunc shuffled() -> [MLShapedArraySlice<Scalar>]\nReturns the elements of the sequence, shuffled.\nfunc shuffled<T>(using: inout T) -> [MLShapedArraySlice<Scalar>]\nReturns the elements of the sequence, shuffled using the given generator as a source for randomness.\nfunc trimmingPrefix<Prefix>(Prefix) -> MLShapedArraySlice<Scalar>\nReturns a new collection of the same type by removing initial elements that satisfy the given predicate from the start.\nfunc trimmingPrefix(while: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>"
  },
  {
    "title": "min(by:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarray/3763263-min",
    "html": "Parameters\nareInIncreasingOrder\n\nA predicate that returns true if its first argument should be ordered before its second argument; otherwise, false.\n\nReturn Value\n\nThe sequence’s minimum element, according to areInIncreasingOrder. If the sequence has no elements, returns nil.\n\nDiscussion\n\nThe predicate must be a strict weak ordering over the elements. That is, for any elements a, b, and c, the following conditions must hold:\n\nareInIncreasingOrder(a, a) is always false. (Irreflexivity)\n\nIf areInIncreasingOrder(a, b) and areInIncreasingOrder(b, c) are both true, then areInIncreasingOrder(a, c) is also true. (Transitive comparability)\n\nTwo elements are incomparable if neither is ordered before the other according to the predicate. If a and b are incomparable, and b and c are incomparable, then a and c are also incomparable. (Transitive incomparability)\n\nThis example shows how to use the min(by:) method on a dictionary to find the key-value pair with the lowest value.\n\nlet hues = [\"Heliotrope\": 296, \"Coral\": 16, \"Aquamarine\": 156]\nlet leastHue = hues.min { a, b in a.value < b.value }\nprint(leastHue)\n// Prints \"Optional((key: \"Coral\", value: 16))\"\n\n\nComplexity: O(n), where n is the length of the sequence.\n\nSee Also\nGenerating a Shaped Array Slice\nfunc first(where: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>?\nReturns the first element of the sequence that satisfies the given predicate.\nfunc last(where: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>?\nReturns the last element of the sequence that satisfies the given predicate.\nfunc dropFirst(Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence containing all but the given number of initial elements.\nfunc dropLast(Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence containing all but the specified number of final elements.\nfunc drop(while: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>\nReturns a subsequence by skipping elements while predicate returns true and returning the remaining elements.\nfunc max(by: (MLShapedArraySlice<Scalar>, MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>?\nReturns the maximum element in the sequence, using the given predicate as the comparison between elements.\nfunc prefix(Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence, up to the specified maximum length, containing the initial elements of the collection.\nfunc prefix(upTo: Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence from the start of the collection up to, but not including, the specified position.\nfunc prefix(through: Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence from the start of the collection through the specified position.\nfunc prefix(while: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>\nReturns a subsequence containing the initial elements until predicate returns false and skipping the remaining elements.\nfunc suffix(Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence, up to the given maximum length, containing the final elements of the collection.\nfunc suffix(from: Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence from the specified position to the end of the collection.\nfunc sorted<Comparator>(using: Comparator) -> [MLShapedArraySlice<Scalar>]\nGenerates a copy of the shaped array by sorting its slices with a comparator.\nfunc sorted<S, Comparator>(using: S) -> [MLShapedArraySlice<Scalar>]\nGenerates a copy of the shaped array by sorting its slices with a sequence of comparators.\nfunc sorted(by: (MLShapedArraySlice<Scalar>, MLShapedArraySlice<Scalar>) -> Bool) -> [MLShapedArraySlice<Scalar>]\nReturns the elements of the sequence, sorted using the given predicate as the comparison between elements.\nfunc shuffled() -> [MLShapedArraySlice<Scalar>]\nReturns the elements of the sequence, shuffled.\nfunc shuffled<T>(using: inout T) -> [MLShapedArraySlice<Scalar>]\nReturns the elements of the sequence, shuffled using the given generator as a source for randomness.\nfunc trimmingPrefix<Prefix>(Prefix) -> MLShapedArraySlice<Scalar>\nReturns a new collection of the same type by removing initial elements that satisfy the given predicate from the start.\nfunc trimmingPrefix(while: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>"
  },
  {
    "title": "prefix(while:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarray/3763277-prefix",
    "html": "Parameters\npredicate\n\nA closure that takes an element of the sequence as its argument and returns true if the element should be included or false if it should be excluded. Once the predicate returns false it will not be called again.\n\nDiscussion\n\nComplexity: O(n), where n is the length of the collection.\n\nSee Also\nGenerating a Shaped Array Slice\nfunc first(where: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>?\nReturns the first element of the sequence that satisfies the given predicate.\nfunc last(where: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>?\nReturns the last element of the sequence that satisfies the given predicate.\nfunc dropFirst(Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence containing all but the given number of initial elements.\nfunc dropLast(Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence containing all but the specified number of final elements.\nfunc drop(while: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>\nReturns a subsequence by skipping elements while predicate returns true and returning the remaining elements.\nfunc min(by: (MLShapedArraySlice<Scalar>, MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>?\nReturns the minimum element in the sequence, using the given predicate as the comparison between elements.\nfunc max(by: (MLShapedArraySlice<Scalar>, MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>?\nReturns the maximum element in the sequence, using the given predicate as the comparison between elements.\nfunc prefix(Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence, up to the specified maximum length, containing the initial elements of the collection.\nfunc prefix(upTo: Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence from the start of the collection up to, but not including, the specified position.\nfunc prefix(through: Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence from the start of the collection through the specified position.\nfunc suffix(Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence, up to the given maximum length, containing the final elements of the collection.\nfunc suffix(from: Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence from the specified position to the end of the collection.\nfunc sorted<Comparator>(using: Comparator) -> [MLShapedArraySlice<Scalar>]\nGenerates a copy of the shaped array by sorting its slices with a comparator.\nfunc sorted<S, Comparator>(using: S) -> [MLShapedArraySlice<Scalar>]\nGenerates a copy of the shaped array by sorting its slices with a sequence of comparators.\nfunc sorted(by: (MLShapedArraySlice<Scalar>, MLShapedArraySlice<Scalar>) -> Bool) -> [MLShapedArraySlice<Scalar>]\nReturns the elements of the sequence, sorted using the given predicate as the comparison between elements.\nfunc shuffled() -> [MLShapedArraySlice<Scalar>]\nReturns the elements of the sequence, shuffled.\nfunc shuffled<T>(using: inout T) -> [MLShapedArraySlice<Scalar>]\nReturns the elements of the sequence, shuffled using the given generator as a source for randomness.\nfunc trimmingPrefix<Prefix>(Prefix) -> MLShapedArraySlice<Scalar>\nReturns a new collection of the same type by removing initial elements that satisfy the given predicate from the start.\nfunc trimmingPrefix(while: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>"
  },
  {
    "title": "dropLast(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarray/3763195-droplast",
    "html": "Parameters\nk\n\nThe number of elements to drop off the end of the collection. k must be greater than or equal to zero.\n\nReturn Value\n\nA subsequence that leaves off k elements from the end.\n\nDiscussion\n\nIf the number of elements to drop exceeds the number of elements in the collection, the result is an empty subsequence.\n\nlet numbers = [1, 2, 3, 4, 5]\nprint(numbers.dropLast(2))\n// Prints \"[1, 2, 3]\"\nprint(numbers.dropLast(10))\n// Prints \"[]\"\n\n\nComplexity: O(1) if the collection conforms to RandomAccessCollection; otherwise, O(k), where k is the number of elements to drop.\n\nSee Also\nGenerating a Shaped Array Slice\nfunc first(where: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>?\nReturns the first element of the sequence that satisfies the given predicate.\nfunc last(where: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>?\nReturns the last element of the sequence that satisfies the given predicate.\nfunc dropFirst(Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence containing all but the given number of initial elements.\nfunc drop(while: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>\nReturns a subsequence by skipping elements while predicate returns true and returning the remaining elements.\nfunc min(by: (MLShapedArraySlice<Scalar>, MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>?\nReturns the minimum element in the sequence, using the given predicate as the comparison between elements.\nfunc max(by: (MLShapedArraySlice<Scalar>, MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>?\nReturns the maximum element in the sequence, using the given predicate as the comparison between elements.\nfunc prefix(Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence, up to the specified maximum length, containing the initial elements of the collection.\nfunc prefix(upTo: Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence from the start of the collection up to, but not including, the specified position.\nfunc prefix(through: Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence from the start of the collection through the specified position.\nfunc prefix(while: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>\nReturns a subsequence containing the initial elements until predicate returns false and skipping the remaining elements.\nfunc suffix(Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence, up to the given maximum length, containing the final elements of the collection.\nfunc suffix(from: Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence from the specified position to the end of the collection.\nfunc sorted<Comparator>(using: Comparator) -> [MLShapedArraySlice<Scalar>]\nGenerates a copy of the shaped array by sorting its slices with a comparator.\nfunc sorted<S, Comparator>(using: S) -> [MLShapedArraySlice<Scalar>]\nGenerates a copy of the shaped array by sorting its slices with a sequence of comparators.\nfunc sorted(by: (MLShapedArraySlice<Scalar>, MLShapedArraySlice<Scalar>) -> Bool) -> [MLShapedArraySlice<Scalar>]\nReturns the elements of the sequence, sorted using the given predicate as the comparison between elements.\nfunc shuffled() -> [MLShapedArraySlice<Scalar>]\nReturns the elements of the sequence, shuffled.\nfunc shuffled<T>(using: inout T) -> [MLShapedArraySlice<Scalar>]\nReturns the elements of the sequence, shuffled using the given generator as a source for randomness.\nfunc trimmingPrefix<Prefix>(Prefix) -> MLShapedArraySlice<Scalar>\nReturns a new collection of the same type by removing initial elements that satisfy the given predicate from the start.\nfunc trimmingPrefix(while: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>"
  },
  {
    "title": "drop(while:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarray/3763192-drop",
    "html": "Parameters\npredicate\n\nA closure that takes an element of the sequence as its argument and returns true if the element should be skipped or false if it should be included. Once the predicate returns false it will not be called again.\n\nDiscussion\n\nComplexity: O(n), where n is the length of the collection.\n\nSee Also\nGenerating a Shaped Array Slice\nfunc first(where: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>?\nReturns the first element of the sequence that satisfies the given predicate.\nfunc last(where: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>?\nReturns the last element of the sequence that satisfies the given predicate.\nfunc dropFirst(Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence containing all but the given number of initial elements.\nfunc dropLast(Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence containing all but the specified number of final elements.\nfunc min(by: (MLShapedArraySlice<Scalar>, MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>?\nReturns the minimum element in the sequence, using the given predicate as the comparison between elements.\nfunc max(by: (MLShapedArraySlice<Scalar>, MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>?\nReturns the maximum element in the sequence, using the given predicate as the comparison between elements.\nfunc prefix(Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence, up to the specified maximum length, containing the initial elements of the collection.\nfunc prefix(upTo: Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence from the start of the collection up to, but not including, the specified position.\nfunc prefix(through: Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence from the start of the collection through the specified position.\nfunc prefix(while: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>\nReturns a subsequence containing the initial elements until predicate returns false and skipping the remaining elements.\nfunc suffix(Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence, up to the given maximum length, containing the final elements of the collection.\nfunc suffix(from: Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence from the specified position to the end of the collection.\nfunc sorted<Comparator>(using: Comparator) -> [MLShapedArraySlice<Scalar>]\nGenerates a copy of the shaped array by sorting its slices with a comparator.\nfunc sorted<S, Comparator>(using: S) -> [MLShapedArraySlice<Scalar>]\nGenerates a copy of the shaped array by sorting its slices with a sequence of comparators.\nfunc sorted(by: (MLShapedArraySlice<Scalar>, MLShapedArraySlice<Scalar>) -> Bool) -> [MLShapedArraySlice<Scalar>]\nReturns the elements of the sequence, sorted using the given predicate as the comparison between elements.\nfunc shuffled() -> [MLShapedArraySlice<Scalar>]\nReturns the elements of the sequence, shuffled.\nfunc shuffled<T>(using: inout T) -> [MLShapedArraySlice<Scalar>]\nReturns the elements of the sequence, shuffled using the given generator as a source for randomness.\nfunc trimmingPrefix<Prefix>(Prefix) -> MLShapedArraySlice<Scalar>\nReturns a new collection of the same type by removing initial elements that satisfy the given predicate from the start.\nfunc trimmingPrefix(while: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>"
  },
  {
    "title": "dropFirst(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarray/3763193-dropfirst",
    "html": "Parameters\nk\n\nThe number of elements to drop from the beginning of the collection. k must be greater than or equal to zero.\n\nReturn Value\n\nA subsequence starting after the specified number of elements.\n\nDiscussion\n\nIf the number of elements to drop exceeds the number of elements in the collection, the result is an empty subsequence.\n\nlet numbers = [1, 2, 3, 4, 5]\nprint(numbers.dropFirst(2))\n// Prints \"[3, 4, 5]\"\nprint(numbers.dropFirst(10))\n// Prints \"[]\"\n\n\nComplexity: O(1) if the collection conforms to RandomAccessCollection; otherwise, O(k), where k is the number of elements to drop from the beginning of the collection.\n\nSee Also\nGenerating a Shaped Array Slice\nfunc first(where: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>?\nReturns the first element of the sequence that satisfies the given predicate.\nfunc last(where: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>?\nReturns the last element of the sequence that satisfies the given predicate.\nfunc dropLast(Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence containing all but the specified number of final elements.\nfunc drop(while: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>\nReturns a subsequence by skipping elements while predicate returns true and returning the remaining elements.\nfunc min(by: (MLShapedArraySlice<Scalar>, MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>?\nReturns the minimum element in the sequence, using the given predicate as the comparison between elements.\nfunc max(by: (MLShapedArraySlice<Scalar>, MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>?\nReturns the maximum element in the sequence, using the given predicate as the comparison between elements.\nfunc prefix(Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence, up to the specified maximum length, containing the initial elements of the collection.\nfunc prefix(upTo: Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence from the start of the collection up to, but not including, the specified position.\nfunc prefix(through: Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence from the start of the collection through the specified position.\nfunc prefix(while: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>\nReturns a subsequence containing the initial elements until predicate returns false and skipping the remaining elements.\nfunc suffix(Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence, up to the given maximum length, containing the final elements of the collection.\nfunc suffix(from: Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence from the specified position to the end of the collection.\nfunc sorted<Comparator>(using: Comparator) -> [MLShapedArraySlice<Scalar>]\nGenerates a copy of the shaped array by sorting its slices with a comparator.\nfunc sorted<S, Comparator>(using: S) -> [MLShapedArraySlice<Scalar>]\nGenerates a copy of the shaped array by sorting its slices with a sequence of comparators.\nfunc sorted(by: (MLShapedArraySlice<Scalar>, MLShapedArraySlice<Scalar>) -> Bool) -> [MLShapedArraySlice<Scalar>]\nReturns the elements of the sequence, sorted using the given predicate as the comparison between elements.\nfunc shuffled() -> [MLShapedArraySlice<Scalar>]\nReturns the elements of the sequence, shuffled.\nfunc shuffled<T>(using: inout T) -> [MLShapedArraySlice<Scalar>]\nReturns the elements of the sequence, shuffled using the given generator as a source for randomness.\nfunc trimmingPrefix<Prefix>(Prefix) -> MLShapedArraySlice<Scalar>\nReturns a new collection of the same type by removing initial elements that satisfy the given predicate from the start.\nfunc trimmingPrefix(while: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>"
  },
  {
    "title": "last(where:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarray/3763252-last",
    "html": "Parameters\npredicate\n\nA closure that takes an element of the sequence as its argument and returns a Boolean value indicating whether the element is a match.\n\nReturn Value\n\nThe last element of the sequence that satisfies predicate, or nil if there is no element that satisfies predicate.\n\nDiscussion\n\nThis example uses the last(where:) method to find the last negative number in an array of integers:\n\nlet numbers = [3, 7, 4, -2, 9, -6, 10, 1]\nif let lastNegative = numbers.last(where: { $0 < 0 }) {\n    print(\"The last negative number is \\(lastNegative).\")\n}\n// Prints \"The last negative number is -6.\"\n\n\nComplexity: O(n), where n is the length of the collection.\n\nSee Also\nGenerating a Shaped Array Slice\nfunc first(where: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>?\nReturns the first element of the sequence that satisfies the given predicate.\nfunc dropFirst(Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence containing all but the given number of initial elements.\nfunc dropLast(Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence containing all but the specified number of final elements.\nfunc drop(while: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>\nReturns a subsequence by skipping elements while predicate returns true and returning the remaining elements.\nfunc min(by: (MLShapedArraySlice<Scalar>, MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>?\nReturns the minimum element in the sequence, using the given predicate as the comparison between elements.\nfunc max(by: (MLShapedArraySlice<Scalar>, MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>?\nReturns the maximum element in the sequence, using the given predicate as the comparison between elements.\nfunc prefix(Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence, up to the specified maximum length, containing the initial elements of the collection.\nfunc prefix(upTo: Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence from the start of the collection up to, but not including, the specified position.\nfunc prefix(through: Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence from the start of the collection through the specified position.\nfunc prefix(while: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>\nReturns a subsequence containing the initial elements until predicate returns false and skipping the remaining elements.\nfunc suffix(Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence, up to the given maximum length, containing the final elements of the collection.\nfunc suffix(from: Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence from the specified position to the end of the collection.\nfunc sorted<Comparator>(using: Comparator) -> [MLShapedArraySlice<Scalar>]\nGenerates a copy of the shaped array by sorting its slices with a comparator.\nfunc sorted<S, Comparator>(using: S) -> [MLShapedArraySlice<Scalar>]\nGenerates a copy of the shaped array by sorting its slices with a sequence of comparators.\nfunc sorted(by: (MLShapedArraySlice<Scalar>, MLShapedArraySlice<Scalar>) -> Bool) -> [MLShapedArraySlice<Scalar>]\nReturns the elements of the sequence, sorted using the given predicate as the comparison between elements.\nfunc shuffled() -> [MLShapedArraySlice<Scalar>]\nReturns the elements of the sequence, shuffled.\nfunc shuffled<T>(using: inout T) -> [MLShapedArraySlice<Scalar>]\nReturns the elements of the sequence, shuffled using the given generator as a source for randomness.\nfunc trimmingPrefix<Prefix>(Prefix) -> MLShapedArraySlice<Scalar>\nReturns a new collection of the same type by removing initial elements that satisfy the given predicate from the start.\nfunc trimmingPrefix(while: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>"
  },
  {
    "title": "first(where:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarray/3763209-first",
    "html": "Parameters\npredicate\n\nA closure that takes an element of the sequence as its argument and returns a Boolean value indicating whether the element is a match.\n\nReturn Value\n\nThe first element of the sequence that satisfies predicate, or nil if there is no element that satisfies predicate.\n\nDiscussion\n\nThe following example uses the first(where:) method to find the first negative number in an array of integers:\n\nlet numbers = [3, 7, 4, -2, 9, -6, 10, 1]\nif let firstNegative = numbers.first(where: { $0 < 0 }) {\n    print(\"The first negative number is \\(firstNegative).\")\n}\n// Prints \"The first negative number is -2.\"\n\n\nComplexity: O(n), where n is the length of the sequence.\n\nSee Also\nGenerating a Shaped Array Slice\nfunc last(where: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>?\nReturns the last element of the sequence that satisfies the given predicate.\nfunc dropFirst(Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence containing all but the given number of initial elements.\nfunc dropLast(Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence containing all but the specified number of final elements.\nfunc drop(while: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>\nReturns a subsequence by skipping elements while predicate returns true and returning the remaining elements.\nfunc min(by: (MLShapedArraySlice<Scalar>, MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>?\nReturns the minimum element in the sequence, using the given predicate as the comparison between elements.\nfunc max(by: (MLShapedArraySlice<Scalar>, MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>?\nReturns the maximum element in the sequence, using the given predicate as the comparison between elements.\nfunc prefix(Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence, up to the specified maximum length, containing the initial elements of the collection.\nfunc prefix(upTo: Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence from the start of the collection up to, but not including, the specified position.\nfunc prefix(through: Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence from the start of the collection through the specified position.\nfunc prefix(while: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>\nReturns a subsequence containing the initial elements until predicate returns false and skipping the remaining elements.\nfunc suffix(Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence, up to the given maximum length, containing the final elements of the collection.\nfunc suffix(from: Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence from the specified position to the end of the collection.\nfunc sorted<Comparator>(using: Comparator) -> [MLShapedArraySlice<Scalar>]\nGenerates a copy of the shaped array by sorting its slices with a comparator.\nfunc sorted<S, Comparator>(using: S) -> [MLShapedArraySlice<Scalar>]\nGenerates a copy of the shaped array by sorting its slices with a sequence of comparators.\nfunc sorted(by: (MLShapedArraySlice<Scalar>, MLShapedArraySlice<Scalar>) -> Bool) -> [MLShapedArraySlice<Scalar>]\nReturns the elements of the sequence, sorted using the given predicate as the comparison between elements.\nfunc shuffled() -> [MLShapedArraySlice<Scalar>]\nReturns the elements of the sequence, shuffled.\nfunc shuffled<T>(using: inout T) -> [MLShapedArraySlice<Scalar>]\nReturns the elements of the sequence, shuffled using the given generator as a source for randomness.\nfunc trimmingPrefix<Prefix>(Prefix) -> MLShapedArraySlice<Scalar>\nReturns a new collection of the same type by removing initial elements that satisfy the given predicate from the start.\nfunc trimmingPrefix(while: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>"
  },
  {
    "title": "split(separator:maxSplits:omittingEmptySubsequences:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarray/4135020-split",
    "html": "Parameters\nseparator\n\nThe element to be split upon.\n\nReturn Value\n\nA collection of subsequences, split from this collection’s elements.\n\nSee Also\nGenerating a Shaped Array\nfunc joined() -> FlattenSequence<MLShapedArray<Scalar>>\nReturns the elements of this sequence of sequences, concatenated.\nfunc joined<Separator>(separator: Separator) -> JoinedSequence<MLShapedArray<Scalar>>\nReturns the concatenated elements of this sequence of sequences, inserting the given separator between each element.\nfunc reversed() -> ReversedCollection<MLShapedArray<Scalar>>\nReturns a view presenting the elements of the collection in reverse order.\nfunc split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (MLShapedArraySlice<Scalar>) -> Bool) -> [MLShapedArraySlice<Scalar>]\nReturns the longest possible subsequences of the collection, in order, that don’t contain elements satisfying the given predicate.\nfunc split(separator: MLShapedArraySlice<Scalar>, maxSplits: Int, omittingEmptySubsequences: Bool) -> [ArraySlice<MLShapedArraySlice<Scalar>>]\nReturns the longest possible subsequences of the sequence, in order, around elements equal to the given element.\nfunc split(separator: MLShapedArraySlice<Scalar>, maxSplits: Int, omittingEmptySubsequences: Bool) -> [MLShapedArraySlice<Scalar>]\nReturns the longest possible subsequences of the collection, in order, around elements equal to the given element."
  },
  {
    "title": "split(maxSplits:omittingEmptySubsequences:whereSeparator:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarray/3763311-split",
    "html": "Parameters\nmaxSplits\n\nThe maximum number of times to split the collection, or one less than the number of subsequences to return. If maxSplits + 1 subsequences are returned, the last one is a suffix of the original collection containing the remaining elements. maxSplits must be greater than or equal to zero. The default value is Int.max.\n\nomittingEmptySubsequences\n\nIf false, an empty subsequence is returned in the result for each pair of consecutive elements satisfying the isSeparator predicate and for each element at the start or end of the collection satisfying the isSeparator predicate. The default value is true.\n\nisSeparator\n\nA closure that takes an element as an argument and returns a Boolean value indicating whether the collection should be split at that element.\n\nReturn Value\n\nAn array of subsequences, split from this collection’s elements.\n\nDiscussion\n\nThe resulting array consists of at most maxSplits + 1 subsequences. Elements that are used to split the sequence are not returned as part of any subsequence.\n\nThe following examples show the effects of the maxSplits and omittingEmptySubsequences parameters when splitting a string using a closure that matches spaces. The first use of split returns each word that was originally separated by one or more spaces.\n\nlet line = \"BLANCHE:   I don't want realism. I want magic!\"\nprint(line.split(whereSeparator: { $0 == \" \" }))\n// Prints \"[\"BLANCHE:\", \"I\", \"don\\'t\", \"want\", \"realism.\", \"I\", \"want\", \"magic!\"]\"\n\n\nThe second example passes 1 for the maxSplits parameter, so the original string is split just once, into two new strings.\n\nprint(line.split(maxSplits: 1, whereSeparator: { $0 == \" \" }))\n// Prints \"[\"BLANCHE:\", \"  I don\\'t want realism. I want magic!\"]\"\n\n\nThe final example passes false for the omittingEmptySubsequences parameter, so the returned array contains empty strings where spaces were repeated.\n\nprint(line.split(omittingEmptySubsequences: false, whereSeparator: { $0 == \" \" }))\n// Prints \"[\"BLANCHE:\", \"\", \"\", \"I\", \"don\\'t\", \"want\", \"realism.\", \"I\", \"want\", \"magic!\"]\"\n\n\nComplexity: O(n), where n is the length of the collection.\n\nSee Also\nGenerating a Shaped Array\nfunc joined() -> FlattenSequence<MLShapedArray<Scalar>>\nReturns the elements of this sequence of sequences, concatenated.\nfunc joined<Separator>(separator: Separator) -> JoinedSequence<MLShapedArray<Scalar>>\nReturns the concatenated elements of this sequence of sequences, inserting the given separator between each element.\nfunc reversed() -> ReversedCollection<MLShapedArray<Scalar>>\nReturns a view presenting the elements of the collection in reverse order.\nfunc split<C>(separator: C, maxSplits: Int, omittingEmptySubsequences: Bool) -> [MLShapedArraySlice<Scalar>]\nReturns the longest possible subsequences of the collection, in order, around elements equal to the given separator.\nfunc split(separator: MLShapedArraySlice<Scalar>, maxSplits: Int, omittingEmptySubsequences: Bool) -> [ArraySlice<MLShapedArraySlice<Scalar>>]\nReturns the longest possible subsequences of the sequence, in order, around elements equal to the given element.\nfunc split(separator: MLShapedArraySlice<Scalar>, maxSplits: Int, omittingEmptySubsequences: Bool) -> [MLShapedArraySlice<Scalar>]\nReturns the longest possible subsequences of the collection, in order, around elements equal to the given element."
  },
  {
    "title": "joined(separator:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarray/3763248-joined",
    "html": "Parameters\nseparator\n\nA sequence to insert between each of this sequence’s elements.\n\nReturn Value\n\nThe joined sequence of elements.\n\nDiscussion\n\nThis example shows how an array of [Int] instances can be joined, using another [Int] instance as the separator:\n\nlet nestedNumbers = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nlet joined = nestedNumbers.joined(separator: [-1, -2])\nprint(Array(joined))\n// Prints \"[1, 2, 3, -1, -2, 4, 5, 6, -1, -2, 7, 8, 9]\"\n\nSee Also\nGenerating a Shaped Array\nfunc joined() -> FlattenSequence<MLShapedArray<Scalar>>\nReturns the elements of this sequence of sequences, concatenated.\nfunc reversed() -> ReversedCollection<MLShapedArray<Scalar>>\nReturns a view presenting the elements of the collection in reverse order.\nfunc split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (MLShapedArraySlice<Scalar>) -> Bool) -> [MLShapedArraySlice<Scalar>]\nReturns the longest possible subsequences of the collection, in order, that don’t contain elements satisfying the given predicate.\nfunc split<C>(separator: C, maxSplits: Int, omittingEmptySubsequences: Bool) -> [MLShapedArraySlice<Scalar>]\nReturns the longest possible subsequences of the collection, in order, around elements equal to the given separator.\nfunc split(separator: MLShapedArraySlice<Scalar>, maxSplits: Int, omittingEmptySubsequences: Bool) -> [ArraySlice<MLShapedArraySlice<Scalar>>]\nReturns the longest possible subsequences of the sequence, in order, around elements equal to the given element.\nfunc split(separator: MLShapedArraySlice<Scalar>, maxSplits: Int, omittingEmptySubsequences: Bool) -> [MLShapedArraySlice<Scalar>]\nReturns the longest possible subsequences of the collection, in order, around elements equal to the given element."
  },
  {
    "title": "joined() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarray/3763246-joined",
    "html": "Return Value\n\nA flattened view of the elements of this sequence of sequences.\n\nDiscussion\n\nIn this example, an array of three ranges is flattened so that the elements of each range can be iterated in turn.\n\nlet ranges = [0..<3, 8..<10, 15..<17]\n\n\n// A for-in loop over 'ranges' accesses each range:\nfor range in ranges {\n  print(range)\n}\n// Prints \"0..<3\"\n// Prints \"8..<10\"\n// Prints \"15..<17\"\n\n\n// Use 'joined()' to access each element of each range:\nfor index in ranges.joined() {\n    print(index, terminator: \" \")\n}\n// Prints: \"0 1 2 8 9 15 16\"\n\nSee Also\nGenerating a Shaped Array\nfunc joined<Separator>(separator: Separator) -> JoinedSequence<MLShapedArray<Scalar>>\nReturns the concatenated elements of this sequence of sequences, inserting the given separator between each element.\nfunc reversed() -> ReversedCollection<MLShapedArray<Scalar>>\nReturns a view presenting the elements of the collection in reverse order.\nfunc split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (MLShapedArraySlice<Scalar>) -> Bool) -> [MLShapedArraySlice<Scalar>]\nReturns the longest possible subsequences of the collection, in order, that don’t contain elements satisfying the given predicate.\nfunc split<C>(separator: C, maxSplits: Int, omittingEmptySubsequences: Bool) -> [MLShapedArraySlice<Scalar>]\nReturns the longest possible subsequences of the collection, in order, around elements equal to the given separator.\nfunc split(separator: MLShapedArraySlice<Scalar>, maxSplits: Int, omittingEmptySubsequences: Bool) -> [ArraySlice<MLShapedArraySlice<Scalar>>]\nReturns the longest possible subsequences of the sequence, in order, around elements equal to the given element.\nfunc split(separator: MLShapedArraySlice<Scalar>, maxSplits: Int, omittingEmptySubsequences: Bool) -> [MLShapedArraySlice<Scalar>]\nReturns the longest possible subsequences of the collection, in order, around elements equal to the given element."
  },
  {
    "title": "withContiguousMutableStorageIfAvailable(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarray/3763345-withcontiguousmutablestorageifav",
    "html": "Parameters\nbody\n\nA closure that receives an in-out UnsafeMutableBufferPointer to the collection’s contiguous storage.\n\nReturn Value\n\nThe value returned from body, unless the collection doesn’t support contiguous storage, in which case the method ignores body and returns nil.\n\nDiscussion\n\nThis method calls body(buffer), where buffer provides access to the contiguous mutable storage of the entire collection. If the contiguous storage doesn’t exist, the collection creates it. If the collection doesn’t support an internal representation in the form of contiguous mutable storage, this method doesn’t call body — it immediately returns nil.\n\nThe optimizer can often eliminate bounds- and uniqueness-checking within an algorithm. When that fails, however, invoking the same algorithm on the buffer argument may let you trade safety for speed.\n\nAlways perform any necessary cleanup in the closure, because the method makes no guarantees about the state of the collection if the closure throws an error. Your changes to the collection may be absent from the collection after throwing the error, because the closure could receive a temporary copy rather than direct access to the collection’s storage.\n\nWarning\n\nYour body closure must not replace buffer. This leads to a crash in all implementations of this method within the standard library.\n\nSuccessive calls to this method may provide a different pointer on each call. Don’t store buffer outside of this method.\n\nA Collection that provides its own implementation of this method must provide contiguous storage to its elements in the same order as they appear in the collection. This guarantees that it’s possible to generate contiguous mutable storage to any of its subsequences by slicing buffer with a range formed from the distances to the subsequence’s startIndex and endIndex, respectively.\n\nNote\n\nThis documentation comment was inherited from MutableCollection.\n\nSee Also\nModifying a Shaped Array\nfunc swapAt(Int, Int)\nExchanges the values at the specified indices of the collection.\nfunc partition(by: (MLShapedArraySlice<Scalar>) -> Bool) -> Int\nReorders the elements of the collection such that all the elements that match the given predicate are after all the elements that don’t match.\nfunc sort<Comparator>(using: Comparator)\nReorders a shaped array by sorting its slices with a comparator.\nfunc sort<S, Comparator>(using: S)\nReorders a shaped array by sorting its slices with a sequence of comparators.\nfunc sort(by: (MLShapedArraySlice<Scalar>, MLShapedArraySlice<Scalar>) -> Bool)\nSorts the collection in place, using the given predicate as the comparison between elements.\nfunc reverse()\nReverses the elements of the collection in place.\nfunc shuffle()\nShuffles the collection in place.\nfunc shuffle<T>(using: inout T)\nShuffles the collection in place, using the given generator as a source for randomness."
  },
  {
    "title": "shuffle(using:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarray/3763298-shuffle",
    "html": "Parameters\ngenerator\n\nThe random number generator to use when shuffling the collection.\n\nDiscussion\n\nYou use this method to randomize the elements of a collection when you are using a custom random number generator. For example, you can use the shuffle(using:) method to randomly reorder the elements of an array.\n\nvar names = [\"Alejandro\", \"Camila\", \"Diego\", \"Luciana\", \"Luis\", \"Sofía\"]\nnames.shuffle(using: &myGenerator)\n// names == [\"Sofía\", \"Alejandro\", \"Camila\", \"Luis\", \"Diego\", \"Luciana\"]\n\n\nComplexity: O(n), where n is the length of the collection.\n\nNote\n\nThe algorithm used to shuffle a collection may change in a future version of Swift. If you’re passing a generator that results in the same shuffled order each time you run your program, that sequence may change when your program is compiled using a different version of Swift.\n\nSee Also\nModifying a Shaped Array\nfunc swapAt(Int, Int)\nExchanges the values at the specified indices of the collection.\nfunc partition(by: (MLShapedArraySlice<Scalar>) -> Bool) -> Int\nReorders the elements of the collection such that all the elements that match the given predicate are after all the elements that don’t match.\nfunc sort<Comparator>(using: Comparator)\nReorders a shaped array by sorting its slices with a comparator.\nfunc sort<S, Comparator>(using: S)\nReorders a shaped array by sorting its slices with a sequence of comparators.\nfunc sort(by: (MLShapedArraySlice<Scalar>, MLShapedArraySlice<Scalar>) -> Bool)\nSorts the collection in place, using the given predicate as the comparison between elements.\nfunc reverse()\nReverses the elements of the collection in place.\nfunc shuffle()\nShuffles the collection in place.\nfunc withContiguousMutableStorageIfAvailable<R>((inout UnsafeMutableBufferPointer<MLShapedArraySlice<Scalar>>) -> R) -> R?\nExecutes a closure on the collection’s contiguous storage."
  },
  {
    "title": "reverse() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarray/3763287-reverse",
    "html": "Discussion\n\nThe following example reverses the elements of an array of characters:\n\nvar characters: [Character] = [\"C\", \"a\", \"f\", \"é\"]\ncharacters.reverse()\nprint(characters)\n// Prints \"[\"é\", \"f\", \"a\", \"C\"]\"\n\n\nComplexity: O(n), where n is the number of elements in the collection.\n\nSee Also\nModifying a Shaped Array\nfunc swapAt(Int, Int)\nExchanges the values at the specified indices of the collection.\nfunc partition(by: (MLShapedArraySlice<Scalar>) -> Bool) -> Int\nReorders the elements of the collection such that all the elements that match the given predicate are after all the elements that don’t match.\nfunc sort<Comparator>(using: Comparator)\nReorders a shaped array by sorting its slices with a comparator.\nfunc sort<S, Comparator>(using: S)\nReorders a shaped array by sorting its slices with a sequence of comparators.\nfunc sort(by: (MLShapedArraySlice<Scalar>, MLShapedArraySlice<Scalar>) -> Bool)\nSorts the collection in place, using the given predicate as the comparison between elements.\nfunc shuffle()\nShuffles the collection in place.\nfunc shuffle<T>(using: inout T)\nShuffles the collection in place, using the given generator as a source for randomness.\nfunc withContiguousMutableStorageIfAvailable<R>((inout UnsafeMutableBufferPointer<MLShapedArraySlice<Scalar>>) -> R) -> R?\nExecutes a closure on the collection’s contiguous storage."
  },
  {
    "title": "shuffle() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarray/3763296-shuffle",
    "html": "Discussion\n\nUse the shuffle() method to randomly reorder the elements of an array.\n\nvar names = [\"Alejandro\", \"Camila\", \"Diego\", \"Luciana\", \"Luis\", \"Sofía\"]\nnames.shuffle()\n// names == [\"Luis\", \"Camila\", \"Luciana\", \"Sofía\", \"Alejandro\", \"Diego\"]\n\n\nThis method is equivalent to calling shuffle(using:), passing in the system’s default random generator.\n\nComplexity: O(n), where n is the length of the collection.\n\nSee Also\nModifying a Shaped Array\nfunc swapAt(Int, Int)\nExchanges the values at the specified indices of the collection.\nfunc partition(by: (MLShapedArraySlice<Scalar>) -> Bool) -> Int\nReorders the elements of the collection such that all the elements that match the given predicate are after all the elements that don’t match.\nfunc sort<Comparator>(using: Comparator)\nReorders a shaped array by sorting its slices with a comparator.\nfunc sort<S, Comparator>(using: S)\nReorders a shaped array by sorting its slices with a sequence of comparators.\nfunc sort(by: (MLShapedArraySlice<Scalar>, MLShapedArraySlice<Scalar>) -> Bool)\nSorts the collection in place, using the given predicate as the comparison between elements.\nfunc reverse()\nReverses the elements of the collection in place.\nfunc shuffle<T>(using: inout T)\nShuffles the collection in place, using the given generator as a source for randomness.\nfunc withContiguousMutableStorageIfAvailable<R>((inout UnsafeMutableBufferPointer<MLShapedArraySlice<Scalar>>) -> R) -> R?\nExecutes a closure on the collection’s contiguous storage."
  },
  {
    "title": "sort(using:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarrayslice/3802067-sort",
    "html": "Parameters\ncomparators\n\nA sequence of shaped-array slice comparators.\n\nSee Also\nModifying a Shaped Array Slice\nsubscript(Range<Int>) -> MLShapedArraySlice<Scalar>\nAccesses a slice with a range in the shaped array’s first dimension.\nfunc swapAt(Int, Int)\nExchanges the values at the specified indices of the collection.\nfunc partition(by: (MLShapedArraySlice<Scalar>) -> Bool) -> Int\nReorders the elements of the collection such that all the elements that match the given predicate are after all the elements that don’t match.\nfunc sort<Comparator>(using: Comparator)\nReorders a shaped array slice by sorting its slices with a comparator.\nfunc sort(by: (MLShapedArraySlice<Scalar>, MLShapedArraySlice<Scalar>) -> Bool)\nSorts the collection in place, using the given predicate as the comparison between elements.\nfunc popFirst() -> MLShapedArraySlice<Scalar>?\nRemoves and returns the first element of the collection.\nfunc popLast() -> MLShapedArraySlice<Scalar>?\nRemoves and returns the last element of the collection.\nfunc removeFirst() -> MLShapedArraySlice<Scalar>\nRemoves and returns the first element of the collection.\nfunc removeLast() -> MLShapedArraySlice<Scalar>\nRemoves and returns the last element of the collection.\nfunc removeFirst(Int)\nRemoves the specified number of elements from the beginning of the collection.\nfunc removeLast(Int)\nRemoves the given number of elements from the end of the collection.\nfunc reverse()\nReverses the elements of the collection in place.\nfunc shuffle()\nShuffles the collection in place.\nfunc shuffle<T>(using: inout T)\nShuffles the collection in place, using the given generator as a source for randomness.\nfunc withContiguousMutableStorageIfAvailable<R>((inout UnsafeMutableBufferPointer<MLShapedArraySlice<Scalar>>) -> R) -> R?\nExecutes a closure on the collection’s contiguous storage."
  },
  {
    "title": "partition(by:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarrayslice/3763477-partition",
    "html": "Parameters\nbelongsInSecondPartition\n\nA predicate used to partition the collection. All elements satisfying this predicate are ordered after all elements not satisfying it.\n\nReturn Value\n\nThe index of the first element in the reordered collection that matches belongsInSecondPartition. If no elements in the collection match belongsInSecondPartition, the returned index is equal to the collection’s endIndex.\n\nDiscussion\n\nAfter partitioning a collection, there is a pivot index p where no element before p satisfies the belongsInSecondPartition predicate and every element at or after p satisfies belongsInSecondPartition. This operation isn’t guaranteed to be stable, so the relative ordering of elements within the partitions might change.\n\nIn the following example, an array of numbers is partitioned by a predicate that matches elements greater than 30.\n\nvar numbers = [30, 40, 20, 30, 30, 60, 10]\nlet p = numbers.partition(by: { $0 > 30 })\n// p == 5\n// numbers == [30, 10, 20, 30, 30, 60, 40]\n\n\nThe numbers array is now arranged in two partitions. The first partition, numbers[..<p], is made up of the elements that are not greater than 30. The second partition, numbers[p...], is made up of the elements that are greater than 30.\n\nlet first = numbers[..<p]\n// first == [30, 10, 20, 30, 30]\nlet second = numbers[p...]\n// second == [60, 40]\n\n\nNote that the order of elements in both partitions changed. That is, 40 appears before 60 in the original collection, but, after calling partition(by:), 60 appears before 40.\n\nComplexity: O(n), where n is the length of the collection.\n\nSee Also\nModifying a Shaped Array Slice\nsubscript(Range<Int>) -> MLShapedArraySlice<Scalar>\nAccesses a slice with a range in the shaped array’s first dimension.\nfunc swapAt(Int, Int)\nExchanges the values at the specified indices of the collection.\nfunc sort<Comparator>(using: Comparator)\nReorders a shaped array slice by sorting its slices with a comparator.\nfunc sort<S, Comparator>(using: S)\nReorders a shaped array slice by sorting its slices with a sequence of comparators.\nfunc sort(by: (MLShapedArraySlice<Scalar>, MLShapedArraySlice<Scalar>) -> Bool)\nSorts the collection in place, using the given predicate as the comparison between elements.\nfunc popFirst() -> MLShapedArraySlice<Scalar>?\nRemoves and returns the first element of the collection.\nfunc popLast() -> MLShapedArraySlice<Scalar>?\nRemoves and returns the last element of the collection.\nfunc removeFirst() -> MLShapedArraySlice<Scalar>\nRemoves and returns the first element of the collection.\nfunc removeLast() -> MLShapedArraySlice<Scalar>\nRemoves and returns the last element of the collection.\nfunc removeFirst(Int)\nRemoves the specified number of elements from the beginning of the collection.\nfunc removeLast(Int)\nRemoves the given number of elements from the end of the collection.\nfunc reverse()\nReverses the elements of the collection in place.\nfunc shuffle()\nShuffles the collection in place.\nfunc shuffle<T>(using: inout T)\nShuffles the collection in place, using the given generator as a source for randomness.\nfunc withContiguousMutableStorageIfAvailable<R>((inout UnsafeMutableBufferPointer<MLShapedArraySlice<Scalar>>) -> R) -> R?\nExecutes a closure on the collection’s contiguous storage."
  },
  {
    "title": "sort(using:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarrayslice/3802066-sort",
    "html": "Parameters\ncomparator\n\nA shaped-array slice comparator.\n\nSee Also\nModifying a Shaped Array Slice\nsubscript(Range<Int>) -> MLShapedArraySlice<Scalar>\nAccesses a slice with a range in the shaped array’s first dimension.\nfunc swapAt(Int, Int)\nExchanges the values at the specified indices of the collection.\nfunc partition(by: (MLShapedArraySlice<Scalar>) -> Bool) -> Int\nReorders the elements of the collection such that all the elements that match the given predicate are after all the elements that don’t match.\nfunc sort<S, Comparator>(using: S)\nReorders a shaped array slice by sorting its slices with a sequence of comparators.\nfunc sort(by: (MLShapedArraySlice<Scalar>, MLShapedArraySlice<Scalar>) -> Bool)\nSorts the collection in place, using the given predicate as the comparison between elements.\nfunc popFirst() -> MLShapedArraySlice<Scalar>?\nRemoves and returns the first element of the collection.\nfunc popLast() -> MLShapedArraySlice<Scalar>?\nRemoves and returns the last element of the collection.\nfunc removeFirst() -> MLShapedArraySlice<Scalar>\nRemoves and returns the first element of the collection.\nfunc removeLast() -> MLShapedArraySlice<Scalar>\nRemoves and returns the last element of the collection.\nfunc removeFirst(Int)\nRemoves the specified number of elements from the beginning of the collection.\nfunc removeLast(Int)\nRemoves the given number of elements from the end of the collection.\nfunc reverse()\nReverses the elements of the collection in place.\nfunc shuffle()\nShuffles the collection in place.\nfunc shuffle<T>(using: inout T)\nShuffles the collection in place, using the given generator as a source for randomness.\nfunc withContiguousMutableStorageIfAvailable<R>((inout UnsafeMutableBufferPointer<MLShapedArraySlice<Scalar>>) -> R) -> R?\nExecutes a closure on the collection’s contiguous storage."
  },
  {
    "title": "subscript(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarrayslice/3763542-subscript",
    "html": "Parameters\nsliceRange\n\nAn integer range.\n\nSee Also\nModifying a Shaped Array Slice\nfunc swapAt(Int, Int)\nExchanges the values at the specified indices of the collection.\nfunc partition(by: (MLShapedArraySlice<Scalar>) -> Bool) -> Int\nReorders the elements of the collection such that all the elements that match the given predicate are after all the elements that don’t match.\nfunc sort<Comparator>(using: Comparator)\nReorders a shaped array slice by sorting its slices with a comparator.\nfunc sort<S, Comparator>(using: S)\nReorders a shaped array slice by sorting its slices with a sequence of comparators.\nfunc sort(by: (MLShapedArraySlice<Scalar>, MLShapedArraySlice<Scalar>) -> Bool)\nSorts the collection in place, using the given predicate as the comparison between elements.\nfunc popFirst() -> MLShapedArraySlice<Scalar>?\nRemoves and returns the first element of the collection.\nfunc popLast() -> MLShapedArraySlice<Scalar>?\nRemoves and returns the last element of the collection.\nfunc removeFirst() -> MLShapedArraySlice<Scalar>\nRemoves and returns the first element of the collection.\nfunc removeLast() -> MLShapedArraySlice<Scalar>\nRemoves and returns the last element of the collection.\nfunc removeFirst(Int)\nRemoves the specified number of elements from the beginning of the collection.\nfunc removeLast(Int)\nRemoves the given number of elements from the end of the collection.\nfunc reverse()\nReverses the elements of the collection in place.\nfunc shuffle()\nShuffles the collection in place.\nfunc shuffle<T>(using: inout T)\nShuffles the collection in place, using the given generator as a source for randomness.\nfunc withContiguousMutableStorageIfAvailable<R>((inout UnsafeMutableBufferPointer<MLShapedArraySlice<Scalar>>) -> R) -> R?\nExecutes a closure on the collection’s contiguous storage."
  },
  {
    "title": "sort(using:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarray/3802062-sort",
    "html": "Parameters\ncomparators\n\nA sequence of shaped-array slice comparators.\n\nSee Also\nModifying a Shaped Array\nfunc swapAt(Int, Int)\nExchanges the values at the specified indices of the collection.\nfunc partition(by: (MLShapedArraySlice<Scalar>) -> Bool) -> Int\nReorders the elements of the collection such that all the elements that match the given predicate are after all the elements that don’t match.\nfunc sort<Comparator>(using: Comparator)\nReorders a shaped array by sorting its slices with a comparator.\nfunc sort(by: (MLShapedArraySlice<Scalar>, MLShapedArraySlice<Scalar>) -> Bool)\nSorts the collection in place, using the given predicate as the comparison between elements.\nfunc reverse()\nReverses the elements of the collection in place.\nfunc shuffle()\nShuffles the collection in place.\nfunc shuffle<T>(using: inout T)\nShuffles the collection in place, using the given generator as a source for randomness.\nfunc withContiguousMutableStorageIfAvailable<R>((inout UnsafeMutableBufferPointer<MLShapedArraySlice<Scalar>>) -> R) -> R?\nExecutes a closure on the collection’s contiguous storage."
  },
  {
    "title": "starts(with:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarrayslice/4135053-starts",
    "html": "Parameters\npossiblePrefix\n\nA sequence to compare to this sequence.\n\nReturn Value\n\ntrue if the initial elements of the sequence are the same as the elements of possiblePrefix; otherwise, false. If possiblePrefix has no elements, the return value is true.\n\nDiscussion\n\nThis example tests whether one countable range begins with the elements of another countable range.\n\nlet a = 1...3\nlet b = 1...10\n\n\nprint(b.starts(with: a))\n// Prints \"true\"\n\n\nPassing a sequence with no elements or an empty collection as possiblePrefix always results in true.\n\nprint(b.starts(with: []))\n// Prints \"true\"\n\n\nComplexity: O(m), where m is the lesser of the length of the sequence and the length of possiblePrefix.\n\nSee Also\nFinding an Index in a Shaped Array Slice\nvar startIndex: Int\nThe index of the first element in the shaped array slice.\nvar endIndex: Int\nThe index of the last element in the shaped array slice.\nfunc index(after: Int) -> Int\nReturns the index immediately after an index you provide.\nfunc index(Int, offsetBy: Int) -> Int\nReturns the index at a relative distance to an index you provide.\nfunc index(Int, offsetBy: Int, limitedBy: Int) -> Int?\nReturns an index that is the specified distance from the given index, unless that distance is beyond a given limiting index.\nfunc index(of: MLShapedArraySlice<Scalar>) -> Int?\nReturns the first index where the specified value appears in the collection.\nDeprecated\nfunc formIndex(before: inout Int)\nReplaces the given index with its predecessor.\nfunc formIndex(after: inout Int)\nReplaces the given index with its successor.\nfunc formIndex(inout Int, offsetBy: Int)\nOffsets the given index by the specified distance.\nfunc formIndex(inout Int, offsetBy: Int, limitedBy: Int) -> Bool\nOffsets the given index by the specified distance, or so that it equals the given limiting index.\nfunc firstIndex(where: (MLShapedArraySlice<Scalar>) -> Bool) -> Int?\nReturns the first index in which an element of the collection satisfies the given predicate.\nfunc firstIndex(of: MLShapedArraySlice<Scalar>) -> Int?\nReturns the first index where the specified value appears in the collection.\nfunc firstRange<C>(of: C) -> Range<Int>?\nFinds and returns the range of the first occurrence of a given collection within this collection.\nfunc lastIndex(where: (MLShapedArraySlice<Scalar>) -> Bool) -> Int?\nReturns the index of the last element in the collection that matches the given predicate.\nfunc lastIndex(of: MLShapedArraySlice<Scalar>) -> Int?\nReturns the last index where the specified value appears in the collection.\nfunc ranges<C>(of: C) -> [Range<Int>]\nFinds and returns the ranges of the all occurrences of a given sequence within the collection."
  },
  {
    "title": "publisher | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarrayslice/3763492-publisher",
    "html": "Discussion\n\nSee Publisher for more information about Combine publishers and subscribers.\n\nSee Also\nInspecting a Shaped Array’s Scalars\nvar first: MLShapedArraySlice<Scalar>?\nThe first element of the collection.\nvar last: MLShapedArraySlice<Scalar>?\nThe last element of the collection.\nvar lazy: LazySequence<MLShapedArraySlice<Scalar>>\nA sequence containing the same elements as this sequence, but on which some operations, such as map and filter, are implemented lazily."
  },
  {
    "title": "first | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarrayslice/3763420-first",
    "html": "Discussion\n\nIf the collection is empty, the value of this property is nil.\n\nlet numbers = [10, 20, 30, 40, 50]\nif let firstNumber = numbers.first {\n    print(firstNumber)\n}\n// Prints \"10\"\n\nSee Also\nInspecting a Shaped Array’s Scalars\nvar last: MLShapedArraySlice<Scalar>?\nThe last element of the collection.\nvar publisher: Publishers.Sequence<MLShapedArraySlice<Scalar>, Never>\nA publisher that produces the element in the shaped array slice as separate values.\nvar lazy: LazySequence<MLShapedArraySlice<Scalar>>\nA sequence containing the same elements as this sequence, but on which some operations, such as map and filter, are implemented lazily."
  },
  {
    "title": "forEach(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarrayslice/3763429-foreach",
    "html": "Parameters\nbody\n\nA closure that takes an element of the sequence as a parameter.\n\nDiscussion\n\nThe two loops in the following example produce the same output:\n\nlet numberWords = [\"one\", \"two\", \"three\"]\nfor word in numberWords {\n    print(word)\n}\n// Prints \"one\"\n// Prints \"two\"\n// Prints \"three\"\n\n\nnumberWords.forEach { word in\n    print(word)\n}\n// Same as above\n\n\nUsing the forEach method is distinct from a for-in loop in two important ways:\n\nYou cannot use a break or continue statement to exit the current call of the body closure or skip subsequent calls.\n\nUsing the return statement in the body closure will exit only from the current call to body, not from any outer scope, and won’t skip subsequent calls.\n\nSee Also\nInspecting a Slice of a Shaped Array Slice\nfunc allSatisfy((MLShapedArraySlice<Scalar>) -> Bool) -> Bool\nReturns a Boolean value indicating whether every element of a sequence satisfies a given predicate.\nfunc contains(where: (MLShapedArraySlice<Scalar>) -> Bool) -> Bool\nReturns a Boolean value indicating whether the sequence contains an element that satisfies the given predicate.\nfunc contains(MLShapedArraySlice<Scalar>) -> Bool\nReturns a Boolean value indicating whether the sequence contains the given element.\nfunc contains<C>(C) -> Bool\nReturns a Boolean value indicating whether the collection contains the given sequence.\nsubscript<R>(R) -> MLShapedArraySlice<Scalar>\nAccesses the contiguous subrange of the collection’s elements specified by a range expression.\nfunc makeIterator() -> IndexingIterator<MLShapedArraySlice<Scalar>>\nReturns an iterator over the elements of the collection.\nfunc enumerated() -> EnumeratedSequence<MLShapedArraySlice<Scalar>>\nReturns a sequence of pairs (n, x), where n represents a consecutive integer starting at zero and x represents an element of the sequence.\nfunc randomElement() -> MLShapedArraySlice<Scalar>?\nReturns a random element of the collection.\nfunc randomElement<T>(using: inout T) -> MLShapedArraySlice<Scalar>?\nReturns a random element of the collection, using the given generator as a source for randomness.\nfunc withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<MLShapedArraySlice<Scalar>>) -> R) -> R?\nExecutes a closure on the sequence’s contiguous storage."
  },
  {
    "title": "starts(with:by:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarrayslice/3763534-starts",
    "html": "Parameters\npossiblePrefix\n\nA sequence to compare to this sequence.\n\nareEquivalent\n\nA predicate that returns true if its two arguments are equivalent; otherwise, false.\n\nReturn Value\n\ntrue if the initial elements of the sequence are equivalent to the elements of possiblePrefix; otherwise, false. If possiblePrefix has no elements, the return value is true.\n\nDiscussion\n\nThe predicate must be a equivalence relation over the elements. That is, for any elements a, b, and c, the following conditions must hold:\n\nComplexity: O(m), where m is the lesser of the length of the sequence and the length of possiblePrefix.\n\nareEquivalent(a, a) is always true. (Reflexivity)\n\nareEquivalent(a, b) implies areEquivalent(b, a). (Symmetry)\n\nIf areEquivalent(a, b) and areEquivalent(b, c) are both true, then areEquivalent(a, c) is also true. (Transitivity)\n\nSee Also\nComparing Shaped Array Slices\nfunc compare<Comparator>(Comparator.Compared, Comparator.Compared) -> ComparisonResult\nReturns a comparison result by comparing two shaped array slices.\nfunc difference<C>(from: C, by: (C.Element, MLShapedArraySlice<Scalar>) -> Bool) -> CollectionDifference<MLShapedArraySlice<Scalar>>\nReturns the difference needed to produce this collection’s ordered elements from the given collection, using the given predicate as an equivalence test.\nfunc difference<C>(from: C) -> CollectionDifference<MLShapedArraySlice<Scalar>>\nReturns the difference needed to produce this collection’s ordered elements from the given collection.\nfunc elementsEqual<OtherSequence>(OtherSequence, by: (MLShapedArraySlice<Scalar>, OtherSequence.Element) -> Bool) -> Bool\nReturns a Boolean value indicating whether this sequence and another sequence contain equivalent elements in the same order, using the given predicate as the equivalence test.\nfunc elementsEqual<OtherSequence>(OtherSequence) -> Bool\nReturns a Boolean value indicating whether this sequence and another sequence contain the same elements in the same order.\nfunc lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (MLShapedArraySlice<Scalar>, MLShapedArraySlice<Scalar>) -> Bool) -> Bool\nReturns a Boolean value indicating whether the sequence precedes another sequence in a lexicographical (dictionary) ordering, using the given predicate to compare elements."
  },
  {
    "title": "elementsEqual(_:by:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarrayslice/3763410-elementsequal",
    "html": "Parameters\nother\n\nA sequence to compare to this sequence.\n\nareEquivalent\n\nA predicate that returns true if its two arguments are equivalent; otherwise, false.\n\nReturn Value\n\ntrue if this sequence and other contain equivalent items, using areEquivalent as the equivalence test; otherwise, false.\n\nDiscussion\n\nAt least one of the sequences must be finite.\n\nThe predicate must be a equivalence relation over the elements. That is, for any elements a, b, and c, the following conditions must hold:\n\nComplexity: O(m), where m is the lesser of the length of the sequence and the length of other.\n\nareEquivalent(a, a) is always true. (Reflexivity)\n\nareEquivalent(a, b) implies areEquivalent(b, a). (Symmetry)\n\nIf areEquivalent(a, b) and areEquivalent(b, c) are both true, then areEquivalent(a, c) is also true. (Transitivity)\n\nSee Also\nComparing Shaped Array Slices\nfunc compare<Comparator>(Comparator.Compared, Comparator.Compared) -> ComparisonResult\nReturns a comparison result by comparing two shaped array slices.\nfunc difference<C>(from: C, by: (C.Element, MLShapedArraySlice<Scalar>) -> Bool) -> CollectionDifference<MLShapedArraySlice<Scalar>>\nReturns the difference needed to produce this collection’s ordered elements from the given collection, using the given predicate as an equivalence test.\nfunc difference<C>(from: C) -> CollectionDifference<MLShapedArraySlice<Scalar>>\nReturns the difference needed to produce this collection’s ordered elements from the given collection.\nfunc elementsEqual<OtherSequence>(OtherSequence) -> Bool\nReturns a Boolean value indicating whether this sequence and another sequence contain the same elements in the same order.\nfunc starts<PossiblePrefix>(with: PossiblePrefix, by: (MLShapedArraySlice<Scalar>, PossiblePrefix.Element) -> Bool) -> Bool\nReturns a Boolean value indicating whether the initial elements of the sequence are equivalent to the elements in another sequence, using the given predicate as the equivalence test.\nfunc lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (MLShapedArraySlice<Scalar>, MLShapedArraySlice<Scalar>) -> Bool) -> Bool\nReturns a Boolean value indicating whether the sequence precedes another sequence in a lexicographical (dictionary) ordering, using the given predicate to compare elements."
  },
  {
    "title": "elementsEqual(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarrayslice/4135035-elementsequal",
    "html": "Parameters\nother\n\nA sequence to compare to this sequence.\n\nReturn Value\n\ntrue if this sequence and other contain the same elements in the same order.\n\nDiscussion\n\nAt least one of the sequences must be finite.\n\nThis example tests whether one countable range shares the same elements as another countable range and an array.\n\nlet a = 1...3\nlet b = 1...10\n\n\nprint(a.elementsEqual(b))\n// Prints \"false\"\nprint(a.elementsEqual([1, 2, 3]))\n// Prints \"true\"\n\n\nComplexity: O(m), where m is the lesser of the length of the sequence and the length of other.\n\nSee Also\nComparing Shaped Array Slices\nfunc compare<Comparator>(Comparator.Compared, Comparator.Compared) -> ComparisonResult\nReturns a comparison result by comparing two shaped array slices.\nfunc difference<C>(from: C, by: (C.Element, MLShapedArraySlice<Scalar>) -> Bool) -> CollectionDifference<MLShapedArraySlice<Scalar>>\nReturns the difference needed to produce this collection’s ordered elements from the given collection, using the given predicate as an equivalence test.\nfunc difference<C>(from: C) -> CollectionDifference<MLShapedArraySlice<Scalar>>\nReturns the difference needed to produce this collection’s ordered elements from the given collection.\nfunc elementsEqual<OtherSequence>(OtherSequence, by: (MLShapedArraySlice<Scalar>, OtherSequence.Element) -> Bool) -> Bool\nReturns a Boolean value indicating whether this sequence and another sequence contain equivalent elements in the same order, using the given predicate as the equivalence test.\nfunc starts<PossiblePrefix>(with: PossiblePrefix, by: (MLShapedArraySlice<Scalar>, PossiblePrefix.Element) -> Bool) -> Bool\nReturns a Boolean value indicating whether the initial elements of the sequence are equivalent to the elements in another sequence, using the given predicate as the equivalence test.\nfunc lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (MLShapedArraySlice<Scalar>, MLShapedArraySlice<Scalar>) -> Bool) -> Bool\nReturns a Boolean value indicating whether the sequence precedes another sequence in a lexicographical (dictionary) ordering, using the given predicate to compare elements."
  },
  {
    "title": "!=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarrayslice/4135029",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nSee Also\nComparing Slices\nstatic func == (MLShapedArraySlice<Scalar>, MLShapedArraySlice<Scalar>) -> Bool\nReturns a Boolean value that indicates whether two values are equal.\nAvailable when Scalar conforms to Equatable."
  },
  {
    "title": "subscript(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarrayprotocol/3763372-subscript",
    "html": "See Also\nMLShapedArrayProtocol Implementations\nsubscript(MLShapedArrayRangeExpression...) -> MLShapedArraySlice<Self.Scalar>\nsubscript(Int) -> MLShapedArraySlice<Self.Scalar>\nsubscript(Int...) -> MLShapedArraySlice<Self.Scalar>\nsubscript(Range<Int>) -> MLShapedArraySlice<Self.Scalar>\nsubscript<C>(C) -> MLShapedArraySlice<Self.Scalar>\nsubscript((UnboundedRange_) -> Void) -> MLShapedArraySlice<Self.Scalar>"
  },
  {
    "title": "subscript(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarrayslice/3763544-subscript",
    "html": "Parameters\n_\n\nAn unbounded range.\n\nSee Also\nAccessing a Slice from the First Dimension\nsubscript(Int) -> MLShapedArraySlice<Scalar>\nAccesses a slice at an index in the shaped array slice’s first dimension.\nsubscript<R>(R) -> MLShapedArraySlice<Scalar>\nAccesses a slice with an integer range expression in the shaped array slice’s first dimension.\nsubscript(MLShapedArrayRangeExpression) -> MLShapedArraySlice<Scalar>\nAccesses a slice with a shaped-array range expression in the shaped array slice’s first dimension.\nsubscript((UnboundedRange_) -> ()) -> MLShapedArraySlice<Scalar>\nAccesses a slice with an unbounded range in the shaped array slice’s first dimension."
  },
  {
    "title": "withUnsafeMutableShapedBufferPointer(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarrayslice/3763565-withunsafemutableshapedbufferpoi",
    "html": "Parameters\nbody\n\nA closure that accesses a shaped array’s underlying memory.\n\npt\n\nA pointer to the shaped array.\n\nshape\n\nAn integer array in which each element represents the size of the corresponding dimension.\n\nstrides\n\nAn integer array in which each element is the number of memory locations that spans the length of the corresponding dimension.\n\nDiscussion\n\nThe method returns the value your closure returns, if applicable.\n\nRelationships\nFrom Protocol\nMLShapedArrayProtocol\nSee Also\nModifying a Shaped Array\nfunc fill(with: Scalar)\nSets all the shaped array’s elements to a scalar value.\nfunc fill<C>(with: C)\nAssigns the shaped array’s elements to the elements in a collection, repeatedly, if necessary."
  },
  {
    "title": "firstRange(of:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarray/4135011-firstrange",
    "html": "Parameters\nother\n\nThe collection to search for.\n\nReturn Value\n\nA range in the collection of the first occurrence of sequence. Returns nil if sequence is not found.\n\nSee Also\nFinding an Index in a Shaped Array\nvar startIndex: Int\nThe index of the first element in the shaped array.\nvar endIndex: Int\nThe index of the last element in the shaped array.\nvar indices: Range<Int>\nThe index range of all the elements in the shaped array.\nfunc index(after: Int) -> Int\nReturns the index immediately after an index you provide.\nfunc index(Int, offsetBy: Int) -> Int\nReturns the index at a relative distance to an index you provide.\nfunc index(Int, offsetBy: Int, limitedBy: Int) -> Int?\nReturns an index that is the specified distance from the given index, unless that distance is beyond a given limiting index.\nfunc index(of: MLShapedArraySlice<Scalar>) -> Int?\nReturns the first index where the specified value appears in the collection.\nDeprecated\nfunc filter(Predicate<MLShapedArraySlice<Scalar>>) -> [MLShapedArraySlice<Scalar>]\nfunc formIndex(before: inout Int)\nReplaces the given index with its predecessor.\nfunc formIndex(after: inout Int)\nReplaces the given index with its successor.\nfunc formIndex(inout Int, offsetBy: Int)\nOffsets the given index by the specified distance.\nfunc formIndex(inout Int, offsetBy: Int, limitedBy: Int) -> Bool\nOffsets the given index by the specified distance, or so that it equals the given limiting index.\nfunc firstIndex(where: (MLShapedArraySlice<Scalar>) -> Bool) -> Int?\nReturns the first index in which an element of the collection satisfies the given predicate.\nfunc firstIndex(of: MLShapedArraySlice<Scalar>) -> Int?\nReturns the first index where the specified value appears in the collection.\nfunc lastIndex(where: (MLShapedArraySlice<Scalar>) -> Bool) -> Int?\nReturns the index of the last element in the collection that matches the given predicate.\nfunc lastIndex(of: MLShapedArraySlice<Scalar>) -> Int?\nReturns the last index where the specified value appears in the collection.\nfunc ranges<C>(of: C) -> [Range<Int>]\nFinds and returns the ranges of the all occurrences of a given sequence within the collection.\nfunc starts<PossiblePrefix>(with: PossiblePrefix) -> Bool\nReturns a Boolean value indicating whether the initial elements of the sequence are the same as the elements in another sequence."
  },
  {
    "title": "subscript(scalarAt:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarrayslice/3763553-subscript",
    "html": "Parameters\nindices\n\nAn integer collection in which each element is an index in the corresponding dimension.\n\nRelationships\nFrom Protocol\nMLShapedArrayProtocol\nSee Also\nAccessing an Element\nvar scalar: Scalar?\nA computed property that returns the first element when the shape isn’t empty, or sets the shaped array’s underlying scalar type.\nvar scalars: [Scalar]\nA computed property that generates a linear array that contains every element, or assigns the elements of an array to the shaped array’s elements.\nsubscript(scalarAt: Int...) -> Scalar\nAccesses an element in the shaped array using a list of indices that represent a multidimensional location."
  },
  {
    "title": "fill(with:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarrayslice/3763416-fill",
    "html": "Parameters\nvalue\n\nA scalar value.\n\nSee Also\nModifying a Shaped Array\nfunc fill<C>(with: C)\nAssigns the shaped array’s elements to the elements in a collection, repeatedly, if necessary.\nfunc withUnsafeMutableShapedBufferPointer<R>((inout UnsafeMutableBufferPointer<Scalar>, [Int], [Int]) -> R) -> R\nProvides a closure with a read-write pointer to the shaped array slice’s underlying memory."
  },
  {
    "title": "partition(by:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarray/3763265-partition",
    "html": "Parameters\nbelongsInSecondPartition\n\nA predicate used to partition the collection. All elements satisfying this predicate are ordered after all elements not satisfying it.\n\nReturn Value\n\nThe index of the first element in the reordered collection that matches belongsInSecondPartition. If no elements in the collection match belongsInSecondPartition, the returned index is equal to the collection’s endIndex.\n\nDiscussion\n\nAfter partitioning a collection, there is a pivot index p where no element before p satisfies the belongsInSecondPartition predicate and every element at or after p satisfies belongsInSecondPartition. This operation isn’t guaranteed to be stable, so the relative ordering of elements within the partitions might change.\n\nIn the following example, an array of numbers is partitioned by a predicate that matches elements greater than 30.\n\nvar numbers = [30, 40, 20, 30, 30, 60, 10]\nlet p = numbers.partition(by: { $0 > 30 })\n// p == 5\n// numbers == [30, 10, 20, 30, 30, 60, 40]\n\n\nThe numbers array is now arranged in two partitions. The first partition, numbers[..<p], is made up of the elements that are not greater than 30. The second partition, numbers[p...], is made up of the elements that are greater than 30.\n\nlet first = numbers[..<p]\n// first == [30, 10, 20, 30, 30]\nlet second = numbers[p...]\n// second == [60, 40]\n\n\nNote that the order of elements in both partitions changed. That is, 40 appears before 60 in the original collection, but, after calling partition(by:), 60 appears before 40.\n\nComplexity: O(n), where n is the length of the collection.\n\nSee Also\nModifying a Shaped Array\nfunc swapAt(Int, Int)\nExchanges the values at the specified indices of the collection.\nfunc sort<Comparator>(using: Comparator)\nReorders a shaped array by sorting its slices with a comparator.\nfunc sort<S, Comparator>(using: S)\nReorders a shaped array by sorting its slices with a sequence of comparators.\nfunc sort(by: (MLShapedArraySlice<Scalar>, MLShapedArraySlice<Scalar>) -> Bool)\nSorts the collection in place, using the given predicate as the comparison between elements.\nfunc reverse()\nReverses the elements of the collection in place.\nfunc shuffle()\nShuffles the collection in place.\nfunc shuffle<T>(using: inout T)\nShuffles the collection in place, using the given generator as a source for randomness.\nfunc withContiguousMutableStorageIfAvailable<R>((inout UnsafeMutableBufferPointer<MLShapedArraySlice<Scalar>>) -> R) -> R?\nExecutes a closure on the collection’s contiguous storage."
  },
  {
    "title": "starts(with:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarray/4135025-starts",
    "html": "Parameters\npossiblePrefix\n\nA sequence to compare to this sequence.\n\nReturn Value\n\ntrue if the initial elements of the sequence are the same as the elements of possiblePrefix; otherwise, false. If possiblePrefix has no elements, the return value is true.\n\nDiscussion\n\nThis example tests whether one countable range begins with the elements of another countable range.\n\nlet a = 1...3\nlet b = 1...10\n\n\nprint(b.starts(with: a))\n// Prints \"true\"\n\n\nPassing a sequence with no elements or an empty collection as possiblePrefix always results in true.\n\nprint(b.starts(with: []))\n// Prints \"true\"\n\n\nComplexity: O(m), where m is the lesser of the length of the sequence and the length of possiblePrefix.\n\nSee Also\nFinding an Index in a Shaped Array\nvar startIndex: Int\nThe index of the first element in the shaped array.\nvar endIndex: Int\nThe index of the last element in the shaped array.\nvar indices: Range<Int>\nThe index range of all the elements in the shaped array.\nfunc index(after: Int) -> Int\nReturns the index immediately after an index you provide.\nfunc index(Int, offsetBy: Int) -> Int\nReturns the index at a relative distance to an index you provide.\nfunc index(Int, offsetBy: Int, limitedBy: Int) -> Int?\nReturns an index that is the specified distance from the given index, unless that distance is beyond a given limiting index.\nfunc index(of: MLShapedArraySlice<Scalar>) -> Int?\nReturns the first index where the specified value appears in the collection.\nDeprecated\nfunc filter(Predicate<MLShapedArraySlice<Scalar>>) -> [MLShapedArraySlice<Scalar>]\nfunc formIndex(before: inout Int)\nReplaces the given index with its predecessor.\nfunc formIndex(after: inout Int)\nReplaces the given index with its successor.\nfunc formIndex(inout Int, offsetBy: Int)\nOffsets the given index by the specified distance.\nfunc formIndex(inout Int, offsetBy: Int, limitedBy: Int) -> Bool\nOffsets the given index by the specified distance, or so that it equals the given limiting index.\nfunc firstIndex(where: (MLShapedArraySlice<Scalar>) -> Bool) -> Int?\nReturns the first index in which an element of the collection satisfies the given predicate.\nfunc firstIndex(of: MLShapedArraySlice<Scalar>) -> Int?\nReturns the first index where the specified value appears in the collection.\nfunc lastIndex(where: (MLShapedArraySlice<Scalar>) -> Bool) -> Int?\nReturns the index of the last element in the collection that matches the given predicate.\nfunc lastIndex(of: MLShapedArraySlice<Scalar>) -> Int?\nReturns the last index where the specified value appears in the collection.\nfunc ranges<C>(of: C) -> [Range<Int>]\nFinds and returns the ranges of the all occurrences of a given sequence within the collection.\nfunc firstRange<C>(of: C) -> Range<Int>?\nFinds and returns the range of the first occurrence of a given collection within this collection."
  },
  {
    "title": "lastIndex(of:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarray/4135013-lastindex",
    "html": "Parameters\nelement\n\nAn element to search for in the collection.\n\nReturn Value\n\nThe last index where element is found. If element is not found in the collection, this method returns nil.\n\nDiscussion\n\nAfter using lastIndex(of:) to find the position of the last instance of a particular element in a collection, you can use it to access the element by subscripting. This example shows how you can modify one of the names in an array of students.\n\nvar students = [\"Ben\", \"Ivy\", \"Jordell\", \"Ben\", \"Maxime\"]\nif let i = students.lastIndex(of: \"Ben\") {\n    students[i] = \"Benjamin\"\n}\nprint(students)\n// Prints \"[\"Ben\", \"Ivy\", \"Jordell\", \"Benjamin\", \"Max\"]\"\n\n\nComplexity: O(n), where n is the length of the collection.\n\nSee Also\nFinding an Index in a Shaped Array\nvar startIndex: Int\nThe index of the first element in the shaped array.\nvar endIndex: Int\nThe index of the last element in the shaped array.\nvar indices: Range<Int>\nThe index range of all the elements in the shaped array.\nfunc index(after: Int) -> Int\nReturns the index immediately after an index you provide.\nfunc index(Int, offsetBy: Int) -> Int\nReturns the index at a relative distance to an index you provide.\nfunc index(Int, offsetBy: Int, limitedBy: Int) -> Int?\nReturns an index that is the specified distance from the given index, unless that distance is beyond a given limiting index.\nfunc index(of: MLShapedArraySlice<Scalar>) -> Int?\nReturns the first index where the specified value appears in the collection.\nDeprecated\nfunc filter(Predicate<MLShapedArraySlice<Scalar>>) -> [MLShapedArraySlice<Scalar>]\nfunc formIndex(before: inout Int)\nReplaces the given index with its predecessor.\nfunc formIndex(after: inout Int)\nReplaces the given index with its successor.\nfunc formIndex(inout Int, offsetBy: Int)\nOffsets the given index by the specified distance.\nfunc formIndex(inout Int, offsetBy: Int, limitedBy: Int) -> Bool\nOffsets the given index by the specified distance, or so that it equals the given limiting index.\nfunc firstIndex(where: (MLShapedArraySlice<Scalar>) -> Bool) -> Int?\nReturns the first index in which an element of the collection satisfies the given predicate.\nfunc firstIndex(of: MLShapedArraySlice<Scalar>) -> Int?\nReturns the first index where the specified value appears in the collection.\nfunc lastIndex(where: (MLShapedArraySlice<Scalar>) -> Bool) -> Int?\nReturns the index of the last element in the collection that matches the given predicate.\nfunc ranges<C>(of: C) -> [Range<Int>]\nFinds and returns the ranges of the all occurrences of a given sequence within the collection.\nfunc starts<PossiblePrefix>(with: PossiblePrefix) -> Bool\nReturns a Boolean value indicating whether the initial elements of the sequence are the same as the elements in another sequence.\nfunc firstRange<C>(of: C) -> Range<Int>?\nFinds and returns the range of the first occurrence of a given collection within this collection."
  },
  {
    "title": "lastIndex(where:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarray/3763254-lastindex",
    "html": "Parameters\npredicate\n\nA closure that takes an element as its argument and returns a Boolean value that indicates whether the passed element represents a match.\n\nReturn Value\n\nThe index of the last element in the collection that matches predicate, or nil if no elements match.\n\nDiscussion\n\nYou can use the predicate to find an element of a type that doesn’t conform to the Equatable protocol or to find an element that matches particular criteria. This example finds the index of the last name that begins with the letter A:\n\nlet students = [\"Kofi\", \"Abena\", \"Peter\", \"Kweku\", \"Akosua\"]\nif let i = students.lastIndex(where: { $0.hasPrefix(\"A\") }) {\n    print(\"\\(students[i]) starts with 'A'!\")\n}\n// Prints \"Akosua starts with 'A'!\"\n\n\nComplexity: O(n), where n is the length of the collection.\n\nSee Also\nFinding an Index in a Shaped Array\nvar startIndex: Int\nThe index of the first element in the shaped array.\nvar endIndex: Int\nThe index of the last element in the shaped array.\nvar indices: Range<Int>\nThe index range of all the elements in the shaped array.\nfunc index(after: Int) -> Int\nReturns the index immediately after an index you provide.\nfunc index(Int, offsetBy: Int) -> Int\nReturns the index at a relative distance to an index you provide.\nfunc index(Int, offsetBy: Int, limitedBy: Int) -> Int?\nReturns an index that is the specified distance from the given index, unless that distance is beyond a given limiting index.\nfunc index(of: MLShapedArraySlice<Scalar>) -> Int?\nReturns the first index where the specified value appears in the collection.\nDeprecated\nfunc filter(Predicate<MLShapedArraySlice<Scalar>>) -> [MLShapedArraySlice<Scalar>]\nfunc formIndex(before: inout Int)\nReplaces the given index with its predecessor.\nfunc formIndex(after: inout Int)\nReplaces the given index with its successor.\nfunc formIndex(inout Int, offsetBy: Int)\nOffsets the given index by the specified distance.\nfunc formIndex(inout Int, offsetBy: Int, limitedBy: Int) -> Bool\nOffsets the given index by the specified distance, or so that it equals the given limiting index.\nfunc firstIndex(where: (MLShapedArraySlice<Scalar>) -> Bool) -> Int?\nReturns the first index in which an element of the collection satisfies the given predicate.\nfunc firstIndex(of: MLShapedArraySlice<Scalar>) -> Int?\nReturns the first index where the specified value appears in the collection.\nfunc lastIndex(of: MLShapedArraySlice<Scalar>) -> Int?\nReturns the last index where the specified value appears in the collection.\nfunc ranges<C>(of: C) -> [Range<Int>]\nFinds and returns the ranges of the all occurrences of a given sequence within the collection.\nfunc starts<PossiblePrefix>(with: PossiblePrefix) -> Bool\nReturns a Boolean value indicating whether the initial elements of the sequence are the same as the elements in another sequence.\nfunc firstRange<C>(of: C) -> Range<Int>?\nFinds and returns the range of the first occurrence of a given collection within this collection."
  },
  {
    "title": "firstIndex(of:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarray/4135009-firstindex",
    "html": "Parameters\nelement\n\nAn element to search for in the collection.\n\nReturn Value\n\nThe first index where element is found. If element is not found in the collection, returns nil.\n\nDiscussion\n\nAfter using firstIndex(of:) to find the position of a particular element in a collection, you can use it to access the element by subscripting. This example shows how you can modify one of the names in an array of students.\n\nvar students = [\"Ben\", \"Ivy\", \"Jordell\", \"Maxime\"]\nif let i = students.firstIndex(of: \"Maxime\") {\n    students[i] = \"Max\"\n}\nprint(students)\n// Prints \"[\"Ben\", \"Ivy\", \"Jordell\", \"Max\"]\"\n\n\nComplexity: O(n), where n is the length of the collection.\n\nSee Also\nFinding an Index in a Shaped Array\nvar startIndex: Int\nThe index of the first element in the shaped array.\nvar endIndex: Int\nThe index of the last element in the shaped array.\nvar indices: Range<Int>\nThe index range of all the elements in the shaped array.\nfunc index(after: Int) -> Int\nReturns the index immediately after an index you provide.\nfunc index(Int, offsetBy: Int) -> Int\nReturns the index at a relative distance to an index you provide.\nfunc index(Int, offsetBy: Int, limitedBy: Int) -> Int?\nReturns an index that is the specified distance from the given index, unless that distance is beyond a given limiting index.\nfunc index(of: MLShapedArraySlice<Scalar>) -> Int?\nReturns the first index where the specified value appears in the collection.\nDeprecated\nfunc filter(Predicate<MLShapedArraySlice<Scalar>>) -> [MLShapedArraySlice<Scalar>]\nfunc formIndex(before: inout Int)\nReplaces the given index with its predecessor.\nfunc formIndex(after: inout Int)\nReplaces the given index with its successor.\nfunc formIndex(inout Int, offsetBy: Int)\nOffsets the given index by the specified distance.\nfunc formIndex(inout Int, offsetBy: Int, limitedBy: Int) -> Bool\nOffsets the given index by the specified distance, or so that it equals the given limiting index.\nfunc firstIndex(where: (MLShapedArraySlice<Scalar>) -> Bool) -> Int?\nReturns the first index in which an element of the collection satisfies the given predicate.\nfunc lastIndex(where: (MLShapedArraySlice<Scalar>) -> Bool) -> Int?\nReturns the index of the last element in the collection that matches the given predicate.\nfunc lastIndex(of: MLShapedArraySlice<Scalar>) -> Int?\nReturns the last index where the specified value appears in the collection.\nfunc ranges<C>(of: C) -> [Range<Int>]\nFinds and returns the ranges of the all occurrences of a given sequence within the collection.\nfunc starts<PossiblePrefix>(with: PossiblePrefix) -> Bool\nReturns a Boolean value indicating whether the initial elements of the sequence are the same as the elements in another sequence.\nfunc firstRange<C>(of: C) -> Range<Int>?\nFinds and returns the range of the first occurrence of a given collection within this collection."
  },
  {
    "title": "formIndex(_:offsetBy:limitedBy:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarray/3763219-formindex",
    "html": "Parameters\ni\n\nA valid index of the collection.\n\ndistance\n\nThe distance to offset i. distance must not be negative unless the collection conforms to the BidirectionalCollection protocol.\n\nlimit\n\nA valid index of the collection to use as a limit. If distance > 0, a limit that is less than i has no effect. Likewise, if distance < 0, a limit that is greater than i has no effect.\n\nReturn Value\n\ntrue if i has been offset by exactly distance steps without going beyond limit; otherwise, false. When the return value is false, the value of i is equal to limit.\n\nDiscussion\n\nThe value passed as distance must not offset i beyond the bounds of the collection, unless the index passed as limit prevents offsetting beyond those bounds.\n\nComplexity: O(1) if the collection conforms to RandomAccessCollection; otherwise, O(k), where k is the absolute value of distance.\n\nSee Also\nFinding an Index in a Shaped Array\nvar startIndex: Int\nThe index of the first element in the shaped array.\nvar endIndex: Int\nThe index of the last element in the shaped array.\nvar indices: Range<Int>\nThe index range of all the elements in the shaped array.\nfunc index(after: Int) -> Int\nReturns the index immediately after an index you provide.\nfunc index(Int, offsetBy: Int) -> Int\nReturns the index at a relative distance to an index you provide.\nfunc index(Int, offsetBy: Int, limitedBy: Int) -> Int?\nReturns an index that is the specified distance from the given index, unless that distance is beyond a given limiting index.\nfunc index(of: MLShapedArraySlice<Scalar>) -> Int?\nReturns the first index where the specified value appears in the collection.\nDeprecated\nfunc filter(Predicate<MLShapedArraySlice<Scalar>>) -> [MLShapedArraySlice<Scalar>]\nfunc formIndex(before: inout Int)\nReplaces the given index with its predecessor.\nfunc formIndex(after: inout Int)\nReplaces the given index with its successor.\nfunc formIndex(inout Int, offsetBy: Int)\nOffsets the given index by the specified distance.\nfunc firstIndex(where: (MLShapedArraySlice<Scalar>) -> Bool) -> Int?\nReturns the first index in which an element of the collection satisfies the given predicate.\nfunc firstIndex(of: MLShapedArraySlice<Scalar>) -> Int?\nReturns the first index where the specified value appears in the collection.\nfunc lastIndex(where: (MLShapedArraySlice<Scalar>) -> Bool) -> Int?\nReturns the index of the last element in the collection that matches the given predicate.\nfunc lastIndex(of: MLShapedArraySlice<Scalar>) -> Int?\nReturns the last index where the specified value appears in the collection.\nfunc ranges<C>(of: C) -> [Range<Int>]\nFinds and returns the ranges of the all occurrences of a given sequence within the collection.\nfunc starts<PossiblePrefix>(with: PossiblePrefix) -> Bool\nReturns a Boolean value indicating whether the initial elements of the sequence are the same as the elements in another sequence.\nfunc firstRange<C>(of: C) -> Range<Int>?\nFinds and returns the range of the first occurrence of a given collection within this collection."
  },
  {
    "title": "formIndex(_:offsetBy:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarray/3763218-formindex",
    "html": "Parameters\ni\n\nA valid index of the collection.\n\ndistance\n\nThe distance to offset i. distance must not be negative unless the collection conforms to the BidirectionalCollection protocol.\n\nDiscussion\n\nThe value passed as distance must not offset i beyond the bounds of the collection.\n\nComplexity: O(1) if the collection conforms to RandomAccessCollection; otherwise, O(k), where k is the absolute value of distance.\n\nSee Also\nFinding an Index in a Shaped Array\nvar startIndex: Int\nThe index of the first element in the shaped array.\nvar endIndex: Int\nThe index of the last element in the shaped array.\nvar indices: Range<Int>\nThe index range of all the elements in the shaped array.\nfunc index(after: Int) -> Int\nReturns the index immediately after an index you provide.\nfunc index(Int, offsetBy: Int) -> Int\nReturns the index at a relative distance to an index you provide.\nfunc index(Int, offsetBy: Int, limitedBy: Int) -> Int?\nReturns an index that is the specified distance from the given index, unless that distance is beyond a given limiting index.\nfunc index(of: MLShapedArraySlice<Scalar>) -> Int?\nReturns the first index where the specified value appears in the collection.\nDeprecated\nfunc filter(Predicate<MLShapedArraySlice<Scalar>>) -> [MLShapedArraySlice<Scalar>]\nfunc formIndex(before: inout Int)\nReplaces the given index with its predecessor.\nfunc formIndex(after: inout Int)\nReplaces the given index with its successor.\nfunc formIndex(inout Int, offsetBy: Int, limitedBy: Int) -> Bool\nOffsets the given index by the specified distance, or so that it equals the given limiting index.\nfunc firstIndex(where: (MLShapedArraySlice<Scalar>) -> Bool) -> Int?\nReturns the first index in which an element of the collection satisfies the given predicate.\nfunc firstIndex(of: MLShapedArraySlice<Scalar>) -> Int?\nReturns the first index where the specified value appears in the collection.\nfunc lastIndex(where: (MLShapedArraySlice<Scalar>) -> Bool) -> Int?\nReturns the index of the last element in the collection that matches the given predicate.\nfunc lastIndex(of: MLShapedArraySlice<Scalar>) -> Int?\nReturns the last index where the specified value appears in the collection.\nfunc ranges<C>(of: C) -> [Range<Int>]\nFinds and returns the ranges of the all occurrences of a given sequence within the collection.\nfunc starts<PossiblePrefix>(with: PossiblePrefix) -> Bool\nReturns a Boolean value indicating whether the initial elements of the sequence are the same as the elements in another sequence.\nfunc firstRange<C>(of: C) -> Range<Int>?\nFinds and returns the range of the first occurrence of a given collection within this collection."
  },
  {
    "title": "index(of:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarray/4135012-index",
    "html": "See Also\nFinding an Index in a Shaped Array\nvar startIndex: Int\nThe index of the first element in the shaped array.\nvar endIndex: Int\nThe index of the last element in the shaped array.\nvar indices: Range<Int>\nThe index range of all the elements in the shaped array.\nfunc index(after: Int) -> Int\nReturns the index immediately after an index you provide.\nfunc index(Int, offsetBy: Int) -> Int\nReturns the index at a relative distance to an index you provide.\nfunc index(Int, offsetBy: Int, limitedBy: Int) -> Int?\nReturns an index that is the specified distance from the given index, unless that distance is beyond a given limiting index.\nfunc filter(Predicate<MLShapedArraySlice<Scalar>>) -> [MLShapedArraySlice<Scalar>]\nfunc formIndex(before: inout Int)\nReplaces the given index with its predecessor.\nfunc formIndex(after: inout Int)\nReplaces the given index with its successor.\nfunc formIndex(inout Int, offsetBy: Int)\nOffsets the given index by the specified distance.\nfunc formIndex(inout Int, offsetBy: Int, limitedBy: Int) -> Bool\nOffsets the given index by the specified distance, or so that it equals the given limiting index.\nfunc firstIndex(where: (MLShapedArraySlice<Scalar>) -> Bool) -> Int?\nReturns the first index in which an element of the collection satisfies the given predicate.\nfunc firstIndex(of: MLShapedArraySlice<Scalar>) -> Int?\nReturns the first index where the specified value appears in the collection.\nfunc lastIndex(where: (MLShapedArraySlice<Scalar>) -> Bool) -> Int?\nReturns the index of the last element in the collection that matches the given predicate.\nfunc lastIndex(of: MLShapedArraySlice<Scalar>) -> Int?\nReturns the last index where the specified value appears in the collection.\nfunc ranges<C>(of: C) -> [Range<Int>]\nFinds and returns the ranges of the all occurrences of a given sequence within the collection.\nfunc starts<PossiblePrefix>(with: PossiblePrefix) -> Bool\nReturns a Boolean value indicating whether the initial elements of the sequence are the same as the elements in another sequence.\nfunc firstRange<C>(of: C) -> Range<Int>?\nFinds and returns the range of the first occurrence of a given collection within this collection."
  },
  {
    "title": "randomElement() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarray/3763279-randomelement",
    "html": "Return Value\n\nA random element from the collection. If the collection is empty, the method returns nil.\n\nDiscussion\n\nCall randomElement() to select a random element from an array or another collection. This example picks a name at random from an array:\n\nlet names = [\"Zoey\", \"Chloe\", \"Amani\", \"Amaia\"]\nlet randomName = names.randomElement()!\n// randomName == \"Amani\"\n\n\nThis method is equivalent to calling randomElement(using:), passing in the system’s default random generator.\n\nComplexity: O(1) if the collection conforms to RandomAccessCollection; otherwise, O(n), where n is the length of the collection.\n\nSee Also\nInspecting a Slice of a Shaped Array\nfunc allSatisfy((MLShapedArraySlice<Scalar>) -> Bool) -> Bool\nReturns a Boolean value indicating whether every element of a sequence satisfies a given predicate.\nfunc contains<C>(C) -> Bool\nReturns a Boolean value indicating whether the collection contains the given sequence.\nfunc contains(where: (MLShapedArraySlice<Scalar>) -> Bool) -> Bool\nReturns a Boolean value indicating whether the sequence contains an element that satisfies the given predicate.\nfunc contains(MLShapedArraySlice<Scalar>) -> Bool\nReturns a Boolean value indicating whether the sequence contains the given element.\nsubscript<R>(R) -> MLShapedArraySlice<Scalar>\nAccesses the contiguous subrange of the collection’s elements specified by a range expression.\nfunc makeIterator() -> IndexingIterator<MLShapedArray<Scalar>>\nReturns an iterator over the elements of the collection.\nfunc forEach((MLShapedArraySlice<Scalar>) -> Void)\nCalls the given closure on each element in the sequence in the same order as a for-in loop.\nfunc enumerated() -> EnumeratedSequence<MLShapedArray<Scalar>>\nReturns a sequence of pairs (n, x), where n represents a consecutive integer starting at zero and x represents an element of the sequence.\nfunc randomElement<T>(using: inout T) -> MLShapedArraySlice<Scalar>?\nReturns a random element of the collection, using the given generator as a source for randomness.\nfunc withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<MLShapedArraySlice<Scalar>>) -> R) -> R?\nExecutes a closure on the sequence’s contiguous storage."
  },
  {
    "title": "enumerated() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarray/3763199-enumerated",
    "html": "Return Value\n\nA sequence of pairs enumerating the sequence.\n\nDiscussion\n\nThis example enumerates the characters of the string “Swift” and prints each character along with its place in the string.\n\nfor (n, c) in \"Swift\".enumerated() {\n    print(\"\\(n): '\\(c)'\")\n}\n// Prints \"0: 'S'\"\n// Prints \"1: 'w'\"\n// Prints \"2: 'i'\"\n// Prints \"3: 'f'\"\n// Prints \"4: 't'\"\n\n\nWhen you enumerate a collection, the integer part of each pair is a counter for the enumeration, but is not necessarily the index of the paired value. These counters can be used as indices only in instances of zero-based, integer-indexed collections, such as Array and ContiguousArray. For other collections the counters may be out of range or of the wrong type to use as an index. To iterate over the elements of a collection with its indices, use the zip(_:_:) function.\n\nThis example iterates over the indices and elements of a set, building a list consisting of indices of names with five or fewer letters.\n\nlet names: Set = [\"Sofia\", \"Camilla\", \"Martina\", \"Mateo\", \"Nicolás\"]\nvar shorterIndices: [Set<String>.Index] = []\nfor (i, name) in zip(names.indices, names) {\n    if name.count <= 5 {\n        shorterIndices.append(i)\n    }\n}\n\n\nNow that the shorterIndices array holds the indices of the shorter names in the names set, you can use those indices to access elements in the set.\n\nfor i in shorterIndices {\n    print(names[i])\n}\n// Prints \"Sofia\"\n// Prints \"Mateo\"\n\n\nComplexity: O(1)\n\nSee Also\nInspecting a Slice of a Shaped Array\nfunc allSatisfy((MLShapedArraySlice<Scalar>) -> Bool) -> Bool\nReturns a Boolean value indicating whether every element of a sequence satisfies a given predicate.\nfunc contains<C>(C) -> Bool\nReturns a Boolean value indicating whether the collection contains the given sequence.\nfunc contains(where: (MLShapedArraySlice<Scalar>) -> Bool) -> Bool\nReturns a Boolean value indicating whether the sequence contains an element that satisfies the given predicate.\nfunc contains(MLShapedArraySlice<Scalar>) -> Bool\nReturns a Boolean value indicating whether the sequence contains the given element.\nsubscript<R>(R) -> MLShapedArraySlice<Scalar>\nAccesses the contiguous subrange of the collection’s elements specified by a range expression.\nfunc makeIterator() -> IndexingIterator<MLShapedArray<Scalar>>\nReturns an iterator over the elements of the collection.\nfunc forEach((MLShapedArraySlice<Scalar>) -> Void)\nCalls the given closure on each element in the sequence in the same order as a for-in loop.\nfunc randomElement() -> MLShapedArraySlice<Scalar>?\nReturns a random element of the collection.\nfunc randomElement<T>(using: inout T) -> MLShapedArraySlice<Scalar>?\nReturns a random element of the collection, using the given generator as a source for randomness.\nfunc withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<MLShapedArraySlice<Scalar>>) -> R) -> R?\nExecutes a closure on the sequence’s contiguous storage."
  },
  {
    "title": "allSatisfy(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarray/3763182-allsatisfy",
    "html": "Parameters\npredicate\n\nA closure that takes an element of the sequence as its argument and returns a Boolean value that indicates whether the passed element satisfies a condition.\n\nReturn Value\n\ntrue if the sequence contains only elements that satisfy predicate; otherwise, false.\n\nDiscussion\n\nThe following code uses this method to test whether all the names in an array have at least five characters:\n\nlet names = [\"Sofia\", \"Camilla\", \"Martina\", \"Mateo\", \"Nicolás\"]\nlet allHaveAtLeastFive = names.allSatisfy({ $0.count >= 5 })\n// allHaveAtLeastFive == true\n\n\nIf the sequence is empty, this method returns true.\n\nComplexity: O(n), where n is the length of the sequence.\n\nSee Also\nInspecting a Slice of a Shaped Array\nfunc contains<C>(C) -> Bool\nReturns a Boolean value indicating whether the collection contains the given sequence.\nfunc contains(where: (MLShapedArraySlice<Scalar>) -> Bool) -> Bool\nReturns a Boolean value indicating whether the sequence contains an element that satisfies the given predicate.\nfunc contains(MLShapedArraySlice<Scalar>) -> Bool\nReturns a Boolean value indicating whether the sequence contains the given element.\nsubscript<R>(R) -> MLShapedArraySlice<Scalar>\nAccesses the contiguous subrange of the collection’s elements specified by a range expression.\nfunc makeIterator() -> IndexingIterator<MLShapedArray<Scalar>>\nReturns an iterator over the elements of the collection.\nfunc forEach((MLShapedArraySlice<Scalar>) -> Void)\nCalls the given closure on each element in the sequence in the same order as a for-in loop.\nfunc enumerated() -> EnumeratedSequence<MLShapedArray<Scalar>>\nReturns a sequence of pairs (n, x), where n represents a consecutive integer starting at zero and x represents an element of the sequence.\nfunc randomElement() -> MLShapedArraySlice<Scalar>?\nReturns a random element of the collection.\nfunc randomElement<T>(using: inout T) -> MLShapedArraySlice<Scalar>?\nReturns a random element of the collection, using the given generator as a source for randomness.\nfunc withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<MLShapedArraySlice<Scalar>>) -> R) -> R?\nExecutes a closure on the sequence’s contiguous storage."
  },
  {
    "title": "last | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarray/3763250-last",
    "html": "Discussion\n\nIf the collection is empty, the value of this property is nil.\n\nlet numbers = [10, 20, 30, 40, 50]\nif let lastNumber = numbers.last {\n    print(lastNumber)\n}\n// Prints \"50\"\n\n\nComplexity: O(1)\n\nSee Also\nInspecting a Shaped Array’s Scalars\nvar first: MLShapedArraySlice<Scalar>?\nThe first element of the collection.\nvar publisher: Publishers.Sequence<MLShapedArray<Scalar>, Never>\nA publisher that produces the element in the shaped array as separate values.\nvar lazy: LazySequence<MLShapedArray<Scalar>>\nA sequence containing the same elements as this sequence, but on which some operations, such as map and filter, are implemented lazily."
  },
  {
    "title": "contains(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarray/4135005-contains",
    "html": "Parameters\nother\n\nA sequence to search for within this collection.\n\nReturn Value\n\ntrue if the collection contains the specified sequence, otherwise false.\n\nSee Also\nInspecting a Slice of a Shaped Array\nfunc allSatisfy((MLShapedArraySlice<Scalar>) -> Bool) -> Bool\nReturns a Boolean value indicating whether every element of a sequence satisfies a given predicate.\nfunc contains(where: (MLShapedArraySlice<Scalar>) -> Bool) -> Bool\nReturns a Boolean value indicating whether the sequence contains an element that satisfies the given predicate.\nfunc contains(MLShapedArraySlice<Scalar>) -> Bool\nReturns a Boolean value indicating whether the sequence contains the given element.\nsubscript<R>(R) -> MLShapedArraySlice<Scalar>\nAccesses the contiguous subrange of the collection’s elements specified by a range expression.\nfunc makeIterator() -> IndexingIterator<MLShapedArray<Scalar>>\nReturns an iterator over the elements of the collection.\nfunc forEach((MLShapedArraySlice<Scalar>) -> Void)\nCalls the given closure on each element in the sequence in the same order as a for-in loop.\nfunc enumerated() -> EnumeratedSequence<MLShapedArray<Scalar>>\nReturns a sequence of pairs (n, x), where n represents a consecutive integer starting at zero and x represents an element of the sequence.\nfunc randomElement() -> MLShapedArraySlice<Scalar>?\nReturns a random element of the collection.\nfunc randomElement<T>(using: inout T) -> MLShapedArraySlice<Scalar>?\nReturns a random element of the collection, using the given generator as a source for randomness.\nfunc withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<MLShapedArraySlice<Scalar>>) -> R) -> R?\nExecutes a closure on the sequence’s contiguous storage."
  },
  {
    "title": "withContiguousStorageIfAvailable(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarray/3763346-withcontiguousstorageifavailable",
    "html": "Parameters\nbody\n\nA closure that receives an UnsafeBufferPointer to the sequence’s contiguous storage.\n\nReturn Value\n\nThe value returned from body, unless the sequence doesn’t support contiguous storage, in which case the method ignores body and returns nil.\n\nDiscussion\n\nThis method calls body(buffer), where buffer is a pointer to the collection’s contiguous storage. If the contiguous storage doesn’t exist, the collection creates it. If the collection doesn’t support an internal representation in a form of contiguous storage, the method doesn’t call body — it immediately returns nil.\n\nThe optimizer can often eliminate bounds- and uniqueness-checking within an algorithm. When that fails, however, invoking the same algorithm on the buffer argument may let you trade safety for speed.\n\nSuccessive calls to this method may provide a different pointer on each call. Don’t store buffer outside of this method.\n\nA Collection that provides its own implementation of this method must provide contiguous storage to its elements in the same order as they appear in the collection. This guarantees that it’s possible to generate contiguous mutable storage to any of its subsequences by slicing buffer with a range formed from the distances to the subsequence’s startIndex and endIndex, respectively.\n\nNote\n\nThis documentation comment was inherited from Sequence.\n\nSee Also\nInspecting a Slice of a Shaped Array\nfunc allSatisfy((MLShapedArraySlice<Scalar>) -> Bool) -> Bool\nReturns a Boolean value indicating whether every element of a sequence satisfies a given predicate.\nfunc contains<C>(C) -> Bool\nReturns a Boolean value indicating whether the collection contains the given sequence.\nfunc contains(where: (MLShapedArraySlice<Scalar>) -> Bool) -> Bool\nReturns a Boolean value indicating whether the sequence contains an element that satisfies the given predicate.\nfunc contains(MLShapedArraySlice<Scalar>) -> Bool\nReturns a Boolean value indicating whether the sequence contains the given element.\nsubscript<R>(R) -> MLShapedArraySlice<Scalar>\nAccesses the contiguous subrange of the collection’s elements specified by a range expression.\nfunc makeIterator() -> IndexingIterator<MLShapedArray<Scalar>>\nReturns an iterator over the elements of the collection.\nfunc forEach((MLShapedArraySlice<Scalar>) -> Void)\nCalls the given closure on each element in the sequence in the same order as a for-in loop.\nfunc enumerated() -> EnumeratedSequence<MLShapedArray<Scalar>>\nReturns a sequence of pairs (n, x), where n represents a consecutive integer starting at zero and x represents an element of the sequence.\nfunc randomElement() -> MLShapedArraySlice<Scalar>?\nReturns a random element of the collection.\nfunc randomElement<T>(using: inout T) -> MLShapedArraySlice<Scalar>?\nReturns a random element of the collection, using the given generator as a source for randomness."
  },
  {
    "title": "randomElement(using:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarray/3763281-randomelement",
    "html": "Parameters\ngenerator\n\nThe random number generator to use when choosing a random element.\n\nReturn Value\n\nA random element from the collection. If the collection is empty, the method returns nil.\n\nDiscussion\n\nCall randomElement(using:) to select a random element from an array or another collection when you are using a custom random number generator. This example picks a name at random from an array:\n\nlet names = [\"Zoey\", \"Chloe\", \"Amani\", \"Amaia\"]\nlet randomName = names.randomElement(using: &myGenerator)!\n// randomName == \"Amani\"\n\n\nComplexity: O(1) if the collection conforms to RandomAccessCollection; otherwise, O(n), where n is the length of the collection.\n\nNote\n\nThe algorithm used to select a random element may change in a future version of Swift. If you’re passing a generator that results in the same sequence of elements each time you run your program, that sequence may change when your program is compiled using a different version of Swift.\n\nSee Also\nInspecting a Slice of a Shaped Array\nfunc allSatisfy((MLShapedArraySlice<Scalar>) -> Bool) -> Bool\nReturns a Boolean value indicating whether every element of a sequence satisfies a given predicate.\nfunc contains<C>(C) -> Bool\nReturns a Boolean value indicating whether the collection contains the given sequence.\nfunc contains(where: (MLShapedArraySlice<Scalar>) -> Bool) -> Bool\nReturns a Boolean value indicating whether the sequence contains an element that satisfies the given predicate.\nfunc contains(MLShapedArraySlice<Scalar>) -> Bool\nReturns a Boolean value indicating whether the sequence contains the given element.\nsubscript<R>(R) -> MLShapedArraySlice<Scalar>\nAccesses the contiguous subrange of the collection’s elements specified by a range expression.\nfunc makeIterator() -> IndexingIterator<MLShapedArray<Scalar>>\nReturns an iterator over the elements of the collection.\nfunc forEach((MLShapedArraySlice<Scalar>) -> Void)\nCalls the given closure on each element in the sequence in the same order as a for-in loop.\nfunc enumerated() -> EnumeratedSequence<MLShapedArray<Scalar>>\nReturns a sequence of pairs (n, x), where n represents a consecutive integer starting at zero and x represents an element of the sequence.\nfunc randomElement() -> MLShapedArraySlice<Scalar>?\nReturns a random element of the collection.\nfunc withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<MLShapedArraySlice<Scalar>>) -> R) -> R?\nExecutes a closure on the sequence’s contiguous storage."
  },
  {
    "title": "compare(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarray/3802060-compare",
    "html": "Parameters\nlhs\n\nA shaped array slice.\n\nrhs\n\nAnother shaped array slice.\n\nSee Also\nComparing Shaped Arrays\nfunc difference<C>(from: C, by: (C.Element, MLShapedArraySlice<Scalar>) -> Bool) -> CollectionDifference<MLShapedArraySlice<Scalar>>\nReturns the difference needed to produce this collection’s ordered elements from the given collection, using the given predicate as an equivalence test.\nfunc difference<C>(from: C) -> CollectionDifference<MLShapedArraySlice<Scalar>>\nReturns the difference needed to produce this collection’s ordered elements from the given collection.\nfunc elementsEqual<OtherSequence>(OtherSequence, by: (MLShapedArraySlice<Scalar>, OtherSequence.Element) -> Bool) -> Bool\nReturns a Boolean value indicating whether this sequence and another sequence contain equivalent elements in the same order, using the given predicate as the equivalence test.\nfunc elementsEqual<OtherSequence>(OtherSequence) -> Bool\nReturns a Boolean value indicating whether this sequence and another sequence contain the same elements in the same order.\nfunc starts<PossiblePrefix>(with: PossiblePrefix, by: (MLShapedArraySlice<Scalar>, PossiblePrefix.Element) -> Bool) -> Bool\nReturns a Boolean value indicating whether the initial elements of the sequence are equivalent to the elements in another sequence, using the given predicate as the equivalence test.\nfunc lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (MLShapedArraySlice<Scalar>, MLShapedArraySlice<Scalar>) -> Bool) -> Bool\nReturns a Boolean value indicating whether the sequence precedes another sequence in a lexicographical (dictionary) ordering, using the given predicate to compare elements."
  },
  {
    "title": "lexicographicallyPrecedes(_:by:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarray/3763257-lexicographicallyprecedes",
    "html": "Parameters\nother\n\nA sequence to compare to this sequence.\n\nareInIncreasingOrder\n\nA predicate that returns true if its first argument should be ordered before its second argument; otherwise, false.\n\nReturn Value\n\ntrue if this sequence precedes other in a dictionary ordering as ordered by areInIncreasingOrder; otherwise, false.\n\nDiscussion\n\nThe predicate must be a strict weak ordering over the elements. That is, for any elements a, b, and c, the following conditions must hold:\n\nNote\n\nThis method implements the mathematical notion of lexicographical ordering, which has no connection to Unicode. If you are sorting strings to present to the end user, use String APIs that perform localized comparison instead.\n\nComplexity: O(m), where m is the lesser of the length of the sequence and the length of other.\n\nareInIncreasingOrder(a, a) is always false. (Irreflexivity)\n\nIf areInIncreasingOrder(a, b) and areInIncreasingOrder(b, c) are both true, then areInIncreasingOrder(a, c) is also true. (Transitive comparability)\n\nTwo elements are incomparable if neither is ordered before the other according to the predicate. If a and b are incomparable, and b and c are incomparable, then a and c are also incomparable. (Transitive incomparability)\n\nSee Also\nComparing Shaped Arrays\nfunc compare<Comparator>(Comparator.Compared, Comparator.Compared) -> ComparisonResult\nReturns a comparison result by comparing two shaped array slices.\nfunc difference<C>(from: C, by: (C.Element, MLShapedArraySlice<Scalar>) -> Bool) -> CollectionDifference<MLShapedArraySlice<Scalar>>\nReturns the difference needed to produce this collection’s ordered elements from the given collection, using the given predicate as an equivalence test.\nfunc difference<C>(from: C) -> CollectionDifference<MLShapedArraySlice<Scalar>>\nReturns the difference needed to produce this collection’s ordered elements from the given collection.\nfunc elementsEqual<OtherSequence>(OtherSequence, by: (MLShapedArraySlice<Scalar>, OtherSequence.Element) -> Bool) -> Bool\nReturns a Boolean value indicating whether this sequence and another sequence contain equivalent elements in the same order, using the given predicate as the equivalence test.\nfunc elementsEqual<OtherSequence>(OtherSequence) -> Bool\nReturns a Boolean value indicating whether this sequence and another sequence contain the same elements in the same order.\nfunc starts<PossiblePrefix>(with: PossiblePrefix, by: (MLShapedArraySlice<Scalar>, PossiblePrefix.Element) -> Bool) -> Bool\nReturns a Boolean value indicating whether the initial elements of the sequence are equivalent to the elements in another sequence, using the given predicate as the equivalence test."
  },
  {
    "title": "indices | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarray/3763229-indices",
    "html": "Relationships\nFrom Protocol\nBidirectionalCollection\nCollection\nRandomAccessCollection\nSee Also\nFinding an Index in a Shaped Array\nvar startIndex: Int\nThe index of the first element in the shaped array.\nvar endIndex: Int\nThe index of the last element in the shaped array.\nfunc index(after: Int) -> Int\nReturns the index immediately after an index you provide.\nfunc index(Int, offsetBy: Int) -> Int\nReturns the index at a relative distance to an index you provide.\nfunc index(Int, offsetBy: Int, limitedBy: Int) -> Int?\nReturns an index that is the specified distance from the given index, unless that distance is beyond a given limiting index.\nfunc index(of: MLShapedArraySlice<Scalar>) -> Int?\nReturns the first index where the specified value appears in the collection.\nDeprecated\nfunc filter(Predicate<MLShapedArraySlice<Scalar>>) -> [MLShapedArraySlice<Scalar>]\nfunc formIndex(before: inout Int)\nReplaces the given index with its predecessor.\nfunc formIndex(after: inout Int)\nReplaces the given index with its successor.\nfunc formIndex(inout Int, offsetBy: Int)\nOffsets the given index by the specified distance.\nfunc formIndex(inout Int, offsetBy: Int, limitedBy: Int) -> Bool\nOffsets the given index by the specified distance, or so that it equals the given limiting index.\nfunc firstIndex(where: (MLShapedArraySlice<Scalar>) -> Bool) -> Int?\nReturns the first index in which an element of the collection satisfies the given predicate.\nfunc firstIndex(of: MLShapedArraySlice<Scalar>) -> Int?\nReturns the first index where the specified value appears in the collection.\nfunc lastIndex(where: (MLShapedArraySlice<Scalar>) -> Bool) -> Int?\nReturns the index of the last element in the collection that matches the given predicate.\nfunc lastIndex(of: MLShapedArraySlice<Scalar>) -> Int?\nReturns the last index where the specified value appears in the collection.\nfunc ranges<C>(of: C) -> [Range<Int>]\nFinds and returns the ranges of the all occurrences of a given sequence within the collection.\nfunc starts<PossiblePrefix>(with: PossiblePrefix) -> Bool\nReturns a Boolean value indicating whether the initial elements of the sequence are the same as the elements in another sequence.\nfunc firstRange<C>(of: C) -> Range<Int>?\nFinds and returns the range of the first occurrence of a given collection within this collection."
  },
  {
    "title": "index(after:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarray/3763228-index",
    "html": "Parameters\nafter\n\nAn index in the shaped array.\n\nSee Also\nFinding an Index in a Shaped Array\nvar startIndex: Int\nThe index of the first element in the shaped array.\nvar endIndex: Int\nThe index of the last element in the shaped array.\nvar indices: Range<Int>\nThe index range of all the elements in the shaped array.\nfunc index(Int, offsetBy: Int) -> Int\nReturns the index at a relative distance to an index you provide.\nfunc index(Int, offsetBy: Int, limitedBy: Int) -> Int?\nReturns an index that is the specified distance from the given index, unless that distance is beyond a given limiting index.\nfunc index(of: MLShapedArraySlice<Scalar>) -> Int?\nReturns the first index where the specified value appears in the collection.\nDeprecated\nfunc filter(Predicate<MLShapedArraySlice<Scalar>>) -> [MLShapedArraySlice<Scalar>]\nfunc formIndex(before: inout Int)\nReplaces the given index with its predecessor.\nfunc formIndex(after: inout Int)\nReplaces the given index with its successor.\nfunc formIndex(inout Int, offsetBy: Int)\nOffsets the given index by the specified distance.\nfunc formIndex(inout Int, offsetBy: Int, limitedBy: Int) -> Bool\nOffsets the given index by the specified distance, or so that it equals the given limiting index.\nfunc firstIndex(where: (MLShapedArraySlice<Scalar>) -> Bool) -> Int?\nReturns the first index in which an element of the collection satisfies the given predicate.\nfunc firstIndex(of: MLShapedArraySlice<Scalar>) -> Int?\nReturns the first index where the specified value appears in the collection.\nfunc lastIndex(where: (MLShapedArraySlice<Scalar>) -> Bool) -> Int?\nReturns the index of the last element in the collection that matches the given predicate.\nfunc lastIndex(of: MLShapedArraySlice<Scalar>) -> Int?\nReturns the last index where the specified value appears in the collection.\nfunc ranges<C>(of: C) -> [Range<Int>]\nFinds and returns the ranges of the all occurrences of a given sequence within the collection.\nfunc starts<PossiblePrefix>(with: PossiblePrefix) -> Bool\nReturns a Boolean value indicating whether the initial elements of the sequence are the same as the elements in another sequence.\nfunc firstRange<C>(of: C) -> Range<Int>?\nFinds and returns the range of the first occurrence of a given collection within this collection."
  },
  {
    "title": "endIndex | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarray/3763198-endindex",
    "html": "Relationships\nFrom Protocol\nBidirectionalCollection\nCollection\nRandomAccessCollection\nSee Also\nFinding an Index in a Shaped Array\nvar startIndex: Int\nThe index of the first element in the shaped array.\nvar indices: Range<Int>\nThe index range of all the elements in the shaped array.\nfunc index(after: Int) -> Int\nReturns the index immediately after an index you provide.\nfunc index(Int, offsetBy: Int) -> Int\nReturns the index at a relative distance to an index you provide.\nfunc index(Int, offsetBy: Int, limitedBy: Int) -> Int?\nReturns an index that is the specified distance from the given index, unless that distance is beyond a given limiting index.\nfunc index(of: MLShapedArraySlice<Scalar>) -> Int?\nReturns the first index where the specified value appears in the collection.\nDeprecated\nfunc filter(Predicate<MLShapedArraySlice<Scalar>>) -> [MLShapedArraySlice<Scalar>]\nfunc formIndex(before: inout Int)\nReplaces the given index with its predecessor.\nfunc formIndex(after: inout Int)\nReplaces the given index with its successor.\nfunc formIndex(inout Int, offsetBy: Int)\nOffsets the given index by the specified distance.\nfunc formIndex(inout Int, offsetBy: Int, limitedBy: Int) -> Bool\nOffsets the given index by the specified distance, or so that it equals the given limiting index.\nfunc firstIndex(where: (MLShapedArraySlice<Scalar>) -> Bool) -> Int?\nReturns the first index in which an element of the collection satisfies the given predicate.\nfunc firstIndex(of: MLShapedArraySlice<Scalar>) -> Int?\nReturns the first index where the specified value appears in the collection.\nfunc lastIndex(where: (MLShapedArraySlice<Scalar>) -> Bool) -> Int?\nReturns the index of the last element in the collection that matches the given predicate.\nfunc lastIndex(of: MLShapedArraySlice<Scalar>) -> Int?\nReturns the last index where the specified value appears in the collection.\nfunc ranges<C>(of: C) -> [Range<Int>]\nFinds and returns the ranges of the all occurrences of a given sequence within the collection.\nfunc starts<PossiblePrefix>(with: PossiblePrefix) -> Bool\nReturns a Boolean value indicating whether the initial elements of the sequence are the same as the elements in another sequence.\nfunc firstRange<C>(of: C) -> Range<Int>?\nFinds and returns the range of the first occurrence of a given collection within this collection."
  },
  {
    "title": "init(scalars:shape:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarrayslice/3763453-init",
    "html": "Parameters\nscalars\n\nA sequence of values.\n\nshape\n\nAn integer array. Each element represents the size of the shaped array’s corresponding dimension.\n\nSee Also\nCreating a Shaped Array Slice\ninit(scalar: Scalar)\nCreates a shaped array slice with exactly one value and zero dimensions.\ninit(arrayLiteral: Scalar...)\nCreates a shaped array slice from a list of values.\ninit(repeating: Scalar, shape: [Int])\nCreates a shaped array slice that initializes every element to the same value.\ninit(identityMatrixOfSize: Int)\nCreates a shaped array slice that’s an identity matrix of integers.\nAvailable when Scalar conforms to FixedWidthInteger.\ninit(randomScalarsIn: Range<Scalar>, shape: [Int])\nCreates a shaped array that initializes the elements to random integer values within a range.\nAvailable when Scalar conforms to FixedWidthInteger."
  },
  {
    "title": "init(repeating:shape:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarrayslice/3763451-init",
    "html": "Parameters\nvalue\n\nA scalar value. The initializer assigns every element in the shaped array to value.\n\nshape\n\nAn integer array. Each element represents the size of the shaped array’s corresponding dimension.\n\nSee Also\nCreating a Shaped Array Slice\ninit(scalar: Scalar)\nCreates a shaped array slice with exactly one value and zero dimensions.\ninit(arrayLiteral: Scalar...)\nCreates a shaped array slice from a list of values.\ninit<S>(scalars: S, shape: [Int])\nCreates a shaped array slice from an array of values.\ninit(identityMatrixOfSize: Int)\nCreates a shaped array slice that’s an identity matrix of integers.\nAvailable when Scalar conforms to FixedWidthInteger.\ninit(randomScalarsIn: Range<Scalar>, shape: [Int])\nCreates a shaped array that initializes the elements to random integer values within a range.\nAvailable when Scalar conforms to FixedWidthInteger."
  },
  {
    "title": "subscript(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarrayprotocol/3763377-subscript",
    "html": "See Also\nMLShapedArrayProtocol Implementations\nsubscript(MLShapedArrayRangeExpression) -> MLShapedArraySlice<Self.Scalar>\nsubscript(MLShapedArrayRangeExpression...) -> MLShapedArraySlice<Self.Scalar>\nsubscript(Int) -> MLShapedArraySlice<Self.Scalar>\nsubscript(Int...) -> MLShapedArraySlice<Self.Scalar>\nsubscript(Range<Int>) -> MLShapedArraySlice<Self.Scalar>\nsubscript((UnboundedRange_) -> Void) -> MLShapedArraySlice<Self.Scalar>"
  },
  {
    "title": "multiArrayDataType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarrayscalar/3763388-multiarraydatatype",
    "html": "Required"
  },
  {
    "title": "init(data:shape:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarrayslice/3856538-init",
    "html": "Parameters\ndata\n\nA block of data that initializes the array.\n\nshape\n\nThe shape of the array.\n\nSee Also\nCreating a Shaped Array Slice with Data\ninit(data: Data, shape: [Int], strides: [Int])\nCreates a shaped array with defined data, shape, and strides."
  },
  {
    "title": "init(bytesNoCopy:shape:strides:deallocator:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarrayslice/3763445-init",
    "html": "Parameters\nbytes\n\nAn unsafe raw pointer to the data.\n\nshape\n\nAn integer array. Each element represents the size of the shaped array’s corresponding dimension.\n\nstrides\n\nAn integer array. Each element represents the number of memory locations that span the shaped array’s corresponding dimension.\n\ndeallocator\n\nA Data.Deallocator.\n\nRelationships\nFrom Protocol\nMLShapedArrayProtocol\nSee Also\nCreating a Shaped Array Slice with Pointers to Memory\ninit(bytesNoCopy: UnsafeRawPointer, shape: [Int], deallocator: Data.Deallocator)\nCreates a shaped array slice from a data pointer.\ninit(unsafeUninitializedShape: [Int], initializingWith: (inout UnsafeMutableBufferPointer<Scalar>, [Int]) -> Void)\nCreates a shaped array slice from a shape and a closure that initializes its memory."
  },
  {
    "title": "reduce(into:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarray/3763285-reduce",
    "html": "Parameters\ninitialResult\n\nThe value to use as the initial accumulating value.\n\nupdateAccumulatingResult\n\nA closure that updates the accumulating value with an element of the sequence.\n\nReturn Value\n\nThe final accumulated value. If the sequence has no elements, the result is initialResult.\n\nDiscussion\n\nUse the reduce(into:_:) method to produce a single value from the elements of an entire sequence. For example, you can use this method on an array of integers to filter adjacent equal entries or count frequencies.\n\nThis method is preferred over reduce(_:_:) for efficiency when the result is a copy-on-write type, for example an Array or a Dictionary.\n\nThe updateAccumulatingResult closure is called sequentially with a mutable accumulating value initialized to initialResult and each element of the sequence. This example shows how to build a dictionary of letter frequencies of a string.\n\nlet letters = \"abracadabra\"\nlet letterCount = letters.reduce(into: [:]) { counts, letter in\n    counts[letter, default: 0] += 1\n}\n// letterCount == [\"a\": 5, \"b\": 2, \"r\": 2, \"c\": 1, \"d\": 1]\n\n\nWhen letters.reduce(into:_:) is called, the following steps occur:\n\nThe updateAccumulatingResult closure is called with the initial accumulating value—[:] in this case—and the first character of letters, modifying the accumulating value by setting 1 for the key \"a\".\n\nThe closure is called again repeatedly with the updated accumulating value and each element of the sequence.\n\nWhen the sequence is exhausted, the accumulating value is returned to the caller.\n\nIf the sequence has no elements, updateAccumulatingResult is never executed and initialResult is the result of the call to reduce(into:_:).\n\nComplexity: O(n), where n is the length of the sequence.\n\nSee Also\nTransforming a Shaped Array\nfunc map<T>((MLShapedArraySlice<Scalar>) -> T) -> [T]\nReturns an array containing the results of mapping the given closure over the sequence’s elements.\nfunc compactMap<ElementOfResult>((MLShapedArraySlice<Scalar>) -> ElementOfResult?) -> [ElementOfResult]\nReturns an array containing the non-nil results of calling the given transformation with each element of this sequence.\nfunc flatMap<SegmentOfResult>((MLShapedArraySlice<Scalar>) -> SegmentOfResult) -> [SegmentOfResult.Element]\nReturns an array containing the concatenated results of calling the given transformation with each element of this sequence.\nfunc flatMap<ElementOfResult>((MLShapedArraySlice<Scalar>) -> ElementOfResult?) -> [ElementOfResult]\nGenerates an array that concatenates the sequences from a transform closure that returns an optional.\nDeprecated\nfunc filter((MLShapedArraySlice<Scalar>) -> Bool) -> [MLShapedArraySlice<Scalar>]\nReturns an array containing, in order, the elements of the sequence that satisfy the given predicate.\nfunc reduce<Result>(Result, (Result, MLShapedArraySlice<Scalar>) -> Result) -> Result\nReturns the result of combining the elements of the sequence using the given closure."
  },
  {
    "title": "flatMap(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarray/3763215-flatmap",
    "html": "Parameters\ntransform\n\nA closure that takes a shaped array slice and returns a sequence of optional values.\n\nSee Also\nTransforming a Shaped Array\nfunc map<T>((MLShapedArraySlice<Scalar>) -> T) -> [T]\nReturns an array containing the results of mapping the given closure over the sequence’s elements.\nfunc compactMap<ElementOfResult>((MLShapedArraySlice<Scalar>) -> ElementOfResult?) -> [ElementOfResult]\nReturns an array containing the non-nil results of calling the given transformation with each element of this sequence.\nfunc flatMap<SegmentOfResult>((MLShapedArraySlice<Scalar>) -> SegmentOfResult) -> [SegmentOfResult.Element]\nReturns an array containing the concatenated results of calling the given transformation with each element of this sequence.\nfunc filter((MLShapedArraySlice<Scalar>) -> Bool) -> [MLShapedArraySlice<Scalar>]\nReturns an array containing, in order, the elements of the sequence that satisfy the given predicate.\nfunc reduce<Result>(Result, (Result, MLShapedArraySlice<Scalar>) -> Result) -> Result\nReturns the result of combining the elements of the sequence using the given closure.\nfunc reduce<Result>(into: Result, (inout Result, MLShapedArraySlice<Scalar>) -> ()) -> Result\nReturns the result of combining the elements of the sequence using the given closure."
  },
  {
    "title": "reduce(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarray/3763283-reduce",
    "html": "Parameters\ninitialResult\n\nThe value to use as the initial accumulating value. initialResult is passed to nextPartialResult the first time the closure is executed.\n\nnextPartialResult\n\nA closure that combines an accumulating value and an element of the sequence into a new accumulating value, to be used in the next call of the nextPartialResult closure or returned to the caller.\n\nReturn Value\n\nThe final accumulated value. If the sequence has no elements, the result is initialResult.\n\nDiscussion\n\nUse the reduce(_:_:) method to produce a single value from the elements of an entire sequence. For example, you can use this method on an array of numbers to find their sum or product.\n\nThe nextPartialResult closure is called sequentially with an accumulating value initialized to initialResult and each element of the sequence. This example shows how to find the sum of an array of numbers.\n\nlet numbers = [1, 2, 3, 4]\nlet numberSum = numbers.reduce(0, { x, y in\n    x + y\n})\n// numberSum == 10\n\n\nWhen numbers.reduce(_:_:) is called, the following steps occur:\n\nThe nextPartialResult closure is called with initialResult—0 in this case—and the first element of numbers, returning the sum: 1.\n\nThe closure is called again repeatedly with the previous call’s return value and each element of the sequence.\n\nWhen the sequence is exhausted, the last value returned from the closure is returned to the caller.\n\nIf the sequence has no elements, nextPartialResult is never executed and initialResult is the result of the call to reduce(_:_:).\n\nComplexity: O(n), where n is the length of the sequence.\n\nSee Also\nTransforming a Shaped Array\nfunc map<T>((MLShapedArraySlice<Scalar>) -> T) -> [T]\nReturns an array containing the results of mapping the given closure over the sequence’s elements.\nfunc compactMap<ElementOfResult>((MLShapedArraySlice<Scalar>) -> ElementOfResult?) -> [ElementOfResult]\nReturns an array containing the non-nil results of calling the given transformation with each element of this sequence.\nfunc flatMap<SegmentOfResult>((MLShapedArraySlice<Scalar>) -> SegmentOfResult) -> [SegmentOfResult.Element]\nReturns an array containing the concatenated results of calling the given transformation with each element of this sequence.\nfunc flatMap<ElementOfResult>((MLShapedArraySlice<Scalar>) -> ElementOfResult?) -> [ElementOfResult]\nGenerates an array that concatenates the sequences from a transform closure that returns an optional.\nDeprecated\nfunc filter((MLShapedArraySlice<Scalar>) -> Bool) -> [MLShapedArraySlice<Scalar>]\nReturns an array containing, in order, the elements of the sequence that satisfy the given predicate.\nfunc reduce<Result>(into: Result, (inout Result, MLShapedArraySlice<Scalar>) -> ()) -> Result\nReturns the result of combining the elements of the sequence using the given closure."
  },
  {
    "title": "sorted(using:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarray/3802064-sorted",
    "html": "Parameters\ncomparators\n\nA sequence of shaped-array slice comparators.\n\nSee Also\nGenerating a Shaped Array Slice\nfunc first(where: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>?\nReturns the first element of the sequence that satisfies the given predicate.\nfunc last(where: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>?\nReturns the last element of the sequence that satisfies the given predicate.\nfunc dropFirst(Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence containing all but the given number of initial elements.\nfunc dropLast(Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence containing all but the specified number of final elements.\nfunc drop(while: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>\nReturns a subsequence by skipping elements while predicate returns true and returning the remaining elements.\nfunc min(by: (MLShapedArraySlice<Scalar>, MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>?\nReturns the minimum element in the sequence, using the given predicate as the comparison between elements.\nfunc max(by: (MLShapedArraySlice<Scalar>, MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>?\nReturns the maximum element in the sequence, using the given predicate as the comparison between elements.\nfunc prefix(Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence, up to the specified maximum length, containing the initial elements of the collection.\nfunc prefix(upTo: Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence from the start of the collection up to, but not including, the specified position.\nfunc prefix(through: Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence from the start of the collection through the specified position.\nfunc prefix(while: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>\nReturns a subsequence containing the initial elements until predicate returns false and skipping the remaining elements.\nfunc suffix(Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence, up to the given maximum length, containing the final elements of the collection.\nfunc suffix(from: Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence from the specified position to the end of the collection.\nfunc sorted<Comparator>(using: Comparator) -> [MLShapedArraySlice<Scalar>]\nGenerates a copy of the shaped array by sorting its slices with a comparator.\nfunc sorted(by: (MLShapedArraySlice<Scalar>, MLShapedArraySlice<Scalar>) -> Bool) -> [MLShapedArraySlice<Scalar>]\nReturns the elements of the sequence, sorted using the given predicate as the comparison between elements.\nfunc shuffled() -> [MLShapedArraySlice<Scalar>]\nReturns the elements of the sequence, shuffled.\nfunc shuffled<T>(using: inout T) -> [MLShapedArraySlice<Scalar>]\nReturns the elements of the sequence, shuffled using the given generator as a source for randomness.\nfunc trimmingPrefix<Prefix>(Prefix) -> MLShapedArraySlice<Scalar>\nReturns a new collection of the same type by removing initial elements that satisfy the given predicate from the start.\nfunc trimmingPrefix(while: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>"
  },
  {
    "title": "shuffled(using:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarray/3763302-shuffled",
    "html": "Parameters\ngenerator\n\nThe random number generator to use when shuffling the sequence.\n\nReturn Value\n\nAn array of this sequence’s elements in a shuffled order.\n\nDiscussion\n\nYou use this method to randomize the elements of a sequence when you are using a custom random number generator. For example, you can shuffle the numbers between 0 and 9 by calling the shuffled(using:) method on that range:\n\nlet numbers = 0...9\nlet shuffledNumbers = numbers.shuffled(using: &myGenerator)\n// shuffledNumbers == [8, 9, 4, 3, 2, 6, 7, 0, 5, 1]\n\n\nComplexity: O(n), where n is the length of the sequence.\n\nNote\n\nThe algorithm used to shuffle a sequence may change in a future version of Swift. If you’re passing a generator that results in the same shuffled order each time you run your program, that sequence may change when your program is compiled using a different version of Swift.\n\nSee Also\nGenerating a Shaped Array Slice\nfunc first(where: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>?\nReturns the first element of the sequence that satisfies the given predicate.\nfunc last(where: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>?\nReturns the last element of the sequence that satisfies the given predicate.\nfunc dropFirst(Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence containing all but the given number of initial elements.\nfunc dropLast(Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence containing all but the specified number of final elements.\nfunc drop(while: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>\nReturns a subsequence by skipping elements while predicate returns true and returning the remaining elements.\nfunc min(by: (MLShapedArraySlice<Scalar>, MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>?\nReturns the minimum element in the sequence, using the given predicate as the comparison between elements.\nfunc max(by: (MLShapedArraySlice<Scalar>, MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>?\nReturns the maximum element in the sequence, using the given predicate as the comparison between elements.\nfunc prefix(Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence, up to the specified maximum length, containing the initial elements of the collection.\nfunc prefix(upTo: Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence from the start of the collection up to, but not including, the specified position.\nfunc prefix(through: Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence from the start of the collection through the specified position.\nfunc prefix(while: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>\nReturns a subsequence containing the initial elements until predicate returns false and skipping the remaining elements.\nfunc suffix(Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence, up to the given maximum length, containing the final elements of the collection.\nfunc suffix(from: Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence from the specified position to the end of the collection.\nfunc sorted<Comparator>(using: Comparator) -> [MLShapedArraySlice<Scalar>]\nGenerates a copy of the shaped array by sorting its slices with a comparator.\nfunc sorted<S, Comparator>(using: S) -> [MLShapedArraySlice<Scalar>]\nGenerates a copy of the shaped array by sorting its slices with a sequence of comparators.\nfunc sorted(by: (MLShapedArraySlice<Scalar>, MLShapedArraySlice<Scalar>) -> Bool) -> [MLShapedArraySlice<Scalar>]\nReturns the elements of the sequence, sorted using the given predicate as the comparison between elements.\nfunc shuffled() -> [MLShapedArraySlice<Scalar>]\nReturns the elements of the sequence, shuffled.\nfunc trimmingPrefix<Prefix>(Prefix) -> MLShapedArraySlice<Scalar>\nReturns a new collection of the same type by removing initial elements that satisfy the given predicate from the start.\nfunc trimmingPrefix(while: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>"
  },
  {
    "title": "sorted(using:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarray/3802063-sorted",
    "html": "Parameters\ncomparator\n\nA shaped-array slice comparator.\n\nSee Also\nGenerating a Shaped Array Slice\nfunc first(where: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>?\nReturns the first element of the sequence that satisfies the given predicate.\nfunc last(where: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>?\nReturns the last element of the sequence that satisfies the given predicate.\nfunc dropFirst(Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence containing all but the given number of initial elements.\nfunc dropLast(Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence containing all but the specified number of final elements.\nfunc drop(while: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>\nReturns a subsequence by skipping elements while predicate returns true and returning the remaining elements.\nfunc min(by: (MLShapedArraySlice<Scalar>, MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>?\nReturns the minimum element in the sequence, using the given predicate as the comparison between elements.\nfunc max(by: (MLShapedArraySlice<Scalar>, MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>?\nReturns the maximum element in the sequence, using the given predicate as the comparison between elements.\nfunc prefix(Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence, up to the specified maximum length, containing the initial elements of the collection.\nfunc prefix(upTo: Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence from the start of the collection up to, but not including, the specified position.\nfunc prefix(through: Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence from the start of the collection through the specified position.\nfunc prefix(while: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>\nReturns a subsequence containing the initial elements until predicate returns false and skipping the remaining elements.\nfunc suffix(Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence, up to the given maximum length, containing the final elements of the collection.\nfunc suffix(from: Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence from the specified position to the end of the collection.\nfunc sorted<S, Comparator>(using: S) -> [MLShapedArraySlice<Scalar>]\nGenerates a copy of the shaped array by sorting its slices with a sequence of comparators.\nfunc sorted(by: (MLShapedArraySlice<Scalar>, MLShapedArraySlice<Scalar>) -> Bool) -> [MLShapedArraySlice<Scalar>]\nReturns the elements of the sequence, sorted using the given predicate as the comparison between elements.\nfunc shuffled() -> [MLShapedArraySlice<Scalar>]\nReturns the elements of the sequence, shuffled.\nfunc shuffled<T>(using: inout T) -> [MLShapedArraySlice<Scalar>]\nReturns the elements of the sequence, shuffled using the given generator as a source for randomness.\nfunc trimmingPrefix<Prefix>(Prefix) -> MLShapedArraySlice<Scalar>\nReturns a new collection of the same type by removing initial elements that satisfy the given predicate from the start.\nfunc trimmingPrefix(while: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>"
  },
  {
    "title": "sorted(by:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarray/3763307-sorted",
    "html": "Parameters\nareInIncreasingOrder\n\nA predicate that returns true if its first argument should be ordered before its second argument; otherwise, false.\n\nReturn Value\n\nA sorted array of the sequence’s elements.\n\nDiscussion\n\nWhen you want to sort a sequence of elements that don’t conform to the Comparable protocol, pass a predicate to this method that returns true when the first element should be ordered before the second. The elements of the resulting array are ordered according to the given predicate.\n\nIn the following example, the predicate provides an ordering for an array of a custom HTTPResponse type. The predicate orders errors before successes and sorts the error responses by their error code.\n\nenum HTTPResponse {\n    case ok\n    case error(Int)\n}\n\n\nlet responses: [HTTPResponse] = [.error(500), .ok, .ok, .error(404), .error(403)]\nlet sortedResponses = responses.sorted {\n    switch ($0, $1) {\n    // Order errors by code\n    case let (.error(aCode), .error(bCode)):\n        return aCode < bCode\n\n\n    // All successes are equivalent, so none is before any other\n    case (.ok, .ok): return false\n\n\n    // Order errors before successes\n    case (.error, .ok): return true\n    case (.ok, .error): return false\n    }\n}\nprint(sortedResponses)\n// Prints \"[.error(403), .error(404), .error(500), .ok, .ok]\"\n\n\nYou also use this method to sort elements that conform to the Comparable protocol in descending order. To sort your sequence in descending order, pass the greater-than operator (>) as the areInIncreasingOrder parameter.\n\nlet students: Set = [\"Kofi\", \"Abena\", \"Peter\", \"Kweku\", \"Akosua\"]\nlet descendingStudents = students.sorted(by: >)\nprint(descendingStudents)\n// Prints \"[\"Peter\", \"Kweku\", \"Kofi\", \"Akosua\", \"Abena\"]\"\n\n\nCalling the related sorted() method is equivalent to calling this method and passing the less-than operator (<) as the predicate.\n\nprint(students.sorted())\n// Prints \"[\"Abena\", \"Akosua\", \"Kofi\", \"Kweku\", \"Peter\"]\"\nprint(students.sorted(by: <))\n// Prints \"[\"Abena\", \"Akosua\", \"Kofi\", \"Kweku\", \"Peter\"]\"\n\n\nThe predicate must be a strict weak ordering over the elements. That is, for any elements a, b, and c, the following conditions must hold:\n\nareInIncreasingOrder(a, a) is always false. (Irreflexivity)\n\nIf areInIncreasingOrder(a, b) and areInIncreasingOrder(b, c) are both true, then areInIncreasingOrder(a, c) is also true. (Transitive comparability)\n\nTwo elements are incomparable if neither is ordered before the other according to the predicate. If a and b are incomparable, and b and c are incomparable, then a and c are also incomparable. (Transitive incomparability)\n\nThe sorting algorithm is guaranteed to be stable. A stable sort preserves the relative order of elements for which areInIncreasingOrder does not establish an order.\n\nComplexity: O(n log n), where n is the length of the sequence.\n\nSee Also\nGenerating a Shaped Array Slice\nfunc first(where: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>?\nReturns the first element of the sequence that satisfies the given predicate.\nfunc last(where: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>?\nReturns the last element of the sequence that satisfies the given predicate.\nfunc dropFirst(Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence containing all but the given number of initial elements.\nfunc dropLast(Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence containing all but the specified number of final elements.\nfunc drop(while: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>\nReturns a subsequence by skipping elements while predicate returns true and returning the remaining elements.\nfunc min(by: (MLShapedArraySlice<Scalar>, MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>?\nReturns the minimum element in the sequence, using the given predicate as the comparison between elements.\nfunc max(by: (MLShapedArraySlice<Scalar>, MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>?\nReturns the maximum element in the sequence, using the given predicate as the comparison between elements.\nfunc prefix(Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence, up to the specified maximum length, containing the initial elements of the collection.\nfunc prefix(upTo: Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence from the start of the collection up to, but not including, the specified position.\nfunc prefix(through: Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence from the start of the collection through the specified position.\nfunc prefix(while: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>\nReturns a subsequence containing the initial elements until predicate returns false and skipping the remaining elements.\nfunc suffix(Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence, up to the given maximum length, containing the final elements of the collection.\nfunc suffix(from: Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence from the specified position to the end of the collection.\nfunc sorted<Comparator>(using: Comparator) -> [MLShapedArraySlice<Scalar>]\nGenerates a copy of the shaped array by sorting its slices with a comparator.\nfunc sorted<S, Comparator>(using: S) -> [MLShapedArraySlice<Scalar>]\nGenerates a copy of the shaped array by sorting its slices with a sequence of comparators.\nfunc shuffled() -> [MLShapedArraySlice<Scalar>]\nReturns the elements of the sequence, shuffled.\nfunc shuffled<T>(using: inout T) -> [MLShapedArraySlice<Scalar>]\nReturns the elements of the sequence, shuffled using the given generator as a source for randomness.\nfunc trimmingPrefix<Prefix>(Prefix) -> MLShapedArraySlice<Scalar>\nReturns a new collection of the same type by removing initial elements that satisfy the given predicate from the start.\nfunc trimmingPrefix(while: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>"
  },
  {
    "title": "split(separator:maxSplits:omittingEmptySubsequences:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarray/4135016-split",
    "html": "Parameters\nseparator\n\nThe element that should be split upon.\n\nmaxSplits\n\nThe maximum number of times to split the sequence, or one less than the number of subsequences to return. If maxSplits + 1 subsequences are returned, the last one is a suffix of the original sequence containing the remaining elements. maxSplits must be greater than or equal to zero. The default value is Int.max.\n\nomittingEmptySubsequences\n\nIf false, an empty subsequence is returned in the result for each consecutive pair of separator elements in the sequence and for each instance of separator at the start or end of the sequence. If true, only nonempty subsequences are returned. The default value is true.\n\nReturn Value\n\nAn array of subsequences, split from this sequence’s elements.\n\nDiscussion\n\nThe resulting array consists of at most maxSplits + 1 subsequences. Elements that are used to split the sequence are not returned as part of any subsequence.\n\nThe following examples show the effects of the maxSplits and omittingEmptySubsequences parameters when splitting a string at each space character (” “). The first use of split returns each word that was originally separated by one or more spaces.\n\nlet line = \"BLANCHE:   I don't want realism. I want magic!\"\nprint(line.split(separator: \" \")\n          .map(String.init))\n// Prints \"[\"BLANCHE:\", \"I\", \"don\\'t\", \"want\", \"realism.\", \"I\", \"want\", \"magic!\"]\"\n\n\nThe second example passes 1 for the maxSplits parameter, so the original string is split just once, into two new strings.\n\nprint(line.split(separator: \" \", maxSplits: 1)\n          .map(String.init))\n// Prints \"[\"BLANCHE:\", \"  I don\\'t want realism. I want magic!\"]\"\n\n\nThe final example passes false for the omittingEmptySubsequences parameter, so the returned array contains empty strings where spaces were repeated.\n\nprint(line.split(separator: \" \", omittingEmptySubsequences: false)\n          .map(String.init))\n// Prints \"[\"BLANCHE:\", \"\", \"\", \"I\", \"don\\'t\", \"want\", \"realism.\", \"I\", \"want\", \"magic!\"]\"\n\n\nComplexity: O(n), where n is the length of the sequence.\n\nSee Also\nGenerating a Shaped Array\nfunc joined() -> FlattenSequence<MLShapedArray<Scalar>>\nReturns the elements of this sequence of sequences, concatenated.\nfunc joined<Separator>(separator: Separator) -> JoinedSequence<MLShapedArray<Scalar>>\nReturns the concatenated elements of this sequence of sequences, inserting the given separator between each element.\nfunc reversed() -> ReversedCollection<MLShapedArray<Scalar>>\nReturns a view presenting the elements of the collection in reverse order.\nfunc split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (MLShapedArraySlice<Scalar>) -> Bool) -> [MLShapedArraySlice<Scalar>]\nReturns the longest possible subsequences of the collection, in order, that don’t contain elements satisfying the given predicate.\nfunc split<C>(separator: C, maxSplits: Int, omittingEmptySubsequences: Bool) -> [MLShapedArraySlice<Scalar>]\nReturns the longest possible subsequences of the collection, in order, around elements equal to the given separator.\nfunc split(separator: MLShapedArraySlice<Scalar>, maxSplits: Int, omittingEmptySubsequences: Bool) -> [MLShapedArraySlice<Scalar>]\nReturns the longest possible subsequences of the collection, in order, around elements equal to the given element."
  },
  {
    "title": "split(separator:maxSplits:omittingEmptySubsequences:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarray/4135021-split",
    "html": "Parameters\nseparator\n\nThe element that should be split upon.\n\nmaxSplits\n\nThe maximum number of times to split the collection, or one less than the number of subsequences to return. If maxSplits + 1 subsequences are returned, the last one is a suffix of the original collection containing the remaining elements. maxSplits must be greater than or equal to zero. The default value is Int.max.\n\nomittingEmptySubsequences\n\nIf false, an empty subsequence is returned in the result for each consecutive pair of separator elements in the collection and for each instance of separator at the start or end of the collection. If true, only nonempty subsequences are returned. The default value is true.\n\nReturn Value\n\nAn array of subsequences, split from this collection’s elements.\n\nDiscussion\n\nThe resulting array consists of at most maxSplits + 1 subsequences. Elements that are used to split the collection are not returned as part of any subsequence.\n\nThe following examples show the effects of the maxSplits and omittingEmptySubsequences parameters when splitting a string at each space character (” “). The first use of split returns each word that was originally separated by one or more spaces.\n\nlet line = \"BLANCHE:   I don't want realism. I want magic!\"\nprint(line.split(separator: \" \"))\n// Prints \"[\"BLANCHE:\", \"I\", \"don\\'t\", \"want\", \"realism.\", \"I\", \"want\", \"magic!\"]\"\n\n\nThe second example passes 1 for the maxSplits parameter, so the original string is split just once, into two new strings.\n\nprint(line.split(separator: \" \", maxSplits: 1))\n// Prints \"[\"BLANCHE:\", \"  I don\\'t want realism. I want magic!\"]\"\n\n\nThe final example passes false for the omittingEmptySubsequences parameter, so the returned array contains empty strings where spaces were repeated.\n\nprint(line.split(separator: \" \", omittingEmptySubsequences: false))\n// Prints \"[\"BLANCHE:\", \"\", \"\", \"I\", \"don\\'t\", \"want\", \"realism.\", \"I\", \"want\", \"magic!\"]\"\n\n\nComplexity: O(n), where n is the length of the collection.\n\nSee Also\nGenerating a Shaped Array\nfunc joined() -> FlattenSequence<MLShapedArray<Scalar>>\nReturns the elements of this sequence of sequences, concatenated.\nfunc joined<Separator>(separator: Separator) -> JoinedSequence<MLShapedArray<Scalar>>\nReturns the concatenated elements of this sequence of sequences, inserting the given separator between each element.\nfunc reversed() -> ReversedCollection<MLShapedArray<Scalar>>\nReturns a view presenting the elements of the collection in reverse order.\nfunc split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (MLShapedArraySlice<Scalar>) -> Bool) -> [MLShapedArraySlice<Scalar>]\nReturns the longest possible subsequences of the collection, in order, that don’t contain elements satisfying the given predicate.\nfunc split<C>(separator: C, maxSplits: Int, omittingEmptySubsequences: Bool) -> [MLShapedArraySlice<Scalar>]\nReturns the longest possible subsequences of the collection, in order, around elements equal to the given separator.\nfunc split(separator: MLShapedArraySlice<Scalar>, maxSplits: Int, omittingEmptySubsequences: Bool) -> [ArraySlice<MLShapedArraySlice<Scalar>>]\nReturns the longest possible subsequences of the sequence, in order, around elements equal to the given element."
  },
  {
    "title": "pixelsHigh | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlimageconstraint/2921268-pixelshigh",
    "html": "See Also\nAccessing the Constraints\nvar pixelsWide: Int\nThe model's default width for an image feature.\nvar pixelFormatType: OSType\nThe model's pixel format for an image feature."
  },
  {
    "title": "init(strings:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlsequence/2962873-init",
    "html": "Parameters\nstringValues\n\nThe array of strings for the sequence.\n\nSee Also\nCreating a Sequence\ninit(int64s: [NSNumber])\nCreates a sequence of integers from an array of numbers.\ninit(empty: MLFeatureType)\nCreates an empty sequence of strings or integers."
  },
  {
    "title": "MLModelError.Code.featureType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlmodelerror/code/featuretype",
    "html": "Discussion\n\nCore ML typically throws this error when an app sends an input feature a value that’s of an incorrect type.\n\nSee Also\nError Codes\ncase parameters\nAn error code for problems related to model parameters.\ncase modelCollection\nAn error code for problems related to retrieving a model collection from the deployment system.\ncase modelDecryptionKeyFetch\nAn error code for problems related to retrieving a model’s decryption key.\ncase modelDecryption\nAn error code for problems related to decrypting models.\ncase update\nAn error code for problems related to on-device model updates.\ncase customLayer\nAn error code for problems related to custom layers.\ncase customModel\nAn error code for problems related to custom models.\ncase io\nAn error code for problems related to the system’s input or output.\ncase predictionCancelled\nAn error code for problems related to canceling the prediction before it completes.\ncase generic\nAn error code for runtime issues that don’t apply to the other error codes."
  },
  {
    "title": "subscript(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarrayprotocol/3763375-subscript",
    "html": "See Also\nMLShapedArrayProtocol Implementations\nsubscript(MLShapedArrayRangeExpression) -> MLShapedArraySlice<Self.Scalar>\nsubscript(MLShapedArrayRangeExpression...) -> MLShapedArraySlice<Self.Scalar>\nsubscript(Int) -> MLShapedArraySlice<Self.Scalar>\nsubscript(Range<Int>) -> MLShapedArraySlice<Self.Scalar>\nsubscript<C>(C) -> MLShapedArraySlice<Self.Scalar>\nsubscript((UnboundedRange_) -> Void) -> MLShapedArraySlice<Self.Scalar>"
  },
  {
    "title": "subscript(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarrayprotocol/3763374-subscript",
    "html": "See Also\nMLShapedArrayProtocol Implementations\nsubscript(MLShapedArrayRangeExpression) -> MLShapedArraySlice<Self.Scalar>\nsubscript(MLShapedArrayRangeExpression...) -> MLShapedArraySlice<Self.Scalar>\nsubscript(Int...) -> MLShapedArraySlice<Self.Scalar>\nsubscript(Range<Int>) -> MLShapedArraySlice<Self.Scalar>\nsubscript<C>(C) -> MLShapedArraySlice<Self.Scalar>\nsubscript((UnboundedRange_) -> Void) -> MLShapedArraySlice<Self.Scalar>"
  },
  {
    "title": "MLShapedArraySlice.Element | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarrayslice/element",
    "html": "See Also\nSupporting Types\ntypealias MLShapedArraySlice.Index\nA type that defines the shaped array’s indices.\ntypealias MLShapedArraySlice.Indices\nA type that defines the shaped array’s index ranges.\ntypealias MLShapedArraySlice.Iterator\nA type that defines the shaped array’s iterator.\ntypealias MLShapedArraySlice.SubSequence\nA type that defines the shaped array’s slices.\ntypealias MLShapedArraySlice.ArrayLiteralElement\nA type that restricts the elements of an array literal that initializes the shaped array.\nShaped Array Slice Collection Operations"
  },
  {
    "title": "==(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarrayslice/4135030",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nSee Also\nComparing Slices\nstatic func != (MLShapedArraySlice<Scalar>, MLShapedArraySlice<Scalar>) -> Bool\nReturns a Boolean value that indicates whether two values are not equal.\nAvailable when Scalar conforms to Equatable."
  },
  {
    "title": "subscript(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarrayslice/3763537-subscript",
    "html": "Parameters\nsliceRanges\n\nAn integer range collection in which each element is a range in the corresponding dimension.\n\nRelationships\nFrom Protocol\nMLShapedArrayProtocol\nSee Also\nAccessing a Slice from Multiple Dimensions\nsubscript(Int...) -> MLShapedArraySlice<Scalar>\nAccesses a slice using a list of integers, in which each element is an index in the corresponding dimension.\nsubscript<C>(C) -> MLShapedArraySlice<Scalar>\nAccesses a slice using a collection of integers, in which each element is an index in the corresponding dimension.\nsubscript(MLShapedArrayRangeExpression...) -> MLShapedArraySlice<Scalar>\nAccesses a slice using a list of range expressions, in which each element is a range in the corresponding dimension.\nsubscript<C>(C) -> MLShapedArraySlice<Scalar>\nAccesses a slice using a collection of range expressions, in which each element is a range in the corresponding dimension."
  },
  {
    "title": "fill(with:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarrayslice/3763417-fill",
    "html": "Parameters\ncollection\n\nA collection of scalar values.\n\nDiscussion\n\nThe method assigns the shaped array’s elements in first-major order — an equivalent to row-major order for arrays with three or more dimensions. The method repeatedly uses elements in collection, in order, if the shaped array has more elements than collection.\n\nSee Also\nModifying a Shaped Array\nfunc fill(with: Scalar)\nSets all the shaped array’s elements to a scalar value.\nfunc withUnsafeMutableShapedBufferPointer<R>((inout UnsafeMutableBufferPointer<Scalar>, [Int], [Int]) -> R) -> R\nProvides a closure with a read-write pointer to the shaped array slice’s underlying memory."
  },
  {
    "title": "withUnsafeShapedBufferPointer(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarrayslice/3763566-withunsafeshapedbufferpointer",
    "html": "Parameters\nbody\n\nA closure that inspects a shaped array’s underlying memory.\n\npt\n\nA pointer to the shaped array.\n\nshape\n\nAn integer array in which each element represents the size of the corresponding dimension.\n\nstrides\n\nAn integer array in which each element is the number of memory locations that spans the length of the corresponding dimension.\n\nDiscussion\n\nThe method returns the value your closure returns, if applicable.\n\nRelationships\nFrom Protocol\nMLShapedArrayProtocol"
  },
  {
    "title": "subscript(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarrayslice/3763543-subscript",
    "html": "Parameters\npartialSliceRanges\n\nA collection of range expressions in which each element is a range in the corresponding dimension.\n\nSee Also\nAccessing a Slice from Multiple Dimensions\nsubscript(Int...) -> MLShapedArraySlice<Scalar>\nAccesses a slice using a list of integers, in which each element is an index in the corresponding dimension.\nsubscript<C>(C) -> MLShapedArraySlice<Scalar>\nAccesses a slice using a collection of integers, in which each element is an index in the corresponding dimension.\nsubscript<C>(C) -> MLShapedArraySlice<Scalar>\nAccesses a slice using a collection of integer ranges, in which each element is a range in the corresponding dimension.\nsubscript(MLShapedArrayRangeExpression...) -> MLShapedArraySlice<Scalar>\nAccesses a slice using a list of range expressions, in which each element is a range in the corresponding dimension."
  },
  {
    "title": "subscript(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarrayslice/3763539-subscript",
    "html": "Parameters\nsliceRanges\n\nA comma-separated, or variadic, list of range expressions in which each is a range in the corresponding dimension.\n\nSee Also\nAccessing a Slice from Multiple Dimensions\nsubscript(Int...) -> MLShapedArraySlice<Scalar>\nAccesses a slice using a list of integers, in which each element is an index in the corresponding dimension.\nsubscript<C>(C) -> MLShapedArraySlice<Scalar>\nAccesses a slice using a collection of integers, in which each element is an index in the corresponding dimension.\nsubscript<C>(C) -> MLShapedArraySlice<Scalar>\nAccesses a slice using a collection of integer ranges, in which each element is a range in the corresponding dimension.\nsubscript<C>(C) -> MLShapedArraySlice<Scalar>\nAccesses a slice using a collection of range expressions, in which each element is a range in the corresponding dimension."
  },
  {
    "title": "subscript(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarrayslice/3763536-subscript",
    "html": "Parameters\nindices\n\nAn integer collection in which each element is an index in the corresponding dimension.\n\nRelationships\nFrom Protocol\nMLShapedArrayProtocol\nSee Also\nAccessing a Slice from Multiple Dimensions\nsubscript(Int...) -> MLShapedArraySlice<Scalar>\nAccesses a slice using a list of integers, in which each element is an index in the corresponding dimension.\nsubscript<C>(C) -> MLShapedArraySlice<Scalar>\nAccesses a slice using a collection of integer ranges, in which each element is a range in the corresponding dimension.\nsubscript(MLShapedArrayRangeExpression...) -> MLShapedArraySlice<Scalar>\nAccesses a slice using a list of range expressions, in which each element is a range in the corresponding dimension.\nsubscript<C>(C) -> MLShapedArraySlice<Scalar>\nAccesses a slice using a collection of range expressions, in which each element is a range in the corresponding dimension."
  },
  {
    "title": "subscript(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarrayslice/3763541-subscript",
    "html": "Parameters\nindices\n\nA comma-separated, or variadic, list of integers in which each is an index in the corresponding dimension.\n\nSee Also\nAccessing a Slice from Multiple Dimensions\nsubscript<C>(C) -> MLShapedArraySlice<Scalar>\nAccesses a slice using a collection of integers, in which each element is an index in the corresponding dimension.\nsubscript<C>(C) -> MLShapedArraySlice<Scalar>\nAccesses a slice using a collection of integer ranges, in which each element is a range in the corresponding dimension.\nsubscript(MLShapedArrayRangeExpression...) -> MLShapedArraySlice<Scalar>\nAccesses a slice using a list of range expressions, in which each element is a range in the corresponding dimension.\nsubscript<C>(C) -> MLShapedArraySlice<Scalar>\nAccesses a slice using a collection of range expressions, in which each element is a range in the corresponding dimension."
  },
  {
    "title": "subscript(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarrayslice/3763540-subscript",
    "html": "Parameters\nindex\n\nAn integer index.\n\nSee Also\nAccessing a Slice from the First Dimension\nsubscript<R>(R) -> MLShapedArraySlice<Scalar>\nAccesses a slice with an integer range expression in the shaped array slice’s first dimension.\nsubscript(MLShapedArrayRangeExpression) -> MLShapedArraySlice<Scalar>\nAccesses a slice with a shaped-array range expression in the shaped array slice’s first dimension.\nsubscript((UnboundedRange_) -> Void) -> MLShapedArraySlice<Scalar>\nAccesses a slice with an unbounded range in the shaped array slice’s first dimension.\nsubscript((UnboundedRange_) -> ()) -> MLShapedArraySlice<Scalar>\nAccesses a slice with an unbounded range in the shaped array slice’s first dimension."
  },
  {
    "title": "subscript(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarrayslice/3763538-subscript",
    "html": "Parameters\nsliceRange\n\nA shaped-array range expression.\n\nSee Also\nAccessing a Slice from the First Dimension\nsubscript(Int) -> MLShapedArraySlice<Scalar>\nAccesses a slice at an index in the shaped array slice’s first dimension.\nsubscript<R>(R) -> MLShapedArraySlice<Scalar>\nAccesses a slice with an integer range expression in the shaped array slice’s first dimension.\nsubscript((UnboundedRange_) -> Void) -> MLShapedArraySlice<Scalar>\nAccesses a slice with an unbounded range in the shaped array slice’s first dimension.\nsubscript((UnboundedRange_) -> ()) -> MLShapedArraySlice<Scalar>\nAccesses a slice with an unbounded range in the shaped array slice’s first dimension."
  },
  {
    "title": "subscript(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarrayslice/3763545-subscript",
    "html": "Parameters\nr\n\nAn integer range expression.\n\nSee Also\nAccessing a Slice from the First Dimension\nsubscript(Int) -> MLShapedArraySlice<Scalar>\nAccesses a slice at an index in the shaped array slice’s first dimension.\nsubscript(MLShapedArrayRangeExpression) -> MLShapedArraySlice<Scalar>\nAccesses a slice with a shaped-array range expression in the shaped array slice’s first dimension.\nsubscript((UnboundedRange_) -> Void) -> MLShapedArraySlice<Scalar>\nAccesses a slice with an unbounded range in the shaped array slice’s first dimension.\nsubscript((UnboundedRange_) -> ()) -> MLShapedArraySlice<Scalar>\nAccesses a slice with an unbounded range in the shaped array slice’s first dimension."
  },
  {
    "title": "subscript(scalarAt:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarrayslice/3763554-subscript",
    "html": "Parameters\nindices\n\nA comma-separated, or variadic, list of integers in which each integer is an index in the corresponding dimension.\n\nSee Also\nAccessing an Element\nvar scalar: Scalar?\nA computed property that returns the first element when the shape isn’t empty, or sets the shaped array’s underlying scalar type.\nvar scalars: [Scalar]\nA computed property that generates a linear array that contains every element, or assigns the elements of an array to the shaped array’s elements.\nsubscript<C>(scalarAt: C) -> Scalar\nAccesses an element in the shaped array using a collection of indices that represent a multidimensional location."
  },
  {
    "title": "init(scalar:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarrayslice/3763452-init",
    "html": "Parameters\nscalar\n\nA singular scalar value.\n\nDiscussion\n\nUse the shaped array’s scalar property to access the single value.\n\nSee Also\nCreating a Shaped Array Slice\ninit(arrayLiteral: Scalar...)\nCreates a shaped array slice from a list of values.\ninit<S>(scalars: S, shape: [Int])\nCreates a shaped array slice from an array of values.\ninit(repeating: Scalar, shape: [Int])\nCreates a shaped array slice that initializes every element to the same value.\ninit(identityMatrixOfSize: Int)\nCreates a shaped array slice that’s an identity matrix of integers.\nAvailable when Scalar conforms to FixedWidthInteger.\ninit(randomScalarsIn: Range<Scalar>, shape: [Int])\nCreates a shaped array that initializes the elements to random integer values within a range.\nAvailable when Scalar conforms to FixedWidthInteger."
  },
  {
    "title": "scalars | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarrayslice/3763512-scalars",
    "html": "See Also\nAccessing an Element\nvar scalar: Scalar?\nA computed property that returns the first element when the shape isn’t empty, or sets the shaped array’s underlying scalar type.\nsubscript(scalarAt: Int...) -> Scalar\nAccesses an element in the shaped array using a list of indices that represent a multidimensional location.\nsubscript<C>(scalarAt: C) -> Scalar\nAccesses an element in the shaped array using a collection of indices that represent a multidimensional location."
  },
  {
    "title": "ranges(of:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarray/4135015-ranges",
    "html": "Parameters\nother\n\nThe sequence to search for.\n\nReturn Value\n\nA collection of ranges of all occurrences of other. Returns an empty collection if other is not found.\n\nSee Also\nFinding an Index in a Shaped Array\nvar startIndex: Int\nThe index of the first element in the shaped array.\nvar endIndex: Int\nThe index of the last element in the shaped array.\nvar indices: Range<Int>\nThe index range of all the elements in the shaped array.\nfunc index(after: Int) -> Int\nReturns the index immediately after an index you provide.\nfunc index(Int, offsetBy: Int) -> Int\nReturns the index at a relative distance to an index you provide.\nfunc index(Int, offsetBy: Int, limitedBy: Int) -> Int?\nReturns an index that is the specified distance from the given index, unless that distance is beyond a given limiting index.\nfunc index(of: MLShapedArraySlice<Scalar>) -> Int?\nReturns the first index where the specified value appears in the collection.\nDeprecated\nfunc filter(Predicate<MLShapedArraySlice<Scalar>>) -> [MLShapedArraySlice<Scalar>]\nfunc formIndex(before: inout Int)\nReplaces the given index with its predecessor.\nfunc formIndex(after: inout Int)\nReplaces the given index with its successor.\nfunc formIndex(inout Int, offsetBy: Int)\nOffsets the given index by the specified distance.\nfunc formIndex(inout Int, offsetBy: Int, limitedBy: Int) -> Bool\nOffsets the given index by the specified distance, or so that it equals the given limiting index.\nfunc firstIndex(where: (MLShapedArraySlice<Scalar>) -> Bool) -> Int?\nReturns the first index in which an element of the collection satisfies the given predicate.\nfunc firstIndex(of: MLShapedArraySlice<Scalar>) -> Int?\nReturns the first index where the specified value appears in the collection.\nfunc lastIndex(where: (MLShapedArraySlice<Scalar>) -> Bool) -> Int?\nReturns the index of the last element in the collection that matches the given predicate.\nfunc lastIndex(of: MLShapedArraySlice<Scalar>) -> Int?\nReturns the last index where the specified value appears in the collection.\nfunc starts<PossiblePrefix>(with: PossiblePrefix) -> Bool\nReturns a Boolean value indicating whether the initial elements of the sequence are the same as the elements in another sequence.\nfunc firstRange<C>(of: C) -> Range<Int>?\nFinds and returns the range of the first occurrence of a given collection within this collection."
  },
  {
    "title": "firstIndex(where:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarray/3763211-firstindex",
    "html": "Parameters\npredicate\n\nA closure that takes an element as its argument and returns a Boolean value that indicates whether the passed element represents a match.\n\nReturn Value\n\nThe index of the first element for which predicate returns true. If no elements in the collection satisfy the given predicate, returns nil.\n\nDiscussion\n\nYou can use the predicate to find an element of a type that doesn’t conform to the Equatable protocol or to find an element that matches particular criteria. Here’s an example that finds a student name that begins with the letter “A”:\n\nlet students = [\"Kofi\", \"Abena\", \"Peter\", \"Kweku\", \"Akosua\"]\nif let i = students.firstIndex(where: { $0.hasPrefix(\"A\") }) {\n    print(\"\\(students[i]) starts with 'A'!\")\n}\n// Prints \"Abena starts with 'A'!\"\n\n\nComplexity: O(n), where n is the length of the collection.\n\nSee Also\nFinding an Index in a Shaped Array\nvar startIndex: Int\nThe index of the first element in the shaped array.\nvar endIndex: Int\nThe index of the last element in the shaped array.\nvar indices: Range<Int>\nThe index range of all the elements in the shaped array.\nfunc index(after: Int) -> Int\nReturns the index immediately after an index you provide.\nfunc index(Int, offsetBy: Int) -> Int\nReturns the index at a relative distance to an index you provide.\nfunc index(Int, offsetBy: Int, limitedBy: Int) -> Int?\nReturns an index that is the specified distance from the given index, unless that distance is beyond a given limiting index.\nfunc index(of: MLShapedArraySlice<Scalar>) -> Int?\nReturns the first index where the specified value appears in the collection.\nDeprecated\nfunc filter(Predicate<MLShapedArraySlice<Scalar>>) -> [MLShapedArraySlice<Scalar>]\nfunc formIndex(before: inout Int)\nReplaces the given index with its predecessor.\nfunc formIndex(after: inout Int)\nReplaces the given index with its successor.\nfunc formIndex(inout Int, offsetBy: Int)\nOffsets the given index by the specified distance.\nfunc formIndex(inout Int, offsetBy: Int, limitedBy: Int) -> Bool\nOffsets the given index by the specified distance, or so that it equals the given limiting index.\nfunc firstIndex(of: MLShapedArraySlice<Scalar>) -> Int?\nReturns the first index where the specified value appears in the collection.\nfunc lastIndex(where: (MLShapedArraySlice<Scalar>) -> Bool) -> Int?\nReturns the index of the last element in the collection that matches the given predicate.\nfunc lastIndex(of: MLShapedArraySlice<Scalar>) -> Int?\nReturns the last index where the specified value appears in the collection.\nfunc ranges<C>(of: C) -> [Range<Int>]\nFinds and returns the ranges of the all occurrences of a given sequence within the collection.\nfunc starts<PossiblePrefix>(with: PossiblePrefix) -> Bool\nReturns a Boolean value indicating whether the initial elements of the sequence are the same as the elements in another sequence.\nfunc firstRange<C>(of: C) -> Range<Int>?\nFinds and returns the range of the first occurrence of a given collection within this collection."
  },
  {
    "title": "formIndex(before:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarray/3763221-formindex",
    "html": "Parameters\ni\n\nA valid index of the collection. i must be greater than startIndex.\n\nDiscussion\n\nNote\n\nThis documentation comment was inherited from BidirectionalCollection.\n\nSee Also\nFinding an Index in a Shaped Array\nvar startIndex: Int\nThe index of the first element in the shaped array.\nvar endIndex: Int\nThe index of the last element in the shaped array.\nvar indices: Range<Int>\nThe index range of all the elements in the shaped array.\nfunc index(after: Int) -> Int\nReturns the index immediately after an index you provide.\nfunc index(Int, offsetBy: Int) -> Int\nReturns the index at a relative distance to an index you provide.\nfunc index(Int, offsetBy: Int, limitedBy: Int) -> Int?\nReturns an index that is the specified distance from the given index, unless that distance is beyond a given limiting index.\nfunc index(of: MLShapedArraySlice<Scalar>) -> Int?\nReturns the first index where the specified value appears in the collection.\nDeprecated\nfunc filter(Predicate<MLShapedArraySlice<Scalar>>) -> [MLShapedArraySlice<Scalar>]\nfunc formIndex(after: inout Int)\nReplaces the given index with its successor.\nfunc formIndex(inout Int, offsetBy: Int)\nOffsets the given index by the specified distance.\nfunc formIndex(inout Int, offsetBy: Int, limitedBy: Int) -> Bool\nOffsets the given index by the specified distance, or so that it equals the given limiting index.\nfunc firstIndex(where: (MLShapedArraySlice<Scalar>) -> Bool) -> Int?\nReturns the first index in which an element of the collection satisfies the given predicate.\nfunc firstIndex(of: MLShapedArraySlice<Scalar>) -> Int?\nReturns the first index where the specified value appears in the collection.\nfunc lastIndex(where: (MLShapedArraySlice<Scalar>) -> Bool) -> Int?\nReturns the index of the last element in the collection that matches the given predicate.\nfunc lastIndex(of: MLShapedArraySlice<Scalar>) -> Int?\nReturns the last index where the specified value appears in the collection.\nfunc ranges<C>(of: C) -> [Range<Int>]\nFinds and returns the ranges of the all occurrences of a given sequence within the collection.\nfunc starts<PossiblePrefix>(with: PossiblePrefix) -> Bool\nReturns a Boolean value indicating whether the initial elements of the sequence are the same as the elements in another sequence.\nfunc firstRange<C>(of: C) -> Range<Int>?\nFinds and returns the range of the first occurrence of a given collection within this collection."
  },
  {
    "title": "publisher | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarray/3763278-publisher",
    "html": "Discussion\n\nSee Publisher for more information about Combine publishers and subscribers.\n\nSee Also\nInspecting a Shaped Array’s Scalars\nvar first: MLShapedArraySlice<Scalar>?\nThe first element of the collection.\nvar last: MLShapedArraySlice<Scalar>?\nThe last element of the collection.\nvar lazy: LazySequence<MLShapedArray<Scalar>>\nA sequence containing the same elements as this sequence, but on which some operations, such as map and filter, are implemented lazily."
  },
  {
    "title": "lazy | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarray/3763256-lazy",
    "html": "See Also\nInspecting a Shaped Array’s Scalars\nvar first: MLShapedArraySlice<Scalar>?\nThe first element of the collection.\nvar last: MLShapedArraySlice<Scalar>?\nThe last element of the collection.\nvar publisher: Publishers.Sequence<MLShapedArray<Scalar>, Never>\nA publisher that produces the element in the shaped array as separate values."
  },
  {
    "title": "subscript(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarray/3763331-subscript",
    "html": "Parameters\nbounds\n\nA range of the collection’s indices. The bounds of the range must be valid indices of the collection.\n\nDiscussion\n\nThe range expression is converted to a concrete subrange relative to this collection. For example, using a PartialRangeFrom range expression with an array accesses the subrange from the start of the range expression until the end of the array.\n\nlet streets = [\"Adams\", \"Bryant\", \"Channing\", \"Douglas\", \"Evarts\"]\nlet streetsSlice = streets[2...]\nprint(streetsSlice)\n// [\"Channing\", \"Douglas\", \"Evarts\"]\n\n\nThe accessed slice uses the same indices for the same elements as the original collection uses. This example searches streetsSlice for one of the strings in the slice, and then uses that index in the original array.\n\nlet index = streetsSlice.firstIndex(of: \"Evarts\")    // 4\nprint(streets[index!])\n// \"Evarts\"\n\n\nAlways use the slice’s startIndex property instead of assuming that its indices start at a particular value. Attempting to access an element by using an index outside the bounds of the slice’s indices may result in a runtime error, even if that index is valid for the original collection.\n\nprint(streetsSlice.startIndex)\n// 2\nprint(streetsSlice[2])\n// \"Channing\"\n\n\nprint(streetsSlice[0])\n// error: Index out of bounds\n\n\nComplexity: O(1)\n\nSee Also\nInspecting a Slice of a Shaped Array\nfunc allSatisfy((MLShapedArraySlice<Scalar>) -> Bool) -> Bool\nReturns a Boolean value indicating whether every element of a sequence satisfies a given predicate.\nfunc contains<C>(C) -> Bool\nReturns a Boolean value indicating whether the collection contains the given sequence.\nfunc contains(where: (MLShapedArraySlice<Scalar>) -> Bool) -> Bool\nReturns a Boolean value indicating whether the sequence contains an element that satisfies the given predicate.\nfunc contains(MLShapedArraySlice<Scalar>) -> Bool\nReturns a Boolean value indicating whether the sequence contains the given element.\nfunc makeIterator() -> IndexingIterator<MLShapedArray<Scalar>>\nReturns an iterator over the elements of the collection.\nfunc forEach((MLShapedArraySlice<Scalar>) -> Void)\nCalls the given closure on each element in the sequence in the same order as a for-in loop.\nfunc enumerated() -> EnumeratedSequence<MLShapedArray<Scalar>>\nReturns a sequence of pairs (n, x), where n represents a consecutive integer starting at zero and x represents an element of the sequence.\nfunc randomElement() -> MLShapedArraySlice<Scalar>?\nReturns a random element of the collection.\nfunc randomElement<T>(using: inout T) -> MLShapedArraySlice<Scalar>?\nReturns a random element of the collection, using the given generator as a source for randomness.\nfunc withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<MLShapedArraySlice<Scalar>>) -> R) -> R?\nExecutes a closure on the sequence’s contiguous storage."
  },
  {
    "title": "contains(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarray/4135003-contains",
    "html": "Parameters\nelement\n\nThe element to find in the sequence.\n\nReturn Value\n\ntrue if the element was found in the sequence; otherwise, false.\n\nDiscussion\n\nThis example checks to see whether a favorite actor is in an array storing a movie’s cast.\n\nlet cast = [\"Vivien\", \"Marlon\", \"Kim\", \"Karl\"]\nprint(cast.contains(\"Marlon\"))\n// Prints \"true\"\nprint(cast.contains(\"James\"))\n// Prints \"false\"\n\n\nComplexity: O(n), where n is the length of the sequence.\n\nSee Also\nInspecting a Slice of a Shaped Array\nfunc allSatisfy((MLShapedArraySlice<Scalar>) -> Bool) -> Bool\nReturns a Boolean value indicating whether every element of a sequence satisfies a given predicate.\nfunc contains<C>(C) -> Bool\nReturns a Boolean value indicating whether the collection contains the given sequence.\nfunc contains(where: (MLShapedArraySlice<Scalar>) -> Bool) -> Bool\nReturns a Boolean value indicating whether the sequence contains an element that satisfies the given predicate.\nsubscript<R>(R) -> MLShapedArraySlice<Scalar>\nAccesses the contiguous subrange of the collection’s elements specified by a range expression.\nfunc makeIterator() -> IndexingIterator<MLShapedArray<Scalar>>\nReturns an iterator over the elements of the collection.\nfunc forEach((MLShapedArraySlice<Scalar>) -> Void)\nCalls the given closure on each element in the sequence in the same order as a for-in loop.\nfunc enumerated() -> EnumeratedSequence<MLShapedArray<Scalar>>\nReturns a sequence of pairs (n, x), where n represents a consecutive integer starting at zero and x represents an element of the sequence.\nfunc randomElement() -> MLShapedArraySlice<Scalar>?\nReturns a random element of the collection.\nfunc randomElement<T>(using: inout T) -> MLShapedArraySlice<Scalar>?\nReturns a random element of the collection, using the given generator as a source for randomness.\nfunc withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<MLShapedArraySlice<Scalar>>) -> R) -> R?\nExecutes a closure on the sequence’s contiguous storage."
  },
  {
    "title": "makeIterator() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarray/3763258-makeiterator",
    "html": "See Also\nInspecting a Slice of a Shaped Array\nfunc allSatisfy((MLShapedArraySlice<Scalar>) -> Bool) -> Bool\nReturns a Boolean value indicating whether every element of a sequence satisfies a given predicate.\nfunc contains<C>(C) -> Bool\nReturns a Boolean value indicating whether the collection contains the given sequence.\nfunc contains(where: (MLShapedArraySlice<Scalar>) -> Bool) -> Bool\nReturns a Boolean value indicating whether the sequence contains an element that satisfies the given predicate.\nfunc contains(MLShapedArraySlice<Scalar>) -> Bool\nReturns a Boolean value indicating whether the sequence contains the given element.\nsubscript<R>(R) -> MLShapedArraySlice<Scalar>\nAccesses the contiguous subrange of the collection’s elements specified by a range expression.\nfunc forEach((MLShapedArraySlice<Scalar>) -> Void)\nCalls the given closure on each element in the sequence in the same order as a for-in loop.\nfunc enumerated() -> EnumeratedSequence<MLShapedArray<Scalar>>\nReturns a sequence of pairs (n, x), where n represents a consecutive integer starting at zero and x represents an element of the sequence.\nfunc randomElement() -> MLShapedArraySlice<Scalar>?\nReturns a random element of the collection.\nfunc randomElement<T>(using: inout T) -> MLShapedArraySlice<Scalar>?\nReturns a random element of the collection, using the given generator as a source for randomness.\nfunc withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<MLShapedArraySlice<Scalar>>) -> R) -> R?\nExecutes a closure on the sequence’s contiguous storage."
  },
  {
    "title": "startIndex | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarray/3763315-startindex",
    "html": "Relationships\nFrom Protocol\nBidirectionalCollection\nCollection\nRandomAccessCollection\nSee Also\nFinding an Index in a Shaped Array\nvar endIndex: Int\nThe index of the last element in the shaped array.\nvar indices: Range<Int>\nThe index range of all the elements in the shaped array.\nfunc index(after: Int) -> Int\nReturns the index immediately after an index you provide.\nfunc index(Int, offsetBy: Int) -> Int\nReturns the index at a relative distance to an index you provide.\nfunc index(Int, offsetBy: Int, limitedBy: Int) -> Int?\nReturns an index that is the specified distance from the given index, unless that distance is beyond a given limiting index.\nfunc index(of: MLShapedArraySlice<Scalar>) -> Int?\nReturns the first index where the specified value appears in the collection.\nDeprecated\nfunc filter(Predicate<MLShapedArraySlice<Scalar>>) -> [MLShapedArraySlice<Scalar>]\nfunc formIndex(before: inout Int)\nReplaces the given index with its predecessor.\nfunc formIndex(after: inout Int)\nReplaces the given index with its successor.\nfunc formIndex(inout Int, offsetBy: Int)\nOffsets the given index by the specified distance.\nfunc formIndex(inout Int, offsetBy: Int, limitedBy: Int) -> Bool\nOffsets the given index by the specified distance, or so that it equals the given limiting index.\nfunc firstIndex(where: (MLShapedArraySlice<Scalar>) -> Bool) -> Int?\nReturns the first index in which an element of the collection satisfies the given predicate.\nfunc firstIndex(of: MLShapedArraySlice<Scalar>) -> Int?\nReturns the first index where the specified value appears in the collection.\nfunc lastIndex(where: (MLShapedArraySlice<Scalar>) -> Bool) -> Int?\nReturns the index of the last element in the collection that matches the given predicate.\nfunc lastIndex(of: MLShapedArraySlice<Scalar>) -> Int?\nReturns the last index where the specified value appears in the collection.\nfunc ranges<C>(of: C) -> [Range<Int>]\nFinds and returns the ranges of the all occurrences of a given sequence within the collection.\nfunc starts<PossiblePrefix>(with: PossiblePrefix) -> Bool\nReturns a Boolean value indicating whether the initial elements of the sequence are the same as the elements in another sequence.\nfunc firstRange<C>(of: C) -> Range<Int>?\nFinds and returns the range of the first occurrence of a given collection within this collection."
  },
  {
    "title": "forEach(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarray/3763216-foreach",
    "html": "Parameters\nbody\n\nA closure that takes an element of the sequence as a parameter.\n\nDiscussion\n\nThe two loops in the following example produce the same output:\n\nlet numberWords = [\"one\", \"two\", \"three\"]\nfor word in numberWords {\n    print(word)\n}\n// Prints \"one\"\n// Prints \"two\"\n// Prints \"three\"\n\n\nnumberWords.forEach { word in\n    print(word)\n}\n// Same as above\n\n\nUsing the forEach method is distinct from a for-in loop in two important ways:\n\nYou cannot use a break or continue statement to exit the current call of the body closure or skip subsequent calls.\n\nUsing the return statement in the body closure will exit only from the current call to body, not from any outer scope, and won’t skip subsequent calls.\n\nSee Also\nInspecting a Slice of a Shaped Array\nfunc allSatisfy((MLShapedArraySlice<Scalar>) -> Bool) -> Bool\nReturns a Boolean value indicating whether every element of a sequence satisfies a given predicate.\nfunc contains<C>(C) -> Bool\nReturns a Boolean value indicating whether the collection contains the given sequence.\nfunc contains(where: (MLShapedArraySlice<Scalar>) -> Bool) -> Bool\nReturns a Boolean value indicating whether the sequence contains an element that satisfies the given predicate.\nfunc contains(MLShapedArraySlice<Scalar>) -> Bool\nReturns a Boolean value indicating whether the sequence contains the given element.\nsubscript<R>(R) -> MLShapedArraySlice<Scalar>\nAccesses the contiguous subrange of the collection’s elements specified by a range expression.\nfunc makeIterator() -> IndexingIterator<MLShapedArray<Scalar>>\nReturns an iterator over the elements of the collection.\nfunc enumerated() -> EnumeratedSequence<MLShapedArray<Scalar>>\nReturns a sequence of pairs (n, x), where n represents a consecutive integer starting at zero and x represents an element of the sequence.\nfunc randomElement() -> MLShapedArraySlice<Scalar>?\nReturns a random element of the collection.\nfunc randomElement<T>(using: inout T) -> MLShapedArraySlice<Scalar>?\nReturns a random element of the collection, using the given generator as a source for randomness.\nfunc withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<MLShapedArraySlice<Scalar>>) -> R) -> R?\nExecutes a closure on the sequence’s contiguous storage."
  },
  {
    "title": "init(arrayLiteral:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarrayslice/3763443-init",
    "html": "Parameters\nelements\n\nA comma-separated, or variadic, list of scalar values.\n\nSee Also\nCreating a Shaped Array Slice\ninit(scalar: Scalar)\nCreates a shaped array slice with exactly one value and zero dimensions.\ninit<S>(scalars: S, shape: [Int])\nCreates a shaped array slice from an array of values.\ninit(repeating: Scalar, shape: [Int])\nCreates a shaped array slice that initializes every element to the same value.\ninit(identityMatrixOfSize: Int)\nCreates a shaped array slice that’s an identity matrix of integers.\nAvailable when Scalar conforms to FixedWidthInteger.\ninit(randomScalarsIn: Range<Scalar>, shape: [Int])\nCreates a shaped array that initializes the elements to random integer values within a range.\nAvailable when Scalar conforms to FixedWidthInteger."
  },
  {
    "title": "elementsEqual(_:by:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarray/3763197-elementsequal",
    "html": "Parameters\nother\n\nA sequence to compare to this sequence.\n\nareEquivalent\n\nA predicate that returns true if its two arguments are equivalent; otherwise, false.\n\nReturn Value\n\ntrue if this sequence and other contain equivalent items, using areEquivalent as the equivalence test; otherwise, false.\n\nDiscussion\n\nAt least one of the sequences must be finite.\n\nThe predicate must be a equivalence relation over the elements. That is, for any elements a, b, and c, the following conditions must hold:\n\nComplexity: O(m), where m is the lesser of the length of the sequence and the length of other.\n\nareEquivalent(a, a) is always true. (Reflexivity)\n\nareEquivalent(a, b) implies areEquivalent(b, a). (Symmetry)\n\nIf areEquivalent(a, b) and areEquivalent(b, c) are both true, then areEquivalent(a, c) is also true. (Transitivity)\n\nSee Also\nComparing Shaped Arrays\nfunc compare<Comparator>(Comparator.Compared, Comparator.Compared) -> ComparisonResult\nReturns a comparison result by comparing two shaped array slices.\nfunc difference<C>(from: C, by: (C.Element, MLShapedArraySlice<Scalar>) -> Bool) -> CollectionDifference<MLShapedArraySlice<Scalar>>\nReturns the difference needed to produce this collection’s ordered elements from the given collection, using the given predicate as an equivalence test.\nfunc difference<C>(from: C) -> CollectionDifference<MLShapedArraySlice<Scalar>>\nReturns the difference needed to produce this collection’s ordered elements from the given collection.\nfunc elementsEqual<OtherSequence>(OtherSequence) -> Bool\nReturns a Boolean value indicating whether this sequence and another sequence contain the same elements in the same order.\nfunc starts<PossiblePrefix>(with: PossiblePrefix, by: (MLShapedArraySlice<Scalar>, PossiblePrefix.Element) -> Bool) -> Bool\nReturns a Boolean value indicating whether the initial elements of the sequence are equivalent to the elements in another sequence, using the given predicate as the equivalence test.\nfunc lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (MLShapedArraySlice<Scalar>, MLShapedArraySlice<Scalar>) -> Bool) -> Bool\nReturns a Boolean value indicating whether the sequence precedes another sequence in a lexicographical (dictionary) ordering, using the given predicate to compare elements."
  },
  {
    "title": "starts(with:by:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarray/3763316-starts",
    "html": "Parameters\npossiblePrefix\n\nA sequence to compare to this sequence.\n\nareEquivalent\n\nA predicate that returns true if its two arguments are equivalent; otherwise, false.\n\nReturn Value\n\ntrue if the initial elements of the sequence are equivalent to the elements of possiblePrefix; otherwise, false. If possiblePrefix has no elements, the return value is true.\n\nDiscussion\n\nThe predicate must be a equivalence relation over the elements. That is, for any elements a, b, and c, the following conditions must hold:\n\nComplexity: O(m), where m is the lesser of the length of the sequence and the length of possiblePrefix.\n\nareEquivalent(a, a) is always true. (Reflexivity)\n\nareEquivalent(a, b) implies areEquivalent(b, a). (Symmetry)\n\nIf areEquivalent(a, b) and areEquivalent(b, c) are both true, then areEquivalent(a, c) is also true. (Transitivity)\n\nSee Also\nComparing Shaped Arrays\nfunc compare<Comparator>(Comparator.Compared, Comparator.Compared) -> ComparisonResult\nReturns a comparison result by comparing two shaped array slices.\nfunc difference<C>(from: C, by: (C.Element, MLShapedArraySlice<Scalar>) -> Bool) -> CollectionDifference<MLShapedArraySlice<Scalar>>\nReturns the difference needed to produce this collection’s ordered elements from the given collection, using the given predicate as an equivalence test.\nfunc difference<C>(from: C) -> CollectionDifference<MLShapedArraySlice<Scalar>>\nReturns the difference needed to produce this collection’s ordered elements from the given collection.\nfunc elementsEqual<OtherSequence>(OtherSequence, by: (MLShapedArraySlice<Scalar>, OtherSequence.Element) -> Bool) -> Bool\nReturns a Boolean value indicating whether this sequence and another sequence contain equivalent elements in the same order, using the given predicate as the equivalence test.\nfunc elementsEqual<OtherSequence>(OtherSequence) -> Bool\nReturns a Boolean value indicating whether this sequence and another sequence contain the same elements in the same order.\nfunc lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (MLShapedArraySlice<Scalar>, MLShapedArraySlice<Scalar>) -> Bool) -> Bool\nReturns a Boolean value indicating whether the sequence precedes another sequence in a lexicographical (dictionary) ordering, using the given predicate to compare elements."
  },
  {
    "title": "elementsEqual(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarray/4135007-elementsequal",
    "html": "Parameters\nother\n\nA sequence to compare to this sequence.\n\nReturn Value\n\ntrue if this sequence and other contain the same elements in the same order.\n\nDiscussion\n\nAt least one of the sequences must be finite.\n\nThis example tests whether one countable range shares the same elements as another countable range and an array.\n\nlet a = 1...3\nlet b = 1...10\n\n\nprint(a.elementsEqual(b))\n// Prints \"false\"\nprint(a.elementsEqual([1, 2, 3]))\n// Prints \"true\"\n\n\nComplexity: O(m), where m is the lesser of the length of the sequence and the length of other.\n\nSee Also\nComparing Shaped Arrays\nfunc compare<Comparator>(Comparator.Compared, Comparator.Compared) -> ComparisonResult\nReturns a comparison result by comparing two shaped array slices.\nfunc difference<C>(from: C, by: (C.Element, MLShapedArraySlice<Scalar>) -> Bool) -> CollectionDifference<MLShapedArraySlice<Scalar>>\nReturns the difference needed to produce this collection’s ordered elements from the given collection, using the given predicate as an equivalence test.\nfunc difference<C>(from: C) -> CollectionDifference<MLShapedArraySlice<Scalar>>\nReturns the difference needed to produce this collection’s ordered elements from the given collection.\nfunc elementsEqual<OtherSequence>(OtherSequence, by: (MLShapedArraySlice<Scalar>, OtherSequence.Element) -> Bool) -> Bool\nReturns a Boolean value indicating whether this sequence and another sequence contain equivalent elements in the same order, using the given predicate as the equivalence test.\nfunc starts<PossiblePrefix>(with: PossiblePrefix, by: (MLShapedArraySlice<Scalar>, PossiblePrefix.Element) -> Bool) -> Bool\nReturns a Boolean value indicating whether the initial elements of the sequence are equivalent to the elements in another sequence, using the given predicate as the equivalence test.\nfunc lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (MLShapedArraySlice<Scalar>, MLShapedArraySlice<Scalar>) -> Bool) -> Bool\nReturns a Boolean value indicating whether the sequence precedes another sequence in a lexicographical (dictionary) ordering, using the given predicate to compare elements."
  },
  {
    "title": "difference(from:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarray/4135006-difference",
    "html": "Parameters\nother\n\nThe base state.\n\nReturn Value\n\nThe difference needed to produce this collection’s ordered elements from the given collection.\n\nDiscussion\n\nThis function does not infer element moves. If you need to infer moves, call the inferringMoves() method on the resulting difference.\n\nComplexity: Worst case performance is O(n * m), where n is the count of this collection and m is other.count. You can expect faster execution when the collections share many common elements, or if Element conforms to Hashable.\n\nSee Also\nComparing Shaped Arrays\nfunc compare<Comparator>(Comparator.Compared, Comparator.Compared) -> ComparisonResult\nReturns a comparison result by comparing two shaped array slices.\nfunc difference<C>(from: C, by: (C.Element, MLShapedArraySlice<Scalar>) -> Bool) -> CollectionDifference<MLShapedArraySlice<Scalar>>\nReturns the difference needed to produce this collection’s ordered elements from the given collection, using the given predicate as an equivalence test.\nfunc elementsEqual<OtherSequence>(OtherSequence, by: (MLShapedArraySlice<Scalar>, OtherSequence.Element) -> Bool) -> Bool\nReturns a Boolean value indicating whether this sequence and another sequence contain equivalent elements in the same order, using the given predicate as the equivalence test.\nfunc elementsEqual<OtherSequence>(OtherSequence) -> Bool\nReturns a Boolean value indicating whether this sequence and another sequence contain the same elements in the same order.\nfunc starts<PossiblePrefix>(with: PossiblePrefix, by: (MLShapedArraySlice<Scalar>, PossiblePrefix.Element) -> Bool) -> Bool\nReturns a Boolean value indicating whether the initial elements of the sequence are equivalent to the elements in another sequence, using the given predicate as the equivalence test.\nfunc lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (MLShapedArraySlice<Scalar>, MLShapedArraySlice<Scalar>) -> Bool) -> Bool\nReturns a Boolean value indicating whether the sequence precedes another sequence in a lexicographical (dictionary) ordering, using the given predicate to compare elements."
  },
  {
    "title": "init(randomScalarsIn:shape:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarrayslice/3763450-init",
    "html": "Parameters\nrange\n\nA range of integer values.\n\nshape\n\nAn integer array. Each element represents the size of the shaped array’s corresponding dimension.\n\nSee Also\nCreating a Shaped Array Slice\ninit(scalar: Scalar)\nCreates a shaped array slice with exactly one value and zero dimensions.\ninit(arrayLiteral: Scalar...)\nCreates a shaped array slice from a list of values.\ninit<S>(scalars: S, shape: [Int])\nCreates a shaped array slice from an array of values.\ninit(repeating: Scalar, shape: [Int])\nCreates a shaped array slice that initializes every element to the same value.\ninit(identityMatrixOfSize: Int)\nCreates a shaped array slice that’s an identity matrix of integers.\nAvailable when Scalar conforms to FixedWidthInteger."
  },
  {
    "title": "init(converting:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarrayslice/3821248-init",
    "html": "Parameters\nsource\n\nAn instance with a type that conforms to MLShapedArrayProtocol.\n\nSee Also\nCreating a Shaped Array Slice from Another Type\ninit(MLMultiArray)\nCreates a shaped array slice from a multiarray.\ninit(converting: MLMultiArray)\nCreates a shaped array slice by converting a multiarray.\ninit<S>(concatenating: S, alongAxis: Int)\nMerges a sequence of shaped arrays into one shaped array along an axis."
  },
  {
    "title": "MLShapedArray.ArrayLiteralElement | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarray/arrayliteralelement",
    "html": "Relationships\nFrom Protocol\nExpressibleByArrayLiteral\nSee Also\nSupporting Types\ntypealias MLShapedArray.Element\nA type that defines the shaped array’s elements.\ntypealias MLShapedArray.Index\nA type that defines the shaped array’s indices.\ntypealias MLShapedArray.Indices\nA type that defines the shaped array’s index ranges.\ntypealias MLShapedArray.Iterator\nA type that defines the shaped array’s iterator.\ntypealias MLShapedArray.SubSequence\nA type that defines the shaped array’s slices.\nShaped Array Collection Operations"
  },
  {
    "title": "subscript(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarrayprotocol/3763378-subscript",
    "html": "See Also\nMLShapedArrayProtocol Implementations\nsubscript(MLShapedArrayRangeExpression) -> MLShapedArraySlice<Self.Scalar>\nsubscript(MLShapedArrayRangeExpression...) -> MLShapedArraySlice<Self.Scalar>\nsubscript(Int) -> MLShapedArraySlice<Self.Scalar>\nsubscript(Int...) -> MLShapedArraySlice<Self.Scalar>\nsubscript(Range<Int>) -> MLShapedArraySlice<Self.Scalar>\nsubscript<C>(C) -> MLShapedArraySlice<Self.Scalar>"
  },
  {
    "title": "subscript(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarray/3763325-subscript",
    "html": "Parameters\npartialSliceRanges\n\nA collection of range expressions in which each element is a range in the corresponding dimension.\n\nSee Also\nAccessing a Slice from Multiple Dimensions\nsubscript(Int...) -> MLShapedArraySlice<Scalar>\nAccesses a slice using a list of integers, in which each element is an index in the corresponding dimension.\nsubscript<C>(C) -> MLShapedArraySlice<Scalar>\nAccesses a slice using a collection of integers, in which each element is an index in the corresponding dimension.\nsubscript<C>(C) -> MLShapedArraySlice<Scalar>\nAccesses a slice using a collection of integer ranges, in which each element is a range in the corresponding dimension.\nsubscript(MLShapedArrayRangeExpression...) -> MLShapedArraySlice<Scalar>\nAccesses a slice using a list of range expressions, in which each element is a range in the corresponding dimension."
  },
  {
    "title": "init(identityMatrixOfSize:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarray/3763236-init",
    "html": "Parameters\nsize\n\nThe size of the identity matrix. For example, a size of 5 creates a 5x5 identity matrix.\n\nSee Also\nCreating a Shaped Array\ninit(scalar: Scalar)\nCreates a shaped array with exactly one value and zero dimensions.\ninit(arrayLiteral: Scalar...)\nCreates a shaped array from a list of values.\ninit<S>(scalars: S, shape: [Int])\nCreates a shaped array from an array of values.\ninit(repeating: Scalar, shape: [Int])\nCreates a shaped array that initializes every element to the same value.\ninit(randomScalarsIn: Range<Scalar>, shape: [Int])\nCreates a shaped array that initializes the elements to random integer values within a range.\nAvailable when Scalar conforms to FixedWidthInteger."
  },
  {
    "title": "MLModelError.Code.customModel | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlmodelerror/code/custommodel",
    "html": "Discussion\n\nCore ML typically throws this error when the custom model has a programming mistake. For example, a custom model’s prediction method fails with this error code if Core ML can’t find the custom model’s implementation.\n\nSee Also\nError Codes\ncase featureType\nAn error code for problems related to model features.\ncase parameters\nAn error code for problems related to model parameters.\ncase modelCollection\nAn error code for problems related to retrieving a model collection from the deployment system.\ncase modelDecryptionKeyFetch\nAn error code for problems related to retrieving a model’s decryption key.\ncase modelDecryption\nAn error code for problems related to decrypting models.\ncase update\nAn error code for problems related to on-device model updates.\ncase customLayer\nAn error code for problems related to custom layers.\ncase io\nAn error code for problems related to the system’s input or output.\ncase predictionCancelled\nAn error code for problems related to canceling the prediction before it completes.\ncase generic\nAn error code for runtime issues that don’t apply to the other error codes."
  },
  {
    "title": "init(concatenating:alongAxis:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarrayslice/3763446-init",
    "html": "Parameters\nshapedArrays\n\nA sequence of shaped arrays.\n\nalongAxis\n\nA zero-based axis number the shaped arrays in multiArray merge along.\n\nTip\n\nSelect the shaped array’s highest dimension by passing a negative axis number. For example, an axis value of -1 or -2 selects the last or second-to-last dimension, respectively.\n\nDiscussion\n\nAll shaped arrays in the sequence must have the following:\n\nThe same underlying data type\n\nThe same number of dimensions\n\nThe same size for each corresponding dimension, except for the concatenation axis\n\nFor example, this code concatenates two shaped arrays along their second dimension:\n\n// A 2x3 shaped array.\n// 0 1 2\n// 5 6 7\nlet shapedArray1 = MLShapedArray<Int32>(scalars: [0, 1, 2, 5, 6, 7],\n                                        shape: [2, 3])\n\n\n// A 2x2 shaped array.\n// 3 4\n// 8 9\nlet shapedArray2 = MLShapedArray<Int32>(scalars: [3, 4, 8, 9],\n                                        shape: [2, 2])\n\n\n// A 2x5 shaped array.\n// 0 1 2 3 4\n// 5 6 7 8 9\nlet shapedArray3 = MLShapedArray(concatenating: [shapedArray1,shapedArray2],\n                                 alongAxis: 1)\n\n\nSee Also\nCreating a Shaped Array Slice from Another Type\ninit(MLMultiArray)\nCreates a shaped array slice from a multiarray.\ninit(converting: MLMultiArray)\nCreates a shaped array slice by converting a multiarray.\ninit<T>(converting: T)\nCreates a shaped array slice by converting another shaped array type."
  },
  {
    "title": "init(bytesNoCopy:shape:deallocator:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarrayslice/3763444-init",
    "html": "Parameters\nbytes\n\nAn unsafe raw pointer to the data.\n\nshape\n\nAn integer array. Each element represents the size of the shaped array’s corresponding dimension.\n\ndeallocator\n\nA Data.Deallocator.\n\nSee Also\nCreating a Shaped Array Slice with Pointers to Memory\ninit(bytesNoCopy: UnsafeRawPointer, shape: [Int], strides: [Int], deallocator: Data.Deallocator)\nCreates a shaped array slice from a data pointer with memory strides.\ninit(unsafeUninitializedShape: [Int], initializingWith: (inout UnsafeMutableBufferPointer<Scalar>, [Int]) -> Void)\nCreates a shaped array slice from a shape and a closure that initializes its memory."
  },
  {
    "title": "isEmpty | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarrayslice/3763455-isempty",
    "html": "Discussion\n\nWhen you need to check whether your collection is empty, use the isEmpty property instead of checking that the count property is equal to zero. For collections that don’t conform to RandomAccessCollection, accessing the count property iterates through the elements of the collection.\n\nlet horseName = \"Silver\"\nif horseName.isEmpty {\n    print(\"My horse has no name.\")\n} else {\n    print(\"Hi ho, \\(horseName)!\")\n}\n// Prints \"Hi ho, Silver!\")\n\n\nComplexity: O(1)\n\nSee Also\nInspecting a Shaped Array Slice\nvar isScalar: Bool\nA Boolean value that indicates whether the shaped array slice has zero dimensions.\nlet shape: [Int]\nAn integer array in which each element represents the size of the corresponding dimension.\nvar strides: [Int]\nAn integer array in which each element is the number of memory locations that spans the length of the corresponding dimension.\nvar scalarCount: Int\nThe total number of elements in the shaped array slice.\nvar count: Int\nThe number of elements in the collection.\nvar underestimatedCount: Int\nA value less than or equal to the number of elements in the collection."
  },
  {
    "title": "scalarCount | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarrayslice/3763511-scalarcount",
    "html": "See Also\nInspecting a Shaped Array Slice\nvar isScalar: Bool\nA Boolean value that indicates whether the shaped array slice has zero dimensions.\nlet shape: [Int]\nAn integer array in which each element represents the size of the corresponding dimension.\nvar strides: [Int]\nAn integer array in which each element is the number of memory locations that spans the length of the corresponding dimension.\nvar isEmpty: Bool\nA Boolean value indicating whether the collection is empty.\nvar count: Int\nThe number of elements in the collection.\nvar underestimatedCount: Int\nA value less than or equal to the number of elements in the collection."
  },
  {
    "title": "count | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarrayslice/3763403-count",
    "html": "Discussion\n\nTo check whether a collection is empty, use its isEmpty property instead of comparing count to zero. Unless the collection guarantees random-access performance, calculating count can be an O(n) operation.\n\nComplexity: O(1) if the collection conforms to RandomAccessCollection; otherwise, O(n), where n is the length of the collection.\n\nSee Also\nInspecting a Shaped Array Slice\nvar isScalar: Bool\nA Boolean value that indicates whether the shaped array slice has zero dimensions.\nlet shape: [Int]\nAn integer array in which each element represents the size of the corresponding dimension.\nvar strides: [Int]\nAn integer array in which each element is the number of memory locations that spans the length of the corresponding dimension.\nvar isEmpty: Bool\nA Boolean value indicating whether the collection is empty.\nvar scalarCount: Int\nThe total number of elements in the shaped array slice.\nvar underestimatedCount: Int\nA value less than or equal to the number of elements in the collection."
  },
  {
    "title": "underestimatedCount | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarrayslice/3763562-underestimatedcount",
    "html": "Discussion\n\nComplexity: O(1) if the collection conforms to RandomAccessCollection; otherwise, O(n), where n is the length of the collection.\n\nSee Also\nInspecting a Shaped Array Slice\nvar isScalar: Bool\nA Boolean value that indicates whether the shaped array slice has zero dimensions.\nlet shape: [Int]\nAn integer array in which each element represents the size of the corresponding dimension.\nvar strides: [Int]\nAn integer array in which each element is the number of memory locations that spans the length of the corresponding dimension.\nvar isEmpty: Bool\nA Boolean value indicating whether the collection is empty.\nvar scalarCount: Int\nThe total number of elements in the shaped array slice.\nvar count: Int\nThe number of elements in the collection."
  },
  {
    "title": "MLImageSizeConstraint | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlimagesizeconstraint",
    "html": "Overview\n\nYou use an MLImageSizeConstraint to express what image sizes of an image feature a model will accept as input or produce as output.\n\nUse type to determine which properties describe what image sizes the model's image feature expects as input or produces as output.\n\nIf type is:\n\nMLImageSizeConstraintType.range, the image feature accepts any image that has a width in pixelsWideRange and a height in pixelsHighRange.\n\nMLImageSizeConstraintType.enumerated, the image feature accepts any image size listed in enumeratedImageSizes.\n\nMLImageSizeConstraintType.unspecified, the MLImageSizeConstraint instance is not configured and should be ignored. Instead, use the image feature's default image size constraint, defined by pixelsWide and pixelsHigh.\n\nFigure 1 An example of an image size that meets a range-based constraint\n\nTopics\nDetermining Relevant Constraints\nvar type: MLImageSizeConstraintType\nIndicator of which properties to inspect for this image size constraint.\nenum MLImageSizeConstraintType\nThe modes that determine how the model defines a feature's image size constraint.\nAccessing the Image Size Ranges\nvar pixelsWideRange: NSRange\nThe range of widths a model's image feature accepts as input or produces as output.\nvar pixelsHighRange: NSRange\nThe range of heights a model's image feature accepts as input or produces as output.\nAccessing the Enumerated Image Sizes\nvar enumeratedImageSizes: [MLImageSize]\nAn array of image sizes a model's image feature accepts as input or produces as output.\nclass MLImageSize\nThe width and height of an image feature size.\nRelationships\nInherits From\nNSObject\nConforms To\nNSSecureCoding\nSee Also\nInspecting Acceptable Sizes\nvar sizeConstraint: MLImageSizeConstraint\nAdditional sizes this image feature supports."
  },
  {
    "title": "MLMultiArrayShapeConstraint | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlmultiarrayshapeconstraint",
    "html": "Topics\nAccessing the Constraints\nvar enumeratedShapes: [[NSNumber]]\nArray of allowed shapes for a multiarray feature.\nvar sizeRangeForDimension: [NSValue]\nThe allowable range for a dimention of the multiarray.\nvar type: MLMultiArrayShapeConstraintType\nThe type of the shape constraint.\nenum MLMultiArrayShapeConstraintType\nThe possible types of shape constraints.\nRelationships\nInherits From\nNSObject\nConforms To\nNSSecureCoding\nSee Also\nAccessing the Constraints\nvar shape: [NSNumber]\nThe shape of the multi array.\nvar dataType: MLMultiArrayDataType\nThe type for the multi array.\nvar shapeConstraint: MLMultiArrayShapeConstraint\nThe constraint on the shape of the multiarray."
  },
  {
    "title": "dataType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlmultiarrayconstraint/2921278-datatype",
    "html": "See Also\nAccessing the Constraints\nvar shape: [NSNumber]\nThe shape of the multi array.\nvar shapeConstraint: MLMultiArrayShapeConstraint\nThe constraint on the shape of the multiarray.\nclass MLMultiArrayShapeConstraint\nThe lists of shapes or ranges of shapes that constrain a multiarray feature."
  },
  {
    "title": "sizeConstraint | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlimageconstraint/2994299-sizeconstraint",
    "html": "See Also\nInspecting Acceptable Sizes\nclass MLImageSizeConstraint\nA list or range of sizes that augment an image constraint's default size."
  },
  {
    "title": "MLMultiArrayDataType.double | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlmultiarraydatatype/double",
    "html": "See Also\nMultiarray Data Types\ncase int32\nDesignates the multiarray’s elements as 32-bit integers.\ncase float16\nDesignates the multiarray’s elements as 16-bit floats.\ncase float32\nDesignates the multiarray’s elements as 32-bit floats.\nstatic var float: MLMultiArrayDataType\nDesignates the multiarray’s elements as floats.\nstatic var float64: MLMultiArrayDataType\nDesignates the multiarray’s elements as 64-bit floats."
  },
  {
    "title": "MLComputeUnits.cpuAndGPU | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlcomputeunits/cpuandgpu",
    "html": "See Also\nProcessing Unit Configurations\ncase all\nThe option you choose to allow the model to use all compute units available, including the neural engine.\ncase cpuOnly\nThe option you choose to limit the model to only use the CPU.\ncase cpuAndNeuralEngine\nThe option you choose to allow the model to use both the CPU and neural engine, but not the GPU."
  },
  {
    "title": "MLComputeUnits.all | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlcomputeunits/all",
    "html": "See Also\nProcessing Unit Configurations\ncase cpuOnly\nThe option you choose to limit the model to only use the CPU.\ncase cpuAndGPU\nThe option you choose to allow the model to use both the CPU and GPU, but not the neural engine.\ncase cpuAndNeuralEngine\nThe option you choose to allow the model to use both the CPU and neural engine, but not the GPU."
  },
  {
    "title": "MLComputeUnits.cpuOnly | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlcomputeunits/cpuonly",
    "html": "See Also\nProcessing Unit Configurations\ncase all\nThe option you choose to allow the model to use all compute units available, including the neural engine.\ncase cpuAndGPU\nThe option you choose to allow the model to use both the CPU and GPU, but not the neural engine.\ncase cpuAndNeuralEngine\nThe option you choose to allow the model to use both the CPU and neural engine, but not the GPU."
  },
  {
    "title": "MLTaskState.completed | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mltaskstate/completed",
    "html": "See Also\nFinal States\ncase failed\nThe state of a machine learning task that has terminated due to an error."
  },
  {
    "title": "MLComputeUnits.cpuAndNeuralEngine | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlcomputeunits/cpuandneuralengine",
    "html": "See Also\nProcessing Unit Configurations\ncase all\nThe option you choose to allow the model to use all compute units available, including the neural engine.\ncase cpuOnly\nThe option you choose to limit the model to only use the CPU.\ncase cpuAndGPU\nThe option you choose to allow the model to use both the CPU and GPU, but not the neural engine."
  },
  {
    "title": "MLTaskState.cancelling | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mltaskstate/cancelling",
    "html": "See Also\nTransient States\ncase running\nThe state of a machine learning task that’s executing.\ncase suspended\nThe state of a machine learning task that’s paused."
  },
  {
    "title": "MLTaskState.running | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mltaskstate/running",
    "html": "See Also\nTransient States\ncase suspended\nThe state of a machine learning task that’s paused.\ncase cancelling\nThe state of a machine learning task that’s in mid-termination, before it could finish successfully."
  },
  {
    "title": "int64Values | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlsequence/2962871-int64values",
    "html": "Discussion\n\nOnly use this property when the sequence’s type is MLFeatureType.int64.\n\nSee Also\nRetrieving the Sequence’s Values\nvar stringValues: [String]\nAn array of strings in the sequence."
  },
  {
    "title": "init(int64s:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlsequence/2962872-init",
    "html": "Parameters\nint64Values\n\nAn array of integer values represented as NSNumber instances.\n\nSee Also\nCreating a Sequence\ninit(strings: [String])\nCreates a sequence of strings from a string array.\ninit(empty: MLFeatureType)\nCreates an empty sequence of strings or integers."
  },
  {
    "title": "init(empty:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlsequence/2962870-init",
    "html": "Parameters\ntype\n\nAn MLFeatureType instance that determines the sequence’s element type, which must be either MLFeatureType.string or MLFeatureType.int64.\n\nSee Also\nCreating a Sequence\ninit(strings: [String])\nCreates a sequence of strings from a string array.\ninit(int64s: [NSNumber])\nCreates a sequence of integers from an array of numbers."
  },
  {
    "title": "type | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlsequence/2962875-type",
    "html": "Discussion\n\nThe sequence’s underlying element type can only be either MLFeatureType.string or MLFeatureType.int64. Use this value to determine whether to access stringValues or int64Values at runtime."
  },
  {
    "title": "MLNumericConstraint | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlnumericconstraint",
    "html": "Topics\nNumeric Constraints\nvar minNumber: NSNumber\nThe smallest numerical value allowed by this constraint.\nvar maxNumber: NSNumber\nThe largest numerical value allowed by this constraint.\nvar enumeratedNumbers: Set<NSNumber>?\nA set of the numbers allowed in this constraint.\nRelationships\nInherits From\nNSObject\nConforms To\nNSSecureCoding\nSee Also\nConstraining Numeric Values\nvar numericConstraint: MLNumericConstraint?\nThe constraints of this paramter description value, if and only if the value is numerical."
  },
  {
    "title": "numericConstraint | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlparameterdescription/3180070-numericconstraint",
    "html": "See Also\nConstraining Numeric Values\nclass MLNumericConstraint\nThe value limitations of a number."
  },
  {
    "title": "defaultValue | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlparameterdescription/3180068-defaultvalue",
    "html": "See Also\nDescribing the Model Parameter\nvar key: MLParameterKey\nThe key for this parameter description value."
  },
  {
    "title": "MLModelError.Code.parameters | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlmodelerror/code/parameters",
    "html": "Discussion\n\nCore ML typically throws this error when an app queries the model for a parameter it doesn’t support.\n\nSee Also\nError Codes\ncase featureType\nAn error code for problems related to model features.\ncase modelCollection\nAn error code for problems related to retrieving a model collection from the deployment system.\ncase modelDecryptionKeyFetch\nAn error code for problems related to retrieving a model’s decryption key.\ncase modelDecryption\nAn error code for problems related to decrypting models.\ncase update\nAn error code for problems related to on-device model updates.\ncase customLayer\nAn error code for problems related to custom layers.\ncase customModel\nAn error code for problems related to custom models.\ncase io\nAn error code for problems related to the system’s input or output.\ncase predictionCancelled\nAn error code for problems related to canceling the prediction before it completes.\ncase generic\nAn error code for runtime issues that don’t apply to the other error codes."
  },
  {
    "title": "MLModelError.Code.modelCollection | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlmodelerror/code/modelcollection",
    "html": "Discussion\n\nCore ML typically throws this error when the device doesn’t have access to the network.\n\nSee Also\nError Codes\ncase featureType\nAn error code for problems related to model features.\ncase parameters\nAn error code for problems related to model parameters.\ncase modelDecryptionKeyFetch\nAn error code for problems related to retrieving a model’s decryption key.\ncase modelDecryption\nAn error code for problems related to decrypting models.\ncase update\nAn error code for problems related to on-device model updates.\ncase customLayer\nAn error code for problems related to custom layers.\ncase customModel\nAn error code for problems related to custom models.\ncase io\nAn error code for problems related to the system’s input or output.\ncase predictionCancelled\nAn error code for problems related to canceling the prediction before it completes.\ncase generic\nAn error code for runtime issues that don’t apply to the other error codes."
  },
  {
    "title": "Shaped Array Slice Collection Operations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarrayslice/shaped_array_slice_collection_operations",
    "html": "Overview\n\nProperties and methods a shaped array slice inherits from collection protocols.\n\nTopics\nInspecting a Shaped Array’s Scalars\nvar first: MLShapedArraySlice<Scalar>?\nThe first element of the collection.\nvar last: MLShapedArraySlice<Scalar>?\nThe last element of the collection.\nvar publisher: Publishers.Sequence<MLShapedArraySlice<Scalar>, Never>\nA publisher that produces the element in the shaped array slice as separate values.\nvar lazy: LazySequence<MLShapedArraySlice<Scalar>>\nA sequence containing the same elements as this sequence, but on which some operations, such as map and filter, are implemented lazily.\nInspecting a Slice of a Shaped Array Slice\nfunc allSatisfy((MLShapedArraySlice<Scalar>) -> Bool) -> Bool\nReturns a Boolean value indicating whether every element of a sequence satisfies a given predicate.\nfunc contains(where: (MLShapedArraySlice<Scalar>) -> Bool) -> Bool\nReturns a Boolean value indicating whether the sequence contains an element that satisfies the given predicate.\nfunc contains(MLShapedArraySlice<Scalar>) -> Bool\nReturns a Boolean value indicating whether the sequence contains the given element.\nfunc contains<C>(C) -> Bool\nReturns a Boolean value indicating whether the collection contains the given sequence.\nsubscript<R>(R) -> MLShapedArraySlice<Scalar>\nAccesses the contiguous subrange of the collection’s elements specified by a range expression.\nfunc makeIterator() -> IndexingIterator<MLShapedArraySlice<Scalar>>\nReturns an iterator over the elements of the collection.\nfunc forEach((MLShapedArraySlice<Scalar>) -> Void)\nCalls the given closure on each element in the sequence in the same order as a for-in loop.\nfunc enumerated() -> EnumeratedSequence<MLShapedArraySlice<Scalar>>\nReturns a sequence of pairs (n, x), where n represents a consecutive integer starting at zero and x represents an element of the sequence.\nfunc randomElement() -> MLShapedArraySlice<Scalar>?\nReturns a random element of the collection.\nfunc randomElement<T>(using: inout T) -> MLShapedArraySlice<Scalar>?\nReturns a random element of the collection, using the given generator as a source for randomness.\nfunc withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<MLShapedArraySlice<Scalar>>) -> R) -> R?\nExecutes a closure on the sequence’s contiguous storage.\nComparing Shaped Array Slices\nfunc compare<Comparator>(Comparator.Compared, Comparator.Compared) -> ComparisonResult\nReturns a comparison result by comparing two shaped array slices.\nfunc difference<C>(from: C, by: (C.Element, MLShapedArraySlice<Scalar>) -> Bool) -> CollectionDifference<MLShapedArraySlice<Scalar>>\nReturns the difference needed to produce this collection’s ordered elements from the given collection, using the given predicate as an equivalence test.\nfunc difference<C>(from: C) -> CollectionDifference<MLShapedArraySlice<Scalar>>\nReturns the difference needed to produce this collection’s ordered elements from the given collection.\nfunc elementsEqual<OtherSequence>(OtherSequence, by: (MLShapedArraySlice<Scalar>, OtherSequence.Element) -> Bool) -> Bool\nReturns a Boolean value indicating whether this sequence and another sequence contain equivalent elements in the same order, using the given predicate as the equivalence test.\nfunc elementsEqual<OtherSequence>(OtherSequence) -> Bool\nReturns a Boolean value indicating whether this sequence and another sequence contain the same elements in the same order.\nfunc starts<PossiblePrefix>(with: PossiblePrefix, by: (MLShapedArraySlice<Scalar>, PossiblePrefix.Element) -> Bool) -> Bool\nReturns a Boolean value indicating whether the initial elements of the sequence are equivalent to the elements in another sequence, using the given predicate as the equivalence test.\nfunc lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (MLShapedArraySlice<Scalar>, MLShapedArraySlice<Scalar>) -> Bool) -> Bool\nReturns a Boolean value indicating whether the sequence precedes another sequence in a lexicographical (dictionary) ordering, using the given predicate to compare elements.\nFinding an Index in a Shaped Array Slice\nvar startIndex: Int\nThe index of the first element in the shaped array slice.\nvar endIndex: Int\nThe index of the last element in the shaped array slice.\nfunc index(after: Int) -> Int\nReturns the index immediately after an index you provide.\nfunc index(Int, offsetBy: Int) -> Int\nReturns the index at a relative distance to an index you provide.\nfunc index(Int, offsetBy: Int, limitedBy: Int) -> Int?\nReturns an index that is the specified distance from the given index, unless that distance is beyond a given limiting index.\nfunc index(of: MLShapedArraySlice<Scalar>) -> Int?\nReturns the first index where the specified value appears in the collection.\nDeprecated\nfunc formIndex(before: inout Int)\nReplaces the given index with its predecessor.\nfunc formIndex(after: inout Int)\nReplaces the given index with its successor.\nfunc formIndex(inout Int, offsetBy: Int)\nOffsets the given index by the specified distance.\nfunc formIndex(inout Int, offsetBy: Int, limitedBy: Int) -> Bool\nOffsets the given index by the specified distance, or so that it equals the given limiting index.\nfunc firstIndex(where: (MLShapedArraySlice<Scalar>) -> Bool) -> Int?\nReturns the first index in which an element of the collection satisfies the given predicate.\nfunc firstIndex(of: MLShapedArraySlice<Scalar>) -> Int?\nReturns the first index where the specified value appears in the collection.\nfunc firstRange<C>(of: C) -> Range<Int>?\nFinds and returns the range of the first occurrence of a given collection within this collection.\nfunc lastIndex(where: (MLShapedArraySlice<Scalar>) -> Bool) -> Int?\nReturns the index of the last element in the collection that matches the given predicate.\nfunc lastIndex(of: MLShapedArraySlice<Scalar>) -> Int?\nReturns the last index where the specified value appears in the collection.\nfunc ranges<C>(of: C) -> [Range<Int>]\nFinds and returns the ranges of the all occurrences of a given sequence within the collection.\nfunc starts<PossiblePrefix>(with: PossiblePrefix) -> Bool\nReturns a Boolean value indicating whether the initial elements of the sequence are the same as the elements in another sequence.\nModifying a Shaped Array Slice\nsubscript(Range<Int>) -> MLShapedArraySlice<Scalar>\nAccesses a slice with a range in the shaped array’s first dimension.\nfunc swapAt(Int, Int)\nExchanges the values at the specified indices of the collection.\nfunc partition(by: (MLShapedArraySlice<Scalar>) -> Bool) -> Int\nReorders the elements of the collection such that all the elements that match the given predicate are after all the elements that don’t match.\nfunc sort<Comparator>(using: Comparator)\nReorders a shaped array slice by sorting its slices with a comparator.\nfunc sort<S, Comparator>(using: S)\nReorders a shaped array slice by sorting its slices with a sequence of comparators.\nfunc sort(by: (MLShapedArraySlice<Scalar>, MLShapedArraySlice<Scalar>) -> Bool)\nSorts the collection in place, using the given predicate as the comparison between elements.\nfunc popFirst() -> MLShapedArraySlice<Scalar>?\nRemoves and returns the first element of the collection.\nfunc popLast() -> MLShapedArraySlice<Scalar>?\nRemoves and returns the last element of the collection.\nfunc removeFirst() -> MLShapedArraySlice<Scalar>\nRemoves and returns the first element of the collection.\nfunc removeLast() -> MLShapedArraySlice<Scalar>\nRemoves and returns the last element of the collection.\nfunc removeFirst(Int)\nRemoves the specified number of elements from the beginning of the collection.\nfunc removeLast(Int)\nRemoves the given number of elements from the end of the collection.\nfunc reverse()\nReverses the elements of the collection in place.\nfunc shuffle()\nShuffles the collection in place.\nfunc shuffle<T>(using: inout T)\nShuffles the collection in place, using the given generator as a source for randomness.\nfunc withContiguousMutableStorageIfAvailable<R>((inout UnsafeMutableBufferPointer<MLShapedArraySlice<Scalar>>) -> R) -> R?\nExecutes a closure on the collection’s contiguous storage.\nGenerating a Shaped Array Slice\nfunc first(where: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>?\nReturns the first element of the sequence that satisfies the given predicate.\nfunc last(where: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>?\nReturns the last element of the sequence that satisfies the given predicate.\nfunc dropFirst(Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence containing all but the given number of initial elements.\nfunc dropLast(Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence containing all but the specified number of final elements.\nfunc drop(while: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>\nReturns a subsequence by skipping elements while predicate returns true and returning the remaining elements.\nfunc joined() -> FlattenSequence<MLShapedArraySlice<Scalar>>\nReturns the elements of this sequence of sequences, concatenated.\nfunc joined<Separator>(separator: Separator) -> JoinedSequence<MLShapedArraySlice<Scalar>>\nReturns the concatenated elements of this sequence of sequences, inserting the given separator between each element.\nfunc min(by: (MLShapedArraySlice<Scalar>, MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>?\nReturns the minimum element in the sequence, using the given predicate as the comparison between elements.\nfunc max(by: (MLShapedArraySlice<Scalar>, MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>?\nReturns the maximum element in the sequence, using the given predicate as the comparison between elements.\nfunc prefix(Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence, up to the specified maximum length, containing the initial elements of the collection.\nfunc prefix(upTo: Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence from the start of the collection up to, but not including, the specified position.\nfunc prefix(through: Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence from the start of the collection through the specified position.\nfunc prefix(while: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>\nReturns a subsequence containing the initial elements until predicate returns false and skipping the remaining elements.\nfunc suffix(Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence, up to the given maximum length, containing the final elements of the collection.\nfunc suffix(from: Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence from the specified position to the end of the collection.\nfunc trimPrefix<Prefix>(Prefix)\nRemoves the initial elements that satisfy the given predicate from the start of the sequence.\nfunc trimPrefix(while: (MLShapedArraySlice<Scalar>) -> Bool)\nTrims the array slice using a predicate.\nfunc trimmingPrefix<Prefix>(Prefix) -> MLShapedArraySlice<Scalar>\nReturns a new collection of the same type by removing initial elements that satisfy the given predicate from the start.\nfunc trimmingPrefix(while: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>\nfunc reversed() -> ReversedCollection<MLShapedArraySlice<Scalar>>\nReturns a view presenting the elements of the collection in reverse order.\nfunc shuffled() -> [MLShapedArraySlice<Scalar>]\nReturns the elements of the sequence, shuffled.\nfunc shuffled<T>(using: inout T) -> [MLShapedArraySlice<Scalar>]\nReturns the elements of the sequence, shuffled using the given generator as a source for randomness.\nfunc sorted<Comparator>(using: Comparator) -> [MLShapedArraySlice<Scalar>]\nGenerates a copy of the shaped array slice by sorting its slices with a comparator.\nfunc sorted<S, Comparator>(using: S) -> [MLShapedArraySlice<Scalar>]\nGenerates a copy of the shaped array slice by sorting its slices with a sequence of comparators.\nfunc sorted(by: (MLShapedArraySlice<Scalar>, MLShapedArraySlice<Scalar>) -> Bool) -> [MLShapedArraySlice<Scalar>]\nReturns the elements of the sequence, sorted using the given predicate as the comparison between elements.\nfunc split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (MLShapedArraySlice<Scalar>) -> Bool) -> [MLShapedArraySlice<Scalar>]\nReturns the longest possible subsequences of the collection, in order, that don’t contain elements satisfying the given predicate.\nTransforming a Shaped Array Slice\nfunc map<T>((MLShapedArraySlice<Scalar>) -> T) -> [T]\nReturns an array containing the results of mapping the given closure over the sequence’s elements.\nfunc compactMap<ElementOfResult>((MLShapedArraySlice<Scalar>) -> ElementOfResult?) -> [ElementOfResult]\nReturns an array containing the non-nil results of calling the given transformation with each element of this sequence.\nfunc flatMap<SegmentOfResult>((MLShapedArraySlice<Scalar>) -> SegmentOfResult) -> [SegmentOfResult.Element]\nReturns an array containing the concatenated results of calling the given transformation with each element of this sequence.\nfunc flatMap<ElementOfResult>((MLShapedArraySlice<Scalar>) -> ElementOfResult?) -> [ElementOfResult]\nGenerates an array that concatenates the sequences from a transform closure that returns an optional.\nDeprecated\nfunc filter((MLShapedArraySlice<Scalar>) -> Bool) -> [MLShapedArraySlice<Scalar>]\nReturns an array containing, in order, the elements of the sequence that satisfy the given predicate.\nfunc filter(Predicate<MLShapedArraySlice<Scalar>>) -> [MLShapedArraySlice<Scalar>]\nfunc reduce<Result>(Result, (Result, MLShapedArraySlice<Scalar>) -> Result) -> Result\nReturns the result of combining the elements of the sequence using the given closure.\nfunc reduce<Result>(into: Result, (inout Result, MLShapedArraySlice<Scalar>) -> ()) -> Result\nReturns the result of combining the elements of the sequence using the given closure.\nfunc split(separator: MLShapedArraySlice<Scalar>, maxSplits: Int, omittingEmptySubsequences: Bool) -> [ArraySlice<MLShapedArraySlice<Scalar>>]\nReturns the longest possible subsequences of the sequence, in order, around elements equal to the given element.\nfunc split<C>(separator: C, maxSplits: Int, omittingEmptySubsequences: Bool) -> [MLShapedArraySlice<Scalar>]\nReturns the longest possible subsequences of the collection, in order, around elements equal to the given separator.\nfunc split(separator: MLShapedArraySlice<Scalar>, maxSplits: Int, omittingEmptySubsequences: Bool) -> [MLShapedArraySlice<Scalar>]\nReturns the longest possible subsequences of the collection, in order, around elements equal to the given element.\nFormatting a Shaped Array Slice\nfunc formatted<S>(S) -> S.FormatOutput\nGenerates a formatted output based on a style.\nSee Also\nSupporting Types\ntypealias MLShapedArraySlice.Element\nA type that defines the shaped array’s elements.\ntypealias MLShapedArraySlice.Index\nA type that defines the shaped array’s indices.\ntypealias MLShapedArraySlice.Indices\nA type that defines the shaped array’s index ranges.\ntypealias MLShapedArraySlice.Iterator\nA type that defines the shaped array’s iterator.\ntypealias MLShapedArraySlice.SubSequence\nA type that defines the shaped array’s slices.\ntypealias MLShapedArraySlice.ArrayLiteralElement\nA type that restricts the elements of an array literal that initializes the shaped array."
  },
  {
    "title": "MLShapedArraySlice.Indices | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarrayslice/indices",
    "html": "See Also\nSupporting Types\ntypealias MLShapedArraySlice.Element\nA type that defines the shaped array’s elements.\ntypealias MLShapedArraySlice.Index\nA type that defines the shaped array’s indices.\ntypealias MLShapedArraySlice.Iterator\nA type that defines the shaped array’s iterator.\ntypealias MLShapedArraySlice.SubSequence\nA type that defines the shaped array’s slices.\ntypealias MLShapedArraySlice.ArrayLiteralElement\nA type that restricts the elements of an array literal that initializes the shaped array.\nShaped Array Slice Collection Operations"
  },
  {
    "title": "subscript(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarrayprotocol/3763373-subscript",
    "html": "See Also\nMLShapedArrayProtocol Implementations\nsubscript(MLShapedArrayRangeExpression) -> MLShapedArraySlice<Self.Scalar>\nsubscript(Int) -> MLShapedArraySlice<Self.Scalar>\nsubscript(Int...) -> MLShapedArraySlice<Self.Scalar>\nsubscript(Range<Int>) -> MLShapedArraySlice<Self.Scalar>\nsubscript<C>(C) -> MLShapedArraySlice<Self.Scalar>\nsubscript((UnboundedRange_) -> Void) -> MLShapedArraySlice<Self.Scalar>"
  },
  {
    "title": "MLShapedArraySlice.ArrayLiteralElement | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarrayslice/arrayliteralelement",
    "html": "Relationships\nFrom Protocol\nExpressibleByArrayLiteral\nSee Also\nSupporting Types\ntypealias MLShapedArraySlice.Element\nA type that defines the shaped array’s elements.\ntypealias MLShapedArraySlice.Index\nA type that defines the shaped array’s indices.\ntypealias MLShapedArraySlice.Indices\nA type that defines the shaped array’s index ranges.\ntypealias MLShapedArraySlice.Iterator\nA type that defines the shaped array’s iterator.\ntypealias MLShapedArraySlice.SubSequence\nA type that defines the shaped array’s slices.\nShaped Array Slice Collection Operations"
  },
  {
    "title": "MLShapedArraySlice.Index | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarrayslice/index",
    "html": "See Also\nSupporting Types\ntypealias MLShapedArraySlice.Element\nA type that defines the shaped array’s elements.\ntypealias MLShapedArraySlice.Indices\nA type that defines the shaped array’s index ranges.\ntypealias MLShapedArraySlice.Iterator\nA type that defines the shaped array’s iterator.\ntypealias MLShapedArraySlice.SubSequence\nA type that defines the shaped array’s slices.\ntypealias MLShapedArraySlice.ArrayLiteralElement\nA type that restricts the elements of an array literal that initializes the shaped array.\nShaped Array Slice Collection Operations"
  },
  {
    "title": "MLShapedArraySlice.Iterator | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarrayslice/iterator",
    "html": "See Also\nSupporting Types\ntypealias MLShapedArraySlice.Element\nA type that defines the shaped array’s elements.\ntypealias MLShapedArraySlice.Index\nA type that defines the shaped array’s indices.\ntypealias MLShapedArraySlice.Indices\nA type that defines the shaped array’s index ranges.\ntypealias MLShapedArraySlice.SubSequence\nA type that defines the shaped array’s slices.\ntypealias MLShapedArraySlice.ArrayLiteralElement\nA type that restricts the elements of an array literal that initializes the shaped array.\nShaped Array Slice Collection Operations"
  },
  {
    "title": "MLShapedArraySlice.SubSequence | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarrayslice/subsequence",
    "html": "See Also\nSupporting Types\ntypealias MLShapedArraySlice.Element\nA type that defines the shaped array’s elements.\ntypealias MLShapedArraySlice.Index\nA type that defines the shaped array’s indices.\ntypealias MLShapedArraySlice.Indices\nA type that defines the shaped array’s index ranges.\ntypealias MLShapedArraySlice.Iterator\nA type that defines the shaped array’s iterator.\ntypealias MLShapedArraySlice.ArrayLiteralElement\nA type that restricts the elements of an array literal that initializes the shaped array.\nShaped Array Slice Collection Operations"
  },
  {
    "title": "subscript(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarrayslice/3763546-subscript",
    "html": "Parameters\nx\n\nAn unbounded range.\n\nSee Also\nAccessing a Slice from the First Dimension\nsubscript(Int) -> MLShapedArraySlice<Scalar>\nAccesses a slice at an index in the shaped array slice’s first dimension.\nsubscript<R>(R) -> MLShapedArraySlice<Scalar>\nAccesses a slice with an integer range expression in the shaped array slice’s first dimension.\nsubscript(MLShapedArrayRangeExpression) -> MLShapedArraySlice<Scalar>\nAccesses a slice with a shaped-array range expression in the shaped array slice’s first dimension.\nsubscript((UnboundedRange_) -> Void) -> MLShapedArraySlice<Scalar>\nAccesses a slice with an unbounded range in the shaped array slice’s first dimension."
  },
  {
    "title": "init(converting:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarrayslice/3821247-init",
    "html": "Parameters\nmultiArray\n\nAn MLMultiArray, potentially with a different underlying type as the shaped array.\n\nSee Also\nCreating a Shaped Array Slice from Another Type\ninit(MLMultiArray)\nCreates a shaped array slice from a multiarray.\ninit<T>(converting: T)\nCreates a shaped array slice by converting another shaped array type.\ninit<S>(concatenating: S, alongAxis: Int)\nMerges a sequence of shaped arrays into one shaped array along an axis."
  },
  {
    "title": "init(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarrayslice/3763442-init",
    "html": "Parameters\nmultiArray\n\nAn MLMultiArray with the same underlying type as the shaped array.\n\nSee Also\nCreating a Shaped Array Slice from Another Type\ninit(converting: MLMultiArray)\nCreates a shaped array slice by converting a multiarray.\ninit<T>(converting: T)\nCreates a shaped array slice by converting another shaped array type.\ninit<S>(concatenating: S, alongAxis: Int)\nMerges a sequence of shaped arrays into one shaped array along an axis."
  },
  {
    "title": "init(identityMatrixOfSize:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarrayslice/3763448-init",
    "html": "Parameters\nsize\n\nThe size of the identity matrix. For example, a size of 5 creates a 5x5 identity matrix.\n\nSee Also\nCreating a Shaped Array Slice\ninit(scalar: Scalar)\nCreates a shaped array slice with exactly one value and zero dimensions.\ninit(arrayLiteral: Scalar...)\nCreates a shaped array slice from a list of values.\ninit<S>(scalars: S, shape: [Int])\nCreates a shaped array slice from an array of values.\ninit(repeating: Scalar, shape: [Int])\nCreates a shaped array slice that initializes every element to the same value.\ninit(randomScalarsIn: Range<Scalar>, shape: [Int])\nCreates a shaped array that initializes the elements to random integer values within a range.\nAvailable when Scalar conforms to FixedWidthInteger."
  },
  {
    "title": "init(converting:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarray/3821243-init",
    "html": "Parameters\nsource\n\nAn instance with a type that conforms to MLShapedArrayProtocol.\n\nSee Also\nCreating a Shaped Array from Another Type\ninit(MLMultiArray)\nCreates a shaped array from a multiarray.\ninit(converting: MLMultiArray)\nCreates a shaped array by converting a multiarray.\ninit<S>(concatenating: S, alongAxis: Int)\nMerges a sequence of shaped arrays into one shaped array along an axis."
  },
  {
    "title": "init(bytesNoCopy:shape:deallocator:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarray/3763232-init",
    "html": "Parameters\nbytes\n\nAn unsafe raw pointer to the data.\n\nshape\n\nAn integer array. Each element represents the size of the shaped array’s corresponding dimension.\n\ndeallocator\n\nA Data.Deallocator.\n\nSee Also\nCreating a shaped array with pointers to memory\ninit(bytesNoCopy: UnsafeRawPointer, shape: [Int], strides: [Int], deallocator: Data.Deallocator)\nCreates a shaped array from a data pointer with memory strides.\ninit(unsafeUninitializedShape: [Int], initializingWith: (inout UnsafeMutableBufferPointer<Scalar>, [Int]) -> Void)\nCreates a shaped array from a shape and a closure that initializes its memory."
  },
  {
    "title": "isScalar | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarray/3763245-isscalar",
    "html": "Discussion\n\nThe value is equivalent to shape.isEmpty.\n\nSee Also\nInspecting a Shaped Array\nvar shape: [Int]\nAn integer array in which each element represents the size of the corresponding dimension.\nvar strides: [Int]\nAn integer array in which each element is the number of memory locations that span the length of the corresponding dimension.\nvar isEmpty: Bool\nA Boolean value indicating whether the collection is empty.\nvar scalarCount: Int\nThe total number of elements in the shaped array.\nvar count: Int\nThe number of elements in the collection.\nvar underestimatedCount: Int\nA value less than or equal to the number of elements in the collection.\nvar description: String\nA text representation of the shaped array."
  },
  {
    "title": "init(converting:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarray/3821242-init",
    "html": "Parameters\nmultiArray\n\nAn MLMultiArray, potentially with a different underlying type as the shaped array.\n\nSee Also\nCreating a Shaped Array from Another Type\ninit(MLMultiArray)\nCreates a shaped array from a multiarray.\ninit<T>(converting: T)\nCreates a shaped array by converting another shaped array type.\ninit<S>(concatenating: S, alongAxis: Int)\nMerges a sequence of shaped arrays into one shaped array along an axis."
  },
  {
    "title": "init(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarray/3763230-init",
    "html": "Parameters\nmultiArray\n\nAn MLMultiArray with the same underlying type as the shaped array.\n\nSee Also\nCreating a Shaped Array from Another Type\ninit(converting: MLMultiArray)\nCreates a shaped array by converting a multiarray.\ninit<T>(converting: T)\nCreates a shaped array by converting another shaped array type.\ninit<S>(concatenating: S, alongAxis: Int)\nMerges a sequence of shaped arrays into one shaped array along an axis."
  },
  {
    "title": "init(scalars:shape:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarrayprotocol/3763364-init",
    "html": "Parameters\nscalars\n\nA sequence of values.\n\nshape\n\nAn integer array. Each element represents the size of the shaped array’s corresponding dimension.\n\nSee Also\nCreating a Shaped Array Type\ninit(repeating: Self.Scalar, shape: [Int])\nCreates a shaped array type that initializes every element to the same value.\ninit(identityMatrixOfSize: Int)\nCreates a shaped array type that’s an identity matrix of integers.\nAvailable when Scalar conforms to FixedWidthInteger.\ninit(randomScalarsIn: Range<Self.Scalar>, shape: [Int])\nCreates a shaped array type that initializes the elements to random integer values within a range.\nAvailable when Scalar conforms to FixedWidthInteger.\ninit(bytesNoCopy: UnsafeRawPointer, shape: [Int], deallocator: Data.Deallocator)\nCreates a shaped array type from a data pointer.\ninit(bytesNoCopy: UnsafeRawPointer, shape: [Int], strides: [Int], deallocator: Data.Deallocator)\nCreates a shaped array type from a data pointer with memory strides.\n\nRequired\n\ninit(unsafeUninitializedShape: [Int], initializingWith: (inout UnsafeMutableBufferPointer<Self.Scalar>, [Int]) -> Void)\nCreates a shaped array type from a shape and a closure that initializes its memory.\n\nRequired"
  },
  {
    "title": "Shaped Array Collection Operations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarray/shaped_array_collection_operations",
    "html": "Overview\n\nProperties and methods a shaped array inherits from collection protocols.\n\nTopics\nInspecting a Shaped Array’s Scalars\nvar first: MLShapedArraySlice<Scalar>?\nThe first element of the collection.\nvar last: MLShapedArraySlice<Scalar>?\nThe last element of the collection.\nvar publisher: Publishers.Sequence<MLShapedArray<Scalar>, Never>\nA publisher that produces the element in the shaped array as separate values.\nvar lazy: LazySequence<MLShapedArray<Scalar>>\nA sequence containing the same elements as this sequence, but on which some operations, such as map and filter, are implemented lazily.\nInspecting a Slice of a Shaped Array\nfunc allSatisfy((MLShapedArraySlice<Scalar>) -> Bool) -> Bool\nReturns a Boolean value indicating whether every element of a sequence satisfies a given predicate.\nfunc contains<C>(C) -> Bool\nReturns a Boolean value indicating whether the collection contains the given sequence.\nfunc contains(where: (MLShapedArraySlice<Scalar>) -> Bool) -> Bool\nReturns a Boolean value indicating whether the sequence contains an element that satisfies the given predicate.\nfunc contains(MLShapedArraySlice<Scalar>) -> Bool\nReturns a Boolean value indicating whether the sequence contains the given element.\nsubscript<R>(R) -> MLShapedArraySlice<Scalar>\nAccesses the contiguous subrange of the collection’s elements specified by a range expression.\nfunc makeIterator() -> IndexingIterator<MLShapedArray<Scalar>>\nReturns an iterator over the elements of the collection.\nfunc forEach((MLShapedArraySlice<Scalar>) -> Void)\nCalls the given closure on each element in the sequence in the same order as a for-in loop.\nfunc enumerated() -> EnumeratedSequence<MLShapedArray<Scalar>>\nReturns a sequence of pairs (n, x), where n represents a consecutive integer starting at zero and x represents an element of the sequence.\nfunc randomElement() -> MLShapedArraySlice<Scalar>?\nReturns a random element of the collection.\nfunc randomElement<T>(using: inout T) -> MLShapedArraySlice<Scalar>?\nReturns a random element of the collection, using the given generator as a source for randomness.\nfunc withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<MLShapedArraySlice<Scalar>>) -> R) -> R?\nExecutes a closure on the sequence’s contiguous storage.\nComparing Shaped Arrays\nfunc compare<Comparator>(Comparator.Compared, Comparator.Compared) -> ComparisonResult\nReturns a comparison result by comparing two shaped array slices.\nfunc difference<C>(from: C, by: (C.Element, MLShapedArraySlice<Scalar>) -> Bool) -> CollectionDifference<MLShapedArraySlice<Scalar>>\nReturns the difference needed to produce this collection’s ordered elements from the given collection, using the given predicate as an equivalence test.\nfunc difference<C>(from: C) -> CollectionDifference<MLShapedArraySlice<Scalar>>\nReturns the difference needed to produce this collection’s ordered elements from the given collection.\nfunc elementsEqual<OtherSequence>(OtherSequence, by: (MLShapedArraySlice<Scalar>, OtherSequence.Element) -> Bool) -> Bool\nReturns a Boolean value indicating whether this sequence and another sequence contain equivalent elements in the same order, using the given predicate as the equivalence test.\nfunc elementsEqual<OtherSequence>(OtherSequence) -> Bool\nReturns a Boolean value indicating whether this sequence and another sequence contain the same elements in the same order.\nfunc starts<PossiblePrefix>(with: PossiblePrefix, by: (MLShapedArraySlice<Scalar>, PossiblePrefix.Element) -> Bool) -> Bool\nReturns a Boolean value indicating whether the initial elements of the sequence are equivalent to the elements in another sequence, using the given predicate as the equivalence test.\nfunc lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (MLShapedArraySlice<Scalar>, MLShapedArraySlice<Scalar>) -> Bool) -> Bool\nReturns a Boolean value indicating whether the sequence precedes another sequence in a lexicographical (dictionary) ordering, using the given predicate to compare elements.\nFinding an Index in a Shaped Array\nvar startIndex: Int\nThe index of the first element in the shaped array.\nvar endIndex: Int\nThe index of the last element in the shaped array.\nvar indices: Range<Int>\nThe index range of all the elements in the shaped array.\nfunc index(after: Int) -> Int\nReturns the index immediately after an index you provide.\nfunc index(Int, offsetBy: Int) -> Int\nReturns the index at a relative distance to an index you provide.\nfunc index(Int, offsetBy: Int, limitedBy: Int) -> Int?\nReturns an index that is the specified distance from the given index, unless that distance is beyond a given limiting index.\nfunc index(of: MLShapedArraySlice<Scalar>) -> Int?\nReturns the first index where the specified value appears in the collection.\nDeprecated\nfunc filter(Predicate<MLShapedArraySlice<Scalar>>) -> [MLShapedArraySlice<Scalar>]\nfunc formIndex(before: inout Int)\nReplaces the given index with its predecessor.\nfunc formIndex(after: inout Int)\nReplaces the given index with its successor.\nfunc formIndex(inout Int, offsetBy: Int)\nOffsets the given index by the specified distance.\nfunc formIndex(inout Int, offsetBy: Int, limitedBy: Int) -> Bool\nOffsets the given index by the specified distance, or so that it equals the given limiting index.\nfunc firstIndex(where: (MLShapedArraySlice<Scalar>) -> Bool) -> Int?\nReturns the first index in which an element of the collection satisfies the given predicate.\nfunc firstIndex(of: MLShapedArraySlice<Scalar>) -> Int?\nReturns the first index where the specified value appears in the collection.\nfunc lastIndex(where: (MLShapedArraySlice<Scalar>) -> Bool) -> Int?\nReturns the index of the last element in the collection that matches the given predicate.\nfunc lastIndex(of: MLShapedArraySlice<Scalar>) -> Int?\nReturns the last index where the specified value appears in the collection.\nfunc ranges<C>(of: C) -> [Range<Int>]\nFinds and returns the ranges of the all occurrences of a given sequence within the collection.\nfunc starts<PossiblePrefix>(with: PossiblePrefix) -> Bool\nReturns a Boolean value indicating whether the initial elements of the sequence are the same as the elements in another sequence.\nfunc firstRange<C>(of: C) -> Range<Int>?\nFinds and returns the range of the first occurrence of a given collection within this collection.\nModifying a Shaped Array\nfunc swapAt(Int, Int)\nExchanges the values at the specified indices of the collection.\nfunc partition(by: (MLShapedArraySlice<Scalar>) -> Bool) -> Int\nReorders the elements of the collection such that all the elements that match the given predicate are after all the elements that don’t match.\nfunc sort<Comparator>(using: Comparator)\nReorders a shaped array by sorting its slices with a comparator.\nfunc sort<S, Comparator>(using: S)\nReorders a shaped array by sorting its slices with a sequence of comparators.\nfunc sort(by: (MLShapedArraySlice<Scalar>, MLShapedArraySlice<Scalar>) -> Bool)\nSorts the collection in place, using the given predicate as the comparison between elements.\nfunc reverse()\nReverses the elements of the collection in place.\nfunc shuffle()\nShuffles the collection in place.\nfunc shuffle<T>(using: inout T)\nShuffles the collection in place, using the given generator as a source for randomness.\nfunc withContiguousMutableStorageIfAvailable<R>((inout UnsafeMutableBufferPointer<MLShapedArraySlice<Scalar>>) -> R) -> R?\nExecutes a closure on the collection’s contiguous storage.\nGenerating a Shaped Array\nfunc joined() -> FlattenSequence<MLShapedArray<Scalar>>\nReturns the elements of this sequence of sequences, concatenated.\nfunc joined<Separator>(separator: Separator) -> JoinedSequence<MLShapedArray<Scalar>>\nReturns the concatenated elements of this sequence of sequences, inserting the given separator between each element.\nfunc reversed() -> ReversedCollection<MLShapedArray<Scalar>>\nReturns a view presenting the elements of the collection in reverse order.\nfunc split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (MLShapedArraySlice<Scalar>) -> Bool) -> [MLShapedArraySlice<Scalar>]\nReturns the longest possible subsequences of the collection, in order, that don’t contain elements satisfying the given predicate.\nfunc split<C>(separator: C, maxSplits: Int, omittingEmptySubsequences: Bool) -> [MLShapedArraySlice<Scalar>]\nReturns the longest possible subsequences of the collection, in order, around elements equal to the given separator.\nfunc split(separator: MLShapedArraySlice<Scalar>, maxSplits: Int, omittingEmptySubsequences: Bool) -> [ArraySlice<MLShapedArraySlice<Scalar>>]\nReturns the longest possible subsequences of the sequence, in order, around elements equal to the given element.\nfunc split(separator: MLShapedArraySlice<Scalar>, maxSplits: Int, omittingEmptySubsequences: Bool) -> [MLShapedArraySlice<Scalar>]\nReturns the longest possible subsequences of the collection, in order, around elements equal to the given element.\nGenerating a Shaped Array Slice\nfunc first(where: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>?\nReturns the first element of the sequence that satisfies the given predicate.\nfunc last(where: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>?\nReturns the last element of the sequence that satisfies the given predicate.\nfunc dropFirst(Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence containing all but the given number of initial elements.\nfunc dropLast(Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence containing all but the specified number of final elements.\nfunc drop(while: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>\nReturns a subsequence by skipping elements while predicate returns true and returning the remaining elements.\nfunc min(by: (MLShapedArraySlice<Scalar>, MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>?\nReturns the minimum element in the sequence, using the given predicate as the comparison between elements.\nfunc max(by: (MLShapedArraySlice<Scalar>, MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>?\nReturns the maximum element in the sequence, using the given predicate as the comparison between elements.\nfunc prefix(Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence, up to the specified maximum length, containing the initial elements of the collection.\nfunc prefix(upTo: Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence from the start of the collection up to, but not including, the specified position.\nfunc prefix(through: Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence from the start of the collection through the specified position.\nfunc prefix(while: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>\nReturns a subsequence containing the initial elements until predicate returns false and skipping the remaining elements.\nfunc suffix(Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence, up to the given maximum length, containing the final elements of the collection.\nfunc suffix(from: Int) -> MLShapedArraySlice<Scalar>\nReturns a subsequence from the specified position to the end of the collection.\nfunc sorted<Comparator>(using: Comparator) -> [MLShapedArraySlice<Scalar>]\nGenerates a copy of the shaped array by sorting its slices with a comparator.\nfunc sorted<S, Comparator>(using: S) -> [MLShapedArraySlice<Scalar>]\nGenerates a copy of the shaped array by sorting its slices with a sequence of comparators.\nfunc sorted(by: (MLShapedArraySlice<Scalar>, MLShapedArraySlice<Scalar>) -> Bool) -> [MLShapedArraySlice<Scalar>]\nReturns the elements of the sequence, sorted using the given predicate as the comparison between elements.\nfunc shuffled() -> [MLShapedArraySlice<Scalar>]\nReturns the elements of the sequence, shuffled.\nfunc shuffled<T>(using: inout T) -> [MLShapedArraySlice<Scalar>]\nReturns the elements of the sequence, shuffled using the given generator as a source for randomness.\nfunc trimmingPrefix<Prefix>(Prefix) -> MLShapedArraySlice<Scalar>\nReturns a new collection of the same type by removing initial elements that satisfy the given predicate from the start.\nfunc trimmingPrefix(while: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>\nTransforming a Shaped Array\nfunc map<T>((MLShapedArraySlice<Scalar>) -> T) -> [T]\nReturns an array containing the results of mapping the given closure over the sequence’s elements.\nfunc compactMap<ElementOfResult>((MLShapedArraySlice<Scalar>) -> ElementOfResult?) -> [ElementOfResult]\nReturns an array containing the non-nil results of calling the given transformation with each element of this sequence.\nfunc flatMap<SegmentOfResult>((MLShapedArraySlice<Scalar>) -> SegmentOfResult) -> [SegmentOfResult.Element]\nReturns an array containing the concatenated results of calling the given transformation with each element of this sequence.\nfunc flatMap<ElementOfResult>((MLShapedArraySlice<Scalar>) -> ElementOfResult?) -> [ElementOfResult]\nGenerates an array that concatenates the sequences from a transform closure that returns an optional.\nDeprecated\nfunc filter((MLShapedArraySlice<Scalar>) -> Bool) -> [MLShapedArraySlice<Scalar>]\nReturns an array containing, in order, the elements of the sequence that satisfy the given predicate.\nfunc reduce<Result>(Result, (Result, MLShapedArraySlice<Scalar>) -> Result) -> Result\nReturns the result of combining the elements of the sequence using the given closure.\nfunc reduce<Result>(into: Result, (inout Result, MLShapedArraySlice<Scalar>) -> ()) -> Result\nReturns the result of combining the elements of the sequence using the given closure.\nFormatting a Shaped Array\nfunc formatted<S>(S) -> S.FormatOutput\nGenerates a formatted output based on a style.\nSee Also\nSupporting Types\ntypealias MLShapedArray.Element\nA type that defines the shaped array’s elements.\ntypealias MLShapedArray.Index\nA type that defines the shaped array’s indices.\ntypealias MLShapedArray.Indices\nA type that defines the shaped array’s index ranges.\ntypealias MLShapedArray.Iterator\nA type that defines the shaped array’s iterator.\ntypealias MLShapedArray.SubSequence\nA type that defines the shaped array’s slices.\ntypealias MLShapedArray.ArrayLiteralElement\nA type that restricts the elements of an array literal that initializes the shaped array."
  },
  {
    "title": "init(bytesNoCopy:shape:deallocator:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarrayprotocol/3763357-init",
    "html": "Parameters\nbytes\n\nAn unsafe raw pointer to the data.\n\nshape\n\nAn integer array. Each element represents the size of the shaped array’s corresponding dimension.\n\ndeallocator\n\nA Data.Deallocator.\n\nSee Also\nCreating a Shaped Array Type\ninit<S>(scalars: S, shape: [Int])\nCreates a shaped array type from an array of values.\ninit(repeating: Self.Scalar, shape: [Int])\nCreates a shaped array type that initializes every element to the same value.\ninit(identityMatrixOfSize: Int)\nCreates a shaped array type that’s an identity matrix of integers.\nAvailable when Scalar conforms to FixedWidthInteger.\ninit(randomScalarsIn: Range<Self.Scalar>, shape: [Int])\nCreates a shaped array type that initializes the elements to random integer values within a range.\nAvailable when Scalar conforms to FixedWidthInteger.\ninit(bytesNoCopy: UnsafeRawPointer, shape: [Int], strides: [Int], deallocator: Data.Deallocator)\nCreates a shaped array type from a data pointer with memory strides.\n\nRequired\n\ninit(unsafeUninitializedShape: [Int], initializingWith: (inout UnsafeMutableBufferPointer<Self.Scalar>, [Int]) -> Void)\nCreates a shaped array type from a shape and a closure that initializes its memory.\n\nRequired"
  },
  {
    "title": "MLShapedArray.Indices | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarray/indices",
    "html": "See Also\nSupporting Types\ntypealias MLShapedArray.Element\nA type that defines the shaped array’s elements.\ntypealias MLShapedArray.Index\nA type that defines the shaped array’s indices.\ntypealias MLShapedArray.Iterator\nA type that defines the shaped array’s iterator.\ntypealias MLShapedArray.SubSequence\nA type that defines the shaped array’s slices.\ntypealias MLShapedArray.ArrayLiteralElement\nA type that restricts the elements of an array literal that initializes the shaped array.\nShaped Array Collection Operations"
  },
  {
    "title": "MLModelError.Code.update | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlmodelerror/code/update",
    "html": "Discussion\n\nCore ML typically throws this error when the update process encounters a problem at runtime, such as an MLMultiArray input with an incorrect shape.\n\nSee Also\nError Codes\ncase featureType\nAn error code for problems related to model features.\ncase parameters\nAn error code for problems related to model parameters.\ncase modelCollection\nAn error code for problems related to retrieving a model collection from the deployment system.\ncase modelDecryptionKeyFetch\nAn error code for problems related to retrieving a model’s decryption key.\ncase modelDecryption\nAn error code for problems related to decrypting models.\ncase customLayer\nAn error code for problems related to custom layers.\ncase customModel\nAn error code for problems related to custom models.\ncase io\nAn error code for problems related to the system’s input or output.\ncase predictionCancelled\nAn error code for problems related to canceling the prediction before it completes.\ncase generic\nAn error code for runtime issues that don’t apply to the other error codes."
  },
  {
    "title": "MLModelError.Code.io | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlmodelerror/code/io",
    "html": "Discussion\n\nCore ML typically throws this error when the file system encounters an error.\n\nSee Also\nError Codes\ncase featureType\nAn error code for problems related to model features.\ncase parameters\nAn error code for problems related to model parameters.\ncase modelCollection\nAn error code for problems related to retrieving a model collection from the deployment system.\ncase modelDecryptionKeyFetch\nAn error code for problems related to retrieving a model’s decryption key.\ncase modelDecryption\nAn error code for problems related to decrypting models.\ncase update\nAn error code for problems related to on-device model updates.\ncase customLayer\nAn error code for problems related to custom layers.\ncase customModel\nAn error code for problems related to custom models.\ncase predictionCancelled\nAn error code for problems related to canceling the prediction before it completes.\ncase generic\nAn error code for runtime issues that don’t apply to the other error codes."
  },
  {
    "title": "MLModelError.Code.customLayer | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlmodelerror/code/customlayer",
    "html": "Discussion\n\nCore ML typically throws this error when the custom layer has a programming mistake. For example, a model’s prediction method fails with this error code if Core ML can’t find the custom layer’s implementation.\n\nSee Also\nError Codes\ncase featureType\nAn error code for problems related to model features.\ncase parameters\nAn error code for problems related to model parameters.\ncase modelCollection\nAn error code for problems related to retrieving a model collection from the deployment system.\ncase modelDecryptionKeyFetch\nAn error code for problems related to retrieving a model’s decryption key.\ncase modelDecryption\nAn error code for problems related to decrypting models.\ncase update\nAn error code for problems related to on-device model updates.\ncase customModel\nAn error code for problems related to custom models.\ncase io\nAn error code for problems related to the system’s input or output.\ncase predictionCancelled\nAn error code for problems related to canceling the prediction before it completes.\ncase generic\nAn error code for runtime issues that don’t apply to the other error codes."
  },
  {
    "title": "withUnsafeMutableShapedBufferPointer(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarray/3763347-withunsafemutableshapedbufferpoi",
    "html": "Parameters\nbody\n\nA closure that accesses a shaped array’s underlying memory.\n\npt\n\nA pointer to the shaped array.\n\nshape\n\nAn integer array in which each element represents the size of the corresponding dimension.\n\nstrides\n\nAn integer array in which each element is the number of memory locations that spans the length of the corresponding dimension.\n\nDiscussion\n\nThe method returns the value your closure returns, if applicable.\n\nRelationships\nFrom Protocol\nMLShapedArrayProtocol\nSee Also\nModifying a Shaped Array\nfunc fill(with: Scalar)\nSets all the shaped array’s elements to a scalar value.\nfunc fill<C>(with: C)\nAssigns the shaped array’s elements to the elements in a collection, repeatedly, if necessary."
  },
  {
    "title": "!=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarray/4135001",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nSee Also\nComparing Shaped Arrays\nstatic func == (MLShapedArray<Scalar>, MLShapedArray<Scalar>) -> Bool\nReturns a Boolean value that indicates whether two values are equal.\nAvailable when Scalar conforms to Equatable."
  },
  {
    "title": "MLShapedArray.Index | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarray/index",
    "html": "See Also\nSupporting Types\ntypealias MLShapedArray.Element\nA type that defines the shaped array’s elements.\ntypealias MLShapedArray.Indices\nA type that defines the shaped array’s index ranges.\ntypealias MLShapedArray.Iterator\nA type that defines the shaped array’s iterator.\ntypealias MLShapedArray.SubSequence\nA type that defines the shaped array’s slices.\ntypealias MLShapedArray.ArrayLiteralElement\nA type that restricts the elements of an array literal that initializes the shaped array.\nShaped Array Collection Operations"
  },
  {
    "title": "MLShapedArray.SubSequence | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarray/subsequence",
    "html": "See Also\nSupporting Types\ntypealias MLShapedArray.Element\nA type that defines the shaped array’s elements.\ntypealias MLShapedArray.Index\nA type that defines the shaped array’s indices.\ntypealias MLShapedArray.Indices\nA type that defines the shaped array’s index ranges.\ntypealias MLShapedArray.Iterator\nA type that defines the shaped array’s iterator.\ntypealias MLShapedArray.ArrayLiteralElement\nA type that restricts the elements of an array literal that initializes the shaped array.\nShaped Array Collection Operations"
  },
  {
    "title": "MLShapedArray.Element | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarray/element",
    "html": "See Also\nSupporting Types\ntypealias MLShapedArray.Index\nA type that defines the shaped array’s indices.\ntypealias MLShapedArray.Indices\nA type that defines the shaped array’s index ranges.\ntypealias MLShapedArray.Iterator\nA type that defines the shaped array’s iterator.\ntypealias MLShapedArray.SubSequence\nA type that defines the shaped array’s slices.\ntypealias MLShapedArray.ArrayLiteralElement\nA type that restricts the elements of an array literal that initializes the shaped array.\nShaped Array Collection Operations"
  },
  {
    "title": "subscript(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarray/3763322-subscript",
    "html": "Parameters\nsliceRanges\n\nA comma-separated, or variadic, list of range expressions in which each is a range in the corresponding dimension.\n\nSee Also\nAccessing a Slice from Multiple Dimensions\nsubscript(Int...) -> MLShapedArraySlice<Scalar>\nAccesses a slice using a list of integers, in which each element is an index in the corresponding dimension.\nsubscript<C>(C) -> MLShapedArraySlice<Scalar>\nAccesses a slice using a collection of integers, in which each element is an index in the corresponding dimension.\nsubscript<C>(C) -> MLShapedArraySlice<Scalar>\nAccesses a slice using a collection of integer ranges, in which each element is a range in the corresponding dimension.\nsubscript<C>(C) -> MLShapedArraySlice<Scalar>\nAccesses a slice using a collection of range expressions, in which each element is a range in the corresponding dimension."
  },
  {
    "title": "subscript(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarray/3763320-subscript",
    "html": "Parameters\nsliceRanges\n\nAn integer range collection in which each element is a range in the corresponding dimension.\n\nRelationships\nFrom Protocol\nMLShapedArrayProtocol\nSee Also\nAccessing a Slice from Multiple Dimensions\nsubscript(Int...) -> MLShapedArraySlice<Scalar>\nAccesses a slice using a list of integers, in which each element is an index in the corresponding dimension.\nsubscript<C>(C) -> MLShapedArraySlice<Scalar>\nAccesses a slice using a collection of integers, in which each element is an index in the corresponding dimension.\nsubscript(MLShapedArrayRangeExpression...) -> MLShapedArraySlice<Scalar>\nAccesses a slice using a list of range expressions, in which each element is a range in the corresponding dimension.\nsubscript<C>(C) -> MLShapedArraySlice<Scalar>\nAccesses a slice using a collection of range expressions, in which each element is a range in the corresponding dimension."
  },
  {
    "title": "init(scalars:shape:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarray/3763241-init",
    "html": "Parameters\nscalars\n\nA sequence of values.\n\nshape\n\nAn integer array. Each element represents the size of the shaped array’s corresponding dimension.\n\nSee Also\nCreating a Shaped Array\ninit(scalar: Scalar)\nCreates a shaped array with exactly one value and zero dimensions.\ninit(arrayLiteral: Scalar...)\nCreates a shaped array from a list of values.\ninit(repeating: Scalar, shape: [Int])\nCreates a shaped array that initializes every element to the same value.\ninit(identityMatrixOfSize: Int)\nCreates a shaped array that’s an identity matrix of integers.\nAvailable when Scalar conforms to FixedWidthInteger.\ninit(randomScalarsIn: Range<Scalar>, shape: [Int])\nCreates a shaped array that initializes the elements to random integer values within a range.\nAvailable when Scalar conforms to FixedWidthInteger."
  },
  {
    "title": "subscript(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarray/3763321-subscript",
    "html": "Parameters\nsliceRange\n\nA shaped array range expression.\n\nSee Also\nAccessing a Slice from the First Dimension\nsubscript(Int) -> MLShapedArraySlice<Scalar>\nAccesses a slice at an index in the shaped array’s first dimension.\nsubscript(Range<Int>) -> MLShapedArraySlice<Scalar>\nAccesses a slice with a range in the shaped array’s first dimension.\nsubscript<R>(R) -> MLShapedArraySlice<Scalar>\nAccesses a slice with an integer range expression in the shaped array’s first dimension.\nsubscript((UnboundedRange_) -> Void) -> MLShapedArraySlice<Scalar>\nAccesses a slice with an unbounded range in the shaped array’s first dimension.\nsubscript((UnboundedRange_) -> ()) -> MLShapedArraySlice<Scalar>\nAccesses a slice with an unbounded range in the shaped array’s first dimension."
  },
  {
    "title": "subscript(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarray/3763323-subscript",
    "html": "Parameters\nindices\n\nA comma-separated, or variadic, list of integers in which each is an index in the corresponding dimension.\n\nSee Also\nAccessing a Slice from Multiple Dimensions\nsubscript<C>(C) -> MLShapedArraySlice<Scalar>\nAccesses a slice using a collection of integers, in which each element is an index in the corresponding dimension.\nsubscript<C>(C) -> MLShapedArraySlice<Scalar>\nAccesses a slice using a collection of integer ranges, in which each element is a range in the corresponding dimension.\nsubscript(MLShapedArrayRangeExpression...) -> MLShapedArraySlice<Scalar>\nAccesses a slice using a list of range expressions, in which each element is a range in the corresponding dimension.\nsubscript<C>(C) -> MLShapedArraySlice<Scalar>\nAccesses a slice using a collection of range expressions, in which each element is a range in the corresponding dimension."
  },
  {
    "title": "init(repeating:shape:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarray/3763239-init",
    "html": "Parameters\nvalue\n\nA scalar value. The initializer assigns every element in the shaped array to value.\n\nshape\n\nAn integer array. Each element represents the size of the shaped array’s corresponding dimension.\n\nSee Also\nCreating a Shaped Array\ninit(scalar: Scalar)\nCreates a shaped array with exactly one value and zero dimensions.\ninit(arrayLiteral: Scalar...)\nCreates a shaped array from a list of values.\ninit<S>(scalars: S, shape: [Int])\nCreates a shaped array from an array of values.\ninit(identityMatrixOfSize: Int)\nCreates a shaped array that’s an identity matrix of integers.\nAvailable when Scalar conforms to FixedWidthInteger.\ninit(randomScalarsIn: Range<Scalar>, shape: [Int])\nCreates a shaped array that initializes the elements to random integer values within a range.\nAvailable when Scalar conforms to FixedWidthInteger."
  },
  {
    "title": "subscript(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarray/3763319-subscript",
    "html": "Parameters\nindices\n\nAn integer collection in which each element is an index in the corresponding dimension.\n\nRelationships\nFrom Protocol\nMLShapedArrayProtocol\nSee Also\nAccessing a Slice from Multiple Dimensions\nsubscript(Int...) -> MLShapedArraySlice<Scalar>\nAccesses a slice using a list of integers, in which each element is an index in the corresponding dimension.\nsubscript<C>(C) -> MLShapedArraySlice<Scalar>\nAccesses a slice using a collection of integer ranges, in which each element is a range in the corresponding dimension.\nsubscript(MLShapedArrayRangeExpression...) -> MLShapedArraySlice<Scalar>\nAccesses a slice using a list of range expressions, in which each element is a range in the corresponding dimension.\nsubscript<C>(C) -> MLShapedArraySlice<Scalar>\nAccesses a slice using a collection of range expressions, in which each element is a range in the corresponding dimension."
  },
  {
    "title": "subscript(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarray/3763326-subscript",
    "html": "Parameters\n_\n\nAn unbounded range.\n\nSee Also\nAccessing a Slice from the First Dimension\nsubscript(Int) -> MLShapedArraySlice<Scalar>\nAccesses a slice at an index in the shaped array’s first dimension.\nsubscript(Range<Int>) -> MLShapedArraySlice<Scalar>\nAccesses a slice with a range in the shaped array’s first dimension.\nsubscript<R>(R) -> MLShapedArraySlice<Scalar>\nAccesses a slice with an integer range expression in the shaped array’s first dimension.\nsubscript(MLShapedArrayRangeExpression) -> MLShapedArraySlice<Scalar>\nAccesses a slice with a shaped-array range expression in the shaped array’s first dimension.\nsubscript((UnboundedRange_) -> ()) -> MLShapedArraySlice<Scalar>\nAccesses a slice with an unbounded range in the shaped array’s first dimension."
  },
  {
    "title": "subscript(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarray/3763328-subscript",
    "html": "Parameters\nx\n\nAn unbounded range.\n\nSee Also\nAccessing a Slice from the First Dimension\nsubscript(Int) -> MLShapedArraySlice<Scalar>\nAccesses a slice at an index in the shaped array’s first dimension.\nsubscript(Range<Int>) -> MLShapedArraySlice<Scalar>\nAccesses a slice with a range in the shaped array’s first dimension.\nsubscript<R>(R) -> MLShapedArraySlice<Scalar>\nAccesses a slice with an integer range expression in the shaped array’s first dimension.\nsubscript(MLShapedArrayRangeExpression) -> MLShapedArraySlice<Scalar>\nAccesses a slice with a shaped-array range expression in the shaped array’s first dimension.\nsubscript((UnboundedRange_) -> Void) -> MLShapedArraySlice<Scalar>\nAccesses a slice with an unbounded range in the shaped array’s first dimension."
  },
  {
    "title": "init(scalar:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarray/3763240-init",
    "html": "Parameters\nscalar\n\nA singular scalar value.\n\nDiscussion\n\nUse the shaped array’s scalar property to access the single value.\n\nSee Also\nCreating a Shaped Array\ninit(arrayLiteral: Scalar...)\nCreates a shaped array from a list of values.\ninit<S>(scalars: S, shape: [Int])\nCreates a shaped array from an array of values.\ninit(repeating: Scalar, shape: [Int])\nCreates a shaped array that initializes every element to the same value.\ninit(identityMatrixOfSize: Int)\nCreates a shaped array that’s an identity matrix of integers.\nAvailable when Scalar conforms to FixedWidthInteger.\ninit(randomScalarsIn: Range<Scalar>, shape: [Int])\nCreates a shaped array that initializes the elements to random integer values within a range.\nAvailable when Scalar conforms to FixedWidthInteger."
  },
  {
    "title": "init(arrayLiteral:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarray/3763231-init",
    "html": "Parameters\nelements\n\nA comma-separated, or variadic, list of scalar values.\n\nSee Also\nCreating a Shaped Array\ninit(scalar: Scalar)\nCreates a shaped array with exactly one value and zero dimensions.\ninit<S>(scalars: S, shape: [Int])\nCreates a shaped array from an array of values.\ninit(repeating: Scalar, shape: [Int])\nCreates a shaped array that initializes every element to the same value.\ninit(identityMatrixOfSize: Int)\nCreates a shaped array that’s an identity matrix of integers.\nAvailable when Scalar conforms to FixedWidthInteger.\ninit(randomScalarsIn: Range<Scalar>, shape: [Int])\nCreates a shaped array that initializes the elements to random integer values within a range.\nAvailable when Scalar conforms to FixedWidthInteger."
  },
  {
    "title": "init(unsafeUninitializedShape:initializingWith:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarrayslice/3763454-init",
    "html": "Parameters\nshape\n\nAn integer array. Each element represents the size of the shaped array’s corresponding dimension.\n\ninitializer\n\nA closure you provide that initializes the shaped array’s underlying memory. The initializer calls your closure with a pointer to the memory and an array of strides that correspond to the shaped array’s dimensions.\n\nRelationships\nFrom Protocol\nMLShapedArrayProtocol\nSee Also\nCreating a Shaped Array Slice with Pointers to Memory\ninit(bytesNoCopy: UnsafeRawPointer, shape: [Int], deallocator: Data.Deallocator)\nCreates a shaped array slice from a data pointer.\ninit(bytesNoCopy: UnsafeRawPointer, shape: [Int], strides: [Int], deallocator: Data.Deallocator)\nCreates a shaped array slice from a data pointer with memory strides."
  },
  {
    "title": "strides | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarrayslice/3763535-strides",
    "html": "Relationships\nFrom Protocol\nMLShapedArrayProtocol\nSee Also\nInspecting a Shaped Array Slice\nvar isScalar: Bool\nA Boolean value that indicates whether the shaped array slice has zero dimensions.\nlet shape: [Int]\nAn integer array in which each element represents the size of the corresponding dimension.\nvar isEmpty: Bool\nA Boolean value indicating whether the collection is empty.\nvar scalarCount: Int\nThe total number of elements in the shaped array slice.\nvar count: Int\nThe number of elements in the collection.\nvar underestimatedCount: Int\nA value less than or equal to the number of elements in the collection."
  },
  {
    "title": "shape | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarrayslice/3763513-shape",
    "html": "Relationships\nFrom Protocol\nMLShapedArrayProtocol\nSee Also\nInspecting a Shaped Array Slice\nvar isScalar: Bool\nA Boolean value that indicates whether the shaped array slice has zero dimensions.\nvar strides: [Int]\nAn integer array in which each element is the number of memory locations that spans the length of the corresponding dimension.\nvar isEmpty: Bool\nA Boolean value indicating whether the collection is empty.\nvar scalarCount: Int\nThe total number of elements in the shaped array slice.\nvar count: Int\nThe number of elements in the collection.\nvar underestimatedCount: Int\nA value less than or equal to the number of elements in the collection."
  },
  {
    "title": "init(from:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarrayslice/3931190-init",
    "html": "Parameters\ndecoder\n\nThe object that decodes the array slice for initialization.\n\nRelationships\nFrom Protocol\nDecodable\nSee Also\nEncoding and Decoding an Array Slice\nfunc encode(to: Encoder)\nEncodes the array slice.\nAvailable when Scalar conforms to Encodable."
  },
  {
    "title": "isScalar | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarrayslice/3763457-isscalar",
    "html": "Discussion\n\nThe value is equivalent to shape.isEmpty.\n\nSee Also\nInspecting a Shaped Array Slice\nlet shape: [Int]\nAn integer array in which each element represents the size of the corresponding dimension.\nvar strides: [Int]\nAn integer array in which each element is the number of memory locations that spans the length of the corresponding dimension.\nvar isEmpty: Bool\nA Boolean value indicating whether the collection is empty.\nvar scalarCount: Int\nThe total number of elements in the shaped array slice.\nvar count: Int\nThe number of elements in the collection.\nvar underestimatedCount: Int\nA value less than or equal to the number of elements in the collection."
  },
  {
    "title": "init(data:shape:strides:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarrayslice/3856539-init",
    "html": "Parameters\ndata\n\nA block of data that initializes the array.\n\nshape\n\nThe shape of the array.\n\nstrides\n\nThe strides of the array.\n\nSee Also\nCreating a Shaped Array Slice with Data\ninit(data: Data, shape: [Int])\nCreates a shaped array with a defined data and shape."
  },
  {
    "title": "encode(to:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarrayslice/3931189-encode",
    "html": "Parameters\nencoder\n\nThe object that encodes the array slice.\n\nRelationships\nFrom Protocol\nEncodable\nSee Also\nEncoding and Decoding an Array Slice\ninit(from: Decoder)\nCreates an array slice from the passed decoder.\nAvailable when Scalar conforms to Decodable."
  },
  {
    "title": "relative(toShapedArrayAxis:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarrayrangeexpression/3763386-relative",
    "html": "Required\n\nParameters\nrange\n\nAn integer range."
  },
  {
    "title": "pixelFormatType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlimageconstraint/2921267-pixelformattype",
    "html": "See Also\nAccessing the Constraints\nvar pixelsWide: Int\nThe model's default width for an image feature.\nvar pixelsHigh: Int\nThe model's default height for an image feature."
  },
  {
    "title": "pixelsWide | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlimageconstraint/2921270-pixelswide",
    "html": "See Also\nAccessing the Constraints\nvar pixelsHigh: Int\nThe model's default height for an image feature.\nvar pixelFormatType: OSType\nThe model's pixel format for an image feature."
  },
  {
    "title": "MLTaskState.failed | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mltaskstate/failed",
    "html": "See Also\nFinal States\ncase completed\nThe state of a machine learning task that has finished successfully."
  },
  {
    "title": "MLTaskState.suspended | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mltaskstate/suspended",
    "html": "See Also\nTransient States\ncase running\nThe state of a machine learning task that’s executing.\ncase cancelling\nThe state of a machine learning task that’s in mid-termination, before it could finish successfully."
  },
  {
    "title": "stringValues | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlsequence/2962874-stringvalues",
    "html": "Discussion\n\nOnly use this property when the sequence’s type is MLFeatureType.string.\n\nSee Also\nRetrieving the Sequence’s Values\nvar int64Values: [NSNumber]\nAn array of 64-bit integers in the sequence."
  },
  {
    "title": "subscript(scalarAt:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarrayprotocol/3763381-subscript",
    "html": "Required Default implementation provided.\n\nParameters\nindices\n\nAn integer collection that represents a position in the shaped array in which each integer is an index in the corresponding dimension.\n\nDefault Implementations\nMLShapedArrayProtocol Implementations\nsubscript(scalarAt: Int...) -> Self.Scalar\nSee Also\nAccessing Elements\nsubscript<C>(C) -> MLShapedArraySlice<Self.Scalar>\nAccesses a slice using a collection of integers, in which each element is an index in the corresponding dimension.\n\nRequired\n\nsubscript<C>(C) -> MLShapedArraySlice<Self.Scalar>\nAccesses a slice using a collection of integer ranges, in which each element is a range in the corresponding dimension.\n\nRequired Default implementations provided."
  },
  {
    "title": "key | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlparameterdescription/3180069-key",
    "html": "See Also\nDescribing the Model Parameter\nvar defaultValue: Any\nThe default value for the parameter."
  },
  {
    "title": "shape | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlmultiarrayconstraint/2921277-shape",
    "html": "See Also\nAccessing the Constraints\nvar dataType: MLMultiArrayDataType\nThe type for the multi array.\nvar shapeConstraint: MLMultiArrayShapeConstraint\nThe constraint on the shape of the multiarray.\nclass MLMultiArrayShapeConstraint\nThe lists of shapes or ranges of shapes that constrain a multiarray feature."
  },
  {
    "title": "init(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlmultiarray/3763174-init",
    "html": "Parameters\nshapedArray\n\nAn MLShapedArray.\n\nSee Also\nCreating a Multiarray\ninit<C>(C)\nCreates a multiarray from a collection of integers.\ninit<C>(C)\nCreates a multiarray from a collection of floats.\ninit<C>(C)\nCreates a multiarray from a collection of doubles.\ninit(shape: [NSNumber], dataType: MLMultiArrayDataType)\nCreates a multidimensional array with a shape and type.\ninit(dataPointer: UnsafeMutableRawPointer, shape: [NSNumber], dataType: MLMultiArrayDataType, strides: [NSNumber], deallocator: ((UnsafeMutableRawPointer) -> Void)?)\nCreates a multiarray from a data pointer.\ninit(concatenating: [MLMultiArray], axis: Int, dataType: MLMultiArrayDataType)\nMerges an array of multiarrays into one multiarray along an axis.\ninit(pixelBuffer: CVPixelBuffer, shape: [NSNumber])\nCreates a multiarray sharing the surface of a pixel buffer.\nenum MLMultiArrayDataType\nConstants that define the underlying element types a multiarray can store."
  },
  {
    "title": "init(dataPointer:shape:dataType:strides:deallocator:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlmultiarray/2881219-init",
    "html": "Parameters\ndataPointer\n\nA pointer to data in memory.\n\nshape\n\nAn integer array with an element for each dimension. An element represents the size of the corresponding dimension.\n\ndataType\n\nAn MLMultiArrayDataType instance that represents the pointer’s data type.\n\nstrides\n\nAn integer array with an element for each dimension. An element represents the number of memory locations that span the length of the corresponding dimension.\n\ndeallocator\n\nA closure the multiarray calls in its deinitializer.\n\nDiscussion\n\nThe caller is responsible for freeing the memory the dataPointer points to, by providing a deallocator closure.\n\nSee Also\nCreating a Multiarray\ninit<C>(C)\nCreates a multiarray from a collection of integers.\ninit<C>(C)\nCreates a multiarray from a collection of floats.\ninit<C>(C)\nCreates a multiarray from a collection of doubles.\ninit(shape: [NSNumber], dataType: MLMultiArrayDataType)\nCreates a multidimensional array with a shape and type.\ninit<ShapedArray>(ShapedArray)\nCreates a multiarray from a shaped array.\ninit(concatenating: [MLMultiArray], axis: Int, dataType: MLMultiArrayDataType)\nMerges an array of multiarrays into one multiarray along an axis.\ninit(pixelBuffer: CVPixelBuffer, shape: [NSNumber])\nCreates a multiarray sharing the surface of a pixel buffer.\nenum MLMultiArrayDataType\nConstants that define the underlying element types a multiarray can store."
  },
  {
    "title": "MLMultiArrayDataType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlmultiarraydatatype",
    "html": "Overview\n\nAll elements of an MLMultiArray instance must be of the same type and must be defined in MLMultiArrayDataType.\n\nTopics\nMultiarray Data Types\ncase int32\nDesignates the multiarray’s elements as 32-bit integers.\ncase float16\nDesignates the multiarray’s elements as 16-bit floats.\ncase float32\nDesignates the multiarray’s elements as 32-bit floats.\ncase double\nDesignates the multiarray’s elements as doubles.\nstatic var float: MLMultiArrayDataType\nDesignates the multiarray’s elements as floats.\nstatic var float64: MLMultiArrayDataType\nDesignates the multiarray’s elements as 64-bit floats.\nRelationships\nConforms To\nSendable\nSee Also\nCreating a Multiarray\ninit<C>(C)\nCreates a multiarray from a collection of integers.\ninit<C>(C)\nCreates a multiarray from a collection of floats.\ninit<C>(C)\nCreates a multiarray from a collection of doubles.\ninit(shape: [NSNumber], dataType: MLMultiArrayDataType)\nCreates a multidimensional array with a shape and type.\ninit<ShapedArray>(ShapedArray)\nCreates a multiarray from a shaped array.\ninit(dataPointer: UnsafeMutableRawPointer, shape: [NSNumber], dataType: MLMultiArrayDataType, strides: [NSNumber], deallocator: ((UnsafeMutableRawPointer) -> Void)?)\nCreates a multiarray from a data pointer.\ninit(concatenating: [MLMultiArray], axis: Int, dataType: MLMultiArrayDataType)\nMerges an array of multiarrays into one multiarray along an axis.\ninit(pixelBuffer: CVPixelBuffer, shape: [NSNumber])\nCreates a multiarray sharing the surface of a pixel buffer."
  },
  {
    "title": "count | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlmultiarray/2879233-count",
    "html": "See Also\nInspecting a Multiarray\nvar dataType: MLMultiArrayDataType\nThe underlying type of the multiarray.\nvar shape: [NSNumber]\nThe multiarray’s multidimensional shape as a number array in which each element’s value is the size of the corresponding dimension.\nvar strides: [NSNumber]\nA number array in which each element is the number of memory locations that span the length of the corresponding dimension."
  },
  {
    "title": "dataType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlmultiarray/2879219-datatype",
    "html": "See Also\nInspecting a Multiarray\nvar count: Int\nThe total number of elements in the multiarray.\nvar shape: [NSNumber]\nThe multiarray’s multidimensional shape as a number array in which each element’s value is the size of the corresponding dimension.\nvar strides: [NSNumber]\nA number array in which each element is the number of memory locations that span the length of the corresponding dimension."
  },
  {
    "title": "MLShapedArrayScalar | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarrayscalar",
    "html": "Topics\nDetermining the Underlying Type\nstatic var multiArrayDataType: MLMultiArrayDataType\nThe shaped array’s scalar type as a multiarray data type.\n\nRequired\n\nRelationships\nConforming Types\nDouble\nFloat\nFloat16\nInt32\nSee Also\nSupporting Types\nassociatedtype Scalar\nRepresents the underlying scalar type of the shaped array type.\n\nRequired\n\nstruct MLShapedArraySlice\nA multidimensional subset of elements from a shaped array type.\nprotocol MLShapedArrayRangeExpression\nAn interface for a range expression, which you typically use with subscripts of shaped array types."
  },
  {
    "title": "init(randomScalarsIn:shape:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarray/3763238-init",
    "html": "Parameters\nrange\n\nA range of integer values.\n\nshape\n\nAn integer array. Each element represents the size of the shaped array’s corresponding dimension.\n\nSee Also\nCreating a Shaped Array\ninit(scalar: Scalar)\nCreates a shaped array with exactly one value and zero dimensions.\ninit(arrayLiteral: Scalar...)\nCreates a shaped array from a list of values.\ninit<S>(scalars: S, shape: [Int])\nCreates a shaped array from an array of values.\ninit(repeating: Scalar, shape: [Int])\nCreates a shaped array that initializes every element to the same value.\ninit(identityMatrixOfSize: Int)\nCreates a shaped array that’s an identity matrix of integers.\nAvailable when Scalar conforms to FixedWidthInteger."
  },
  {
    "title": "init(concatenating:alongAxis:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarray/3763234-init",
    "html": "Parameters\nshapedArrays\n\nA sequence of shaped arrays.\n\nalongAxis\n\nA zero-based axis number the shaped arrays in multiArray merge along.\n\nTip\n\nSelect the shaped array’s highest dimension by passing a negative axis number. For example, an axis value of -1 or -2 selects the last or second-to-last dimension, respectively.\n\nDiscussion\n\nAll shaped arrays in the sequence must have the following:\n\nThe same underlying data type\n\nThe same number of dimensions\n\nThe same size for each corresponding dimension, except for the concatenation axis\n\nFor example, this code concatenates two shaped arrays along their second dimension:\n\n// A 2x3 shaped array.\n// 0 1 2\n// 5 6 7\nlet shapedArray1 = MLShapedArray<Int32>(scalars: [0, 1, 2, 5, 6, 7],\n                                        shape: [2, 3])\n\n\n// A 2x2 shaped array.\n// 3 4\n// 8 9\nlet shapedArray2 = MLShapedArray<Int32>(scalars: [3, 4, 8, 9],\n                                        shape: [2, 2])\n\n\n// A 2x5 shaped array.\n// 0 1 2 3 4\n// 5 6 7 8 9\nlet shapedArray3 = MLShapedArray(concatenating: [shapedArray1,shapedArray2],\n                                 alongAxis: 1)\n\n\nSee Also\nCreating a Shaped Array from Another Type\ninit(MLMultiArray)\nCreates a shaped array from a multiarray.\ninit(converting: MLMultiArray)\nCreates a shaped array by converting a multiarray.\ninit<T>(converting: T)\nCreates a shaped array by converting another shaped array type."
  },
  {
    "title": "init(bytesNoCopy:shape:strides:deallocator:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarray/3763233-init",
    "html": "Parameters\nbytes\n\nAn unsafe raw pointer to the data.\n\nshape\n\nAn integer array. Each element represents the size of the shaped array’s corresponding dimension.\n\nstrides\n\nAn integer array. Each element represents the number of memory locations that span the shaped array’s corresponding dimension.\n\ndeallocator\n\nA Data.Deallocator.\n\nRelationships\nFrom Protocol\nMLShapedArrayProtocol\nSee Also\nCreating a shaped array with pointers to memory\ninit(bytesNoCopy: UnsafeRawPointer, shape: [Int], deallocator: Data.Deallocator)\nCreates a shaped array from a data pointer.\ninit(unsafeUninitializedShape: [Int], initializingWith: (inout UnsafeMutableBufferPointer<Scalar>, [Int]) -> Void)\nCreates a shaped array from a shape and a closure that initializes its memory."
  },
  {
    "title": "init(data:shape:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarray/3856536-init",
    "html": "Parameters\ndata\n\nThe block of data that holds the contents of the shaped array.\n\nshape\n\nThe shape of the array.\n\nSee Also\nCreating a shaped array from data\ninit(data: Data, shape: [Int], strides: [Int])\nCreates a shaped array from a block of data, a shape, and strides."
  },
  {
    "title": "encode(to:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarray/3931187-encode",
    "html": "Parameters\nencoder\n\nThe object to encode the shaped array.\n\nRelationships\nFrom Protocol\nEncodable\nSee Also\nEncoding and decoding\ninit(from: Decoder)\nCreates a shaped array from a decoder.\nAvailable when Scalar conforms to Decodable."
  },
  {
    "title": "init(from:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarray/3931188-init",
    "html": "Parameters\ndecoder\n\nThe decoder to read data from.\n\nDiscussion\n\nThis initializer throws an error if reading from the decoder fails, or if the data read is corrupted or otherwise invalid.\n\nRelationships\nFrom Protocol\nDecodable\nSee Also\nEncoding and decoding\nfunc encode(to: Encoder)\nEncode a shaped array.\nAvailable when Scalar conforms to Encodable."
  },
  {
    "title": "shape | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarray/3763295-shape",
    "html": "Relationships\nFrom Protocol\nMLShapedArrayProtocol\nSee Also\nInspecting a Shaped Array\nvar isScalar: Bool\nA Boolean value that indicates whether the shaped array has zero dimensions.\nvar strides: [Int]\nAn integer array in which each element is the number of memory locations that span the length of the corresponding dimension.\nvar isEmpty: Bool\nA Boolean value indicating whether the collection is empty.\nvar scalarCount: Int\nThe total number of elements in the shaped array.\nvar count: Int\nThe number of elements in the collection.\nvar underestimatedCount: Int\nA value less than or equal to the number of elements in the collection.\nvar description: String\nA text representation of the shaped array."
  },
  {
    "title": "strides | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarray/3763317-strides",
    "html": "Relationships\nFrom Protocol\nMLShapedArrayProtocol\nSee Also\nInspecting a Shaped Array\nvar isScalar: Bool\nA Boolean value that indicates whether the shaped array has zero dimensions.\nvar shape: [Int]\nAn integer array in which each element represents the size of the corresponding dimension.\nvar isEmpty: Bool\nA Boolean value indicating whether the collection is empty.\nvar scalarCount: Int\nThe total number of elements in the shaped array.\nvar count: Int\nThe number of elements in the collection.\nvar underestimatedCount: Int\nA value less than or equal to the number of elements in the collection.\nvar description: String\nA text representation of the shaped array."
  },
  {
    "title": "isEmpty | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarray/3763243-isempty",
    "html": "Discussion\n\nWhen you need to check whether your collection is empty, use the isEmpty property instead of checking that the count property is equal to zero. For collections that don’t conform to RandomAccessCollection, accessing the count property iterates through the elements of the collection.\n\nlet horseName = \"Silver\"\nif horseName.isEmpty {\n    print(\"My horse has no name.\")\n} else {\n    print(\"Hi ho, \\(horseName)!\")\n}\n// Prints \"Hi ho, Silver!\")\n\n\nComplexity: O(1)\n\nSee Also\nInspecting a Shaped Array\nvar isScalar: Bool\nA Boolean value that indicates whether the shaped array has zero dimensions.\nvar shape: [Int]\nAn integer array in which each element represents the size of the corresponding dimension.\nvar strides: [Int]\nAn integer array in which each element is the number of memory locations that span the length of the corresponding dimension.\nvar scalarCount: Int\nThe total number of elements in the shaped array.\nvar count: Int\nThe number of elements in the collection.\nvar underestimatedCount: Int\nA value less than or equal to the number of elements in the collection.\nvar description: String\nA text representation of the shaped array."
  },
  {
    "title": "count | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarray/3763189-count",
    "html": "Discussion\n\nTo check whether a collection is empty, use its isEmpty property instead of comparing count to zero. Unless the collection guarantees random-access performance, calculating count can be an O(n) operation.\n\nComplexity: O(1) if the collection conforms to RandomAccessCollection; otherwise, O(n), where n is the length of the collection.\n\nSee Also\nInspecting a Shaped Array\nvar isScalar: Bool\nA Boolean value that indicates whether the shaped array has zero dimensions.\nvar shape: [Int]\nAn integer array in which each element represents the size of the corresponding dimension.\nvar strides: [Int]\nAn integer array in which each element is the number of memory locations that span the length of the corresponding dimension.\nvar isEmpty: Bool\nA Boolean value indicating whether the collection is empty.\nvar scalarCount: Int\nThe total number of elements in the shaped array.\nvar underestimatedCount: Int\nA value less than or equal to the number of elements in the collection.\nvar description: String\nA text representation of the shaped array."
  },
  {
    "title": "scalarCount | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarray/3763293-scalarcount",
    "html": "See Also\nInspecting a Shaped Array\nvar isScalar: Bool\nA Boolean value that indicates whether the shaped array has zero dimensions.\nvar shape: [Int]\nAn integer array in which each element represents the size of the corresponding dimension.\nvar strides: [Int]\nAn integer array in which each element is the number of memory locations that span the length of the corresponding dimension.\nvar isEmpty: Bool\nA Boolean value indicating whether the collection is empty.\nvar count: Int\nThe number of elements in the collection.\nvar underestimatedCount: Int\nA value less than or equal to the number of elements in the collection.\nvar description: String\nA text representation of the shaped array."
  },
  {
    "title": "init(randomScalarsIn:shape:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarrayprotocol/3763362-init",
    "html": "Parameters\nrange\n\nA range of integer values.\n\nshape\n\nAn integer array. Each element represents the size of the shaped array’s corresponding dimension.\n\nSee Also\nCreating a Shaped Array Type\ninit<S>(scalars: S, shape: [Int])\nCreates a shaped array type from an array of values.\ninit(repeating: Self.Scalar, shape: [Int])\nCreates a shaped array type that initializes every element to the same value.\ninit(identityMatrixOfSize: Int)\nCreates a shaped array type that’s an identity matrix of integers.\nAvailable when Scalar conforms to FixedWidthInteger.\ninit(bytesNoCopy: UnsafeRawPointer, shape: [Int], deallocator: Data.Deallocator)\nCreates a shaped array type from a data pointer.\ninit(bytesNoCopy: UnsafeRawPointer, shape: [Int], strides: [Int], deallocator: Data.Deallocator)\nCreates a shaped array type from a data pointer with memory strides.\n\nRequired\n\ninit(unsafeUninitializedShape: [Int], initializingWith: (inout UnsafeMutableBufferPointer<Self.Scalar>, [Int]) -> Void)\nCreates a shaped array type from a shape and a closure that initializes its memory.\n\nRequired"
  },
  {
    "title": "init(bytesNoCopy:shape:strides:deallocator:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarrayprotocol/3763358-init",
    "html": "Required\n\nParameters\nbytes\n\nAn unsafe raw pointer to the data.\n\nshape\n\nAn integer array. Each element represents the size of the shaped array’s corresponding dimension.\n\nstrides\n\nAn integer array. Each element represents the number of memory locations that span the shaped array’s corresponding dimension.\n\ndeallocator\n\nA Data.Deallocator.\n\nSee Also\nCreating a Shaped Array Type\ninit<S>(scalars: S, shape: [Int])\nCreates a shaped array type from an array of values.\ninit(repeating: Self.Scalar, shape: [Int])\nCreates a shaped array type that initializes every element to the same value.\ninit(identityMatrixOfSize: Int)\nCreates a shaped array type that’s an identity matrix of integers.\nAvailable when Scalar conforms to FixedWidthInteger.\ninit(randomScalarsIn: Range<Self.Scalar>, shape: [Int])\nCreates a shaped array type that initializes the elements to random integer values within a range.\nAvailable when Scalar conforms to FixedWidthInteger.\ninit(bytesNoCopy: UnsafeRawPointer, shape: [Int], deallocator: Data.Deallocator)\nCreates a shaped array type from a data pointer.\ninit(unsafeUninitializedShape: [Int], initializingWith: (inout UnsafeMutableBufferPointer<Self.Scalar>, [Int]) -> Void)\nCreates a shaped array type from a shape and a closure that initializes its memory.\n\nRequired"
  },
  {
    "title": "Scalar | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarrayprotocol/3763350-scalar",
    "html": "Required\n\nSee Also\nSupporting Types\nstruct MLShapedArraySlice\nA multidimensional subset of elements from a shaped array type.\nprotocol MLShapedArrayScalar\nA type that associates a scalar with a shaped array.\nprotocol MLShapedArrayRangeExpression\nAn interface for a range expression, which you typically use with subscripts of shaped array types."
  },
  {
    "title": "init(unsafeUninitializedShape:initializingWith:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarrayprotocol/3763365-init",
    "html": "Required\n\nParameters\nshape\n\nAn integer array. Each element represents the size of the shaped array’s corresponding dimension.\n\ninitializer\n\nA closure you provide that initializes the shaped array’s underlying memory. The initializer calls your closure with a pointer to the memory and an array of strides that correspond to the shaped array’s dimensions.\n\nSee Also\nCreating a Shaped Array Type\ninit<S>(scalars: S, shape: [Int])\nCreates a shaped array type from an array of values.\ninit(repeating: Self.Scalar, shape: [Int])\nCreates a shaped array type that initializes every element to the same value.\ninit(identityMatrixOfSize: Int)\nCreates a shaped array type that’s an identity matrix of integers.\nAvailable when Scalar conforms to FixedWidthInteger.\ninit(randomScalarsIn: Range<Self.Scalar>, shape: [Int])\nCreates a shaped array type that initializes the elements to random integer values within a range.\nAvailable when Scalar conforms to FixedWidthInteger.\ninit(bytesNoCopy: UnsafeRawPointer, shape: [Int], deallocator: Data.Deallocator)\nCreates a shaped array type from a data pointer.\ninit(bytesNoCopy: UnsafeRawPointer, shape: [Int], strides: [Int], deallocator: Data.Deallocator)\nCreates a shaped array type from a data pointer with memory strides.\n\nRequired"
  },
  {
    "title": "init(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarrayprotocol/3821244-init",
    "html": "Parameters\nmultiArray\n\nAn MLMultiArray with the same underlying type as the shaped array type.\n\nSee Also\nCreating a Shaped Array Type from Another Type\ninit(converting: MLMultiArray)\nCreates a shaped array type by converting a multiarray.\ninit<T>(converting: T)\nCreates a shaped array type by converting another shaped array type."
  },
  {
    "title": "init(converting:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarrayprotocol/3821246-init",
    "html": "Parameters\nsource\n\nAn instance with a type that conforms to MLShapedArrayProtocol.\n\nSee Also\nCreating a Shaped Array Type from Another Type\ninit(MLMultiArray)\nCreates a shaped array type from a multiarray.\ninit(converting: MLMultiArray)\nCreates a shaped array type by converting a multiarray."
  },
  {
    "title": "strides | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarrayprotocol/3763371-strides",
    "html": "Required\n\nSee Also\nInspecting a Shaped Array Type\nvar shape: [Int]\nAn integer array in which each element represents the size of the corresponding dimension.\n\nRequired\n\nvar count: Int\nThe number of elements in the shaped array’s first dimension.\nvar isScalar: Bool\nA Boolean value that indicates whether the shaped array lacks a shape.\nvar scalarCount: Int\nThe total number of elements in the shaped array type.\nvar scalar: Self.Scalar?\nA computed property that returns the first element when the shape isn’t empty, or sets the shaped array’s underlying scalar type.\nvar scalars: [Self.Scalar]\nA computed property that generates a linear array that contains every element, or assigns the elements of an array to the shaped array’s elements.\nfunc withUnsafeShapedBufferPointer<R>((UnsafeBufferPointer<Self.Scalar>, [Int], [Int]) -> R) -> R\nProvides read-only access of the shaped array’s underlying memory to a closure.\n\nRequired"
  },
  {
    "title": "count | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarrayprotocol/3763351-count",
    "html": "See Also\nInspecting a Shaped Array Type\nvar shape: [Int]\nAn integer array in which each element represents the size of the corresponding dimension.\n\nRequired\n\nvar strides: [Int]\nAn integer array in which each element is the number of memory locations that spans the length of the corresponding dimension.\n\nRequired\n\nvar isScalar: Bool\nA Boolean value that indicates whether the shaped array lacks a shape.\nvar scalarCount: Int\nThe total number of elements in the shaped array type.\nvar scalar: Self.Scalar?\nA computed property that returns the first element when the shape isn’t empty, or sets the shaped array’s underlying scalar type.\nvar scalars: [Self.Scalar]\nA computed property that generates a linear array that contains every element, or assigns the elements of an array to the shaped array’s elements.\nfunc withUnsafeShapedBufferPointer<R>((UnsafeBufferPointer<Self.Scalar>, [Int], [Int]) -> R) -> R\nProvides read-only access of the shaped array’s underlying memory to a closure.\n\nRequired"
  },
  {
    "title": "scalarCount | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarrayprotocol/3763368-scalarcount",
    "html": "See Also\nInspecting a Shaped Array Type\nvar shape: [Int]\nAn integer array in which each element represents the size of the corresponding dimension.\n\nRequired\n\nvar strides: [Int]\nAn integer array in which each element is the number of memory locations that spans the length of the corresponding dimension.\n\nRequired\n\nvar count: Int\nThe number of elements in the shaped array’s first dimension.\nvar isScalar: Bool\nA Boolean value that indicates whether the shaped array lacks a shape.\nvar scalar: Self.Scalar?\nA computed property that returns the first element when the shape isn’t empty, or sets the shaped array’s underlying scalar type.\nvar scalars: [Self.Scalar]\nA computed property that generates a linear array that contains every element, or assigns the elements of an array to the shaped array’s elements.\nfunc withUnsafeShapedBufferPointer<R>((UnsafeBufferPointer<Self.Scalar>, [Int], [Int]) -> R) -> R\nProvides read-only access of the shaped array’s underlying memory to a closure.\n\nRequired"
  },
  {
    "title": "isScalar | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarrayprotocol/3763366-isscalar",
    "html": "Discussion\n\nThe value is equivalent to shape.isEmpty.\n\nSee Also\nInspecting a Shaped Array Type\nvar shape: [Int]\nAn integer array in which each element represents the size of the corresponding dimension.\n\nRequired\n\nvar strides: [Int]\nAn integer array in which each element is the number of memory locations that spans the length of the corresponding dimension.\n\nRequired\n\nvar count: Int\nThe number of elements in the shaped array’s first dimension.\nvar scalarCount: Int\nThe total number of elements in the shaped array type.\nvar scalar: Self.Scalar?\nA computed property that returns the first element when the shape isn’t empty, or sets the shaped array’s underlying scalar type.\nvar scalars: [Self.Scalar]\nA computed property that generates a linear array that contains every element, or assigns the elements of an array to the shaped array’s elements.\nfunc withUnsafeShapedBufferPointer<R>((UnsafeBufferPointer<Self.Scalar>, [Int], [Int]) -> R) -> R\nProvides read-only access of the shaped array’s underlying memory to a closure.\n\nRequired"
  },
  {
    "title": "scalar | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarrayprotocol/3763367-scalar",
    "html": "See Also\nInspecting a Shaped Array Type\nvar shape: [Int]\nAn integer array in which each element represents the size of the corresponding dimension.\n\nRequired\n\nvar strides: [Int]\nAn integer array in which each element is the number of memory locations that spans the length of the corresponding dimension.\n\nRequired\n\nvar count: Int\nThe number of elements in the shaped array’s first dimension.\nvar isScalar: Bool\nA Boolean value that indicates whether the shaped array lacks a shape.\nvar scalarCount: Int\nThe total number of elements in the shaped array type.\nvar scalars: [Self.Scalar]\nA computed property that generates a linear array that contains every element, or assigns the elements of an array to the shaped array’s elements.\nfunc withUnsafeShapedBufferPointer<R>((UnsafeBufferPointer<Self.Scalar>, [Int], [Int]) -> R) -> R\nProvides read-only access of the shaped array’s underlying memory to a closure.\n\nRequired"
  },
  {
    "title": "MLShapedArray.Iterator | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarray/iterator",
    "html": "See Also\nSupporting Types\ntypealias MLShapedArray.Element\nA type that defines the shaped array’s elements.\ntypealias MLShapedArray.Index\nA type that defines the shaped array’s indices.\ntypealias MLShapedArray.Indices\nA type that defines the shaped array’s index ranges.\ntypealias MLShapedArray.SubSequence\nA type that defines the shaped array’s slices.\ntypealias MLShapedArray.ArrayLiteralElement\nA type that restricts the elements of an array literal that initializes the shaped array.\nShaped Array Collection Operations"
  },
  {
    "title": "MLModelError.Code.modelDecryptionKeyFetch | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlmodelerror/code/modeldecryptionkeyfetch",
    "html": "Discussion\n\nCore ML typically throws this error when the device doesn’t have access to the network.\n\nSee Also\nError Codes\ncase featureType\nAn error code for problems related to model features.\ncase parameters\nAn error code for problems related to model parameters.\ncase modelCollection\nAn error code for problems related to retrieving a model collection from the deployment system.\ncase modelDecryption\nAn error code for problems related to decrypting models.\ncase update\nAn error code for problems related to on-device model updates.\ncase customLayer\nAn error code for problems related to custom layers.\ncase customModel\nAn error code for problems related to custom models.\ncase io\nAn error code for problems related to the system’s input or output.\ncase predictionCancelled\nAn error code for problems related to canceling the prediction before it completes.\ncase generic\nAn error code for runtime issues that don’t apply to the other error codes."
  },
  {
    "title": "MLModelError.Code.modelDecryption | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlmodelerror/code/modeldecryption",
    "html": "Discussion\n\nCore ML typically throws this error when the framework can’t decrypt a model.\n\nSee Also\nError Codes\ncase featureType\nAn error code for problems related to model features.\ncase parameters\nAn error code for problems related to model parameters.\ncase modelCollection\nAn error code for problems related to retrieving a model collection from the deployment system.\ncase modelDecryptionKeyFetch\nAn error code for problems related to retrieving a model’s decryption key.\ncase update\nAn error code for problems related to on-device model updates.\ncase customLayer\nAn error code for problems related to custom layers.\ncase customModel\nAn error code for problems related to custom models.\ncase io\nAn error code for problems related to the system’s input or output.\ncase predictionCancelled\nAn error code for problems related to canceling the prediction before it completes.\ncase generic\nAn error code for runtime issues that don’t apply to the other error codes."
  },
  {
    "title": "withUnsafeShapedBufferPointer(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarray/3763348-withunsafeshapedbufferpointer",
    "html": "Parameters\nbody\n\nA closure that inspects a shaped array’s underlying memory.\n\npt\n\nA pointer to the shaped array.\n\nshape\n\nAn integer array in which each element represents the size of the corresponding dimension.\n\nstrides\n\nAn integer array in which each element is the number of memory locations that spans the length of the corresponding dimension.\n\nDiscussion\n\nThe method returns the value your closure returns, if applicable.\n\nRelationships\nFrom Protocol\nMLShapedArrayProtocol"
  },
  {
    "title": "==(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarray/4135002",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nSee Also\nComparing Shaped Arrays\nstatic func != (MLShapedArray<Scalar>, MLShapedArray<Scalar>) -> Bool\nReturns a Boolean value that indicates whether two values are not equal.\nAvailable when Scalar conforms to Equatable."
  },
  {
    "title": "fill(with:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarray/3763203-fill",
    "html": "Parameters\nvalue\n\nA scalar value.\n\nSee Also\nModifying a Shaped Array\nfunc fill<C>(with: C)\nAssigns the shaped array’s elements to the elements in a collection, repeatedly, if necessary.\nfunc withUnsafeMutableShapedBufferPointer<R>((inout UnsafeMutableBufferPointer<Scalar>, [Int], [Int]) -> R) -> R\nProvides a closure with a read-write pointer to the shaped array’s underlying memory."
  },
  {
    "title": "fill(with:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarray/3763204-fill",
    "html": "Parameters\ncollection\n\nA collection of scalar values.\n\nDiscussion\n\nThe method assigns the shaped array’s elements in first-major order — an equivalent to row-major order for arrays with three or more dimensions. The method repeatedly uses elements in collection, in order, if the shaped array has more elements than collection.\n\nSee Also\nModifying a Shaped Array\nfunc fill(with: Scalar)\nSets all the shaped array’s elements to a scalar value.\nfunc withUnsafeMutableShapedBufferPointer<R>((inout UnsafeMutableBufferPointer<Scalar>, [Int], [Int]) -> R) -> R\nProvides a closure with a read-write pointer to the shaped array’s underlying memory."
  },
  {
    "title": "MLModelError.Code.generic | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlmodelerror/code/generic",
    "html": "Discussion\n\nCore ML typically throws this error when it encounters an internal problem.\n\nSee Also\nError Codes\ncase featureType\nAn error code for problems related to model features.\ncase parameters\nAn error code for problems related to model parameters.\ncase modelCollection\nAn error code for problems related to retrieving a model collection from the deployment system.\ncase modelDecryptionKeyFetch\nAn error code for problems related to retrieving a model’s decryption key.\ncase modelDecryption\nAn error code for problems related to decrypting models.\ncase update\nAn error code for problems related to on-device model updates.\ncase customLayer\nAn error code for problems related to custom layers.\ncase customModel\nAn error code for problems related to custom models.\ncase io\nAn error code for problems related to the system’s input or output.\ncase predictionCancelled\nAn error code for problems related to canceling the prediction before it completes."
  },
  {
    "title": "MLModelError.Code.predictionCancelled | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlmodelerror/code/predictioncancelled",
    "html": "See Also\nError Codes\ncase featureType\nAn error code for problems related to model features.\ncase parameters\nAn error code for problems related to model parameters.\ncase modelCollection\nAn error code for problems related to retrieving a model collection from the deployment system.\ncase modelDecryptionKeyFetch\nAn error code for problems related to retrieving a model’s decryption key.\ncase modelDecryption\nAn error code for problems related to decrypting models.\ncase update\nAn error code for problems related to on-device model updates.\ncase customLayer\nAn error code for problems related to custom layers.\ncase customModel\nAn error code for problems related to custom models.\ncase io\nAn error code for problems related to the system’s input or output.\ncase generic\nAn error code for runtime issues that don’t apply to the other error codes."
  },
  {
    "title": "isEqual(to:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlmodelcollection/entry/3563966-isequal",
    "html": "Parameters\nentry\n\nAnother model collection entry."
  },
  {
    "title": "subscript(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarray/3763318-subscript",
    "html": "Parameters\nindex\n\nAn integer index.\n\nRelationships\nFrom Protocol\nBidirectionalCollection\nCollection\nMutableCollection\nRandomAccessCollection\nSee Also\nAccessing a Slice from the First Dimension\nsubscript(Range<Int>) -> MLShapedArraySlice<Scalar>\nAccesses a slice with a range in the shaped array’s first dimension.\nsubscript<R>(R) -> MLShapedArraySlice<Scalar>\nAccesses a slice with an integer range expression in the shaped array’s first dimension.\nsubscript(MLShapedArrayRangeExpression) -> MLShapedArraySlice<Scalar>\nAccesses a slice with a shaped-array range expression in the shaped array’s first dimension.\nsubscript((UnboundedRange_) -> Void) -> MLShapedArraySlice<Scalar>\nAccesses a slice with an unbounded range in the shaped array’s first dimension.\nsubscript((UnboundedRange_) -> ()) -> MLShapedArraySlice<Scalar>\nAccesses a slice with an unbounded range in the shaped array’s first dimension."
  },
  {
    "title": "scalars | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarray/3763294-scalars",
    "html": "See Also\nAccessing an Element\nvar scalar: Scalar?\nA computed property that returns the first element when the shape isn’t empty, or sets the shaped array’s underlying scalar type.\nsubscript(scalarAt: Int...) -> Scalar\nAccesses an element in the shaped array using a list of indices that represent a multidimensional location.\nsubscript<C>(scalarAt: C) -> Scalar\nAccesses an element in the shaped array using a collection of indices that represent a multidimensional location."
  },
  {
    "title": "subscript(scalarAt:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarray/3763335-subscript",
    "html": "Parameters\nindices\n\nAn integer collection in which each element is an index in the corresponding dimension.\n\nRelationships\nFrom Protocol\nMLShapedArrayProtocol\nSee Also\nAccessing an Element\nvar scalar: Scalar?\nA computed property that returns the first element when the shape isn’t empty, or sets the shaped array’s underlying scalar type.\nvar scalars: [Scalar]\nA computed property that generates a linear array that contains every element, or assigns the elements of an array to the shaped array’s elements.\nsubscript(scalarAt: Int...) -> Scalar\nAccesses an element in the shaped array using a list of indices that represent a multidimensional location."
  },
  {
    "title": "subscript(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarray/3763327-subscript",
    "html": "Parameters\nr\n\nAn integer range expression.\n\nSee Also\nAccessing a Slice from the First Dimension\nsubscript(Int) -> MLShapedArraySlice<Scalar>\nAccesses a slice at an index in the shaped array’s first dimension.\nsubscript(Range<Int>) -> MLShapedArraySlice<Scalar>\nAccesses a slice with a range in the shaped array’s first dimension.\nsubscript(MLShapedArrayRangeExpression) -> MLShapedArraySlice<Scalar>\nAccesses a slice with a shaped-array range expression in the shaped array’s first dimension.\nsubscript((UnboundedRange_) -> Void) -> MLShapedArraySlice<Scalar>\nAccesses a slice with an unbounded range in the shaped array’s first dimension.\nsubscript((UnboundedRange_) -> ()) -> MLShapedArraySlice<Scalar>\nAccesses a slice with an unbounded range in the shaped array’s first dimension."
  },
  {
    "title": "description | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarray/3763190-description",
    "html": "Relationships\nFrom Protocol\nCustomStringConvertible\nSee Also\nInspecting a Shaped Array\nvar isScalar: Bool\nA Boolean value that indicates whether the shaped array has zero dimensions.\nvar shape: [Int]\nAn integer array in which each element represents the size of the corresponding dimension.\nvar strides: [Int]\nAn integer array in which each element is the number of memory locations that span the length of the corresponding dimension.\nvar isEmpty: Bool\nA Boolean value indicating whether the collection is empty.\nvar scalarCount: Int\nThe total number of elements in the shaped array.\nvar count: Int\nThe number of elements in the collection.\nvar underestimatedCount: Int\nA value less than or equal to the number of elements in the collection."
  },
  {
    "title": "subscript(scalarAt:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarray/3763336-subscript",
    "html": "Parameters\nindices\n\nA comma-separated, or variadic, list of integers in which each integer is an index in the corresponding dimension.\n\nSee Also\nAccessing an Element\nvar scalar: Scalar?\nA computed property that returns the first element when the shape isn’t empty, or sets the shaped array’s underlying scalar type.\nvar scalars: [Scalar]\nA computed property that generates a linear array that contains every element, or assigns the elements of an array to the shaped array’s elements.\nsubscript<C>(scalarAt: C) -> Scalar\nAccesses an element in the shaped array using a collection of indices that represent a multidimensional location."
  },
  {
    "title": "subscript(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarray/3763324-subscript",
    "html": "Parameters\nsliceRange\n\nAn integer range.\n\nSee Also\nAccessing a Slice from the First Dimension\nsubscript(Int) -> MLShapedArraySlice<Scalar>\nAccesses a slice at an index in the shaped array’s first dimension.\nsubscript<R>(R) -> MLShapedArraySlice<Scalar>\nAccesses a slice with an integer range expression in the shaped array’s first dimension.\nsubscript(MLShapedArrayRangeExpression) -> MLShapedArraySlice<Scalar>\nAccesses a slice with a shaped-array range expression in the shaped array’s first dimension.\nsubscript((UnboundedRange_) -> Void) -> MLShapedArraySlice<Scalar>\nAccesses a slice with an unbounded range in the shaped array’s first dimension.\nsubscript((UnboundedRange_) -> ()) -> MLShapedArraySlice<Scalar>\nAccesses a slice with an unbounded range in the shaped array’s first dimension."
  },
  {
    "title": "scalar | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarray/3763292-scalar",
    "html": "See Also\nAccessing an Element\nvar scalars: [Scalar]\nA computed property that generates a linear array that contains every element, or assigns the elements of an array to the shaped array’s elements.\nsubscript(scalarAt: Int...) -> Scalar\nAccesses an element in the shaped array using a list of indices that represent a multidimensional location.\nsubscript<C>(scalarAt: C) -> Scalar\nAccesses an element in the shaped array using a collection of indices that represent a multidimensional location."
  },
  {
    "title": "outputShapes(forInputShapes:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlcustomlayer/2935525-outputshapes",
    "html": "Required\n\nParameters\ninputShapes\n\nThe shapes of the input for this layer.\n\nReturn Value\n\nThe shapes of the output for the given input shapes.\n\nDiscussion\n\nImplement this method to define the layer's interface with the rest of the network. It will be called at least once at load time and any time the size of the inputs changes in a call to prediction(from:).\n\nThis method consumes and returns arrays of shapes, for inputs and outputs of the custom layer, respectively. See the Core ML Neural Network specification for more details about shapes and how layers use them.\n\nSee Also\nIntegrating a Layer\nfunc setWeightData([Data])\nAssigns the weights for the connections within the layer.\n\nRequired"
  },
  {
    "title": "shuffle | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlparameterkey/3333253-shuffle",
    "html": "Discussion\n\nThe value type for the shuffle key is an Bool.\n\nSee Also\nAccessing Model Update Parameters\nclass var learningRate: MLParameterKey\nThe key you use to access the optimizer’s learning rate parameter.\nclass var momentum: MLParameterKey\nThe key you use to access the stochastic gradient descent (SGD) optimizer’s momentum parameter.\nclass var miniBatchSize: MLParameterKey\nThe key you use to access the optimizer’s mini batch-size parameter.\nclass var beta1: MLParameterKey\nThe key you use to access the Adam optimizer’s first beta parameter.\nclass var beta2: MLParameterKey\nThe key you use to access the Adam optimizer’s second beta parameter.\nclass var eps: MLParameterKey\nThe key you use to access the Adam optimizer’s epsilon parameter.\nclass var epochs: MLParameterKey\nThe key you use to access the optimizer’s epochs parameter.\nclass var seed: MLParameterKey\nThe key you use to access the seed parameter that initializes the random number generator for the shuffle option."
  },
  {
    "title": "linkedModelSearchPath | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlparameterkey/3227894-linkedmodelsearchpath",
    "html": "Discussion\n\nThe value type for the linkedModelSearchPath key is a String.\n\nSee Also\nAccessing Model Parameters\nclass var numberOfNeighbors: MLParameterKey\nThe key you use to access the number of neighbors that adjusts the affinity of a k-nearest-neighbor model.\nclass var linkedModelFileName: MLParameterKey\nThe key you use to access the linked model’s filename."
  },
  {
    "title": "withUnsafeShapedBufferPointer(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarrayprotocol/3763384-withunsafeshapedbufferpointer",
    "html": "Required\n\nParameters\nbody\n\nA closure that inspects a shaped array’s underlying memory.\n\nDiscussion\n\nThe method returns the value your closure returns, if applicable.\n\nSee Also\nInspecting a Shaped Array Type\nvar shape: [Int]\nAn integer array in which each element represents the size of the corresponding dimension.\n\nRequired\n\nvar strides: [Int]\nAn integer array in which each element is the number of memory locations that spans the length of the corresponding dimension.\n\nRequired\n\nvar count: Int\nThe number of elements in the shaped array’s first dimension.\nvar isScalar: Bool\nA Boolean value that indicates whether the shaped array lacks a shape.\nvar scalarCount: Int\nThe total number of elements in the shaped array type.\nvar scalar: Self.Scalar?\nA computed property that returns the first element when the shape isn’t empty, or sets the shaped array’s underlying scalar type.\nvar scalars: [Self.Scalar]\nA computed property that generates a linear array that contains every element, or assigns the elements of an array to the shaped array’s elements."
  },
  {
    "title": "fill(with:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarrayprotocol/3763352-fill",
    "html": "Parameters\nvalue\n\nA scalar value.\n\nSee Also\nModifying a Shaped Array Type\nfunc fill<C>(with: C)\nAssigns the shaped array’s elements to the elements in a collection, repeatedly, if necessary.\nfunc withUnsafeMutableShapedBufferPointer<R>((inout UnsafeMutableBufferPointer<Self.Scalar>, [Int], [Int]) -> R) -> R\nProvides read-write access of the shaped array’s underlying memory to a closure.\n\nRequired"
  },
  {
    "title": "scalars | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarrayprotocol/3763369-scalars",
    "html": "See Also\nInspecting a Shaped Array Type\nvar shape: [Int]\nAn integer array in which each element represents the size of the corresponding dimension.\n\nRequired\n\nvar strides: [Int]\nAn integer array in which each element is the number of memory locations that spans the length of the corresponding dimension.\n\nRequired\n\nvar count: Int\nThe number of elements in the shaped array’s first dimension.\nvar isScalar: Bool\nA Boolean value that indicates whether the shaped array lacks a shape.\nvar scalarCount: Int\nThe total number of elements in the shaped array type.\nvar scalar: Self.Scalar?\nA computed property that returns the first element when the shape isn’t empty, or sets the shaped array’s underlying scalar type.\nfunc withUnsafeShapedBufferPointer<R>((UnsafeBufferPointer<Self.Scalar>, [Int], [Int]) -> R) -> R\nProvides read-only access of the shaped array’s underlying memory to a closure.\n\nRequired"
  },
  {
    "title": "subscript(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarrayprotocol/3763379-subscript",
    "html": "Required\n\nParameters\nindices\n\nAn integer collection that represents a position in the shaped array in which each integer is an index in the corresponding dimension.\n\nSee Also\nAccessing Elements\nsubscript<C>(scalarAt: C) -> Self.Scalar\nAccesses an element and a multidimensional location.\n\nRequired Default implementation provided.\n\nsubscript<C>(C) -> MLShapedArraySlice<Self.Scalar>\nAccesses a slice using a collection of integer ranges, in which each element is a range in the corresponding dimension.\n\nRequired Default implementations provided."
  },
  {
    "title": "init(forEvents:progressHandler:completionHandler:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlupdateprogresshandlers/3294204-init",
    "html": "Parameters\ninterestedEvents\n\nThe events for which the update task will call your closures for, contained in an option set.\n\nprogressHandler\n\nThe closure an update task uses to notify your app. The update task only uses this closure for the events you specified in interestedEvents.\n\ncompletionHandler\n\nThe closure that an update tasks uses to notify you when it is complete.\n\nSee Also\nCreating Progress Handlers\nstruct MLUpdateProgressEvent\nA type of event during a model update task.\nclass MLUpdateContext\nThe context an update task provides to your app’s completion and update progress handlers."
  },
  {
    "title": "subscript(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarrayprotocol/3763380-subscript",
    "html": "Required Default implementations provided.\n\nParameters\nindices\n\nAn integer range collection in which each range represents a selection of indices in the corresponding dimension.\n\nDefault Implementations\nMLShapedArrayProtocol Implementations\nsubscript(MLShapedArrayRangeExpression) -> MLShapedArraySlice<Self.Scalar>\nsubscript(MLShapedArrayRangeExpression...) -> MLShapedArraySlice<Self.Scalar>\nsubscript(Int) -> MLShapedArraySlice<Self.Scalar>\nsubscript(Int...) -> MLShapedArraySlice<Self.Scalar>\nsubscript(Range<Int>) -> MLShapedArraySlice<Self.Scalar>\nsubscript<C>(C) -> MLShapedArraySlice<Self.Scalar>\nsubscript((UnboundedRange_) -> Void) -> MLShapedArraySlice<Self.Scalar>\nSee Also\nAccessing Elements\nsubscript<C>(scalarAt: C) -> Self.Scalar\nAccesses an element and a multidimensional location.\n\nRequired Default implementation provided.\n\nsubscript<C>(C) -> MLShapedArraySlice<Self.Scalar>\nAccesses a slice using a collection of integers, in which each element is an index in the corresponding dimension.\n\nRequired"
  },
  {
    "title": "fill(with:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarrayprotocol/3763353-fill",
    "html": "Parameters\ncollection\n\nA collection of elements.\n\nDiscussion\n\nThe shaped array assigns the collection’s elements in first-major order, which is equivalent to row-major order for two-dimensional arrays.\n\nSee Also\nModifying a Shaped Array Type\nfunc fill(with: Self.Scalar)\nAssigns the shaped array’s elements to a value.\nfunc withUnsafeMutableShapedBufferPointer<R>((inout UnsafeMutableBufferPointer<Self.Scalar>, [Int], [Int]) -> R) -> R\nProvides read-write access of the shaped array’s underlying memory to a closure.\n\nRequired"
  },
  {
    "title": "epochEnd | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlupdateprogressevent/3180101-epochend",
    "html": "See Also\nGetting Progress Event Types\nstatic var trainingBegin: MLUpdateProgressEvent\nAn event that represents the start of training.\nstatic var miniBatchEnd: MLUpdateProgressEvent\nAn event that represents the end of a mini-batch within a training epoch."
  },
  {
    "title": "init(rawValue:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlupdateprogressevent/3180266-init",
    "html": "Discussion\n\nYou do not use this initializer directly. Get update event types from the type properties, such as trainingBegin, miniBatchEnd, or epochEnd."
  },
  {
    "title": "miniBatchEnd | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlupdateprogressevent/3180102-minibatchend",
    "html": "See Also\nGetting Progress Event Types\nstatic var trainingBegin: MLUpdateProgressEvent\nAn event that represents the start of training.\nstatic var epochEnd: MLUpdateProgressEvent\nAn event that represents the end of training epoch."
  },
  {
    "title": "init(rawValue:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlfeaturevalue/imageoption/3200246-init",
    "html": "Parameters\nrawValue\n\nA string that represents the name of the image feature option key.\n\nDiscussion\n\nDon’t use this initializer directly. Create an image option key with cropAndScale or cropRect instead.\n\nSee Also\nImage Option Key Initializers\ninit(String)\nCreates an image feature option key from a string."
  },
  {
    "title": "init(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlfeaturevalue/imageoption/3200245-init",
    "html": "Parameters\nrawValue\n\nA string that represents the name of the image feature option key.\n\nDiscussion\n\nDon’t use this initializer directly. Create an image option key with cropAndScale or cropRect instead.\n\nSee Also\nImage Option Key Initializers\ninit(rawValue: String)\nCreates an image feature option key from a raw value string."
  },
  {
    "title": "init(dictionary:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mldictionaryfeatureprovider/2879366-init",
    "html": "Parameters\ndictionary\n\nThe dictionary of feature names and feature values."
  },
  {
    "title": "description | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlmodelmetadatakey/2879380-description",
    "html": "See Also\nMetadata Keys\nstatic let author: MLModelMetadataKey\nKey for the author of the model.\nstatic let license: MLModelMetadataKey\nKey for the license of the model.\nstatic let versionString: MLModelMetadataKey\nKey for the version of the model.\nstatic let creatorDefinedKey: MLModelMetadataKey\nKey for the model creator’s custom metadata."
  },
  {
    "title": "license | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlmodelmetadatakey/2879344-license",
    "html": "See Also\nMetadata Keys\nstatic let author: MLModelMetadataKey\nKey for the author of the model.\nstatic let description: MLModelMetadataKey\nKey for the overall description of the model.\nstatic let versionString: MLModelMetadataKey\nKey for the version of the model.\nstatic let creatorDefinedKey: MLModelMetadataKey\nKey for the model creator’s custom metadata."
  },
  {
    "title": "versionString | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlmodelmetadatakey/2879367-versionstring",
    "html": "See Also\nMetadata Keys\nstatic let author: MLModelMetadataKey\nKey for the author of the model.\nstatic let description: MLModelMetadataKey\nKey for the overall description of the model.\nstatic let license: MLModelMetadataKey\nKey for the license of the model.\nstatic let creatorDefinedKey: MLModelMetadataKey\nKey for the model creator’s custom metadata."
  },
  {
    "title": "creatorDefinedKey | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlmodelmetadatakey/2923322-creatordefinedkey",
    "html": "Discussion\n\nThis key provides read-only access to custom metadata about the model, generated by the model’s author. The custom metadata is a dictionary of type [String: String].\n\nThis key corresponds to the userDefined field specified in the Core ML Model Specification.\n\nSee Also\nMetadata Keys\nstatic let author: MLModelMetadataKey\nKey for the author of the model.\nstatic let description: MLModelMetadataKey\nKey for the overall description of the model.\nstatic let license: MLModelMetadataKey\nKey for the license of the model.\nstatic let versionString: MLModelMetadataKey\nKey for the version of the model."
  },
  {
    "title": "shapeConstraint | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlmultiarrayconstraint/2994311-shapeconstraint",
    "html": "See Also\nAccessing the Constraints\nvar shape: [NSNumber]\nThe shape of the multi array.\nvar dataType: MLMultiArrayDataType\nThe type for the multi array.\nclass MLMultiArrayShapeConstraint\nThe lists of shapes or ranges of shapes that constrain a multiarray feature."
  },
  {
    "title": "init(shape:dataType:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlmultiarray/2879232-init",
    "html": "Parameters\nshape\n\nAn integer array that has an element for each dimension in a multiarray that represents its length.\n\ndataType\n\nAn element type defined by MLMultiArrayDataType.\n\nDiscussion\n\nThis method allocates a contiguous region of memory for the multiarray’s shape. You must set the contents of memory. The multiarray frees the memory in its deinitializer.\n\nThe following code creates a 3 x 3 multiarray and sets its contents to the value 3.14159.\n\n// Create a 2D multiarray with dimension 3 x 3.\nlet shape3x3 = [3, 3] as [NSNumber]\n\n\nguard let multiarray3x3 = try? MLMultiArray(shape: shape3x3, dataType: .float) else {\n    // Handle the error.\n    return\n}\n\n\nprint(\"Before: \\(multiarray3x3)\")\n\n\n// Initialize the multiarray.\nfor xCoordinate in 0..<3 {\n    for yCoordinate in 0..<3 {\n        let key = [xCoordinate, yCoordinate] as [NSNumber]\n        multiarray3x3[key] = 3.141_59\n    }\n}\n\n\nprint(\"After: \\(multiarray3x3)\")\n\n\n\n\nSee Also\nCreating a Multiarray\ninit<C>(C)\nCreates a multiarray from a collection of integers.\ninit<C>(C)\nCreates a multiarray from a collection of floats.\ninit<C>(C)\nCreates a multiarray from a collection of doubles.\ninit<ShapedArray>(ShapedArray)\nCreates a multiarray from a shaped array.\ninit(dataPointer: UnsafeMutableRawPointer, shape: [NSNumber], dataType: MLMultiArrayDataType, strides: [NSNumber], deallocator: ((UnsafeMutableRawPointer) -> Void)?)\nCreates a multiarray from a data pointer.\ninit(concatenating: [MLMultiArray], axis: Int, dataType: MLMultiArrayDataType)\nMerges an array of multiarrays into one multiarray along an axis.\ninit(pixelBuffer: CVPixelBuffer, shape: [NSNumber])\nCreates a multiarray sharing the surface of a pixel buffer.\nenum MLMultiArrayDataType\nConstants that define the underlying element types a multiarray can store."
  },
  {
    "title": "init(concatenating:axis:dataType:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlmultiarray/3563973-init",
    "html": "Parameters\nmultiArrays\n\nAn MLMultiArray array.\n\naxis\n\nA zero-based axis number the instances in multiArray merge along.\n\ndataType\n\nAn MLMultiArrayDataType instance that represents the underlying type of all the instances in multiArrays.\n\nDiscussion\n\nAll multiarray instances in multiArrays must have:\n\nThe same data type\n\nThe same number of dimensions\n\nThe same size for each corresponding dimension, except for the concatenation axis\n\nFor example, this code concatenates two multiarrays along their first dimension:\n\nlet multiarray1 = try MLMultiArray(shape: [1, 5, 7], dataType: .int32)\nlet multiarray2 = try MLMultiArray(shape: [2, 5, 7], dataType: .int32)\n\n\n// Merge the two multiarrays along the first dimension.\nlet multiArray3 = MLMultiArray(concatenating: [multiarray1, multiarray2],\n                               axis: 0,\n                               dataType: .int32)\n\n\nassert(multiArray3.shape == [3, 5, 7])\n\n\nSee Also\nCreating a Multiarray\ninit<C>(C)\nCreates a multiarray from a collection of integers.\ninit<C>(C)\nCreates a multiarray from a collection of floats.\ninit<C>(C)\nCreates a multiarray from a collection of doubles.\ninit(shape: [NSNumber], dataType: MLMultiArrayDataType)\nCreates a multidimensional array with a shape and type.\ninit<ShapedArray>(ShapedArray)\nCreates a multiarray from a shaped array.\ninit(dataPointer: UnsafeMutableRawPointer, shape: [NSNumber], dataType: MLMultiArrayDataType, strides: [NSNumber], deallocator: ((UnsafeMutableRawPointer) -> Void)?)\nCreates a multiarray from a data pointer.\ninit(pixelBuffer: CVPixelBuffer, shape: [NSNumber])\nCreates a multiarray sharing the surface of a pixel buffer.\nenum MLMultiArrayDataType\nConstants that define the underlying element types a multiarray can store."
  },
  {
    "title": "init(pixelBuffer:shape:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlmultiarray/3882834-init",
    "html": "Parameters\npixelBuffer\n\nThe pixel buffer owned by the instance.\n\nshape\n\nThe shape of the MLMultiArray. The last dimension of shape must match the pixel buffer’s width. The product of the rest of the dimensions must match the height.\n\nDiscussion\n\nUse this initializer to create an IOSurface-backed MLMultiArray that reduces the inference latency by avoiding the buffer copy to and from some compute units.\n\nThe instance will own the pixel buffer and release it on the deallocation.\n\nThe pixel buffer’s pixel format type must be kCVPixelFormatType_OneComponent16Half. The MLMultiArray data type is MLMultiArrayDataType.float16.\n\nSee Also\nCreating a Multiarray\ninit<C>(C)\nCreates a multiarray from a collection of integers.\ninit<C>(C)\nCreates a multiarray from a collection of floats.\ninit<C>(C)\nCreates a multiarray from a collection of doubles.\ninit(shape: [NSNumber], dataType: MLMultiArrayDataType)\nCreates a multidimensional array with a shape and type.\ninit<ShapedArray>(ShapedArray)\nCreates a multiarray from a shaped array.\ninit(dataPointer: UnsafeMutableRawPointer, shape: [NSNumber], dataType: MLMultiArrayDataType, strides: [NSNumber], deallocator: ((UnsafeMutableRawPointer) -> Void)?)\nCreates a multiarray from a data pointer.\ninit(concatenating: [MLMultiArray], axis: Int, dataType: MLMultiArrayDataType)\nMerges an array of multiarrays into one multiarray along an axis.\nenum MLMultiArrayDataType\nConstants that define the underlying element types a multiarray can store."
  },
  {
    "title": "init(unsafeUninitializedShape:initializingWith:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarray/3763242-init",
    "html": "Parameters\nshape\n\nAn integer array. Each element represents the size of the shaped array’s corresponding dimension.\n\ninitializer\n\nA closure you provide that initializes the shaped array’s underlying memory. The initializer calls your closure with a pointer to the memory and an array of strides that correspond to the shaped array’s dimensions.\n\nRelationships\nFrom Protocol\nMLShapedArrayProtocol\nSee Also\nCreating a shaped array with pointers to memory\ninit(bytesNoCopy: UnsafeRawPointer, shape: [Int], deallocator: Data.Deallocator)\nCreates a shaped array from a data pointer.\ninit(bytesNoCopy: UnsafeRawPointer, shape: [Int], strides: [Int], deallocator: Data.Deallocator)\nCreates a shaped array from a data pointer with memory strides."
  },
  {
    "title": "withUnsafeBufferPointer(ofType:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlmultiarray/3931183-withunsafebufferpointer",
    "html": "Parameters\ntype\n\nThe element type of the buffer passed in the body. This must be a Swift primitive type equivalent to dataType. This closure takes the following parameter:\n\nptr\n\nThe pointer to the buffer.\n\nbody\n\nA closure with an UnsafeBufferPointer parameter that points to the storage for the multiarray.\n\nDiscussion\n\nThe buffer contains a collection of int32, float16, float32, or float64 values, depending on the multiarray’s data type. It may not store these scalar values contiguously; use strides to get the buffer layout.\n\nSee Also\nProviding buffer access\nfunc withUnsafeBytes<R>((UnsafeRawBufferPointer) -> R) -> R\nCalls a given closure with a raw pointer to the multiarray’s storage.\nfunc withUnsafeMutableBufferPointer<S, R>(ofType: S.Type, (UnsafeMutableBufferPointer<S>, [Int]) -> R) -> R\nCalls a given closure with a raw pointer to the multiarray’s mutable storage.\nfunc withUnsafeMutableBytes<R>((UnsafeMutableRawBufferPointer, [Int]) -> R) -> R\nCalls a given closure with a raw pointer to the multiarray’s mutable storage."
  },
  {
    "title": "withUnsafeMutableBufferPointer(ofType:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlmultiarray/3931185-withunsafemutablebufferpointer",
    "html": "Parameters\ntype\n\nThe element type of the buffer passed in the body. This must be a Swift primitive type equivalent to dataType.\n\nbody\n\nA closure with an UnsafeMutableBufferPointer parameter that points to the storage for the multiarray and its strides. This closure takes the following parameters:\n\nptr\n\nThe pointer to the buffer.\n\nstrides\n\nThe strides of the buffer in scalars. Note that this may be different from strides’s value prior to this method invocation.\n\nDiscussion\n\nThe buffer contains a collection of int32, float16, float32, or float64 values, depending on the multiarray’s data type. It may not store these scalar values contiguously; use strides to get the buffer layout.\n\nSee Also\nProviding buffer access\nfunc withUnsafeBufferPointer<S, R>(ofType: S.Type, (UnsafeBufferPointer<S>) -> R) -> R\nCalls a given closure with a raw pointer to the multiarray’s storage.\nfunc withUnsafeBytes<R>((UnsafeRawBufferPointer) -> R) -> R\nCalls a given closure with a raw pointer to the multiarray’s storage.\nfunc withUnsafeMutableBytes<R>((UnsafeMutableRawBufferPointer, [Int]) -> R) -> R\nCalls a given closure with a raw pointer to the multiarray’s mutable storage."
  },
  {
    "title": "withUnsafeBytes(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlmultiarray/3931184-withunsafebytes",
    "html": "Parameters\nbody\n\nA closure with an UnsafeRawBufferPointer parameter that points to the storage for the multiarray. This closure takes the following parameter:\n\nptr\n\nThe pointer to the buffer.\n\nSee Also\nProviding buffer access\nfunc withUnsafeBufferPointer<S, R>(ofType: S.Type, (UnsafeBufferPointer<S>) -> R) -> R\nCalls a given closure with a raw pointer to the multiarray’s storage.\nfunc withUnsafeMutableBufferPointer<S, R>(ofType: S.Type, (UnsafeMutableBufferPointer<S>, [Int]) -> R) -> R\nCalls a given closure with a raw pointer to the multiarray’s mutable storage.\nfunc withUnsafeMutableBytes<R>((UnsafeMutableRawBufferPointer, [Int]) -> R) -> R\nCalls a given closure with a raw pointer to the multiarray’s mutable storage."
  },
  {
    "title": "withUnsafeMutableBytes(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlmultiarray/3931186-withunsafemutablebytes",
    "html": "Parameters\nbody\n\nA closure with an UnsafeMutableRawBufferPointer parameter that points to the storage for the multiarray and its strides. This closure takes the following parameters:\n\nptr\n\nThe pointer to the buffer.\n\nstrides\n\nThe strides of the buffer in scalars. Note that this may be different from strides’s value prior to this method invocation.\n\nDiscussion\n\nThe buffer contains a collection of int32, float16, float32, or float64 values, depending on the multiarray’s data type. It may not store these scalar values contiguously; use strides to get the buffer layout.\n\nSee Also\nProviding buffer access\nfunc withUnsafeBufferPointer<S, R>(ofType: S.Type, (UnsafeBufferPointer<S>) -> R) -> R\nCalls a given closure with a raw pointer to the multiarray’s storage.\nfunc withUnsafeBytes<R>((UnsafeRawBufferPointer) -> R) -> R\nCalls a given closure with a raw pointer to the multiarray’s storage.\nfunc withUnsafeMutableBufferPointer<S, R>(ofType: S.Type, (UnsafeMutableBufferPointer<S>, [Int]) -> R) -> R\nCalls a given closure with a raw pointer to the multiarray’s mutable storage."
  },
  {
    "title": "subscript(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlmultiarray/2879231-subscript",
    "html": "Parameters\nkey\n\nAn NSNumber array that represents a position in a multiarray in which each element is an index in the corresponding dimension.\n\nReturn Value\n\nA number.\n\nDiscussion\n\nUse this subscript to access the multiarray by using an NSNumber array in which each element is an index in the multiarray’s corresponding dimension.\n\n// A multiarray with three dimensions.\nlet multiarray = try MLMultiArray(shape: [5, 29, 17], dataType: .double)\n\n\n// The subscript key with three elements.\nlet key = [3, 5, 7] as [NSNumber]\n\n\n// Set the element to π, a sentinel value.\nmultiarray[key] = 3.141_59\n\n\n// Retrieve the element as a number.\nlet numberValue = multiarray[key]\nprint(numberValue.doubleValue)\n// Prints: 3.14159\n\n\nFor better performance, directly access the multiarray’s underlying pointer by using a linear offset. Calculate the linear offset by summing the products of each dimension’s index with the dimension’s stride (See strides).\n\n// Get a pointer to the multiarray’s contents.\nlet pointer = UnsafeMutablePointer<Double>(OpaquePointer(multiarray.dataPointer))\nvar linearOffset = 0\n\n\n// Sum the products of each dimension’s number with its stride.\nfor (dimension, stride) in zip(key, multiarray.strides) {\n    linearOffset += dimension.intValue * stride.intValue\n}\n\n\n// Check that the linear offset resolves to the same element as the subscript.\nassert(pointer[linearOffset] == multiarray[key].doubleValue)\n\n\nprint(pointer[linearOffset])\n// Prints: 3.14159\n\n\n// Set the element to a different sentinel value.\npointer[linearOffset] = 2.718_28\nprint(pointer[linearOffset])\n// Prints: 2.71828\n\n\nSee Also\nAccessing a Multiarray’s Elements\nsubscript(Int) -> NSNumber\nAccesses the multiarray by using a linear offset.\nvar pixelBuffer: CVPixelBuffer?\nA reference to the multiarray’s underlying pixel buffer.\nvar dataPointer: UnsafeMutableRawPointer\nA pointer to the multiarray’s underlying memory.\nDeprecated"
  },
  {
    "title": "init(data:shape:strides:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarray/3856537-init",
    "html": "Parameters\ndata\n\nThe block of data that holds the contents of the shaped array.\n\nshape\n\nThe shape of the array.\n\nstrides\n\nThe strides of the array.\n\nSee Also\nCreating a shaped array from data\ninit(data: Data, shape: [Int])\nCreates a shaped array from a block of data and a shape."
  },
  {
    "title": "MLShapedArraySlice | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarrayslice",
    "html": "Topics\nCreating a Shaped Array Slice\ninit(scalar: Scalar)\nCreates a shaped array slice with exactly one value and zero dimensions.\ninit(arrayLiteral: Scalar...)\nCreates a shaped array slice from a list of values.\ninit<S>(scalars: S, shape: [Int])\nCreates a shaped array slice from an array of values.\ninit(repeating: Scalar, shape: [Int])\nCreates a shaped array slice that initializes every element to the same value.\ninit(identityMatrixOfSize: Int)\nCreates a shaped array slice that’s an identity matrix of integers.\nAvailable when Scalar conforms to FixedWidthInteger.\ninit(randomScalarsIn: Range<Scalar>, shape: [Int])\nCreates a shaped array that initializes the elements to random integer values within a range.\nAvailable when Scalar conforms to FixedWidthInteger.\nCreating a Shaped Array Slice from Another Type\ninit(MLMultiArray)\nCreates a shaped array slice from a multiarray.\ninit(converting: MLMultiArray)\nCreates a shaped array slice by converting a multiarray.\ninit<T>(converting: T)\nCreates a shaped array slice by converting another shaped array type.\ninit<S>(concatenating: S, alongAxis: Int)\nMerges a sequence of shaped arrays into one shaped array along an axis.\nCreating a Shaped Array Slice with Pointers to Memory\ninit(bytesNoCopy: UnsafeRawPointer, shape: [Int], deallocator: Data.Deallocator)\nCreates a shaped array slice from a data pointer.\ninit(bytesNoCopy: UnsafeRawPointer, shape: [Int], strides: [Int], deallocator: Data.Deallocator)\nCreates a shaped array slice from a data pointer with memory strides.\ninit(unsafeUninitializedShape: [Int], initializingWith: (inout UnsafeMutableBufferPointer<Scalar>, [Int]) -> Void)\nCreates a shaped array slice from a shape and a closure that initializes its memory.\nCreating a Shaped Array Slice with Data\ninit(data: Data, shape: [Int])\nCreates a shaped array with a defined data and shape.\ninit(data: Data, shape: [Int], strides: [Int])\nCreates a shaped array with defined data, shape, and strides.\nEncoding and Decoding an Array Slice\ninit(from: Decoder)\nCreates an array slice from the passed decoder.\nAvailable when Scalar conforms to Decodable.\nfunc encode(to: Encoder)\nEncodes the array slice.\nAvailable when Scalar conforms to Encodable.\nInspecting a Shaped Array Slice\nvar isScalar: Bool\nA Boolean value that indicates whether the shaped array slice has zero dimensions.\nlet shape: [Int]\nAn integer array in which each element represents the size of the corresponding dimension.\nvar strides: [Int]\nAn integer array in which each element is the number of memory locations that spans the length of the corresponding dimension.\nvar isEmpty: Bool\nA Boolean value indicating whether the collection is empty.\nvar scalarCount: Int\nThe total number of elements in the shaped array slice.\nvar count: Int\nThe number of elements in the collection.\nvar underestimatedCount: Int\nA value less than or equal to the number of elements in the collection.\nAccessing an Element\nvar scalar: Scalar?\nA computed property that returns the first element when the shape isn’t empty, or sets the shaped array’s underlying scalar type.\nvar scalars: [Scalar]\nA computed property that generates a linear array that contains every element, or assigns the elements of an array to the shaped array’s elements.\nsubscript(scalarAt: Int...) -> Scalar\nAccesses an element in the shaped array using a list of indices that represent a multidimensional location.\nsubscript<C>(scalarAt: C) -> Scalar\nAccesses an element in the shaped array using a collection of indices that represent a multidimensional location.\nAccessing a Slice from the First Dimension\nsubscript(Int) -> MLShapedArraySlice<Scalar>\nAccesses a slice at an index in the shaped array slice’s first dimension.\nsubscript<R>(R) -> MLShapedArraySlice<Scalar>\nAccesses a slice with an integer range expression in the shaped array slice’s first dimension.\nsubscript(MLShapedArrayRangeExpression) -> MLShapedArraySlice<Scalar>\nAccesses a slice with a shaped-array range expression in the shaped array slice’s first dimension.\nsubscript((UnboundedRange_) -> Void) -> MLShapedArraySlice<Scalar>\nAccesses a slice with an unbounded range in the shaped array slice’s first dimension.\nsubscript((UnboundedRange_) -> ()) -> MLShapedArraySlice<Scalar>\nAccesses a slice with an unbounded range in the shaped array slice’s first dimension.\nAccessing a Slice from Multiple Dimensions\nsubscript(Int...) -> MLShapedArraySlice<Scalar>\nAccesses a slice using a list of integers, in which each element is an index in the corresponding dimension.\nsubscript<C>(C) -> MLShapedArraySlice<Scalar>\nAccesses a slice using a collection of integers, in which each element is an index in the corresponding dimension.\nsubscript<C>(C) -> MLShapedArraySlice<Scalar>\nAccesses a slice using a collection of integer ranges, in which each element is a range in the corresponding dimension.\nsubscript(MLShapedArrayRangeExpression...) -> MLShapedArraySlice<Scalar>\nAccesses a slice using a list of range expressions, in which each element is a range in the corresponding dimension.\nsubscript<C>(C) -> MLShapedArraySlice<Scalar>\nAccesses a slice using a collection of range expressions, in which each element is a range in the corresponding dimension.\nInspecting the Underlying Memory of a Shaped Array\nfunc withUnsafeShapedBufferPointer<R>((UnsafeBufferPointer<Scalar>, [Int], [Int]) -> R) -> R\nProvides a closure with a read-only pointer to the shaped array slice’s underlying memory.\nModifying a Shaped Array\nfunc fill(with: Scalar)\nSets all the shaped array’s elements to a scalar value.\nfunc fill<C>(with: C)\nAssigns the shaped array’s elements to the elements in a collection, repeatedly, if necessary.\nfunc withUnsafeMutableShapedBufferPointer<R>((inout UnsafeMutableBufferPointer<Scalar>, [Int], [Int]) -> R) -> R\nProvides a closure with a read-write pointer to the shaped array slice’s underlying memory.\nComparing Slices\nstatic func == (MLShapedArraySlice<Scalar>, MLShapedArraySlice<Scalar>) -> Bool\nReturns a Boolean value that indicates whether two values are equal.\nAvailable when Scalar conforms to Equatable.\nstatic func != (MLShapedArraySlice<Scalar>, MLShapedArraySlice<Scalar>) -> Bool\nReturns a Boolean value that indicates whether two values are not equal.\nAvailable when Scalar conforms to Equatable.\nSupporting Types\ntypealias MLShapedArraySlice.Element\nA type that defines the shaped array’s elements.\ntypealias MLShapedArraySlice.Index\nA type that defines the shaped array’s indices.\ntypealias MLShapedArraySlice.Indices\nA type that defines the shaped array’s index ranges.\ntypealias MLShapedArraySlice.Iterator\nA type that defines the shaped array’s iterator.\ntypealias MLShapedArraySlice.SubSequence\nA type that defines the shaped array’s slices.\ntypealias MLShapedArraySlice.ArrayLiteralElement\nA type that restricts the elements of an array literal that initializes the shaped array.\nShaped Array Slice Collection Operations\nRelationships\nConforms To\nDecodable\nConforms when Scalar conforms to Decodable.\nEncodable\nConforms when Scalar conforms to Encodable.\nMLShapedArrayProtocol\nSee Also\nSupporting Types\nassociatedtype Scalar\nRepresents the underlying scalar type of the shaped array type.\n\nRequired\n\nprotocol MLShapedArrayScalar\nA type that associates a scalar with a shaped array.\nprotocol MLShapedArrayRangeExpression\nAn interface for a range expression, which you typically use with subscripts of shaped array types."
  },
  {
    "title": "underestimatedCount | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarray/3763344-underestimatedcount",
    "html": "Discussion\n\nComplexity: O(1) if the collection conforms to RandomAccessCollection; otherwise, O(n), where n is the length of the collection.\n\nSee Also\nInspecting a Shaped Array\nvar isScalar: Bool\nA Boolean value that indicates whether the shaped array has zero dimensions.\nvar shape: [Int]\nAn integer array in which each element represents the size of the corresponding dimension.\nvar strides: [Int]\nAn integer array in which each element is the number of memory locations that span the length of the corresponding dimension.\nvar isEmpty: Bool\nA Boolean value indicating whether the collection is empty.\nvar scalarCount: Int\nThe total number of elements in the shaped array.\nvar count: Int\nThe number of elements in the collection.\nvar description: String\nA text representation of the shaped array."
  },
  {
    "title": "MLShapedArrayRangeExpression | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarrayrangeexpression",
    "html": "Topics\nGenerating Relative Ranges\nfunc relative(toShapedArrayAxis: Range<Int>) -> Range<Int>\nReturns the range of indices the range expression describes within a collection.\n\nRequired\n\nRelationships\nConforming Types\nClosedRange\nConforms when Bound is Int.\nPartialRangeFrom\nConforms when Bound is Int.\nPartialRangeThrough\nConforms when Bound is Int.\nPartialRangeUpTo\nConforms when Bound is Int.\nRange\nConforms when Bound is Int.\nSee Also\nSupporting Types\nassociatedtype Scalar\nRepresents the underlying scalar type of the shaped array type.\n\nRequired\n\nstruct MLShapedArraySlice\nA multidimensional subset of elements from a shaped array type.\nprotocol MLShapedArrayScalar\nA type that associates a scalar with a shaped array."
  },
  {
    "title": "init(repeating:shape:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarrayprotocol/3763363-init",
    "html": "Parameters\nvalue\n\nA scalar value. The initializer assigns every element in the shaped array to value.\n\nshape\n\nAn integer array. Each element represents the size of the shaped array’s corresponding dimension.\n\nSee Also\nCreating a Shaped Array Type\ninit<S>(scalars: S, shape: [Int])\nCreates a shaped array type from an array of values.\ninit(identityMatrixOfSize: Int)\nCreates a shaped array type that’s an identity matrix of integers.\nAvailable when Scalar conforms to FixedWidthInteger.\ninit(randomScalarsIn: Range<Self.Scalar>, shape: [Int])\nCreates a shaped array type that initializes the elements to random integer values within a range.\nAvailable when Scalar conforms to FixedWidthInteger.\ninit(bytesNoCopy: UnsafeRawPointer, shape: [Int], deallocator: Data.Deallocator)\nCreates a shaped array type from a data pointer.\ninit(bytesNoCopy: UnsafeRawPointer, shape: [Int], strides: [Int], deallocator: Data.Deallocator)\nCreates a shaped array type from a data pointer with memory strides.\n\nRequired\n\ninit(unsafeUninitializedShape: [Int], initializingWith: (inout UnsafeMutableBufferPointer<Self.Scalar>, [Int]) -> Void)\nCreates a shaped array type from a shape and a closure that initializes its memory.\n\nRequired"
  },
  {
    "title": "init(identityMatrixOfSize:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarrayprotocol/3763360-init",
    "html": "Parameters\nsize\n\nThe size of the identity matrix. For example, a size of 5 creates a 5x5 identity matrix.\n\nSee Also\nCreating a Shaped Array Type\ninit<S>(scalars: S, shape: [Int])\nCreates a shaped array type from an array of values.\ninit(repeating: Self.Scalar, shape: [Int])\nCreates a shaped array type that initializes every element to the same value.\ninit(randomScalarsIn: Range<Self.Scalar>, shape: [Int])\nCreates a shaped array type that initializes the elements to random integer values within a range.\nAvailable when Scalar conforms to FixedWidthInteger.\ninit(bytesNoCopy: UnsafeRawPointer, shape: [Int], deallocator: Data.Deallocator)\nCreates a shaped array type from a data pointer.\ninit(bytesNoCopy: UnsafeRawPointer, shape: [Int], strides: [Int], deallocator: Data.Deallocator)\nCreates a shaped array type from a data pointer with memory strides.\n\nRequired\n\ninit(unsafeUninitializedShape: [Int], initializingWith: (inout UnsafeMutableBufferPointer<Self.Scalar>, [Int]) -> Void)\nCreates a shaped array type from a shape and a closure that initializes its memory.\n\nRequired"
  },
  {
    "title": "shape | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarrayprotocol/3763370-shape",
    "html": "Required\n\nSee Also\nInspecting a Shaped Array Type\nvar strides: [Int]\nAn integer array in which each element is the number of memory locations that spans the length of the corresponding dimension.\n\nRequired\n\nvar count: Int\nThe number of elements in the shaped array’s first dimension.\nvar isScalar: Bool\nA Boolean value that indicates whether the shaped array lacks a shape.\nvar scalarCount: Int\nThe total number of elements in the shaped array type.\nvar scalar: Self.Scalar?\nA computed property that returns the first element when the shape isn’t empty, or sets the shaped array’s underlying scalar type.\nvar scalars: [Self.Scalar]\nA computed property that generates a linear array that contains every element, or assigns the elements of an array to the shaped array’s elements.\nfunc withUnsafeShapedBufferPointer<R>((UnsafeBufferPointer<Self.Scalar>, [Int], [Int]) -> R) -> R\nProvides read-only access of the shaped array’s underlying memory to a closure.\n\nRequired"
  },
  {
    "title": "init(converting:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarrayprotocol/3821245-init",
    "html": "Parameters\nmultiArray\n\nAn MLMultiArray, potentially with a different underlying type as the shaped array type.\n\nSee Also\nCreating a Shaped Array Type from Another Type\ninit(MLMultiArray)\nCreates a shaped array type from a multiarray.\ninit<T>(converting: T)\nCreates a shaped array type by converting another shaped array type."
  },
  {
    "title": "MLDictionaryConstraint | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mldictionaryconstraint",
    "html": "Topics\nAccessing the Constraint\nvar keyType: MLFeatureType\nThe key type for the dictionary.\nRelationships\nInherits From\nNSObject\nConforms To\nNSSecureCoding\nSee Also\nAccessing Feature Constraints\nvar imageConstraint: MLImageConstraint?\nThe size and format constraints for an image feature.\nclass MLImageConstraint\nThe width, height, and pixel format constraints of an image feature.\nvar dictionaryConstraint: MLDictionaryConstraint?\nThe constraint for a dictionary feature.\nvar multiArrayConstraint: MLMultiArrayConstraint?\nThe constraints on a multidimensional array feature.\nclass MLMultiArrayConstraint\nThe shape and data type constraints for a multidimensional array feature.\nvar sequenceConstraint: MLSequenceConstraint?\nThe constraints for a sequence feature.\nclass MLSequenceConstraint\nThe constraints for a sequence feature."
  },
  {
    "title": "MLMultiArrayConstraint | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlmultiarrayconstraint",
    "html": "Topics\nAccessing the Constraints\nvar shape: [NSNumber]\nThe shape of the multi array.\nvar dataType: MLMultiArrayDataType\nThe type for the multi array.\nvar shapeConstraint: MLMultiArrayShapeConstraint\nThe constraint on the shape of the multiarray.\nclass MLMultiArrayShapeConstraint\nThe lists of shapes or ranges of shapes that constrain a multiarray feature.\nRelationships\nInherits From\nNSObject\nConforms To\nNSSecureCoding\nSee Also\nAccessing Feature Constraints\nvar imageConstraint: MLImageConstraint?\nThe size and format constraints for an image feature.\nclass MLImageConstraint\nThe width, height, and pixel format constraints of an image feature.\nvar dictionaryConstraint: MLDictionaryConstraint?\nThe constraint for a dictionary feature.\nclass MLDictionaryConstraint\nThe constraint on the keys for a dictionary feature.\nvar multiArrayConstraint: MLMultiArrayConstraint?\nThe constraints on a multidimensional array feature.\nvar sequenceConstraint: MLSequenceConstraint?\nThe constraints for a sequence feature.\nclass MLSequenceConstraint\nThe constraints for a sequence feature."
  },
  {
    "title": "MLImageConstraint | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlimageconstraint",
    "html": "Overview\n\nIn CoreML, an image is a collection of pixels represented by CVPixelBuffer. An image feature is a model input or output that accepts or produces, respectively, an image bundled in an MLFeatureValue. MLImageConstraint defines the image feature’s limitations for the images within an MLFeatureValue.\n\nIf a model has an image feature for an input or output, the model author uses an image feature description by creating an MLFeatureDescription. The feature description for an image input or output has:\n\nIts type property set to MLFeatureType.image\n\nIts imageConstraint property set to an MLImageConstraint instance configured to the image feature’s size and format\n\nImage features that support additional image sizes provide a range of sizes, or a list of discrete sizes, in their image constraint’s sizeConstraint property.\n\nTopics\nAccessing the Constraints\nvar pixelsWide: Int\nThe model's default width for an image feature.\nvar pixelsHigh: Int\nThe model's default height for an image feature.\nvar pixelFormatType: OSType\nThe model's pixel format for an image feature.\nInspecting Acceptable Sizes\nvar sizeConstraint: MLImageSizeConstraint\nAdditional sizes this image feature supports.\nclass MLImageSizeConstraint\nA list or range of sizes that augment an image constraint's default size.\nRelationships\nInherits From\nNSObject\nConforms To\nNSSecureCoding\nSee Also\nCreating Image Feature Values\ninit(pixelBuffer: CVPixelBuffer)\nCreates a feature value that contains an image from a pixel buffer.\ninit(cgImage: CGImage, pixelsWide: Int, pixelsHigh: Int, pixelFormatType: OSType, options: [MLFeatureValue.ImageOption : Any]?)\nCreates a feature value that contains an image defined by a core graphics image and its size and pixel format.\ninit(cgImage: CGImage, orientation: CGImagePropertyOrientation, pixelsWide: Int, pixelsHigh: Int, pixelFormatType: OSType, options: [MLFeatureValue.ImageOption : Any]?)\nCreates a feature value that contains an image defined by a core graphics image and its orientation, size, and pixel format.\ninit(cgImage: CGImage, constraint: MLImageConstraint, options: [MLFeatureValue.ImageOption : Any]?)\nCreates a feature value that contains an image defined by a core graphics image and a constraint.\ninit(cgImage: CGImage, orientation: CGImagePropertyOrientation, constraint: MLImageConstraint, options: [MLFeatureValue.ImageOption : Any]?)\nCreates a feature value that contains an image defined by a core graphics image, an orientation, and a constraint.\ninit(imageAt: URL, pixelsWide: Int, pixelsHigh: Int, pixelFormatType: OSType, options: [MLFeatureValue.ImageOption : Any]?)\nCreates a feature value that contains an image defined by an image URL and the image’s size and pixel format.\ninit(imageAt: URL, orientation: CGImagePropertyOrientation, pixelsWide: Int, pixelsHigh: Int, pixelFormatType: OSType, options: [MLFeatureValue.ImageOption : Any]?)\nCreates a feature value that contains an image defined by an image URL and the image’s orientation, size, and pixel format.\ninit(imageAt: URL, constraint: MLImageConstraint, options: [MLFeatureValue.ImageOption : Any]?)\nCreates a feature value that contains an image defined by an image URL and a constraint.\ninit(imageAt: URL, orientation: CGImagePropertyOrientation, constraint: MLImageConstraint, options: [MLFeatureValue.ImageOption : Any]?)\nCreates a feature value that contains an image defined by an image URL, an orientation, and a constraint.\nstruct MLFeatureValue.ImageOption\nThe initializer options you use to crop and scale an image when creating an image feature value."
  },
  {
    "title": "init(imageAt:constraint:options:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlfeaturevalue/3200162-init",
    "html": "Parameters\nurl\n\nA URL to an image.\n\nconstraint\n\nAn MLImageConstraint instance.\n\noptions\n\nA dictionary of VNImageCropAndScaleOption values, each keyed by MLFeatureValue.ImageOption.\n\nSee Also\nCreating Image Feature Values\ninit(pixelBuffer: CVPixelBuffer)\nCreates a feature value that contains an image from a pixel buffer.\ninit(cgImage: CGImage, pixelsWide: Int, pixelsHigh: Int, pixelFormatType: OSType, options: [MLFeatureValue.ImageOption : Any]?)\nCreates a feature value that contains an image defined by a core graphics image and its size and pixel format.\ninit(cgImage: CGImage, orientation: CGImagePropertyOrientation, pixelsWide: Int, pixelsHigh: Int, pixelFormatType: OSType, options: [MLFeatureValue.ImageOption : Any]?)\nCreates a feature value that contains an image defined by a core graphics image and its orientation, size, and pixel format.\ninit(cgImage: CGImage, constraint: MLImageConstraint, options: [MLFeatureValue.ImageOption : Any]?)\nCreates a feature value that contains an image defined by a core graphics image and a constraint.\ninit(cgImage: CGImage, orientation: CGImagePropertyOrientation, constraint: MLImageConstraint, options: [MLFeatureValue.ImageOption : Any]?)\nCreates a feature value that contains an image defined by a core graphics image, an orientation, and a constraint.\ninit(imageAt: URL, pixelsWide: Int, pixelsHigh: Int, pixelFormatType: OSType, options: [MLFeatureValue.ImageOption : Any]?)\nCreates a feature value that contains an image defined by an image URL and the image’s size and pixel format.\ninit(imageAt: URL, orientation: CGImagePropertyOrientation, pixelsWide: Int, pixelsHigh: Int, pixelFormatType: OSType, options: [MLFeatureValue.ImageOption : Any]?)\nCreates a feature value that contains an image defined by an image URL and the image’s orientation, size, and pixel format.\ninit(imageAt: URL, orientation: CGImagePropertyOrientation, constraint: MLImageConstraint, options: [MLFeatureValue.ImageOption : Any]?)\nCreates a feature value that contains an image defined by an image URL, an orientation, and a constraint.\nclass MLImageConstraint\nThe width, height, and pixel format constraints of an image feature.\nstruct MLFeatureValue.ImageOption\nThe initializer options you use to crop and scale an image when creating an image feature value."
  },
  {
    "title": "preferredMetalDevice | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlmodelconfiguration/3222915-preferredmetaldevice",
    "html": "Discussion\n\nIf preferredMetalDevice is nil, the default value, Core ML chooses a metal device for you.\n\nSee Also\nConfiguring GPU Usage\nvar allowLowPrecisionAccumulationOnGPU: Bool\nA Boolean value that determines whether to allow low-precision accumulation on a GPU."
  },
  {
    "title": "classLabels | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlmodeldescription/3649657-classlabels",
    "html": "See Also\nAccessing Metadata\nvar metadata: [MLModelMetadataKey : Any]\nA dictionary of the model’s creation information, such as its description, author, version, and license.\nstruct MLModelMetadataKey\nThe set of keys the model uses to store values in its metadata dictionary."
  },
  {
    "title": "outputDescriptionsByName | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlmodeldescription/2879361-outputdescriptionsbyname",
    "html": "See Also\nAccessing Feature Descriptions\nvar inputDescriptionsByName: [String : MLFeatureDescription]\nA dictionary of input feature descriptions, which the model keys by the input’s name.\nclass MLFeatureDescription\nThe name, type, and constraints of an input or output feature."
  },
  {
    "title": "modelCollection | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlmodelerror/3650092-modelcollection",
    "html": "Discussion\n\nCore ML typically throws this error when the device doesn’t have access to the network.\n\nSee Also\nError Codes\nstatic var featureType: MLModelError.Code\nAn error code for problems related to model features.\nstatic var parameters: MLModelError.Code\nAn error code for problems related to model parameters.\nstatic var modelDecryptionKeyFetch: MLModelError.Code\nAn error code for problems related to retrieving a model’s decryption key.\nstatic var modelDecryption: MLModelError.Code\nAn error code for problems related to decrypting models.\nstatic var update: MLModelError.Code\nAn error code for problems related to on-device model updates.\nstatic var customLayer: MLModelError.Code\nAn error code for problems related to custom layers.\nstatic var customModel: MLModelError.Code\nAn error code for problems related to custom models.\nstatic var io: MLModelError.Code\nAn error code for problems related to the system’s input or output.\nstatic var predictionCancelled: MLModelError.Code\nAn error code for problems related to cancelling the prediction before it completes.\nstatic var generic: MLModelError.Code\nAn error code for runtime issues that don’t apply to the other error codes.\nenum MLModelError.Code\nThe categories of model-specific errors."
  },
  {
    "title": "init(pixelBuffer:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlfeaturevalue/2879346-init",
    "html": "Parameters\nvalue\n\nA CVPixelBuffer instance.\n\nSee Also\nCreating Image Feature Values\ninit(cgImage: CGImage, pixelsWide: Int, pixelsHigh: Int, pixelFormatType: OSType, options: [MLFeatureValue.ImageOption : Any]?)\nCreates a feature value that contains an image defined by a core graphics image and its size and pixel format.\ninit(cgImage: CGImage, orientation: CGImagePropertyOrientation, pixelsWide: Int, pixelsHigh: Int, pixelFormatType: OSType, options: [MLFeatureValue.ImageOption : Any]?)\nCreates a feature value that contains an image defined by a core graphics image and its orientation, size, and pixel format.\ninit(cgImage: CGImage, constraint: MLImageConstraint, options: [MLFeatureValue.ImageOption : Any]?)\nCreates a feature value that contains an image defined by a core graphics image and a constraint.\ninit(cgImage: CGImage, orientation: CGImagePropertyOrientation, constraint: MLImageConstraint, options: [MLFeatureValue.ImageOption : Any]?)\nCreates a feature value that contains an image defined by a core graphics image, an orientation, and a constraint.\ninit(imageAt: URL, pixelsWide: Int, pixelsHigh: Int, pixelFormatType: OSType, options: [MLFeatureValue.ImageOption : Any]?)\nCreates a feature value that contains an image defined by an image URL and the image’s size and pixel format.\ninit(imageAt: URL, orientation: CGImagePropertyOrientation, pixelsWide: Int, pixelsHigh: Int, pixelFormatType: OSType, options: [MLFeatureValue.ImageOption : Any]?)\nCreates a feature value that contains an image defined by an image URL and the image’s orientation, size, and pixel format.\ninit(imageAt: URL, constraint: MLImageConstraint, options: [MLFeatureValue.ImageOption : Any]?)\nCreates a feature value that contains an image defined by an image URL and a constraint.\ninit(imageAt: URL, orientation: CGImagePropertyOrientation, constraint: MLImageConstraint, options: [MLFeatureValue.ImageOption : Any]?)\nCreates a feature value that contains an image defined by an image URL, an orientation, and a constraint.\nclass MLImageConstraint\nThe width, height, and pixel format constraints of an image feature.\nstruct MLFeatureValue.ImageOption\nThe initializer options you use to crop and scale an image when creating an image feature value."
  },
  {
    "title": "encode(commandBuffer:inputs:outputs:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlcustomlayer/2936859-encode",
    "html": "Parameters\ncommandBuffer\n\nA command buffer that defines the work the layer performs on the GPU.\n\ninputs\n\nA texture array that represents the layer’s inputs.\n\noutputs\n\nA texture array that represents the layer’s outputs.\n\nReturn Value\n\ntrue if the method successfully filled commandBuffer; otherwise false.\n\nDiscussion\n\nImplement this method to use the GPU to evaluate your layer. Fill commandBuffer with the GPU commands that evaluate the layer. Don’t commit the command buffer in this method; Core ML executes the command buffer after this method returns.\n\nImprove your layer’s performance by caching the MTLComputePipelineState instances you create and intend to reuse in subsequent calls.\n\nImplementing this method doesn’t guarantee that Core ML evaluates this layer on the GPU. For example, Core ML may evaluate the layer on the CPU if the system doesn’t have enough GPU’s resources to run the custom layer.\n\nImportant\n\nThe GPU works with 16-bit floats, not 32-bit floats. Verify that lower precision values don’t impact your network’s behavior.\n\nIf you don’t implement this method, Core ML instead uses evaluate(inputs:outputs:).\n\nFor more information about using the GPU for general purpose programming, see Compute Processing.\n\nSee Also\nEvaluating a Layer\nfunc evaluate(inputs: [MLMultiArray], outputs: [MLMultiArray])\nEvaluates the custom layer with the given inputs.\n\nRequired"
  },
  {
    "title": "evaluate(inputs:outputs:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlcustomlayer/2935520-evaluate",
    "html": "Required\n\nParameters\ninputs\n\nThe array of inputs to be evaluated.\n\noutputs\n\nThe array of outputs to be populated by evaluating the given inputs.\n\nDiscussion\n\nImplement this method to evaluate the inputs using your layer's custom behavior and to populate the output arrays. It will be called for each evaluation of your model performed on the CPU.\n\nThe memory for both input and output arrays is preallocated; don't copy or move it. The inputs and outputs will have the shapes of the most recent call to outputShapes(forInputShapes:). Don't modify the input values.\n\nInvestigate vecLib for methods that could optimize your implementation significantly.\n\nSee Also\nEvaluating a Layer\nfunc encode(commandBuffer: MTLCommandBuffer, inputs: [MTLTexture], outputs: [MTLTexture])\nEncodes GPU commands to evaluate the custom layer."
  },
  {
    "title": "miniBatchIndex | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlmetrickey/3180092-minibatchindex",
    "html": "Discussion\n\nUse this key to fetch the mini-batch index value in the metrics dictionary.\n\nSee Also\nGetting the Keys\nclass var lossValue: MLMetricKey\nThe key you use to access the current loss (a float value).\nclass var epochIndex: MLMetricKey\nThe key you use to access the epoch index (an Int64 value)."
  },
  {
    "title": "write(to:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlwritable/3197650-write",
    "html": "Required\n\nParameters\nurl\n\nThe location in the file system where the file should be written."
  },
  {
    "title": "lossValue | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlmetrickey/3180091-lossvalue",
    "html": "Discussion\n\nUse this key to fetch the loss value in the metrics dictionary.\n\nSee Also\nGetting the Keys\nclass var epochIndex: MLMetricKey\nThe key you use to access the epoch index (an Int64 value).\nclass var miniBatchIndex: MLMetricKey\nThe key you use to access the mini-batch index (an Int64 value) within an epoch."
  },
  {
    "title": "weights | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlparameterkey/3362530-weights",
    "html": "Discussion\n\nThe value type for the weights key is an MLMultiArray. You must scope this key with the name of the specific neural network layer whose weights you’d like to access. See scoped(to:).\n\nNote\n\nYou can only override the weights of a model’s updatable layers. Model developers mark these layers as updatable with the Core ML Tools.\n\nSee Also\nAccessing Neural Network Layer Parameters\nclass var biases: MLParameterKey\nThe key you use to access the biases of a layer in a neural network model."
  },
  {
    "title": "biases | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlparameterkey/3362528-biases",
    "html": "Discussion\n\nThe value type for the biases key is an MLMultiArray. You must scope this key with the name of the specific neural network layer whose biases you’d like to access. See scoped(to:).\n\nNote\n\nYou can only override the biases of a model’s updatable layers. Model developers mark these layers as updatable with the Core ML Tools.\n\nSee Also\nAccessing Neural Network Layer Parameters\nclass var weights: MLParameterKey\nThe key you use to access the weights of a layer in a neural network model."
  },
  {
    "title": "beta1 | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlparameterkey/3194196-beta1",
    "html": "Discussion\n\nThe value type for the beta1 key is a Double.\n\nSee Also\nAccessing Model Update Parameters\nclass var learningRate: MLParameterKey\nThe key you use to access the optimizer’s learning rate parameter.\nclass var momentum: MLParameterKey\nThe key you use to access the stochastic gradient descent (SGD) optimizer’s momentum parameter.\nclass var miniBatchSize: MLParameterKey\nThe key you use to access the optimizer’s mini batch-size parameter.\nclass var beta2: MLParameterKey\nThe key you use to access the Adam optimizer’s second beta parameter.\nclass var eps: MLParameterKey\nThe key you use to access the Adam optimizer’s epsilon parameter.\nclass var epochs: MLParameterKey\nThe key you use to access the optimizer’s epochs parameter.\nclass var shuffle: MLParameterKey\nThe key you use to access the shuffle parameter, a Boolean value that determines whether the model randomizes the data between epochs.\nclass var seed: MLParameterKey\nThe key you use to access the seed parameter that initializes the random number generator for the shuffle option."
  },
  {
    "title": "miniBatchSize | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlparameterkey/3180074-minibatchsize",
    "html": "Discussion\n\nThe value type for the miniBatchSize key is an Int64.\n\nSee Also\nAccessing Model Update Parameters\nclass var learningRate: MLParameterKey\nThe key you use to access the optimizer’s learning rate parameter.\nclass var momentum: MLParameterKey\nThe key you use to access the stochastic gradient descent (SGD) optimizer’s momentum parameter.\nclass var beta1: MLParameterKey\nThe key you use to access the Adam optimizer’s first beta parameter.\nclass var beta2: MLParameterKey\nThe key you use to access the Adam optimizer’s second beta parameter.\nclass var eps: MLParameterKey\nThe key you use to access the Adam optimizer’s epsilon parameter.\nclass var epochs: MLParameterKey\nThe key you use to access the optimizer’s epochs parameter.\nclass var shuffle: MLParameterKey\nThe key you use to access the shuffle parameter, a Boolean value that determines whether the model randomizes the data between epochs.\nclass var seed: MLParameterKey\nThe key you use to access the seed parameter that initializes the random number generator for the shuffle option."
  },
  {
    "title": "beta2 | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlparameterkey/3194197-beta2",
    "html": "Discussion\n\nThe value type for the beta2 key is a Double.\n\nSee Also\nAccessing Model Update Parameters\nclass var learningRate: MLParameterKey\nThe key you use to access the optimizer’s learning rate parameter.\nclass var momentum: MLParameterKey\nThe key you use to access the stochastic gradient descent (SGD) optimizer’s momentum parameter.\nclass var miniBatchSize: MLParameterKey\nThe key you use to access the optimizer’s mini batch-size parameter.\nclass var beta1: MLParameterKey\nThe key you use to access the Adam optimizer’s first beta parameter.\nclass var eps: MLParameterKey\nThe key you use to access the Adam optimizer’s epsilon parameter.\nclass var epochs: MLParameterKey\nThe key you use to access the optimizer’s epochs parameter.\nclass var shuffle: MLParameterKey\nThe key you use to access the shuffle parameter, a Boolean value that determines whether the model randomizes the data between epochs.\nclass var seed: MLParameterKey\nThe key you use to access the seed parameter that initializes the random number generator for the shuffle option."
  },
  {
    "title": "epochs | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlparameterkey/3180072-epochs",
    "html": "Discussion\n\nThe value type for the epochs key is an Int64.\n\nSee Also\nAccessing Model Update Parameters\nclass var learningRate: MLParameterKey\nThe key you use to access the optimizer’s learning rate parameter.\nclass var momentum: MLParameterKey\nThe key you use to access the stochastic gradient descent (SGD) optimizer’s momentum parameter.\nclass var miniBatchSize: MLParameterKey\nThe key you use to access the optimizer’s mini batch-size parameter.\nclass var beta1: MLParameterKey\nThe key you use to access the Adam optimizer’s first beta parameter.\nclass var beta2: MLParameterKey\nThe key you use to access the Adam optimizer’s second beta parameter.\nclass var eps: MLParameterKey\nThe key you use to access the Adam optimizer’s epsilon parameter.\nclass var shuffle: MLParameterKey\nThe key you use to access the shuffle parameter, a Boolean value that determines whether the model randomizes the data between epochs.\nclass var seed: MLParameterKey\nThe key you use to access the seed parameter that initializes the random number generator for the shuffle option."
  },
  {
    "title": "eps | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlparameterkey/3194198-eps",
    "html": "Discussion\n\nThe value type for the eps key is a Double.\n\nSee Also\nAccessing Model Update Parameters\nclass var learningRate: MLParameterKey\nThe key you use to access the optimizer’s learning rate parameter.\nclass var momentum: MLParameterKey\nThe key you use to access the stochastic gradient descent (SGD) optimizer’s momentum parameter.\nclass var miniBatchSize: MLParameterKey\nThe key you use to access the optimizer’s mini batch-size parameter.\nclass var beta1: MLParameterKey\nThe key you use to access the Adam optimizer’s first beta parameter.\nclass var beta2: MLParameterKey\nThe key you use to access the Adam optimizer’s second beta parameter.\nclass var epochs: MLParameterKey\nThe key you use to access the optimizer’s epochs parameter.\nclass var shuffle: MLParameterKey\nThe key you use to access the shuffle parameter, a Boolean value that determines whether the model randomizes the data between epochs.\nclass var seed: MLParameterKey\nThe key you use to access the seed parameter that initializes the random number generator for the shuffle option."
  },
  {
    "title": "MLTaskState | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mltaskstate",
    "html": "Topics\nTransient States\ncase running\nThe state of a machine learning task that’s executing.\ncase suspended\nThe state of a machine learning task that’s paused.\ncase cancelling\nThe state of a machine learning task that’s in mid-termination, before it could finish successfully.\nFinal States\ncase completed\nThe state of a machine learning task that has finished successfully.\ncase failed\nThe state of a machine learning task that has terminated due to an error.\nRelationships\nConforms To\nSendable\nSee Also\nChecking the State of a Task\nvar state: MLTaskState\nThe current state of the machine learning task.\nvar error: Error?\nThe underlying error if the task is in a failed state."
  },
  {
    "title": "type | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlfeaturedescription/2879374-type",
    "html": "See Also\nInspecting a Feature\nvar name: String\nThe name of this feature.\nenum MLFeatureType\nThe possible types for feature values, input features, and output features.\nvar isOptional: Bool\nA Boolean value that indicates whether this feature is optional."
  },
  {
    "title": "isAllowedValue(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlfeaturedescription/2879363-isallowedvalue",
    "html": "Parameters\nvalue\n\nGiven the MLFeatureValue, is it compatible with the MLFeatureType of this MLFeatureDescription.\n\nReturn Value\n\nTrue if the given MLFeatureValue is acceptable to the model's input feature, false otherwise."
  },
  {
    "title": "imageConstraint | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlfeaturedescription/2873067-imageconstraint",
    "html": "See Also\nAccessing Feature Constraints\nclass MLImageConstraint\nThe width, height, and pixel format constraints of an image feature.\nvar dictionaryConstraint: MLDictionaryConstraint?\nThe constraint for a dictionary feature.\nclass MLDictionaryConstraint\nThe constraint on the keys for a dictionary feature.\nvar multiArrayConstraint: MLMultiArrayConstraint?\nThe constraints on a multidimensional array feature.\nclass MLMultiArrayConstraint\nThe shape and data type constraints for a multidimensional array feature.\nvar sequenceConstraint: MLSequenceConstraint?\nThe constraints for a sequence feature.\nclass MLSequenceConstraint\nThe constraints for a sequence feature."
  },
  {
    "title": "featureNames | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlfeatureprovider/2879184-featurenames",
    "html": "Required\n\nSee Also\nAccessing Values\nfunc featureValue(for: String) -> MLFeatureValue?\nAccesses the feature value given the feature's name.\n\nRequired"
  },
  {
    "title": "init(modelDescription:parameters:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlcustommodel/2994296-init",
    "html": "Required\n\nParameters\nmodelDescription\n\nA description of the model.\n\nparameters\n\nThe parameters for configuring the model."
  },
  {
    "title": "featureValue(for:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlfeatureprovider/2879185-featurevalue",
    "html": "Required\n\nParameters\nfeatureName\n\nThe name of the feature of the desired value.\n\nReturn Value\n\nThe value of the feature, or nil if no value exists for that name.\n\nSee Also\nAccessing Values\nvar featureNames: Set<String>\nThe set of valid feature names.\n\nRequired"
  },
  {
    "title": "prediction(from:options:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlcustommodel/2994297-prediction",
    "html": "Required\n\nParameters\ninput\n\nThe feature values the models needs to make its prediction.\n\noptions\n\nThe options to be applied to the prediction.\n\nReturn Value\n\nA feature provider that represents the model's prediction.\n\nSee Also\nMaking Predictions\nfunc predictions(from: MLBatchProvider, options: MLPredictionOptions) -> MLBatchProvider\nPredicts output values from the given batch of input features."
  },
  {
    "title": "endAccessing(identifier:completionHandler:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlmodelcollection/3649656-endaccessing",
    "html": "Deprecated\n\nUse Background Assets or URLSession instead.\n\nParameters\nidentifier\n\nThe name of the model collection.\n\nhandler\n\nThe closure that Core ML calls when it’s finished removing your app’s access to the model collection.\n\nThe closure has one Result parameter with the following associated values:\n\nResult.success(_:)\n\nThis case has no associated value, which it represents as Void.\n\nResult.failure(_:)\n\nAn Error instance if the method failed to end your app’s access to the model collection (see MLModelError).\n\nDiscussion\n\nUse this method when your app no longer needs access to a model collection.\n\nMLModelCollection.endAccessing(identifier: modelCollectionName) { result in\n    switch result {\n    case .success():\n        print(\"Successfully ended access to `\\(modelCollectionName)`.\")\n\n\n    case .failure(let error):\n        print(\"Error ending access to `\\(modelCollectionName)`: \\(error)\")\n    }\n}\n\n\nSee Also\nAccessing a Model Collection\nclass func beginAccessing(identifier: String, completionHandler: (Result<MLModelCollection, Error>) -> Void) -> Progress\nRequests access to a model collection."
  },
  {
    "title": "MLCustomLayer | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlcustomlayer",
    "html": "Overview\n\nYou use the MLCustomLayer protocol to define the behavior of your own neural network layers in Core ML models. You can deploy novel or proprietary models on your own release schedule. Custom layers also provide a mechanism for pre- or post-processing during model evaluation.\n\nTopics\nCreating a Layer\ninit(parameters: [String : Any])\nInitializes the custom layer implementation.\n\nRequired\n\nIntegrating a Layer\nfunc setWeightData([Data])\nAssigns the weights for the connections within the layer.\n\nRequired\n\nfunc outputShapes(forInputShapes: [[NSNumber]]) -> [[NSNumber]]\nCalculates the shapes of the output of this layer for the given input shapes.\n\nRequired\n\nEvaluating a Layer\nfunc evaluate(inputs: [MLMultiArray], outputs: [MLMultiArray])\nEvaluates the custom layer with the given inputs.\n\nRequired\n\nfunc encode(commandBuffer: MTLCommandBuffer, inputs: [MTLTexture], outputs: [MTLTexture])\nEncodes GPU commands to evaluate the custom layer.\nSee Also\nCustom Model Layers\nCreating and Integrating a Model with Custom Layers\nAdd models with custom neural-network layers to your app."
  },
  {
    "title": "withUnsafeMutableShapedBufferPointer(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarrayprotocol/3763383-withunsafemutableshapedbufferpoi",
    "html": "Required\n\nParameters\nbody\n\nA closure that accesses a shaped array’s underlying memory.\n\nDiscussion\n\nThe method returns the value your closure returns, if applicable.\n\nSee Also\nModifying a Shaped Array Type\nfunc fill(with: Self.Scalar)\nAssigns the shaped array’s elements to a value.\nfunc fill<C>(with: C)\nAssigns the shaped array’s elements to the elements in a collection, repeatedly, if necessary."
  },
  {
    "title": "cropAndScale | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlfeaturevalue/imageoption/3200165-cropandscale",
    "html": "Discussion\n\nUse this value as a dictionary key for the options argument of an image-based MLFeatureValue initializer. Pair this key with a VNImageCropAndScaleOption value in the initializer’s options dictionary. For example, see init(cgImage:pixelsWide:pixelsHigh:pixelFormatType:options:).\n\nSee Also\nImage Options Keys\nstatic let cropRect: MLFeatureValue.ImageOption\nThe option you use to crop an image when creating an image feature value."
  },
  {
    "title": "cropRect | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlfeaturevalue/imageoption/3200166-croprect",
    "html": "Discussion\n\nUse this value as a dictionary key for the options argument of an image-based MLFeatureValue initializer. Pair this key with a VNImageCropAndScaleOption value in the initializer’s options dictionary. For example, see init(cgImage:pixelsWide:pixelsHigh:pixelFormatType:options:).\n\nSee Also\nImage Options Keys\nstatic let cropAndScale: MLFeatureValue.ImageOption\nThe option you use to crop and scale an image when creating an image feature value."
  },
  {
    "title": "trainingBegin | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlupdateprogressevent/3180103-trainingbegin",
    "html": "See Also\nGetting Progress Event Types\nstatic var miniBatchEnd: MLUpdateProgressEvent\nAn event that represents the end of a mini-batch within a training epoch.\nstatic var epochEnd: MLUpdateProgressEvent\nAn event that represents the end of training epoch."
  },
  {
    "title": "dictionary | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mldictionaryfeatureprovider/2879354-dictionary",
    "html": "See Also\nAccessing the Features\nsubscript(String) -> MLFeatureValue?\nSubscript interface for the feature provider to pass through to the dictionary."
  },
  {
    "title": "subscript(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mldictionaryfeatureprovider/2881954-subscript",
    "html": "See Also\nAccessing the Features\nvar dictionary: [String : MLFeatureValue]\nThe backing dictionary."
  },
  {
    "title": "init(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlmultiarray/3334837-init",
    "html": "Parameters\ndata\n\nA Collection of Float values.\n\nDiscussion\n\nUse this initializer to create a multiarray from a collection of Float values, such as an array.\n\nlet floats: [Float] = [1.41, 1.73, 2.72, 3.14]\nlet floatMultiarray = try MLMultiArray(floats)\n\n\nSee Also\nCreating a Multiarray\ninit<C>(C)\nCreates a multiarray from a collection of integers.\ninit<C>(C)\nCreates a multiarray from a collection of doubles.\ninit(shape: [NSNumber], dataType: MLMultiArrayDataType)\nCreates a multidimensional array with a shape and type.\ninit<ShapedArray>(ShapedArray)\nCreates a multiarray from a shaped array.\ninit(dataPointer: UnsafeMutableRawPointer, shape: [NSNumber], dataType: MLMultiArrayDataType, strides: [NSNumber], deallocator: ((UnsafeMutableRawPointer) -> Void)?)\nCreates a multiarray from a data pointer.\ninit(concatenating: [MLMultiArray], axis: Int, dataType: MLMultiArrayDataType)\nMerges an array of multiarrays into one multiarray along an axis.\ninit(pixelBuffer: CVPixelBuffer, shape: [NSNumber])\nCreates a multiarray sharing the surface of a pixel buffer.\nenum MLMultiArrayDataType\nConstants that define the underlying element types a multiarray can store."
  },
  {
    "title": "MLMultiArrayDataType.int32 | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlmultiarraydatatype/int32",
    "html": "See Also\nMultiarray Data Types\ncase float16\nDesignates the multiarray’s elements as 16-bit floats.\ncase float32\nDesignates the multiarray’s elements as 32-bit floats.\ncase double\nDesignates the multiarray’s elements as doubles.\nstatic var float: MLMultiArrayDataType\nDesignates the multiarray’s elements as floats.\nstatic var float64: MLMultiArrayDataType\nDesignates the multiarray’s elements as 64-bit floats."
  },
  {
    "title": "float | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlmultiarraydatatype/3547153-float",
    "html": "See Also\nMultiarray Data Types\ncase int32\nDesignates the multiarray’s elements as 32-bit integers.\ncase float16\nDesignates the multiarray’s elements as 16-bit floats.\ncase float32\nDesignates the multiarray’s elements as 32-bit floats.\ncase double\nDesignates the multiarray’s elements as doubles.\nstatic var float64: MLMultiArrayDataType\nDesignates the multiarray’s elements as 64-bit floats."
  },
  {
    "title": "init(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlmultiarray/3334836-init",
    "html": "Parameters\ndata\n\nA Collection of Double values.\n\nDiscussion\n\nUse this initializer to create a multiarray from a collection of Double values, such as an array.\n\nlet doubles: [Double] = [1.41, 1.73, 2.72, 3.14]\nlet doubleMultiarray = try MLMultiArray(doubles)\n\n\nSee Also\nCreating a Multiarray\ninit<C>(C)\nCreates a multiarray from a collection of integers.\ninit<C>(C)\nCreates a multiarray from a collection of floats.\ninit(shape: [NSNumber], dataType: MLMultiArrayDataType)\nCreates a multidimensional array with a shape and type.\ninit<ShapedArray>(ShapedArray)\nCreates a multiarray from a shaped array.\ninit(dataPointer: UnsafeMutableRawPointer, shape: [NSNumber], dataType: MLMultiArrayDataType, strides: [NSNumber], deallocator: ((UnsafeMutableRawPointer) -> Void)?)\nCreates a multiarray from a data pointer.\ninit(concatenating: [MLMultiArray], axis: Int, dataType: MLMultiArrayDataType)\nMerges an array of multiarrays into one multiarray along an axis.\ninit(pixelBuffer: CVPixelBuffer, shape: [NSNumber])\nCreates a multiarray sharing the surface of a pixel buffer.\nenum MLMultiArrayDataType\nConstants that define the underlying element types a multiarray can store."
  },
  {
    "title": "init(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlmultiarray/3334838-init",
    "html": "Parameters\ndata\n\nA Collection of Int values.\n\nDiscussion\n\nUse this initializer to create a multiarray from a collection of Int values, such as an array.\n\nlet integers = [2, 3, 5, 7, 11]\nlet integerMultiarray = try MLMultiArray(integers)\n\n\nSee Also\nCreating a Multiarray\ninit<C>(C)\nCreates a multiarray from a collection of floats.\ninit<C>(C)\nCreates a multiarray from a collection of doubles.\ninit(shape: [NSNumber], dataType: MLMultiArrayDataType)\nCreates a multidimensional array with a shape and type.\ninit<ShapedArray>(ShapedArray)\nCreates a multiarray from a shaped array.\ninit(dataPointer: UnsafeMutableRawPointer, shape: [NSNumber], dataType: MLMultiArrayDataType, strides: [NSNumber], deallocator: ((UnsafeMutableRawPointer) -> Void)?)\nCreates a multiarray from a data pointer.\ninit(concatenating: [MLMultiArray], axis: Int, dataType: MLMultiArrayDataType)\nMerges an array of multiarrays into one multiarray along an axis.\ninit(pixelBuffer: CVPixelBuffer, shape: [NSNumber])\nCreates a multiarray sharing the surface of a pixel buffer.\nenum MLMultiArrayDataType\nConstants that define the underlying element types a multiarray can store."
  },
  {
    "title": "MLMultiArrayDataType.float16 | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlmultiarraydatatype/float16",
    "html": "See Also\nMultiarray Data Types\ncase int32\nDesignates the multiarray’s elements as 32-bit integers.\ncase float32\nDesignates the multiarray’s elements as 32-bit floats.\ncase double\nDesignates the multiarray’s elements as doubles.\nstatic var float: MLMultiArrayDataType\nDesignates the multiarray’s elements as floats.\nstatic var float64: MLMultiArrayDataType\nDesignates the multiarray’s elements as 64-bit floats."
  },
  {
    "title": "MLMultiArrayDataType.float32 | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlmultiarraydatatype/float32",
    "html": "See Also\nMultiarray Data Types\ncase int32\nDesignates the multiarray’s elements as 32-bit integers.\ncase float16\nDesignates the multiarray’s elements as 16-bit floats.\ncase double\nDesignates the multiarray’s elements as doubles.\nstatic var float: MLMultiArrayDataType\nDesignates the multiarray’s elements as floats.\nstatic var float64: MLMultiArrayDataType\nDesignates the multiarray’s elements as 64-bit floats."
  },
  {
    "title": "float64 | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlmultiarraydatatype/3547154-float64",
    "html": "See Also\nMultiarray Data Types\ncase int32\nDesignates the multiarray’s elements as 32-bit integers.\ncase float16\nDesignates the multiarray’s elements as 16-bit floats.\ncase float32\nDesignates the multiarray’s elements as 32-bit floats.\ncase double\nDesignates the multiarray’s elements as doubles.\nstatic var float: MLMultiArrayDataType\nDesignates the multiarray’s elements as floats."
  },
  {
    "title": "strides | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlmultiarray/2879222-strides",
    "html": "Discussion\n\nSee subscript(_:) and subscript(_:) for code examples that use strides.\n\nSee Also\nInspecting a Multiarray\nvar count: Int\nThe total number of elements in the multiarray.\nvar dataType: MLMultiArrayDataType\nThe underlying type of the multiarray.\nvar shape: [NSNumber]\nThe multiarray’s multidimensional shape as a number array in which each element’s value is the size of the corresponding dimension."
  },
  {
    "title": "pixelBuffer | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlmultiarray/3882835-pixelbuffer",
    "html": "See Also\nAccessing a Multiarray’s Elements\nsubscript(Int) -> NSNumber\nAccesses the multiarray by using a linear offset.\nsubscript([NSNumber]) -> NSNumber\nAccesses the multiarray by using a number array that has an element for each dimension.\nvar dataPointer: UnsafeMutableRawPointer\nA pointer to the multiarray’s underlying memory.\nDeprecated"
  },
  {
    "title": "didChangeNotification | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlmodelcollection/3563964-didchangenotification",
    "html": "Deprecated\n\nUse Background Assets or URLSession instead.\n\nDiscussion\n\nRegister your app to get notifications when a model collection update is available by calling addObserver(forName:object:queue:using:).\n\nlet center = NotificationCenter.default\nvar token: NSObjectProtocol?\n\n\ntoken = center.addObserver(forName: MLModelCollection.didChangeNotification,\n                           object: nil,\n                           queue: nil) { [unowned self] note in\n    guard let modelCollection = note.object as? MLModelCollection else {\n        print(\"Model Collection notification's object is not a model collection\")\n        return\n    }\n\n\n    // Use updated model collection ...\n    self.receivedUpdatedModelCollection(modelCollection)\n\n\n    // Clean up notification registration.\n    center.removeObserver(token!)\n}\n\n\nTypically, you register for model collection notifications when your app needs to use the newest models as soon as the collection is available. Your app can always get the newest model collection by calling beginAccessing(identifier:completionHandler:)."
  },
  {
    "title": "allowLowPrecisionAccumulationOnGPU | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlmodelconfiguration/3222914-allowlowprecisionaccumulationong",
    "html": "See Also\nConfiguring GPU Usage\nvar preferredMetalDevice: MTLDevice?\nThe metal device you prefer this model use to make predictions (inference) and update the model."
  },
  {
    "title": "MLComputeUnits | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlcomputeunits",
    "html": "Overview\n\nUse this enumeration to set or inspect the processing units you allow a model to use when it makes a prediction.\n\nUse all to allow the OS to select the best processing unit to use (including the neural engine, if available).\n\nUse MLComputeUnits.cpuOnly to restrict the model to the CPU, if your app might run in the background or runs other GPU intensive tasks.\n\nTopics\nProcessing Unit Configurations\ncase all\nThe option you choose to allow the model to use all compute units available, including the neural engine.\ncase cpuOnly\nThe option you choose to limit the model to only use the CPU.\ncase cpuAndGPU\nThe option you choose to allow the model to use both the CPU and GPU, but not the neural engine.\ncase cpuAndNeuralEngine\nThe option you choose to allow the model to use both the CPU and neural engine, but not the GPU.\nRelationships\nConforms To\nSendable\nSee Also\nAllowing Access to Processing Units\nvar computeUnits: MLComputeUnits\nThe processing unit or units the model uses to make predictions."
  },
  {
    "title": "sequenceValue | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlfeaturevalue/2962861-sequencevalue",
    "html": "See Also\nAccessing the Feature’s Value\nvar isUndefined: Bool\nA Boolean value that indicates whether the feature value is undefined or missing.\nvar int64Value: Int64\nThe underlying integer of the feature value.\nvar doubleValue: Double\nThe underlying double of the feature value.\nvar stringValue: String\nThe underlying string of the feature value.\nvar imageBufferValue: CVPixelBuffer?\nThe underlying image of the feature value as a pixel buffer.\nfunc shapedArrayValue<Scalar>(of: Scalar.Type) -> MLShapedArray<Scalar>?\nReturns the underlying shaped array of the feature value.\nvar multiArrayValue: MLMultiArray?\nThe underlying multiarray of the feature value.\nvar dictionaryValue: [AnyHashable : NSNumber]\nThe underlying dictionary of the feature value."
  },
  {
    "title": "MLFeatureType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlfeaturetype",
    "html": "Topics\nEnumeration Cases\ncase int64\nThe type for integer features and feature values.\ncase double\nThe type for double features and feature values.\ncase image\nThe type for image features and feature values.\ncase multiArray\nThe type for multidimensional array features and feature values.\ncase string\nThe type for string features and feature values.\ncase dictionary\nThe type for dictionary features and feature values.\ncase sequence\nThe type for sequence features and feature values.\ncase invalid\nThe type for invalid feature values.\nRelationships\nConforms To\nSendable\nSee Also\nSupporting Types\nstruct MLShapedArray\nA machine learning collection type that stores scalar values in a multidimensional array.\nprotocol MLShapedArrayProtocol\nAn interface that defines a shaped array type.\nclass MLMultiArray\nA machine learning collection type that stores numeric values in an array with multiple dimensions.\nclass MLSequence\nA machine learning collection type that stores a series of strings or integers."
  },
  {
    "title": "MLSequence | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlsequence",
    "html": "Overview\n\nA sequence stores a series of integers or strings of any length as the underlying type of an MLFeatureValue. Some classifier models — typically natural language models, such as an NLTagger — produce an MLSequence feature value from their output features.\n\nTopics\nCreating a Sequence\ninit(strings: [String])\nCreates a sequence of strings from a string array.\ninit(int64s: [NSNumber])\nCreates a sequence of integers from an array of numbers.\ninit(empty: MLFeatureType)\nCreates an empty sequence of strings or integers.\nIdentifying the Sequence’s Element Type\nvar type: MLFeatureType\nThe underlying type of the sequence’s elements.\nRetrieving the Sequence’s Values\nvar stringValues: [String]\nAn array of strings in the sequence.\nvar int64Values: [NSNumber]\nAn array of 64-bit integers in the sequence.\nRelationships\nInherits From\nNSObject\nConforms To\nNSSecureCoding\nSee Also\nSupporting Types\nenum MLFeatureType\nThe possible types for feature values, input features, and output features.\nstruct MLShapedArray\nA machine learning collection type that stores scalar values in a multidimensional array.\nprotocol MLShapedArrayProtocol\nAn interface that defines a shaped array type.\nclass MLMultiArray\nA machine learning collection type that stores numeric values in an array with multiple dimensions."
  },
  {
    "title": "parameters | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlupdatecontext/3180097-parameters",
    "html": "See Also\nGetting the Update Context\nvar event: MLUpdateProgressEvent\nThe event type that triggered an update task to notify your app’s completion and update progress handlers.\nstruct MLUpdateProgressEvent\nA type of event during a model update task.\nvar task: MLUpdateTask\nThe update task that generated the update context.\nclass MLParameterKey\nThe keys for the parameter dictionary in a model configuration or a model update context."
  },
  {
    "title": "event | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlupdatecontext/3180094-event",
    "html": "See Also\nGetting the Update Context\nstruct MLUpdateProgressEvent\nA type of event during a model update task.\nvar task: MLUpdateTask\nThe update task that generated the update context.\nvar parameters: [MLParameterKey : Any]\nThe parameters for the update task.\nclass MLParameterKey\nThe keys for the parameter dictionary in a model configuration or a model update context."
  },
  {
    "title": "isEqual(to:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlfeaturevalue/2879399-isequal",
    "html": "Parameters\nvalue\n\nAnother feature value."
  },
  {
    "title": "doubleValue | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlfeaturevalue/2879375-doublevalue",
    "html": "See Also\nAccessing the Feature’s Value\nvar isUndefined: Bool\nA Boolean value that indicates whether the feature value is undefined or missing.\nvar int64Value: Int64\nThe underlying integer of the feature value.\nvar stringValue: String\nThe underlying string of the feature value.\nvar imageBufferValue: CVPixelBuffer?\nThe underlying image of the feature value as a pixel buffer.\nfunc shapedArrayValue<Scalar>(of: Scalar.Type) -> MLShapedArray<Scalar>?\nReturns the underlying shaped array of the feature value.\nvar multiArrayValue: MLMultiArray?\nThe underlying multiarray of the feature value.\nvar sequenceValue: MLSequence?\nThe underlying sequence of the feature value.\nvar dictionaryValue: [AnyHashable : NSNumber]\nThe underlying dictionary of the feature value."
  },
  {
    "title": "init(undefined:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlfeaturevalue/2879362-init",
    "html": "Parameters\ntype\n\nThe type of the undefined or missing value."
  },
  {
    "title": "sequenceConstraint | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlfeaturedescription/2962858-sequenceconstraint",
    "html": "See Also\nAccessing Feature Constraints\nvar imageConstraint: MLImageConstraint?\nThe size and format constraints for an image feature.\nclass MLImageConstraint\nThe width, height, and pixel format constraints of an image feature.\nvar dictionaryConstraint: MLDictionaryConstraint?\nThe constraint for a dictionary feature.\nclass MLDictionaryConstraint\nThe constraint on the keys for a dictionary feature.\nvar multiArrayConstraint: MLMultiArrayConstraint?\nThe constraints on a multidimensional array feature.\nclass MLMultiArrayConstraint\nThe shape and data type constraints for a multidimensional array feature.\nclass MLSequenceConstraint\nThe constraints for a sequence feature."
  },
  {
    "title": "multiArrayConstraint | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlfeaturedescription/2921264-multiarrayconstraint",
    "html": "See Also\nAccessing Feature Constraints\nvar imageConstraint: MLImageConstraint?\nThe size and format constraints for an image feature.\nclass MLImageConstraint\nThe width, height, and pixel format constraints of an image feature.\nvar dictionaryConstraint: MLDictionaryConstraint?\nThe constraint for a dictionary feature.\nclass MLDictionaryConstraint\nThe constraint on the keys for a dictionary feature.\nclass MLMultiArrayConstraint\nThe shape and data type constraints for a multidimensional array feature.\nvar sequenceConstraint: MLSequenceConstraint?\nThe constraints for a sequence feature.\nclass MLSequenceConstraint\nThe constraints for a sequence feature."
  },
  {
    "title": "name | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlkey/3180057-name",
    "html": "See Also\nRetrieving a Key’s Information\nvar scope: String?\nThe applicable scope of the machine learning key."
  },
  {
    "title": "trainingInputDescriptionsByName | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlmodeldescription/3180060-traininginputdescriptionsbyname",
    "html": "See Also\nAccessing Update Descriptions\nvar isUpdatable: Bool\nA Boolean value that indicates whether you can update the model with additional training.\nvar parameterDescriptionsByKey: [MLParameterKey : MLParameterDescription]\nA dictionary of the descriptions for the model’s parameters.\nclass MLParameterDescription\nA description of a model parameter that includes a default value and a constraint, if applicable."
  },
  {
    "title": "scope | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlkey/3333248-scope",
    "html": "See Also\nRetrieving a Key’s Information\nvar name: String\nThe name of the machine learning key."
  },
  {
    "title": "parameterDescriptionsByKey | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlmodeldescription/3333250-parameterdescriptionsbykey",
    "html": "See Also\nAccessing Update Descriptions\nvar isUpdatable: Bool\nA Boolean value that indicates whether you can update the model with additional training.\nvar trainingInputDescriptionsByName: [String : MLFeatureDescription]\nA dictionary of the training input feature descriptions, which the model keys by the input’s name.\nclass MLParameterDescription\nA description of a model parameter that includes a default value and a constraint, if applicable."
  },
  {
    "title": "MLParameterDescription | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlparameterdescription",
    "html": "Topics\nDescribing the Model Parameter\nvar defaultValue: Any\nThe default value for the parameter.\nvar key: MLParameterKey\nThe key for this parameter description value.\nConstraining Numeric Values\nvar numericConstraint: MLNumericConstraint?\nThe constraints of this paramter description value, if and only if the value is numerical.\nclass MLNumericConstraint\nThe value limitations of a number.\nRelationships\nInherits From\nNSObject\nConforms To\nNSSecureCoding\nSee Also\nAccessing Update Descriptions\nvar isUpdatable: Bool\nA Boolean value that indicates whether you can update the model with additional training.\nvar trainingInputDescriptionsByName: [String : MLFeatureDescription]\nA dictionary of the training input feature descriptions, which the model keys by the input’s name.\nvar parameterDescriptionsByKey: [MLParameterKey : MLParameterDescription]\nA dictionary of the descriptions for the model’s parameters."
  },
  {
    "title": "featureType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlmodelerror/2887416-featuretype",
    "html": "Discussion\n\nCore ML typically throws this error when an app sends an input feature a value that’s of an incorrect type.\n\nSee Also\nError Codes\nstatic var parameters: MLModelError.Code\nAn error code for problems related to model parameters.\nstatic var modelCollection: MLModelError.Code\nAn error code for problems related to retrieving a model collection from the deployment system.\nstatic var modelDecryptionKeyFetch: MLModelError.Code\nAn error code for problems related to retrieving a model’s decryption key.\nstatic var modelDecryption: MLModelError.Code\nAn error code for problems related to decrypting models.\nstatic var update: MLModelError.Code\nAn error code for problems related to on-device model updates.\nstatic var customLayer: MLModelError.Code\nAn error code for problems related to custom layers.\nstatic var customModel: MLModelError.Code\nAn error code for problems related to custom models.\nstatic var io: MLModelError.Code\nAn error code for problems related to the system’s input or output.\nstatic var predictionCancelled: MLModelError.Code\nAn error code for problems related to cancelling the prediction before it completes.\nstatic var generic: MLModelError.Code\nAn error code for runtime issues that don’t apply to the other error codes.\nenum MLModelError.Code\nThe categories of model-specific errors."
  },
  {
    "title": "usesCPUOnly | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlpredictionoptions/2921288-usescpuonly",
    "html": "Discussion\n\nYour model should be restricted to the CPU if it might run in the background or if your app has other GPU intensive tasks."
  },
  {
    "title": "modelDecryptionKeyFetch | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlmodelerror/3670009-modeldecryptionkeyfetch",
    "html": "Discussion\n\nCore ML typically throws this error when the device doesn’t have access to the network.\n\nSee Also\nError Codes\nstatic var featureType: MLModelError.Code\nAn error code for problems related to model features.\nstatic var parameters: MLModelError.Code\nAn error code for problems related to model parameters.\nstatic var modelCollection: MLModelError.Code\nAn error code for problems related to retrieving a model collection from the deployment system.\nstatic var modelDecryption: MLModelError.Code\nAn error code for problems related to decrypting models.\nstatic var update: MLModelError.Code\nAn error code for problems related to on-device model updates.\nstatic var customLayer: MLModelError.Code\nAn error code for problems related to custom layers.\nstatic var customModel: MLModelError.Code\nAn error code for problems related to custom models.\nstatic var io: MLModelError.Code\nAn error code for problems related to the system’s input or output.\nstatic var predictionCancelled: MLModelError.Code\nAn error code for problems related to cancelling the prediction before it completes.\nstatic var generic: MLModelError.Code\nAn error code for runtime issues that don’t apply to the other error codes.\nenum MLModelError.Code\nThe categories of model-specific errors."
  },
  {
    "title": "update | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlmodelerror/3197874-update",
    "html": "Discussion\n\nCore ML typically throws this error when the update process encounters a problem at runtime, such as an MLMultiArray input with an incorrect shape.\n\nSee Also\nError Codes\nstatic var featureType: MLModelError.Code\nAn error code for problems related to model features.\nstatic var parameters: MLModelError.Code\nAn error code for problems related to model parameters.\nstatic var modelCollection: MLModelError.Code\nAn error code for problems related to retrieving a model collection from the deployment system.\nstatic var modelDecryptionKeyFetch: MLModelError.Code\nAn error code for problems related to retrieving a model’s decryption key.\nstatic var modelDecryption: MLModelError.Code\nAn error code for problems related to decrypting models.\nstatic var customLayer: MLModelError.Code\nAn error code for problems related to custom layers.\nstatic var customModel: MLModelError.Code\nAn error code for problems related to custom models.\nstatic var io: MLModelError.Code\nAn error code for problems related to the system’s input or output.\nstatic var predictionCancelled: MLModelError.Code\nAn error code for problems related to cancelling the prediction before it completes.\nstatic var generic: MLModelError.Code\nAn error code for runtime issues that don’t apply to the other error codes.\nenum MLModelError.Code\nThe categories of model-specific errors."
  },
  {
    "title": "MLModelError.Code | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlmodelerror/code",
    "html": "Topics\nError Codes\ncase featureType\nAn error code for problems related to model features.\ncase parameters\nAn error code for problems related to model parameters.\ncase modelCollection\nAn error code for problems related to retrieving a model collection from the deployment system.\ncase modelDecryptionKeyFetch\nAn error code for problems related to retrieving a model’s decryption key.\ncase modelDecryption\nAn error code for problems related to decrypting models.\ncase update\nAn error code for problems related to on-device model updates.\ncase customLayer\nAn error code for problems related to custom layers.\ncase customModel\nAn error code for problems related to custom models.\ncase io\nAn error code for problems related to the system’s input or output.\ncase predictionCancelled\nAn error code for problems related to canceling the prediction before it completes.\ncase generic\nAn error code for runtime issues that don’t apply to the other error codes.\nRelationships\nConforms To\nSendable\nSee Also\nError Codes\nstatic var featureType: MLModelError.Code\nAn error code for problems related to model features.\nstatic var parameters: MLModelError.Code\nAn error code for problems related to model parameters.\nstatic var modelCollection: MLModelError.Code\nAn error code for problems related to retrieving a model collection from the deployment system.\nstatic var modelDecryptionKeyFetch: MLModelError.Code\nAn error code for problems related to retrieving a model’s decryption key.\nstatic var modelDecryption: MLModelError.Code\nAn error code for problems related to decrypting models.\nstatic var update: MLModelError.Code\nAn error code for problems related to on-device model updates.\nstatic var customLayer: MLModelError.Code\nAn error code for problems related to custom layers.\nstatic var customModel: MLModelError.Code\nAn error code for problems related to custom models.\nstatic var io: MLModelError.Code\nAn error code for problems related to the system’s input or output.\nstatic var predictionCancelled: MLModelError.Code\nAn error code for problems related to cancelling the prediction before it completes.\nstatic var generic: MLModelError.Code\nAn error code for runtime issues that don’t apply to the other error codes."
  },
  {
    "title": "customModel | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlmodelerror/3020520-custommodel",
    "html": "Discussion\n\nCore ML typically throws this error when the custom model has a programming mistake. For example, a custom model’s prediction method fails with this error code if Core ML can’t find the custom model’s implementation.\n\nSee Also\nError Codes\nstatic var featureType: MLModelError.Code\nAn error code for problems related to model features.\nstatic var parameters: MLModelError.Code\nAn error code for problems related to model parameters.\nstatic var modelCollection: MLModelError.Code\nAn error code for problems related to retrieving a model collection from the deployment system.\nstatic var modelDecryptionKeyFetch: MLModelError.Code\nAn error code for problems related to retrieving a model’s decryption key.\nstatic var modelDecryption: MLModelError.Code\nAn error code for problems related to decrypting models.\nstatic var update: MLModelError.Code\nAn error code for problems related to on-device model updates.\nstatic var customLayer: MLModelError.Code\nAn error code for problems related to custom layers.\nstatic var io: MLModelError.Code\nAn error code for problems related to the system’s input or output.\nstatic var predictionCancelled: MLModelError.Code\nAn error code for problems related to cancelling the prediction before it completes.\nstatic var generic: MLModelError.Code\nAn error code for runtime issues that don’t apply to the other error codes.\nenum MLModelError.Code\nThe categories of model-specific errors."
  },
  {
    "title": "predictionCancelled | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlmodelerror/4157186-predictioncancelled",
    "html": "See Also\nError Codes\nstatic var featureType: MLModelError.Code\nAn error code for problems related to model features.\nstatic var parameters: MLModelError.Code\nAn error code for problems related to model parameters.\nstatic var modelCollection: MLModelError.Code\nAn error code for problems related to retrieving a model collection from the deployment system.\nstatic var modelDecryptionKeyFetch: MLModelError.Code\nAn error code for problems related to retrieving a model’s decryption key.\nstatic var modelDecryption: MLModelError.Code\nAn error code for problems related to decrypting models.\nstatic var update: MLModelError.Code\nAn error code for problems related to on-device model updates.\nstatic var customLayer: MLModelError.Code\nAn error code for problems related to custom layers.\nstatic var customModel: MLModelError.Code\nAn error code for problems related to custom models.\nstatic var io: MLModelError.Code\nAn error code for problems related to the system’s input or output.\nstatic var generic: MLModelError.Code\nAn error code for runtime issues that don’t apply to the other error codes.\nenum MLModelError.Code\nThe categories of model-specific errors."
  },
  {
    "title": "io | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlmodelerror/2890786-io",
    "html": "Discussion\n\nCore ML typically throws this error when the file system encounters an error.\n\nSee Also\nError Codes\nstatic var featureType: MLModelError.Code\nAn error code for problems related to model features.\nstatic var parameters: MLModelError.Code\nAn error code for problems related to model parameters.\nstatic var modelCollection: MLModelError.Code\nAn error code for problems related to retrieving a model collection from the deployment system.\nstatic var modelDecryptionKeyFetch: MLModelError.Code\nAn error code for problems related to retrieving a model’s decryption key.\nstatic var modelDecryption: MLModelError.Code\nAn error code for problems related to decrypting models.\nstatic var update: MLModelError.Code\nAn error code for problems related to on-device model updates.\nstatic var customLayer: MLModelError.Code\nAn error code for problems related to custom layers.\nstatic var customModel: MLModelError.Code\nAn error code for problems related to custom models.\nstatic var predictionCancelled: MLModelError.Code\nAn error code for problems related to cancelling the prediction before it completes.\nstatic var generic: MLModelError.Code\nAn error code for runtime issues that don’t apply to the other error codes.\nenum MLModelError.Code\nThe categories of model-specific errors."
  },
  {
    "title": "generic | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlmodelerror/2887415-generic",
    "html": "Discussion\n\nCore ML typically throws this error when it encounters an internal problem.\n\nSee Also\nError Codes\nstatic var featureType: MLModelError.Code\nAn error code for problems related to model features.\nstatic var parameters: MLModelError.Code\nAn error code for problems related to model parameters.\nstatic var modelCollection: MLModelError.Code\nAn error code for problems related to retrieving a model collection from the deployment system.\nstatic var modelDecryptionKeyFetch: MLModelError.Code\nAn error code for problems related to retrieving a model’s decryption key.\nstatic var modelDecryption: MLModelError.Code\nAn error code for problems related to decrypting models.\nstatic var update: MLModelError.Code\nAn error code for problems related to on-device model updates.\nstatic var customLayer: MLModelError.Code\nAn error code for problems related to custom layers.\nstatic var customModel: MLModelError.Code\nAn error code for problems related to custom models.\nstatic var io: MLModelError.Code\nAn error code for problems related to the system’s input or output.\nstatic var predictionCancelled: MLModelError.Code\nAn error code for problems related to cancelling the prediction before it completes.\nenum MLModelError.Code\nThe categories of model-specific errors."
  },
  {
    "title": "errorCode | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlmodelerror/2887417-errorcode",
    "html": "See Also\nError Details\nvar errorUserInfo: [String : Any]\nA dictionary of additional information about the error.\nvar localizedDescription: String\nThe localized string that describes the error."
  },
  {
    "title": "localizedDescription | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlmodelerror/2887420-localizeddescription",
    "html": "See Also\nError Details\nvar errorCode: Int\nAn integer value that represents an error case.\nvar errorUserInfo: [String : Any]\nA dictionary of additional information about the error."
  },
  {
    "title": "hash(into:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlmodelerror/3726360-hash",
    "html": "Parameters\nhasher\n\nA hasher the method uses to combine the components of the error.\n\nSee Also\nProtocol Support\ninit(Code, userInfo: [String : Any])\nCreates a model error with an error code.\nvar code: Code\nAn integer value that represents the code.\nvar userInfo: [String : Any]\nA dictionary of additional information.\nvar hashValue: Int\nThe hashed value of the error.\nstatic func == (MLModelError, MLModelError) -> Bool\nReturns a Boolean value indicating whether the two values are equal.\nstatic func != (MLModelError, MLModelError) -> Bool\nReturns a Boolean value indicating whether the two values are unequal."
  },
  {
    "title": "code | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlmodelerror/3726359-code",
    "html": "See Also\nProtocol Support\ninit(Code, userInfo: [String : Any])\nCreates a model error with an error code.\nvar userInfo: [String : Any]\nA dictionary of additional information.\nvar hashValue: Int\nThe hashed value of the error.\nfunc hash(into: inout Hasher)\nHashes the essential components of the error by feeding them into a hasher.\nstatic func == (MLModelError, MLModelError) -> Bool\nReturns a Boolean value indicating whether the two values are equal.\nstatic func != (MLModelError, MLModelError) -> Bool\nReturns a Boolean value indicating whether the two values are unequal."
  },
  {
    "title": "!=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlmodelerror/2947099",
    "html": "Parameters\nlhs\n\nA model error.\n\nrhs\n\nAnother model error.\n\nSee Also\nProtocol Support\ninit(Code, userInfo: [String : Any])\nCreates a model error with an error code.\nvar code: Code\nAn integer value that represents the code.\nvar userInfo: [String : Any]\nA dictionary of additional information.\nvar hashValue: Int\nThe hashed value of the error.\nfunc hash(into: inout Hasher)\nHashes the essential components of the error by feeding them into a hasher.\nstatic func == (MLModelError, MLModelError) -> Bool\nReturns a Boolean value indicating whether the two values are equal."
  },
  {
    "title": "epochIndex | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlmetrickey/3180090-epochindex",
    "html": "Discussion\n\nUse this key to fetch the epoch index value in the metrics dictionary.\n\nSee Also\nGetting the Keys\nclass var lossValue: MLMetricKey\nThe key you use to access the current loss (a float value).\nclass var miniBatchIndex: MLMetricKey\nThe key you use to access the mini-batch index (an Int64 value) within an epoch."
  },
  {
    "title": "setWeightData(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlcustomlayer/2936860-setweightdata",
    "html": "Required\n\nParameters\nweights\n\nThe data encoded in the weights field of the model specification.\n\nDiscussion\n\nImplement this method to assign the weights for all the connections between nodes in your layer. This method is called once after the initialization call. Your implementation should validate the weights and throw an error if the weights do not have the expected shape or values.\n\nThe data encoded in the weights field of the .mlmodel file is loaded and passed into this method. If there are repeated weights in the .mlmodel file, they will be listed explicitly in the weights array. The weight values are provided in the order that they were defined during the custom layer conversion process. Keep a reference to the weights passed in because copying the weights array can significantly increase an app's memory. Avoid modifying values of the weights.\n\nSee Also\nIntegrating a Layer\nfunc outputShapes(forInputShapes: [[NSNumber]]) -> [[NSNumber]]\nCalculates the shapes of the output of this layer for the given input shapes.\n\nRequired"
  },
  {
    "title": "numberOfNeighbors | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlparameterkey/3362529-numberofneighbors",
    "html": "Discussion\n\nThe value type for the numberOfNeighbors key is an Int64.\n\nSee Also\nAccessing Model Parameters\nclass var linkedModelFileName: MLParameterKey\nThe key you use to access the linked model’s filename.\nclass var linkedModelSearchPath: MLParameterKey\nThe key you use to access the linked model’s search path."
  },
  {
    "title": "scoped(to:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlparameterkey/3333251-scoped",
    "html": "Parameters\nscope\n\nA scope that targets the key to an internal component of a model.\n\nReturn Value\n\nA new parameter key.\n\nDiscussion\n\nUse this method to target:\n\nA specific layer of a model\n\nA specific model within a pipeline model\n\nA specific layer of a model within a pipeline model\n\nFor example, to target an MLParameterKey to a layer in a model, scope the key with the layer’s name.\n\nlet weightsKey = MLParameterKey.weights\n\n\n// Weights key scoped to the \"FullyConnected\" layer within a model.\nlet fullyConnectedWeights = weightsKey.scoped(to: \"FullyConnected\")\n\n\n// Prints \"Key 1: FullyConnected.weights\".\nprint(\"Key 1: \\(fullyConnectedWeights)\")\n\n\nTo target a model within a pipeline model, scope the MLParameterKey with the model’s name.\n\n// Number-of-neighbors key scoped to the first model in a pipeline model.\nlet firstModelNumberOfNeighbors = MLParameterKey.numberOfNeighbors.scoped(to: \"model0\")\n\n\n// Prints \"Key 2: model0.numberOfNeighbors\".\nprint(\"Key 2: \\(firstModelNumberOfNeighbors)\")\n\n\nTo target a layer of a model within a pipeline model, start with an MLParameterKey you’ve already scoped to the model, and add an additional scope with the layer’s name.\n\nlet model1Biases = MLParameterKey.biases.scoped(to: \"model1\")\n\n\n// Biases key scoped to the \"FullyConnected\" layer of the second model in a pipeline model.\nlet secondModelFullyConnectedBiases = model1Biases.scoped(to: \"FullyConnected\")\n\n\n// Prints \"Key 3: model1.FullyConnected.biases\".\nprint(\"Key 3: \\(secondModelFullyConnectedBiases)\")\n\n\nBy default, a pipeline model names its individual models in the pipeline as model0, model1, and so on."
  },
  {
    "title": "learningRate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlparameterkey/3180073-learningrate",
    "html": "Discussion\n\nThe value type for the learningRate key is a Double.\n\nTo modify a model’s learning rate midway through an MLUpdateTask, use its resume(withParameters:) method to set a new value for the model’s learning rate. You do this in the progress handler that you specified in the MLUpdateProgressHandlers instance when you created the update task using init(forModelAt:trainingData:configuration:progressHandlers:).\n\nSee Personalizing a Model with On-Device Updates.\n\nSee Also\nAccessing Model Update Parameters\nclass var momentum: MLParameterKey\nThe key you use to access the stochastic gradient descent (SGD) optimizer’s momentum parameter.\nclass var miniBatchSize: MLParameterKey\nThe key you use to access the optimizer’s mini batch-size parameter.\nclass var beta1: MLParameterKey\nThe key you use to access the Adam optimizer’s first beta parameter.\nclass var beta2: MLParameterKey\nThe key you use to access the Adam optimizer’s second beta parameter.\nclass var eps: MLParameterKey\nThe key you use to access the Adam optimizer’s epsilon parameter.\nclass var epochs: MLParameterKey\nThe key you use to access the optimizer’s epochs parameter.\nclass var shuffle: MLParameterKey\nThe key you use to access the shuffle parameter, a Boolean value that determines whether the model randomizes the data between epochs.\nclass var seed: MLParameterKey\nThe key you use to access the seed parameter that initializes the random number generator for the shuffle option."
  },
  {
    "title": "init(sequence:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlfeaturevalue/2962860-init",
    "html": "Parameters\nsequence\n\nAn MLSequence instance.\n\nSee Also\nCreating Collection Feature Values\ninit(dictionary: [AnyHashable : NSNumber])\nCreates a feature value that contains a dictionary of numbers."
  },
  {
    "title": "momentum | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlparameterkey/3197646-momentum",
    "html": "Discussion\n\nThe value type for the momentum key is a Double.\n\nSee Also\nAccessing Model Update Parameters\nclass var learningRate: MLParameterKey\nThe key you use to access the optimizer’s learning rate parameter.\nclass var miniBatchSize: MLParameterKey\nThe key you use to access the optimizer’s mini batch-size parameter.\nclass var beta1: MLParameterKey\nThe key you use to access the Adam optimizer’s first beta parameter.\nclass var beta2: MLParameterKey\nThe key you use to access the Adam optimizer’s second beta parameter.\nclass var eps: MLParameterKey\nThe key you use to access the Adam optimizer’s epsilon parameter.\nclass var epochs: MLParameterKey\nThe key you use to access the optimizer’s epochs parameter.\nclass var shuffle: MLParameterKey\nThe key you use to access the shuffle parameter, a Boolean value that determines whether the model randomizes the data between epochs.\nclass var seed: MLParameterKey\nThe key you use to access the seed parameter that initializes the random number generator for the shuffle option."
  },
  {
    "title": "linkedModelFileName | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlparameterkey/3227893-linkedmodelfilename",
    "html": "Discussion\n\nThe value type for the linkedModelFileName key is a String.\n\nSee Also\nAccessing Model Parameters\nclass var numberOfNeighbors: MLParameterKey\nThe key you use to access the number of neighbors that adjusts the affinity of a k-nearest-neighbor model.\nclass var linkedModelSearchPath: MLParameterKey\nThe key you use to access the linked model’s search path."
  },
  {
    "title": "seed | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlparameterkey/3333252-seed",
    "html": "Discussion\n\nThe value type for the seed key is an Int64.\n\nSee Also\nAccessing Model Update Parameters\nclass var learningRate: MLParameterKey\nThe key you use to access the optimizer’s learning rate parameter.\nclass var momentum: MLParameterKey\nThe key you use to access the stochastic gradient descent (SGD) optimizer’s momentum parameter.\nclass var miniBatchSize: MLParameterKey\nThe key you use to access the optimizer’s mini batch-size parameter.\nclass var beta1: MLParameterKey\nThe key you use to access the Adam optimizer’s first beta parameter.\nclass var beta2: MLParameterKey\nThe key you use to access the Adam optimizer’s second beta parameter.\nclass var eps: MLParameterKey\nThe key you use to access the Adam optimizer’s epsilon parameter.\nclass var epochs: MLParameterKey\nThe key you use to access the optimizer’s epochs parameter.\nclass var shuffle: MLParameterKey\nThe key you use to access the shuffle parameter, a Boolean value that determines whether the model randomizes the data between epochs."
  },
  {
    "title": "resume() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mltask/3180080-resume",
    "html": "Discussion\n\nUse this method to start a task for the first time or resumes a task that has paused. Tasks pause when they notify your app’s progress handlers, such as those you provide to an MLUpdateProgressHandlers instance.\n\nSee Also\nStarting and Stopping a Task\nfunc cancel()\nCancels a machine learning task before it completes."
  },
  {
    "title": "error | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mltask/3180079-error",
    "html": "See Also\nChecking the State of a Task\nvar state: MLTaskState\nThe current state of the machine learning task.\nenum MLTaskState\nThe state of a machine learning task."
  },
  {
    "title": "state | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mltask/3180081-state",
    "html": "See Also\nChecking the State of a Task\nenum MLTaskState\nThe state of a machine learning task.\nvar error: Error?\nThe underlying error if the task is in a failed state."
  },
  {
    "title": "cancel() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mltask/3180078-cancel",
    "html": "See Also\nStarting and Stopping a Task\nfunc resume()\nBegins or resumes a machine learning task."
  },
  {
    "title": "name | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlfeaturedescription/2879359-name",
    "html": "See Also\nInspecting a Feature\nvar type: MLFeatureType\nThe type of this feature.\nenum MLFeatureType\nThe possible types for feature values, input features, and output features.\nvar isOptional: Bool\nA Boolean value that indicates whether this feature is optional."
  },
  {
    "title": "predictions(from:options:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlcustommodel/2994298-predictions",
    "html": "Parameters\ninputBatch\n\nThe batch of feature values the model needs to make its predictions.\n\noptions\n\nThe options to be applied to the predictions.\n\nReturn Value\n\nA batch provider that represents the model's predictions for the batch of inputs.\n\nSee Also\nMaking Predictions\nfunc prediction(from: MLFeatureProvider, options: MLPredictionOptions) -> MLFeatureProvider\nPredicts output values from the given input features.\n\nRequired"
  },
  {
    "title": "modelDescription | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlmodel/2879179-modeldescription",
    "html": "See Also\nInspecting a Model\nstatic var availableComputeDevices: [MLComputeDevice]\nThe list of available compute devices that the model’s prediction methods use.\nvar configuration: MLModelConfiguration\nThe configuration of the model set during initialization.\nclass MLModelDescription\nInformation about a model, primarily the input and output format for each feature the model expects, and optional metadata.\nfunc parameterValue(for: MLParameterKey) -> Any\nReturns a model parameter value for a key.\nclass MLParameterKey\nThe keys for the parameter dictionary in a model configuration or a model update context."
  },
  {
    "title": "init(string:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlfeaturevalue/2879343-init",
    "html": "Parameters\nvalue\n\nA string."
  },
  {
    "title": "deploymentID | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlmodelcollection/3672168-deploymentid",
    "html": "Deprecated\n\nUse Background Assets or URLSession instead.\n\nSee Also\nIdentifying a Model Collection\nvar identifier: String\nThe name of the model collection, unique to the development team.\nDeprecated"
  },
  {
    "title": "init(contentsOf:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlmodel/2880279-init",
    "html": "Parameters\nurl\n\nThe path to a compiled model file (ModelName.mlmodelc), typically with the URL that compileModel(at:) returns.\n\nDiscussion\n\nIn most cases, your app won't need to create a model object directly. Consider the programmer-friendly wrapper class that Xcode automatically generates when you add a model to your project (see Integrating a Core ML Model into Your App).\n\nIf the wrapper class doesn't meet your app's needs or you need to customize the model's configuration, use this initializer to create a model object from any compiled model file you can access. Typically, you use this initializer after your app has downloaded and compiled a model, which is one technique for saving space in your app (see Downloading and Compiling a Model on the User’s Device).\n\nSee Also\nLoading a Model\nclass func load(contentsOf: URL, configuration: MLModelConfiguration) -> MLModel\nConstruct a model asynchronously from a compiled model asset.\nclass func load(MLModelAsset, configuration: MLModelConfiguration, completionHandler: (MLModel?, Error?) -> Void)\nConstruct a model asynchronously from a compiled model asset.\nclass func load(contentsOf: URL, configuration: MLModelConfiguration, completionHandler: (Result<MLModel, Error>) -> Void)\nCreates a Core ML model instance asynchronously from a compiled model file, a custom configuration, and a completion handler.\ninit(contentsOf: URL, configuration: MLModelConfiguration)\nCreates a Core ML model instance from a compiled model file and a custom configuration."
  },
  {
    "title": "MLModelCollection.Entry | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlmodelcollection/entry",
    "html": "Deprecated\n\nUse Background Assets or URLSession instead.\n\nTopics\nIdentifying a Model\nvar modelIdentifier: String\nThe name of the model, which is unique to the collection.\nLocating a Compiled Model File\nvar modelURL: URL\nThe compiled model’s location on the device’s file system.\nComparing Model Collection Entries\nfunc isEqual(to: MLModelCollection.Entry) -> Bool\nReturns a Boolean value that indicates whether the two entries are equal.\nRelationships\nInherits From\nNSObject\nSee Also\nRetreiving Models from a Collection\nvar entries: [String : MLModelCollection.Entry]\nA dictionary of model entries keyed to the models’ identifiers.\nDeprecated"
  },
  {
    "title": "computeUnits | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlmodelconfiguration/3022235-computeunits",
    "html": "See Also\nAllowing Access to Processing Units\nenum MLComputeUnits\nThe set of processing-unit configurations the model can use to make predictions."
  },
  {
    "title": "parameters | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlmodelconfiguration/3333249-parameters",
    "html": "See Also\nConfiguring Model Parameters\nvar modelDisplayName: String?\nA human readable name of a model for display purposes.\nclass MLParameterKey\nThe keys for the parameter dictionary in a model configuration or a model update context."
  },
  {
    "title": "allComputeDevices | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlcomputedevice/4134993-allcomputedevices",
    "html": "Discussion\n\nIf a compute device becomes inaccessible, this array won’t include it. For example, this array won’t contain the GPU device after it’s removed."
  },
  {
    "title": "Finding answers to questions in a text document | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/model_integration_samples/finding_answers_to_questions_in_a_text_document",
    "html": "Overview\n\nThis sample app leverages the BERT model to find the answer to a user’s question in a body of text. The model accepts text from a document and a question, in natural English, about the document. The model responds with the location of a passage within the document text that answers the question. For example, given the text, “The quick brown fox jumps over the lethargic dog.”, with the question “Who jumped over the dog?”, the BERT model’s predicted answer is, “the quick brown fox”.\n\nThe BERT model does not generate new sentences to answer a given question. It finds the passage in a document that’s most likely to answer the question.\n\nThe sample leverages the BERT model by:\n\nImporting the BERT model’s vocabulary into a dictionary\n\nBreaking up the document and question texts into tokens\n\nConverting the tokens to ID numbers using the vocabulary dictionary\n\nPacking the converted token IDs into the model’s input format\n\nCalling the BERT model’s prediction(from:) method\n\nLocating the answer by analyzing the BERT model’s output\n\nExtracting that answer from the original document text\n\nConfigure the sample code project\n\nBefore you run the sample code project in Xcode, use a device with either:\n\niOS 13 or later\n\nmacOS 10.15 or later\n\nBuild the vocabulary\n\nThe first step to using the BERT model is to import its vocabulary. The sample creates a vocabulary dictionary by splitting the vocabulary file into lines, each of which has one token.\n\nThe sample’s loadVocabulary method creates a dictionary entry for each token, and each entry occupies an entire line in the vocabulary text file. The function assigns each token’s (zero-based) line number as its value. For example, the first token, \"[PAD]\", has an ID of 0, and the 5,001st token, \"knight\", has an ID of 5000.\n\nSplit the text into word tokens\n\nThe BERT model requires you to convert each word into one or more token IDs. Before you can use the vocabulary dictionary to find those IDs, you must divide the document’s text and the question’s text into word tokens.\n\nThe sample does this by using an NLTagger, which breaks up a string into word tokens, each of which is a substring of the original. The sample’s wordTokens(from rawString:) method adds each word token to an array as the tagger enumerates through them.\n\n// Store the tokenized substrings into an array.\nvar wordTokens = [Substring]()\n\n\n// Use Natural Language's NLTagger to tokenize the input by word.\nlet tagger = NLTagger(tagSchemes: [.tokenType])\ntagger.string = rawString\n\n\n// Find all tokens in the string and append to the array.\ntagger.enumerateTags(in: rawString.startIndex..<rawString.endIndex,\n                     unit: .word,\n                     scheme: .tokenType,\n                     options: [.omitWhitespace]) { (_, range) -> Bool in\n    wordTokens.append(rawString[range])\n    return true\n}\n\n\nreturn wordTokens\n\n\nThe sample app leverages the tagger to split each string into tokens by using its enumerateTags(in:unit:scheme:options:using:) method with the tokenType tagging scheme and the NLTokenUnit.word token unit.\n\nConvert word or wordpiece tokens into their IDs\n\nFor speed and efficiency, the BERT model operates on token IDs, which are numbers that represent tokens, rather than operating on the text tokens themselves. The sample’s wordpieceTokens(from wordTokens:) method converts each word token into its ID by looking it up in the vocabulary dictionary.\n\nlet subTokenID = BERTVocabulary.tokenID(of: searchTerm)\n\n\nIf a word token doesn’t exist in the vocabulary, the method looks for subtokens, or wordpieces. A wordpiece is a component of a larger word token. For example, the word lethargic isn’t in the vocabulary but its wordpieces, let, har, and gic are. Dividing the vocabulary’s large words into wordpieces reduces the vocabulary size and makes the BERT model more flexible. The model can understand words that aren’t explicitly in the vocabulary by combining their wordpieces.\n\nSecondary wordpieces, such as har and gic, each appear in the vocabulary with two leading pound signs, as ##har and ##gic.\n\nContinuing the example, the method converts document text into the word and wordpiece token IDs shown in the following figure.\n\nPrepare the model input\n\nThe BERT model has two inputs:\n\nwordIDs — Accepts the document and question texts\n\nwordTypes — Tells the BERT model which elements of wordIDs are from the document\n\nThe sample creates the wordIDs array by arranging the token IDs in the following order:\n\nA classification start token ID, which has a value of 101 and appears as \"[CLS]\" in the vocabulary file\n\nThe token IDs from the question string\n\nA separator token ID, which has a value of 102 and appears as \"[SEP]\" in the vocabulary file\n\nThe token IDs from the text string\n\nAnother separator token ID\n\nOne or more padding token IDs for the remaining, unused elements, which have a value of 0 and appear as \"[PAD]\" in the vocabulary file\n\n// Start the wordID array with the `classification start` token.\nvar wordIDs = [BERTVocabulary.classifyStartTokenID]\n\n\n// Add the question tokens and a separator.\nwordIDs += question.tokenIDs\nwordIDs += [BERTVocabulary.separatorTokenID]\n\n\n// Add the document tokens and a separator.\nwordIDs += document.tokenIDs\nwordIDs += [BERTVocabulary.separatorTokenID]\n\n\n// Fill the remaining token slots with padding tokens.\nlet tokenIDPadding = BERTInput.maxTokens - wordIDs.count\nwordIDs += Array(repeating: BERTVocabulary.paddingTokenID, count: tokenIDPadding)\n\n\nNext, the sample prepares the wordTypes input by creating an array of the same length, where all the elements that correspond to the document text are 1 and all others are 0.\n\n// Set all of the token types before the document to 0.\nvar wordTypes = Array(repeating: 0, count: documentOffset)\n\n\n// Set all of the document token types to 1.\nwordTypes += Array(repeating: 1, count: document.tokens.count)\n\n\n// Set the remaining token types to 0.\nlet tokenTypePadding = BERTInput.maxTokens - wordTypes.count\nwordTypes += Array(repeating: 0, count: tokenTypePadding)\n\n\nContinuing the example, the sample arranges the two input arrays with the values shown in the figure below.\n\nNext, the sample creates an MLMultiArray for each input and copies the contents from the arrays, which it uses to create a BERTQAFP16Input feature provider.\n\nNote\n\nThe BERT model in this sample requires a one-dimensional MLMultiArray input with 384 elements. Models from other sources may have different inputs or shapes.\n\n// Create the MLMultiArray instances.\nlet tokenIDMultiArray = try? MLMultiArray(wordIDs)\nlet wordTypesMultiArray = try? MLMultiArray(wordTypes)\n\n\n// Unwrap the MLMultiArray optionals.\nguard let tokenIDInput = tokenIDMultiArray else {\n    fatalError(\"Couldn't create wordID MLMultiArray input\")\n}\n\n\nguard let tokenTypeInput = wordTypesMultiArray else {\n    fatalError(\"Couldn't create wordType MLMultiArray input\")\n}\n\n\n// Create the BERT input MLFeatureProvider.\nlet modelInput = BERTQAFP16Input(wordIDs: tokenIDInput,\n                                 wordTypes: tokenTypeInput)\n\n\nMake a prediction\n\nYou use the BERT model to predict where to find an answer to the question in the document text, by giving the model your input feature provider with the input MLMultiArray instances. The sample then calls the model’s prediction(from:) method in the app’s findAnswer(for question: in document:) method.\n\nguard let prediction = try? bertModel.prediction(input: modelInput) else {\n    return \"The BERT model is unable to make a prediction.\"\n}\n\n\nFind the answer\n\nYou locate the answer to the question by analyzing the output from the BERT model. The model produces two outputs, startLogits and endLogits. Each logit is a raw confidence score of where the BERT model predicts the beginning and the end of an answer is.\n\nIn this example, the best start and end logits are 6.08 and 7.53 for the tokens \"the\" and \"fox\", respectively. The sample finds the indices of the highest-value starting and ending logits by:\n\nConverting each output logit MLMultiArray into a Double array.\n\nIsolating the logits relevant to the document.\n\nFinding the indices, in each array, to the 20 logits with the highest values.\n\nSearching through the 20 x 20 or fewer combinations of logits for the best combination.\n\n// Convert the logits MLMultiArrays to [Double].\nlet startLogits = prediction.startLogits.doubleArray()\nlet endLogits = prediction.endLogits.doubleArray()\n\n\n// Isolate the logits for the document.\nlet startLogitsOfDoc = [Double](startLogits[range])\nlet endLogitsOfDoc = [Double](endLogits[range])\n\n\n// Only keep the top 20 (out of the possible ~380) indices for faster searching.\nlet topStartIndices = startLogitsOfDoc.indicesOfLargest(20)\nlet topEndIndices = endLogitsOfDoc.indicesOfLargest(20)\n\n\n// Search for the highest valued logit pairing.\nlet bestPair = findBestLogitPair(startLogits: startLogitsOfDoc,\n                                 bestStartIndices: topStartIndices,\n                                 endLogits: endLogitsOfDoc,\n                                 bestEndIndices: topEndIndices)\n\n\nIn this example, the indices of the best start and end logits are 8 and 11, respectively. The answer substring, located between indices 8 and 11 of the original text, is “the quick brown fox”.\n\nScale for larger documents\n\nThe BERT model included in this sample can process up to 384 tokens, including the three overhead tokens—one “classification start” token and two separator tokens—leaving 381 tokens for your text and question, combined. For larger texts that exceed this limitation, consider using one of these techniques:\n\nUse a search mechanism to narrow down the relevant document text.\n\nBreak up the document text into sections, such as by paragraph, and make a prediction for each section."
  },
  {
    "title": "metrics | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlupdatecontext/3180095-metrics",
    "html": "Discussion\n\nUse the MLMetricKey to access the values within the dictionary.\n\nSee Also\nEvaluating the Update\nclass MLMetricKey\nA key for the metrics dictionary in an update context."
  },
  {
    "title": "MLShapedArray | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarray",
    "html": "Overview\n\nA shaped array is a multidimensional array type that’s the Swift counterpart to MLMultiArray. MLShapedArray is one of the underlying types of MLFeatureValue that stores scalar values. You can convert a shaped array to an MLMultiArray with its init(_:) initializer, and convert back to a shaped array with its init(_:) initializer. All elements in an MLShapedArray are of the same type, and that type must conform to MLShapedArrayScalar:\n\nInt32\n\nFloat\n\nDouble\n\nEach dimension in a shaped array is typically significant or meaningful. For example, a model could have an input that accepts images as a three-dimensional array of pixels, C x H x W. The first dimension, C, represents the number of color channels, and the second and third dimensions, H and W, represent the image’s height and width, respectively. The number of dimensions and size of each dimension define the shaped array’s shape.\n\nNote\n\nSome models use a one-dimensional multiarray for an input or output. This type of shaped array is conceptually identical to a conventional Array.\n\nA shaped array’s shape property is an integer array in which each element defines the size of the corresponding dimension. To inspect the shape and constraints of a model’s multiarray input or output feature:\n\nAccess the model’s modelDescription property.\n\nFind the multiarray input or output feature in the model description’s inputDescriptionsByName or outputDescriptionsByName property, respectively.\n\nAccess the feature description’s multiArrayConstraint property.\n\nInspect the multiarray constraint’s shape and shapeConstraint.\n\nTopics\nCreating a Shaped Array\ninit(scalar: Scalar)\nCreates a shaped array with exactly one value and zero dimensions.\ninit(arrayLiteral: Scalar...)\nCreates a shaped array from a list of values.\ninit<S>(scalars: S, shape: [Int])\nCreates a shaped array from an array of values.\ninit(repeating: Scalar, shape: [Int])\nCreates a shaped array that initializes every element to the same value.\ninit(identityMatrixOfSize: Int)\nCreates a shaped array that’s an identity matrix of integers.\nAvailable when Scalar conforms to FixedWidthInteger.\ninit(randomScalarsIn: Range<Scalar>, shape: [Int])\nCreates a shaped array that initializes the elements to random integer values within a range.\nAvailable when Scalar conforms to FixedWidthInteger.\nCreating a Shaped Array from Another Type\ninit(MLMultiArray)\nCreates a shaped array from a multiarray.\ninit(converting: MLMultiArray)\nCreates a shaped array by converting a multiarray.\ninit<T>(converting: T)\nCreates a shaped array by converting another shaped array type.\ninit<S>(concatenating: S, alongAxis: Int)\nMerges a sequence of shaped arrays into one shaped array along an axis.\nCreating a shaped array with pointers to memory\ninit(bytesNoCopy: UnsafeRawPointer, shape: [Int], deallocator: Data.Deallocator)\nCreates a shaped array from a data pointer.\ninit(bytesNoCopy: UnsafeRawPointer, shape: [Int], strides: [Int], deallocator: Data.Deallocator)\nCreates a shaped array from a data pointer with memory strides.\ninit(unsafeUninitializedShape: [Int], initializingWith: (inout UnsafeMutableBufferPointer<Scalar>, [Int]) -> Void)\nCreates a shaped array from a shape and a closure that initializes its memory.\nCreating a shaped array from data\ninit(data: Data, shape: [Int])\nCreates a shaped array from a block of data and a shape.\ninit(data: Data, shape: [Int], strides: [Int])\nCreates a shaped array from a block of data, a shape, and strides.\nEncoding and decoding\ninit(from: Decoder)\nCreates a shaped array from a decoder.\nAvailable when Scalar conforms to Decodable.\nfunc encode(to: Encoder)\nEncode a shaped array.\nAvailable when Scalar conforms to Encodable.\nInspecting a Shaped Array\nvar isScalar: Bool\nA Boolean value that indicates whether the shaped array has zero dimensions.\nvar shape: [Int]\nAn integer array in which each element represents the size of the corresponding dimension.\nvar strides: [Int]\nAn integer array in which each element is the number of memory locations that span the length of the corresponding dimension.\nvar isEmpty: Bool\nA Boolean value indicating whether the collection is empty.\nvar scalarCount: Int\nThe total number of elements in the shaped array.\nvar count: Int\nThe number of elements in the collection.\nvar underestimatedCount: Int\nA value less than or equal to the number of elements in the collection.\nvar description: String\nA text representation of the shaped array.\nAccessing an Element\nvar scalar: Scalar?\nA computed property that returns the first element when the shape isn’t empty, or sets the shaped array’s underlying scalar type.\nvar scalars: [Scalar]\nA computed property that generates a linear array that contains every element, or assigns the elements of an array to the shaped array’s elements.\nsubscript(scalarAt: Int...) -> Scalar\nAccesses an element in the shaped array using a list of indices that represent a multidimensional location.\nsubscript<C>(scalarAt: C) -> Scalar\nAccesses an element in the shaped array using a collection of indices that represent a multidimensional location.\nAccessing a Slice from the First Dimension\nsubscript(Int) -> MLShapedArraySlice<Scalar>\nAccesses a slice at an index in the shaped array’s first dimension.\nsubscript(Range<Int>) -> MLShapedArraySlice<Scalar>\nAccesses a slice with a range in the shaped array’s first dimension.\nsubscript<R>(R) -> MLShapedArraySlice<Scalar>\nAccesses a slice with an integer range expression in the shaped array’s first dimension.\nsubscript(MLShapedArrayRangeExpression) -> MLShapedArraySlice<Scalar>\nAccesses a slice with a shaped-array range expression in the shaped array’s first dimension.\nsubscript((UnboundedRange_) -> Void) -> MLShapedArraySlice<Scalar>\nAccesses a slice with an unbounded range in the shaped array’s first dimension.\nsubscript((UnboundedRange_) -> ()) -> MLShapedArraySlice<Scalar>\nAccesses a slice with an unbounded range in the shaped array’s first dimension.\nAccessing a Slice from Multiple Dimensions\nsubscript(Int...) -> MLShapedArraySlice<Scalar>\nAccesses a slice using a list of integers, in which each element is an index in the corresponding dimension.\nsubscript<C>(C) -> MLShapedArraySlice<Scalar>\nAccesses a slice using a collection of integers, in which each element is an index in the corresponding dimension.\nsubscript<C>(C) -> MLShapedArraySlice<Scalar>\nAccesses a slice using a collection of integer ranges, in which each element is a range in the corresponding dimension.\nsubscript(MLShapedArrayRangeExpression...) -> MLShapedArraySlice<Scalar>\nAccesses a slice using a list of range expressions, in which each element is a range in the corresponding dimension.\nsubscript<C>(C) -> MLShapedArraySlice<Scalar>\nAccesses a slice using a collection of range expressions, in which each element is a range in the corresponding dimension.\nInspecting the Underlying Memory of a Shaped Array\nfunc withUnsafeShapedBufferPointer<R>((UnsafeBufferPointer<Scalar>, [Int], [Int]) -> R) -> R\nProvides a closure with a read-only pointer to the shaped array’s underlying memory.\nModifying a Shaped Array\nfunc fill(with: Scalar)\nSets all the shaped array’s elements to a scalar value.\nfunc fill<C>(with: C)\nAssigns the shaped array’s elements to the elements in a collection, repeatedly, if necessary.\nfunc withUnsafeMutableShapedBufferPointer<R>((inout UnsafeMutableBufferPointer<Scalar>, [Int], [Int]) -> R) -> R\nProvides a closure with a read-write pointer to the shaped array’s underlying memory.\nComparing Shaped Arrays\nstatic func == (MLShapedArray<Scalar>, MLShapedArray<Scalar>) -> Bool\nReturns a Boolean value that indicates whether two values are equal.\nAvailable when Scalar conforms to Equatable.\nstatic func != (MLShapedArray<Scalar>, MLShapedArray<Scalar>) -> Bool\nReturns a Boolean value that indicates whether two values are not equal.\nAvailable when Scalar conforms to Equatable.\nSupporting Types\ntypealias MLShapedArray.Element\nA type that defines the shaped array’s elements.\ntypealias MLShapedArray.Index\nA type that defines the shaped array’s indices.\ntypealias MLShapedArray.Indices\nA type that defines the shaped array’s index ranges.\ntypealias MLShapedArray.Iterator\nA type that defines the shaped array’s iterator.\ntypealias MLShapedArray.SubSequence\nA type that defines the shaped array’s slices.\ntypealias MLShapedArray.ArrayLiteralElement\nA type that restricts the elements of an array literal that initializes the shaped array.\nShaped Array Collection Operations\nRelationships\nConforms To\nCustomStringConvertible\nDecodable\nConforms when Scalar conforms to Decodable.\nEncodable\nConforms when Scalar conforms to Encodable.\nMLShapedArrayProtocol\nSee Also\nSupporting Types\nenum MLFeatureType\nThe possible types for feature values, input features, and output features.\nprotocol MLShapedArrayProtocol\nAn interface that defines a shaped array type.\nclass MLMultiArray\nA machine learning collection type that stores numeric values in an array with multiple dimensions.\nclass MLSequence\nA machine learning collection type that stores a series of strings or integers."
  },
  {
    "title": "MLShapedArrayProtocol | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlshapedarrayprotocol",
    "html": "Topics\nCreating a Shaped Array Type\ninit<S>(scalars: S, shape: [Int])\nCreates a shaped array type from an array of values.\ninit(repeating: Self.Scalar, shape: [Int])\nCreates a shaped array type that initializes every element to the same value.\ninit(identityMatrixOfSize: Int)\nCreates a shaped array type that’s an identity matrix of integers.\nAvailable when Scalar conforms to FixedWidthInteger.\ninit(randomScalarsIn: Range<Self.Scalar>, shape: [Int])\nCreates a shaped array type that initializes the elements to random integer values within a range.\nAvailable when Scalar conforms to FixedWidthInteger.\ninit(bytesNoCopy: UnsafeRawPointer, shape: [Int], deallocator: Data.Deallocator)\nCreates a shaped array type from a data pointer.\ninit(bytesNoCopy: UnsafeRawPointer, shape: [Int], strides: [Int], deallocator: Data.Deallocator)\nCreates a shaped array type from a data pointer with memory strides.\n\nRequired\n\ninit(unsafeUninitializedShape: [Int], initializingWith: (inout UnsafeMutableBufferPointer<Self.Scalar>, [Int]) -> Void)\nCreates a shaped array type from a shape and a closure that initializes its memory.\n\nRequired\n\nCreating a Shaped Array Type from Another Type\ninit(MLMultiArray)\nCreates a shaped array type from a multiarray.\ninit(converting: MLMultiArray)\nCreates a shaped array type by converting a multiarray.\ninit<T>(converting: T)\nCreates a shaped array type by converting another shaped array type.\nInspecting a Shaped Array Type\nvar shape: [Int]\nAn integer array in which each element represents the size of the corresponding dimension.\n\nRequired\n\nvar strides: [Int]\nAn integer array in which each element is the number of memory locations that spans the length of the corresponding dimension.\n\nRequired\n\nvar count: Int\nThe number of elements in the shaped array’s first dimension.\nvar isScalar: Bool\nA Boolean value that indicates whether the shaped array lacks a shape.\nvar scalarCount: Int\nThe total number of elements in the shaped array type.\nvar scalar: Self.Scalar?\nA computed property that returns the first element when the shape isn’t empty, or sets the shaped array’s underlying scalar type.\nvar scalars: [Self.Scalar]\nA computed property that generates a linear array that contains every element, or assigns the elements of an array to the shaped array’s elements.\nfunc withUnsafeShapedBufferPointer<R>((UnsafeBufferPointer<Self.Scalar>, [Int], [Int]) -> R) -> R\nProvides read-only access of the shaped array’s underlying memory to a closure.\n\nRequired\n\nAccessing Elements\nsubscript<C>(scalarAt: C) -> Self.Scalar\nAccesses an element and a multidimensional location.\n\nRequired Default implementation provided.\n\nsubscript<C>(C) -> MLShapedArraySlice<Self.Scalar>\nAccesses a slice using a collection of integers, in which each element is an index in the corresponding dimension.\n\nRequired\n\nsubscript<C>(C) -> MLShapedArraySlice<Self.Scalar>\nAccesses a slice using a collection of integer ranges, in which each element is a range in the corresponding dimension.\n\nRequired Default implementations provided.\n\nModifying a Shaped Array Type\nfunc fill(with: Self.Scalar)\nAssigns the shaped array’s elements to a value.\nfunc fill<C>(with: C)\nAssigns the shaped array’s elements to the elements in a collection, repeatedly, if necessary.\nfunc withUnsafeMutableShapedBufferPointer<R>((inout UnsafeMutableBufferPointer<Self.Scalar>, [Int], [Int]) -> R) -> R\nProvides read-write access of the shaped array’s underlying memory to a closure.\n\nRequired\n\nSupporting Types\nassociatedtype Scalar\nRepresents the underlying scalar type of the shaped array type.\n\nRequired\n\nstruct MLShapedArraySlice\nA multidimensional subset of elements from a shaped array type.\nprotocol MLShapedArrayScalar\nA type that associates a scalar with a shaped array.\nprotocol MLShapedArrayRangeExpression\nAn interface for a range expression, which you typically use with subscripts of shaped array types.\nRelationships\nInherits From\nExpressibleByArrayLiteral\nMutableCollection\nRandomAccessCollection\nConforming Types\nMLShapedArray\nMLShapedArraySlice\nSee Also\nSupporting Types\nenum MLFeatureType\nThe possible types for feature values, input features, and output features.\nstruct MLShapedArray\nA machine learning collection type that stores scalar values in a multidimensional array.\nclass MLMultiArray\nA machine learning collection type that stores numeric values in an array with multiple dimensions.\nclass MLSequence\nA machine learning collection type that stores a series of strings or integers."
  },
  {
    "title": "task | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlupdatecontext/3180098-task",
    "html": "See Also\nGetting the Update Context\nvar event: MLUpdateProgressEvent\nThe event type that triggered an update task to notify your app’s completion and update progress handlers.\nstruct MLUpdateProgressEvent\nA type of event during a model update task.\nvar parameters: [MLParameterKey : Any]\nThe parameters for the update task.\nclass MLParameterKey\nThe keys for the parameter dictionary in a model configuration or a model update context."
  },
  {
    "title": "multiArrayValue | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlfeaturevalue/2879377-multiarrayvalue",
    "html": "See Also\nAccessing the Feature’s Value\nvar isUndefined: Bool\nA Boolean value that indicates whether the feature value is undefined or missing.\nvar int64Value: Int64\nThe underlying integer of the feature value.\nvar doubleValue: Double\nThe underlying double of the feature value.\nvar stringValue: String\nThe underlying string of the feature value.\nvar imageBufferValue: CVPixelBuffer?\nThe underlying image of the feature value as a pixel buffer.\nfunc shapedArrayValue<Scalar>(of: Scalar.Type) -> MLShapedArray<Scalar>?\nReturns the underlying shaped array of the feature value.\nvar sequenceValue: MLSequence?\nThe underlying sequence of the feature value.\nvar dictionaryValue: [AnyHashable : NSNumber]\nThe underlying dictionary of the feature value."
  },
  {
    "title": "dictionaryValue | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlfeaturevalue/2879387-dictionaryvalue",
    "html": "See Also\nAccessing the Feature’s Value\nvar isUndefined: Bool\nA Boolean value that indicates whether the feature value is undefined or missing.\nvar int64Value: Int64\nThe underlying integer of the feature value.\nvar doubleValue: Double\nThe underlying double of the feature value.\nvar stringValue: String\nThe underlying string of the feature value.\nvar imageBufferValue: CVPixelBuffer?\nThe underlying image of the feature value as a pixel buffer.\nfunc shapedArrayValue<Scalar>(of: Scalar.Type) -> MLShapedArray<Scalar>?\nReturns the underlying shaped array of the feature value.\nvar multiArrayValue: MLMultiArray?\nThe underlying multiarray of the feature value.\nvar sequenceValue: MLSequence?\nThe underlying sequence of the feature value."
  },
  {
    "title": "MLUpdateProgressEvent | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlupdateprogressevent",
    "html": "Topics\nGetting Progress Event Types\nstatic var trainingBegin: MLUpdateProgressEvent\nAn event that represents the start of training.\nstatic var miniBatchEnd: MLUpdateProgressEvent\nAn event that represents the end of a mini-batch within a training epoch.\nstatic var epochEnd: MLUpdateProgressEvent\nAn event that represents the end of training epoch.\nCreating a Progress Event\ninit(rawValue: Int)\nCreates a progress event for the given integer.\nRelationships\nConforms To\nOptionSet\nSendable\nSee Also\nGetting the Update Context\nvar event: MLUpdateProgressEvent\nThe event type that triggered an update task to notify your app’s completion and update progress handlers.\nvar task: MLUpdateTask\nThe update task that generated the update context.\nvar parameters: [MLParameterKey : Any]\nThe parameters for the update task.\nclass MLParameterKey\nThe keys for the parameter dictionary in a model configuration or a model update context."
  },
  {
    "title": "shapedArrayValue(of:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlfeaturevalue/3763173-shapedarrayvalue",
    "html": "Parameters\ntype\n\nThe scalar type of the underlying shaped array.\n\nSee Also\nAccessing the Feature’s Value\nvar isUndefined: Bool\nA Boolean value that indicates whether the feature value is undefined or missing.\nvar int64Value: Int64\nThe underlying integer of the feature value.\nvar doubleValue: Double\nThe underlying double of the feature value.\nvar stringValue: String\nThe underlying string of the feature value.\nvar imageBufferValue: CVPixelBuffer?\nThe underlying image of the feature value as a pixel buffer.\nvar multiArrayValue: MLMultiArray?\nThe underlying multiarray of the feature value.\nvar sequenceValue: MLSequence?\nThe underlying sequence of the feature value.\nvar dictionaryValue: [AnyHashable : NSNumber]\nThe underlying dictionary of the feature value."
  },
  {
    "title": "imageBufferValue | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlfeaturevalue/2879400-imagebuffervalue",
    "html": "See Also\nAccessing the Feature’s Value\nvar isUndefined: Bool\nA Boolean value that indicates whether the feature value is undefined or missing.\nvar int64Value: Int64\nThe underlying integer of the feature value.\nvar doubleValue: Double\nThe underlying double of the feature value.\nvar stringValue: String\nThe underlying string of the feature value.\nfunc shapedArrayValue<Scalar>(of: Scalar.Type) -> MLShapedArray<Scalar>?\nReturns the underlying shaped array of the feature value.\nvar multiArrayValue: MLMultiArray?\nThe underlying multiarray of the feature value.\nvar sequenceValue: MLSequence?\nThe underlying sequence of the feature value.\nvar dictionaryValue: [AnyHashable : NSNumber]\nThe underlying dictionary of the feature value."
  },
  {
    "title": "stringValue | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlfeaturevalue/2879349-stringvalue",
    "html": "See Also\nAccessing the Feature’s Value\nvar isUndefined: Bool\nA Boolean value that indicates whether the feature value is undefined or missing.\nvar int64Value: Int64\nThe underlying integer of the feature value.\nvar doubleValue: Double\nThe underlying double of the feature value.\nvar imageBufferValue: CVPixelBuffer?\nThe underlying image of the feature value as a pixel buffer.\nfunc shapedArrayValue<Scalar>(of: Scalar.Type) -> MLShapedArray<Scalar>?\nReturns the underlying shaped array of the feature value.\nvar multiArrayValue: MLMultiArray?\nThe underlying multiarray of the feature value.\nvar sequenceValue: MLSequence?\nThe underlying sequence of the feature value.\nvar dictionaryValue: [AnyHashable : NSNumber]\nThe underlying dictionary of the feature value."
  },
  {
    "title": "int64Value | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlfeaturevalue/2879348-int64value",
    "html": "See Also\nAccessing the Feature’s Value\nvar isUndefined: Bool\nA Boolean value that indicates whether the feature value is undefined or missing.\nvar doubleValue: Double\nThe underlying double of the feature value.\nvar stringValue: String\nThe underlying string of the feature value.\nvar imageBufferValue: CVPixelBuffer?\nThe underlying image of the feature value as a pixel buffer.\nfunc shapedArrayValue<Scalar>(of: Scalar.Type) -> MLShapedArray<Scalar>?\nReturns the underlying shaped array of the feature value.\nvar multiArrayValue: MLMultiArray?\nThe underlying multiarray of the feature value.\nvar sequenceValue: MLSequence?\nThe underlying sequence of the feature value.\nvar dictionaryValue: [AnyHashable : NSNumber]\nThe underlying dictionary of the feature value."
  },
  {
    "title": "MLDictionaryFeatureProvider | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mldictionaryfeatureprovider",
    "html": "Overview\n\nIf your input data is stored in a dictionary, consider this type of MLFeatureProvider that is backed by a dictionary. It is a convenience interface, saving you the trouble of iterating through the dictionary to assign all of its values.\n\nTopics\nCreating the Provider\ninit(dictionary: [String : Any])\nCreates the feature provider based on a dictionary.\nAccessing the Features\nsubscript(String) -> MLFeatureValue?\nSubscript interface for the feature provider to pass through to the dictionary.\nvar dictionary: [String : MLFeatureValue]\nThe backing dictionary.\nRelationships\nInherits From\nNSObject\nConforms To\nMLFeatureProvider\nNSFastEnumeration\nNSSecureCoding\nSee Also\nModel Inputs and Outputs\nMaking Predictions with a Sequence of Inputs\nIntegrate a recurrent neural network model to process sequences of inputs.\nclass MLFeatureValue\nA generic wrapper around an underlying value and the value’s type.\nprotocol MLFeatureProvider\nAn interface that represents a collection of values for either a model's input or its output.\nprotocol MLBatchProvider\nAn interface that represents a collection of feature providers.\nclass MLArrayBatchProvider\nA convenience wrapper for batches of feature providers.\nclass MLModelAsset\nAn abstraction of a compiled Core ML model asset."
  },
  {
    "title": "MLFeatureValue.ImageOption | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlfeaturevalue/imageoption",
    "html": "Topics\nImage Options Keys\nstatic let cropRect: MLFeatureValue.ImageOption\nThe option you use to crop an image when creating an image feature value.\nstatic let cropAndScale: MLFeatureValue.ImageOption\nThe option you use to crop and scale an image when creating an image feature value.\nImage Option Key Initializers\ninit(String)\nCreates an image feature option key from a string.\ninit(rawValue: String)\nCreates an image feature option key from a raw value string.\nRelationships\nConforms To\nHashable\nRawRepresentable\nSendable\nSee Also\nCreating Image Feature Values\ninit(pixelBuffer: CVPixelBuffer)\nCreates a feature value that contains an image from a pixel buffer.\ninit(cgImage: CGImage, pixelsWide: Int, pixelsHigh: Int, pixelFormatType: OSType, options: [MLFeatureValue.ImageOption : Any]?)\nCreates a feature value that contains an image defined by a core graphics image and its size and pixel format.\ninit(cgImage: CGImage, orientation: CGImagePropertyOrientation, pixelsWide: Int, pixelsHigh: Int, pixelFormatType: OSType, options: [MLFeatureValue.ImageOption : Any]?)\nCreates a feature value that contains an image defined by a core graphics image and its orientation, size, and pixel format.\ninit(cgImage: CGImage, constraint: MLImageConstraint, options: [MLFeatureValue.ImageOption : Any]?)\nCreates a feature value that contains an image defined by a core graphics image and a constraint.\ninit(cgImage: CGImage, orientation: CGImagePropertyOrientation, constraint: MLImageConstraint, options: [MLFeatureValue.ImageOption : Any]?)\nCreates a feature value that contains an image defined by a core graphics image, an orientation, and a constraint.\ninit(imageAt: URL, pixelsWide: Int, pixelsHigh: Int, pixelFormatType: OSType, options: [MLFeatureValue.ImageOption : Any]?)\nCreates a feature value that contains an image defined by an image URL and the image’s size and pixel format.\ninit(imageAt: URL, orientation: CGImagePropertyOrientation, pixelsWide: Int, pixelsHigh: Int, pixelFormatType: OSType, options: [MLFeatureValue.ImageOption : Any]?)\nCreates a feature value that contains an image defined by an image URL and the image’s orientation, size, and pixel format.\ninit(imageAt: URL, constraint: MLImageConstraint, options: [MLFeatureValue.ImageOption : Any]?)\nCreates a feature value that contains an image defined by an image URL and a constraint.\ninit(imageAt: URL, orientation: CGImagePropertyOrientation, constraint: MLImageConstraint, options: [MLFeatureValue.ImageOption : Any]?)\nCreates a feature value that contains an image defined by an image URL, an orientation, and a constraint.\nclass MLImageConstraint\nThe width, height, and pixel format constraints of an image feature."
  },
  {
    "title": "init(imageAt:orientation:constraint:options:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlfeaturevalue/3362524-init",
    "html": "Parameters\nurl\n\nA URL to an image.\n\norientation\n\nA CGImagePropertyOrientation instance.\n\nconstraint\n\nAn MLImageConstraint instance.\n\noptions\n\nA dictionary of VNImageCropAndScaleOption values, each keyed by MLFeatureValue.ImageOption.\n\nSee Also\nCreating Image Feature Values\ninit(pixelBuffer: CVPixelBuffer)\nCreates a feature value that contains an image from a pixel buffer.\ninit(cgImage: CGImage, pixelsWide: Int, pixelsHigh: Int, pixelFormatType: OSType, options: [MLFeatureValue.ImageOption : Any]?)\nCreates a feature value that contains an image defined by a core graphics image and its size and pixel format.\ninit(cgImage: CGImage, orientation: CGImagePropertyOrientation, pixelsWide: Int, pixelsHigh: Int, pixelFormatType: OSType, options: [MLFeatureValue.ImageOption : Any]?)\nCreates a feature value that contains an image defined by a core graphics image and its orientation, size, and pixel format.\ninit(cgImage: CGImage, constraint: MLImageConstraint, options: [MLFeatureValue.ImageOption : Any]?)\nCreates a feature value that contains an image defined by a core graphics image and a constraint.\ninit(cgImage: CGImage, orientation: CGImagePropertyOrientation, constraint: MLImageConstraint, options: [MLFeatureValue.ImageOption : Any]?)\nCreates a feature value that contains an image defined by a core graphics image, an orientation, and a constraint.\ninit(imageAt: URL, pixelsWide: Int, pixelsHigh: Int, pixelFormatType: OSType, options: [MLFeatureValue.ImageOption : Any]?)\nCreates a feature value that contains an image defined by an image URL and the image’s size and pixel format.\ninit(imageAt: URL, orientation: CGImagePropertyOrientation, pixelsWide: Int, pixelsHigh: Int, pixelFormatType: OSType, options: [MLFeatureValue.ImageOption : Any]?)\nCreates a feature value that contains an image defined by an image URL and the image’s orientation, size, and pixel format.\ninit(imageAt: URL, constraint: MLImageConstraint, options: [MLFeatureValue.ImageOption : Any]?)\nCreates a feature value that contains an image defined by an image URL and a constraint.\nclass MLImageConstraint\nThe width, height, and pixel format constraints of an image feature.\nstruct MLFeatureValue.ImageOption\nThe initializer options you use to crop and scale an image when creating an image feature value."
  },
  {
    "title": "dictionaryConstraint | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlfeaturedescription/2921263-dictionaryconstraint",
    "html": "See Also\nAccessing Feature Constraints\nvar imageConstraint: MLImageConstraint?\nThe size and format constraints for an image feature.\nclass MLImageConstraint\nThe width, height, and pixel format constraints of an image feature.\nclass MLDictionaryConstraint\nThe constraint on the keys for a dictionary feature.\nvar multiArrayConstraint: MLMultiArrayConstraint?\nThe constraints on a multidimensional array feature.\nclass MLMultiArrayConstraint\nThe shape and data type constraints for a multidimensional array feature.\nvar sequenceConstraint: MLSequenceConstraint?\nThe constraints for a sequence feature.\nclass MLSequenceConstraint\nThe constraints for a sequence feature."
  },
  {
    "title": "inputDescriptionsByName | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlmodeldescription/2879352-inputdescriptionsbyname",
    "html": "See Also\nAccessing Feature Descriptions\nvar outputDescriptionsByName: [String : MLFeatureDescription]\nA dictionary of output feature descriptions, which the model keys by the output’s name.\nclass MLFeatureDescription\nThe name, type, and constraints of an input or output feature."
  },
  {
    "title": "MLModelMetadataKey | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlmodelmetadatakey",
    "html": "Topics\nMetadata Keys\nstatic let author: MLModelMetadataKey\nKey for the author of the model.\nstatic let description: MLModelMetadataKey\nKey for the overall description of the model.\nstatic let license: MLModelMetadataKey\nKey for the license of the model.\nstatic let versionString: MLModelMetadataKey\nKey for the version of the model.\nstatic let creatorDefinedKey: MLModelMetadataKey\nKey for the model creator’s custom metadata.\nCreating Metadata\ninit(rawValue: String)\nRelationships\nConforms To\nHashable\nRawRepresentable\nSendable\nSee Also\nAccessing Metadata\nvar classLabels: [Any]?\nAn array of labels, which can be either strings or a numbers, for classifier models.\nvar metadata: [MLModelMetadataKey : Any]\nA dictionary of the model’s creation information, such as its description, author, version, and license."
  },
  {
    "title": "predictedProbabilitiesName | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlmodeldescription/2879383-predictedprobabilitiesname",
    "html": "See Also\nAccessing Prediction Names\nvar predictedFeatureName: String?\nThe name of the primary prediction feature output description."
  },
  {
    "title": "predictedFeatureName | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlmodeldescription/2879390-predictedfeaturename",
    "html": "See Also\nAccessing Prediction Names\nvar predictedProbabilitiesName: String?\nThe name of the feature output description for all probabilities of a prediction."
  },
  {
    "title": "isUpdatable | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlmodeldescription/3180059-isupdatable",
    "html": "See Also\nAccessing Update Descriptions\nvar trainingInputDescriptionsByName: [String : MLFeatureDescription]\nA dictionary of the training input feature descriptions, which the model keys by the input’s name.\nvar parameterDescriptionsByKey: [MLParameterKey : MLParameterDescription]\nA dictionary of the descriptions for the model’s parameters.\nclass MLParameterDescription\nA description of a model parameter that includes a default value and a constraint, if applicable."
  },
  {
    "title": "parameters | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlmodelerror/3362860-parameters",
    "html": "Discussion\n\nCore ML typically throws this error when an app queries the model for a parameter it doesn’t support.\n\nSee Also\nError Codes\nstatic var featureType: MLModelError.Code\nAn error code for problems related to model features.\nstatic var modelCollection: MLModelError.Code\nAn error code for problems related to retrieving a model collection from the deployment system.\nstatic var modelDecryptionKeyFetch: MLModelError.Code\nAn error code for problems related to retrieving a model’s decryption key.\nstatic var modelDecryption: MLModelError.Code\nAn error code for problems related to decrypting models.\nstatic var update: MLModelError.Code\nAn error code for problems related to on-device model updates.\nstatic var customLayer: MLModelError.Code\nAn error code for problems related to custom layers.\nstatic var customModel: MLModelError.Code\nAn error code for problems related to custom models.\nstatic var io: MLModelError.Code\nAn error code for problems related to the system’s input or output.\nstatic var predictionCancelled: MLModelError.Code\nAn error code for problems related to cancelling the prediction before it completes.\nstatic var generic: MLModelError.Code\nAn error code for runtime issues that don’t apply to the other error codes.\nenum MLModelError.Code\nThe categories of model-specific errors."
  },
  {
    "title": "customLayer | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlmodelerror/2935541-customlayer",
    "html": "Discussion\n\nCore ML typically throws this error when the custom layer has a programming mistake. For example, a model’s prediction method fails with this error code if Core ML can’t find the custom layer’s implementation.\n\nSee Also\nError Codes\nstatic var featureType: MLModelError.Code\nAn error code for problems related to model features.\nstatic var parameters: MLModelError.Code\nAn error code for problems related to model parameters.\nstatic var modelCollection: MLModelError.Code\nAn error code for problems related to retrieving a model collection from the deployment system.\nstatic var modelDecryptionKeyFetch: MLModelError.Code\nAn error code for problems related to retrieving a model’s decryption key.\nstatic var modelDecryption: MLModelError.Code\nAn error code for problems related to decrypting models.\nstatic var update: MLModelError.Code\nAn error code for problems related to on-device model updates.\nstatic var customModel: MLModelError.Code\nAn error code for problems related to custom models.\nstatic var io: MLModelError.Code\nAn error code for problems related to the system’s input or output.\nstatic var predictionCancelled: MLModelError.Code\nAn error code for problems related to cancelling the prediction before it completes.\nstatic var generic: MLModelError.Code\nAn error code for runtime issues that don’t apply to the other error codes.\nenum MLModelError.Code\nThe categories of model-specific errors."
  },
  {
    "title": "modelDecryption | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlmodelerror/3584879-modeldecryption",
    "html": "Discussion\n\nCore ML typically throws this error when the framework can’t decrypt a model.\n\nSee Also\nError Codes\nstatic var featureType: MLModelError.Code\nAn error code for problems related to model features.\nstatic var parameters: MLModelError.Code\nAn error code for problems related to model parameters.\nstatic var modelCollection: MLModelError.Code\nAn error code for problems related to retrieving a model collection from the deployment system.\nstatic var modelDecryptionKeyFetch: MLModelError.Code\nAn error code for problems related to retrieving a model’s decryption key.\nstatic var update: MLModelError.Code\nAn error code for problems related to on-device model updates.\nstatic var customLayer: MLModelError.Code\nAn error code for problems related to custom layers.\nstatic var customModel: MLModelError.Code\nAn error code for problems related to custom models.\nstatic var io: MLModelError.Code\nAn error code for problems related to the system’s input or output.\nstatic var predictionCancelled: MLModelError.Code\nAn error code for problems related to cancelling the prediction before it completes.\nstatic var generic: MLModelError.Code\nAn error code for runtime issues that don’t apply to the other error codes.\nenum MLModelError.Code\nThe categories of model-specific errors."
  },
  {
    "title": "MLModelErrorDomain | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlmodelerrordomain",
    "html": "See Also\nError Domain\nstatic var errorDomain: String\nThe current model error domain."
  },
  {
    "title": "errorDomain | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlmodelerror/2887412-errordomain",
    "html": "Discussion\n\nCore ML sets this property to MLModelErrorDomain.\n\nSee Also\nError Domain\nlet MLModelErrorDomain: String\nThe domain for Core ML errors."
  },
  {
    "title": "init(_:userInfo:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlmodelerror/3726362-init",
    "html": "Parameters\ncode\n\nAn error code.\n\nuserInfo\n\nA dictionary of additional information.\n\nSee Also\nProtocol Support\nvar code: Code\nAn integer value that represents the code.\nvar userInfo: [String : Any]\nA dictionary of additional information.\nvar hashValue: Int\nThe hashed value of the error.\nfunc hash(into: inout Hasher)\nHashes the essential components of the error by feeding them into a hasher.\nstatic func == (MLModelError, MLModelError) -> Bool\nReturns a Boolean value indicating whether the two values are equal.\nstatic func != (MLModelError, MLModelError) -> Bool\nReturns a Boolean value indicating whether the two values are unequal."
  },
  {
    "title": "==(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlmodelerror/3726358",
    "html": "Parameters\nlhs\n\nA model error.\n\nrhs\n\nAnother model error.\n\nSee Also\nProtocol Support\ninit(Code, userInfo: [String : Any])\nCreates a model error with an error code.\nvar code: Code\nAn integer value that represents the code.\nvar userInfo: [String : Any]\nA dictionary of additional information.\nvar hashValue: Int\nThe hashed value of the error.\nfunc hash(into: inout Hasher)\nHashes the essential components of the error by feeding them into a hasher.\nstatic func != (MLModelError, MLModelError) -> Bool\nReturns a Boolean value indicating whether the two values are unequal."
  },
  {
    "title": "hashValue | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlmodelerror/3726361-hashvalue",
    "html": "See Also\nProtocol Support\ninit(Code, userInfo: [String : Any])\nCreates a model error with an error code.\nvar code: Code\nAn integer value that represents the code.\nvar userInfo: [String : Any]\nA dictionary of additional information.\nfunc hash(into: inout Hasher)\nHashes the essential components of the error by feeding them into a hasher.\nstatic func == (MLModelError, MLModelError) -> Bool\nReturns a Boolean value indicating whether the two values are equal.\nstatic func != (MLModelError, MLModelError) -> Bool\nReturns a Boolean value indicating whether the two values are unequal."
  },
  {
    "title": "userInfo | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlmodelerror/3726363-userinfo",
    "html": "See Also\nProtocol Support\ninit(Code, userInfo: [String : Any])\nCreates a model error with an error code.\nvar code: Code\nAn integer value that represents the code.\nvar hashValue: Int\nThe hashed value of the error.\nfunc hash(into: inout Hasher)\nHashes the essential components of the error by feeding them into a hasher.\nstatic func == (MLModelError, MLModelError) -> Bool\nReturns a Boolean value indicating whether the two values are equal.\nstatic func != (MLModelError, MLModelError) -> Bool\nReturns a Boolean value indicating whether the two values are unequal."
  },
  {
    "title": "MLMultiArray | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlmultiarray",
    "html": "Overview\n\nA multidimensional array, or multiarray, is one of the underlying types of an MLFeatureValue that stores numeric values in multiple dimensions. All elements in an MLMultiArray instance are one of the same type, and one of the types that MLMultiArrayDataType defines:\n\nMLMultiArrayDataType.int32\n\n32-bit integer\n\nMLMultiArrayDataType.float16\n\n16-bit floating point number\n\nMLMultiArrayDataType.float32\n\n32-bit floating point number (also known as float)\n\nfloat64\n\n64-bit floating point number (also known as double)\n\nEach dimension in a multiarray is typically significant or meaningful. For example, a model could have an input that accepts images as a multiarray of pixels with three dimensions, C x H x W. The first dimension, C, represents the number of color channels, and the second and third dimensions, H and W, represent the image’s height and width, respectively. The number of dimensions and size of each dimension define the multiarray’s shape.\n\nNote\n\nSome models use a one-dimensional multiarray for an input or output. This type of multiarray is conceptually identical to a conventional array.\n\nThe shape property is an integer array that has an element for each dimension in the multiarray. Each element in shape defines the size of the corresponding dimension. To inspect the shape and constraints of a model’s multiarray input or output feature:\n\nAccess the model’s modelDescription property.\n\nFind the multiarray input or output feature in the model description’s inputDescriptionsByName or outputDescriptionsByName property, respectively.\n\nAccess the feature description’s multiArrayConstraint property.\n\nInspect the multiarray constraint’s shape and shapeConstraint.\n\nTopics\nCreating a Multiarray\ninit<C>(C)\nCreates a multiarray from a collection of integers.\ninit<C>(C)\nCreates a multiarray from a collection of floats.\ninit<C>(C)\nCreates a multiarray from a collection of doubles.\ninit(shape: [NSNumber], dataType: MLMultiArrayDataType)\nCreates a multidimensional array with a shape and type.\ninit<ShapedArray>(ShapedArray)\nCreates a multiarray from a shaped array.\ninit(dataPointer: UnsafeMutableRawPointer, shape: [NSNumber], dataType: MLMultiArrayDataType, strides: [NSNumber], deallocator: ((UnsafeMutableRawPointer) -> Void)?)\nCreates a multiarray from a data pointer.\ninit(concatenating: [MLMultiArray], axis: Int, dataType: MLMultiArrayDataType)\nMerges an array of multiarrays into one multiarray along an axis.\ninit(pixelBuffer: CVPixelBuffer, shape: [NSNumber])\nCreates a multiarray sharing the surface of a pixel buffer.\nenum MLMultiArrayDataType\nConstants that define the underlying element types a multiarray can store.\nInspecting a Multiarray\nvar count: Int\nThe total number of elements in the multiarray.\nvar dataType: MLMultiArrayDataType\nThe underlying type of the multiarray.\nvar shape: [NSNumber]\nThe multiarray’s multidimensional shape as a number array in which each element’s value is the size of the corresponding dimension.\nvar strides: [NSNumber]\nA number array in which each element is the number of memory locations that span the length of the corresponding dimension.\nProviding buffer access\nfunc withUnsafeBufferPointer<S, R>(ofType: S.Type, (UnsafeBufferPointer<S>) -> R) -> R\nCalls a given closure with a raw pointer to the multiarray’s storage.\nfunc withUnsafeBytes<R>((UnsafeRawBufferPointer) -> R) -> R\nCalls a given closure with a raw pointer to the multiarray’s storage.\nfunc withUnsafeMutableBufferPointer<S, R>(ofType: S.Type, (UnsafeMutableBufferPointer<S>, [Int]) -> R) -> R\nCalls a given closure with a raw pointer to the multiarray’s mutable storage.\nfunc withUnsafeMutableBytes<R>((UnsafeMutableRawBufferPointer, [Int]) -> R) -> R\nCalls a given closure with a raw pointer to the multiarray’s mutable storage.\nAccessing a Multiarray’s Elements\nsubscript(Int) -> NSNumber\nAccesses the multiarray by using a linear offset.\nsubscript([NSNumber]) -> NSNumber\nAccesses the multiarray by using a number array that has an element for each dimension.\nvar pixelBuffer: CVPixelBuffer?\nA reference to the multiarray’s underlying pixel buffer.\nvar dataPointer: UnsafeMutableRawPointer\nA pointer to the multiarray’s underlying memory.\nDeprecated\nRelationships\nInherits From\nNSObject\nConforms To\nNSSecureCoding\nSee Also\nSupporting Types\nenum MLFeatureType\nThe possible types for feature values, input features, and output features.\nstruct MLShapedArray\nA machine learning collection type that stores scalar values in a multidimensional array.\nprotocol MLShapedArrayProtocol\nAn interface that defines a shaped array type.\nclass MLSequence\nA machine learning collection type that stores a series of strings or integers."
  },
  {
    "title": "MLModelDescription | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlmodeldescription",
    "html": "Topics\nAccessing Feature Descriptions\nvar inputDescriptionsByName: [String : MLFeatureDescription]\nA dictionary of input feature descriptions, which the model keys by the input’s name.\nvar outputDescriptionsByName: [String : MLFeatureDescription]\nA dictionary of output feature descriptions, which the model keys by the output’s name.\nclass MLFeatureDescription\nThe name, type, and constraints of an input or output feature.\nAccessing Metadata\nvar classLabels: [Any]?\nAn array of labels, which can be either strings or a numbers, for classifier models.\nvar metadata: [MLModelMetadataKey : Any]\nA dictionary of the model’s creation information, such as its description, author, version, and license.\nstruct MLModelMetadataKey\nThe set of keys the model uses to store values in its metadata dictionary.\nAccessing Prediction Names\nvar predictedFeatureName: String?\nThe name of the primary prediction feature output description.\nvar predictedProbabilitiesName: String?\nThe name of the feature output description for all probabilities of a prediction.\nAccessing Update Descriptions\nvar isUpdatable: Bool\nA Boolean value that indicates whether you can update the model with additional training.\nvar trainingInputDescriptionsByName: [String : MLFeatureDescription]\nA dictionary of the training input feature descriptions, which the model keys by the input’s name.\nvar parameterDescriptionsByKey: [MLParameterKey : MLParameterDescription]\nA dictionary of the descriptions for the model’s parameters.\nclass MLParameterDescription\nA description of a model parameter that includes a default value and a constraint, if applicable.\nRelationships\nInherits From\nNSObject\nConforms To\nNSSecureCoding\nSee Also\nInspecting a Model\nstatic var availableComputeDevices: [MLComputeDevice]\nThe list of available compute devices that the model’s prediction methods use.\nvar configuration: MLModelConfiguration\nThe configuration of the model set during initialization.\nvar modelDescription: MLModelDescription\nModel information you use at runtime during development, which Xcode also displays in its Core ML model editor view.\nfunc parameterValue(for: MLParameterKey) -> Any\nReturns a model parameter value for a key.\nclass MLParameterKey\nThe keys for the parameter dictionary in a model configuration or a model update context."
  },
  {
    "title": "init(shapedArray:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlfeaturevalue/3763172-init",
    "html": "Parameters\nshapedArray\n\nAn MLShapedArray instance.\n\nSee Also\nCreating Multidimensional Feature Values\ninit(multiArray: MLMultiArray)\nCreates a feature value that contains a multidimensional array."
  },
  {
    "title": "configuration | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlmodel/3022228-configuration",
    "html": "See Also\nInspecting a Model\nstatic var availableComputeDevices: [MLComputeDevice]\nThe list of available compute devices that the model’s prediction methods use.\nvar modelDescription: MLModelDescription\nModel information you use at runtime during development, which Xcode also displays in its Core ML model editor view.\nclass MLModelDescription\nInformation about a model, primarily the input and output format for each feature the model expects, and optional metadata.\nfunc parameterValue(for: MLParameterKey) -> Any\nReturns a model parameter value for a key.\nclass MLParameterKey\nThe keys for the parameter dictionary in a model configuration or a model update context."
  },
  {
    "title": "init(dictionary:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlfeaturevalue/2879393-init",
    "html": "Parameters\nvalue\n\nA dictionary of numbers.\n\nSee Also\nCreating Collection Feature Values\ninit(sequence: MLSequence)\nCreates a feature value that contains a sequence."
  },
  {
    "title": "init(multiArray:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlfeaturevalue/2879356-init",
    "html": "Parameters\nvalue\n\nAn MLMultiArray instance.\n\nSee Also\nCreating Multidimensional Feature Values\ninit<Scalar>(shapedArray: MLShapedArray<Scalar>)\nCreates a feature value that contains a shaped array."
  },
  {
    "title": "init(double:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlfeaturevalue/2879398-init",
    "html": "Parameters\nvalue\n\nA double precision floating point value.\n\nSee Also\nCreating Numeric Feature Values\ninit(int64: Int64)\nCreates a feature value that contains an integer."
  },
  {
    "title": "init(int64:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlfeaturevalue/2879396-init",
    "html": "Parameters\nvalue\n\nA 64-bit integer value.\n\nSee Also\nCreating Numeric Feature Values\ninit(double: Double)\nCreates a feature value that contains a double."
  },
  {
    "title": "availableComputeDevices | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlmodel/4230989-availablecomputedevices",
    "html": "See Also\nInspecting a Model\nvar configuration: MLModelConfiguration\nThe configuration of the model set during initialization.\nvar modelDescription: MLModelDescription\nModel information you use at runtime during development, which Xcode also displays in its Core ML model editor view.\nclass MLModelDescription\nInformation about a model, primarily the input and output format for each feature the model expects, and optional metadata.\nfunc parameterValue(for: MLParameterKey) -> Any\nReturns a model parameter value for a key.\nclass MLParameterKey\nThe keys for the parameter dictionary in a model configuration or a model update context."
  },
  {
    "title": "Creating and Integrating a Model with Custom Layers | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/model_customization/creating_and_integrating_a_model_with_custom_layers",
    "html": "Overview\n\nNew network layers and architectures solve problems that might be difficult or impractical with code. You can support each new layer type before Core ML directly supports it by implementing a custom layer. A custom layer is a class that adopts MLCustomLayer and implements the methods to run a neural network layer in code.\n\nNote\n\nCore ML supports models with custom layers beginning with these software releases: iOS 11.2, macOS 10.13.2, tvOS 11.2 and watchOS 4.2.\n\nAdd a Model You Acquire or Create\n\nIf you have a Core ML model with custom layers, add the model to your Xcode project.\n\nOtherwise, convert a third-party model and designate the new layers as custom with the Core ML Tools. Follow the steps on the Custom Operators page to define the new layers as custom. Give each custom layer a unique name by assigning a unique string to the operator’s class name binding.\n\nbindings = {\n    'class_name'  : 'AAPLCustomAdd',\n    'description' : \"Custom implementation of addition.\"\n    ...\n}\n\n\nSave the Core ML model you converted and add it to your Xcode project.\n\nIntegrate or Create a Class for Each Custom Layer\n\nIf the author of the model you plan to add to your Xcode project implemented the custom layers in source-code files, add the source files into your Xcode project.\n\nOtherwise, implement each custom layer by creating a Swift or Objective-C class for each layer. Inspect the names of the model’s custom layers by opening the model in Xcode:\n\nCreate a class for each custom layer that the model has in its list of dependencies and name each class to match the custom layer it implements.\n\nImportant\n\nSwift classes must subclass NSObject and use the @objc attribute so that Core ML can access your custom layer’s implementation.\n\nAdopt the MLCustomLayer protocol by implementing the following:\n\ninit(parameters:)\n\nAn initializer that configures the layer’s parameters that the model defines in its Core ML model file. Core ML initializes each layer once at load time.\n\nsetWeightData(_:)\n\nA method that configures the layer’s weights that the model defines in its Core ML model file. Core ML invokes this method once at load time, after initialization.\n\noutputShapes(forInputShapes:)\n\nA method that defines the layer’s output shapes based on the input shapes at runtime. Core ML invokes this method at load time, after initialization, and again each time the layer’s input shapes change.\n\nevaluate(inputs:outputs:)\n\nA method that defines the computational behavior for your custom layer. Core ML invokes this method each time your model makes a prediction on the CPU.\n\nencode(commandBuffer:inputs:outputs:)\n\nAn optional method that defines your layer’s computational behavior with GPU commands.\n\nCore ML invokes the appropriate MLCustomLayer methods for each custom layer at runtime when your app calls the prediction(from:) method.\n\nWarning\n\nDon’t change the values that Core ML provides to these methods — such as weights, inputs, or outputs — because it may cause your app to behave in unexpected ways, and possibly crash.\n\nTest the Custom Layers\n\nIf applicable, test the custom layers by using the model to make predictions with input values from one or more test cases. Confirm the model layers function correctly by comparing the model’s prediction values to the output values for each test case.\n\nSee Also\nCustom Model Layers\nprotocol MLCustomLayer\nAn interface that defines the behavior of a custom layer in your neural network model."
  },
  {
    "title": "prediction(from:options:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlmodel/4135000-prediction",
    "html": "Parameters\ninput\n\nA feature provider that stores all the input feature values the model needs for a prediction.\n\noptions\n\nThe runtime settings the model uses as it makes a prediction.\n\nReturn Value\n\nA feature provider that contains the outputs of the prediction.\n\nDiscussion\n\nUse this method to make a single prediction.\n\nSee Also\nMaking Predictions\nfunc prediction(from: MLFeatureProvider) -> MLFeatureProvider\nGenerates a prediction from the feature values within the input feature provider.\nfunc prediction(from: MLFeatureProvider, options: MLPredictionOptions) -> MLFeatureProvider\nGenerates a prediction from the feature values within the input feature provider using the prediction options.\nfunc predictions(fromBatch: MLBatchProvider) -> MLBatchProvider\nGenerates predictions for each input feature provider within the batch provider.\nfunc predictions(from: MLBatchProvider, options: MLPredictionOptions) -> MLBatchProvider\nGenerates a prediction for each input feature provider within the batch provider using the prediction options.\nclass MLPredictionOptions\nThe options available when making a prediction."
  },
  {
    "title": "predictions(from:options:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlmodel/2962866-predictions",
    "html": "Parameters\ninputBatch\n\nA batch provider that contains multiple input feature providers. The model makes a prediction for each feature provider.\n\noptions\n\nThe runtime settings the model uses as it makes a prediction.\n\nReturn Value\n\nA batch provider that contains an output feature provider for each prediction.\n\nDiscussion\n\nUse this method to make more than one prediction at one time.\n\nSee Also\nMaking Predictions\nfunc prediction(from: MLFeatureProvider) -> MLFeatureProvider\nGenerates a prediction from the feature values within the input feature provider.\nfunc prediction(from: MLFeatureProvider, options: MLPredictionOptions) -> MLFeatureProvider\nGenerates a prediction from the feature values within the input feature provider using the prediction options.\nfunc prediction(from: MLFeatureProvider, options: MLPredictionOptions) -> MLFeatureProvider\nGenerates a prediction asynchronously from the feature values within the input feature provider using the prediction options.\nfunc predictions(fromBatch: MLBatchProvider) -> MLBatchProvider\nGenerates predictions for each input feature provider within the batch provider.\nclass MLPredictionOptions\nThe options available when making a prediction."
  },
  {
    "title": "predictions(fromBatch:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlmodel/3088750-predictions",
    "html": "Parameters\ninputBatch\n\nA batch provider that contains multiple input feature providers. The model makes a prediction for each feature provider.\n\nReturn Value\n\nA batch provider that contains an output feature provider for each prediction.\n\nDiscussion\n\nUse this method to make more than one prediction at one time.\n\nSee Also\nMaking Predictions\nfunc prediction(from: MLFeatureProvider) -> MLFeatureProvider\nGenerates a prediction from the feature values within the input feature provider.\nfunc prediction(from: MLFeatureProvider, options: MLPredictionOptions) -> MLFeatureProvider\nGenerates a prediction from the feature values within the input feature provider using the prediction options.\nfunc prediction(from: MLFeatureProvider, options: MLPredictionOptions) -> MLFeatureProvider\nGenerates a prediction asynchronously from the feature values within the input feature provider using the prediction options.\nfunc predictions(from: MLBatchProvider, options: MLPredictionOptions) -> MLBatchProvider\nGenerates a prediction for each input feature provider within the batch provider using the prediction options.\nclass MLPredictionOptions\nThe options available when making a prediction."
  },
  {
    "title": "prediction(from:options:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlmodel/2921292-prediction",
    "html": "Parameters\ninput\n\nA feature provider that stores all the input feature values the model needs for a prediction.\n\noptions\n\nThe runtime settings the model uses as it makes a prediction.\n\nReturn Value\n\nA feature provider that contains the outputs of the prediction.\n\nDiscussion\n\nUse this method to make a single prediction.\n\nSee Also\nMaking Predictions\nfunc prediction(from: MLFeatureProvider) -> MLFeatureProvider\nGenerates a prediction from the feature values within the input feature provider.\nfunc prediction(from: MLFeatureProvider, options: MLPredictionOptions) -> MLFeatureProvider\nGenerates a prediction asynchronously from the feature values within the input feature provider using the prediction options.\nfunc predictions(fromBatch: MLBatchProvider) -> MLBatchProvider\nGenerates predictions for each input feature provider within the batch provider.\nfunc predictions(from: MLBatchProvider, options: MLPredictionOptions) -> MLBatchProvider\nGenerates a prediction for each input feature provider within the batch provider using the prediction options.\nclass MLPredictionOptions\nThe options available when making a prediction.\nRelated Documentation\nMaking Predictions with a Sequence of Inputs\nIntegrate a recurrent neural network model to process sequences of inputs."
  },
  {
    "title": "prediction(from:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlmodel/2880280-prediction",
    "html": "Parameters\ninput\n\nA feature provider that stores all the input feature values the model needs for a prediction.\n\nReturn Value\n\nA feature provider that contains the outputs of the prediction.\n\nDiscussion\n\nUse this method to make a single prediction.\n\nSee Also\nMaking Predictions\nfunc prediction(from: MLFeatureProvider, options: MLPredictionOptions) -> MLFeatureProvider\nGenerates a prediction from the feature values within the input feature provider using the prediction options.\nfunc prediction(from: MLFeatureProvider, options: MLPredictionOptions) -> MLFeatureProvider\nGenerates a prediction asynchronously from the feature values within the input feature provider using the prediction options.\nfunc predictions(fromBatch: MLBatchProvider) -> MLBatchProvider\nGenerates predictions for each input feature provider within the batch provider.\nfunc predictions(from: MLBatchProvider, options: MLPredictionOptions) -> MLBatchProvider\nGenerates a prediction for each input feature provider within the batch provider using the prediction options.\nclass MLPredictionOptions\nThe options available when making a prediction.\nRelated Documentation\nMaking Predictions with a Sequence of Inputs\nIntegrate a recurrent neural network model to process sequences of inputs."
  },
  {
    "title": "compileModel(at:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlmodel/2921516-compilemodel",
    "html": "Parameters\nmodelURL\n\nThe local file path to your downloaded .mlmodel file.\n\nReturn Value\n\nThe local file path to the compiled model (the .mlmodelc file).\n\nDiscussion\n\nThe source .mlmodel file must be on the device. Pass the compiled model to init(contentsOf:) to initialize an MLModel instance.\n\nListing 1 Compiling a model file and creating an MLModel instance from the compiled version\nlet compiledUrl = try MLModel.compileModel(at: modelUrl)\nlet model = try MLModel(contentsOf: compiledUrl)\n\n\nCompiling can be time consuming and shouldn't be done on the main thread.\n\nSee Downloading and Compiling a Model on the User’s Device for more details.\n\nSee Also\nCompiling a Model\nclass func compileModel(at: URL) -> URL\nCompile a model for a device.\nclass func compileModel(at: URL, completionHandler: (Result<URL, Error>) -> Void)\nCompile a model for a device.\nRelated Documentation\nDownloading and Compiling a Model on the User’s Device\nInstall Core ML models on the user’s device dynamically at runtime."
  },
  {
    "title": "compileModel(at:completionHandler:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlmodel/3931182-compilemodel",
    "html": "Parameters\nurl\n\nThe URL to the model file.\n\nhandler\n\nThe completion handler the framework calls when the compilation completes.\n\nSee Also\nCompiling a Model\nclass func compileModel(at: URL) -> URL\nCompile a model for a device.\nclass func compileModel(at: URL) -> URL\nCompiles a model on the device to update the model in your app.\nDeprecated"
  },
  {
    "title": "compileModel(at:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlmodel/3931181-compilemodel",
    "html": "Parameters\nurl\n\nThe URL to the model file.\n\nReturn Value\n\nA URL to the compiled model directory, if successful; otherwise, nil.\n\nSee Also\nCompiling a Model\nclass func compileModel(at: URL, completionHandler: (Result<URL, Error>) -> Void)\nCompile a model for a device.\nclass func compileModel(at: URL) -> URL\nCompiles a model on the device to update the model in your app.\nDeprecated"
  },
  {
    "title": "init(contentsOf:configuration:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlmodel/3022229-init",
    "html": "Parameters\nurl\n\nThe path to a compiled model file (ModelName.mlmodelc), typically with the URL that compileModel(at:) returns.\n\nconfiguration\n\nThe runtime settings for the new model instance.\n\nDiscussion\n\nIn most cases, your app won't need to create a model object directly. Consider the programmer-friendly wrapper class that Xcode automatically generates when you add a model to your project (see Integrating a Core ML Model into Your App).\n\nIf the wrapper class doesn't meet your app's needs or you need to customize the model's configuration, use this initializer to create a model object from any compiled model file you can access. Typically, you use this initializer after your app has downloaded and compiled a model, which is one technique for saving space in your app (see Downloading and Compiling a Model on the User’s Device).\n\nSee Also\nLoading a Model\nclass func load(contentsOf: URL, configuration: MLModelConfiguration) -> MLModel\nConstruct a model asynchronously from a compiled model asset.\nclass func load(MLModelAsset, configuration: MLModelConfiguration, completionHandler: (MLModel?, Error?) -> Void)\nConstruct a model asynchronously from a compiled model asset.\nclass func load(contentsOf: URL, configuration: MLModelConfiguration, completionHandler: (Result<MLModel, Error>) -> Void)\nCreates a Core ML model instance asynchronously from a compiled model file, a custom configuration, and a completion handler.\ninit(contentsOf: URL)\nCreates a Core ML model instance from a compiled model file."
  },
  {
    "title": "load(contentsOf:configuration:completionHandler:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlmodel/3600218-load",
    "html": "Parameters\nurl\n\nThe path to a compiled model file (ModelName.mlmodelc), typically with the URL that compileModel(at:) returns.\n\nconfiguration\n\nThe runtime settings for the new model instance.\n\nhandler\n\nA closure the method calls when it finishes loading the model.\n\nerror\n\nOn return, if an error occurs, a pointer to an error information instance; otherwise nil.\n\nDiscussion\n\nUse this method to load a model asynchronously. Core ML calls your completion handler after it successfully loads the model, or encounters an error attempting to load it.\n\nMLModel.load(contentsOf: modelURL) { result in\n    switch result {\n    case .success(let loadedModel):\n        print(\"Successfully loaded model `\\(loadedModel)`.\")\n\n\n        // Use the loaded model for predictions.\n        // ...\n\n\n    case .failure(let error):\n        print(\"Error loading model: \\(error).\")\n    }\n}\n\n\nIf the model loaded successfully, you can use the instance from the Result.success(_:) associated value; otherwise, use the Result.failure(_:) associated value to address the error. See MLModelError for the list of error codes.\n\nSee Also\nLoading a Model\nclass func load(contentsOf: URL, configuration: MLModelConfiguration) -> MLModel\nConstruct a model asynchronously from a compiled model asset.\nclass func load(MLModelAsset, configuration: MLModelConfiguration, completionHandler: (MLModel?, Error?) -> Void)\nConstruct a model asynchronously from a compiled model asset.\ninit(contentsOf: URL)\nCreates a Core ML model instance from a compiled model file.\ninit(contentsOf: URL, configuration: MLModelConfiguration)\nCreates a Core ML model instance from a compiled model file and a custom configuration."
  },
  {
    "title": "beginAccessing(identifier:completionHandler:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlmodelcollection/3649655-beginaccessing",
    "html": "Deprecated\n\nUse Background Assets or URLSession instead.\n\nParameters\nidentifier\n\nThe name of the model collection.\n\nhandler\n\nA closure that Core ML calls when the model finishes loading.\n\nThe closure has one Result parameter with the following associated values:\n\nResult.success(_:)\n\nAn MLModelCollection instance if the collection loaded successfully.\n\nResult.failure(_:)\n\nAn Error instance if the model collection failed to load (see MLModelError).\n\nDiscussion\n\nUse this method to access a model collection from a deployment. Your app can call this method multiple times, typically each time it needs to access the models in the collection.\n\nlet progress = MLModelCollection.beginAccessing(identifier: modelCollectionName,\n                                         completionHandler: modelCollectionAvailable)\n\n\nCore ML calls your completion app’s completion handler once the entire collection is on the user’s device. If the model collection isn’t already on the user’s device, Core ML immediately begins fetching it over the network.\n\nfunc modelCollectionAvailable(result: Result<MLModelCollection, Error>) {\n    switch result {\n    case .success(let collection):\n        print(\"Model collection `\\(collection.identifier)` is now available.\")\n        \n        // Load a model from the collection.\n        loadModel(\"DeploymentModel\", from: collection)\n        \n    case .failure(let error):\n        print(\"Error accessing a model collection: \\(error)\")\n    }\n}\n\n\nOnce your app has the model collection, use the model’s identifier that you assigned it in the deployment (see Creating and Deploying a Model Collection).\n\nfunc loadModel(_ modelName: String, from collection: MLModelCollection) {\n    guard let entry = collection.entries[modelName] else {\n        print(\"Couldn't find model `\\(modelName)` in `\\(collection.identifier)`.\")\n        return\n    }\n\n\n    MLModel.load(contentsOf: entry.modelURL) { result in\n        switch result {\n        case .success(let modelFromCollection):\n            // Use the `modelFromCollection` instance.\n            ...\n\n\n        case .failure(let error):\n            print(\"Error loading model `\\(modelName)` in `\\(collection.identifier)`: \\(error).\")\n        }\n    }\n    ...\n}\n\n\nCreate an instance of a collection’s model by passing its entry’s modelURL — from the model collection’s entries property — to the load(contentsOf:configuration:completionHandler:) class method.\n\nTip\n\nUse a default model from your app’s bundle while your app waits for the model collection. When your app gets the model collection, switch to the collection’s newer model.\n\nIf your app uses a default model from the app bundle, you can use an initializer from its convenience wrapper class that Xcode automatically generated.\n\nlet modelFromCollection = try? BuiltInModel(contentsOf: entry.modelURL)\n\n\nSee Also\nAccessing a Model Collection\nclass func endAccessing(identifier: String, completionHandler: (Result<Void, Error>) -> Void)\nTerminates access to a model collection."
  },
  {
    "title": "MLComputeDevice.gpu(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlcomputedevice/gpu",
    "html": "See Also\nDevice Types\ncase cpu(MLCPUComputeDevice)\nA device that represents a CPU compute device.\ncase neuralEngine(MLNeuralEngineComputeDevice)\nA device that represents a Neural Engine compute device."
  },
  {
    "title": "MLComputeDevice.neuralEngine(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlcomputedevice/neuralengine",
    "html": "See Also\nDevice Types\ncase cpu(MLCPUComputeDevice)\nA device that represents a CPU compute device.\ncase gpu(MLGPUComputeDevice)\nA device that represents a GPU compute device."
  },
  {
    "title": "identifier | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlmodelcollection/3563960-identifier",
    "html": "Deprecated\n\nUse Background Assets or URLSession instead.\n\nSee Also\nIdentifying a Model Collection\nvar deploymentID: String\nThe unique identifier of the model collection’s deployment.\nDeprecated"
  },
  {
    "title": "description | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlcomputedevice/4134995-description",
    "html": "Relationships\nFrom Protocol\nCustomStringConvertible"
  },
  {
    "title": "hash(into:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlcomputedevice/4134997-hash",
    "html": "Parameters\nhasher\n\nThe hasher to use when combining the components of this instance.\n\nRelationships\nFrom Protocol\nHashable\nSee Also\nAccessing the Hash Value\nvar hashValue: Int\nThe hash value."
  },
  {
    "title": "modelDisplayName | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlmodelconfiguration/3987922-modeldisplayname",
    "html": "See Also\nConfiguring Model Parameters\nvar parameters: [MLParameterKey : Any]?\nA dictionary of configuration settings your app can override when loading a model.\nclass MLParameterKey\nThe keys for the parameter dictionary in a model configuration or a model update context."
  },
  {
    "title": "hashValue | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlcomputedevice/4134998-hashvalue",
    "html": "Relationships\nFrom Protocol\nHashable\nSee Also\nAccessing the Hash Value\nfunc hash(into: inout Hasher)\nHashes the essential components of the value by passing them into the hasher."
  },
  {
    "title": "==(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlcomputedevice/4134992",
    "html": "Parameters\na\n\nA value to compare.\n\nb\n\nAnother value to compare.\n\nSee Also\nComparing Devices\nstatic func != (MLComputeDevice, MLComputeDevice) -> Bool\nReturns a Boolean value that indicates whether two values are not equal."
  },
  {
    "title": "Detecting human body poses in an image | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/model_integration_samples/detecting_human_body_poses_in_an_image",
    "html": "Overview\n\nThis sample project provides an illustrative example of using a third-party Core ML model, PoseNet, to detect human body poses from frames captured using a camera. PoseNet models detect 17 different body parts or joints: eyes, ears, nose, shoulders, hips, elbows, knees, wrists, and ankles. Collectively these joints form a pose.\n\nThe sample finds the locations of the 17 joints for each person in the image and draws a wireframe pose on top of them.\n\nNote\n\nStarting in iOS 14 and macOS 11, Vision adds the ability to detect human body poses. For details, see Detecting Human Body Poses in Images.\n\nConfigure the capture session\n\nThe sample starts by getting an image from the device’s built-in camera using an AVCaptureSession (see Setting Up a Capture Session).\n\nif captureSession.isRunning {\n    captureSession.stopRunning()\n}\n\n\ncaptureSession.beginConfiguration()\n\n\ncaptureSession.sessionPreset = .vga640x480\n\n\ntry setCaptureSessionInput()\n\n\ntry setCaptureSessionOutput()\n\n\ncaptureSession.commitConfiguration()\n\nAcquire the captured image\n\nA video capture session sends each image to the captureOutput(_:didOutput:from:) method of the VideoCapture class, where the app converts the received CMSampleBuffer into a CGImage before passing it to the delegate assigned to the VideoCapture object.\n\n// Attempt to lock the image buffer to gain access to its memory.\nguard CVPixelBufferLockBaseAddress(pixelBuffer, .readOnly) == kCVReturnSuccess\n    else {\n        return\n}\n\n\n// Create Core Graphics image placeholder.\nvar image: CGImage?\n\n\n// Create a Core Graphics bitmap image from the pixel buffer.\nVTCreateCGImageFromCVPixelBuffer(pixelBuffer, options: nil, imageOut: &image)\n\n\n// Release the image buffer.\nCVPixelBufferUnlockBaseAddress(pixelBuffer, .readOnly)\n\n\nDispatchQueue.main.sync {\n    delegate.videoCapture(self, didCaptureFrame: image)\n}\n\nPrepare the input for the PoseNet model\n\nAfter receiving the captured image, the app wraps it in an instance of PoseNetInput, a custom feature provider, to resize the image to the specified size.\n\n// Wrap the image in an instance of PoseNetInput to have it resized\n// before being passed to the PoseNet model.\nlet input = PoseNetInput(image: image, size: self.modelInputSize)\n\nPass the input to the PoseNet model\n\nThe sample app then proceeds to pass the input to the PoseNet’s prediction(from:) function to obtain its outputs, which the app uses to detect poses.\n\nguard let prediction = try? self.poseNetMLModel.prediction(from: input) else {\n    return\n}\n\n\nNext, the sample app wraps the PoseNet model outputs in an instance of PoseNetOutput, along with the model’s input size and output stride, before passing it back to the assigned delegate for analysis.\n\nlet poseNetOutput = PoseNetOutput(prediction: prediction,\n                                  modelInputSize: self.modelInputSize,\n                                  modelOutputStride: self.outputStride)\n\n\nDispatchQueue.main.async {\n    self.delegate?.poseNet(self, didPredict: poseNetOutput)\n}\n\nAnalyze the PoseNet output to locate joints\n\nThe sample uses one of two algorithms to locate the joints of either one person or multiple persons. The single-person algorithm, the simplest and fastest, inspects the model’s outputs to locate the most prominent joints in the image and uses these joints to construct a single pose.\n\nvar pose = Pose()\n\n\n// For each joint, find its most likely position and associated confidence\n// by querying the heatmap array for the cell with the greatest\n// confidence and using this to compute its position.\npose.joints.values.forEach { joint in\n    configure(joint: joint)\n}\n\n\n// Compute and assign the confidence for the pose.\npose.confidence = pose.joints.values\n    .map { $0.confidence }.reduce(0, +) / Double(Joint.numberOfJoints)\n\n\n// Map the pose joints positions back onto the original image.\npose.joints.values.forEach { joint in\n    joint.position = joint.position.applying(modelToInputTransformation)\n}\n\n\nreturn pose\n\n\nThe multiple-person algorithm first identifies a set of candidate root joints as starting points. It uses these root joints to find neighboring joints and repeats the process until it has located all 17 joints of each person. For example, the algorithm may find a left knee with a high confidence, and then search for its adjacent joints, the left ankle and left hip.\n\nvar detectedPoses = [Pose]()\n\n\n// Iterate through the joints with the greatest confidence, referred to here as\n// candidate roots, using each as a starting point to assemble a pose.\nfor candidateRoot in candidateRoots {\n    // Ignore any candidates that are in the proximity of joints of the\n    // same type and have already been assigned to an existing pose.\n    let maxDistance = configuration.matchingJointDistance\n    guard !detectedPoses.contains(candidateRoot, within: maxDistance) else {\n        continue\n    }\n\n\n    var pose = assemblePose(from: candidateRoot)\n\n\n    // Compute the pose's confidence by dividing the sum of all\n    // non-overlapping joints, from existing poses, by the total\n    // number of joints.\n    pose.confidence = confidence(for: pose, detectedPoses: detectedPoses)\n\n\n    // Ignore any pose that has a confidence less than the assigned threshold.\n    guard pose.confidence >= configuration.poseConfidenceThreshold else {\n        continue\n    }\n\n\n    detectedPoses.append(pose)\n\n\n    // Exit early if enough poses have been detected.\n    if detectedPoses.count >= configuration.maxPoseCount {\n        break\n    }\n}\n\n\n// Map the pose joints positions back onto the original image using\n// the pre-computed transformation matrix.\ndetectedPoses.forEach { pose in\n    pose.joints.values.forEach { joint in\n        joint.position = joint.position.applying(modelToInputTransformation)\n    }\n}\n\n\nreturn detectedPoses\n\nVisualize the detected poses\n\nFor each detected pose, the sample app draws a wireframe over the input image, connecting the lines between the joints and then drawing circles for the joints themselves.\n\nlet dstImageSize = CGSize(width: frame.width, height: frame.height)\nlet dstImageFormat = UIGraphicsImageRendererFormat()\n\n\ndstImageFormat.scale = 1\nlet renderer = UIGraphicsImageRenderer(size: dstImageSize,\n                                       format: dstImageFormat)\n\n\nlet dstImage = renderer.image { rendererContext in\n    // Draw the current frame as the background for the new image.\n    draw(image: frame, in: rendererContext.cgContext)\n\n\n    for pose in poses {\n        // Draw the segment lines.\n        for segment in PoseImageView.jointSegments {\n            let jointA = pose[segment.jointA]\n            let jointB = pose[segment.jointB]\n\n\n            guard jointA.isValid, jointB.isValid else {\n                continue\n            }\n\n\n            drawLine(from: jointA,\n                     to: jointB,\n                     in: rendererContext.cgContext)\n        }\n\n\n        // Draw the joints as circles above the segment lines.\n        for joint in pose.joints.values.filter({ $0.isValid }) {\n            draw(circle: joint, in: rendererContext.cgContext)\n        }\n    }\n}\n\nSee Also\nImage Classification Models\nClassifying Images with Vision and Core ML\nCrop and scale photos using the Vision framework and classify them with a Core ML model.\nUnderstanding a Dice Roll with Vision and Object Detection\nDetect dice position and values shown in a camera frame, and determine the end of a roll by leveraging a dice detection model."
  },
  {
    "title": "Generating a Model Encryption Key | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/generating_a_model_encryption_key",
    "html": "Overview\n\nUse a model’s encryption key to encrypt a model archive for deployment or to encrypt a model compiled and bundled into your app.\n\nImportant\n\nYou must have signed in with your Apple ID in the Apple ID pane in System Preferences to generate a model encryption key in Xcode.\n\nCreate the Model Encryption Key\n\nOpen a model in Xcode, click the Utilities tab, and click Create Encryption Key.\n\nSelect the development team that your app’s target uses from the menu, and click Continue.\n\nXcode’s confirmation dialog provides an arrow button that takes you to the encryption key in Finder.\n\nLocate the Model Encryption Key\n\nUse the first button in the confirmation dialog to show the model encryption key in Finder, or navigate to the model’s enclosing folder.\n\nXcode saves the model encryption key file in the same folder as the original model file, and uses its base name with the .mlmodelkey extension. For example, the encryption key for a model named Classifier.mlmodel has the name Classifier.mlmodelkey in the same directory.\n\nUse this model encryption file to:\n\nEncrypt a model archive as you generate it using Xcode (see Generating a Model Archive).\n\nEncrypt a model that Xcode includes in your app’s bundle as it compiles the model (see Encrypting a Model in Your App).\n\nSee Also\nModel Encryption\nEncrypting a Model in Your App\nEncrypt your app’s built-in model at compile time by adding a compiler flag."
  },
  {
    "title": "MLWritable | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlwritable",
    "html": "Overview\n\nYou use MLWritable to save any MLModel instance that adopts the protocol to the file system.\n\nTopics\nSaving to a File\nfunc write(to: URL)\nExports a machine learning file to the file system.\n\nRequired\n\nRelationships\nInherits From\nNSObjectProtocol\nSee Also\nSaving an Updated Model\nvar model: MLModel & MLWritable\nThe underlying Core ML model stored in memory."
  },
  {
    "title": "init(array:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlarraybatchprovider/2962854-init",
    "html": "Parameters\narray\n\nThe array of feature providers for the batch."
  },
  {
    "title": "model | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlupdatecontext/3180096-model",
    "html": "See Also\nSaving an Updated Model\nprotocol MLWritable\nA set of methods that saves a machine learning type to the file system."
  },
  {
    "title": "MLMetricKey | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlmetrickey",
    "html": "Topics\nGetting the Keys\nclass var lossValue: MLMetricKey\nThe key you use to access the current loss (a float value).\nclass var epochIndex: MLMetricKey\nThe key you use to access the epoch index (an Int64 value).\nclass var miniBatchIndex: MLMetricKey\nThe key you use to access the mini-batch index (an Int64 value) within an epoch.\nSupporting Types\nclass MLKey\nAn abstract base class for machine learning key types.\nRelationships\nInherits From\nMLKey\nSee Also\nEvaluating the Update\nvar metrics: [MLMetricKey : Any]\nThe training metrics of the model for the update task, contained in a dictionary."
  },
  {
    "title": "MLParameterKey | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlparameterkey",
    "html": "Overview\n\nUse an MLParameterKey to retrieve a model’s parameter value using:\n\nThe model’s parameterValue(for:) method\n\nThe parameters dictionary of an MLModelConfiguration\n\nThe parameters dictionary of an MLUpdateContext\n\nNote\n\nTo access the parameter of a specific model within a pipeline model, use the parameter key’s scoped(to:) method with the model’s name.\n\nOverriding Model and Layer Parameters\n\nTo override a model’s default parameter values:\n\nCreate an MLModelConfiguration instance.\n\nUse an MLParameterKey for each parameter to set its value in the model configuration’s parameters dictionary.\n\nCreate a new model instance using init(contentsOf:configuration:) with your custom model configuration.\n\nConfiguring Update Parameters\n\nTo configure the update parameters for an MLUpdateTask:\n\nCreate an MLModelConfiguration instance.\n\nUse an MLParameterKey for each parameter to set its value in the model configuration’s parameters dictionary.\n\nCreate a new update task with your custom model configuration.\n\nSee Personalizing a Model with On-Device Updates.\n\nTopics\nScoping Parameter Keys\nfunc scoped(to: String) -> MLParameterKey\nCreates a copy of a parameter key and adds the scope to it.\nAccessing Model Parameters\nclass var numberOfNeighbors: MLParameterKey\nThe key you use to access the number of neighbors that adjusts the affinity of a k-nearest-neighbor model.\nclass var linkedModelFileName: MLParameterKey\nThe key you use to access the linked model’s filename.\nclass var linkedModelSearchPath: MLParameterKey\nThe key you use to access the linked model’s search path.\nAccessing Neural Network Layer Parameters\nclass var weights: MLParameterKey\nThe key you use to access the weights of a layer in a neural network model.\nclass var biases: MLParameterKey\nThe key you use to access the biases of a layer in a neural network model.\nAccessing Model Update Parameters\nclass var learningRate: MLParameterKey\nThe key you use to access the optimizer’s learning rate parameter.\nclass var momentum: MLParameterKey\nThe key you use to access the stochastic gradient descent (SGD) optimizer’s momentum parameter.\nclass var miniBatchSize: MLParameterKey\nThe key you use to access the optimizer’s mini batch-size parameter.\nclass var beta1: MLParameterKey\nThe key you use to access the Adam optimizer’s first beta parameter.\nclass var beta2: MLParameterKey\nThe key you use to access the Adam optimizer’s second beta parameter.\nclass var eps: MLParameterKey\nThe key you use to access the Adam optimizer’s epsilon parameter.\nclass var epochs: MLParameterKey\nThe key you use to access the optimizer’s epochs parameter.\nclass var shuffle: MLParameterKey\nThe key you use to access the shuffle parameter, a Boolean value that determines whether the model randomizes the data between epochs.\nclass var seed: MLParameterKey\nThe key you use to access the seed parameter that initializes the random number generator for the shuffle option.\nRelationships\nInherits From\nMLKey\nSee Also\nInspecting a Model\nstatic var availableComputeDevices: [MLComputeDevice]\nThe list of available compute devices that the model’s prediction methods use.\nvar configuration: MLModelConfiguration\nThe configuration of the model set during initialization.\nvar modelDescription: MLModelDescription\nModel information you use at runtime during development, which Xcode also displays in its Core ML model editor view.\nclass MLModelDescription\nInformation about a model, primarily the input and output format for each feature the model expects, and optional metadata.\nfunc parameterValue(for: MLParameterKey) -> Any\nReturns a model parameter value for a key."
  },
  {
    "title": "init(dictionary:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlarraybatchprovider/2962853-init",
    "html": "Parameters\ndictionary\n\nA dictionary which maps feature names to an array of values. The error case occurs when all the arrays do not have the same length or the values in an aray are not expressible as an MLFeatureValue.\n\nDiscussion\n\nThis initializer is convenient when the data are available as individual arrays.\n\nlet batch = try  MLArrayBatchProvider(dictionary: [\"age\": [30, 35, 29],\n                                                   \"weightLbs\": [120.0, 170.4, 213.6]])\n"
  },
  {
    "title": "load(_:configuration:completionHandler:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlmodel/3950976-load",
    "html": "Parameters\nasset\n\nThe compiled model asset derived from in-memory or on-disk Core ML model.\n\nconfiguration\n\nThe model configuration that holds options for loading the model.\n\nhandler\n\nThe completion handler invoked when the load completes. A valid MLModel returns on success, or an error if failure.\n\nDiscussion\n\nConcurrency Note\n\nYou can call this method from synchronous code using a completion handler, as shown on this page, or you can call it as an asynchronous method that has the following declaration:\n\nclass func load(asset: MLModelAsset, configuration: MLModelConfiguration) async throws -> MLModel\n\n\nFor information about concurrency and asynchronous code in Swift, see Calling Objective-C APIs Asynchronously.\n\nSee Also\nLoading a Model\nclass func load(contentsOf: URL, configuration: MLModelConfiguration) -> MLModel\nConstruct a model asynchronously from a compiled model asset.\nclass func load(contentsOf: URL, configuration: MLModelConfiguration, completionHandler: (Result<MLModel, Error>) -> Void)\nCreates a Core ML model instance asynchronously from a compiled model file, a custom configuration, and a completion handler.\ninit(contentsOf: URL)\nCreates a Core ML model instance from a compiled model file.\ninit(contentsOf: URL, configuration: MLModelConfiguration)\nCreates a Core ML model instance from a compiled model file and a custom configuration."
  },
  {
    "title": "MLUpdateProgressHandlers | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlupdateprogresshandlers",
    "html": "Topics\nCreating Progress Handlers\ninit(forEvents: MLUpdateProgressEvent, progressHandler: ((MLUpdateContext) -> Void)?, completionHandler: (MLUpdateContext) -> Void)\nCreates the collection of closures an update task uses to notify your app of its progress.\nstruct MLUpdateProgressEvent\nA type of event during a model update task.\nclass MLUpdateContext\nThe context an update task provides to your app’s completion and update progress handlers.\nRelationships\nInherits From\nNSObject\nSee Also\nCreating an Update Task\ninit(forModelAt: URL, trainingData: MLBatchProvider, completionHandler: (MLUpdateContext) -> Void)\nCreates a task that updates the model at the URL with the training data, and calls the completion handler when the update completes.\ninit(forModelAt: URL, trainingData: MLBatchProvider, progressHandlers: MLUpdateProgressHandlers)\nCreates a task that updates the model at the URL with the training data, and calls the progress handlers during and after the update.\ninit(forModelAt: URL, trainingData: MLBatchProvider, configuration: MLModelConfiguration?, completionHandler: (MLUpdateContext) -> Void)\nCreates a task that updates the model at the URL with the training data and configuration, and calls the completion handler when the update completes.\ninit(forModelAt: URL, trainingData: MLBatchProvider, configuration: MLModelConfiguration?, progressHandlers: MLUpdateProgressHandlers)\nCreates a task that updates the model at the URL with the training data and configuration, and calls the progress handlers during and after the update.\nprotocol MLBatchProvider\nAn interface that represents a collection of feature providers.\nclass MLModelConfiguration\nThe settings for creating or updating a machine learning model.\nclass MLUpdateContext\nThe context an update task provides to your app’s completion and update progress handlers."
  },
  {
    "title": "resume(withParameters:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlupdatetask/3180109-resume",
    "html": "Parameters\nupdateParameters\n\nModel training parameter values to replace those currently set in the update task.\n\nDiscussion\n\nUse this method to resume the model update task with newer parameter values. You use this method within the closures you provide in an MLUpdateProgressHandlers instance to resume the MLUpdateTask.\n\nSee Also\nStarting and Resuming an Update\nclass MLParameterKey\nThe keys for the parameter dictionary in a model configuration or a model update context."
  },
  {
    "title": "count | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlbatchprovider/2994293-count",
    "html": "Required\n\nSee Also\nAccessing Values\nfunc features(at: Int) -> MLFeatureProvider\nReturns the feature provider at the given index.\n\nRequired"
  },
  {
    "title": "init(specification:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlmodelasset/3950977-init",
    "html": "Parameters\nspecificationData\n\nThe contents of a .mlmodel as a data blob."
  },
  {
    "title": "features(at:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlbatchprovider/2994294-features",
    "html": "Required\n\nParameters\nindex\n\nThe index of the desired feature provider.\n\nReturn Value\n\nThe feature provider at the given index.\n\nSee Also\nAccessing Values\nvar count: Int\nThe number of feature providers in this batch.\n\nRequired"
  },
  {
    "title": "isUndefined | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlfeaturevalue/2879392-isundefined",
    "html": "See Also\nAccessing the Feature’s Value\nvar int64Value: Int64\nThe underlying integer of the feature value.\nvar doubleValue: Double\nThe underlying double of the feature value.\nvar stringValue: String\nThe underlying string of the feature value.\nvar imageBufferValue: CVPixelBuffer?\nThe underlying image of the feature value as a pixel buffer.\nfunc shapedArrayValue<Scalar>(of: Scalar.Type) -> MLShapedArray<Scalar>?\nReturns the underlying shaped array of the feature value.\nvar multiArrayValue: MLMultiArray?\nThe underlying multiarray of the feature value.\nvar sequenceValue: MLSequence?\nThe underlying sequence of the feature value.\nvar dictionaryValue: [AnyHashable : NSNumber]\nThe underlying dictionary of the feature value."
  },
  {
    "title": "init(forModelAt:trainingData:progressHandlers:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlupdatetask/3547163-init",
    "html": "Parameters\nmodelURL\n\nThe location in the file system of a model file (ModelName.mlmodelc).\n\ntrainingData\n\nThe update data for the model, contained in a batch provider.\n\nprogressHandlers\n\nThe closures the task calls during the update process.\n\nSee Also\nCreating an Update Task\ninit(forModelAt: URL, trainingData: MLBatchProvider, completionHandler: (MLUpdateContext) -> Void)\nCreates a task that updates the model at the URL with the training data, and calls the completion handler when the update completes.\ninit(forModelAt: URL, trainingData: MLBatchProvider, configuration: MLModelConfiguration?, completionHandler: (MLUpdateContext) -> Void)\nCreates a task that updates the model at the URL with the training data and configuration, and calls the completion handler when the update completes.\ninit(forModelAt: URL, trainingData: MLBatchProvider, configuration: MLModelConfiguration?, progressHandlers: MLUpdateProgressHandlers)\nCreates a task that updates the model at the URL with the training data and configuration, and calls the progress handlers during and after the update.\nprotocol MLBatchProvider\nAn interface that represents a collection of feature providers.\nclass MLModelConfiguration\nThe settings for creating or updating a machine learning model.\nclass MLUpdateContext\nThe context an update task provides to your app’s completion and update progress handlers.\nclass MLUpdateProgressHandlers\nA collection of closures an update task uses to notify your app of its progress."
  },
  {
    "title": "init(forModelAt:trainingData:configuration:progressHandlers:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlupdatetask/3180112-init",
    "html": "Parameters\nmodelURL\n\nThe location in the file system of a model file (ModelName.mlmodelc).\n\ntrainingData\n\nThe update data for the model, contained in a batch provider.\n\nconfiguration\n\nThe model settings for an updated model object.\n\nprogressHandlers\n\nThe closures the task calls during the update process.\n\nSee Also\nCreating an Update Task\ninit(forModelAt: URL, trainingData: MLBatchProvider, completionHandler: (MLUpdateContext) -> Void)\nCreates a task that updates the model at the URL with the training data, and calls the completion handler when the update completes.\ninit(forModelAt: URL, trainingData: MLBatchProvider, progressHandlers: MLUpdateProgressHandlers)\nCreates a task that updates the model at the URL with the training data, and calls the progress handlers during and after the update.\ninit(forModelAt: URL, trainingData: MLBatchProvider, configuration: MLModelConfiguration?, completionHandler: (MLUpdateContext) -> Void)\nCreates a task that updates the model at the URL with the training data and configuration, and calls the completion handler when the update completes.\nprotocol MLBatchProvider\nAn interface that represents a collection of feature providers.\nclass MLModelConfiguration\nThe settings for creating or updating a machine learning model.\nclass MLUpdateContext\nThe context an update task provides to your app’s completion and update progress handlers.\nclass MLUpdateProgressHandlers\nA collection of closures an update task uses to notify your app of its progress."
  },
  {
    "title": "init(forModelAt:trainingData:configuration:completionHandler:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlupdatetask/3180111-init",
    "html": "Parameters\nmodelURL\n\nThe location in the file system of a model file (ModelName.mlmodelc).\n\ntrainingData\n\nThe update data for the model, contained in a batch provider.\n\nconfiguration\n\nThe model settings for an updated model object.\n\ncompletionHandler\n\nThe closure the task calls when it finishes.\n\nSee Also\nCreating an Update Task\ninit(forModelAt: URL, trainingData: MLBatchProvider, completionHandler: (MLUpdateContext) -> Void)\nCreates a task that updates the model at the URL with the training data, and calls the completion handler when the update completes.\ninit(forModelAt: URL, trainingData: MLBatchProvider, progressHandlers: MLUpdateProgressHandlers)\nCreates a task that updates the model at the URL with the training data, and calls the progress handlers during and after the update.\ninit(forModelAt: URL, trainingData: MLBatchProvider, configuration: MLModelConfiguration?, progressHandlers: MLUpdateProgressHandlers)\nCreates a task that updates the model at the URL with the training data and configuration, and calls the progress handlers during and after the update.\nprotocol MLBatchProvider\nAn interface that represents a collection of feature providers.\nclass MLModelConfiguration\nThe settings for creating or updating a machine learning model.\nclass MLUpdateContext\nThe context an update task provides to your app’s completion and update progress handlers.\nclass MLUpdateProgressHandlers\nA collection of closures an update task uses to notify your app of its progress."
  },
  {
    "title": "MLUpdateTask | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlupdatetask",
    "html": "Overview\n\nUse an MLUpdateTask to update a machine learning model on a user’s device.\n\nTopics\nCreating an Update Task\ninit(forModelAt: URL, trainingData: MLBatchProvider, completionHandler: (MLUpdateContext) -> Void)\nCreates a task that updates the model at the URL with the training data, and calls the completion handler when the update completes.\ninit(forModelAt: URL, trainingData: MLBatchProvider, progressHandlers: MLUpdateProgressHandlers)\nCreates a task that updates the model at the URL with the training data, and calls the progress handlers during and after the update.\ninit(forModelAt: URL, trainingData: MLBatchProvider, configuration: MLModelConfiguration?, completionHandler: (MLUpdateContext) -> Void)\nCreates a task that updates the model at the URL with the training data and configuration, and calls the completion handler when the update completes.\ninit(forModelAt: URL, trainingData: MLBatchProvider, configuration: MLModelConfiguration?, progressHandlers: MLUpdateProgressHandlers)\nCreates a task that updates the model at the URL with the training data and configuration, and calls the progress handlers during and after the update.\nprotocol MLBatchProvider\nAn interface that represents a collection of feature providers.\nclass MLModelConfiguration\nThe settings for creating or updating a machine learning model.\nclass MLUpdateContext\nThe context an update task provides to your app’s completion and update progress handlers.\nclass MLUpdateProgressHandlers\nA collection of closures an update task uses to notify your app of its progress.\nStarting and Resuming an Update\nfunc resume(withParameters: [MLParameterKey : Any])\nResumes a model update with updated parameter values.\nclass MLParameterKey\nThe keys for the parameter dictionary in a model configuration or a model update context.\nRelationships\nInherits From\nMLTask\nSee Also\nOn-Device Model Updates\nclass MLTask\nAn abstract base class for machine learning tasks.\nPersonalizing a Model with On-Device Updates\nModify an updatable Core ML model by running an update task with labeled data."
  },
  {
    "title": "Personalizing a Model with On-Device Updates | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/model_personalization/personalizing_a_model_with_on-device_updates",
    "html": "Overview\n\nWith the Core ML framework, you can customize an updatable model at runtime on the user’s device. Using this technique, you can create a personalized experience for the user while keeping their data private.\n\nThis sample demonstrates how to update the drawing classifier with an MLUpdateTask. The app initiates an update task with the user’s drawings paired with a string label. Once the update is complete, the app uses the updated drawing classifier to recognize similar drawings from the user and convert each into its associated string label.\n\nNote\n\nRun this sample on a device or Simulator with iOS 13 or later, or iPadOS 13 or later.\n\nPrepare Your Model Update Data\n\nGather your training data:\n\nWrap each value of a datapoint in an MLFeatureValue, one for each model input and output.\n\nGroup all the feature values for a datapoint in an MLFeatureProvider.\n\nGroup all the feature providers in an MLBatchProvider.\n\nEach time the user adds a new emoji sticker, the app prompts the user to make three drawings, and uses those drawings to update the drawing classifier. It does this by first creating an MLDictionaryFeatureProvider that contains the feature values for a drawing and its label. The app appends each feature provider to an array, which it uses to create an MLArrayBatchProvider at the end of the function.\n\n var featureProviders = [MLFeatureProvider]()\n\n\n let inputName = \"drawing\"\n let outputName = \"label\"\n         \n for drawing in trainingDrawings {\n     let inputValue = drawing.featureValue\n     let outputValue = MLFeatureValue(string: String(emoji))\n     \n     let dataPointFeatures: [String: MLFeatureValue] = [inputName: inputValue,\n                                                        outputName: outputValue]\n     \n     if let provider = try? MLDictionaryFeatureProvider(dictionary: dataPointFeatures) {\n         featureProviders.append(provider)\n     }\n }\n \nreturn MLArrayBatchProvider(array: featureProviders)\n\n\nThe sample makes each MLDictionaryFeatureProvider by initializing it with a dictionary of two MLFeatureValue instances keyed by strings. The feature values are:\n\nThe underlying image of the drawing keyed by \"drawing\"\n\nThe emoji character as a string keyed by \"label\"\n\nThe sample creates a feature value for the emoji string by using init(string:). However, to convert the drawing’s underlying CGImage into a feature value, the sample acquires the image constraint of the model’s image input feature.\n\nlet imageFeatureValue = try? MLFeatureValue(cgImage: preparedImage,\n                                            constraint: imageConstraint)\nreturn imageFeatureValue!\n\n\nThe sample gets the drawing classifier’s \"drawing\" MLImageConstraint by inspecting the MLModelDescription.\n\n/// - Tag: ImageConstraintProperty\nextension UpdatableDrawingClassifier {\n    /// Returns the image constraint for the model's \"drawing\" input feature.\n    var imageConstraint: MLImageConstraint {\n        let description = model.modelDescription\n        \n        let inputName = \"drawing\"\n        let imageInputDescription = description.inputDescriptionsByName[inputName]!\n        \n        return imageInputDescription.imageConstraint!\n    }\n}\n\n\nCreate an Update Task\n\nYou create an MLUpdateTask by passing the following to an initializer:\n\nAn MLBatchProvider that contains your update data\n\nThe location of the compiled model youʼd like to update (ModelName.mlmodelc)\n\nAn MLModelConfiguration, if applicable\n\nA completion handler with a single MLUpdateContext parameter\n\nThe sample updates the drawing classifier model it’s currently using, which could be the original drawing classifier model or a previously updated model.\n\n// Create an Update Task.\nguard let updateTask = try? MLUpdateTask(forModelAt: url,\n                                   trainingData: trainingData,\n                                   configuration: nil,\n                                   completionHandler: completionHandler)\n    else {\n        print(\"Could't create an MLUpdateTask.\")\n        return\n}\n\n\nImportant\n\nAn update task can only update a compiled model file—one whose name ends with .mlmodelc.\n\nRun the Update Task\n\nYou begin an update task by calling its resume() method.\n\nupdateTask.resume()\n\n\nCore ML updates the model on a separate thread and calls your completion handler when it finishes the update process.\n\nSave the Updated Model\n\nUse your completion handler to save the updated model in the MLUpdateContext to disk. The sample saves the updated model to the file system by first writing the model to a temporary location. Next, the sample moves the updated model to a permanent location, replacing any previously saved updated model.\n\nlet updatedModel = updateContext.model\nlet fileManager = FileManager.default\ndo {\n    // Create a directory for the updated model.\n    try fileManager.createDirectory(at: tempUpdatedModelURL,\n                                    withIntermediateDirectories: true,\n                                    attributes: nil)\n    \n    // Save the updated model to temporary filename.\n    try updatedModel.write(to: tempUpdatedModelURL)\n    \n    // Replace any previously updated model with this one.\n    _ = try fileManager.replaceItemAt(updatedModelURL,\n                                      withItemAt: tempUpdatedModelURL)\n    \n    print(\"Updated model saved to:\\n\\t\\(updatedModelURL)\")\n} catch let error {\n    print(\"Could not save updated model to the file system: \\(error)\")\n    return\n}\n\n\nLoad the Updated Model\n\nUse your updated model by loading it with the model’s init(contentsOf:) initializer. The sample loads a new instance of UpdatableDrawingClassifier with the URL of the updated model file the app saved in the previous step.\n\nguard FileManager.default.fileExists(atPath: updatedModelURL.path) else {\n    // The updated model is not present at its designated path.\n    return\n}\n\n\n// Create an instance of the updated model.\nguard let model = try? UpdatableDrawingClassifier(contentsOf: updatedModelURL) else {\n    return\n}\n\n\n// Use this updated model to make predictions in the future.\nupdatedDrawingClassifier = model\n\n\nSee Also\nOn-Device Model Updates\nclass MLTask\nAn abstract base class for machine learning tasks.\nclass MLUpdateTask\nA task that updates a model with additional training data."
  },
  {
    "title": "MLTask | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mltask",
    "html": "Overview\n\nYou don’t create use this class directly. Instead, use a class that inherits from this one, such as MLUpdateTask.\n\nTopics\nIdentifying a Task\nvar taskIdentifier: String\nA unique name of the task to distinguish it from all other tasks at runtime.\nStarting and Stopping a Task\nfunc resume()\nBegins or resumes a machine learning task.\nfunc cancel()\nCancels a machine learning task before it completes.\nChecking the State of a Task\nvar state: MLTaskState\nThe current state of the machine learning task.\nenum MLTaskState\nThe state of a machine learning task.\nvar error: Error?\nThe underlying error if the task is in a failed state.\nRelationships\nInherits From\nNSObject\nSee Also\nOn-Device Model Updates\nPersonalizing a Model with On-Device Updates\nModify an updatable Core ML model by running an update task with labeled data.\nclass MLUpdateTask\nA task that updates a model with additional training data."
  },
  {
    "title": "init(imageAt:orientation:pixelsWide:pixelsHigh:pixelFormatType:options:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlfeaturevalue/3362525-init",
    "html": "Parameters\nurl\n\nA URL to an image.\n\norientation\n\nA CGImagePropertyOrientation instance.\n\npixelsWide\n\nThe image’s width in pixels.\n\npixelsHigh\n\nThe image’s height in pixels.\n\npixelFormatType\n\nThe image’s pixel format (see Pixel Format Identifiers).\n\noptions\n\nA dictionary of VNImageCropAndScaleOption values, each keyed by MLFeatureValue.ImageOption.\n\nSee Also\nCreating Image Feature Values\ninit(pixelBuffer: CVPixelBuffer)\nCreates a feature value that contains an image from a pixel buffer.\ninit(cgImage: CGImage, pixelsWide: Int, pixelsHigh: Int, pixelFormatType: OSType, options: [MLFeatureValue.ImageOption : Any]?)\nCreates a feature value that contains an image defined by a core graphics image and its size and pixel format.\ninit(cgImage: CGImage, orientation: CGImagePropertyOrientation, pixelsWide: Int, pixelsHigh: Int, pixelFormatType: OSType, options: [MLFeatureValue.ImageOption : Any]?)\nCreates a feature value that contains an image defined by a core graphics image and its orientation, size, and pixel format.\ninit(cgImage: CGImage, constraint: MLImageConstraint, options: [MLFeatureValue.ImageOption : Any]?)\nCreates a feature value that contains an image defined by a core graphics image and a constraint.\ninit(cgImage: CGImage, orientation: CGImagePropertyOrientation, constraint: MLImageConstraint, options: [MLFeatureValue.ImageOption : Any]?)\nCreates a feature value that contains an image defined by a core graphics image, an orientation, and a constraint.\ninit(imageAt: URL, pixelsWide: Int, pixelsHigh: Int, pixelFormatType: OSType, options: [MLFeatureValue.ImageOption : Any]?)\nCreates a feature value that contains an image defined by an image URL and the image’s size and pixel format.\ninit(imageAt: URL, constraint: MLImageConstraint, options: [MLFeatureValue.ImageOption : Any]?)\nCreates a feature value that contains an image defined by an image URL and a constraint.\ninit(imageAt: URL, orientation: CGImagePropertyOrientation, constraint: MLImageConstraint, options: [MLFeatureValue.ImageOption : Any]?)\nCreates a feature value that contains an image defined by an image URL, an orientation, and a constraint.\nclass MLImageConstraint\nThe width, height, and pixel format constraints of an image feature.\nstruct MLFeatureValue.ImageOption\nThe initializer options you use to crop and scale an image when creating an image feature value."
  },
  {
    "title": "init(cgImage:orientation:constraint:options:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlfeaturevalue/3362522-init",
    "html": "Parameters\ncgImage\n\nA CGImage instance.\n\norientation\n\nA CGImagePropertyOrientation instance.\n\nconstraint\n\nAn MLImageConstraint instance.\n\noptions\n\nA dictionary of VNImageCropAndScaleOption values, each keyed by MLFeatureValue.ImageOption.\n\nSee Also\nCreating Image Feature Values\ninit(pixelBuffer: CVPixelBuffer)\nCreates a feature value that contains an image from a pixel buffer.\ninit(cgImage: CGImage, pixelsWide: Int, pixelsHigh: Int, pixelFormatType: OSType, options: [MLFeatureValue.ImageOption : Any]?)\nCreates a feature value that contains an image defined by a core graphics image and its size and pixel format.\ninit(cgImage: CGImage, orientation: CGImagePropertyOrientation, pixelsWide: Int, pixelsHigh: Int, pixelFormatType: OSType, options: [MLFeatureValue.ImageOption : Any]?)\nCreates a feature value that contains an image defined by a core graphics image and its orientation, size, and pixel format.\ninit(cgImage: CGImage, constraint: MLImageConstraint, options: [MLFeatureValue.ImageOption : Any]?)\nCreates a feature value that contains an image defined by a core graphics image and a constraint.\ninit(imageAt: URL, pixelsWide: Int, pixelsHigh: Int, pixelFormatType: OSType, options: [MLFeatureValue.ImageOption : Any]?)\nCreates a feature value that contains an image defined by an image URL and the image’s size and pixel format.\ninit(imageAt: URL, orientation: CGImagePropertyOrientation, pixelsWide: Int, pixelsHigh: Int, pixelFormatType: OSType, options: [MLFeatureValue.ImageOption : Any]?)\nCreates a feature value that contains an image defined by an image URL and the image’s orientation, size, and pixel format.\ninit(imageAt: URL, constraint: MLImageConstraint, options: [MLFeatureValue.ImageOption : Any]?)\nCreates a feature value that contains an image defined by an image URL and a constraint.\ninit(imageAt: URL, orientation: CGImagePropertyOrientation, constraint: MLImageConstraint, options: [MLFeatureValue.ImageOption : Any]?)\nCreates a feature value that contains an image defined by an image URL, an orientation, and a constraint.\nclass MLImageConstraint\nThe width, height, and pixel format constraints of an image feature.\nstruct MLFeatureValue.ImageOption\nThe initializer options you use to crop and scale an image when creating an image feature value."
  },
  {
    "title": "init(cgImage:pixelsWide:pixelsHigh:pixelFormatType:options:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlfeaturevalue/3200161-init",
    "html": "Parameters\ncgImage\n\nA CGImage instance.\n\npixelsWide\n\nThe image’s width in pixels.\n\npixelsHigh\n\nThe image’s height in pixels.\n\npixelFormatType\n\nThe image’s pixel format (see Pixel Format Identifiers).\n\noptions\n\nA dictionary of VNImageCropAndScaleOption values, each keyed by MLFeatureValue.ImageOption.\n\nSee Also\nCreating Image Feature Values\ninit(pixelBuffer: CVPixelBuffer)\nCreates a feature value that contains an image from a pixel buffer.\ninit(cgImage: CGImage, orientation: CGImagePropertyOrientation, pixelsWide: Int, pixelsHigh: Int, pixelFormatType: OSType, options: [MLFeatureValue.ImageOption : Any]?)\nCreates a feature value that contains an image defined by a core graphics image and its orientation, size, and pixel format.\ninit(cgImage: CGImage, constraint: MLImageConstraint, options: [MLFeatureValue.ImageOption : Any]?)\nCreates a feature value that contains an image defined by a core graphics image and a constraint.\ninit(cgImage: CGImage, orientation: CGImagePropertyOrientation, constraint: MLImageConstraint, options: [MLFeatureValue.ImageOption : Any]?)\nCreates a feature value that contains an image defined by a core graphics image, an orientation, and a constraint.\ninit(imageAt: URL, pixelsWide: Int, pixelsHigh: Int, pixelFormatType: OSType, options: [MLFeatureValue.ImageOption : Any]?)\nCreates a feature value that contains an image defined by an image URL and the image’s size and pixel format.\ninit(imageAt: URL, orientation: CGImagePropertyOrientation, pixelsWide: Int, pixelsHigh: Int, pixelFormatType: OSType, options: [MLFeatureValue.ImageOption : Any]?)\nCreates a feature value that contains an image defined by an image URL and the image’s orientation, size, and pixel format.\ninit(imageAt: URL, constraint: MLImageConstraint, options: [MLFeatureValue.ImageOption : Any]?)\nCreates a feature value that contains an image defined by an image URL and a constraint.\ninit(imageAt: URL, orientation: CGImagePropertyOrientation, constraint: MLImageConstraint, options: [MLFeatureValue.ImageOption : Any]?)\nCreates a feature value that contains an image defined by an image URL, an orientation, and a constraint.\nclass MLImageConstraint\nThe width, height, and pixel format constraints of an image feature.\nstruct MLFeatureValue.ImageOption\nThe initializer options you use to crop and scale an image when creating an image feature value."
  },
  {
    "title": "init(imageAt:pixelsWide:pixelsHigh:pixelFormatType:options:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlfeaturevalue/3200163-init",
    "html": "Parameters\nurl\n\nA URL to an image.\n\npixelsWide\n\nThe image’s width in pixels.\n\npixelsHigh\n\nThe image’s height in pixels.\n\npixelFormatType\n\nThe image’s pixel format (see Pixel Format Identifiers).\n\noptions\n\nA dictionary of VNImageCropAndScaleOption values, each keyed by MLFeatureValue.ImageOption.\n\nSee Also\nCreating Image Feature Values\ninit(pixelBuffer: CVPixelBuffer)\nCreates a feature value that contains an image from a pixel buffer.\ninit(cgImage: CGImage, pixelsWide: Int, pixelsHigh: Int, pixelFormatType: OSType, options: [MLFeatureValue.ImageOption : Any]?)\nCreates a feature value that contains an image defined by a core graphics image and its size and pixel format.\ninit(cgImage: CGImage, orientation: CGImagePropertyOrientation, pixelsWide: Int, pixelsHigh: Int, pixelFormatType: OSType, options: [MLFeatureValue.ImageOption : Any]?)\nCreates a feature value that contains an image defined by a core graphics image and its orientation, size, and pixel format.\ninit(cgImage: CGImage, constraint: MLImageConstraint, options: [MLFeatureValue.ImageOption : Any]?)\nCreates a feature value that contains an image defined by a core graphics image and a constraint.\ninit(cgImage: CGImage, orientation: CGImagePropertyOrientation, constraint: MLImageConstraint, options: [MLFeatureValue.ImageOption : Any]?)\nCreates a feature value that contains an image defined by a core graphics image, an orientation, and a constraint.\ninit(imageAt: URL, orientation: CGImagePropertyOrientation, pixelsWide: Int, pixelsHigh: Int, pixelFormatType: OSType, options: [MLFeatureValue.ImageOption : Any]?)\nCreates a feature value that contains an image defined by an image URL and the image’s orientation, size, and pixel format.\ninit(imageAt: URL, constraint: MLImageConstraint, options: [MLFeatureValue.ImageOption : Any]?)\nCreates a feature value that contains an image defined by an image URL and a constraint.\ninit(imageAt: URL, orientation: CGImagePropertyOrientation, constraint: MLImageConstraint, options: [MLFeatureValue.ImageOption : Any]?)\nCreates a feature value that contains an image defined by an image URL, an orientation, and a constraint.\nclass MLImageConstraint\nThe width, height, and pixel format constraints of an image feature.\nstruct MLFeatureValue.ImageOption\nThe initializer options you use to crop and scale an image when creating an image feature value."
  },
  {
    "title": "init(cgImage:constraint:options:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlfeaturevalue/3200160-init",
    "html": "Parameters\ncgImage\n\nA CGImage instance.\n\nconstraint\n\nAn MLImageConstraint instance.\n\noptions\n\nA dictionary of VNImageCropAndScaleOption values, each keyed by MLFeatureValue.ImageOption.\n\nSee Also\nCreating Image Feature Values\ninit(pixelBuffer: CVPixelBuffer)\nCreates a feature value that contains an image from a pixel buffer.\ninit(cgImage: CGImage, pixelsWide: Int, pixelsHigh: Int, pixelFormatType: OSType, options: [MLFeatureValue.ImageOption : Any]?)\nCreates a feature value that contains an image defined by a core graphics image and its size and pixel format.\ninit(cgImage: CGImage, orientation: CGImagePropertyOrientation, pixelsWide: Int, pixelsHigh: Int, pixelFormatType: OSType, options: [MLFeatureValue.ImageOption : Any]?)\nCreates a feature value that contains an image defined by a core graphics image and its orientation, size, and pixel format.\ninit(cgImage: CGImage, orientation: CGImagePropertyOrientation, constraint: MLImageConstraint, options: [MLFeatureValue.ImageOption : Any]?)\nCreates a feature value that contains an image defined by a core graphics image, an orientation, and a constraint.\ninit(imageAt: URL, pixelsWide: Int, pixelsHigh: Int, pixelFormatType: OSType, options: [MLFeatureValue.ImageOption : Any]?)\nCreates a feature value that contains an image defined by an image URL and the image’s size and pixel format.\ninit(imageAt: URL, orientation: CGImagePropertyOrientation, pixelsWide: Int, pixelsHigh: Int, pixelFormatType: OSType, options: [MLFeatureValue.ImageOption : Any]?)\nCreates a feature value that contains an image defined by an image URL and the image’s orientation, size, and pixel format.\ninit(imageAt: URL, constraint: MLImageConstraint, options: [MLFeatureValue.ImageOption : Any]?)\nCreates a feature value that contains an image defined by an image URL and a constraint.\ninit(imageAt: URL, orientation: CGImagePropertyOrientation, constraint: MLImageConstraint, options: [MLFeatureValue.ImageOption : Any]?)\nCreates a feature value that contains an image defined by an image URL, an orientation, and a constraint.\nclass MLImageConstraint\nThe width, height, and pixel format constraints of an image feature.\nstruct MLFeatureValue.ImageOption\nThe initializer options you use to crop and scale an image when creating an image feature value."
  },
  {
    "title": "init(cgImage:orientation:pixelsWide:pixelsHigh:pixelFormatType:options:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlfeaturevalue/3362523-init",
    "html": "Parameters\ncgImage\n\nA CGImage instance.\n\norientation\n\nA CGImagePropertyOrientation instance.\n\npixelsWide\n\nThe image’s width in pixels.\n\npixelsHigh\n\nThe image’s height in pixels.\n\npixelFormatType\n\nThe image’s pixel format (see Pixel Format Identifiers).\n\noptions\n\nA dictionary of VNImageCropAndScaleOption values, each keyed by MLFeatureValue.ImageOption.\n\nSee Also\nCreating Image Feature Values\ninit(pixelBuffer: CVPixelBuffer)\nCreates a feature value that contains an image from a pixel buffer.\ninit(cgImage: CGImage, pixelsWide: Int, pixelsHigh: Int, pixelFormatType: OSType, options: [MLFeatureValue.ImageOption : Any]?)\nCreates a feature value that contains an image defined by a core graphics image and its size and pixel format.\ninit(cgImage: CGImage, constraint: MLImageConstraint, options: [MLFeatureValue.ImageOption : Any]?)\nCreates a feature value that contains an image defined by a core graphics image and a constraint.\ninit(cgImage: CGImage, orientation: CGImagePropertyOrientation, constraint: MLImageConstraint, options: [MLFeatureValue.ImageOption : Any]?)\nCreates a feature value that contains an image defined by a core graphics image, an orientation, and a constraint.\ninit(imageAt: URL, pixelsWide: Int, pixelsHigh: Int, pixelFormatType: OSType, options: [MLFeatureValue.ImageOption : Any]?)\nCreates a feature value that contains an image defined by an image URL and the image’s size and pixel format.\ninit(imageAt: URL, orientation: CGImagePropertyOrientation, pixelsWide: Int, pixelsHigh: Int, pixelFormatType: OSType, options: [MLFeatureValue.ImageOption : Any]?)\nCreates a feature value that contains an image defined by an image URL and the image’s orientation, size, and pixel format.\ninit(imageAt: URL, constraint: MLImageConstraint, options: [MLFeatureValue.ImageOption : Any]?)\nCreates a feature value that contains an image defined by an image URL and a constraint.\ninit(imageAt: URL, orientation: CGImagePropertyOrientation, constraint: MLImageConstraint, options: [MLFeatureValue.ImageOption : Any]?)\nCreates a feature value that contains an image defined by an image URL, an orientation, and a constraint.\nclass MLImageConstraint\nThe width, height, and pixel format constraints of an image feature.\nstruct MLFeatureValue.ImageOption\nThe initializer options you use to crop and scale an image when creating an image feature value."
  },
  {
    "title": "MLFeatureProvider | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlfeatureprovider",
    "html": "Overview\n\nUse MLFeatureProvider to customize the way your app gets data to and from your model when the model's dynamically generated interface doesn't meet your app's needs.\n\nConsider adopting this protocol in your data source if any of the following apply:\n\nYour data is collected asynchronously.\n\nUsing the autogenerated interface leads to copying excessive amounts of data.\n\nYour data source is otherwise complicated.\n\nThe interface is mainly an accessor for MLFeatureValue instances, making it straightforward to implement. Adopting this protocol allows you to integrate your data directly with MLModel, which means the model can query your data sources without constructing a separate input instance.\n\nTo customize your app's interaction with a model:\n\nAdopt the MLFeatureProvider protocol in a class or structure so that the model can query it for input feature values via featureValue(for:).\n\nPass your app's MLFeatureProvider to your MLModel with prediction(from:) or prediction(from:options:).\n\nUse the MLFeatureProvider returned from a prediction(from:) method to get the output feature values for that prediction.\n\nTopics\nAccessing Values\nfunc featureValue(for: String) -> MLFeatureValue?\nAccesses the feature value given the feature's name.\n\nRequired\n\nvar featureNames: Set<String>\nThe set of valid feature names.\n\nRequired\n\nRelationships\nConforming Types\nMLDictionaryFeatureProvider\nSee Also\nModel Inputs and Outputs\nMaking Predictions with a Sequence of Inputs\nIntegrate a recurrent neural network model to process sequences of inputs.\nclass MLFeatureValue\nA generic wrapper around an underlying value and the value’s type.\nclass MLDictionaryFeatureProvider\nA convenience wrapper for the given dictionary of data.\nprotocol MLBatchProvider\nAn interface that represents a collection of feature providers.\nclass MLArrayBatchProvider\nA convenience wrapper for batches of feature providers.\nclass MLModelAsset\nAn abstraction of a compiled Core ML model asset.\nRelated Documentation"
  },
  {
    "title": "MLCustomModel | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlcustommodel",
    "html": "Overview\n\nTo integrate your custom model with Core ML, adopt the MLCustomModel protocol in the implementation of your custom model. If you use a Swift class for your custom implementation, make it accessible to Core ML by using the @objc(name) attribute.\n\n@objc(MyCustomModel)\nclass MyCustomModel: NSObject, MLCustomModel {\n  ...\n}\n\n\nThis defines the Objective-C name for the class, which Core ML needs to access your custom class’s implementation.\n\nTopics\nCreating the Model\ninit(modelDescription: MLModelDescription, parameters: [String : Any])\nCreates a custom model with the given description and parameters.\n\nRequired\n\nMaking Predictions\nfunc prediction(from: MLFeatureProvider, options: MLPredictionOptions) -> MLFeatureProvider\nPredicts output values from the given input features.\n\nRequired\n\nfunc predictions(from: MLBatchProvider, options: MLPredictionOptions) -> MLBatchProvider\nPredicts output values from the given batch of input features."
  },
  {
    "title": "MLFeatureDescription | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlfeaturedescription",
    "html": "Overview\n\nIn Core ML, a feature is a single input or output of a model. A model can have any number of input features or output features. Each feature has a name and a value type, which are defined in the feature's MLFeatureDescription. Model authors use feature descriptions to help developers integrate their model properly. Each MLFeatureDescription instance has read-only properties that indicate the feature's name, its type, and whether it's optional.\n\nFor examples of features, see Integrating a Core ML Model into Your App. Note the three input features named solarPanels, greenhouses, and size, and the output feature is named price. All four features are of type Double.\n\nAn MLFeatureDescription may also include constraints, which specify the limitations of the model's input and output features. For each input feature, the constraints describe what values the model expects from your app. For each output feature, the constraints describe what values your app should expect from the model. You can also write code to inspect these descriptions before using the model in your app.\n\nTopics\nInspecting a Feature\nvar name: String\nThe name of this feature.\nvar type: MLFeatureType\nThe type of this feature.\nenum MLFeatureType\nThe possible types for feature values, input features, and output features.\nvar isOptional: Bool\nA Boolean value that indicates whether this feature is optional.\nChecking for Validity\nfunc isAllowedValue(MLFeatureValue) -> Bool\nChecks whether the model will accept an input feature value.\nAccessing Feature Constraints\nvar imageConstraint: MLImageConstraint?\nThe size and format constraints for an image feature.\nclass MLImageConstraint\nThe width, height, and pixel format constraints of an image feature.\nvar dictionaryConstraint: MLDictionaryConstraint?\nThe constraint for a dictionary feature.\nclass MLDictionaryConstraint\nThe constraint on the keys for a dictionary feature.\nvar multiArrayConstraint: MLMultiArrayConstraint?\nThe constraints on a multidimensional array feature.\nclass MLMultiArrayConstraint\nThe shape and data type constraints for a multidimensional array feature.\nvar sequenceConstraint: MLSequenceConstraint?\nThe constraints for a sequence feature.\nclass MLSequenceConstraint\nThe constraints for a sequence feature.\nRelationships\nInherits From\nNSObject\nConforms To\nNSCopying\nNSSecureCoding\nSee Also\nAccessing Feature Descriptions\nvar inputDescriptionsByName: [String : MLFeatureDescription]\nA dictionary of input feature descriptions, which the model keys by the input’s name.\nvar outputDescriptionsByName: [String : MLFeatureDescription]\nA dictionary of output feature descriptions, which the model keys by the output’s name."
  },
  {
    "title": "MLKey | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlkey",
    "html": "Overview\n\nYou don’t create use this class directly. Instead, use a class that inherits from this one, such as MLParameterKey or MLMetricKey.\n\nTopics\nRetrieving a Key’s Information\nvar name: String\nThe name of the machine learning key.\nvar scope: String?\nThe applicable scope of the machine learning key.\nRelationships\nInherits From\nNSObject\nConforms To\nNSCopying\nNSSecureCoding\nSee Also\nSupporting Types\nclass MLModelConfiguration\nThe settings for creating or updating a machine learning model."
  },
  {
    "title": "metadata | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlmodeldescription/2879386-metadata",
    "html": "Discussion\n\nUse the keys defined by MLModelMetadataKey to retrieve the dictionary’s entries.\n\nSee Also\nAccessing Metadata\nvar classLabels: [Any]?\nAn array of labels, which can be either strings or a numbers, for classifier models.\nstruct MLModelMetadataKey\nThe set of keys the model uses to store values in its metadata dictionary."
  },
  {
    "title": "parameterValue(for:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlmodel/3362526-parametervalue",
    "html": "Parameters\nkey\n\nThe key to a model parameter value.\n\nSee Also\nInspecting a Model\nstatic var availableComputeDevices: [MLComputeDevice]\nThe list of available compute devices that the model’s prediction methods use.\nvar configuration: MLModelConfiguration\nThe configuration of the model set during initialization.\nvar modelDescription: MLModelDescription\nModel information you use at runtime during development, which Xcode also displays in its Core ML model editor view.\nclass MLModelDescription\nInformation about a model, primarily the input and output format for each feature the model expects, and optional metadata.\nclass MLParameterKey\nThe keys for the parameter dictionary in a model configuration or a model update context."
  },
  {
    "title": "Reducing the Size of Your Core ML App | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/model_customization/reducing_the_size_of_your_core_ml_app",
    "html": "Overview\n\nBundling your machine learning model in your app is the easiest way to get started with Core ML. As models get more advanced, they can become large and take up significant storage space. For a neural-network based model, consider reducing its footprint by using a lower precision representation for its weight parameters. If your model isn’t a neural network that can use lower precision or you need to further reduce your app’s size, add functionality to download and compile your models on the user’s device instead of bundling the models with your app.\n\nConvert to a Lower Precision Model\n\nThe Core ML Tools provide utilities to convert a neural network model’s floating point weights from full-precision into half-precision values — reducing the number of bits used in the representation from 32 down to 16 — or lower precisions of 1 to 8 bits. For more information about using these utilities, see the Core ML Tools Neural Network Quantization documentation.\n\nDownload and Compile a Model\n\nAnother option to reduce the size of your app is to have the app download the model onto the user’s device and compile it in the background. For example, if users use only a subset of the models your app supports, you don’t need to bundle all the possible models with your app. Instead, the models can be downloaded later based on user behavior. See Downloading and Compiling a Model on the User’s Device."
  },
  {
    "title": "MLPredictionOptions | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlpredictionoptions",
    "html": "Topics\nGetting features\nvar outputBackings: [String : Any]\nA dictionary of feature names and client-allocated buffers.\nRestricting computation to the CPU\nvar usesCPUOnly: Bool\nA Boolean value that indicates whether a prediction is computed using only the CPU.\nDeprecated\nRelationships\nInherits From\nNSObject\nSee Also\nMaking Predictions\nfunc prediction(from: MLFeatureProvider) -> MLFeatureProvider\nGenerates a prediction from the feature values within the input feature provider.\nfunc prediction(from: MLFeatureProvider, options: MLPredictionOptions) -> MLFeatureProvider\nGenerates a prediction from the feature values within the input feature provider using the prediction options.\nfunc prediction(from: MLFeatureProvider, options: MLPredictionOptions) -> MLFeatureProvider\nGenerates a prediction asynchronously from the feature values within the input feature provider using the prediction options.\nfunc predictions(fromBatch: MLBatchProvider) -> MLBatchProvider\nGenerates predictions for each input feature provider within the batch provider.\nfunc predictions(from: MLBatchProvider, options: MLPredictionOptions) -> MLBatchProvider\nGenerates a prediction for each input feature provider within the batch provider using the prediction options."
  },
  {
    "title": "MLModelError | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlmodelerror",
    "html": "Topics\nError Codes\nstatic var featureType: MLModelError.Code\nAn error code for problems related to model features.\nstatic var parameters: MLModelError.Code\nAn error code for problems related to model parameters.\nstatic var modelCollection: MLModelError.Code\nAn error code for problems related to retrieving a model collection from the deployment system.\nstatic var modelDecryptionKeyFetch: MLModelError.Code\nAn error code for problems related to retrieving a model’s decryption key.\nstatic var modelDecryption: MLModelError.Code\nAn error code for problems related to decrypting models.\nstatic var update: MLModelError.Code\nAn error code for problems related to on-device model updates.\nstatic var customLayer: MLModelError.Code\nAn error code for problems related to custom layers.\nstatic var customModel: MLModelError.Code\nAn error code for problems related to custom models.\nstatic var io: MLModelError.Code\nAn error code for problems related to the system’s input or output.\nstatic var predictionCancelled: MLModelError.Code\nAn error code for problems related to cancelling the prediction before it completes.\nstatic var generic: MLModelError.Code\nAn error code for runtime issues that don’t apply to the other error codes.\nenum MLModelError.Code\nThe categories of model-specific errors.\nError Details\nvar errorCode: Int\nAn integer value that represents an error case.\nvar errorUserInfo: [String : Any]\nA dictionary of additional information about the error.\nvar localizedDescription: String\nThe localized string that describes the error.\nError Domain\nlet MLModelErrorDomain: String\nThe domain for Core ML errors.\nstatic var errorDomain: String\nThe current model error domain.\nProtocol Support\ninit(Code, userInfo: [String : Any])\nCreates a model error with an error code.\nvar code: Code\nAn integer value that represents the code.\nvar userInfo: [String : Any]\nA dictionary of additional information.\nvar hashValue: Int\nThe hashed value of the error.\nfunc hash(into: inout Hasher)\nHashes the essential components of the error by feeding them into a hasher.\nstatic func == (MLModelError, MLModelError) -> Bool\nReturns a Boolean value indicating whether the two values are equal.\nstatic func != (MLModelError, MLModelError) -> Bool\nReturns a Boolean value indicating whether the two values are unequal."
  },
  {
    "title": "MLComputeDevice.cpu(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlcomputedevice/cpu",
    "html": "See Also\nDevice Types\ncase gpu(MLGPUComputeDevice)\nA device that represents a GPU compute device.\ncase neuralEngine(MLNeuralEngineComputeDevice)\nA device that represents a Neural Engine compute device."
  },
  {
    "title": "MLNeuralEngineComputeDevice | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlneuralenginecomputedevice",
    "html": "Topics\nGetting the Total Core Count\nvar totalCoreCount: Int\nThe total number of cores in the Neural Engine.\nRelationships\nInherits From\nNSObject\nConforms To\nMLComputeDeviceProtocol\nSendable\nSee Also\nCompute Devices\nenum MLComputeDevice\nCompute devices for framework operations.\nclass MLCPUComputeDevice\nAn object that represents a CPU compute device.\nclass MLGPUComputeDevice\nAn object that represents a GPU compute device.\nprotocol MLComputeDeviceProtocol\nAn interface that represents a compute device type."
  },
  {
    "title": "MLGPUComputeDevice | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlgpucomputedevice",
    "html": "Topics\nGetting The Metal Device\nvar metalDevice: MTLDevice!\nThe device that represents the underlying metal device.\nRelationships\nInherits From\nNSObject\nConforms To\nMLComputeDeviceProtocol\nSendable\nSee Also\nCompute Devices\nenum MLComputeDevice\nCompute devices for framework operations.\nclass MLCPUComputeDevice\nAn object that represents a CPU compute device.\nclass MLNeuralEngineComputeDevice\nAn object that represents a Neural Engine compute device.\nprotocol MLComputeDeviceProtocol\nAn interface that represents a compute device type."
  },
  {
    "title": "MLComputeDeviceProtocol | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlcomputedeviceprotocol",
    "html": "Relationships\nInherits From\nNSObjectProtocol\nConforming Types\nMLCPUComputeDevice\nMLGPUComputeDevice\nMLNeuralEngineComputeDevice\nSee Also\nCompute Devices\nenum MLComputeDevice\nCompute devices for framework operations.\nclass MLCPUComputeDevice\nAn object that represents a CPU compute device.\nclass MLGPUComputeDevice\nAn object that represents a GPU compute device.\nclass MLNeuralEngineComputeDevice\nAn object that represents a Neural Engine compute device."
  },
  {
    "title": "load(contentsOf:configuration:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlmodel/3821241-load",
    "html": "Parameters\nurl\n\nThe URL of the compiled model asset derived from in-memory or on-disk Core ML model.\n\nconfiguration\n\nThe model configuration that hold options for loading the model.\n\nReturn Value\n\nThe loaded model, if successful; otherwise, nil.\n\nSee Also\nLoading a Model\nclass func load(MLModelAsset, configuration: MLModelConfiguration, completionHandler: (MLModel?, Error?) -> Void)\nConstruct a model asynchronously from a compiled model asset.\nclass func load(contentsOf: URL, configuration: MLModelConfiguration, completionHandler: (Result<MLModel, Error>) -> Void)\nCreates a Core ML model instance asynchronously from a compiled model file, a custom configuration, and a completion handler.\ninit(contentsOf: URL)\nCreates a Core ML model instance from a compiled model file.\ninit(contentsOf: URL, configuration: MLModelConfiguration)\nCreates a Core ML model instance from a compiled model file and a custom configuration."
  },
  {
    "title": "MLModelCollection | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlmodelcollection",
    "html": "Deprecated\n\nUse Background Assets or URLSession instead.\n\nOverview\n\nUse a model collection to access the models from a Core ML Model Deployment. For example, you can use a model collection to replace one or more of your app’s built-in models with a newer version.\n\nTo access the newest model collection from a deployment, call the beginAccessing(identifier:completionHandler:) type method. Your app can also get a notification when Core ML receives an update to a model collection (see didChangeNotification).\n\nTopics\nAccessing a Model Collection\nclass func beginAccessing(identifier: String, completionHandler: (Result<MLModelCollection, Error>) -> Void) -> Progress\nRequests access to a model collection.\nclass func endAccessing(identifier: String, completionHandler: (Result<Void, Error>) -> Void)\nTerminates access to a model collection.\nIdentifying a Model Collection\nvar identifier: String\nThe name of the model collection, unique to the development team.\nvar deploymentID: String\nThe unique identifier of the model collection’s deployment.\nRetreiving Models from a Collection\nvar entries: [String : MLModelCollection.Entry]\nA dictionary of model entries keyed to the models’ identifiers.\nclass MLModelCollection.Entry\nA model and its identifier within a model collection.\nRegistering for Model Collection Updates\nclass let didChangeNotification: NSNotification.Name\nThe notification the framework sends when it receives an update to a model collection.\nRelationships\nInherits From\nNSObject"
  },
  {
    "title": "!=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlcomputedevice/4134991",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nSee Also\nComparing Devices\nstatic func == (MLComputeDevice, MLComputeDevice) -> Bool\nReturns a Boolean value that indicates whether two values are equal."
  },
  {
    "title": "Encrypting a Model in Your App | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/encrypting_a_model_in_your_app",
    "html": "Overview\n\nTell Xcode to encrypt your model as it compiles your app by adding a compiler flag to your build target.\n\nAdd a Compiler Flag\n\nIn Xcode, navigate to your project’s target and open its Build Phases tab. Expand the Compile Sources section and select the model you want Xcode to encrypt at compile time. Open the model’s compiler flags editor by double-clicking the model’s entry.\n\nIn the editor, add:\n\nThe encryption flag “--encrypt”\n\nA space character\n\nThe absolute path to the model’s encryption key file you created (see Generating a Model Encryption Key), between quotation marks\n\nPress the Return key or click outside the editor to close it.\n\nLoad the Model\n\nAt runtime, you load the encrypted model the same way you load any other built-in model by using its load(completionHandler:completionHandler:) type method. This method behaves similarly to the MLModel type method load(contentsOf:configuration:completionHandler:) and creates an instance of the model using the convenience class that Xcode generates.\n\nSee Also\nModel Encryption\nGenerating a Model Encryption Key\nCreate a model encryption key to encrypt a compiled model or model archive."
  },
  {
    "title": "Model Integration Samples | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/model_integration_samples",
    "html": "Overview\n\nUse the provided Core ML sample code projects to learn how to classify numeric values, images, and text within applications. For example, you can detect poses of the human body, classify a group of images, and locate answers to questions in a text document.\n\nTopics\nTabular Data Models\nIntegrating a Core ML Model into Your App\nAdd a simple model to an app, pass input data to the model, and process the model’s predictions.\nImage Classification Models\nClassifying Images with Vision and Core ML\nCrop and scale photos using the Vision framework and classify them with a Core ML model.\nDetecting human body poses in an image\nLocate people and the stance of their bodies by analyzing an image with a PoseNet model.\nUnderstanding a Dice Roll with Vision and Object Detection\nDetect dice position and values shown in a camera frame, and determine the end of a roll by leveraging a dice detection model.\nText Classification Models\nFinding answers to questions in a text document\nLocate relevant passages in a document by asking the Bidirectional Encoder Representations from Transformers (BERT) model a question.\nSee Also\nApp Integration\nDownloading and Compiling a Model on the User’s Device\nInstall Core ML models on the user’s device dynamically at runtime."
  },
  {
    "title": "Downloading and Compiling a Model on the User’s Device | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/downloading_and_compiling_a_model_on_the_user_s_device",
    "html": "Overview\n\nDownload and compile models within your app as an alternative to bundling with the app. Scenarios where this is a practical approach include:\n\nReducing the app’s download size of your app on the App Store\n\nDetermining the right models for the user after installation based on their location, specific interests, and A/B testing\n\nProviding model updates over the network\n\nDownload and Compile the Model in the Background\n\nDownload the model definition file (ending in .mlmodel) onto the user’s device by using URLSession, CloudKit, or another networking toolkit. Then compile the model definition by calling compileModel(at:).\n\nlet compiledModelURL = try MLModel.compileModel(at: modelDescriptionURL)\n\n\nThis creates a new, compiled model file with the same name as the model description but ending in .mlmodelc. Create a new MLModel instance by passing the compiled model URL to its initializer.\n\nlet model = try MLModel(contentsOf: compiledModelURL)\n\n\nModel instances you create from model files you’ve downloaded have the same capabilities as those you create from model files that you bundle with your app.\n\nSave Reusable Models to a Permanent Location\n\nMLModel saves models it compiles to a temporary location. If your app can reuse the model later, reduce your resource consumption by saving the compiled model to a permanent location.\n\nBuild the URL to a permanent location that your app can access in the future, such as Application Support.\n\nlet fileManager = FileManager.default\nlet appSupportURL = fileManager.urls(for: .applicationSupportDirectory,\n                                     in: .userDomainMask).first!\n\n\nCreate the URL for the permanent compiled model file.\n\nlet compiledModelName = compiledModelURL.lastPathComponentlet\npermanentURL = appSupportURL.appendingPathComponent(compiledModelName)\n\n\nMove or copy the file to its permanent location.\n\n// Copy the file to the permanent location, replacing it if necessary.\n_ = try fileManager.replaceItemAt(permanentURL,\n                                  withItemAt: compiledModelURL)\n\n\n\n\nImportant\n\nYou should consider the user’s iCloud Backup size when saving large, compiled Core ML models. You can store models in the app’s container using /tmp and /Library/Caches directories, which contain purgeable data that isn’t backed up. When the models aren’t purgeable, you can exclude them from backup by setting the isExcludedFromBackup resource value to true. To learn more about excluding files from iCloud Backup, see Optimizing Your App’s Data for iCloud Backup.\n\nSee Also\nApp Integration\nModel Integration Samples\nIntegrate tabluar, image, and text classifcation models into your app.\nRelated Documentation\nclass func compileModel(at: URL) -> URL\nCompiles a model on the device to update the model in your app."
  },
  {
    "title": "MLModelConfiguration | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlmodelconfiguration",
    "html": "Overview\n\nUse a model configuration to:\n\nSet or override model parameters.\n\nDesignate which device the model uses to make predictions, such as a GPU.\n\nRestrict the model to use a specific computational device category, such as a CPU.\n\nYou typically use a model configuration instance to configure an MLModel instance as you create it with init(contentsOf:configuration:) or create an MLUpdateTask. See Personalizing a Model with On-Device Updates.\n\nConfigure your model parameters by setting values for each relevant MLParameterKey in the parameters property.\n\nTopics\nConfiguring Model Parameters\nvar modelDisplayName: String?\nA human readable name of a model for display purposes.\nvar parameters: [MLParameterKey : Any]?\nA dictionary of configuration settings your app can override when loading a model.\nclass MLParameterKey\nThe keys for the parameter dictionary in a model configuration or a model update context.\nConfiguring GPU Usage\nvar preferredMetalDevice: MTLDevice?\nThe metal device you prefer this model use to make predictions (inference) and update the model.\nvar allowLowPrecisionAccumulationOnGPU: Bool\nA Boolean value that determines whether to allow low-precision accumulation on a GPU.\nAllowing Access to Processing Units\nvar computeUnits: MLComputeUnits\nThe processing unit or units the model uses to make predictions.\nenum MLComputeUnits\nThe set of processing-unit configurations the model can use to make predictions.\nRelationships\nInherits From\nNSObject\nConforms To\nNSCopying\nNSSecureCoding\nSee Also\nSupporting Types\nclass MLKey\nAn abstract base class for machine learning key types."
  },
  {
    "title": "MLUpdateContext | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlupdatecontext",
    "html": "Topics\nGetting the Update Context\nvar event: MLUpdateProgressEvent\nThe event type that triggered an update task to notify your app’s completion and update progress handlers.\nstruct MLUpdateProgressEvent\nA type of event during a model update task.\nvar task: MLUpdateTask\nThe update task that generated the update context.\nvar parameters: [MLParameterKey : Any]\nThe parameters for the update task.\nclass MLParameterKey\nThe keys for the parameter dictionary in a model configuration or a model update context.\nEvaluating the Update\nvar metrics: [MLMetricKey : Any]\nThe training metrics of the model for the update task, contained in a dictionary.\nclass MLMetricKey\nA key for the metrics dictionary in an update context.\nSaving an Updated Model\nvar model: MLModel & MLWritable\nThe underlying Core ML model stored in memory.\nprotocol MLWritable\nA set of methods that saves a machine learning type to the file system.\nRelationships\nInherits From\nNSObject\nSee Also\nCreating an Update Task\ninit(forModelAt: URL, trainingData: MLBatchProvider, completionHandler: (MLUpdateContext) -> Void)\nCreates a task that updates the model at the URL with the training data, and calls the completion handler when the update completes.\ninit(forModelAt: URL, trainingData: MLBatchProvider, progressHandlers: MLUpdateProgressHandlers)\nCreates a task that updates the model at the URL with the training data, and calls the progress handlers during and after the update.\ninit(forModelAt: URL, trainingData: MLBatchProvider, configuration: MLModelConfiguration?, completionHandler: (MLUpdateContext) -> Void)\nCreates a task that updates the model at the URL with the training data and configuration, and calls the completion handler when the update completes.\ninit(forModelAt: URL, trainingData: MLBatchProvider, configuration: MLModelConfiguration?, progressHandlers: MLUpdateProgressHandlers)\nCreates a task that updates the model at the URL with the training data and configuration, and calls the progress handlers during and after the update.\nprotocol MLBatchProvider\nAn interface that represents a collection of feature providers.\nclass MLModelConfiguration\nThe settings for creating or updating a machine learning model.\nclass MLUpdateProgressHandlers\nA collection of closures an update task uses to notify your app of its progress."
  },
  {
    "title": "init(forModelAt:trainingData:completionHandler:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlupdatetask/3547162-init",
    "html": "Parameters\nmodelURL\n\nThe location in the file system of a model file (ModelName.mlmodelc).\n\ntrainingData\n\nThe update data for the model, contained in a batch provider.\n\ncompletionHandler\n\nThe closure the task calls when it finishes.\n\nSee Also\nCreating an Update Task\ninit(forModelAt: URL, trainingData: MLBatchProvider, progressHandlers: MLUpdateProgressHandlers)\nCreates a task that updates the model at the URL with the training data, and calls the progress handlers during and after the update.\ninit(forModelAt: URL, trainingData: MLBatchProvider, configuration: MLModelConfiguration?, completionHandler: (MLUpdateContext) -> Void)\nCreates a task that updates the model at the URL with the training data and configuration, and calls the completion handler when the update completes.\ninit(forModelAt: URL, trainingData: MLBatchProvider, configuration: MLModelConfiguration?, progressHandlers: MLUpdateProgressHandlers)\nCreates a task that updates the model at the URL with the training data and configuration, and calls the progress handlers during and after the update.\nprotocol MLBatchProvider\nAn interface that represents a collection of feature providers.\nclass MLModelConfiguration\nThe settings for creating or updating a machine learning model.\nclass MLUpdateContext\nThe context an update task provides to your app’s completion and update progress handlers.\nclass MLUpdateProgressHandlers\nA collection of closures an update task uses to notify your app of its progress."
  },
  {
    "title": "MLFeatureValue | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlfeaturevalue",
    "html": "Overview\n\nA Core ML feature value wraps an underlying value and bundles it with that value’s type, which is one of the types that MLFeatureType defines. Apps typically access feature values indirectly by using the methods in the wrapper class Xcode automatically generates for Core ML model files.\n\nIf your app accesses an MLModel directly, it must create and consume MLFeatureProvider instances. For each prediction, Core ML accepts a feature provider for its inputs, and generates a separate feature provider for its outputs. The input feature provider contains one MLFeatureValue instance per input, and the output feature provider contains one per output. See MLFeatureDescription for more information about the model input and output features.\n\nTopics\nCreating Numeric Feature Values\ninit(int64: Int64)\nCreates a feature value that contains an integer.\ninit(double: Double)\nCreates a feature value that contains a double.\nCreating String Feature Values\ninit(string: String)\nCreates a feature value that contains a string.\nCreating Multidimensional Feature Values\ninit(multiArray: MLMultiArray)\nCreates a feature value that contains a multidimensional array.\ninit<Scalar>(shapedArray: MLShapedArray<Scalar>)\nCreates a feature value that contains a shaped array.\nCreating Collection Feature Values\ninit(dictionary: [AnyHashable : NSNumber])\nCreates a feature value that contains a dictionary of numbers.\ninit(sequence: MLSequence)\nCreates a feature value that contains a sequence.\nCreating Image Feature Values\ninit(pixelBuffer: CVPixelBuffer)\nCreates a feature value that contains an image from a pixel buffer.\ninit(cgImage: CGImage, pixelsWide: Int, pixelsHigh: Int, pixelFormatType: OSType, options: [MLFeatureValue.ImageOption : Any]?)\nCreates a feature value that contains an image defined by a core graphics image and its size and pixel format.\ninit(cgImage: CGImage, orientation: CGImagePropertyOrientation, pixelsWide: Int, pixelsHigh: Int, pixelFormatType: OSType, options: [MLFeatureValue.ImageOption : Any]?)\nCreates a feature value that contains an image defined by a core graphics image and its orientation, size, and pixel format.\ninit(cgImage: CGImage, constraint: MLImageConstraint, options: [MLFeatureValue.ImageOption : Any]?)\nCreates a feature value that contains an image defined by a core graphics image and a constraint.\ninit(cgImage: CGImage, orientation: CGImagePropertyOrientation, constraint: MLImageConstraint, options: [MLFeatureValue.ImageOption : Any]?)\nCreates a feature value that contains an image defined by a core graphics image, an orientation, and a constraint.\ninit(imageAt: URL, pixelsWide: Int, pixelsHigh: Int, pixelFormatType: OSType, options: [MLFeatureValue.ImageOption : Any]?)\nCreates a feature value that contains an image defined by an image URL and the image’s size and pixel format.\ninit(imageAt: URL, orientation: CGImagePropertyOrientation, pixelsWide: Int, pixelsHigh: Int, pixelFormatType: OSType, options: [MLFeatureValue.ImageOption : Any]?)\nCreates a feature value that contains an image defined by an image URL and the image’s orientation, size, and pixel format.\ninit(imageAt: URL, constraint: MLImageConstraint, options: [MLFeatureValue.ImageOption : Any]?)\nCreates a feature value that contains an image defined by an image URL and a constraint.\ninit(imageAt: URL, orientation: CGImagePropertyOrientation, constraint: MLImageConstraint, options: [MLFeatureValue.ImageOption : Any]?)\nCreates a feature value that contains an image defined by an image URL, an orientation, and a constraint.\nclass MLImageConstraint\nThe width, height, and pixel format constraints of an image feature.\nstruct MLFeatureValue.ImageOption\nThe initializer options you use to crop and scale an image when creating an image feature value.\nCreating Undefined Feature Values\ninit(undefined: MLFeatureType)\nCreates a feature value with a type that represents an undefined or missing value.\nAccessing the Feature’s Type\nvar type: MLFeatureType\nThe type of the feature value.\nAccessing the Feature’s Value\nvar isUndefined: Bool\nA Boolean value that indicates whether the feature value is undefined or missing.\nvar int64Value: Int64\nThe underlying integer of the feature value.\nvar doubleValue: Double\nThe underlying double of the feature value.\nvar stringValue: String\nThe underlying string of the feature value.\nvar imageBufferValue: CVPixelBuffer?\nThe underlying image of the feature value as a pixel buffer.\nfunc shapedArrayValue<Scalar>(of: Scalar.Type) -> MLShapedArray<Scalar>?\nReturns the underlying shaped array of the feature value.\nvar multiArrayValue: MLMultiArray?\nThe underlying multiarray of the feature value.\nvar sequenceValue: MLSequence?\nThe underlying sequence of the feature value.\nvar dictionaryValue: [AnyHashable : NSNumber]\nThe underlying dictionary of the feature value.\nComparing Feature Values\nfunc isEqual(to: MLFeatureValue) -> Bool\nReturns a Boolean value that indicates whether a feature value is equal to another.\nSupporting Types\nenum MLFeatureType\nThe possible types for feature values, input features, and output features.\nstruct MLShapedArray\nA machine learning collection type that stores scalar values in a multidimensional array.\nprotocol MLShapedArrayProtocol\nAn interface that defines a shaped array type.\nclass MLMultiArray\nA machine learning collection type that stores numeric values in an array with multiple dimensions.\nclass MLSequence\nA machine learning collection type that stores a series of strings or integers.\nRelationships\nInherits From\nNSObject\nConforms To\nNSCopying\nNSSecureCoding\nSee Also\nModel Inputs and Outputs\nMaking Predictions with a Sequence of Inputs\nIntegrate a recurrent neural network model to process sequences of inputs.\nprotocol MLFeatureProvider\nAn interface that represents a collection of values for either a model's input or its output.\nclass MLDictionaryFeatureProvider\nA convenience wrapper for the given dictionary of data.\nprotocol MLBatchProvider\nAn interface that represents a collection of feature providers.\nclass MLArrayBatchProvider\nA convenience wrapper for batches of feature providers.\nclass MLModelAsset\nAn abstraction of a compiled Core ML model asset.\nRelated Documentation"
  },
  {
    "title": "Model Personalization | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/model_personalization",
    "html": "Overview\n\nOn-device model updates provide your app the flexibility to personalize a user’s experience. For example, ordering a mocha at your favorite coffee shop every day increases a model’s ability to recommend that drink on subsequent visits. With the Core ML framework, you can adapt to incoming data with an updatable model at runtime on the user’s device.\n\nTopics\nOn-Device Model Updates\nclass MLTask\nAn abstract base class for machine learning tasks.\nPersonalizing a Model with On-Device Updates\nModify an updatable Core ML model by running an update task with labeled data.\nclass MLUpdateTask\nA task that updates a model with additional training data.\nSee Also\nCore ML Models\nGetting a Core ML Model\nObtain a Core ML model to use in your app.\nUpdating a Model File to a Model Package\nConvert a Core ML model file into a model package in Xcode.\nIntegrating a Core ML Model into Your App\nAdd a simple model to an app, pass input data to the model, and process the model’s predictions.\nclass MLModel\nAn encapsulation of all the details of your machine learning model.\nModel Customization\nExpand and modify your model with new layers."
  },
  {
    "title": "Making Predictions with a Sequence of Inputs | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/making_predictions_with_a_sequence_of_inputs",
    "html": "Overview\n\nSome machine learning problems require more than a single set of inputs and need to process a sequence of inputs over time. Neural network models can process a sequence of inputs, but require some state of the neural network to be maintained between inputs. Core ML provides a straightforward way to maintain the state of the network and process a sequence of inputs.\n\nUnderstand the Neural Network Workflow\n\nProcessing natural language is a difficult task for machine learning models because the number of possible sentences is infinite, making it impossible to encode all the inputs to the model. A common approach to reducing the number of possible inputs is to use letters or words as the input to the model, instead of processing the entire sentence as a single input. However, the model then needs a way to maintain state to \"remember\" what letters or words it has been presented previously in the sequence.\n\nConsider a neural network model trained to generate the Shakespeare play Romeo and Juliet. The neural network encodes the relationship between words and their neighboring words, without using explicit rules. In the popular line, \"O, Romeo, Romeo, wherefore art thou Romeo?\" the word Romeo appears three times, but each occurrence has a different word following it. The model needs a way to differentiate between the uses. Recurrent neural networks are a class of neural networks that address this problem by using the state of the model after processing each word as additional input when processing a word.\n\nFigure 1 The inputs and outputs of a recurrent neural network over three input words\n\nFigure 1 shows an example workflow of a network that has learned Romeo and Juliet. To start the phrase, \"O\" and a nil state are provided as input. The next word is predicted, and the network also generates a representation of its state for the input \"O\", referred to as f(\"O\"). The next input word \"Romeo\" is combined with the previous state, f(\"O\"), to create the next input. Given that input, the model again outputs \"Romeo\" with high probability.\n\nThe next input word, \"Romeo\", is identical to the previous input word. However, the state input is different. The state input is now f(\"O\", \"Romeo\"). The different state allows the network to output the prediction \"wherefore\" even though the previous input words were identical.\n\nExpose the State of the Model\n\nAdd a recurrent neural network based model to your project in Xcode to see the state of the neural network exposed as input and output features.\n\nFigure 2 An example recurrent neural network that generates the text of Romeo and Juliet\n\nFigure 2 shows the view in Xcode for the ShakespeareLanguageModel that has a recurrent neural network layer, with its state input and output features listed. Other recurrent neural networks, like Long Short-Term Memory and Gated Recurrent networks, create input and output features automatically.\n\nThis network takes two inputs: the input word and the state input, which is optional. The word is a String and the state, named stateIn, is a one dimensional MLMultiArray of 512 Double values. The state input is optional because the beginning of a sequence has no prior state.\n\nThere are three outputs of the network: the most probable next word, a Dictionary of possible next words paired with their probabilities, and a one dimensional MLMultiArray of 512 Double values, named stateOut, that represent the network's state after processing the input.\n\nThe MLMultiArray output represents the state of the network, which is the level of activation of its internal nodes. In order for the network to \"remember\" what input sequence has been processed, the previous output state must accompany the next input.\n\nIn practice, you may come across layers with default state feature names. For example, Long Short-Term Memory networks will have default state parameters named lstm_h_in and lstm_c_in for inputs and lstm_h_out and lsth_c_out for outputs. The \"h\" refers to the hidden state and the \"c\" refers to the cell state used by an LSTM network. These output states must be carried over as input states for the network to function properly across the sequence of inputs.\n\nStart a Sequence of Inputs\n\nThis network was trained to generate the rest of a sentence from the play, given two prompt words from a sentence. Begin processing a sequence of inputs with this model by passing in the first word from the prompt and nil as the previous state.\n\nListing 1 Initializing a network by using nil as the first state\n// Create the prompt to use as an example\nlet prompt = [\"O\", \"Romeo\"]\n// Use the generated input API to create the network's input, with no state\nlet modelInput = ShakespeareLanguageModelInput(previousWord: prompt[0], stateIn: nil)\n// Predict the 2nd word and generate a model state for \"O\"\nvar modelOutput = try model.prediction(input: modelInput)\n\n\nIn this sample code the ShakespeareLanguageModelInput class, generated by Xcode, is used to store the two inputs for the prediction call.\n\nMake Predictions Based on Previous State\n\nCreate an input using the second word from the prompt and the output state from the prediction as the input state. Use that input with the model to generate a prediction for the third word of the sentence.\n\nListing 2 Predicting the third word by using the second word and the state after processing the first word\n// Set up the input for the second word (ignoring the predicted words)\nmodelInput.previousWord = prompt[1]\n// Use the output model state as the input model state for the next word\nmodelInput.stateIn = modelOutput.stateOut\n// Predict the third word\nmodelOutput = try model.prediction(input: modelInput)\n// The third word is now in modelOutput.nextWord\n\n\nWhen you initialize the network with the first two words, the output state needs to be kept to represent the sequence of inputs. The predicted words and probabilities are ignored. They are ignored because the second word (Romeo) comes from the actual text instead of the model's prediction.\n\nHowever, once the two word prompt has been processed, the output nextWord is the most likely third word in the sentence. It will be used as the input word, to generate the fourth word in the sentence. Using the output as input is repeated to generate the rest of the sentence.\n\nListing 3 Using the next word prediction as the input word, to generate the rest of the sentence\n// Feed the next word and output state back into the network,\n// while the predicted word isn't the end of the sentence.\nwhile modelOutput.nextWord != \"</s>\" {\n    // Update the inputs from the network's output\n    modelInput.previousWord = modelOutput.nextWord\n    modelInput.stateIn = modelOutput.stateOut\n    // Predict the next word\n    modelOutput = try model.prediction(input: modelInput)\n}\n\n\nListing 3 repeats the process of using the predicted word and state as the input word and state until the predicted word is </s>. This network uses the string </s> to signify the end of the sentence.\n\nVerify the Output and Reset the Input State\n\nAt this point, the model has predicted the end of the sentence. The sequence of nextWord values represents the model's prediction for the entire sentence. The entire predicted sentence could be presented to the user for verification or compared to the actual text programmatically.\n\nReset the input context by using nil as the input state (as in Listing 1), to start making predictions on a new sentence.\n\nSee Also\nModel Inputs and Outputs\nclass MLFeatureValue\nA generic wrapper around an underlying value and the value’s type.\nprotocol MLFeatureProvider\nAn interface that represents a collection of values for either a model's input or its output.\nclass MLDictionaryFeatureProvider\nA convenience wrapper for the given dictionary of data.\nprotocol MLBatchProvider\nAn interface that represents a collection of feature providers.\nclass MLArrayBatchProvider\nA convenience wrapper for batches of feature providers.\nclass MLModelAsset\nAn abstraction of a compiled Core ML model asset."
  },
  {
    "title": "Model Customization | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/model_customization",
    "html": "Overview\n\nCustomize your Core ML model to make it work better for your specific app. For instance, create one or more custom layers to improve accuracy by increasing the model’s capacity to capture information. You can also reduce the model’s size to optimize the contents of your app bundle.\n\nTopics\nModel File Size\nReducing the Size of Your Core ML App\nReduce the storage used by the Core ML model inside your app bundle.\nCustom Model Layers\nCreating and Integrating a Model with Custom Layers\nAdd models with custom neural-network layers to your app.\nprotocol MLCustomLayer\nAn interface that defines the behavior of a custom layer in your neural network model.\nCustom Models\nprotocol MLCustomModel\nAn interface that defines the behavior of a custom model.\nSee Also\nCore ML Models\nGetting a Core ML Model\nObtain a Core ML model to use in your app.\nUpdating a Model File to a Model Package\nConvert a Core ML model file into a model package in Xcode.\nIntegrating a Core ML Model into Your App\nAdd a simple model to an app, pass input data to the model, and process the model’s predictions.\nclass MLModel\nAn encapsulation of all the details of your machine learning model.\nModel Personalization\nUpdate your model to adapt to new data."
  },
  {
    "title": "MLModel | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlmodel",
    "html": "Overview\n\nMLModel encapsulates a model’s prediction methods, configuration, and model description.\n\nIn most cases, you can use Core ML without accessing the MLModel class directly. Instead, use the programmer-friendly wrapper class that Xcode automatically generates when you add a model (see Integrating a Core ML Model into Your App). If your app needs the MLModel interface, use the wrapper class’s model property.\n\nWith the MLModel interface, you can:\n\nMake a prediction with your app’s custom MLFeatureProvider\n\nby calling prediction(from:) or prediction(from:options:).\n\nMake multiple predictions with your app’s custom MLBatchProvider\n\nby calling predictions(fromBatch:) or predictions(from:options:).\n\nInspect your model’s metadata and MLFeatureDescription instances through modelDescription.\n\nIf your app downloads and compiles a model on the user’s device, you must use the MLModel class directly to make predictions. See Downloading and Compiling a Model on the User’s Device.\n\nImportant\n\nUse an MLModel instance on one thread or one dispatch queue at a time. Do this by either serializing method calls to the model, or by creating a separate model instance for each thread and dispatch queue.\n\nTopics\nLoading a Model\nclass func load(contentsOf: URL, configuration: MLModelConfiguration) -> MLModel\nConstruct a model asynchronously from a compiled model asset.\nclass func load(MLModelAsset, configuration: MLModelConfiguration, completionHandler: (MLModel?, Error?) -> Void)\nConstruct a model asynchronously from a compiled model asset.\nclass func load(contentsOf: URL, configuration: MLModelConfiguration, completionHandler: (Result<MLModel, Error>) -> Void)\nCreates a Core ML model instance asynchronously from a compiled model file, a custom configuration, and a completion handler.\ninit(contentsOf: URL)\nCreates a Core ML model instance from a compiled model file.\ninit(contentsOf: URL, configuration: MLModelConfiguration)\nCreates a Core ML model instance from a compiled model file and a custom configuration.\nCompiling a Model\nclass func compileModel(at: URL) -> URL\nCompile a model for a device.\nclass func compileModel(at: URL, completionHandler: (Result<URL, Error>) -> Void)\nCompile a model for a device.\nclass func compileModel(at: URL) -> URL\nCompiles a model on the device to update the model in your app.\nDeprecated\nMaking Predictions\nfunc prediction(from: MLFeatureProvider) -> MLFeatureProvider\nGenerates a prediction from the feature values within the input feature provider.\nfunc prediction(from: MLFeatureProvider, options: MLPredictionOptions) -> MLFeatureProvider\nGenerates a prediction from the feature values within the input feature provider using the prediction options.\nfunc prediction(from: MLFeatureProvider, options: MLPredictionOptions) -> MLFeatureProvider\nGenerates a prediction asynchronously from the feature values within the input feature provider using the prediction options.\nfunc predictions(fromBatch: MLBatchProvider) -> MLBatchProvider\nGenerates predictions for each input feature provider within the batch provider.\nfunc predictions(from: MLBatchProvider, options: MLPredictionOptions) -> MLBatchProvider\nGenerates a prediction for each input feature provider within the batch provider using the prediction options.\nclass MLPredictionOptions\nThe options available when making a prediction.\nInspecting a Model\nstatic var availableComputeDevices: [MLComputeDevice]\nThe list of available compute devices that the model’s prediction methods use.\nvar configuration: MLModelConfiguration\nThe configuration of the model set during initialization.\nvar modelDescription: MLModelDescription\nModel information you use at runtime during development, which Xcode also displays in its Core ML model editor view.\nclass MLModelDescription\nInformation about a model, primarily the input and output format for each feature the model expects, and optional metadata.\nfunc parameterValue(for: MLParameterKey) -> Any\nReturns a model parameter value for a key.\nclass MLParameterKey\nThe keys for the parameter dictionary in a model configuration or a model update context.\nSupporting Types\nclass MLModelConfiguration\nThe settings for creating or updating a machine learning model.\nclass MLKey\nAn abstract base class for machine learning key types.\nRelationships\nInherits From\nNSObject\nSee Also\nCore ML Models\nGetting a Core ML Model\nObtain a Core ML model to use in your app.\nUpdating a Model File to a Model Package\nConvert a Core ML model file into a model package in Xcode.\nIntegrating a Core ML Model into Your App\nAdd a simple model to an app, pass input data to the model, and process the model’s predictions.\nModel Customization\nExpand and modify your model with new layers.\nModel Personalization\nUpdate your model to adapt to new data."
  },
  {
    "title": "Integrating a Core ML Model into Your App | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/integrating_a_core_ml_model_into_your_app",
    "html": "Overview\n\nThis sample app uses a trained model, MarsHabitatPricer.mlmodel, to predict habitat prices on Mars.\n\nAdd a Model to Your Xcode Project\n\nAdd the model to your Xcode project by dragging the model into the project navigator.\n\nYou can see information about the model—including the model type and its expected inputs and outputs—by opening the model in Xcode. In this sample, the inputs are the number of solar panels and greenhouses, as well as the lot size of the habitat (in acres). The output is the predicted price of the habitat.\n\nCreate the Model in Code\n\nXcode also uses information about the model’s inputs and outputs to automatically generate a custom programmatic interface to the model, which you use to interact with the model in your code. For MarsHabitatPricer.mlmodel, Xcode generates interfaces to represent the model (MarsHabitatPricer), the model’s inputs (MarsHabitatPricerInput), and the model’s output (MarsHabitatPricerOutput).\n\nUse the generated MarsHabitatPricer class’s initializer to create the model:\n\nlet model = MarsHabitatPricer()\n\nGet Input Values to Pass to the Model\n\nThis sample app uses a UIPickerView to get the model’s input values from the user:\n\nfunc selectedRow(for feature: Feature) -> Int {\n    return pickerView.selectedRow(inComponent: feature.rawValue)\n}\n\n\nlet solarPanels = pickerDataSource.value(for: selectedRow(for: .solarPanels), feature: .solarPanels)\nlet greenhouses = pickerDataSource.value(for: selectedRow(for: .greenhouses), feature: .greenhouses)\nlet size = pickerDataSource.value(for: selectedRow(for: .size), feature: .size)\n\nUse the Model to Make Predictions\n\nThe MarsHabitatPricer class has a generated prediction(solarPanels:greenhouses:size:) method that’s used to predict a price from the model’s input values—in this case, the number of solar panels, the number of greenhouses, and the size of the habitat (in acres). The result of this method is a MarsHabitatPricerOutput instance.\n\nguard let marsHabitatPricerOutput = try? model.prediction(solarPanels: solarPanels, greenhouses: greenhouses, size: size) else {\n    fatalError(\"Unexpected runtime error.\")\n}\n\n\nAccess the price property of marsHabitatPricerOutput to get a predicted price and display the result in the app’s UI.\n\nlet price = marsHabitatPricerOutput.price\npriceLabel.text = priceFormatter.string(for: price)\n\n\nNote\n\nThe generated prediction(solarPanels:greenhouses:size:) method can throw an error. The most common type of error you’ll encounter when working with Core ML occurs when the details of the input data don’t match the details the model is expecting—for example, an image in the wrong format.\n\nBuild and Run a Core ML App\n\nXcode compiles the Core ML model into a resource that’s been optimized to run on a device. This optimized representation of the model is included in your app bundle and is what’s used to make predictions while the app is running on a device.\n\nSee Also\nCore ML Models\nGetting a Core ML Model\nObtain a Core ML model to use in your app.\nUpdating a Model File to a Model Package\nConvert a Core ML model file into a model package in Xcode.\nclass MLModel\nAn encapsulation of all the details of your machine learning model.\nModel Customization\nExpand and modify your model with new layers.\nModel Personalization\nUpdate your model to adapt to new data."
  },
  {
    "title": "Getting a Core ML Model | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/getting_a_core_ml_model",
    "html": "Overview\n\nCore ML supports a variety of machine learning models, including neural networks, tree ensembles, support vector machines, and generalized linear models. Core ML requires the Core ML model format (models with a .mlmodel file extension).\n\nUsing Create ML and your own data, you can train custom models to perform tasks like recognizing images, extracting meaning from text, or finding relationships between numerical values. Models trained using Create ML are in the Core ML model format and are ready to use in your app.\n\nApple also provides several popular, open source models that are already in the Core ML model format. You can download these models and start using them in your app.\n\nAdditionally, various research groups and universities publish their models and training data, which may not be in the Core ML model format. Use Core ML Tools to convert these models to use in your app.\n\nSee Also\nCore ML Models\nUpdating a Model File to a Model Package\nConvert a Core ML model file into a model package in Xcode.\nIntegrating a Core ML Model into Your App\nAdd a simple model to an app, pass input data to the model, and process the model’s predictions.\nclass MLModel\nAn encapsulation of all the details of your machine learning model.\nModel Customization\nExpand and modify your model with new layers.\nModel Personalization\nUpdate your model to adapt to new data."
  },
  {
    "title": "Updating a Model File to a Model Package | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/updating_a_model_file_to_a_model_package",
    "html": "Overview\n\nA Core ML model package is a file-system structure that can store a model in separate files, similar to an app bundle. Model packages offer more flexibility and extensibility than Core ML model files, including editable metadata and separation of a model’s architecture from its weights and biases. Update your model file to a model package by converting the model in Xcode.\n\nOpen or select a Core ML model in Xcode and update it to an ML package by either clicking the Edit button or the Update to Model Package button in the Utilities tab.\n\nXcode presents a confirmation dialog before it converts the model to the ML package format. By default, Xcode moves the original model file to the Trash. You can keep your original model file by deselecting the checkbox in the Xcode dialog. Click Update and Edit when you’re ready to convert the model to a package.\n\nOnce Xcode finishes converting the model, it opens the model’s General tab, where you can edit any of the metadata text fields, including Description, Author, and License.\n\nYou can also add a new metadata field in an ML package by entering a new property name and value in the Additional Metadata section.\n\nSee Also\nCore ML Models\nGetting a Core ML Model\nObtain a Core ML model to use in your app.\nIntegrating a Core ML Model into Your App\nAdd a simple model to an app, pass input data to the model, and process the model’s predictions.\nclass MLModel\nAn encapsulation of all the details of your machine learning model.\nModel Customization\nExpand and modify your model with new layers.\nModel Personalization\nUpdate your model to adapt to new data."
  },
  {
    "title": "MLComputeDevice | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlcomputedevice",
    "html": "Topics\nDevice Types\ncase cpu(MLCPUComputeDevice)\nA device that represents a CPU compute device.\ncase gpu(MLGPUComputeDevice)\nA device that represents a GPU compute device.\ncase neuralEngine(MLNeuralEngineComputeDevice)\nA device that represents a Neural Engine compute device.\nGetting All Devices\nstatic var allComputeDevices: [MLComputeDevice]\nReturns an array that contains all of the compute devices that are accessible.\nInspecting a Compute Device\nvar description: String\nAccessing the Hash Value\nfunc hash(into: inout Hasher)\nHashes the essential components of the value by passing them into the hasher.\nvar hashValue: Int\nThe hash value.\nComparing Devices\nstatic func == (MLComputeDevice, MLComputeDevice) -> Bool\nReturns a Boolean value that indicates whether two values are equal.\nstatic func != (MLComputeDevice, MLComputeDevice) -> Bool\nReturns a Boolean value that indicates whether two values are not equal.\nRelationships\nConforms To\nCustomStringConvertible\nHashable\nSendable\nSee Also\nCompute Devices\nclass MLCPUComputeDevice\nAn object that represents a CPU compute device.\nclass MLGPUComputeDevice\nAn object that represents a GPU compute device.\nclass MLNeuralEngineComputeDevice\nAn object that represents a Neural Engine compute device.\nprotocol MLComputeDeviceProtocol\nAn interface that represents a compute device type."
  },
  {
    "title": "MLCPUComputeDevice | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlcpucomputedevice",
    "html": "Relationships\nInherits From\nNSObject\nConforms To\nMLComputeDeviceProtocol\nSendable\nSee Also\nCompute Devices\nenum MLComputeDevice\nCompute devices for framework operations.\nclass MLGPUComputeDevice\nAn object that represents a GPU compute device.\nclass MLNeuralEngineComputeDevice\nAn object that represents a Neural Engine compute device.\nprotocol MLComputeDeviceProtocol\nAn interface that represents a compute device type."
  },
  {
    "title": "MLArrayBatchProvider | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlarraybatchprovider",
    "html": "Overview\n\nThis batch provider supports an array of feature providers or a dictionary of arrays of feature values.\n\nTopics\nInitializers\ninit(array: [MLFeatureProvider])\nCreates the batch provider based on the array of feature providers.\ninit(dictionary: [String : [Any]])\nCreates a batch provider based on feature names and their associated arrays of data.\nAccessing the Feature Providers\nvar array: [MLFeatureProvider]\nThe array of feature providers.\nRelationships\nInherits From\nNSObject\nConforms To\nMLBatchProvider\nSee Also\nModel Inputs and Outputs\nMaking Predictions with a Sequence of Inputs\nIntegrate a recurrent neural network model to process sequences of inputs.\nclass MLFeatureValue\nA generic wrapper around an underlying value and the value’s type.\nprotocol MLFeatureProvider\nAn interface that represents a collection of values for either a model's input or its output.\nclass MLDictionaryFeatureProvider\nA convenience wrapper for the given dictionary of data.\nprotocol MLBatchProvider\nAn interface that represents a collection of feature providers.\nclass MLModelAsset\nAn abstraction of a compiled Core ML model asset."
  },
  {
    "title": "MLModelAsset | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlmodelasset",
    "html": "Overview\n\nMLModelAsset provides a unified interface by abstracting the compiled model representations for .mlmodelc files and in-memory representations.\n\nTo use an in-memory model, create MLModelAsset with an in-memory model specification, then call load(_:configuration:completionHandler:).\n\nTopics\nCreating a model asset\ninit(specification: Data)\nCreates a model asset from an in-memory model specification.\nRelationships\nInherits From\nNSObject\nSee Also\nModel Inputs and Outputs\nMaking Predictions with a Sequence of Inputs\nIntegrate a recurrent neural network model to process sequences of inputs.\nclass MLFeatureValue\nA generic wrapper around an underlying value and the value’s type.\nprotocol MLFeatureProvider\nAn interface that represents a collection of values for either a model's input or its output.\nclass MLDictionaryFeatureProvider\nA convenience wrapper for the given dictionary of data.\nprotocol MLBatchProvider\nAn interface that represents a collection of feature providers.\nclass MLArrayBatchProvider\nA convenience wrapper for batches of feature providers.\nRelated Documentation\nclass func load(MLModelAsset, configuration: MLModelConfiguration, completionHandler: (MLModel?, Error?) -> Void)\nConstruct a model asynchronously from a compiled model asset."
  },
  {
    "title": "MLBatchProvider | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml/mlbatchprovider",
    "html": "Overview\n\nSimilar to the MLFeatureProvider, this interface allows you to define your own batch provider. If you collect your data asynchronously or it is memory intensive, implement this protocol on your data structure to optimize performance with batch processing.\n\nTopics\nAccessing Values\nfunc features(at: Int) -> MLFeatureProvider\nReturns the feature provider at the given index.\n\nRequired\n\nvar count: Int\nThe number of feature providers in this batch.\n\nRequired\n\nRelationships\nConforming Types\nMLArrayBatchProvider\nSee Also\nModel Inputs and Outputs\nMaking Predictions with a Sequence of Inputs\nIntegrate a recurrent neural network model to process sequences of inputs.\nclass MLFeatureValue\nA generic wrapper around an underlying value and the value’s type.\nprotocol MLFeatureProvider\nAn interface that represents a collection of values for either a model's input or its output.\nclass MLDictionaryFeatureProvider\nA convenience wrapper for the given dictionary of data.\nclass MLArrayBatchProvider\nA convenience wrapper for batches of feature providers.\nclass MLModelAsset\nAn abstraction of a compiled Core ML model asset."
  },
  {
    "title": "Core ML | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coreml",
    "html": "Overview\n\nUse Core ML to integrate machine learning models into your app. Core ML provides a unified representation for all models. Your app uses Core ML APIs and user data to make predictions, and to train or fine-tune models, all on a person’s device.\n\nA model is the result of applying a machine learning algorithm to a set of training data. You use a model to make predictions based on new input data. Models can accomplish a wide variety of tasks that would be difficult or impractical to write in code. For example, you can train a model to categorize photos, or detect specific objects within a photo directly from its pixels.\n\nYou build and train a model with the Create ML app bundled with Xcode. Models trained using Create ML are in the Core ML model format and are ready to use in your app. Alternatively, you can use a wide variety of other machine learning libraries and then use Core ML Tools to convert the model into the Core ML format. Once a model is on a person’s device, you can use Core ML to retrain or fine-tune it on-device, with that person’s data.\n\nCore ML optimizes on-device performance by leveraging the CPU, GPU, and Neural Engine while minimizing its memory footprint and power consumption. Running a model strictly on a person’s device removes any need for a network connection, which helps keep a person’s data private and your app responsive.\n\nThe framework is the foundation for domain-specific frameworks and functionality. It supports Vision for analyzing images, Natural Language for processing text, Speech for converting audio to text, and Sound Analysis for identifying sounds in audio. Core ML itself builds on top of low-level primitives like Accelerate and BNNS, as well as Metal Performance Shaders.\n\nTopics\nCore ML Models\nGetting a Core ML Model\nObtain a Core ML model to use in your app.\nUpdating a Model File to a Model Package\nConvert a Core ML model file into a model package in Xcode.\nIntegrating a Core ML Model into Your App\nAdd a simple model to an app, pass input data to the model, and process the model’s predictions.\nclass MLModel\nAn encapsulation of all the details of your machine learning model.\nModel Customization\nExpand and modify your model with new layers.\nModel Personalization\nUpdate your model to adapt to new data.\nModel Inputs and Outputs\nMaking Predictions with a Sequence of Inputs\nIntegrate a recurrent neural network model to process sequences of inputs.\nclass MLFeatureValue\nA generic wrapper around an underlying value and the value’s type.\nprotocol MLFeatureProvider\nAn interface that represents a collection of values for either a model's input or its output.\nclass MLDictionaryFeatureProvider\nA convenience wrapper for the given dictionary of data.\nprotocol MLBatchProvider\nAn interface that represents a collection of feature providers.\nclass MLArrayBatchProvider\nA convenience wrapper for batches of feature providers.\nclass MLModelAsset\nAn abstraction of a compiled Core ML model asset.\nApp Integration\nDownloading and Compiling a Model on the User’s Device\nInstall Core ML models on the user’s device dynamically at runtime.\nModel Integration Samples\nIntegrate tabluar, image, and text classifcation models into your app.\nModel Encryption\nGenerating a Model Encryption Key\nCreate a model encryption key to encrypt a compiled model or model archive.\nEncrypting a Model in Your App\nEncrypt your app’s built-in model at compile time by adding a compiler flag.\nModel Deployments\nclass MLModelCollection\nA set of Core ML models from a model deployment.\nDeprecated\nCompute Devices\nenum MLComputeDevice\nCompute devices for framework operations.\nclass MLCPUComputeDevice\nAn object that represents a CPU compute device.\nclass MLGPUComputeDevice\nAn object that represents a GPU compute device.\nclass MLNeuralEngineComputeDevice\nAn object that represents a Neural Engine compute device.\nprotocol MLComputeDeviceProtocol\nAn interface that represents a compute device type.\nModel Errors\nstruct MLModelError\nInformation about a Core ML model error."
  }
]
